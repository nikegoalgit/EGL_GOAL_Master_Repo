package af01;

import af.common.AF5REC;
import af.common.AFWREC;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom4.XSPG201;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGACD;
import corpx1.XGATBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XSECD;
import corpx2.XSUCD;
import corpy2.YSNTBL;
import pg.common.PG1FCTCD;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1STNBR;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=AF01 ****
// This application is designed to accept and validate
// selection criteria intended to effect a global update on
// forecast dollars within Season Code/Season Year/Gender Age/
// Product Category/Silhouette/Style/Forecaster Code key
// combination. Updates can be set on Carryover or Non-Carry-
// over items, and the dollar forecast set to a determined
// percentage of the total current bookings. A parameter record
// containing the above information will be created and a batch
// job submitted to actually update the DACAST.VAFSTY01 db.
// 
// The above is not accurate.  The updating is now done online.
// Whomsoever did the change didnt make an entry in the maint
// log.  BAD PROGRAMMER!!!
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 09/11/89   JRAMOS   New application.
// 05-11-94   LREIN    Made '**' a valid owner group
// 02-17-95   kj       xsn-ysn
// 11-17-97   rgilli   Added code for testing of new Back Out
//                     procedures.
// *********************
Program AF01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF01W01 AF01W01; // record
  AF01W02 AF01W02; // record
  AF5REC AF5REC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use AF01M.AF01M001, // form
  AF01M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/
    ;
    set AF01W01 empty; /* Initialize working storage*/
    set AF01W02 empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set AF5REC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA6REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF01M001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF01"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    AF01W01.AF01WCON = "N"; /* update confirmed flag*/
    ;
    ;
                    /* (Assign Constants)*/
    ;
    XP1REC.XGPCD = "03"; /* Apparel GPC cd only*/
    XP1REC.XDVCD = "01"; /* Default division cd*/
    XP1REC.XDVDESC = "NIKE DOMESTIC"; /* Default division desc*/
    ;
    ;
                   /* (Assign Map Defaults)*/
    ;
    ;
    ;
    ;
       /* (Define Map Environment, Assign/Edit Defaults)*/
    ;
    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process number*/
    ;
    ;
                      /* (Set Map Item Values)*/
    ;
    AF01M001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/
     /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
     /* This code has been placed in here for testing Back Out Procedures*/
     /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
    AF01M001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/
     /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
    ;
    ;
                      /* (Process Passed Items)*/
    ;
    AF01M001.XXXUSER = XP1REC.XXXUSER; /* Fcster code to map*/
    AF01M001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    AF01M001.XSNYR = XP1REC.XSNYR; /* Season yr to map*/
    AF01M001.XPRCD = XP1REC.XPRCD; /* Product type cd to map*/
    AF01M001.XGACD = XP1REC.XGACD; /* Gender age cd to map*/
    AF01M001.XPLCD = XP1REC.XPLCD; /* Product line cd to map*/
    AF01M001.XPCCD = XP1REC.XPCCD; /* Category cd to map*/
    AF01M001.XSUCD = XP1REC.XSUCD; /* Silhouette cd to map*/
    AF01M001.XDVCD = XP1REC.XDVCD; /* Division cd to map*/
    AF01M001.XDVDESC = XP1REC.XDVDESC; /* Division desc to map*/
    AF01M001.SY1STNBR = XP1REC.SY1STNBR; /* Style no. to map*/
    ;
    XP1REC.XSECD = " "; /* Clear Season cd*/
    XP1REC.XSNYR = 0; /* Clear Season yr*/
    XP1REC.XPRCD = " "; /* Clear Product type cd*/
    XP1REC.XGACD = " "; /* Clear Gender age cd*/
    XP1REC.XPLCD = " "; /* Clear Product line cd*/
    XP1REC.XPCCD = " "; /* Clear Category cd*/
    XP1REC.XSUCD = " "; /* Clear Silhouette cd*/
    ;
    ;
                      /* (Set Cursor Position)*/
    ;
    set AF01M001.XSECD cursor; /* Cursor at XSECD field*/
    ;
    ;
                      /* (Converse Main Process)*/
    ;
    goto AF01001; /* Main Process*/
    ;
    ;
    ;
    AF01001: AF01001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Global Season/Style Dollar Fcst Appl*/
     /* ------------------------------------------------------------*/
    ;
    goto AF01001;
    ;
    ;
  end // end main
end // end AF01

// Choose which map to display
Function AF01001()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display (NOT REQUIRED FOR THIS APPL)*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF01120(); /* Format and display the map*/
  ;
  AF01130(); /* Check attention identifier*/
  ;
  AF01140(); /* Reset fields to normal intensity*/
  ;
  AF01150(); /* Verify the entered data*/
  ;
  AF01160(); /* Process valid input request*/
  ;
  ;
  ;
  ;
end // end AF01001

// Format and display the map
Function AF01120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.AFWFIRST != " ") /* Not the first time*/
    ;
    if (AF01W01.AF01WPND != "Y") /* No pop-up windows active*/
      ;
      if (converseVar.validationMsgNum == 0) /* No error found*/
        ;
        AF01121(); /* Format the data on the map*/
        ;
      else
        ;
        AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF01M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF01M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF01M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF01M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF01M001 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  ;
  converse AF01M001 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF01M001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF01M001.CAITEM; /* Application data*/
  ;
end // end AF01120

// Format map data
Function AF01121()
  ;
   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/
  ;
  set AF01M001 initial; /* M001 input/output area*/
  ;
  ;
  ;
   /* *============================**/
   /* *  Format Map Header/Detail  **/
   /* *============================**/
  ;
            /* (Format Header Selection Flds)*/
  AF01M001.XXXUSER = AF01W01.AF01WFCT; /* Forecaster id*/
  AF01M001.XSECD = XP1REC.XSECD; /* Season cd*/
  AF01M001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF01M001.XDVCD = XP1REC.XDVCD; /* DIV cd*/
  AF01M001.XPRCD = XP1REC.XPRCD; /* XPR cd*/
  AF01M001.XGACD = XP1REC.XGACD; /* G/A cd*/
  AF01M001.XPLCD = XP1REC.XPLCD; /* XPL cd*/
  AF01M001.XPCCD = XP1REC.XPCCD; /* CAT cd*/
  AF01M001.XSUCD = XP1REC.XSUCD; /* SIL cd*/
  AF01M001.XOWCD = XP1REC.XOWCD; /* owner group cd*/
  AF01M001.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  ;
  AF01M001.XDVDESC = XP1REC.XDVDESC; /* XDV desc*/
  AF01M001.XPRDESC = XP1REC.XPRDESC; /* XPR desc*/
  AF01M001.XGADESC = XP1REC.XGADESC; /* G/A desc*/
  AF01M001.XPLDESC = XP1REC.XPLDESC; /* XPL desc*/
  AF01M001.XPCDESC = XP1REC.XPCDESC; /* XPC desc*/
  AF01M001.XSUDESC = XP1REC.XSUDESC; /* XSU desc*/
  AF01M001.XOWDESC = XP1REC.XOWDESC; /* XOW desc*/
  AF01M001.SY1STYNM = XP1REC.SY1STYNM; /* Style no.*/
  ;
               /* (Format Map Detail Flds)*/
  AF01M001.AF01MABF = AF01W01.AF01WABF; /* additional buy flag*/
  AF01M001.AF01MAFU = AF01W01.AF01WAFU; /* additional buy flag updt parm*/
  ;
  ;
  ;
   /* *=======================**/
   /* *  Set Cursor Position  **/
   /* *=======================**/
  ;
  set AF01M001.XSECD cursor; /* Cursor at XSECD field*/
  ;
  ;
  ;
end // end AF01121

// Check Attention Identifier
Function AF01130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF01M001 initial; /* Clear the map fields*/
    ;
    AF01W01.AF01WCON = "N"; /* reset update flag*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AF01M001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF01M001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF01M001.CAITEM > " ") /* Application data was entered*/
    set AF01M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF01M001"; /* Appl find code*/
    end
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AFWREC.AFWFIRST == " ") /* First time through*/
    ;
    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF01130

// Reset Hilght Flds; Disp Pop-up
Function AF01140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to defined state.*/
   /* ------------------------------------------------------------*/
  ;
  set AF01M001.XXXUSER initialAttributes; /* Forecaster id*/
  set AF01M001.XSECD initialAttributes; /* Sesn cd*/
  set AF01M001.XSNYR initialAttributes; /* Sesn yr*/
  set AF01M001.XDVCD initialAttributes; /* Division cd*/
  set AF01M001.XPRCD initialAttributes; /* Product Type cd*/
  set AF01M001.XGACD initialAttributes; /* Gender Age cd*/
  set AF01M001.XPLCD initialAttributes; /* Product Line cd*/
  set AF01M001.XPCCD initialAttributes; /* Category cd*/
  set AF01M001.XSUCD initialAttributes; /* Silhouette cd*/
  set AF01M001.XOWCD initialAttributes; /* Owner group cd*/
  set AF01M001.SY1STNBR initialAttributes; /* Style no.*/
  set AF01M001.AF01MABF initialAttributes; /* addntl buy flag*/
  set AF01M001.AF01MAFU initialAttributes; /* addntl buy flag update parameter*/
  AF01M001.XXXPRCNM = "AF01    "; /* Reset process name*/
  set AF01M001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF01M001.CAITEM initialAttributes; /* Commarea application data*/
  ;
   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/
  ;
  if (AF01M001.XSECD == "?" /* Season cd*/
   || AF01M001.XDVCD == "?" /* Division cd*/
   || AF01M001.XPRCD == "?" /* Product Type cd*/
   || AF01M001.XGACD == "?" /* Gender/Age cd*/
   || AF01M001.XPLCD == "?" /* Product Line cd*/
   || AF01M001.XPCCD == "?" /* Category cd*/
   || AF01M001.XSUCD == "?" /* Silhouette cd*/
   || AF01M001.XOWCD == "?") /* Owner group cd*/
    ;
    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    AF01W01.AF01WPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season cd*/
   /* *============================**/
  ;
  if (AF01M001.XSECD == "?") /* Pop-up window requested*/
    XP1REC.XSECD = AF01M001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSSE(); /* Pop-up window func requested*/
    AF01M001.XSECD = XP1REC.XSECD; /* Move selection to map fld*/
    XP1REC.XSECD = " "; /* Space out wk area*/
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XDVCD   * Division cd*/
   /* *============================**/
  ;
  if (AF01M001.XDVCD == "?") /* Pop-up window requested*/
    XP1REC.XDVCD = AF01M001.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSDV(); /* Pop-up window func requested*/
    AF01M001.XDVCD = XP1REC.XDVCD; /* Move selection to map fld*/
    XP1REC.XDVCD = " "; /* Space out wk area*/
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product Line cd*/
   /* *============================**/
  ;
  if (AF01M001.XPRCD == "?") /* Pop-up window requested*/
    XP1REC.XPRCD = AF01M001.XPRCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPR(); /* Pop-up window func requested*/
    AF01M001.XPRCD = XP1REC.XPRCD; /* Move selection to map fld*/
    XP1REC.XPRCD = " "; /* Space out wk area*/
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/
  ;
  if (AF01M001.XGACD == "?") /* Pop-up window requested*/
    XP1REC.XGACD = AF01M001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSGA(); /* Pop-up window func requested*/
    AF01M001.XGACD = XP1REC.XGACD; /* Move selection to map fld*/
    XP1REC.XGACD = " "; /* Space out wk area*/
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product Line cd*/
   /* *============================**/
  ;
  if (AF01M001.XPLCD == "?") /* Pop-up window requested*/
    XP1REC.XPLCD = AF01M001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPL(); /* Pop-up window func requested*/
    AF01M001.XPLCD = XP1REC.XPLCD; /* Move selection to map fld*/
    XP1REC.XPLCD = " "; /* Space out wk area*/
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/
  ;
  if (AF01M001.XPCCD == "?") /* Pop-up window requested*/
    XP1REC.XPCCD = AF01M001.XPCCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPC(); /* Pop-up window func requested*/
    AF01M001.XPCCD = XP1REC.XPCCD; /* Move selection to map fld*/
    XP1REC.XPCCD = " "; /* Space out wk area*/
  end
  ;
   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Silhouette cd*/
   /* *=============================**/
  ;
  if (AF01M001.XSUCD == "?") /* Pop-up window requested*/
    XP1REC.XSUCD = AF01M001.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSSU(); /* Pop-up window func requested*/
    AF01M001.XSUCD = XP1REC.XSUCD; /* Move selection to map*/
    XP1REC.XSUCD = " "; /* Space out wk area*/
  end
  ;
   /* *=============================**/
   /* *  Pop-up Window for XOWCD    * Owner group cd*/
   /* *=============================**/
  ;
  if (AF01M001.XOWCD == "?") /* Pop-up window requested*/
    XP1REC.XSUCD = AF01M001.XSUCD; /* Set XP1REC field*/
    XP1REC.XOWCD = "51"; /* Display Apparel only*/
    XSAFSOW(); /* Pop-up window func requested*/
    AF01M001.XOWCD = XP1REC.XOWCD; /* Move selection to map*/
    XP1REC.XOWCD = " "; /* Space out wk area*/
  end
  ;
   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/
  ;
  converseLib.clearScreen();
   /* Reset screen before display*/
  AF01W01.AF01WPND = "Y"; /* Activate pop-up window ind*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF01140

// Verify the entered data
Function AF01150()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF01152(); /* Verify map input data*/
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors found*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  else
    ;
      /* (Process valid request)*/
    ;
  end
  ;
  ;
  ;
end // end AF01150

// Edit selection criteria
Function AF01152()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* *****        Validate all map input fields             ******/
   /* *****                                                  ******/
   /* *************************************************************/
  ;
  AFWREC.AFWFIRST = "N"; /* First Pass switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* Initialize msg hold area*/
  ;
   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/
  ;
  if (XP1REC.SY1STNBR != AF01M001.SY1STNBR
   || XP1REC.XSNYR != AF01M001.XSNYR
   || XP1REC.XSECD != AF01M001.XSECD
   || XP1REC.XDVCD != AF01M001.XDVCD
   || XP1REC.XPRCD != AF01M001.XPRCD
   || XP1REC.XPLCD != AF01M001.XPLCD
   || XP1REC.XPCCD != AF01M001.XPCCD
   || XP1REC.XSUCD != AF01M001.XSUCD
   || XP1REC.XOWCD != AF01M001.XOWCD
   || AF01W01.AF01WABF != AF01M001.AF01MABF
   || AF01W01.AF01WAFU != AF01M001.AF01MAFU)
    AF01W01.AF01WCON = "N"; /* cancel update*/
  end
  ;
  AF01S01(); /* Edit Addntl Buy Flg Update parm*/
  AF01S02(); /* Edit Addntl Buy Flag Selection*/
  AF01S03(); /* Edit style no.*/
  AF01S17(); /* Edit owner group cd*/
  AF01S04(); /* Edit silhouette cd*/
  AF01S05(); /* Edit category cd*/
  AF01S11(); /* Edit product type cd*/
  AF01S06(); /* Edit gender/age cd*/
  AF01S12(); /* Edit product line cd*/
  AF01S13(); /* Edit division cd*/
  AF01S07(); /* Edit season yr*/
  AF01S08(); /* Edit season cd*/
  AF01S09(); /* Edit forecaster cd*/
  ;
   /* *=================================**/
   /* *  Check Validation Error Status  **/
   /* *=================================**/
  ;
  if (XP1REC.XP1MNO != 0) /* Style/Size error present*/
    AF01W01.AF01WCON = "N"; /* cancel update*/
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
  end
  ;
  ;
  ;
end // end AF01152

// Process Valid Request
Function AF01160()
   /* --------------------------------------------------------*/
   /* --------------------------------------------------------*/
   /* This process will create a cursor based on the verified*/
   /* criteria.  The cursor will then be processed and all the*/
   /* rows in the cursor will have the addtnl buy flag field*/
   /* updated according to the update parameters.*/
   /* ---------------------------------------------------------*/
   /* ---------------------------------------------------------*/
  ;
  if (AF01W01.AF01WCON == "N")
    converseLib.validationFailed(64);
    AF01W01.AF01WCON = "Y";
    return;
  end
  ;
  AF01161(); /* declare cursor*/
  XX0XS01();
  AF01W01.AF01WEOC = "N"; /* not end of cursor*/
  AF01S14(); /* select from cursor*/
  ;
  if (AF01W01.AF01WEOC == "Y") /* end of file first read*/
    converseLib.validationFailed(15);
  end
  ;
  AF01W01.AF01WRUP = "N"; /* no updates done*/
  ;
  while (AF01W01.AF01WEOC == "N")
    AF01162(); /* process cursor*/
  end
  ;
  if (AF01W01.AF01WRUP == "N") /* was not process or was processed and*/
    converseLib.validationFailed(15); /* no records were updated*/
  end
  ;
  AF01163(); /* close cursor*/
  ;
  ;
end // end AF01160

// declare cursor for Afclr01
Function AF01161()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set AF5REC empty; /* Reset rec work area*/
  ;
  AF5REC.XSECD = XP1REC.XSECD; /* Season cd key*/
  AF5REC.XSNYR = AF01W01.AF01WXSY; /* Season yr key*/
  AF5REC.XDVCD = XP1REC.XDVCD; /* Division cd key*/
  ;
  AF5REC.XPRCD = "*"; /* product type*/
  AF5REC.XPLCD = "*"; /* product line*/
  AF5REC.XPCCD = "*"; /* product catag*/
  AF5REC.SY1STNBR = "*"; /* Style no. key*/
  AF5REC.XDMCD = "*"; /* Dimension cd key*/
  ;
  AF5REC.SY2CLRID = "*"; /* COLOR*/
  AF5REC.XOWCD = "*"; /* Owner Group*/
  AF5REC.XDVCD = "*"; /* Division*/
  AF5REC.PG1SC4CD = "*"; /* Division*/
  ;
  if (XP1REC.XPRCD > " ")
    AF5REC.XPRCD = XP1REC.XPRCD; /* product type*/
  end
  ;
  if (XP1REC.XPLCD > " ")
    AF5REC.XPLCD = XP1REC.XPLCD; /* product line*/
  end
  ;
  if (XP1REC.XPCCD > " ")
    AF5REC.XPCCD = XP1REC.XPCCD; /* product catag*/
  end
  ;
  if (XP1REC.XOWCD > " ")
    AF5REC.XOWCD = XP1REC.XOWCD; /* owner group code*/
  end
  ;
  if (XP1REC.SY1STNBR > " ")
    AF5REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no. key*/
  end
  ;
  AF5REC.AF5CLBFL = AF01W01.AF01WABF;
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFCLR01  **/
   /* *====================================**/
  ;
  try
    call "IO3520" ("S3", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "161 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF01M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AF01161

// Process DACAST.VAFCLR01
Function AF01162()
  ;
  ;
  if (XP1REC.XGACD == " "
   && XP1REC.PG1FCTCD == " "
   && XP1REC.XSUCD == " ")
    AF01W01.AF01WUPD = "Y"; /* row already qualifies*/
  else
    AF01W01.AF01WUPD = "N"; /* not qualified yet*/
    AF01S15(); /* qualify row for update*/
  end
  ;
  if (AF01W01.AF01WUPD == "Y") /* row qualified*/
    AF01S16();
  end
  ;
  AF01S14(); /* SELECT NEXT ROW FOR PROCESSING*/
  ;
end // end AF01162

// Close AFCLR01 cursor
Function AF01163()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3520" ("C3", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "163 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF01M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF01163

// Edit Addntl Buy Flg updte parm
Function AF01S01()
  ;
  AF01W01.AF01WAFU = AF01M001.AF01MAFU; /* save to wk map storage*/
  ;
  ;
  if (AF01M001.AF01MAFU != "Y"
   && AF01M001.AF01MAFU != "N"
   && AF01M001.AF01MAFU != "C")
    ;
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S01 "; /* Process number*/
    set AF01M001.AF01MAFU cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 93; /* indicate error message*/
    AF01W01.AF01WAFU = " "; /* Space out flag*/
    ;
    ;
  end
  ;
  ;
  ;
end // end AF01S01

// Edit Addntl Buy Flg Selection
Function AF01S02()
  ;
  AF01W01.AF01WABF = AF01M001.AF01MABF; /* save to wk map storage*/
  ;
  ;
  if (AF01M001.AF01MABF != "Y"
   && AF01M001.AF01MABF != "N"
   && AF01M001.AF01MABF != "C")
    ;
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S02 "; /* Process number*/
    set AF01M001.AF01MABF cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 93; /* indicate error message*/
    AF01W01.AF01WABF = " "; /* Space out flag*/
    ;
    ;
  end
  ;
  ;
  ;
end // end AF01S02

// Edit style no.
Function AF01S03()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'XSPG201' call.*/
   /* If not found, indicate an edit error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/
  ;
  if (AF01M001.SY1STNBR == " ") /* Style = spaces*/
    XP1REC.SY1STNBR = " "; /* Move to wk storage*/
    XP1REC.SY1STYNM = " "; /* Move to wk storage*/
    AF01M001.SY1STYNM = " "; /* Move to map storage*/
    return; /* Exit to calling process*/
  end
  ;
  ;
  XP1REC.SY1STNBR = AF01M001.SY1STNBR; /* Save to wk fld*/
  ;
  ;
   /* *=======================================**/
   /* *  Get Style Row from  DPRODG.VSYCLR01  **/
   /* *=======================================**/
  ;
  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF01M001.SY1STNBR; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF01V22"; /* Process name*/
  ;
  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/
  ;
  ;
  ;
   /* *==========================**/
   /* *  Check Retrieval Status  **/
   /* *==========================**/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
    ;
                   /* (Field is valid)*/
    AF01M001.SY1STYNM = PG2REC.SY1STYNM; /* Style name to map*/
    XP1REC.SY1STYNM = PG2REC.SY1STYNM; /* Style name to wk area*/
    ;
  else
    ;
                  /* (Field in error)*/
    set AF01M001.SY1STNBR cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate not found*/
    AFWREC.AFWPRCSN = "S03 "; /* Process number*/
    XP1REC.SY1STNBR = " "; /* Move to wk storage*/
    XP1REC.SY1STYNM = " "; /* Move to wk storage*/
    AF01M001.SY1STYNM = " "; /* Move to map storage*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  ;
end // end AF01S03

// Edit silhouette cd
Function AF01S04()
  ;
  XP1REC.XSUCD = AF01M001.XSUCD; /* save to wk map storage*/
  ;
  if (AF01M001.XSUCD == " ") /* XSUCD eq spaces*/
    XP1REC.XSUCD = " "; /* Space-out code*/
    XP1REC.XSUDESC = " "; /* Space-out ws desc*/
    AF01M001.XSUDESC = " "; /* Space-out map desc*/
    return; /* Return to calling process*/
  end
  ;
  ;
  if (AF01M001.XSUCD in XSUTBL.XSUCD)
    ;
    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      XP1REC.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex]; /* To wk storage*/
      AF01M001.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S04 "; /* Process number*/
  set AF01M001.XSUCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  XP1REC.XSUCD = " "; /* Space out code*/
  XP1REC.XSUDESC = " "; /* Space out desc*/
  AF01M001.XSUDESC = " "; /* Space out desc*/
  ;
  ;
end // end AF01S04

// Edit category cd
Function AF01S05()
  ;
  XP1REC.XPCCD = AF01M001.XPCCD; /* save to wk map storage*/
  ;
  if (AF01M001.XPCCD == " ") /* XPCCD eq spaces*/
    XP1REC.XPCCD = " "; /* space out code*/
    XP1REC.XPCDESC = " "; /* space wk desc*/
    AF01M001.XPCDESC = " "; /* space map desc*/
    return; /* Return to calling process*/
  end
  ;
  ;
  if (AF01M001.XPCCD in XPCTBL.XPCCD)
    ;
    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (category in XPCTBL)*/
      XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex]; /* To wk storage*/
      AF01M001.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex]; /* To map*/
      ;
      if (AF01M001.XPCCD == "XA") /* Check for special makeups*/
        AFWREC.AFWPRCSN = "S05 "; /* Process number*/
        set AF01M001.XPCCD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 35; /* indicate error message*/
      end
      ;
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  set AF01M001.XPCCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 35; /* indicate error message*/
  XP1REC.XPCCD = " "; /* Space out code*/
  XP1REC.XPCDESC = " "; /* Space out save desc*/
  AF01M001.XPCDESC = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF01S05

// Edit gender/Age cd
Function AF01S06()
  ;
  XP1REC.XGACD = AF01M001.XGACD; /* save to wk map storage*/
  ;
  if (AF01M001.XGACD == " ") /* XGACD eq spaces*/
    XP1REC.XGACD = " "; /* Space out code*/
    XP1REC.XGADESC = " "; /* Space out wk desc*/
    AF01M001.XGADESC = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  ;
  if (AF01M001.XGACD in XGATBL.XGACD)
    ;
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XGATBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      ;
                   /* (Field is Valid)*/
      XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* To wk storage*/
      AF01M001.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S06 "; /* Process number*/
  set AF01M001.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  XP1REC.XGACD = " "; /* Space out code*/
  XP1REC.XGADESC = " "; /* Space out save desc*/
  AF01M001.XGADESC = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF01S06

// Edit season yr
Function AF01S07()
  ;
  ;
  AF01W01.AF01WXSY = 0; /* initialize xsnyr wk area*/
  AF01W01.AF01WXSY = AF01M001.XSNYR; /* move to wk area*/
  AF01W01.AF01WXSY = AF01W01.AF01WXSY + 1900; /* move century*/
  ;
  ;
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF01W01.AF01WXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF01M001.XSNYR; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S07 "; /* Process number*/
  set AF01M001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/
  ;
end // end AF01S07

// Edit season cd
Function AF01S08()
  ;
  if (AF01M001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF01M001.XSECD; /* save to working storage*/
    ;
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S08 "; /* Process number*/
    set AF01M001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/
    ;
  end
  ;
  AF01W01.AF01WXSS = " "; /* Initialize wk area*/
  AF01W01.AF01WXYR = +0; /* Initialize wk area*/
  ;
  AF01W01.AF01WXSS = XP1REC.XSECD; /* To XSECD wk area*/
  AF01W01.AF01WXYR = XP1REC.XSNYR; /* Format wk area*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF01W01.AF01WXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF01M001.XSNYR; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S08 "; /* Process number*/
  set AF01M001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/
  ;
end // end AF01S08

// Edit forecaster cd
Function AF01S09()
   /* *====================================**/
    /* Check Forecaster Userid for Spaces  **/
   /* *====================================**/
  ;
  if (AF01M001.XXXUSER == " ") /* Forecaster cd = spaces*/
    AF01W01.AF01WFCT = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out Forecaster cd*/
    return; /* Return to calling process*/
  end
  ;
  ;
  AF01W01.AF01WFCT = AF01M001.XXXUSER; /* Move to wk map storage*/
  ;
  ;
   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/
  ;
  set PG1REC empty; /* Clear row storage area*/
  ;
  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF01M001.XXXUSER; /* Forecaster id*/
  ;
  ;
   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/
  ;
  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF01M001.XXXUSER cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S09 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      AF01W01.AF01WFCT = " "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/
      ;
      /* ***** EXIT PROCESS HERE ******/
      ;
    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AFWREC.AFWPRCSN = "S09 "; /* Process number*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          AFWREC.AFWPRCSN = "S09 "; /* Process number*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          AF01W01.AF01WFCT = AF01M001.XXXUSER; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/
          ;
          /* ***** EXIT PROCESS HERE ******/
          ;
        end
      end
    end
  end
  ;
   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF01V33"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF01M001.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Return to previous process*/
  ;
  ;
  ;
end // end AF01S09

// Edit product line cd
Function AF01S11()
  XP1REC.XPLCD = AF01M001.XPLCD; /* save to wk map storage*/
  ;
  if (AF01M001.XPLCD == " ") /* XPLCD eq spaces*/
    XP1REC.XPLCD = " "; /* Space out code*/
    XP1REC.XPLDESC = " "; /* Space out wk desc*/
    AF01M001.XPLDESC = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  ;
  if (AF01M001.XPLCD in XPLTBL.XPLCD)
    ;
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      ;
                   /* (Field is Valid)*/
      XP1REC.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex]; /* To wk storage*/
      AF01M001.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S11 "; /* Process number*/
  set AF01M001.XPLCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  XP1REC.XPLCD = " "; /* Space out code*/
  XP1REC.XPLDESC = " "; /* Space out save desc*/
  AF01M001.XPLDESC = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF01S11

// Edit product type cd
Function AF01S12()
  XP1REC.XPRCD = AF01M001.XPRCD; /* save to wk map storage*/
  ;
  if (AF01M001.XPRCD == " ") /* XPrCD eq spaces*/
    XP1REC.XPRCD = " "; /* Space out code*/
    XP1REC.XPRDESC = " "; /* Space out wk desc*/
    AF01M001.XPRDESC = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  ;
  if (AF01M001.XPRCD in XPRTBL.XPRCD)
    ;
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      ;
                   /* (Field is Valid)*/
      XP1REC.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex]; /* To wk storage*/
      AF01M001.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S12 "; /* Process number*/
  set AF01M001.XPRCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 80; /* indicate error message*/
  XP1REC.XPRCD = " "; /* Space out code*/
  XP1REC.XPRDESC = " "; /* Space out save desc*/
  AF01M001.XPRDESC = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF01S12

// Edit division cd
Function AF01S13()
  XP1REC.XDVCD = AF01M001.XDVCD; /* save to wk map storage*/
  ;
  if (AF01M001.XDVCD == " ") /* XDVCD eq spaces*/
    AFWREC.AFWPRCSN = "S13 "; /* Process number*/
    set AF01M001.XDVCD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 29; /* indicate error message*/
    XP1REC.XDVCD = " "; /* Space out code*/
    XP1REC.XDVDESC = " "; /* Space out save desc*/
    AF01M001.XDVDESC = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  ;
  if (AF01M001.XDVCD in XDVTBL.XDVCD)
    ;
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || XDVTBL.XDVCD[sysVar.arrayIndex] == "05")
      ;
                   /* (Field is Valid)*/
      XP1REC.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex]; /* To wk storage*/
      AF01M001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S13 "; /* Process number*/
  set AF01M001.XDVCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  XP1REC.XDVCD = " "; /* Space out code*/
  XP1REC.XDVDESC = " "; /* Space out save desc*/
  AF01M001.XDVDESC = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF01S13

// fetch next record
Function AF01S14()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* For all rows retrieved, store data into program arrays.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/
  ;
  try
    call "IO3520" ("N3", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If call sucessful, store style/size data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Loop through*/
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        ;
        AF01W01.AF01WEOC = "Y"; /* Force loop termination.*/
        ;
        return; /* Return to calling process*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF01M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF01S14

// Qualify Row
Function AF01S15()
  ;
   /* ------------------------------------------------------------*/
   /* SINCE NOT ALL THE REQUESTED SELECTION CRITERIA IS STORED*/
   /* ON THE DACAST.VAFCLR01 VIEW WE MUST QUALIFY THE ROW BY*/
   /* VERIFYING WITH DPRODG.VSYCLR01*/
  ;
   /* ------------------------------------------------------------*/
  ;
  ;
  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF5REC.SY1STNBR; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF01R06"; /* Process name*/
  ;
  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
    AF01W01.AF01WUPD = "Y";
    XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* Save style name*/
    XP1REC.SY2CLRID = PG2REC.SY2CLRID; /* Save color cd*/
    if (XP1REC.PG1FCTCD != " ")
      if (PG2REC.PG1FCTCD != XP1REC.PG1FCTCD)
        AF01W01.AF01WUPD = "N";
      end
    end
    if (XP1REC.XGACD != " ")
      if (PG2REC.XGACD != XP1REC.XGACD)
        AF01W01.AF01WUPD = "N";
      end
    end
    if (XP1REC.XSUCD != " ")
      if (PG2REC.XSUCD != XP1REC.XSUCD)
        AF01W01.AF01WUPD = "N";
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end AF01S15

// Update DACAST.VAFCLR01
Function AF01S16()
  ;
  ;
   /* ------------------------------------------------------------*/
          /* ** Update DACAST.VAFCLR01 row ***/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==========================**/
   /* *  Build DB Output Record  **/
   /* *==========================**/
   /* ---------------------------------------------------*/
   /* Since all the information needed for the update is*/
   /* already in af5rec we need only update the flag*/
   /* ___________________________________________________*/
  ;
  AF5REC.AF5CLBFL = AF01W01.AF01WAFU; /* additional buy flag update*/
  ;
  AF5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AF5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  ;
   /* *==============================**/
   /* *  Update DACAST.VAFclr01 Row  **/
   /* *==============================**/
  ;
  try
    call "IO3520" ("U ", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    converseLib.validationFailed(13);
    AF01W01.AF01WRUP = "Y"; /* a row has been updated*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S16 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF01M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF01S16

// Edit owner group cd
Function AF01S17()
  if (AF01M001.XOWCD == XP1REC.XOWCD) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end
  ;
  if (AF01M001.XOWCD == "**") /* Map fld eq spaces*/
    XP1REC.XOWCD = "**"; /* Space out save fld*/
    XP1REC.XOWDESC = "CORP"; /* Space out save desc*/
    AF01M001.XOWDESC = "CORP"; /* Space out map desc*/
    return; /* Return to calling process*/
  else
    ;
    if (AF01M001.XOWCD == " ") /* Map fld eq spaces*/
      XP1REC.XOWCD = " "; /* Space out save fld*/
      XP1REC.XOWDESC = " "; /* Space out save desc*/
      AF01M001.XOWDESC = " "; /* Space out map desc*/
      return; /* Return to calling process*/
    else
      ;
      XP1REC.XWHCD = "51";
      XP1REC.XOWCD = AF01M001.XOWCD;
      ;
      if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
        XP1REC.XOWCD = AF01M001.XOWCD; /* save to wk storage*/
        AF01M001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex]; /* To wk map*/
        XP1REC.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      end
    end
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S22 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  set AF01M001.XOWCD cursor, bold; /* highlight field*/
  XP1REC.XOWCD = " "; /* Space out save code*/
  XP1REC.XOWDESC = " "; /* Space out save desc*/
  AF01M001.XOWDESC = " "; /* Space out save desc*/
  ;
  ;
  ;
end // end AF01S17

//*** RECORD=AF01W01 ****
// Working Storage (1) for AF0W - Program-defined Variables
// ***********************
Record AF01W01 type basicRecord
  10 AF01WABF AF01WABF ; 
  10 AF01WAFU AF01WAFU ; 
  10 AF01WUPD AF01WUPD ; 
  10 AF01WRUP AF01WRUP ; 
  10 AF01WCON AF01WCON ; 
  10 AF01WEOC AF01WEOC ; 
  10 AF01WFCT AF01WFCT ; 
  10 AF01WPND AF01WPND ; 
  10 AF01WBPC AF01WBPC ; 
  10 AF01WXSY AF01WXSY ; 
  10 AF01WXSA AF01WXSA ; 
    15 AF01WXSS AF01WXSS ; 
    15 AF01WXYR AF01WXYR ; 
end // end AF01W01

//*** RECORD=AF01W02 ****
// Working Storage (4) for AF0L - Parameter Work Area
// ***********************
Record AF01W02 type basicRecord
  5 AF01WJCL AF01WJCL ; 
    10 XSECD XSECD ; 
    10 AF01WXSN AF01WXSN ; 
    10 XDVCD XDVCD ; 
    10 XPRCD XPRCD ; 
    10 XGACD XGACD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 XSUCD XSUCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 PG1FCTCD PG1FCTCD ; 
    10 AF01WABF AF01WABF ; 
    10 AF01WAFU AF01WAFU ; 
    10 AF01WFIL AF01WFIL ; 
end // end AF01W02

// Additional buy flag select
DataItem AF01WABF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Additional buy flag update
DataItem AF01WAFU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bookings Pcent - Current
DataItem AF01WBPC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update confirm flag
DataItem AF01WCON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of Cursor
DataItem AF01WEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk user termid
DataItem AF01WFCT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Filler
DataItem AF01WFIL char(54)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job Control Language statement
DataItem AF01WJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF01WPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// any rows updated flag
DataItem AF01WRUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update flag
DataItem AF01WUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF01WXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season yr
DataItem AF01WXSN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season cd
DataItem AF01WXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF01WXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF01WXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

