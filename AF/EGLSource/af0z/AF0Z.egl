package af0z;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPTA0P;
import corpcom3.XPXOW01;
import corpcom3.XPXX001;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSLC;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom4.XSTA0P;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XDVCD;
import corpx1.XDVDESC;
import corpx1.XDVTBL;
import corpx1.XGACD;
import corpx1.XGADESC;
import corpx1.XGATBL;
import corpx1.XGPCD;
import corpx1.XLCDESC;
import corpx1.XLCTBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XPTTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XOWCD;
import corpx2.XOWDESC;
import corpx2.XOWKEY;
import corpx2.XPCCD;
import corpx2.XPCDESC;
import corpx2.XPLCD;
import corpx2.XPLDESC;
import corpx2.XPLKEY;
import corpx2.XPRCD;
import corpx2.XPRDESC;
import corpx2.XSECD;
import corpx2.XSNBDT;
import corpx2.XSNXDT;
import corpx2.XSNYR;
import corpx2.XSUCD;
import corpx2.XSUDESC;
import corpx2.XWHCD;
import corpy2.YSMSUMCD;
import corpy2.YSNTBL;
import pg.common.PG1FCTCD;
import pg.common.PG1REC;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import sy.common.SY1STNBR;
import sy.common.SY1STYNM;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA3USRID;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=AF0Z ****
// This application displays the Report Request Menu screen and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Another available selection allows the user to
// view the available printers and change the remote printer
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    J                JOB              TARUSRID          5-10
//                     " "              TARUSRNM         27-46
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/07/88  USERID  New application.
//          08/31/90  mlucht  Added 'blank only ' flag.
//                            Changed appl to send msg to the
//                            user when batch job is done.
//          02/10/91  DPETTI  Added Type and Line to screens.
//                            use AFWFIRST to identify if
//                            screen parms are correct.
// AF#306   11/10/92  RCHINI  New report added to AF0Z -  First
// AF#307                     Offer Date Audit Report.  This
//                            report will let users know which
//                            styles have forecast first offer
//                            dates which do not equal the
//                            product file 1st offer date and
//                            fcst available percents that are
//                            entered before the product file
//                            1st offer date.
// af0358   06-28-93  LREIN   added selection for include in
//                            stock on long & short report.
//                            Added long & short instock jcl to
//                            jcl in submit.
// AF0418   10-23-93  LREIN   Added flag in l&s report to print
//                            l&s report, instk report, or both
// af0444   02-16-94  SBABCO  Added 6th order type to futures
//                            comparison report
// af0477   02-15-94  WDRAKE  Added option to print each of the
//                            three closeout reports to laser
// af0447   04-04-94  MHUYNH  Modified AF0ZM008.
//          02-15-95  kj      XSN->YSN
//          08/2/95   KJ      ADDED TRUE DEMAND REPORT
// af0z035  08/28/95  rprado  added blank long & short report
// af0z180  09/14/95  rprado  added bus analysis reps.
// af0zt03  10/02/95  rprado  added long/short trdmnd summ rep.
// y2kfix   12/17/97  pharwo  year 2000 compliance changes as
//                            removing all processing for maps
//                            16 and 17.
// af0554   04/08/98  schen   add units to screen for reports
// af0563   04/28/98  schen   add units to screen for closeout
//                            reports
//          07/13/98  craymo  added FTP steps for proc AF2641
//          05/28/99  craymo  AF0ZS13 - added logic to disallow
//                            any data entry beyond SU 2000.
// *********************
Program AF0Z type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0ZW-NOTIFY-JCL AF0ZW-NOTIFY-JCL; // record
  AF0ZW01 AF0ZW01; // record
  AF0ZW02 AF0ZW02; // record
  AF0ZW03 AF0ZW03; // record
  AF0ZW04 AF0ZW04; // record
  AF0ZW05 AF0ZW05; // record
  AF0ZW06 AF0ZW06; // record
  AF0ZW07 AF0ZW07; // record
  AF0ZW09 AF0ZW09; // record
  AF0ZW13 AF0ZW13; // record
  AF0ZW15 AF0ZW15; // record
  AF0ZW16 AF0ZW16; // record
  AF0ZW17 AF0ZW17; // record
  AFFREC AFFREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use AF0ZT02; // table
  use AF0ZT03; // table
  use AF0ZT04; // table
  use AF0ZT05; // table
  use AF0ZT06; // table
  use AF0ZT07; // table
  use AF0ZT08; // table
  use AF0ZT09; // table
  use AF0ZT11; // table
  use AF0ZT12; // table
  use AF0ZT13; // table
  use AF0ZT14; // table
  use AF0ZT15; // table
  use AF0ZT16; // table
  use AF0ZT17 {deleteAfterUse = yes}; // table
  use AF0ZT18 {deleteAfterUse = yes}; // table
  use AF0ZT21 {deleteAfterUse = yes}; // table
  use AF0ZT22 {deleteAfterUse = yes}; // table
  use AF0ZT23 {deleteAfterUse = yes}; // table
  use AF0ZT24 {deleteAfterUse = yes}; // table
  use AF0ZT25 {deleteAfterUse = yes}; // table
  use AF0ZM.AF0ZM002,  // forms
      AF0ZM.AF0ZM003, 
      AF0ZM.AF0ZM007, 
      AF0ZM.AF0ZM009, 
      AF0ZM.AF0ZM010, 
      AF0ZM.AF0ZM011, 
      AF0ZM.AF0ZM012, 
      AF0ZM.AF0ZM099,
      AF0ZM.TA0PM001,
      AF0ZM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set AF0ZM002 initial; /* M002 input/output*/
    set AF0ZM003 initial; /* M003 input/output*/
     /* SET AF0ZM004 CLEAR;              /* M004 input/output*/
     /* SET AF0ZM005 CLEAR;              /* M005 input/output*/
     /* SET AF0ZM006 CLEAR;              /* M006 input/output*/
     /* SET AF0ZM008 CLEAR;              /* M008 input/output*/
    set AF0ZM009 initial; /* M009 input/output*/
    set AF0ZM010 initial; /* M010 input/output*/
    set AF0ZM011 initial; /* M011 input/output*/
    set AF0ZM012 initial; /* M012 input/output*/
     /* SET AF0ZM013 CLEAR;              /* M013 input/output*/
     /* SET AF0ZM014 CLEAR;              /* M014 input/output*/
     /* SET AF0ZM015 CLEAR;              /* M015 input/output*/
     /* SET AF0ZM016 CLEAR;              /* M016 input/output*/
     /* SET AF0ZM017 CLEAR;              /* M017 input/output*/
     /* SET AF0ZM018 CLEAR;              /* M018 input/output*/
    set AF0ZM099 initial; /* M099 input/output*/
    set AF0ZW01 empty; /* Working storage*/
    set AF0ZW16 empty; /* Working storage*/
    set AF0ZW17 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set AFFREC empty; /* snapshot record*/
    set AFWREC empty; /* common af working storage*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA3REC empty; /* Print subroutine parameters*/
    set TA6REC empty; /* Print subroutine parameters*/
    XP1REC.XGPCD = "03";
    AF0ZW01.AF0ZW-BLFL = "N";

    AFWREC.AFWAPPL = "AF0Z"; /* Set up application name in errorloc*/
    AFWREC.AFWFIRST = "Y";

     /* ------------------------------------------------------------*/
     /* Indicate that the report distribution must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the report menu.*/
     /* ------------------------------------------------------------*/

    AF0ZW01.AF0ZWIXL = 8; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the special initialization.*/
     /* ------------------------------------------------------------*/

    goto AF0Z001; /* Perform special initialization*/


    AF0Z001: AF0Z001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AF0Z002; /* Converse the main process*/


    AF0Z002: AF0Z002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AF0Z002;


  end // end main
end // end AF0Z

// Report Requests initialization
Function AF0Z001()
   /* ------------------------------------------------------------*/
   /* Initilize century working storage field.*/
   /* ------------------------------------------------------------*/

   /* -------------------------*/
   /* Obtain Current century*/
   /* -------------------------*/
  XX0XS01(); /* Obtain current date*/
  AF0ZW01.AF0ZWCC = XX0XW01.XX0XW19;


end // end AF0Z001

// Main process to display a map
Function AF0Z002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (AF0ZW01.AF0ZWSWX != "Y") /* EXIT not requested*/

    if (AF0ZW01.AF0ZMSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/

      AF0Z010(); /* Specify report distribution*/

    end

    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
    /* IF AF0ZW01.AF0ZMSEL(2) EQ 'S'; /* Line 2 was selected*/
    /* PERFORM AF0Z020;             /* Size Percent Comparison Report*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(3) EQ 'S'; /* Line 3 was selected*/
    /* PERFORM AF0Z030;             /* Long and Short Report*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(4) EQ 'S'; /* Line 4 was selected*/
    /* PERFORM AF0Z040;         /* Domestic Bookings and Sales to Date*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(5) EQ 'S'; /* Line 5 was selected*/
    /* PERFORM AF0Z050;         /* Demand vs Forecast Comparison Report*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(6) EQ 'S'; /* Line 6 was selected*/
    /* PERFORM AF0Z060;             /* Bookings / Sales Status Report*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(7) EQ 'S'; /* Line 7 was selected*/
    /* PERFORM AF0Z070;             /* af-ab style audit report*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(8) EQ 'S'; /* Line 8 was selected*/
    /* PERFORM AF0Z080;             /* mntly demand percentages*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(9) EQ 'S'; /* Line 9 was selected*/
    /* PERFORM AF0Z090;             /* PROPOESD CLOSEOUT SUMMARY - SILH*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(10) EQ 'S';/* Line 10 was selected*/
    /* PERFORM AF0Z100;             /* special bookings report*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(11) EQ 'S';/* Line 11 was selected*/
    /* PERFORM AF0Z110;             /* PROPOSED CLOSEOUT SUMMARY - CAT*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(12) EQ 'S';/* Line 12 was selected*/
    /* PERFORM AF0Z120;             /* PROPOSED CLOSEOUT DETAIL*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(13) EQ 'S';/* Line 13 was selected*/
    /* PERFORM AF0Z130;             /* ADDITIONAL BUY FLAG REPORT*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(14) EQ 'S';/* Line 14 was selected*/
    /* PERFORM AF0Z140;             /* FORECAST PERCENTAGE AUDIT REPORT*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(15) EQ 'S';/* Line 14 was selected*/
    /* PERFORM AF0Z150;             /* First offer date AUDIT REPORT*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(16) EQ 'S';/* Line 16 was selected*/
    /* PERFORM AF0Z160;             /* Futures Deadline Report*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(17) EQ 'S';/* Line 17 was selected*/
    /* PERFORM AF0Z170;             /* Futures Deadline Report*/
    /* END;*/
    /* ;*/
    /* IF AF0ZW01.AF0ZMSEL(18) EQ 'S';/* Line 18 was selected*/
    /* PERFORM AF0Z180;             /* Business Analysis Reps.*/
    /* END;*/
    /* ;*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    if (AF0ZW01.AF0ZMSEL[2] == "S") /* Line 2 was selected*/
      AF0Z020(); /* Size Percent Comparison Report*/
    end

    if (AF0ZW01.AF0ZMSEL[3] == "S") /* Line 3 was selected*/
      AF0Z030(); /* Long and Short Report*/
    end

    if (AF0ZW01.AF0ZMSEL[4] == "S") /* Line 7 was selected*/
      AF0Z070(); /* af-ab style audit report*/
    end

    if (AF0ZW01.AF0ZMSEL[5] == "S") /* Line 9 was selected*/
      AF0Z090(); /* PROPOSED CLOSEOUT SUMMARY - SILH*/
    end

    if (AF0ZW01.AF0ZMSEL[6] == "S") /* Line 11 was selected*/
      AF0Z110(); /* PROPOSED CLOSEOUT SUMMARY - CAT*/
    end

    if (AF0ZW01.AF0ZMSEL[7] == "S") /* Line 12 was selected*/
      AF0Z120(); /* PROPOSED CLOSEOUT DETAIL*/
    end

    if (AF0ZW01.AF0ZMSEL[8] == "S") /* Line 10 was selected*/
      AF0Z100(); /* special bookings report*/
    end

  end

  AF0ZW01.AF0ZWSWX = "N"; /* Reset exit requested switch*/

  AF0Z990(); /* Report Request Menu*/


end // end AF0Z002

// ** Specify Rpt Distribution**
Function AF0Z010()
   /* *************************************************************/

               /* SPECIFY REPORT DISTRIBUTION*/

   /* *************************************************************/
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the routing information for the user.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If first time through, indicate information was obtained.*/
   /* ------------------------------------------------------------*/

  if (TA6REC.TA6SUBSW == "I") /* Obtain report distribution*/

    TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AF0ZW01.AF0ZMSEL[1] = "*"; /* Indicate function completed*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    AF0ZW01.AF0ZMSEL[1] = "C"; /* Indicate function cancelled*/

    /* ------------------------------------------------------------*/
     /* If missing distribution information, indicate that exit was*/
     /* requested.  Otherwise, return to continue processing.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.XURDEST == " "  /* No print destination*/
     || TA6REC.XURUSRNM == " " /* or report recipient*/
     || TA6REC.XURBLDID == " ") /* or NIKE building*/

      AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/

    else

      return; /* Return to previous process*/

    end

  else

    AFWREC.AFWPRCSN = "010 "; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end AF0Z010

// ** Size Pct Comparison Rpt **
Function AF0Z020()
   /* *************************************************************/

             /* SIZE PERCENT COMPARISON REPORT*/

   /* *************************************************************/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF0Z021(); /* Format and display the map*/

  AF0Z022(); /* Check attention identifier*/

  AF0Z023(); /* Reset fields to normal intensity*/

  AF0Z024(); /* Verify the data that was entered*/

  AF0Z025(); /* Process valid input request*/


end // end AF0Z020

// Format and display the map
Function AF0Z021()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  AF0ZM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0ZM002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  AF0ZM002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  AF0ZM002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  AF0ZM002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  AF0ZM002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Move XP1REC fields to map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    AF0ZM002.AF0ZMFUI = XP1REC.XXXUSER; /* Forecaster userid*/
    AF0ZM002.XSECD = XP1REC.XSECD; /* Season code*/
    AF0ZM002.XSNYR = XP1REC.XSNYR; /* Season year*/

    if (XP1REC.XDVCD > "  ") /* Division code*/
      AF0ZM002.XDVCD = XP1REC.XDVCD; /* Division code*/
    end

    if (XP1REC.XOWCD == "  ") /* Owner group*/
      XP1REC.XOWCD = "00"; /* Owner group cd*/
    end

    AF0ZM002.XDVDESC = XP1REC.XDVDESC; /* Division Desc*/
    AF0ZM002.XPRCD = XP1REC.XPRCD; /* Product Type Code*/
    AF0ZM002.XPRDESC = XP1REC.XPRDESC; /* Product Type Desc*/
    AF0ZM002.XGACD = XP1REC.XGACD; /* Gender/age code*/
    AF0ZM002.XGADESC = XP1REC.XGADESC; /* Gender/age description*/
    AF0ZM002.XPLCD = XP1REC.XPLCD; /* Product Line Code*/
    AF0ZM002.XPLDESC = XP1REC.XPLDESC; /* Product Line Desc*/
    AF0ZM002.XPCCD = XP1REC.XPCCD; /* Category code*/
    AF0ZM002.XPCDESC = XP1REC.XPCDESC; /* Category description*/
    AF0ZM002.XSUCD = XP1REC.XSUCD; /* Silhouette code*/
    AF0ZM002.XSUDESC = XP1REC.XSUDESC; /* Silhouette description*/
    AF0ZM002.XOWCD = XP1REC.XOWCD; /* owner group*/
    AF0ZM002.XOWDESC = XP1REC.XOWDESC; /* owner grp description*/
    AF0ZM002.SY1STNBR = XP1REC.SY1STNBR; /* Style number*/
    AF0ZM002.SY1STYNM = XP1REC.SY1STYNM; /* Style short name*/

    if (AF0ZM002.AF0ZMSUM == " ") /* If empty field*/
      AF0ZM002.AF0ZMSUM = "N"; /* then default value*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.XXXMSGNO != 0) /* Message to display*/

    AF0ZM002.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    if (AFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.XXXMSGNO);
    end /* Message number*/

    set AF0ZM002 alarm; /* Indicate sound alarm*/

  end

  converse AF0ZM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  AFWREC.XXXMSGNO = 0; /* Message number*/
  AFWREC.AFWPRCSN = " "; /* Module identification*/


end // end AF0Z021

// Check attention identifier
Function AF0Z022()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    AF0ZW01.AF0ZMSEL[2] = "C"; /* Indicate selection cancelled*/
    AFWREC.AFWFIRST = "Y";
    set AF0ZM002 initial; /* M002 input/output*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    AFWREC.AFWFIRST = "Y";
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf1) /* help*/
    COMMAREA.CAITEM = "AF0ZM002"; /* this map for help*/
    XSAFS01(); /* transfer to help*/
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    AFWREC.AFWFIRST = "Y";
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    AFWREC.AFWPRCSN = "022 "; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    AFWREC.AFWFIRST = "Y";

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end AF0Z022

// Reset highlighted fields
Function AF0Z023()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0ZM002.AF0ZMFUI initialAttributes; /* Forecaster*/
  set AF0ZM002.XSECD initialAttributes; /* Season code*/
  set AF0ZM002.XSNYR initialAttributes; /* Season year*/
  set AF0ZM002.XDVCD initialAttributes; /* Division category*/
  set AF0ZM002.XPRCD initialAttributes; /* Product category*/
  set AF0ZM002.XGACD initialAttributes; /* Gender Age*/
  set AF0ZM002.XPLCD initialAttributes; /* Product Line code*/
  set AF0ZM002.XPCCD initialAttributes; /* Product Category code*/
  set AF0ZM002.XSUCD initialAttributes; /* Silhouette*/
  set AF0ZM002.XOWCD initialAttributes; /* owner group*/
  set AF0ZM002.SY1STNBR initialAttributes; /* Style number*/
  set AF0ZM002.AF0ZMSUM initialAttributes; /* Special bookings indicator*/
  set AF0ZM002.AF0ZMSUI initialAttributes; /* Scheduler*/
  set AF0ZM002.AF0ZMBKV initialAttributes; /* Bookings variance*/
  set AF0ZM002.AF0ZMBLV initialAttributes; /* Bottom line availability variance*/


   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0ZM002.XSECD == "?" /* Season Code*/
   || AF0ZM002.XDVCD == "?" /* Division category*/
   || AF0ZM002.XPRCD == "?" /* Product category*/
   || AF0ZM002.XGACD == "?" /* Gender Age*/
   || AF0ZM002.XPLCD == "?" /* Product Line code*/
   || AF0ZM002.XPCCD == "?" /* Product Category code*/
   || AF0ZM002.XSUCD == "?" /* Silhouette*/
   || AF0ZM002.XOWCD == "?") /* owner group*/

    AFWREC.AFWFIRST = "Y";

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "023 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    return; /* Exit to next process*/

  end

  XP1REC.XGPCD = "03"; /* Display Apparel only*/


   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season Code*/
   /* *============================**/

  if (AF0ZM002.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0ZM002.XSECD; /* Set XP1REC field*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM002.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end

  end

   /* *============================**/
   /* *  Pop-up Window for XDVCD   * Division Code*/
   /* *============================**/

  if (AF0ZM002.XDVCD == "?") /* Pop-up window requested*/

    XP1REC.XDVCD = AF0ZM002.XDVCD; /* Set XP1REC field*/

    XSAFSDV(); /* Pop-up window func requested*/

    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM002.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
      AF0ZM002.XDVDESC = XP1REC.XDVDESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product Type Code*/
   /* *============================**/

  if (AF0ZM002.XPRCD == "?") /* Pop-up window requested*/

    XP1REC.XPRCD = AF0ZM002.XPRCD; /* Set XP1REC field*/

    XSAFSPR(); /* Pop-up window func requested*/

    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM002.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
      AF0ZM002.XPRDESC = XP1REC.XPRDESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/

  if (AF0ZM002.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0ZM002.XGACD; /* Set XP1REC field*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM002.XGACD = XP1REC.XGACD; /* Move selected code to map*/
      AF0ZM002.XGADESC = XP1REC.XGADESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product Line code*/
   /* *============================**/

  if (AF0ZM002.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0ZM002.XPLCD; /* Set XP1REC field*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM002.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
      AF0ZM002.XPLDESC = XP1REC.XPLDESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Product Category cd*/
   /* *============================**/

  if (AF0ZM002.XPCCD == "?") /* Pop-up window requested*/

    XP1REC.XPCCD = AF0ZM002.XPCCD; /* Set XP1REC field*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM002.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
      AF0ZM002.XPCDESC = XP1REC.XPCDESC; /* Move desc to map*/
    end

  end



   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Sihouette cd*/
   /* *=============================**/


  if (AF0ZM002.XSUCD == "?") /* Pop-up window requested*/

    XP1REC.XSUCD = AF0ZM002.XSUCD; /* Set XP1REC field*/

    XSAFSSU(); /* Pop-up window func requested*/

    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM002.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/
      AF0ZM002.XSUDESC = XP1REC.XSUDESC; /* Move desc to map*/
    end

  end


   /* *=============================**/
   /* *  Pop-up Window for XOWCD    * Owner group cd*/
   /* *=============================**/


  if (AF0ZM002.XOWCD == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0ZM002.XOWCD; /* Set XP1REC field*/
    XP1REC.XWHCD = "51";
    XP1REC.XGPCD = "03";

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM002.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
      AF0ZM002.XOWDESC = XP1REC.XOWDESC; /* Move desc to map*/
    end

  end

  converseLib.clearScreen();



end // end AF0Z023

// Verify the entered data
Function AF0Z024()
   /* *************************************************************/
                 /* Verify the entered data*/

    /* The following edits are performed in sequence;*/

            /* 1) Season year*/
            /* 2) BLA variance qty*/
            /* 3) BK variance qty*/
            /* 4) Scheduler userid*/
            /* 5) Special bookings indicator*/
            /* 6) Style number*/
            /* 7) Onwer group*/
            /* 8) Silhouette cd*/
            /* 9) Product Category cd*/
            /* 10) Product Line cd*/
            /* 10) Gender/age cd*/
            /* 11) Product Type cd*/
            /* 12) Division cd*/
            /* 13) Season code*/
            /* 14) Forecaster userid*/

   /* *************************************************************/


   /* ---------------------------*/
    /* Edit season year*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZWYY = AF0ZM002.XSNYR;
  AF0ZW01.XSECD = AF0ZM002.XSECD;

  AF0ZS13(); /* Edit season year*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.XSNYR cursor, bold; /* Highlight field*/
    if (converseVar.validationMsgNum == 138)
      set AF0ZM002.XSECD cursor, bold; /* Highlight field*/
    end
    return;
  end


   /* ---------------------------*/
    /* Edit BLA variance qty*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWPS1 = AF0ZM002.AF0ZMBLV; /* move percentage to split*/

  AF0ZS01(); /* Prepare percentage characters for*/
                                   /* edit*/

  if (AF0ZM002.AF0ZMBLV != "   ") /* If variance entered*/
    if (AF0ZW01.AF0ZWPS1 >= "000" /* If valid*/
     && AF0ZW01.AF0ZWPS1 <= "100")
       /* continue on*/
    else
      AFWREC.AFWPRCSN = "024 "; /* Process number*/
      converseLib.validationFailed(58); /* Indicate error msg*/
      set AF0ZM002.AF0ZMBLV cursor, bold; /* Highlight field*/
    end
  end


   /* ---------------------------*/
    /* Edit BK variance qty*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWPS1 = AF0ZM002.AF0ZMBKV; /* move percentage to split*/

  AF0ZS01(); /* Prepare percentage characters for*/
                                   /* edit*/

  if (AF0ZM002.AF0ZMBKV != "   ") /* If variance entered*/
    if (AF0ZW01.AF0ZWPS1 >= "000" /* If valid*/
     && AF0ZW01.AF0ZWPS1 <= "100")
       /* continue on*/
    else
      AFWREC.AFWPRCSN = "024 "; /* Process number*/
      converseLib.validationFailed(58); /* Indicate error msg*/
      set AF0ZM002.AF0ZMBKV cursor, bold; /* Highlight field*/
    end
  end


   /* ---------------------------*/
    /* Edit Scheduler userid*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZMSUI = AF0ZM002.AF0ZMSUI;

  AF0ZS02(); /* Edit Scheduler*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.AF0ZMSUI cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Edit Special Bookings indicator*/
   /* ---------------------------*/
  if (AF0ZM002.AF0ZMSUM == " " /* If blank*/
   || AF0ZM002.AF0ZMSUM == "N" /* If equal to 'n'*/
   || AF0ZM002.AF0ZMSUM == "Y") /* If equal to 'y'*/
     /* continue on*/
  else /* Edit Scheduler*/
    AFWREC.AFWPRCSN = "024 ";
    converseLib.validationFailed(39);
    set AF0ZM002.AF0ZMSUM cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Edit owner group*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XOWCD = AF0ZM002.XOWCD;
  AF0ZW01.XWHCD = "51";
  AF0ZW01.XOWDESC = " ";

  AF0ZS52(); /* Edit silhouette code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.XOWCD cursor, bold; /* Highlight field*/
  end

  AF0ZM002.XOWDESC = AF0ZW01.XOWDESC;



   /* ---------------------------*/
    /* Edit style number*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.SY1STNBR = AF0ZM002.SY1STNBR;
  AF0ZW01.SY1STYNM = " ";

  AF0ZS03(); /* Edit style number*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.SY1STNBR cursor, bold; /* Highlight field*/
  end

  AF0ZM002.SY1STYNM = AF0ZW01.SY1STYNM;

   /* ---------------------------*/
    /* Edit silhouette cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XSUCD = AF0ZM002.XSUCD;
  AF0ZW01.XSUDESC = " ";

  AF0ZS07(); /* Edit silhouette code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.XSUCD cursor, bold; /* Highlight field*/
  end

  AF0ZM002.XSUDESC = AF0ZW01.XSUDESC;


   /* ---------------------------*/
    /* Edit category cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPCCD = AF0ZM002.XPCCD;
  AF0ZW01.XPCDESC = " ";

  AF0ZS08(); /* Edit category code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.XPCCD cursor, bold; /* Highlight field*/
  end

  AF0ZM002.XPCDESC = AF0ZW01.XPCDESC;


   /* ---------------------------*/
    /* Edit Line cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPLCD = AF0ZM002.XPLCD;
  AF0ZW01.XPLDESC = " ";

  AF0ZS09(); /* Edit Line code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.XPLCD cursor, bold; /* Highlight field*/
  end

  AF0ZM002.XPLDESC = AF0ZW01.XPLDESC;


   /* ---------------------------*/
    /* Edit gender/age cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XGACD = AF0ZM002.XGACD;
  AF0ZW01.XGADESC = " ";

  AF0ZS10(); /* Edit Gender/age code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.XGACD cursor, bold; /* Highlight field*/
  end

  AF0ZM002.XGADESC = AF0ZW01.XGADESC;


   /* ---------------------------*/
    /* Edit Type cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPRCD = AF0ZM002.XPRCD;
  AF0ZW01.XPRDESC = " ";

  AF0ZS11(); /* Edit Type code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.XPRCD cursor, bold; /* Highlight field*/
  end

  AF0ZM002.XPRDESC = AF0ZW01.XPRDESC;


   /* ---------------------------*/
    /* Edit Division Cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XDVCD = AF0ZM002.XDVCD;
  AF0ZW01.XDVDESC = " ";

  AF0ZS12(); /* Edit Type code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.XDVCD cursor, bold; /* Highlight field*/
  end

  AF0ZM002.XDVCD = AF0ZW01.XDVCD;
  AF0ZM002.XDVDESC = AF0ZW01.XDVDESC;


   /* ---------------------------*/
    /* Edit season code*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XSECD = AF0ZM002.XSECD;

  AF0ZS14(); /* Edit season code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.XSECD cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Edit Forecaster userid*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZMFUI = AF0ZM002.AF0ZMFUI;

  AF0ZS15(); /* Edit forecaster userid*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM002.AF0ZMFUI cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Reset error flag*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.AFWFIRST = "Y";
    exit stack; /* Exit to redisplay map*/
  end


end // end AF0Z024

// Process valid input request
Function AF0Z025()
  if (AFWREC.AFWFIRST == "Y") /* REDISPLAY MAP*/
    AFWREC.AFWFIRST = "N";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/

  if (TA3REC.TA3RGNID == "03") /* PRODUCTION REGION*/
    AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0ZT02.TARJCL)
      AF0ZW01.AF0ZWIXT = sysVar.arrayIndex; /* POINT TO TEST JCL*/
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* POINT TO TEST JCL*/
    else
      AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (AF0ZT02.TARTYPE[AF0ZWIXT] == "P") /* Parameters statement*/

      AF0ZS30();

      TA6REC.TARJCL[TA6INDEX] = AF0ZW02.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = AF0ZT02.TARJCL[AF0ZWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0ZT02.TARTYPE[AF0ZWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ZT02.TARJCL[AF0ZWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user*/

  XSTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "025 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AFWREC.XXXMSGNO = 50; /* Job was submitted*/
    AF0ZW01.AF0ZMSEL[2] = "*"; /* Indicate function completed*/

    set AF0ZM002 initial; /* Clear map output area*/

    AFWREC.AFWFIRST = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end AF0Z025

// ** Long and Short Rpt **
Function AF0Z030()
   /* *************************************************************/

                  /* LONG AND SHORT REPORT*/

   /* *************************************************************/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF0Z031(); /* Format and display the map*/

  AF0Z032(); /* Check attention identifier*/

  AF0Z033(); /* Reset fields to normal intensity*/

  AF0Z034(); /* Verify the data that was entered*/

  AF0Z035(); /* Process valid input request*/


end // end AF0Z030

// Format and display the map
Function AF0Z031()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  AF0ZM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0ZM003.XURDEST = TA6REC.XURDEST; /* Print destination*/
  AF0ZM003.XRODESC = TA6REC.XRODESC; /* Printer description*/
  AF0ZM003.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  AF0ZM003.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  AF0ZM003.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Move XP1REC fields to map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    AF0ZM003.AF0ZMFUI = XP1REC.XXXUSER; /* Forecaster userid*/
    AF0ZM003.XSECD = XP1REC.XSECD; /* Season code*/
    AF0ZM003.XSNYR = XP1REC.XSNYR; /* Season year*/

    if (XP1REC.XDVCD > "  ") /* Division code*/
      AF0ZM003.XDVCD = XP1REC.XDVCD; /* Division code*/
    end
    AF0ZM003.XDVDESC = XP1REC.XDVDESC; /* Division description*/

    if (AFWREC.AFWFIRST == "Y")
      AF0ZM003.AF0ZMRSL = "1";

      if (XP1REC.XPRCD == "  ")
        XP1REC.XPRCD = "01";
        XP1REC.XPRDESC = "IN-LINE";
      end

      if (XP1REC.XOWCD == "  ")
        XP1REC.XOWCD = "00";
        XP1REC.XOWABRV = "N/A    ";
      end

    end

    AF0ZM003.XPRCD = XP1REC.XPRCD; /* Product Type code*/
    AF0ZM003.XPRABRV = XP1REC.XPRDESC; /* Product Type description*/
    AF0ZM003.XGACD = XP1REC.XGACD; /* Gender/age code*/
    AF0ZM003.XGAABRV = XP1REC.XGADESC; /* Gender/age description*/
    AF0ZM003.XPLCD = XP1REC.XPLCD; /* Product Line code*/
    AF0ZM003.XPLABRV = XP1REC.XPLDESC; /* Product Line description*/
    AF0ZM003.XPCCD = XP1REC.XPCCD; /* Category code*/
    AF0ZM003.XPCABRV = XP1REC.XPCDESC; /* Category description*/
    AF0ZM003.XSUCD = XP1REC.XSUCD; /* Silhouette code*/
    AF0ZM003.XSUABRV = XP1REC.XSUDESC; /* Silhouette description*/
    AF0ZM003.SY1STNBR = XP1REC.SY1STNBR; /* Style number*/
    AF0ZM003.SY1SSTNM = XP1REC.SY1STYNM; /* Style short name*/
    AF0ZM003.XOWCD = XP1REC.XOWCD; /* owner group code*/
    AF0ZM003.XOWABRV = XP1REC.XOWABRV; /* owner group description*/

    if (AF0ZM003.AF0ZMCOV == " ") /* If empty field*/
      AF0ZM003.AF0ZMCOV = "B"; /* then default value*/
    end

    if (AF0ZM003.AF0ZMCLP == " ") /* If empty field*/
      AF0ZM003.AF0ZMCLP = "F"; /* then default value*/
    end

    if (AF0ZM003.AF0ZMDTL == " ") /* If empty field*/
      AF0ZM003.AF0ZMDTL = "Y"; /* then default value*/
    end

    if (AF0ZM003.AF0ZMSUM == " ") /* If empty field*/
      AF0ZM003.AF0ZMSUM = "N"; /* then default value*/
    end

    if (AF0ZM003.AF0ZMCLF == " ") /* If empty field*/
      AF0ZM003.AF0ZMCLF = "N"; /* then default value*/
    end

    if (AF0ZM003.AF0ZMBLF == " ") /* If empty field - blank only flag*/
      AF0ZM003.AF0ZMBLF = "*"; /* then default value*/
    end

    if (AF0ZM003.AF0ZMBTO == " ") /* If empty field*/
      AF0ZM003.AF0ZMBTO = ">"; /* then default value*/
    end

    if (AF0ZM003.AF0ZMFPO == " ") /* If empty field*/
      AF0ZM003.AF0ZMFPO = ">"; /* then default value*/
    end

    if (AF0ZM003.AF0ZMLSO == " ") /* If empty field*/
      AF0ZM003.AF0ZMLSO = ">"; /* then default value*/
    end

    if (AF0ZM003.AF0ZMBLO == " ") /* If empty field*/
      AF0ZM003.AF0ZMBLO = ">"; /* then default value*/
    end

    if (AF0ZM003.AF0ZMIST == " ") /* If empty field*/
      AF0ZM003.AF0ZMIST = "Y"; /* then default value*/
    end

    if (AF0ZM003.AF0ZM-RPT-LS-FL != "Y"
     && AF0ZM003.AF0ZM-RPT-LSU-FL != "Y"
     && AF0ZM003.AF0ZM-RPT-TDMDU-FL != "Y"
     && AF0ZM003.AF0ZM-RPT-ISTK-FL != "Y"
     && AF0ZM003.AF0ZM-RPT-TDMD-FL != "Y") /* If NO REPORT SELECTED*/
      AF0ZM003.AF0ZM-RPT-LSU-FL = "Y"; /* then default value*/
      AF0ZM003.AF0ZM-RPT-LS-FL = "N"; /* then default value*/
      AF0ZM003.AF0ZM-RPT-TDMDU-FL = "N"; /* then default value*/
      AF0ZM003.AF0ZM-RPT-ISTK-FL = "N"; /* then default value*/
      AF0ZM003.AF0ZM-RPT-TDMD-FL = "N"; /* then default value*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.XXXMSGNO != 0) /* Message to display*/

    AF0ZM003.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    if (AFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.XXXMSGNO);
    end /* Message number*/

    set AF0ZM003 alarm; /* Indicate sound alarm*/

  end

  converse AF0ZM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  AFWREC.XXXMSGNO = 0; /* Message number*/
  AFWREC.AFWPRCSN = " "; /* Module identification*/


end // end AF0Z031

// Check attention identifier
Function AF0Z032()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    AF0ZW01.AF0ZMSEL[3] = "C"; /* Indicate selection cancelled*/
    AFWREC.AFWFIRST = "Y";
    set AF0ZM003 initial; /* m003 input/output*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    AFWREC.AFWFIRST = "Y";
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf1) /* help*/
    COMMAREA.CAITEM = "AF0ZM003"; /* This map for help*/
    XSAFS01(); /* transfer to help.*/
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    AFWREC.AFWFIRST = "Y";
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    AFWREC.AFWPRCSN = "032 "; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    AFWREC.AFWFIRST = "Y";

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/
  end


end // end AF0Z032

// Reset highlighted fields
Function AF0Z033()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0ZM003.AF0ZMFUI initialAttributes; /* Forecaster*/
  set AF0ZM003.XSECD initialAttributes; /* Season code*/
  set AF0ZM003.XSNYR initialAttributes; /* Season year*/
  set AF0ZM003.XDVCD initialAttributes; /* Division Code*/
  set AF0ZM003.XPRCD initialAttributes; /* Product Type Code*/
  set AF0ZM003.XGACD initialAttributes; /* Gender Age*/
  set AF0ZM003.XPLCD initialAttributes; /* Product Line Code*/
  set AF0ZM003.XPCCD initialAttributes; /* Product category*/
  set AF0ZM003.XSUCD initialAttributes; /* Silhouette*/
  set AF0ZM003.XOWCD initialAttributes; /* owner group code*/
  set AF0ZM003.SY1STNBR initialAttributes; /* Style number*/
  set AF0ZM003.AF0ZMLCS[1] initialAttributes; /* Life Cycle Code*/
  set AF0ZM003.AF0ZMLCS[2] initialAttributes; /* Life Cycle Code*/
  set AF0ZM003.AF0ZMLCS[3] initialAttributes; /* Life Cycle Code*/
  set AF0ZM003.AF0ZMLCS[4] initialAttributes; /* Life Cycle Code*/
  set AF0ZM003.AF0ZMCOV initialAttributes; /* Carry over indicator*/
  set AF0ZM003.AF0ZMCLP initialAttributes; /* Color percent indicator*/
  set AF0ZM003.AF0ZMSUM initialAttributes; /* Summary indicator*/
  set AF0ZM003.AF0ZMCLF initialAttributes; /* Color flag*/
  set AF0ZM003.AF0ZMBLF initialAttributes; /* blank only flag*/
  set AF0ZM003.AF0ZMRSL initialAttributes; /* report format select flag*/
  set AF0ZM003.AF0ZMBTO initialAttributes; /* Balance to book operator*/
  set AF0ZM003.AF0ZMBTB initialAttributes; /* Balance to book percentage*/
  set AF0ZM003.AF0ZMFPO initialAttributes; /* Fcst vs purchased operator*/
  set AF0ZM003.AF0ZMFPV initialAttributes; /* Fcst vs purchased percentage*/
  set AF0ZM003.AF0ZMLSO initialAttributes; /* Long and short operator*/
  set AF0ZM003.AF0ZMLSU initialAttributes; /* Long and short units*/
  set AF0ZM003.AF0ZMBLO initialAttributes; /* Bottom line availability operator*/
  set AF0ZM003.AF0ZMBLU initialAttributes; /* Bottom line availability units*/
  set AF0ZM003.AF0ZMIST initialAttributes; /* Include in stock flag*/
  set AF0ZM003.AF0ZM-RPT-LS-FL initialAttributes; /* report print selection*/
  set AF0ZM003.AF0ZM-RPT-LSU-FL initialAttributes; /* report print selection*/
  set AF0ZM003.AF0ZM-RPT-ISTK-FL initialAttributes; /* report print selection*/
  set AF0ZM003.AF0ZM-RPT-TDMD-FL initialAttributes; /* report print selection*/
  set AF0ZM003.AF0ZM-RPT-TDMDU-FL initialAttributes; /* report print selection*/


   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0ZM003.XSECD == "?"
   || AF0ZM003.XDVCD == "?"
   || AF0ZM003.XPRCD == "?"
   || AF0ZM003.XGACD == "?"
   || AF0ZM003.XPLCD == "?"
   || AF0ZM003.XPCCD == "?"
   || AF0ZM003.XSUCD == "?"
   || AF0ZM003.XOWCD == "?"
   || AF0ZM003.AF0ZMLCS[1] == "?"
   || AF0ZM003.AF0ZMLCS[2] == "?"
   || AF0ZM003.AF0ZMLCS[3] == "?"
   || AF0ZM003.AF0ZMLCS[4] == "?")

    AFWREC.AFWFIRST = "Y";

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "033 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    return; /* Exit to next process*/

  end



  XP1REC.XGPCD = "03"; /* Display Apparel only*/

   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season Code*/
   /* *============================**/

  if (AF0ZM003.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0ZM003.XSECD; /* Set XP1REC field*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM003.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XDVCD   * Division Code*/
   /* *============================**/

  if (AF0ZM003.XDVCD == "?") /* Pop-up window requested*/

    XP1REC.XDVCD = AF0ZM003.XDVCD; /* Set XP1REC field*/

    XSAFSDV(); /* Pop-up window func requested*/

    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM003.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
      AF0ZM003.XDVDESC = XP1REC.XDVDESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product Type Code*/
   /* *============================**/

  if (AF0ZM003.XPRCD == "?") /* Pop-up window requested*/

    XP1REC.XPRCD = AF0ZM003.XPRCD; /* Set XP1REC field*/

    XSAFSPR(); /* Pop-up window func requested*/

    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM003.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
      AF0ZM003.XPRABRV = XP1REC.XPRDESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/

  if (AF0ZM003.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0ZM003.XGACD; /* Set XP1REC field*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM003.XGACD = XP1REC.XGACD; /* Move selected code to map*/
      AF0ZM003.XGAABRV = XP1REC.XGADESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product Line Code*/
   /* *============================**/

  if (AF0ZM003.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0ZM003.XPLCD; /* Set XP1REC field*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM003.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
      AF0ZM003.XPLABRV = XP1REC.XPLDESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/

  if (AF0ZM003.XPCCD == "?") /* Pop-up window requested*/

    XP1REC.XPCCD = AF0ZM003.XPCCD; /* Set XP1REC field*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM003.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
      AF0ZM003.XPCABRV = XP1REC.XPCDESC; /* Move desc to map*/
    end

  end



   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Sihouette cd*/
   /* *=============================**/


  if (AF0ZM003.XSUCD == "?") /* Pop-up window requested*/

    XP1REC.XSUCD = AF0ZM003.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSU(); /* Pop-up window func requested*/

    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM003.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/
      AF0ZM003.XSUABRV = XP1REC.XSUDESC; /* Move desc to map*/
    end

  end



   /* *=============================**/
   /* *  Pop-up Window for XOWCD    * Owner Group cd*/
   /* *=============================**/


  if (AF0ZM003.XOWCD == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0ZM003.XOWCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XP1REC.XWHCD = "51"; /* Display whse 51 only*/

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM003.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
      AF0ZM003.XOWABRV = XP1REC.XOWDESC; /* Move desc to map*/
    end

  end



   /* *=============================**/
   /* *  Pop-up Window for XLCCD    * Life Cycle Codes*/
   /* *=============================**/

  AF0ZW01.AF0ZWIXM = 1; /* Set MAP INDEX*/

  while (AF0ZW01.AF0ZWIXM <= 4)

    if (AF0ZM003.AF0ZMLCS[AF0ZWIXM] == "?") /* Pop-up window requested*/

      XP1REC.XLCCD = AF0ZM003.AF0ZMLCS[AF0ZWIXM]; /* Set XP1REC field*/

      XSAFSLC(); /* Pop-up window func requested*/

      if (XP1REC.XLCCD == "?") /* Check results*/
        XP1REC.XLCCD = " "; /* Space out invalid data*/
      else /* Else*/
        AF0ZM003.AF0ZMLCS[AF0ZWIXM] = XP1REC.XLCCD;
      end

    end

    AF0ZW01.AF0ZWIXM = AF0ZW01.AF0ZWIXM + 1;

  end

   /* *=============================**/
   /* *  Pop-up Window for XOWCD    * Owner group code*/
   /* *=============================**/

  if (AF0ZM003.XOWCD == "?") /* Pop-up window requested*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XWHCD = "51";
    XX0XW02.XX0XWHDR = "OWNER GROUP   ";

    while (XX0XW02.XX0XWEND == "N")
      XPXOW01(); /* perform pop up window routine*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      AF0ZM003.XOWCD = XOWTBL.XOWCD[XX0XWPIX];
      AF0ZM003.XOWABRV = XOWTBL.XOWABRV[XX0XWPIX];
    end

    if (AF0ZM003.XOWCD == "?") /* Pop-up window requested*/
      AF0ZM003.XOWCD = " "; /* Space out invalid data*/
    end

  end



   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/


  converseLib.clearScreen();
   /* Reset screen before display*/

end // end AF0Z033

// Verify the entered data
Function AF0Z034()
   /* *************************************************************/
                 /* Verify the entered data*/

    /* The following edits are performed in sequence;*/
            /* 1) Season Year*/
            /* 2) include instock flag*/
            /* 3) BLA units operator*/
            /* 4) Long and Shorts units operator*/
            /* 4a) report print select*/
            /* 4b) owner group code*/
            /* 5) Life Cycle Codes*/
            /* 6) Forecast vs purchased var%*/
            /* 7) Forecast vs purchased Operator*/
            /* 8) Style number*/
            /* 9) Balance to book %*/
            /* 10) Balance to book Operator*/
            /* 11) Silhouette cd*/
            /* 11a) report format flag*/
            /* 12) Blank-only flag*/
            /* 13) Product Category Code*/
            /* 14) Color flag*/
            /* 15) Product Line Code*/
            /* 16) Color % indicator*/
            /* 17) Gender/age cd*/
            /* 18) Carryover indicator*/
            /* 19) Product Type Code*/
            /* 20) Detail Indicator*/
            /* 21) Summary Indicator*/
            /* 22) Division cd*/
            /* 23) Season Code*/
            /* 24) Forecaster userid*/

   /* *************************************************************/

   /* ---------------------------*/
    /* Edit season year*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZWYY = AF0ZM003.XSNYR;
  AF0ZW01.XSECD = AF0ZM003.XSECD;

  AF0ZS13(); /* Edit season year*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.XSNYR cursor, bold; /* Highlight field*/
    if (converseVar.validationMsgNum == 138)
      set AF0ZM003.XSECD cursor, bold; /* Highlight field*/
    end
    return;
  end

   /* ---------------------------*/
    /* Edit in stock flag*/
   /* ---------------------------*/

  if (AF0ZM003.AF0ZMIST == " " /* If blank*/
   || AF0ZM003.AF0ZMIST == "N" /* or equal to 'n'*/
   || AF0ZM003.AF0ZMIST == "Y") /* or equal to 'y'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(39); /* Indicate error msg*/
    set AF0ZM003.AF0ZMIST cursor, bold; /* Highlight field*/
  end

   /* ---------------------------*/
    /* BLA units operator*/
   /* ---------------------------*/
  if (AF0ZM003.AF0ZMBLO == " " /* If blank*/
   || AF0ZM003.AF0ZMBLO == ">" /* or equal to '>'*/
   || AF0ZM003.AF0ZMBLO == "<") /* or equal to '<'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(72); /* Indicate error msg*/
    set AF0ZM003.AF0ZMBLO cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Long/Shorts units operator*/
   /* ---------------------------*/
  if (AF0ZM003.AF0ZMLSO == " " /* If blank*/
   || AF0ZM003.AF0ZMLSO == ">" /* or equal to '>'*/
   || AF0ZM003.AF0ZMLSO == "<") /* or equal to '<'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(72); /* Indicate error msg*/
    set AF0ZM003.AF0ZMLSO cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Edit print flags*/
   /* ---------------------------*/

  if (AF0ZM003.AF0ZM-RPT-LS-FL == "Y"
   || AF0ZM003.AF0ZM-RPT-LS-FL == "N")
                                  /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(124); /* Indicate error msg*/
    set AF0ZM003.AF0ZM-RPT-LS-FL cursor, bold; /* Highlight field*/
  end

  if (AF0ZM003.AF0ZM-RPT-LSU-FL == "Y"
   || AF0ZM003.AF0ZM-RPT-LSU-FL == "N")
                                  /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(124); /* Indicate error msg*/
    set AF0ZM003.AF0ZM-RPT-LSU-FL cursor, bold; /* Highlight field*/
  end

  if (AF0ZM003.AF0ZM-RPT-ISTK-FL == "Y"
   || AF0ZM003.AF0ZM-RPT-ISTK-FL == "N")
                                  /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(124); /* Indicate error msg*/
    set AF0ZM003.AF0ZM-RPT-ISTK-FL cursor, bold; /* Highlight field*/
  end

  if (AF0ZM003.AF0ZM-RPT-TDMDU-FL == "Y"
   || AF0ZM003.AF0ZM-RPT-TDMDU-FL == "N")
                                  /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(124); /* Indicate error msg*/
    set AF0ZM003.AF0ZM-RPT-TDMDU-FL cursor, bold; /* Highlight field*/
  end

  if (AF0ZM003.AF0ZM-RPT-TDMD-FL == "Y"
   || AF0ZM003.AF0ZM-RPT-TDMD-FL == "N")
                                  /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(124); /* Indicate error msg*/
    set AF0ZM003.AF0ZM-RPT-TDMD-FL cursor, bold; /* Highlight field*/
  end

  if (AF0ZM003.AF0ZM-RPT-LS-FL == "N"
   && AF0ZM003.AF0ZM-RPT-LSU-FL == "N"
   && AF0ZM003.AF0ZM-RPT-ISTK-FL == "N"
   && AF0ZM003.AF0ZM-RPT-TDMDU-FL == "N"
   && AF0ZM003.AF0ZM-RPT-TDMD-FL == "N")
     /* continue on*/
    AF0ZM003.AF0ZM-RPT-LSU-FL = "Y";
  end

   /* ---------------------------*/
    /* Edit owner group cd*/
   /* ---------------------------*/

  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XWHCD = "51";
  AF0ZW01.XOWCD = AF0ZM003.XOWCD;

  AF0ZS52(); /* Edit owner group code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.XOWCD cursor, bold; /* Highlight field*/
  else
    AF0ZM003.XOWABRV = AF0ZW01.XOWDESC;
  end


   /* ---------------------------*/
    /* Edit Life Cycle Codes*/
   /* ---------------------------*/

  if (AF0ZM003.AF0ZMLCS[1] == "  "
   && AF0ZM003.AF0ZMLCS[2] == "  "
   && AF0ZM003.AF0ZMLCS[3] == "  "
   && AF0ZM003.AF0ZMLCS[4] == "  ")
    /* NEXT SENTENCE*/
  else
    AF0ZS50(); /* Left Justify Cycle Codes*/
  end

  AF0ZW01.AF0ZWIXM = 4;

  while (AF0ZW01.AF0ZWIXM >= 1)

    AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
    AF0ZW01.AF0ZMLCS = AF0ZM003.AF0ZMLCS[AF0ZWIXM];

    AF0ZS16(); /* Validate Life Cycle Codes*/

    if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
      set AF0ZM003.AF0ZMLCS[AF0ZWIXM] cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "034 "; /* Process number*/
    end
    AF0ZW01.AF0ZWIXM = AF0ZW01.AF0ZWIXM - 1;
  end



   /* ---------------------------*/
    /* Edit fcst vs pur var%*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWPS1 = AF0ZM003.AF0ZMFPV; /* move percentage to split*/

  AF0ZS01(); /* Prepare percentage characters for*/
                                   /* edit*/

  if (AF0ZM003.AF0ZMFPV != 0) /* If variance entered*/
    if (AF0ZW01.AF0ZWPS1 >= 000 /* If valid*/
     && AF0ZW01.AF0ZWPS1 <= 100)
       /* continue on*/
    else
      AFWREC.AFWPRCSN = "034 "; /* Process number*/
      converseLib.validationFailed(58); /* Indicate error msg*/
      set AF0ZM003.AF0ZMFPV cursor, bold; /* Highlight field*/
    end
  end



   /* ---------------------------*/
    /* Fcst vs Pur operator*/
   /* ---------------------------*/
  if (AF0ZM003.AF0ZMFPO == " " /* If blank*/
   || AF0ZM003.AF0ZMFPO == ">" /* or equal to '>'*/
   || AF0ZM003.AF0ZMFPO == "<") /* or equal to '<'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(72); /* Indicate error msg*/
    set AF0ZM003.AF0ZMFPO cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit style number*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.SY1STNBR = AF0ZM003.SY1STNBR;
  AF0ZW01.SY1STYNM = " ";

  AF0ZS03(); /* Edit style number*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.SY1STNBR cursor, bold; /* Highlight field*/
  end

  AF0ZM003.SY1SSTNM = AF0ZW01.SY1STYNM;



   /* ---------------------------*/
    /* Edit Balance to Book %*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWPS1 = AF0ZM003.AF0ZMBTB; /* move percentage to split*/

  AF0ZS01(); /* Prepare percentage characters for*/
                                   /* edit*/

  if (AF0ZM003.AF0ZMBTB != "   ") /* If variance entered*/
    if (AF0ZW01.AF0ZWPS1 >= "000" /* If valid*/
     && AF0ZW01.AF0ZWPS1 <= "100")
       /* continue on*/
    else
      AFWREC.AFWPRCSN = "034 "; /* Process number*/
      converseLib.validationFailed(58); /* Indicate error msg*/
      set AF0ZM003.AF0ZMBTB cursor, bold; /* Highlight field*/
    end
  end



   /* ---------------------------*/
    /* Bal to Book operator*/
   /* ---------------------------*/
  if (AF0ZM003.AF0ZMBTO == " " /* If blank*/
   || AF0ZM003.AF0ZMBTO == ">" /* or equal to '>'*/
   || AF0ZM003.AF0ZMBTO == "<") /* or equal to '<'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(72); /* Indicate error msg*/
    set AF0ZM003.AF0ZMBTO cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit silhouette cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XSUCD = AF0ZM003.XSUCD;
  AF0ZW01.XSUDESC = " ";

  AF0ZS07(); /* Edit silhouette code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.XSUCD cursor, bold; /* Highlight field*/
  end

  AF0ZM003.XSUABRV = AF0ZW01.XSUDESC;



   /* ---------------------------*/
    /* Edit report format flag*/
   /* ---------------------------*/
  if (AF0ZM003.AF0ZMRSL != "1" /**/
   && AF0ZM003.AF0ZMRSL != "2") /**/
     /* continue on*/
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(120); /* Indicate error msg*/
    set AF0ZM003.AF0ZMRSL cursor, bold; /* Highlight field*/
  end

   /* ---------------------------*/
    /* Edit blank-only flag*/
   /* ---------------------------*/
  if (AF0ZM003.AF0ZMBLF == "*" /* If blank*/
   || AF0ZM003.AF0ZMBLF == "B" /* or equal to 'n'*/
   || AF0ZM003.AF0ZMBLF == "R" /* or equal to 'n'*/
   || AF0ZM003.AF0ZMBLF == "S" /* or equal to 'y'*/
   || AF0ZM003.AF0ZMBLF == "U") /* or equal to 'y'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(124); /* Indicate error msg*/
    set AF0ZM003.AF0ZMBLF cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit category cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPCCD = AF0ZM003.XPCCD;
  AF0ZW01.XPCDESC = " ";

  AF0ZS08(); /* Edit category code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.XPCCD cursor, bold; /* Highlight field*/
  end

  AF0ZM003.XPCABRV = AF0ZW01.XPCDESC;



   /* ---------------------------*/
    /* Edit Color flag*/
   /* ---------------------------*/
  if (AF0ZM003.AF0ZMCLF == " " /* If blank*/
   || AF0ZM003.AF0ZMCLF == "N" /* or equal to 'n'*/
   || AF0ZM003.AF0ZMCLF == "Y") /* or equal to 'y'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(39); /* Indicate error msg*/
    set AF0ZM003.AF0ZMCLF cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit Line cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPLCD = AF0ZM003.XPLCD;
  AF0ZW01.XPLDESC = " ";

  AF0ZS09(); /* Edit category code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.XPLCD cursor, bold; /* Highlight field*/
  end

  AF0ZM003.XPLABRV = AF0ZW01.XPLDESC;



   /* -------------------------------*/
    /* Edit color percent indicator*/
   /* -------------------------------*/
  if (AF0ZM003.AF0ZMCLP == " " /* If blank*/
   || AF0ZM003.AF0ZMCLP == "F" /* or equal to 'f'*/
   || AF0ZM003.AF0ZMCLP == "B") /* or equal to 'b'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(72); /* Indicate error msg*/
    set AF0ZM003.AF0ZMCLP cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit gender/age cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XGACD = AF0ZM003.XGACD;
  AF0ZW01.XGADESC = " ";

  AF0ZS10(); /* Edit Gender/age code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.XGACD cursor, bold; /* Highlight field*/
  end
      /* ;*/
  AF0ZM003.XGAABRV = AF0ZW01.XGADESC;



   /* -------------------------------*/
    /* Edit carryover indicator*/
   /* -------------------------------*/
  if (AF0ZM003.AF0ZMCOV == " " /* If blank*/
   || AF0ZM003.AF0ZMCOV == "C" /* or equal to 'c'*/
   || AF0ZM003.AF0ZMCOV == "N" /* or equal to 'n'*/
   || AF0ZM003.AF0ZMCOV == "B") /* or equal to 'b'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(72); /* Indicate error msg*/
    set AF0ZM003.AF0ZMCOV cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit Type cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPRCD = AF0ZM003.XPRCD;
  AF0ZW01.XPRDESC = " ";

  AF0ZS11(); /* Edit category code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.XPRCD cursor, bold; /* Highlight field*/
  end

  AF0ZM003.XPRABRV = AF0ZW01.XPRDESC;



   /* ---------------------------*/
    /* Edit summary indicator*/
   /* ---------------------------*/
  if (AF0ZM003.AF0ZMSUM == " " /* If blank*/
   || AF0ZM003.AF0ZMSUM == "N" /* or equal to 'n'*/
   || AF0ZM003.AF0ZMSUM == "Y") /* or equal to 'y'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(39); /* Indicate error msg*/
    set AF0ZM003.AF0ZMSUM cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit detail indicator*/
   /* ---------------------------*/
  if (AF0ZM003.AF0ZMDTL == " " /* If blank*/
   || AF0ZM003.AF0ZMDTL == "N" /* or equal to 'n'*/
   || AF0ZM003.AF0ZMDTL == "Y") /* or equal to 'y'*/
     /* continue on*/
  else
    AFWREC.AFWPRCSN = "034 "; /* Process number*/
    converseLib.validationFailed(39); /* Indicate error msg*/
    set AF0ZM003.AF0ZMDTL cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit Division cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XDVCD = AF0ZM003.XDVCD;
  AF0ZW01.XDVDESC = " ";

  AF0ZS12(); /* Edit Division Code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.XDVCD cursor, bold; /* Highlight field*/
  end

  AF0ZM003.XDVCD = AF0ZW01.XDVCD;
  AF0ZM003.XDVDESC = AF0ZW01.XDVDESC;


   /* ---------------------------*/
    /* Edit season code*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XSECD = AF0ZM003.XSECD;

  AF0ZS14(); /* Edit season code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.XSECD cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit Forecaster userid*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZMFUI = AF0ZM003.AF0ZMFUI;

  AF0ZS15(); /* Edit forecaster userid*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM003.AF0ZMFUI cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Reset error flag*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.AFWFIRST = "Y";
    exit stack; /* Exit to redisplay map*/
  end


end // end AF0Z034

// Process valid input request
Function AF0Z035()
  if (AFWREC.AFWFIRST == "Y") /* REDISPLAY MAP*/
    AFWREC.AFWFIRST = "N";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/

  if (TA3REC.TA3RGNID == "03") /* PRODUCTION REGION*/
    AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0ZT03.TARJCL)
      AF0ZW01.AF0ZWIXT = sysVar.arrayIndex; /* POINT TO TEST JCL*/
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* POINT TO TEST JCL*/
    else
      AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (AF0ZT03.TARTYPE[AF0ZWIXT] == "L"
     && (AF0ZM003.AF0ZM-RPT-LS-FL == "N" || AF0ZM003.AF0ZMBLF == "B"))
       /* FIND END OF LONG AND SHORT REPORT*/
      while (AF0ZT03.TARTYPE[AF0ZWIXT] != "S"
       && AF0ZT03.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT03.TARTYPE[AF0ZWIXT] == "C"
     && (AF0ZM003.AF0ZM-RPT-LSU-FL == "N" || AF0ZM003.AF0ZMBLF == "B"))
       /* FIND END OF LONG AND SHORT REPORT*/
      while (AF0ZT03.TARTYPE[AF0ZWIXT] != "G"
       && AF0ZT03.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT03.TARTYPE[AF0ZWIXT] == "I"
     && AF0ZM003.AF0ZM-RPT-ISTK-FL == "N")
      /* FIND END OF INSTOCK REPORT*/
      while (AF0ZT03.TARTYPE[AF0ZWIXT] != "K"
       && AF0ZT03.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT03.TARTYPE[AF0ZWIXT] == "T"
     && AF0ZM003.AF0ZM-RPT-TDMD-FL == "N")
       /* FIND end of true demand REPORT*/
      while (AF0ZT03.TARTYPE[AF0ZWIXT] != "D"
       && AF0ZT03.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT03.TARTYPE[AF0ZWIXT] == "F"
     && AF0ZM003.AF0ZM-RPT-TDMDU-FL == "N")
       /* FIND end of true demand REPORT*/
      while (AF0ZT03.TARTYPE[AF0ZWIXT] != "H"
       && AF0ZT03.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT03.TARTYPE[AF0ZWIXT] == "B"
     && (AF0ZM003.AF0ZM-RPT-LS-FL == "N" || AF0ZM003.AF0ZMBLF != "B"))
       /* FIND END OF BLANL LONG AND SHORT REPORT*/
      while (AF0ZT03.TARTYPE[AF0ZWIXT] != "Q"
       && AF0ZT03.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT03.TARTYPE[AF0ZWIXT] == "P") /* Parameters statement*/
      AF0ZS31();

      TA6REC.TARJCL[TA6INDEX] = AF0ZW03.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = AF0ZT03.TARJCL[AF0ZWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0ZT03.TARTYPE[AF0ZWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ZT03.TARJCL[AF0ZWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/

  XSTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "035 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AFWREC.XXXMSGNO = 51; /* Job was submitted*/
    AF0ZW01.AF0ZMSEL[3] = "*"; /* Indicate function completed*/

    AFWREC.AFWFIRST = "Y";

    set AF0ZM003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end AF0Z035

// ** AF-AB Style Audit Report **
Function AF0Z070()
   /* *************************************************************/

             /* AF-AB STYLE AUDIT REPORT*/

   /* *************************************************************/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF0Z071(); /* Format and display the map*/

  AF0Z072(); /* Check attention identifier*/

  AF0Z073(); /* Reset fields to normal intensity*/

  AF0Z074(); /* Verify the data that was entered*/

  AF0Z075(); /* Process valid input request*/


end // end AF0Z070

// Format and display the map
Function AF0Z071()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  AF0ZM007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0ZM007.XURDEST = TA6REC.XURDEST; /* Print destination*/
  AF0ZM007.XRODESC = TA6REC.XRODESC; /* Printer description*/
  AF0ZM007.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  AF0ZM007.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  AF0ZM007.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Move XP1REC fields to map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    AF0ZM007.AF0ZMFUI = XP1REC.XXXUSER; /* Forecaster userid*/
    AF0ZM007.XSECD = XP1REC.XSECD; /* Season code*/
    AF0ZM007.XSNYR = XP1REC.XSNYR; /* Season year*/

    if (XP1REC.XDVCD > "  ") /* Division code*/
      AF0ZM007.XDVCD = XP1REC.XDVCD; /* Division code*/
    end

    AF0ZM007.XDVDESC = XP1REC.XDVDESC; /* Division Desc*/
    AF0ZM007.XPRCD = XP1REC.XPRCD; /* Product Type Code*/
    AF0ZM007.XPRDESC = XP1REC.XPRDESC; /* Product Type Desc*/
    AF0ZM007.XGACD = XP1REC.XGACD; /* Gender/age code*/
    AF0ZM007.XGADESC = XP1REC.XGADESC; /* Gender/age description*/
    AF0ZM007.XPLCD = XP1REC.XPLCD; /* Product Line Code*/
    AF0ZM007.XPLDESC = XP1REC.XPLDESC; /* Product Line Desc*/
    AF0ZM007.XPCCD = XP1REC.XPCCD; /* Category code*/
    AF0ZM007.XPCDESC = XP1REC.XPCDESC; /* Category description*/
    AF0ZM007.XSUCD = XP1REC.XSUCD; /* Silhouette code*/
    AF0ZM007.XSUDESC = XP1REC.XSUDESC; /* Silhouette description*/
    AF0ZM007.XOWCD = XP1REC.XOWCD; /* owner group*/
    AF0ZM007.XOWDESC = XP1REC.XOWDESC; /* owner group description*/

  end


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.XXXMSGNO != 0) /* Message to display*/

    AF0ZM007.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    if (AFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.XXXMSGNO);
    end /* Message number*/

    set AF0ZM007 alarm; /* Indicate sound alarm*/

  end

  converse AF0ZM007 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  AFWREC.XXXMSGNO = 0; /* Message number*/
  AFWREC.AFWPRCSN = " "; /* Module identification*/


end // end AF0Z071

// Check attention identifier
Function AF0Z072()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    AF0ZW01.AF0ZMSEL[7] = "C"; /* Indicate selection cancelled*/
    AFWREC.AFWFIRST = "Y";
    set AF0ZM007 initial; /* m007 input/output*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    AFWREC.AFWFIRST = "Y";
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf1) /* help*/
    COMMAREA.CAITEM = "AF0ZM007"; /* this map for help*/
    XSAFS01(); /* transfer to help*/
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    AFWREC.AFWFIRST = "Y";
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    AFWREC.AFWPRCSN = "072 "; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    AFWREC.AFWFIRST = "Y";

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end AF0Z072

// Reset highlighted fields
Function AF0Z073()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0ZM007.AF0ZMFUI initialAttributes; /* Forecaster*/
  set AF0ZM007.XSECD initialAttributes; /* Season code*/
  set AF0ZM007.XSNYR initialAttributes; /* Season year*/
  set AF0ZM007.XDVCD initialAttributes; /* Division category*/
  set AF0ZM007.XPRCD initialAttributes; /* Product category*/
  set AF0ZM007.XGACD initialAttributes; /* Gender Age*/
  set AF0ZM007.XPLCD initialAttributes; /* Product Line code*/
  set AF0ZM007.XPCCD initialAttributes; /* Product Category code*/
  set AF0ZM007.XSUCD initialAttributes; /* Silhouette*/
  set AF0ZM007.XOWCD initialAttributes; /* Owner group*/
  set AF0ZM007.AF0ZMLCS[1] initialAttributes; /* Life Cycle Code*/
  set AF0ZM007.AF0ZMLCS[2] initialAttributes; /* Life Cycle Code*/
  set AF0ZM007.AF0ZMLCS[3] initialAttributes; /* Life Cycle Code*/
  set AF0ZM007.AF0ZMLCS[4] initialAttributes; /* Life Cycle Code*/


   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0ZM007.XSECD == "?" /* Season Code*/
   || AF0ZM007.XDVCD == "?" /* Division category*/
   || AF0ZM007.XPRCD == "?" /* Product category*/
   || AF0ZM007.XGACD == "?" /* Gender Age*/
   || AF0ZM007.XPLCD == "?" /* Product Line code*/
   || AF0ZM007.XPCCD == "?" /* Product Category code*/
   || AF0ZM007.XSUCD == "?" /* Silhouette*/
   || AF0ZM007.XOWCD == "?" /* Owner group code*/
   || AF0ZM007.AF0ZMLCS[1] == "?"
   || AF0ZM007.AF0ZMLCS[2] == "?"
   || AF0ZM007.AF0ZMLCS[3] == "?"
   || AF0ZM007.AF0ZMLCS[4] == "?")

    AFWREC.AFWFIRST = "Y";

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "023 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    return; /* Exit to next process*/

  end

  XP1REC.XGPCD = "03"; /* Display Apparel only*/


   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season Code*/
   /* *============================**/

  if (AF0ZM007.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0ZM007.XSECD; /* Set XP1REC field*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else
      AF0ZM007.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XDVCD   * Division Code*/
   /* *============================**/

  if (AF0ZM007.XDVCD == "?") /* Pop-up window requested*/

    XP1REC.XDVCD = AF0ZM007.XDVCD; /* Set XP1REC field*/

    XSAFSDV(); /* Pop-up window func requested*/

    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM007.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
      AF0ZM007.XDVDESC = XP1REC.XDVDESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product Type Code*/
   /* *============================**/

  if (AF0ZM007.XPRCD == "?") /* Pop-up window requested*/

    XP1REC.XPRCD = AF0ZM007.XPRCD; /* Set XP1REC field*/

    XSAFSPR(); /* Pop-up window func requested*/

    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM007.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
      AF0ZM007.XPRDESC = XP1REC.XPRDESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/

  if (AF0ZM007.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0ZM007.XGACD; /* Set XP1REC field*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM007.XGACD = XP1REC.XGACD; /* Move selected code to map*/
      AF0ZM007.XGADESC = XP1REC.XGADESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product Line Code*/
   /* *============================**/

  if (AF0ZM007.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0ZM007.XPLCD; /* Set XP1REC field*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM007.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
      AF0ZM007.XPLDESC = XP1REC.XPLDESC; /* Move desc to map*/
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/

  if (AF0ZM007.XPCCD == "?") /* Pop-up window requested*/

    XP1REC.XPCCD = AF0ZM007.XPCCD; /* Set XP1REC field*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM007.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
      AF0ZM007.XPCDESC = XP1REC.XPCDESC; /* Move desc to map*/
    end

  end



   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Sihouette cd*/
   /* *=============================**/


  if (AF0ZM007.XSUCD == "?") /* Pop-up window requested*/

    XP1REC.XSUCD = AF0ZM007.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSU(); /* Pop-up window func requested*/

    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM007.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/
      AF0ZM007.XSUDESC = XP1REC.XSUDESC; /* Move desc to map*/
    end

  end


   /* *=============================**/
   /* *  Pop-up Window for XOWCD    * Owner group cd*/
   /* *=============================**/


  if (AF0ZM007.XOWCD == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0ZM007.XOWCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XP1REC.XWHCD = "51";

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM007.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
      AF0ZM007.XOWDESC = XP1REC.XOWDESC; /* Move desc to map*/
    end

  end



   /* *=============================**/
   /* *  Pop-up Window for XLCCD    * Life Cycle Codes*/
   /* *=============================**/

  AF0ZW01.AF0ZWIXM = 1; /* Set MAP INDEX*/

  while (AF0ZW01.AF0ZWIXM <= 4)

    if (AF0ZM007.AF0ZMLCS[AF0ZWIXM] == "?") /* Pop-up window requested*/

      XP1REC.XLCCD = AF0ZM007.AF0ZMLCS[AF0ZWIXM]; /* Set XP1REC field*/

      XSAFSLC(); /* Pop-up window func requested*/

      if (XP1REC.XLCCD == "?") /* Check results*/
        XP1REC.XLCCD = " "; /* Space out invalid data*/
      else /* Else*/
        AF0ZM007.AF0ZMLCS[AF0ZWIXM] = XP1REC.XLCCD;
      end

    end

    AF0ZW01.AF0ZWIXM = AF0ZW01.AF0ZWIXM + 1;

  end



   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/


  converseLib.clearScreen();
   /* Reset screen before display*/



end // end AF0Z073

// Verify the entered data
Function AF0Z074()
   /* *************************************************************/
                 /* Verify the entered data*/

    /* The following edits are performed in sequence;*/

            /* 1) Season Year*/
            /* 2) Life Cycle Codes*/
            /* -) Owner Group*/
            /* 3) Silhouette cd*/
            /* 4) Product Category Code*/
            /* 5) Product Line Code*/
            /* 6) Gender/age cd*/
            /* 7) Product Type Code*/
            /* 8) Division cd*/
            /* 9) Season Code*/
           /* 10) Forecaster userid*/

   /* *************************************************************/



   /* ---------------------------*/
    /* Edit season year*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZWYY = AF0ZM007.XSNYR;
  AF0ZW01.XSECD = AF0ZM007.XSECD;

  AF0ZS13(); /* Edit season year*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM007.XSNYR cursor, bold; /* Highlight field*/
    if (converseVar.validationMsgNum == 138)
      set AF0ZM007.XSECD cursor, bold; /* Highlight field*/
    end
    return;
  end


   /* ---------------------------*/
    /* Edit Life Cycle Codes*/
   /* ---------------------------*/

  if (AF0ZM007.AF0ZMLCS[1] == "  "
   && AF0ZM007.AF0ZMLCS[2] == "  "
   && AF0ZM007.AF0ZMLCS[3] == "  "
   && AF0ZM007.AF0ZMLCS[4] == "  ")
    /* NEXT SENTENCE*/
  else
    AF0ZS51(); /* Left Justify Cycle Codes*/
  end

  AF0ZW01.AF0ZWIXM = 4;

  while (AF0ZW01.AF0ZWIXM >= 1)

    AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
    AF0ZW01.AF0ZMLCS = AF0ZM007.AF0ZMLCS[AF0ZWIXM];

    AF0ZS16(); /* Validate Life Cycle Codes*/

    if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
      set AF0ZM007.AF0ZMLCS[AF0ZWIXM] cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "034 "; /* Process number*/
    end
    AF0ZW01.AF0ZWIXM = AF0ZW01.AF0ZWIXM - 1;
  end


   /* ---------------------------*/
    /* Edit owner group cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XOWCD = AF0ZM007.XOWCD;
  AF0ZW01.XWHCD = "51";
  AF0ZW01.XOWDESC = " ";

  AF0ZS52(); /* Edit owner group code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM007.XOWCD cursor, bold; /* Highlight field*/
  end

  AF0ZM007.XOWDESC = AF0ZW01.XOWDESC;



   /* ---------------------------*/
    /* Edit silhouette cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XSUCD = AF0ZM007.XSUCD;
  AF0ZW01.XSUDESC = " ";

  AF0ZS07(); /* Edit silhouette code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM007.XSUCD cursor, bold; /* Highlight field*/
  end

  AF0ZM007.XSUDESC = AF0ZW01.XSUDESC;



   /* ---------------------------*/
    /* Edit category cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPCCD = AF0ZM007.XPCCD;
  AF0ZW01.XPCDESC = " ";

  AF0ZS08(); /* Edit category code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM007.XPCCD cursor, bold; /* Highlight field*/
  end

  AF0ZM007.XPCDESC = AF0ZW01.XPCDESC;



   /* ---------------------------*/
    /* Edit Line cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPLCD = AF0ZM007.XPLCD;
  AF0ZW01.XPLDESC = " ";

  AF0ZS09(); /* Edit Product Line Code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM007.XPLCD cursor, bold; /* Highlight field*/
  end

  AF0ZM007.XPLDESC = AF0ZW01.XPLDESC;



   /* ---------------------------*/
    /* Edit gender/age cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XGACD = AF0ZM007.XGACD;
  AF0ZW01.XGADESC = " ";

  AF0ZS10(); /* Edit Gender/age code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM007.XGACD cursor, bold; /* Highlight field*/
  end
      /* ;*/
  AF0ZM007.XGADESC = AF0ZW01.XGADESC;



   /* ---------------------------*/
    /* Edit Type cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPRCD = AF0ZM007.XPRCD;
  AF0ZW01.XPRDESC = " ";

  AF0ZS11(); /* Edit category code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM007.XPRCD cursor, bold; /* Highlight field*/
  end

  AF0ZM007.XPRDESC = AF0ZW01.XPRDESC;



   /* ---------------------------*/
    /* Edit Division cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XDVCD = AF0ZM007.XDVCD;
  AF0ZW01.XDVDESC = " ";

  AF0ZS12(); /* Edit Division Code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM007.XDVCD cursor, bold; /* Highlight field*/
  end

  AF0ZM007.XDVCD = AF0ZW01.XDVCD;
  AF0ZM007.XDVDESC = AF0ZW01.XDVDESC;


   /* ---------------------------*/
    /* Edit season code*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XSECD = AF0ZM007.XSECD;

  AF0ZS14(); /* Edit season code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM007.XSECD cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit Forecaster userid*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZMFUI = AF0ZM007.AF0ZMFUI;

  AF0ZS15(); /* Edit forecaster userid*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM007.AF0ZMFUI cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Reset error flag*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.AFWFIRST = "Y";
    exit stack; /* Exit to redisplay map*/
  end


end // end AF0Z074

// Process valid input request
Function AF0Z075()
  if (AFWREC.AFWFIRST == "Y") /* REDISPLAY MAP*/
    AFWREC.AFWFIRST = "N";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/

  if (TA3REC.TA3RGNID == "03") /* PRODUCTION REGION*/
    AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0ZT07.TARJCL)
      AF0ZW01.AF0ZWIXT = sysVar.arrayIndex; /* POINT TO TEST JCL*/
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* POINT TO TEST JCL*/
    else
      AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (AF0ZT07.TARTYPE[AF0ZWIXT] == "P") /* Parameters statement*/

      AF0ZS34();

      TA6REC.TARJCL[TA6INDEX] = AF0ZW07.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = AF0ZT07.TARJCL[AF0ZWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0ZT07.TARTYPE[AF0ZWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ZT07.TARJCL[AF0ZWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/

  XSTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "075 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AFWREC.XXXMSGNO = 74; /* Job was submitted*/
    AF0ZW01.AF0ZMSEL[7] = "*"; /* Indicate function completed*/

    set AF0ZM007 initial; /* Clear map output area*/

    AFWREC.AFWFIRST = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end AF0Z075

// *** Clsout summary Rpt (SILH)
Function AF0Z090()
   /* *************************************************************/

           /* Proposed closeout summary - silh*/

   /* *************************************************************/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF0Z091(); /* Format and display the map*/

  AF0Z092(); /* Check attention identifier*/

  AF0Z093(); /* Reset fields to normal intensity*/

  AF0Z094(); /* Verify the data that was entered*/

  if (AF0ZM009.AF0ZM-LZFL == "N")
    AF0Z095(); /* Process valid input request*/

  else
    AF0Z096(); /* Process valid input request (Laser)*/

  end
end // end AF0Z090

// Format and display the map
Function AF0Z091()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  AF0ZM009.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0ZM009.XURDEST = TA6REC.XURDEST; /* Print destination*/
  AF0ZM009.XRODESC = TA6REC.XRODESC; /* Printer description*/
  AF0ZM009.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  AF0ZM009.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  AF0ZM009.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

  AF0ZM009.AF0ZW-BLFL = AF0ZW01.AF0ZW-BLFL; /* DEFAULT BLANKS TO 'N'*/
  AF0ZM009.AF0ZW-UNFL = AF0ZW01.AF0ZW-UNFL; /* DEFAULT UNITS  TO 'N'*/
  AF0ZM009.AF0ZM-LZFL = "N"; /* Default Laser printer flag to 'N'*/
   /* ------------------------------------------------------------*/
   /* Move XP1REC fields to map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    AF0ZM009.AF0ZMFUI = XP1REC.XXXUSER; /* Forecaster userid*/
    AF0ZM009.XSECD = XP1REC.XSECD; /* Season code*/
    AF0ZM009.XSNYR = XP1REC.XSNYR; /* Season year*/

    if (XP1REC.XOWCD != " ")
      AF0ZM009.XOWCD = XP1REC.XOWCD; /* Owner group*/
    else
      AF0ZM009.XOWCD = "00";
    end

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.XXXMSGNO != 0) /* Message to display*/

    AF0ZM009.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    if (AFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.XXXMSGNO);
    end /* Message number*/

    set AF0ZM009 alarm; /* Indicate sound alarm*/

  end

  converse AF0ZM009 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  AFWREC.XXXMSGNO = 0; /* Message number*/
  AFWREC.AFWPRCSN = " "; /* Module identification*/


end // end AF0Z091

// Check attention identifier
Function AF0Z092()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    AF0ZW01.AF0ZMSEL[9] = "C"; /* Indicate selection cancelled*/
    set AF0ZM009 initial; /* m009 input/output*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf1) /* help*/
    COMMAREA.CAITEM = "AF0ZM009"; /* this map for help*/
    XSAFS01(); /* transfer to help*/
    AFWREC.AFWFIRST = "Y";
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    AFWREC.AFWPRCSN = "052 "; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end AF0Z092

// Reset highlighted fields
Function AF0Z093()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0ZM009.AF0ZMFUI initialAttributes; /* Forecaster*/
  set AF0ZM009.XSECD initialAttributes; /* Season code*/
  set AF0ZM009.XSNYR initialAttributes; /* Season year*/
  set AF0ZM009.XGACD initialAttributes; /* Gender age*/
  set AF0ZM009.XPLCD initialAttributes; /* Product line*/
  set AF0ZM009.XPCCD initialAttributes; /* Product cat*/
  set AF0ZM009.XOWCD initialAttributes; /* Owner group*/
  set AF0ZM009.AF0ZW-BLFL initialAttributes; /* BLANKS ONLY FLAG*/
  set AF0ZM009.AF0ZW-UNFL initialAttributes; /* UNITS  ONLY FLAG*/
  set AF0ZM009.AF0ZMMCC initialAttributes; /* min dollars at cost*/
  set AF0ZM009.AF0ZMMCP initialAttributes; /* minover purchase percentage*/
  set AF0ZM009.AF0ZM-LZFL initialAttributes; /* Laser Printer flag*/


   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0ZM009.XSECD == "?"
   || AF0ZM009.XGACD == "?"
   || AF0ZM009.XPLCD == "?"
   || AF0ZM009.XPCCD == "?"
   || AF0ZM009.XOWCD == "?")

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "053 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    return; /* Exit to next process*/

  end



   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/

  if (AF0ZM009.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0ZM009.XSECD; /* Set XP1REC field*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM009.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end

  end


   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender Age*/
   /* *============================**/

  if (AF0ZM009.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0ZM009.XGACD; /* Set XP1REC field*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM009.XGACD = XP1REC.XGACD; /* Move selected code to map*/
    end

  end


   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product line*/
   /* *============================**/

  if (AF0ZM009.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0ZM009.XPLCD; /* Set XP1REC field*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM009.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
    end

  end


   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Product Catagory*/
   /* *============================**/

  if (AF0ZM009.XPCCD == "?") /* Pop-up window requested*/

    XP1REC.XPCCD = AF0ZM009.XPCCD; /* Set XP1REC field*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM009.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
    end

  end

   /* *============================**/
   /* *  Pop-up Window for XOWCD   * Owner group*/
   /* *============================**/

  if (AF0ZM009.XOWCD == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0ZM009.XOWCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03";
    XP1REC.XWHCD = "51";

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM009.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
    end

  end


   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/


  converseLib.clearScreen();
   /* Reset screen before display*/



end // end AF0Z093

// Verify the entered data
Function AF0Z094()
   /* *************************************************************/
                 /* Verify the entered data*/

    /* The following edits are performed in sequence;*/

            /* 1) Season year*/
            /* 2) A)XGA, XPL, XPC*/
            /* 3) Season code*/
            /* 4) Forecaster userid*/

   /* *************************************************************/

   /* ---------------------------*/
   /* minimums*/
   /* ---------------------------*/

  AF0ZW01.AF0ZWMCC = AF0ZM009.AF0ZMMCC;
  AF0ZW01.AF0ZWMCP = AF0ZM009.AF0ZMMCP;


   /* ---------------------------*/
    /* Edit season year*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZWYY = AF0ZM009.XSNYR;
  AF0ZW01.XSECD = AF0ZM009.XSECD;

  AF0ZS13(); /* Edit season year*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM009.XSNYR cursor, bold; /* Highlight field*/
    if (converseVar.validationMsgNum == 138)
      set AF0ZM009.XSECD cursor, bold; /* Highlight field*/
    end
    exit stack;
  end
   /* ---------------------------*/
    /* Edit category cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPCCD = AF0ZM009.XPCCD;
  AF0ZW01.XPCDESC = " ";

  AF0ZS08(); /* Edit category code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM009.XPCCD cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Edit Product Line cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPLCD = AF0ZM009.XPLCD;
  AF0ZW01.XPLDESC = " ";

  AF0ZS09(); /* Edit Product Line code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM009.XPLCD cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit gender/age cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XGACD = AF0ZM009.XGACD;
  AF0ZW01.XGADESC = " ";

  AF0ZS10(); /* Edit Gender/age code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM009.XGACD cursor, bold; /* Highlight field*/
  end
      /* ;*/

   /* ---------------------------*/
    /* Edit owner group cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XOWCD = AF0ZM009.XOWCD;
  AF0ZW01.XOWDESC = " ";
  AF0ZW01.XWHCD = "51";

  AF0ZS52(); /* Edit Owner group code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM009.XOWCD cursor, bold; /* Highlight field*/
  end
   /* -----------------------------*/
    /* Edit blanks only flag*/
   /* -----------------------------*/
  if (AF0ZM009.AF0ZW-BLFL != "Y"
   && AF0ZM009.AF0ZW-BLFL != "N")
    set AF0ZM009.AF0ZW-BLFL cursor, bold;
    AFWREC.AFWPRCSN = " ";
    converseLib.validationFailed(39);
    AF0ZW01.AF0ZWERR = "Y";
  else
    AF0ZW01.AF0ZW-BLFL = AF0ZM009.AF0ZW-BLFL;
  end
      /* ;*/
   /* -----------------------------*/
    /* Edit Units  only flag*/
   /* -----------------------------*/
  if (AF0ZM009.AF0ZW-UNFL != "Y"
   && AF0ZM009.AF0ZW-UNFL != "N")
    AF0ZW01.AF0ZW-UNFL = "Y";
    AF0ZM009.AF0ZW-UNFL = "Y";
  else
    AF0ZW01.AF0ZW-UNFL = AF0ZM009.AF0ZW-UNFL;
  end
      /* ;*/

   /* ---------------------------*/
    /* Edit season code*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XSECD = AF0ZM009.XSECD;

  AF0ZS14(); /* Edit season code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM009.XSECD cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Edit Forecaster userid*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZMFUI = AF0ZM009.AF0ZMFUI;

  AF0ZS15(); /* Edit forecaster userid*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM009.AF0ZMFUI cursor, bold; /* Highlight field*/
  end

   /* -----------------------------*/
    /* Edit laser printer flag*/
   /* -----------------------------*/
  if (AF0ZM009.AF0ZM-LZFL != "Y"
   && AF0ZM009.AF0ZM-LZFL != "N")
    set AF0ZM009.AF0ZM-LZFL cursor, bold;
    AFWREC.AFWPRCSN = " ";
    converseLib.validationFailed(39);
    AF0ZW01.AF0ZWERR = "Y";
  else
    AF0ZW01.AF0ZW-LZFL = AF0ZM009.AF0ZM-LZFL;
  end
      /* ;*/

   /* ---------------------------*/
    /* Reset error flag*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/

  end


end // end AF0Z094

// Process valid input request
Function AF0Z095()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

  if (TA3REC.TA3RGNID == "03") /* PRODUCTION REGION*/
    AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0ZT09.TARJCL)
      AF0ZW01.AF0ZWIXT = sysVar.arrayIndex; /* POINT TO TEST JCL*/
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* POINT TO TEST JCL*/
    else
      AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (AF0ZT09.TARTYPE[AF0ZWIXT] == "L"
     && AF0ZM009.AF0ZW-UNFL == "Y")
       /* find end of units report*/
      while (AF0ZT09.TARTYPE[AF0ZWIXT] != "S"
       && AF0ZT09.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT09.TARTYPE[AF0ZWIXT] == "B"
     && AF0ZM009.AF0ZW-UNFL == "N")
       /* find end of units report*/
      while (AF0ZT09.TARTYPE[AF0ZWIXT] != "Q"
       && AF0ZT09.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT09.TARTYPE[AF0ZWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set AF0ZW09 empty; /* Parameters work area*/

      /* -----------------------------------*/
       /* Move in required pass parm fields*/
      /* -----------------------------------*/


      AF0ZW09.XGACD = AF0ZW01.XGACD;
      AF0ZW09.XPLCD = AF0ZW01.XPLCD;
      AF0ZW09.XPCCD = AF0ZW01.XPCCD;
      AF0ZW09.XSECD = AF0ZW01.XSECD;
      AF0ZW09.XOWCD = AF0ZW01.XOWCD;
      AF0ZW09.XSNYR = AF0ZW01.AF0ZWSYR;
      AF0ZW09.AF0ZW-BLFL = AF0ZW01.AF0ZW-BLFL;
      AF0ZW09.AF0ZW-UNFL = AF0ZW01.AF0ZW-UNFL;
      AF0ZW09.AF0ZWMCC = AF0ZW01.AF0ZWMCC;
      AF0ZW09.AF0ZWMCP = AF0ZW01.AF0ZWMCP;

      if (AF0ZW01.XGACD == " ") /* If value not entered*/
        AF0ZW09.XGACD = "**";
      end
      if (AF0ZW01.XOWCD == " ")
        AF0ZW09.XOWCD = "**";
      end

      if (AF0ZW01.XPLCD == " ") /* If value not entered*/
        AF0ZW09.XPLCD = "**";
      end

      if (AF0ZW01.XPCCD == " ") /* If value not entered*/
        AF0ZW09.XPCCD = "**";
      end

      /* -----------------------------------*/
       /* Check for default forecaster code*/
      /* -----------------------------------*/
      if (XP1REC.PG1FCTCD == " ") /* If value not entered*/
        AF0ZW09.PG1FCTCD = "**";
      else
        AF0ZW09.PG1FCTCD = XP1REC.PG1FCTCD;
      end

      TA6REC.TARJCL[TA6INDEX] = AF0ZW09.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = AF0ZT09.TARJCL[AF0ZWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0ZT09.TARTYPE[AF0ZWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ZT09.TARJCL[AF0ZWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/

  XSTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "055 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AFWREC.XXXMSGNO = 70; /* Job was submitted*/
    AF0ZW01.AF0ZMSEL[9] = "*"; /* Indicate function completed*/

    set AF0ZM009 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end AF0Z095

// Process valide input - Laser
Function AF0Z096()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

  if (TA3REC.TA3RGNID == "03") /* PRODUCTION REGION*/
    AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0ZT21.TARJCL)
      AF0ZW01.AF0ZWIXT = sysVar.arrayIndex; /* POINT TO TEST JCL*/
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* POINT TO TEST JCL*/
    else
      AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (AF0ZT21.TARTYPE[AF0ZWIXT] == "L"
     && AF0ZM009.AF0ZW-UNFL == "N")
       /* find end of units report*/
      while (AF0ZT21.TARTYPE[AF0ZWIXT] != "S"
       && AF0ZT21.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT21.TARTYPE[AF0ZWIXT] == "B"
     && AF0ZM009.AF0ZW-UNFL == "N")
       /* find end of units report*/
      while (AF0ZT21.TARTYPE[AF0ZWIXT] != "Q"
       && AF0ZT21.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT21.TARTYPE[AF0ZWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set AF0ZW09 empty; /* Parameters work area*/

      /* -----------------------------------*/
       /* Move in required pass parm fields*/
      /* -----------------------------------*/


      AF0ZW09.XGACD = AF0ZW01.XGACD;
      AF0ZW09.XPLCD = AF0ZW01.XPLCD;
      AF0ZW09.XPCCD = AF0ZW01.XPCCD;
      AF0ZW09.XSECD = AF0ZW01.XSECD;
      AF0ZW09.XOWCD = AF0ZW01.XOWCD;
      AF0ZW09.XSNYR = AF0ZW01.AF0ZWSYR;
      AF0ZW09.AF0ZW-BLFL = AF0ZW01.AF0ZW-BLFL;
      AF0ZW09.AF0ZW-UNFL = AF0ZW01.AF0ZW-UNFL;
      AF0ZW09.AF0ZWMCC = AF0ZW01.AF0ZWMCC;
      AF0ZW09.AF0ZWMCP = AF0ZW01.AF0ZWMCP;

      if (AF0ZW01.XGACD == " ") /* If value not entered*/
        AF0ZW09.XGACD = "**";
      end
      if (AF0ZW01.XOWCD == " ")
        AF0ZW09.XOWCD = "**";
      end

      if (AF0ZW01.XPLCD == " ") /* If value not entered*/
        AF0ZW09.XPLCD = "**";
      end

      if (AF0ZW01.XPCCD == " ") /* If value not entered*/
        AF0ZW09.XPCCD = "**";
      end

      /* -----------------------------------*/
       /* Check for default forecaster code*/
      /* -----------------------------------*/
      if (XP1REC.PG1FCTCD == " ") /* If value not entered*/
        AF0ZW09.PG1FCTCD = "**";
      else
        AF0ZW09.PG1FCTCD = XP1REC.PG1FCTCD;
      end

      TA6REC.TARJCL[TA6INDEX] = AF0ZW09.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = AF0ZT21.TARJCL[AF0ZWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0ZT21.TARTYPE[AF0ZWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ZT21.TARJCL[AF0ZWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/

  XSTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "055 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AFWREC.XXXMSGNO = 70; /* Job was submitted*/
    AF0ZW01.AF0ZMSEL[9] = "*"; /* Indicate function completed*/

    set AF0ZM009 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end AF0Z096

// *** speciaL bookings cust**
Function AF0Z100()
   /* *************************************************************/

            /* special bookings customer list*/

   /* *************************************************************/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF0Z101(); /* Format and display the map*/

  AF0Z102(); /* Check attention identifier*/

  AF0Z105(); /* Process valid input request*/


end // end AF0Z100

// Format and display the map
Function AF0Z101()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  AF0ZM009.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0ZM010.XURDEST = TA6REC.XURDEST; /* Print destination*/
  AF0ZM010.XRODESC = TA6REC.XRODESC; /* Printer description*/
  AF0ZM010.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  AF0ZM010.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  AF0ZM010.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/




   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.XXXMSGNO != 0) /* Message to display*/

    AF0ZM010.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    if (AFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.XXXMSGNO);
    end /* Message number*/

    set AF0ZM010 alarm; /* Indicate sound alarm*/

  end

  converse AF0ZM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  AFWREC.XXXMSGNO = 0; /* Message number*/
  AFWREC.AFWPRCSN = " "; /* Module identification*/


end // end AF0Z101

// Check attention identifier
Function AF0Z102()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    AF0ZW01.AF0ZMSEL[10] = "C"; /* Indicate selection cancelled*/
    set AF0ZM010 initial; /* m010 input/output*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf1) /* help*/
    COMMAREA.CAITEM = "AF0ZM010"; /* this map for help*/
    XSAFS01(); /* transfer to help*/
    AFWREC.AFWFIRST = "T";
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    AFWREC.AFWPRCSN = "052 "; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end AF0Z102

// Process valid input request
Function AF0Z105()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (AF0ZT11.TARTYPE[AF0ZWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = AF0ZT11.TARJCL[AF0ZWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0ZT11.TARTYPE[AF0ZWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ZT11.TARJCL[AF0ZWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/

  XSTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "055 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AFWREC.XXXMSGNO = 70; /* Job was submitted*/
    AF0ZW01.AF0ZMSEL[10] = "*"; /* Indicate function completed*/

    set AF0ZM010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end AF0Z105

// *** Clsout Summry rpt (cat)
Function AF0Z110()
   /* *************************************************************/

           /* Proposed Closeout Summary - Cat*/

   /* *************************************************************/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF0Z111(); /* Format and display the map*/

  AF0Z112(); /* Check attention identifier*/

  AF0Z113(); /* Reset fields to normal intensity*/

  AF0Z114(); /* Verify the data that was entered*/

  if (AF0ZM011.AF0ZM-LZFL == "N")
    AF0Z115(); /* Process valid input request*/
  else
    AF0Z116(); /* Process valid input request (Laser*/
  end

end // end AF0Z110

// Format and display the map
Function AF0Z111()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  AF0ZM011.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0ZM011.XURDEST = TA6REC.XURDEST; /* Print destination*/
  AF0ZM011.XRODESC = TA6REC.XRODESC; /* Printer description*/
  AF0ZM011.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  AF0ZM011.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  AF0ZM011.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

  AF0ZM011.AF0ZW-BLFL = AF0ZW01.AF0ZW-BLFL; /* Default blanks flag*/
  AF0ZM011.AF0ZW-UNFL = AF0ZW01.AF0ZW-UNFL; /* Default units  flag*/
  AF0ZM011.AF0ZM-LZFL = "N"; /* Default Laser printer flag to 'N'*/

   /* ------------------------------------------------------------*/
   /* Move XP1REC fields to map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    AF0ZM011.AF0ZMFUI = XP1REC.XXXUSER; /* Forecaster userid*/
    AF0ZM011.XSECD = XP1REC.XSECD; /* Season code*/
    AF0ZM011.XSNYR = XP1REC.XSNYR; /* Season year*/

    if (XP1REC.XOWCD != " ")
      AF0ZM011.XOWCD = XP1REC.XOWCD; /* Owner group*/
    else
      AF0ZM011.XOWCD = "00";
    end

  end


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.XXXMSGNO != 0) /* Message to display*/

    AF0ZM011.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    if (AFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.XXXMSGNO);
    end /* Message number*/

    set AF0ZM011 alarm; /* Indicate sound alarm*/

  end

  converse AF0ZM011 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  AFWREC.XXXMSGNO = 0; /* Message number*/
  AFWREC.AFWPRCSN = " "; /* Module identification*/


end // end AF0Z111

// Check attention identifier
Function AF0Z112()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    AF0ZW01.AF0ZMSEL[11] = "C"; /* Indicate selection cancelled*/
    set AF0ZM011 initial; /* m011 input/output*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf1) /* help*/
    COMMAREA.CAITEM = "AF0ZM011"; /* this map for help*/
    XSAFS01(); /* transfer to help*/
    AFWREC.AFWFIRST = "Y";
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    AFWREC.AFWPRCSN = "052 "; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end AF0Z112

// Reset highlighted fields
Function AF0Z113()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0ZM011.AF0ZMFUI initialAttributes; /* Forecaster*/
  set AF0ZM011.XSECD initialAttributes; /* Season code*/
  set AF0ZM011.XSNYR initialAttributes; /* Season year*/
  set AF0ZM011.XGACD initialAttributes; /* Gender age*/
  set AF0ZM011.XOWCD initialAttributes; /* Owner group*/
  set AF0ZM011.XPLCD initialAttributes; /* Product line*/
  set AF0ZM011.XPCCD initialAttributes; /* Product cat*/
  set AF0ZM011.AF0ZW-BLFL initialAttributes; /* Blanks flag*/
  set AF0ZM011.AF0ZW-UNFL initialAttributes; /* Units  flag*/
  set AF0ZM011.AF0ZMMCC initialAttributes; /* min at cst*/
  set AF0ZM011.AF0ZMMCP initialAttributes; /* min over purchase percent*/
  set AF0ZM011.AF0ZM-LZFL initialAttributes; /* Laer Printer flag*/


   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0ZM011.XSECD == "?"
   || AF0ZM011.XGACD == "?"
   || AF0ZM011.XOWCD == "?"
   || AF0ZM011.XPLCD == "?"
   || AF0ZM011.XPCCD == "?")

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "053 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    return; /* Exit to next process*/

  end



   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/

  if (AF0ZM011.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0ZM011.XSECD; /* Set XP1REC field*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM011.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end

  end

   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender Age*/
   /* *============================**/

  if (AF0ZM011.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0ZM011.XGACD; /* Set XP1REC field*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM011.XGACD = XP1REC.XGACD; /* Move selected code to map*/
    end

  end

   /* *============================**/
   /* *  Pop-up Window for XOWCD   * Owner group*/
   /* *============================**/

  if (AF0ZM011.XOWCD == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0ZM011.XOWCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03";
    XP1REC.XWHCD = "51";

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM011.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
    end

  end

   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product line*/
   /* *============================**/

  if (AF0ZM011.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0ZM011.XPLCD; /* Set XP1REC field*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM011.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
    end

  end


   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Product Catagory*/
   /* *============================**/

  if (AF0ZM011.XPCCD == "?") /* Pop-up window requested*/

    XP1REC.XPCCD = AF0ZM011.XPCCD; /* Set XP1REC field*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM011.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
    end

  end




   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/


  converseLib.clearScreen();
   /* Reset screen before display*/

  exit stack; /* Exit to redisplay map*/



end // end AF0Z113

// Verify the entered data
Function AF0Z114()
   /* *************************************************************/
                 /* Verify the entered data*/

    /* The following edits are performed in sequence;*/

            /* 1) Season year*/
            /* 2) A)XGA, XPL, XPC*/
            /* 3) Season code*/
            /* 4) Forecaster userid*/

   /* *************************************************************/

   /* ---------------------------*/
    /* minimums*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWMCC = AF0ZM011.AF0ZMMCC;
  AF0ZW01.AF0ZWMCP = AF0ZM011.AF0ZMMCP;

   /* ---------------------------*/
    /* Edit season year*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZWYY = AF0ZM011.XSNYR;
  AF0ZW01.XSECD = AF0ZM011.XSECD;

  AF0ZS13(); /* Edit season year*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM011.XSNYR cursor, bold; /* Highlight field*/
    if (converseVar.validationMsgNum == 138)
      set AF0ZM011.XSECD cursor, bold; /* Highlight field*/
    end
    exit stack;
  end
   /* ---------------------------*/
    /* Edit category cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPCCD = AF0ZM011.XPCCD;
  AF0ZW01.XPCDESC = " ";

  AF0ZS08(); /* Edit category code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM011.XPCCD cursor, bold; /* Highlight field*/
  end



   /* ---------------------------*/
    /* Edit Product Line cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPLCD = AF0ZM011.XPLCD;
  AF0ZW01.XPLDESC = " ";

  AF0ZS09(); /* Edit Product Line code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM011.XPLCD cursor, bold; /* Highlight field*/
  end




   /* ---------------------------*/
    /* Edit gender/age cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XGACD = AF0ZM011.XGACD;
  AF0ZW01.XGADESC = " ";

  AF0ZS10(); /* Edit Gender/age code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM011.XGACD cursor, bold; /* Highlight field*/
  end
      /* ;*/

   /* ---------------------------*/
    /* Edit owner group cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XOWCD = AF0ZM011.XOWCD;
  AF0ZW01.XWHCD = "51";
  AF0ZW01.XOWDESC = " ";

  AF0ZS52(); /* Edit owner group code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM011.XOWCD cursor, bold; /* Highlight field*/
  end
      /* ;*/
   /* -----------------------------*/
   /* Edit blanks flag*/
   /* -----------------------------*/
  if (AF0ZM011.AF0ZW-BLFL != "Y"
   && AF0ZM011.AF0ZW-BLFL != "N")
    AF0ZW01.AF0ZWERR = "Y";
    AFWREC.AFWPRCSN = " ";
    converseLib.validationFailed(39);
    set AF0ZM011.AF0ZW-BLFL cursor, bold;
  else
    AF0ZW01.AF0ZW-BLFL = AF0ZM011.AF0ZW-BLFL;
  end

   /* ---------------------------*/
    /* Edit Units only flag*/
   /* ---------------------------*/

  if (AF0ZM011.AF0ZW-UNFL != "Y"
   && AF0ZM011.AF0ZW-UNFL != "N")
    AF0ZM011.AF0ZW-UNFL = "Y";
    AF0ZW01.AF0ZW-UNFL = "Y";
  else
    AF0ZW01.AF0ZW-UNFL = AF0ZM011.AF0ZW-UNFL;
  end


   /* ---------------------------*/
    /* Edit season code*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XSECD = AF0ZM011.XSECD;

  AF0ZS14(); /* Edit season code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM011.XSECD cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Edit Forecaster userid*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZMFUI = AF0ZM011.AF0ZMFUI;

  AF0ZS15(); /* Edit forecaster userid*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM011.AF0ZMFUI cursor, bold; /* Highlight field*/
  end

   /* -----------------------------*/
   /* Edit laser printer flag*/
   /* -----------------------------*/
  if (AF0ZM011.AF0ZM-LZFL != "Y"
   && AF0ZM011.AF0ZM-LZFL != "N")
    AF0ZW01.AF0ZWERR = "Y";
    AFWREC.AFWPRCSN = " ";
    converseLib.validationFailed(39);
    set AF0ZM011.AF0ZM-LZFL cursor, bold;
  else
    AF0ZW01.AF0ZW-LZFL = AF0ZM011.AF0ZM-LZFL;
  end


   /* ---------------------------*/
    /* Reset error flag*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  else

    if (converseVar.validationMsgNum != 0) /* Error was found*/
      exit stack; /* Exit to redisplay map*/
    end

  end


end // end AF0Z114

// Process valid input request
Function AF0Z115()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

  if (TA3REC.TA3RGNID == "03") /* PRODUCTION REGION*/
    AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0ZT12.TARJCL)
      AF0ZW01.AF0ZWIXT = sysVar.arrayIndex; /* POINT TO TEST JCL*/
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* POINT TO TEST JCL*/
    else
      AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (AF0ZT12.TARTYPE[AF0ZWIXT] == "L"
     && AF0ZM011.AF0ZW-UNFL == "Y")
       /* find end of units report*/
      while (AF0ZT12.TARTYPE[AF0ZWIXT] != "S"
       && AF0ZT12.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT12.TARTYPE[AF0ZWIXT] == "B"
     && AF0ZM011.AF0ZW-UNFL == "N")
       /* find end of units report*/
      while (AF0ZT12.TARTYPE[AF0ZWIXT] != "Q"
       && AF0ZT12.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT12.TARTYPE[AF0ZWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set AF0ZW09 empty; /* Parameters work area*/

      /* -----------------------------------*/
       /* Move in required pass parm fields*/
      /* -----------------------------------*/


      AF0ZW09.XSECD = AF0ZW01.XSECD;
      AF0ZW09.XGACD = AF0ZW01.XGACD;
      AF0ZW09.XOWCD = AF0ZW01.XOWCD;
      AF0ZW09.XPLCD = AF0ZW01.XPLCD;
      AF0ZW09.XPCCD = AF0ZW01.XPCCD;
      AF0ZW09.XSNYR = AF0ZW01.AF0ZWSYR;
      AF0ZW09.AF0ZW-BLFL = AF0ZW01.AF0ZW-BLFL;
      AF0ZW09.AF0ZW-UNFL = AF0ZW01.AF0ZW-UNFL;
      AF0ZW09.AF0ZWMCC = AF0ZW01.AF0ZWMCC;
      AF0ZW09.AF0ZWMCP = AF0ZW01.AF0ZWMCP;

      if (AF0ZW01.XGACD == " ") /* If value not entered*/
        AF0ZW09.XGACD = "**";
      end

      if (AF0ZW01.XOWCD == " ") /* If value not entered*/
        AF0ZW09.XOWCD = "**";
      end

      if (AF0ZW01.XPLCD == " ") /* If value not entered*/
        AF0ZW09.XPLCD = "**";
      end

      if (AF0ZW01.XPCCD == " ") /* If value not entered*/
        AF0ZW09.XPCCD = "**";
      end


      /* -----------------------------------*/
       /* Check for default forecaster code*/
      /* -----------------------------------*/
      if (XP1REC.PG1FCTCD == " ") /* If value not entered*/
        AF0ZW09.PG1FCTCD = "**";
      else
        AF0ZW09.PG1FCTCD = XP1REC.PG1FCTCD;
      end

      TA6REC.TARJCL[TA6INDEX] = AF0ZW09.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = AF0ZT12.TARJCL[AF0ZWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0ZT12.TARTYPE[AF0ZWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ZT12.TARJCL[AF0ZWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/

  XSTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "055 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AFWREC.XXXMSGNO = 70; /* Job was submitted*/
    AF0ZW01.AF0ZMSEL[11] = "*"; /* Indicate function completed*/

    set AF0ZM011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end AF0Z115

Function AF0Z116()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

  if (TA3REC.TA3RGNID == "03") /* PRODUCTION REGION*/
    AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0ZT22.TARJCL)
      AF0ZW01.AF0ZWIXT = sysVar.arrayIndex; /* POINT TO TEST JCL*/
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* POINT TO TEST JCL*/
    else
      AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (AF0ZT22.TARTYPE[AF0ZWIXT] == "L"
     && AF0ZM011.AF0ZW-UNFL == "Y")
       /* find end of units report*/
      while (AF0ZT22.TARTYPE[AF0ZWIXT] != "S"
       && AF0ZT22.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT22.TARTYPE[AF0ZWIXT] == "B"
     && AF0ZM011.AF0ZW-UNFL == "N")
       /* find end of units report*/
      while (AF0ZT22.TARTYPE[AF0ZWIXT] != "Q"
       && AF0ZT22.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT22.TARTYPE[AF0ZWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set AF0ZW09 empty; /* Parameters work area*/

      /* -----------------------------------*/
       /* Move in required pass parm fields*/
      /* -----------------------------------*/


      AF0ZW09.XSECD = AF0ZW01.XSECD;
      AF0ZW09.XGACD = AF0ZW01.XGACD;
      AF0ZW09.XOWCD = AF0ZW01.XOWCD;
      AF0ZW09.XPLCD = AF0ZW01.XPLCD;
      AF0ZW09.XPCCD = AF0ZW01.XPCCD;
      AF0ZW09.XSNYR = AF0ZW01.AF0ZWSYR;
      AF0ZW09.AF0ZW-BLFL = AF0ZW01.AF0ZW-BLFL;
      AF0ZW09.AF0ZW-UNFL = AF0ZW01.AF0ZW-UNFL;
      AF0ZW09.AF0ZWMCC = AF0ZW01.AF0ZWMCC;
      AF0ZW09.AF0ZWMCP = AF0ZW01.AF0ZWMCP;

      if (AF0ZW01.XGACD == " ") /* If value not entered*/
        AF0ZW09.XGACD = "**";
      end

      if (AF0ZW01.XOWCD == " ") /* If value not entered*/
        AF0ZW09.XOWCD = "**";
      end

      if (AF0ZW01.XPLCD == " ") /* If value not entered*/
        AF0ZW09.XPLCD = "**";
      end

      if (AF0ZW01.XPCCD == " ") /* If value not entered*/
        AF0ZW09.XPCCD = "**";
      end


      /* -----------------------------------*/
       /* Check for default forecaster code*/
      /* -----------------------------------*/
      if (XP1REC.PG1FCTCD == " ") /* If value not entered*/
        AF0ZW09.PG1FCTCD = "**";
      else
        AF0ZW09.PG1FCTCD = XP1REC.PG1FCTCD;
      end

      TA6REC.TARJCL[TA6INDEX] = AF0ZW09.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = AF0ZT22.TARJCL[AF0ZWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0ZT22.TARTYPE[AF0ZWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ZT22.TARJCL[AF0ZWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/

  XSTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "055 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AFWREC.XXXMSGNO = 70; /* Job was submitted*/
    AF0ZW01.AF0ZMSEL[11] = "*"; /* Indicate function completed*/

    set AF0ZM011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end AF0Z116

// *** Clsout DETAIL REPORT***
Function AF0Z120()
   /* *************************************************************/

           /* Proposed Closeout Detail Report*/

   /* *************************************************************/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF0Z121(); /* Format and display the map*/

  AF0Z122(); /* Check attention identifier*/

  AF0Z123(); /* Reset fields to normal intensity*/

  AF0Z124(); /* Verify the data that was entered*/

  if (AF0ZM012.AF0ZM-LZFL == "N")
    AF0Z125(); /* Process valid input request*/

  else
    AF0Z126(); /* Process valid input request*/

  end

end // end AF0Z120

// Format and display the map
Function AF0Z121()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  AF0ZM012.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0ZM012.XURDEST = TA6REC.XURDEST; /* Print destination*/
  AF0ZM012.XRODESC = TA6REC.XRODESC; /* Printer description*/
  AF0ZM012.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  AF0ZM012.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  AF0ZM012.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

  AF0ZM012.AF0ZW-BLFL = AF0ZW01.AF0ZW-BLFL; /* Default blanks flag*/
  AF0ZM012.AF0ZW-UNFL = AF0ZW01.AF0ZW-UNFL; /* Default units  flag*/
  AF0ZM012.AF0ZM-LZFL = "N"; /* Default Laser printer flag to 'N'*/

   /* ------------------------------------------------------------*/
   /* Move XP1REC fields to map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    AF0ZM012.AF0ZMFUI = XP1REC.XXXUSER; /* Forecaster userid*/
    AF0ZM012.XSECD = XP1REC.XSECD; /* Season code*/
    AF0ZM012.XSNYR = XP1REC.XSNYR; /* Season year*/

    if (XP1REC.XOWCD != " ")
      AF0ZM012.XOWCD = XP1REC.XOWCD; /* Owner group*/
    else
      AF0ZM012.XOWCD = "00";
    end

  end


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.XXXMSGNO != 0) /* Message to display*/

    AF0ZM012.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    if (AFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.XXXMSGNO);
    end /* Message number*/

    set AF0ZM012 alarm; /* Indicate sound alarm*/

  end

  converse AF0ZM012 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  AFWREC.XXXMSGNO = 0; /* Message number*/
  AFWREC.AFWPRCSN = " "; /* Module identification*/


end // end AF0Z121

// Check attention identifier
Function AF0Z122()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    AF0ZW01.AF0ZMSEL[12] = "C"; /* Indicate selection cancelled*/
    set AF0ZM012 initial; /* m009 input/output*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf1) /* help*/
    COMMAREA.CAITEM = "AF0ZM012"; /* this map for help*/
    XSAFS01(); /* transfer to help*/
    AFWREC.AFWFIRST = "Y";
    AF0ZW01.AF0ZWSWX = "Y"; /* Indicate exit requested*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    AFWREC.AFWPRCSN = "052 "; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end AF0Z122

// Reset highlighted fields
Function AF0Z123()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0ZM012.AF0ZMFUI initialAttributes; /* Forecaster*/
  set AF0ZM012.XSECD initialAttributes; /* Season code*/
  set AF0ZM012.XSNYR initialAttributes; /* Season year*/
  set AF0ZM012.XGACD initialAttributes; /* Gender age*/
  set AF0ZM012.XOWCD initialAttributes; /* Owner group*/
  set AF0ZM012.XPLCD initialAttributes; /* Product line*/
  set AF0ZM012.XPCCD initialAttributes; /* Product cat*/
  set AF0ZM012.AF0ZMMCC initialAttributes; /* min at cst*/
  set AF0ZM012.AF0ZMMCP initialAttributes; /* min over prchse pct*/
  set AF0ZM012.AF0ZW-UNFL initialAttributes; /* Units flag*/
  set AF0ZM012.AF0ZM-LZFL initialAttributes; /* Laser printer*/



   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0ZM012.XSECD == "?"
   || AF0ZM012.XGACD == "?"
   || AF0ZM012.XOWCD == "?"
   || AF0ZM012.XPLCD == "?"
   || AF0ZM012.XPCCD == "?")

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "053 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    return; /* Exit to next process*/

  end



   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/

  if (AF0ZM012.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0ZM012.XSECD; /* Set XP1REC field*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM012.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end

  end


   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender Age*/
   /* *============================**/

  if (AF0ZM012.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0ZM012.XGACD; /* Set XP1REC field*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM012.XGACD = XP1REC.XGACD; /* Move selected code to map*/
    end

  end


   /* *============================**/
   /* *  Pop-up Window for XOWCD   * Owner group*/
   /* *============================**/

  if (AF0ZM012.XOWCD == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0ZM012.XOWCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03";
    XP1REC.XWHCD = "51";

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM012.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
    end

  end

   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product line*/
   /* *============================**/

  if (AF0ZM012.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0ZM012.XPLCD; /* Set XP1REC field*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM012.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
    end

  end


   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Product Catagory*/
   /* *============================**/

  if (AF0ZM012.XPCCD == "?") /* Pop-up window requested*/

    XP1REC.XPCCD = AF0ZM012.XPCCD; /* Set XP1REC field*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0ZM012.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
    end

  end




   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/


  converseLib.clearScreen();
   /* Reset screen before display*/

  exit stack; /* Exit to redisplay map*/




end // end AF0Z123

// Verify the entered data
Function AF0Z124()
   /* *************************************************************/
                 /* Verify the entered data*/

    /* The following edits are performed in sequence;*/

            /* 1) Season year*/
            /* 2) A)XGA, XPL, XPC*/
            /* 3) Season code*/
            /* 4) Forecaster userid*/

   /* *************************************************************/

   /* ---------------------------*/
   /* minimums*/
   /* ---------------------------*/
   /* ;*/
  AF0ZW01.AF0ZWMCC = AF0ZM012.AF0ZMMCC;
  AF0ZW01.AF0ZWMCP = AF0ZM012.AF0ZMMCP;
   /* ;*/
   /* ---------------------------*/
    /* Edit season year*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZWYY = AF0ZM012.XSNYR;
  AF0ZW01.XSECD = AF0ZM012.XSECD;

  AF0ZS13(); /* Edit season year*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM012.XSNYR cursor, bold; /* Highlight field*/
    if (converseVar.validationMsgNum == 138)
      set AF0ZM012.XSECD cursor, bold; /* Highlight field*/
    end
    exit stack;
  end

   /* ;*/
   /* ---------------------------*/
    /* Edit category cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPCCD = AF0ZM012.XPCCD;
  AF0ZW01.XPCDESC = " ";

  AF0ZS08(); /* Edit category code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM012.XPCCD cursor, bold; /* Highlight field*/
  end




   /* ---------------------------*/
    /* Edit Product Line cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XPLCD = AF0ZM012.XPLCD;
  AF0ZW01.XPLDESC = " ";

  AF0ZS09(); /* Edit Product Line code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM012.XPLCD cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Edit gender/age cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XGACD = AF0ZM012.XGACD;
  AF0ZW01.XGADESC = " ";

  AF0ZS10(); /* Edit Gender/age code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM012.XGACD cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Edit owner group cd*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XOWCD = AF0ZM012.XOWCD;
  AF0ZW01.XOWDESC = " ";
  AF0ZW01.XWHCD = "51";
  AF0ZS52(); /* Edit Owner group code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM012.XOWCD cursor, bold; /* Highlight field*/
  end

   /* ---------------------------*/
   /* Edit blanks flag*/
   /* ---------------------------*/
  if (AF0ZM012.AF0ZW-BLFL != "Y"
   && AF0ZM012.AF0ZW-BLFL != "N")
    AF0ZW01.AF0ZWERR = "Y";
    AFWREC.AFWPRCSN = " ";
    converseLib.validationFailed(39);
    set AF0ZM012.AF0ZW-BLFL cursor, bold;
  else
    AF0ZW01.AF0ZW-BLFL = AF0ZM012.AF0ZW-BLFL;
  end

   /* ---------------------------*/
   /* Edit units  flag*/
   /* ---------------------------*/
  if (AF0ZM012.AF0ZW-UNFL != "Y"
   && AF0ZM012.AF0ZW-UNFL != "N")
    AF0ZW01.AF0ZW-UNFL = "Y";
    AF0ZM012.AF0ZW-UNFL = "Y";
  else
    AF0ZW01.AF0ZW-UNFL = AF0ZM012.AF0ZW-UNFL;
  end

   /* ---------------------------*/
    /* Edit season code*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.XSECD = AF0ZM012.XSECD;

  AF0ZS14(); /* Edit season code*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM012.XSECD cursor, bold; /* Highlight field*/
  end


   /* ---------------------------*/
    /* Edit Forecaster userid*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/
  AF0ZW01.AF0ZMFUI = AF0ZM012.AF0ZMFUI;

  AF0ZS15(); /* Edit forecaster userid*/

  if (AF0ZW01.AF0ZWERR == "Y") /* If error has occurred*/
    set AF0ZM012.AF0ZMFUI cursor, bold; /* Highlight field*/
  end

   /* ---------------------------*/
   /* Edit laser printer flag*/
   /* ---------------------------*/
  if (AF0ZM012.AF0ZM-LZFL != "Y"
   && AF0ZM012.AF0ZM-LZFL != "N")
    AF0ZW01.AF0ZWERR = "Y";
    AFWREC.AFWPRCSN = " ";
    converseLib.validationFailed(39);
    set AF0ZM012.AF0ZM-LZFL cursor, bold;
  else
    AF0ZW01.AF0ZW-LZFL = AF0ZM012.AF0ZM-LZFL;
  end


   /* ---------------------------*/
    /* Reset error flag*/
   /* ---------------------------*/
  AF0ZW01.AF0ZWERR = "N"; /* Set error ind flag to no*/


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  else

    if (converseVar.validationMsgNum != 0) /* Error was found*/
      exit stack; /* Exit to redisplay map*/
    end

  end


end // end AF0Z124

// Process valid input request
Function AF0Z125()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

  if (TA3REC.TA3RGNID == "03") /* PRODUCTION REGION*/
    AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0ZT13.TARJCL)
      AF0ZW01.AF0ZWIXT = sysVar.arrayIndex; /* POINT TO TEST JCL*/
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* POINT TO TEST JCL*/
    else
      AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (AF0ZT13.TARTYPE[AF0ZWIXT] == "L"
     && AF0ZM012.AF0ZW-UNFL == "Y")
       /* find end of units report*/
      while (AF0ZT13.TARTYPE[AF0ZWIXT] != "S"
       && AF0ZT13.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT13.TARTYPE[AF0ZWIXT] == "B"
     && AF0ZM012.AF0ZW-UNFL == "N")
       /* find end of units report*/
      while (AF0ZT13.TARTYPE[AF0ZWIXT] != "Q"
       && AF0ZT13.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT13.TARTYPE[AF0ZWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set AF0ZW09 empty; /* Parameters work area*/

      /* -----------------------------------*/
       /* Move in required pass parm fields*/
      /* -----------------------------------*/


      AF0ZW09.XSECD = AF0ZW01.XSECD;
      AF0ZW09.XGACD = AF0ZW01.XGACD;
      AF0ZW09.XOWCD = AF0ZW01.XOWCD;
      AF0ZW09.XPLCD = AF0ZW01.XPLCD;
      AF0ZW09.XPCCD = AF0ZW01.XPCCD;
      AF0ZW09.XSNYR = AF0ZW01.AF0ZWSYR;
      AF0ZW09.AF0ZW-BLFL = AF0ZW01.AF0ZW-BLFL;
      AF0ZW09.AF0ZW-UNFL = AF0ZW01.AF0ZW-UNFL;
      AF0ZW09.AF0ZWMCC = AF0ZW01.AF0ZWMCC;
      AF0ZW09.AF0ZWMCP = AF0ZW01.AF0ZWMCP;

      if (AF0ZW01.XGACD == " ") /* If value not entered*/
        AF0ZW09.XGACD = "**";
      end

      if (AF0ZW01.XOWCD == " ") /* If value not entered*/
        AF0ZW09.XOWCD = "**";
      end
      if (AF0ZW01.XPLCD == " ") /* If value not entered*/
        AF0ZW09.XPLCD = "**";
      end
      if (AF0ZW01.XPCCD == " ") /* If value not entered*/
        AF0ZW09.XPCCD = "**";
      end


      /* -----------------------------------*/
       /* Check for default forecaster code*/
      /* -----------------------------------*/
      if (XP1REC.PG1FCTCD == " ") /* If value not entered*/
        AF0ZW09.PG1FCTCD = "**";
      else
        AF0ZW09.PG1FCTCD = XP1REC.PG1FCTCD;
      end

      TA6REC.TARJCL[TA6INDEX] = AF0ZW09.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = AF0ZT13.TARJCL[AF0ZWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0ZT13.TARTYPE[AF0ZWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ZT13.TARJCL[AF0ZWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/

  XSTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "055 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AFWREC.XXXMSGNO = 70; /* Job was submitted*/
    AF0ZW01.AF0ZMSEL[12] = "*"; /* Indicate function completed*/

    set AF0ZM012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end AF0Z125

// Process valid input - Laser
Function AF0Z126()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

  if (TA3REC.TA3RGNID == "03") /* PRODUCTION REGION*/
    AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0ZT23.TARJCL)
      AF0ZW01.AF0ZWIXT = sysVar.arrayIndex; /* POINT TO TEST JCL*/
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* POINT TO TEST JCL*/
    else
      AF0ZW01.AF0ZWIXT = 1; /* Input table index*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (AF0ZT23.TARTYPE[AF0ZWIXT] == "L"
     && AF0ZM012.AF0ZW-UNFL == "N")
       /* find end of units report*/
      while (AF0ZT23.TARTYPE[AF0ZWIXT] != "S"
       && AF0ZT23.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT23.TARTYPE[AF0ZWIXT] == "B"
     && AF0ZM012.AF0ZW-UNFL == "N")
       /* find end of units report*/
      while (AF0ZT23.TARTYPE[AF0ZWIXT] != "Q"
       && AF0ZT23.TARJCL[AF0ZWIXT] != "/*EOF")
        AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /**/
      end
    end

    if (AF0ZT23.TARTYPE[AF0ZWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set AF0ZW09 empty; /* Parameters work area*/

      /* -----------------------------------*/
       /* Move in required pass parm fields*/
      /* -----------------------------------*/


      AF0ZW09.XSECD = AF0ZW01.XSECD;
      AF0ZW09.XGACD = AF0ZW01.XGACD;
      AF0ZW09.XOWCD = AF0ZW01.XOWCD;
      AF0ZW09.XPLCD = AF0ZW01.XPLCD;
      AF0ZW09.XPCCD = AF0ZW01.XPCCD;
      AF0ZW09.XSNYR = AF0ZW01.AF0ZWSYR;
      AF0ZW09.AF0ZW-BLFL = AF0ZW01.AF0ZW-BLFL;
      AF0ZW09.AF0ZW-UNFL = AF0ZW01.AF0ZW-UNFL;
      AF0ZW09.AF0ZWMCC = AF0ZW01.AF0ZWMCC;
      AF0ZW09.AF0ZWMCP = AF0ZW01.AF0ZWMCP;

      if (AF0ZW01.XGACD == " ") /* If value not entered*/
        AF0ZW09.XGACD = "**";
      end

      if (AF0ZW01.XOWCD == " ") /* If value not entered*/
        AF0ZW09.XOWCD = "**";
      end
      if (AF0ZW01.XPLCD == " ") /* If value not entered*/
        AF0ZW09.XPLCD = "**";
      end
      if (AF0ZW01.XPCCD == " ") /* If value not entered*/
        AF0ZW09.XPCCD = "**";
      end


      /* -----------------------------------*/
       /* Check for default forecaster code*/
      /* -----------------------------------*/
      if (XP1REC.PG1FCTCD == " ") /* If value not entered*/
        AF0ZW09.PG1FCTCD = "**";
      else
        AF0ZW09.PG1FCTCD = XP1REC.PG1FCTCD;
      end

      TA6REC.TARJCL[TA6INDEX] = AF0ZW09.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = AF0ZT23.TARJCL[AF0ZWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0ZT23.TARTYPE[AF0ZWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ZT23.TARJCL[AF0ZWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      AF0ZW01.AF0ZWIXT = AF0ZW01.AF0ZWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/

  XSTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "055 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    AFWREC.XXXMSGNO = 70; /* Job was submitted*/
    AF0ZW01.AF0ZMSEL[12] = "*"; /* Indicate function completed*/

    set AF0ZM012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end AF0Z126

// ** Report Request Menu **
Function AF0Z990()
   /* *************************************************************/

                  /* REPORT REQUEST MENU*/

   /* *************************************************************/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF0Z991(); /* Format and display the map*/

  AF0Z992(); /* Check attention identifier*/

  AF0Z993(); /* Reset fields to normal intensity*/

  AF0Z994(); /* Verify the data that was entered*/

  AF0Z995(); /* Process valid input request*/


end // end AF0Z990

// Format and display the map
Function AF0Z991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set AF0ZM099 initial; /* M099 input/output*/

    AF0ZW01.AF0ZWIXM = 1; /* Initialize map index*/

    while (AF0ZW01.AF0ZWIXM <= AF0ZW01.AF0ZWIXL) /* Until end of array*/

      AF0ZM099.AF0ZMSEL[AF0ZWIXM] = AF0ZW01.AF0ZMSEL[AF0ZWIXM];

      AF0ZW01.AF0ZWIXM = AF0ZW01.AF0ZWIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AF0ZM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0ZM099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0ZM099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.XXXMSGNO != 0) /* Message to display*/

    AF0ZM099.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    if (AFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.XXXMSGNO);
    end /* Message number*/

    set AF0ZM099 alarm; /* Indicate sound alarm*/

  end

  converse AF0ZM099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AFWREC.XXXMSGNO = 0; /* Message number*/
  AFWREC.AFWPRCSN = " "; /* Module identification*/

  COMMAREA.CATOAP = AF0ZM099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = AF0ZM099.CAITEM; /* Application data*/


end // end AF0Z991

// Check attention identifier
Function AF0Z992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AF0ZM099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    AF0ZS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSAFS01(); /* Exit to another application*/

      set AF0ZM099.CATOAP cursor, bold; /* Highlight*/

    else

      AFWREC.AFWPRCSN = "992 "; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    AF0ZS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0ZM099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "AF0A"; /* TO application*/
    end

    XSAFS01(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    AF0ZS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    AFWREC.AFWPRCSN = "992 "; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    AF0ZS99(); /* Exit to display map*/

  end


end // end AF0Z992

// Reset highlighted fields
Function AF0Z993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  AF0ZW01.AF0ZWIXM = 1; /* Initialize index*/

  while (AF0ZW01.AF0ZWIXM <= AF0ZW01.AF0ZWIXL) /* Until all lines are reset*/

    set AF0ZM099.AF0ZMSEL[AF0ZWIXM] initialAttributes; /* Reset select field*/

    AF0ZW01.AF0ZWIXM = AF0ZW01.AF0ZWIXM + 1; /* Increment line index*/

  end

  set AF0ZM099.CATOAP initialAttributes; /* TO application*/
  set AF0ZM099.CAITEM initialAttributes; /* Application data*/


end // end AF0Z993

// Verify the entered data
Function AF0Z994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    AFWREC.AFWPRCSN = "994 "; /* Module identification*/
    set AF0ZM099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine Operating System Region.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID > " ") /* Application data was entered*/
    /* NEXT SENTENCE*/
  else
    AF0ZS40();
  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  AF0ZW01.AF0ZWIXM = AF0ZW01.AF0ZWIXL; /* Initialize line index*/

  while (AF0ZW01.AF0ZWIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (AF0ZM099.AF0ZMSEL[AF0ZWIXM] != AF0ZW01.AF0ZMSEL[AF0ZWIXM]
     && AF0ZM099.AF0ZMSEL[AF0ZWIXM] != " " /* Line was selected*/
     && AF0ZM099.AF0ZMSEL[AF0ZWIXM] != "S") /* and not with an "S"*/

      AFWREC.AFWPRCSN = "994 "; /* Module identification*/
      set AF0ZM099.AF0ZMSEL[AF0ZWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(123); /* Only "S" is valid*/

    end

    AF0ZW01.AF0ZWIXM = AF0ZW01.AF0ZWIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AF0ZS99(); /* Exit to display map*/
  end


end // end AF0Z994

// Process valid input request
Function AF0Z995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  move AF0ZM099.AF0ZMSEL to AF0ZW01.AF0ZMSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If missing distribution information and at least one line*/
   /* was selected, force report distribution specification.*/
   /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == " "  /* No print destination*/
   || TA6REC.XURUSRNM == " " /* or report recipient*/
   || TA6REC.XURBLDID == " ") /* or NIKE building*/

    if (AF0ZW01.AF0ZMSEL[1] != "S" /* Report distribution not selected*/
     && "S" in AF0ZW01.AF0ZMSEL)   /* and another line was selected*/

      AFWREC.AFWPRCSN = "995 "; /* Module identification*/
      converseLib.validationFailed(21); /* Indicate missing or invalid*/
      AF0ZW01.AF0ZMSEL[1] = "S"; /* Force report distribution*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If specify distribution selected, indicate to subroutine to*/
   /* display report distribution, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (AF0ZW01.AF0ZMSEL[1] == "S") /* Report distribution selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end AF0Z995

// Zero fill character percents
Function AF0ZS01()
   /* *************************************************************/
            /* Zero fill the character percentage.*/

      /* This process is designed to zero fill the percentage*/
      /* entered on the screen for edit purposes and also to*/
      /* make the move to a numeric field valid.*/
   /* *************************************************************/

  if (AF0ZW01.AF0ZWPC1 == " ") /* If first character is blank*/
    AF0ZW01.AF0ZWPC1 = "0";
  end

  if (AF0ZW01.AF0ZWPC2 == " ") /* If second character is blank*/
    AF0ZW01.AF0ZWPC2 = "0";
  end

  if (AF0ZW01.AF0ZWPC3 == " ") /* If third character is blank*/
    AF0ZW01.AF0ZWPC3 = "0";
  end


end // end AF0ZS01

// Edit Scheduler userid
Function AF0ZS02()


  if (AF0ZW01.AF0ZMSUI == " ") /* Eq spaces*/
    XP1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
    return; /* Return to calling process*/
  end


   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "**"; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "  "; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0ZW01.AF0ZMSUI; /* Scheduler id*/


   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
    AF0ZW01.AF0ZWSPG = "Y"; /* Indicate set map page*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
      AFWREC.AFWPRCSN = "S02 "; /* Process number*/
      converseLib.validationFailed(82); /* Indicate error msg*/
      XP1REC.PG1SC4CD = " "; /* Space out save area*/
      return; /* Return to calling process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
          AF0ZW01.AF0ZWSPG = "Y"; /* Indicate set map page*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.PG1SC4CD = PG1REC.PG1SC4CD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end
      end
    end
  end

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0ZS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0ZW01.AF0ZMSUI; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AF0ZS02

// Edit Style no.
Function AF0ZS03()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/

  if (AF0ZW01.SY1STNBR == " ") /* Style = spaces*/
    XP1REC.SY1STNBR = " "; /* Clear save fields*/
    XP1REC.SY1STYNM = " ";
    XP1REC.SY1STYNM = " ";
    return; /* Exit to calling process*/
  end


   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/

  AF0ZS04(); /* Select set style*/

  AF0ZS05(); /* Validate style*/

  AF0ZS06(); /* Close style cursor*/



end // end AF0ZS03

// Select set style
Function AF0ZS04()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0ZW01.SY1STNBR; /* Style no.*/


   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      AF0ZW01.AF0ZWSPG = "Y"; /* Indicate set map page*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S04 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/



end // end AF0ZS04

// Process retrieved style
Function AF0ZS05()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      AF0ZW01.SY1STYNM = PG2REC.SY1STYNM; /* Move short name*/
      XP1REC.SY1STNBR = PG2REC.SY1STNBR; /* Move number*/
      XP1REC.SY1STYNM = PG2REC.SY1STYNM; /* Move short name*/
      XP1REC.SY1STYNM = PG2REC.SY1STYNM; /* Move name*/
      return; /* Return to calling process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
                    /* (Field in error)*/
      AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
      AF0ZW01.SY1STYNM = " "; /* Clear name*/
      converseLib.validationFailed(33); /* Indicate not found*/
      AFWREC.AFWPRCSN = "S05 "; /* Process number*/
      return; /* Exit to calling rtn*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      AF0ZW01.AF0ZWSPG = "Y"; /* Indicate set map page*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/



end // end AF0ZS05

// Close style cursor
Function AF0ZS06()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(10); /* Indicate system error*/

  AF0ZW01.AF0ZWSPG = "Y"; /* Indicate set map page*/




end // end AF0ZS06

// Edit Silhouette cd
Function AF0ZS07()


  if (AF0ZW01.XSUCD == " ") /* Field eq spaces*/
    XP1REC.XSUCD = " ";
    XP1REC.XSUABRV = " ";
    XP1REC.XSUDESC = " ";
    return; /* Return to calling process*/
  end


  if (AF0ZW01.XSUCD in XSUTBL.XSUCD)

    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      AF0ZW01.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XSUCD = AF0ZW01.XSUCD; /* save to wk storage*/
      XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
      XP1REC.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex];
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
  AFWREC.AFWPRCSN = "S07 "; /* Process number*/
  converseLib.validationFailed(34); /* indicate error message*/


end // end AF0ZS07

// Edit Category cd
Function AF0ZS08()


  if (AF0ZW01.XPCCD == " ") /* Map fld spaces*/
    XP1REC.XPCCD = " "; /* save to wk storage*/
    XP1REC.XPCABRV = " ";
    XP1REC.XPCDESC = " ";
    return; /* Return to calling routine*/
  end


  if (AF0ZW01.XPCCD in XPCTBL.XPCCD)

    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      AF0ZW01.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XPCCD = AF0ZW01.XPCCD; /* save to wk storage*/
      XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex];
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
  AFWREC.AFWPRCSN = "S08 "; /* Process number*/
  converseLib.validationFailed(35); /* indicate error message*/



end // end AF0ZS08

// Edit Product Line Cd
Function AF0ZS09()


  if (AF0ZW01.XPLCD == " ") /* Map fld eq spaces*/
    XP1REC.XPLCD = " "; /* save to wk storage*/
    XP1REC.XPLABRV = " ";
    XP1REC.XPLDESC = " ";
    return; /* Return to calling process*/
  end

  AF0ZW01.XGPCD = "03";

  if (AF0ZW01.XPLKEY in XPLTBL.XPLKEY)

    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      AF0ZW01.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XPLCD = AF0ZW01.XPLCD; /* save to wk storage*/
      XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      XP1REC.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex];
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/

  XP1REC.XPLDESC = " ";
  XP1REC.XPLABRV = " ";
  AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
  AFWREC.AFWPRCSN = "S09 "; /* Process number*/
  converseLib.validationFailed(81); /* indicate error message*/



end // end AF0ZS09

// Edit Gender/Age cd
Function AF0ZS10()


  if (AF0ZW01.XGACD == " ") /* Map fld eq spaces*/
    XP1REC.XGACD = " "; /* save to wk storage*/
    XP1REC.XGAABRV = " ";
    XP1REC.XGADESC = " ";
    return; /* Return to calling process*/
  end


  if (AF0ZW01.XGACD in XGATBL.XGACD)

    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XGATBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/

      AF0ZW01.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XGACD = AF0ZW01.XGACD; /* save to wk storage*/
      XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
      XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
  AFWREC.AFWPRCSN = "S10 "; /* Process number*/
  converseLib.validationFailed(36); /* indicate error message*/



end // end AF0ZS10

// Edit Product Type Cd
Function AF0ZS11()


  if (AF0ZW01.XPRCD == " ") /* Map fld eq spaces*/
    XP1REC.XPRCD = " "; /* save to wk storage*/
    XP1REC.XPRABRV = " ";
    XP1REC.XPRDESC = " ";
    return; /* Return to calling process*/
  end


  if (AF0ZW01.XPRCD in XPRTBL.XPRCD)

    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      AF0ZW01.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XPRCD = AF0ZW01.XPRCD; /* save to wk storage*/
      XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
      XP1REC.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
  AFWREC.AFWPRCSN = "S11 "; /* Process number*/
  converseLib.validationFailed(80); /* indicate error message*/



end // end AF0ZS11

// Edit Division Code
Function AF0ZS12()


  if (AF0ZW01.XDVCD == " ") /* Map fld eq spaces*/
    return;
  end


  if (AF0ZW01.XDVCD in XDVTBL.XDVCD)

     /* IF XDVTBL.XXXSTAT(EZETST) EQ 'A'     ; Active status*/

    XP1REC.XDVCD = XDVTBL.XDVCD[sysVar.arrayIndex]; /* save to wk storage*/
    XP1REC.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
    XP1REC.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    AF0ZW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex]; /* To wk storage*/
    return; /* Exit to calling process*/

     /* END ;*/

  end

                   /* (field in error)*/
  AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
  AFWREC.AFWPRCSN = "S12 "; /* Process number*/
  converseLib.validationFailed(29); /* indicate error message*/



end // end AF0ZS12

// Edit Season yr
Function AF0ZS13()

   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AF0ZW01.AF0ZWYY > 60)
    AF0ZW01.AF0ZWCC = 19;
  else
    AF0ZW01.AF0ZWCC = 20;
  end
   /*  */
  /* **********************************************************/
  /* do not allow user to enter anything beyond SU 2000   **/
  /* **********************************************************/

  if (AF0ZW01.AF0ZWSYR < 2000)
    AF0ZS13S();
  else
    if (AF0ZW01.AF0ZWSYR == 2000)
      if (AF0ZW01.XSECD == "SP"
       || AF0ZW01.XSECD == "SU")
        AF0ZS13S();
      else
        XP1REC.XSNYR = +0; /* save to working storage*/
        AF0ZW01.AF0ZWERR = "Y"; /* indicate error*/
        AFWREC.AFWPRCSN = "S13 "; /* Process number*/
        converseLib.validationFailed(138); /* indicate error message*/
      end
    else
      if (AF0ZW01.AF0ZWSYR > 2000)
        XP1REC.XSNYR = +0; /* save to working storage*/
        AF0ZW01.AF0ZWERR = "Y"; /* indicate error*/
        AFWREC.AFWPRCSN = "S13 "; /* Process number*/
        converseLib.validationFailed(138); /* indicate error message*/
      end
    end
  end
end // end AF0ZS13

// Season yr search
Function AF0ZS13S()

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
   /* ------------------------  Y2K IN END  --------------------------*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0ZW01.AF0ZWSYR
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      XP1REC.XSNYR = AF0ZW01.AF0ZWYY; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  XP1REC.XSNYR = +0; /* save to working storage*/
  AF0ZW01.AF0ZWERR = "Y"; /* indicate error*/
  AFWREC.AFWPRCSN = "S13 "; /* Process number*/
  converseLib.validationFailed(26); /* indicate error message*/

end // end AF0ZS13S

// Edit Season cd
Function AF0ZS14()


  if (AF0ZW01.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0ZW01.XSECD; /* save to working storage*/

  else
                     /* (field in error)*/
    AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
    AFWREC.AFWPRCSN = "S14 "; /* Process number*/
    converseLib.validationFailed(16); /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/

  end

   /* -----------------------------------------*/
   /* Validate season cd/yr combination*/
   /* -----------------------------------------*/

  AF0ZW01.AF0ZWXSS = " "; /* Initialize wk area*/
  AF0ZW01.AF0ZWXYR = +0; /* Initialize wk area*/

  AF0ZW01.AF0ZWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  AF0ZW01.AF0ZWXYR = XP1REC.XSNYR; /* Format wk area*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0ZW01.AF0ZWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      AF0ZW01.XSNBDT = YSNTBL.XSN-SESN-BDT[AFWIDX5];
      AF0ZW01.XSNXDT = YSNTBL.XSN-SESN-XDT[AFWIDX5];
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
            /* (season cd/yr combination invalid)*/
  AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
  AFWREC.AFWPRCSN = "S11 "; /* Process number*/
  converseLib.validationFailed(67); /* indicate error message*/

end // end AF0ZS14

// Edit Forecaster userid
Function AF0ZS15()


  if (AF0ZW01.AF0ZMFUI == " ") /* Eq spaces*/
    XP1REC.PG1FCTCD = " "; /* forecaster code*/
    XP1REC.XXXUSER = " "; /* forecaster userid*/
    return; /* Return to calling process*/
  end


   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0ZW01.AF0ZMFUI; /* Scheduler id*/


   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
    AF0ZW01.AF0ZWSPG = "Y"; /* Indicate set map page*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
      AFWREC.AFWPRCSN = "S15 "; /* Process number*/
      converseLib.validationFailed(37); /* Indicate error msg*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
          AF0ZW01.AF0ZWSPG = "Y"; /* Indicate set map page*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          XP1REC.XXXUSER = PG1REC.XXXUSER; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end
      end
    end
  end

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0ZS15"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0ZW01.AF0ZMFUI; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/





end // end AF0ZS15

// Validate Life Cycle Codes
Function AF0ZS16()
   /* ---------------------------*/
    /* Edit Life Cycle Codes*/
   /* ---------------------------*/

  if (AF0ZW01.AF0ZMLCS == "  ") /* SPACES ARE VALID LIFE CYCLE SELECTION CODE*/
    return;
  end


  if (AF0ZW01.AF0ZMLCS in XLCTBL.XLCCD)

    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      AF0ZW01.XLCDESC = XLCTBL.XLCDESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XLCCD = AF0ZW01.AF0ZMLCS; /* save to wk storage*/
      XP1REC.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
      XP1REC.XLCDESC = XLCTBL.XLCDESC[sysVar.arrayIndex];
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AF0ZW01.AF0ZWERR = "Y"; /* Indicate error*/
  AFWREC.AFWPRCSN = "S16 "; /* Process number*/
  converseLib.validationFailed(79); /* indicate error message*/





end // end AF0ZS16

// Build AF1082 Parm Card
Function AF0ZS30()
   /* ------------------------------------------------------------*/
   /* Format the variable parameters entered by the user.*/
   /* ------------------------------------------------------------*/

  set AF0ZW02 empty; /* Parameters work area*/

   /* -----------------------------------*/
   /* Move in required pass parm fields*/
   /* -----------------------------------*/

  AF0ZW02.AF0ZWOBI = "O"; /* Indicate online submitted*/

   /* -----------------------------------*/
   /* Check for default forecaster code*/
   /* -----------------------------------*/
  if (XP1REC.PG1FCTCD == " ") /* If value not entered*/
    AF0ZW02.PG1FCTCD = "**";
  else
    AF0ZW02.PG1FCTCD = XP1REC.PG1FCTCD;
  end

   /* -----------------------------------*/
   /* Season/Year codes*/
   /* -----------------------------------*/

  AF0ZW02.XSECD = AF0ZM002.XSECD;
  AF0ZW01.AF0ZWYY = AF0ZM002.XSNYR;
  AF0ZW02.XSNYR = AF0ZW01.AF0ZWSYR;

   /* -----------------------------------*/
   /* Division code*/
   /* -----------------------------------*/

  if (AF0ZM002.XDVCD == " ") /* If value not entered*/
    AF0ZW02.XDVCD = "**";
  else
    AF0ZW02.XDVCD = AF0ZW01.XDVCD;
  end

   /* -----------------------------------*/
   /* Owner group code*/
   /* -----------------------------------*/

  if (AF0ZM002.XOWCD == " ") /* If value not entered*/
    AF0ZW02.XOWCD = "**";
  else
    AF0ZW02.XOWCD = AF0ZW01.XOWCD;
  end

   /* -----------------------------------*/
   /* Check for default Product Type code*/
   /* -----------------------------------*/

  if (AF0ZM002.XPRCD == " ") /* If value not entered*/
    AF0ZW02.XPRCD = "**";
  else
    AF0ZW02.XPRCD = AF0ZM002.XPRCD;
  end

   /* -----------------------------------*/
   /* Check for default gender/age code*/
   /* -----------------------------------*/
  if (AF0ZM002.XGACD == " ") /* If value not entered*/
    AF0ZW02.XGACD = "**";
  else
    AF0ZW02.XGACD = AF0ZM002.XGACD;
  end

   /* -----------------------------------*/
   /* Check for default Product Line code*/
   /* -----------------------------------*/
  if (AF0ZM002.XPLCD == " ") /* If value not entered*/
    AF0ZW02.XPLCD = "**";
  else
    AF0ZW02.XPLCD = AF0ZM002.XPLCD;
  end

   /* -----------------------------------*/
   /* Check for default category code*/
   /* -----------------------------------*/
  if (AF0ZM002.XPCCD == " ") /* If value not entered*/
    AF0ZW02.XPCCD = "**";
  else
    AF0ZW02.XPCCD = AF0ZM002.XPCCD;
  end

   /* -----------------------------------*/
   /* Check for default silhouette code*/
   /* -----------------------------------*/
  if (AF0ZM002.XSUCD == " ") /* If value not entered*/
    AF0ZW02.XSUCD = "**";
  else
    AF0ZW02.XSUCD = AF0ZM002.XSUCD;
  end

   /* -----------------------------------*/
   /* Check for default style number*/
   /* -----------------------------------*/
  if (AF0ZM002.SY1STNBR == " ") /* If value not entered*/
    AF0ZW02.SY1STNBR = "******";
  else
    AF0ZW02.SY1STNBR = AF0ZM002.SY1STNBR;
  end

   /* -----------------------------------*/
   /* Check for default scheduler code*/
   /* -----------------------------------*/
  if (XP1REC.PG1SC4CD == " ") /* If value not entered*/
    AF0ZW02.PG1SC4CD = "**";
  else
    AF0ZW02.PG1SC4CD = XP1REC.PG1SC4CD;
  end

   /* ---------------------------------------------*/
   /* Check for default bookings variance percent*/
   /* ---------------------------------------------*/
  if (AF0ZM002.AF0ZMBKV == " ") /* If value not entered*/
    AF0ZW02.AF0ZWBKV = 999;
  else
    AF0ZW01.AF0ZWPS1 = AF0ZM002.AF0ZMBKV;
    AF0ZS01(); /* Zero fill the character fields*/
    AF0ZW01.AF0ZWPCT = AF0ZW01.AF0ZWPS1;
    AF0ZW02.AF0ZWBKV = AF0ZW01.AF0ZWPCT;
  end

   /* ---------------------------------------------*/
   /* Check for default BLA variance percent*/
   /* ---------------------------------------------*/
  if (AF0ZM002.AF0ZMBLV == " ") /* If value not entered*/
    AF0ZW02.AF0ZWBLV = 999;
  else
    AF0ZW01.AF0ZWPS1 = AF0ZM002.AF0ZMBLV;
    AF0ZS01(); /* Zero fill the character fields*/
    AF0ZW01.AF0ZWPCT = AF0ZW01.AF0ZWPS1;
    AF0ZW02.AF0ZWBLV = AF0ZW01.AF0ZWPCT;
  end

   /* -----------------------------------*/
   /* Check for default spec bkngs ind*/
   /* -----------------------------------*/
  if (AF0ZM002.AF0ZMSUM == " ") /* If value not entered*/
    AF0ZW02.AF0ZWSUM = "N";
  else
    AF0ZW02.AF0ZWSUM = AF0ZM002.AF0ZMSUM;
  end

   /* -----------------------------------*/
   /* Set LIFE-CYCLE-CODES to ALL*/
   /* -----------------------------------*/

  AF0ZW02.AF0ZMLCS[1] = "**";
  AF0ZW02.AF0ZMLCS[2] = "**";
  AF0ZW02.AF0ZMLCS[3] = "**";
  AF0ZW02.AF0ZMLCS[4] = "**";



end // end AF0ZS30

// Build AF1341 Parm Card
Function AF0ZS31()
   /* ------------------------------------------------------------*/
   /* Format the variable parameters entered by the user.*/
   /* ------------------------------------------------------------*/

  set AF0ZW03 empty; /* Parameters work area*/

   /* -----------------------------------*/
   /* Move in required pass parm fields*/
   /* -----------------------------------*/

  AF0ZW03.AF0ZWOBI = "O"; /* Indicate online submitted*/

   /* -----------------------------------*/
   /* Check for default forecaster code*/
   /* -----------------------------------*/
  if (AF0ZM003.AF0ZMFUI == " ") /* If value not entered*/
    AF0ZW03.PG1FCTCD = "**";
  else
    AF0ZW03.PG1FCTCD = XP1REC.PG1FCTCD;
  end

   /* -----------------------------------*/
   /* Season Code*/
   /* -----------------------------------*/
  AF0ZW03.XSECD = AF0ZM003.XSECD;

   /* -----------------------------------*/
   /* Season Year*/
   /* -----------------------------------*/
  AF0ZW01.AF0ZWYY = AF0ZM003.XSNYR;
  AF0ZW03.XSNYR = AF0ZW01.AF0ZWSYR;

   /* -----------------------------------*/
   /* Division Code*/
   /* -----------------------------------*/

  if (AF0ZM003.XDVCD == " ") /* If value not entered*/
    AF0ZW03.XDVCD = "**";
  else
    AF0ZW03.XDVCD = AF0ZM003.XDVCD;
  end

   /* -----------------------------------*/
   /* Check for default Product Type Code*/
   /* -----------------------------------*/
  if (AF0ZM003.XPRCD == " ") /* If value not entered*/
    AF0ZW03.XPRCD = "**";
  else
    AF0ZW03.XPRCD = AF0ZM003.XPRCD;
  end

   /* -----------------------------------*/
   /* Check for default gender/age code*/
   /* -----------------------------------*/
  if (AF0ZM003.XGACD == " ") /* If value not entered*/
    AF0ZW03.XGACD = "**";
  else
    AF0ZW03.XGACD = AF0ZM003.XGACD;
  end

   /* -----------------------------------*/
   /* Check for default Product Line Code*/
   /* -----------------------------------*/
  if (AF0ZM003.XPLCD == " ") /* If value not entered*/
    AF0ZW03.XPLCD = "**";
  else
    AF0ZW03.XPLCD = AF0ZM003.XPLCD;
  end

   /* -----------------------------------*/
   /* Check for default category code*/
   /* -----------------------------------*/
  if (AF0ZM003.XPCCD == " ") /* If value not entered*/
    AF0ZW03.XPCCD = "**";
  else
    AF0ZW03.XPCCD = AF0ZM003.XPCCD;
  end

   /* -----------------------------------*/
   /* Check for default silhouette code*/
   /* -----------------------------------*/
  if (AF0ZM003.XSUCD == " ") /* If value not entered*/
    AF0ZW03.XSUCD = "**";
  else
    AF0ZW03.XSUCD = AF0ZM003.XSUCD;
  end

   /* -----------------------------------*/
   /* Check for default owner group code*/
   /* -----------------------------------*/
  if (AF0ZM003.XOWCD == " ") /* If value not entered*/
    AF0ZW03.XOWCD = "**";
  else
    AF0ZW03.XOWCD = AF0ZM003.XOWCD;
  end

   /* -----------------------------------*/
   /* Check for default rpt print select*/
   /* -----------------------------------*/
  if (AF0ZM003.AF0ZM-RPT-LS-FL != "Y"
   && AF0ZM003.AF0ZM-RPT-LSU-FL != "Y"
   && AF0ZM003.AF0ZM-RPT-TDMDU-FL != "Y"
   && AF0ZM003.AF0ZM-RPT-ISTK-FL != "Y"
   && AF0ZM003.AF0ZM-RPT-TDMD-FL != "Y")
    AF0ZW03.AF0ZM-RPT-LSU-FL = "Y";
  end

  AF0ZW03.AF0ZM-RPT-LS-FL = AF0ZM003.AF0ZM-RPT-LS-FL;
  AF0ZW03.AF0ZM-RPT-LSU-FL = AF0ZM003.AF0ZM-RPT-LSU-FL;
  AF0ZW03.AF0ZM-RPT-ISTK-FL = AF0ZM003.AF0ZM-RPT-ISTK-FL;
  AF0ZW03.AF0ZM-RPT-TDMD-FL = AF0ZM003.AF0ZM-RPT-TDMD-FL;
  AF0ZW03.AF0ZM-RPT-TDMDU-FL = AF0ZM003.AF0ZM-RPT-TDMDU-FL;

   /* -----------------------------------*/
   /* Check for default style number*/
   /* -----------------------------------*/
  if (AF0ZM003.SY1STNBR == " ") /* If value not entered*/
    AF0ZW03.SY1STNBR = "******";
  else
    AF0ZW03.SY1STNBR = AF0ZM003.SY1STNBR;
  end

   /* -----------------------------------*/
   /* Check for default carryover id*/
   /* -----------------------------------*/
  if (AF0ZM003.AF0ZMCOV == " ") /* If value not entered*/
    AF0ZW03.AF0ZWCOV = "B";
  else
    AF0ZW03.AF0ZWCOV = AF0ZM003.AF0ZMCOV;
  end

   /* -----------------------------------*/
   /* Check for default color % id*/
   /* -----------------------------------*/
  if (AF0ZM003.AF0ZMCLP == " ") /* If value not entered*/
    AF0ZW03.AF0ZWCLP = "F";
  else
    AF0ZW03.AF0ZWCLP = AF0ZM003.AF0ZMCLP;
  end

   /* -----------------------------------*/
   /* Check for default summary id*/
   /* -----------------------------------*/
  if (AF0ZM003.AF0ZMSUM == " ") /* If value not entered*/
    AF0ZW03.AF0ZWSUM = "N";
  else
    AF0ZW03.AF0ZWSUM = AF0ZM003.AF0ZMSUM;
  end

   /* -----------------------------------*/
   /* Check for default detail id*/
   /* -----------------------------------*/
  if (AF0ZM003.AF0ZMDTL == " ") /* If value not entered*/
    AF0ZW03.AF0ZWDTL = "Y";
  else
    AF0ZW03.AF0ZWDTL = AF0ZM003.AF0ZMDTL;
  end

   /* -----------------------------------*/
   /* Check for default inc in stock flag*/
   /* -----------------------------------*/
  if (AF0ZM003.AF0ZMIST == " ") /* If value not entered*/
    AF0ZW03.AF0ZMIST = "Y";
  else
    AF0ZW03.AF0ZMIST = AF0ZM003.AF0ZMIST;
  end

   /* -----------------------------------*/
   /* Check for default color flag*/
   /* -----------------------------------*/
  if (AF0ZM003.AF0ZMCLF == " ") /* If value not entered*/
    AF0ZW03.AF0ZWCLF = "Y";
  else
    AF0ZW03.AF0ZWCLF = AF0ZM003.AF0ZMCLF;
  end

   /* -----------------------------------*/
   /* Check for default BTB operator*/
   /* -----------------------------------*/
  if (AF0ZM003.AF0ZMBTO == " ") /* If value not entered*/
    AF0ZW03.AF0ZWBTO = ">";
  else
    AF0ZW03.AF0ZWBTO = AF0ZM003.AF0ZMBTO;
  end

   /* ---------------------------------------------*/
   /* Check for default Balance to book variance*/
   /* ---------------------------------------------*/
  if (AF0ZM003.AF0ZMBTB == " ") /* If value not entered*/
    AF0ZW03.AF0ZWBTB = 000;
  else
    AF0ZW01.AF0ZWPS1 = AF0ZM003.AF0ZMBTB;
    AF0ZS01(); /* Zero fill the character fields*/
    AF0ZW01.AF0ZWPCT = AF0ZW01.AF0ZWPS1;
    AF0ZW03.AF0ZWBTB = AF0ZW01.AF0ZWPCT;
  end

   /* ---------------------------------------*/
   /* Check for default Fcst vs Pur operator*/
   /* ---------------------------------------*/
  if (AF0ZM003.AF0ZMFPO == " ") /* If value not entered*/
    AF0ZW03.AF0ZWFPO = ">";
  else
    AF0ZW03.AF0ZWFPO = AF0ZM003.AF0ZMFPO;
  end

   /* ---------------------------------------------*/
   /* Check for default fcst vs purchases percent*/
   /* ---------------------------------------------*/
  if (AF0ZM003.AF0ZMFPV == " ") /* If value not entered*/
    AF0ZW03.AF0ZWFPV = 000;
  else
    AF0ZW01.AF0ZWPS1 = AF0ZM003.AF0ZMFPV;
    AF0ZS01(); /* Zero fill the character fields*/
    AF0ZW01.AF0ZWPCT = AF0ZW01.AF0ZWPS1;
    AF0ZW03.AF0ZWFPV = AF0ZW01.AF0ZWPCT;
  end

   /* ---------------------------------------*/
   /* Check for default long/short operator*/
   /* ---------------------------------------*/
  if (AF0ZM003.AF0ZMLSO == " ") /* If value not entered*/
    AF0ZW03.AF0ZWLSO = ">";
  else
    AF0ZW03.AF0ZWLSO = AF0ZM003.AF0ZMLSO;
  end

   /* ---------------------------------------------*/
   /* Move in Long and short units and BLA units*/
   /* ---------------------------------------------*/

  AF0ZW03.AF0ZWLSU = AF0ZM003.AF0ZMLSU;

   /* ---------------------------------------*/
   /* Check for default BLA operator*/
   /* ---------------------------------------*/
  if (AF0ZM003.AF0ZMBLO == " ") /* If value not entered*/
    AF0ZW03.AF0ZWBLO = ">";
  else
    AF0ZW03.AF0ZWBLO = AF0ZM003.AF0ZMBLO;
  end

   /* ---------------------------------------------*/
   /* Move BLA units*/
   /* ---------------------------------------------*/

  AF0ZW03.AF0ZWBLU = AF0ZM003.AF0ZMBLU;

   /* ---------------------------------------*/
   /* Move Blank Style Only flag*/
   /* ---------------------------------------*/

  AF0ZW03.AF0ZWBLF = AF0ZM003.AF0ZMBLF;

   /* ---------------------------------------*/
   /* Move report select format flag*/
   /* ---------------------------------------*/

  AF0ZW03.AF0ZMRSL = AF0ZM003.AF0ZMRSL;

   /* ---------------------------------------*/
   /* Move Life Cycle Codes*/
   /* ---------------------------------------*/

  if (AF0ZM003.AF0ZMLCS[1] == "  ")
    AF0ZW03.AF0ZMLCS[1] = "**";
  else
    AF0ZW03.AF0ZMLCS[1] = AF0ZM003.AF0ZMLCS[1];
  end

  if (AF0ZM003.AF0ZMLCS[2] == "  ")
    AF0ZW03.AF0ZMLCS[2] = "**";
  else
    AF0ZW03.AF0ZMLCS[2] = AF0ZM003.AF0ZMLCS[2];
  end

  if (AF0ZM003.AF0ZMLCS[3] == "  ")
    AF0ZW03.AF0ZMLCS[3] = "**";
  else
    AF0ZW03.AF0ZMLCS[3] = AF0ZM003.AF0ZMLCS[3];
  end

  if (AF0ZM003.AF0ZMLCS[4] == "  ")
    AF0ZW03.AF0ZMLCS[4] = "**";
  else
    AF0ZW03.AF0ZMLCS[4] = AF0ZM003.AF0ZMLCS[4];
  end




end // end AF0ZS31

// Build AF1082 Parm Card
Function AF0ZS34()
   /* ------------------------------------------------------------*/
   /* Format the variable parameters entered by the user.*/
   /* ------------------------------------------------------------*/

  set AF0ZW07 empty; /* Parameters work area*/

   /* -----------------------------------*/
   /* Move in required pass parm fields*/
   /* -----------------------------------*/

  AF0ZW07.AF0ZWOBI = "O"; /* Indicate online submitted*/

   /* -----------------------------------*/
   /* Check for default forecaster code*/
   /* -----------------------------------*/
  if (XP1REC.PG1FCTCD == " ") /* If value not entered*/
    AF0ZW07.PG1FCTCD = "**";
  else
    AF0ZW07.PG1FCTCD = XP1REC.PG1FCTCD;
  end

   /* -----------------------------------*/
   /* Season/Year codes*/
   /* -----------------------------------*/

  AF0ZW07.XSECD = AF0ZM007.XSECD;
  AF0ZW01.AF0ZWYY = AF0ZM007.XSNYR;
  AF0ZW07.XSNYR = AF0ZW01.AF0ZWSYR;

   /* -----------------------------------*/
   /* Division code*/
   /* -----------------------------------*/

  if (AF0ZM007.XDVCD == " ") /* If value not entered*/
    AF0ZW07.XDVCD = "**";
  else
    AF0ZW07.XDVCD = AF0ZW01.XDVCD;
  end

   /* -----------------------------------*/
   /* Check for default Product Type code*/
   /* -----------------------------------*/
  if (AF0ZM007.XPRCD == " ") /* If value not entered*/
    AF0ZW07.XPRCD = "**";
  else
    AF0ZW07.XPRCD = AF0ZM007.XPRCD;
  end

   /* -----------------------------------*/
   /* Check for default gender/age code*/
   /* -----------------------------------*/
  if (AF0ZM007.XGACD == " ") /* If value not entered*/
    AF0ZW07.XGACD = "**";
  else
    AF0ZW07.XGACD = AF0ZM007.XGACD;
  end

   /* -----------------------------------*/
   /* Check for default Product Line code*/
   /* -----------------------------------*/
  if (AF0ZM007.XPLCD == " ") /* If value not entered*/
    AF0ZW07.XPLCD = "**";
  else
    AF0ZW07.XPLCD = AF0ZM007.XPLCD;
  end

   /* -----------------------------------*/
   /* Check for default category code*/
   /* -----------------------------------*/
  if (AF0ZM007.XPCCD == " ") /* If value not entered*/
    AF0ZW07.XPCCD = "**";
  else
    AF0ZW07.XPCCD = AF0ZM007.XPCCD;
  end

   /* -----------------------------------*/
   /* Check for default silhouette code*/
   /* -----------------------------------*/
  if (AF0ZM007.XSUCD == " ") /* If value not entered*/
    AF0ZW07.XSUCD = "**";
  else
    AF0ZW07.XSUCD = AF0ZM007.XSUCD;
  end


   /* -----------------------------------*/
   /* Check for default owner group code*/
   /* -----------------------------------*/
  if (AF0ZM007.XOWCD == " ") /* If value not entered*/
    AF0ZW07.XOWCD = "**";
  else
    AF0ZW07.XOWCD = AF0ZM007.XOWCD;
  end
   /* -----------------------------------*/
   /* Set for default style number*/
   /* -----------------------------------*/

  AF0ZW07.SY1STNBR = "******";

   /* -----------------------------------*/
   /* Set for default scheduler code*/
   /* -----------------------------------*/

  AF0ZW07.PG1SC4CD = "**";

   /* ---------------------------------------------*/
   /* Check for default Book variance*/
   /* ---------------------------------------------*/

  AF0ZW07.AF0ZWBKV = 999;

   /* ---------------------------------------------*/
   /* Set for default BLA variance percent*/
   /* ---------------------------------------------*/

  AF0ZW07.AF0ZWBLV = 999;

   /* -----------------------------------*/
   /* Set for default Carry Over ID*/
   /* -----------------------------------*/

  AF0ZW07.AF0ZWCOV = "N";

   /* -----------------------------------*/
   /* Set for default Color Percent Ind*/
   /* -----------------------------------*/

  AF0ZW07.AF0ZWCLP = "N";

   /* -----------------------------------*/
   /* Set for default spec bkngs ind*/
   /* -----------------------------------*/

  AF0ZW07.AF0ZWSUM = "N";

   /* -----------------------------------*/
   /* Set for default Forecast Purchase Var*/
   /* -----------------------------------*/

  AF0ZW07.AF0ZWFPV = 999;

   /* -----------------------------------*/
   /* Set for default Long Short Units*/
   /* -----------------------------------*/

  AF0ZW07.AF0ZWLSU = 999999;

   /* -----------------------------------*/
   /* Set for default B.L.A. Units*/
   /* -----------------------------------*/

  AF0ZW07.AF0ZWBLU = 999999;

   /* -----------------------------------*/
   /* Set ORDER-TYPE-CODES*/
   /* -----------------------------------*/

  AF0ZW07.AF0ZWOCD[1] = "**";
  AF0ZW07.AF0ZWOCD[2] = "**";
  AF0ZW07.AF0ZWOCD[3] = "**";
  AF0ZW07.AF0ZWOCD[4] = "**";
  AF0ZW07.AF0ZWOCD[5] = "**";

   /* -----------------------------------*/
   /* Set for default Need Date*/
   /* -----------------------------------*/

  AF0ZW07.AF0ZWBDT = 999999;

   /* -----------------------------------*/
   /* Set for default Unit Dollar Ind*/
   /* -----------------------------------*/

  AF0ZW07.AF0ZWUDI = "U";

   /* -----------------------------------*/
   /* Set LIFE-CYCLE-CODES*/
   /* -----------------------------------*/

  if (AF0ZM007.AF0ZMLCS[1] == "  ")
    AF0ZW07.AF0ZMLCS[1] = "**";
    AF0ZW07.AF0ZMLCS[2] = "**";
    AF0ZW07.AF0ZMLCS[3] = "**";
    AF0ZW07.AF0ZMLCS[4] = "**";
  else
    AF0ZW07.AF0ZMLCS[1] = AF0ZM007.AF0ZMLCS[1];
    AF0ZW07.AF0ZMLCS[2] = AF0ZM007.AF0ZMLCS[2];
    AF0ZW07.AF0ZMLCS[3] = AF0ZM007.AF0ZMLCS[3];
    AF0ZW07.AF0ZMLCS[4] = AF0ZM007.AF0ZMLCS[4];
  end



end // end AF0ZS34

// Determine OS Region
Function AF0ZS40()
   /* ------------------------------------------------------------*/
    /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;

  TA3REC.TA3OPTN = "ALLFLDS";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/

    AFWREC.AFWPRCSN = "S40"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/


  end

  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/

    AFWREC.AFWPRCSN = "S40"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/


  end



end // end AF0ZS40

// Left Justify Life Cycle Codes
Function AF0ZS50()
   /* ------------------------------------------------------------*/

    /* Left Justify Life Cycle Codes*/

    /* PARAGRAPH WILL NOT BE PERFORMED IF ALL XLCCDSELS ARE SPACE*/

   /* ------------------------------------------------------------*/

  if (AF0ZM003.AF0ZMLCS[1] == "  ")
    while (AF0ZM003.AF0ZMLCS[1] == "  ")
      AF0ZM003.AF0ZMLCS[1] = AF0ZM003.AF0ZMLCS[2];
      AF0ZM003.AF0ZMLCS[2] = AF0ZM003.AF0ZMLCS[3];
      AF0ZM003.AF0ZMLCS[3] = AF0ZM003.AF0ZMLCS[4];
      AF0ZM003.AF0ZMLCS[4] = "  ";
    end
  end

  if (AF0ZM003.AF0ZMLCS[2] == "  "
   && AF0ZM003.AF0ZMLCS[3] == "  "
   && AF0ZM003.AF0ZMLCS[4] == "  ")
    /* NEXT SENTENCE*/
  else
    while (AF0ZM003.AF0ZMLCS[2] == "  ")
      AF0ZM003.AF0ZMLCS[2] = AF0ZM003.AF0ZMLCS[3];
      AF0ZM003.AF0ZMLCS[3] = AF0ZM003.AF0ZMLCS[4];
      AF0ZM003.AF0ZMLCS[4] = "  ";
    end
  end

  if (AF0ZM003.AF0ZMLCS[3] == "  "
   && AF0ZM003.AF0ZMLCS[4] == "  ")
    /* NEXT SENTENCE*/
  else
    while (AF0ZM003.AF0ZMLCS[3] == "  ")
      AF0ZM003.AF0ZMLCS[3] = AF0ZM003.AF0ZMLCS[4];
      AF0ZM003.AF0ZMLCS[4] = "  ";
    end
  end



end // end AF0ZS50

// Left Justify Life Cycle Codes
Function AF0ZS51()
   /* GET AF0ZS50*/
   /* ------------------------------------------------------------*/

    /* Left Justify Life Cycle Codes*/

    /* PARAGRAPH WILL NOT BE PERFORMED IF ALL XLCCDSELS ARE SPACE*/

   /* ------------------------------------------------------------*/

  if (AF0ZM007.AF0ZMLCS[1] == "  ")
    while (AF0ZM007.AF0ZMLCS[1] == "  ")
      AF0ZM007.AF0ZMLCS[1] = AF0ZM007.AF0ZMLCS[2];
      AF0ZM007.AF0ZMLCS[2] = AF0ZM007.AF0ZMLCS[3];
      AF0ZM007.AF0ZMLCS[3] = AF0ZM007.AF0ZMLCS[4];
      AF0ZM007.AF0ZMLCS[4] = "  ";
    end
  end

  if (AF0ZM007.AF0ZMLCS[2] == "  "
   && AF0ZM007.AF0ZMLCS[3] == "  "
   && AF0ZM007.AF0ZMLCS[4] == "  ")
    /* NEXT SENTENCE*/
  else
    while (AF0ZM007.AF0ZMLCS[2] == "  ")
      AF0ZM007.AF0ZMLCS[2] = AF0ZM007.AF0ZMLCS[3];
      AF0ZM007.AF0ZMLCS[3] = AF0ZM007.AF0ZMLCS[4];
      AF0ZM007.AF0ZMLCS[4] = "  ";
    end
  end

  if (AF0ZM007.AF0ZMLCS[3] == "  "
   && AF0ZM007.AF0ZMLCS[4] == "  ")
    /* NEXT SENTENCE*/
  else
    while (AF0ZM007.AF0ZMLCS[3] == "  ")
      AF0ZM007.AF0ZMLCS[3] = AF0ZM007.AF0ZMLCS[4];
      AF0ZM007.AF0ZMLCS[4] = "  ";
    end
  end



end // end AF0ZS51

// Edit Owner Group cd
Function AF0ZS52()
   /* ---------------------------*/
    /* Edit owner group code*/
   /* ---------------------------*/


  if (AF0ZW01.XOWCD == " " /* Field eq spaces*/
   || AF0ZW01.XOWCD == "**")
    XP1REC.XOWCD = "**";
    XP1REC.XOWABRV = "ALL";
    XP1REC.XOWDESC = "ALL";
    return; /* Return to calling process*/
  end


  if (AF0ZW01.XOWKEY in XOWTBL.XOWKEY)
    XP1REC.XOWCD = AF0ZW01.XOWCD;
    XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
    XP1REC.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
    AF0ZW01.XOWDESC = XOWTBL.XOWABRV[sysVar.arrayIndex];

  else

    AF0ZW01.AF0ZWERR = "Y";
    AFWREC.AFWPRCSN = "S52 "; /* Process number*/
    converseLib.validationFailed(121); /* Indicate error msg*/
    AF0ZW01.XOWDESC = " ";
    XP1REC.XOWABRV = " ";
    XP1REC.XOWDESC = " ";
  end



end // end AF0ZS52

// Clear selections and exit
Function AF0ZS99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  AF0ZW01.AF0ZWIXM = 1; /* Initialize map index*/

  while (AF0ZW01.AF0ZWIXM <= AF0ZW01.AF0ZWIXL) /* Until end of array*/

    if (AF0ZW01.AF0ZMSEL[AF0ZWIXM] == "S") /* Entry is selected*/
      AF0ZW01.AF0ZMSEL[AF0ZWIXM] = " "; /* Reset entry*/
    end

    AF0ZW01.AF0ZWIXM = AF0ZW01.AF0ZWIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end AF0ZS99

//*** RECORD=AF0ZW-NOTIFY-JCL ****
// supplies //    NOTIFY=userid for TEST use only
// ********************************
Record AF0ZW-NOTIFY-JCL type basicRecord
  10 AF0ZW-JCL AF0ZW-JCL ; 
    15 AF0ZW-SLASH AF0ZW-SLASH ; 
    15 * char(13) ; 
    15 AF0ZW-NOTIFY AF0ZW-NOTIFY ; 
    15 TA3USRID TA3USRID ; 
    15 * char(50) ; 
end // end AF0ZW-NOTIFY-JCL

//*** RECORD=AF0ZW01 ****
// Working storage for FY0N - Report Request Menu/ add units
// ***********************
Record AF0ZW01 type basicRecord
  10 AF0ZMSEL AF0ZMSEL [98] ; 
  10 AF0ZWIXL AF0ZWIXL ; 
  10 AF0ZWIXM AF0ZWIXM ; 
  10 AF0ZWIXT AF0ZWIXT ; 
  10 AF0ZWWSF AF0ZWWSF ; 
  10 AF0ZWFFL AF0ZWFFL ; 
  10 AF0ZWSWX AF0ZWSWX ; 
  10 AF0ZWUID AF0ZWUID ; 
  10 AF0ZWIX2 AF0ZWIX2 ; 
  10 AF0ZWIXP AF0ZWIXP ; 
  10 AF0ZWIXS AF0ZWIXS [10] ; 
  10 AF0ZMRMT AF0ZMRMT ; 
  10 AF0ZMDES AF0ZMDES ; 
  10 AF0ZWERR AF0ZWERR ; 
  10 AF0ZWSPG AF0ZWSPG ; 
  10 PG1SC4CD PG1SC4CD ; 
  10 PG1FCTCD PG1FCTCD ; 
  10 XSECD XSECD ; 
  10 AF0ZWPCT AF0ZWPCT ; 
  10 AF0ZWPS1 AF0ZWPS1 ; 
    15 AF0ZWPC1 AF0ZWPC1 ; 
    15 AF0ZWPS2 AF0ZWPS2 ; 
      20 AF0ZWPC2 AF0ZWPC2 ; 
      20 AF0ZWPS3 AF0ZWPS3 ; 
        25 AF0ZWPC3 AF0ZWPC3 ; 
  10 AF0ZWSYR AF0ZWSYR ; 
    15 AF0ZWCC AF0ZWCC ; 
    15 AF0ZWYY AF0ZWYY ; 
  10 XGACD XGACD ; 
  10 XGADESC XGADESC ; 
  10 XPCCD XPCCD ; 
  10 XPCDESC XPCDESC ; 
  10 XPRCD XPRCD ; 
  10 XPRDESC XPRDESC ; 
  10 XPLKEY XPLKEY ; 
    15 XPLCD XPLCD ; 
    15 XGPCD XGPCD ; 
  10 XPLDESC XPLDESC ; 
  10 XDVCD XDVCD ; 
  10 XDVDESC XDVDESC ; 
  10 XSUCD XSUCD ; 
  10 XSUDESC XSUDESC ; 
  10 AF0ZMLCS AF0ZMLCS ; 
  10 XLCDESC XLCDESC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1STYNM SY1STYNM ; 
  10 AF0ZMFUI AF0ZMFUI ; 
  10 AF0ZMSUI AF0ZMSUI ; 
  10 XSNBDT XSNBDT ; 
  10 XSNXDT XSNXDT ; 
  10 AF0ZWSWP AF0ZWSWP ; 
  10 AF0ZWSWS AF0ZWSWS ; 
  10 AF0ZWMNO AF0ZWMNO ; 
  10 AF0ZTTYP AF0ZTTYP ; 
  10 AF0ZWNDD AF0ZWNDD ; 
  10 AF0ZWPND AF0ZWPND ; 
  10 AF0ZWASD AF0ZWASD ; 
  10 AF0ZWXSA AF0ZWXSA ; 
    15 AF0ZWXSS AF0ZWXSS ; 
    15 AF0ZWXYR AF0ZWXYR ; 
  10 AF0ZWDTE AF0ZWDTE ; 
    15 AF0ZWDMM AF0ZWDMM ; 
    15 AF0ZWDYY AF0ZWDYY ; 
  10 AF0ZWFBC AF0ZWFBC ; 
  10 AF0ZW-BLFL AF0ZW-BLFL ; 
  10 AF0ZW-UNFL AF0ZW-UNFL ; 
  10 AF0ZW-LZFL AF0ZW-LZFL ; 
  10 AF0ZWMCC AF0ZWMCC ; 
  10 AF0ZWMCP AF0ZWMCP ; 
  10 AF0ZW-MAPPER-BRIDGE AF0ZW-MAPPER-BRIDGE ; 
  10 YSMSUMCD YSMSUMCD [5] ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 XOWDESC XOWDESC ; 
  10 AF0ZW-ASOF-WORK-DATE AF0ZW-ASOF-WORK-DATE [2] ; 
    15 AF0ZW-ASOF-WK-DT-MM AF0ZW-ASOF-WK-DT-MM ; 
    15 AF0ZW-ASOF-WK-DT-DD AF0ZW-ASOF-WK-DT-DD ; 
    15 AF0ZW-ASOF-WK-DT-YY AF0ZW-ASOF-WK-DT-YY ; 
  10 AF0ZW-ASOF-DATE-NUM AF0ZW-ASOF-DATE-NUM [2] ; 
    15 AF0ZW-ASOF-DT-CC AF0ZW-ASOF-DT-CC ; 
    15 AF0ZW-ASOF-DT-YY AF0ZW-ASOF-DT-YY ; 
    15 AF0ZW-ASOF-DT-MM AF0ZW-ASOF-DT-MM ; 
    15 AF0ZW-ASOF-DT-DD AF0ZW-ASOF-DT-DD ; 
  10 AF0ZW-ASOF-SESN-CD AF0ZW-ASOF-SESN-CD [2] ; 
  10 AF0ZW-ASOF-SESN-YR AF0ZW-ASOF-SESN-YR [2] ; 
  10 AF0ZW-ORDER-TYPE AF0ZW-ORDER-TYPE [6] ; 
  10 AF0ZW-SESN-WORK-BDT AF0ZW-SESN-WORK-BDT [2] ; 
    15 * num(5) ; 
    15 AF0ZW-BEGIN-WORK-MM AF0ZW-BEGIN-WORK-MM ; 
    15 * num(2) ; 
  10 AF0ZW-SESN-WORK-XDT AF0ZW-SESN-WORK-XDT [2] ; 
    15 * num(5) ; 
    15 AF0ZW-END-WORK-MM AF0ZW-END-WORK-MM ; 
    15 * num(2) ; 
  10 AF0ZW-BEGIN-MNTH-VALID AF0ZW-BEGIN-MNTH-VALID ; 
  10 AF0ZW-END-MNTH-VALID AF0ZW-END-MNTH-VALID ; 
end // end AF0ZW01

//*** RECORD=AF0ZW02 ****
//    ***** Size Percent Comparison Report *****
// JCL variable storage for AF0Z - Report Request Menu
// ***********************
Record AF0ZW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0ZWOBI AF0ZWOBI ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 XDVCD XDVCD ; 
    15 XPRCD XPRCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XSUCD XSUCD ; 
    15 XOWCD XOWCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 PG1SC4CD PG1SC4CD ; 
    15 AF0ZWBKV AF0ZWBKV ; 
    15 AF0ZWBLV AF0ZWBLV ; 
    15 * char(2) ; 
    15 * char(1) ; 
    15 * char(25) ; 
    15 AF0ZMLCS AF0ZMLCS [4] ; 
    15 AF0ZWSUM AF0ZWSUM ; 
    15 * char(10) ; 
end // end AF0ZW02

//*** RECORD=AF0ZW03 ****
//       ***** Long and Short Report *****
// JCL variable storage for AF0Z - Report Request Menu
//     add unit flag   04/08/98
// ***********************
Record AF0ZW03 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0ZWOBI AF0ZWOBI ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 XDVCD XDVCD ; 
    15 XPRCD XPRCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XSUCD XSUCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 AF0ZWCOV AF0ZWCOV ; 
    15 AF0ZWCLP AF0ZWCLP ; 
    15 AF0ZWDTL AF0ZWDTL ; 
    15 AF0ZWSUM AF0ZWSUM ; 
    15 AF0ZWCLF AF0ZWCLF ; 
    15 AF0ZWBTO AF0ZWBTO ; 
    15 AF0ZWBTB AF0ZWBTB ; 
    15 AF0ZWFPO AF0ZWFPO ; 
    15 AF0ZWFPV AF0ZWFPV ; 
    15 AF0ZWLSO AF0ZWLSO ; 
    15 AF0ZWLSU AF0ZWLSU ; 
    15 AF0ZWBLO AF0ZWBLO ; 
    15 AF0ZWBLU AF0ZWBLU ; 
    15 AF0ZWBLF AF0ZWBLF ; 
    15 AF0ZMLCS AF0ZMLCS [4] ; 
    15 XOWCD XOWCD ; 
    15 AF0ZMRSL AF0ZMRSL ; 
    15 AF0ZMIST AF0ZMIST ; 
    15 AF0ZM-RPT-LS-FL AF0ZM-RPT-LS-FL ; 
    15 AF0ZM-RPT-ISTK-FL AF0ZM-RPT-ISTK-FL ; 
    15 AF0ZM-RPT-TDMD-FL AF0ZM-RPT-TDMD-FL ; 
    15 AF0ZM-RPT-LSU-FL AF0ZM-RPT-LSU-FL ; 
    15 AF0ZM-RPT-TDMDU-FL AF0ZM-RPT-TDMDU-FL ; 
    15 * char(16) ; 
end // end AF0ZW03

//*** RECORD=AF0ZW04 ****
// ***** Domestic Bookings and Sales to Date Report *****
// JCL variable storage for AF0Z - Report Request Menu
// ***********************
Record AF0ZW04 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0ZWOBI AF0ZWOBI ; 
    15 * char(2) ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 XDVCD XDVCD ; 
    15 * char(10) ; 
    15 XOWCD XOWCD ; 
    15 * char(14) ; 
    15 AF0ZWCRP AF0ZWCRP ; 
    15 * char(35) ; 
    15 AF0ZWLRP AF0ZWLRP ; 
    15 AF0ZWDRP AF0ZWDRP ; 
    15 * char(7) ; 
end // end AF0ZW04

//*** RECORD=AF0ZW05 ****
//  ***** Demand vs Forecast Comparison Report *****
// JCL variable storage for FY0N - Report Request Menu
// ***********************
Record AF0ZW05 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0ZWOBI AF0ZWOBI ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 XDVCD XDVCD ; 
    15 XPRCD XPRCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XSUCD XSUCD ; 
    15 XOWCD XOWCD ; 
    15 * char(25) ; 
    15 AF0ZWORT AF0ZWORT [5] ; 
    15 AF0ZWNDD AF0ZWNDD ; 
    15 * char(1) ; 
    15 * char(2) ; 
    15 * smallint ; 
    15 * char(2) [5] ; 
    15 * int ; 
    15 * char(1) ; 
end // end AF0ZW05

//*** RECORD=AF0ZW06 ****
//    ***** Bookings / Sales Status Report *****
// JCL variable storage for AF0Z - Report Request Menu
// ***********************
Record AF0ZW06 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0ZWOBI AF0ZWOBI ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 XDVCD XDVCD ; 
    15 XPRCD XPRCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XSUCD XSUCD ; 
    15 XOWCD XOWCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 PG1SC4CD PG1SC4CD ; 
    15 AF0ZWBKV AF0ZWBKV ; 
    15 AF0ZWBLV AF0ZWBLV ; 
    15 * char(2) ; 
    15 AF0ZWSUM AF0ZWSUM ; 
    15 * char(24) ; 
    15 AF0ZWUDI AF0ZWUDI ; 
    15 AF0ZMLCS AF0ZMLCS [4] ; 
    15 * char(11) ; 
end // end AF0ZW06

//*** RECORD=AF0ZW07 ****
//       ***** Forecast Incomplete Style *****
// JCL variable storage for AF0Z - Report Request Menu
// ***********************
Record AF0ZW07 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0ZWOBI AF0ZWOBI ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 XDVCD XDVCD ; 
    15 XPRCD XPRCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XSUCD XSUCD ; 
    15 XOWCD XOWCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 PG1SC4CD PG1SC4CD ; 
    15 AF0ZWBKV AF0ZWBKV ; 
    15 AF0ZWBLV AF0ZWBLV ; 
    15 AF0ZWCOV AF0ZWCOV ; 
    15 AF0ZWCLP AF0ZWCLP ; 
    15 AF0ZWSUM AF0ZWSUM ; 
    15 AF0ZWFPV AF0ZWFPV ; 
    15 AF0ZWLSU AF0ZWLSU ; 
    15 AF0ZWBLU AF0ZWBLU ; 
    15 AF0ZWOCD AF0ZWOCD [5] ; 
    15 AF0ZWBDT AF0ZWBDT ; 
    15 AF0ZWUDI AF0ZWUDI ; 
    15 AF0ZMLCS AF0ZMLCS [4] ; 
    15 * char(11) ; 
end // end AF0ZW07

//*** RECORD=AF0ZW09 ****
//    ***** af-ab style audit report *******
// JCL variable storage for AF0Z - Report Request Menu
// ***********************
Record AF0ZW09 type basicRecord
  10 TARJCL TARJCL ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 XGACD XGACD ; 
    15 XOWCD XOWCD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 AF0ZW-BLFL AF0ZW-BLFL ; 
    15 AF0ZWMCC AF0ZWMCC ; 
    15 AF0ZWMCP AF0ZWMCP ; 
    15 AF0ZW-UNFL AF0ZW-UNFL ; 
    15 * char(52) ; 
end // end AF0ZW09

//*** RECORD=AF0ZW13 ****
//    ***** Bookings / Sales Status Report *****
// JCL variable storage for AF0Z - Report Request Menu
// ***********************
Record AF0ZW13 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0ZWOBI AF0ZWOBI ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 XDVCD XDVCD ; 
    15 XPRCD XPRCD ; 
    15 XOWCD XOWCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XSUCD XSUCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 * char(3) ; 
    15 AF0ZWABF AF0ZWABF ; 
    15 * char(49) ; 
end // end AF0ZW13

//*** RECORD=AF0ZW15 ****
//       ***** First Offer Date Audit Report *****
// JCL variable storage for AF0Z - Report Request Menu
// ***********************
Record AF0ZW15 type basicRecord
  10 TARJCL TARJCL ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XDVCD XDVCD ; 
    15 XPRCD XPRCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XSUCD XSUCD ; 
    15 XOWCD XOWCD ; 
    15 * char(60) ; 
end // end AF0ZW15

//*** RECORD=AF0ZW16 ****
//  ***** Demand vs Forecast Comparison Report *****
// JCL variable storage for FY0N - Report Request Menu
// ***********************
Record AF0ZW16 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0ZWORT AF0ZWORT [6] ; 
    15 AF0ZW-BEGIN-MONTH AF0ZW-BEGIN-MONTH ; 
    15 AF0ZW-END-MONTH AF0ZW-END-MONTH ; 
    15 * char(8) [2] ; 
      20 XSECD XSECD ; 
      20 XSNYR XSNYR ; 
      20 AF0ZW-ASOF-DATE AF0ZW-ASOF-DATE ; 
    15 XPRCD XPRCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 AF0ZW-REPORT-SELECT char(1) ; 
    15 * char(41) ; 
end // end AF0ZW16

//*** RECORD=AF0ZW17 ****
//  ***** Demand vs Forecast Comparison Report *****
// JCL variable storage for FY0N - Report Request Menu
// ***********************
Record AF0ZW17 type basicRecord
  10 TARJCL TARJCL ; 
    15 * char(4) [4] ; 
      20 XSECD XSECD ; 
      20 XSNYR XSNYR ; 
    15 AF0ZW-AF1911-REPT-FL char(1) ; // REPORT SELECTION FLAG AF1911
    15 AF0ZW-AF1921-REPT-FL char(1) ; // REPORT SELECTION FLAG AF1921
    15 AF0ZW-AF1931-REPT-FL char(1) ; // REPORT SELECTION FLAG AF1931
    15 * char(61) ; 
end // end AF0ZW17

// report print flag istk
DataItem AF0ZM-RPT-ISTK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report print flag LS
DataItem AF0ZM-RPT-LS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report print flag LS unit
DataItem AF0ZM-RPT-LSU-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report print flag TDMD
DataItem AF0ZM-RPT-TDMD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report print flag TRDMD Unit
DataItem AF0ZM-RPT-TDMDU-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer description
DataItem AF0ZMDES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecaster user id
DataItem AF0ZMFUI char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0ZMIST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Life Cycle Selected
DataItem AF0ZMLCS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer destination
DataItem AF0ZMRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report format select flag
DataItem AF0ZMRSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Menu selection field
DataItem AF0ZMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sched/avail-specialist userid
DataItem AF0ZMSUI char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL statement type
DataItem AF0ZTTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0ZW-ASOF-DATE int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// As-of-date bin store field
DataItem AF0ZW-ASOF-DATE-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// As-of-date-century
DataItem AF0ZW-ASOF-DT-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// As-of-Date-day
DataItem AF0ZW-ASOF-DT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// As-of-date-Month
DataItem AF0ZW-ASOF-DT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// As-of-date-year
DataItem AF0ZW-ASOF-DT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ASOF SESN CD
DataItem AF0ZW-ASOF-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ASOF SESN YR
DataItem AF0ZW-ASOF-SESN-YR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// As-of-Date-day
DataItem AF0ZW-ASOF-WK-DT-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// As-of-date-Month
DataItem AF0ZW-ASOF-WK-DT-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// As-of-date-year
DataItem AF0ZW-ASOF-WK-DT-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// As-of-date work/store field
DataItem AF0ZW-ASOF-WORK-DATE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BEGIN MONTH VALID SWITCH
DataItem AF0ZW-BEGIN-MNTH-VALID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Begining Month
DataItem AF0ZW-BEGIN-MONTH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// BEGINING WORK MONTH
DataItem AF0ZW-BEGIN-WORK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0ZW-BLFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// END MONTH VALID SWITCH
DataItem AF0ZW-END-MNTH-VALID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ending Month
DataItem AF0ZW-END-MONTH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ENDING WORK MONTH
DataItem AF0ZW-END-WORK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job Control Language statement
DataItem AF0ZW-JCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Laser printer flag
DataItem AF0ZW-LZFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mpr brdg flag
DataItem AF0ZW-MAPPER-BRIDGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal NOTIFY=
DataItem AF0ZW-NOTIFY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ORDER TYPES
DataItem AF0ZW-ORDER-TYPE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SEASON BEGIN WORK DATE
DataItem AF0ZW-SESN-WORK-BDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SEASON END WORK DATE
DataItem AF0ZW-SESN-WORK-XDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// // to indicate jcl stmnt
DataItem AF0ZW-SLASH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0ZW-UNFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ADDITIONAL BUY FLAG
DataItem AF0ZWABF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// as of date
DataItem AF0ZWASD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Book Need Date
DataItem AF0ZWBDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bookings variance
DataItem AF0ZWBKV smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// blank style only flag
DataItem AF0ZWBLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// B.L.A. units operator
DataItem AF0ZWBLO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bottom line avail. units
DataItem AF0ZWBLU int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// bottom line availablity var.
DataItem AF0ZWBLV smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// balance to book percentage
DataItem AF0ZWBTB smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Balance to book operator
DataItem AF0ZWBTO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working century
DataItem AF0ZWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Show all colors flag
DataItem AF0ZWCLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color percent indicator
DataItem AF0ZWCLP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carryover indicator
DataItem AF0ZWCOV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cat summary indicator
DataItem AF0ZWCRP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working mm area
DataItem AF0ZWDMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail indicator
DataItem AF0ZWDRP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season century/year
DataItem AF0ZWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail indicator
DataItem AF0ZWDTL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error indicator flag
DataItem AF0ZWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forecast/book-to-date code
DataItem AF0ZWFBC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found flag
DataItem AF0ZWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast vs purchased operator
DataItem AF0ZWFPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst vs purchases variance %
DataItem AF0ZWFPV smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem AF0ZWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem AF0ZWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem AF0ZWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for page number
DataItem AF0ZWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for starting table
DataItem AF0ZWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem AF0ZWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// line summary indicator
DataItem AF0ZWLRP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Long and short units operator
DataItem AF0ZWLSO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LONG AND SHORT UNITS
DataItem AF0ZWLSU int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// MIN-CLSOUT-COST
DataItem AF0ZWMCC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MIN-CO-VS-PUR-PCNT
DataItem AF0ZWMCP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job submitted message number
DataItem AF0ZWMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save thru need date
DataItem AF0ZWNDD int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// online or batch indicator
DataItem AF0ZWOBI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order Type Code
DataItem AF0ZWOCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type selections
DataItem AF0ZWORT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percentage split field 1
DataItem AF0ZWPC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percentage split field 2
DataItem AF0ZWPC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percentage split field 3
DataItem AF0ZWPC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percentage hold field
DataItem AF0ZWPCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Past Bookings thru Need Date
DataItem AF0ZWPND char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percentage split 1
DataItem AF0ZWPS1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percentage split 2
DataItem AF0ZWPS2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percentage split 3
DataItem AF0ZWPS3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set map page indicator flag
DataItem AF0ZWSPG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary indicator
DataItem AF0ZWSUM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page full switch
DataItem AF0ZWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem AF0ZWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem AF0ZWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season century/year
DataItem AF0ZWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// units or dollars indicator
DataItem AF0ZWUDI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem AF0ZWUID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working field
DataItem AF0ZWWSF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0ZWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0ZWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season yr
DataItem AF0ZWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AF0ZWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

