package af0m;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPAF010;
import corpcom3.XPAF020;
import corpcom3.XPTA0P;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXUSER;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGACD;
import corpx1.XGATBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpx2.XSUCD;
import corpy2.YSNTBL;
import pg.common.PG1FCTCD;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1STNBR;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA3USRID;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
import ta.common.TARTYPE;
import vv.common.VAFCTL02;
//*** PROGRAM=AF0M ****
// This application allows the user to submit JCL (AF1231) that
// will establish the long and short position on a given set of
// products.
// 
// Upon initial entry, the user's own name is given as default
// forecaster, and current season as the default season code &
// year. They may then enter further selection criteria such
// as gender age, categoy, sillouette, or even just a certain
// style.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 08/07/89   lsutto   New application.
// 04/30/93   jricha   changed bla to bla/bkgs options.
// 06/28/93   lrein    added in stock processing
// 09/03/93   tdodso   4.1 conversion
// 12/02/93   lrein    dont submit l&l print proc, since the
//                     reports never submitted anyhow
// 05-13-94   lrein    correct parm on weekend submit
// 02-14-95   KJ       XSN->YSN
// 06-11-96   KJ       changed airspeed options
// y2kfix 12/17/97 pharwo year 2000 changes and table changes
//                     to map af0mm001 and af0ms30.
// 05-26-99   craymo   AF0MS30 - added logic to disallow any
//                     data entry beyond SU 2000.
// ************************************************************
// *********************
Program AF0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0MW-NOTIFY-JCL AF0MW-NOTIFY-JCL; // record
  AF0MW01 AF0MW01; // record
  AF0MW02 AF0MW02; // record
  AF0MW03 AF0MW03; // record
  AF0MW04 AF0MW04; // record
  AF0MW05 AF0MW05; // record
  AF0MW06 AF0MW06; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VAFCTL02 VAFCTL02; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AF0MT02 {deleteAfterUse = yes}; // table
  use AF0MT03 {deleteAfterUse = yes}; // table
  use AF0MT04 {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AF0MM.AF0MM001, // form
  AF0MM.TA0PM001,
  AF0MM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    set AFWREC empty; /* Initialize working storage*/
    set VAFCTL02 empty; /* Initialize working storage*/
    set AF0MW01 empty; /* Initialize working storage*/
    set AF0MW02 empty; /* Initialize working storage*/
    set AF0MW03 empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0MM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF0M"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "    "; /* Initialize process number to zero*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "Y"; /* Indicate request for data*/
    ;
    if (XP1REC.XOWCD == " ")
      XP1REC.XOWCD = "00";
      XP1REC.XOWABRV = "N/A";
      XP1REC.XOWDESC = "NOT APPLICABLE";
      AF0MM001.XOWCD = XP1REC.XOWCD;
      AF0MM001.XOWABRV = XP1REC.XOWABRV;
    end
    ;
    if (COMMAREA.CAFRMSYS == "AF")
      AF0MM001.XXXUSER = XP1REC.XXXUSER;
      AF0MM001.XDVCD = XP1REC.XDVCD;
      AF0MM001.XDVDESC = XP1REC.XDVDESC;
      AF0MM001.XSECD = XP1REC.XSECD;
      AF0MM001.XSNYR = XP1REC.XSNYR;
      AF0MM001.XPRCD = XP1REC.XPRCD;
      AF0MM001.XPRDESC = XP1REC.XPRDESC;
      AF0MM001.XPLCD = XP1REC.XPLCD;
      AF0MM001.XPLDESC = XP1REC.XPLDESC;
      AF0MM001.XGACD = XP1REC.XGACD;
      AF0MM001.XGADESC = XP1REC.XGADESC;
      AF0MM001.XPCCD = XP1REC.XPCCD;
      AF0MM001.XPCDESC = XP1REC.XPCDESC;
      AF0MM001.XSUCD = XP1REC.XSUCD;
      AF0MM001.XSUDESC = XP1REC.XSUDESC;
      AF0MM001.XOWCD = XP1REC.XOWCD;
      AF0MM001.XOWABRV = XP1REC.XOWABRV;
    end
    ;
    AF0MM001.AF0MMBLA = "W"; /* selection for bla*/
    AF0MW01.AF0MWBLA = "W"; /* selection for bla*/
    AF0MM001.AF0MMSCH = "1"; /* selection for when to submit*/
    AF0MW01.AF0MMSCH = "1"; /* selection for when to submit*/
    if (COMMAREA.CAFRMSYS == "AF"
     && COMMAREA.CAFRMAPP == "0A"
     && XP1REC.XDVCD == " ")
      AF0MM001.XDVCD = "01";
      AF0MM001.XDVDESC = "NIKE DOMESTIC";
    end
    ;
    goto AF0M001; /* Converse Special Initialization*/
    ;
    ;
    AF0M001: AF0M001();
     /* *************************************************************/
     /* Flow to converse Calculate Long and Short application     **/
     /* *************************************************************/
    ;
    goto AF0M002;
    ;
    ;
    AF0M002: AF0M002();
     /* *************************************************************/
      /* Flow to converse Calculate Long and Short application*/
     /* *************************************************************/
    ;
    goto AF0M002;
    ;
    ;
  end // end main
end // end AF0M

// Special initialization
Function AF0M001()
   /* ------------------------------------------------------------*/
             /* AF0M Special Initialization*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWPRCSN = "M001"; /* Indicate map # 1*/
  XP1REC.XP1MNO = 0; /* Initialize xp1rec message no.*/
  ;
  XP1REC.XGPCD = "03"; /* Default gpc cd*/
   /* MOVE '01' TO XP1REC.XDVCD       ;   Default division cd*/
   /* MOVE 'NIKE DOMESTIC' TO XP1REC.XDVDESC ;  Default div desc*/
  ;
  if (XP1REC.XSECD == "  " /* If no season or year passed*/
   && XP1REC.XSNYR <= 0)  
    XPAF020(); /* obtain current season for default*/
  end /* season cd/yr on map*/
  ;
  ;
end // end AF0M001

// Choose which map to display
Function AF0M002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the only map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
  AFWREC.AFWPRCSN = "    "; /* Re-Initialize process name*/
  ;
  AF0M100(); /* Display map 1*/
  ;
  AF0MW03.XSECD = AF0MM001.XSECD; /* move orignl sesn-cd to wrkng-st*/
  AF0MW03.AF0MWSNY = AF0MM001.XSNYR; /* move orignl sesn-yr to wrk-st*/
  AF0MW03.XXXUSER = AF0MM001.XXXUSER; /* move orignl user-id to wk-st*/
  ;
end // end AF0M002

// Driver process for 100 map
Function AF0M100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AF0M120(); /* Format and display the map*/
  ;
  AF0M130(); /* Check attention identifier*/
  ;
  AF0M140(); /* Reset fields to normal intensity*/
  ;
  AF0M150(); /* Verify the entered data*/
  ;
  AF0M160(); /* Process valid input request*/
  ;
  ;
end // end AF0M100

// Format and display the map
Function AF0M120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end
  ;
  if (converseVar.validationMsgNum != 0 /* Error message to display*/
   && converseVar.validationMsgNum != 64)
    set AF0MM001 alarm; /* Indicate sound alarm*/
  else
    ;
    converseLib.clearScreen();
     /* Clear map output area*/
    AFWREC.AFWPRCSN = "    "; /* Clear process indicator*/
    AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
                                   /* move process ind to screen*/
    AF0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move today's date to map*/
    AF0M123(); /* move xp1rec to screen*/
    ;
  end
  ;
  AFWREC.AFWNMO = 0; /* reset info message no.*/
  ;
  converseLib.clearScreen();
  
  converse AF0MM001 ;
  ;
  ;
end // end AF0M120

// move xp1rec cds & desc to map
Function AF0M123()
   /* ------------------------------------------------------------*/
   /* move xp1rec codes and descriptions to the map.*/
   /* ------------------------------------------------------------*/
  ;
  AF0MM001.XXXUSER = XP1REC.XXXUSER;
  AF0MM001.XSECD = XP1REC.XSECD;
  AF0MM001.XSNYR = XP1REC.XSNYR;
  AF0MM001.XDVCD = XP1REC.XDVCD;
  AF0MM001.XDVDESC = XP1REC.XDVDESC;
  AF0MM001.XPRCD = XP1REC.XPRCD;
  AF0MM001.XPRDESC = XP1REC.XPRDESC;
  AF0MM001.XGACD = XP1REC.XGACD;
  AF0MM001.XGADESC = XP1REC.XGADESC;
  AF0MM001.XPLCD = XP1REC.XPLCD;
  AF0MM001.XPLDESC = XP1REC.XPLDESC;
  AF0MM001.XPCCD = XP1REC.XPCCD;
  AF0MM001.XPCDESC = XP1REC.XPCDESC;
  AF0MM001.XSUCD = XP1REC.XSUCD;
  AF0MM001.XSUDESC = XP1REC.XSUDESC;
  AF0MM001.XOWCD = XP1REC.XOWCD;
  AF0MM001.XOWABRV = XP1REC.XOWABRV;
  AF0MM001.SY1STNBR = XP1REC.SY1STNBR;
  ;
  if (XP1REC.SY1STNBR != " ")
    AF0MM001.SY1STYNM = XP1REC.SY1SSTNM;
  end
  ;
  AF0MM001.AF0MMBLA = AF0MW01.AF0MWBLA;
  AF0MM001.AF0MMSCH = AF0MW01.AF0MMSCH;
  ;
end // end AF0M123

// Check attention identifier
Function AF0M130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0MM001 initial; /* Clear the map fields*/
    set XP1REC empty;
    AF0MW01.AF0MWBLA = "W";
    XP1REC.XXXUSER = COMMAREA.CAUSERID;
    XPAF010();
    XPAF020();
    XP1REC.XP1MNO = 64;
    AF0MW03.AF0MWSJC = "Y";
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (AF0MM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = AF0MM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0MM001.CAITEM; /* Application data*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0MM001.CATOAP cursor, modified, bold; /* Highlight*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AF0M130

// Reset highlighted fields
Function AF0M140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0MM001.XXXUSER initialAttributes;
  set AF0MM001.XSECD initialAttributes;
  set AF0MM001.XSNYR initialAttributes;
  set AF0MM001.XDVCD initialAttributes;
  set AF0MM001.XPRCD initialAttributes;
  set AF0MM001.XGACD initialAttributes;
  set AF0MM001.XPLCD initialAttributes;
  set AF0MM001.XPCCD initialAttributes;
  set AF0MM001.XSUCD initialAttributes;
  set AF0MM001.SY1STNBR initialAttributes;
  set AF0MM001.XOWCD initialAttributes;
  set AF0MM001.AF0MMBLA initialAttributes;
  set AF0MM001.AF0MMSCH initialAttributes;
  set AF0MM001.AF0MM-INCLUDE-AIRSPEED initialAttributes;
  set AF0MM001.VAGen_EZEMSG initialAttributes;
  ;
  ;
  set AF0MM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0MM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
end // end AF0M140

// Verify the entered data
Function AF0M150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWPRCSN = "    "; /* Clear Process number*/
  AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Clear Process name*/
  ;
  if (AF0MM001.CAITEM > " ") /* Application data was entered*/
    ;
    set AF0MM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    AFWREC.AFWPRCSN = "150 "; /* Process number*/
    AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
  end
  ;
  XP1REC.XP1MNO = 0;
  AF0M153(); /* Verify any changed data*/
  ;
  if (XP1REC.XP1MNO == 0) /* No errors were found*/
    XP1REC.XP1MNO = 64; /* submit JCL message*/
  end
  ;
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end
  ;
end // end AF0M150

// Verify any changed data
Function AF0M153()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0MM001.AF0MMSCH != "1"
   && AF0MM001.AF0MMSCH != "2"
   && AF0MM001.AF0MMSCH != "3")
    set AF0MM001.AF0MMSCH cursor, bold; /* highlight error*/
    XP1REC.XP1MNO = 72; /* move err msg number*/
    converseLib.validationFailed(72); /* move err msg number*/
  else
    AF0MW01.AF0MMSCH = AF0MM001.AF0MMSCH;
  end
  ;
  if (AF0MM001.AF0MMBLA != "W"
   && AF0MM001.AF0MMBLA != "C")
    set AF0MM001.AF0MMBLA cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    XP1REC.XP1MNO = 90; /* move err msg number*/
    converseLib.validationFailed(90); /* move err msg number*/
  else
    AF0MW01.AF0MWBLA = AF0MM001.AF0MMBLA;
  end
  ;
  if (AF0MM001.AF0MM-INCLUDE-AIRSPEED != "A"
   && AF0MM001.AF0MM-INCLUDE-AIRSPEED != "S"
   && AF0MM001.AF0MM-INCLUDE-AIRSPEED != "N")
    set AF0MM001.AF0MM-INCLUDE-AIRSPEED cursor, bold; /* highlight e*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    XP1REC.XP1MNO = 72; /* move err msg number*/
    converseLib.validationFailed(72); /* move err msg number*/
  else
    AF0MW01.AF0MW-INCLUDE-AIRSPEED = AF0MM001.AF0MM-INCLUDE-AIRSPEED;
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS30(); /* verify season year*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* season yr not valid*/
    set AF0MM001.XSNYR cursor, bold; /* highlight error*/
    set AF0MM001.XSECD cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
    return;
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS03(); /* verify owner group*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* owner group not valid*/
    set AF0MM001.XOWCD cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS05(); /* verify style*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* style not valid*/
    set AF0MM001.SY1STNBR cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS10(); /* verify silhouette*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* silhouette not valid*/
    set AF0MM001.XSUCD cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS15(); /* verify category*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* category not valid*/
    set AF0MM001.XPCCD cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS45(); /* verify product line*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* pr lin not valid*/
    set AF0MM001.XPLCD cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS20(); /* verify gender age*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* gender age not valid*/
    set AF0MM001.XGACD cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS50(); /* verify product type*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* pr typ not valid*/
    set AF0MM001.XPRCD cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS55(); /* verify division code*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* division not valid*/
    set AF0MM001.XDVCD cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS25(); /* verify season code/year combo*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* season year not valid*/
    set AF0MM001.XSECD cursor, bold; /* highlight error*/
    set AF0MM001.XSNYR bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS30(); /* verify season year*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* season yr not valid*/
    set AF0MM001.XSNYR cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS35(); /* verify season code*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* season code not valid*/
    set AF0MM001.XSECD cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  XP1REC.XP1ERRFL = " "; /* clear error flag*/
  AF0MS40(); /* verify forecaster code*/
  ;
  if (XP1REC.XP1ERRFL != " ") /* frcstr code not valid*/
    set AF0MM001.XXXUSER cursor, bold; /* highlight error*/
    set AF0MM001.VAGen_EZEMSG bold; /* highlight err mess*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
    if (XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1MNO);
    end /* move err msg number*/
  end
  ;
  return; /* return to prev process*/
  ;
  ;
end // end AF0M153

// Process valid input request
Function AF0M160()
   /* * ------------------------------------------------------------*/
   /* Check for validation errors*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 64
   && AF0MW03.AF0MWSJC == "Y")
    AF0MW03.AF0MWSJC = " ";
    exit stack; /* Redisplay map with message*/
  end
  ;
  if (converseVar.validationMsgNum != 64)
    exit stack; /* Redisplay map with message*/
  end
  ;
  if (converseVar.validationMsgNum == 64
   && AF0MW03.AF0MWSJC != "Y") /* Not ready to submit jcl*/
    AF0MW03.AF0MWSJC = "Y"; /* Set submit-flag for confirmation*/
    exit stack; /* Redisplay map with message*/
  end
  ;
  if (AF0MW03.AF0MWSJC == "Y") /* Submit-flag set*/
    AF0MW03.AF0MWSJC = " "; /* Clear submit-flag*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  AF0M162(); /* Determine CICS region*/
  set TA6REC empty; /* Subroutine work area*/
  set AF0MW-NOTIFY-JCL empty;
  ;
  AF0MW01.AF0MWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
  if (AF0MM001.AF0MMSCH == "2") /* wait overnight*/
    AF0M163();
  else
    ;
    if (AF0MM001.AF0MMSCH == "3") /* wait for weekend*/
      AF0M164();
    else
      ;
      if (AF0MM001.AF0MMSCH == "1") /* submit immediately*/
        if (TA3REC.TA3RGNID == "03") /* PRODUCTION region*/
          AF0MW01.AF0MWIXT = 1; /* Input table index*/
        else
          if ("/*EOF" in AF0MT02.TARJCL)
            AF0MW01.AF0MWIXT = sysVar.arrayIndex;
            AF0MW01.AF0MWIXT = AF0MW01.AF0MWIXT + 1; /* Point to TEST JCL*/
          else
            AF0MW01.AF0MWIXT = 1; /* Input table index*/
          end
        end
        ;
        /* ------------------------------------------------------------*/
         /* Format JCL and parameters into the subroutine work area.*/
        /* ------------------------------------------------------------*/
        ;
        while (AF0MW01.AF0MWIXT > 0) /* Until end of table*/
          ;
          ;
          if (AF0MT02.TARTYPE[AF0MWIXT] == "P") /* Parameters statement*/
            ;
            ;
            /* ------------------------------------------------------------*/
             /* Format parameters for the long short for submission*/
            /* ------------------------------------------------------------*/
            ;
            set AF0MW02 empty; /* Reset parameters work area*/
            ;
            AF0MW02.AF0MWOBI = "O"; /* Indicate online*/
            AF0MW02.XSECD = XP1REC.XSECD; /* Season cd*/
            ;
            AF0MW01.AF0MWXSS = XP1REC.XSECD;
            AF0MW01.AF0MWXYR = XP1REC.XSNYR;
            ;
            AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
            while (AFWREC.AFWIDX5 != 9999
             && AFWREC.AFWIDX5 != 0) /* end of search condition*/
              if (YSNTBL.XSNABRV[AFWIDX5] == AF0MW01.AF0MWXSA
               && YSNTBL.XGPCD[AFWIDX5] == "03"
               && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
                ;
                AF0MW02.XSNYR = YSNTBL.XSNYR[AFWIDX5]; /* Move xsnyr*/
                AFWREC.AFWIDX5 = 0; /* END OF TABLE*/
              else
                if (YSNTBL.XGPCD[AFWIDX5] != "99")
                  AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
                else
                  AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
                end
              end
            end
            ;
            if (XP1REC.PG1FCTCD <= "  ") /* If no values*/
              AF0MW02.PG1FCTCD = "**"; /* Forecaster code*/
            else
              AF0MW02.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster code*/
            end
            ;
            if (XP1REC.XDVCD <= "  ") /* If no values*/
              AF0MW02.XDVCD = "**"; /* Division code*/
            else
              AF0MW02.XDVCD = XP1REC.XDVCD; /* Division code*/
            end
            ;
            if (XP1REC.XPRCD <= "  ") /* If no values*/
              AF0MW02.XPRCD = "**"; /* Product type code*/
            else
              AF0MW02.XPRCD = XP1REC.XPRCD; /* Product type code*/
            end
            ;
            if (XP1REC.XGACD <= "  ") /* If no values*/
              AF0MW02.XGACD = "**"; /* Gender/Age code*/
            else
              AF0MW02.XGACD = XP1REC.XGACD; /* Gender/Age code*/
            end
            ;
            if (XP1REC.XPLCD <= "  ") /* If no values*/
              AF0MW02.XPLCD = "**"; /* Product line code*/
            else
              AF0MW02.XPLCD = XP1REC.XPLCD; /* Product line code*/
            end
            ;
            if (XP1REC.XPCCD <= "  ") /* If no values*/
              AF0MW02.XPCCD = "**"; /* Product category code*/
            else
              AF0MW02.XPCCD = XP1REC.XPCCD; /* Product category code*/
            end
            ;
            if (XP1REC.XSUCD <= "  ") /* If no values*/
              AF0MW02.XSUCD = "**"; /* Silhouette code*/
            else
              AF0MW02.XSUCD = XP1REC.XSUCD; /* Silhouette code*/
            end
            ;
            if (XP1REC.SY1STNBR <= "      ") /* If no values*/
              AF0MW02.SY1STNBR = "******"; /* Style number*/
            else
              AF0MW02.SY1STNBR = XP1REC.SY1STNBR; /* Style number*/
            end
            ;
            if (XP1REC.XOWCD <= "  ") /* If no values*/
              AF0MW02.XOWCD = "**"; /* Silhouette code*/
            else
              AF0MW02.XOWCD = XP1REC.XOWCD; /* Silhouette code*/
            end
            ;
            AF0MW02.AF0MWBLA = AF0MW01.AF0MWBLA; /* BLA OPTION*/
            ;
            AF0MW02.AF0MW-INCLUDE-AIRSPEED = AF0MW01.AF0MW-INCLUDE-AIRSPEED;
            ;
            AF0MT02.TARJCL[AF0MWIXT] = AF0MW02.TARJCL;
            ;
          end
          ;
          if (AF0MT02.TARTYPE[AF0MWIXT] == "D") /* dataset override*/
            /* ------------------------------------------------------------*/
             /* Format dataset override for bookings calc.*/
            /* ------------------------------------------------------------*/
            ;
            if (AF0MW01.AF0MWBLA == "C") /* nightly bookings*/
              AF0MS66();
            else /* weekend bookings*/
              AF0MS67();
            end
            ;
            AF0MT02.TARJCL[AF0MWIXT] = AF0MW05.AF0MW-JCL;
            AF0MT02.TARTYPE[AF0MWIXT] = " ";
          end
          ;
          if (AF0MT02.TARTYPE[AF0MWIXT] == "Q") /* calc weighted pct*/
            set AF0MW06 empty; /* Reset parameters work area*/
            AF0MT02.TARTYPE[AF0MWIXT] = "P";
            AF0MW06.XSECD = XP1REC.XSECD;
            AF0MW01.AF0MWXSS = XP1REC.XSECD;
            AF0MW01.AF0MWXYR = XP1REC.XSNYR;
            ;
            AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
            while (AFWREC.AFWIDX5 != 9999
             && AFWREC.AFWIDX5 != 0) /* end of search condition*/
              if (YSNTBL.XSNABRV[AFWIDX5] == AF0MW01.AF0MWXSA
               && YSNTBL.XGPCD[AFWIDX5] == "03"
               && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
                ;
                AF0MW06.AF0MW-XSNYR = YSNTBL.XSNYR[AFWIDX5];
                AFWREC.AFWIDX5 = 0; /* END OF TABLE*/
              else
                if (YSNTBL.XGPCD[AFWIDX5] != "99")
                  AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
                else
                  AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
                end
              end
            end
            ;
            ;
            if (XP1REC.PG1FCTCD <= "  ") /* If no values*/
              AF0MW06.PG1FCTCD = "**"; /* Forecaster code*/
            else
              AF0MW06.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster code*/
            end
            ;
            AF0MT02.TARJCL[AF0MWIXT] = AF0MW06.TARJCL;
          end
          ;
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/
          ;
          TA6REC.TARJCL[TA6INDEX] = AF0MT02.TARJCL[AF0MWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = AF0MT02.TARTYPE[AF0MWIXT]; /* Type*/
          ;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
          ;
          ;
          /* ------------------------------------------------------------*/
           /* If not end of table, increment the table index.*/
          /* ------------------------------------------------------------*/
          ;
          if (AF0MT02.TARJCL[AF0MWIXT] == "/*EOF") /* End of table*/
            AF0MW01.AF0MWIXT = 0; /* Indicate end of table*/
          else
            AF0MW01.AF0MWIXT = AF0MW01.AF0MWIXT + 1;
                                   /* Increment table index*/
          end
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(0);
  AF0M161(); /* Submit the JCL*/
  ;
   /* ------------------------------------------------------------*/
   /* Clear map to avoid inadvertant double submition of the job*/
   /* ------------------------------------------------------------*/
  ;
  set AF0MM001 initial;
  XP1REC.XP1MNO = 68;
  set AF0MM001.CATOAP cursor;
end // end AF0M160

// Submit Job/Select Printer
Function AF0M161()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Submit the JCL*/
  end
  ;
   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/
  ;
  AFWREC.AFWPRCSN = "161 "; /* Process number*/
  AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    XP1REC.XP1MNO = 22; /* Indicate job was submitted*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    XP1REC.XP1MNO = 69; /* Indicate user cancelled*/
  else
    XP1REC.XP1MNO = 10; /* Indicate system error*/
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0M161

// Determine cics region
Function AF0M162()
   /* ------------------------------------------------------------*/
    /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /* ------------------------------------------------------------*/
  ;
  set TA3REC empty;
  ;
  TA3REC.TA3OPTN = "ALLFLDS";
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    ;
    AFWREC.AFWPRCSN = "162"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
    ;
  end
  ;
  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    ;
    AFWREC.AFWPRCSN = "S40"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
    ;
  end
  ;
  ;
  ;
end // end AF0M162

// format jcl for overnight sub
Function AF0M163()
  if (TA3REC.TA3RGNID == "03") /* PRODUCTION region*/
    AF0MW01.AF0MWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0MT03.TARJCL)
      AF0MW01.AF0MWIXT = sysVar.arrayIndex;
      AF0MW01.AF0MWIXT = AF0MW01.AF0MWIXT + 1; /* Point to TEST JCL*/
    else
      AF0MW01.AF0MWIXT = 1; /* Input table index*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  AF0MW01.AF0MWPSW = "1"; /* first do parm for af1231*/
  ;
  while (AF0MW01.AF0MWIXT > 0) /* Until end of table*/
    ;
    if (AF0MT03.TARTYPE[AF0MWIXT] == "P") /* Parameters statement*/
      ;
        /* ------------------------------------------------------------*/
         /* Format parameters for the long short for submission*/
        /* ------------------------------------------------------------*/
      ;
      set AF0MW02 empty; /* Reset parameters work area*/
      ;
      AF0MW02.AF0MWOBI = "O"; /* Indicate online*/
      AF0MW02.XSECD = XP1REC.XSECD; /* Season cd*/
      ;
      AF0MW01.AF0MWXSS = XP1REC.XSECD; /* move sesn cd to wk area*/
      AF0MW01.AF0MWXYR = XP1REC.XSNYR; /* move sesn yr to wk area*/
      ;
      AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
      while (AFWREC.AFWIDX5 != 9999
       && AFWREC.AFWIDX5 != 0) /* end of search condition*/
        if (YSNTBL.XSNABRV[AFWIDX5] == AF0MW01.AF0MWXSA
         && YSNTBL.XGPCD[AFWIDX5] == "03"
         && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
          ;
          AF0MW02.XSNYR = YSNTBL.XSNYR[AFWIDX5];
                                   /* Move xsnyr*/
          AFWREC.AFWIDX5 = 0; /* END OF TABLE*/
        else
          if (YSNTBL.XGPCD[AFWIDX5] != "99")
            AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
          else
            AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
          end
        end
      end
      ;
      if (XP1REC.PG1FCTCD <= "  ") /* If no values*/
        AF0MW02.PG1FCTCD = "**"; /* Forecaster code*/
      else
        AF0MW02.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster code*/
      end
      ;
      if (XP1REC.XDVCD <= "  ") /* If no values*/
        AF0MW02.XDVCD = "**"; /* Division code*/
      else
        AF0MW02.XDVCD = XP1REC.XDVCD; /* Division code*/
      end
      ;
      if (XP1REC.XPRCD <= "  ") /* If no values*/
        AF0MW02.XPRCD = "**"; /* Product type code*/
      else
        AF0MW02.XPRCD = XP1REC.XPRCD; /* Product type code*/
      end
      ;
      if (XP1REC.XGACD <= "  ") /* If no values*/
        AF0MW02.XGACD = "**"; /* Gender/Age code*/
      else
        AF0MW02.XGACD = XP1REC.XGACD; /* Gender/Age code*/
      end
      ;
      if (XP1REC.XPLCD <= "  ") /* If no values*/
        AF0MW02.XPLCD = "**"; /* Product line code*/
      else
        AF0MW02.XPLCD = XP1REC.XPLCD; /* Product line code*/
      end
      ;
      if (XP1REC.XPCCD <= "  ") /* If no values*/
        AF0MW02.XPCCD = "**"; /* Product category code*/
      else
        AF0MW02.XPCCD = XP1REC.XPCCD; /* Product category code*/
      end
      ;
      if (XP1REC.XSUCD <= "  ") /* If no values*/
        AF0MW02.XSUCD = "**"; /* Silhouette code*/
      else
        AF0MW02.XSUCD = XP1REC.XSUCD; /* Silhouette code*/
      end
      ;
      if (XP1REC.SY1STNBR <= "      ") /* If no values*/
        AF0MW02.SY1STNBR = "******"; /* Style number*/
      else
        AF0MW02.SY1STNBR = XP1REC.SY1STNBR; /* Style number*/
      end
      ;
      if (XP1REC.XOWCD <= "  ") /* If no values*/
        AF0MW02.XOWCD = "**"; /* Silhouette code*/
      else
        AF0MW02.XOWCD = XP1REC.XOWCD; /* Silhouette code*/
      end
      ;
      AF0MW02.AF0MWBLA = AF0MW01.AF0MWBLA; /* BLA OPTION*/
      AF0MT03.TARJCL[AF0MWIXT] = AF0MW02.TARJCL;
      ;
      /* END;*/
      ;
    end
    ;
    if (AF0MT03.TARTYPE[AF0MWIXT] == "D") /* dataset override*/
     /* ------------------------------------------------------------*/
      /* Format dataset override for bookings calculation.*/
     /* ------------------------------------------------------------*/
      ;
      if (AF0MW01.AF0MWBLA == "C") /* current bookings*/
        AF0MS66();
      else
        AF0MS67();
      end
      AF0MT03.TARJCL[AF0MWIXT] = AF0MW05.AF0MW-JCL;
      AF0MT03.TARTYPE[AF0MWIXT] = " ";
    end
    ;
    if (AF0MT03.TARTYPE[AF0MWIXT] == "Q") /* calc weighted pct*/
      set AF0MW06 empty; /* Reset parameters work area*/
      AF0MT03.TARTYPE[AF0MWIXT] = "P";
      AF0MW06.XSECD = XP1REC.XSECD; /* Season cd*/
      AF0MW01.AF0MWXSS = XP1REC.XSECD; /* move sesn cd to wk area*/
      AF0MW01.AF0MWXYR = XP1REC.XSNYR; /* move sesn yr to wk area*/
      ;
      AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
      while (AFWREC.AFWIDX5 != 9999
       && AFWREC.AFWIDX5 != 0) /* end of search condition*/
        if (YSNTBL.XSNABRV[AFWIDX5] == AF0MW01.AF0MWXSA
         && YSNTBL.XGPCD[AFWIDX5] == "03"
         && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
          ;
          AF0MW06.AF0MW-XSNYR = YSNTBL.XSNYR[AFWIDX5];
                                   /* Move xsnyr*/
          AFWREC.AFWIDX5 = 0; /* END OF TABLE*/
        else
          if (YSNTBL.XGPCD[AFWIDX5] != "99")
            AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
          else
            AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
          end
        end
      end
      ;
      ;
      if (XP1REC.PG1FCTCD <= "  ") /* If no values*/
        AF0MW06.PG1FCTCD = "**"; /* Forecaster code*/
      else
        AF0MW06.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster code*/
      end
      ;
      AF0MT03.TARJCL[AF0MWIXT] = AF0MW06.TARJCL;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/
    ;
    TA6REC.TARJCL[TA6INDEX] = AF0MT03.TARJCL[AF0MWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AF0MT03.TARTYPE[AF0MWIXT]; /* Type*/
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (AF0MT03.TARJCL[AF0MWIXT] == "/*EOF") /* End of table*/
      AF0MW01.AF0MWIXT = 0; /* Indicate end of table*/
    else
      AF0MW01.AF0MWIXT = AF0MW01.AF0MWIXT + 1; /* Increment table index*/
    end
    ;
  end
end // end AF0M163

// format jcl for weekend submit
Function AF0M164()
  if (TA3REC.TA3RGNID == "03") /* PRODUCTION region*/
    AF0MW01.AF0MWIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in AF0MT04.TARJCL)
      AF0MW01.AF0MWIXT = sysVar.arrayIndex;
      AF0MW01.AF0MWIXT = AF0MW01.AF0MWIXT + 1; /* Point to TEST JCL*/
    else
      AF0MW01.AF0MWIXT = 1; /* Input table index*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (AF0MW01.AF0MWIXT > 0) /* Until end of table*/
    ;
    if (AF0MT04.TARTYPE[AF0MWIXT] == "P") /* Parameters statement*/
      ;
        /* ------------------------------------------------------------*/
         /* Format parameters for the long short for submission*/
        /* ------------------------------------------------------------*/
      ;
      set AF0MW02 empty; /* Reset parameters work area*/
      ;
      AF0MW02.AF0MWOBI = "O"; /* Indicate online*/
      AF0MW02.XSECD = XP1REC.XSECD; /* Season cd*/
      ;
      AF0MW01.AF0MWXSS = XP1REC.XSECD; /* move sesn cd to wk area*/
      AF0MW01.AF0MWXYR = XP1REC.XSNYR; /* move sesn yr to wk area*/
      AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
      while (AFWREC.AFWIDX5 != 9999
       && AFWREC.AFWIDX5 != 0) /* end of search condition*/
        if (YSNTBL.XSNABRV[AFWIDX5] == AF0MW01.AF0MWXSA
         && YSNTBL.XGPCD[AFWIDX5] == "03"
         && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
          ;
          AF0MW02.XSNYR = YSNTBL.XSNYR[AFWIDX5];
          AFWREC.AFWIDX5 = 0; /* END OF TABLE*/
        else
          if (YSNTBL.XGPCD[AFWIDX5] != "99")
            AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
          else
            AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
          end
        end
      end
      ;
      ;
      if (XP1REC.PG1FCTCD <= "  ") /* If no values*/
        AF0MW02.PG1FCTCD = "**"; /* Forecaster code*/
      else
        AF0MW02.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster code*/
      end
      ;
      if (XP1REC.XDVCD <= "  ") /* If no values*/
        AF0MW02.XDVCD = "**"; /* Division code*/
      else
        AF0MW02.XDVCD = XP1REC.XDVCD; /* Division code*/
      end
      ;
      if (XP1REC.XPRCD <= "  ") /* If no values*/
        AF0MW02.XPRCD = "**"; /* Product type code*/
      else
        AF0MW02.XPRCD = XP1REC.XPRCD; /* Product type code*/
      end
      ;
      if (XP1REC.XGACD <= "  ") /* If no values*/
        AF0MW02.XGACD = "**"; /* Gender/Age code*/
      else
        AF0MW02.XGACD = XP1REC.XGACD; /* Gender/Age code*/
      end
      ;
      if (XP1REC.XPLCD <= "  ") /* If no values*/
        AF0MW02.XPLCD = "**"; /* Product line code*/
      else
        AF0MW02.XPLCD = XP1REC.XPLCD; /* Product line code*/
      end
      ;
      if (XP1REC.XPCCD <= "  ") /* If no values*/
        AF0MW02.XPCCD = "**"; /* Product category code*/
      else
        AF0MW02.XPCCD = XP1REC.XPCCD; /* Product category code*/
      end
      ;
      if (XP1REC.XSUCD <= "  ") /* If no values*/
        AF0MW02.XSUCD = "**"; /* Silhouette code*/
      else
        AF0MW02.XSUCD = XP1REC.XSUCD; /* Silhouette code*/
      end
      ;
      if (XP1REC.SY1STNBR <= "      ") /* If no values*/
        AF0MW02.SY1STNBR = "******"; /* Style number*/
      else
        AF0MW02.SY1STNBR = XP1REC.SY1STNBR; /* Style number*/
      end
      ;
      if (XP1REC.XOWCD <= "  ") /* If no values*/
        AF0MW02.XOWCD = "**"; /* Silhouette code*/
      else
        AF0MW02.XOWCD = XP1REC.XOWCD; /* Silhouette code*/
      end
      ;
      AF0MW02.AF0MWBLA = AF0MW01.AF0MWBLA; /* BLA OPTION*/
      AF0MT04.TARJCL[AF0MWIXT] = AF0MW02.TARJCL;
      ;
    end
    ;
    if (AF0MT04.TARTYPE[AF0MWIXT] == "D") /* dataset override*/
      /* ------------------------------------------------------------*/
      /* Format dataset override for bookings calc*/
      /* ------------------------------------------------------------*/
      ;
      if (AF0MW01.AF0MWBLA == "C") /* current bookings*/
        AF0MS66(); /* nightly bookings*/
      else
        AF0MS67(); /* weekend bookings*/
      end
      AF0MT04.TARJCL[AF0MWIXT] = AF0MW05.AF0MW-JCL;
      AF0MT04.TARTYPE[AF0MWIXT] = " ";
    end
    ;
    if (AF0MT04.TARTYPE[AF0MWIXT] == "Q") /* calc weighted pct*/
      set AF0MW06 empty; /* Reset parameters work area*/
      AF0MT04.TARTYPE[AF0MWIXT] = "P";
      AF0MW06.XSECD = XP1REC.XSECD; /* Season cd*/
      AF0MW01.AF0MWXSS = XP1REC.XSECD; /* move sesn cd to wk area*/
      AF0MW01.AF0MWXYR = XP1REC.XSNYR; /* move sesn yr to wk area*/
      ;
      AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
      while (AFWREC.AFWIDX5 != 9999
       && AFWREC.AFWIDX5 != 0) /* end of search condition*/
        if (YSNTBL.XSNABRV[AFWIDX5] == AF0MW01.AF0MWXSA
         && YSNTBL.XGPCD[AFWIDX5] == "03"
         && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
          ;
          AF0MW06.AF0MW-XSNYR = YSNTBL.XSNYR[AFWIDX5];
          AFWREC.AFWIDX5 = 0; /* END OF TABLE*/
        else
          if (YSNTBL.XGPCD[AFWIDX5] != "99")
            AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
          else
            AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
          end
        end
      end
      ;
      ;
      if (XP1REC.PG1FCTCD <= "  ") /* If no values*/
        AF0MW06.PG1FCTCD = "**"; /* Forecaster code*/
      else
        AF0MW06.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster code*/
      end
      ;
      AF0MT04.TARJCL[AF0MWIXT] = AF0MW06.TARJCL;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/
    ;
    TA6REC.TARJCL[TA6INDEX] = AF0MT04.TARJCL[AF0MWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AF0MT04.TARTYPE[AF0MWIXT]; /* Type*/
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (AF0MT04.TARJCL[AF0MWIXT] == "/*EOF") /* End of table*/
      AF0MW01.AF0MWIXT = 0; /* Indicate end of table*/
    else
      AF0MW01.AF0MWIXT = AF0MW01.AF0MWIXT + 1; /* Increment table index*/
    end
    ;
  end
  ;
end // end AF0M164

// owner group edit in selection
Function AF0MS03()
   /* ============================================================*/
   /* ===== owner group edit in selection criteria           =====*/
   /* ============================================================*/
  ;
  ;
  if (AF0MM001.XOWCD != XP1REC.XOWCD) /* If og has been changed*/
    AF0MW03.AF0MWSJC = " "; /* do not submit jcl*/
  end
  ;
  if (AF0MM001.XOWCD == "  "
   || AF0MM001.XOWCD == "**")
    XP1REC.XOWCD = "**";
    XP1REC.XOWABRV = "ALL";
    XP1REC.XOWDESC = "ALL";
    AF0MM001.XOWABRV = "ALL";
    return;
  end
  ;
  ;
  XP1REC.XWHCD = "51";
  XP1REC.XOWCD = AF0MM001.XOWCD;
  ;
  if (AF0MM001.XOWCD == "?")
    XSAFSOW();
  else
    if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
      XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
      XP1REC.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
      AF0MM001.XOWABRV = XP1REC.XOWABRV;
    else
      XP1REC.XP1ERRFL = "1";
      AFWREC.AFWPRCSN = "S03 ";
      AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
      XP1REC.XP1MNO = 121;
      XP1REC.XOWCD = " ";
      XP1REC.XOWABRV = " ";
      XP1REC.XOWDESC = " ";
      AF0MM001.XOWABRV = " ";
    end
    ;
  end
  ;
   /* ====================== END OF PROCESS ======================*/
end // end AF0MS03

// style edit in selection
Function AF0MS05()
   /* ============================================================*/
   /* ===== edit style in selection criteria                 =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  ;
  if (AF0MM001.SY1STNBR != XP1REC.SY1STNBR) /* If sty nbr has been changed*/
    AF0MW03.AF0MWSJC = " "; /* do not submit jcl*/
  end
  ;
  if (AF0MM001.SY1STNBR != "      ")
    XP1REC.SY1STNBR = AF0MM001.SY1STNBR;
    PG2REC.SY1STNBR = AF0MM001.SY1STNBR;
    PG2REC.XGPCD = "03";
    ;
    try
      call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
      end
    end
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      XP1REC.XP1ERRFL = "1"; /* indicate bad style*/
      AFWREC.AFWPRCSN = "S05 "; /* process name*/
      AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
      XP1REC.XP1MNO = 33; /* indicate invalid style*/
      XP1REC.SY1STNBR = " ";
    end
  else
    XP1REC.SY1STNBR = " ";
    if (XP1REC.XP1MNO == 0
     || XP1REC.XP1MNO == 64)
      set AF0MM001.SY1STNBR cursor;
    end
  end
  ;
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
  ;
  ;
end // end AF0MS05

// silhouette edit in selection
Function AF0MS10()
   /* ============================================================*/
   /* ===== silhouette edit in selection criteria            =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  ;
  if (AF0MM001.XSUCD != XP1REC.XSUCD) /* If silh has been changed*/
    AF0MW03.AF0MWSJC = " "; /* do not submit jcl*/
  end
  ;
  if (AF0MM001.XSUCD != " ")
    XP1REC.XSUCD = AF0MM001.XSUCD;
    XSAFSSU();
    if (XP1REC.XP1ERRFL == "1")
      AFWREC.AFWPRCSN = "S10 ";
      AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
      XP1REC.XP1MNO = 34;
      XP1REC.XSUCD = " ";
      XP1REC.XSUABRV = " ";
      XP1REC.XSUDESC = " ";
      AF0MM001.XSUDESC = " ";
    else
      if (XP1REC.XSUCD in XSUTBL.XSUCD)
        AF0MM001.XSUCD = XP1REC.XSUCD;
        XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
        XP1REC.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex];
        AF0MM001.XSUDESC = XP1REC.XSUDESC;
      else
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S10 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 34;
        XP1REC.XSUCD = " ";
        XP1REC.XSUABRV = " ";
        XP1REC.XSUDESC = " ";
        AF0MM001.XSUDESC = " ";
      end
      if (XP1REC.XXXSTAT == "I")
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S10 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 21;
      end
    end
  else
    XP1REC.XSUCD = " ";
    XP1REC.XSUABRV = " ";
    XP1REC.XSUDESC = " ";
    AF0MM001.XSUDESC = " ";
    if (XP1REC.XP1MNO == 0
     || XP1REC.XP1MNO == 64)
      set AF0MM001.XSUCD cursor;
    end
  end
  ;
   /* ====================== END OF PROCESS ======================*/
end // end AF0MS10

// product category edit in selec
Function AF0MS15()
   /* ============================================================*/
   /* ===== product category edit in selection criteria      =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  ;
  if (AF0MM001.XPCCD != XP1REC.XPCCD) /* If pr cat has been changed*/
    AF0MW03.AF0MWSJC = " "; /* do not submit jcl*/
  end
  ;
  if (AF0MM001.XPCCD != " ")
    XP1REC.XPCCD = AF0MM001.XPCCD;
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    XSAFSPC();
    if (XP1REC.XP1ERRFL == "1")
      AFWREC.AFWPRCSN = "S15 ";
      AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
      XP1REC.XP1MNO = 35;
      XP1REC.XPCCD = " ";
      XP1REC.XPCABRV = " ";
      XP1REC.XPCDESC = " ";
      AF0MM001.XPCDESC = " ";
    else
      if (XP1REC.XPCCD in XPCTBL.XPCCD)
        AF0MM001.XPCCD = XP1REC.XPCCD;
        XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
        XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex];
        AF0MM001.XPCDESC = XP1REC.XPCDESC;
      else
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S15 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 35;
        XP1REC.XPCCD = " ";
        XP1REC.XPCABRV = " ";
        XP1REC.XPCDESC = " ";
        AF0MM001.XPCDESC = " ";
      end
      if (XP1REC.XXXSTAT == "I")
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S15 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 21;
      end
    end
  else
    XP1REC.XPCCD = " ";
    XP1REC.XPCABRV = " ";
    XP1REC.XPCDESC = " ";
    AF0MM001.XPCDESC = " ";
    if (XP1REC.XP1MNO == 0)
      set AF0MM001.XPCCD cursor;
    end
  end
  ;
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
  ;
  ;
end // end AF0MS15

// gender/age edit in selection
Function AF0MS20()
   /* ============================================================*/
   /* ===== gender/age edit in selection criteria            =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  ;
  if (AF0MM001.XGACD != XP1REC.XGACD) /* If g/a has been changed*/
    AF0MW03.AF0MWSJC = " "; /* do not submit jcl*/
  end
  ;
  if (AF0MM001.XGACD != " ")
    XP1REC.XGACD = AF0MM001.XGACD;
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    XSAFSGA();
    if (XP1REC.XP1ERRFL == "1")
      AFWREC.AFWPRCSN = "S20 ";
      AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
      XP1REC.XP1MNO = 36;
      XP1REC.XGACD = " ";
      XP1REC.XGAABRV = " ";
      XP1REC.XGADESC = " ";
      AF0MM001.XGADESC = " ";
    else
      if (XP1REC.XGACD in XGATBL.XGACD)
        AF0MM001.XGACD = XP1REC.XGACD;
        XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
        XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
        AF0MM001.XGADESC = XP1REC.XGADESC;
      else
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S20 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 36;
        XP1REC.XGACD = " ";
        XP1REC.XGAABRV = " ";
        XP1REC.XGADESC = " ";
        AF0MM001.XGADESC = " ";
      end
      if (XP1REC.XXXSTAT == "I")
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S20 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 21;
      end
    end
  else
    XP1REC.XGACD = " ";
    XP1REC.XGAABRV = " ";
    XP1REC.XGADESC = " ";
    AF0MM001.XGADESC = " ";
    if (XP1REC.XP1MNO == 0)
      set AF0MM001.XGACD cursor;
    end
  end
  ;
end // end AF0MS20

// Edit season cd/yr
Function AF0MS25()
  AF0MW01.AF0MWXSS = AF0MM001.XSECD; /* move sesn cd to wk area*/
  AF0MW01.AF0MWXYR = AF0MM001.XSNYR; /* move sesn yr to wk area*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0MW01.AF0MWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
            /* (season cd/yr combination invalid)*/
  XP1REC.XP1ERRFL = "1";
  AFWREC.AFWPRCSN = "S25 "; /* Process number*/
  AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  XP1REC.XP1MNO = 67; /* indicate error message*/
  XP1REC.XSECD = "  ";
  XP1REC.XSNYR = 0;
  ;
end // end AF0MS25

// Edit season year
Function AF0MS30()
  XP1REC.XSNYR = AF0MM001.XSNYR; /* save to working storage*/
  ;
            /* (validate season year stand-alone)*/
  ;
  AF0MW01.AF0MWXSY = 0; /* initialize xsnyr wk area*/
  AF0MW01.AF0MWXSY = XP1REC.XSNYR; /* move to wk area*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* AF0MW01.AF0MWXSY = AF0MW01.AF0MWXSY + 1900;/* move century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AF0MW01.AF0MWXYY > 60)
    AF0MW01.AF0MWXCC = 19; /* move century*/
  else
    AF0MW01.AF0MWXCC = 20; /* move century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  ;
  if (AF0MW01.AF0MWXSY < 2000)
    AF0MS30S();
  else
    if (AF0MW01.AF0MWXSY == 2000)
      if (AF0MM001.XSECD == "SP"
       || AF0MM001.XSECD == "SU")
        AF0MS30S();
      else
            /* (season cd/yr combination invalid)*/
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S30 "; /* Process number*/
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* save to working storage*/
      end
    else
      if (AF0MW01.AF0MWXSY > 2000)
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S30 "; /* Process number*/
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* save to working storage*/
      end
    end
  end
  ;
end // end AF0MS30

// season year search
Function AF0MS30S()
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0MW01.AF0MWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
            /* (season cd/yr combination invalid)*/
  XP1REC.XP1ERRFL = "1";
  AFWREC.AFWPRCSN = "S30 "; /* Process number*/
  AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* save to working storage*/
  ;
  ;
end // end AF0MS30S

// season code edit in selection
Function AF0MS35()
   /* ============================================================*/
   /* =====                                                  =====*/
   /* ===== season code edit in selection criteria           =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  if (AF0MM001.XSECD == "  ")
    XPAF020();
  else
    if (AF0MM001.XSECD != XP1REC.XSECD)
      AF0MW03.AF0MWSJC = " ";
    end
    if (AF0MM001.XSECD != " ")
      XP1REC.XSECD = AF0MM001.XSECD;
      XSAFSSE();
      if (XP1REC.XP1ERRFL == "1")
        AFWREC.AFWPRCSN = "S35 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 16;
      else
        if (XP1REC.XSECD in XSETBL.XSECD)
          AF0MM001.XSECD = XP1REC.XSECD;
        else
          XP1REC.XP1ERRFL = "1";
          AFWREC.AFWPRCSN = "S35 ";
          AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
          XP1REC.XP1MNO = 16;
          XP1REC.XSECD = "  ";
        end
        if (XP1REC.XXXSTAT == "I")
          XP1REC.XP1ERRFL = "1";
          AFWREC.AFWPRCSN = "S35 ";
          AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
          XP1REC.XP1MNO = 21;
        end
      end
    end
  end
  ;
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
  ;
  ;
end // end AF0MS35

// Verify forecaster name
Function AF0MS40()
  ;
  if (AF0MM001.XXXUSER != XP1REC.XXXUSER)
                                   /* If forecaster has been changed*/
    AF0MW03.AF0MWSJC = " "; /* do not submit jcl*/
  end
  ;
  if (AF0MM001.XXXUSER != " ")
    ;
    XP1REC.XP1ERRFL = " "; /* Reset error flag*/
    XP1REC.XXXUSER = AF0MM001.XXXUSER;
    XPAF010(); /* Obtain Forecaster Code*/
    ;
    if (XP1REC.XP1ERRFL != " ") /* Forecaster Code not found*/
      ;
      XP1REC.XP1ERRFL = "1";
      AFWREC.AFWPRCSN = "S40 "; /* Process number*/
      AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      XP1REC.XP1MNO = 65; /* indicate error message*/
      return; /* Return to calling process*/
      ;
    else
      if (PG1REC.PG1FCTCD == " ")
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S40 "; /* Process number*/
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
        XP1REC.PG1FCTCD = " "; /* Reset save area*/
        XP1REC.XP1MNO = 66; /* indicate error message*/
        return; /* Return to calling process*/
      end
    end
  else
    XP1REC.XXXUSER = " ";
    XP1REC.PG1FCTCD = " ";
  end
  ;
  ;
end // end AF0MS40

// product line edit in selection
Function AF0MS45()
   /* ============================================================*/
   /* =====   product line  edit in selection criteria       =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  ;
  if (AF0MM001.XPLCD != XP1REC.XPLCD) /* If pr lin has been changed*/
    AF0MW03.AF0MWSJC = " "; /* do not submit jcl*/
  end
  ;
  if (AF0MM001.XPLCD != " ")
    XP1REC.XPLCD = AF0MM001.XPLCD;
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    XSAFSPL();
    if (XP1REC.XP1ERRFL == "1")
      AFWREC.AFWPRCSN = "S45 ";
      AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
      XP1REC.XP1MNO = 81;
      XP1REC.XPLCD = " ";
      XP1REC.XPLABRV = " ";
      XP1REC.XPLDESC = " ";
      AF0MM001.XPLDESC = " ";
    else
      if (XP1REC.XPLCD in XPLTBL.XPLCD)
        AF0MM001.XPLCD = XP1REC.XPLCD;
        XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        XP1REC.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex];
        AF0MM001.XPLDESC = XP1REC.XPLDESC;
      else
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S45 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 81;
        XP1REC.XPLCD = " ";
        XP1REC.XPLABRV = " ";
        XP1REC.XPLDESC = " ";
        AF0MM001.XPLDESC = " ";
      end
      ;
      if (XP1REC.XXXSTAT == "I")
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S45 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 21;
      end
    end
  else
    XP1REC.XPLCD = " ";
    XP1REC.XPLABRV = " ";
    XP1REC.XPLDESC = " ";
    AF0MM001.XPLDESC = " ";
    if (XP1REC.XP1MNO == 0)
      set AF0MM001.XPLCD cursor;
    end
  end
  ;
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
  ;
  ;
end // end AF0MS45

// product type edit in selection
Function AF0MS50()
   /* ============================================================*/
   /* =====   product type  edit in selection criteria       =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  ;
  if (AF0MM001.XPRCD != XP1REC.XPRCD) /* If pr lin has been changed*/
    AF0MW03.AF0MWSJC = " "; /* do not submit jcl*/
  end
  ;
  if (AF0MM001.XPRCD != " ")
    XP1REC.XPRCD = AF0MM001.XPRCD;
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    XSAFSPR();
    if (XP1REC.XP1ERRFL == "1")
      AFWREC.AFWPRCSN = "S50 ";
      AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
      XP1REC.XP1MNO = 80;
      XP1REC.XPRCD = " ";
      XP1REC.XPRABRV = " ";
      XP1REC.XPRDESC = " ";
      AF0MM001.XPRDESC = " ";
    else
      if (XP1REC.XPRCD in XPRTBL.XPRCD)
        AF0MM001.XPRCD = XP1REC.XPRCD;
        XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
        XP1REC.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
        AF0MM001.XPRDESC = XP1REC.XPRDESC;
      else
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S50 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 80;
        XP1REC.XPRCD = " ";
        XP1REC.XPRABRV = " ";
        XP1REC.XPRDESC = " ";
        AF0MM001.XPRDESC = " ";
      end
      ;
      if (XP1REC.XXXSTAT == "I")
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S50 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 21;
      end
    end
  else
    XP1REC.XPRCD = " ";
    XP1REC.XPRABRV = " ";
    XP1REC.XPRDESC = " ";
    AF0MM001.XPRDESC = " ";
    if (XP1REC.XP1MNO == 0)
      set AF0MM001.XPRCD cursor;
    end
  end
  ;
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
  ;
  ;
end // end AF0MS50

// division edit in selection
Function AF0MS55()
   /* ============================================================*/
   /* =====     division   edit in selection criterion       =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  ;
  if (AF0MM001.XDVCD != XP1REC.XDVCD) /* If div has been changed*/
    AF0MW03.AF0MWSJC = " "; /* do not submit jcl*/
  end
  ;
  if (AF0MM001.XDVCD != " ")
    XP1REC.XDVCD = AF0MM001.XDVCD;
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    XSAFSDV();
    if (XP1REC.XP1ERRFL == "1")
      AFWREC.AFWPRCSN = "S55 ";
      AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
      XP1REC.XP1MNO = 29;
      XP1REC.XDVCD = " ";
      XP1REC.XDVABRV = " ";
      XP1REC.XDVDESC = " ";
      AF0MM001.XDVDESC = " ";
    else
      if (XP1REC.XDVCD in XDVTBL.XDVCD)
        AF0MM001.XDVCD = XP1REC.XDVCD;
        XP1REC.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
        XP1REC.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
        AF0MM001.XDVDESC = XP1REC.XDVDESC;
      else
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S55 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 29;
        XP1REC.XDVCD = " ";
        XP1REC.XDVABRV = " ";
        XP1REC.XDVDESC = " ";
        AF0MM001.XDVDESC = " ";
      end
      ;
      if (XP1REC.XXXSTAT == "I")
        XP1REC.XP1ERRFL = "1";
        AFWREC.AFWPRCSN = "S50 ";
        AF0MM001.XXXPRCNM = AFWREC.AFWERLOC;
        XP1REC.XP1MNO = 21;
      end
    end
  else
    XP1REC.XDVCD = " ";
    XP1REC.XDVABRV = " ";
    XP1REC.XDVDESC = " ";
    AF0MM001.XDVDESC = " ";
    if (XP1REC.XP1MNO == 0)
      set AF0MM001.XDVCD cursor;
    end
  end
  ;
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
  ;
  ;
end // end AF0MS55

// format ntly bookings override
Function AF0MS66()
   /* ------------------------------------------------------------*/
   /* Format the bookings dataset jcl card.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0MW05 empty; /* Parameters work area*/
  ;
  AF0MW05.AF0MW-STEP = "//P0020.AF1241I2";
  AF0MW05.AF0MW-DD = "  DD  DSN=";
  ;
  if (TA3REC.TA3RGNID == "03") /* production*/
    AF0MW05.AF0MW-DSN = "AF.F1861.DMND.NTLY.SORT,DISP=SHR";
  else
    AF0MW05.AF0MW-DSN = "T.AF.F1861.DMND.NTLY.SORT,DISP=SHR";
  end
  ;
  ;
end // end AF0MS66

// format wkly bookings override
Function AF0MS67()
   /* ------------------------------------------------------------*/
   /* Format the bookings dataset jcl card.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0MW05 empty; /* Parameters work area*/
  ;
  AF0MW05.AF0MW-STEP = "//P0020.AF1241I2";
  AF0MW05.AF0MW-DD = "  DD  DSN=";
  ;
  if (TA3REC.TA3RGNID == "03") /* production*/
    AF0MW05.AF0MW-DSN = "AF.F1851.DMND.WKLY.SORT,DISP=SHR";
  else
    AF0MW05.AF0MW-DSN = "T.AF.F1851.DMND.WKLY.SORT,DISP=SHR";
  end
  ;
  ;
end // end AF0MS67

//*** RECORD=AF0MW-NOTIFY-JCL ****
// supplies //    NOTIFY=userid for TEST use only
// ********************************
Record AF0MW-NOTIFY-JCL type basicRecord
  10 AF0MW-JCL AF0MW-JCL ; 
    15 AF0MW-SLASH AF0MW-SLASH ; 
    15 * char(13) ; 
    15 AF0MW-NOTIFY AF0MW-NOTIFY ; 
    15 TA3USRID TA3USRID ; 
    15 * char(50) ; 
end // end AF0MW-NOTIFY-JCL

//*** RECORD=AF0MW01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AF0MW01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 AF0MWSWS AF0MWSWS ; 
  10 AF0MWUID AF0MWUID ; 
  10 AF0MWXSA AF0MWXSA ; 
    15 AF0MWXSS AF0MWXSS ; 
    15 AF0MWXYR AF0MWXYR ; 
  10 AF0MWIXT AF0MWIXT ; 
  10 AF0MWXSY AF0MWXSY ; 
    15 AF0MWXCC AF0MWXCC ; 
    15 AF0MWXYY AF0MWXYY ; 
  10 AF0MWBLA AF0MWBLA ; 
  10 AF0MMSCH AF0MMSCH ; 
  10 AF0MWPSW AF0MWPSW ; 
  10 AF0MW-INCLUDE-AIRSPEED AF0MW-INCLUDE-AIRSPEED ; 
end // end AF0MW01

//*** RECORD=AF0MW02 ****
//    ***** Calculate Long and Short *****
// JCL variable storage for AF0M
// ***********************
Record AF0MW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0MWOBI AF0MWOBI ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 XDVCD XDVCD ; 
    15 XPRCD XPRCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XSUCD XSUCD ; 
    15 XOWCD char(2) ; // xow_own_grp_cd
    15 SY1STNBR SY1STNBR ; 
    15 * char(43) ; 
    15 AF0MWBLA AF0MWBLA ; 
    15 * char(2) ; 
    15 AF0MW-INCLUDE-AIRSPEED AF0MW-INCLUDE-AIRSPEED ; 
    15 * char(6) ; 
end // end AF0MW02

//*** RECORD=AF0MW03 ****
// ------------------------------------------------------------
//     *** Parameter 1 for job AF1231- Sysunit= CARDIN ***
// ------------------------------------------------------------
// ***********************
Record AF0MW03 type basicRecord
  10 XSECD XSECD ; 
  10 AF0MWSNY AF0MWSNY ; 
  10 XXXUSER XXXUSER ; 
  10 AF0MWSJC AF0MWSJC ; 
end // end AF0MW03

//*** RECORD=AF0MW04 ****
// JCL variable storage for AF0M for long and short report
// ***********************
Record AF0MW04 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0MWOBI AF0MWOBI ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 XDVCD XDVCD ; 
    15 XPRCD XPRCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XSUCD XSUCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 AF0MWCOV AF0MWCOV ; 
    15 AF0MWCLP AF0MWCLP ; 
    15 AF0MWDTL AF0MWDTL ; 
    15 AF0MWSUM AF0MWSUM ; 
    15 AF0MWCLF AF0MWCLF ; 
    15 AF0MWBTO AF0MWBTO ; 
    15 AF0MWBTB AF0MWBTB ; 
    15 AF0MWFPO AF0MWFPO ; 
    15 AF0MWFPV AF0MWFPV ; 
    15 AF0MWLSO AF0MWLSO ; 
    15 AF0MWLSU AF0MWLSU ; 
    15 AF0MWBLO AF0MWBLO ; 
    15 AF0MWBLU AF0MWBLU ; 
    15 AF0MWBLF AF0MWBLF ; 
    15 AF0MMLCS AF0MMLCS [4] ; 
    15 XOWCD char(2) ; // xow_own_grp_cd
    15 AF0MWRPF char(1) ; // report format
    15 AF0MWIST AF0MWIST ; 
    15 * char(21) ; 
end // end AF0MW04

//*** RECORD=AF0MW05 ****
// JCL variable storage for AF0M for long and short report
// ***********************
Record AF0MW05 type basicRecord
  10 AF0MW-JCL AF0MW-JCL ; 
    15 AF0MW-STEP AF0MW-STEP ; 
    15 AF0MW-DD AF0MW-DD ; 
    15 AF0MW-DSN AF0MW-DSN ; 
    15 * char(20) ; 
end // end AF0MW05

//*** RECORD=AF0MW06 ****
// this holds the parm for calc weighted percent
// ***********************
Record AF0MW06 type basicRecord
  10 TARJCL TARJCL ; 
    15 XSECD XSECD ; 
    15 * char(1) ; 
    15 AF0MW-XSNYR AF0MW-XSNYR ; 
    15 * char(1) ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 * char(70) ; 
end // end AF0MW06

// Life Cycle Selected
DataItem AF0MMLCS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// submit job flag
DataItem AF0MMSCH num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dd
DataItem AF0MW-DD char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dataset name
DataItem AF0MW-DSN char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// include airspeed selection
DataItem AF0MW-INCLUDE-AIRSPEED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job Control Language statement
DataItem AF0MW-JCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal NOTIFY=
DataItem AF0MW-NOTIFY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// // to indicate jcl stmnt
DataItem AF0MW-SLASH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// override step name
DataItem AF0MW-STEP char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0MW-XSNYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AF1082_BLA_CUR_WKND
DataItem AF0MWBLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank style only flag
DataItem AF0MWBLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// B.L.A. units operator
DataItem AF0MWBLO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bottom line avail. units
DataItem AF0MWBLU int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// balance to book percentage
DataItem AF0MWBTB smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Balance to book operator
DataItem AF0MWBTO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Show all colors flag
DataItem AF0MWCLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color percent indicator
DataItem AF0MWCLP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carryover indicator
DataItem AF0MWCOV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail indicator
DataItem AF0MWDTL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast vs purchased operator
DataItem AF0MWFPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst vs purchases variance %
DataItem AF0MWFPV smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0MWIST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL table index
DataItem AF0MWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Long and short units operator
DataItem AF0MWLSO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LONG AND SHORT UNITS
DataItem AF0MWLSU int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ONLINE BATCH INDICATOR
DataItem AF0MWOBI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm swutch
DataItem AF0MWPSW char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Submit JCL (y/n) switch
DataItem AF0MWSJC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map season year range
DataItem AF0MWSNY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summary indicator
DataItem AF0MWSUM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem AF0MWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Userid source indicator
DataItem AF0MWUID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0MWXCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk abrv
DataItem AF0MWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0MWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0MWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0MWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xsnyr work area
DataItem AF0MWXYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

