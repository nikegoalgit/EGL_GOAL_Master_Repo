package af0o;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPTA0P;
import corpcom3.XSAFS01;
import corpcom3.XSAFSSE;
import corpcom4.XSTA0P;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XGATBL;
import corpx1.XPCTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XSECD;
import corpx2.XSNBDT;
import corpx2.XSNXDT;
import corpx2.XSNYR;
import corpy2.YSNTBL;
import pg.common.PG1FCTCD;
import pg.common.PG1REC;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=AF0O ****
// This application displays the Report Request Menu screen and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Another available selection allows the user to
// view the available printers and change the remote printer
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    J                JOB              TARUSRID          5-10
//                     " "              TARUSRNM         27-46
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/07/88  USERID  New application.
//          08/31/90  mlucht  Added 'blank only ' flag.
//                            Changed appl to send msg to the
//                            user when batch job is done.
// af9999   09/03/93  tdodso  4.1 conversion.
//          02-15-95  kj      xsn->ysn
// y2kfix   12-17-97  pharwo  year 2000 changes to map af0om001
//                            and af0os01, af0o600, af0o001.
//          05-26-99  craymo  AF0OS01 - added logic to disallow
//                            any data entry beyond SU 2000.
// *********************
Program AF0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0OW01 AF0OW01; // record
  AF0OW02 AF0OW02; // record
  AFFREC AFFREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use AF0OT01; // table
  use AF0OM.AF0OM001, // form
  AF0OM.TA0PM001,
  AF0OM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/
    ;
    set TA0PM001 initial; /* M001 input/output*/
    set AF0OM001 initial; /* M001 input/output*/
//    set AF0OW01 empty; /* Working storage*/
    set AF0OW02 empty; /* Working storage*/
    set XX0XW01 empty;
    set XX0XW02 empty;
    set SQLCA empty; /* SQL communication area*/
    set AFFREC empty; /* snapshot record*/
    set AFWREC empty;
    set PG1REC empty;
    set PG2REC empty;
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty;
    set TA3REC empty; /* region id rec*/
    set TA6REC empty; /* Print subroutine parameters*/
    ;
    AFWREC.AFWAPPL = "AF0O"; /* Set up application name in errorloc*/
    ;
     /* ------------------------------------------------------------*/
     /* Indicate that the report distribution must be obtained.*/
     /* ------------------------------------------------------------*/
    ;
    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the special initialization.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0O001; /* Perform special initialization*/
    ;
    ;
    AF0O001: AF0O001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0O002; /* Converse the main process*/
    ;
    ;
    AF0O002: AF0O002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0O002;
    ;
    ;
  end // end main
end // end AF0O

// Report Requests initialization
Function AF0O001()
   /* ------------------------------------------------------------*/
   /* Initilize century working storage field.*/
   /* ------------------------------------------------------------*/
  ;
   /* -------------------------*/
   /* Obtain Current century*/
   /* -------------------------*/
  XX0XS01(); /* Obtain current date*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE XX0XW01.XX0XW19 TO AF0OW01.AF0OWCC;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
  ;
  ;
end // end AF0O001

// Main process to display a map
Function AF0O002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0O100(); /* special bookings*/
  ;
  ;
end // end AF0O002

// ** special bookings load **
Function AF0O100()
   /* *************************************************************/
  ;
           /* Special bookings job submit screen*/
  ;
   /* *************************************************************/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AF0O200(); /* Format and display the map*/
  ;
  AF0O300(); /* Check attention identifier*/
  ;
  AF0O400(); /* Reset fields to normal intensity*/
  ;
  AF0O500(); /* Verify the data that was entered*/
  ;
  AF0O600(); /* Process valid input request*/
  ;
  ;
end // end AF0O100

// Format and display the map
Function AF0O200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/
  ;
  AF0OM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Move XP1REC fields to map*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No error was found*/
    AF0OM001.AF0OMFUI = XP1REC.XXXUSER; /* Forecaster userid*/
    AF0OM001.XSECD = XP1REC.XSECD; /* Season code*/
    AF0OM001.XSNYR = XP1REC.XSNYR; /* Season year*/
  end
  ;
  set AF0OM001.XSECD cursor;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    AF0OM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    if (AFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set AF0OM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse AF0OM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.XXXMSGNO = 0; /* Message number*/
  AFWREC.AFWPRCSN = " "; /* Module identification*/
  ;
  ;
end // end AF0O200

// Check attention identifier
Function AF0O300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0OM001 initial; /* m008 input/output*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0OM001.CATOAP > " ") /* Fast Path requested*/

    if (converseVar.eventKey is enter) /* Enter was pressed*/

      COMMAREA.CATOAP = AF0OM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0OM001.CAITEM; /* Application data*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0OM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "300 "; /* Process number*/
    AF0OM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf4) /* PF4 was pressed*/
    ;
    AF0OW01.AF0OWSWX = "Y"; /* Indicate exit requested*/
    ;
    XSAFS01();
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    AFWREC.AFWPRCSN = "052 "; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end AF0O300

// Reset highlighted fields
Function AF0O400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0OM001.AF0OMFUI initialAttributes; /* Forecaster*/
  set AF0OM001.XSECD initialAttributes; /* Season code*/
  set AF0OM001.XSNYR initialAttributes; /* Season year*/
  set AF0OM001.AF0OMBEG initialAttributes; /* Need Date - begining*/
  set AF0OM001.AF0OMEND initialAttributes; /* Need Date - ending*/
  set AF0OM001.AF0OMAFG initialAttributes; /* account bookings flag*/
  set AF0OM001.AF0OMSFG initialAttributes; /* style bookings flag*/
  ;
  ;
   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/
  ;
  if (AF0OM001.XSECD == "?")
    ;
    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "053 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    ;
    return; /* Exit to next process*/
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/
  ;
  if (AF0OM001.XSECD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XSECD = AF0OM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSE(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0OM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/
  ;
  ;
  converseLib.clearScreen();
   /* Reset screen before display*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0O400

// Verify the entered data
Function AF0O500()
   /* *************************************************************/
                 /* Verify the entered data*/
  ;
    /* The following edits are performed in sequence;*/
  ;
            /* 1) report flags*/
            /* 2) Season year*/
            /* 3) Need Dates*/
            /* 4) Season code*/
            /* 5) Forecaster userid*/
  ;
   /* *************************************************************/
  ;
  ;
   /* ---------------------------*/
    /* Edit report flags*/
   /* ---------------------------*/
  ;
  if (AF0OM001.AF0OMSFG == " "
   || AF0OM001.AF0OMSFG == "Y"
   || AF0OM001.AF0OMSFG == "N")
    AF0OW01.AF0OWSFG = AF0OM001.AF0OMSFG;
  else
    AFWREC.AFWPRCSN = "084 "; /* Process number*/
    converseLib.validationFailed(63); /* Indicate error msg*/
    set AF0OM001.AF0OMSFG cursor, bold; /* Highlight field*/
  end
  ;
  if (AF0OM001.AF0OMAFG == " "
   || AF0OM001.AF0OMAFG == "Y"
   || AF0OM001.AF0OMAFG == "N")
    AF0OW01.AF0OWAFG = AF0OM001.AF0OMAFG;
  else
    AFWREC.AFWPRCSN = "084 "; /* Process number*/
    converseLib.validationFailed(63); /* Indicate error msg*/
    set AF0OM001.AF0OMAFG cursor, bold; /* Highlight field*/
  end
  ;
   /* ---------------------------*/
    /* Edit season year*/
   /* ---------------------------*/
  AF0OW01.AF0OWERR = "N"; /* Set error ind flag to no*/
  AF0OW01.AF0OWYY = AF0OM001.XSNYR;
  ;
  AF0OS01(); /* Edit season year*/
  ;
  if (AF0OW01.AF0OWERR == "Y") /* If error has occurred*/
    exit stack;
  end
  ;
   /* ---------------------------*/
    /* Edit Need Date - Ending*/
   /* ---------------------------*/
  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGAN = 0;
  AF0OW01.AF0OWDTE = AF0OM001.AF0OMEND;
  TA2REC.TA2GRGAN = TA2REC.TA2GRGAN + AF0OW01.AF0OWDTE;
  AF0OW01.AF0OWDMM = AF0OW01.AF0OWDMM * 10000;
  TA2REC.TA2GRGAN = TA2REC.TA2GRGAN + AF0OW01.AF0OWDMM;
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Check valid date w/routine*/
  ;
  if (TA2REC.TA2RTNCD == 0) /* Valid date entered*/
    AF0OW01.AF0OWNDE = TA2REC.TA2GRGGN;
    AF0OW01.AF0OWEND = 0;
    AF0OW01.AF0OWNDB = AF0OM001.AF0OMEND; /* ending   need date*/
    AF0OW01.AF0OWEND = AF0OW01.AF0OWEND + AF0OW01.AF0OWNDB;
  else
    if (AF0OM001.AF0OMEND == " "
     || AF0OM001.AF0OMEND == 0)
      AF0OW01.AF0OWEND = 9999; /* save date*/
    else
      AFWREC.AFWPRCSN = "084 "; /* Process number*/
      converseLib.validationFailed(63); /* Indicate error msg*/
      set AF0OM001.AF0OMEND cursor, bold; /* Highlight field*/
      AF0OW01.AF0OWEND = 0; /* zero save date*/
    end
  end
  ;
  ;
  ;
   /* ---------------------------*/
    /* Edit Need Date - Begining*/
   /* ---------------------------*/
  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGAN = 0;
  AF0OW01.AF0OWDTE = AF0OM001.AF0OMBEG;
  TA2REC.TA2GRGAN = TA2REC.TA2GRGAN + AF0OW01.AF0OWDTE;
  AF0OW01.AF0OWDMM = AF0OW01.AF0OWDMM * 10000;
  TA2REC.TA2GRGAN = TA2REC.TA2GRGAN + AF0OW01.AF0OWDMM;
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Check valid date w/routine*/
  ;
  if (TA2REC.TA2RTNCD == 0) /* Valid date entered*/
    AF0OW01.AF0OWBEG = 0;
    AF0OW01.AF0OWNDB = AF0OM001.AF0OMBEG; /* ending   need date*/
    AF0OW01.AF0OWBEG = AF0OW01.AF0OWBEG + AF0OW01.AF0OWNDB;
  else
    if (AF0OM001.AF0OMBEG == " "
     || AF0OM001.AF0OMBEG == 0)
      AF0OW01.AF0OWBEG = 0000; /* save date*/
    else
      AFWREC.AFWPRCSN = "084 "; /* Process number*/
      converseLib.validationFailed(63); /* Indicate error msg*/
      set AF0OM001.AF0OMBEG cursor, bold; /* Highlight field*/
      AF0OW01.AF0OWBEG = 0; /* zero save date*/
    end
  end
  ;
  ;
   /* ---------------------------*/
    /* Edit season code*/
   /* ---------------------------*/
  AF0OW01.AF0OWERR = "N"; /* Set error ind flag to no*/
  AF0OW01.XSECD = AF0OM001.XSECD;
  ;
  AF0OS02(); /* Edit season code*/
  ;
  if (AF0OW01.AF0OWERR == "Y") /* If error has occurred*/
    set AF0OM001.XSECD cursor, bold; /* Highlight field*/
  end
  ;
  ;
   /* ---------------------------*/
    /* Edit Forecaster userid*/
   /* ---------------------------*/
  AF0OW01.AF0OWERR = "N"; /* Set error ind flag to no*/
  AF0OW01.AF0OWFUI = AF0OM001.AF0OMFUI;
  ;
  AF0OS03(); /* Edit forecaster userid*/
  ;
  if (AF0OW01.AF0OWERR == "Y") /* If error has occurred*/
    set AF0OM001.AF0OMFUI cursor, bold; /* Highlight field*/
  end
  ;
  ;
   /* ---------------------------*/
    /* Reset error flag*/
   /* ---------------------------*/
  AF0OW01.AF0OWERR = "N"; /* Set error ind flag to no*/
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  else
    /* -----------------------------------------------------------*/
      /* Verify that entered bk thru date is within sesn/yr bounds*/
    /* -----------------------------------------------------------*/
    if (TA2REC.TA2GRGGN >= AF0OW01.XSNBDT
     && TA2REC.TA2GRGGN <= AF0OW01.XSNXDT)
       /* continue on*/
    else
      if (AF0OM001.AF0OMBEG == " "
       || AF0OM001.AF0OMBEG == 0)
         /* continue on*/
      else
        AFWREC.AFWPRCSN = "084 "; /* Process number*/
        converseLib.validationFailed(73); /* Indicate error msg*/
        set AF0OM001.AF0OMBEG cursor, bold; /* Highlight field*/
      end
    end
    ;
    if (AF0OW01.AF0OWNDE >= AF0OW01.XSNBDT
     && AF0OW01.AF0OWNDE <= AF0OW01.XSNXDT)
       /* continue on*/
    else
      if (AF0OM001.AF0OMEND == " "
       || AF0OM001.AF0OMEND == 0)
         /* continue on*/
      else
        AFWREC.AFWPRCSN = "084 "; /* Process number*/
        converseLib.validationFailed(73); /* Indicate error msg*/
        set AF0OM001.AF0OMEND cursor, bold; /* Highlight field*/
      end
    end
    ;
    AF0OW01.XSNBDT = +0;
    AF0OW01.XSNXDT = +0;
    ;
    if (converseVar.validationMsgNum != 0) /* Error was found*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  TA6REC.TA6SUBSW = "N";
  AF0O510();
  ;
end // end AF0O500

// ** Specify Rpt Distribution**
Function AF0O510()
   /* *************************************************************/
  ;
               /* SPECIFY REPORT DISTRIBUTION*/
  ;
   /* *************************************************************/
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the routing information for the user.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If first time through, indicate information was obtained.*/
   /* ------------------------------------------------------------*/
  ;
   /* IF TA6REC.TA6SUBSW EQ 'I'       ; Obtain report distribution*/
    /* ;*/
    /* MOVE 'N' TO TA6REC.TA6SUBSW ;Indicate information obtained*/
    /* ;*/
    /* EZERTN                        ; Return to previous process*/
    /* ;*/
   /* END ;*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    ;
    /* ------------------------------------------------------------*/
     /* If missing distribution information, indicate that exit was*/
     /* requested.  Otherwise, return to continue processing.*/
    /* ------------------------------------------------------------*/
    ;
    if (TA6REC.XURDEST == " "  /* No print destination*/
     || TA6REC.XURUSRNM == " " /* or report recipient*/
     || TA6REC.XURBLDID == " ") /* or NIKE building*/
      ;
      AF0OW01.AF0OWSWX = "Y"; /* Indicate exit requested*/
      ;
    else
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  else
    ;
    AFWREC.AFWPRCSN = "010 "; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0O510

// Process valid input request
Function AF0O600()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  AF0O610(); /* get region id*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
  if (TA3REC.TA3RGNID == "03")
    AF0OW01.AF0OWIXT = 1;
  else
    if ("/*EOF" in AF0OT01.TARJCL)
      AF0OW01.AF0OWIXT = sysVar.arrayIndex;
      AF0OW01.AF0OWIXT = AF0OW01.AF0OWIXT + 1;
    else
      AF0OW01.AF0OWIXT = 1;
    end
  end
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (AF0OW01.AF0OWIXT > 0) /* Until end of table*/
    ;
    ;
    if (AF0OT01.TARTYPE[AF0OWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set AF0OW02 empty; /* Parameters work area*/
      ;
      /* -----------------------------------*/
       /* Move in required pass parm fields*/
      /* -----------------------------------*/
      ;
      AF0OW02.AF0OWOBI = "O"; /* Indicate online submitted*/
      ;
      AF0OW02.PG1FCTCD = XP1REC.PG1FCTCD;
      AF0OW02.XSECD = AF0OM001.XSECD;
      AF0OW01.AF0OWYY = AF0OM001.XSNYR;
      /* -----------------------  Y2K IN BEGIN  -------------------------*/
      /*  */
      if (AF0OW01.AF0OWYY > 60)
        AF0OW01.AF0OWCC = 19;
      else
        AF0OW01.AF0OWCC = 20;
      end
      /*  */
      /* ------------------------  Y2K IN END  --------------------------*/
      AF0OW02.XSNYR = AF0OW01.AF0OWSYR;
      AF0OW02.AF0OWAFG = AF0OW01.AF0OWAFG;
      AF0OW02.AF0OWSFG = AF0OW01.AF0OWSFG;
      ;
      /* -----------------------------------*/
       /* Move in need dates*/
      /* -----------------------------------*/
      AF0OW02.AF0OWBEG = AF0OW01.AF0OWBEG;
      AF0OW02.AF0OWEND = AF0OW01.AF0OWEND;
      ;
      TA6REC.TARJCL[TA6INDEX] = AF0OW02.TARJCL; /* Parameters*/
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = AF0OT01.TARJCL[AF0OWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF0OT01.TARTYPE[AF0OWIXT]; /* Type*/
      ;
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (AF0OT01.TARJCL[AF0OWIXT] == "/*EOF") /* End of table*/
      ;
      AF0OW01.AF0OWIXT = 0; /* end of table*/
    else
      AF0OW01.AF0OWIXT = AF0OW01.AF0OWIXT + 1; /* Input table index*/
      ;
    end
    ;
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/
  ;
  while (TA6REC.TA6RTNCD < "0")
    XSTA0P(); /* Call Print Request application*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWPRCSN = "055 "; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    AFWREC.XXXMSGNO = 70; /* Job was submitted*/
    ;
    set AF0OM001 initial; /* Clear map output area*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0O600

// get region id
Function AF0O610()
   /* ------------------------------------------------------------*/
    /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /* ------------------------------------------------------------*/
  ;
  set TA3REC empty;
  ;
  TA3REC.TA3OPTN = "ASSIGN ";
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    ;
    AFWREC.AFWPRCSN = "162"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
    ;
  end
  ;
  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    ;
    AFWREC.AFWPRCSN = "610"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
    ;
  end
  ;
  ;
end // end AF0O610

// Edit Season yr
Function AF0OS01()
   /*  */
  if (AF0OW01.AF0OWYY > 60)
    AF0OW01.AF0OWCC = 19;
  else
    AF0OW01.AF0OWCC = 20;
  end
  ;
  /* *******************************************************/
  /* do not allow user to enter anything beyond SU 2000 **/
  /* *******************************************************/
  ;
  if (AF0OW01.AF0OWSYR < 2000)
    AF0OS01S();
  else
    if (AF0OW01.AF0OWSYR == 2000)
      if (AF0OM001.XSECD == "SP"
       || AF0OM001.XSECD == "SU")
        AF0OS01S();
      else
                     /* (field in error)*/
        XP1REC.XSNYR = +0; /* save to working storage*/
        AF0OW01.AF0OWERR = "Y"; /* indicate error*/
        set AF0OM001.XSNYR cursor, bold; /* Highlight field*/
        set AF0OM001.XSECD cursor, bold; /* Highlight field*/
        AFWREC.AFWPRCSN = "S01 "; /* Process number*/
        converseLib.validationFailed(138); /* indicate error message*/
      end
    else
      if (AF0OW01.AF0OWSYR > 2000)
        XP1REC.XSNYR = +0; /* save to working storage*/
        AF0OW01.AF0OWERR = "Y"; /* indicate error*/
        set AF0OM001.XSNYR cursor, bold; /* Highlight field*/
        set AF0OM001.XSECD cursor, bold; /* Highlight field*/
        AFWREC.AFWPRCSN = "S01 "; /* Process number*/
        converseLib.validationFailed(138); /* indicate error message*/
      end
    end
  end
   /*  */
end // end AF0OS01

// Edit Season yr
Function AF0OS01S()
   /*  */
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0OW01.AF0OWSYR
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF0OW01.AF0OWYY; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
  ;
                     /* (field in error)*/
  XP1REC.XSNYR = +0; /* save to working storage*/
  AF0OW01.AF0OWERR = "Y"; /* indicate error*/
  set AF0OM001.XSNYR cursor, bold; /* Highlight field*/
  AFWREC.AFWPRCSN = "S01 "; /* Process number*/
  converseLib.validationFailed(26); /* indicate error message*/
  ;
end // end AF0OS01S

// Edit Season cd
Function AF0OS02()
  ;
  ;
  if (AF0OW01.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0OW01.XSECD; /* save to working storage*/
    ;
  else
                     /* (field in error)*/
    AF0OW01.AF0OWERR = "Y"; /* Indicate error*/
    AFWREC.AFWPRCSN = "S02 "; /* Process number*/
    converseLib.validationFailed(16); /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/
    ;
  end
  ;
   /* -----------------------------------------*/
   /* Validate season cd/yr combination*/
   /* -----------------------------------------*/
  ;
  AF0OW01.AF0OWXSS = " "; /* Initialize wk area*/
  AF0OW01.AF0OWXYR = +0; /* Initialize wk area*/
  ;
  AF0OW01.AF0OWXSS = XP1REC.XSECD; /* Format wk area*/
  AF0OW01.AF0OWXYR = XP1REC.XSNYR; /* Format wk area*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0OW01.AF0OWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      AF0OW01.XSNBDT = YSNTBL.XSN-SESN-BDT[AFWIDX5];
      AF0OW01.XSNXDT = YSNTBL.XSN-SESN-XDT[AFWIDX5];
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
  ;
            /* (season cd/yr combination invalid)*/
  AF0OW01.AF0OWERR = "Y"; /* Indicate error*/
  AFWREC.AFWPRCSN = "S02 "; /* Process number*/
  converseLib.validationFailed(67); /* indicate error message*/
  ;
end // end AF0OS02

// Edit Forecaster userid
Function AF0OS03()
  ;
  ;
  if (AF0OW01.AF0OWFUI == " ") /* Eq spaces*/
    XP1REC.PG1FCTCD = " "; /* forecaster code*/
    XP1REC.XXXUSER = " "; /* forecaster userid*/
    return; /* Return to calling process*/
  end
  ;
  ;
   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/
  ;
  set PG1REC empty; /* Clear row storage area*/
  ;
  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0OW01.AF0OWFUI; /* Scheduler id*/
  ;
  ;
   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/
  ;
  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
    AF0OW01.AF0OWSPG = "Y"; /* Indicate set map page*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      AF0OW01.AF0OWERR = "Y"; /* Indicate error*/
      AFWREC.AFWPRCSN = "S12 "; /* Process number*/
      converseLib.validationFailed(37); /* Indicate error msg*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/
      ;
      /* ***** EXIT PROCESS HERE ******/
      ;
    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
          AF0OW01.AF0OWSPG = "Y"; /* Indicate set map page*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          XP1REC.XXXUSER = PG1REC.XXXUSER; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/
          ;
          /* ***** EXIT PROCESS HERE ******/
          ;
        end
      end
    end
  end
  ;
   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0OS12"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0OW01.AF0OWFUI; /* MOVE SIGNON to ERROR-DIAG*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Return to previous process*/
  ;
  ;
  ;
  ;
  ;
end // end AF0OS03

//*** RECORD=AF0OW01 ****
// Working storage for FY0N - Report Request Menu
// ***********************
Record AF0OW01 type basicRecord
  10 AF0OMSEL AF0OMSEL [98] ; 
  10 AF0OWIXL AF0OWIXL ; 
  10 AF0OWIXM AF0OWIXM ; 
  10 AF0OWIXT AF0OWIXT ; 
  10 AF0OWWSF AF0OWWSF ; 
  10 AF0OWSWX AF0OWSWX ; 
  10 AF0OWFFL AF0OWFFL ; 
  10 AF0OWUID AF0OWUID ; 
  10 AF0OWIX2 AF0OWIX2 ; 
  10 AF0OWIXP AF0OWIXP ; 
  10 AF0OWIXS AF0OWIXS [10] ; 
  10 AF0OMRMT AF0OMRMT ; 
  10 AF0OMDES AF0OMDES ; 
  10 AF0OWERR AF0OWERR ; 
  10 AF0OWSPG AF0OWSPG ; 
  10 PG1SC4CD PG1SC4CD ; 
  10 PG1FCTCD PG1FCTCD ; 
  10 XSECD XSECD ; 
  10 AF0OWPCT AF0OWPCT ; 
  10 AF0OWSYR AF0OWSYR ; 
    15 AF0OWCC AF0OWCC ; 
    15 AF0OWYY AF0OWYY ; 
  10 AF0OWFUI AF0OWFUI ; 
  10 XSNBDT XSNBDT ; 
  10 XSNXDT XSNXDT ; 
  10 AF0OWSWP AF0OWSWP ; 
  10 AF0OWSWS AF0OWSWS ; 
  10 AF0OWMNO AF0OWMNO ; 
  10 AF0OTTYP AF0OTTYP ; 
  10 AF0OWBEG AF0OWBEG ; 
  10 AF0OWEND AF0OWEND ; 
  10 AF0OWNDE AF0OWNDE ; 
  10 AF0OWNDB AF0OWNDB ; 
  10 AF0OWXSA AF0OWXSA ; 
    15 AF0OWXSS AF0OWXSS ; 
    15 AF0OWXYR AF0OWXYR ; 
  10 AF0OWDTE AF0OWDTE ; 
    15 AF0OWDMM AF0OWDMM ; 
    15 AF0OWDYY AF0OWDYY ; 
  10 AF0OWFBC AF0OWFBC ; 
  10 AF0OWAFG AF0OWAFG ; 
  10 AF0OWSFG AF0OWSFG ; 
end // end AF0OW01

//*** RECORD=AF0OW02 ****
//  ***** Demand vs Forecast Comparison Report *****
// JCL variable storage for FY0N - Report Request Menu
// ***********************
Record AF0OW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 AF0OWOBI AF0OWOBI ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 AF0OWSFG AF0OWSFG ; 
    15 AF0OWAFG AF0OWAFG ; 
    15 AF0OWBEG AF0OWBEG ; 
    15 AF0OWEND AF0OWEND ; 
    15 * char(67) ; 
end // end AF0OW02

// Default printer description
DataItem AF0OMDES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer destination
DataItem AF0OMRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Menu selection field
DataItem AF0OMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL statement type
DataItem AF0OTTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// account report flag
DataItem AF0OWAFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start need date
DataItem AF0OWBEG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working century
DataItem AF0OWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working mm area
DataItem AF0OWDMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season century/year
DataItem AF0OWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working yeararea
DataItem AF0OWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save thru need date
DataItem AF0OWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// error indicator flag
DataItem AF0OWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forecast/book-to-date code
DataItem AF0OWFBC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found flag
DataItem AF0OWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecaster user id
DataItem AF0OWFUI char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem AF0OWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem AF0OWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem AF0OWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for page number
DataItem AF0OWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for starting table
DataItem AF0OWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem AF0OWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted message number
DataItem AF0OWMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save thru need date
DataItem AF0OWNDB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save thru need date
DataItem AF0OWNDE int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// online or batch indicator
DataItem AF0OWOBI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percentage hold field
DataItem AF0OWPCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style report flag
DataItem AF0OWSFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set map page indicator flag
DataItem AF0OWSPG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page full switch
DataItem AF0OWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem AF0OWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem AF0OWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season century/year
DataItem AF0OWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NIKE user identification
DataItem AF0OWUID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working field
DataItem AF0OWWSF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0OWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0OWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season yr
DataItem AF0OWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AF0OWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

