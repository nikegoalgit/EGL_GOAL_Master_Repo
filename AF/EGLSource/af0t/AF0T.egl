package af0t;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XSAFS01;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSSE;
import corpcom4.XSPG201;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.ZZZLDT;
import corpx1.XCTCD;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGATBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XOWCD;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpx2.XWHCD;
import corpy2.YSNTBL;
import pg.common.PG1REC;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SY5SZID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0T ****
// This application is designed to display sales status figures
// in units (qtys) or dollars. The user can specify the Season,
// Year, Gender Age, Category, Silhouette and Style as criteria
// for selection. Except Season code and year, all selection
// fields can be globally or specifically set.
// 
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 04/06/90   JRAMOS   New application.
// 08-11-93   LREIN    Table changes
// 08-30-93   LREIN    Fix bug in color totals routine
// 09-03-93   tdodso   4.1 conversion.
// 03-08-94   LREIN    March table change
// 02-15-95   kj       xsn->ysn
// *********************
Program AF0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0TW01 AF0TW01; // record
  AF0TW02 AF0TW02; // record
  AF0TW03 AF0TW03; // record
  AF2REC AF2REC; // record
  AF5REC AF5REC; // record
  AFBREC AFBREC; // record
  AFCREC AFCREC; // record
  AFDREC AFDREC; // record
  AFIREC AFIREC; // record
  AFJREC AFJREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use AF0TM.AF0TM001,  // forms
      AF0TM.AF0TM005
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/
    ;
    set AF0TW01 empty; /* Initialize working storage*/
    set AF0TW02 empty; /* Initialize working storage*/
    set AF0TW03 empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set AF5REC empty; /* Initialize working storage*/
    set AFBREC empty; /* Initialize working storage*/
    set AFCREC empty; /* Initialize working storage*/
    set AFDREC empty; /* Initialize working storage*/
    set AFIREC empty; /* Initialize working storage*/
    set AFJREC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set PG3REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0TM001 initial; /* Initialize map output area*/
    set AF0TM005 initial; /* Initialize map output area*/
    ;
    ;
                   /* (Define Map Environment)*/
    ;
    AFWREC.AFWAPPL = "AF0T"; /* Initialize appl ID for this appl*/
    ;
    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process name*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    ;
    ;
                      /* (Set TSQ Record Size)*/
    ;
    AFWREC.AFWTSL = +344; /* Current TSQ size*/
    ;
    ;
                      /* (Set Map Item Values)*/
    ;
    AF0TM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/
    AF0TW01.AF0TWDSO = "U"; /* Set display option as units*/
    AF0TM001.AF0TMDSO = "UNITS  "; /* Display option*/
    XP1REC.XDVCD = "01"; /* Initialize div cd*/
    XP1REC.XDVABRV = "NIKE D"; /* Initialize div abrv*/
    ;
    ;
                      /* (Process Passed Items)*/
    ;
    AF0TM001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    AF0TM001.XSNYR = XP1REC.XSNYR; /* Season yr to map*/
     /* MOVE XP1REC.XPRCD TO AF0TM001.XPRCD ; Product type cd to map*/
     /* MOVE XP1REC.XGACD TO AF0TM001.XGACD ; Gender age cd to map*/
     /* MOVE XP1REC.XPLCD TO AF0TM001.XPLCD ; Product Line cd to map*/
     /* MOVE XP1REC.XPCCD TO AF0TM001.XPCCD    ; Category cd to map*/
     /* MOVE XP1REC.XSUCD TO AF0TM001.XSUCD ; Silhouette cd to map*/
     /* MOVE XP1REC.XDVCD TO AF0TM001.XDVCD    ; Division cd to map*/
     /* MOVE XP1REC.XDVABRV TO AF0TM001.XDVABRV;Division abrv to map*/
    AF0TM001.SY1STNBR = XP1REC.SY1STNBR; /* Style cd to map*/
    ;
    if (XP1REC.SY1STNBR != " ")
      AF0TM001.SY1SSTNM = XP1REC.SY1SSTNM; /* Short Style nm to map*/
    end
    ;
    XP1REC.XGPCD = "03"; /* Apparel GPC*/
    AF0TM001.XOWCD = "00"; /* owner group*/
    ;
    ;
                      /* (Converse Main Process)*/
    ;
    goto AF0T001; /* Main Process*/
    ;
    ;
    AF0T001: AF0T001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Apparel Fcst/Buy Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0T001; /* Converse Apparel Fcst/Buy Prototype*/
    ;
    ;
  end // end main
end // end AF0T

// Choose which map to display
Function AF0T001()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed. If an invalid map request is detected*/
   /* error is indicated and control is passed to the Master Menu*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.AFWMAP == "1") /* Map 1 (AF0TM001) request*/
    AF0T100(); /* Process Map 1*/
  else
    if (AFWREC.AFWMAP == "2") /* Map 2 (AF0TM005) request*/
      AF0T200(); /* Process Map 2*/
    else
                  /* (Map Number Invalid)*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "AF0T001 "; /* Process name*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = AFWREC.AFWMAP; /* Map name*/
      TAEREC.TAEDESC1 = "MAP NUMBER IS INVALID";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error rtn*/
      ;
    end
  end
  ;
  ;
end // end AF0T001

// Process Map 1 (AF0TM001)
Function AF0T100()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF0T110(); /* Obtain the data to display*/
  ;
  AF0T120(); /* Format and display the map*/
  ;
  AF0T130(); /* Check attention identifier*/
  ;
  AF0T140(); /* Reset fields to normal intensity*/
  ;
  AF0T150(); /* Verify the entered data*/
  ;
  AF0T160(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0T100

// Obtain data to display
Function AF0T110()
  ;
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Check for User Response and process appropriate data base.*/
   /* If no errors found from data retrieve, indicate that the*/
     /* request for data was completed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || AFWREC.AFWSWR != "Y")             /* or Data was not requested*/
    return; /* Return to previous process*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Purge TSQ data set.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0T122(); /* Purge any temporary storage*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
             /* Obtain Data from DACAST.VAFSTY01*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and process all colors for the style.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0T111(); /* Select set DACAST.VAFSTY01 data*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    AF0T112(); /* Fetch DACAST.VAFSTY01 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
      ;
      AF0T113(); /* Select set DACAST.VAFCLR01 data*/
      ;
      if (converseVar.validationMsgNum == 0) /* No errors found*/
        ;
        set AF0TW02 empty; /* Clear map work area*/
        set AF0TW03 empty; /* Clear grand totals area*/
        ;
        AFWREC.AFWSWC = "N"; /* Reset EOF indicator*/
        AFWREC.AFWIXM = 1; /* Set store pointer*/
        AF0TW01.AF0TWSIX = 0; /* Initialize pointer save area*/
        ;
                 /* (Process/Store All Color Rows Retrieved)*/
        ;
        while (AFWREC.AFWSWC == "N") /* Until all rows processed*/
          ;
          AF0T114(); /* Process color data calc*/
          ;
          if (AFWREC.AFWIXM > 2) /* Page is full*/
            AF0T126(); /* Add page to TSQ*/
          end
          ;
          if (converseVar.validationMsgNum != 0) /* Errors found*/
            AFWREC.AFWSWC = "Y"; /* Force loop end*/
          end
          ;
        end
        ;
      end
      ;
      ;
      if (converseVar.validationMsgNum == 0 /* No errors found*/
       && AF0TW01.AF0TWSIX > 1)             /* Page was formatted*/
        ;
        if (AF0TW01.AF0TWSIX == 2) /* Second line group*/
          AF0TW02.AF0TWLID[2] = "*"; /* No data for line grp*/
        end
        ;
        AF0T126(); /* Add page to temporary storage*/
        ;
      end
      ;
      ;
      if (converseVar.validationMsgNum == 0) /* No errors found*/
        AF0T115(); /* Close color cursor*/
      end
      ;
      ;
      AF0T116(); /* Calculate grand totals/pcts*/
      ;
      AF0T117(); /* Close style cursor*/
      ;
    end
    ;
  end
  ;
  ;
  AFWREC.AFWTSP = 1; /* Set TSQ page to 1*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check Obtain Data Status.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ;
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
    ;
  end
  ;
  ;
end // end AF0T110

// Select set DACAST.VAFSTY01
Function AF0T111()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AF2REC empty; /* Clear record work area*/
  ;
          /* (Style No.)*/
  AF2REC.SY1STNBR = XP1REC.SY1STNBR;
  ;
          /* (owner group)*/
  AF2REC.XOWCD = XP1REC.XOWCD;
  ;
       /* (Forecaster code)*/
  AF2REC.PG1FCTCD = "**";
  ;
            /* (Product Type)*/
  if (XP1REC.XPRCD != "  ")
    AF2REC.XPRCD = XP1REC.XPRCD;
  else
    AF2REC.XPRCD = "**";
  end
  ;
            /* (Gender Age)*/
  if (XP1REC.XGACD != "  ")
    AF2REC.XGACD = XP1REC.XGACD;
  else
    AF2REC.XGACD = "**";
  end
  ;
            /* (Product Line)*/
  if (XP1REC.XPLCD != "  ")
    AF2REC.XPLCD = XP1REC.XPLCD;
  else
    AF2REC.XPLCD = "**";
  end
  ;
          /* (Product Category)*/
  if (XP1REC.XPCCD != " ")
    AF2REC.XPCCD = XP1REC.XPCCD;
  else
    AF2REC.XPCCD = "**";
  end
  ;
          /* (Silhouette)*/
  if (XP1REC.XSUCD != " ")
    AF2REC.XSUCD = XP1REC.XSUCD;
  else
    AF2REC.XSUCD = "**";
  end
  ;
          /* (Division)*/
  if (XP1REC.XDVCD != " ")
    AF2REC.XDVCD = XP1REC.XDVCD;
  else
    AF2REC.XDVCD = "**";
  end
  ;
         /* (Season code)*/
  AF2REC.XSECD = XP1REC.XSECD;
  ;
         /* (Season year)*/
  AF2REC.XSNYR = XP1REC.XSNYR;
  ;
  ;
  ;
   /* *==========================**/
   /* *  Access DACAST.VAFSTY01  **/
   /* *==========================**/
  ;
  try
    call "IO3510" ("S3", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "111 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF2REC.AF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0T111

// Fetch DACAST.VAFSTY01 row
Function AF0T112()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VAFSTY01 **/
   /* *=========================**/
  ;
  try
    call "IO3510" ("N3", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      AF0TS02(); /* Obtain size scale/desc*/
      return; /* Return to calling process*/
    else
      return; /* Return to calling process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "112 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0T112

// select set DACAST.VAFCLR01
Function AF0T113()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AF5REC empty; /* Clear record work area*/
  ;
  ;
  AF5REC.SY1STNBR = AF2REC.SY1STNBR; /* Style*/
  AF5REC.XOWCD = AF2REC.XOWCD; /* xow cd*/
  AF5REC.XDMCD = AF2REC.XDMCD; /* Dimension*/
  AF5REC.XDVCD = AF2REC.XDVCD; /* Division*/
  AF5REC.XPRCD = AF2REC.XPRCD; /* Product type*/
  AF5REC.XPLCD = AF2REC.XPLCD; /* Product line*/
  AF5REC.XSECD = AF2REC.XSECD; /* Season cd*/
  AF5REC.XSNYR = AF2REC.XSNYR; /* Season yr*/
  ;
  ;
   /* *==========================**/
   /* *  Access DABUY.VAFCLR01   **/
   /* *==========================**/
  ;
  try
    call "IO3520" ("SS", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "113 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF5REC.AF5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0T113

// Process/store color data
Function AF0T114()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal array display line for*/
      /* TSQ storage.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VAFCLR01 **/
   /* *=========================**/
  ;
  try
    call "IO3520" ("SN", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      ;
      AF0TS03(); /* Store/calculate color data*/
      ;
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      AFWREC.AFWSWC = "Y"; /* Indicate end of file*/
      AF0TW01.AF0TWSIX = AFWREC.AFWIXM; /* Save index*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "114 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0T114

// Close DACAST.VAFCLR01 cursor
Function AF0T115()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VAFCLR01 **/
   /* *=========================**/
  ;
  try
    call "IO3520" ("CS", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0T115

// Calculate Grand Tots/Pcts
Function AF0T116()
  ;
   /* ------------------------------------------------------------*/
   /* Calculate Overall Style Totals.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 10) /* Process all array elems*/
                     /* (Line Totals)*/
    AF0TW03.AF0TWTOA = AF0TW03.AF0TWTOA + AF0TW03.AF0TWSAT[AFWIDX1];
    AF0TW03.AF0TWTOB = AF0TW03.AF0TWTOB + AF0TW03.AF0TWSBT[AFWIDX1];
    AF0TW03.AF0TWTOS = AF0TW03.AF0TWTOS + AF0TW03.AF0TWSST[AFWIDX1];
    AF0TW03.AF0TWTOC = AF0TW03.AF0TWTOC + AF0TW03.AF0TWSCT[AFWIDX1];
    AF0TW03.AF0TWTOL = AF0TW03.AF0TWTOL + AF0TW03.AF0TWSLT[AFWIDX1];
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate Overall Bookings Percents*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 10) /* Process all array elems*/
    ;
    if (AF0TW03.AF0TWTOB > 0) /* Grand total > 0*/
      AF0TW01.AF0TWPC1 = mathLib.round(AF0TW03.AF0TWSBT[AFWIDX1] / AF0TW03.AF0TWTOB, -mathLib.decimals(AF0TW01.AF0TWPC1));
      AF0TW01.AF0TWPCT = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW01.AF0TWPCT));
      AF0TW03.AF0TWSPT[AFWIDX1] = AF0TW01.AF0TWPCT;
    end
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0T116

// Close DACAST.VAFSTY01 cursor
Function AF0T117()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VAFSTY01 **/
   /* *=========================**/
  ;
  try
    call "IO3510" ("C3", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "116 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0T117

// Format and display the map
Function AF0T120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0TW01.AF0TWPND != "Y") /* No pop-up windows active*/
    ;
    if (AFWREC.AFWFIRST != " ") /* Not the first time*/
      ;
      if (converseVar.validationMsgNum == 0) /* No error found*/
        AF0T121(); /* Format the data on the map*/
      else
        AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
      end
      ;
    else
      ;
      AF0TS01(); /* Clear map detail area*/
      set AF0TM001.XSECD cursor; /* Set cursor position*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0TM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0TM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0TM001 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF0TM001 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF0TM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0TM001.CAITEM; /* Application data*/
  ;
  ;
end // end AF0T120

// Format data into map
Function AF0T121()
   /* ------------------------------------------------------------*/
   /* Clear Map for New Data to Display.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0TM001 initial; /* Clear map for display*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format Map Header Information from XP1REC fields.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TM001.XSECD = XP1REC.XSECD; /* Season cd*/
  XP1REC.XP1XSNYR = XP1REC.XSNYR; /* Redefine Season yr*/
  AF0TM001.XSNYR = XP1REC.XP1XSNYY; /* Season yr*/
  AF0TM001.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  AF0TM001.SY1SSTNM = XP1REC.SY1SSTNM; /* Short Style name*/
  AF0TM001.XOWCD = XP1REC.XOWCD; /* Owner Group*/
  AF0TM001.XOWABRV = XP1REC.XOWABRV; /* Owner Group Abrv*/
  ;
  if (AF0TW01.AF0TWDSO == "U") /* Display option in units*/
    AF0TM001.AF0TMDSO = "UNITS  ";
  else
    AF0TM001.AF0TMDSO = "DOLLARS";
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if there are pages to display. If none, set message*/
     /* and redisplay map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set AF0TM001.XSECD cursor; /* Set cursor position*/
  ;
  if (AFWREC.TA5TSQIX == 0) /* No data to display*/
    ;
    AFWREC.AFWPRCSN = "121 "; /* Process number*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Display the Size Descriptions.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 8) /* Get 1st 8 sizes*/
    ;
    AF0TM001.AF0TMSZD[AFWIDX1] = PG3REC.SY4IDDSC[AFWIDX1];
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0T127(); /* Obtain TSQ page*/
  ;
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  while (AFWREC.AFWIXM <= 2) /* Until end of map line groups*/
    ;
    if (AF0TW02.AF0TWLID[AFWIXM] != "*") /* Not Unused line*/
      ;
      AF0TM001.AF0TMCLR[AFWIXM] = AF0TW02.AF0TWCLR[AFWIXM]; /* Clr id*/
      AF0TM001.AF0TMCLD[AFWIXM] = AF0TW02.AF0TWCLD[AFWIXM];
                                   /* Clr dsc*/
      ;
      if (AFWREC.AFWIXM == 1) /* First line*/
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 8) /* Get 1st 8 sizes*/
          AF0TM001.AF0TMAF1[AFWIDX1] = AF0TW02.AF0TWAF1[AFWIDX1];
          AF0TM001.AF0TMBF1[AFWIDX1] = AF0TW02.AF0TWBF1[AFWIDX1];
          AF0TM001.AF0TMSF1[AFWIDX1] = AF0TW02.AF0TWSF1[AFWIDX1];
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
        end
        ;
        AF0TM001.AF0TMAT[1] = AF0TW02.AF0TWAT[1]; /* Line tot*/
        AF0TM001.AF0TMBT[1] = AF0TW02.AF0TWBT[1];
        AF0TM001.AF0TMST[1] = AF0TW02.AF0TWST[1];
        ;
        if (AF0TW03.AF0TWTOA > 0) /* Grand totals > 0*/
          AF0TW01.AF0TWPC1 = mathLib.round(AF0TW02.AF0TWAT[1] / AF0TW03.AF0TWTOA, -mathLib.decimals(AF0TW01.AF0TWPC1));
          AF0TW02.AF0TWAP[1] = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW02.AF0TWAP[1]));
          AF0TM001.AF0TMAP[1] = AF0TW02.AF0TWAP[1]; /* Line pcent*/
        end
        ;
        if (AF0TW03.AF0TWTOB > 0) /* Grand totals > 0*/
          AF0TW01.AF0TWPC1 = mathLib.round(AF0TW02.AF0TWBT[1] / AF0TW03.AF0TWTOB, -mathLib.decimals(AF0TW01.AF0TWPC1));
          AF0TW02.AF0TWBP[1] = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW02.AF0TWBP[1]));
          AF0TM001.AF0TMBP[1] = AF0TW02.AF0TWBP[1]; /* Line pcent*/
        end
        ;
      else
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 8) /* Get 1st 8 sizes*/
          AF0TM001.AF0TMAF2[AFWIDX1] = AF0TW02.AF0TWAF2[AFWIDX1];
          AF0TM001.AF0TMBF2[AFWIDX1] = AF0TW02.AF0TWBF2[AFWIDX1];
          AF0TM001.AF0TMSF2[AFWIDX1] = AF0TW02.AF0TWSF2[AFWIDX1];
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
        end
        ;
        AF0TM001.AF0TMAT[2] = AF0TW02.AF0TWAT[2]; /* Line tot*/
        AF0TM001.AF0TMBT[2] = AF0TW02.AF0TWBT[2];
        AF0TM001.AF0TMST[2] = AF0TW02.AF0TWST[2];
        ;
        if (AF0TW03.AF0TWTOA > 0) /* Grand totals > 0*/
          AF0TW01.AF0TWPC1 = mathLib.round(AF0TW02.AF0TWAT[2] / AF0TW03.AF0TWTOA, -mathLib.decimals(AF0TW01.AF0TWPC1));
          AF0TW02.AF0TWAP[2] = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW02.AF0TWAP[2]));
          AF0TM001.AF0TMAP[2] = AF0TW02.AF0TWAP[2]; /* Line pcent*/
        end
        ;
        if (AF0TW03.AF0TWTOB > 0) /* Grand totals > 0*/
          AF0TW01.AF0TWPC1 = mathLib.round(AF0TW02.AF0TWBT[2] / AF0TW03.AF0TWTOB, -mathLib.decimals(AF0TW01.AF0TWPC1));
          AF0TW02.AF0TWBP[2] = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW02.AF0TWBP[2]));
          AF0TM001.AF0TMBP[2] = AF0TW02.AF0TWBP[2]; /* Line pcent*/
        end
        ;
      end
      ;
    else
      ;
      set AF0TM001.AF0TMCLR[AFWIXM] skip, invisible; /* Clr id*/
      set AF0TM001.AF0TMCLD[AFWIXM] skip, invisible; /* Clr dsc*/
      set AF0TM001.AF0TMCLA[AFWIXM] skip, invisible; /* Clr shdg*/
      set AF0TM001.AF0TMCLB[AFWIXM] skip, invisible; /* Clr shdg*/
      set AF0TM001.AF0TMCLS[AFWIXM] skip, invisible; /* Clr shdg*/
      ;
      if (AFWREC.AFWIXM == 1) /* First line*/
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 8) /* 1st 8 sizes*/
          set AF0TM001.AF0TMAF1[AFWIDX1] skip, invisible;
          set AF0TM001.AF0TMBF1[AFWIDX1] skip, invisible;
          set AF0TM001.AF0TMSF1[AFWIDX1] skip, invisible;
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
        end
        ;
        set AF0TM001.AF0TMAT[1] skip, invisible; /* Line tot*/
        set AF0TM001.AF0TMBT[1] skip, invisible;
        set AF0TM001.AF0TMST[1] skip, invisible;
        set AF0TM001.AF0TMAP[1] skip, invisible; /* Line pcent*/
        set AF0TM001.AF0TMBP[1] skip, invisible;
        ;
      else
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 8) /* 1st 8 sizes*/
          set AF0TM001.AF0TMAF2[AFWIDX1] skip, invisible;
          set AF0TM001.AF0TMBF2[AFWIDX1] skip, invisible;
          set AF0TM001.AF0TMSF2[AFWIDX1] skip, invisible;
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
        end
        ;
        set AF0TM001.AF0TMAT[2] skip, invisible; /* Line tot*/
        set AF0TM001.AF0TMBT[2] skip, invisible;
        set AF0TM001.AF0TMST[2] skip, invisible;
        set AF0TM001.AF0TMAP[2] skip, invisible; /* Line pcent*/
        set AF0TM001.AF0TMBP[2] skip, invisible;
        ;
      end
      ;
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format style totals/pcents.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 8) /* 1st 8 sizes*/
    ;
    AF0TM001.AF0TMSAT[AFWIDX1] = AF0TW03.AF0TWSAT[AFWIDX1];
    AF0TM001.AF0TMSBT[AFWIDX1] = AF0TW03.AF0TWSBT[AFWIDX1];
    AF0TM001.AF0TMSST[AFWIDX1] = AF0TW03.AF0TWSST[AFWIDX1];
    AF0TM001.AF0TMSCT[AFWIDX1] = AF0TW03.AF0TWSCT[AFWIDX1];
    AF0TM001.AF0TMSLT[AFWIDX1] = AF0TW03.AF0TWSLT[AFWIDX1];
    AF0TM001.AF0TMSPT[AFWIDX1] = AF0TW03.AF0TWSPT[AFWIDX1];
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  AF0TM001.AF0TMTOA = AF0TW03.AF0TWTOA;
  AF0TM001.AF0TMTOB = AF0TW03.AF0TWTOB;
  AF0TM001.AF0TMTOS = AF0TW03.AF0TWTOS;
  AF0TM001.AF0TMTOC = AF0TW03.AF0TWTOC;
  AF0TM001.AF0TMTOL = AF0TW03.AF0TWTOL;
  ;
               /* (Calculate Total Pcents)*/
  if (AF0TW03.AF0TWTOA > 0) /* Grand totals > 0*/
    AF0TW01.AF0TWPC1 = mathLib.round(AF0TW03.AF0TWTA1 / AF0TW03.AF0TWTOA, -mathLib.decimals(AF0TW01.AF0TWPC1));
    AF0TW03.AF0TWTAP = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW03.AF0TWTAP));
    AF0TM001.AF0TMTAP = AF0TW03.AF0TWTAP;
  end
  ;
  if (AF0TW03.AF0TWTOB > 0) /* Grand totals > 0*/
    AF0TW01.AF0TWPC1 = mathLib.round(AF0TW03.AF0TWTB1 / AF0TW03.AF0TWTOB, -mathLib.decimals(AF0TW01.AF0TWPC1));
    AF0TW03.AF0TWTBP = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW03.AF0TWTBP));
    AF0TM001.AF0TMTBP = AF0TW03.AF0TWTBP;
  end
  ;
  ;
  ;
end // end AF0T121

// Delete TSQ page
Function AF0T122()
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA5REC.TA5APPID = AFWREC.AFWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  ;
  ;
  call "TA0050" (AF0TW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                        /* ; subroutine*/
  ;
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    AFWREC.AFWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  ;
  ;
  AFWREC.AFWTSP = 0; /* Reset current page number*/
  AFWREC.TA5TSQIX = 0; /* Reset highest page number*/
  ;
  ;
end // end AF0T122

// Write to TSQ data set
Function AF0T126()
  ;
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF0TW02.AF0TWLEN = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = AFWREC.AFWAPPL; /* Application id*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  ;
  ;
  call "TA0050" (AF0TW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                        /* ;subroutine*/
  ;
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "126 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
  AFWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
  ;
  AFWREC.AFWIXM = 1; /* Reset display line number*/
  ;
  set AF0TW02 empty; /* Clear temporary storage record*/
  ;
  ;
  ;
end // end AF0T126

// Read TSQ data set
Function AF0T127()
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0TW02.AF0TWLEN = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = AFWREC.AFWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = AFWREC.AFWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  ;
  call "TA0050" (AF0TW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage subroutine*/
  ;
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "127 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AF0T127

// Check attention identifier
Function AF0T130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0TM001 initial; /* Clear the map fields*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AF0TM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0TM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0TM001.CAITEM; /* Application data*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0TM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF0TM001.CAITEM > " ") /* Application data was entered*/
    set AF0TM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0TM001"; /* Appl find code*/
    end
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AFWREC.AFWFIRST == " " /* First time through*/
   && converseVar.eventKey not enter) /* and Enter was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
end // end AF0T130

// Reset hilght flds; disp pop-up
Function AF0T140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0TM001.XSECD normal; /* Sesn cd*/
  set AF0TM001.XSNYR normal; /* Sesn yr*/
   /* SET AF0TM001.XPRCD NORMAL       ; Product Type cd*/
   /* SET AF0TM001.XGACD NORMAL       ; Gender Age cd*/
   /* SET AF0TM001.XPLCD NORMAL       ; Product Line cd*/
   /* SET AF0TM001.XPCCD NORMAL       ; Category cd*/
   /* SET AF0TM001.XSUCD NORMAL       ; Silhouette cd*/
   /* SET AF0TM001.XDVCD NORMAL       ; Division cd*/
  set AF0TM001.SY1STNBR normal; /* Style no.*/
  ;
  AF0TM001.XXXPRCNM = "AF0T    "; /* Reset process name*/
  ;
  ;
  set AF0TM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0TM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/
  ;
  if (AF0TM001.XSECD == "?"
   || AF0TM001.XOWCD == "?")
    ;
    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    ;
    AF0TW01.AF0TWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season cd*/
   /* *============================**/
  ;
  if (AF0TM001.XSECD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XSECD = AF0TM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSE(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0TM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XOWCD   * Owner group*/
   /* *============================**/
  ;
  if (AF0TM001.XOWCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XOWCD = AF0TM001.XOWCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XP1REC.XWHCD = "51";
    ;
    XSAFSOW(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0TM001.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
  ;
  ;
   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/
  ;
  ;
  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0TW01.AF0TWPND = "Y"; /* Activate pop-up window ind*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0T140

// Verify Entered Data
Function AF0T150()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or Scroll forward request*/
    ;
    AF0T151(); /* Verify scroll request*/
    ;
    if (converseVar.validationMsgNum != 0) /* Errors found*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  else
    ;
    AF0T152(); /* Verify selection criteria*/
    ;
  end
  ;
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors found*/
    ;
    AF0TS01(); /* Clear map detail area*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  else
    ;
    if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/
      exit stack; /* Go back to start of applic*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0T150

// Verify Scroll Rqeuest
Function AF0T151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && AFWREC.AFWTSP < 2)          /* and no previous pages*/
    ;
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AFWREC.AFWTSP >= AFWREC.TA5TSQIX) /* and no more pages*/
    ;
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
  ;
end // end AF0T151

// Verify Selection Criteria
Function AF0T152()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *****                                                  ******/
   /* *************************************************************/
  ;
  AFWREC.AFWSWR = "N"; /* initialize switch to 'OFF'*/
  AFWREC.AFWFIRST = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* initialize msg hold area*/
  ;
  AF0TW01.AF0TWYR = XP1REC.XSNYR - 1900; /* Get year*/
  ;
  ;
   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/
  ;
  ;
  if (AF0TW01.AF0TWSTY != AF0TM001.SY1STNBR /* Style no.*/
   /* OR AF0TW01.AF0TWSIL NE AF0TM001.XSUCD; DIV cd*/
   /* OR AF0TW01.AF0TWDIV NE AF0TM001.XDVCD; SILH cd*/
   /* OR AF0TW01.AF0TWCAT NE AF0TM001.XPCCD; CAT cd*/
   /* OR AF0TW01.AF0TWLIN NE AF0TM001.XPLCD; PR LIN cd*/
   /* OR AF0TW01.AF0TWGA NE AF0TM001.XGACD ; G/A cd*/
   /* OR AF0TW01.AF0TWTYP NE AF0TM001.XPRCD; PR TYP cd*/
   || AF0TW01.AF0TWYR != AF0TM001.XSNYR     /* Season yr*/
   || AF0TM001.XSNYR == 0                   /* Map fld zeroed out*/
   || XP1REC.XSECD != AF0TM001.XSECD        /* Season cd*/
   || AF0TM001.XSECD == " "                 /* Map fld spaced out*/
   || AF0TM001.XOWCD != AF0TW01.AF0TWXOW)   /* owner group*/
    ;
    AFWREC.AFWSWR = "Y"; /* New criteria entered*/
    ;
    AF0TS32(); /* edit owner group*/
    AF0TS20(); /* Edit style no.*/
    /* COMMENTED OUT -- USE WHEN ADDING FIELDS BACK*/
    /* AF0TS29                         ; Edit division cd*/
    /* AF0TS24                         ; Edit silhouette cd*/
    /* AF0TS25                         ; Edit category cd*/
    /* AF0TS30                         ; Edit product line cd*/
    /* AF0TS26                         ; Edit gender/age cd*/
    /* AF0TS31                         ; Edit product type cd*/
    AF0TS27(); /* Edit season yr*/
    AF0TS28(); /* Edit season cd*/
    ;
  end
  ;
  ;
  ;
   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/
  ;
  if (XP1REC.XP1MNO != 0) /* Validation error present*/
    ;
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/
    ;
    AF0TS01(); /* Clear map detail area*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
end // end AF0T152

// Process Valid Request
Function AF0T160()
  ;
   /* ------------------------------------------------------------*/
   /* Scroll Request.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    AFWREC.AFWTSP = AFWREC.AFWTSP - 1; /* Decrement page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    AFWREC.AFWTSP = AFWREC.AFWTSP + 1; /* Increment page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Shift Screen Right request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Display AF0TM005*/
    ;
    AFWREC.AFWMAP = "2"; /* Indicate Map 2 to process*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Display Option change request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15) /* Change Display Option*/
    ;
    AFWREC.AFWSWR = "Y"; /* Reselect data*/
    ;
    if (AF0TW01.AF0TWDSO == "U") /* Display Option in units*/
      AF0TW01.AF0TWDSO = "D"; /* then display data in dollars*/
    else
      AF0TW01.AF0TWDSO = "U"; /* else display data in units(qtys)*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0T160

// Process Map 2 (AF0TM005)
Function AF0T200()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display (N/A for this process).*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0T220(); /* Format and display the map*/
  ;
  AF0T230(); /* Check attention identifier*/
  ;
  AF0T240(); /* Reset fields to normal intensity*/
  ;
  AF0T250(); /* Verify the entered data*/
  ;
  AF0T260(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0T200

// Format and display the map
Function AF0T220()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.AFWFIRST != " ") /* Not the first time*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error found*/
      AF0T221(); /* Format the data on the map*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0TM005.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0TM005.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0TM005.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0TM005 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF0TM005 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF0TM005.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0TM005.CAITEM; /* Application data*/
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Reset First Time Through indicator*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWFIRST = "N"; /* Fst time indicator to 'N'o*/
  ;
  ;
  ;
end // end AF0T220

// Format data into map
Function AF0T221()
   /* ------------------------------------------------------------*/
   /* Clear Map for New Data to Display.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0TM005 initial; /* Clear map for display*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format Map Header Information from XP1REC fields.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TM005.XSECD = XP1REC.XSECD; /* Season cd*/
  XP1REC.XP1XSNYR = XP1REC.XSNYR; /* Redefine Season yr*/
  AF0TM005.XSNYR = XP1REC.XP1XSNYY; /* Season yr*/
  AF0TM005.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  AF0TM005.SY1SSTNM = XP1REC.SY1SSTNM; /* Style name*/
  AF0TM005.XOWCD = XP1REC.XOWCD; /* owner group*/
  ;
  if (AF0TW01.AF0TWDSO == "U") /* Display in units*/
    AF0TM005.AF0TMDSO = "UNITS  ";
  else
    AF0TM005.AF0TMDSO = "DOLLARS";
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Protect Map Header fields.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0TM005.XSECD skip; /* Season cd*/
  set AF0TM005.XSNYR skip; /* Season yr*/
   /* SET AF0TM005.XPRCD AUTOSKIP     ; Product typ cd*/
   /* SET AF0TM005.XGACD AUTOSKIP     ; G/A cd*/
   /* SET AF0TM005.XPLCD AUTOSKIP     ; Product lin cd*/
   /* SET AF0TM005.XPCCD AUTOSKIP     ; Category cd*/
   /* SET AF0TM005.XSUCD AUTOSKIP     ; Silhouette cd*/
   /* SET AF0TM005.XDVCD AUTOSKIP     ; Division cd*/
  set AF0TM005.SY1STNBR skip; /* Style no.*/
  set AF0TM005.XOWCD skip; /* Style no.*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if there are pages to display. If none, set message*/
     /* and redisplay map.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0TM005.CATOAP cursor; /* Set cursor position*/
  ;
  if (AFWREC.TA5TSQIX == 0) /* No data to display*/
    ;
    AFWREC.AFWPRCSN = "221 "; /* Process number*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Display the Size Descriptions (9-10)*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0TM005.AF0TMSZD[1] = PG3REC.SY4IDDSC[9]; /* 9th size*/
  AF0TM005.AF0TMSZD[2] = PG3REC.SY4IDDSC[10]; /* 10th size*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0T127(); /* Obtain TSQ page*/
  ;
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  while (AFWREC.AFWIXM <= 2) /* Until end of map line groups*/
    ;
    if (AF0TW02.AF0TWLID[AFWIXM] != "*") /* Not Unused line*/
      ;
      if (AFWREC.AFWIXM == 1) /* First line group*/
        ;
        if (AF0TW03.AF0TWTOA > 0) /* Grand totals > 0*/
          AF0TW01.AF0TWPC1 = mathLib.round(AF0TW02.AF0TWAT[1] / AF0TW03.AF0TWTOA, -mathLib.decimals(AF0TW01.AF0TWPC1));
          AF0TW02.AF0TWAP[1] = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW02.AF0TWAP[1]));
          AF0TM001.AF0TMAP[1] = AF0TW02.AF0TWAP[1]; /* Line pcent*/
        end
        ;
        if (AF0TW03.AF0TWTOB > 0) /* Grand totals > 0*/
          AF0TW01.AF0TWPC1 = mathLib.round(AF0TW02.AF0TWBT[1] / AF0TW03.AF0TWTOB, -mathLib.decimals(AF0TW01.AF0TWPC1));
          AF0TW02.AF0TWBP[1] = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW02.AF0TWBP[1]));
          AF0TM001.AF0TMBP[1] = AF0TW02.AF0TWBP[1]; /* Line pcent*/
        end
        ;
      else
        ;
        if (AF0TW03.AF0TWTOA > 0) /* Grand totals > 0*/
          AF0TW01.AF0TWPC1 = mathLib.round(AF0TW02.AF0TWAT[2] / AF0TW03.AF0TWTOA, -mathLib.decimals(AF0TW01.AF0TWPC1));
          AF0TW02.AF0TWAP[2] = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW02.AF0TWAP[2]));
          AF0TM001.AF0TMAP[2] = AF0TW02.AF0TWAP[2]; /* Line pcent*/
        end
        ;
        if (AF0TW03.AF0TWTOB > 0) /* Grand totals > 0*/
          AF0TW01.AF0TWPC1 = mathLib.round(AF0TW02.AF0TWBT[2] / AF0TW03.AF0TWTOB, -mathLib.decimals(AF0TW01.AF0TWPC1));
          AF0TW02.AF0TWBP[2] = mathLib.round(AF0TW01.AF0TWPC1 * 100, -mathLib.decimals(AF0TW02.AF0TWBP[2]));
          AF0TM001.AF0TMBP[2] = AF0TW02.AF0TWBP[2]; /* Line pcent*/
        end
        ;
      end
      ;
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  while (AFWREC.AFWIXM <= 2) /* Until end of map line groups*/
    ;
    if (AF0TW02.AF0TWLID[AFWIXM] != "*") /* Not Unused line*/
      ;
      AF0TM005.AF0TMCLR[AFWIXM] = AF0TW02.AF0TWCLR[AFWIXM]; /* Clr id*/
      AF0TM005.AF0TMCLD[AFWIXM] = AF0TW02.AF0TWCLD[AFWIXM];
                                   /* Clr dsc*/
      ;
      if (AFWREC.AFWIXM == 1) /* First line*/
        AF0TM005.AF0TMAF1[1] = AF0TW02.AF0TWAF1[9]; /* Line dtl*/
        AF0TM005.AF0TMBF1[1] = AF0TW02.AF0TWBF1[9];
        AF0TM005.AF0TMSF1[1] = AF0TW02.AF0TWSF1[9];
        AF0TM005.AF0TMAF1[2] = AF0TW02.AF0TWAF1[10];
        AF0TM005.AF0TMBF1[2] = AF0TW02.AF0TWBF1[10];
        AF0TM005.AF0TMSF1[2] = AF0TW02.AF0TWSF1[10];
        AF0TM005.AF0TMAT[1] = AF0TW02.AF0TWAT[1]; /* Line tot*/
        AF0TM005.AF0TMBT[1] = AF0TW02.AF0TWBT[1];
        AF0TM005.AF0TMST[1] = AF0TW02.AF0TWST[1];
        AF0TM005.AF0TMAP[1] = AF0TW02.AF0TWAP[1]; /* Line pcent*/
        AF0TM005.AF0TMBP[1] = AF0TW02.AF0TWBP[1];
        AF0TM005.AF0TMFCS[1] = AF0TW02.AF0TWFCS[1]; /* Forecasted*/
        AF0TM005.AF0TMSBK[1] = AF0TW02.AF0TWSBK[1]; /* Spec Booked*/
        AF0TM005.AF0TMRCV[1] = AF0TW02.AF0TWRCV[1]; /* Rcvd To-date*/
        AF0TM005.AF0TMINV[1] = AF0TW02.AF0TWINV[1]; /* Curr invty*/
      else
        AF0TM005.AF0TMAF1[1] = AF0TW02.AF0TWAF2[9]; /* Line dtl*/
        AF0TM005.AF0TMBF1[1] = AF0TW02.AF0TWBF2[9];
        AF0TM005.AF0TMSF1[1] = AF0TW02.AF0TWSF2[9];
        AF0TM005.AF0TMAF1[2] = AF0TW02.AF0TWAF2[10];
        AF0TM005.AF0TMBF1[2] = AF0TW02.AF0TWBF2[10];
        AF0TM005.AF0TMSF1[2] = AF0TW02.AF0TWSF2[10];
        AF0TM005.AF0TMAT[2] = AF0TW02.AF0TWAT[2]; /* Line tot*/
        AF0TM005.AF0TMBT[2] = AF0TW02.AF0TWBT[2];
        AF0TM005.AF0TMST[2] = AF0TW02.AF0TWST[2];
        AF0TM005.AF0TMAP[2] = AF0TW02.AF0TWAP[2]; /* Line pcent*/
        AF0TM005.AF0TMBP[2] = AF0TW02.AF0TWBP[2];
        AF0TM005.AF0TMFCS[2] = AF0TW02.AF0TWFCS[2]; /* Forecasted*/
        AF0TM005.AF0TMSBK[2] = AF0TW02.AF0TWSBK[2]; /* Spec Booked*/
        AF0TM005.AF0TMRCV[2] = AF0TW02.AF0TWRCV[2]; /* Rcvd To-date*/
        AF0TM005.AF0TMINV[2] = AF0TW02.AF0TWINV[2]; /* Curr invty*/
      end
      ;
    else
      ;
      set AF0TM005.AF0TMCLR[AFWIXM] skip, invisible; /* Clr id*/
      set AF0TM005.AF0TMCLD[AFWIXM] skip, invisible; /* Clr dsc*/
      set AF0TM005.AF0TMCLA[AFWIXM] skip, invisible; /* Clr shdg*/
      set AF0TM005.AF0TMCLB[AFWIXM] skip, invisible; /* Clr shdg*/
      set AF0TM005.AF0TMCLS[AFWIXM] skip, invisible; /* Clr shdg*/
      ;
      if (AFWREC.AFWIXM == 1) /* First line*/
        set AF0TM005.AF0TMAF1[1] skip, invisible; /* Line dtl*/
        set AF0TM005.AF0TMBF1[1] skip, invisible;
        set AF0TM005.AF0TMSF1[1] skip, invisible;
        set AF0TM005.AF0TMAF1[2] skip, invisible;
        set AF0TM005.AF0TMBF1[2] skip, invisible;
        set AF0TM005.AF0TMSF1[2] skip, invisible;
        set AF0TM005.AF0TMAT[1] skip, invisible; /* Line tot*/
        set AF0TM005.AF0TMBT[1] skip, invisible;
        set AF0TM005.AF0TMST[1] skip, invisible;
        set AF0TM005.AF0TMAP[1] skip, invisible; /* Line pcent*/
        set AF0TM005.AF0TMBP[1] skip, invisible;
        set AF0TM005.AF0TMFCS[1] skip, invisible; /* Forecasted*/
        set AF0TM005.AF0TMSBK[1] skip, invisible; /* Special Bookings*/
        set AF0TM005.AF0TMRCV[1] skip, invisible; /* Received To-date*/
        set AF0TM005.AF0TMINV[1] skip, invisible; /* Curr invty*/
      else
        set AF0TM005.AF0TMAF2[1] skip, invisible; /* Line dtl*/
        set AF0TM005.AF0TMBF2[1] skip, invisible;
        set AF0TM005.AF0TMSF2[1] skip, invisible;
        set AF0TM005.AF0TMAF2[2] skip, invisible;
        set AF0TM005.AF0TMBF2[2] skip, invisible;
        set AF0TM005.AF0TMSF2[2] skip, invisible;
        set AF0TM005.AF0TMAT[2] skip, invisible; /* Line tot*/
        set AF0TM005.AF0TMBT[2] skip, invisible;
        set AF0TM005.AF0TMST[2] skip, invisible;
        set AF0TM005.AF0TMAP[2] skip, invisible; /* Line pcent*/
        set AF0TM005.AF0TMBP[2] skip, invisible;
        set AF0TM005.AF0TMFCS[2] skip, invisible; /* Forecasted*/
        set AF0TM005.AF0TMSBK[2] skip, invisible; /* Special Bookings*/
        set AF0TM005.AF0TMRCV[2] skip, invisible; /* Received To-date*/
        set AF0TM005.AF0TMINV[2] skip, invisible; /* Curr invty*/
      end
      ;
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format style totals.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TM005.AF0TMSAT[1] = AF0TW03.AF0TWSAT[9];
  AF0TM005.AF0TMSAT[2] = AF0TW03.AF0TWSAT[10];
  AF0TM005.AF0TMSBT[1] = AF0TW03.AF0TWSBT[9];
  AF0TM005.AF0TMSBT[2] = AF0TW03.AF0TWSBT[10];
  AF0TM005.AF0TMSST[1] = AF0TW03.AF0TWSST[9];
  AF0TM005.AF0TMSST[2] = AF0TW03.AF0TWSST[10];
  AF0TM005.AF0TMSCT[1] = AF0TW03.AF0TWSCT[9];
  AF0TM005.AF0TMSCT[2] = AF0TW03.AF0TWSCT[10];
  AF0TM005.AF0TMSLT[1] = AF0TW03.AF0TWSLT[9];
  AF0TM005.AF0TMSLT[2] = AF0TW03.AF0TWSLT[10];
  AF0TM005.AF0TMSPT[1] = AF0TW03.AF0TWSPT[9];
  AF0TM005.AF0TMSPT[2] = AF0TW03.AF0TWSPT[10];
  ;
  AF0TM005.AF0TMTOA = AF0TW03.AF0TWTOA;
  AF0TM005.AF0TMTOB = AF0TW03.AF0TWTOB;
  AF0TM005.AF0TMTOS = AF0TW03.AF0TWTOS;
  AF0TM005.AF0TMTOC = AF0TW03.AF0TWTOC;
  AF0TM005.AF0TMTOL = AF0TW03.AF0TWTOL;
  ;
  AF0TM005.AF0TMTAP = AF0TW03.AF0TWTAP;
  AF0TM005.AF0TMTBP = AF0TW03.AF0TWTBP;
  ;
  AF0TM005.AF0TMFCT = AF0TW03.AF0TWFCT;
  AF0TM005.AF0TMBKT = AF0TW03.AF0TWBKT;
  AF0TM005.AF0TMRCT = AF0TW03.AF0TWRCT;
  AF0TM005.AF0TMINT = AF0TW03.AF0TWINT;
  ;
  ;
  ;
end // end AF0T221

// Check attention identifier
Function AF0T230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0TM005 initial; /* Clear the map fields*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AF0TM005.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0TM005.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0TM005.CAITEM; /* Application data*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0TM005.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF0TM005.CAITEM > " ") /* Application data was entered*/
    set AF0TM005.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0TM005"; /* Appl find code*/
    end
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
end // end AF0T230

// Reset hilght flds; disp pop-up
Function AF0T240()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TM005.XXXPRCNM = "AF0T    "; /* Reset process name*/
  ;
  ;
  set AF0TM005.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0TM005.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end AF0T240

// Verify Entered Data
Function AF0T250()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or Scroll forward request*/
    ;
    AF0T251(); /* Verify scroll request*/
    ;
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors found*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  ;
end // end AF0T250

// Verify Scroll Rqeuest
Function AF0T251()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && AFWREC.AFWTSP < 2)          /* and no previous pages*/
    ;
    AFWREC.AFWPRCSN = "251 "; /* Process number*/
    AF0TM005.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AFWREC.AFWTSP >= AFWREC.TA5TSQIX) /* and no more pages*/
    ;
    AFWREC.AFWPRCSN = "251 "; /* Process number*/
    AF0TM005.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
  ;
end // end AF0T251

// Process Valid Request
Function AF0T260()
  ;
   /* ------------------------------------------------------------*/
   /* Scroll Request.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    AFWREC.AFWTSP = AFWREC.AFWTSP - 1; /* Decrement page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    AFWREC.AFWTSP = AFWREC.AFWTSP + 1; /* Increment page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Shift Screen Left request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Display AF0TM001*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate Map 1 to process*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Display Option change request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15) /* Change Display Option*/
    ;
    AFWREC.AFWSWR = "Y"; /* Reselect data*/
    ;
    if (AF0TW01.AF0TWDSO == "U") /* Display Option in units*/
      AF0TW01.AF0TWDSO = "D"; /* then display data in dollars*/
    else
      AF0TW01.AF0TWDSO = "U"; /* else display data in units(qtys)*/
    end
    ;
    AFWREC.AFWMAP = "1"; /* Indicate Map 1*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
end // end AF0T260

// Clear map detail area
Function AF0TS01()
   /* ------------------------------------------------------------*/
   /* Protect,Darken af0tM001 Map Detail Area.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0TM001.AF0TMCHD skip, invisible; /* Total color % hdg*/
  set AF0TM001.AF0TMSTH skip, invisible; /* Total style hdg*/
  set AF0TM001.AF0TMSTA skip, invisible; /* Total style shdg*/
  set AF0TM001.AF0TMSTB skip, invisible; /* Total style shdg*/
  set AF0TM001.AF0TMSTS skip, invisible; /* Total style shdg*/
  set AF0TM001.AF0TMSTC skip, invisible; /* Total style shdg*/
  set AF0TM001.AF0TMSTL skip, invisible; /* Total style shdg*/
  set AF0TM001.AF0TMSTP skip, invisible; /* Total style shdg*/
  ;
  set AF0TM001.AF0TMTOA skip, invisible; /* Auth prod style total*/
  set AF0TM001.AF0TMTOB skip, invisible; /* Booked style total*/
  set AF0TM001.AF0TMTOS skip, invisible; /* Shipped style total*/
  set AF0TM001.AF0TMTOC skip, invisible; /* Cancelled style total*/
  set AF0TM001.AF0TMTOL skip, invisible; /* Lost dmnd style total*/
  set AF0TM001.AF0TMTAP skip, invisible; /* Auth prod total pcent*/
  set AF0TM001.AF0TMTBP skip, invisible; /* Booked total pcent*/
  ;
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  ;
  while (AFWREC.AFWIDX1 <= 2) /* Process all map flds.*/
    ;
    set AF0TM001.AF0TMCLR[AFWIDX1] skip, invisible; /* Color id*/
    set AF0TM001.AF0TMCLD[AFWIDX1] skip, invisible; /* Color id*/
    set AF0TM001.AF0TMCLA[AFWIDX1] skip, invisible; /* Color line shdg*/
    set AF0TM001.AF0TMCLB[AFWIDX1] skip, invisible; /* Color line shdg*/
    set AF0TM001.AF0TMCLS[AFWIDX1] skip, invisible; /* Color line shdg*/
    set AF0TM001.AF0TMAT[AFWIDX1] skip, invisible; /* Auth Prd Line total*/
    set AF0TM001.AF0TMBT[AFWIDX1] skip, invisible; /* Booked Line total*/
    set AF0TM001.AF0TMST[AFWIDX1] skip, invisible; /* Shipped Line total*/
    set AF0TM001.AF0TMAP[AFWIDX1] skip, invisible; /* Auth Prd Line pcent*/
    set AF0TM001.AF0TMBP[AFWIDX1] skip, invisible; /* Booked Line pcent*/
    set AF0TM001.AF0TMSP[AFWIDX1] skip, invisible; /* Shipped Line pcent*/
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  ;
  while (AFWREC.AFWIDX1 <= 8) /* Process all map flds.*/
    ;
    set AF0TM001.AF0TMSZD[AFWIDX1] skip, invisible; /* Size desc hdg*/
    ;
    set AF0TM001.AF0TMAF1[AFWIDX1] skip, invisible; /* Auth prod Line 1*/
    set AF0TM001.AF0TMBF1[AFWIDX1] skip, invisible; /* Booked Line 1*/
    set AF0TM001.AF0TMSF1[AFWIDX1] skip, invisible; /* Shipped Line 1*/
    ;
    set AF0TM001.AF0TMAF2[AFWIDX1] skip, invisible; /* Auth prod Line 2*/
    set AF0TM001.AF0TMBF2[AFWIDX1] skip, invisible; /* Booked Line 2*/
    set AF0TM001.AF0TMSF2[AFWIDX1] skip, invisible; /* Shipped Line 2*/
    ;
    set AF0TM001.AF0TMSAT[AFWIDX1] skip, invisible; /* Style Totals*/
    set AF0TM001.AF0TMSBT[AFWIDX1] skip, invisible;
    set AF0TM001.AF0TMSST[AFWIDX1] skip, invisible;
    set AF0TM001.AF0TMSCT[AFWIDX1] skip, invisible;
    set AF0TM001.AF0TMSLT[AFWIDX1] skip, invisible;
    set AF0TM001.AF0TMSPT[AFWIDX1] skip, invisible;
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0TS01

// Obtain size scale/descriptions
Function AF0TS02()
  ;
   /* ------------------------------------------------------------*/
   /* Obtain key information from DACAST.VSYCLR01 thru XSPG201.*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty; /* Row storage area*/
  ;
  PG2REC.XGPCD = XP1REC.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = AF2REC.SY1STNBR; /* ===> color code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  ;
  XSPG201(); /* ======>verify first row on table*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Row not found*/
    ;
    AFWREC.AFWPRCSN = "S02"; /* Module identification*/
    set AF0TM001.SY1STNBR cursor, bold; /* Highlight field*/
    converseLib.validationFailed(10); /* Indicate error message*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain valid sizes and size descriptions for a given style.*/
   /* Assumption: Size scale retrieved applies to all colors.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1PGMNM = "AF0TR01 "; /* program name*/
  TA1REC.TA1MAP = "AF0TM001"; /* processing map*/
  ;
  set PG3REC empty; /* Clear record work area*/
  ;
  PG3REC.PG3XDVCD = "01"; /* all divisions returned*/
  PG3REC.XGPCD = XP1REC.XGPCD; /* gpc cd as key*/
  PG3REC.SY1STNBR = PG2REC.SY1STNBR; /* style as key*/
  PG3REC.SY2CLRID = PG2REC.SY2CLRID; /* color as key*/
  PG3REC.XDMCD = PG2REC.XDMCD; /* dim cd as key*/
  PG3REC.XQACD = "01"; /* qual cd as key*/
  ;
  PG3REC.PG3FUNCD = "PC"; /* all valid sizes*/
  PG3REC.PG3DATFM = "C"; /* not compressed sizes*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
        /* call xspg301    --  (get all sizes)*/
   /* ------------------------------------------------------------*/
  ;
  XSPG301();
  ;
  if (sysVar.errorCode != "00000000" /* unexpected error found*/
   || PG3REC.PG3RETCD != "00")      
    ;
    AFWREC.AFWPRCSN = "S02 "; /* Process number*/
    ;
    if (PG3REC.PG3RETCD == "09") /* deadlock condition*/
      converseLib.validationFailed(11); /* indicate data in use*/
    else
      converseLib.validationFailed(10); /* indicate system error*/
    end
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Center all retrieved size descriptions within save field*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AFWREC.AFWIDX5 = 1; /* Set loop index*/
  ;
  ;
  while (AFWREC.AFWIDX5 <= 10) /* Center size descriptions*/
    ;
    AF0TW01.AF0TWSDS = " "; /* Initialize wk area*/
    AF0TW01.AF0TWSDC = " "; /* Initialize wk area*/
    ;
    AF0TW01.AF0TWSDS = PG3REC.SY4IDDSC[AFWIDX5];
    ;
    if (AF0TW01.AF0TWSD5 != " ")
      if (AF0TW01.AF0TWSD4 != " ")
        if (AF0TW01.AF0TWSD3 != " ")
          if (AF0TW01.AF0TWSD2 != " ")
            if (AF0TW01.AF0TWSD1 != " ")
            else
              AF0TW01.AF0TWSC2 = AF0TW01.AF0TWSD2;
              AF0TW01.AF0TWSC3 = AF0TW01.AF0TWSD3;
              AF0TW01.AF0TWSC4 = AF0TW01.AF0TWSD4;
              AF0TW01.AF0TWSC5 = AF0TW01.AF0TWSD5;
            end
          else
            AF0TW01.AF0TWSC3 = AF0TW01.AF0TWSD3;
            AF0TW01.AF0TWSC4 = AF0TW01.AF0TWSD4;
            AF0TW01.AF0TWSC5 = AF0TW01.AF0TWSD5;
          end
        else
          AF0TW01.AF0TWSC3 = AF0TW01.AF0TWSD4;
          AF0TW01.AF0TWSC4 = AF0TW01.AF0TWSD5;
        end
      else
        AF0TW01.AF0TWSC3 = AF0TW01.AF0TWSD5;
      end
      ;
      ;
      PG3REC.SY4IDDSC[AFWIDX5] = AF0TW01.AF0TWSDC;
      ;
      ;
    end
    ;
    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0TS02

// Process/store color data calc
Function AF0TS03()
  ;
   /* ------------------------------------------------------------*/
   /* Store Color ID/Description in Map wk area.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TS04(); /* Obtain color desc*/
  ;
  if (AFWREC.AFWIXM == 1) /* First line group*/
    ;
    AF0TW02.AF0TWCLR[1] = PG2REC.SY2CLRID; /* color id*/
    AF0TW02.AF0TWCLD[1] = PG2REC.SY2CLRAB; /* color desc*/
    ;
  else
    ;
    if (AFWREC.AFWIXM == 2) /* Second line group*/
      ;
      AF0TW02.AF0TWCLR[2] = PG2REC.SY2CLRID; /* color id*/
      AF0TW02.AF0TWCLD[2] = PG2REC.SY2CLRAB; /* color desc*/
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Process DACAST.VDMANO01 records for the color.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TS05(); /* Select Set DACAST.VDMANO01 data*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    AF0TW01.AF0TWEOF = "N"; /* Reset EOF indicator*/
    while (AF0TW01.AF0TWEOF == "N") /* Until all rows processed*/
      ;
      AF0TS06(); /* Process open demand rows*/
      ;
      if (converseVar.validationMsgNum != 0) /* Errors found*/
        AF0TW01.AF0TWEOF = "Y"; /* Force loop end*/
      end
      ;
    end
    ;
    AF0TS07(); /* Close DACAST.VDMANO01 cursor*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Process DACAST.VDMANC01 records for the style.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TS08(); /* Select Set DACAST.VDMANC01 data*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    AF0TW01.AF0TWEOF = "N"; /* Reset EOF indicator*/
    while (AF0TW01.AF0TWEOF == "N") /* Until all rows processed*/
      ;
      AF0TS09(); /* Process closed demand rows*/
      ;
      if (converseVar.validationMsgNum != 0) /* Errors found*/
        AF0TW01.AF0TWEOF = "Y"; /* Force loop end*/
      end
      ;
    end
    ;
    AF0TS10(); /* Close DACAST.VDMANC01 cursor*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate Forecasted figure.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWIXM == 1) /* First line group*/
    ;
    if (AF0TW01.AF0TWDSO == "U") /* Calculate in units*/
      AF0TW01.AF0TWQT1 = AF0TW02.AF0TWFCS[1];
      if (AF0TW01.AF0TWPRC > 0)
        AF0TW01.AF0TWQT2 = mathLib.round(AF2REC.AF2FSTDL * AF5REC.AF5FSCPT / 100         / AF0TW01.AF0TWPRC, -mathLib.decimals(AF0TW01.AF0TWQT2));
      else
        AF0TW01.AF0TWQT2 = 0;
      end
      AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
      AF0TW02.AF0TWFCS[1] = AF0TW01.AF0TWQT1;
    else
      AF0TW01.AF0TWQT1 = AF0TW02.AF0TWFCS[1];
      AF0TW01.AF0TWQT1 = mathLib.round(AF0TW01.AF0TWQT1 +       AF2REC.AF2FSTDL * AF5REC.AF5FSCPT / 100, -mathLib.decimals(AF0TW01.AF0TWQT1));
      AF0TW02.AF0TWFCS[1] = AF0TW01.AF0TWQT1;
    end
    ;
  else
    ;
    if (AFWREC.AFWIXM == 2) /* Second line group*/
      ;
      if (AF0TW01.AF0TWDSO == "U") /* Calculate in units*/
        AF0TW01.AF0TWQT1 = AF0TW02.AF0TWFCS[2];
        if (AF0TW01.AF0TWPRC > 0)
          AF0TW01.AF0TWQT2 = mathLib.round(AF2REC.AF2FSTDL * AF5REC.AF5FSCPT / 100           / AF0TW01.AF0TWPRC, -mathLib.decimals(AF0TW01.AF0TWQT2));
        else
          AF0TW01.AF0TWQT2 = 0;
        end
        AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
        AF0TW02.AF0TWFCS[2] = AF0TW01.AF0TWQT1;
      else
        AF0TW01.AF0TWQT1 = AF0TW02.AF0TWFCS[2];
        AF0TW01.AF0TWQT1 = mathLib.round(AF0TW01.AF0TWQT1 +         AF2REC.AF2FSTDL * AF5REC.AF5FSCPT / 100, -mathLib.decimals(AF0TW01.AF0TWQT1));
        AF0TW02.AF0TWFCS[2] = AF0TW01.AF0TWQT1;
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Process DACAST.VFYORD01 records for the color.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TS11(); /* Select Set DACAST.VFYORD01 data*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    AF0TW01.AF0TWEOF = "N"; /* Reset EOF indicator*/
    while (AF0TW01.AF0TWEOF == "N") /* Until all rows processed*/
      ;
      AF0TS12(); /* Process fcty ord rows*/
      ;
      if (converseVar.validationMsgNum != 0) /* Errors found*/
        AF0TW01.AF0TWEOF = "Y"; /* Force loop end*/
      end
      ;
    end
    ;
    AF0TS13(); /* Close DACAST.VFYORD01 cursor*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Process DACAST.VINVNT01 records for the color.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TS14(); /* Select Set DACAST.VINVTY01 data*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    AF0TW01.AF0TWEOF = "N"; /* Reset EOF indicator*/
    while (AF0TW01.AF0TWEOF == "N") /* Until all rows processed*/
      ;
      AF0TS15(); /* Process invty rows*/
      ;
      if (converseVar.validationMsgNum != 0) /* Errors found*/
        AF0TW01.AF0TWEOF = "Y"; /* Force loop end*/
      end
      ;
    end
    ;
    AF0TS16(); /* Close DACAST.VINVNT01 cursor*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Process DACAST.VADJCU01 records for the color.*/
   /* ------------------------------------------------------------*/
  ;
  AF0TS17(); /* Select Set DACAST.VADJCU01 data*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    AF0TW01.AF0TWEOF = "N"; /* Reset EOF indicator*/
    while (AF0TW01.AF0TWEOF == "N") /* Until all rows processed*/
      ;
      AF0TS18(); /* Process adjustment rows*/
      ;
      if (converseVar.validationMsgNum != 0) /* Errors found*/
        AF0TW01.AF0TWEOF = "Y"; /* Force loop end*/
      end
      ;
    end
    ;
    AF0TS19(); /* Close DACAST.VADJCU01 cursor*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate Line and Style Totals.*/
   /* ------------------------------------------------------------*/
  ;
  ;
              /* (Accumulate Line and Style Totals)*/
  if (AFWREC.AFWIXM == 1) /* First line group*/
    ;
    AF0TW03.AF0TWFCT = AF0TW03.AF0TWFCT + AF0TW02.AF0TWFCS[1];
    AF0TW03.AF0TWBKT = AF0TW03.AF0TWBKT + AF0TW02.AF0TWSBK[1];
    AF0TW03.AF0TWRCT = AF0TW03.AF0TWRCT + AF0TW02.AF0TWRCV[1];
    AF0TW03.AF0TWINT = AF0TW03.AF0TWINT + AF0TW02.AF0TWINV[1];
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Process all array elems*/
                       /* (Line Totals)*/
      AF0TW02.AF0TWAT[1] = AF0TW02.AF0TWAT[1] + AF0TW02.AF0TWAF1[AFWIDX1];
      AF0TW02.AF0TWBT[1] = AF0TW02.AF0TWBT[1] + AF0TW02.AF0TWBF1[AFWIDX1];
      AF0TW02.AF0TWST[1] = AF0TW02.AF0TWST[1] + AF0TW02.AF0TWSF1[AFWIDX1];
      ;
      AF0TW03.AF0TWTA1 = AF0TW03.AF0TWTA1 + AF0TW02.AF0TWAF1[AFWIDX1];
      AF0TW03.AF0TWTB1 = AF0TW03.AF0TWTB1 + AF0TW02.AF0TWBF1[AFWIDX1];
      ;
                       /* (Style Totals)*/
      AF0TW01.AF0TWQT1 = AF0TW03.AF0TWSAT[AFWIDX1];
      AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW02.AF0TWAF1[AFWIDX1];
      AF0TW03.AF0TWSAT[AFWIDX1] = AF0TW01.AF0TWQT1;
      ;
      AF0TW01.AF0TWQT1 = AF0TW03.AF0TWSBT[AFWIDX1];
      AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW02.AF0TWBF1[AFWIDX1];
      AF0TW03.AF0TWSBT[AFWIDX1] = AF0TW01.AF0TWQT1;
      ;
      AF0TW01.AF0TWQT1 = AF0TW03.AF0TWSST[AFWIDX1];
      AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW02.AF0TWSF1[AFWIDX1];
      AF0TW03.AF0TWSST[AFWIDX1] = AF0TW01.AF0TWQT1;
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
  else
    ;
    if (AFWREC.AFWIXM == 2) /* Second line group*/
      ;
      AF0TW03.AF0TWFCT = AF0TW03.AF0TWFCT + AF0TW02.AF0TWFCS[2];
      AF0TW03.AF0TWBKT = AF0TW03.AF0TWBKT + AF0TW02.AF0TWSBK[2];
      AF0TW03.AF0TWRCT = AF0TW03.AF0TWRCT + AF0TW02.AF0TWRCV[2];
      AF0TW03.AF0TWINT = AF0TW03.AF0TWINT + AF0TW02.AF0TWINV[2];
      ;
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= 10) /* Process all array elems*/
                         /* (Line Totals)*/
        AF0TW02.AF0TWAT[2] = AF0TW02.AF0TWAT[2] + AF0TW02.AF0TWAF2[AFWIDX1];
        AF0TW02.AF0TWBT[2] = AF0TW02.AF0TWBT[2] + AF0TW02.AF0TWBF2[AFWIDX1];
        AF0TW02.AF0TWST[2] = AF0TW02.AF0TWST[2] + AF0TW02.AF0TWSF2[AFWIDX1];
        ;
        AF0TW03.AF0TWTA1 = AF0TW03.AF0TWTA1 + AF0TW02.AF0TWAF2[AFWIDX1];
        AF0TW03.AF0TWTB1 = AF0TW03.AF0TWTB1 + AF0TW02.AF0TWBF2[AFWIDX1];
        ;
                         /* (Style Totals)*/
        AF0TW01.AF0TWQT1 = AF0TW03.AF0TWSAT[AFWIDX1];
        AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW02.AF0TWAF2[AFWIDX1];
        AF0TW03.AF0TWSAT[AFWIDX1] = AF0TW01.AF0TWQT1;
        ;
        AF0TW01.AF0TWQT1 = AF0TW03.AF0TWSBT[AFWIDX1];
        AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW02.AF0TWBF2[AFWIDX1];
        AF0TW03.AF0TWSBT[AFWIDX1] = AF0TW01.AF0TWQT1;
        ;
        AF0TW01.AF0TWQT1 = AF0TW03.AF0TWSST[AFWIDX1];
        AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW02.AF0TWSF2[AFWIDX1];
        AF0TW03.AF0TWSST[AFWIDX1] = AF0TW01.AF0TWQT1;
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF0TS03

// Obtain color description
Function AF0TS04()
  ;
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty; /* Row storage area*/
  ;
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC*/
  PG2REC.SY2CLRID = AF5REC.SY2CLRID; /* color code*/
  PG2REC.SY1STNBR = AF5REC.SY1STNBR; /* style code*/
  PG2REC.XDMCD = AF5REC.XDMCD; /* dim code*/
  ;
  XSPG202(); /* Obtain color desc*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      PG2REC.SY2CLRAB = "*************"; /* Color abrv*/
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  converseLib.clearScreen();
   /* Reset map*/
  converseLib.validationFailed(10); /* Indicate error has occurred*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AF0TS04

// Select set DACAST.VDMANO01
Function AF0TS05()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AFCREC empty; /* Clear record work area*/
  ;
  AFCREC.SY1STNBR = AF5REC.SY1STNBR; /* Style*/
  AFCREC.SY2CLRID = AF5REC.SY2CLRID; /* Color*/
  AFCREC.XDMCD = AF5REC.XDMCD; /* Dimension cd*/
  AFCREC.XDVCD = AF5REC.XDVCD; /* Division cd*/
  AFCREC.XSECD = AF5REC.XSECD; /* Season cd*/
  AFCREC.XSNYR = AF5REC.XSNYR; /* Season yr*/
  AFCREC.XOWCD = AF5REC.XOWCD; /* Owner Group*/
  ;
  ;
  ;
   /* *===========================**/
   /* *  Access DACAST.VDMANO01   **/
   /* *===========================**/
  ;
  try
    call "IO3920" ("SS", SQLCA, AFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANO01"; /* Table view name*/
  TA1REC.TA1TBLKE = AFCREC.AFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0TS05

// Process DACAST.VDMANO01 rows
Function AF0TS06()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* Process fetched row.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VDMANO01 **/
   /* *=========================**/
  ;
  try
    call "IO3920" ("SN", SQLCA, AFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      ;
      AF0TW01.AF0TWPRC = AFCREC.AF-AVG-UNT-PRC-AMT; /* Save unit price*/
      ;
      /* ---------------------------------------------------*/
            /* (Calculate Bookings Qtys - Part 1)*/
      /* ---------------------------------------------------*/
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
        ;
        if (AFCREC.SY5SZID[AFWIDX1] > 0) /* Valid size found*/
          ;
          if (AFWREC.AFWIXM == 1) /* First line group*/
            ;
            if (AFCREC.SY5SZID[AFWIDX1] in PG3REC.SY5SZID)
              ;
              if (AF0TW01.AF0TWDSO == "U") /* Calculate units*/
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWBF1[sysVar.arrayIndex];
                AF0TW01.AF0TWQT2 = AFCREC.AFCOPDMD[AFWIDX1];
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                AF0TW02.AF0TWBF1[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
              else
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWBF1[sysVar.arrayIndex];
                AF0TW01.AF0TWQT2 = AFCREC.AFCOPDMD[AFWIDX1];
                AF0TW01.AF0TWQT3 = mathLib.round(AF0TW01.AF0TWQT2 *                 AFCREC.AF-AVG-UNT-PRC-AMT, -mathLib.decimals(AF0TW01.AF0TWQT3));
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT3;
                AF0TW02.AF0TWBF1[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
              end
              ;
            end
            ;
          else
            ;
            if (AFWREC.AFWIXM == 2) /* Second line group*/
              ;
              if (AFCREC.SY5SZID[AFWIDX1] in PG3REC.SY5SZID)
                ;
                if (AF0TW01.AF0TWDSO == "U") /* Calculate units*/
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWBF2[sysVar.arrayIndex];
                  AF0TW01.AF0TWQT2 = AFCREC.AFCOPDMD[AFWIDX1];
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                  AF0TW02.AF0TWBF2[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                else
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWBF2[sysVar.arrayIndex];
                  AF0TW01.AF0TWQT2 = AFCREC.AFCOPDMD[AFWIDX1];
                  AF0TW01.AF0TWQT3 = mathLib.round(AF0TW01.AF0TWQT2 *                   AFCREC.AF-AVG-UNT-PRC-AMT, -mathLib.decimals(AF0TW01.AF0TWQT3));
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT3;
                  AF0TW02.AF0TWBF2[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                end
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AF0TW01.AF0TWEOF = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANO01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0TS06

// Close DACAST.VDMANO01 cursor
Function AF0TS07()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VDMANO01 **/
   /* *=========================**/
  ;
  try
    call "IO3920" ("CS", SQLCA, AFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "S07 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VDMANO01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0TS07

// Select set DACAST.VDMANC01
Function AF0TS08()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AFDREC empty; /* Clear record work area*/
  ;
  AFDREC.SY1STNBR = AF5REC.SY1STNBR; /* Style*/
  AFDREC.SY2CLRID = AF5REC.SY2CLRID; /* Color*/
  AFDREC.XDMCD = AF5REC.XDMCD; /* Dimension cd*/
  AFDREC.XDVCD = AF5REC.XDVCD; /* Division cd*/
  AFDREC.XSECD = AF5REC.XSECD; /* Season cd*/
  AFDREC.XSNYR = AF5REC.XSNYR; /* Season yr*/
  AFDREC.XOWCD = AF5REC.XOWCD; /* Owner Group Code*/
  ;
  ;
  ;
   /* *===========================**/
   /* *  Access DACAST.VDMANC01   **/
   /* *===========================**/
  ;
  try
    call "IO3930" ("SS", SQLCA, AFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S08 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANC01"; /* Table view name*/
  TA1REC.TA1TBLKE = AFDREC.AFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0TS08

// Process DACAST.VDMANC01 rows
Function AF0TS09()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* Process fetched row.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VDMANC01 **/
   /* *=========================**/
  ;
  try
    call "IO3930" ("SN", SQLCA, AFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      ;
      AF0TW01.AF0TWPRC = AFDREC.AF-AVG-UNT-PRC-AMT; /* Save unit price*/
      ;
      /* -----------------------------------------------------*/
         /* (Calculate Bookings Qtys - Part 2; Ship Qtys)*/
      /* -----------------------------------------------------*/
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
        ;
        if (AFDREC.SY5SZID[AFWIDX1] > 0) /* Valid size found*/
          ;
          if (AFWREC.AFWIXM == 1) /* First line group*/
            ;
            if (AFDREC.SY5SZID[AFWIDX1] in PG3REC.SY5SZID)
              ;
              if (AF0TW01.AF0TWDSO == "U") /* Calculate units*/
                AF0TW01.AF0TWQT2 = AFDREC.SR1QTYSH[AFWIDX1];
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWBF1[sysVar.arrayIndex];
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                AF0TW02.AF0TWBF1[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWSF1[sysVar.arrayIndex];
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                AF0TW02.AF0TWSF1[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
              else
                AF0TW01.AF0TWQT2 = AFDREC.AFDSHPDL[AFWIDX1];
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWBF1[sysVar.arrayIndex];
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                AF0TW02.AF0TWBF1[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWSF1[sysVar.arrayIndex];
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                AF0TW02.AF0TWSF1[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
              end
              ;
            end
            ;
          else
            ;
            if (AFWREC.AFWIXM == 2) /* Second line group*/
              ;
              if (AFDREC.SY5SZID[AFWIDX1] in PG3REC.SY5SZID)
                ;
                if (AF0TW01.AF0TWDSO == "U") /* Calculate units*/
                  AF0TW01.AF0TWQT2 = AFDREC.SR1QTYSH[AFWIDX1];
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWBF2[sysVar.arrayIndex];
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                  AF0TW02.AF0TWBF2[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWSF2[sysVar.arrayIndex];
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                  AF0TW02.AF0TWSF2[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                else
                  AF0TW01.AF0TWQT2 = AFDREC.AFDSHPDL[AFWIDX1];
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWBF2[sysVar.arrayIndex];
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                  AF0TW02.AF0TWBF2[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWSF2[sysVar.arrayIndex];
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                  AF0TW02.AF0TWSF2[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                end
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      ;
      /* -----------------------------------------------------*/
          /* (Calculate Cancellations - Overall for Style)*/
      /* -----------------------------------------------------*/
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
        ;
        if (AFDREC.SY5SZID[AFWIDX1] > 0) /* Valid size found*/
          ;
          if (AFDREC.SY5SZID[AFWIDX1] in PG3REC.SY5SZID)
            ;
            if (AF0TW01.AF0TWDSO == "U") /* Calculate units*/
              AF0TW01.AF0TWQT1 = AF0TW03.AF0TWSCT[sysVar.arrayIndex];
              AF0TW01.AF0TWQT2 = AFDREC.AFDCNMNQ[AFWIDX1];
              AF0TW01.AF0TWQT3 = AFDREC.AFDCNPRQ[AFWIDX1];
              AF0TW01.AF0TWQT4 = AF0TW01.AF0TWQT2 + AF0TW01.AF0TWQT3;
              AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT4;
              AF0TW03.AF0TWSCT[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
            else
              AF0TW01.AF0TWQT1 = AF0TW03.AF0TWSCT[sysVar.arrayIndex];
              AF0TW01.AF0TWQT2 = AFDREC.AFDCNMNQ[AFWIDX1];
              AF0TW01.AF0TWQT3 = AFDREC.AFDCNPRQ[AFWIDX1];
              AF0TW01.AF0TWQT4 = AF0TW01.AF0TWQT2 + AF0TW01.AF0TWQT3;
              AF0TW01.AF0TWQT5 = mathLib.round(AF0TW01.AF0TWQT4 *               AFDREC.AF-AVG-UNT-PRC-AMT, -mathLib.decimals(AF0TW01.AF0TWQT5));
              AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT5;
              AF0TW03.AF0TWSCT[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
              ;
            end
            ;
          end
          ;
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      ;
      /* -----------------------------------------------------*/
           /* (Calculate Lost Demand - Overall for Style)*/
      /* -----------------------------------------------------*/
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
        ;
        if (AFDREC.SY5SZID[AFWIDX1] > 0) /* Valid size found*/
          ;
          if (AFDREC.SY5SZID[AFWIDX1] in PG3REC.SY5SZID)
            ;
            if (AF0TW01.AF0TWDSO == "U") /* Calculate units*/
              AF0TW01.AF0TWQT1 = AF0TW03.AF0TWSLT[sysVar.arrayIndex];
              AF0TW01.AF0TWQT2 = AFDREC.OPTDMDQT[AFWIDX1];
              AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
              AF0TW03.AF0TWSLT[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
            else
              AF0TW01.AF0TWQT1 = AF0TW03.AF0TWSLT[sysVar.arrayIndex];
              AF0TW01.AF0TWQT2 = AFDREC.OPTDMDQT[AFWIDX1];
              AF0TW01.AF0TWQT3 = mathLib.round(AF0TW01.AF0TWQT2 *               AFDREC.AF-AVG-UNT-PRC-AMT, -mathLib.decimals(AF0TW01.AF0TWQT3));
              AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT3;
              AF0TW03.AF0TWSLT[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
              ;
            end
            ;
          end
          ;
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      ;
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AF0TW01.AF0TWEOF = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANC01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0TS09

// Close DACAST.VDMANC01 cursor
Function AF0TS10()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VDMANC01 **/
   /* *=========================**/
  ;
  try
    call "IO3930" ("CS", SQLCA, AFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "S10 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VDMANC01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0TS10

// Select set DACAST.VFYORD01
Function AF0TS11()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AFJREC empty; /* Clear record work area*/
  ;
  AFJREC.SY1STNBR = AF5REC.SY1STNBR; /* Style*/
  AFJREC.SY2CLRID = AF5REC.SY2CLRID; /* Color*/
  AFJREC.XDMCD = AF5REC.XDMCD; /* Dimension cd*/
  AFJREC.XDVCD = AF5REC.XDVCD; /* Division cd*/
  AFJREC.XSECD = AF5REC.XSECD; /* Season cd*/
  AFJREC.XSNYR = AF5REC.XSNYR; /* Season yr*/
  AFJREC.XWHCD = XP1REC.XWHCD; /* Whse code*/
  AFJREC.XOWCD = AF5REC.XOWCD; /* Owner Group Code*/
  AFJREC.XCTCD = " "; /* country code*/
  ;
  ;
   /* *===========================**/
   /* *  Access DACAST.VFYORD01   **/
   /* *===========================**/
  ;
  try
    call "IO3550" ("S1", SQLCA, AFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S11 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = AFJREC.AFJKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0TS11

// Process DACAST.VFYORD01 rows
Function AF0TS12()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* Process fetched row.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VFYORD01 **/
   /* *=========================**/
  ;
  try
    call "IO3550" ("N1", SQLCA, AFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      ;
      ;
      /* ---------------------------------------------------*/
       /* Calculate Auth Production - Part 1; Received figs*/
      /* ---------------------------------------------------*/
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
        ;
        if (AFJREC.SY5SZID[AFWIDX1] > 0) /* Valid size found*/
          ;
          if (AFWREC.AFWIXM == 1) /* First line group*/
            ;
            if (AFJREC.SY5SZID[AFWIDX1] in PG3REC.SY5SZID)
              ;
              if (AF0TW01.AF0TWDSO == "U") /* Calculate units*/
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWAF1[sysVar.arrayIndex];
                AF0TW01.AF0TWQT2 = AFJREC.AFJPDQTY[AFWIDX1];
                AF0TW01.AF0TWQT3 = AFJREC.AFJRVDTQ[AFWIDX1];
                AF0TW01.AF0TWQT4 = AF0TW01.AF0TWQT2 + AF0TW01.AF0TWQT3;
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT4;
                AF0TW02.AF0TWAF1[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWRCV[1];
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT3;
                AF0TW02.AF0TWRCV[1] = AF0TW01.AF0TWQT1;
              else
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWAF1[sysVar.arrayIndex];
                AF0TW01.AF0TWQT2 = AFJREC.AFJPDQTY[AFWIDX1];
                AF0TW01.AF0TWQT3 = AFJREC.AFJRVDTQ[AFWIDX1];
                AF0TW01.AF0TWQT4 = AF0TW01.AF0TWQT2 + AF0TW01.AF0TWQT3;
                AF0TW01.AF0TWQT5 = mathLib.round(AF0TW01.AF0TWQT4 * AF0TW01.AF0TWPRC, -mathLib.decimals(AF0TW01.AF0TWQT5));
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT5;
                AF0TW02.AF0TWAF1[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWRCV[1];
                AF0TW01.AF0TWQT4 = mathLib.round(AF0TW01.AF0TWQT3 * AF0TW01.AF0TWPRC, -mathLib.decimals(AF0TW01.AF0TWQT4));
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT4;
                AF0TW02.AF0TWRCV[1] = AF0TW01.AF0TWQT1;
              end
              ;
            end
            ;
          else
            ;
            if (AFWREC.AFWIXM == 2) /* Second line group*/
              ;
              if (AFJREC.SY5SZID[AFWIDX1] in PG3REC.SY5SZID)
                ;
                if (AF0TW01.AF0TWDSO == "U") /* Calculate units*/
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWAF2[sysVar.arrayIndex];
                  AF0TW01.AF0TWQT2 = AFJREC.AFJPDQTY[AFWIDX1];
                  AF0TW01.AF0TWQT3 = AFJREC.AFJRVDTQ[AFWIDX1];
                  AF0TW01.AF0TWQT4 = AF0TW01.AF0TWQT2 + AF0TW01.AF0TWQT3;
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT4;
                  AF0TW02.AF0TWAF2[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWRCV[2];
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT3;
                  AF0TW02.AF0TWRCV[2] = AF0TW01.AF0TWQT1;
                else
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWAF2[sysVar.arrayIndex];
                  AF0TW01.AF0TWQT2 = AFJREC.AFJPDQTY[AFWIDX1];
                  AF0TW01.AF0TWQT3 = AFJREC.AFJRVDTQ[AFWIDX1];
                  AF0TW01.AF0TWQT4 = AF0TW01.AF0TWQT2 + AF0TW01.AF0TWQT3;
                  AF0TW01.AF0TWQT5 = mathLib.round(AF0TW01.AF0TWQT4 * AF0TW01.AF0TWPRC, -mathLib.decimals(AF0TW01.AF0TWQT5));
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT5;
                  AF0TW02.AF0TWAF2[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWRCV[2];
                  AF0TW01.AF0TWQT4 = mathLib.round(AF0TW01.AF0TWQT3 * AF0TW01.AF0TWPRC, -mathLib.decimals(AF0TW01.AF0TWQT4));
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT4;
                  AF0TW02.AF0TWRCV[2] = AF0TW01.AF0TWQT1;
                end
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AF0TW01.AF0TWEOF = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S12 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0TS12

// Close DACAST.VFYORD01 cursor
Function AF0TS13()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VFYORD01 **/
   /* *=========================**/
  ;
  try
    call "IO3550" ("C1", SQLCA, AFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "S13"; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYORD01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0TS13

// Select set DACAST.VINVNT01
Function AF0TS14()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AFIREC empty; /* Clear record work area*/
  ;
  AFIREC.SY1STNBR = AF5REC.SY1STNBR; /* Style*/
  AFIREC.SY2CLRID = AF5REC.SY2CLRID; /* Color*/
  AFIREC.XDMCD = AF5REC.XDMCD; /* Dimension cd*/
  AFIREC.XDVCD = AF5REC.XDVCD; /* Division cd*/
  AFIREC.XSECD = AF5REC.XSECD; /* Season cd*/
  AFIREC.XSNYR = AF5REC.XSNYR; /* Season yr*/
  AFIREC.XCTCD = " "; /* country code*/
  ;
  ;
   /* *===========================**/
   /* *  Access DACAST.VINVNT01   **/
   /* *===========================**/
  ;
  try
    call "IO3540" ("SS", SQLCA, AFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINVNT01"; /* Table view name*/
  TA1REC.TA1TBLKE = AFIREC.AFIKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0TS14

// Process DACAST.VINVNT01 rows
Function AF0TS15()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* Process fetched row.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VINVNT01 **/
   /* *=========================**/
  ;
  try
    call "IO3540" ("SN", SQLCA, AFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      ;
      ;
      /* ---------------------------------------------------*/
       /* Calculate Auth Production - Part 2; Inventory figs*/
      /* ---------------------------------------------------*/
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
        ;
        if (AFIREC.SY5SZID[AFWIDX1] > 0) /* Valid size found*/
          ;
          if (AFWREC.AFWIXM == 1) /* First line group*/
            ;
            if (AFIREC.SY5SZID[AFWIDX1] in PG3REC.SY5SZID)
              ;
              if (AF0TW01.AF0TWDSO == "U") /* Calculate units*/
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWAF1[sysVar.arrayIndex];
                AF0TW01.AF0TWQT2 = AFIREC.AFICOIQT[AFWIDX1];
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                AF0TW02.AF0TWAF1[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWINV[1];
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                AF0TW02.AF0TWINV[1] = AF0TW01.AF0TWQT1;
              else
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWAF1[sysVar.arrayIndex];
                AF0TW01.AF0TWQT2 = AFIREC.AFICOIQT[AFWIDX1];
                AF0TW01.AF0TWQT3 = mathLib.round(AF0TW01.AF0TWQT2 * AF0TW01.AF0TWPRC, -mathLib.decimals(AF0TW01.AF0TWQT3));
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT3;
                AF0TW02.AF0TWAF1[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                AF0TW01.AF0TWQT1 = AF0TW02.AF0TWINV[1];
                AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT3;
                AF0TW02.AF0TWINV[1] = AF0TW01.AF0TWQT1;
              end
              ;
            end
            ;
          else
            ;
            if (AFWREC.AFWIXM == 2) /* Second line group*/
              ;
              if (AFIREC.SY5SZID[AFWIDX1] in PG3REC.SY5SZID)
                ;
                if (AF0TW01.AF0TWDSO == "U") /* Calculate units*/
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWAF2[sysVar.arrayIndex];
                  AF0TW01.AF0TWQT2 = AFIREC.AFICOIQT[AFWIDX1];
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                  AF0TW02.AF0TWAF2[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWINV[2];
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT2;
                  AF0TW02.AF0TWINV[2] = AF0TW01.AF0TWQT1;
                else
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWAF2[sysVar.arrayIndex];
                  AF0TW01.AF0TWQT2 = AFIREC.AFICOIQT[AFWIDX1];
                  AF0TW01.AF0TWQT3 = mathLib.round(AF0TW01.AF0TWQT2 * AF0TW01.AF0TWPRC, -mathLib.decimals(AF0TW01.AF0TWQT3));
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT3;
                  AF0TW02.AF0TWAF2[sysVar.arrayIndex] = AF0TW01.AF0TWQT1;
                  AF0TW01.AF0TWQT1 = AF0TW02.AF0TWINV[2];
                  AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AF0TW01.AF0TWQT3;
                  AF0TW02.AF0TWINV[2] = AF0TW01.AF0TWQT1;
                end
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AF0TW01.AF0TWEOF = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S15 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINVNT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0TS15

// Close DACAST.VINVNT01 cursor
Function AF0TS16()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VINVNT01 **/
   /* *=========================**/
  ;
  try
    call "IO3540" ("CS", SQLCA, AFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "S16"; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VINVNT01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0TS16

// Select set DACAST.VADJCU01
Function AF0TS17()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AFBREC empty; /* Clear record work area*/
  ;
  AFBREC.SY1STNBR = AF5REC.SY1STNBR; /* Style*/
  AFBREC.SY2CLRID = AF5REC.SY2CLRID; /* Color*/
  AFBREC.XDMCD = AF5REC.XDMCD; /* Dimension cd*/
  AFBREC.XSECD = AF5REC.XSECD; /* Season cd*/
  AFBREC.XSNYR = AF5REC.XSNYR; /* Season yr*/
  AFBREC.XOWCD = AF5REC.XOWCD; /* Owner Group Cd*/
  ;
  ;
  ;
   /* *===========================**/
   /* *  Access DACAST.VADJCU01   **/
   /* *===========================**/
  ;
  try
    call "IO3130" ("S2", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S17 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = AFBREC.AFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0TS17

// Process DACAST.VADJCU01 rows
Function AF0TS18()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* Process fetched row.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VADJCU01 **/
   /* *=========================**/
  ;
  try
    call "IO3130" ("N2", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      ;
      ;
      /* ---------------------------------------------------*/
       /* Calculate Special Bookings*/
      /* ---------------------------------------------------*/
      ;
      if (AFWREC.AFWIXM == 1) /* First line group*/
        ;
        AF0TW01.AF0TWQT1 = AF0TW02.AF0TWSBK[1];
        AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AFBREC.AFBSBKQ;
        AF0TW02.AF0TWSBK[1] = AF0TW01.AF0TWQT1;
        ;
      else
        ;
        if (AFWREC.AFWIXM == 2) /* Second line group*/
          ;
          AF0TW01.AF0TWQT1 = AF0TW02.AF0TWSBK[2];
          AF0TW01.AF0TWQT1 = AF0TW01.AF0TWQT1 + AFBREC.AFBSBKQ;
          AF0TW02.AF0TWSBK[2] = AF0TW01.AF0TWQT1;
          ;
        end
        ;
      end
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AF0TW01.AF0TWEOF = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S18 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0TS18

// Close DACAST.VADJCU01 cursor
Function AF0TS19()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VADJCU01 **/
   /* *=========================**/
  ;
  try
    call "IO3130" ("C2", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "S19"; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VADJCU01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0TS19

// Edit Style no.
Function AF0TS20()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===========================**/
   /* *  Check Style for spaces   **/
   /* *===========================**/
  ;
  if (AF0TM001.SY1STNBR == " ") /* Style eq spaces*/
    XP1REC.SY1STNBR = " "; /* To save area*/
    XP1REC.SY1SSTNM = " "; /* To save area*/
    ;
    AFWREC.AFWPRCSN = "S27 "; /* Process number*/
    set AF0TM001.SY1STNBR cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 33; /* indicate error message*/
    XP1REC.XSNYR = 0; /* Reset working storage*/
    ;
    return; /* Return to calling process*/
  end
  ;
  ;
  AF0TW01.AF0TWSTY = AF0TM001.SY1STNBR; /* Save to wk map storage*/
  ;
   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/
  ;
  ;
  AF0TS21(); /* Select set style*/
  ;
  AF0TS22(); /* Validate style*/
  ;
  AF0TS23(); /* Close style cursor*/
  ;
  ;
  ;
end // end AF0TS20

// Select set style
Function AF0TS21()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set PG2REC empty; /* Reset rec work area*/
  ;
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0TM001.SY1STNBR; /* Style no.*/
  ;
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S21 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0TS21

// Process retrieved style
Function AF0TS22()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
                     /* (Field is valid)*/
      XP1REC.SY1STNBR = AF0TM001.SY1STNBR; /* Save to wk st*/
      XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* Save to wk st*/
      AF0TM001.SY1SSTNM = PG2REC.SY1SSTNM; /* Save to wk st*/
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
                    /* (Field in error)*/
      set AF0TM001.SY1STNBR cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 33; /* Indicate not found*/
      AFWREC.AFWPRCSN = "S22 "; /* Process number*/
      XP1REC.SY1STNBR = " "; /* Space out wk storage*/
      XP1REC.SY1SSTNM = " "; /* Space out wk storage*/
      AF0TM001.SY1SSTNM = " "; /* Space out map field*/
      return; /* Exit to calling rtn*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S22 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0TS22

// Close style cursor
Function AF0TS23()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S23 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0TM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  ;
  ;
end // end AF0TS23

// Edit Season yr
Function AF0TS27()
  ;
  ;
  AF0TW01.AF0TWXSY = 0; /* initialize xsnyr wk area*/
  AF0TW01.AF0TWXSY = AF0TM001.XSNYR; /* move to wk area*/
  AF0TW01.AF0TWXSY = AF0TW01.AF0TWXSY + 1900; /* move century*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0TW01.AF0TWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF0TW01.AF0TWXSY; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S27 "; /* Process number*/
  set AF0TM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/
end // end AF0TS27

// Edit Season cd
Function AF0TS28()
  ;
  ;
  if (AF0TM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0TM001.XSECD; /* save to working storage*/
    ;
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S28 "; /* Process number*/
    set AF0TM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/
    ;
  end
  ;
  ;
  AF0TW01.AF0TWXSS = " "; /* Initialize wk area*/
  AF0TW01.AF0TWXYR = +0; /* Initialize wk area*/
  ;
  AF0TW01.AF0TWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  ;
  XP1REC.XP1XSNYR = XP1REC.XSNYR; /* Redefine season yr*/
  ;
  AF0TW01.AF0TWXYR = XP1REC.XP1XSNYY; /* Format wk area*/
  ;
  AF0TW01.AF0TWXSY = 0; /* initialize xsnyr wk area*/
  AF0TW01.AF0TWXSY = AF0TM001.XSNYR; /* move to wk area*/
  AF0TW01.AF0TWXSY = AF0TW01.AF0TWXSY + 1900; /* move century*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0TW01.AF0TWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF0TW01.AF0TWXSY; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S28 "; /* Process number*/
  set AF0TM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/
end // end AF0TS28

// Edit Owner Group
Function AF0TS32()
  XP1REC.XWHCD = "51";
  XP1REC.XOWCD = AF0TM001.XOWCD;
  ;
  if (AF0TM001.XOWCD == AF0TW01.AF0TWXOW) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end
  ;
  XP1REC.XOWABRV = " ";
  ;
  if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
    AF0TW01.AF0TWXOW = AF0TM001.XOWCD; /* save to wk storage*/
    XP1REC.XOWCD = AF0TM001.XOWCD; /* save to wk storage*/
    AF0TM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk map*/
    XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk storage*/
    return; /* Exit to calling process*/
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S32 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  set AF0TM001.XOWCD cursor, bold; /* highlight field*/
  AF0TM001.XOWABRV = " "; /* Space out save desc*/
  ;
  ;
  ;
end // end AF0TS32

//*** RECORD=AF0TW01 ****
// Working Storage (1) for AF0T - Program-defined Variables
// ***********************
Record AF0TW01 type basicRecord
  10 AF0TWCAT AF0TWCAT ; 
  10 AF0TWDSO AF0TWDSO ; 
  10 AF0TWEOF AF0TWEOF ; 
  10 AF0TWUSR AF0TWUSR ; 
  10 AF0TWTYP AF0TWTYP ; 
  10 AF0TWGA AF0TWGA ; 
  10 AF0TWLIN AF0TWLIN ; 
  10 AF0TWSTY AF0TWSTY ; 
  10 AF0TWXOW AF0TWXOW ; 
  10 AF0TWDIV AF0TWDIV ; 
  10 AF0TWSIL AF0TWSIL ; 
  10 AF0TWPC1 AF0TWPC1 ; 
  10 AF0TWPC2 AF0TWPC2 ; 
  10 AF0TWPCT AF0TWPCT ; 
  10 AF0TWPND AF0TWPND ; 
  10 AF0TWPRC AF0TWPRC ; 
  10 AF0TWQT1 AF0TWQT1 ; 
  10 AF0TWQT2 AF0TWQT2 ; 
  10 AF0TWQT3 AF0TWQT3 ; 
  10 AF0TWQT4 AF0TWQT4 ; 
  10 AF0TWQT5 AF0TWQT5 ; 
  10 AF0TWQT6 AF0TWQT6 ; 
  10 AF0TWQT7 AF0TWQT7 ; 
  10 AF0TWSDC AF0TWSDC ; 
    15 AF0TWSC1 AF0TWSC1 ; 
    15 AF0TWSC2 AF0TWSC2 ; 
    15 AF0TWSC3 AF0TWSC3 ; 
    15 AF0TWSC4 AF0TWSC4 ; 
    15 AF0TWSC5 AF0TWSC5 ; 
  10 AF0TWSDS AF0TWSDS ; 
    15 AF0TWSD1 AF0TWSD1 ; 
    15 AF0TWSD2 AF0TWSD2 ; 
    15 AF0TWSD3 AF0TWSD3 ; 
    15 AF0TWSD4 AF0TWSD4 ; 
    15 AF0TWSD5 AF0TWSD5 ; 
  10 AF0TWSIX AF0TWSIX ; 
  10 AF0TWXSY AF0TWXSY ; 
  10 AF0TWXSA AF0TWXSA ; 
    15 AF0TWXSS AF0TWXSS ; 
    15 AF0TWXYR AF0TWXYR ; 
  10 AF0TWYR AF0TWYR ; 
end // end AF0TW01

//*** RECORD=AF0TW02 ****
// Working Storage (2) for AF0T - Map field work areas
// ***********************
Record AF0TW02 type basicRecord
  10 AF0TWLEN AF0TWLEN ; 
  10 AF0TWLID AF0TWLID [2] ; 
  10 AF0TWCLR AF0TWCLR [2] ; 
  10 AF0TWCLD AF0TWCLD [2] ; 
  10 AF0TWAT AF0TWAT [2] ; 
  10 AF0TWBT AF0TWBT [2] ; 
  10 AF0TWST AF0TWST [2] ; 
  10 AF0TWAP AF0TWAP [2] ; 
  10 AF0TWBP AF0TWBP [2] ; 
  10 AF0TWSP AF0TWSP [2] ; 
  10 AF0TWAF1 AF0TWAF1 [10] ; 
  10 AF0TWBF1 AF0TWBF1 [10] ; 
  10 AF0TWSF1 AF0TWSF1 [10] ; 
  10 AF0TWAF2 AF0TWAF2 [10] ; 
  10 AF0TWBF2 AF0TWBF2 [10] ; 
  10 AF0TWSF2 AF0TWSF2 [10] ; 
  10 AF0TWFCS AF0TWFCS [2] ; 
  10 AF0TWSBK AF0TWSBK [2] ; 
  10 AF0TWRCV AF0TWRCV [2] ; 
  10 AF0TWINV AF0TWINV [2] ; 
end // end AF0TW02

//*** RECORD=AF0TW03 ****
// Working Storage (3) for AF0T - Calculation work arrays/areas
// ***********************
Record AF0TW03 type basicRecord
  10 AF0TWSAT AF0TWSAT [10] ; 
  10 AF0TWSBT AF0TWSBT [10] ; 
  10 AF0TWSST AF0TWSST [10] ; 
  10 AF0TWSCT AF0TWSCT [10] ; 
  10 AF0TWSLT AF0TWSLT [10] ; 
  10 AF0TWSPT AF0TWSPT [10] ; 
  10 * char(3) ; 
  10 AF0TWTOA AF0TWTOA ; 
  10 AF0TWTOB AF0TWTOB ; 
  10 AF0TWTOS AF0TWTOS ; 
  10 AF0TWTOC AF0TWTOC ; 
  10 AF0TWTOL AF0TWTOL ; 
  10 AF0TWFCT AF0TWFCT ; 
  10 AF0TWBKT AF0TWBKT ; 
  10 AF0TWRCT AF0TWRCT ; 
  10 AF0TWINT AF0TWINT ; 
  10 AF0TWTOP AF0TWTOP ; 
  10 * char(3) ; 
  10 AF0TWTAP AF0TWTAP ; 
  10 AF0TWTBP AF0TWTBP ; 
  10 AF0TWTA1 AF0TWTA1 ; 
  10 AF0TWTB1 AF0TWTB1 ; 
end // end AF0TW03

//*** RECORD=AFIREC ****
// ************************************************************
// 
// DB2 TABLE:           DACAST.Vinvnt01
// 
// COPYLIB MEMBER:      DCL00614
// 
// I/O MOD:             IO3540
// 
// KEY TO DB2 TABLE:    SY1SYTNBR
//                      SY2CLRID
//                      XDMCD
//                      XWHCD
//                      XDVCD
//                      XSECD
//                      XSNYR
// 
// DATE CREATED:        01/29/90
// 
// MAINTENANCE LOG:
// 
//   DATE    USERID     COMMENT
// --------  ------     ---------------------------------------
// 01-29-90  GGILRA     INITIAL RECORD CREATION
// 07-03-93  LREIN      table changes add xctcd
// **********************
Record AFIREC type basicRecord
  5 AFIGROUP AFIGROUP ; 
    10 AFIKEY AFIKEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XOWCD XOWCD ; 
      15 XWHCD XWHCD ; 
      15 XDVCD XDVCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 XCTCD XCTCD ; 
    10 SY5SZID SY5SZID [10] ; 
    10 AFICOIQT AFICOIQT [10] ; 
    10 AFICURRI AFICURRI [10] ; 
    10 AFICAQTY AFICAQTY [10] ; 
    10 AFIFAQTY AFIFAQTY [10] ; 
    10 ZZZLDT ZZZLDT ; 
end // end AFIREC

//*** RECORD=AFJREC ****
// ************************************************************
// 
// DB2 TABLE:           DACAST.VFYORD01
// 
// COPYLIB MEMBER:      DCL00615
// 
// I/O MOD:             IO3550
// 
// KEY TO DB2 TABLE:    SY1SYTNBR
//                      SY2CLRID
//                      XDMCD
//                      XWHCD
//                      XDVCD
//                      XSECD
//                      XSNYR
//                      AFBNDTPR
// 
// DATE CREATED:        01/29/90
// 
// MAINTENANCE LOG:
// 
//   DATE    USERID     COMMENT
// --------  ------     ---------------------------------------
// 01-29-90  GGILRA     INITIAL RECORD CREATION
// 10-03-91  kjohns     Add xowcd.
// 08-03-93  LREIN      table changes add xctcd
// **********************
Record AFJREC type basicRecord
  5 AFJGROUP AFJGROUP ; 
    10 AFJKEY AFJKEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XOWCD XOWCD ; 
      15 XWHCD XWHCD ; 
      15 XDVCD XDVCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 AFBNDTPR AFBNDTPR ; 
      15 XCTCD XCTCD ; 
    10 SY5SZID SY5SZID [10] ; 
    10 AFJPDQTY AFJPDQTY [10] ; 
    10 AFJRVDTQ AFJRVDTQ [10] ; 
    10 ZZZLDT ZZZLDT ; 
end // end AFJREC

// Auth Prod figures Line 1
DataItem AF0TWAF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Auth Prod figures Line 2
DataItem AF0TWAF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Auth Prod line pcent
DataItem AF0TWAP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Auth Prod line total
DataItem AF0TWAT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked figures Line 1
DataItem AF0TWBF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked figures Line 2
DataItem AF0TWBF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Special Bookings total
DataItem AF0TWBKT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked line pcent
DataItem AF0TWBP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked line total
DataItem AF0TWBT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start category save
DataItem AF0TWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color desc
DataItem AF0TWCLD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color id
DataItem AF0TWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start division save
DataItem AF0TWDIV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data display option
DataItem AF0TWDSO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End-of-File indicator
DataItem AF0TWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecasted figures
DataItem AF0TWFCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast style total
DataItem AF0TWFCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start gender/age save
DataItem AF0TWGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Curr Inventory total
DataItem AF0TWINT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Curr inventory figures
DataItem AF0TWINV int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ Length
DataItem AF0TWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line data indicator
DataItem AF0TWLID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start pr line save
DataItem AF0TWLIN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk pct 1
DataItem AF0TWPC1 bin(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk pct 2
DataItem AF0TWPC2 bin(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk display pcent
DataItem AF0TWPCT num(6,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0TWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved unit price
DataItem AF0TWPRC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 1
DataItem AF0TWQT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 2
DataItem AF0TWQT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 3
DataItem AF0TWQT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 4
DataItem AF0TWQT4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 5
DataItem AF0TWQT5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 6
DataItem AF0TWQT6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 7
DataItem AF0TWQT7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Received to-date total
DataItem AF0TWRCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Received to-date figures
DataItem AF0TWRCV int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Auth prod style line totals
DataItem AF0TWSAT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Special Bookings figures
DataItem AF0TWSBK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked style line totals
DataItem AF0TWSBT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size desc wk 2 subfld1
DataItem AF0TWSC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk 2 subfld2
DataItem AF0TWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk 2 subfld3
DataItem AF0TWSC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk 2 subfld4
DataItem AF0TWSC4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk 2 subfld5
DataItem AF0TWSC5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cancelled style line totals
DataItem AF0TWSCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size desc wk 1 subfld1
DataItem AF0TWSD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk 1 subfld2
DataItem AF0TWSD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk 1 subfld3
DataItem AF0TWSD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk 1 subfld4
DataItem AF0TWSD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk 1 subfld5
DataItem AF0TWSD5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk 2
DataItem AF0TWSDC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk 1
DataItem AF0TWSDS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipped figures Line 1
DataItem AF0TWSF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped figures Line 2
DataItem AF0TWSF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start silhouette save
DataItem AF0TWSIL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Store index save area
DataItem AF0TWSIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Lost dmnd style line totals
DataItem AF0TWSLT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped line pcent
DataItem AF0TWSP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked style pcents
DataItem AF0TWSPT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped style line totals
DataItem AF0TWSST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped line total
DataItem AF0TWST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start style save
DataItem AF0TWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Auth Prod grand total (alt)
DataItem AF0TWTA1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Auth prod style pcent total
DataItem AF0TWTAP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked grand total (alt)
DataItem AF0TWTB1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked style pcent total
DataItem AF0TWTBP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Auth prod style grand total
DataItem AF0TWTOA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Booked style grand total
DataItem AF0TWTOB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cancelled style grand total
DataItem AF0TWTOC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Lost dmnd style grand total
DataItem AF0TWTOL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Booked pcent grand total
DataItem AF0TWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Shipped style grand total
DataItem AF0TWTOS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Start pr type save
DataItem AF0TWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start xxxuser save
DataItem AF0TWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save owner group
DataItem AF0TWXOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0TWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0TWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0TWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0TWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wk season yr
DataItem AF0TWYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AF_CURR_AVAL_QTY
DataItem AFICAQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AF_CAOV_INV_QTY
DataItem AFICOIQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AF_CURR_INV_QTY
DataItem AFICURRI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AF_FUTR_AVAL_QTY
DataItem AFIFAQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group item for record level
DataItem AFIGROUP char(209)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// afjrec key
DataItem AFIKEY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group item for record level
DataItem AFJGROUP char(133)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// afjrec key
DataItem AFJKEY char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AF_PRDCTN_QTY
DataItem AFJPDQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AF_RCV_TO_DT_QTY
DataItem AFJRVDTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

