package af0h;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPAF100;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom4.XSPG201;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGACD;
import corpx1.XGAKEY;
import corpx1.XGATBL;
import corpx1.XGPCD;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XSNBDT;
import corpx2.XSNXDT;
import corpy2.YSNTBL;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY4SZSCL;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0H ****
// This application is designed to enter order type percentages
// by need month for appaerl styles. The user will enter
// percents for a particular style and then be able to cycle on
// through more forecast styles.
// 
// The user will be able to select historical as-of-date
// information for inquiry and comparison purposes on this
// screen. This information, which can be paged forward or
// backward, will be shown on the right side of the screen.
// 
// This application will maintain the Order Type Demand
// Percentage By Style/Need Month Data Base.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 07/10/89   JRAMOS   New application.
// 02-09-95   kj       xsn -> ysn
// *********************
Program AF0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0HW01 AF0HW01; // record
  AF0HW02 AF0HW02; // record
  AF0HW03 AF0HW03; // record
  AF0HW04 AF0HW04; // record
  AF2REC AF2REC; // record
  AF3REC AF3REC; // record
  AF9REC AF9REC; // record
  AFFREC AFFREC; // record
  AFGREC AFGREC; // record
  AFHREC AFHREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use AF0HM.AF0HM001, // form
  AF0HM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/
    ;
    set AF0HW01 empty; /* Initialize working storage*/
    set AF0HW02 empty; /* Initialize working storage*/
    set AF0HW03 empty; /* Initialize working storage*/
    set AFFREC empty; /* Initialize working storage*/
    set AFGREC empty; /* Initialize working storage*/
    set AFHREC empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set AF3REC empty; /* Initialize working storage*/
    set AF9REC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0HM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF0H"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    ;
    ;
              /* (Initialize Style Row Loop Limit Ctr)*/
    ;
    AF0HW01.AF0HWLIM = +10000; /* Stop loop every 10000 rows read*/
    ;
    ;
                    /* (Initialize Month Table)*/
    ;
    AF0HW01.AF0HWMTB[1] = "JAN"; /* January*/
    AF0HW01.AF0HWMTB[2] = "FEB"; /* February*/
    AF0HW01.AF0HWMTB[3] = "MAR"; /* March*/
    AF0HW01.AF0HWMTB[4] = "APR"; /* April*/
    AF0HW01.AF0HWMTB[5] = "MAY"; /* May*/
    AF0HW01.AF0HWMTB[6] = "JUN"; /* June*/
    AF0HW01.AF0HWMTB[7] = "JUL"; /* July*/
    AF0HW01.AF0HWMTB[8] = "AUG"; /* August*/
    AF0HW01.AF0HWMTB[9] = "SEP"; /* September*/
    AF0HW01.AF0HWMTB[10] = "OCT"; /* October*/
    AF0HW01.AF0HWMTB[11] = "NOV"; /* November*/
    AF0HW01.AF0HWMTB[12] = "DEC"; /* December*/
    AF0HW01.AF0HWMTB[13] = "ERLY"; /* early*/
    AF0HW01.AF0HWMTB[14] = "LATE"; /* Late*/
    ;
    ;
    ;
       /* (Define Map Environment, Assign/Edit Defaults)*/
    ;
    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process name*/
    ;
    ;
                      /* (Set Map Item Values)*/
    ;
    AF0HM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/
    ;
    ;
                      /* (Process Passed Items)*/
    ;
    AF0HM001.PG1FCTCD = XP1REC.XXXUSER; /* Fcster code to map*/
    AF0HM001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    AF0HM001.XSNYR = XP1REC.XSNYR; /* Season yr to map*/
    AF0HM001.XGACD = XP1REC.XGACD; /* Gender age cd to map*/
    AF0HM001.XPRCD = XP1REC.XPRCD; /* Product line code to map*/
    AF0HM001.XPLCD = XP1REC.XPLCD; /* Product line code to map*/
    AF0HM001.XPCCD = XP1REC.XPCCD; /* Category cd to map*/
    AF0HM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd to map*/
    AF0HM001.SY1STNBR = XP1REC.SY1STNBR; /* Style cd to map*/
    AF0HM001.SY1STNBR = XP1REC.SY1STNBR; /* Style cd to map*/
    ;
    XP1REC.XXXUSER = " "; /* Clear Fcster code*/
    XP1REC.XSECD = " "; /* Clear Season cd*/
    XP1REC.XSNYR = 0; /* Clear Season yr*/
    XP1REC.XPRCD = "  "; /* Product type cd*/
    XP1REC.XDVCD = "01"; /* Division cd*/
    AF0HW01.AF0HWXDV = "01"; /* Division cd*/
    AF0HM001.XDVCD = XP1REC.XDVCD; /* division   cd to map*/
    XP1REC.XGACD = " "; /* Clear Gender age cd*/
    XP1REC.XPLCD = " "; /* Clear Product line code*/
    XP1REC.XPCCD = " "; /* Clear Category cd*/
    XP1REC.XSUCD = " "; /* Clear Silhouette cd*/
    XP1REC.SY1STNBR = " "; /* Clear Style cd*/
    XP1REC.XGAABRV = " "; /* Clear XGA abrv*/
    XP1REC.XPCABRV = " "; /* Clear Xpc abrv*/
    XP1REC.XSUABRV = " "; /* Clear Xsu abrv*/
    ;
    AF0HM001.XOWCD = "00";
    ;
                 /* (Protect,Dark Map Dtl Lines)*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMMTH[AFWIDX5] skip, invisible; /* Order month*/
      set AF0HM001.AF0HMCF1[AFWIDX5] skip, invisible; /* Curr Fut Pcent 1*/
      set AF0HM001.AF0HMCF2[AFWIDX5] skip, invisible; /* Curr Fut Pcent 2*/
      set AF0HM001.AF0HMCF3[AFWIDX5] skip, invisible; /* Curr Fut Pcent 3*/
      set AF0HM001.AF0HMCF4[AFWIDX5] skip, invisible; /* Curr Fut Pcent 4*/
      set AF0HM001.AF0HMCPR[AFWIDX5] skip, invisible; /* Curr Prop Pcent*/
      set AF0HM001.AF0HMCTL[AFWIDX5] skip, invisible; /* Curr Total Pcent*/
      set AF0HM001.AF0HMHF1[AFWIDX5] skip, invisible; /* Hist Fut Pcent 1*/
      set AF0HM001.AF0HMHF2[AFWIDX5] skip, invisible; /* Hist Fut Pcent 2*/
      set AF0HM001.AF0HMHF3[AFWIDX5] skip, invisible; /* Hist Fut Pcent 3*/
      set AF0HM001.AF0HMHF4[AFWIDX5] skip, invisible; /* Hist Fut Pcent 4*/
      set AF0HM001.AF0HMHPR[AFWIDX5] skip, invisible; /* Hist Prop Pcent*/
      set AF0HM001.AF0HMHTL[AFWIDX5] skip, invisible; /* Hist Total Pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    set AF0HM001.AF0HMCGT skip, invisible; /* Curr grand Total Pcent*/
    set AF0HM001.AF0HMHGT skip, invisible; /* Hist grand Total Pcent*/
    ;
    set AF0HM001.AF0HMCMF skip, invisible; /* Curr multiplier factor*/
    set AF0HM001.AF0HMHMF skip, invisible; /* Hist multiplier factor*/
    ;
    set AF0HM001.XSECD cursor; /* Set cursor position*/
    ;
    ;
                      /* (Converse Main Process)*/
    ;
    goto AF0H001; /* Main Process*/
    ;
    ;
    ;
    AF0H001: AF0H001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Monthly Demand Pcent Application*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0H001;
    ;
    ;
  end // end main
end // end AF0H

// Choose which map to display
Function AF0H001()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF0H110(); /* Obtain the data to display*/
  ;
  AF0H120(); /* Format and display the map*/
  ;
  AF0H130(); /* Check attention identifier*/
  ;
  AF0H140(); /* Reset fields to normal intensity*/
  ;
  AF0H150(); /* Verify the entered data*/
  ;
  AF0H160(); /* Process valid input request*/
  ;
  ;
  ;
  ;
end // end AF0H001

// Obtain Data to Display
Function AF0H110()
   /* ------------------------------------------------------------*/
   /* Check for common data selection criteria. If met, then*/
     /* exit to next process;*/
  ;
   /* Execute data retrieval processes for Style/Pct  display;*/
   /* Execute data retrieval processes for Historical display.*/
  ;
   /* --> Note that while Style/Pct  data and Historical data*/
       /* share the same screen(or map), both are intrinsically*/
       /* different from each other so processes to obtain data*/
       /* are completely seperate and unrelated.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
   /* *========================================**/
   /* *  Check Common Data Selection Criteria  **/
   /* *========================================**/
  ;
  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || AF0HW01.AF0HWPND == "Y"           /* Pop-up window processing active*/
   || AFWREC.AFWFIRST == " ")           /* First time through*/
    return; /* Then exit to next process*/
  end
  ;
  if (converseVar.eventKey is pa2) /* PA2 (Clear/Restore Display) pressed*/
    ;
    move AF0HW02.AF0HWCW1 to AF0HW02.AF0HWCF1[1] for all; /* Restore saved Fut 1*/
    move AF0HW02.AF0HWCW2 to AF0HW02.AF0HWCF2[1] for all; /* Restore saved Fut 2*/
    move AF0HW02.AF0HWCW3 to AF0HW02.AF0HWCF3[1] for all; /* Restore saved Fut 3*/
    move AF0HW02.AF0HWCW4 to AF0HW02.AF0HWCF4[1] for all; /* Restore saved Fut 4*/
    move AF0HW02.AF0HWCW5 to AF0HW02.AF0HWCPR[1] for all; /* Restore saved Fut 5*/
    ;
    move " " to AF0HW02.AF0HWCHG[1] for all; /* Reset change indicator*/
    AF0HW02.AF0HWUPD = " "; /* Reset update indicator*/
    AF0HW01.AF0HWCNF = "N"; /* Reset upd confirm indicator*/
    ;
  end
  ;
  ;
   /* *======================================**/
   /* *  Obtain Data for Style/Pct  Display  **/
   /* *======================================**/
  ;
  AF0H111(); /* Obtain Style/Pct  data*/
  ;
  AFWREC.AFWIDX1 = 1;
  ;
  while (AFWREC.AFWIDX1 <= 9) /* Process all months*/
    AF0HW01.AF0HWTPC = 0;
    AF0HW02.AF0HWCTL[AFWIDX1] = 0; /* Pcent*/
    AF0HW02.AF0HWCTW[AFWIDX1] = 0; /* Alt Pcent*/
    if (AF0HW01.AF0HWOT1 == "10"
     || AF0HW01.AF0HWOT2 == "10"
     || AF0HW01.AF0HWOT3 == "10"
     || AF0HW01.AF0HWOT4 == "10"
     || AF0HW01.AF0HWOT5 == "10")
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCF1[AFWIDX1];
    end
    if (AF0HW01.AF0HWOT1 == "20"
     || AF0HW01.AF0HWOT2 == "20"
     || AF0HW01.AF0HWOT3 == "20"
     || AF0HW01.AF0HWOT4 == "20"
     || AF0HW01.AF0HWOT5 == "20")
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCF2[AFWIDX1];
    end
    if (AF0HW01.AF0HWOT1 == "30"
     || AF0HW01.AF0HWOT2 == "30"
     || AF0HW01.AF0HWOT3 == "30"
     || AF0HW01.AF0HWOT4 == "30"
     || AF0HW01.AF0HWOT5 == "30")
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCF3[AFWIDX1];
    end
    if (AF0HW01.AF0HWOT1 == "40"
     || AF0HW01.AF0HWOT2 == "40"
     || AF0HW01.AF0HWOT3 == "40"
     || AF0HW01.AF0HWOT4 == "40"
     || AF0HW01.AF0HWOT5 == "40")
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCF4[AFWIDX1];
    end
    if (AF0HW01.AF0HWOT1 == "50"
     || AF0HW01.AF0HWOT2 == "50"
     || AF0HW01.AF0HWOT3 == "50"
     || AF0HW01.AF0HWOT4 == "50"
     || AF0HW01.AF0HWOT5 == "50")
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCPR[AFWIDX1];
    end
    if (AF0HW01.AF0HWBKM != 0)
      if (AF0HW01.AF0HW-AFMO-TBLE[AFWIDX1] <= AF0HW01.AF0HWAFM)
        AF0HW02.AF0HWCTL[AFWIDX1] = AF0HW01.AF0HWTPC; /* Pcent*/
      end
    else
      AF0HW02.AF0HWCTL[AFWIDX1] = AF0HW01.AF0HWTPC; /* Pcent*/
      AF0HW02.AF0HWCTW[AFWIDX1] = AF0HW01.AF0HWTPC; /* Alt Pcent*/
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
  end
  ;
  ;
   /* *======================================**/
   /* *  Obtain Data for Historical Display  **/
   /* *======================================**/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    AF0H112(); /* Obtain Historical data*/
    ;
    AFWREC.AFWIDX1 = 1; /* Reset Loop index*/
    while (AFWREC.AFWIDX1 <= 9) /* Process all months*/
      ;
                  /* (Compute Line Percent Totals)*/
      AF0HW03.AF0HWTOT = 0; /* Initialize wk total*/
      if (AF0HW01.AF0HWHO1 == "10"
       || AF0HW01.AF0HWHO2 == "10"
       || AF0HW01.AF0HWHO3 == "10"
       || AF0HW01.AF0HWHO4 == "10"
       || AF0HW01.AF0HWHO5 == "10")
        AF0HW03.AF0HWTOT = AF0HW03.AF0HWTOT + AF0HW03.AF0HWHF1[AFWIDX1];
      end
      if (AF0HW01.AF0HWHO1 == "20"
       || AF0HW01.AF0HWHO2 == "20"
       || AF0HW01.AF0HWHO3 == "20"
       || AF0HW01.AF0HWHO4 == "20"
       || AF0HW01.AF0HWHO5 == "20")
        AF0HW03.AF0HWTOT = AF0HW03.AF0HWTOT + AF0HW03.AF0HWHF2[AFWIDX1];
      end
      if (AF0HW01.AF0HWHO1 == "30"
       || AF0HW01.AF0HWHO2 == "30"
       || AF0HW01.AF0HWHO3 == "30"
       || AF0HW01.AF0HWHO4 == "30"
       || AF0HW01.AF0HWHO5 == "30")
        AF0HW03.AF0HWTOT = AF0HW03.AF0HWTOT + AF0HW03.AF0HWHF3[AFWIDX1];
      end
      if (AF0HW01.AF0HWHO1 == "40"
       || AF0HW01.AF0HWHO2 == "40"
       || AF0HW01.AF0HWHO3 == "40"
       || AF0HW01.AF0HWHO4 == "40"
       || AF0HW01.AF0HWHO5 == "40")
        AF0HW03.AF0HWTOT = AF0HW03.AF0HWTOT + AF0HW03.AF0HWHF4[AFWIDX1];
      end
      if (AF0HW01.AF0HWHO1 == "50"
       || AF0HW01.AF0HWHO2 == "50"
       || AF0HW01.AF0HWHO3 == "50"
       || AF0HW01.AF0HWHO4 == "50"
       || AF0HW01.AF0HWHO5 == "50")
        AF0HW03.AF0HWTOT = AF0HW03.AF0HWTOT + AF0HW03.AF0HWHPR[AFWIDX1];
      end
      if (AF0HW01.AF0HWHBK != 0)
        if (AF0HW01.AF0HW-HIST-XSN1[AFWIDX1] <= AF0HW01.AF0HWHFM)
          AF0HW03.AF0HWHTL[AFWIDX1] = AF0HW03.AF0HWTOT; /* Pct totals*/
        else
          AF0HW03.AF0HWHTL[AFWIDX1] = 0; /* Pct totals*/
        end
      else
        AF0HW03.AF0HWHTL[AFWIDX1] = AF0HW03.AF0HWTOT; /* Pct totals*/
      end
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
  end
  ;
  ;
  ;
end // end AF0H110

// Obtain Style/Pct Data
Function AF0H111()
   /* ------------------------------------------------------------*/
              /* ** Obtain Style/Pct Data ***/
   /* If new keys not entered, select set style using old keys.*/
   /* if old keys entered, get new G/A, CAT and SIL combination;*/
      /* set select style using new keys.*/
   /* Obtain and store all rows associated with the style;*/
      /* format all map detail pages.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/
  ;
  if (AF0HW01.AF0HWCNF == "Y"     /* Update confirm flag set*/
   || AF0HW02.AF0HWUPD == "Y"     /* Update set*/
   || AF0HW01.AF0HWOTS == "Y"     /* order type*/
   || converseVar.eventKey is pa2 /* PA2 was pressed*/
   || converseVar.eventKey is pf7 /* PF7 was pressed*/
   || converseVar.eventKey is pf8) /* PF8 was pressed*/
    return; /* Then exit to next process*/
  end
  ;
  ;
  ;
  if (AF0HW02.AF0HWUPD == "1") /* First pass with duplicate data*/
    AF0HW02.AF0HWUPD = " "; /* Reset for update indicator*/
    return; /* Exit to next process*/
  end
  ;
  ;
  ;
  if (AF0HW01.AF0HWHDS == "Y" /* Historical data requested*/
   && AFWREC.AFWSWR == "N")   /* and No Style/Pct  keys changed*/
    return; /* Then exit to next process*/
  end
  ;
  if (AF0HW01.AF0HWHOS == "Y" /* Historical or tp requested*/
   && AFWREC.AFWSWR == "N")   /* and No Style/Pct  keys changed*/
    return; /* Then exit to next process*/
  end
  ;
  ;
  ;
  if (AF9REC.AF9TYP99 == "Y") /* Last G/A,CAT,SIL comb.*/
    AFWREC.AFWSWR = "Y"; /* Force new selection*/
  end
  ;
  ;
  ;
   /* *=======================================**/
   /* *  Check for Data Contention Condition  **/
   /* *=======================================**/
  ;
  if (AF0HW01.AF0HWCIN == "Y") /* Data contention present*/
    ;
    AFWREC.AFWSWR = "Y"; /* Do new select cycle using old keys*/
    ;
  end
  ;
  ;
  ;
   /* *================================================**/
   /* * Set Select Using Old G/A,CAT & SIL Combination **/
   /* * ... And Obtain Next Style from Current Set     **/
   /* *================================================**/
  ;
  if (AFWREC.AFWSWR == "N") /* No new keys entered*/
    ;
    if (converseVar.eventKey is pf16 /* PF13 (Next G/A requested)*/
     || converseVar.eventKey is pf17 /* PF14 (Next lin requested)*/
     || converseVar.eventKey is pf18 /* PF15 (Next CAT requested)*/
     || converseVar.eventKey is pf19) /* PF16 (Next SIL requested)*/
      ;
      AF0HW01.AF0HWCMS = "Y"; /* Get next G/A,CAT,SIL comb.*/
      AF0HW01.AF0HWCSY = 1; /* Set Style ctr to get first style*/
      AF0HW01.AF0HWSYK = " "; /* Reset style to select*/
      AF0HW01.AF0HWOGK = " "; /* Reset style to select*/
      ;
    else
      ;
      AF0HW01.AF0HWCSY = 2; /* Set style ctr to get next style*/
      AF0HW01.AF0HWSYK = XP1REC.SY1STNBR; /* To sty work key*/
      AF0HW01.AF0HWOGK = XP1REC.XOWCD; /* *//* og work key*/
      ;
    end
    ;
    ;
  else
    ;
    ;
     /* *========================================**/
     /* * Set Select Using New Keys,             **/
     /* * ... And Obtain First Style of New Set  **/
     /* * HOWEVER, If Current Style/Color Just   **/
     /* *   Updated, then Set Start at Current   **/
     /* *      STYLE.                            **/
     /* *========================================**/
    ;
    if (AFWREC.AFWSWR == "Y") /* New keys entered*/
      ;
      AF0HS61(); /* Load AF Month Table*/
      ;
      AF0HW01.AF0HWCMS = "Y"; /* Get new G/A.CAT,SIL comb.*/
      set AF9REC empty; /* Clear work record*/
      ;
      AF0HW01.AF0HWCSY = 1; /* Set style ctr to get 1st style*/
      AF0HW01.AF0HWLCT = 0; /* Reset Style loop ctr*/
      ;
      if (AF0HW01.AF0HWCNF == "U") /* Successful update done*/
        ;
        AF0HW01.AF0HWCNF = "N"; /* Reset upd confirm flag*/
        AF0HW01.AF0HWSYK = XP1REC.SY1STNBR; /* Set Curr style*/
        AF0HW01.AF0HWOGK = XP1REC.XOWCD; /* *//* og work key*/
        ;
      else
        ;
        if (AF0HM001.SY1STNBR != " ") /* Particular style entered*/
          AF0HW01.AF0HWSYK = AF0HW01.SY1STNBR; /* To sty work key*/
        else
          AF0HW01.AF0HWSYK = " "; /* To sty work key*/
        end
        ;
        if (AF0HM001.XOWCD != " ") /* Particular OG    entered*/
          AF0HW01.AF0HWOGK = AF0HW01.AF0HWXOW; /* To OG work key*/
        else
          AF0HW01.AF0HWOGK = " "; /* To OG  work key*/
        end
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  AF0HW01.AF0HWCIN = " "; /* Reset contention indicator*/
  ;
  ;
  ;
   /* *========================================================**/
   /* * Obtain type, G/A, line, Cat and Silh Combination **/
   /* *========================================================**/
  ;
  if (AF0HW01.AF0HWCMS != " ") /* Obtain next or new comb.*/
    ;
    AF0HW01.AF0HWCMS = " "; /* Reset indicator*/
    ;
    AF0HS01(); /* Obtain new TP, G/A, LN, CAT & SIL*/
                                   /* Comb*/
    ;
  end
  ;
  ;
  ;
   /* *===================**/
   /* * Select Style Row  **/
   /* *===================**/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors*/
    AF0HS02(); /* Select Scan Style*/
  end
  ;
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors*/
    ;
    AFWREC.AFWIDX5 = 0; /* Reset loop ctr*/
    ;
    ;
    while (AFWREC.AFWIDX5 < AF0HW01.AF0HWCSY) /* Until next style ret*/
      ;
      set AF0HW02 empty; /* Clear working storage record*/
      AF0HS03(); /* Get next(or current) valid style*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
      ;
      AF0HS09(); /* Close Select Scan cursor*/
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        ;
        AF0HS09(); /* Close Select Scan cursor*/
        ;
        AF9REC.AF9TYP99 = "Y"; /* Force combination end*/
        AF9REC.AF9GAG99 = "Y"; /* Force combination end*/
        AF9REC.AF9LIN99 = "Y"; /* Force combination end*/
        AF9REC.AF9CAT99 = "Y"; /* Force combination end*/
        AF9REC.AF9SIL99 = "Y"; /* Force combination end*/
        ;
        set AF0HW02 empty; /* Clear map dtl work area*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* *=========================================================**/
   /* * Check Obtain Data Status, Inactivate All Loop Controls  **/
   /* *=========================================================**/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0HW01.AF0HWPGV = 1; /* Set display at page one*/
    AF0HW01.AF0HWLCT = 0; /* Reset style loop ctr*/
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
  end
  ;
  ;
  ;
end // end AF0H111

// Obtain Historical Data
Function AF0H112()
   /* ------------------------------------------------------------*/
               /* ** Obtain Historical Data ***/
   /* If new keys not entered, the return to calling process.*/
   /* If new keys entered, then obtain data from the historical*/
     /* databases, depending if the style no. was entered or not.*/
   /* Store all sizes/pcent qtys, format into map pages.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/
  ;
  if (AF0HW01.AF0HWHDS == "N" /* Historical Data Select Ind off*/
   || AF0HW01.AF0HWHOS == "Y")
    return; /* Then exit to next process*/
  end
  ;
  ;
  ;
   /* *==========================**/
   /* *  Clear Record Work Area  **/
   /* *==========================**/
  ;
  set AF0HW03 empty; /* Clear working storage record*/
  ;
  ;
  AF0HS62(); /* load as of date season AFMO tables.*/
  ;
   /* *=================================**/
   /* * Select Database to be Accessed  **/
   /* *=================================**/
  ;
  if (AF0HW01.AF0HWHST == " ") /* Historical Style not specified*/
    ;
    AFWREC.AFWIDX1 = 1; /* Reset categ loop index*/
    while (AFWREC.AFWIDX1 <= 3) /* Process all historical categories*/
      ;
      AFWREC.AFWIDX2 = 1; /* Reset selections loop index*/
      ;
      while (AFWREC.AFWIDX2 <= 2) /* Process all selections*/
        AF0HS11(); /* Process Historical Summary DB*/
        AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
      end
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
  else
    ;
    AFWREC.AFWIDX2 = 1; /* Reset selections loop index*/
    ;
    while (AFWREC.AFWIDX2 <= 2) /* Process all selections*/
      AF0HS15(); /* Process Historical Detail DB*/
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
    end
    ;
  end
  ;
  ;
  ;
   /* *==============================**/
   /* *  Compute Summary Qty Totals  **/
   /* *==============================**/
  ;
  AFWREC.AFWIDX1 = 1; /* Reset Loop index*/
  while (AFWREC.AFWIDX1 <= 12) /* Process all months*/
    ;
    AF0HW03.AF0HWTOT = AF0HWHB1[AFWIDX1]; /* To wk area for accum*/
    AF0HW03.AF0HWHB6[AFWIDX1] = AF0HW03.AF0HWHB6[AFWIDX1] +     AF0HW03.AF0HWTOT;
    AF0HW03.AF0HWTOT = AF0HWHB2[AFWIDX1]; /* To wk area for accum*/
    AF0HW03.AF0HWHB6[AFWIDX1] = AF0HW03.AF0HWHB6[AFWIDX1] +     AF0HW03.AF0HWTOT;
    AF0HW03.AF0HWTOT = AF0HWHB3[AFWIDX1]; /* To wk area for accum*/
    AF0HW03.AF0HWHB6[AFWIDX1] = AF0HW03.AF0HWHB6[AFWIDX1] +     AF0HW03.AF0HWTOT;
    AF0HW03.AF0HWTOT = AF0HWHB4[AFWIDX1]; /* To wk area for accum*/
    AF0HW03.AF0HWHB6[AFWIDX1] = AF0HW03.AF0HWHB6[AFWIDX1] +     AF0HW03.AF0HWTOT;
    AF0HW03.AF0HWTOT = AF0HWHB5[AFWIDX1]; /* To wk area for accum*/
    AF0HW03.AF0HWHB6[AFWIDX1] = AF0HW03.AF0HWHB6[AFWIDX1] +     AF0HW03.AF0HWTOT;
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
   /* *==================================**/
   /* *  Compute Historical Percentages  **/
   /* *==================================**/
  ;
  ;
  AF0HW01.AF0HWTPC = 0; /* Initialize total wk area*/
  AFWREC.AFWIDX1 = 1; /* Reset loop index*/
  ;
  while (AFWREC.AFWIDX1 <= 12) /* Process all months*/
                  /* (Compute Grand Qty Total)*/
    AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW03.AF0HWHB6[AFWIDX1];
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  AFWREC.AFWIDX1 = 1; /* Reset Loop index*/
  while (AFWREC.AFWIDX1 <= 12) /* Process all months*/
    ;
                 /* (Compute Historical Percentages)*/
    if (AF0HW03.AF0HWHB6[AFWIDX1] > 0) /* Non-zero qty total*/
      ;
      AF0HW03.AF0HWTF1 = AF0HW03.AF0HWHB1[AFWIDX1]; /* To wk area*/
      AF0HW01.AF0HWPCT = mathLib.round(AF0HW03.AF0HWTF1 / AF0HW01.AF0HWTPC, -mathLib.decimals(AF0HW01.AF0HWPCT));
      AF0HW03.AF0HWHF1[AFWIDX1] = mathLib.round(AF0HW01.AF0HWPCT * 100, -mathLib.decimals(AF0HW03.AF0HWHF1[AFWIDX1]));
      ;
      AF0HW03.AF0HWTF2 = AF0HW03.AF0HWHB2[AFWIDX1]; /* To wk area*/
      AF0HW01.AF0HWPCT = mathLib.round(AF0HW03.AF0HWTF2 / AF0HW01.AF0HWTPC, -mathLib.decimals(AF0HW01.AF0HWPCT));
      AF0HW03.AF0HWHF2[AFWIDX1] = mathLib.round(AF0HW01.AF0HWPCT * 100, -mathLib.decimals(AF0HW03.AF0HWHF2[AFWIDX1]));
      ;
      AF0HW03.AF0HWTF3 = AF0HW03.AF0HWHB3[AFWIDX1]; /* To wk area*/
      AF0HW01.AF0HWPCT = mathLib.round(AF0HW03.AF0HWTF3 / AF0HW01.AF0HWTPC, -mathLib.decimals(AF0HW01.AF0HWPCT));
      AF0HW03.AF0HWHF3[AFWIDX1] = mathLib.round(AF0HW01.AF0HWPCT * 100, -mathLib.decimals(AF0HW03.AF0HWHF3[AFWIDX1]));
      ;
      AF0HW03.AF0HWTF4 = AF0HW03.AF0HWHB4[AFWIDX1]; /* To wk area*/
      AF0HW01.AF0HWPCT = mathLib.round(AF0HW03.AF0HWTF4 / AF0HW01.AF0HWTPC, -mathLib.decimals(AF0HW01.AF0HWPCT));
      AF0HW03.AF0HWHF4[AFWIDX1] = mathLib.round(AF0HW01.AF0HWPCT * 100, -mathLib.decimals(AF0HW03.AF0HWHF4[AFWIDX1]));
      ;
      AF0HW03.AF0HWTF5 = AF0HW03.AF0HWHB5[AFWIDX1]; /* To wk area*/
      AF0HW01.AF0HWPCT = mathLib.round(AF0HW03.AF0HWTF5 / AF0HW01.AF0HWTPC, -mathLib.decimals(AF0HW01.AF0HWPCT));
      AF0HW03.AF0HWHPR[AFWIDX1] = mathLib.round(AF0HW01.AF0HWPCT * 100, -mathLib.decimals(AF0HW03.AF0HWHPR[AFWIDX1]));
      ;
    end
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
   /* *==========================**/
   /* * Check Obtain Data Status **/
   /* *==========================**/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0HW01.AF0HWPGV = 1; /* Set display at page one*/
    AF0HW01.AF0HWHDS = "N"; /* Request for history data completed*/
  end
  ;
  ;
  ;
end // end AF0H112

// Format and display the map
Function AF0H120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0HW01.AF0HWPND != "Y" /* No pop-up windows active*/
   && AFWREC.AFWFIRST != " ") /* or Not the first time*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error found*/
      ;
      AF0H121(); /* Format the data on the map*/
      ;
    else
      ;
      AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0HM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0HM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0HM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0HM001 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  ;
  converse AF0HM001 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF0HM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0HM001.CAITEM; /* Application data*/
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Reset AF9REC First Time Through Indicator*/
   /* ----------------------------------------------------------*/
  ;
  AF9REC.AF9FSTID = "Y"; /* Fst time indicator to 'Y'(es)*/
  ;
  ;
  ;
end // end AF0H120

// Format map data
Function AF0H121()
  ;
   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/
  ;
  set AF0HM001 initial; /* M001 input/output area*/
  ;
  ;
  ;
   /* *===============================**/
   /* *  Check Security Requirements  **/
   /* *===============================**/
  ;
  if (COMMAREA.CACHGFL == "N") /* User not allowed to update*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 9) /* Protect enterable fields*/
      set AF0HM001.AF0HMCF1[AFWIDX5] skip; /* Curr Fut 1*/
      set AF0HM001.AF0HMCF2[AFWIDX5] skip; /* Curr Fut 2*/
      set AF0HM001.AF0HMCF3[AFWIDX5] skip; /* Curr Fut 3*/
      set AF0HM001.AF0HMCF4[AFWIDX5] skip; /* Curr Fut 4*/
      set AF0HM001.AF0HMCPR[AFWIDX5] skip; /* Curr Prop Pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    ;
  end
  ;
   /* *=====================**/
   /* *  Format Map Header  **/
   /* *=====================**/
  ;
                /* (Format Header Start Flds)*/
  AF0HM001.PG1FCTCD = AF0HW01.AF0HWUSR; /* Forecaster id*/
  AF0HM001.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0HM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0HM001.XDVCD = XP1REC.XDVCD; /* dIVISION CODE*/
  AF0HM001.XOWCD = AF0HW01.AF0HWXOW; /* Start Owner Group*/
  AF0HM001.XPRCD = AF0HW01.AF0HWPTP; /* Start xpr cd*/
  AF0HM001.XGACD = AF0HW01.AF0HWGA; /* Start G/A cd*/
  AF0HM001.XPLCD = AF0HW01.AF0HWPLN; /* Start ln  cd*/
  AF0HM001.XPCCD = AF0HW01.AF0HWCAT; /* Start CAT cd*/
  AF0HM001.XSUCD = AF0HW01.AF0HWSIL; /* Start SIL cd*/
  AF0HM001.SY1STNBR = AF0HW01.AF0HWSTY; /* Start Style no.*/
  AF0HM001.AF0HMOT1 = AF0HW01.AF0HWOT1; /* order type 1-fut1*/
  AF0HM001.AF0HMOT2 = AF0HW01.AF0HWOT2; /* order type 2-fut2*/
  AF0HM001.AF0HMOT3 = AF0HW01.AF0HWOT3; /* order type 3-fut3*/
  AF0HM001.AF0HMOT4 = AF0HW01.AF0HWOT4; /* order type 4-fut4*/
  AF0HM001.AF0HMOT5 = AF0HW01.AF0HWOT5; /* order type 5-prop*/
  AF0HM001.AF0HMBKD = AF0HW01.AF0HWBKD; /* bk thru need date*/
  AF0HM001.AF0HOVFT = AF0HW01.AF0HWMTF; /* Ov Mult Factor*/
  AF0HM001.AF0HOVFL = AF0HW01.AF0HWVFL; /* Ov Mult Factor FL*/
  AF0HM001.AF0HHOFT = AF0HW01.AF0HWVFT; /* Hist Ov Mult Factor*/
  ;
  ;
  ;
  if (AF9REC.AF9GAIXM > 0 /* XGA Combination index valid*/
   && AF9REC.AF9PCIXM > 0 /* XPC Combination index valid*/
   && AF9REC.AF9SUIXM > 0) /* XSU Combination index valid*/
    ;
               /* (Format Current Combination Flds)*/
    AF0HM001.AF0HMCXPR = XP1REC.XPRCD; /* Cur XPR cd*/
    AF0HM001.AF0HMCGA = XP1REC.XGACD; /* Cur G/A cd*/
    AF0HM001.AF0HMCPL = XP1REC.XPLCD; /* Cur LIN cd*/
    AF0HM001.AF0HMCPC = XP1REC.XPCCD; /* Cur CAT cd*/
    AF0HM001.AF0HMCSI = XP1REC.XSUCD; /* Cur SIL cd*/
    AF0HM001.AF0HMCOG = XP1REC.XOWCD; /* cur XOW cd*/
    ;
  end
  ;
  ;
  if (AF0HW01.AF0HWVST != " ") /* Style not in DPRODG.VSYCLR01*/
    AF0HW01.AF0HWVST = " "; /* Reset indicator*/
    AF0HM001.AF0HMCSY = XP1REC.SY1STNBR; /* Cur Style*/
    set AF0HM001.AF0HMCSY skip, bold; /* Highlight style*/
  else
    AF0HM001.AF0HMCSY = XP1REC.SY1STNBR; /* Cur Style*/
  end
  ;
  ;
          /* (Format Historical Selection Fields)*/
  AF0HM001.AF0HMHDV = AF0HW01.AF0HWHDV; /* Hist div cd*/
  AF0HM001.AF0HMHXPR = AF0HW01.AF0HWHPT; /* Hist xpr cd*/
  AF0HM001.AF0HMHGC = AF0HW01.AF0HWHGC; /* Hist G/A cd*/
  AF0HM001.AF0HMHOG = AF0HW01.AF0HWHOG; /* Hist XOW cd*/
  AF0HM001.AF0HMHPL = AF0HW01.AF0HWHPL; /* Hist xpl cd*/
  AF0HM001.AF0HMHSC = AF0HW01.AF0HWHSC; /* Hist Sil cd*/
  AF0HM001.AF0HMHCC[1] = AF0HW01.AF0HWHCC[1]; /* Hist Cat 1*/
  AF0HM001.AF0HMHCC[2] = AF0HW01.AF0HWHCC[2]; /* Hist Cat 2*/
  AF0HM001.AF0HMHCC[3] = AF0HW01.AF0HWHCC[3]; /* Hist Cat 3*/
  AF0HM001.AF0HMSTY = AF0HW01.AF0HWHST; /* Hist Style*/
  AF0HM001.AF0HMHS1 = AF0HW01.AF0HWHS1; /* Hist Season cd 1*/
  AF0HM001.AF0HMHY1 = AF0HW01.AF0HWHY1; /* Hist Season yr 1*/
  AF0HM001.AF0HMHD1 = AF0HW01.AF0HWDX1; /* Hist As of Date 1*/
  AF0HM001.AF0HMHS2 = AF0HW01.AF0HWHS2; /* Hist Season cd 2*/
  AF0HM001.AF0HMHY2 = AF0HW01.AF0HWHY2; /* Hist Season yr 2*/
  AF0HM001.AF0HMHD2 = AF0HW01.AF0HWDX2; /* Hist As of Date 2*/
  AF0HM001.AF0HMHO1 = AF0HW01.AF0HWHO1; /* hist order type 1-fut1*/
  AF0HM001.AF0HMHO2 = AF0HW01.AF0HWHO2; /* hist order type 2-fut2*/
  AF0HM001.AF0HMHO3 = AF0HW01.AF0HWHO3; /* hist order type 3-fut3*/
  AF0HM001.AF0HMHO4 = AF0HW01.AF0HWHO4; /* hist order type 4-fut4*/
  AF0HM001.AF0HMHO5 = AF0HW01.AF0HWHO5; /* hist order type 5-prop*/
  AF0HM001.AF0HMHBK = AF0HW01.AF0HWHBK; /* bk thru need date*/
  AF0HM001.AF0HOVFT = AF2REC.AF-MUL-FCTR; /* ov multiplier fctr*/
  AF0HM001.AF0HOVFL = AF2REC.AF-MUL-FCTR-FL; /* ov mul fctr flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Process Style/Pct - Historical Map Detail Lines*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *====================================**/
   /* *  Process Style/Pct (Current) Data  **/
   /* *====================================**/
  ;
  ;
  if (AF9REC.AF9GAG99 == "Y" /* No more XGACDs to process*/
   && AF9REC.AF9CAT99 == "Y" /* No more XPCCDs to process*/
   && AF9REC.AF9SIL99 == "Y") /* No more XSUCDs to process*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMCF1[AFWIDX5] skip, invisible; /* Curr Fut 1*/
      set AF0HM001.AF0HMCF2[AFWIDX5] skip, invisible; /* Curr Fut 2*/
      set AF0HM001.AF0HMCF3[AFWIDX5] skip, invisible; /* Curr Fut 3*/
      set AF0HM001.AF0HMCF4[AFWIDX5] skip, invisible; /* Curr Fut 4*/
      set AF0HM001.AF0HMCPR[AFWIDX5] skip, invisible; /* Curr Prop*/
      set AF0HM001.AF0HMCTL[AFWIDX5] skip, invisible; /* Curr Pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    ;
    set AF0HM001.AF0HMCGT skip, invisible; /* Curr grand total*/
    converseLib.validationFailed(15); /* Indicate no data to disp*/
    AFWREC.AFWPRCSN = "121 "; /* Process number*/
    ;
    ;
  else /* (Style found)*/
    ;
    ;
    /* ------------------------------------------------------------*/
      /* If invalid percentage field change was made (Total Percent*/
        /* not = 0 or 100) and PA2 was pressed, the FF. code will*/
        /* restore the original contents of the map for the current*/
        /* style/color/size being processed, and reset program*/
        /* variables triggering update activities.*/
    /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is pa2) /* PA2 (Clear/Restore Display) pressed*/
      ;
      move AF0HW02.AF0HWCW1 to AF0HW02.AF0HWCF1[1] for all; /* Restore saved Fut 1*/
      move AF0HW02.AF0HWCW2 to AF0HW02.AF0HWCF2[1] for all; /* Restore saved Fut 2*/
      move AF0HW02.AF0HWCW3 to AF0HW02.AF0HWCF3[1] for all; /* Restore saved Fut 3*/
      move AF0HW02.AF0HWCW4 to AF0HW02.AF0HWCF4[1] for all; /* Restore saved Fut 4*/
      move AF0HW02.AF0HWCW5 to AF0HW02.AF0HWCPR[1] for all; /* Restore saved Fut 5*/
      move AF0HW02.AF0HWCTW to AF0HW02.AF0HWCTL[1] for all; /* Restore saved Fut tot*/
      ;
      move " " to AF0HW02.AF0HWCHG[1] for all; /* Reset change indicator*/
      AF0HW02.AF0HWUPD = " "; /* Reset update indicator*/
      AF0HW01.AF0HWCNF = "N"; /* Reset upd confirm indicator*/
      ;
    end
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    AFWREC.AFWIXM = 1; /* Set Map index*/
    AF0HW01.AF0HWTPC = 0; /* Initialize total wk area*/
    ;
    AF0HM001.AF0HMMTH[1] = "ERL"; /* early Mth*/
    AF0HM001.AF0HMMTH[AF0HW-LATE-IDX] = "LAT"; /* early Mth*/
    while (AFWREC.AFWIDX5 <= 9) /* Process 9 months*/
      ;
      AF0HM001.AF0HMCF1[AFWIXM] = AF0HW02.AF0HWCF1[AFWIDX5]; /* Fut1*/
      AF0HM001.AF0HMCF2[AFWIXM] = AF0HW02.AF0HWCF2[AFWIDX5]; /* Fut2*/
      AF0HM001.AF0HMCF3[AFWIXM] = AF0HW02.AF0HWCF3[AFWIDX5]; /* Fut3*/
      AF0HM001.AF0HMCF4[AFWIXM] = AF0HW02.AF0HWCF4[AFWIDX5]; /* Fut4*/
      AF0HM001.AF0HMCPR[AFWIXM] = AF0HW02.AF0HWCPR[AFWIDX5]; /* Prop*/
      AF0HM001.AF0HMCTL[AFWIXM] = AF0HW02.AF0HWCTL[AFWIDX5]; /* Tot*/
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCTL[AFWIDX5];
      ;
      AFWREC.AFWIDX4 = AF0HW-AFMO-MNTH[AFWIDX5];
      if (AFWREC.AFWIDX4 > 0
       && AFWREC.AFWIDX4 <= 12)
        AF0HM001.AF0HMMTH[AFWIXM] = AF0HW01.AF0HWMTB[AFWIDX4]; /* Mth*/
      end
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment map index*/
      ;
    end
    ;
    AF0HM001.AF0HMCGT = AF0HW01.AF0HWTPC; /* Grand total*/
    ;
    if (AF0HW01.AF0HWTPC > 0)
      AF0HW01.AF0HWMTF = 0;
      AF0HW01.AF0HWMTF = mathLib.round(100 / AF0HW01.AF0HWTPC, -mathLib.decimals(AF0HW01.AF0HWMTF)); /* multiplier rounded*/
      AF0HM001.AF0HMCMF = AF0HW01.AF0HWMTF;
    end
    ;
  end
  ;
  if (AF0HW01.AF0HWOT1 != "10"
   && AF0HW01.AF0HWOT2 != "10"
   && AF0HW01.AF0HWOT3 != "10"
   && AF0HW01.AF0HWOT4 != "10"
   && AF0HW01.AF0HWOT5 != "10")
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMCF1[AFWIDX5] skip, invisible; /* Curr Fut 1*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
  end
   /* ;;*/
  if (AF0HW01.AF0HWOT1 != "20"
   && AF0HW01.AF0HWOT2 != "20"
   && AF0HW01.AF0HWOT3 != "20"
   && AF0HW01.AF0HWOT4 != "20"
   && AF0HW01.AF0HWOT5 != "20")
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMCF2[AFWIDX5] skip, invisible; /* Curr Fut 1*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
  end
   /* ;;*/
  if (AF0HW01.AF0HWOT1 != "30"
   && AF0HW01.AF0HWOT2 != "30"
   && AF0HW01.AF0HWOT3 != "30"
   && AF0HW01.AF0HWOT4 != "30"
   && AF0HW01.AF0HWOT5 != "30")
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMCF3[AFWIDX5] skip, invisible; /* Curr Fut 1*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
  end
   /* ;;*/
  if (AF0HW01.AF0HWOT1 != "40"
   && AF0HW01.AF0HWOT2 != "40"
   && AF0HW01.AF0HWOT3 != "40"
   && AF0HW01.AF0HWOT4 != "40"
   && AF0HW01.AF0HWOT5 != "40")
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMCF4[AFWIDX5] skip, invisible; /* Curr Fut 1*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
  end
   /* ;;*/
  if (AF0HW01.AF0HWOT1 != "50"
   && AF0HW01.AF0HWOT2 != "50"
   && AF0HW01.AF0HWOT3 != "50"
   && AF0HW01.AF0HWOT4 != "50"
   && AF0HW01.AF0HWOT5 != "50")
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMCPR[AFWIDX5] skip, invisible; /* Curr Fut 1*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
  end
   /* ;;*/
  if (AF0HW01.AF0HWBKD > 0)
    ;
    if (AF0HW01.AF0HWAFM in AF0HW01.AF0HW-AFMO-TBLE)
      AFWREC.AFWIDX5 = sysVar.arrayIndex + 1;
    else
      AFWREC.AFWIDX5 = AF0HW01.AF0HW-LATE-IDX + 1;
    end
  else
    AFWREC.AFWIDX5 = AF0HW01.AF0HW-LATE-IDX + 1;
  end
  ;
  while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
    set AF0HM001.AF0HMCF1[AFWIDX5] skip, invisible; /* Curr Fut 1*/
    set AF0HM001.AF0HMCF2[AFWIDX5] skip, invisible; /* Curr Fut 2*/
    set AF0HM001.AF0HMCF3[AFWIDX5] skip, invisible; /* Curr Fut 3*/
    set AF0HM001.AF0HMCF4[AFWIDX5] skip, invisible; /* Curr Fut 4*/
    set AF0HM001.AF0HMCPR[AFWIDX5] skip, invisible; /* Curr Prop*/
    set AF0HM001.AF0HMCTL[AFWIDX5] skip, invisible; /* Curr Pcent*/
    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
  end
  ;
  ;
   /* *===========================**/
   /* *  Process Historical Data  **/
   /* *===========================**/
  ;
  ;
  if (AF0HW03.AF0HWDPI == "Y") /* Historical Data processed*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 9)
      ;
      AF0HM001.AF0HMHF1[AFWIDX5] = AF0HW03.AF0HWHF1[AFWIDX5]; /* Fut1*/
      AF0HM001.AF0HMHF2[AFWIDX5] = AF0HW03.AF0HWHF2[AFWIDX5]; /* Fut2*/
      AF0HM001.AF0HMHF3[AFWIDX5] = AF0HW03.AF0HWHF3[AFWIDX5]; /* Fut3*/
      AF0HM001.AF0HMHF4[AFWIDX5] = AF0HW03.AF0HWHF4[AFWIDX5]; /* Fut4*/
      AF0HM001.AF0HMHPR[AFWIDX5] = AF0HW03.AF0HWHPR[AFWIDX5]; /* Prop*/
      AF0HM001.AF0HMHTL[AFWIDX5] = AF0HW03.AF0HWHTL[AFWIDX5]; /* Tot*/
      ;
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      ;
    end
    ;
    AF0HW01.AF0HWTPC = 0; /* Initialize total wk area*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 9) /* Accumulate total pcents*/
      ;
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW03.AF0HWHTL[AFWIDX5];
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      ;
    end
    ;
    AF0HM001.AF0HMHGT = AF0HW01.AF0HWTPC; /* Grand total*/
    ;
    if (AF0HW01.AF0HWTPC > 0)
      AF0HW01.AF0HWMTF = 0;
      AF0HW01.AF0HWMTF = mathLib.round(100 / AF0HW01.AF0HWTPC, -mathLib.decimals(AF0HW01.AF0HWMTF)); /* multiplier rounded*/
      AF0HM001.AF0HMHMF = AF0HW01.AF0HWMTF;
      ;
    end
    if (AF0HW01.AF0HWHO1 != "10"
     && AF0HW01.AF0HWHO2 != "10"
     && AF0HW01.AF0HWHO3 != "10"
     && AF0HW01.AF0HWHO4 != "10"
     && AF0HW01.AF0HWHO5 != "10")
      AFWREC.AFWIDX5 = 1; /* Set loop index*/
      while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
        set AF0HM001.AF0HMHF1[AFWIDX5] skip, invisible; /* Hist Fut 1*/
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      end
    end
    /* ;;*/
    if (AF0HW01.AF0HWHO1 != "20"
     && AF0HW01.AF0HWHO2 != "20"
     && AF0HW01.AF0HWHO3 != "20"
     && AF0HW01.AF0HWHO4 != "20"
     && AF0HW01.AF0HWHO5 != "20")
      AFWREC.AFWIDX5 = 1; /* Set loop index*/
      while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
        set AF0HM001.AF0HMHF2[AFWIDX5] skip, invisible; /* Hist Fut 1*/
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      end
    end
    /* ;;*/
    if (AF0HW01.AF0HWHO1 != "30"
     && AF0HW01.AF0HWHO2 != "30"
     && AF0HW01.AF0HWHO3 != "30"
     && AF0HW01.AF0HWHO4 != "30"
     && AF0HW01.AF0HWHO5 != "30")
      AFWREC.AFWIDX5 = 1; /* Set loop index*/
      while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
        set AF0HM001.AF0HMHF3[AFWIDX5] skip, invisible; /* Hist Fut 1*/
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      end
    end
    /* ;;*/
    if (AF0HW01.AF0HWHO1 != "40"
     && AF0HW01.AF0HWHO2 != "40"
     && AF0HW01.AF0HWHO3 != "40"
     && AF0HW01.AF0HWHO4 != "40"
     && AF0HW01.AF0HWHO5 != "40")
      AFWREC.AFWIDX5 = 1; /* Set loop index*/
      while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
        set AF0HM001.AF0HMHF4[AFWIDX5] skip, invisible; /* Hist Fut 1*/
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      end
    end
    /* ;;*/
    if (AF0HW01.AF0HWHO1 != "50"
     && AF0HW01.AF0HWHO2 != "50"
     && AF0HW01.AF0HWHO3 != "50"
     && AF0HW01.AF0HWHO4 != "50"
     && AF0HW01.AF0HWHO5 != "50")
      AFWREC.AFWIDX5 = 1; /* Set loop index*/
      while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
        set AF0HM001.AF0HMHPR[AFWIDX5] skip, invisible; /* Hist Fut 1*/
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      end
    end
    /* ;;*/
    ;
  else /* (No Historical Data Retrieved)*/
    ;
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMHF1[AFWIDX5] skip, invisible; /* Hist Fut 1*/
      set AF0HM001.AF0HMHF2[AFWIDX5] skip, invisible; /* Hist Fut 2*/
      set AF0HM001.AF0HMHF3[AFWIDX5] skip, invisible; /* Hist Fut 3*/
      set AF0HM001.AF0HMHF4[AFWIDX5] skip, invisible; /* Hist Fut 4*/
      set AF0HM001.AF0HMHPR[AFWIDX5] skip, invisible; /* Hist Prop*/
      set AF0HM001.AF0HMHTL[AFWIDX5] skip, invisible; /* Hist Pcent Total*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    ;
    if (AF0HM001.AF0HMSTY != " "    /* Style entered*/
     || AF0HM001.AF0HMHGC != " "    /* or Valid Gender/Age cd*/
     || AF0HM001.AF0HMHSC != " "    /* or Valid Silhouette cd*/
     || AF0HM001.AF0HMHCC[1] != " " /* Categ 1 valid*/
     || AF0HM001.AF0HMHCC[2] != " " /* or Categ 2 valid*/
     || AF0HM001.AF0HMHCC[3] != " ") /* or Categ 3 valid*/
      ;
      converseLib.validationFailed(15); /* Indicate no data to display*/
      AFWREC.AFWPRCSN = "121 "; /* Process number*/
      ;
    end
    ;
  end
  ;
  if (AF0HW01.AF0HWHBK > 0)
    ;
    if (AF0HW01.AF0HWHFM in AF0HW01.AF0HW-HIST-XSN1)
      AFWREC.AFWIDX5 = sysVar.arrayIndex + 1;
    else
      AFWREC.AFWIDX5 = AF0HW01.AF0HW-LATE-IDX + 1;
    end
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMHF1[AFWIDX5] skip, invisible; /* Hist Fut 1*/
      set AF0HM001.AF0HMHF2[AFWIDX5] skip, invisible; /* Hist Fut 2*/
      set AF0HM001.AF0HMHF3[AFWIDX5] skip, invisible; /* Hist Fut 3*/
      set AF0HM001.AF0HMHF4[AFWIDX5] skip, invisible; /* Hist Fut 4*/
      set AF0HM001.AF0HMHPR[AFWIDX5] skip, invisible; /* Hist Prop*/
      set AF0HM001.AF0HMHTL[AFWIDX5] skip, invisible; /* Hist Pcent Total*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
  end
  ;
  ;
   /* *===================**/
   /* *  Position Cursor  **/
   /* *===================**/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    if (COMMAREA.CACHGFL == "Y") /* Updates allowed*/
      if (AF0HW01.AF0HWOT1 == "50"
       || AF0HW01.AF0HWOT2 == "50"
       || AF0HW01.AF0HWOT3 == "50"
       || AF0HW01.AF0HWOT4 == "50"
       || AF0HW01.AF0HWOT5 == "50")
        set AF0HM001.AF0HMCPR[1] cursor; /* Position cursor*/
      end
      if (AF0HW01.AF0HWOT1 == "40"
       || AF0HW01.AF0HWOT2 == "40"
       || AF0HW01.AF0HWOT3 == "40"
       || AF0HW01.AF0HWOT4 == "40"
       || AF0HW01.AF0HWOT5 == "40")
        set AF0HM001.AF0HMCF4[1] cursor; /* Position cursor*/
      end
      if (AF0HW01.AF0HWOT1 == "30"
       || AF0HW01.AF0HWOT2 == "30"
       || AF0HW01.AF0HWOT3 == "30"
       || AF0HW01.AF0HWOT4 == "30"
       || AF0HW01.AF0HWOT5 == "30")
        set AF0HM001.AF0HMCF3[1] cursor; /* Position cursor*/
      end
      if (AF0HW01.AF0HWOT1 == "20"
       || AF0HW01.AF0HWOT2 == "20"
       || AF0HW01.AF0HWOT3 == "20"
       || AF0HW01.AF0HWOT4 == "20"
       || AF0HW01.AF0HWOT5 == "20")
        set AF0HM001.AF0HMCF2[1] cursor; /* Position cursor*/
      end
      if (AF0HW01.AF0HWOT1 == "10"
       || AF0HW01.AF0HWOT2 == "10"
       || AF0HW01.AF0HWOT3 == "10"
       || AF0HW01.AF0HWOT4 == "10"
       || AF0HW01.AF0HWOT5 == "10")
        set AF0HM001.AF0HMCF1[1] cursor; /* Position cursor*/
        set AF0HM001.AF0HOVFT cursor; /* Position cursor*/
      end
    else /* (No updates allowed)*/
      set AF0HM001.XSECD cursor; /* Position cursor*/
    end
    ;
  else
    ;
    set AF0HM001.XSECD cursor; /* Position cursor*/
    ;
  end
  ;
  ;
  ;
end // end AF0H121

// Check Attention ID
Function AF0H130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0HM001 initial; /* Clear the map fields*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AF0HM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0HM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0HM001.CAITEM; /* Application data*/
      ;
      XP1REC.XDVCD = AF0HW01.AF0HWXDV; /* Restore start XdvCD*/
      XP1REC.XOWCD = AF0HW01.AF0HWXOW; /* Restore start XowCD*/
      XP1REC.XPRCD = AF0HW01.AF0HWPTP; /* Restore start xprCD*/
      XP1REC.XGACD = AF0HW01.AF0HWGA; /* Restore start XGACD*/
      XP1REC.XPLCD = AF0HW01.AF0HWPLN; /* Restore start xplCD*/
      XP1REC.XPCCD = AF0HW01.AF0HWCAT; /* Restore start xpcCD*/
      XP1REC.XSUCD = AF0HW01.AF0HWSIL; /* Restore start xsuCD*/
      XP1REC.SY1STNBR = AF0HW01.SY1STNBR; /* Restore start style*/
      ;
      AF0HW01.AF0HWXDV = " "; /* Clear start xdvCD*/
      AF0HW01.AF0HWXOW = " "; /* Clear start xowCD*/
      AF0HW01.AF0HWPTP = " "; /* Clear start xprCD*/
      AF0HW01.AF0HWPLN = " "; /* Clear start xplCD*/
      AF0HW01.AF0HWGA = " "; /* Clear start XGACD*/
      AF0HW01.AF0HWCAT = " "; /* Clear start xpcCD*/
      AF0HW01.AF0HWSIL = " "; /* Clear start xsuCD*/
      AF0HW01.SY1STNBR = " "; /* Clear start style*/
      ;
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0HM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF0HM001.CAITEM > " ") /* Application data was entered*/
    set AF0HM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0HM001"; /* Appl find code*/
    end
    ;
    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "AF0R"; /* Appl find code*/
    end
    ;
    XP1REC.XDVCD = AF0HW01.AF0HWXDV; /* Restore start XdvCD*/
    XP1REC.XOWCD = AF0HW01.AF0HWXOW; /* Restore start xowCD*/
    XP1REC.XPRCD = AF0HW01.AF0HWPTP; /* Restore start xprCD*/
    XP1REC.XGACD = AF0HW01.AF0HWGA; /* Restore start XGACD*/
    XP1REC.XPLCD = AF0HW01.AF0HWPLN; /* Restore start xplCD*/
    XP1REC.XPCCD = AF0HW01.AF0HWCAT; /* Restore start xpcCD*/
    XP1REC.XSUCD = AF0HW01.AF0HWSIL; /* Restore start xsuCD*/
    XP1REC.SY1STNBR = AF0HW01.SY1STNBR; /* Restore start style*/
    ;
    ;
    AF0HW01.AF0HWXDV = " "; /* Clear start xdvCD*/
    AF0HW01.AF0HWXOW = " "; /* Clear start xowCD*/
    AF0HW01.AF0HWPTP = " "; /* Clear start xprCD*/
    AF0HW01.AF0HWPLN = " "; /* Clear start xplCD*/
    AF0HW01.AF0HWGA = " "; /* Clear start XGACD*/
    AF0HW01.AF0HWCAT = " "; /* Clear start xpcCD*/
    AF0HW01.AF0HWSIL = " "; /* Clear start xsuCD*/
    AF0HW01.SY1STNBR = " "; /* Clear start style*/
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AFWREC.AFWFIRST == " ") /* First time through*/
    ;
    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf16 /* PF15 was pressed*/
   || converseVar.eventKey is pf17 /* PF16 was pressed*/
   || converseVar.eventKey is pf18 /* PF17 was pressed*/
   || converseVar.eventKey is pf19) /* PF18 was pressed*/
    ;
    if (AF9REC.AF9GAG99 == "Y" /* Last G/A code retrieved*/
     || AF9REC.AF9LIN99 == "Y" /* Last lIN code retrieved*/
     || AF9REC.AF9CAT99 == "Y" /* Last CAT code retrieved*/
     || AF9REC.AF9SIL99 == "Y") /* Last SIL code retrieved*/
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(15); /* Indicate no data to display*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0H130

// Reset Hilight Flds,Disp Pop-Up
Function AF0H140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0HM001.PG1FCTCD normal; /* Forecaster cd*/
  set AF0HM001.XSECD normal; /* Sesn cd*/
  set AF0HM001.XSNYR normal; /* Sesn yr*/
  set AF0HM001.XDVCD normal; /* Division Code*/
  set AF0HM001.XOWCD normal; /* Owner Group*/
  set AF0HM001.XPRCD normal; /* Product Type*/
  set AF0HM001.XGACD normal; /* Gender Age cd*/
  set AF0HM001.XPLCD normal; /* Product Line*/
  set AF0HM001.XPCCD normal; /* Category cd*/
  set AF0HM001.XSUCD normal; /* Silhouette cd*/
  set AF0HM001.SY1STNBR normal; /* Style no.*/
  set AF0HM001.AF0HMOT1 normal; /* fut1*/
  set AF0HM001.AF0HMOT2 normal; /* fut2*/
  set AF0HM001.AF0HMOT3 normal; /* fut3*/
  set AF0HM001.AF0HMOT4 normal; /* fut4*/
  set AF0HM001.AF0HMOT5 normal; /* fut5*/
  set AF0HM001.AF0HMBKD normal; /* bk date*/
  ;
  set AF0HM001.AF0HMHXPR normal; /* Hist xpr cd*/
  set AF0HM001.AF0HMHPL normal; /* Hist xpl cd*/
  set AF0HM001.AF0HMHGC normal; /* Hist G/A cd*/
  set AF0HM001.AF0HMHOG normal; /* Hist XOW cd*/
  set AF0HM001.AF0HMHSC normal; /* Hist Sil cd*/
  set AF0HM001.AF0HMHCC[1] normal; /* Hist Cat 1*/
  set AF0HM001.AF0HMHCC[2] normal; /* Hist Cat 2*/
  set AF0HM001.AF0HMHCC[3] normal; /* Hist Cat 3*/
  set AF0HM001.AF0HMSTY normal; /* Hist Style*/
  set AF0HM001.AF0HMHS1 normal; /* Hist Season cd 1*/
  set AF0HM001.AF0HMHY1 normal; /* Hist Season yr 1*/
  set AF0HM001.AF0HMHD1 normal; /* Hist As of Date 1*/
  set AF0HM001.AF0HMHS2 normal; /* Hist Season cd 2*/
  set AF0HM001.AF0HMHY2 normal; /* Hist Season yr 2*/
  set AF0HM001.AF0HMHD2 normal; /* Hist As of Date 2*/
  set AF0HM001.AF0HMHO1 normal; /* fut1*/
  set AF0HM001.AF0HMHO2 normal; /* fut2*/
  set AF0HM001.AF0HMHO3 normal; /* fut3*/
  set AF0HM001.AF0HMHO4 normal; /* fut4*/
  set AF0HM001.AF0HMHO5 normal; /* fut5*/
  set AF0HM001.AF0HMHBK normal; /* bk date*/
  ;
  AF0HM001.XXXPRCNM = "AF0H    "; /* Reset process name*/
  ;
  ;
  set AF0HM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0HM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/
  ;
  if (AF0HM001.XSECD == "?"       /* Season cd*/
   || AF0HM001.XDVCD == "?"       /* Division code*/
   || AF0HM001.XPRCD == "?"       /* Product type code*/
   || AF0HM001.XGACD == "?"       /* Gender/Age cd*/
   || AF0HM001.XOWCD == "?"       /* Owner Group code*/
   || AF0HM001.XPLCD == "?"       /* Product line code*/
   || AF0HM001.XPCCD == "?"       /* Category cd*/
   || AF0HM001.XSUCD == "?"       /* Silhouette cd*/
   || AF0HM001.AF0HMHDV == "?"    /* Historical division code*/
   || AF0HM001.AF0HMHXPR == "?"   /* Historical product type code*/
   || AF0HM001.AF0HMHGC == "?"    /* Historical G/A cd*/
   || AF0HM001.AF0HMHOG == "?"    /* Historical XOW cd*/
   || AF0HM001.AF0HMHPL == "?"    /* Historical product line code*/
   || AF0HM001.AF0HMHCC[1] == "?" /* Historical Cat cd 1*/
   || AF0HM001.AF0HMHCC[2] == "?" /* Historical Cat cd 2*/
   || AF0HM001.AF0HMHCC[3] == "?" /* Historical Cat cd 3*/
   || AF0HM001.AF0HMHSC == "?"    /* Historical Sil cd*/
   || AF0HM001.AF0HMHS1 == "?"    /* Historical Season cd 1*/
   || AF0HM001.AF0HMHS2 == "?")   /* Historical Season cd 2*/
    ;
    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    ;
    AF0HW01.AF0HWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season cd*/
   /* *============================**/
  ;
  if (AF0HM001.XSECD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XSECD = AF0HM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSE(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    end
    AF0HM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XOWCD   **/
   /* *============================**/
  ;
  if (AF0HM001.XOWCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XOWCD = AF0HM001.XOWCD; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Whse 51*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSOW(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    end
    AF0HM001.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XDVCD   **/
   /* *============================**/
  ;
  if (AF0HM001.XDVCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XDVCD = AF0HM001.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSDV(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    end
    AF0HM001.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPRCD   * product type code*/
   /* *============================**/
  ;
  if (AF0HM001.XPRCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPRCD = AF0HM001.XPRCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPR(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    end
    AF0HM001.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
    ;
  end
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/
  ;
  if (AF0HM001.XGACD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XGACD = AF0HM001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSGA(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    end
    AF0HM001.XGACD = XP1REC.XGACD; /* Move selected code to map*/
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPLCD   * product line code*/
   /* *============================**/
  ;
  if (AF0HM001.XPLCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPLCD = AF0HM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPL(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    end
    AF0HM001.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/
  ;
  if (AF0HM001.XPCCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPCCD = AF0HM001.XPCCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPC(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end
    AF0HM001.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
    ;
  end
  ;
  ;
  ;
   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Silhouette cd*/
   /* *=============================**/
  ;
  ;
  if (AF0HM001.XSUCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XSUCD = AF0HM001.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSU(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    end
    AF0HM001.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/
    ;
  end
  ;
  ;
  ;
  ;
  ;
   /* *=====================================**/
   /* *  Pop-up Window for Historical XDVCD **/
   /* *=====================================**/
  ;
  if (AF0HM001.AF0HMHDV == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSDV = XP1REC.XDVCD; /* Save orig XP1REC fld*/
    XP1REC.XDVCD = AF0HM001.AF0HMHDV; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSDV(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    end
    ;
    AF0HM001.AF0HMHDV = XP1REC.XDVCD; /* Move selected code to map*/
    ;
    XP1REC.XDVCD = AF0HW01.AF0HWSDV; /* Restore orig XP1REC fld*/
    ;
  end
  ;
   /* *=====================================**/
   /* *  Pop-up Window for Historical XPRCD **/
   /* *=====================================**/
  ;
  if (AF0HM001.AF0HMHXPR == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSPR = XP1REC.XPRCD; /* Save orig XP1REC fld*/
    XP1REC.XPRCD = AF0HM001.AF0HMHXPR; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPR(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    end
    ;
    AF0HM001.AF0HMHXPR = XP1REC.XPRCD; /* Move selected code to map*/
    ;
    XP1REC.XPRCD = AF0HW01.AF0HWSPR; /* Restore orig XP1REC fld*/
    ;
  end
  ;
  ;
   /* *=====================================**/
   /* *  Pop-up Window for Historical XGACD **/
   /* *=====================================**/
  ;
  if (AF0HM001.AF0HMHGC == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSGA = XP1REC.XGACD; /* Save orig XP1REC fld*/
    XP1REC.XGACD = AF0HM001.AF0HMHGC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSGA(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    end
    ;
    AF0HM001.AF0HMHGC = XP1REC.XGACD; /* Move selected code to map*/
    ;
    XP1REC.XGACD = AF0HW01.AF0HWSGA; /* Restore orig XP1REC fld*/
    ;
  end
  ;
   /* *=====================================**/
   /* *  Pop-up Window for Historical XPLCD **/
   /* *=====================================**/
  ;
  if (AF0HM001.AF0HMHPL == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSPL = XP1REC.XPLCD; /* Save orig XP1REC fld*/
    XP1REC.XPLCD = AF0HM001.AF0HMHPL; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPL(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    end
    ;
    AF0HM001.AF0HMHPL = XP1REC.XPLCD; /* Move selected code to map*/
    ;
    XP1REC.XPLCD = AF0HW01.AF0HWSPL; /* Restore orig XP1REC fld*/
    ;
  end
  ;
  ;
  ;
   /* *=====================================**/
   /* *  Pop-up Window for Historical XPCCD * Category cd 1*/
   /* *=====================================**/
  ;
  if (AF0HM001.AF0HMHCC[1] == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0HM001.AF0HMHCC[1]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPC(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end
    ;
    AF0HM001.AF0HMHCC[1] = XP1REC.XPCCD; /* Move sel code to map*/
    ;
    XP1REC.XPCCD = AF0HW01.AF0HWSPC; /* Restore orig XP1REC field*/
    ;
  end
  ;
  ;
  ;
   /* *=====================================**/
   /* *  Pop-up Window for Historical XPCCD * Category cd 2*/
   /* *=====================================**/
  ;
  if (AF0HM001.AF0HMHCC[2] == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0HM001.AF0HMHCC[2]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPC(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end
    ;
    AF0HM001.AF0HMHCC[2] = XP1REC.XPCCD; /* Move sel code to map*/
    ;
    XP1REC.XPCCD = AF0HW01.AF0HWSPC; /* Restore orig XP1REC field*/
    ;
  end
  ;
  ;
  ;
   /* *=====================================**/
   /* *  Pop-up Window for Historical XPCCD * Category cd 3*/
   /* *=====================================**/
  ;
  if (AF0HM001.AF0HMHCC[3] == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0HM001.AF0HMHCC[3]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPC(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end
    ;
    AF0HM001.AF0HMHCC[3] = XP1REC.XPCCD; /* Move sel code to map*/
    ;
    XP1REC.XPCCD = AF0HW01.AF0HWSPC; /* Restore orig XP1REC field*/
    ;
  end
  ;
  ;
  ;
   /* *=====================================**/
   /* *  Pop-up Window for Historical XSUCD * Silhouette cd*/
   /* *=====================================**/
  ;
  ;
  if (AF0HM001.AF0HMHSC == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSSL = XP1REC.XSUCD; /* Save orig XP1REC field*/
    XP1REC.XSUCD = AF0HM001.AF0HMHSC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSU(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    end
    ;
    AF0HM001.AF0HMHSC = XP1REC.XSUCD; /* Move selected code to map*/
    ;
    XP1REC.XSUCD = AF0HW01.AF0HWSSL; /* Restore orig XP1REC fld*/
    ;
  end
  ;
   /* *=======================================**/
   /* *  Pop-up Window for Historical XOWCD   **/
   /* *=======================================**/
  ;
  if (AF0HM001.AF0HMHOG == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSOG = XP1REC.XOWCD; /* Save XP1REC field*/
    XP1REC.XOWCD = AF0HM001.AF0HMHOG; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Whse 51*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSOW(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    end
    AF0HM001.AF0HMHOG = XP1REC.XOWCD; /* Move selected code to map*/
    XP1REC.XOWCD = AF0HW01.AF0HWSOG; /* restore xp1rec*/
    ;
  end
  ;
  ;
  ;
   /* *=====================================**/
   /* *  Pop-up Window for Historical XSECD * Season cd 1*/
   /* *=====================================**/
  ;
  if (AF0HM001.AF0HMHS1 == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSSC = XP1REC.XSECD; /* Save orig XP1REC field*/
    XP1REC.XSECD = AF0HM001.AF0HMHS1; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSE(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    end
    ;
    AF0HM001.AF0HMHS1 = XP1REC.XSECD; /* Move selected code to map*/
    ;
    XP1REC.XSECD = AF0HW01.AF0HWSSC; /* Restore orig XP1REC field*/
    ;
  end
  ;
  ;
  ;
   /* *=====================================**/
   /* *  Pop-up Window for Historical XSECD * Season cd 2*/
   /* *=====================================**/
  ;
  if (AF0HM001.AF0HMHS2 == "?") /* Pop-up window requested*/
    ;
    AF0HW01.AF0HWSSC = XP1REC.XSECD; /* Save orig XP1REC field*/
    XP1REC.XSECD = AF0HM001.AF0HMHS2; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSE(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    end
    ;
    AF0HM001.AF0HMHS2 = XP1REC.XSECD; /* Move selected code to map*/
    ;
    XP1REC.XSECD = AF0HW01.AF0HWSSC; /* Restore orig XP1REC field*/
    ;
  end
  ;
  ;
  ;
   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/
  ;
  ;
  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0HW01.AF0HWPND = "Y"; /* Activate pop-up window ind*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0H140

// Verify Entered Data
Function AF0H150()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  AF0H151(); /* Verify data entered*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors found*/
    AF0HW01.AF0HWCNF = "N"; /* Reset update confirm flag*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/
    AF0HW01.AF0HWCNF = "N"; /* Reset update confirm flag*/
    AF0HW01.AF0HWOTS = "N";
  end
  ;
  if (AF0HW01.AF0HWHDS == "Y") /* Selection criteria changed*/
    AF0HW01.AF0HWHOS = "N";
  end
  ;
end // end AF0H150

// verify Data Entered
Function AF0H151()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *****                                                  ******/
     /* -- This process is composed of two(2) major phases:     **/
    /* The first phase processes the selection criteria of the  **/
    /* Historical data requests. The second phase processes the **/
    /* Style/Size data requests.  Both phases, however, share   **/
    /* one error message area (EZEMNO). Since the application   **/
    /* interrogates EZEMNO to determine what kind of processing **/
    /* is necessary, an error in either Historical data editing **/
    /* or Style/Size data editing will prevent  retrieval of    **/
    /* detail data for BOTH, until all errors are rectified.    **/
   /* *************************************************************/
  ;
  ;
  AF0HW01.AFWSWR = AFWREC.AFWSWR; /* Save data select setting*/
  ;
  AFWREC.AFWFIRST = "N"; /* First Pass switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* Initialize msg hold area*/
  AF0HW01.AF0HWMNO = 0; /* Initialize wk msg hold area*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* ** PHASE 1: Process Historical Data Selection Criteria ***/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/
  ;
  if (AF0HW01.AF0HWHO1 != AF0HM001.AF0HMHO1 /* order type field 1*/
   || AF0HW01.AF0HWHO2 != AF0HM001.AF0HMHO2 /* order type field 2*/
   || AF0HW01.AF0HWHO3 != AF0HM001.AF0HMHO3 /* order type field 3*/
   || AF0HW01.AF0HWHO4 != AF0HM001.AF0HMHO4 /* order type field 4*/
   || AF0HW01.AF0HWHO5 != AF0HM001.AF0HMHO5 /* order type field 5*/
   || AF0HW01.AF0HWHBK != AF0HM001.AF0HMHBK) /* bookings thru date*/
    ;
    ;
    if (AF0HM001.AF0HMHS1 != " " /* Valid season cd 1*/
     && AF0HM001.AF0HMHS2 != " " /* Valid season cd 2*/
     && AF0HW01.AF0HWHBK != 0)   /* BOOKINGS DATE ENTERED*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      set AF0HM001.AF0HMHBK cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 88; /* Indicate error message*/
      return;
    end
    ;
    AF0HW01.AF0HWHOS = "Y"; /* New hist order type/bk entered*/
    AF0HS50(); /* edit historical order types*/
    ;
  else
    AF0HW01.AF0HWHOS = "N"; /* no New hist order type/bk entered*/
  end
  ;
  ;
  if (AF0HW01.AF0HWHDV != AF0HM001.AF0HMHDV       /* division code*/
   || AF0HW01.AF0HWHPT != AF0HM001.AF0HMHXPR      /* Product type cd*/
   || AF0HW01.AF0HWHGC != AF0HM001.AF0HMHGC       /* Gender/Age cd*/
   || AF0HW01.AF0HWHPL != AF0HM001.AF0HMHPL       /* Product line cd*/
   || AF0HW01.AF0HWHCC[1] != AF0HM001.AF0HMHCC[1] /* Cat cd 1*/
   || AF0HW01.AF0HWHCC[2] != AF0HM001.AF0HMHCC[2] /* Cat cd 2*/
   || AF0HW01.AF0HWHCC[3] != AF0HM001.AF0HMHCC[3] /* Cat cd 3*/
   || AF0HW01.AF0HWHSC != AF0HM001.AF0HMHSC       /* Silhouette cd*/
   || AF0HW01.AF0HWHOG != AF0HM001.AF0HMHOG       /* Owner Group cd*/
   || AF0HW01.AF0HWHST != AF0HM001.AF0HMSTY       /* Style no.*/
   || AF0HW01.AF0HWHS1 != AF0HM001.AF0HMHS1       /* Season cd 1*/
   || AF0HW01.AF0HWHY1 != AF0HM001.AF0HMHY1       /* Season yr 1*/
   || AF0HW01.AF0HWDX1 != AF0HM001.AF0HMHD1       /* As of Date 1*/
   || AF0HW01.AF0HWHS2 != AF0HM001.AF0HMHS2       /* Season cd 2*/
   || AF0HW01.AF0HWHY2 != AF0HM001.AF0HMHY2       /* Season yr 2*/
   || AF0HW01.AF0HWDX2 != AF0HM001.AF0HMHD2)      /* As of Date 2*/
    ;
    AF0HW01.AF0HWHDS = "Y"; /* New criteria entered*/
    AF0HW01.AF0HWHAC = "Y"; /* Indicate hist pending actvty*/
    AF0HW01.AF0HWHOS = "N"; /* new selection turn off ot only flg*/
    ;
     /* *=========================**/
     /* * Check Attn ID Response  **/
     /* *=========================**/
    if (AF0HW01.AF0HWHDS == "Y" /* New criteria entered*/
     && converseVar.eventKey not enter) /* Enter key not pressed*/
      converseLib.validationFailed(4); /* Request not permitted*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
     /* *===========================**/
     /* *  Edit Selection Criteria  **/
     /* *===========================**/
     /* *==> These routines perform standalone edit checks on the*/
      /* selection criteria entered. Relational edit checks will be*/
      /* done when all standalone edit errors have been resolved.*/
    AF0HS19(); /* Obtain historical XREF record*/
    AF0HS50(); /* edit historical order types*/
    AF0HS20(); /* Edit historical as-of-date 2*/
    AF0HS22(); /* Edit historical season yr 2*/
    AF0HS23(); /* Edit historical season cd 2*/
    AF0HS24(); /* Edit historical as-of-date 1*/
    AF0HS25(); /* Edit historical season yr 1*/
    AF0HS26(); /* Edit historical season cd 1*/
    AF0HS49(); /* edit historical bk thru date*/
    AF0HS53(); /* verfify bk thru dt in season*/
    AF0HS59(); /* Edit historical owner group cd*/
    AF0HS27(); /* Edit historical style no.*/
    AF0HS28(); /* Edit historical silhouette cd*/
    AF0HS29(); /* Edit historical category cd*/
    AF0HS51(); /* Edit historical pr line  cd*/
    AF0HS30(); /* Edit historical gender/age cd*/
    AF0HS54(); /* Edit historical product line*/
    AF0HS52(); /* Edit historical division code*/
    ;
     /* *================================**/
     /* * Perform Relational Edit Checks **/
     /* *================================**/
    if (XP1REC.XP1MNO == 0) /* No historical edit errors*/
      AF0HS31(); /* Relational edit checks*/
    end
  else
    AF0HS31(); /* Relational edit checks*/
    if (AF0HW01.AF0HWHOS == "Y") /* New hist order type/bk entered*/
      AF0HS49(); /* edit historical bk thru date*/
      AF0HS53(); /* verfify bk thru dt in season*/
    end
  end
  ;
   /* *==============================**/
   /* * Save Historical Edit Message **/
   /* *==============================**/
  ;
  AF0HW01.AF0HWMNO = XP1REC.XP1MNO; /* Save hist edit message*/
  XP1REC.XP1MNO = 0; /* Reset message area*/
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
      /* ** PHASE 2: Process Style/Size Selection Criteria ***/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0HW01.AF0HWOT1 != AF0HM001.AF0HMOT1 /* order type field 1*/
   || AF0HW01.AF0HWOT2 != AF0HM001.AF0HMOT2 /* order type field 2*/
   || AF0HW01.AF0HWOT3 != AF0HM001.AF0HMOT3 /* order type field 3*/
   || AF0HW01.AF0HWOT4 != AF0HM001.AF0HMOT4 /* order type field 4*/
   || AF0HW01.AF0HWOT5 != AF0HM001.AF0HMOT5 /* order type field 5*/
   || AF0HW01.AF0HWBKD != AF0HM001.AF0HMBKD) /* bookings thru date*/
    ;
    AF0HW01.AF0HWOTS = "Y"; /* New ord/bk entered*/
    AF0HS46(); /* Edit ORDER TYPES*/
    AF0HS47(); /* Edit BK THRU DATE*/
  else
    AF0HW01.AF0HWOTS = "N"; /* New ord/bk entered*/
  end
  ;
  ;
   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/
  if (AF0HW01.AF0HWSTY != AF0HM001.SY1STNBR /* Start Style no.*/
   || AF0HW01.AF0HWSIL != AF0HM001.XSUCD    /* Start SIL cd*/
   || AF0HW01.AF0HWCAT != AF0HM001.XPCCD    /* Start CAT cd*/
   || AF0HW01.AF0HWPLN != AF0HM001.XPLCD    /* Start pl  cd*/
   || AF0HW01.AF0HWPTP != AF0HM001.XPRCD    /* Start pr  cd*/
   || AF0HW01.AF0HWXOW != AF0HM001.XOWCD    /* Start og  cd*/
   || AF0HW01.AF0HWXDV != AF0HM001.XDVCD    /* Start dv  cd*/
   || AF0HW01.AF0HWGA != AF0HM001.XGACD     /* Start G/A cd*/
   || XP1REC.XSNYR != AF0HM001.XSNYR        /* Season yr*/
   || AF0HM001.XSNYR == 0                   /* Map fld zeroed out*/
   || XP1REC.XSECD != AF0HM001.XSECD        /* Season cd*/
   || AF0HM001.XSECD == " "                 /* Map fld spaced out*/
   || AF0HW01.AF0HWUSR != AF0HM001.PG1FCTCD) /* Forecaster cd*/
    ;
    AFWREC.AFWSWR = "Y"; /* New criteria entered*/
    AF0HW01.AF0HWOTS = "N"; /* New selection*/
    ;
    if (XP1REC.XSNYR != AF0HM001.XSNYR /* Season yr*/
     || XP1REC.XSECD != AF0HM001.XSECD) /* Season cd*/
      if (AF0HW01.AF0HWHS1 > " "
       || AF0HW01.AF0HWHS2 > " ")
        AF0HW01.AF0HWHDS = "Y"; /* New criteria entered*/
      end
    end
     /* *=========================**/
     /* * Check Attn ID Response  **/
     /* *=========================**/
    if (AFWREC.AFWSWR == "Y" /* New keys entered*/
     && converseVar.eventKey not enter) /* Enter key not pressed*/
      converseLib.validationFailed(4); /* Request not permitted*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      exit stack; /* Exit to redisplay map*/
    end
     /* *===========================**/
     /* *  Edit Selection Criteria  **/
     /* *===========================**/
    AF0HS60(); /* Edit Owner Group cd*/
    AF0HS46(); /* Edit ORDER TYPES*/
    AF0HS33(); /* Edit style no.*/
    AF0HS35(); /* Edit silhouette cd*/
    AF0HS36(); /* Edit category cd*/
    AF0HS44(); /* Edit product line*/
    AF0HS37(); /* Edit gender/age cd*/
    AF0HS55(); /* Edit Product type*/
    AF0HS45(); /* Edit division cd*/
    AF0HS38(); /* Edit season yr*/
    AF0HS39(); /* Edit season cd*/
    AF0HS48(); /* VALIDATE BK THRU DATE IN SEASON*/
    AF0HS40(); /* Edit forecaster cd*/
    AF0HS57(); /* Edit mult factor and flag*/
    ;
  else
    if (AF0HW01.AF0HWOTS == "Y") /* New ord/bk entered*/
      AF0HS48(); /* vALIDATE BK THRU DATE IN SEASON*/
    end
  end
  ;
  ;
  ;
   /* *============================**/
   /* * Check End of G/A Indicator **/
   /* *============================**/
  ;
  if (AF9REC.AF9GAG99 == "Y") /* No more G/A codes to process*/
    ;
    if (AFWREC.AFWSWR == "N") /* No new keys entered*/
      converseLib.validationFailed(15); /* Indicate no more data*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      exit stack; /* Exit to reselect data*/
    end
    ;
  end
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
   /* *====================================**/
   /* *  Check Criteria Validation Status  **/
   /* *====================================**/
  ;
  if (XP1REC.XP1MNO == 0 /* No validation errors*/
   && AFWREC.AFWSWR == "Y") /* New selection criteria entered*/
    ;
    XP1REC.XSUCD = AF0HW01.AF0HWSIL; /* New start SIL cd*/
    XP1REC.XPCCD = AF0HW01.AF0HWCAT; /* New start CAT cd*/
    XP1REC.XGACD = AF0HW01.AF0HWGA; /* New start G/A cd*/
    XP1REC.XDVCD = AF0HW01.AF0HWXDV; /* New start DIV cd*/
    XP1REC.XPLCD = AF0HW01.AF0HWPLN; /* New start XPL cd*/
    XP1REC.XPRCD = AF0HW01.AF0HWPTP; /* New start XPR cd*/
    XP1REC.XOWCD = AF0HW01.AF0HWXOW; /* New start XPR cd*/
    ;
  end
  ;
  ;
  ;
   /* *==========================**/
   /* *  Edit Map Detail Lines   **/
   /* *==========================**/
  ;
  if (AFWREC.AFWSWR == "N" /* No selection criteria changed*/
   && XP1REC.XP1MNO == 0)  /* and No validation errors*/
    ;
    AF0HS41(); /* Edit map detail lines*/
    ;
  end
  ;
  AF0HS56(); /* EDIT SELECTION COMB.*/
  ;
   /* *=================================**/
   /* *  Check Validation Error Status  **/
   /* *=================================**/
  ;
  ;
  if (AF0HW01.AF0HWMNO != 0) /* Historical Data has errors*/
    ;
    if (AF0HW01.AF0HWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AF0HW01.AF0HWMNO);
    end /* Set message for display*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 8) /* Protect/darken map display*/
      set AF0HM001.AF0HMHF1[AFWIDX5] skip, invisible; /* Hist Fut 1*/
      set AF0HM001.AF0HMHF2[AFWIDX5] skip, invisible; /* Hist Fut 2*/
      set AF0HM001.AF0HMHF3[AFWIDX5] skip, invisible; /* Hist Fut 3*/
      set AF0HM001.AF0HMHF4[AFWIDX5] skip, invisible; /* Hist Fut 4*/
      set AF0HM001.AF0HMHPR[AFWIDX5] skip, invisible; /* Hist Prop*/
      set AF0HM001.AF0HMHTL[AFWIDX5] skip, invisible; /* Hist Total*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    ;
    set AF0HM001.AF0HMHGT skip, invisible; /* Hist Totalgrand*/
  end
  ;
  ;
  if (XP1REC.XP1MNO != 0) /* Style/Pct edit errors present*/
    ;
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMMTH[AFWIDX5] skip, invisible; /* Month*/
      set AF0HM001.AF0HMCF1[AFWIDX5] skip, invisible; /* Curr Fut 1*/
      set AF0HM001.AF0HMCF2[AFWIDX5] skip, invisible; /* Curr Fut 2*/
      set AF0HM001.AF0HMCF3[AFWIDX5] skip, invisible; /* Curr Fut 3*/
      set AF0HM001.AF0HMCF4[AFWIDX5] skip, invisible; /* Curr Fut 4*/
      set AF0HM001.AF0HMCPR[AFWIDX5] skip, invisible; /* Curr Prop*/
      set AF0HM001.AF0HMCTL[AFWIDX5] skip, invisible; /* Curr Total*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    set AF0HM001.AF0HMCGT skip, invisible; /* Curr Total*/
    ;
  end
  ;
  ;
  ;
end // end AF0H151

// Process Valid Request
Function AF0H160()
  ;
   /* *======================================**/
   /* *  Check if Loop Control within limit  **/
   /* *======================================**/
  ;
  if (AF0HW01.AF0HWLCT > AF0HW01.AF0HWLIM) /* Style ctr loop limit reached*/
    AF0HW01.AF0HWLCT = 0; /* Reset loop ctr*/
  end
  ;
   /* *========================**/
   /* * 'PF20' Key Processing  **/
   /* *========================**/
  ;
  ;
  if (converseVar.eventKey is pf20) /* Copy Historical data to Current data*/
    ;
    if (AF0HW03.AF0HWDPI == "Y") /* Historical data available*/
      ;
      AFWREC.AFWIDX5 = 1; /* Set loop index*/
      AF0HW02.AF0HWUPD = "Y"; /* Indicate for update*/
      AF0HW01.AF0HWCNF = "N"; /* Reset update confirm flag*/
      ;
      while (AFWREC.AFWIDX5 <= 9) /* Process all months*/
        AF0HW02.AF0HWCF1[AFWIDX5] = AF0HW03.AF0HWHF1[AFWIDX5];
        AF0HW02.AF0HWCF2[AFWIDX5] = AF0HW03.AF0HWHF2[AFWIDX5];
        AF0HW02.AF0HWCF3[AFWIDX5] = AF0HW03.AF0HWHF3[AFWIDX5];
        AF0HW02.AF0HWCF4[AFWIDX5] = AF0HW03.AF0HWHF4[AFWIDX5];
        AF0HW02.AF0HWCPR[AFWIDX5] = AF0HW03.AF0HWHPR[AFWIDX5];
        ;
        AF0HW02.AF0HWCHG[AFWIDX5] = "Y"; /* Changes entered*/
        ;
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
        ;
      end
      ;
      ;
      AFWREC.AFWPRCSN = "160 "; /* Process number*/
      AFWREC.AFWNMO = 62; /* Indicate pending activity*/
      return; /* Execute next process*/
      ;
    else
      ;
      AFWREC.AFWPRCSN = "160 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid request*/
      return; /* Exit to redisplay map*/
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* *================================================**/
   /* * 'PF16', 'PF17', 'PF18', 'PF19' Key Processing  **/
   /* *================================================**/
  ;
  ;
  if (converseVar.eventKey is pf16 /* PF13 (Next G/A)*/
   || converseVar.eventKey is pf17 /* PF14 (Next line)*/
   || converseVar.eventKey is pf18 /* or PF15 (Next cat)*/
   || converseVar.eventKey is pf19) /* or PF16 (Next Sihouette)*/
    ;
    AF0HW02.AF0HWUPD = " "; /* Inactivate update flag*/
    AF0HW01.AF0HWCNF = "N"; /* Reset update confirm flag*/
    ;
    return; /* Execute next process*/
    ;
  end
  ;
  ;
  ;
   /* *==========================**/
   /* *  'ENTER' Key Processing  **/
   /* *==========================**/
  ;
  if (converseVar.eventKey is enter) /* enter key pressed*/
    ;
    if (AFWREC.AFWSWR == "Y"    /* new data requested*/
     || AF0HW01.AF0HWOTS == "Y" /* new order types sel*/
     || AF0HW01.AF0HWHOS == "Y" /* new order types sel*/
     || AF0HW01.AF0HWHDS == "Y") /* new hist data selected*/
      AF0HW02.AF0HWUPD = " "; /* Inactivate update flag*/
      return; /* Execute next process*/
      ;
    else
      ;
      if (AF0HM001.AF0HOVFT != AF2REC.AF-MUL-FCTR /* Change to Ov Mft.*/
       || AF0HM001.AF0HOVFL != AF2REC.AF-MUL-FCTR-FL) /* Ov Flg.*/
        AF0HS57(); /* edit mult fctr.*/
        AF0HS58(); /* Update Vafsty01.*/
        AFWREC.AFWSWR = "Y"; /* Reselect record.*/
        AF0HW02.AF0HWUPD = " "; /* Reset for update tag*/
      end
      ;
      if (AF0HW02.AF0HWUPD == "Y") /* With valid updates*/
        ;
           /* (Check Curr Pcent Totals)*/
        ;
        AFWREC.AFWIDX4 = 1; /* Set Loop index*/
        AF0HW01.AF0HWCPT = 0; /* Reset accumulator*/
        ;
        while (AFWREC.AFWIDX4 <= 14) /* Process all months*/
          AF0HW01.AF0HWCPT = AF0HW01.AF0HWCPT + AF0HW02.AF0HWCTL[AFWIDX4];
          AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
        end
        ;
             /* (Check for Duplicate Updates)*/
        AFWREC.AFWIDX4 = 1; /* Set Loop index*/
        AF0HW01.AF0HWCPT = 0; /* Reset accumulator*/
        ;
        while (AFWREC.AFWIDX4 <= 9) /* Process all months*/
          ;
          if (AF0HW02.AF0HWCF1[AFWIDX4] != AF0HW02.AF0HWCW1[AFWIDX4]
           || AF0HW02.AF0HWCF2[AFWIDX4] != AF0HW02.AF0HWCW2[AFWIDX4]
           || AF0HW02.AF0HWCF3[AFWIDX4] != AF0HW02.AF0HWCW3[AFWIDX4]
           || AF0HW02.AF0HWCF4[AFWIDX4] != AF0HW02.AF0HWCW4[AFWIDX4]
           || AF0HW02.AF0HWCPR[AFWIDX4] != AF0HW02.AF0HWCW5[AFWIDX4])
            ;
            AF0HW01.AF0HWCPT = AF0HW01.AF0HWCPT + 1;
            ;
          end
          ;
          AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
          ;
        end
        ;
        ;
        if (AF0HW01.AF0HWCPT == 0) /* No valid updates found*/
          AF0HW01.AF0HWCNF = "N"; /* Reset update confirm ind*/
          AF0HW02.AF0HWUPD = "1"; /* Indicate 1st pass for cond*/
          return; /* Exit to redisplay map*/
        end
        ;
                   /* (Update DACAST.VAFPER01)*/
        ;
        AFWREC.AFWIDX5 = 1; /* Set loop index*/
        while (AFWREC.AFWIDX5 <= 9) /* Process all months*/
          ;
          AF0H161(); /* Update DACAST.VAFPER01*/
          ;
          AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
          ;
        end
        ;
        AF0HW01.AF0HWCNF = "U"; /* Indicate successful update*/
        AF0HW02.AF0HWUPD = " "; /* Reset for update tag*/
        AFWREC.AFWSWR = "Y"; /* Reselect record.*/
        AFWREC.AFWNMO = 13; /* Indicate successful update*/
        AFWREC.AFWPRCSN = "160 "; /* Process number*/
        return; /* Execute next process*/
        ;
        ;
      end
      ;
    end
    ;
  end
end // end AF0H160

// Update DACAST.VAFPER01
Function AF0H161()
   /* -----------------------------------------------------------*/
                /* ** Update DACAST.VAFPER01 ***/
   /* Check for change flag. If not active, then return.*/
   /* Check for stored keys. If not present, then create row.*/
     /* If present, then update row.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=====================**/
   /* *  Check Change Flag  **/
   /* *=====================**/
  ;
  if (AF0HW02.AF0HWCHG[AFWIDX5] != "Y") /* Not marked for update*/
    return; /* Return to calling process*/
  end
  ;
  ;
  ;
   /* *=========================**/
   /* *  Get System Date/Time   **/
   /* *=========================**/
  ;
  XX0XS01();
  ;
   /* *=========================**/
   /* *  Check for Stored Keys  **/
   /* *=========================**/
  ;
  if (AF0HW02.AF0HWRKY[AFWIDX5] == " ") /* No record keys stored*/
    ;
    AF0HS42(); /* Create new DACAST.VAFPER01 row*/
    ;
  else
    ;
    AF0HS43(); /* Update old DACAST.VAFPER01 row*/
    ;
  end
   /* -----------------------------------------------------------*/
                   /* ** Update DACAST.Vafsty01 ***/
   /* ------------------------------------------------------------*/
end // end AF0H161

// Obtain G/A,CAT and SIL Comb.
Function AF0HS01()
   /* ------------------------------------------------------------*/
   /* Get new PR, G/A, PL, CAT and SIL combination*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==========================================**/
   /* *  Obtain Next Combination for Processing  **/
   /* *==========================================**/
  ;
  ;
  AF9REC.XPRCD = XP1REC.XPRCD; /* Pr Type cd*/
  AF9REC.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
  AF9REC.XPLCD = XP1REC.XPLCD; /* Pr Line cd*/
  AF9REC.XPCCD = XP1REC.XPCCD; /* Category cd*/
  AF9REC.XSUCD = XP1REC.XSUCD; /* Sihouette cd*/
  ;
  ;
  XPAF100(); /* Combination retrieval rtn*/
  ;
  ;
  XP1REC.XPRCD = XPRTBL.XPRCD[AF9TPIXM]; /* Save to wk storage*/
  AF0HW01.AF0HWXPR = XPRTBL.XPRCD[AF9TPIXM]; /* Save internal start*/
  ;
  XP1REC.XGACD = XGATBL.XGACD[AF9GAIXM]; /* Save to wk storage*/
  AF0HW01.AF0HWXGA = XGATBL.XGACD[AF9GAIXM]; /* Save internal start*/
  ;
  XP1REC.XPLCD = XPLTBL.XPLCD[AF9LNIXM]; /* Save to wk storage*/
  AF0HW01.AF0HWXPL = XPLTBL.XPLCD[AF9LNIXM]; /* Save internal start*/
  ;
  XP1REC.XPCCD = XPCTBL.XPCCD[AF9PCIXM]; /* Save to wk storage*/
  AF0HW01.AF0HWXPC = XPCTBL.XPCCD[AF9PCIXM]; /* Save internal start*/
  ;
  XP1REC.XSUCD = XSUTBL.XSUCD[AF9SUIXM]; /* Save to wk storage*/
  AF0HW01.AF0HWXSU = XSUTBL.XSUCD[AF9SUIXM]; /* Save internal start*/
  ;
  ;
  if (AF9REC.AF9TYP99 == "Y") /* Last Gender/Age cd retrieved*/
    ;
    AF0HW01.AF0HWLCT = 0; /* Reset style loop ctr*/
    converseLib.validationFailed(15); /* Indicate no more data*/
    AFWREC.AFWPRCSN = "S01 "; /* Process number*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0HM001.AF0HMMTH[AFWIDX5] skip, invisible; /* Order month*/
      set AF0HM001.AF0HMCF1[AFWIDX5] skip, invisible; /* Curr Fut Pcent 1*/
      set AF0HM001.AF0HMCF2[AFWIDX5] skip, invisible; /* Curr Fut Pcent 2*/
      set AF0HM001.AF0HMCF3[AFWIDX5] skip, invisible; /* Curr Fut Pcent 3*/
      set AF0HM001.AF0HMCF4[AFWIDX5] skip, invisible; /* Curr Fut Pcent 4*/
      set AF0HM001.AF0HMCPR[AFWIDX5] skip, invisible; /* Curr Prop Pcent*/
      set AF0HM001.AF0HMCTL[AFWIDX5] skip, invisible; /* Curr Prop Pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    ;
    set AF0HM001.XSECD cursor; /* Set cursor position*/
    ;
  end
  ;
  ;
  ;
end // end AF0HS01

// Select DACAST.VAFSTY01 rows
Function AF0HS02()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set AF2REC empty; /* Reset rec work area*/
  ;
  AF2REC.XDVCD = XP1REC.XDVCD; /* div cd*/
  AF2REC.XPRCD = XP1REC.XPRCD; /* type cd*/
  AF2REC.XPLCD = XP1REC.XPLCD; /* line cd*/
  AF2REC.XGACD = XP1REC.XGACD; /* XGA cd*/
  AF2REC.XPCCD = XP1REC.XPCCD; /* XPC cd*/
  AF2REC.XSUCD = XP1REC.XSUCD; /* XSU cd*/
  AF2REC.SY1STNBR = AF0HW01.AF0HWSYK; /* Style no.*/
  AF2REC.SY4SZSCL = "**"; /* Size scale cd*/
  AF2REC.AF2FSTST = "*"; /* Forecast status*/
  ;
  if (AF0HW01.AF0HWXOW == " ")
    AF2REC.XOWCD = "**"; /* XOW cd*/
  else
    AF2REC.XOWCD = AF0HW01.AF0HWXOW; /* XOW cd*/
  end
  ;
  if (XP1REC.XXXUSER == " ") /* No user specified*/
    AF2REC.PG1FCTCD = "**"; /* Get all users*/
  else
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
  end
  ;
  AF0HW01.AF0HWXSY = 0; /* Reset xsnyr wk area*/
  AF0HW01.AF0HWXSY = XP1REC.XSNYR; /* Move to wk area*/
  AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 1900; /* Add century*/
  AF2REC.XSNYR = AF0HW01.AF0HWXSY; /* XSE yr*/
  ;
  AF2REC.XSECD = XP1REC.XSECD; /* XSE cd*/
  ;
  ;
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFSTY01  **/
   /* *====================================**/
  ;
  try
    call "IO3510" ("SS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0HW01.AF0HWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS02

// Process DACAST.VAFSTY01 rows
Function AF0HS03()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until the next style to*/
     /* be processed is retrieved (current style + 1). If done*/
     /* for the first time after a new select has been made, it*/
     /* will retrieve the first style in the set --*/
     /* (current style + 0).*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/
  ;
  try
    call "IO3510" ("SN", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
   /* ------------------------------------------------------------*/
   /* If call sucessful, store style/size data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
                   /* (Check Loop Ctr Value)*/
    ;
    AF0HW01.AF0HWLCT = AF0HW01.AF0HWLCT + 1; /* Add to style ctr*/
    ;
    if (AF0HW01.AF0HWLCT > AF0HW01.AF0HWLIM) /* Loop limit exceeded*/
      converseLib.validationFailed(44); /* Indicate loop exceeded*/
      AFWREC.AFWIDX5 = +9999; /* Force loop termination.*/
      return; /* Exit to display map*/
    end
    ;
                   /* (Loop Ctr Within Limits)*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      ;
      /* ************** Added for IOMOD Changes ****************/
      XP1REC.XPRCD = AF2REC.XPRCD; /* Update XPR comb code*/
      XP1REC.XGACD = AF2REC.XGACD; /* Update XGA comb code*/
      XP1REC.XPLCD = AF2REC.XPLCD; /* Update XPL comb code*/
      XP1REC.XPCCD = AF2REC.XPCCD; /* Update XPC comb code*/
      XP1REC.XSUCD = AF2REC.XSUCD; /* Update XSU comb code*/
      XP1REC.XOWCD = AF2REC.XOWCD; /* update XOW Cd*/
      ;
      if (XP1REC.XPRCD in XPRTBL.XPRCD)
        AF9REC.AF9TPIXM = sysVar.arrayIndex; /* Update XPR Comb index*/
      end
      ;
      if (XP1REC.XGACD in XGATBL.XGACD)
        AF9REC.AF9GAIXM = sysVar.arrayIndex; /* Update XGA Comb index*/
      end
      ;
      if (XP1REC.XPLCD in XPLTBL.XPLCD)
        AF9REC.AF9LNIXM = sysVar.arrayIndex; /* Update XPL Comb index*/
      end
      ;
      if (XP1REC.XPCCD in XPCTBL.XPCCD)
        AF9REC.AF9PCIXM = sysVar.arrayIndex; /* Update XPC Comb index*/
      end
      ;
      if (XP1REC.XSUCD in XSUTBL.XSUCD)
        AF9REC.AF9SUIXM = sysVar.arrayIndex; /* Update XSU Comb index*/
      end
      /* *******************************************************/
      ;
      set PG2REC empty; /* Reset record wk area*/
      PG2REC.XGPCD = "03"; /* GPC cd*/
      XP1REC.SY1STNBR = AF2REC.SY1STNBR; /* Save Style no.*/
      PG2REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no. as key*/
      TA1REC.TA1PGMNM = "AF0HS04"; /* Process name*/
      ;
      XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
        XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* Save style name*/
        XP1REC.SY2CLRID = PG2REC.SY2CLRID; /* Save color cd*/
      else
        AFWREC.AFWPRCSN = "S04 "; /* Process number*/
        AFWREC.AFWNMO = 33; /* Indicate error message*/
        AF0HW01.AF0HWVST = "N"; /* Indicate style not found*/
        XP1REC.SY1SSTNM = " "; /* Space out style name*/
        XP1REC.SY2CLRID = " "; /* Space out color cd*/
      end
      ;
      /* ------------------------------------------------------------*/
       /* Whenever a Style row is successfully retrieved, it undergoes*/
         /* 3 qualification processes to determine suitablity for*/
         /* processing. The first process relates the row to selec-*/
         /* tion criteria data, and the second process determines if*/
         /* the style entered has been processed (in the case of*/
         /* multiple-row styles). The third is ne LC CD '01'.*/
      /* ------------------------------------------------------------*/
      ;
      if (XP1REC.PG1FCTCD == " " /* Get all forecasters*/
       || AF2REC.PG1FCTCD == XP1REC.PG1FCTCD) /* Check forecaster cd*/
                    /* (Qualification Process 1)*/
        AF0HW01.AF0HWXST = "Y"; /* Row qualified*/
        ;
                    /* (Qualification Process 2)*/
        AF0HW01.AF0HWSQU = " "; /* Reset qual flag*/
        AF0HS10(); /* Check if style already processed*/
        ;
        if (AF0HW01.AF0HWSYK == XP1REC.SY1STNBR
         && XP1REC.XOWCD < AF0HW01.AF0HWOGK)
          AF0HW01.AF0HWSQU = " "; /* Get next Style/OG*/
        end
        ;
        if (PG2REC.XLCCD1 == "01") /* Throw out experimentals.*/
          AF0HW01.AF0HWXST = " ";
        end
        ;
        if (AF0HW01.AF0HWXST == "Y" /* Row qualified for processing*/
         && AF0HW01.AF0HWSQU == "Y") /* Style not yet processed*/
          ;
          AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Add to style ctr*/
          ;
          if (AFWREC.AFWIDX5 == AF0HW01.AF0HWCSY) /* Style retrieved*/
            AF0HS04(); /* Store Style/Pct  data*/
          end
          ;
          AF0HW04.AF0HWAF = AF2REC.AF2GROUP; /* Save out AF2REC*/
          ;
          if (AF2REC.XSECD == "FA")
            AF2REC.XSECD = "SP";
          else
            AF2REC.XSECD = "FA";
            AF2REC.XSNYR = AF2REC.XSNYR - 1;
          end
          ;
          try
            call "IO3510" ("S ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
          end /* Sel unique*/
          ;
          if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
            AF0HW01.AF0HWVFT = AF2REC.AF-MUL-FCTR; /* hist mfact*/
            AF2REC.AF2GROUP = AF0HW04.AF0HWAF; /* Restore AF2rec*/
          else
            AF0HM001.AF0HHOFT = 0; /* hist mfact*/
            AF2REC.AF2GROUP = AF0HW04.AF0HWAF; /* Restore AF2rec*/
          end
          ;
          try
            call "IO3510" ("S ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
          end /* Sel unique*/
          ;
          return; /* Loop through (Style selected)*/
          ;
        else
          ;
          return; /* Loop through (Bypass Style row)*/
          ;
        end
        ;
      else
        ;
        return; /* Loop through (Bypass Style row)*/
        ;
      end
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        ;
        AFWREC.AFWIDX5 = +9999; /* Force loop termination.*/
        ;
        return; /* Return to calling process*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0HW01.AF0HWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S03 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS03

// Store Style/Pct  data
Function AF0HS04()
   /* ------------------------------------------------------------*/
        /* ** Store DACAST.VAFSTY01/VAFPER01 Data ***/
   /* Save default data.*/
   /* Get style short name.*/
   /* Obtain all DACAST.VAFPER01 rows for the style.*/
   /* Save all non-update items into program wk array.*/
   /* Store all pcts  into program wk array for display and*/
     /* possible update.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *=====================**/
   /* *  Save Default Data  **/
   /* *=====================**/
    /* -- These data will be utilized as parts of the record key*/
       /* in case new DACAST.VAFPER01 records need to be created.*/
  ;
  AF0HW02.AF0HWDST = AF2REC.SY1STNBR; /* To save area*/
  AF0HW02.AF0HWDDM = AF2REC.XDMCD; /* To save area*/
  AF0HW02.AF0HWDDV = AF2REC.XDVCD; /* To save area*/
  AF0HW02.AF0HWDOG = AF2REC.XOWCD; /* to save area*/
  ;
  AF0HW01.AF0HWSYS = AF2REC.AF2FSTST; /* Save for map display*/
  AF0HW01.AF0HWMTF = AF2REC.AF-MUL-FCTR; /* Save FCTR for display*/
  AF0HW01.AF0HWVFL = AF2REC.AF-MUL-FCTR-FL; /* Save FLAG for display*/
  ;
   /* *========================**/
   /* *  Get Style Short Name  **/
   /* *========================**/
  ;
  AF0HW01.AF0HWVST = " "; /* Reset valid style indicator*/
  ;
  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  XP1REC.SY1STNBR = AF2REC.SY1STNBR; /* Save Style no.*/
  PG2REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0HR06"; /* Process name*/
  ;
  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
    XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* Save style name*/
    XP1REC.SY2CLRID = PG2REC.SY2CLRID; /* Save color cd*/
  else
    AFWREC.AFWPRCSN = "S04 "; /* Process number*/
    AFWREC.AFWNMO = 33; /* Indicate error message*/
    AF0HW01.AF0HWVST = "N"; /* Indicate style not found*/
    XP1REC.SY1SSTNM = " "; /* Space out style name*/
    XP1REC.SY2CLRID = " "; /* Space out color cd*/
  end
  ;
  ;
  ;
   /* *===============================**/
   /* *  Obtain DACAST.VAFPER01 Data  **/
   /* *===============================**/
  ;
  AF0HS05(); /* Select from DACAST.VAFPER01*/
  ;
  ;
  ;
   /* *================================**/
   /* *  Process DACAST.VAFPER01 Data  **/
   /* *================================**/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors detected*/
    ;
    AF0HW01.AF0HWPSD = " "; /* Reset eof indicator*/
    while (AF0HW01.AF0HWPSD == " ") /* Process all records*/
      AF0HS06(); /* Process DACAST.VAFPER01 rows*/
    end
    ;
    if (converseVar.validationMsgNum == 0) /* No errors detected*/
      AF0HS08(); /* Close DACAST.VAFPER01 cursor*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0HS04

// Select DACAST.VAFPER01 rows
Function AF0HS05()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set AF3REC empty; /* Reset rec work area*/
  ;
  AF3REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no. key*/
  AF3REC.XDMCD = AF2REC.XDMCD; /* Dimension cd key*/
  AF3REC.XDVCD = AF2REC.XDVCD; /* Division cd key*/
  AF3REC.XSECD = AF2REC.XSECD; /* Season cd key*/
  AF3REC.XSNYR = AF2REC.XSNYR; /* Season yr key*/
  AF3REC.XOWCD = AF2REC.XOWCD; /* Owner Group Cd*/
  ;
  ;
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFPER01  **/
   /* *====================================**/
  ;
  try
    call "IO3530" ("SS", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0HW01.AF0HWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS05

// Process DACAST.VAFPER01 rows
Function AF0HS06()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* For all rows retrieved, store data into program arrays.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/
  ;
  try
    call "IO3530" ("SN", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If call sucessful, store style/size data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      AF0HS07(); /* Store DACAST.VAFPER01 data*/
      ;
      return; /* Loop through*/
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        ;
        AF0HW01.AF0HWPSD = "Y"; /* Force loop termination.*/
        ;
        return; /* Return to calling process*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0HW01.AF0HWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS06

// Store DACAST.VAFPER01 data
Function AF0HS07()
   /* ------------------------------------------------------------*/
        /* ** Store DACAST.VAFPER01 Data ***/
   /* Save all non-update items into program wk array.*/
   /* Store all pcts  into program wk array for display and*/
     /* possible update.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Obtain Store Pointer   **/
   /* *=========================**/
  ;
  if (AF3REC.AFBNDTPR in AF0HW01.AF0HW-AFMO-TBLE)
    AFWREC.AFWIDX1 = sysVar.arrayIndex;
  else
    return;
  end
   /* ;*/
  ;
  ;
   /* *==========================**/
   /* *  Store Non-Update Items  **/
   /* *==========================**/
  ;
  AF0HW02.AF0HWRKY[AFWIDX1] = "Y"; /* Indicate valid record key*/
  AF0HW02.AF0HWRKS[AFWIDX1] = AF3REC.SY1STNBR; /* Save Style key*/
  AF0HW02.AF0HWRKM[AFWIDX1] = AF3REC.XDMCD; /* Save XDMCD key*/
  AF0HW02.AF0HWRKV[AFWIDX1] = AF3REC.XDVCD; /* Save XDVCD key*/
  AF0HW02.AF0HWRKO[AFWIDX1] = AF3REC.XOWCD; /* Save XOWCD key*/
  AF0HW02.AF0HWRKE[AFWIDX1] = AF3REC.XSECD; /* Save XSECD key*/
  AF0HW02.AF0HWRKR[AFWIDX1] = AF3REC.XSNYR; /* Save XSNYR key*/
  AF0HW02.AF0HWRKA[AFWIDX1] = AF3REC.AFBNDTPR; /* Save AFBNDTPR key*/
  AF0HW02.AF0HWBKP[AFWIDX1] = AF3REC.AF3BKPRM; /* Save Book pd mult*/
  AF0HW02.AF0HWCCT[AFWIDX1] = AF3REC.ZZZCHGCT; /* Save Change count*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Store Update Items  **/
   /* *======================**/
  ;
  AF0HW01.AF0HWTPC = 0; /* Initialize Pcent wk total*/
  ;
  AF0HW02.AF0HWCF1[AFWIDX1] = AF3REC.AF3MDMDP[1]; /* Curr Fut 1*/
  AF0HW02.AF0HWCW1[AFWIDX1] = AF3REC.AF3MDMDP[1]; /* Alt Curr Fut 1*/
  AF0HW02.AF0HWCF2[AFWIDX1] = AF3REC.AF3MDMDP[2]; /* Curr Fut 2*/
  AF0HW02.AF0HWCW2[AFWIDX1] = AF3REC.AF3MDMDP[2]; /* Alt Curr Fut 2*/
  AF0HW02.AF0HWCF3[AFWIDX1] = AF3REC.AF3MDMDP[3]; /* Curr Fut 3*/
  AF0HW02.AF0HWCW3[AFWIDX1] = AF3REC.AF3MDMDP[3]; /* Alt Curr Fut 3*/
  AF0HW02.AF0HWCF4[AFWIDX1] = AF3REC.AF3MDMDP[4]; /* Curr Fut 4*/
  AF0HW02.AF0HWCW4[AFWIDX1] = AF3REC.AF3MDMDP[4]; /* Alt Curr Fut 4*/
  AF0HW02.AF0HWCPR[AFWIDX1] = AF3REC.AF3MDMDP[5]; /* Curr Fut 5*/
  AF0HW02.AF0HWCW5[AFWIDX1] = AF3REC.AF3MDMDP[5]; /* Alt Curr Fut 5*/
  ;
  ;
  ;
end // end AF0HS07

// Close DACAST.VAFPER01 cursor
Function AF0HS08()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3530" ("CS", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S08 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS08

// Close DACAST.VAFSTY01 cursor
Function AF0HS09()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3510" ("CS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS09

// Check if Style valid
Function AF0HS10()
   /* ------------------------------------------------------------*/
   /* This routine checks against the inadvertent reprocessing*/
     /* of a specific style already processed. This is done by*/
     /* relating the current G/A,CAT and SIL combination with*/
     /* the G/A and/or CAT and/or SIL entered along with the*/
     /* style in question. If matched, then the style desired*/
     /* has been located. Otherwise, the search continues....*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0HW01.SY1STNBR != " ") /* Specific style entered*/
    ;
    if (AF2REC.SY1STNBR == AF0HW01.SY1STNBR) /* The style specified*/
      ;
      if (AF0HW01.AF0HWXOW != " ") /* XOWCD specified*/
        if (AF0HW01.AF0HWXOW == XP1REC.XOWCD) /* Comb.match with criteria*/
                        /* (XSUCD matched)*/
        else
          ;
          return; /* ****** EXIT to get next style*/
          ;
        end
      end
      ;
      if (AF0HW01.AF0HWSIL != " ") /* XSUCD specified*/
        if (AF0HW01.AF0HWSIL == XP1REC.XSUCD) /* Comb.match with criteria*/
                        /* (XSUCD matched)*/
        else
          ;
          return; /* ****** EXIT to get next style*/
          ;
        end
      end
      ;
      ;
      if (AF0HW01.AF0HWCAT != " ") /* XPCCD specified*/
        if (AF0HW01.AF0HWCAT == XP1REC.XPCCD) /* Comb.match with criteria*/
                        /* (XPCCD matched)*/
        else
          ;
          return; /* ****** EXIT to get next style*/
          ;
        end
      end
      ;
      if (AF0HW01.AF0HWPLN != " ") /* XPLCD specified*/
        if (AF0HW01.AF0HWPLN == XP1REC.XPLCD) /* Comb.match with criteria*/
                        /* (XPlCD matched)*/
        else
          ;
          return; /* ****** EXIT to get next style*/
          ;
        end
      end
      ;
      ;
      if (AF0HW01.AF0HWGA != " ") /* XGACD specified*/
        if (AF0HW01.AF0HWGA == XP1REC.XGACD) /* Comb.match with criteria*/
                        /* (XGACD valid)*/
        else
          ;
          return; /* ****** EXIT to get next style*/
          ;
        end
      end
      ;
      if (AF0HW01.AF0HWPTP != " ") /* XPRCD specified*/
        if (AF0HW01.AF0HWPTP == XP1REC.XPRCD) /* Comb.match with criteria*/
                        /* (XPRCD valid)*/
        else
          ;
          return; /* ****** EXIT to get next style*/
          ;
        end
      end
      ;
      ;
      AF0HW01.AF0HWST1 = " "; /* Indicate style for processing*/
      AF0HW01.AF0HWSQU = "Y"; /* Style qualified*/
      ;
      ;
    else
      ;
      if (AF0HW01.AF0HWST1 == " ") /* Specified style already processed*/
                   /* (Style retrieved is valid)*/
        AF0HW01.AF0HWSQU = "Y"; /* Style qualified*/
        ;
      else
        ;
        return; /* ****** EXIT to reselect data*/
        ;
      end
      ;
    end
    ;
  else
    ;
    AF0HW01.AF0HWSQU = "Y"; /* Style qualified*/
    ;
  end
  ;
  ;
  ;
end // end AF0HS10

// Process Historical Summary DB
Function AF0HS11()
   /* ------------------------------------------------------------*/
             /* ** Obtain DACAST.VDMANZ01 Rows ***/
   /* Set Select Historical Summary DB (DACAST.VDMANZ01) rows.*/
   /* If valid selection fields found  (Maximum 3 categories and*/
     /* and 2 selections)  Then:*/
    /* - Process all rows selected; Store all row data into map*/
      /* page/s for display.*/
    /* - Close DB cursor.*/
   /* Otherwise return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *======================================**/
   /* *  Set Select Historical Summary Rows  **/
   /* *======================================**/
  ;
  AF0HW01.AF0HWVLF = " "; /* Reset valid select indicator*/
  ;
  AF0HS12(); /* Set Select DACAST.VDMANZ01 rows*/
  ;
  ;
   /* *===================================**/
   /* *  Process Historical Summary Rows  **/
   /* *===================================**/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    if (AF0HW01.AF0HWVLF == "1" /* Valid select fields found*/
     || AF0HW01.AF0HWVLF == "2") /* Valid select fields found*/
      ;
      AFWREC.AFWSWC = " "; /* Reset EOF switch*/
      while (AFWREC.AFWSWC != "Y") /* Process all retrieved rows*/
        AF0HS13(); /* Process Hist Summary data*/
      end
      ;
      if (converseVar.validationMsgNum == 0) /* No errors found*/
        AF0HS14(); /* Close DACAST.VDMANZ01 cursor*/
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF0HS11

// Select Set Hist Summary DB
Function AF0HS12()
   /* ------------------------------------------------------------*/
            /* ** Obtain DACAST.VDMANZ01 ***/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set AFHREC empty; /* Reset rec work area*/
  ;
  AFHREC.XPRCD = AF0HW01.AF0HWHPT; /* prod type  cd*/
  AFHREC.XGACD = AF0HW01.AF0HWHGC; /* Gender/Age cd*/
  AFHREC.XDVCD = AF0HW01.AF0HWHDV; /* division   cd*/
  AFHREC.XPLCD = AF0HW01.AF0HWHPL; /* prod line  cd*/
  ;
  if (AF0HW01.AF0HWHOG == " ")
    AFHREC.XOWCD = "**"; /* Owner Group Cd*/
  else
    AFHREC.XOWCD = AF0HW01.AF0HWHOG; /* Owner Group Cd*/
  end
  ;
  ;
  if (AF0HW01.AF0HWHCC[AFWIDX1] != " ") /* Valid Category cd*/
    AFHREC.XPCCD = AF0HW01.AF0HWHCC[AFWIDX1]; /* Use as key*/
  else
    AF0HW01.AF0HWVLF = "N"; /* Indicate invalid sel field*/
    return; /* Return to calling process*/
  end
  ;
  AFHREC.XSUCD = AF0HW01.AF0HWHSC; /* Silhouette cd*/
  AFHREC.SY4SZSCL = "**"; /* Size scale cd*/
  ;
  ;
  if (AFWREC.AFWIDX2 == 1) /* First selection in map*/
           /* (Reformat As-Of-Date to Internal Date)*/
    AF0HW01.AF0HWEDW = AF0HW01.AF0HWHD1; /* To ext wk dt area*/
    AF0HW01.AF0HWDTC = 019; /* To int wk Century*/
    AF0HW01.AF0HWDTM = AF0HW01.AF0HWEDM; /* To int wk mm*/
    AF0HW01.AF0HWDTD = AF0HW01.AF0HWEDD; /* To int wk dd*/
    AF0HW01.AF0HWDTY = AF0HW01.AF0HWEDY; /* To int wk yy*/
    AFHREC.AFFASODT = AF0HW01.AF0HWDTW; /* As of date*/
    ;
    AFHREC.XSECD = AF0HW01.AF0HWHS1; /* Season cd*/
                 /* (Reformat Season Year)*/
    AF0HW01.AF0HWXSY = 0; /* Reset xsnyr wk area*/
    AF0HW01.AF0HWXSY = AF0HW01.AF0HWHY1; /* Season yr*/
    AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 1900; /* Add century*/
    AFHREC.XSNYR = AF0HW01.AF0HWXSY; /* Season yr*/
    ;
    AF0HW01.AF0HWVLF = "1"; /* Indicate sel fld*/
    ;
  else
    if (AF0HW01.AF0HWHD2 != 0   /* Valid as of date*/
     && AF0HW01.AF0HWHS2 != " " /* Valid season cd*/
     && AF0HW01.AF0HWHY2 != 0)  /* Valid season yr*/
             /* (Reformat as-of-date to internal date)*/
      AF0HW01.AF0HWEDW = AF0HW01.AF0HWHD2; /* To ext wk dt area*/
      AF0HW01.AF0HWDTC = 019; /* To int wk Century*/
      AF0HW01.AF0HWDTM = AF0HW01.AF0HWEDM; /* To int wk mm*/
      AF0HW01.AF0HWDTD = AF0HW01.AF0HWEDD; /* To int wk dd*/
      AF0HW01.AF0HWDTY = AF0HW01.AF0HWEDY; /* To int wk yy*/
      AFHREC.AFFASODT = AF0HW01.AF0HWDTW; /* As of date*/
      ;
      AFHREC.XSECD = AF0HW01.AF0HWHS2; /* Season cd*/
                   /* (Reformat Season Year)*/
      AF0HW01.AF0HWXSY = 0; /* Reset xsnyr wk area*/
      AF0HW01.AF0HWXSY = AF0HW01.AF0HWHY2; /* Season yr*/
      AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 1900; /* Add century*/
      AFHREC.XSNYR = AF0HW01.AF0HWXSY; /* Season yr*/
      ;
      AF0HW01.AF0HWVLF = "2"; /* Indicate sel fld*/
      ;
    else
      ;
      AF0HW01.AF0HWVLF = "N"; /* Indicate invalid sel fld*/
      return; /* Return to calling process*/
      ;
    end
    ;
  end
  ;
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VDMANZ01  **/
   /* *====================================**/
  ;
  try
    call "IO4210" ("S1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  AF0HW01.AF0HWVLF = "N"; /* Indicate invalid cat cd*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S12 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS12

// Process Hist Summary rows
Function AF0HS13()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* Store Historical Summary data, Using the Order Need Month*/
     /* as store pointer. Accumulate all qtys retrieved.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/
  ;
  try
    call "IO4210" ("N1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, store historical summary data*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      AF0HW03.AF0HWDPI = "Y"; /* Indicate data processed for select*/
      ;
      if (AFWREC.AFWIDX2 == 1)
        if (AFHREC.AFBNDTPR in AF0HW01.AF0HW-HIST-XSN1)
          AFWREC.AFWIDX5 = sysVar.arrayIndex;
        else
          if (AFHREC.AFBNDTPR < AF0HW01.AF0HW-HIST-XSN1[2])
            AFWREC.AFWIDX5 = 1;
          else
            AFWREC.AFWIDX5 = AF0HW01.AF0HW-LATE-IDX;
          end
        end
      else
        if (AFHREC.AFBNDTPR in AF0HW01.AF0HW-HIST-XSN2)
          AFWREC.AFWIDX5 = sysVar.arrayIndex;
        else
          if (AFHREC.AFBNDTPR < AF0HW01.AF0HW-HIST-XSN2[2])
            AFWREC.AFWIDX5 = 1;
          else
            AFWREC.AFWIDX5 = AF0HW01.AF0HW-LATE-IDX;
          end
        end
      end
      ;
      ;
      AF0HW03.AF0HWHB1[AFWIDX5] = AF0HW03.AF0HWHB1[AFWIDX5] +       AFHREC.AFGSOT1Q;
      AF0HW03.AF0HWHB2[AFWIDX5] = AF0HW03.AF0HWHB2[AFWIDX5] +       AFHREC.AFGSOT2Q;
      AF0HW03.AF0HWHB3[AFWIDX5] = AF0HW03.AF0HWHB3[AFWIDX5] +       AFHREC.AFGSOT3Q;
      AF0HW03.AF0HWHB4[AFWIDX5] = AF0HW03.AF0HWHB4[AFWIDX5] +       AFHREC.AFGSOT4Q;
      AF0HW03.AF0HWHB5[AFWIDX5] = AF0HW03.AF0HWHB5[AFWIDX5] +       AFHREC.AFGSOT5Q;
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/
    end
    ;
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWSWC = "Y"; /* Force end of data*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S13 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS13

// Close Hist Summary cursor
Function AF0HS14()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4210" ("C1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS14

// Process Historical Detail DB
Function AF0HS15()
   /* ------------------------------------------------------------*/
             /* ** Obtain DACAST.VDMANY01 Rows ***/
   /* Set Select Historical Detail DB (DACAST.VDMANY01) rows.*/
   /* If valid selection fields found  (Maximum 3 categories and*/
     /* and 2 selections)  Then:*/
    /* - Process all rows selected; Store all row data into map*/
      /* page/s for display.*/
    /* - Close DB cursor.*/
   /* Otherwise return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=====================================**/
   /* *  Set Select Historical Detail Rows  **/
   /* *=====================================**/
  ;
  AF0HW01.AF0HWVLF = " "; /* Reset valid select indicator*/
  ;
  AF0HS16(); /* Set Select DACAST.VDMANY01 rows*/
  ;
  ;
   /* *==================================**/
   /* *  Process Historical Detail Rows  **/
   /* *==================================**/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    if (AF0HW01.AF0HWVLF == "1" /* Valid select fields found*/
     || AF0HW01.AF0HWVLF == "2") /* Valid select fields found*/
      ;
      AFWREC.AFWSWC = " "; /* Reset EOF switch*/
      while (AFWREC.AFWSWC != "Y") /* Process all retrieved rows*/
        AF0HS17(); /* Process Hist Detail data*/
      end
      ;
      if (converseVar.validationMsgNum == 0) /* No errors found*/
        AF0HS18(); /* Close DACAST.VDMANY01 cursor*/
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF0HS15

// Select Set Hist Detail DB
Function AF0HS16()
   /* ------------------------------------------------------------*/
            /* ** Obtain DACAST.VDMANY01 ***/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set AFGREC empty; /* Reset rec work area*/
  ;
  AFGREC.SY1STNBR = AF0HW01.AF0HWHST; /* Style as key*/
  ;
  if (AFWREC.AFWIDX2 == 1) /* First selection in map*/
             /* (Reformat As-of-Date to Internal Date)*/
    AF0HW01.AF0HWEDW = AF0HW01.AF0HWHD1; /* To ext date wk*/
    AF0HW01.AF0HWDTC = 019; /* To int date wk century*/
    AF0HW01.AF0HWDTM = AF0HW01.AF0HWEDM; /* To int date wk mm*/
    AF0HW01.AF0HWDTD = AF0HW01.AF0HWEDD; /* To int date wk dd*/
    AF0HW01.AF0HWDTY = AF0HW01.AF0HWEDY; /* To int date wk yy*/
    AFGREC.AFFASODT = AF0HW01.AF0HWDTW; /* As of date*/
    ;
    AFGREC.XSECD = AF0HW01.AF0HWHS1; /* Season cd*/
                   /* (Reformat Season Year)*/
    AF0HW01.AF0HWXSY = 0; /* Reset wk area*/
    AF0HW01.AF0HWXSY = AF0HW01.AF0HWHY1; /* To XSNYR wk area*/
    AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 1900; /* Add century*/
    AFGREC.XSNYR = AF0HW01.AF0HWXSY; /* Season yr*/
    ;
    AF0HW01.AF0HWVLF = "1"; /* Indicate sel fld*/
    ;
  else
    ;
    if (AF0HW01.AF0HWHD2 != 0   /* Valid as of date*/
     && AF0HW01.AF0HWHS2 != " " /* Valid season cd*/
     && AF0HW01.AF0HWHY2 != 0)  /* Valid season yr*/
               /* (Reformat As-of-Date to Internal Date)*/
      AF0HW01.AF0HWEDW = AF0HW01.AF0HWHD2; /* To ext date wk*/
      AF0HW01.AF0HWDTC = 019; /* To int date wk century*/
      AF0HW01.AF0HWDTM = AF0HW01.AF0HWEDM; /* To int date wk mm*/
      AF0HW01.AF0HWDTD = AF0HW01.AF0HWEDD; /* To int date wk dd*/
      AF0HW01.AF0HWDTY = AF0HW01.AF0HWEDY; /* To int date wk yy*/
      AFGREC.AFFASODT = AF0HW01.AF0HWDTW; /* As of date*/
      ;
      AFGREC.XSECD = AF0HW01.AF0HWHS2; /* Season cd*/
                     /* (Reformat Season Year)*/
      AF0HW01.AF0HWXSY = 0; /* Reset wk area*/
      AF0HW01.AF0HWXSY = AF0HW01.AF0HWHY2; /* To XSNYR wk area*/
      AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 1900; /* Add century*/
      AFGREC.XSNYR = AF0HW01.AF0HWXSY; /* Season yr*/
      ;
      AF0HW01.AF0HWVLF = "2"; /* Indicate sel fld*/
      ;
    else
      ;
      AF0HW01.AF0HWVLF = "N"; /* Indicate invalid sel fld*/
      return; /* Return to calling process*/
      ;
    end
    ;
  end
  ;
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VDMANY01  **/
   /* *====================================**/
  ;
  try
    call "IO4200" ("S1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  AF0HW01.AF0HWVLF = "N"; /* Indicate invalid cat cd*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S16 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS16

// Process Hist Detail rows
Function AF0HS17()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* Store Historical Detail data; Use Order Need Month as store*/
     /* pointer. Accumulate all qtys retrieved.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/
  ;
  try
    call "IO4200" ("N1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, store historical summary data*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      AF0HW03.AF0HWDPI = "Y"; /* Indicate w/ data for select*/
      ;
      AFWREC.AFWIDX3 = 1; /* Reset Size/Qty index*/
      ;
      AF0HW03.AF0HWTF1 = 0; /* Reset wk accumulator 1*/
      AF0HW03.AF0HWTF2 = 0; /* Reset wk accumulator 2*/
      AF0HW03.AF0HWTF3 = 0; /* Reset wk accumulator 3*/
      AF0HW03.AF0HWTF4 = 0; /* Reset wk accumulator 4*/
      AF0HW03.AF0HWTF5 = 0; /* Reset wk accumulator 5*/
      ;
      while (AFWREC.AFWIDX3 <= 10) /* Process all sizes/qtys*/
        ;
        AF0HW03.AF0HWTF1 = AF0HW03.AF0HWTF1 + AFGREC.AFGSOT1Q[AFWIDX3];
        AF0HW03.AF0HWTF2 = AF0HW03.AF0HWTF2 + AFGREC.AFGSOT2Q[AFWIDX3];
        AF0HW03.AF0HWTF3 = AF0HW03.AF0HWTF3 + AFGREC.AFGSOT3Q[AFWIDX3];
        AF0HW03.AF0HWTF4 = AF0HW03.AF0HWTF4 + AFGREC.AFGSOT4Q[AFWIDX3];
        AF0HW03.AF0HWTF5 = AF0HW03.AF0HWTF5 + AFGREC.AFGSOT5Q[AFWIDX3];
        ;
        AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* Loop through*/
        ;
      end
      ;
      if (AFWREC.AFWIDX2 == 1)
        if (AFGREC.AFBNDTPR in AF0HW01.AF0HW-HIST-XSN1)
          AFWREC.AFWIDX5 = sysVar.arrayIndex;
        else
          if (AFGREC.AFBNDTPR < AF0HW01.AF0HW-HIST-XSN1[2])
            AFWREC.AFWIDX5 = 1;
          else
            AFWREC.AFWIDX5 = AF0HW01.AF0HW-LATE-IDX;
          end
        end
      else
        if (AFGREC.AFBNDTPR in AF0HW01.AF0HW-HIST-XSN2)
          AFWREC.AFWIDX5 = sysVar.arrayIndex;
        else
          if (AFGREC.AFBNDTPR < AF0HW01.AF0HW-HIST-XSN2[2])
            AFWREC.AFWIDX5 = 1;
          else
            AFWREC.AFWIDX5 = AF0HW01.AF0HW-LATE-IDX;
          end
        end
      end
      ;
      AF0HW03.AF0HWHB1[AFWIDX5] = AF0HW03.AF0HWHB1[AFWIDX5] +       AF0HW03.AF0HWTF1;
      AF0HW03.AF0HWHB2[AFWIDX5] = AF0HW03.AF0HWHB2[AFWIDX5] +       AF0HW03.AF0HWTF2;
      AF0HW03.AF0HWHB3[AFWIDX5] = AF0HW03.AF0HWHB3[AFWIDX5] +       AF0HW03.AF0HWTF3;
      AF0HW03.AF0HWHB4[AFWIDX5] = AF0HW03.AF0HWHB4[AFWIDX5] +       AF0HW03.AF0HWTF4;
      AF0HW03.AF0HWHB5[AFWIDX5] = AF0HW03.AF0HWHB5[AFWIDX5] +       AF0HW03.AF0HWTF5;
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/
    end
    ;
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWSWC = "Y"; /* Force end of data*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S17 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS17

// Close Hist Detail cursor
Function AF0HS18()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4200" ("C1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S18 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS18

// Obtain As-of-Date XREF record
Function AF0HS19()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select unique' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4190" ("S ", SQLCA, AFFREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and XREF record found*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S19 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANX01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS19

// Edit historical as-of-date 2
Function AF0HS20()
  if (AF0HM001.AF0HMHD2 == " ") /* As-of-date fld spaces*/
    AF0HW01.AF0HWDX2 = " "; /* Space out alpha wk fld*/
    AF0HW01.AF0HWHD2 = 0; /* Zero out num wk fld*/
    return; /* Return to calling process*/
  end
  ;
  ;
  AF0HW01.AF0HWSSE = AF0HM001.AF0HMHS2; /* Move season cd wk fld*/
  AF0HW01.AF0HWSSY = AF0HM001.AF0HMHY2; /* Move season yr wk fld*/
  AF0HW01.AF0HWSAS = AF0HM001.AF0HMHD2; /* Move as-of-date wk fld*/
  AF0HW01.AF0HWDX2 = AF0HM001.AF0HMHD2; /* Move as-of-date wk fld*/
  ;
  AF0HW01.AF0HWVLF = " "; /* Reset validation ind*/
  ;
  ;
  AF0HS21(); /* Edit Historical as-of-date*/
  ;
  ;
  if (AF0HW01.AF0HWVLF == " ") /* As-of-date found*/
                  /* (Field is valid)*/
    AF0HW01.AF0HWHD2 = TA2REC.TA2GRGA; /* Save to wk fld*/
    ;
  else
                  /* (Field in error)*/
    AF0HW01.AF0HWHD2 = 0; /* Zero out num wk fld*/
    AFWREC.AFWPRCSN = "S20 "; /* Process number*/
    set AF0HM001.AF0HMHD2 cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 47; /* Indicate error message*/
    AF0HW01.AF0HWDX2 = 0; /* Move as-of-date wk fld*/
    ;
  end
  ;
  ;
  ;
end // end AF0HS20

// Check as-of-date in XREF file
Function AF0HS21()
  ;
   /* ------------------------------------------------------------*/
     /* check valid end date entered*/
   /* ------------------------------------------------------------*/
  ;
  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGA = AF0HW01.AF0HWSAS; /* To ext date wk area*/
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Check valid date w/routine*/
  ;
  if (TA2REC.TA2RTNCD != 0) /* invalid date entered*/
    AF0HW01.AF0HWVLF = "E"; /* Indicate invalid date*/
    return; /* Return to calling process*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
    /* if date valid, check DACAST.VDMANX01 db for valid match*/
   /* ------------------------------------------------------------*/
  ;
           /* (Reformat As-of-Date to Internal Date)*/
  AF0HW01.AF0HWEDW = TA2REC.TA2GRGA; /* To ext date wk area*/
  AF0HW01.AF0HWDTC = 019; /* To int date century*/
  AF0HW01.AF0HWDTM = AF0HW01.AF0HWEDM; /* To int date mm*/
  AF0HW01.AF0HWDTD = AF0HW01.AF0HWEDD; /* To int date dd*/
  AF0HW01.AF0HWDTY = AF0HW01.AF0HWEDY; /* To int date yy*/
  ;
                 /* (Reformat Season Year)*/
  AF0HW01.AF0HWXSY = 0; /* Reset XSNYR wk area*/
  AF0HW01.AF0HWXSY = AF0HW01.AF0HWSSY; /* Move to wk area*/
  AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 1900; /* Add century*/
  ;
  ;
  AFWREC.AFWIDX2 = 1; /* Reset loop index*/
  ;
  while (AFWREC.AFWIDX2 <= 35) /* Process all as-of-dates*/
    ;
    if (AFFREC.XSECD[AFWIDX2] == AF0HW01.AF0HWSSE /* Season cd*/
     && AFFREC.XSNYR[AFWIDX2] == AF0HW01.AF0HWXSY /* Season yr*/
     && AFFREC.AFFASODT[AFWIDX2] == AF0HW01.AF0HWDTW) /* as-of-date*/
      return; /* Return to calling process*/
    end
    ;
    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
    ;
  end
  ;
  AF0HW01.AF0HWVLF = "E"; /* As-of-date not found*/
  ;
  ;
  ;
end // end AF0HS21

// Edit historical season yr 2
Function AF0HS22()
  if (AF0HM001.AF0HMHY2 == 0) /* Historical season yr zeroes*/
    AF0HW01.AF0HWHY2 = 0; /* move to wk storage*/
    return; /* Return to calling process*/
  end
  ;
  AF0HW01.AF0HWHY2 = AF0HM001.AF0HMHY2; /* save to wk storage*/
  ;
  AF0HW01.AF0HWXSY = 0; /* initialize xsnyr wk area*/
  AF0HW01.AF0HWXSY = AF0HM001.AF0HMHY2; /* move to wk area*/
  AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 1900; /* move century*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0HW01.AF0HWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S22 "; /* Process number*/
  set AF0HM001.AF0HMHY2 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  AF0HW01.AF0HWHY2 = 0; /* move to wk storage*/
  ;
  ;
  ;
  ;
end // end AF0HS22

// Edit historical season cd 2
Function AF0HS23()
  if (AF0HM001.AF0HMHS2 == " ") /* Season cd spaces*/
    AF0HW01.AF0HWHS2 = " "; /* save to wk storage*/
    return;
  end
  ;
  AF0HW01.AF0HWHS2 = AF0HM001.AF0HMHS2; /* save to wk storage*/
  ;
  if (AF0HM001.AF0HMHS2 in XSETBL.XSECD)
                     /* (field is valid)*/
    ;
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S23 "; /* Process number*/
    set AF0HM001.AF0HMHS2 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    AF0HW01.AF0HWHS2 = " "; /* save to wk storage*/
    return; /* return to calling process*/
    ;
  end
  ;
  ;
  AF0HW01.AF0HWXSS = " "; /* Initialize wk area*/
  AF0HW01.AF0HWXYR = +0; /* Initialize wk area*/
  AF0HW01.AF0HWXSS = AF0HM001.AF0HMHS2; /* To XSECD wk area*/
  AF0HW01.AF0HWXYR = AF0HM001.AF0HMHY2; /* Format wk area*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0HW01.AF0HWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      AF0HW01.AF0HW-HIST-BDT2 = YSNTBL.XSN-SESN-BDT[AFWIDX5];
      AF0HW01.AF0HW-HIST-XDT2 = YSNTBL.XSN-SESN-XDT[AFWIDX5];
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S23 "; /* Process number*/
  set AF0HM001.AF0HMHY2 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  AF0HW01.AF0HWHS2 = " "; /* save to wk storage*/
  AF0HW01.AF0HWHY2 = 0; /* save to wk storage*/
  ;
end // end AF0HS23

// Edit historical as-of-date 1
Function AF0HS24()
  if (AF0HM001.AF0HMHD1 == " ") /* As-of-date spaces*/
    AF0HW01.AF0HWDX1 = " "; /* Space out alpha wk fld*/
    AF0HW01.AF0HWHD1 = 0; /* Zero out num wk fld*/
    return; /* Return to calling process*/
  end
  ;
  ;
  AF0HW01.AF0HWSSE = AF0HM001.AF0HMHS1; /* Move season cd wk fld*/
  AF0HW01.AF0HWSSY = AF0HM001.AF0HMHY1; /* Move season yr wk fld*/
  AF0HW01.AF0HWSAS = AF0HM001.AF0HMHD1; /* Move as-of-date wk fld*/
  AF0HW01.AF0HWDX1 = AF0HM001.AF0HMHD1; /* Save to wk fld*/
  ;
  AF0HW01.AF0HWVLF = " "; /* Reset validation ind*/
  ;
  ;
  AF0HS21(); /* Edit Historical as-of-date*/
  ;
  ;
  if (AF0HW01.AF0HWVLF == " ") /* As-of-date found*/
                  /* (Field is valid)*/
    AF0HW01.AF0HWHD1 = TA2REC.TA2GRGA; /* Save to wk fld*/
    ;
  else
                  /* (Field in error)*/
    AF0HW01.AF0HWHD1 = 0; /* Zero out num wk fld*/
    AF0HW01.AF0HWDX1 = 0; /* Save to wk fld*/
    AFWREC.AFWPRCSN = "S24 "; /* Process number*/
    set AF0HM001.AF0HMHD1 cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 47; /* Indicate error message*/
    ;
  end
  ;
  ;
  ;
end // end AF0HS24

// Edit historical season yr 1
Function AF0HS25()
  if (AF0HM001.AF0HMHY1 == 0) /* Season yr eq zeroes*/
    AF0HW01.AF0HWHY1 = 0; /* save to wk storage*/
    return; /* Return to calling process*/
  end
  ;
  AF0HW01.AF0HWHY1 = AF0HM001.AF0HMHY1; /* save to wk storage*/
  ;
  AF0HW01.AF0HWXSY = 0; /* initialize xsnyr wk area*/
  AF0HW01.AF0HWXSY = AF0HM001.AF0HMHY1; /* move to wk area*/
  AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 1900; /* move century*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0HW01.AF0HWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S25 "; /* Process number*/
  set AF0HM001.AF0HMHY1 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  AF0HW01.AF0HWHY1 = 0; /* save to wk storage*/
  ;
end // end AF0HS25

// Edit historical season cd 1
Function AF0HS26()
  if (AF0HM001.AF0HMHS1 == " ") /* Season cd spaces*/
    AF0HW01.AF0HWHS1 = " "; /* save to wk storage*/
    return; /* REturn to calling process*/
  end
  ;
  AF0HW01.AF0HWHS1 = AF0HM001.AF0HMHS1; /* save to wk storage*/
  ;
  if (AF0HM001.AF0HMHS1 in XSETBL.XSECD)
                     /* (field is valid)*/
    ;
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S26 "; /* Process number*/
    set AF0HM001.AF0HMHS1 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    return; /* return to calling process*/
    ;
  end
  ;
  AF0HW01.AF0HWXSS = " "; /* Initialize wk area*/
  AF0HW01.AF0HWXYR = +0; /* Initialize wk area*/
  AF0HW01.AF0HWXSS = AF0HM001.AF0HMHS1; /* To XSECD wk area*/
  AF0HW01.AF0HWXYR = AF0HM001.AF0HMHY1; /* Format wk area*/
  ;
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0HW01.AF0HWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      AF0HW01.AF0HWHBD = YSNTBL.XSN-SESN-BDT[AFWIDX5];
      AF0HW01.AF0HWHXD = YSNTBL.XSN-SESN-XDT[AFWIDX5];
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S26 "; /* Process number*/
  set AF0HM001.AF0HMHY1 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  AF0HW01.AF0HWHS1 = " "; /* save to wk storage*/
  ;
end // end AF0HS26

// Edit historical style no.
Function AF0HS27()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'XSPG201' call.*/
   /* If not found, indicate an edit error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/
  ;
  if (AF0HM001.AF0HMSTY == " ") /* Style = spaces*/
    AF0HW01.AF0HWHST = " "; /* Space out alt style wk*/
    return; /* Exit to calling process*/
  end
  ;
  ;
  AF0HW01.AF0HWHST = AF0HM001.AF0HMSTY; /* Save to wk fld*/
  ;
  ;
   /* *=======================================**/
   /* *  Get Style Row from  DPRODG.VSYCLR01  **/
   /* *=======================================**/
  ;
  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0HM001.AF0HMSTY; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0HV14"; /* Process name*/
  ;
  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/
  ;
  ;
  ;
   /* *==========================**/
   /* *  Check Retrieval Status  **/
   /* *==========================**/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
    ;
                   /* (Field is valid)*/
    ;
  else
    ;
                  /* (Field in error)*/
    set AF0HM001.AF0HMSTY cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate not found*/
    AFWREC.AFWPRCSN = "S27 "; /* Process number*/
    AF0HW01.AF0HWHST = " "; /* Space out alt style wk*/
    ;
  end
  ;
  ;
  ;
end // end AF0HS27

// Edit historical silhouette cd
Function AF0HS28()
  ;
  ;
  ;
  if (AF0HM001.AF0HMHSC == " ") /* Field eq spaces*/
    AF0HW01.AF0HWHSC = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0HW01.AF0HWHSC = AF0HM001.AF0HMHSC; /* save to wk map storage*/
  ;
  ;
  if (AF0HM001.AF0HMHSC in XSUTBL.XSUCD)
    ;
    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      return; /* Return to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S28 "; /* Process number*/
  set AF0HM001.AF0HMHSC cursor, bold; /* highlight field*/
  AF0HW01.AF0HWHSC = " "; /* Space out save area*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  ;
  ;
end // end AF0HS28

// Edit historical category cd
Function AF0HS29()
  ;
   /* SHIFT ALL CATEGORIES TO THE FIRST*/
  ;
  if (AF0HM001.AF0HMHCC[2] == " "
   && AF0HM001.AF0HMHCC[3] != " ")
    AF0HM001.AF0HMHCC[2] = AF0HM001.AF0HMHCC[3];
    AF0HM001.AF0HMHCC[3] = "  ";
  end
  ;
  if (AF0HM001.AF0HMHCC[1] == " "
   && AF0HM001.AF0HMHCC[2] != " ")
    AF0HM001.AF0HMHCC[1] = AF0HM001.AF0HMHCC[2];
    AF0HM001.AF0HMHCC[2] = "  ";
  end
   /* VALIDATE THERE IS NOT A SECOND CAT IN 3*/
  if (AF0HM001.AF0HMHCC[2] == " "
   && AF0HM001.AF0HMHCC[3] != " ")
    AF0HM001.AF0HMHCC[2] = AF0HM001.AF0HMHCC[3];
    AF0HM001.AF0HMHCC[3] = "  ";
  end
  ;
  AFWREC.AFWIDX1 = 1; /* Reset loop index*/
  ;
  ;
  while (AFWREC.AFWIDX1 <= 3) /* Edit all Historical cat cds*/
    ;
    if (AF0HM001.AF0HMHCC[AFWIDX1] == " ") /* Map fld spaces*/
      AF0HW01.AF0HWHCC[AFWIDX1] = " "; /* Space out save area*/
    else
      ;
      AF0HW01.AF0HWHCC[AFWIDX1] = AF0HM001.AF0HMHCC[AFWIDX1];
      ;
      if (AF0HM001.AF0HMHCC[AFWIDX1] in XPCTBL.XPCCD)
        ;
        if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
         && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                           /* (field is valid)*/
        else
                           /* (field in error)*/
          AFWREC.AFWPRCSN = "S29 "; /* Process number*/
          set AF0HM001.AF0HMHCC[AFWIDX1] cursor, bold;
          XP1REC.XP1MNO = 35; /* indicate error message*/
          AF0HW01.AF0HWHCC[AFWIDX1] = "  ";
          ;
        end
        ;
      else
                         /* (field in error)*/
        AFWREC.AFWPRCSN = "S29 "; /* Process number*/
        set AF0HM001.AF0HMHCC[AFWIDX1] cursor, bold;
        AF0HW01.AF0HWHCC[AFWIDX1] = "  ";
        XP1REC.XP1MNO = 35; /* indicate error message*/
        ;
      end
      ;
    end
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0HS29

// Edit historical Gender/Age cd
Function AF0HS30()
  ;
  ;
  if (AF0HM001.AF0HMHGC == " ") /* Map fld eq spaces*/
    AF0HW01.AF0HWHGC = " "; /* Space out save fld*/
    return; /* Return to calling process*/
  end
  ;
  ;
  AF0HW01.AF0HWHGC = AF0HM001.AF0HMHGC; /* save to wk storage*/
  AF0HW01.XGACD = AF0HM001.AF0HMHGC;
  AF0HW01.XGPCD = "03";
  ;
  if (AF0HW01.XGAKEY in XGATBL.XGAKEY)
    ;
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      /* AND XGATBL.XGPCD(EZETST) EQ '03'   ; Apparel cd*/
                      /* (Field is valid)*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S30 "; /* Process number*/
  set AF0HM001.AF0HMHGC cursor, bold; /* highlight field*/
  AF0HW01.AF0HWHGC = " "; /* Space out save fld*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  ;
  ;
  ;
end // end AF0HS30

// historical Relational check
Function AF0HS31()
   /* *============================================**/
   /* * Check season cd/yr/as-of-date completeness **/
   /* *============================================**/
  ;
            /* (Sesn Cd/Yr/As-of-date Option 1)*/
  ;
  if (AF0HM001.AF0HMHS1 != " " /* Valid season yr 1*/
   && AF0HM001.AF0HMHY1 != 0   /* and Valid season yr 1*/
   && AF0HM001.AF0HMHD1 != " ") /* and Valid as-of-date 1*/
               /* (valid option 1)*/
    AF0HW01.AF0HWOP1 = "V"; /* Indicate valid option 1*/
    ;
  else
    ;
    if (AF0HM001.AF0HMHS1 == " " /* Empty season yr 1*/
     && AF0HM001.AF0HMHY1 == 0   /* and empty season yr 1*/
     && AF0HM001.AF0HMHD1 == " ") /* and empty as-of-date 1*/
                 /* (empty option 1)*/
      AF0HW01.AF0HWOP1 = " "; /* Indicate empty option 1*/
      ;
    else
             /* (option 1 in error - incomplete fields)*/
      AFWREC.AFWPRCSN = "S31 "; /* Process number*/
      set AF0HM001.AF0HMHS1 cursor, bold; /* Highlight field*/
      set AF0HM001.AF0HMHY1 bold; /* Highlight field*/
      set AF0HM001.AF0HMHD1 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0HW01.AF0HWOP1 = "E"; /* Indicate error option 1*/
      ;
    end
    ;
  end
  ;
            /* (Sesn Cd/Yr/As-of-date Option 2)*/
  ;
  if (AF0HM001.AF0HMHS2 != " " /* Valid season yr 2*/
   && AF0HM001.AF0HMHY2 != 0   /* and Valid season yr 2*/
   && AF0HM001.AF0HMHD2 != " ") /* and Valid as-of-date 2*/
               /* (valid option 2)*/
    AF0HW01.AF0HWOP2 = "V"; /* Indicate valid option 2*/
    ;
  else
    ;
    if (AF0HM001.AF0HMHS2 == " " /* Empty season yr 2*/
     && AF0HM001.AF0HMHY2 == 0   /* and empty season yr 2*/
     && AF0HM001.AF0HMHD2 == " ") /* and empty as-of-date 2*/
                 /* (empty option 2)*/
      AF0HW01.AF0HWOP2 = " "; /* Indicate empty option 2*/
      ;
    else
             /* (option 2 in error - incomplete fields)*/
      AFWREC.AFWPRCSN = "S31 "; /* Process number*/
      set AF0HM001.AF0HMHS2 cursor, bold; /* Highlight field*/
      set AF0HM001.AF0HMHY2 bold; /* Highlight field*/
      set AF0HM001.AF0HMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0HW01.AF0HWOP2 = "E"; /* Indicate error option 1*/
      ;
    end
    ;
  end
  ;
  ;
  ;
  if (AF0HW01.AF0HWOP1 == "V" /* Option 1 valid*/
   && AF0HW01.AF0HWOP2 == "V") /* and Option 1 valid*/
    ;
    if (AF0HM001.AF0HMHS1 == AF0HM001.AF0HMHS2 /* Duplicate sesn cd*/
     && AF0HM001.AF0HMHS1 == AF0HM001.AF0HMHS2 /* Duplicate sesn yr*/
     && AF0HM001.AF0HMHD1 == AF0HM001.AF0HMHD2) /* Duplicate as-of-date*/
      ;
             /* (option 2 in error - Duplicate fields)*/
      AFWREC.AFWPRCSN = "S31 "; /* Process number*/
      set AF0HM001.AF0HMHS2 cursor, bold; /* Highlight field*/
      set AF0HM001.AF0HMHY2 bold; /* Highlight field*/
      set AF0HM001.AF0HMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0HW01.AF0HWOP2 = "E"; /* Indicate error option 1*/
      ;
    end
    ;
  end
  ;
  if (AF0HW01.AF0HWOP1 != " " /* Option 1 empty*/
   && AF0HW01.AF0HWOP2 != " " /* Option 2 empty*/
   && AF0HW01.AF0HWHBK != 0)  /* BOOKINGS DATE ENTERED*/
    AFWREC.AFWPRCSN = "S31 "; /* Process number*/
    set AF0HM001.AF0HMHBK cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 88; /* Indicate error message*/
  end
  ;
  ;
  ;
  if (XP1REC.XP1MNO != 0) /* Errors detected*/
    return; /* Return to calling process*/
  end
  ;
  ;
  ;
   /* *==========================================**/
   /* * Check Historical Fields for Completeness **/
   /* *==========================================**/
  ;
  ;
  if (AF0HW01.AF0HWOP1 == "V" /* Option 1 valid*/
   || AF0HW01.AF0HWOP2 == "V") /* Option 2 valid*/
    ;
    if (AF0HM001.AF0HMSTY == " ") /* No style entered*/
      ;
      if (AF0HM001.AF0HMHXPR != " " /* Valid TYPE*/
       && AF0HM001.AF0HMHGC != " "  /* Valid Gender/Age cd*/
       && AF0HM001.AF0HMHDV != " "  /* and Valid division code*/
       && AF0HM001.AF0HMHPL != " "  /* and productline code*/
       && AF0HM001.AF0HMHSC != " "  /* and Valid Silhouette cd*/
       && AF0HM001.AF0HMHCC[1] != " ") /* Categ 1 valid*/
                 /* (Valid XDV/TP/XGA/Ln/XPC/XSU Combination)*/
        return; /* Return to calling process*/
        ;
      else
        ;
               /* (Invalid XGA/XPl/XSU Combination)*/
        AFWREC.AFWPRCSN = "S31 "; /* Process number*/
        if (AF0HM001.AF0HMHSC == " ") /* NO Silhouette cd*/
          set AF0HM001.AF0HMHSC cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 34; /* Indicate error message*/
        end
        if (AF0HM001.AF0HMHCC[1] == " ") /* NO CAT*/
          set AF0HM001.AF0HMHCC[1] cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 35; /* Indicate error message*/
        end
        if (AF0HM001.AF0HMHPL == " ") /* NO productline code*/
          set AF0HM001.AF0HMHPL cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 81; /* Indicate error message*/
        end
        if (AF0HM001.AF0HMHGC == " ") /* NO Gender/Age cd*/
          set AF0HM001.AF0HMHGC cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 36; /* Indicate error message*/
        end
        if (AF0HM001.AF0HMHXPR == " ") /* NO TYPE*/
          set AF0HM001.AF0HMHXPR cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 80; /* Indicate error message*/
        end
        if (AF0HM001.AF0HMHDV == " ") /* NO division code*/
          set AF0HM001.AF0HMHDV cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 29; /* Indicate error message*/
        end
        return; /* Return to calling process*/
        ;
      end
      ;
    else /* Valid style entered*/
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
  end
  ;
  ;
  if (AF0HW01.AF0HWOP1 == " " /* Option 1 empty*/
   || AF0HW01.AF0HWOP2 == " ") /* Option 2 empty*/
    ;
    if (AF0HM001.AF0HMSTY != " ") /* Style entered*/
             /* (Data Request Option Missing)*/
      AFWREC.AFWPRCSN = "S31 "; /* Process number*/
      set AF0HM001.AF0HMHS1 cursor, bold; /* Highlight field*/
      set AF0HM001.AF0HMSTY bold; /* Highlight field*/
      set AF0HM001.AF0HMHY1 bold; /* Highlight field*/
      set AF0HM001.AF0HMHD1 bold; /* Highlight field*/
      set AF0HM001.AF0HMHS2 bold; /* Highlight field*/
      set AF0HM001.AF0HMHY2 bold; /* Highlight field*/
      set AF0HM001.AF0HMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      ;
    else
      ;
      if (AF0HM001.AF0HMHGC != " "  /* Valid Gender/Age cd*/
       || AF0HM001.AF0HMHDV != " "  /* Valid DIVISION   cd*/
       || AF0HM001.AF0HMHXPR != " " /* Valid PROD TYPE  cd*/
       || AF0HM001.AF0HMHPL != " "  /* Valid PROD LINE  cd*/
       || AF0HM001.AF0HMHSC != " "  /* Valid Silhouette cd*/
       || AF0HM001.AF0HMHCC[1] != " ") /* Categ 1 valid*/
                   /* (Data Request Option Missing)*/
        AFWREC.AFWPRCSN = "S31 "; /* Process number*/
        set AF0HM001.AF0HMHS1 cursor, bold; /* Highlight field*/
        set AF0HM001.AF0HMHY1 bold; /* Highlight field*/
        set AF0HM001.AF0HMHD1 bold; /* Highlight field*/
        set AF0HM001.AF0HMHS2 bold; /* Highlight field*/
        set AF0HM001.AF0HMHY2 bold; /* Highlight field*/
        set AF0HM001.AF0HMHD2 bold; /* Highlight field*/
        XP1REC.XP1MNO = 47; /* Indicate error message*/
      end
      ;
    end
    ;
  end
end // end AF0HS31

// Edit Start Style no.
Function AF0HS33()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'XSPG201' call.*/
   /* If not found, indicate an edit error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/
  ;
  if (AF0HM001.SY1STNBR == " ") /* Style = spaces*/
    AF0HW01.SY1STNBR = " "; /* Space out wk storage*/
    AF0HW01.AF0HWST1 = " "; /* Space out wk storage*/
    AF0HW01.AF0HWST2 = " "; /* Space out wk storage*/
    AF0HW01.AF0HWSTY = " "; /* Space out wk storage*/
    return; /* Exit to calling process*/
  end
  ;
  ;
  AF0HW01.AF0HWSTY = AF0HM001.SY1STNBR; /* Save to wk map storage*/
  ;
  ;
  ;
   /* *=======================================**/
   /* *  Get Style Row from  DPRODG.VSYCLR01  **/
   /* *=======================================**/
  ;
  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0HW01.AF0HWSTY; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0HV22"; /* Process name*/
  ;
  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/
  ;
  ;
  ;
   /* *==========================**/
   /* *  Check Retrieval Status  **/
   /* *==========================**/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
    ;
                   /* (Field is valid)*/
    AF0HW01.SY1STNBR = AF0HM001.SY1STNBR; /* Save to wk st*/
    ;
    if (AF0HM001.SY1STNBR == AF0HW01.AF0HWST2) /* Save to alt wk stor*/
      ;
                    /* (Same style being processed)*/
                          /* --- B U T ---*/
      if (AFWREC.AFWSWR == "Y") /* Style is part of new keys entered*/
        AF0HW01.AF0HWST1 = AF0HM001.SY1STNBR; /* Restore alt wk*/
      end
      ;
    else
      AF0HW01.AF0HWST1 = AF0HM001.SY1STNBR; /* Save to alt wk stor*/
      AF0HW01.AF0HWST2 = AF0HM001.SY1STNBR; /* Save to alt wk stor*/
    end
    ;
    ;
  else
    ;
                  /* (Field in error)*/
    set AF0HM001.SY1STNBR cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate not found*/
    AFWREC.AFWPRCSN = "S34 "; /* Process number*/
    AF0HW01.AF0HWSTY = " "; /* Space out wk storage*/
    ;
  end
  ;
  ;
  ;
end // end AF0HS33

// Edit silhouette cd
Function AF0HS35()
  ;
  ;
  if (AF0HM001.XSUCD == " ") /* Field eq spaces*/
    AF0HW01.AF0HWSIL = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0HW01.AF0HWSIL = AF0HM001.XSUCD; /* save to wk map storage*/
  ;
  ;
  if (AF0HM001.XSUCD in XSUTBL.XSUCD)
    ;
    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      if (AF0HM001.XSUCD == AF0HW01.AF0HWAS1) /* EQ previous XSU*/
        return; /* Exit to calling process*/
      else
        AF0HW01.AF0HWAS1 = AF0HM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUCD = AF0HM001.XSUCD; /* save to wk storage*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S35 "; /* Process number*/
  set AF0HM001.XSUCD cursor, bold; /* highlight field*/
  AF0HW01.AF0HWSIL = " "; /* Space out save area*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  ;
  ;
end // end AF0HS35

// Edit category cd
Function AF0HS36()
  ;
  ;
  if (AF0HM001.XPCCD == " ") /* Map fld spaces*/
    AF0HW01.AF0HWCAT = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end
  ;
  AF0HW01.AF0HWCAT = AF0HM001.XPCCD; /* save to wk map storage*/
  ;
  ;
  if (AF0HM001.XPCCD in XPCTBL.XPCCD)
    ;
    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      if (AF0HM001.XPCCD == AF0HW01.AF0HWAP1) /* EQ previous XPC*/
        return; /* Exit to calling process*/
      else
        AF0HW01.AF0HWAP1 = AF0HM001.XPCCD; /* save to wk storage*/
        XP1REC.XPCCD = AF0HM001.XPCCD; /* save to wk storage*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S36 "; /* Process number*/
  set AF0HM001.XPCCD cursor, bold; /* highlight field*/
  AF0HW01.AF0HWCAT = " "; /* Space out save area*/
  XP1REC.XP1MNO = 35; /* indicate error message*/
  ;
  ;
  ;
end // end AF0HS36

// Edit Gender/Age cd
Function AF0HS37()
  ;
  ;
  if (AF0HM001.XGACD == " ") /* Map fld eq spaces*/
    AF0HW01.AF0HWGA = " "; /* Space out save fld*/
    return; /* Return to calling process*/
  end
  ;
  AF0HW01.AF0HWGA = AF0HM001.XGACD; /* save to wk map storage*/
  AF0HW01.XGACD = AF0HM001.XGACD;
  AF0HW01.XGPCD = "03";
  ;
  if (AF0HW01.XGAKEY in XGATBL.XGAKEY)
    ;
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      /* AND XGATBL.XGPCD(EZETST) EQ '03'   ; Apparel cd*/
      ;
      if (AF0HM001.XGACD == AF0HW01.AF0HWAG1) /* EQ previous XGA*/
        return; /* Exit to calling process*/
      else
        AF0HW01.AF0HWAG1 = AF0HM001.XGACD; /* save to wk storage*/
        XP1REC.XGACD = AF0HM001.XGACD; /* save to wk storage*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S37 "; /* Process number*/
  set AF0HM001.XGACD cursor, bold; /* highlight field*/
  AF0HW01.AF0HWGA = " "; /* Space out save fld*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  ;
  ;
  ;
end // end AF0HS37

// Edit season yr
Function AF0HS38()
  ;
  AF0HW01.AF0HWXSY = 0; /* initialize xsnyr wk area*/
  AF0HW01.AF0HWXSY = AF0HM001.XSNYR; /* move to wk area*/
  AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 1900; /* move century*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0HW01.AF0HWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF0HM001.XSNYR; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  ;
  AFWREC.AFWPRCSN = "S38 "; /* Process number*/
  set AF0HM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/
  ;
  ;
  ;
end // end AF0HS38

// Edit season cd
Function AF0HS39()
  ;
  ;
  if (AF0HM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0HM001.XSECD; /* save to working storage*/
    ;
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S39 "; /* Process number*/
    set AF0HM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/
    ;
  end
  ;
  ;
  AF0HW01.AF0HWXSS = " "; /* Initialize wk area*/
  AF0HW01.AF0HWXYR = +0; /* Initialize wk area*/
  AF0HW01.AF0HWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  AF0HW01.AF0HWXYR = XP1REC.XSNYR; /* Format wk area*/
  ;
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0HW01.AF0HWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      AF0HW01.XSNBDT = YSNTBL.XSN-SESN-BDT[AFWIDX5];
      AF0HW01.XSNXDT = YSNTBL.XSN-SESN-XDT[AFWIDX5];
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S39 "; /* Process number*/
  set AF0HM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/
end // end AF0HS39

// Edit forecaster cd
Function AF0HS40()
  ;
  ;
  if (AF0HM001.PG1FCTCD == " ") /* Eq spaces*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    AF0HW01.AF0HWUSR = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0HW01.AF0HWUSR = AF0HM001.PG1FCTCD; /* Move to wk map storage*/
  ;
  ;
   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/
  ;
  set PG1REC empty; /* Clear row storage area*/
  ;
  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0HM001.PG1FCTCD; /* Forecaster id*/
  ;
  ;
   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/
  ;
  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0HM001.PG1FCTCD cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S40 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      XP1REC.XXXUSER = " "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/
      ;
      /* ***** EXIT PROCESS HERE ******/
      ;
    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AF0HW01.AF0HWCIN = "Y"; /* Data contention detected*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.XXXUSER = AF0HM001.PG1FCTCD; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/
          ;
          /* ***** EXIT PROCESS HERE ******/
          ;
        end
      end
    end
  end
  ;
   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0HV29"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0HM001.PG1FCTCD; /* MOVE SIGNON to ERROR-DIAG*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0HS40

// Edit map detail lines
Function AF0HS41()
   /* ------------------------------------------------------------*/
   /* Edit Map Detail Lines: Note that validation of map items*/
     /* is on a page-by-page basis. This ensures that all items*/
     /* are valid before any scrolling command is processed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AFWREC.AFWIDX5 = 1; /* Set loop index*/
  while (AFWREC.AFWIDX5 <= 9) /**/
    ;
    if (AF0HM001.AF0HMCF1[AFWIDX5] != AF0HW02.AF0HWCF1[AFWIDX5]
     || AF0HM001.AF0HMCF2[AFWIDX5] != AF0HW02.AF0HWCF2[AFWIDX5]
     || AF0HM001.AF0HMCF3[AFWIDX5] != AF0HW02.AF0HWCF3[AFWIDX5]
     || AF0HM001.AF0HMCF4[AFWIDX5] != AF0HW02.AF0HWCF4[AFWIDX5]
     || AF0HM001.AF0HMCPR[AFWIDX5] != AF0HW02.AF0HWCPR[AFWIDX5])
      ;
      AF0HW02.AF0HWCF1[AFWIDX5] = AF0HM001.AF0HMCF1[AFWIDX5];
      AF0HW02.AF0HWCF2[AFWIDX5] = AF0HM001.AF0HMCF2[AFWIDX5];
      AF0HW02.AF0HWCF3[AFWIDX5] = AF0HM001.AF0HMCF3[AFWIDX5];
      AF0HW02.AF0HWCF4[AFWIDX5] = AF0HM001.AF0HMCF4[AFWIDX5];
      AF0HW02.AF0HWCPR[AFWIDX5] = AF0HM001.AF0HMCPR[AFWIDX5];
      ;
      AF0HW02.AF0HWUPD = "Y"; /* Indicate for update*/
      AF0HW02.AF0HWCHG[AFWIDX5] = "Y"; /* Changes entered*/
      ;
    end
    ;
    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    ;
    ;
  end
  ;
  AFWREC.AFWIDX5 = 1; /* Reset loop index*/
  while (AFWREC.AFWIDX5 <= 9) /* Recompute pcent totals*/
    AF0HW01.AF0HWTPC = 0;
    AF0HW02.AF0HWCTL[AFWIDX5] = 0; /* Pcent*/
    if (AF0HW01.AF0HWOT1 == "10"
     || AF0HW01.AF0HWOT2 == "10"
     || AF0HW01.AF0HWOT3 == "10"
     || AF0HW01.AF0HWOT4 == "10"
     || AF0HW01.AF0HWOT5 == "10")
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCF1[AFWIDX5];
    end
    if (AF0HW01.AF0HWOT1 == "20"
     || AF0HW01.AF0HWOT2 == "20"
     || AF0HW01.AF0HWOT3 == "20"
     || AF0HW01.AF0HWOT4 == "20"
     || AF0HW01.AF0HWOT5 == "20")
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCF2[AFWIDX5];
    end
    if (AF0HW01.AF0HWOT1 == "30"
     || AF0HW01.AF0HWOT2 == "30"
     || AF0HW01.AF0HWOT3 == "30"
     || AF0HW01.AF0HWOT4 == "30"
     || AF0HW01.AF0HWOT5 == "30")
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCF3[AFWIDX5];
    end
    if (AF0HW01.AF0HWOT1 == "40"
     || AF0HW01.AF0HWOT2 == "40"
     || AF0HW01.AF0HWOT3 == "40"
     || AF0HW01.AF0HWOT4 == "40"
     || AF0HW01.AF0HWOT5 == "40")
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCF4[AFWIDX5];
    end
    if (AF0HW01.AF0HWOT1 == "50"
     || AF0HW01.AF0HWOT2 == "50"
     || AF0HW01.AF0HWOT3 == "50"
     || AF0HW01.AF0HWOT4 == "50"
     || AF0HW01.AF0HWOT5 == "50")
      AF0HW01.AF0HWTPC = AF0HW01.AF0HWTPC + AF0HW02.AF0HWCPR[AFWIDX5];
    end
    if (AF0HW01.AF0HWBKD == 0
     || AF0HW01.AF0HW-AFMO-TBLE[AFWIDX5] <= AF0HW01.AF0HWBKD)
      AF0HW02.AF0HWCTL[AFWIDX5] = AF0HW01.AF0HWTPC; /* Pcent*/
    end
    ;
    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0HS41

// Insert DACAST.VAFPER01 Row
Function AF0HS42()
   /* ------------------------------------------------------------*/
   /* - Create a new DACAST.VAFPER01 row.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AF3REC empty; /* Initialize db record*/
  ;
  AF3REC.SY1STNBR = AF0HW02.AF0HWDST; /* Style no. from default*/
  AF3REC.XDMCD = AF0HW02.AF0HWDDM; /* XDMCD from default*/
  AF3REC.XDVCD = AF0HW02.AF0HWDDV; /* XDVCD from default*/
  AF3REC.XOWCD = AF0HW02.AF0HWDOG; /* XOWCD from default*/
  AF3REC.XSECD = XP1REC.XSECD; /* XSECD from XP1REC*/
  ;
  AF0HW01.AF0HWXSY = 0; /* Reset XSNYR wk area*/
  AF0HW01.AF0HWXSY = XP1REC.XSNYR; /* XSNYR from XP1REC*/
  if (XP1REC.XSNYR > 75)
    AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 1900; /* Add Century*/
  else
    AF0HW01.AF0HWXSY = AF0HW01.AF0HWXSY + 2000; /* Add Century*/
  end
  AF3REC.XSNYR = AF0HW01.AF0HWXSY; /* Season Year*/
  ;
  AF0HW01.AF0HWBDY = XP1REC.XSNYR; /* XSNYR to wk area*/
  ;
  AF3REC.AFBNDTPR = AF0HW01.AF0HW-AFMO-TBLE[AFWIDX5];
  ;
  ;
  ;
   /* *===========================**/
   /* *  Move Row Data to AF3REC  **/
   /* *===========================**/
  ;
  AF3REC.AF3BKPRM = 0; /* Bookings period multiplier*/
  ;
  AF3REC.AF3MDMDP[1] = AF0HW02.AF0HWCF1[AFWIDX5]; /* Curr Fut 1*/
  AF3REC.AF3MDMDP[2] = AF0HW02.AF0HWCF2[AFWIDX5]; /* Curr Fut 2*/
  AF3REC.AF3MDMDP[3] = AF0HW02.AF0HWCF3[AFWIDX5]; /* Curr Fut 3*/
  AF3REC.AF3MDMDP[4] = AF0HW02.AF0HWCF4[AFWIDX5]; /* Curr Fut 4*/
  AF3REC.AF3MDMDP[5] = AF0HW02.AF0HWCPR[AFWIDX5]; /* Curr Fut 5*/
  ;
  AF3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AF3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AF3REC.ZZZCHGCT = 0; /* Change count*/
  ;
  ;
  ;
   /* *==========================**/
   /* *  Add to DACAST.VAFPER01  **/
   /* *==========================**/
  ;
  try
    call "IO3530" ("A ", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
  ;
   /* *========================**/
   /* *  Check DB Return code  **/
   /* *========================**/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0HW01.AF0HWCIN = "Y"; /* Data Contention detected*/
      AF0HW01.AF0HWCNF = "N"; /* Reset Update Confirm flag*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S42 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "ADD DACAST.VAFPER01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Redisplay map*/
  ;
  ;
  ;
end // end AF0HS42

// Update DACAST.VAFPER01 Row
Function AF0HS43()
   /* ------------------------------------------------------------*/
          /* ** Update DACAST.VAFPER01 row ***/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==========================**/
   /* *  Build DB Output Record  **/
   /* *==========================**/
  ;
  set AF3REC empty; /* Reset Wk Storage field*/
  ;
  AF3REC.SY1STNBR = AF0HW02.AF0HWRKS[AFWIDX5]; /* Rec key - Style*/
  AF3REC.XDMCD = AF0HW02.AF0HWRKM[AFWIDX5]; /* Rec key - XDMCD*/
  AF3REC.XDVCD = AF0HW02.AF0HWRKV[AFWIDX5]; /* Rec key - XDVCD*/
  AF3REC.XSECD = AF0HW02.AF0HWRKE[AFWIDX5]; /* Rec key - XSECD*/
  AF3REC.XSNYR = AF0HW02.AF0HWRKR[AFWIDX5]; /* Rec key - XSNYR*/
  AF3REC.XOWCD = AF0HW02.AF0HWRKO[AFWIDX5]; /* res key - Xowcd*/
  AF3REC.AFBNDTPR = AF0HW02.AF0HWRKA[AFWIDX5]; /* Rec key - AFBNDTPR*/
  AF3REC.AF3BKPRM = AF0HW02.AF0HWBKP[AFWIDX5]; /* Bookings pd mult*/
  ;
  ;
  ;
   /* *=====================================**/
   /* *  Move Update Items into Output Row  **/
   /* *=====================================**/
  ;
  ;
  AF3REC.AF3MDMDP[1] = AF0HW02.AF0HWCF1[AFWIDX5]; /* Curr Fut 1*/
  AF3REC.AF3MDMDP[2] = AF0HW02.AF0HWCF2[AFWIDX5]; /* Curr Fut 2*/
  AF3REC.AF3MDMDP[3] = AF0HW02.AF0HWCF3[AFWIDX5]; /* Curr Fut 3*/
  AF3REC.AF3MDMDP[4] = AF0HW02.AF0HWCF4[AFWIDX5]; /* Curr Fut 4*/
  AF3REC.AF3MDMDP[5] = AF0HW02.AF0HWCPR[AFWIDX5]; /* Curr Fut 5*/
  ;
  ;
  AF3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AF3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AF3REC.ZZZCHGCT = AF0HW02.AF0HWCCT[AFWIDX5]; /* Change count*/
  ;
  ;
  ;
   /* *==============================**/
   /* *  Update DACAST.VAFPER01 Row  **/
   /* *==============================**/
  ;
  try
    call "IO3530" ("U ", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S43"; /* Process number*/
      AF0HW02.AF0HWUPD = " "; /* Deactivate update flag*/
      AF0HW01.AF0HWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0HW01.AF0HWCIN = "Y"; /* Data contention detected*/
        AF0HW01.AF0HWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S43 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0HS43

// Edit Product Line code
Function AF0HS44()
  ;
  ;
  if (AF0HM001.XPLCD == " ") /* Map fld spaces*/
    AF0HW01.AF0HWPLN = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end
  ;
  AF0HW01.AF0HWPLN = AF0HM001.XPLCD; /* save to wk map storage*/
  ;
  ;
  if (AF0HM001.XPLCD in XPLTBL.XPLCD)
    ;
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      if (AF0HM001.XPLCD == AF0HW01.AF0HWAPL) /* EQ previous xpl*/
        return; /* Exit to calling process*/
      else
        AF0HW01.AF0HWAPL = AF0HM001.XPLCD; /* save to wk storage*/
        XP1REC.XPLCD = AF0HM001.XPLCD; /* save to wk storage*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S44 "; /* Process number*/
  set AF0HM001.XPLCD cursor, bold; /* highlight field*/
  AF0HW01.AF0HWPLN = " "; /* Space out save area*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  ;
  ;
  ;
end // end AF0HS44

// Edit Division
Function AF0HS45()
  ;
  ;
  if (AF0HM001.XDVCD == " ") /* Map fld spaces*/
    AF0HW01.AF0HWXDV = "01"; /* Space out save area*/
    return; /* Return to calling routine*/
  end
  ;
  AF0HW01.AF0HWXDV = AF0HM001.XDVCD; /* save to wk map storage*/
  ;
  ;
  if (AF0HM001.XDVCD in XDVTBL.XDVCD)
    ;
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || XDVTBL.XDVCD[sysVar.arrayIndex] == "05")
                       /* (field is valid)*/
      if (AF0HM001.XDVCD == AF0HW01.AF0HWADV) /* EQ previous xdv*/
        return; /* Exit to calling process*/
      else
        AF0HW01.AF0HWADV = AF0HM001.XDVCD; /* save to wk storage*/
        XP1REC.XDVCD = AF0HM001.XDVCD; /* save to wk storage*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S45 "; /* Process number*/
  set AF0HM001.XDVCD cursor, bold; /* highlight field*/
  AF0HW01.AF0HWXDV = "01"; /* Space out save area*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  ;
  ;
  ;
end // end AF0HS45

// Edit ORDER TYPES
Function AF0HS46()
  ;
  ;
  if (AF0HM001.AF0HMOT5 == " "  /* Map fld spaces*/
   || AF0HM001.AF0HMOT5 == "10" /* FUT1*/
   || AF0HM001.AF0HMOT5 == "20" /* FUT2*/
   || AF0HM001.AF0HMOT5 == "30" /* FUT3*/
   || AF0HM001.AF0HMOT5 == "40" /* FUT4*/
   || AF0HM001.AF0HMOT5 == "50") /* PROP*/
    AF0HW01.AF0HWOT5 = AF0HM001.AF0HMOT5; /* SAVE ORDER TYPE*/
  else
    AFWREC.AFWPRCSN = "S36 "; /* Process number*/
    set AF0HM001.AF0HMOT5 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 84; /* indicate error message*/
  end
  ;
  if (AF0HM001.AF0HMOT4 == " "  /* Map fld spaces*/
   || AF0HM001.AF0HMOT4 == "10" /* FUT1*/
   || AF0HM001.AF0HMOT4 == "20" /* FUT2*/
   || AF0HM001.AF0HMOT4 == "30" /* FUT3*/
   || AF0HM001.AF0HMOT4 == "40" /* FUT4*/
   || AF0HM001.AF0HMOT4 == "50") /* PROP*/
    AF0HW01.AF0HWOT4 = AF0HM001.AF0HMOT4; /* SAVE ORDER TYPE*/
  else
    AFWREC.AFWPRCSN = "S36 "; /* Process number*/
    set AF0HM001.AF0HMOT4 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 27; /* indicate error message*/
  end
  ;
  ;
  if (AF0HM001.AF0HMOT3 == " "  /* Map fld spaces*/
   || AF0HM001.AF0HMOT3 == "10" /* FUT1*/
   || AF0HM001.AF0HMOT3 == "20" /* FUT2*/
   || AF0HM001.AF0HMOT3 == "30" /* FUT3*/
   || AF0HM001.AF0HMOT3 == "40" /* FUT4*/
   || AF0HM001.AF0HMOT3 == "50") /* PROP*/
    AF0HW01.AF0HWOT3 = AF0HM001.AF0HMOT3; /* SAVE ORDER TYPE*/
  else
    AFWREC.AFWPRCSN = "S36 "; /* Process number*/
    set AF0HM001.AF0HMOT3 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 27; /* indicate error message*/
  end
  ;
  ;
  if (AF0HM001.AF0HMOT2 == " "  /* Map fld spaces*/
   || AF0HM001.AF0HMOT2 == "10" /* FUT1*/
   || AF0HM001.AF0HMOT2 == "20" /* FUT2*/
   || AF0HM001.AF0HMOT2 == "30" /* FUT3*/
   || AF0HM001.AF0HMOT2 == "40" /* FUT4*/
   || AF0HM001.AF0HMOT2 == "50") /* PROP*/
    AF0HW01.AF0HWOT2 = AF0HM001.AF0HMOT2; /* SAVE ORDER TYPE*/
  else
    AFWREC.AFWPRCSN = "S36 "; /* Process number*/
    set AF0HM001.AF0HMOT2 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 27; /* indicate error message*/
  end
  ;
  ;
  if (AF0HM001.AF0HMOT1 == " "  /* Map fld spaces*/
   || AF0HM001.AF0HMOT1 == "10" /* FUT1*/
   || AF0HM001.AF0HMOT1 == "20" /* FUT2*/
   || AF0HM001.AF0HMOT1 == "30" /* FUT3*/
   || AF0HM001.AF0HMOT1 == "40" /* FUT4*/
   || AF0HM001.AF0HMOT1 == "50") /* PROP*/
    AF0HW01.AF0HWOT1 = AF0HM001.AF0HMOT1; /* SAVE ORDER TYPE*/
  else
    AFWREC.AFWPRCSN = "S46 "; /* Process number*/
    set AF0HM001.AF0HMOT1 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 27; /* indicate error message*/
  end
  ;
  if (XP1REC.XP1MNO == 0) /* NO CURRENT ERROR MESSAGE*/
    if (AF0HM001.AF0HMOT4 == AF0HM001.AF0HMOT5
     && AF0HM001.AF0HMOT4 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMOT5 bold; /* highlight field*/
      set AF0HM001.AF0HMOT4 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMOT3 == AF0HM001.AF0HMOT5
     && AF0HM001.AF0HMOT3 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMOT5 bold; /* highlight field*/
      set AF0HM001.AF0HMOT3 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMOT3 == AF0HM001.AF0HMOT4
     && AF0HM001.AF0HMOT3 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMOT4 bold; /* highlight field*/
      set AF0HM001.AF0HMOT3 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMOT2 == AF0HM001.AF0HMOT5
     && AF0HM001.AF0HMOT2 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMOT5 bold; /* highlight field*/
      set AF0HM001.AF0HMOT2 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMOT2 == AF0HM001.AF0HMOT4
     && AF0HM001.AF0HMOT2 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMOT4 bold; /* highlight field*/
      set AF0HM001.AF0HMOT2 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMOT2 == AF0HM001.AF0HMOT3
     && AF0HM001.AF0HMOT2 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMOT3 bold; /* highlight field*/
      set AF0HM001.AF0HMOT2 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMOT1 == AF0HM001.AF0HMOT5
     && AF0HM001.AF0HMOT1 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMOT5 bold; /* highlight field*/
      set AF0HM001.AF0HMOT1 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMOT1 == AF0HM001.AF0HMOT4
     && AF0HM001.AF0HMOT1 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMOT4 bold; /* highlight field*/
      set AF0HM001.AF0HMOT1 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMOT1 == AF0HM001.AF0HMOT3
     && AF0HM001.AF0HMOT1 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMOT3 bold; /* highlight field*/
      set AF0HM001.AF0HMOT1 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMOT1 == AF0HM001.AF0HMOT2
     && AF0HM001.AF0HMOT1 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMOT2 bold; /* highlight field*/
      set AF0HM001.AF0HMOT1 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
  end
  ;
  if (XP1REC.XP1MNO == 0       /* NO CURRENT ERROR MESSAGE*/
   && AF0HM001.AF0HMOT1 == " " /* Map fld spaces*/
   && AF0HM001.AF0HMOT2 == " " /* Map fld spaces*/
   && AF0HM001.AF0HMOT3 == " " /* Map fld spaces*/
   && AF0HM001.AF0HMOT4 == " " /* Map fld spaces*/
   && AF0HM001.AF0HMOT5 == " ") /* Map fld spaces*/
    AF0HW01.AF0HWOT1 = "10"; /* DEFAULT SAVE ORDER TYPE*/
    AF0HW01.AF0HWOT2 = "20"; /* DEFAULT SAVE ORDER TYPE*/
    AF0HW01.AF0HWOT3 = "30"; /* DEFAULT SAVE ORDER TYPE*/
    AF0HW01.AF0HWOT4 = "40"; /* DEFAULT SAVE ORDER TYPE*/
    AF0HW01.AF0HWOT5 = "50"; /* DEFAULT SAVE ORDER TYPE*/
  end
  ;
  ;
end // end AF0HS46

// Edit bk thru date
Function AF0HS47()
  ;
            /* 1) Need Date*/
  ;
  ;
   /* ---------------------------*/
    /* Edit Need Date*/
   /* ---------------------------*/
  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGAN = 0;
  AF0HW01.AF0HWDTE = AF0HM001.AF0HMBKD;
  TA2REC.TA2GRGAN = TA2REC.TA2GRGAN + AF0HW01.AF0HWDTE;
  AF0HW01.AF0HWDMM = AF0HW01.AF0HWDMM * 10000;
  TA2REC.TA2GRGAN = TA2REC.TA2GRGAN + AF0HW01.AF0HWDMM;
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Check valid date w/routine*/
  ;
  if (TA2REC.TA2RTNCD == 0) /* Valid date entered*/
    AF0HW01.AF0HWBKD = AF0HM001.AF0HMBKD; /* save date*/
    AF0HW01.AF0HWAYY = AF0HW01.AF0HWBKY;
    AF0HW01.AF0HWAMM = AF0HW01.AF0HWBKM;
  else
    if (AF0HM001.AF0HMBKD == " "
     || AF0HM001.AF0HMBKD == 0)
      AF0HW01.AF0HWBKD = 0; /* save date*/
    else
      AFWREC.AFWPRCSN = "S47 "; /* Process number*/
      converseLib.validationFailed(63); /* Indicate error msg*/
      set AF0HM001.AF0HMBKD cursor, bold; /* Highlight field*/
      AF0HW01.AF0HWBKD = 0; /* zero save date*/
    end
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end AF0HS47

// Validate bk thru dte in sesn
Function AF0HS48()
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  else
    /* -----------------------------------------------------------*/
      /* Verify that entered bk thru date is within sesn/yr bounds*/
    /* -----------------------------------------------------------*/
    AF0HW01.AF0HW-BEG-DT = AF0HW01.XSNBDT;
    AF0HW01.AF0HW-END-DT = AF0HW01.XSNXDT;
    if (AF0HW01.AF0HWAFM >= AF0HW01.AF0HW-BEG-AFMO
     && AF0HW01.AF0HWAFM <= AF0HW01.AF0HW-END-AFMO)
      AF0HW01.AF0HWAMM = AF0HW01.AF0HWBKM;
      AF0HW01.AF0HWAYY = AF0HW01.AF0HWBKY;
       /* continue on*/
    else
      if (AF0HM001.AF0HMBKD == " "
       || AF0HM001.AF0HMBKD == 0)
         /* continue on*/
      else
        AFWREC.AFWPRCSN = "S48 "; /* Process number*/
        converseLib.validationFailed(73); /* Indicate error msg*/
        set AF0HM001.AF0HMBKD cursor, bold; /* Highlight field*/
        AF0HW01.AF0HWBKD = 0;
      end
    end
    ;
    ;
    if (converseVar.validationMsgNum != 0) /* Error was found*/
      AFWREC.AFWFIRST = "Y";
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
end // end AF0HS48

// Edit bk thru date
Function AF0HS49()
  ;
            /* 1) Need Date*/
  ;
  ;
   /* ---------------------------*/
    /* Edit Need Date*/
   /* ---------------------------*/
  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGAN = 0;
  AF0HW01.AF0HWDTE = AF0HM001.AF0HMHBK;
  TA2REC.TA2GRGAN = TA2REC.TA2GRGAN + AF0HW01.AF0HWDTE;
  AF0HW01.AF0HWDMM = AF0HW01.AF0HWDMM * 10000;
  TA2REC.TA2GRGAN = TA2REC.TA2GRGAN + AF0HW01.AF0HWDMM;
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Check valid date w/routine*/
  ;
  if (TA2REC.TA2RTNCD == 0) /* Valid date entered*/
    AF0HW01.AF0HWHBK = AF0HM001.AF0HMHBK; /* save date*/
    AF0HWHMM = AF0HW01.AF0HWHBM;
    AF0HWHYY = AF0HW01.AF0HWHBY;
  else
    if (AF0HM001.AF0HMHBK == " "
     || AF0HM001.AF0HMHBK == 0)
      AF0HW01.AF0HWHBK = 0; /* save date*/
      AF0HW01.AF0HWHFM = 0;
    else
      AFWREC.AFWPRCSN = "S47 "; /* Process number*/
      converseLib.validationFailed(63); /* Indicate error msg*/
      set AF0HM001.AF0HMHBK cursor, bold; /* Highlight field*/
      AF0HW01.AF0HWHBK = 0; /* zero save date*/
    end
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end AF0HS49

// Edit ORDER TYPES
Function AF0HS50()
  ;
  ;
  if (AF0HM001.AF0HMHO5 == " "  /* Map fld spaces*/
   || AF0HM001.AF0HMHO5 == "10" /* FUT1*/
   || AF0HM001.AF0HMHO5 == "20" /* FUT2*/
   || AF0HM001.AF0HMHO5 == "30" /* FUT3*/
   || AF0HM001.AF0HMHO5 == "40" /* FUT4*/
   || AF0HM001.AF0HMHO5 == "50") /* PROP*/
    AF0HW01.AF0HWHO5 = AF0HM001.AF0HMHO5; /* SAVE ORDER TYPE*/
  else
    AFWREC.AFWPRCSN = "S36 "; /* Process number*/
    set AF0HM001.AF0HMHO5 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 84; /* indicate error message*/
  end
  ;
  if (AF0HM001.AF0HMHO4 == " "  /* Map fld spaces*/
   || AF0HM001.AF0HMHO4 == "10" /* FUT1*/
   || AF0HM001.AF0HMHO4 == "20" /* FUT2*/
   || AF0HM001.AF0HMHO4 == "30" /* FUT3*/
   || AF0HM001.AF0HMHO4 == "40" /* FUT4*/
   || AF0HM001.AF0HMHO4 == "50") /* PROP*/
    AF0HW01.AF0HWHO4 = AF0HM001.AF0HMHO4; /* SAVE ORDER TYPE*/
  else
    AFWREC.AFWPRCSN = "S36 "; /* Process number*/
    set AF0HM001.AF0HMHO4 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 27; /* indicate error message*/
  end
  ;
  ;
  if (AF0HM001.AF0HMHO3 == " "  /* Map fld spaces*/
   || AF0HM001.AF0HMHO3 == "10" /* FUT1*/
   || AF0HM001.AF0HMHO3 == "20" /* FUT2*/
   || AF0HM001.AF0HMHO3 == "30" /* FUT3*/
   || AF0HM001.AF0HMHO3 == "40" /* FUT4*/
   || AF0HM001.AF0HMHO3 == "50") /* PROP*/
    AF0HW01.AF0HWHO3 = AF0HM001.AF0HMHO3; /* SAVE ORDER TYPE*/
  else
    AFWREC.AFWPRCSN = "S36 "; /* Process number*/
    set AF0HM001.AF0HMHO3 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 27; /* indicate error message*/
  end
  ;
  ;
  if (AF0HM001.AF0HMHO2 == " "  /* Map fld spaces*/
   || AF0HM001.AF0HMHO2 == "10" /* FUT1*/
   || AF0HM001.AF0HMHO2 == "20" /* FUT2*/
   || AF0HM001.AF0HMHO2 == "30" /* FUT3*/
   || AF0HM001.AF0HMHO2 == "40" /* FUT4*/
   || AF0HM001.AF0HMHO2 == "50") /* PROP*/
    AF0HW01.AF0HWHO2 = AF0HM001.AF0HMHO2; /* SAVE ORDER TYPE*/
  else
    AFWREC.AFWPRCSN = "S36 "; /* Process number*/
    set AF0HM001.AF0HMHO2 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 27; /* indicate error message*/
  end
  ;
  ;
  if (AF0HM001.AF0HMHO1 == " "  /* Map fld spaces*/
   || AF0HM001.AF0HMHO1 == "10" /* FUT1*/
   || AF0HM001.AF0HMHO1 == "20" /* FUT2*/
   || AF0HM001.AF0HMHO1 == "30" /* FUT3*/
   || AF0HM001.AF0HMHO1 == "40" /* FUT4*/
   || AF0HM001.AF0HMHO1 == "50") /* PROP*/
    AF0HW01.AF0HWHO1 = AF0HM001.AF0HMHO1; /* SAVE ORDER TYPE*/
  else
    AFWREC.AFWPRCSN = "S46 "; /* Process number*/
    set AF0HM001.AF0HMHO1 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 27; /* indicate error message*/
  end
  ;
  if (XP1REC.XP1MNO == 0) /* NO CURRENT ERROR MESSAGE*/
    if (AF0HM001.AF0HMHO4 == AF0HM001.AF0HMHO5
     && AF0HM001.AF0HMHO4 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMHO5 bold; /* highlight field*/
      set AF0HM001.AF0HMHO4 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMHO3 == AF0HM001.AF0HMHO5
     && AF0HM001.AF0HMHO3 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMHO5 bold; /* highlight field*/
      set AF0HM001.AF0HMHO3 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMHO3 == AF0HM001.AF0HMHO4
     && AF0HM001.AF0HMHO3 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMHO4 bold; /* highlight field*/
      set AF0HM001.AF0HMHO3 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMHO2 == AF0HM001.AF0HMHO5
     && AF0HM001.AF0HMHO2 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMHO5 bold; /* highlight field*/
      set AF0HM001.AF0HMHO2 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMHO2 == AF0HM001.AF0HMHO4
     && AF0HM001.AF0HMHO2 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMHO4 bold; /* highlight field*/
      set AF0HM001.AF0HMHO2 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMHO2 == AF0HM001.AF0HMHO3
     && AF0HM001.AF0HMHO2 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMHO3 bold; /* highlight field*/
      set AF0HM001.AF0HMHO2 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMHO1 == AF0HM001.AF0HMHO5
     && AF0HM001.AF0HMHO1 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMHO5 bold; /* highlight field*/
      set AF0HM001.AF0HMHO1 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMHO1 == AF0HM001.AF0HMHO4
     && AF0HM001.AF0HMHO1 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMHO4 bold; /* highlight field*/
      set AF0HM001.AF0HMHO1 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMHO1 == AF0HM001.AF0HMHO3
     && AF0HM001.AF0HMHO1 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMHO3 bold; /* highlight field*/
      set AF0HM001.AF0HMHO1 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
    if (AF0HM001.AF0HMHO1 == AF0HM001.AF0HMHO2
     && AF0HM001.AF0HMHO1 != " ")
      AFWREC.AFWPRCSN = "S46 "; /* Process number*/
      set AF0HM001.AF0HMHO2 bold; /* highlight field*/
      set AF0HM001.AF0HMHO1 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 87; /* indicate err message*/
    end
  end
  ;
  if (XP1REC.XP1MNO == 0       /* NO CURRENT ERROR MESSAGE*/
   && AF0HM001.AF0HMHO1 == " " /* Map fld spaces*/
   && AF0HM001.AF0HMHO2 == " " /* Map fld spaces*/
   && AF0HM001.AF0HMHO3 == " " /* Map fld spaces*/
   && AF0HM001.AF0HMHO4 == " " /* Map fld spaces*/
   && AF0HM001.AF0HMHO5 == " ") /* Map fld spaces*/
    AF0HW01.AF0HWHO1 = "10"; /* DEFAULT SAVE ORDER TYPE*/
    AF0HW01.AF0HWHO2 = "20"; /* DEFAULT SAVE ORDER TYPE*/
    AF0HW01.AF0HWHO3 = "30"; /* DEFAULT SAVE ORDER TYPE*/
    AF0HW01.AF0HWHO4 = "40"; /* DEFAULT SAVE ORDER TYPE*/
    AF0HW01.AF0HWHO5 = "50"; /* DEFAULT SAVE ORDER TYPE*/
  end
  ;
  ;
end // end AF0HS50

// Edit historical Prod Line code
Function AF0HS51()
  ;
  ;
  if (AF0HM001.AF0HMHPL == " ") /* Map fld spaces*/
    AF0HW01.AF0HWHPL = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end
  ;
  AF0HW01.AF0HWHPL = AF0HM001.AF0HMHPL; /* save to wk map storage*/
  ;
  ;
  if (AF0HM001.AF0HMHPL in XPLTBL.XPLCD)
    ;
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      return; /* Exit to calling process*/
    end
    ;
  end
  ;
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S51 "; /* Process number*/
  set AF0HM001.AF0HMHPL cursor, bold; /* highlight field*/
  AF0HW01.AF0HWHPL = " "; /* Space out save area*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  ;
  ;
  ;
end // end AF0HS51

// edit Hist division code
Function AF0HS52()
  ;
  ;
  if (AF0HM001.AF0HMHDV == " ") /* Map fld spaces*/
    AF0HW01.AF0HWHDV = "  "; /* Space out save area*/
    return; /* Return to calling routine*/
  end
  ;
  AF0HW01.AF0HWHDV = AF0HM001.AF0HMHDV; /* save to wk map storage*/
  ;
  ;
  if (AF0HM001.AF0HMHDV in XDVTBL.XDVCD)
    ;
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || XDVTBL.XDVCD[sysVar.arrayIndex] == "05")
                       /* (field is valid)*/
      return;
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S52 "; /* Process number*/
  set AF0HM001.AF0HMHDV cursor, bold; /* highlight field*/
  AF0HW01.AF0HWHDV = "  "; /* Space out save area*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  ;
  ;
  ;
end // end AF0HS52

// Validate bk thru dte in sesn
Function AF0HS53()
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  else
    /* -----------------------------------------------------------*/
      /* Verify that entered bk thru date is within sesn/yr bounds*/
    /* -----------------------------------------------------------*/
    AF0HW01.AF0HW-BEG-DT = AF0HW01.AF0HWHBD;
    AF0HW01.AF0HW-END-DT = AF0HW01.AF0HWHXD;
    if (AF0HW01.AF0HWHFM >= AF0HW01.AF0HW-BEG-AFMO
     && AF0HW01.AF0HWHFM <= AF0HW01.AF0HW-END-AFMO)
       /* continue on*/
    else
      AF0HW01.AF0HW-BEG-DT = AF0HW01.AF0HW-HIST-BDT2;
      AF0HW01.AF0HW-END-DT = AF0HW01.AF0HW-HIST-XDT2;
      if (AF0HW01.AF0HWHFM >= AF0HW01.AF0HW-BEG-AFMO
       && AF0HW01.AF0HWHFM <= AF0HW01.AF0HW-END-AFMO)
            /* continue on*/
      else
        if (AF0HM001.AF0HMHBK == 0)
               /* continue on*/
        else
          AFWREC.AFWPRCSN = "S53 "; /* Process number*/
          converseLib.validationFailed(73); /* Indicate error msg*/
          set AF0HM001.AF0HMHBK cursor, bold; /* Highlight field*/
          AF0HW01.AF0HWHBK = 0;
        end
      end
    end
    ;
    if (converseVar.validationMsgNum != 0) /* Error was found*/
      AFWREC.AFWFIRST = "Y";
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
end // end AF0HS53

// Edit Hist Product type cd
Function AF0HS54()
  ;
  ;
  if (AF0HM001.AF0HMHXPR == " ") /* Map fld spaces*/
    AF0HW01.AF0HWHPT = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end
  ;
  AF0HW01.AF0HWHPT = AF0HM001.AF0HMHXPR; /* save to wk map storage*/
  ;
  ;
  if (AF0HM001.AF0HMHXPR in XPRTBL.XPRCD)
    ;
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
                       /* (field is valid)*/
      return; /* Exit to calling process*/
    end
    ;
  end
  ;
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S51 "; /* Process number*/
  set AF0HM001.AF0HMHXPR cursor, bold; /* highlight field*/
  AF0HW01.AF0HWHPT = " "; /* Space out save area*/
  XP1REC.XP1MNO = 80; /* indicate error message*/
  ;
  ;
  ;
end // end AF0HS54

// edit xpr cd
Function AF0HS55()
  ;
  ;
  if (AF0HM001.XPRCD == " ") /* Map fld spaces*/
    AF0HW01.AF0HWPTP = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end
  ;
  AF0HW01.AF0HWPTP = AF0HM001.XPRCD; /* save to wk map storage*/
  ;
  ;
  if (AF0HM001.XPRCD in XPRTBL.XPRCD)
    ;
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
                       /* (field is valid)*/
      if (AF0HM001.XPRCD == AF0HW01.AF0HWAPR) /* EQ previous xpl*/
        return; /* Exit to calling process*/
      else
        AF0HW01.AF0HWAPR = AF0HM001.XPRCD; /* save to wk storage*/
        XP1REC.XPRCD = AF0HM001.XPRCD; /* save to wk storage*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S55 "; /* Process number*/
  set AF0HM001.XPRCD cursor, bold; /* highlight field*/
  AF0HW01.AF0HWPTP = " "; /* Space out save area*/
  XP1REC.XP1MNO = 80; /* indicate error message*/
  ;
  ;
  ;
end // end AF0HS55

// EDIT SELECTION COMBINATION
Function AF0HS56()
  ;
  if (AF0HM001.XSUCD > " ") /* Field eq spaces*/
    if (AF0HM001.XPCCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S56 "; /* Process number*/
      set AF0HM001.XPCCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0HM001.XPLCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S56 "; /* Process number*/
      set AF0HM001.XPLCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0HM001.XGACD == " ") /* Map fld eq spaces*/
      AFWREC.AFWPRCSN = "S56 "; /* Process number*/
      set AF0HM001.XGACD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0HM001.XPRCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S56 "; /* Process number*/
      set AF0HM001.XPRCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    return;
  end
  ;
  ;
  if (AF0HM001.XPCCD > " ") /* Field eq spaces*/
    if (AF0HM001.XPLCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S56 "; /* Process number*/
      set AF0HM001.XPLCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0HM001.XGACD == " ") /* Map fld eq spaces*/
      AFWREC.AFWPRCSN = "S56 "; /* Process number*/
      set AF0HM001.XGACD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0HM001.XPRCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S56 "; /* Process number*/
      set AF0HM001.XPRCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    return;
  end
  ;
  if (AF0HM001.XPLCD > " ") /* Field eq spaces*/
    if (AF0HM001.XGACD == " ") /* Map fld eq spaces*/
      AFWREC.AFWPRCSN = "S56 "; /* Process number*/
      set AF0HM001.XGACD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0HM001.XPRCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S56 "; /* Process number*/
      set AF0HM001.XPRCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    return;
  end
  ;
  ;
  if (AF0HM001.XGACD > " ") /* Field eq spaces*/
    if (AF0HM001.XPRCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S56 "; /* Process number*/
      set AF0HM001.XPRCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    return;
  end
  ;
  ;
end // end AF0HS56

// edit override factor
Function AF0HS57()
  ;
       /* Edit Override Multiplier Factor & Flag /**/
  ;
  if (AF0HM001.AF0HOVFT == 0 /* if override fctr = 0*/
   || AF0HM001.AF0HOVFT > 0) /* or  0*/
    AF0HW01.AF0HWMTF = AF0HM001.AF0HOVFT;
  else
    AF0HW01.AF0HWMTF = 00.0; /* move 0 fctr to record*/
  end
  ;
  if (AF0HW01.AF0HWMTF == 0)
    AF0HM001.AF0HOVFL = "N"; /* move n to flag.*/
  end
  ;
  if (AF0HM001.AF0HOVFL == "Y"
   || AF0HM001.AF0HOVFL == "N") /* IF OVERRIDE FLAG = 'Y' OR 'N'*/
    AF0HW01.AF0HWVFL = AF0HM001.AF0HOVFL;
  else /* else*/
    AFWREC.AFWPRCSN = "S57";
    converseLib.validationFailed(39); /* INDICATE ERROR MESSAGE*/
    set AF0HM001.AF0HOVFL cursor, bold; /* highlight field*/
    exit stack;
  end
  ;
end // end AF0HS57

// Update Dacast.Vafsty01
Function AF0HS58()
   /* ------------------------------------------------------------*/
          /* ** Update Dacast.Vafsty01 row ***/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=====================================**/
   /* *  Move Update Items into Output Row  **/
   /* *=====================================**/
  ;
  AF2REC.AF-MUL-FCTR = AF0HW01.AF0HWMTF; /* Move in fctr.*/
  AF2REC.AF-MUL-FCTR-FL = AF0HW01.AF0HWVFL; /* Move in flag.*/
  ;
  AF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* *==============================**/
   /* *  Update DACAST.VAFSTY01 Row  **/
   /* *==============================**/
  ;
  try
    call "IO3510" ("U ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AF0HW01.AF0HWCNF = "U"; /* confirm update*/
    AFWREC.AFWNMO = 13; /* indicate update message*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S58"; /* Process number*/
      AF0HW02.AF0HWUPD = " "; /* Deactivate update flag*/
      AF0HW01.AF0HWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0HW01.AF0HWCIN = "Y"; /* Data contention detected*/
        AF0HW01.AF0HWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S58 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0HM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
end // end AF0HS58

// Validate Historical Owner Grp
Function AF0HS59()
  if (AF0HM001.AF0HMHOG == AF0HW01.AF0HWHOG) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end
  ;
  if (AF0HM001.AF0HMHOG == " ") /* Map fld eq spaces*/
    AF0HW01.AF0HWHOG = " "; /* Space out save fld*/
    return; /* Return to calling process*/
  else
    XP1REC.XWHCD = "51"; /* wharehouse code*/
    AF0HW01.AF0HWOGT = XP1REC.XOWCD; /* save xp1rec owner group*/
    XP1REC.XOWCD = AF0HM001.AF0HMHOG; /* Owner Group Cd*/
    ;
    if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
      AF0HW01.AF0HWHOG = AF0HM001.AF0HMHOG; /* save to wk storage*/
      XP1REC.XOWCD = AF0HW01.AF0HWOGT; /* REPLACE OWNER GROUP*/
      return; /* Exit to calling process*/
    end
  end
  ;
  XP1REC.XOWCD = AF0HW01.AF0HWOGT; /* REPLACE OWNER GROUP*/
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S30 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  AF0HW01.AF0HWHOG = " "; /* Space out save fld*/
  set AF0HM001.AF0HMHOG cursor, bold; /* highlight field*/
  ;
  ;
  ;
end // end AF0HS59

// Edit Owner Group Cd
Function AF0HS60()
  ;
  if (AF0HM001.XOWCD == AF0HW01.AF0HWXOW) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end
  ;
  if (AF0HM001.XOWCD == " ") /* Map fld eq spaces*/
    AF0HW01.AF0HWXOW = " "; /* Space out save fld*/
    return; /* Return to calling process*/
  else
    XP1REC.XWHCD = "51"; /* wharehouse code*/
    XP1REC.XOWCD = AF0HM001.XOWCD; /* Owner Group Cd*/
    ;
    if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
      AF0HW01.AF0HWXOW = AF0HM001.XOWCD; /* save to wk storage*/
      return; /* Exit to calling process*/
    end
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S30 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  AF0HW01.AF0HWXOW = " "; /* Space out save fld*/
  set AF0HM001.XOWCD cursor, bold; /* highlight field*/
  ;
  ;
  ;
end // end AF0HS60

// Load Season AFMO table
Function AF0HS61()
  AFWREC.AFWIDX5 = 1; /* Set loop index*/
  ;
  AF0HW01.AF0HW-BEG-DT = AF0HW01.XSNBDT;
  AF0HW01.AF0HW-END-DT = AF0HW01.XSNXDT;
  ;
  move 0 to AF0HW01.AF0HW-AFMO-TBLE[1] for all;
  AF0HW01.AF0HW-AFMO-TBLE[2] = AF0HW-BEG-AFMO;
  ;
  AFWREC.AFWIDX5 = 2; /* Set loop index*/
  AFWREC.AFWIDX4 = 0; /* Set loop index*/
  ;
  while (AF0HW01.AF0HW-AFMO-TBLE[AFWIDX5] <= AF0HW-END-AFMO
   && AFWIDX5 <= 9
  )
    AFWREC.AFWIDX4 = AFWREC.AFWIDX5 + 1; /**/
    AF0HW01.AF0HW-AFMO-TBLE[AFWIDX4] = AF0HW-AFMO-TBLE[AFWIDX5] + 1;
    ;
    if (AF0HW01.AF0HW-AFMO-MNTH[AFWIDX4] >= 13)
      AF0HW01.AF0HW-AFMO-MNTH[AFWIDX4] = 1;
      AF0HW01.AF0HW-AFMO-YR[AFWIDX4] = AF0HW01.AF0HW-AFMO-YR[AFWIDX4] + 1;
    end
    ;
    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    ;
  end
  ;
  AF0HW-AFMO-TBLE[AFWIDX5] = 9999;
  AF0HW01.AF0HW-LATE-IDX = AFWREC.AFWIDX5;
end // end AF0HS61

// Load AS OF DATE Season AFMOs
Function AF0HS62()
  ;
  AF0HW01.AF0HW-BEG-DT = AF0HW01.AF0HWHBD;
  AF0HW01.AF0HW-END-DT = AF0HW01.AF0HWHXD;
  ;
  move 0 to AF0HW01.AF0HW-HIST-XSN1[1] for all;
  AF0HW01.AF0HW-HIST-XSN1[2] = AF0HW-BEG-AFMO;
  ;
  AFWREC.AFWIDX5 = 2; /* Set loop index*/
  AFWREC.AFWIDX4 = 0; /* Set loop index*/
  ;
  while (AF0HW01.AF0HW-HIST-XSN1[AFWIDX5] <= AF0HW-END-AFMO
   && AFWREC.AFWIDX5 < AF0HW01.AF0HW-LATE-IDX)
    ;
    AFWREC.AFWIDX4 = AFWREC.AFWIDX5 + 1; /**/
    AF0HW01.AF0HW-HIST-XSN1[AFWIDX4] = AF0HW-HIST-XSN1[AFWIDX5] + 1;
    ;
    if (AF0HW01.AF0HW-HIST-MNTH1[AFWIDX4] >= 13)
      AF0HW01.AF0HW-HIST-MNTH1[AFWIDX4] = 1;
      AF0HW01.AF0HW-HIST-YR1[AFWIDX4] = AF0HW01.AF0HW-HIST-YR1[AFWIDX4] + 1;
    end
    ;
    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    ;
  end
  ;
  AF0HW-HIST-XSN1[AFWIDX5] = 9999;
  ;
  AF0HW01.AF0HW-BEG-DT = AF0HW01.AF0HW-HIST-BDT2;
  AF0HW01.AF0HW-END-DT = AF0HW01.AF0HW-HIST-XDT2;
  ;
  move 0 to AF0HW01.AF0HW-HIST-XSN2[1] for all;
  AF0HW01.AF0HW-HIST-XSN2[2] = AF0HW-BEG-AFMO;
  ;
  AFWREC.AFWIDX5 = 2; /* Set loop index*/
  AFWREC.AFWIDX4 = 0; /* Set loop index*/
  ;
  while (AF0HW01.AF0HW-HIST-XSN2[AFWIDX5] <= AF0HW-END-AFMO
   && AFWREC.AFWIDX5 < AF0HW01.AF0HW-LATE-IDX)
    ;
    AFWREC.AFWIDX4 = AFWREC.AFWIDX5 + 1; /**/
    AF0HW01.AF0HW-HIST-XSN2[AFWIDX4] = AF0HW-HIST-XSN2[AFWIDX5] + 1;
    ;
    if (AF0HW01.AF0HW-HIST-MNTH2[AFWIDX4] >= 13)
      AF0HW01.AF0HW-HIST-MNTH2[AFWIDX4] = 1;
      AF0HW01.AF0HW-HIST-YR2[AFWIDX4] = AF0HW01.AF0HW-HIST-YR2[AFWIDX4] + 1;
    end
    ;
    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    ;
  end
  ;
  AF0HW-HIST-XSN2[AFWIDX5] = 9999;
end // end AF0HS62

//*** RECORD=AF0HW01 ****
// Working Storage (1) for AF0E - Program-defined Variables
// ***********************
Record AF0HW01 type basicRecord
  10 AFWSWR AFWSWR ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY4SZSCL SY4SZSCL ; 
  10 XDMCD XDMCD ; 
  10 XDVCD XDVCD ; 
  10 XXXSTAT XXXSTAT ; 
  10 AF0HWBDT AF0HWBDT ; 
    15 AF0HWBDY AF0HWBDY ; 
    15 AF0HWBDM AF0HWBDM ; 
  10 AF0HWCAT AF0HWCAT ; 
  10 AF0HWPLN AF0HWPLN ; 
  10 AF0HWPTP AF0HWPTP ; 
  10 AF0HWCIN AF0HWCIN ; 
  10 AF0HWCMS AF0HWCMS ; 
  10 AF0HWCNF AF0HWCNF ; 
  10 AF0HWCPT AF0HWCPT ; 
  10 AF0HWCSY AF0HWCSY ; 
  10 AF0HWDTW AF0HWDTW ; 
    15 AF0HWDTC AF0HWDTC ; 
    15 AF0HWDTY AF0HWDTY ; 
    15 AF0HWDTM AF0HWDTM ; 
    15 AF0HWDTD AF0HWDTD ; 
  10 AF0HWDX1 AF0HWDX1 ; 
  10 AF0HWDX2 AF0HWDX2 ; 
  10 AF0HWEDW AF0HWEDW ; 
    15 AF0HWEDM AF0HWEDM ; 
    15 AF0HWEDD AF0HWEDD ; 
    15 AF0HWEDY AF0HWEDY ; 
  10 AF0HWGA AF0HWGA ; 
  10 AF0HWHAC AF0HWHAC ; 
  10 AF0HWHCC AF0HWHCC [3] ; 
  10 AF0HWHDS AF0HWHDS ; 
  10 AF0HWHGC AF0HWHGC ; 
  10 AF0HWHOG AF0HWHOG ; 
  10 AF0HWHDV AF0HWHDV ; 
  10 AF0HWHPT AF0HWHPT ; 
  10 AF0HWHPL AF0HWHPL ; 
  10 AF0HWHSC AF0HWHSC ; 
  10 AF0HWHST AF0HWHST ; 
  10 AF0HWHSY AF0HWHSY ; 
    15 AF0HWHSH AF0HWHSH ; 
    15 AF0HWHYH AF0HWHYH ; 
  10 AF0HWHS1 AF0HWHS1 ; 
  10 AF0HWHY1 AF0HWHY1 ; 
  10 AF0HWHD1 AF0HWHD1 ; 
  10 AF0HWHS2 AF0HWHS2 ; 
  10 AF0HWHY2 AF0HWHY2 ; 
  10 AF0HWHD2 AF0HWHD2 ; 
  10 AF0HWHPC AF0HWHPC ; 
  10 AF0HWIIN AF0HWIIN ; 
  10 AF0HWLCT AF0HWLCT ; 
  10 AF0HWLIM AF0HWLIM ; 
  10 AF0HWLIN AF0HWLIN ; 
  10 AF0HWMNO AF0HWMNO ; 
  10 AF0HWMTB AF0HWMTB [14] ; 
  10 AF0HWOP1 AF0HWOP1 ; 
  10 AF0HWOP2 AF0HWOP2 ; 
  10 AF0HWPCT AF0HWPCT ; 
  10 AF0HWPGL AF0HWPGL ; 
  10 AF0HWPGM AF0HWPGM ; 
  10 AF0HWPGV AF0HWPGV ; 
  10 AF0HWPND AF0HWPND ; 
  10 AF0HWPSA AF0HWPSA ; 
  10 AF0HWPSD AF0HWPSD ; 
  10 AF0HWSDT AF0HWSDT ; 
    15 AF0HWSDC AF0HWSDC ; 
    15 AF0HWSDY AF0HWSDY ; 
  10 AF0HWSD2 AF0HWSD2 ; 
  10 AF0HWSIL AF0HWSIL ; 
  10 AF0HWSSE AF0HWSSE ; 
  10 AF0HWSSY AF0HWSSY ; 
  10 AF0HWSAS AF0HWSAS ; 
  10 AF0HWSGA AF0HWSGA ; 
  10 AF0HWSPR AF0HWSPR ; 
  10 AF0HWSDV AF0HWSDV ; 
  10 AF0HWSOG AF0HWSOG ; 
  10 AF0HWSPL AF0HWSPL ; 
  10 AF0HWSPC AF0HWSPC ; 
  10 AF0HWSQU AF0HWSQU ; 
  10 AF0HWSSC AF0HWSSC ; 
  10 AF0HWSSL AF0HWSSL ; 
  10 AF0HWSTS AF0HWSTS ; 
  10 AF0HWSTY AF0HWSTY ; 
  10 AF0HWSYK AF0HWSYK ; 
  10 AF0HWOGK AF0HWOGK ; 
  10 AF0HWSYS AF0HWSYS ; 
  10 AF0HWST1 AF0HWST1 ; 
  10 AF0HWST2 AF0HWST2 ; 
  10 AF0HWTPC AF0HWTPC ; 
  10 AF0HWUSR AF0HWUSR ; 
  10 AF0HWVLF AF0HWVLF ; 
  10 AF0HWVLI AF0HWVLI ; 
  10 AF0HWVST AF0HWVST ; 
  10 AF0HWXPR AF0HWXPR ; 
  10 AF0HWXGA AF0HWXGA ; 
  10 AF0HWXDV AF0HWXDV ; 
  10 AF0HWXOW AF0HWXOW ; 
  10 AF0HWXPL AF0HWXPL ; 
  10 AF0HWXPC AF0HWXPC ; 
  10 AF0HWXSU AF0HWXSU ; 
  10 AF0HWAPR AF0HWAPR ; 
  10 AF0HWAG1 AF0HWAG1 ; 
  10 AF0HWADV AF0HWADV ; 
  10 AF0HWAPL AF0HWAPL ; 
  10 AF0HWAP1 AF0HWAP1 ; 
  10 AF0HWAS1 AF0HWAS1 ; 
  10 AF0HWOT1 AF0HWOT1 ; 
  10 AF0HWOT2 AF0HWOT2 ; 
  10 AF0HWOT3 AF0HWOT3 ; 
  10 AF0HWOT4 AF0HWOT4 ; 
  10 AF0HWOT5 AF0HWOT5 ; 
  10 AF0HWHO1 AF0HWHO1 ; 
  10 AF0HWHO2 AF0HWHO2 ; 
  10 AF0HWHO3 AF0HWHO3 ; 
  10 AF0HWHO4 AF0HWHO4 ; 
  10 AF0HWHO5 AF0HWHO5 ; 
  10 AF0HWXSY AF0HWXSY ; 
  10 AF0HWXSA AF0HWXSA ; 
    15 AF0HWXSS AF0HWXSS ; 
    15 AF0HWXYR AF0HWXYR ; 
  10 AF0HWXST AF0HWXST ; 
  10 AF0HWOTS AF0HWOTS ; 
  10 AF0HWHOS AF0HWHOS ; 
  10 XGAKEY XGAKEY ; 
    15 XGACD XGACD ; 
    15 XGPCD XGPCD ; 
  10 AF0HWDTE AF0HWDTE ; 
    15 AF0HWDMM AF0HWDMM ; 
    15 AF0ZWDYY AF0ZWDYY ; 
  10 XSNBDT XSNBDT ; 
  10 XSNXDT XSNXDT ; 
  10 AF0HWHBD AF0HWHBD ; 
  10 AF0HWHXD AF0HWHXD ; 
  10 AF0HW-HIST-BDT2 AF0HW-HIST-BDT2 ; 
  10 AF0HW-HIST-XDT2 AF0HW-HIST-XDT2 ; 
  10 AF0HWBKD AF0HWBKD ; 
    15 AF0HWBKM AF0HWBKM ; 
    15 AF0HWBKY AF0HWBKY ; 
  10 AF0HWHBK AF0HWHBK ; 
    15 AF0HWHBM AF0HWHBM ; 
    15 AF0HWHBY AF0HWHBY ; 
  10 AF0HWAFM AF0HWAFM ; 
    15 AF0HWAYY AF0HWAYY ; 
    15 AF0HWAMM AF0HWAMM ; 
  10 AF0HWHFM AF0HWHFM ; 
    15 AF0HWHYY AF0HWHYY ; 
    15 AF0HWHMM AF0HWHMM ; 
  10 AF0HWMTF AF0HWMTF ; 
  10 AF0HWVFL AF0HWVFL ; 
  10 AF0HWVFT AF0HWVFT ; 
  10 AF0HWOGT AF0HWOGT ; 
  10 AF0HW-LATE-IDX AF0HW-LATE-IDX ; 
  10 AF0HW-PREV-SESN-CD AF0HW-PREV-SESN-CD ; 
  10 AF0HW-PREV-SESN-YR AF0HW-PREV-SESN-YR ; 
  10 AF0HW-BEG-DT AF0HW-BEG-DT ; 
    15 * num(3) ; 
    15 AF0HW-BEG-AFMO AF0HW-BEG-AFMO ; 
    15 * num(2) ; 
  10 AF0HW-END-DT AF0HW-END-DT ; 
    15 * num(3) ; 
    15 AF0HW-END-AFMO AF0HW-END-AFMO ; 
    15 * num(2) ; 
  10 AF0HW-AFMO-TBLE AF0HW-AFMO-TBLE [9] ; 
    15 AF0HW-AFMO-YR AF0HW-AFMO-YR ; 
    15 AF0HW-AFMO-MNTH AF0HW-AFMO-MNTH ; 
  10 AF0HW-HIST-XSN1 AF0HW-HIST-XSN1 [9] ; 
    15 AF0HW-HIST-YR1 AF0HW-HIST-YR1 ; 
    15 AF0HW-HIST-MNTH1 AF0HW-HIST-MNTH1 ; 
  10 AF0HW-HIST-XSN2 AF0HW-HIST-XSN2 [9] ; 
    15 AF0HW-HIST-YR2 AF0HW-HIST-YR2 ; 
    15 AF0HW-HIST-MNTH2 AF0HW-HIST-MNTH2 ; 
end // end AF0HW01

//*** RECORD=AF0HW02 ****
// Working Storage (2) for AF0E - Record Work Areas
// ***********************
Record AF0HW02 type basicRecord
  10 AF0HWDST AF0HWDST ; 
  10 AF0HWDDM AF0HWDDM ; 
  10 AF0HWDDV AF0HWDDV ; 
  10 AF0HWDOG AF0HWDOG ; 
  10 AF0HWSDI AF0HWSDI ; 
  10 AF0HWUPD AF0HWUPD ; 
  10 AF0HWCHG AF0HWCHG [14] ; 
  10 AF0HWRKY AF0HWRKY [14] ; 
  10 AF0HWRKS AF0HWRKS [14] ; 
  10 AF0HWRKM AF0HWRKM [14] ; 
  10 AF0HWRKV AF0HWRKV [14] ; 
  10 AF0HWRKO AF0HWRKO [14] ; 
  10 AF0HWRKE AF0HWRKE [14] ; 
  10 AF0HWRKR AF0HWRKR [14] ; 
  10 AF0HWRKA AF0HWRKA [14] ; 
  10 AF0HWBKP AF0HWBKP [14] ; 
  10 AF0HWCF1 AF0HWCF1 [14] ; 
  10 AF0HWCW1 AF0HWCW1 [14] ; 
  10 AF0HWCF2 AF0HWCF2 [14] ; 
  10 AF0HWCW2 AF0HWCW2 [14] ; 
  10 AF0HWCF3 AF0HWCF3 [14] ; 
  10 AF0HWCW3 AF0HWCW3 [14] ; 
  10 AF0HWCF4 AF0HWCF4 [14] ; 
  10 AF0HWCW4 AF0HWCW4 [14] ; 
  10 AF0HWCPR AF0HWCPR [14] ; 
  10 AF0HWCW5 AF0HWCW5 [14] ; 
  10 AF0HWCTL AF0HWCTL [14] ; 
  10 AF0HWCTW AF0HWCTW [14] ; 
  10 AF0HWCCT AF0HWCCT [14] ; 
end // end AF0HW02

//*** RECORD=AF0HW03 ****
// Working Storage (2) for AF0E - Record Work Areas
// ***********************
Record AF0HW03 type basicRecord
  10 AF0HWDPI AF0HWDPI ; 
  10 AF0HWTOT AF0HWTOT ; 
  10 AF0HWTF1 AF0HWTF1 ; 
  10 AF0HWTF2 AF0HWTF2 ; 
  10 AF0HWTF3 AF0HWTF3 ; 
  10 AF0HWTF4 AF0HWTF4 ; 
  10 AF0HWTF5 AF0HWTF5 ; 
  10 AF0HWHB1 AF0HWHB1 [12] ; 
  10 AF0HWHB2 AF0HWHB2 [12] ; 
  10 AF0HWHB3 AF0HWHB3 [12] ; 
  10 AF0HWHB4 AF0HWHB4 [12] ; 
  10 AF0HWHB5 AF0HWHB5 [12] ; 
  10 AF0HWHB6 AF0HWHB6 [12] ; 
  10 AF0HWHF1 AF0HWHF1 [12] ; 
  10 AF0HWHF2 AF0HWHF2 [12] ; 
  10 AF0HWHF3 AF0HWHF3 [12] ; 
  10 AF0HWHF4 AF0HWHF4 [12] ; 
  10 AF0HWHPR AF0HWHPR [12] ; 
  10 AF0HWHTL AF0HWHTL [12] ; 
end // end AF0HW03

Record AF0HW04 type basicRecord
  10 AF0HWAF AF0HWAF ; 
end // end AF0HW04

// AFMO Month
DataItem AF0HW-AFMO-MNTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season Months Table(AF-MO)
DataItem AF0HW-AFMO-TBLE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AFMO Year
DataItem AF0HW-AFMO-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work beg AFMO
DataItem AF0HW-BEG-AFMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season Beg Date Work Area
DataItem AF0HW-BEG-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work End AFMO
DataItem AF0HW-END-AFMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Seasom End Date Work Area
DataItem AF0HW-END-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN-APRL-SESN-BDT
DataItem AF0HW-HIST-BDT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist. Mnth1
DataItem AF0HW-HIST-MNTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist. Mnth2
DataItem AF0HW-HIST-MNTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN-APRL-SESN-XDT
DataItem AF0HW-HIST-XDT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Season Table1
DataItem AF0HW-HIST-XSN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist. Season Table2
DataItem AF0HW-HIST-XSN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist. Yr1
DataItem AF0HW-HIST-YR1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Hist. Yr2
DataItem AF0HW-HIST-YR2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Last Month Index in Array
DataItem AF0HW-LATE-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous Season Code
DataItem AF0HW-PREV-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous Season Year
DataItem AF0HW-PREV-SESN-YR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alternate start XdvCD
DataItem AF0HWADV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0HWAF char(118)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bookings thru date
DataItem AF0HWAFM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alternate start XGACD
DataItem AF0HWAG1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// afm dt mm
DataItem AF0HWAMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alternate start XPCCD
DataItem AF0HWAP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XplCD
DataItem AF0HWAPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XprCD
DataItem AF0HWAPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XSUCD
DataItem AF0HWAS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// afm dt yy
DataItem AF0HWAYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order Need Date MM
DataItem AF0HWBDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order Need Date wk
DataItem AF0HWBDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order Need Date YY
DataItem AF0HWBDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bookings thru date
DataItem AF0HWBKD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bk thru dt mm
DataItem AF0HWBKM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Bookings Mult.
DataItem AF0HWBKP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bk thru dt yy
DataItem AF0HWBKY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start category save
DataItem AF0HWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Changed Count
DataItem AF0HWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Fut 1
DataItem AF0HWCF1 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Fut 2
DataItem AF0HWCF2 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Fut 3
DataItem AF0HWCF3 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Fut 4
DataItem AF0HWCF4 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change/valid indicator
DataItem AF0HWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data contention indicator
DataItem AF0HWCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// G/A,CAT,SIL Comb. flag
DataItem AF0HWCMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update confirm flag
DataItem AF0HWCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Fut 5
DataItem AF0HWCPR decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wk check pcent total
DataItem AF0HWCPT decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current style counter
DataItem AF0HWCSY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Fut Totals
DataItem AF0HWCTL decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut Totals
DataItem AF0HWCTW decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut 1
DataItem AF0HWCW1 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut 2
DataItem AF0HWCW2 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut 3
DataItem AF0HWCW3 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut 4
DataItem AF0HWCW4 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut 5
DataItem AF0HWCW5 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved default XDM cd
DataItem AF0HWDDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved default XDV cd
DataItem AF0HWDDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working mm area
DataItem AF0HWDMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved default XOW cd
DataItem AF0HWDOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data processed indicator
DataItem AF0HWDPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved default style
DataItem AF0HWDST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal date century
DataItem AF0HWDTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date dd
DataItem AF0HWDTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season century/year
DataItem AF0HWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date mm
DataItem AF0HWDTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date wk area
DataItem AF0HWDTW num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date yy
DataItem AF0HWDTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist alpha as-of-date 1
DataItem AF0HWDX1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist alpha as-of-date 2
DataItem AF0HWDX2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// External date dd
DataItem AF0HWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date mm
DataItem AF0HWEDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date wk area
DataItem AF0HWEDW num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date yy
DataItem AF0HWEDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start gender/age save
DataItem AF0HWGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical pending actvty ind
DataItem AF0HWHAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist Qty Save Array - Fut 1
DataItem AF0HWHB1 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Qty Save Array - Fut 2
DataItem AF0HWHB2 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Qty Save Array - Fut 3
DataItem AF0HWHB3 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Qty Save Array - Fut 4
DataItem AF0HWHB4 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Qty Save Array - Fut 5
DataItem AF0HWHB5 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Qty Save Array - Totals
DataItem AF0HWHB6 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN-APRL-SESN-BDT
DataItem AF0HWHBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist bookings thru date
DataItem AF0HWHBK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist bk thru dt mm
DataItem AF0HWHBM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist bk thru dt yy
DataItem AF0HWHBY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Category cd
DataItem AF0HWHCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical As-Of-Date (1)
DataItem AF0HWHD1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical As-Of-Date (2)
DataItem AF0HWHD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Data Select Ind
DataItem AF0HWHDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical div cd
DataItem AF0HWHDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist Pcent Save Array - Fut 1
DataItem AF0HWHF1 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Pcent Save Array - Fut 2
DataItem AF0HWHF2 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Pcent Save Array - Fut 3
DataItem AF0HWHF3 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Pcent Save Array - Fut 4
DataItem AF0HWHF4 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// History Bookings thru date
DataItem AF0HWHFM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Gender/Age cd
DataItem AF0HWHGC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist afm dt mm
DataItem AF0HWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist order type1
DataItem AF0HWHO1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hist order type2
DataItem AF0HWHO2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hist order type3
DataItem AF0HWHO3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hist order type4
DataItem AF0HWHO4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hist order type5
DataItem AF0HWHO5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Owner Group
DataItem AF0HWHOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical order type select
DataItem AF0HWHOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Pcent value
DataItem AF0HWHPC num(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist prod lin save
DataItem AF0HWHPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist Pcent Save Array - Fut 5
DataItem AF0HWHPR decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist prod TYPE save
DataItem AF0HWHPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Season cd (1)
DataItem AF0HWHS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Season cd (2)
DataItem AF0HWHS2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Silhouette cd
DataItem AF0HWHSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist season cd col hdg
DataItem AF0HWHSH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Style no.
DataItem AF0HWHST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical col hdgs wk area
DataItem AF0HWHSY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist Pcent Save Array - Totals
DataItem AF0HWHTL decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN-APRL-SESN-XDT
DataItem AF0HWHXD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Season yr (1)
DataItem AF0HWHY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Season yr (2)
DataItem AF0HWHY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist season yr col hdg
DataItem AF0HWHYH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist afm dt yy
DataItem AF0HWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inactive/Space status ind
DataItem AF0HWIIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record retrieve loop ctr
DataItem AF0HWLCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style read ctr loop limit
DataItem AF0HWLIM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row select loop mode ind
DataItem AF0HWLIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error message wk area
DataItem AF0HWMNO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month table
DataItem AF0HWMTB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Multiplier factor
DataItem AF0HWMTF num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select XOW_OWN_GRP_CD
DataItem AF0HWOGK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save xp1rec og cd
DataItem AF0HWOGT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist data sel option val ind 1
DataItem AF0HWOP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist data sel option val ind 2
DataItem AF0HWOP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type1
DataItem AF0HWOT1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type2
DataItem AF0HWOT2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type3
DataItem AF0HWOT3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type4
DataItem AF0HWOT4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type5
DataItem AF0HWOT5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order type selection
DataItem AF0HWOTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Adjusted percent value
DataItem AF0HWPCT num(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page size limit
DataItem AF0HWPGL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max page count
DataItem AF0HWPGM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current page count
DataItem AF0HWPGV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start prod lin save
DataItem AF0HWPLN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0HWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page start address
DataItem AF0HWPSA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pcent Select Data ind
DataItem AF0HWPSD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start prod TYP save
DataItem AF0HWPTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Rec Key - AFBNDTPR
DataItem AF0HWRKA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Rec Key - XSECD
DataItem AF0HWRKE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Rec Key - XDMCD
DataItem AF0HWRKM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Rec ke  - XOWCD
DataItem AF0HWRKO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Rec Key - XSNYR
DataItem AF0HWRKR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Rec Key - Style
DataItem AF0HWRKS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Rec Key - XDVCD
DataItem AF0HWRKV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid Record Key indicator
DataItem AF0HWRKY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk historical as-of-date
DataItem AF0HWSAS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season yr date yy
DataItem AF0HWSD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season yr date cc
DataItem AF0HWSDC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Stored data indicator
DataItem AF0HWSDI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season yr date
DataItem AF0HWSDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved original XDVCD
DataItem AF0HWSDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season yr date yy
DataItem AF0HWSDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved original XGACD
DataItem AF0HWSGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette save
DataItem AF0HWSIL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved XOW_OWN_GRP_CD
DataItem AF0HWSOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XPCCD
DataItem AF0HWSPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XPLCD
DataItem AF0HWSPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XPRCD
DataItem AF0HWSPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style qualify flag
DataItem AF0HWSQU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XSECD
DataItem AF0HWSSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk historical season cd
DataItem AF0HWSSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XSUCD
DataItem AF0HWSSL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk historical season yr
DataItem AF0HWSSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alternate style number 1
DataItem AF0HWST1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate style number 2
DataItem AF0HWST2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start status save
DataItem AF0HWSTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style save
DataItem AF0HWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style select wk key
DataItem AF0HWSYK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current status save
DataItem AF0HWSYS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical wk total Fut 1
DataItem AF0HWTF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical wk total Fut 2
DataItem AF0HWTF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical wk total Fut 3
DataItem AF0HWTF3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical wk total Fut 4
DataItem AF0HWTF4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical wk total Fut 5
DataItem AF0HWTF5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Qty Wk Total
DataItem AF0HWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total Pcent wk
DataItem AF0HWTPC decimal(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// For update indicator
DataItem AF0HWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start xxxuser save
DataItem AF0HWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Multiplier factor
DataItem AF0HWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Multiplier factor
DataItem AF0HWVFT num(3,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Valid select fld ind
DataItem AF0HWVLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Validation request ind
DataItem AF0HWVLI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style valid ind
DataItem AF0HWVST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XdvCD
DataItem AF0HWXDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XGACD
DataItem AF0HWXGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start Xowcd
DataItem AF0HWXOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPCCD
DataItem AF0HWXPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XplCD
DataItem AF0HWXPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XprCD
DataItem AF0HWXPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0HWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0HWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style row qualfication ind
DataItem AF0HWXST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XSUCD
DataItem AF0HWXSU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0HWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0HWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

