package af0r;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom4.XSPG201;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGACD;
import corpx1.XGAKEY;
import corpx1.XGATBL;
import corpx1.XGPCD;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XSNBDT;
import corpx2.XSNXDT;
import corpy2.YSNTBL;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY4SZSCL;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0R ****
// This application is designed to enter order type percentages
// by need month for appaerl styles. The user will enter
// percents for a particular style and then be able to cycle on
// through more forecast styles.
// 
// The user will be able to select historical as-of-date
// information for inquiry and comparison purposes on this
// screen. This information, which can be paged forward or
// backward, will be shown on the right side of the screen.
// 
// This application will maintain the Order Type Demand
// Percentage By Style/Need Month Data Base.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 102490     kjohn2   new process / from afoh
// 04-30-93   jricha   changed header from fut5 to prop
// 02-15-95   kj       xsn-ysn
// *********************
Program AF0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0RW01 AF0RW01; // record
  AF0RW02 AF0RW02; // record
  AF0RW03 AF0RW03; // record
  AF0RW04 AF0RW04; // record
  AF2REC AF2REC; // record
  AF3REC AF3REC; // record
  AF9REC AF9REC; // record
  AFFREC AFFREC; // record
  AFGREC AFGREC; // record
  AFHREC AFHREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use AF0RM.AF0RM001, // form
  AF0RM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/

    set AF0RW01 empty; /* Initialize working storage*/
    set AF0RW02 empty; /* Initialize working storage*/
    set AF0RW03 empty; /* Initialize working storage*/
    set AFFREC empty; /* Initialize working storage*/
    set AFGREC empty; /* Initialize working storage*/
    set AFHREC empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set AF3REC empty; /* Initialize working storage*/
    set AF9REC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0RM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF0R"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/

    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/


              /* (Initialize Style Row Loop Limit Ctr)*/

    AF0RW01.AF0RWLIM = +10000; /* Stop loop every 10000 rows read*/


                    /* (Initialize Month Table)*/

    AF0RW01.AF0RWMTB[1] = "JAN"; /* January*/
    AF0RW01.AF0RWMTB[2] = "FEB"; /* February*/
    AF0RW01.AF0RWMTB[3] = "MAR"; /* March*/
    AF0RW01.AF0RWMTB[4] = "APR"; /* April*/
    AF0RW01.AF0RWMTB[5] = "MAY"; /* May*/
    AF0RW01.AF0RWMTB[6] = "JUN"; /* June*/
    AF0RW01.AF0RWMTB[7] = "JUL"; /* July*/
    AF0RW01.AF0RWMTB[8] = "AUG"; /* August*/
    AF0RW01.AF0RWMTB[9] = "SEP"; /* September*/
    AF0RW01.AF0RWMTB[10] = "OCT"; /* October*/
    AF0RW01.AF0RWMTB[11] = "NOV"; /* November*/
    AF0RW01.AF0RWMTB[12] = "DEC"; /* December*/
    AF0RW01.AF0RWMTB[13] = "ERLY"; /* December*/
    AF0RW01.AF0RWMTB[14] = "LATE"; /* December*/



       /* (Define Map Environment, Assign/Edit Defaults)*/

    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process name*/


                      /* (Set Map Item Values)*/

    AF0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/


                      /* (Process Passed Items)*/
    XP1REC.XDVCD = "01";
    XP1REC.XOWCD = "00";

    AF0RM001.PG1FCTCD = XP1REC.XXXUSER; /* Fcster code to map*/
    AF0RM001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    AF0RM001.XSNYR = XP1REC.XSNYR; /* Season yr to map*/
    AF0RM001.XDVCD = XP1REC.XDVCD; /* Division cd to map*/
    AF0RM001.XGACD = XP1REC.XGACD; /* Gender age cd to map*/
    AF0RM001.XPRCD = XP1REC.XPRCD; /* TYPE cd to map*/
    AF0RM001.XPLCD = XP1REC.XPLCD; /* LINE cd to map*/
    AF0RM001.XPCCD = XP1REC.XPCCD; /* Category cd to map*/
    AF0RM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd to map*/
    AF0RM001.XOWCD = XP1REC.XOWCD; /* Owner Group cd to map*/

    XP1REC.XXXUSER = " "; /* Clear Fcster code*/
    XP1REC.XSECD = " "; /* Clear Season cd*/
    XP1REC.XSNYR = 0; /* Clear Season yr*/
    XP1REC.XGACD = " "; /* Clear Gender age cd*/
    XP1REC.XPRCD = " "; /* Clear xpr  cd*/
    XP1REC.XPLCD = " "; /* Clear xpl  cd*/
    XP1REC.XPCCD = " "; /* Clear Category cd*/
    XP1REC.XSUCD = " "; /* Clear Silhouette cd*/
    XP1REC.SY1STNBR = " "; /* Clear Style cd*/
    XP1REC.XGAABRV = " "; /* Clear XGA abrv*/
    XP1REC.XPCABRV = " "; /* Clear Xpc abrv*/
    XP1REC.XSUABRV = " "; /* Clear Xsu abrv*/
    XP1REC.XOWCD = " "; /* Clear Xow abrv*/


                 /* (Protect,Dark Map Dtl Lines)*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0RM001.AF0RMHF1[AFWIDX5] skip, invisible; /* Hist Fut Pcent 1*/
      set AF0RM001.AF0RMHF2[AFWIDX5] skip, invisible; /* Hist Fut Pcent 2*/
      set AF0RM001.AF0RMHF3[AFWIDX5] skip, invisible; /* Hist Fut Pcent 3*/
      set AF0RM001.AF0RMHF4[AFWIDX5] skip, invisible; /* Hist Fut Pcent 4*/
      set AF0RM001.AF0RMHPR[AFWIDX5] skip, invisible; /* Hist Prop Pcent*/
      set AF0RM001.AF0RMHTL[AFWIDX5] skip, invisible; /* Hist Total Pcent*/
      set AF0RM001.AF0RMCF1[AFWIDX5] skip, invisible; /* Hist Fut Pcent 1*/
      set AF0RM001.AF0RMCF2[AFWIDX5] skip, invisible; /* Hist Fut Pcent 2*/
      set AF0RM001.AF0RMCF3[AFWIDX5] skip, invisible; /* Hist Fut Pcent 3*/
      set AF0RM001.AF0RMCF4[AFWIDX5] skip, invisible; /* Hist Fut Pcent 4*/
      set AF0RM001.AF0RMCPR[AFWIDX5] skip, invisible; /* Hist Prop Pcent*/
      set AF0RM001.AF0RMCTL[AFWIDX5] skip, invisible; /* Hist Total Pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    set AF0RM001.AF0RMHGT skip, invisible; /* Curr grand Total Pcent*/
    set AF0RM001.AF0RMCGT skip, invisible; /* Curr grand Total Pcent*/

    set AF0RM001.XSECD cursor; /* Set cursor position*/


                      /* (Converse Main Process)*/

    goto AF0R001; /* Main Process*/



    AF0R001: AF0R001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Monthly Demand Pcent Application*/
     /* ------------------------------------------------------------*/

    goto AF0R001;


  end // end main
end // end AF0R

// Choose which map to display
Function AF0R001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/



  AF0R110(); /* Obtain the data to display*/

  AF0R120(); /* Format and display the map*/

  AF0R130(); /* Check attention identifier*/

  AF0R140(); /* Reset fields to normal intensity*/

  AF0R150(); /* Verify the entered data*/

  AF0R160(); /* Process valid input request*/




end // end AF0R001

// Obtain Data to Display
Function AF0R110()
   /* ------------------------------------------------------------*/
   /* Check for common data selection criteria. If met, then*/
     /* exit to next process;*/

   /* Execute data retrieval processes for Style/Pct  display;*/
   /* Execute data retrieval processes for Historical display.*/

   /* --> Note that while Style/Pct  data and Historical data*/
       /* share the same screen(or map), both are intrinsically*/
       /* different from each other so processes to obtain data*/
       /* are completely seperate and unrelated.*/
   /* ------------------------------------------------------------*/

   /* *========================================**/
   /* *  Check Common Data Selection Criteria  **/
   /* *========================================**/

  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || AF0RW01.AF0RWPND == "Y"           /* Pop-up window processing active*/
   || converseVar.eventKey is pa2       /* PA2 was pressed*/
   || AFWREC.AFWFIRST == " ")           /* First time through*/
    return; /* Then exit to next process*/
  end

   /* *======================================**/
   /* *  Obtain Data for Style/Pct  Display  **/
   /* *======================================**/

  AF0R111(); /* Obtain Style/Pct  data*/



   /* *======================================**/
   /* *  Obtain Data for Historical Display  **/
   /* *======================================**/


  if (converseVar.validationMsgNum == 0) /* No errors found*/

    AF0R112(); /* Obtain Historical data*/

  end



end // end AF0R110

// Obtain Style/Pct Data
Function AF0R111()
   /* ------------------------------------------------------------*/
              /* ** Obtain Style/Pct Data ***/
   /* If new keys not entered, select set style using old keys.*/
   /* if old keys entered, get new G/A, CAT and SIL combination;*/
      /* set select style using new keys.*/
   /* Obtain and store all rows associated with the style;*/
      /* format all map detail pages.*/
   /* ------------------------------------------------------------*/


   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/

  if (AF0RW01.AF0RWCNF == "U" /* Update confirm flag set*/
   || AF0RW02.AF0RWUPD == "Y") /* Update set*/
    return; /* Then exit to next process*/
  end


  if (AF0RW01.AF0RWHDS == "Y" /* Historical data requested*/
   && AFWREC.AFWSWR == "N")   /* and No Style/Pct  keys changed*/
    return; /* Then exit to next process*/
  end


   /* *=======================================**/
   /* *  Check for Data Contention Condition  **/
   /* *=======================================**/

  if (AF0RW01.AF0RWCIN == "Y") /* Data contention present*/
    AFWREC.AFWSWR = "Y"; /* Do new select cycle using old keys*/
  end


   /* *========================================**/
   /* * Set Select Using New Keys,             **/
   /* * ... And Obtain First Style of New Set  **/
   /* *========================================**/

  if (AFWREC.AFWSWR == "Y") /* New keys entered*/

    AF0RS70(); /* Load AFMO Table*/

    AF0RW01.AF0RWCMS = "Y"; /* Get new G/A.CAT,SIL comb.*/
    set AF9REC empty; /* Clear work record*/


    AF0RW01.AF0RWCSY = 1; /* Set style ctr to get 1st style*/
    AF0RW01.AF0RWLCT = 0; /* Reset Style loop ctr*/


    if (AF0RM001.AF0RMSYD != " ") /* Particular style entered*/
      AF0RW01.AF0RWSYK = AF0RM001.AF0RMSYD; /* To sty work key*/
    else
      AF0RW01.AF0RWSYK = " "; /* To sty work key*/
    end

  end



  AF0RW01.AF0RWCIN = " "; /* Reset contention indicator*/


   /* *===================**/
   /* * Select Style Row  **/
   /* *===================**/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    AF0RS50(); /* Select Scan Style*/
  end



  if (converseVar.validationMsgNum == 0) /* No errors*/

    AFWREC.AFWIDX5 = 0; /* Reset loop ctr*/

    AF0RW01.AF0RWSQU = "N";

    while (AF0RW01.AF0RWSQU != "Y")
      set AF0RW02 empty; /* Clear working storage record*/
      AF0RS51(); /* Get next(or current) valid style*/

    end




    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/

      AF0RS52(); /* Close Select Scan cursor*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/

        AF0RS52(); /* Close Select Scan cursor*/

        AF9REC.AF9GAG99 = "Y"; /* Force combination end*/
        AF9REC.AF9CAT99 = "Y"; /* Force combination end*/
        AF9REC.AF9SIL99 = "Y"; /* Force combination end*/

        set AF0RW02 empty; /* Clear map dtl work area*/

      end

    end

  end



   /* *=========================================================**/
   /* * Check Obtain Data Status, Inactivate All Loop Controls  **/
   /* *=========================================================**/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0RW01.AF0RWPGV = 1; /* Set display at page one*/
    AF0RW01.AF0RWLCT = 0; /* Reset style loop ctr*/
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
  end



end // end AF0R111

// Obtain Historical Data
Function AF0R112()
   /* ------------------------------------------------------------*/
               /* ** Obtain Historical Data ***/
   /* If new keys not entered, the return to calling process.*/
   /* If new keys entered, then obtain data from the historical*/
     /* databases, depending if the style no. was entered or not.*/
   /* Store all sizes/pcent qtys, format into map pages.*/
   /* ------------------------------------------------------------*/



   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/

  if (AF0RW01.AF0RWHDS == "N") /* Historical Data Select Ind off*/
    return; /* Then exit to next process*/
  end



   /* *==========================**/
   /* *  Clear Record Work Area  **/
   /* *==========================**/

  set AF0RW03 empty; /* Clear working storage record*/

  AF0RS71();


   /* *=================================**/
   /* * Select Database to be Accessed  **/
   /* *=================================**/

  if (AF0RW01.AF0RWHST == " ") /* Historical Style not specified*/

    AFWREC.AFWIDX1 = 1; /* Reset categ loop index*/
    while (AFWREC.AFWIDX1 <= 3) /* Process all historical categories*/

      AFWREC.AFWIDX2 = 1; /* Reset selections loop index*/

      while (AFWREC.AFWIDX2 <= 2) /* Process all selections*/
        AF0RS11(); /* Process Historical Summary DB*/
        AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
      end

      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

    end

  else

    AFWREC.AFWIDX2 = 1; /* Reset selections loop index*/

    while (AFWREC.AFWIDX2 <= 2) /* Process all selections*/
      AF0RS15(); /* Process Historical Detail DB*/
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
    end

  end



   /* *==============================**/
   /* *  Compute Summary Qty Totals  **/
   /* *==============================**/

  AFWREC.AFWIDX1 = 1; /* Reset Loop index*/
  while (AFWREC.AFWIDX1 <= 12) /* Process all months*/

    AF0RW03.AF0RWTOT = AF0RWHB1[AFWIDX1]; /* To wk area for accum*/
    AF0RW03.AF0RWHB6[AFWIDX1] = AF0RW03.AF0RWHB6[AFWIDX1] + AF0RW03.AF0RWTOT;
    AF0RW03.AF0RWTOT = AF0RWHB2[AFWIDX1]; /* To wk area for accum*/
    AF0RW03.AF0RWHB6[AFWIDX1] = AF0RW03.AF0RWHB6[AFWIDX1] + AF0RW03.AF0RWTOT;
    AF0RW03.AF0RWTOT = AF0RWHB3[AFWIDX1]; /* To wk area for accum*/
    AF0RW03.AF0RWHB6[AFWIDX1] = AF0RW03.AF0RWHB6[AFWIDX1] + AF0RW03.AF0RWTOT;
    AF0RW03.AF0RWTOT = AF0RWHB4[AFWIDX1]; /* To wk area for accum*/
    AF0RW03.AF0RWHB6[AFWIDX1] = AF0RW03.AF0RWHB6[AFWIDX1] + AF0RW03.AF0RWTOT;
    AF0RW03.AF0RWTOT = AF0RWHB5[AFWIDX1]; /* To wk area for accum*/
    AF0RW03.AF0RWHB6[AFWIDX1] = AF0RW03.AF0RWHB6[AFWIDX1] + AF0RW03.AF0RWTOT;

    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

  end



   /* *==================================**/
   /* *  Compute Historical Percentages  **/
   /* *==================================**/


  AF0RW01.AF0RWTPC = 0; /* Initialize total wk area*/
  AFWREC.AFWIDX1 = 1; /* Reset loop index*/

  while (AFWREC.AFWIDX1 <= 12) /* Process all months*/
                  /* (Compute Grand Qty Total)*/
    AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW03.AF0RWHB6[AFWIDX1];
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

  end


  AFWREC.AFWIDX1 = 1; /* Reset Loop index*/
  while (AFWREC.AFWIDX1 <= 12) /* Process all months*/

                 /* (Compute Historical Percentages)*/
    if (AF0RW03.AF0RWHB6[AFWIDX1] > 0) /* Non-zero qty total*/

      AF0RW03.AF0RWTF1 = AF0RW03.AF0RWHB1[AFWIDX1]; /* To wk area*/
      AF0RW01.AF0RWPCT = mathLib.round(AF0RW03.AF0RWTF1 / AF0RW01.AF0RWTPC, -mathLib.decimals(AF0RW01.AF0RWPCT));
      AF0RW03.AF0RWHF1[AFWIDX1] = mathLib.round(AF0RW01.AF0RWPCT * 100, -mathLib.decimals(AF0RW03.AF0RWHF1[AFWIDX1]));

      AF0RW03.AF0RWTF2 = AF0RW03.AF0RWHB2[AFWIDX1]; /* To wk area*/
      AF0RW01.AF0RWPCT = mathLib.round(AF0RW03.AF0RWTF2 / AF0RW01.AF0RWTPC, -mathLib.decimals(AF0RW01.AF0RWPCT));
      AF0RW03.AF0RWHF2[AFWIDX1] = mathLib.round(AF0RW01.AF0RWPCT * 100, -mathLib.decimals(AF0RW03.AF0RWHF2[AFWIDX1]));

      AF0RW03.AF0RWTF3 = AF0RW03.AF0RWHB3[AFWIDX1]; /* To wk area*/
      AF0RW01.AF0RWPCT = mathLib.round(AF0RW03.AF0RWTF3 / AF0RW01.AF0RWTPC, -mathLib.decimals(AF0RW01.AF0RWPCT));
      AF0RW03.AF0RWHF3[AFWIDX1] = mathLib.round(AF0RW01.AF0RWPCT * 100, -mathLib.decimals(AF0RW03.AF0RWHF3[AFWIDX1]));

      AF0RW03.AF0RWTF4 = AF0RW03.AF0RWHB4[AFWIDX1]; /* To wk area*/
      AF0RW01.AF0RWPCT = mathLib.round(AF0RW03.AF0RWTF4 / AF0RW01.AF0RWTPC, -mathLib.decimals(AF0RW01.AF0RWPCT));
      AF0RW03.AF0RWHF4[AFWIDX1] = mathLib.round(AF0RW01.AF0RWPCT * 100, -mathLib.decimals(AF0RW03.AF0RWHF4[AFWIDX1]));

      AF0RW03.AF0RWTF5 = AF0RW03.AF0RWHB5[AFWIDX1]; /* To wk area*/
      AF0RW01.AF0RWPCT = mathLib.round(AF0RW03.AF0RWTF5 / AF0RW01.AF0RWTPC, -mathLib.decimals(AF0RW01.AF0RWPCT));
      AF0RW03.AF0RWHPR[AFWIDX1] = mathLib.round(AF0RW01.AF0RWPCT * 100, -mathLib.decimals(AF0RW03.AF0RWHPR[AFWIDX1]));

    end

    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

  end


  AFWREC.AFWIDX1 = 1; /* Reset Loop index*/
  while (AFWREC.AFWIDX1 <= 12) /* Process all months*/

                /* (Compute Line Percent Totals)*/
    AF0RW03.AF0RWTOT = 0; /* Initialize wk total*/
    AF0RW03.AF0RWTOT = AF0RW03.AF0RWTOT + AF0RW03.AF0RWHF1[AFWIDX1];
    AF0RW03.AF0RWTOT = AF0RW03.AF0RWTOT + AF0RW03.AF0RWHF2[AFWIDX1];
    AF0RW03.AF0RWTOT = AF0RW03.AF0RWTOT + AF0RW03.AF0RWHF3[AFWIDX1];
    AF0RW03.AF0RWTOT = AF0RW03.AF0RWTOT + AF0RW03.AF0RWHF4[AFWIDX1];
    AF0RW03.AF0RWTOT = AF0RW03.AF0RWTOT + AF0RW03.AF0RWHPR[AFWIDX1];
    AF0RW03.AF0RWHTL[AFWIDX1] = AF0RW03.AF0RWTOT; /* Pcent totals*/

    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

  end



   /* *==========================**/
   /* * Check Obtain Data Status **/
   /* *==========================**/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0RW01.AF0RWPGV = 1; /* Set display at page one*/
    AF0RW01.AF0RWHDS = "N"; /* Request for history data completed*/
  end



end // end AF0R112

// Format and display the map
Function AF0R120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/


  if (AF0RW01.AF0RWPND != "Y" /* No pop-up windows active*/
   && AFWREC.AFWFIRST != " ") /* or Not the first time*/

    if (converseVar.validationMsgNum == 0) /* No error found*/

      AF0R121(); /* Format the data on the map*/

    else

      AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/

    end

  end



   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AF0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0RM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0RM001.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end


  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0RM001 alarm; /* Indicate sound alarm*/
  end



  converse AF0RM001 ;


   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/

  AFWREC.AFWNMO = 0; /* Info message number*/
  AFWREC.AFWSWR = "N";

  COMMAREA.CATOAP = AF0RM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0RM001.CAITEM; /* Application data*/


   /* ----------------------------------------------------------*/
    /* Reset AF9REC First Time Through Indicator*/
   /* ----------------------------------------------------------*/

  AF9REC.AF9FSTID = "Y"; /* Fst time indicator to 'Y'(es)*/



end // end AF0R120

// Format map data
Function AF0R121()

   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/

  set AF0RM001 initial; /* M001 input/output area*/



   /* *===============================**/
   /* *  Check Security Requirements  **/
   /* *===============================**/


  if (AF0RW04.AF0RWUFF == " " /* No factor and flag update*/
   || AF0RW04.AF0RWUFF == "N") /* No factor and flag update*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 9) /* Protect enterable fields*/
      set AF0RM001.AF0RMCF1[AFWIDX5] normal; /* Curr Fut 1*/
      set AF0RM001.AF0RMCF2[AFWIDX5] normal; /* Curr Fut 2*/
      set AF0RM001.AF0RMCF3[AFWIDX5] normal; /* Curr Fut 3*/
      set AF0RM001.AF0RMCF4[AFWIDX5] normal; /* Curr Fut 4*/
      set AF0RM001.AF0RMCPR[AFWIDX5] normal; /* Curr Prop Pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
  else
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 9) /* Protect enterable fields*/
      set AF0RM001.AF0RMCF1[AFWIDX5] protect; /* Curr Fut 1*/
      set AF0RM001.AF0RMCF2[AFWIDX5] protect; /* Curr Fut 2*/
      set AF0RM001.AF0RMCF3[AFWIDX5] protect; /* Curr Fut 3*/
      set AF0RM001.AF0RMCF4[AFWIDX5] protect; /* Curr Fut 4*/
      set AF0RM001.AF0RMCPR[AFWIDX5] protect; /* Curr Prop Pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
  end

  if (COMMAREA.CACHGFL == "N") /* User not allowed to update*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 9) /* Protect enterable fields*/
      set AF0RM001.AF0RMCF1[AFWIDX5] skip; /* Curr Fut 1*/
      set AF0RM001.AF0RMCF2[AFWIDX5] skip; /* Curr Fut 2*/
      set AF0RM001.AF0RMCF3[AFWIDX5] skip; /* Curr Fut 3*/
      set AF0RM001.AF0RMCF4[AFWIDX5] skip; /* Curr Fut 4*/
      set AF0RM001.AF0RMCPR[AFWIDX5] skip; /* Curr Prop Pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
  end



   /* *=====================**/
   /* *  Format Map Header  **/
   /* *=====================**/

                /* (Format Header Start Flds)*/
  AF0RM001.PG1FCTCD = AF0RW01.AF0RWUSR; /* Forecaster id*/
  AF0RM001.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0RM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0RM001.XDVCD = AF0RW01.AF0RWXDV; /* Start XDV cd*/
  AF0RM001.XPRCD = AF0RW01.AF0RWXPR; /* Start XPR cd*/
  AF0RM001.XGACD = AF0RW01.AF0RWGA; /* Start G/A cd*/
  AF0RM001.XPLCD = AF0RW01.AF0RWXPL; /* Start XPL cd*/
  AF0RM001.XPCCD = AF0RW01.AF0RWCAT; /* Start CAT cd*/
  AF0RM001.XSUCD = AF0RW01.AF0RWSIL; /* Start SIL cd*/
  AF0RM001.XOWCD = AF0RW01.AF0RWXOW; /* Start XOW cd*/

  AF0RM001.AF0RMSYD = AF0RW01.SY1STNBR; /* style default*/
  AF0RM001.AF0RM-OVFT = AF0RW04.AF0RWVFT; /* O Factor*/
  AF0RM001.AF0RM-OVFL = AF0RW04.AF0RWVFL; /* O Flag*/

  if (AF9REC.AF9GAIXM > 0 /* XGA Combination index valid*/
   && AF9REC.AF9PCIXM > 0 /* XPC Combination index valid*/
   && AF9REC.AF9SUIXM > 0) /* XSU Combination index valid*/
  end

          /* (Format Historical Selection Fields)*/
  AF0RM001.AF0RMHDV = AF0RW01.AF0RWHDV; /* Hist XDV cd*/
  AF0RM001.AF0RMHXPR = AF0RW01.AF0RWHPT; /* HIST XPR CD*/
  AF0RM001.AF0RMHGC = AF0RW01.AF0RWHGC; /* Hist G/A cd*/
  AF0RM001.AF0RMHOG = AF0RW01.AF0RWHOG; /* Hist XOW cd*/
  AF0RM001.AF0RMHPL = AF0RW01.AF0RWHPL; /* HIST XPL CD*/
  AF0RM001.AF0RMHSC = AF0RW01.AF0RWHSC; /* Hist Sil cd*/
  AF0RM001.AF0RMHCC[1] = AF0RW01.AF0RWHCC[1]; /* Hist Cat 1*/
  AF0RM001.AF0RMHCC[2] = AF0RW01.AF0RWHCC[2]; /* Hist Cat 2*/
  AF0RM001.AF0RMHCC[3] = AF0RW01.AF0RWHCC[3]; /* Hist Cat 3*/
  AF0RM001.AF0RMSTY = AF0RW01.AF0RWHST; /* Hist Style*/
  AF0RM001.AF0RMHS1 = AF0RW01.AF0RWHS1; /* Hist Season cd 1*/
  AF0RM001.AF0RMHY1 = AF0RW01.AF0RWHY1; /* Hist Season yr 1*/
  AF0RM001.AF0RMHD1 = AF0RW01.AF0RWDX1; /* Hist As of Date 1*/
  AF0RM001.AF0RMHS2 = AF0RW01.AF0RWHS2; /* Hist Season cd 2*/
  AF0RM001.AF0RMHY2 = AF0RW01.AF0RWHY2; /* Hist Season yr 2*/
  AF0RM001.AF0RMHD2 = AF0RW01.AF0RWDX2; /* Hist As of Date 2*/



   /* ------------------------------------------------------------*/
   /* Process Style/Pct - Historical Map Detail Lines*/
   /* ------------------------------------------------------------*/



   /* *====================================**/
   /* *  Process Style/Pct (Current) Data  **/
   /* *====================================**/


  if (AF9REC.AF9TYP99 == "Y" /* No more XPRCDs to process*/
   && AF9REC.AF9GAG99 == "Y" /* No more XGACDs to process*/
   && AF9REC.AF9LIN99 == "Y" /* No more XPLCDs to process*/
   && AF9REC.AF9CAT99 == "Y" /* No more XPCCDs to process*/
   && AF9REC.AF9SIL99 == "Y") /* No more XSUCDs to process*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0RM001.AF0RMCF1[AFWIDX5] skip, invisible; /* Curr Fut 1*/
      set AF0RM001.AF0RMCF2[AFWIDX5] skip, invisible; /* Curr Fut 2*/
      set AF0RM001.AF0RMCF3[AFWIDX5] skip, invisible; /* Curr Fut 3*/
      set AF0RM001.AF0RMCF4[AFWIDX5] skip, invisible; /* Curr Fut 4*/
      set AF0RM001.AF0RMCPR[AFWIDX5] skip, invisible; /* Curr Prop*/
      set AF0RM001.AF0RMCTL[AFWIDX5] skip, invisible; /* Curr Pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    set AF0RM001.AF0RMCGT skip, invisible; /* Curr grand total*/
    converseLib.validationFailed(15); /* Indicate no data to disp*/
    AFWREC.AFWPRCSN = "121 "; /* Process number*/


  else /* (Style found)*/


    /* ------------------------------------------------------------*/
      /* If invalid percentage field change was made (Total Percent*/
        /* not = 0 or 100) and PA2 was pressed, the FF. code will*/
        /* restore the original contents of the map for the current*/
        /* style/color/size being processed, and reset program*/
        /* variables triggering update activities.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pa2) /* PA2 (Clear/Restore Display) pressed*/

      move AF0RW02.AF0RWCW1 to AF0RW02.AF0RWCF1[1] for all; /* Restore saved Fut 1*/
      move AF0RW02.AF0RWCW2 to AF0RW02.AF0RWCF2[1] for all; /* Restore saved Fut 2*/
      move AF0RW02.AF0RWCW3 to AF0RW02.AF0RWCF3[1] for all; /* Restore saved Fut 3*/
      move AF0RW02.AF0RWCW4 to AF0RW02.AF0RWCF4[1] for all; /* Restore saved Fut 4*/
      move AF0RW02.AF0RWCW5 to AF0RW02.AF0RWCPR[1] for all; /* Restore saved Fut 5*/
      move AF0RW02.AF0RWCTW to AF0RW02.AF0RWCTL[1] for all; /* Restore saved Fut tot*/

      move " " to AF0RW02.AF0RWCHG[1] for all; /* Reset change indicator*/
      AF0RW02.AF0RWUPD = " "; /* Reset update indicator*/
      AF0RW01.AF0RWCNF = "N"; /* Reset upd confirm indicator*/

    end

    AF0RM001.AF0RMMTH[1] = "ERL"; /* Fmt early month*/
    AF0RM001.AF0RMMTH[AF0RW-LATE-IDX] = "LAT"; /* Fmt late month*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    AFWREC.AFWIXM = 1; /* Set Map index*/
    AF0RW01.AF0RWTPC = 0; /* Initialize total wk area*/

    while (AFWREC.AFWIDX5 <= 9) /* Process months*/

      if (AFWREC.AFWIDX5 <= AF0RW-LATE-IDX)
        AF0RM001.AF0RMCF1[AFWIXM] = AF0RW02.AF0RWCF1[AFWIDX5]; /* Fut1*/
        AF0RM001.AF0RMCF2[AFWIXM] = AF0RW02.AF0RWCF2[AFWIDX5]; /* Fut2*/
        AF0RM001.AF0RMCF3[AFWIXM] = AF0RW02.AF0RWCF3[AFWIDX5]; /* Fut3*/
        AF0RM001.AF0RMCF4[AFWIXM] = AF0RW02.AF0RWCF4[AFWIDX5]; /* Fut4*/
        AF0RM001.AF0RMCPR[AFWIXM] = AF0RW02.AF0RWCPR[AFWIDX5]; /* Prop*/
        AF0RM001.AF0RMCTL[AFWIXM] = AF0RW02.AF0RWCTL[AFWIDX5]; /* Tot*/
        AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCTL[AFWIDX5];

      else
        set AF0RM001.AF0RMCF1[AFWIDX5] skip, invisible; /* Curr Fut 1*/
        set AF0RM001.AF0RMCF2[AFWIDX5] skip, invisible; /* Curr Fut 2*/
        set AF0RM001.AF0RMCF3[AFWIDX5] skip, invisible; /* Curr Fut 3*/
        set AF0RM001.AF0RMCF4[AFWIDX5] skip, invisible; /* Curr Fut 4*/
        set AF0RM001.AF0RMCPR[AFWIDX5] skip, invisible; /* Curr Prop*/
        set AF0RM001.AF0RMCTL[AFWIDX5] skip, invisible; /* Curr Pcent*/
      end
      AFWREC.AFWIDX4 = AF0RW-AFMO-MNTH[AFWIDX5];
      if (AFWIDX4 > 0
       && AFWIDX4 <= 12)
        AF0RM001.AF0RMMTH[AFWIXM] = AF0RW01.AF0RWMTB[AFWIDX4]; /* Mth*/
      end

      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment map index*/

    end

    AF0RM001.AF0RMCGT = AF0RW01.AF0RWTPC; /* Grand total*/

  end

   /* *===========================**/
   /* *  Process Historical Data  **/
   /* *===========================**/


  if (AF0RW03.AF0RWDPI == "Y") /* Historical Data processed*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    AFWREC.AFWIXM = 1; /* Set Map index*/

    while (AFWREC.AFWIDX5 <= 9) /* Process hist months*/

      AF0RM001.AF0RMHF1[AFWIXM] = AF0RW03.AF0RWHF1[AFWIDX5]; /* Fut1*/
      AF0RM001.AF0RMHF2[AFWIXM] = AF0RW03.AF0RWHF2[AFWIDX5]; /* Fut2*/
      AF0RM001.AF0RMHF3[AFWIXM] = AF0RW03.AF0RWHF3[AFWIDX5]; /* Fut3*/
      AF0RM001.AF0RMHF4[AFWIXM] = AF0RW03.AF0RWHF4[AFWIDX5]; /* Fut4*/
      AF0RM001.AF0RMHPR[AFWIXM] = AF0RW03.AF0RWHPR[AFWIDX5]; /* Prop*/
      AF0RM001.AF0RMHTL[AFWIXM] = AF0RW03.AF0RWHTL[AFWIDX5]; /* Tot*/

      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment map index*/

    end

    AF0RW01.AF0RWTPC = 0; /* Initialize total wk area*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 9) /* Accumulate total pcents*/

      AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW03.AF0RWHTL[AFWIDX5];
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/

    end

    AF0RM001.AF0RMHGT = AF0RW01.AF0RWTPC; /* Grand total*/

  else /* (No Historical Data Retrieved)*/


    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0RM001.AF0RMHF1[AFWIDX5] skip, invisible; /* Hist Fut 1*/
      set AF0RM001.AF0RMHF2[AFWIDX5] skip, invisible; /* Hist Fut 2*/
      set AF0RM001.AF0RMHF3[AFWIDX5] skip, invisible; /* Hist Fut 3*/
      set AF0RM001.AF0RMHF4[AFWIDX5] skip, invisible; /* Hist Fut 4*/
      set AF0RM001.AF0RMHPR[AFWIDX5] skip, invisible; /* Hist Prop*/
      set AF0RM001.AF0RMHTL[AFWIDX5] skip, invisible; /* Hist Pcent Total*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    if (AF0RM001.AF0RMSTY != " "    /* Style entered*/
     || AF0RM001.AF0RMHDV != " "    /* or DIVISION  cd*/
     || AF0RM001.AF0RMHXPR != " "   /* or PRD TYPE cd*/
     || AF0RM001.AF0RMHGC != " "    /* or Valid Gender/Age cd*/
     || AF0RM001.AF0RMHOG != " "    /* or Valid XOW cd*/
     || AF0RM001.AF0RMHPL != " "    /* or PRD LINE cd*/
     || AF0RM001.AF0RMHSC != " "    /* or Valid Silhouette cd*/
     || AF0RM001.AF0RMHCC[1] != " " /* Categ 1 valid*/
     || AF0RM001.AF0RMHCC[2] != " " /* or Categ 2 valid*/
     || AF0RM001.AF0RMHCC[3] != " ") /* or Categ 3 valid*/

      converseLib.validationFailed(15); /* Indicate no data to display*/
      AFWREC.AFWPRCSN = "121 "; /* Process number*/

    end

  end



   /* *===================**/
   /* *  Position Cursor  **/
   /* *===================**/


  set AF0RM001.XSECD cursor; /* Position cursor*/




end // end AF0R121

// Check Attention ID
Function AF0R130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AF0RM001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end



  if (AF0RM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0RM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0RM001.CAITEM; /* Application data*/

      XP1REC.XPRCD = AF0RW01.AF0RWXPR; /* Restore start XPRCD*/
      XP1REC.XPLCD = AF0RW01.AF0RWXPL; /* Restore start XPLCD*/
      XP1REC.XGACD = AF0RW01.AF0RWGA; /* Restore start XGACD*/
      XP1REC.XPCCD = AF0RW01.AF0RWCAT; /* Restore start XPCCD*/
      XP1REC.XSUCD = AF0RW01.AF0RWSIL; /* Restore start XSUCD*/
      XP1REC.XOWCD = AF0RW01.AF0RWXOW; /* Restore start XOWCD*/

      AF0RW01.AF0RWXPR = " "; /* Clear start XPRCD*/
      AF0RW01.AF0RWGA = " "; /* Clear start XGACD*/
      AF0RW01.AF0RWXPL = " "; /* Clear start XPLCD*/
      AF0RW01.AF0RWCAT = " "; /* Clear start XPCCD*/
      AF0RW01.AF0RWSIL = " "; /* Clear start XSUCD*/
      AF0RW01.AF0RWXOW = " "; /* Clear start XOWCD*/


      XSAFS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AF0RM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AF0RM001.CAITEM > " ") /* Application data was entered*/
    set AF0RM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0RM001"; /* Appl find code*/
    end


    if (converseVar.eventKey is pf5) /* PF1 was pressed*/
      COMMAREA.CATOAP = "AF0H"; /* transfer appl*/
    end

    XP1REC.XPRCD = AF0RW01.AF0RWXPR; /* Restore start XPRCD*/
    XP1REC.XGACD = AF0RW01.AF0RWGA; /* Restore start XGACD*/
    XP1REC.XPCCD = AF0RW01.AF0RWCAT; /* Restore start xpcCD*/
    XP1REC.XSUCD = AF0RW01.AF0RWSIL; /* Restore start xsuCD*/
    XP1REC.XPLCD = AF0RW01.AF0RWXPL; /* Restore start XPLCD*/
    XP1REC.XOWCD = AF0RW01.AF0RWXOW; /* Restore start XOWCD*/

    AF0RW01.AF0RWGA = " "; /* Clear start XGACD*/
    AF0RW01.AF0RWXPL = " "; /* Clear start xplCD*/
    AF0RW01.AF0RWCAT = " "; /* Clear start xpcCD*/
    AF0RW01.AF0RWSIL = " "; /* Clear start xsuCD*/
    AF0RW01.AF0RWXOW = " "; /* Clear start XOWCD*/


    XSAFS01(); /* Exit to another application*/

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/

    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/


    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


  if (AFWREC.AFWFIRST == " ") /* First time through*/

    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end

  end



  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   || converseVar.eventKey is pf16 /* PF16 was pressed*/
   || converseVar.eventKey is pf17 /* PF17 was pressed*/
   || converseVar.eventKey is pf18) /* PF18 was pressed*/

    if (AF9REC.AF9GAG99 == "Y" /* Last G/A code retrieved*/
     || AF9REC.AF9CAT99 == "Y" /* Last CAT code retrieved*/
     || AF9REC.AF9SIL99 == "Y") /* Last SIL code retrieved*/
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(15); /* Indicate no data to display*/
      exit stack; /* Exit to redisplay map*/
    end

  end



end // end AF0R130

// Reset Hilight Flds,Disp Pop-Up
Function AF0R140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0RM001.PG1FCTCD normal; /* Forecaster cd*/
  set AF0RM001.XSECD normal; /* Sesn cd*/
  set AF0RM001.XSNYR normal; /* Sesn yr*/
  set AF0RM001.XDVCD normal; /* Division cd*/
  set AF0RM001.XPRCD normal; /* Product type code*/
  set AF0RM001.XGACD normal; /* Gender Age cd*/
  set AF0RM001.XPLCD normal; /* Product line code*/
  set AF0RM001.XPCCD normal; /* Category cd*/
  set AF0RM001.XSUCD normal; /* Silhouette cd*/
  set AF0RM001.XOWCD normal; /* Silhouette cd*/
  set AF0RM001.AF0RMSYD normal; /* Status cd*/

  set AF0RM001.AF0RMHDV normal; /* Hist XDV cd*/
  set AF0RM001.AF0RMHXPR normal; /* Hist XPR cd*/
  set AF0RM001.AF0RMHSC normal; /* Hist Sil cd*/
  set AF0RM001.AF0RMHCC[1] normal; /* Hist Cat 1*/
  set AF0RM001.AF0RMHCC[2] normal; /* Hist Cat 2*/
  set AF0RM001.AF0RMHCC[3] normal; /* Hist Cat 3*/
  set AF0RM001.AF0RMSTY normal; /* Hist Style*/
  set AF0RM001.AF0RMHS1 normal; /* Hist Season cd 1*/
  set AF0RM001.AF0RMHY1 normal; /* Hist Season yr 1*/
  set AF0RM001.AF0RMHGC normal; /* Hist G/A cd*/
  set AF0RM001.AF0RMHPL normal; /* Hist XPL cd*/
  set AF0RM001.AF0RMHSC normal; /* Hist Sil cd*/
  set AF0RM001.AF0RMHOG normal; /* Hist XOW cd*/
  set AF0RM001.AF0RMHCC[1] normal; /* Hist Cat 1*/
  set AF0RM001.AF0RMHCC[2] normal; /* Hist Cat 2*/
  set AF0RM001.AF0RMHCC[3] normal; /* Hist Cat 3*/
  set AF0RM001.AF0RMSTY normal; /* Hist Style*/
  set AF0RM001.AF0RMHS1 normal; /* Hist Season cd 1*/
  set AF0RM001.AF0RMHY1 normal; /* Hist Season yr 1*/
  set AF0RM001.AF0RMHD1 normal; /* Hist As of Date 1*/
  set AF0RM001.AF0RMHS2 normal; /* Hist Season cd 2*/
  set AF0RM001.AF0RMHY2 normal; /* Hist Season yr 2*/
  set AF0RM001.AF0RMHD2 normal; /* Hist As of Date 2*/
  set AF0RM001.AF0RM-OVFT normal; /* Override factor*/
  set AF0RM001.AF0RM-OVFL normal; /* Override flag*/

  AF0RM001.XXXPRCNM = "AF0R    "; /* Reset process name*/


  set AF0RM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0RM001.CAITEM initialAttributes; /* Commarea application data*/


   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0RM001.XSECD == "?"       /* Season cd*/
   || AF0RM001.XPRCD == "?"       /* Product type code*/
   || AF0RM001.XDVCD == "?"       /* Division cd*/
   || AF0RM001.XGACD == "?"       /* Gender/Age cd*/
   || AF0RM001.XPLCD == "?"       /* Product line code*/
   || AF0RM001.XPCCD == "?"       /* Category cd*/
   || AF0RM001.XSUCD == "?"       /* Silhouette cd*/
   || AF0RM001.XOWCD == "?"       /* Owner group cd*/
   || AF0RM001.AF0RMHDV == "?"    /* Historical XDV cd*/
   || AF0RM001.AF0RMHXPR == "?"   /* Historical XPR cd*/
   || AF0RM001.AF0RMHGC == "?"    /* Historical G/A cd*/
   || AF0RM001.AF0RMHPL == "?"    /* Historical XPL cd*/
   || AF0RM001.AF0RMHCC[1] == "?" /* Historical Cat cd 1*/
   || AF0RM001.AF0RMHCC[2] == "?" /* Historical Cat cd 2*/
   || AF0RM001.AF0RMHCC[3] == "?" /* Historical Cat cd 3*/
   || AF0RM001.AF0RMHSC == "?"    /* Historical Sil cd*/
   || AF0RM001.AF0RMHOG == "?"    /* Historical XOWCD*/
   || AF0RM001.AF0RMHS1 == "?"    /* Historical Season cd 1*/
   || AF0RM001.AF0RMHS2 == "?")   /* Historical Season cd 2*/

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    AF0RW01.AF0RWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/

  end



   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season cd*/
   /* *============================**/

  if (AF0RM001.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0RM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    end
    AF0RM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/

  end



   /* *============================**/
   /* *  Pop-up Window for XDVCD   * Division code*/
   /* *============================**/

  if (AF0RM001.XDVCD == "?") /* Pop-up window requested*/

    XP1REC.XDVCD = AF0RM001.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSDV(); /* Pop-up window func requested*/

    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    end
    AF0RM001.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/

  end

   /* *============================**/
   /* *  Pop-up Window for XPRCD   * product type*/
   /* *============================**/

  if (AF0RM001.XPRCD == "?") /* Pop-up window requested*/

    XP1REC.XPRCD = AF0RM001.XPRCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPR(); /* Pop-up window func requested*/

    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    end
    AF0RM001.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/

  end


   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/

  if (AF0RM001.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0RM001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    end
    AF0RM001.XGACD = XP1REC.XGACD; /* Move selected code to map*/

  end



   /* *============================**/
   /* *  Pop-up Window for XPlCD   * product line*/
   /* *============================**/

  if (AF0RM001.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0RM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    end
    AF0RM001.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/

  end



   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/

  if (AF0RM001.XPCCD == "?") /* Pop-up window requested*/

    XP1REC.XPCCD = AF0RM001.XPCCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end
    AF0RM001.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/

  end



   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Silhouette cd*/
   /* *=============================**/


  if (AF0RM001.XSUCD == "?") /* Pop-up window requested*/

    XP1REC.XSUCD = AF0RM001.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSU(); /* Pop-up window func requested*/

    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    end
    AF0RM001.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XDVCD **/
   /* *=====================================**/

  if (AF0RM001.AF0RMHDV == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSDV = XP1REC.XDVCD; /* Save orig XP1REC fld*/
    XP1REC.XDVCD = AF0RM001.AF0RMHDV; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSDV(); /* Pop-up window func requested*/

    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    end

    AF0RM001.AF0RMHDV = XP1REC.XDVCD; /* Move selected code to map*/

    XP1REC.XDVCD = AF0RW01.AF0RWSDV; /* Restore orig XP1REC fld*/

  end

   /* *============================**/
   /* *  Pop-up Window for XOWCD   **/
   /* *============================**/

  if (AF0RM001.XOWCD == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0RM001.XOWCD; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Whse 51*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    end
    AF0RM001.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/

  end


   /* *=====================================**/
   /* *  Pop-up Window for Historical XPRCD * product type cd*/
   /* *=====================================**/

  if (AF0RM001.AF0RMHXPR == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSPR = XP1REC.XPRCD; /* Save orig XP1REC field*/
    XP1REC.XPRCD = AF0RM001.AF0RMHXPR; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPR(); /* Pop-up window func requested*/

    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    end

    AF0RM001.AF0RMHXPR = XP1REC.XPRCD; /* Move sel code to map*/

    XP1REC.XPRCD = AF0RW01.AF0RWSPR; /* Restore orig XP1REC field*/

  end
   /* *=====================================**/
   /* *  Pop-up Window for Historical XGACD **/
   /* *=====================================**/

  if (AF0RM001.AF0RMHGC == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSGA = XP1REC.XGACD; /* Save orig XP1REC fld*/
    XP1REC.XGACD = AF0RM001.AF0RMHGC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    end

    AF0RM001.AF0RMHGC = XP1REC.XGACD; /* Move selected code to map*/

    XP1REC.XGACD = AF0RW01.AF0RWSGA; /* Restore orig XP1REC fld*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XPlCD * product line cd*/
   /* *=====================================**/

  if (AF0RM001.AF0RMHPL == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSPL = XP1REC.XPLCD; /* Save orig XP1REC field*/
    XP1REC.XPLCD = AF0RM001.AF0RMHPL; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    end

    AF0RM001.AF0RMHPL = XP1REC.XPLCD; /* Move sel code to map*/

    XP1REC.XPLCD = AF0RW01.AF0RWSPL; /* Restore orig XP1REC field*/

  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XPCCD * Category cd 1*/
   /* *=====================================**/

  if (AF0RM001.AF0RMHCC[1] == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0RM001.AF0RMHCC[1]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end

    AF0RM001.AF0RMHCC[1] = XP1REC.XPCCD; /* Move sel code to map*/

    XP1REC.XPCCD = AF0RW01.AF0RWSPC; /* Restore orig XP1REC field*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XPCCD * Category cd 2*/
   /* *=====================================**/

  if (AF0RM001.AF0RMHCC[2] == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0RM001.AF0RMHCC[2]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end

    AF0RM001.AF0RMHCC[2] = XP1REC.XPCCD; /* Move sel code to map*/

    XP1REC.XPCCD = AF0RW01.AF0RWSPC; /* Restore orig XP1REC field*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XPCCD * Category cd 3*/
   /* *=====================================**/

  if (AF0RM001.AF0RMHCC[3] == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0RM001.AF0RMHCC[3]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end

    AF0RM001.AF0RMHCC[3] = XP1REC.XPCCD; /* Move sel code to map*/

    XP1REC.XPCCD = AF0RW01.AF0RWSPC; /* Restore orig XP1REC field*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XSUCD * Silhouette cd*/
   /* *=====================================**/


  if (AF0RM001.AF0RMHSC == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSSL = XP1REC.XSUCD; /* Save orig XP1REC field*/
    XP1REC.XSUCD = AF0RM001.AF0RMHSC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSU(); /* Pop-up window func requested*/

    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    end

    AF0RM001.AF0RMHSC = XP1REC.XSUCD; /* Move selected code to map*/

    XP1REC.XSUCD = AF0RW01.AF0RWSSL; /* Restore orig XP1REC fld*/

  end

   /* *=======================================**/
   /* *  Pop-up Window for Historical XOWCD   **/
   /* *=======================================**/

  if (AF0RM001.AF0RMHOG == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSOG = XP1REC.XOWCD; /* Save Owoner grp*/
    XP1REC.XOWCD = AF0RM001.AF0RMHOG; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Whse 51*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    end
    AF0RM001.AF0RMHOG = XP1REC.XOWCD; /* Move selected code to map*/
    XP1REC.XOWCD = AF0RW01.AF0RWSOG; /* restore xp1rec*/

  end


   /* *=====================================**/
   /* *  Pop-up Window for Historical XSECD * Season cd 1*/
   /* *=====================================**/

  if (AF0RM001.AF0RMHS1 == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSSC = XP1REC.XSECD; /* Save orig XP1REC field*/
    XP1REC.XSECD = AF0RM001.AF0RMHS1; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    end

    AF0RM001.AF0RMHS1 = XP1REC.XSECD; /* Move selected code to map*/

    XP1REC.XSECD = AF0RW01.AF0RWSSC; /* Restore orig XP1REC field*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XSECD * Season cd 2*/
   /* *=====================================**/

  if (AF0RM001.AF0RMHS2 == "?") /* Pop-up window requested*/

    AF0RW01.AF0RWSSC = XP1REC.XSECD; /* Save orig XP1REC field*/
    XP1REC.XSECD = AF0RM001.AF0RMHS2; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    end

    AF0RM001.AF0RMHS2 = XP1REC.XSECD; /* Move selected code to map*/

    XP1REC.XSECD = AF0RW01.AF0RWSSC; /* Restore orig XP1REC field*/

  end



   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/


  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0RW01.AF0RWPND = "Y"; /* Activate pop-up window ind*/

  exit stack; /* Exit to redisplay map*/


end // end AF0R140

// Verify Entered Data
Function AF0R150()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  AF0R151(); /* Verify data entered*/


  if (converseVar.validationMsgNum != 0) /* Errors found*/

    AF0RW01.AF0RWCNF = "N"; /* Reset update confirm flag*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/
                                    /* (For Style/Pct  Data)*/
    AF0RW01.AF0RWCNF = "N"; /* Reset update confirm flag*/
  end



end // end AF0R150

// Verify Data Entered
Function AF0R151()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *****                                                  ******/
     /* -- This process is composed of two(2) major phases:     **/
    /* The first phase processes the selection criteria of the  **/
    /* Historical data requests. The second phase processes the **/
    /* Style/Size data requests.  Both phases, however, share   **/
    /* one error message area (EZEMNO). Since the application   **/
    /* interrogates EZEMNO to determine what kind of processing **/
    /* is necessary, an error in either Historical data editing **/
    /* or Style/Size data editing will prevent  retrieval of    **/
    /* detail data for BOTH, until all errors are rectified.    **/
   /* *************************************************************/


  AF0RW01.AFWSWR = AFWREC.AFWSWR; /* Save data select setting*/

  AFWREC.AFWFIRST = "N"; /* First Pass switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* Initialize msg hold area*/
  AF0RW01.AF0RWMNO = 0; /* Initialize wk msg hold area*/

  if (AF0RW04.AF0RWUFF == "Y")
    AF0RW04.AF0RWUFF = "U";
    return;
  end

  if (AF0RW04.AF0RWVFL != AF0RM001.AF0RM-OVFL /* Test Flag*/
   || AF0RW04.AF0RWVFT != AF0RM001.AF0RM-OVFT) /* Test Factor*/
    AF0RW04.AF0RWUFF = "N"; /* Set update flag off*/
    AFWREC.AFWSWR = "Y"; /* New criteria entered*/
    AF0RS67(); /* Edit Factor & Flag*/
  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* ** PHASE 1: Process Historical Data Selection Criteria ***/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/


   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/


  if (AF0RW01.AF0RWHGC != AF0RM001.AF0RMHGC       /* Gender/Age cd*/
   || AF0RW01.AF0RWHCC[1] != AF0RM001.AF0RMHCC[1] /* Cat cd 1*/
   || AF0RW01.AF0RWHCC[2] != AF0RM001.AF0RMHCC[2] /* Cat cd 2*/
   || AF0RW01.AF0RWHCC[3] != AF0RM001.AF0RMHCC[3] /* Cat cd 3*/
   || AF0RW01.AF0RWHDV != AF0RM001.AF0RMHDV       /* Division cd*/
   || AF0RW01.AF0RWHPL != AF0RM001.AF0RMHPL       /* Product line cd*/
   || AF0RW01.AF0RWHPT != AF0RM001.AF0RMHXPR      /* Product type cd*/
   || AF0RW01.AF0RWHSC != AF0RM001.AF0RMHSC       /* Silhouette cd*/
   || AF0RW01.AF0RWHST != AF0RM001.AF0RMSTY       /* Style no.*/
   || AF0RW01.AF0RWHOG != AF0RM001.AF0RMHOG       /* Owner Group cd*/
   || AF0RW01.AF0RWHS1 != AF0RM001.AF0RMHS1       /* Season cd 1*/
   || AF0RW01.AF0RWHY1 != AF0RM001.AF0RMHY1       /* Season yr 1*/
   || AF0RW01.AF0RWDX1 != AF0RM001.AF0RMHD1       /* As of Date 1*/
   || AF0RW01.AF0RWHS2 != AF0RM001.AF0RMHS2       /* Season cd 2*/
   || AF0RW01.AF0RWHY2 != AF0RM001.AF0RMHY2       /* Season yr 2*/
   || AF0RW01.AF0RWDX2 != AF0RM001.AF0RMHD2)      /* As of Date 2*/

    AF0RW01.AF0RWHDS = "Y"; /* New criteria entered*/
    AF0RW01.AF0RWHAC = "Y"; /* Indicate hist pending actvty*/
     /* *===========================**/
     /* *  Edit Selection Criteria  **/
     /* *===========================**/
     /* *==> These routines perform standalone edit checks on the*/
      /* selection criteria entered. Relational edit checks will be*/
      /* done when all standalone edit errors have been resolved.*/
    AF0RS19(); /* Obtain historical XREF record*/
    AF0RS20(); /* Edit historical as-of-date 2*/
    AF0RS22(); /* Edit historical season yr 2*/
    AF0RS23(); /* Edit historical season cd 2*/
    AF0RS24(); /* Edit historical as-of-date 1*/
    AF0RS25(); /* Edit historical season yr 1*/
    AF0RS26(); /* Edit historical season cd 1*/
    AF0RS27(); /* Edit historical style no.*/
    AF0RS68(); /* Edit Historical Owner Group cd*/
    AF0RS28(); /* Edit historical silhouette cd*/
    AF0RS29(); /* Edit historical category cd*/
    AF0RS62(); /* Edit historical line cd*/
    AF0RS30(); /* Edit historical gender/age cd*/
    AF0RS64(); /* Edit historical product type*/
    AF0RS63(); /* Edit historical division*/
     /* *================================**/
     /* * Perform Relational Edit Checks **/
     /* *================================**/
    if (XP1REC.XP1MNO == 0) /* No historical edit errors*/
      AF0RS31(); /* Relational edit checks*/
    end
  else
    AF0RS31(); /* Relational edit checks*/
    AF0RW01.AF0RWHDS = "N"; /* Hist Data Sel sw to 'OFF'*/
    AF0RW01.AF0RWHAC = " "; /* Reset hist pending actvty ind*/
  end



   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/

  if (AF0RW01.AF0RWHDS == "Y" /* New criteria entered*/
   && converseVar.eventKey not enter) /* Enter key not pressed*/

    converseLib.validationFailed(4); /* Request not permitted*/
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end




   /* *==============================**/
   /* * Save Historical Edit Message **/
   /* *==============================**/

  AF0RW01.AF0RWMNO = XP1REC.XP1MNO; /* Save hist edit message*/
  XP1REC.XP1MNO = 0; /* Reset message area*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
      /* ** PHASE 2: Process Style/Size Selection Criteria ***/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/


  if (AF0RW01.AF0RWSIL != AF0RM001.XSUCD    /* Start SIL cd*/
   || AF0RW01.AF0RWXDV != AF0RM001.XDVCD    /* Start XDV cd*/
   || AF0RW01.AF0RWGA != AF0RM001.XGACD     /* Start G/A cd*/
   || AF0RW01.AF0RWXPR != AF0RM001.XPRCD    /* Start XPR cd*/
   || AF0RW01.AF0RWXPL != AF0RM001.XPLCD    /* Start XPL cd*/
   || AF0RW01.AF0RWCAT != AF0RM001.XPCCD    /* Start CAT cd*/
   || AF0RW01.AF0RWXOW != AF0RM001.XOWCD    /* start xowcd*/
   || XP1REC.XSNYR != AF0RM001.XSNYR        /* Season yr*/
   || AF0RM001.XSNYR == 0                   /* Map fld zeroed out*/
   || XP1REC.XSECD != AF0RM001.XSECD        /* Season cd*/
   || AF0RM001.XSECD == " "                 /* Map fld spaced out*/
   || AF0RW01.AF0RWUSR != AF0RM001.PG1FCTCD /* Forecaster cd*/
   || AF0RW01.SY1STNBR != AF0RM001.AF0RMSYD) /* default style*/

    if (XP1REC.XSNYR != AF0RM001.XSNYR /* Season yr*/
     || AF0RM001.XSNYR == 0            /* Map fld zeroed out*/
     || XP1REC.XSECD != AF0RM001.XSECD /* Season cd*/
     || AF0RM001.XSECD == " ")         /* Map fld spaced out*/
      AF0RW01.AF0RWHDS = "Y"; /* Hist Data Sel sw to 'OFF'*/
    end
    AFWREC.AFWSWR = "Y"; /* New criteria entered*/
     /* *===========================**/
     /* *  Edit Selection Criteria  **/
     /* *===========================**/
    AF0RS69(); /* Edit Owner Group Cd*/
    AF0RS33(); /* Edit default style*/
    AF0RS35(); /* Edit silhouette cd*/
    AF0RS36(); /* Edit category cd*/
    AF0RS60(); /* Edit product line*/
    AF0RS37(); /* Edit gender/age cd*/
    AF0RS65(); /* Edit product type*/
    AF0RS61(); /* Edit division code*/
    AF0RS38(); /* Edit season yr*/
    AF0RS39(); /* Edit season cd*/
    AF0RS40(); /* Edit forecaster cd*/

  end
   /* *============================**/
   /* * Check End of typ Indicator **/
   /* *============================**/

  if (AF9REC.AF9TYP99 == "Y") /* No more type codes to process*/

    if (AFWREC.AFWSWR == "N") /* No new keys entered*/
      converseLib.validationFailed(15); /* Indicate no more data*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      exit stack; /* Exit to reselect data*/
    end

  end



   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/

  if (AFWREC.AFWSWR == "Y" /* New keys entered*/
   && converseVar.eventKey not enter) /* Enter key not pressed*/

    converseLib.validationFailed(4); /* Request not permitted*/
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end

   /* *====================================**/
   /* *  Check Criteria Validation Status  **/
   /* *====================================**/

  if (XP1REC.XP1MNO == 0 /* No validation errors*/
   && AFWREC.AFWSWR == "Y") /* New selection criteria entered*/

    XP1REC.XSUCD = AF0RW01.AF0RWSIL; /* New start SIL cd*/
    XP1REC.XPCCD = AF0RW01.AF0RWCAT; /* New start CAT cd*/
    XP1REC.XPLCD = AF0RW01.AF0RWXPL; /* New start XPL cd*/
    XP1REC.XGACD = AF0RW01.AF0RWGA; /* New start G/A cd*/
    XP1REC.XPRCD = AF0RW01.AF0RWXPR; /* New start XPR cd*/
    XP1REC.XDVCD = AF0RW01.AF0RWXDV; /* New start XDV cd*/
    XP1REC.XOWCD = AF0RW01.AF0RWXOW; /* New Start XOW cd*/
    set AF0RW02 empty;


  end
   /* *==========================**/
   /* *  Edit Map Detail Lines   **/
   /* *==========================**/

  if (AFWREC.AFWSWR == "N" /* No selection criteria changed*/
   && XP1REC.XP1MNO == 0)  /* and No validation errors*/

    AF0RS41(); /* Edit map detail lines*/

  end

  AF0RS66();


   /* *=================================**/
   /* *  Check Validation Error Status  **/
   /* *=================================**/


  if (AF0RW01.AF0RWMNO != 0) /* Historical Data has errors*/

    if (AF0RW01.AF0RWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AF0RW01.AF0RWMNO);
    end /* Set message for display*/
    AF0RW01.AF0RWHDS = "N"; /* Do not select new data*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 8) /* Protect/darken map display*/
      set AF0RM001.AF0RMHF1[AFWIDX5] skip, invisible; /* Hist Fut 1*/
      set AF0RM001.AF0RMHF2[AFWIDX5] skip, invisible; /* Hist Fut 2*/
      set AF0RM001.AF0RMHF3[AFWIDX5] skip, invisible; /* Hist Fut 3*/
      set AF0RM001.AF0RMHF4[AFWIDX5] skip, invisible; /* Hist Fut 4*/
      set AF0RM001.AF0RMHPR[AFWIDX5] skip, invisible; /* Hist Prop*/
      set AF0RM001.AF0RMHTL[AFWIDX5] skip, invisible; /* Hist Total*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    set AF0RM001.AF0RMHGT skip, invisible; /* Hist Totalgrand*/
  end


  if (XP1REC.XP1MNO != 0) /* Style/Pct edit errors present*/

    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 8) /* Protect/darken map display*/
      set AF0RM001.AF0RMMTH[AFWIDX5] skip, invisible; /* Month*/
      set AF0RM001.AF0RMCF1[AFWIDX5] skip, invisible; /* Curr Fut 1*/
      set AF0RM001.AF0RMCF2[AFWIDX5] skip, invisible; /* Curr Fut 2*/
      set AF0RM001.AF0RMCF3[AFWIDX5] skip, invisible; /* Curr Fut 3*/
      set AF0RM001.AF0RMCF4[AFWIDX5] skip, invisible; /* Curr Fut 4*/
      set AF0RM001.AF0RMCPR[AFWIDX5] skip, invisible; /* Curr Prop*/
      set AF0RM001.AF0RMCTL[AFWIDX5] skip, invisible; /* Curr Total*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    set AF0RM001.AF0RMCGT skip, invisible; /* Curr Total*/

  end



end // end AF0R151

// Process Valid Request
Function AF0R160()
   /* *======================================**/
   /* *  Check if Loop Control within limit  **/
   /* *======================================**/

  if (AF0RW01.AF0RWLCT > AF0RW01.AF0RWLIM) /* Style ctr loop limit reached*/
    AF0RW01.AF0RWLCT = 0; /* Reset loop ctr*/
  end
   /* *========================**/
   /* * 'PF20' Key Processing  **/
   /* *========================**/


  if (converseVar.eventKey is pf20) /* Copy Historical data to Current data*/

    if (AF0RW03.AF0RWDPI == "Y") /* Historical data available*/

      AFWREC.AFWIDX5 = 1; /* Set loop index*/
      while (AFWREC.AFWIDX5 <= 9) /* Process all months*/

        AF0RW02.AF0RWCF1[AFWIDX5] = AF0RW03.AF0RWHF1[AFWIDX5];
        AF0RW02.AF0RWCF2[AFWIDX5] = AF0RW03.AF0RWHF2[AFWIDX5];
        AF0RW02.AF0RWCF3[AFWIDX5] = AF0RW03.AF0RWHF3[AFWIDX5];
        AF0RW02.AF0RWCF4[AFWIDX5] = AF0RW03.AF0RWHF4[AFWIDX5];
        AF0RW02.AF0RWCPR[AFWIDX5] = AF0RW03.AF0RWHPR[AFWIDX5];
        AF0RW02.AF0RWCTL[AFWIDX5] = AF0RW03.AF0RWHTL[AFWIDX5];

        AF0RW02.AF0RWUPD = "Y"; /* Indicate for update*/
        AF0RW02.AF0RWCHG[AFWIDX5] = "Y"; /* Changes entered*/
        AF0RW01.AF0RWCNF = "N"; /* Reset update conf flag*/

        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/

      end

      AFWREC.AFWPRCSN = "160 "; /* Process number*/
      AFWREC.AFWNMO = 118; /* Indicate pending activity*/
      return; /* Execute next process*/

    else

      AFWREC.AFWPRCSN = "160 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid request*/
      return; /* Exit to redisplay map*/

    end

  end

   /* *==========================**/
   /* *  'ENTER' Key Processing  **/
   /* *==========================**/

  if (converseVar.eventKey is enter /* Enter key pressed*/
   && AF0RW04.AF0RWUFF == "Y")      /* With valid updates*/
    AF0RW02.AF0RWUPD = " "; /* Inactivate update flag*/
    AFWREC.AFWPRCSN = "160 "; /* Process number*/
    AFWREC.AFWNMO = 117; /* Indicate pending activity*/
    return; /* Execute next process*/
  end

  if (converseVar.eventKey is enter /* Enter key pressed*/
   && AF0RW04.AF0RWUFF == "U")      /* With valid updates*/
    AF0R161(); /* Update DACAST.VAFsty01*/
    AF0RW01.AF0RWCNF = "U"; /* Indicate successful update*/
    AF0RW04.AF0RWUFF = " "; /* Reset for update tag*/
    AFWREC.AFWSWR = "Y"; /* Reselect updated record*/
    AFWREC.AFWNMO = 115; /* Indicate successful update*/
    AFWREC.AFWPRCSN = "160 "; /* Process number*/
    return; /* Execute next process*/
  end

  if (converseVar.eventKey is enter) /* enter key pressed*/
    if (AFWREC.AFWSWR == "Y") /* new data requested*/
      AF0RW02.AF0RWUPD = " "; /* Inactivate update flag*/
      return; /* Execute next process*/

    else

      if (AF0RW02.AF0RWUPD == "Y") /* With valid updates*/

        if (AF0RW01.AF0RWHAC == "Y") /* Historical activity pending*/
          AFWREC.AFWPRCSN = "160 "; /* Process number*/
          AFWREC.AFWNMO = 118; /* Indicate pending activity*/
          return; /* Execute next process*/
        end

           /* (Check Curr Pcent Totals)*/

        AFWREC.AFWIDX4 = 1; /* Set Loop index*/
        AF0RW01.AF0RWCPT = 0; /* Reset accumulator*/

        while (AFWREC.AFWIDX4 <= 9) /* Process all months*/
          AF0RW01.AF0RWCPT = AF0RW01.AF0RWCPT + AF0RW02.AF0RWCTL[AFWIDX4];
          AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
        end

        if (AF0RW01.AF0RWCPT == 0) /* No valid updates found*/
          AF0RW01.AF0RWCNF = "N"; /* Reset update confirm ind*/
          AF0RW02.AF0RWUPD = "1"; /* Indicate 1st pass for cond*/
          return; /* Exit to redisplay map*/
        end

                   /* (Update DACAST.VAFPER01)*/

        AF0R161(); /* Update DACAST.VAFPER01*/

        AF0RW01.AF0RWCNF = "U"; /* Indicate successful update*/
        AF0RW02.AF0RWUPD = " "; /* Reset for update tag*/
        AFWREC.AFWSWR = "Y"; /* Reselect updated record*/
        AFWREC.AFWNMO = 116; /* Indicate successful update*/
        AFWREC.AFWPRCSN = "160 "; /* Process number*/

        return; /* Execute next process*/

      end

    end

  end

end // end AF0R160

// Update DACAST.VAFPER01
Function AF0R161()
   /* -----------------------------------------------------------*/
                /* ** Update DACAST.VAFPER01 ***/
   /* Check for change flag. If not active, then return.*/
   /* Check for stored keys. If not present, then create row.*/
     /* If present, then update row.*/
   /* ------------------------------------------------------------*/

   /* *=========================**/
   /* *  Get System Date/Time   **/
   /* *=========================**/

  XX0XS01();



   /* *=========================**/
   /* *  Check for Stored Keys  **/
   /* *=========================**/

  AF0RS02();
  AF0RS03();
  while (SQLCA.VAGen_SQLCODE == 0)
    AF0RS04();
    AF0RS03();
  end

  AF0RS09();



end // end AF0R161

// Select DACAST.VAFSTY01 rows
Function AF0RS02()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AF2REC empty; /* Reset rec work area*/

  if (XP1REC.XDVCD == " ") /* ; XDV cd*/
    AF2REC.XDVCD = "**"; /* XDV cd*/
  else
    AF2REC.XDVCD = XP1REC.XDVCD; /* XDV cd*/
  end


  if (XP1REC.XPRCD == " ") /* ; XPR cd*/
    AF2REC.XPRCD = "**"; /* XPR cd*/
  else
    AF2REC.XPRCD = XP1REC.XPRCD; /* XPR cd*/
  end

  if (XP1REC.XGACD == " ") /* ; XGA cd*/
    AF2REC.XGACD = "**"; /* XGA cd*/
  else
    AF2REC.XGACD = XP1REC.XGACD; /* XGA cd*/
  end

  if (XP1REC.XPLCD == " ") /* ; XPL cd*/
    AF2REC.XPLCD = "**"; /* XPL cd*/
  else
    AF2REC.XPLCD = XP1REC.XPLCD; /* XPL cd*/
  end

  if (XP1REC.XPCCD == " ") /* ; XPC cd*/
    AF2REC.XPCCD = "**"; /* XPC cd*/
  else
    AF2REC.XPCCD = XP1REC.XPCCD; /* XPC cd*/
  end

  if (XP1REC.XSUCD == " ") /* XSU cd*/
    AF2REC.XSUCD = "**"; /* XSU cd*/
  else
    AF2REC.XSUCD = XP1REC.XSUCD; /* XSU cd*/
  end

  if (XP1REC.XOWCD == " ") /* XOW cd*/
    AF2REC.XOWCD = "**"; /* XOW cd*/
  else
    AF2REC.XOWCD = XP1REC.XOWCD; /* XOW cd*/
  end

  AF2REC.SY1STNBR = "**"; /* Style no.*/
  AF2REC.SY4SZSCL = "**"; /* Size scale cd*/
  AF2REC.AF2FSTST = "*"; /* Forecast status*/

  if (XP1REC.XXXUSER == " ") /* No user specified*/
    AF2REC.PG1FCTCD = "**"; /* Get all users*/
  else
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
  end

  AF0RW01.AF0RWXSY = 0; /* Reset xsnyr wk area*/
  AF0RW01.AF0RWXSY = XP1REC.XSNYR; /* Move to wk area*/
  AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* Add century*/
  AF2REC.XSNYR = AF0RW01.AF0RWXSY; /* XSE yr*/

  AF2REC.XSECD = XP1REC.XSECD; /* XSE cd*/



   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFSTY01  **/
   /* *====================================**/

  try
    call "IO3510" ("S3", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS02

// Process DACAST.VAFSTY01 rows
Function AF0RS03()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until the next style to*/
     /* be processed is retrieved (current style + 1). If done*/
     /* for the first time after a new select has been made, it*/
     /* will retrieve the first style in the set --*/
     /* (current style + 0).*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO3510" ("N3", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
   /* If call sucessful, store style/size data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

                   /* (Check Loop Ctr Value)*/

    AF0RW01.AF0RWLCT = AF0RW01.AF0RWLCT + 1; /* Add to style ctr*/

    if (AF0RW01.AF0RWLCT > AF0RW01.AF0RWLIM) /* Loop limit exceeded*/
      converseLib.validationFailed(44); /* Indicate loop exceeded*/
      AFWREC.AFWIDX5 = +9999; /* Force loop termination.*/
      return; /* Exit to display map*/
    end

                   /* (Loop Ctr Within Limits)*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      /* *******************************************************/

      /* ------------------------------------------------------------*/
       /* Whenever a size row is successfully retrieved, it undergoes*/
         /* two qualification processes to determine suitablity for*/
         /* processing. The first process relates the row to selec-*/
         /* tion criteria data, and the second process determines if*/
         /* the style entered has been processed (in the case of*/
         /* multiple-row styles).*/
      /* ------------------------------------------------------------*/

      if (XP1REC.PG1FCTCD == " " /* Get all forecasters*/
       || AF2REC.PG1FCTCD == XP1REC.PG1FCTCD) /* Check forecaster cd*/
                    /* (Qualification Process 1)*/
        AF0RW01.AF0RWXST = "Y"; /* Row qualified*/


        return;
      end
    else
      return;
    end
  end



   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S03 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS03

// Store Style/Pct  data
Function AF0RS04()
   /* ------------------------------------------------------------*/
        /* ** Store DACAST.VAFSTY01/VAFPER01 Data ***/
   /* Save default data.*/
   /* Get style short name.*/
   /* Obtain all DACAST.VAFPER01 rows for the style.*/
   /* Save all non-update items into program wk array.*/
   /* Store all pcts  into program wk array for display and*/
     /* possible update.*/
   /* ------------------------------------------------------------*/



   /* *=====================**/
   /* *  Save Default Data  **/
   /* *=====================**/
    /* -- These data will be utilized as parts of the record key*/
       /* in case new DACAST.VAFPER01 records need to be created.*/

  AF0RW02.AF0RWDST = AF2REC.SY1STNBR; /* To save area*/
  AF0RW02.AF0RWDDM = AF2REC.XDMCD; /* To save area*/
  AF0RW02.AF0RWDDV = AF2REC.XDVCD; /* To save area*/
  AF0RW02.AF0RWDOG = AF2REC.XOWCD; /* To save area*/

   /* *========================**/
   /* *  Get Style Short Name  **/
   /* *========================**/

  AF0RW01.AF0RWVST = " "; /* Reset valid style indicator*/

  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  XP1REC.SY1STNBR = AF2REC.SY1STNBR; /* Save Style no.*/
  PG2REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0RS04"; /* Process name*/

  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
    XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* Save style name*/
    XP1REC.SY2CLRID = PG2REC.SY2CLRID; /* Save color cd*/
  else
    AFWREC.AFWPRCSN = "S04 "; /* Process number*/
    AFWREC.AFWNMO = 33; /* Indicate error message*/
    AF0RW01.AF0RWVST = "N"; /* Indicate style not found*/
    XP1REC.SY1SSTNM = " "; /* Space out style name*/
    XP1REC.SY2CLRID = " "; /* Space out color cd*/
  end

   /* *===============================**/
   /* *  Test for & update vafsty01   **/
   /* *===============================**/

  if (AF0RW04.AF0RWVFL == "Y"
   || AF0RW04.AF0RWVFL == "N")
    AF0RS44();
    return;
  end
   /* *===============================**/
   /* *  Obtain DACAST.VAFPER01 Data  **/
   /* *===============================**/

  AF0RS05(); /* Select from DACAST.VAFPER01*/

   /* *================================**/
   /* *  Process DACAST.VAFPER01 Data  **/
   /* *================================**/

  if (converseVar.validationMsgNum == 0) /* No errors detected*/

    AF0RW01.AF0RWUPT = " ";
    AF0RW01.AF0RWPSD = " "; /* Reset eof indicator*/
    while (AF0RW01.AF0RWPSD == " ") /* Process all records*/
      AF0RS06(); /* Process DACAST.VAFPER01 rows*/
    end

    if (converseVar.validationMsgNum == 0) /* No errors detected*/
      AF0RS08(); /* Close DACAST.VAFPER01 cursor*/
    end

    if (AF0RW01.AF0RWUPT == "Y")

   /* ============================================ **/
   /* = insert rows that do not exist in afper01 = **/
   /* ============================================ **/
      AFWREC.AFWIDX1 = 1;
      while (AFWREC.AFWIDX1 <= AF0RW01.AF0RW-LATE-IDX)
        if (AF0RW02.AF0RWRKY[AFWIDX1] == " ")
          AF0RS42();
        end
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
      end
    end
  end

  AFWREC.AFWIDX1 = 1;
  while (AFWREC.AFWIDX1 <= 9)
    AF0RW02.AF0RWRKY[AFWIDX1] = " ";
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
  end



end // end AF0RS04

// Select DACAST.VAFPER01 rows
Function AF0RS05()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/



   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AF3REC empty; /* Reset rec work area*/

  AF3REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no. key*/
  AF3REC.XDMCD = AF2REC.XDMCD; /* Dimension cd key*/
  AF3REC.XDVCD = AF2REC.XDVCD; /* Division cd key*/
  AF3REC.XSECD = AF2REC.XSECD; /* Season cd key*/
  AF3REC.XSNYR = AF2REC.XSNYR; /* Season yr key*/
  AF3REC.XOWCD = AF2REC.XOWCD; /* Owner Group Cd*/



   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFPER01  **/
   /* *====================================**/

  try
    call "IO3530" ("SS", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS05

// Process DACAST.VAFPER01 rows
Function AF0RS06()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* For all rows retrieved, store data into program arrays.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO3530" ("SN", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
   /* If call sucessful, store style/size data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      AF0RS07(); /* Store DACAST.VAFPER01 data*/
      AF0RS43(); /* updateDACAST.VAFPER01 data*/

      return; /* Loop through*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/

        AF0RW01.AF0RWPSD = "Y"; /* Force loop termination.*/

        return; /* Return to calling process*/

      end

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS06

// Store DACAST.VAFPER01 data
Function AF0RS07()
   /* ------------------------------------------------------------*/
        /* ** Store DACAST.VAFPER01 Data ***/
   /* Save all non-update items into program wk array.*/
   /* Store all pcts  into program wk array for display and*/
     /* possible update.*/
   /* ------------------------------------------------------------*/


   /* *=========================**/
   /* *  Obtain Store Pointer   **/
   /* *=========================**/

  if (AF3REC.AFBNDTPR in AF0RW-AFMO-TBLE) /* need date in tble?*/
    AFWREC.AFWIDX1 = sysVar.arrayIndex; /* Need Month wk index*/
  end

   /* *==========================**/
   /* *  Store Non-Update Items  **/
   /* *==========================**/

  AF0RW02.AF0RWRKY[AFWIDX1] = "Y"; /* Indicate valid record key*/
  AF0RW02.AF0RWRKS[AFWIDX1] = AF3REC.SY1STNBR; /* Save Style key*/
  AF0RW02.AF0RWRKM[AFWIDX1] = AF3REC.XDMCD; /* Save XDMCD key*/
  AF0RW02.AF0RWRKV[AFWIDX1] = AF3REC.XDVCD; /* Save XDVCD key*/
  AF0RW02.AF0RWRKE[AFWIDX1] = AF3REC.XSECD; /* Save XSECD key*/
  AF0RW02.AF0RWRKR[AFWIDX1] = AF3REC.XSNYR; /* Save XSNYR key*/
  AF0RW02.AF0RWRKO[AFWIDX1] = AF3REC.XOWCD; /* Save XOWCD key*/
  AF0RW02.AF0RWRKA[AFWIDX1] = AF3REC.AFBNDTPR; /* Save AFBNDTPR key*/
  AF0RW02.AF0RWBKP[AFWIDX1] = AF3REC.AF3BKPRM; /* Save Book pd mult*/
  AF0RW02.AF0RWCCT[AFWIDX1] = AF3REC.ZZZCHGCT; /* Save Change count*/


  AF0RW02.AF0RWCW1[AFWIDX1] = AF3REC.AF3MDMDP[1]; /* Alt Curr Fut 1*/
  AF0RW02.AF0RWCW2[AFWIDX1] = AF3REC.AF3MDMDP[2]; /* Alt Curr Fut 2*/
  AF0RW02.AF0RWCW3[AFWIDX1] = AF3REC.AF3MDMDP[3]; /* Alt Curr Fut 3*/
  AF0RW02.AF0RWCW4[AFWIDX1] = AF3REC.AF3MDMDP[4]; /* Alt Curr Fut 4*/
  AF0RW02.AF0RWCW5[AFWIDX1] = AF3REC.AF3MDMDP[5]; /* Alt Curr Fut 5*/

  AF0RW01.AF0RWTPC = 0; /* Initialize Pcent wk total*/
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF1[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF2[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF3[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF4[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCPR[AFWIDX1];

  AF0RW02.AF0RWCTL[AFWIDX1] = AF0RW01.AF0RWTPC; /* Save Pcent tot*/

  AF0RW01.AF0RWTPC = 0; /* Initialize Pcent wk total*/
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCW1[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCW2[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCW3[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCW4[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCW5[AFWIDX1];

  AF0RW02.AF0RWCTW[AFWIDX1] = AF0RW01.AF0RWTPC; /* Save Alt Pcent tot*/



end // end AF0RS07

// Close DACAST.VAFPER01 cursor
Function AF0RS08()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3530" ("CS", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S08 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS08

// Close DACAST.VAFSTY01 cursor
Function AF0RS09()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3510" ("C3", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS09

// Process Historical Summary DB
Function AF0RS11()
   /* ------------------------------------------------------------*/
             /* ** Obtain DACAST.VDMANZ01 Rows ***/
   /* Set Select Historical Summary DB (DACAST.VDMANZ01) rows.*/
   /* If valid selection fields found  (Maximum 3 categories and*/
     /* and 2 selections)  Then:*/
    /* - Process all rows selected; Store all row data into map*/
      /* page/s for display.*/
    /* - Close DB cursor.*/
   /* Otherwise return to calling process.*/
   /* ------------------------------------------------------------*/


   /* *======================================**/
   /* *  Set Select Historical Summary Rows  **/
   /* *======================================**/

  AF0RW01.AF0RWVLF = " "; /* Reset valid select indicator*/

  AF0RS12(); /* Set Select DACAST.VDMANZ01 rows*/


   /* *===================================**/
   /* *  Process Historical Summary Rows  **/
   /* *===================================**/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    if (AF0RW01.AF0RWVLF == "1" /* Valid select fields found*/
     || AF0RW01.AF0RWVLF == "2") /* Valid select fields found*/

      AFWREC.AFWSWC = " "; /* Reset EOF switch*/
      while (AFWREC.AFWSWC != "Y") /* Process all retrieved rows*/
        AF0RS13(); /* Process Hist Summary data*/
      end

      if (converseVar.validationMsgNum == 0) /* No errors found*/
        AF0RS14(); /* Close DACAST.VDMANZ01 cursor*/
      end

    end

  end



end // end AF0RS11

// Select Set Hist Summary DB
Function AF0RS12()
   /* ------------------------------------------------------------*/
            /* ** Obtain DACAST.VDMANZ01 ***/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AFHREC empty; /* Reset rec work area*/

  AFHREC.XDVCD = AF0RW01.AF0RWHDV; /* XDV cd*/
  AFHREC.XPRCD = AF0RW01.AF0RWHPT; /* XPR cd*/
  AFHREC.XGACD = AF0RW01.AF0RWHGC; /* Gender/Age cd*/
  AFHREC.XPLCD = AF0RW01.AF0RWHPL; /* PL cd*/

  if (AF0RW01.AF0RWHOG != " ") /* No Owner Group Selected*/
    AFHREC.XOWCD = AF0RW01.AF0RWHOG;
  else
    AFHREC.XOWCD = "**";
  end

  if (AF0RW01.AF0RWHCC[AFWIDX1] != " ") /* Valid Category cd*/
    AFHREC.XPCCD = AF0RW01.AF0RWHCC[AFWIDX1]; /* Use as key*/
  else
    AF0RW01.AF0RWVLF = "N"; /* Indicate invalid sel field*/
    return; /* Return to calling process*/
  end

  AFHREC.XSUCD = AF0RW01.AF0RWHSC; /* Silhouette cd*/
  AFHREC.SY4SZSCL = "**"; /* Size scale cd*/


  if (AFWREC.AFWIDX2 == 1) /* First selection in map*/
           /* (Reformat As-Of-Date to Internal Date)*/
    AF0RW01.AF0RWEDW = AF0RW01.AF0RWHD1; /* To ext wk dt area*/
    AF0RW01.AF0RWDTC = 019; /* To int wk Century*/
    AF0RW01.AF0RWDTM = AF0RW01.AF0RWEDM; /* To int wk mm*/
    AF0RW01.AF0RWDTD = AF0RW01.AF0RWEDD; /* To int wk dd*/
    AF0RW01.AF0RWDTY = AF0RW01.AF0RWEDY; /* To int wk yy*/
    AFHREC.AFFASODT = AF0RW01.AF0RWDTW; /* As of date*/

    AFHREC.XSECD = AF0RW01.AF0RWHS1; /* Season cd*/
                 /* (Reformat Season Year)*/
    AF0RW01.AF0RWXSY = 0; /* Reset xsnyr wk area*/
    AF0RW01.AF0RWXSY = AF0RW01.AF0RWHY1; /* Season yr*/
    AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* Add century*/
    AFHREC.XSNYR = AF0RW01.AF0RWXSY; /* Season yr*/

    AF0RW01.AF0RWVLF = "1"; /* Indicate sel fld*/

  else
    if (AF0RW01.AF0RWHD2 != 0   /* Valid as of date*/
     && AF0RW01.AF0RWHS2 != " " /* Valid season cd*/
     && AF0RW01.AF0RWHY2 != 0)  /* Valid season yr*/
             /* (Reformat as-of-date to internal date)*/
      AF0RW01.AF0RWEDW = AF0RW01.AF0RWHD2; /* To ext wk dt area*/
      AF0RW01.AF0RWDTC = 019; /* To int wk Century*/
      AF0RW01.AF0RWDTM = AF0RW01.AF0RWEDM; /* To int wk mm*/
      AF0RW01.AF0RWDTD = AF0RW01.AF0RWEDD; /* To int wk dd*/
      AF0RW01.AF0RWDTY = AF0RW01.AF0RWEDY; /* To int wk yy*/
      AFHREC.AFFASODT = AF0RW01.AF0RWDTW; /* As of date*/

      AFHREC.XSECD = AF0RW01.AF0RWHS2; /* Season cd*/
                   /* (Reformat Season Year)*/
      AF0RW01.AF0RWXSY = 0; /* Reset xsnyr wk area*/
      AF0RW01.AF0RWXSY = AF0RW01.AF0RWHY2; /* Season yr*/
      AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* Add century*/
      AFHREC.XSNYR = AF0RW01.AF0RWXSY; /* Season yr*/

      AF0RW01.AF0RWVLF = "2"; /* Indicate sel fld*/

    else

      AF0RW01.AF0RWVLF = "N"; /* Indicate invalid sel fld*/
      return; /* Return to calling process*/

    end

  end


   /* *====================================**/
   /* *  Obtain Data from DACAST.VDMANZ01  **/
   /* *====================================**/

  try
    call "IO4210" ("S1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AF0RW01.AF0RWVLF = "N"; /* Indicate invalid cat cd*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S12 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS12

// Process Hist Summary rows
Function AF0RS13()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* Store Historical Summary data, Using the Order Need Month*/
     /* as store pointer. Accumulate all qtys retrieved.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO4210" ("N1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
   /* If call successful, store historical summary data*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      AF0RW03.AF0RWDPI = "Y"; /* Indicate data processed for select*/

      if (AFWREC.AFWIDX2 == 1)
        if (AFHREC.AFBNDTPR in AF0RW01.AF0RW-HIST-XSN1)
          AFWREC.AFWIDX5 = sysVar.arrayIndex;
        else
          if (AFHREC.AFBNDTPR < AF0RW01.AF0RW-HIST-XSN1[2])
            AFWREC.AFWIDX5 = 1;
          else
            AFWREC.AFWIDX5 = AF0RW01.AF0RW-LATE-IDX;
          end
        end
      else
        if (AFHREC.AFBNDTPR in AF0RW01.AF0RW-HIST-XSN1)
          AFWREC.AFWIDX5 = sysVar.arrayIndex;
        else
          if (AFHREC.AFBNDTPR < AF0RW01.AF0RW-HIST-XSN1[2])
            AFWREC.AFWIDX5 = 1;
          else
            AFWREC.AFWIDX5 = AF0RW01.AF0RW-LATE-IDX;
          end
        end
      end

      AF0RW03.AF0RWHB1[AFWIDX5] = AF0RW03.AF0RWHB1[AFWIDX5] +       AFHREC.AFGSOT1Q;
      AF0RW03.AF0RWHB2[AFWIDX5] = AF0RW03.AF0RWHB2[AFWIDX5] +       AFHREC.AFGSOT2Q;
      AF0RW03.AF0RWHB3[AFWIDX5] = AF0RW03.AF0RWHB3[AFWIDX5] +       AFHREC.AFGSOT3Q;
      AF0RW03.AF0RWHB4[AFWIDX5] = AF0RW03.AF0RWHB4[AFWIDX5] +       AFHREC.AFGSOT4Q;
      AF0RW03.AF0RWHB5[AFWIDX5] = AF0RW03.AF0RWHB5[AFWIDX5] +       AFHREC.AFGSOT5Q;

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/
    end


  end



   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWSWC = "Y"; /* Force end of data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S13 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS13

// Close Hist Summary cursor
Function AF0RS14()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4210" ("C1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS14

// Process Historical Detail DB
Function AF0RS15()
   /* ------------------------------------------------------------*/
             /* ** Obtain DACAST.VDMANY01 Rows ***/
   /* Set Select Historical Detail DB (DACAST.VDMANY01) rows.*/
   /* If valid selection fields found  (Maximum 3 categories and*/
     /* and 2 selections)  Then:*/
    /* - Process all rows selected; Store all row data into map*/
      /* page/s for display.*/
    /* - Close DB cursor.*/
   /* Otherwise return to calling process.*/
   /* ------------------------------------------------------------*/


   /* *=====================================**/
   /* *  Set Select Historical Detail Rows  **/
   /* *=====================================**/

  AF0RW01.AF0RWVLF = " "; /* Reset valid select indicator*/

  AF0RS16(); /* Set Select DACAST.VDMANY01 rows*/


   /* *==================================**/
   /* *  Process Historical Detail Rows  **/
   /* *==================================**/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    if (AF0RW01.AF0RWVLF == "1" /* Valid select fields found*/
     || AF0RW01.AF0RWVLF == "2") /* Valid select fields found*/

      AFWREC.AFWSWC = " "; /* Reset EOF switch*/
      while (AFWREC.AFWSWC != "Y") /* Process all retrieved rows*/
        AF0RS17(); /* Process Hist Detail data*/
      end

      if (converseVar.validationMsgNum == 0) /* No errors found*/
        AF0RS18(); /* Close DACAST.VDMANY01 cursor*/
      end

    end

  end



end // end AF0RS15

// Select Set Hist Detail DB
Function AF0RS16()
   /* ------------------------------------------------------------*/
            /* ** Obtain DACAST.VDMANY01 ***/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AFGREC empty; /* Reset rec work area*/

  AFGREC.SY1STNBR = AF0RW01.AF0RWHST; /* Style as key*/

  if (AFWREC.AFWIDX2 == 1) /* First selection in map*/
             /* (Reformat As-of-Date to Internal Date)*/
    AF0RW01.AF0RWEDW = AF0RW01.AF0RWHD1; /* To ext date wk*/
    AF0RW01.AF0RWDTC = 019; /* To int date wk century*/
    AF0RW01.AF0RWDTM = AF0RW01.AF0RWEDM; /* To int date wk mm*/
    AF0RW01.AF0RWDTD = AF0RW01.AF0RWEDD; /* To int date wk dd*/
    AF0RW01.AF0RWDTY = AF0RW01.AF0RWEDY; /* To int date wk yy*/
    AFGREC.AFFASODT = AF0RW01.AF0RWDTW; /* As of date*/

    AFGREC.XSECD = AF0RW01.AF0RWHS1; /* Season cd*/
                   /* (Reformat Season Year)*/
    AF0RW01.AF0RWXSY = 0; /* Reset wk area*/
    AF0RW01.AF0RWXSY = AF0RW01.AF0RWHY1; /* To XSNYR wk area*/
    AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* Add century*/
    AFGREC.XSNYR = AF0RW01.AF0RWXSY; /* Season yr*/

    AF0RW01.AF0RWVLF = "1"; /* Indicate sel fld*/

  else

    if (AF0RW01.AF0RWHD2 != 0   /* Valid as of date*/
     && AF0RW01.AF0RWHS2 != " " /* Valid season cd*/
     && AF0RW01.AF0RWHY2 != 0)  /* Valid season yr*/
               /* (Reformat As-of-Date to Internal Date)*/
      AF0RW01.AF0RWEDW = AF0RW01.AF0RWHD2; /* To ext date wk*/
      AF0RW01.AF0RWDTC = 019; /* To int date wk century*/
      AF0RW01.AF0RWDTM = AF0RW01.AF0RWEDM; /* To int date wk mm*/
      AF0RW01.AF0RWDTD = AF0RW01.AF0RWEDD; /* To int date wk dd*/
      AF0RW01.AF0RWDTY = AF0RW01.AF0RWEDY; /* To int date wk yy*/
      AFGREC.AFFASODT = AF0RW01.AF0RWDTW; /* As of date*/

      AFGREC.XSECD = AF0RW01.AF0RWHS2; /* Season cd*/
                     /* (Reformat Season Year)*/
      AF0RW01.AF0RWXSY = 0; /* Reset wk area*/
      AF0RW01.AF0RWXSY = AF0RW01.AF0RWHY2; /* To XSNYR wk area*/
      AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* Add century*/
      AFGREC.XSNYR = AF0RW01.AF0RWXSY; /* Season yr*/

      AF0RW01.AF0RWVLF = "2"; /* Indicate sel fld*/

    else

      AF0RW01.AF0RWVLF = "N"; /* Indicate invalid sel fld*/
      return; /* Return to calling process*/

    end

  end


   /* *====================================**/
   /* *  Obtain Data from DACAST.VDMANY01  **/
   /* *====================================**/

  try
    call "IO4200" ("S1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AF0RW01.AF0RWVLF = "N"; /* Indicate invalid cat cd*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S16 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS16

// Process Hist Detail rows
Function AF0RS17()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* Store Historical Detail data; Use Order Need Month as store*/
     /* pointer. Accumulate all qtys retrieved.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO4200" ("N1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
   /* If call successful, store historical summary data*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      AF0RW03.AF0RWDPI = "Y"; /* Indicate w/ data for select*/

      AFWREC.AFWIDX3 = 1; /* Reset Size/Qty index*/

      AF0RW03.AF0RWTF1 = 0; /* Reset wk accumulator 1*/
      AF0RW03.AF0RWTF2 = 0; /* Reset wk accumulator 2*/
      AF0RW03.AF0RWTF3 = 0; /* Reset wk accumulator 3*/
      AF0RW03.AF0RWTF4 = 0; /* Reset wk accumulator 4*/
      AF0RW03.AF0RWTF5 = 0; /* Reset wk accumulator 5*/

      while (AFWREC.AFWIDX3 <= 10) /* Process all sizes/qtys*/

        AF0RW03.AF0RWTF1 = AF0RW03.AF0RWTF1 + AFGREC.AFGSOT1Q[AFWIDX3];
        AF0RW03.AF0RWTF2 = AF0RW03.AF0RWTF2 + AFGREC.AFGSOT2Q[AFWIDX3];
        AF0RW03.AF0RWTF3 = AF0RW03.AF0RWTF3 + AFGREC.AFGSOT3Q[AFWIDX3];
        AF0RW03.AF0RWTF4 = AF0RW03.AF0RWTF4 + AFGREC.AFGSOT4Q[AFWIDX3];
        AF0RW03.AF0RWTF5 = AF0RW03.AF0RWTF5 + AFGREC.AFGSOT5Q[AFWIDX3];

        AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* Loop through*/

      end

      if (AFWREC.AFWIDX2 == 1)
        if (AFHREC.AFBNDTPR in AF0RW01.AF0RW-HIST-XSN1)
          AFWREC.AFWIDX5 = sysVar.arrayIndex;
        else
          if (AFHREC.AFBNDTPR < AF0RW01.AF0RW-HIST-XSN1[2])
            AFWREC.AFWIDX5 = 1;
          else
            AFWREC.AFWIDX5 = AF0RW01.AF0RW-LATE-IDX;
          end
        end
      else
        if (AFHREC.AFBNDTPR in AF0RW01.AF0RW-HIST-XSN1)
          AFWREC.AFWIDX5 = sysVar.arrayIndex;
        else
          if (AFHREC.AFBNDTPR < AF0RW01.AF0RW-HIST-XSN1[2])
            AFWREC.AFWIDX5 = 1;
          else
            AFWREC.AFWIDX5 = AF0RW01.AF0RW-LATE-IDX;
          end
        end
      end

      AF0RW03.AF0RWHB1[AFWIDX5] = AF0RW03.AF0RWHB1[AFWIDX5] +       AF0RW03.AF0RWTF1;
      AF0RW03.AF0RWHB2[AFWIDX5] = AF0RW03.AF0RWHB2[AFWIDX5] +       AF0RW03.AF0RWTF2;
      AF0RW03.AF0RWHB3[AFWIDX5] = AF0RW03.AF0RWHB3[AFWIDX5] +       AF0RW03.AF0RWTF3;
      AF0RW03.AF0RWHB4[AFWIDX5] = AF0RW03.AF0RWHB4[AFWIDX5] +       AF0RW03.AF0RWTF4;
      AF0RW03.AF0RWHB5[AFWIDX5] = AF0RW03.AF0RWHB5[AFWIDX5] +       AF0RW03.AF0RWTF5;

      return; /* Return to calling process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/
    end


  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWSWC = "Y"; /* Force end of data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S17 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS17

// Close Hist Detail cursor
Function AF0RS18()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4200" ("C1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S18 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS18

// Obtain As-of-Date XREF record
Function AF0RS19()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select unique' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4190" ("S ", SQLCA, AFFREC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and XREF record found*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S19 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANX01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS19

// Edit historical as-of-date 2
Function AF0RS20()
  if (AF0RM001.AF0RMHD2 == " ") /* As-of-date fld spaces*/
    AF0RW01.AF0RWDX2 = " "; /* Space out alpha wk fld*/
    AF0RW01.AF0RWHD2 = 0; /* Zero out num wk fld*/
    return; /* Return to calling process*/
  end


  AF0RW01.AF0RWSSE = AF0RM001.AF0RMHS2; /* Move season cd wk fld*/
  AF0RW01.AF0RWSSY = AF0RM001.AF0RMHY2; /* Move season yr wk fld*/
  AF0RW01.AF0RWSAS = AF0RM001.AF0RMHD2; /* Move as-of-date wk fld*/
  AF0RW01.AF0RWDX2 = AF0RM001.AF0RMHD2; /* Move as-of-date wk fld*/

  AF0RW01.AF0RWVLF = " "; /* Reset validation ind*/


  AF0RS21(); /* Edit Historical as-of-date*/


  if (AF0RW01.AF0RWVLF == " ") /* As-of-date found*/
                  /* (Field is valid)*/
    AF0RW01.AF0RWHD2 = TA2REC.TA2GRGA; /* Save to wk fld*/

  else
                  /* (Field in error)*/
    AF0RW01.AF0RWHD2 = 0; /* Zero out num wk fld*/
    AFWREC.AFWPRCSN = "S20 "; /* Process number*/
    set AF0RM001.AF0RMHD2 cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 47; /* Indicate error message*/

  end



end // end AF0RS20

// Check as-of-date in XREF file
Function AF0RS21()

   /* ------------------------------------------------------------*/
     /* check valid end date entered*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGA = AF0RW01.AF0RWSAS; /* To ext date wk area*/

  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD != 0) /* invalid date entered*/
    AF0RW01.AF0RWVLF = "E"; /* Indicate invalid date*/
    return; /* Return to calling process*/
  end



   /* ------------------------------------------------------------*/
    /* if date valid, check DACAST.VDMANX01 db for valid match*/
   /* ------------------------------------------------------------*/

           /* (Reformat As-of-Date to Internal Date)*/
  AF0RW01.AF0RWEDW = TA2REC.TA2GRGA; /* To ext date wk area*/
  AF0RW01.AF0RWDTC = 019; /* To int date century*/
  AF0RW01.AF0RWDTM = AF0RW01.AF0RWEDM; /* To int date mm*/
  AF0RW01.AF0RWDTD = AF0RW01.AF0RWEDD; /* To int date dd*/
  AF0RW01.AF0RWDTY = AF0RW01.AF0RWEDY; /* To int date yy*/

                 /* (Reformat Season Year)*/
  AF0RW01.AF0RWXSY = 0; /* Reset XSNYR wk area*/
  AF0RW01.AF0RWXSY = AF0RW01.AF0RWSSY; /* Move to wk area*/
  AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* Add century*/


  AFWREC.AFWIDX2 = 1; /* Reset loop index*/

  while (AFWREC.AFWIDX2 <= 35) /* Process all as-of-dates*/

    if (AFFREC.XSECD[AFWIDX2] == AF0RW01.AF0RWSSE /* Season cd*/
     && AFFREC.XSNYR[AFWIDX2] == AF0RW01.AF0RWXSY /* Season yr*/
     && AFFREC.AFFASODT[AFWIDX2] == AF0RW01.AF0RWDTW) /* as-of-date*/
      return; /* Return to calling process*/
    end

    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/

  end

  AF0RW01.AF0RWVLF = "E"; /* As-of-date not found*/



end // end AF0RS21

// Edit historical season yr 2
Function AF0RS22()
  if (AF0RM001.AF0RMHY2 == 0) /* Historical season yr zeroes*/
    AF0RW01.AF0RWHY2 = 0; /* move to wk storage*/
    return; /* Return to calling process*/
  end

  AF0RW01.AF0RWHY2 = AF0RM001.AF0RMHY2; /* save to wk storage*/

  AF0RW01.AF0RWXSY = 0; /* initialize xsnyr wk area*/
  AF0RW01.AF0RWXSY = AF0RM001.AF0RMHY2; /* move to wk area*/
  AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* move century*/


  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0RW01.AF0RWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S22 "; /* Process number*/
  set AF0RM001.AF0RMHY2 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/

end // end AF0RS22

// Edit historical season cd 2
Function AF0RS23()
  if (AF0RM001.AF0RMHS2 == " ") /* Season cd spaces*/
    AF0RW01.AF0RWHS2 = " "; /* save to wk storage*/
    return;
  end

  AF0RW01.AF0RWHS2 = AF0RM001.AF0RMHS2; /* save to wk storage*/

  if (AF0RM001.AF0RMHS2 in XSETBL.XSECD)
                     /* (field is valid)*/

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S23 "; /* Process number*/
    set AF0RM001.AF0RMHS2 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    return; /* return to calling process*/

  end

  AF0RW01.AF0RWXSS = AF0RM001.AF0RMHS2; /* To XSECD wk area*/
  AF0RW01.AF0RWXYR = AF0RM001.AF0RMHY2; /* Format wk area*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0RW01.AF0RWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      AF0RW01.AF0RW-HIST-BDT2 = YSNTBL.XSN-SESN-BDT[AFWIDX5];
      AF0RW01.AF0RW-HIST-XDT2 = YSNTBL.XSN-SESN-XDT[AFWIDX5];
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S23 "; /* Process number*/
  set AF0RM001.AF0RMHY2 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
end // end AF0RS23

// Edit historical as-of-date 1
Function AF0RS24()
  if (AF0RM001.AF0RMHD1 == " ") /* As-of-date spaces*/
    AF0RW01.AF0RWDX1 = " "; /* Space out alpha wk fld*/
    AF0RW01.AF0RWHD1 = 0; /* Zero out num wk fld*/
    return; /* Return to calling process*/
  end


  AF0RW01.AF0RWSSE = AF0RM001.AF0RMHS1; /* Move season cd wk fld*/
  AF0RW01.AF0RWSSY = AF0RM001.AF0RMHY1; /* Move season yr wk fld*/
  AF0RW01.AF0RWSAS = AF0RM001.AF0RMHD1; /* Move as-of-date wk fld*/
  AF0RW01.AF0RWDX1 = AF0RM001.AF0RMHD1; /* Save to wk fld*/

  AF0RW01.AF0RWVLF = " "; /* Reset validation ind*/


  AF0RS21(); /* Edit Historical as-of-date*/


  if (AF0RW01.AF0RWVLF == " ") /* As-of-date found*/
                  /* (Field is valid)*/
    AF0RW01.AF0RWHD1 = TA2REC.TA2GRGA; /* Save to wk fld*/

  else
                  /* (Field in error)*/
    AF0RW01.AF0RWHD1 = 0; /* Zero out num wk fld*/
    AFWREC.AFWPRCSN = "S24 "; /* Process number*/
    set AF0RM001.AF0RMHD1 cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 47; /* Indicate error message*/

  end



end // end AF0RS24

// Edit historical season yr 1
Function AF0RS25()
  if (AF0RM001.AF0RMHY1 == 0) /* Season yr eq zeroes*/
    AF0RW01.AF0RWHY1 = 0; /* save to wk storage*/
    return; /* Return to calling process*/
  end

  AF0RW01.AF0RWHY1 = AF0RM001.AF0RMHY1; /* save to wk storage*/

  AF0RW01.AF0RWXSY = 0; /* initialize xsnyr wk area*/
  AF0RW01.AF0RWXSY = AF0RM001.AF0RMHY1; /* move to wk area*/
  AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* move century*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0RW01.AF0RWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S25 "; /* Process number*/
  set AF0RM001.AF0RMHY1 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/

end // end AF0RS25

// Edit historical season cd 1
Function AF0RS26()
  if (AF0RM001.AF0RMHS1 == " ") /* Season cd spaces*/
    AF0RW01.AF0RWHS1 = " "; /* save to wk storage*/
    return; /* REturn to calling process*/
  end

  AF0RW01.AF0RWHS1 = AF0RM001.AF0RMHS1; /* save to wk storage*/

  if (AF0RM001.AF0RMHS1 in XSETBL.XSECD)
                     /* (field is valid)*/
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S26 "; /* Process number*/
    set AF0RM001.AF0RMHS1 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    return; /* return to calling process*/

  end

  AF0RW01.AF0RWXSS = " "; /* Initialize wk area*/
  AF0RW01.AF0RWXYR = +0; /* Initialize wk area*/

  AF0RW01.AF0RWXSS = AF0RM001.AF0RMHS1; /* To XSECD wk area*/
  AF0RW01.AF0RWXYR = AF0RM001.AF0RMHY1; /* Format wk area*/


  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0RW01.AF0RWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      AF0RW01.AF0RW-HIST-BDT2 = YSNTBL.XSN-SESN-BDT[AFWIDX5];
      AF0RW01.AF0RW-HIST-XDT2 = YSNTBL.XSN-SESN-XDT[AFWIDX5];
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S26 "; /* Process number*/
  set AF0RM001.AF0RMHY1 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
end // end AF0RS26

// Edit historical style no.
Function AF0RS27()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'XSPG201' call.*/
   /* If not found, indicate an edit error.*/
   /* ------------------------------------------------------------*/



   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/

  if (AF0RM001.AF0RMSTY == " ") /* Style = spaces*/
    AF0RW01.AF0RWHST = " "; /* Space out alt style wk*/
    return; /* Exit to calling process*/
  end


  AF0RW01.AF0RWHST = AF0RM001.AF0RMSTY; /* Save to wk fld*/


   /* *=======================================**/
   /* *  Get Style Row from  DPRODG.VSYCLR01  **/
   /* *=======================================**/

  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0RM001.AF0RMSTY; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0RV14"; /* Process name*/

  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/



   /* *==========================**/
   /* *  Check Retrieval Status  **/
   /* *==========================**/


  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/

                   /* (Field is valid)*/

  else

                  /* (Field in error)*/
    set AF0RM001.AF0RMSTY cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate not found*/
    AFWREC.AFWPRCSN = "S27 "; /* Process number*/

  end



end // end AF0RS27

// Edit historical silhouette cd
Function AF0RS28()


  if (AF0RM001.AF0RMHSC == " ") /* Field eq spaces*/
    AF0RW01.AF0RWHSC = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0RW01.AF0RWHSC = AF0RM001.AF0RMHSC; /* save to wk map storage*/


  if (AF0RM001.AF0RMHSC in XSUTBL.XSUCD)

    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      return; /* Return to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S28 "; /* Process number*/
  set AF0RM001.AF0RMHSC cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/


end // end AF0RS28

// Edit historical category cd
Function AF0RS29()

  if (AF0RM001.AF0RMHCC[2] == " "
   && AF0RM001.AF0RMHCC[3] != " ")
    AF0RM001.AF0RMHCC[2] = AF0RM001.AF0RMHCC[3];
    AF0RM001.AF0RMHCC[3] = "  ";
  end

  if (AF0RM001.AF0RMHCC[1] == " "
   && AF0RM001.AF0RMHCC[2] != " ")
    AF0RM001.AF0RMHCC[1] = AF0RM001.AF0RMHCC[2];
    AF0RM001.AF0RMHCC[2] = "  ";
  end
   /* VALIDATE THERE IS NOT A SECOND CAT IN 3*/
  if (AF0RM001.AF0RMHCC[2] == " "
   && AF0RM001.AF0RMHCC[3] != " ")
    AF0RM001.AF0RMHCC[2] = AF0RM001.AF0RMHCC[3];
    AF0RM001.AF0RMHCC[3] = "  ";
  end


  AFWREC.AFWIDX1 = 1; /* Reset loop index*/


  while (AFWREC.AFWIDX1 <= 3) /* Edit all Historical cat cds*/

    if (AF0RM001.AF0RMHCC[AFWIDX1] == " ") /* Map fld spaces*/
      AF0RW01.AF0RWHCC[AFWIDX1] = " "; /* Space out save area*/
    else

      AF0RW01.AF0RWHCC[AFWIDX1] = AF0RM001.AF0RMHCC[AFWIDX1];

      if (AF0RM001.AF0RMHCC[AFWIDX1] in XPCTBL.XPCCD)

        if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
         && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                           /* (field is valid)*/
        else
                           /* (field in error)*/
          AFWREC.AFWPRCSN = "S29 "; /* Process number*/
          set AF0RM001.AF0RMHCC[AFWIDX1] cursor, bold;
          XP1REC.XP1MNO = 35; /* indicate error message*/

        end

      else
                         /* (field in error)*/
        AFWREC.AFWPRCSN = "S29 "; /* Process number*/
        set AF0RM001.AF0RMHCC[AFWIDX1] cursor, bold;
        XP1REC.XP1MNO = 35; /* indicate error message*/

      end

    end

    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

  end



end // end AF0RS29

// Edit historical Gender/Age cd
Function AF0RS30()


  if (AF0RM001.AF0RMHGC == " ") /* Map fld eq spaces*/
    AF0RW01.AF0RWHGC = " "; /* Space out save fld*/
    return; /* Return to calling process*/
  end


  AF0RW01.AF0RWHGC = AF0RM001.AF0RMHGC; /* save to wk storage*/
  AF0RW01.XGACD = AF0RM001.AF0RMHGC;
  AF0RW01.XGPCD = "03";

  if (AF0RW01.XGAKEY in XGATBL.XGAKEY)

    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      /* AND XGATBL.XGPCD(EZETST) EQ '03'   ; Apparel cd*/
                      /* (Field is valid)*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S30 "; /* Process number*/
  set AF0RM001.AF0RMHGC cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/



end // end AF0RS30

// Relational edit checking
Function AF0RS31()
   /* *============================================**/
   /* * Check season cd/yr/as-of-date completeness **/
   /* *============================================**/

            /* (Sesn Cd/Yr/As-of-date Option 1)*/

  if (AF0RM001.AF0RMHS1 != " " /* Valid season yr 1*/
   && AF0RM001.AF0RMHY1 != 0   /* and Valid season yr 1*/
   && AF0RM001.AF0RMHD1 != " ") /* and Valid as-of-date 1*/
               /* (valid option 1)*/
    AF0RW01.AF0RWOP1 = "V"; /* Indicate valid option 1*/

  else

    if (AF0RM001.AF0RMHS1 == " " /* Empty season yr 1*/
     && AF0RM001.AF0RMHY1 == 0   /* and empty season yr 1*/
     && AF0RM001.AF0RMHD1 == " ") /* and empty as-of-date 1*/
                 /* (empty option 1)*/
      AF0RW01.AF0RWOP1 = " "; /* Indicate empty option 1*/

    else
             /* (option 1 in error - incomplete fields)*/
      AFWREC.AFWPRCSN = "S31 "; /* Process number*/
      set AF0RM001.AF0RMHS1 cursor, bold; /* Highlight field*/
      set AF0RM001.AF0RMHY1 bold; /* Highlight field*/
      set AF0RM001.AF0RMHD1 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0RW01.AF0RWOP1 = "E"; /* Indicate error option 1*/

    end

  end

            /* (Sesn Cd/Yr/As-of-date Option 2)*/

  if (AF0RM001.AF0RMHS2 != " " /* Valid season yr 2*/
   && AF0RM001.AF0RMHY2 != 0   /* and Valid season yr 2*/
   && AF0RM001.AF0RMHD2 != " ") /* and Valid as-of-date 2*/
               /* (valid option 2)*/
    AF0RW01.AF0RWOP2 = "V"; /* Indicate valid option 2*/

  else

    if (AF0RM001.AF0RMHS2 == " " /* Empty season yr 2*/
     && AF0RM001.AF0RMHY2 == 0   /* and empty season yr 2*/
     && AF0RM001.AF0RMHD2 == " ") /* and empty as-of-date 2*/
                 /* (empty option 2)*/
      AF0RW01.AF0RWOP2 = " "; /* Indicate empty option 2*/

    else
             /* (option 2 in error - incomplete fields)*/
      AFWREC.AFWPRCSN = "S31 "; /* Process number*/
      set AF0RM001.AF0RMHS2 cursor, bold; /* Highlight field*/
      set AF0RM001.AF0RMHY2 bold; /* Highlight field*/
      set AF0RM001.AF0RMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0RW01.AF0RWOP2 = "E"; /* Indicate error option 1*/

    end

  end



  if (AF0RW01.AF0RWOP1 == "V" /* Option 1 valid*/
   && AF0RW01.AF0RWOP2 == "V") /* and Option 1 valid*/

    if (AF0RM001.AF0RMHS1 == AF0RM001.AF0RMHS2 /* Duplicate sesn cd*/
     && AF0RM001.AF0RMHS1 == AF0RM001.AF0RMHS2 /* Duplicate sesn yr*/
     && AF0RM001.AF0RMHD1 == AF0RM001.AF0RMHD2) /* Duplicate as-of-date*/

             /* (option 2 in error - Duplicate fields)*/
      AFWREC.AFWPRCSN = "S31 "; /* Process number*/
      set AF0RM001.AF0RMHS2 cursor, bold; /* Highlight field*/
      set AF0RM001.AF0RMHY2 bold; /* Highlight field*/
      set AF0RM001.AF0RMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0RW01.AF0RWOP2 = "E"; /* Indicate error option 1*/

    end

  end



  if (XP1REC.XP1MNO != 0) /* Errors detected*/
    return; /* Return to calling process*/
  end



   /* *==========================================**/
   /* * Check Historical Fields for Completeness **/
   /* *==========================================**/


  if (AF0RW01.AF0RWOP1 == "V" /* Option 1 valid*/
   || AF0RW01.AF0RWOP2 == "V") /* Option 2 valid*/

    if (AF0RM001.AF0RMSTY == " ") /* No style entered*/

      if (AF0RM001.AF0RMHDV != " "    /* Valid division   cd*/
       && AF0RM001.AF0RMHXPR != " "   /* and Valid prd type*/
       && AF0RM001.AF0RMHGC != " "    /* and Valid g/a cd*/
       && AF0RM001.AF0RMHPL != " "    /* and Valid prd line*/
       && AF0RM001.AF0RMHCC[1] != " " /* or Categ 1 valid*/
       && AF0RM001.AF0RMHSC != " ")   /* and Valid Silhouette cd*/
                 /* (Valid XGA/XPC/XSU Combination)*/
        return; /* Return to calling process*/

      else

               /* (Invalid XGA/XPl/XSU Combination)*/
        AFWREC.AFWPRCSN = "S31 "; /* Process number*/
        if (AF0RM001.AF0RMHSC == " ") /* NO Silhouette cd*/
          set AF0RM001.AF0RMHSC cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 34; /* Indicate error message*/
        end
        if (AF0RM001.AF0RMHCC[1] == " ") /* NO CAT*/
          set AF0RM001.AF0RMHCC[1] cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 35; /* Indicate error message*/
        end
        if (AF0RM001.AF0RMHPL == " ") /* NO productline code*/
          set AF0RM001.AF0RMHPL cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 81; /* Indicate error message*/
        end
        if (AF0RM001.AF0RMHGC == " ") /* NO Gender/Age cd*/
          set AF0RM001.AF0RMHGC cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 36; /* Indicate error message*/
        end
        if (AF0RM001.AF0RMHXPR == " ") /* NO TYPE*/
          set AF0RM001.AF0RMHXPR cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 80; /* Indicate error message*/
        end
        if (AF0RM001.AF0RMHDV == " ") /* NO division code*/
          set AF0RM001.AF0RMHDV cursor, bold; /* Highlight field*/
          XP1REC.XP1MNO = 29; /* Indicate error message*/
        end
        return; /* Return to calling process*/

      end

    else /* Valid style entered*/

      return; /* Return to calling process*/

    end

  end


  if (AF0RW01.AF0RWOP1 == " " /* Option 1 empty*/
   || AF0RW01.AF0RWOP2 == " ") /* Option 2 empty*/

    if (AF0RM001.AF0RMSTY != " ") /* Style entered*/
             /* (Data Request Option Missing)*/
      AFWREC.AFWPRCSN = "S31 "; /* Process number*/
      set AF0RM001.AF0RMHS1 cursor, bold; /* Highlight field*/
      set AF0RM001.AF0RMSTY bold; /* Highlight field*/
      set AF0RM001.AF0RMHY1 bold; /* Highlight field*/
      set AF0RM001.AF0RMHD1 bold; /* Highlight field*/
      set AF0RM001.AF0RMHS2 bold; /* Highlight field*/
      set AF0RM001.AF0RMHY2 bold; /* Highlight field*/
      set AF0RM001.AF0RMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/

    else

      if (AF0RM001.AF0RMHDV != " "  /* Valid DIVISION cd*/
       || AF0RM001.AF0RMHXPR != " " /* Valid PROD TYPE*/
       || AF0RM001.AF0RMHGC != " "  /* Valid Gender/Age cd*/
       || AF0RM001.AF0RMHPL != " "  /* Valid PROD LINE  cd*/
       || AF0RM001.AF0RMHSC != " "  /* Valid Silhouette cd*/
       || AF0RM001.AF0RMHCC[1] != " ") /* Categ 1 valid*/
                   /* (Data Request Option Missing)*/
        AFWREC.AFWPRCSN = "S31 "; /* Process number*/
        set AF0RM001.AF0RMHS1 cursor, bold; /* Highlight field*/
        set AF0RM001.AF0RMHY1 bold; /* Highlight field*/
        set AF0RM001.AF0RMHD1 bold; /* Highlight field*/
        set AF0RM001.AF0RMHS2 bold; /* Highlight field*/
        set AF0RM001.AF0RMHY2 bold; /* Highlight field*/
        set AF0RM001.AF0RMHD2 bold; /* Highlight field*/
        XP1REC.XP1MNO = 47; /* Indicate error message*/

      end

    end

  end
end // end AF0RS31

// Edit Start Style no.
Function AF0RS33()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'XSPG201' call.*/
   /* If not found, indicate an edit error.*/
   /* ------------------------------------------------------------*/



   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/

  if (AF0RM001.AF0RMSYD == " ") /* Style = spaces*/
    AF0RW01.SY1STNBR = " "; /* Space out wk storage*/
    AF0RW01.AF0RWST1 = " "; /* Space out wk storage*/
    AF0RW01.AF0RWST2 = " "; /* Space out wk storage*/
    AF0RW01.AF0RWSTY = " "; /* Space out wk storage*/
    AF0RW01.AF0RWDSY = " "; /* Space out wk storage*/
    return; /* Exit to calling process*/
  end


  AF0RW01.AF0RWSTY = AF0RM001.AF0RMSYD; /* Save to wk map storage*/



   /* *=======================================**/
   /* *  Get Style Row from  DPRODG.VSYCLR01  **/
   /* *=======================================**/

  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0RW01.AF0RWSTY; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0RV22"; /* Process name*/

  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/



   /* *==========================**/
   /* *  Check Retrieval Status  **/
   /* *==========================**/


  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/

                   /* (Field is valid)*/
    AF0RW01.SY1STNBR = AF0RM001.AF0RMSYD; /* Save to wk st*/
    AF0RW01.AF0RWDSY = PG2REC.SY1SSTNM; /* Save to wk st*/

    if (AF0RM001.AF0RMSYD == AF0RW01.AF0RWST2) /* Save to alt wk stor*/

                    /* (Same style being processed)*/
                          /* --- B U T ---*/
      if (AFWREC.AFWSWR == "Y") /* Style is part of new keys entered*/
        AF0RW01.AF0RWST1 = AF0RM001.AF0RMSYD; /* Restore alt wk*/
      end

    else
      AF0RW01.AF0RWST1 = AF0RM001.AF0RMSYD; /* Save to alt wk stor*/
      AF0RW01.AF0RWST2 = AF0RM001.AF0RMSYD; /* Save to alt wk stor*/
    end


  else

                  /* (Field in error)*/
    set AF0RM001.AF0RMSYD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate not found*/
    AFWREC.AFWPRCSN = "S34 "; /* Process number*/
    AF0RW01.SY1STNBR = " "; /* Space out wk storage*/
    AF0RW01.AF0RWDSY = " "; /* Space out wk storage*/

  end



end // end AF0RS33

// Edit silhouette cd
Function AF0RS35()


  if (AF0RM001.XSUCD == " ") /* Field eq spaces*/
    AF0RW01.AF0RWSIL = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0RW01.AF0RWSIL = AF0RM001.XSUCD; /* save to wk map storage*/


  if (AF0RM001.XSUCD in XSUTBL.XSUCD)

    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      XP1REC.XSUCD = AF0RM001.XSUCD; /* save to wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S35 "; /* Process number*/
  set AF0RM001.XSUCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/


end // end AF0RS35

// Edit category cd
Function AF0RS36()


  if (AF0RM001.XPCCD == " ") /* Map fld spaces*/
    AF0RW01.AF0RWCAT = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end

  AF0RW01.AF0RWCAT = AF0RM001.XPCCD; /* save to wk map storage*/


  if (AF0RM001.XPCCD in XPCTBL.XPCCD)

    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      XP1REC.XPCCD = AF0RM001.XPCCD; /* save to wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S36 "; /* Process number*/
  set AF0RM001.XPCCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 35; /* indicate error message*/



end // end AF0RS36

// Edit Gender/Age cd
Function AF0RS37()


  if (AF0RM001.XGACD == " ") /* Map fld eq spaces*/
    AF0RW01.AF0RWGA = " "; /* Space out save fld*/
    return; /* Return to calling process*/
  end

  AF0RW01.AF0RWGA = AF0RM001.XGACD; /* save to wk map storage*/
  AF0RW01.XGACD = AF0RM001.XGACD;
  AF0RW01.XGPCD = "03";

  if (AF0RW01.XGAKEY in XGATBL.XGAKEY)

    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      /* AND XGATBL.XGPCD(EZETST) EQ '03'   ; Apparel cd*/

      XP1REC.XGACD = AF0RM001.XGACD; /* save to wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S37 "; /* Process number*/
  set AF0RM001.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/



end // end AF0RS37

// Edit season yr
Function AF0RS38()


  AF0RW01.AF0RWXSY = 0; /* initialize xsnyr wk area*/
  AF0RW01.AF0RWXSY = AF0RM001.XSNYR; /* move to wk area*/
  AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* move century*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0RW01.AF0RWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      XP1REC.XSNYR = AF0RM001.XSNYR; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S38 "; /* Process number*/
  set AF0RM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/

end // end AF0RS38

// Edit season cd
Function AF0RS39()

  if (AF0RM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0RM001.XSECD; /* save to working storage*/

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S39 "; /* Process number*/
    set AF0RM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/

  end

  AF0RW01.AF0RWXSS = " "; /* Initialize wk area*/
  AF0RW01.AF0RWXYR = +0; /* Initialize wk area*/
  AF0RW01.AF0RWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  AF0RW01.AF0RWXYR = XP1REC.XSNYR; /* Format wk area*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0RW01.AF0RWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      AF0RW01.XSNBDT = YSNTBL.XSN-SESN-BDT[AFWIDX5];
      AF0RW01.XSNXDT = YSNTBL.XSN-SESN-XDT[AFWIDX5];
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S39 "; /* Process number*/
  set AF0RM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/
end // end AF0RS39

// Edit forecaster cd
Function AF0RS40()


  if (AF0RM001.PG1FCTCD == " ") /* Eq spaces*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    AF0RW01.AF0RWUSR = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0RW01.AF0RWUSR = AF0RM001.PG1FCTCD; /* Move to wk map storage*/


   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0RM001.PG1FCTCD; /* Forecaster id*/


   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0RM001.PG1FCTCD cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S40 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      XP1REC.XXXUSER = " "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.XXXUSER = AF0RM001.PG1FCTCD; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end
      end
    end
  end

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0RV29"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0RM001.PG1FCTCD; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AF0RS40

// Edit map detail lines
Function AF0RS41()
   /* ------------------------------------------------------------*/
   /* Edit Map Detail Lines: Note that validation of map items*/
     /* is on a page-by-page basis. This ensures that all items*/
     /* are valid before any scrolling command is processed.*/
   /* ------------------------------------------------------------*/


  AFWREC.AFWIXM = 1; /* Set map index*/
  AFWREC.AFWIDX5 = 1; /* Set loop index*/

  while (AFWREC.AFWIDX5 <= 9) /* Process spring months*/

    if (AF0RM001.AF0RMCF1[AFWIXM] != AF0RW02.AF0RWCF1[AFWIDX5]
     || AF0RM001.AF0RMCF2[AFWIXM] != AF0RW02.AF0RWCF2[AFWIDX5]
     || AF0RM001.AF0RMCF3[AFWIXM] != AF0RW02.AF0RWCF3[AFWIDX5]
     || AF0RM001.AF0RMCF4[AFWIXM] != AF0RW02.AF0RWCF4[AFWIDX5]
     || AF0RM001.AF0RMCPR[AFWIXM] != AF0RW02.AF0RWCPR[AFWIDX5])

      AF0RW02.AF0RWCF1[AFWIDX5] = AF0RM001.AF0RMCF1[AFWIXM];
      AF0RW02.AF0RWCF2[AFWIDX5] = AF0RM001.AF0RMCF2[AFWIXM];
      AF0RW02.AF0RWCF3[AFWIDX5] = AF0RM001.AF0RMCF3[AFWIXM];
      AF0RW02.AF0RWCF4[AFWIDX5] = AF0RM001.AF0RMCF4[AFWIXM];
      AF0RW02.AF0RWCPR[AFWIDX5] = AF0RM001.AF0RMCPR[AFWIXM];

      AF0RW02.AF0RWUPD = "Y"; /* Indicate for update*/
      AF0RW02.AF0RWCHG[AFWIDX5] = "Y"; /* Changes entered*/

    end

    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment map pointer*/

  end


  AFWREC.AFWIDX5 = 1; /* Reset loop index*/
  while (AFWREC.AFWIDX5 <= 9) /* Recompute pcent totals*/

    if (AF0RW02.AF0RWCHG[AFWIDX5] == "Y") /* Changes entered*/
      AF0RW01.AF0RWTPC = 0; /* Initialize wk total*/
      AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF1[AFWIDX5];
      AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF2[AFWIDX5];
      AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF3[AFWIDX5];
      AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF4[AFWIDX5];
      AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCPR[AFWIDX5];
      AF0RW02.AF0RWCTL[AFWIDX5] = AF0RW01.AF0RWTPC; /* Line total*/
    end

    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/

  end



end // end AF0RS41

// Insert DACAST.VAFPER01 Row
Function AF0RS42()
   /* ------------------------------------------------------------*/
   /* - Create a new DACAST.VAFPER01 row.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/

  set AF3REC empty; /* Initialize db record*/

  AF3REC.SY1STNBR = AF0RW02.AF0RWDST; /* Style no. from default*/
  AF3REC.XDMCD = AF0RW02.AF0RWDDM; /* XDMCD from default*/
  AF3REC.XDVCD = AF0RW02.AF0RWDDV; /* XDVCD from default*/
  AF3REC.XOWCD = AF0RW02.AF0RWDOG; /* XOWCD from default*/
  AF3REC.XSECD = XP1REC.XSECD; /* XSECD from XP1REC*/

  AF0RW01.AF0RWXSY = 0; /* Reset XSNYR wk area*/
  AF0RW01.AF0RWXSY = XP1REC.XSNYR; /* XSNYR from XP1REC*/
  AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* Add Century*/
  AF3REC.XSNYR = AF0RW01.AF0RWXSY; /* Season Year*/
  AF3REC.AFBNDTPR = AF0RW01.AF0RW-AFMO-TBLE[AFWIDX1];



   /* *===========================**/
   /* *  Move Row Data to AF3REC  **/
   /* *===========================**/

  AF3REC.AF3BKPRM = 0; /* Bookings period multiplier*/

  AF3REC.AF3MDMDP[1] = AF0RW02.AF0RWCF1[AFWIDX1]; /* Curr Fut 1*/
  AF3REC.AF3MDMDP[2] = AF0RW02.AF0RWCF2[AFWIDX1]; /* Curr Fut 2*/
  AF3REC.AF3MDMDP[3] = AF0RW02.AF0RWCF3[AFWIDX1]; /* Curr Fut 3*/
  AF3REC.AF3MDMDP[4] = AF0RW02.AF0RWCF4[AFWIDX1]; /* Curr Fut 4*/
  AF3REC.AF3MDMDP[5] = AF0RW02.AF0RWCPR[AFWIDX1]; /* Curr Fut 5*/

  AF3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AF3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AF3REC.ZZZCHGCT = 0; /* Change count*/



   /* *==========================**/
   /* *  Add to DACAST.Vafper01  **/
   /* *==========================**/

  try
    call "IO3530" ("A ", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end



   /* *========================**/
   /* *  Check DB Return code  **/
   /* *========================**/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0RW01.AF0RWCIN = "Y"; /* Data Contention detected*/
      AF0RW01.AF0RWCNF = "N"; /* Reset Update Confirm flag*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S42 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "ADD DACAST.VAFPER01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Redisplay map*/



end // end AF0RS42

// Update DACAST.VAFPER01 Row
Function AF0RS43()
   /* ------------------------------------------------------------*/
          /* ** Update DACAST.VAFPER01 row ***/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/


   /* *==========================**/
   /* *  Build DB Output Record  **/
   /* *==========================**/

  set AF3REC empty; /* Reset Wk Storage field*/

  AF3REC.SY1STNBR = AF0RW02.AF0RWRKS[AFWIDX1]; /* Rec key - Style*/
  AF3REC.XDMCD = AF0RW02.AF0RWRKM[AFWIDX1]; /* Rec key - XDMCD*/
  AF3REC.XDVCD = AF0RW02.AF0RWRKV[AFWIDX1]; /* Rec key - XDVCD*/
  AF3REC.XSECD = AF0RW02.AF0RWRKE[AFWIDX1]; /* Rec key - XSECD*/
  AF3REC.XSNYR = AF0RW02.AF0RWRKR[AFWIDX1]; /* Rec key - XSNYR*/
  AF3REC.XOWCD = AF0RW02.AF0RWRKO[AFWIDX1]; /* Rec key - Xowcd*/
  AF3REC.AFBNDTPR = AF0RW02.AF0RWRKA[AFWIDX1]; /* Rec key - AFBNDTPR*/
  AF3REC.AF3BKPRM = AF0RW02.AF0RWBKP[AFWIDX1]; /* Bookings pd mult*/



   /* *=====================================**/
   /* *  Move Update Items into Output Row  **/
   /* *=====================================**/


  AF3REC.AF3MDMDP[1] = AF0RW02.AF0RWCF1[AFWIDX1]; /* Curr Fut 1*/
  AF3REC.AF3MDMDP[2] = AF0RW02.AF0RWCF2[AFWIDX1]; /* Curr Fut 2*/
  AF3REC.AF3MDMDP[3] = AF0RW02.AF0RWCF3[AFWIDX1]; /* Curr Fut 3*/
  AF3REC.AF3MDMDP[4] = AF0RW02.AF0RWCF4[AFWIDX1]; /* Curr Fut 4*/
  AF3REC.AF3MDMDP[5] = AF0RW02.AF0RWCPR[AFWIDX1]; /* Curr Fut 5*/


  AF3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AF3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AF3REC.ZZZCHGCT = AF0RW02.AF0RWCCT[AFWIDX1]; /* Change count*/



   /* *==============================**/
   /* *  Update DACAST.VAFPER01 Row  **/
   /* *==============================**/

  try
    call "IO3530" ("U ", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    AF0RW01.AF0RWUPT = "Y";
    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S43"; /* Process number*/
      AF0RW02.AF0RWUPD = " "; /* Deactivate update flag*/
      AF0RW01.AF0RWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
        AF0RW01.AF0RWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S43 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS43

// UPDATE DACAST.VAFSTY01
Function AF0RS44()
   /* *===============================**/
   /* *  UPDATE DACAST.VAFSTY01       **/
   /* *===============================**/

  AF3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AF3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  AF2REC.AF-MUL-FCTR = AF0RW04.AF0RWVFT;
  AF2REC.AF-MUL-FCTR-FL = AF0RW04.AF0RWVFL;

  try
    call "IO3510" ("U ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    AF0RW01.AF0RWUPT = "Y";
    return; /* Return to calling process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S04"; /* Process number*/
      AF0RW02.AF0RWUPD = " "; /* Deactivate update flag*/
      AF0RW01.AF0RWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
        AF0RW01.AF0RWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S04 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  return; /* Exit to redisplay map*/

end // end AF0RS44

// Select DACAST.VAFSTY01 row
Function AF0RS50()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AF2REC empty; /* Reset rec work area*/

  AF2REC.XDVCD = XP1REC.XDVCD; /* XDV cd*/
  AF2REC.XPRCD = XP1REC.XPRCD; /* XPR cd*/
  AF2REC.XGACD = XP1REC.XGACD; /* XGA cd*/
  AF2REC.XPLCD = XP1REC.XPLCD; /* XPL cd*/
  AF2REC.XPCCD = XP1REC.XPCCD; /* XPC cd*/
  AF2REC.XSUCD = XP1REC.XSUCD; /* XSU cd*/
  AF2REC.XOWCD = XP1REC.XOWCD; /* XOW cd*/
  AF2REC.SY1STNBR = AF0RW01.AF0RWSYK; /* Style no.*/
  AF2REC.SY4SZSCL = "**"; /* Size scale cd*/
  AF2REC.AF2FSTST = "*"; /* Forecast status*/

  if (XP1REC.XOWCD == " ") /* No XOWCD specified*/
    AF2REC.XOWCD = "**"; /* Get all owner groups*/
  else
    AF2REC.XOWCD = XP1REC.XOWCD; /* Selected Owner Group*/
  end

  if (XP1REC.XXXUSER == " ") /* No user specified*/
    AF2REC.PG1FCTCD = "**"; /* Get all users*/
  else
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
  end

  AF0RW01.AF0RWXSY = 0; /* Reset xsnyr wk area*/
  AF0RW01.AF0RWXSY = XP1REC.XSNYR; /* Move to wk area*/
  AF0RW01.AF0RWXSY = AF0RW01.AF0RWXSY + 1900; /* Add century*/
  AF2REC.XSNYR = AF0RW01.AF0RWXSY; /* XSE yr*/

  AF2REC.XSECD = XP1REC.XSECD; /* XSE cd*/



   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFSTY01  **/
   /* *====================================**/

  try
    call "IO3510" ("SS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S50 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS50

// Process DACAST.VAFSTY01 rows
Function AF0RS51()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until the next style to*/
     /* be processed is retrieved (current style + 1). If done*/
     /* for the first time after a new select has been made, it*/
     /* will retrieve the first style in the set --*/
     /* (current style + 0).*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO3510" ("SN", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
   /* If call sucessful, store style/size data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/


      /* ************** Added for IOMOD Changes ****************/

      /* ------------------------------------------------------------*/
       /* Whenever a size row is successfully retrieved, it undergoes*/
         /* two qualification processes to determine suitablity for*/
         /* processing. The first process relates the row to selec-*/
         /* tion criteria data, and the second process determines if*/
         /* the style entered has been processed (in the case of*/
         /* multiple-row styles).*/
      /* ------------------------------------------------------------*/

      if (XP1REC.PG1FCTCD == " " /* Get all forecasters*/
       || AF2REC.PG1FCTCD == XP1REC.PG1FCTCD) /* Check forecaster cd*/
                    /* (Qualification Process 1)*/
        AF0RW01.AF0RWXST = "Y"; /* Row qualified*/
                    /* (Qualification Process 2)*/
        AF0RW01.AF0RWSQU = " "; /* Reset qual flag*/
        AF0RW02.AF0RWUPD = " ";
        AFWREC.AFWNMO = 15; /* no update pending*/
        AF0RS55(); /* Check if style already processed*/


        if (AF0RW01.AF0RWXST == "Y" /* Row qualified for processing*/
         && AF0RW01.AF0RWSQU == "Y") /* Style not yet processed*/

          AF0RS53(); /* Store Style/Pct  data*/

          if (AF0RW02.AF0RWUPD != "Y")
            AF0RW01.AF0RWSQU = " "; /* Reset qual flag*/
          end
          return; /* Loop through (Style selected)*/

        else

          return; /* Loop through (Bypass Style row)*/

        end

      else

        return; /* Loop through (Bypass Style row)*/

      end

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        AF0RW01.AF0RWSQU = "Y";
        AF0RW02.AF0RWUPD = " ";
        return; /* Return to calling process*/
      end

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S51 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS51

// Close DACAST.VAFSTY01 cursor
Function AF0RS52()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3510" ("CS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS52

// Store Style/Pct  data
Function AF0RS53()
   /* ------------------------------------------------------------*/
        /* ** Store DACAST.VAFSTY01/VAFPER01 Data ***/
   /* Save default data.*/
   /* Get style short name.*/
   /* Obtain all DACAST.VAFPER01 rows for the style.*/
   /* Save all non-update items into program wk array.*/
   /* Store all pcts  into program wk array for display and*/
     /* possible update.*/
   /* ------------------------------------------------------------*/



   /* *=====================**/
   /* *  Save Default Data  **/
   /* *=====================**/
    /* -- These data will be utilized as parts of the record key*/
       /* in case new DACAST.VAFPER01 records need to be created.*/





   /* *========================**/
   /* *  Get Style Short Name  **/
   /* *========================**/

  AF0RW01.AF0RWVST = " "; /* Reset valid style indicator*/

  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  XP1REC.SY1STNBR = AF2REC.SY1STNBR; /* Save Style no.*/
  PG2REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0RR06"; /* Process name*/

  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
    XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* Save style name*/
    XP1REC.SY2CLRID = PG2REC.SY2CLRID; /* Save color cd*/
  else
    AFWREC.AFWPRCSN = "S04 "; /* Process number*/
    AFWREC.AFWNMO = 33; /* Indicate error message*/
    AF0RW01.AF0RWVST = "N"; /* Indicate style not found*/
    XP1REC.SY1SSTNM = " "; /* Space out style name*/
    XP1REC.SY2CLRID = " "; /* Space out color cd*/
  end



   /* *===============================**/
   /* *  Obtain DACAST.VAFPER01 Data  **/
   /* *===============================**/

  AF0RS54(); /* Select from DACAST.VAFPER01*/



   /* *================================**/
   /* *  Process DACAST.VAFPER01 Data  **/
   /* *================================**/


  if (converseVar.validationMsgNum == 0) /* No errors detected*/

    AF0RW01.AF0RWPSD = " "; /* Reset eof indicator*/
    while (AF0RW01.AF0RWPSD == " ") /* Process all records*/
      AF0RS56(); /* Process DACAST.VAFPER01 rows*/
    end

    if (converseVar.validationMsgNum == 0) /* No errors detected*/
      AF0RS59(); /* Close DACAST.VAFPER01 cursor*/
    end

  end

  if (AF0RW04.AF0RWUFF == "Y") /* With valid updates*/
    AFWREC.AFWPRCSN = "S56"; /* Process number*/
    AFWREC.AFWNMO = 117; /* Indicate pending activity*/
  end
end // end AF0RS53

// Select DACAST.VAFPER01 rows
Function AF0RS54()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AF3REC empty; /* Reset rec work area*/

  AF3REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no. key*/
  AF3REC.XDMCD = AF2REC.XDMCD; /* Dimension cd key*/
  AF3REC.XDVCD = AF2REC.XDVCD; /* Division cd key*/
  AF3REC.XSECD = AF2REC.XSECD; /* Season cd key*/
  AF3REC.XSNYR = AF2REC.XSNYR; /* Season yr key*/
  AF3REC.XOWCD = AF2REC.XOWCD; /* Owner Group Cd*/


   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFPER01  **/
   /* *====================================**/

  try
    call "IO3530" ("SS", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S54 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS54

// Check if Style valid
Function AF0RS55()
   /* ------------------------------------------------------------*/
   /* This routine checks against the inadvertent reprocessing*/
     /* of a specific style already processed. This is done by*/
     /* relating the current G/A,CAT and SIL combination with*/
     /* the G/A and/or CAT and/or SIL entered along with the*/
     /* style in question. If matched, then the style desired*/
     /* has been located. Otherwise, the search continues....*/
   /* ------------------------------------------------------------*/


  if (AF0RW01.SY1STNBR != " ") /* Specific style entered*/

    if (AF2REC.SY1STNBR == AF0RW01.SY1STNBR) /* The style specified*/

      if (AF0RW01.AF0RWSIL != " ") /* XSUCD specified*/
        if (AF2REC.XSUCD == XP1REC.XSUCD) /* Comb.match with criteria*/
                        /* (XSUCD matched)*/
        else

          return; /* ****** EXIT to get next style*/

        end
      end


      if (AF0RW01.AF0RWCAT != " ") /* XPCCD specified*/
        if (AF2REC.XPCCD == XP1REC.XPCCD) /* Comb.match with criteria*/
                        /* (XPCCD matched)*/
        else

          return; /* ****** EXIT to get next style*/

        end
      end

      if (AF0RW01.AF0RWXPL != " ") /* XPRCD specified*/
        if (AF2REC.XPLCD == XP1REC.XPLCD) /* Comb.match with criteria*/
                        /* (XPLCD matched)*/
        else

          return; /* ****** EXIT to get next style*/

        end
      end


      if (AF0RW01.AF0RWGA != " ") /* XGACD specified*/
        if (AF2REC.XGACD == XP1REC.XGACD) /* Comb.match with criteria*/
               /* IF AF0RW01.AF0RWGA EQ XP1REC.XGACD; Comb.matc*/
                        /* (XGACD valid)*/
        else

          return; /* ****** EXIT to get next style*/

        end
      end

      if (AF0RW01.AF0RWXPR != " ") /* XGACD specified*/
        if (AF2REC.XPRCD == XP1REC.XPRCD) /* Comb.match with criteria*/
               /* IF AF0RW01.AF0RWXPR EQ XP1REC.XPRCD; Comb.matc*/
                        /* (XPRCD valid)*/
        else

          return; /* ****** EXIT to get next style*/

        end
      end


      AF0RW01.AF0RWST1 = " "; /* Indicate style for processing*/
      AF0RW01.AF0RWSQU = "Y"; /* Style qualified*/


    else

      if (AF0RW01.AF0RWST1 == " ") /* Specified style already processed*/
                   /* (Style retrieved is valid)*/
        AF0RW01.AF0RWSQU = "Y"; /* Style qualified*/

      else

        return; /* ****** EXIT to reselect data*/

      end

    end

  else


    if (AF0RW01.AF0RWSIL != " ") /* XSUCD specified*/
      if (AF2REC.XSUCD == XP1REC.XSUCD) /* Comb.match with criteria*/
                      /* (XSUCD matched)*/
      else

        return; /* ****** EXIT to get next style*/

      end
    end


    if (AF0RW01.AF0RWCAT != " ") /* XPCCD specified*/
      if (AF2REC.XPCCD == XP1REC.XPCCD) /* Comb.match with criteria*/
                      /* (XPCCD matched)*/
      else

        return; /* ****** EXIT to get next style*/

      end
    end

    if (AF0RW01.AF0RWXPR != " ") /* XPCCD specified*/
      if (AF2REC.XPRCD == XP1REC.XPRCD) /* Comb.match with criteria*/
                      /* (XPRCD matched)*/
      else

        return; /* ****** EXIT to get next style*/

      end
    end


    if (AF0RW01.AF0RWGA != " ") /* XGACD specified*/
      if (AF2REC.XGACD == XP1REC.XGACD) /* Comb.match with criteria*/
             /* IF AF0RW01.AF0RWGA EQ XP1REC.XGACD; Comb.matc*/
                      /* (XGACD valid)*/
      else

        return; /* ****** EXIT to get next style*/

      end
    end

    if (AF0RW01.AF0RWXPR != " ") /* XGACD specified*/
      if (AF2REC.XPRCD == XP1REC.XPRCD) /* Comb.match with criteria*/
             /* IF AF0RW01.AF0RWXPR EQ XP1REC.XPRCD; Comb.matc*/
                      /* (XPRCD valid)*/
      else

        return; /* ****** EXIT to get next style*/

      end
    end

    AF0RW01.AF0RWSQU = "Y"; /* Style qualified*/

  end



end // end AF0RS55

// Process DACAST.VAFPER01 rows
Function AF0RS56()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* For all rows retrieved, store data into program arrays.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO3530" ("SN", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If call sucessful, store style/size data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      AF0RW02.AF0RWUPD = "Y";
      AFWREC.AFWNMO = 118; /* upadate avail*/
      AFWREC.AFWPRCSN = "S56"; /* Process number*/

      AF0RS58(); /* Store DACAST.VAFPER01 row*/

      return; /* Loop through*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/

        AF0RW01.AF0RWPSD = "Y"; /* Force loop termination.*/

        return; /* Return to calling process*/

      end

    end


  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0RW01.AF0RWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S56 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS56

// Store DACAST.VAFPER01 data
Function AF0RS58()
   /* ------------------------------------------------------------*/
        /* ** Store DACAST.VAFPER01 Data ***/
   /* Save all non-update items into program wk array.*/
   /* Store all pcts  into program wk array for display and*/
     /* possible update.*/
   /* ------------------------------------------------------------*/


   /* *=========================**/
   /* *  Obtain Store Pointer   **/
   /* *=========================**/

  if (AF3REC.AFBNDTPR in AF0RW01.AF0RW-AFMO-TBLE)
    AFWREC.AFWIDX1 = sysVar.arrayIndex;
  else
    return;
  end

   /* *==========================**/
   /* *  Store Non-Update Items  **/
   /* *==========================**/

  AF0RW02.AF0RWRKY[AFWIDX1] = "Y"; /* Indicate valid record key*/
  AF0RW02.AF0RWRKS[AFWIDX1] = AF3REC.SY1STNBR; /* Save Style key*/
  AF0RW02.AF0RWRKO[AFWIDX1] = AF3REC.XOWCD; /* Save XOWCD key*/
  AF0RW02.AF0RWRKM[AFWIDX1] = AF3REC.XDMCD; /* Save XDMCD key*/
  AF0RW02.AF0RWRKV[AFWIDX1] = AF3REC.XDVCD; /* Save XDVCD key*/
  AF0RW02.AF0RWRKE[AFWIDX1] = AF3REC.XSECD; /* Save XSECD key*/
  AF0RW02.AF0RWRKR[AFWIDX1] = AF3REC.XSNYR; /* Save XSNYR key*/
  AF0RW02.AF0RWRKA[AFWIDX1] = AF3REC.AFBNDTPR; /* Save AFBNDTPR key*/
  AF0RW02.AF0RWBKP[AFWIDX1] = AF3REC.AF3BKPRM; /* Save Book pd mult*/
  AF0RW02.AF0RWCCT[AFWIDX1] = AF3REC.ZZZCHGCT; /* Save Change count*/



   /* *======================**/
   /* *  Store Update Items  **/
   /* *======================**/

  AF0RW02.AF0RWCF1[AFWIDX1] = AF3REC.AF3MDMDP[1]; /* Curr Fut 1*/
  AF0RW02.AF0RWCF2[AFWIDX1] = AF3REC.AF3MDMDP[2]; /* Curr Fut 2*/
  AF0RW02.AF0RWCF3[AFWIDX1] = AF3REC.AF3MDMDP[3]; /* Curr Fut 3*/
  AF0RW02.AF0RWCF4[AFWIDX1] = AF3REC.AF3MDMDP[4]; /* Curr Fut 4*/
  AF0RW02.AF0RWCPR[AFWIDX1] = AF3REC.AF3MDMDP[5]; /* Curr Fut 5*/

  AF0RW02.AF0RWCW1[AFWIDX1] = AF3REC.AF3MDMDP[1]; /* Alt Curr Fut 1*/
  AF0RW02.AF0RWCW2[AFWIDX1] = AF3REC.AF3MDMDP[2]; /* Alt Curr Fut 2*/
  AF0RW02.AF0RWCW3[AFWIDX1] = AF3REC.AF3MDMDP[3]; /* Alt Curr Fut 3*/
  AF0RW02.AF0RWCW4[AFWIDX1] = AF3REC.AF3MDMDP[4]; /* Alt Curr Fut 4*/
  AF0RW02.AF0RWCW5[AFWIDX1] = AF3REC.AF3MDMDP[5]; /* Alt Curr Fut 5*/

  AF0RW01.AF0RWTPC = 0; /* Initialize Pcent wk total*/
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF1[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF2[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF3[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCF4[AFWIDX1];
  AF0RW01.AF0RWTPC = AF0RW01.AF0RWTPC + AF0RW02.AF0RWCPR[AFWIDX1];

  AF0RW02.AF0RWCTL[AFWIDX1] = AF0RW01.AF0RWTPC; /* Save Pcent tot*/
  AF0RW02.AF0RWCTW[AFWIDX1] = AF0RW01.AF0RWTPC; /* Save Alt Pcent tot*/



end // end AF0RS58

// Close DACAST.VAFPER01 cursor
Function AF0RS59()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3530" ("CS", SQLCA, AF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S59 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPER01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0RM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0RS59

// Edit Product Line code
Function AF0RS60()


  if (AF0RM001.XPLCD == " ") /* Map fld spaces*/
    AF0RW01.AF0RWXPL = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end

  AF0RW01.AF0RWXPL = AF0RM001.XPLCD; /* save to wk map storage*/


  if (AF0RM001.XPLCD in XPLTBL.XPLCD)

    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      XP1REC.XPLCD = AF0RM001.XPLCD; /* save to wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S60 "; /* Process number*/
  set AF0RM001.XPLCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/



end // end AF0RS60

// Edit Division
Function AF0RS61()


  if (AF0RM001.XDVCD == " ") /* Map fld spaces*/
    AF0RW01.AF0RWXDV = "01"; /* Space out save area*/
    return; /* Return to calling routine*/
  end

  AF0RW01.AF0RWXDV = AF0RM001.XDVCD; /* save to wk map storage*/


  if (AF0RM001.XDVCD in XDVTBL.XDVCD)

    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || XDVTBL.XDVCD[sysVar.arrayIndex] == "05")
                       /* (field is valid)*/
      XP1REC.XDVCD = AF0RM001.XDVCD; /* save to wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S61 "; /* Process number*/
  set AF0RM001.XDVCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 29; /* indicate error message*/



end // end AF0RS61

// Edit historical Prod Line code
Function AF0RS62()


  if (AF0RM001.AF0RMHPL == " ") /* Map fld spaces*/
    AF0RW01.AF0RWHPL = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end

  AF0RW01.AF0RWHPL = AF0RM001.AF0RMHPL; /* save to wk map storage*/


  if (AF0RM001.AF0RMHPL in XPLTBL.XPLCD)

    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      return; /* Exit to calling process*/
    end

  end


                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S62 "; /* Process number*/
  set AF0RM001.AF0RMHPL cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/



end // end AF0RS62

// Edit historical Division
Function AF0RS63()


  if (AF0RM001.AF0RMHDV == " ") /* Map fld spaces*/
    AF0RW01.AF0RWHDV = "01"; /* Space out save area*/
    return; /* Return to calling routine*/
  end

  AF0RW01.AF0RWHDV = AF0RM001.AF0RMHDV; /* save to wk map storage*/


  if (AF0RM001.AF0RMHDV in XDVTBL.XDVCD)

    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || XDVTBL.XDVCD[sysVar.arrayIndex] == "05")
                       /* (field is valid)*/
      return;

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S63 "; /* Process number*/
  set AF0RM001.AF0RMHDV cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 29; /* indicate error message*/



end // end AF0RS63

// EDIT HISTORICAL PRODUCT TYPE
Function AF0RS64()


  if (AF0RM001.AF0RMHXPR == " ") /* Map fld spaces*/
    AF0RW01.AF0RWHPT = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end

  AF0RW01.AF0RWHPT = AF0RM001.AF0RMHXPR; /* save to wk map storage*/


  if (AF0RM001.AF0RMHXPR in XPRTBL.XPRCD)

    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
                       /* (field is valid)*/
      return; /* Exit to calling process*/
    end

  end


                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S64 "; /* Process number*/
  set AF0RM001.AF0RMHXPR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 80; /* indicate error message*/



end // end AF0RS64

// EDIT PROD TYPE
Function AF0RS65()

  if (AF0RM001.XPRCD == " ") /* Map fld spaces*/
    AF0RW01.AF0RWXPR = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end

  AF0RW01.AF0RWXPR = AF0RM001.XPRCD; /* save to wk map storage*/


  if (AF0RM001.XPRCD in XPRTBL.XPRCD)

    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
                       /* (field is valid)*/
      XP1REC.XPRCD = AF0RM001.XPRCD; /* save to wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S65 "; /* Process number*/
  set AF0RM001.XPRCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 80; /* indicate error message*/



end // end AF0RS65

// EDIT SELECTION COMB. FIELDS
Function AF0RS66()

  if (AF0RM001.XSUCD > " ") /* Field eq spaces*/
    if (AF0RM001.XPCCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S66 "; /* Process number*/
      set AF0RM001.XPCCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0RM001.XPLCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S66 "; /* Process number*/
      set AF0RM001.XPLCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0RM001.XGACD == " ") /* Map fld eq spaces*/
      AFWREC.AFWPRCSN = "S66 "; /* Process number*/
      set AF0RM001.XGACD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0RM001.XPRCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S66 "; /* Process number*/
      set AF0RM001.XPRCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    return;
  end


  if (AF0RM001.XPCCD > " ") /* Field eq spaces*/
    if (AF0RM001.XPLCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S66 "; /* Process number*/
      set AF0RM001.XPLCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0RM001.XGACD == " ") /* Map fld eq spaces*/
      AFWREC.AFWPRCSN = "S66 "; /* Process number*/
      set AF0RM001.XGACD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0RM001.XPRCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S66 "; /* Process number*/
      set AF0RM001.XPRCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    return;
  end

  if (AF0RM001.XPLCD > " ") /* Field eq spaces*/
    if (AF0RM001.XGACD == " ") /* Map fld eq spaces*/
      AFWREC.AFWPRCSN = "S66 "; /* Process number*/
      set AF0RM001.XGACD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    if (AF0RM001.XPRCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S66 "; /* Process number*/
      set AF0RM001.XPRCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    return;
  end


  if (AF0RM001.XGACD > " ") /* Field eq spaces*/
    if (AF0RM001.XPRCD == " ") /* Map fld spaces*/
      AFWREC.AFWPRCSN = "S66 "; /* Process number*/
      set AF0RM001.XPRCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 84; /* indicate error message*/
    end
    return;
  end


end // end AF0RS66

// Edit Factor & Flag
Function AF0RS67()

  if (AFWREC.AFWFIRST == " ")
    AF0RW04.AF0RWUFF = "N"; /* Turn off update flag*/
    AF0RW04.AF0RWVFT = 0; /* Set work factor to 0*/
    AF0RW04.AF0RWVFL = " "; /* Set work flag to ' '*/
    return;
  end

  if (AF0RM001.AF0RM-OVFT == 0
   && AF0RM001.AF0RM-OVFL == " ")
    AF0RW04.AF0RWVFT = 0; /* Set work factor to 0*/
    AF0RW04.AF0RWVFL = " "; /* Set work flag to ' '*/
    return;
  end

  if (AF0RM001.AF0RM-OVFT < 0)
    AFWREC.AFWPRCSN = "S67 "; /* Process number*/
    set AF0RM001.AF0RM-OVFT cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 72; /* indicate error message*/
    return;
  end

  if (AF0RM001.AF0RM-OVFT == 0
   && AF0RM001.AF0RM-OVFL == "Y")
    AFWREC.AFWPRCSN = "S67 "; /* Process number*/
    set AF0RM001.AF0RM-OVFT cursor, bold; /* highlight field*/
    set AF0RM001.AF0RM-OVFL bold; /* highlight field*/
    XP1REC.XP1MNO = 72; /* indicate error message*/
    return;
  end

  if (AF0RM001.AF0RM-OVFL == "Y"
   || AF0RM001.AF0RM-OVFL == "N")
  else
    AFWREC.AFWPRCSN = "S67 "; /* Process number*/
    set AF0RM001.AF0RM-OVFL cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 39; /* indicate error message*/
    return;
  end

  AF0RW04.AF0RWVFT = AF0RM001.AF0RM-OVFT; /* Move Factor*/
  AF0RW04.AF0RWVFL = AF0RM001.AF0RM-OVFL; /* Move Flag*/

  if (AF0RW04.AF0RWUFF == "N")
    AF0RW04.AF0RWUFF = "Y";
    return;
  end
end // end AF0RS67

// Edit Historical Owner Group Cd
Function AF0RS68()
  if (AF0RM001.AF0RMHOG == AF0RW01.AF0RWHOG) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end

  if (AF0RM001.AF0RMHOG == " ") /* Map fld eq spaces*/
    AF0RW01.AF0RWHOG = " "; /* Space out save fld*/
    return; /* Return to calling process*/
  else
    XP1REC.XWHCD = "51"; /* wharehouse code*/
    AF0RW01.AF0RWSOG = XP1REC.XOWCD; /* save xp1rec owner group*/
    XP1REC.XOWCD = AF0RM001.AF0RMHOG; /* Owner Group Cd*/

    if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
      AF0RW01.AF0RWHOG = AF0RM001.AF0RMHOG; /* save to wk storage*/
      XP1REC.XOWCD = AF0RW01.AF0RWSOG; /* REPLACE OWNER GROUP*/
      return; /* Exit to calling process*/
    end
  end

  XP1REC.XOWCD = AF0RW01.AF0RWSOG; /* REPLACE OWNER GROUP*/

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S30 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  set AF0RM001.AF0RMHOG cursor, bold; /* highlight field*/



end // end AF0RS68

// Edit Owner Group
Function AF0RS69()

  if (AF0RM001.XOWCD == AF0RW01.AF0RWXOW) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end

  if (AF0RM001.XOWCD == " ") /* Map fld eq spaces*/
    AF0RW01.AF0RWXOW = " "; /* Space out save fld*/
    return; /* Return to calling process*/
  else
    XP1REC.XWHCD = "51"; /* wharehouse code*/
    XP1REC.XOWCD = AF0RM001.XOWCD; /* Owner Group Cd*/

    if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
      AF0RW01.AF0RWXOW = AF0RM001.XOWCD; /* save to wk storage*/
      return; /* Exit to calling process*/
    end
  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S30 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  set AF0RM001.XOWCD cursor, bold; /* highlight field*/



end // end AF0RS69

// Load AFMO Table
Function AF0RS70()
  AFWREC.AFWIDX5 = 1; /* Set loop index*/

  AF0RW01.AF0RW-BEG-DT = AF0RW01.XSNBDT;
  AF0RW01.AF0RW-END-DT = AF0RW01.XSNXDT;

  move 0 to AF0RW01.AF0RW-AFMO-TBLE[1] for all;
  AF0RW01.AF0RW-AFMO-TBLE[2] = AF0RW01.AF0RW-BEG-AFMO;

  AFWREC.AFWIDX5 = 2; /* Set loop index*/
  AFWREC.AFWIDX4 = 0; /* Set loop index*/

  while (AF0RW01.AF0RW-AFMO-TBLE[AFWIDX5] <= AF0RW-END-AFMO
   && AFWIDX5 <= 9
  )
    AFWREC.AFWIDX4 = AFWREC.AFWIDX5 + 1; /**/
    AF0RW01.AF0RW-AFMO-TBLE[AFWIDX4] = AF0RW-AFMO-TBLE[AFWIDX5] + 1;

    if (AF0RW01.AF0RW-AFMO-MNTH[AFWIDX4] >= 13)
      AF0RW01.AF0RW-AFMO-MNTH[AFWIDX4] = 1;
      AF0RW01.AF0RW-AFMO-YR[AFWIDX4] = AF0RW01.AF0RW-AFMO-YR[AFWIDX4] + 1;
    end

    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/

  end

  AF0RW-AFMO-TBLE[AFWIDX5] = 9999;
  AF0RW01.AF0RW-LATE-IDX = AFWREC.AFWIDX5;
end // end AF0RS70

// Load Historical AFMO Tables
Function AF0RS71()

  AF0RW01.AF0RW-BEG-DT = AF0RW01.AF0RW-HIST-BDT1;
  AF0RW01.AF0RW-END-DT = AF0RW01.AF0RW-HIST-XDT1;

  move 0 to AF0RW01.AF0RW-HIST-XSN1[1] for all;
  AF0RW01.AF0RW-HIST-XSN1[2] = AF0RW-BEG-AFMO;

  AFWREC.AFWIDX5 = 2; /* Set loop index*/
  AFWREC.AFWIDX4 = 0; /* Set loop index*/

  while (AF0RW01.AF0RW-HIST-XSN1[AFWIDX5] <= AF0RW-END-AFMO
   && AFWREC.AFWIDX5 < AF0RW01.AF0RW-LATE-IDX)

    AFWREC.AFWIDX4 = AFWREC.AFWIDX5 + 1; /**/
    AF0RW01.AF0RW-HIST-XSN1[AFWIDX4] = AF0RW-HIST-XSN1[AFWIDX5] + 1;

    if (AF0RW01.AF0RW-HIST-MNTH1[AFWIDX4] >= 13)
      AF0RW01.AF0RW-HIST-MNTH1[AFWIDX4] = 1;
      AF0RW01.AF0RW-HIST-YR1[AFWIDX4] = AF0RW01.AF0RW-HIST-YR1[AFWIDX4] + 1;
    end

    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/

  end

  AF0RW-HIST-XSN1[AFWIDX5] = 9999;

  AF0RW01.AF0RW-BEG-DT = AF0RW01.AF0RW-HIST-BDT2;
  AF0RW01.AF0RW-END-DT = AF0RW01.AF0RW-HIST-XDT2;

  move 0 to AF0RW01.AF0RW-HIST-XSN2[1] for all;
  AF0RW01.AF0RW-HIST-XSN2[2] = AF0RW-BEG-AFMO;

  AFWREC.AFWIDX5 = 2; /* Set loop index*/
  AFWREC.AFWIDX4 = 0; /* Set loop index*/

  while (AF0RW01.AF0RW-HIST-XSN2[AFWIDX5] <= AF0RW-END-AFMO
   && AFWREC.AFWIDX5 < AF0RW01.AF0RW-LATE-IDX)

    AFWREC.AFWIDX4 = AFWREC.AFWIDX5 + 1; /**/
    AF0RW01.AF0RW-HIST-XSN2[AFWIDX4] = AF0RW-HIST-XSN2[AFWIDX5] + 1;

    if (AF0RW01.AF0RW-HIST-MNTH2[AFWIDX4] >= 13)
      AF0RW01.AF0RW-HIST-MNTH2[AFWIDX4] = 1;
      AF0RW01.AF0RW-HIST-YR2[AFWIDX4] = AF0RW01.AF0RW-HIST-YR2[AFWIDX4] + 1;
    end

    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/

  end

  AF0RW-HIST-XSN2[AFWIDX5] = 9999;
end // end AF0RS71

//*** RECORD=AF0RW01 ****
// Working Storage (1) for AF0R - Program-defined Variables
// ***********************
Record AF0RW01 type basicRecord
  10 AFWSWR AFWSWR ; 
  10 AF0RWUPT AF0RWUPT ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY4SZSCL SY4SZSCL ; 
  10 XDMCD XDMCD ; 
  10 XDVCD XDVCD ; 
  10 XXXSTAT XXXSTAT ; 
  10 AF0RWBDT AF0RWBDT ; 
    15 AF0RWBDY AF0RWBDY ; 
    15 AF0RWBDM AF0RWBDM ; 
  10 AF0RWCIN AF0RWCIN ; 
  10 AF0RWCMS AF0RWCMS ; 
  10 AF0RWCNF AF0RWCNF ; 
  10 AF0RWCPT AF0RWCPT ; 
  10 AF0RWCSY AF0RWCSY ; 
  10 AF0RWDTW AF0RWDTW ; 
    15 AF0RWDTC AF0RWDTC ; 
    15 AF0RWDTY AF0RWDTY ; 
    15 AF0RWDTM AF0RWDTM ; 
    15 AF0RWDTD AF0RWDTD ; 
  10 AF0RWDSY AF0RWDSY ; 
  10 AF0RWDX1 AF0RWDX1 ; 
  10 AF0RWDX2 AF0RWDX2 ; 
  10 AF0RWEDW AF0RWEDW ; 
    15 AF0RWEDM AF0RWEDM ; 
    15 AF0RWEDD AF0RWEDD ; 
    15 AF0RWEDY AF0RWEDY ; 
  10 AF0RWXDV AF0RWXDV ; 
  10 AF0RWXOW AF0RWXOW ; 
  10 AF0RWXPR AF0RWXPR ; 
  10 AF0RWGA AF0RWGA ; 
  10 AF0RWXPL AF0RWXPL ; 
  10 AF0RWCAT AF0RWCAT ; 
  10 AF0RWSIL AF0RWSIL ; 
  10 AF0RWHAC AF0RWHAC ; 
  10 AF0RWHCC AF0RWHCC [3] ; 
  10 AF0RWHDS AF0RWHDS ; 
  10 AF0RWHDV AF0RWHDV ; 
  10 AF0RWHOG AF0RWHOG ; 
  10 AF0RWHPT AF0RWHPT ; 
  10 AF0RWHGC AF0RWHGC ; 
  10 AF0RWHPL AF0RWHPL ; 
  10 AF0RWHSC AF0RWHSC ; 
  10 AF0RWHST AF0RWHST ; 
  10 AF0RWHSY AF0RWHSY ; 
    15 AF0RWHSH AF0RWHSH ; 
    15 AF0RWHYH AF0RWHYH ; 
  10 AF0RWHS1 AF0RWHS1 ; 
  10 AF0RWHY1 AF0RWHY1 ; 
  10 AF0RWHD1 AF0RWHD1 ; 
  10 AF0RWHS2 AF0RWHS2 ; 
  10 AF0RWHY2 AF0RWHY2 ; 
  10 AF0RWHD2 AF0RWHD2 ; 
  10 AF0RWHPC AF0RWHPC ; 
  10 AF0RWIIN AF0RWIIN ; 
  10 AF0RWLCT AF0RWLCT ; 
  10 AF0RWLIM AF0RWLIM ; 
  10 AF0RWLIN AF0RWLIN ; 
  10 AF0RWMNO AF0RWMNO ; 
  10 AF0RWMTB AF0RWMTB [14] ; 
  10 AF0RWOP1 AF0RWOP1 ; 
  10 AF0RWOP2 AF0RWOP2 ; 
  10 AF0RWPCT AF0RWPCT ; 
  10 AF0RWPGL AF0RWPGL ; 
  10 AF0RWPGM AF0RWPGM ; 
  10 AF0RWPGV AF0RWPGV ; 
  10 AF0RWPND AF0RWPND ; 
  10 AF0RWPSA AF0RWPSA ; 
  10 AF0RWPSD AF0RWPSD ; 
  10 AF0RWSDT AF0RWSDT ; 
    15 AF0RWSDC AF0RWSDC ; 
    15 AF0RWSDY AF0RWSDY ; 
  10 AF0RWSD2 AF0RWSD2 ; 
  10 AF0RWSSE AF0RWSSE ; 
  10 AF0RWSSY AF0RWSSY ; 
  10 AF0RWSAS AF0RWSAS ; 
  10 AF0RWSQU AF0RWSQU ; 
  10 AF0RWSGA AF0RWSGA ; 
  10 AF0RWSDV AF0RWSDV ; 
  10 AF0RWSPR AF0RWSPR ; 
  10 AF0RWSPL AF0RWSPL ; 
  10 AF0RWSPC AF0RWSPC ; 
  10 AF0RWSSC AF0RWSSC ; 
  10 AF0RWSSL AF0RWSSL ; 
  10 AF0RWSTY AF0RWSTY ; 
  10 AF0RWSYK AF0RWSYK ; 
  10 AF0RWST1 AF0RWST1 ; 
  10 AF0RWST2 AF0RWST2 ; 
  10 AF0RWTPC AF0RWTPC ; 
  10 AF0RWUSR AF0RWUSR ; 
  10 AF0RWVLF AF0RWVLF ; 
  10 AF0RWVLI AF0RWVLI ; 
  10 AF0RWVST AF0RWVST ; 
  10 AF0RWXGA AF0RWXGA ; 
  10 AF0RWXPC AF0RWXPC ; 
  10 AF0RWXSU AF0RWXSU ; 
  10 AF0RWSOG AF0RWSOG ; 
  10 AF0RWXSY AF0RWXSY ; 
  10 AF0RWXSA AF0RWXSA ; 
    15 AF0RWXSS AF0RWXSS ; 
    15 AF0RWXYR AF0RWXYR ; 
  10 AF0RWXST AF0RWXST ; 
  10 XGAKEY XGAKEY ; 
    15 XGACD XGACD ; 
    15 XGPCD XGPCD ; 
  10 XSNBDT XSNBDT ; 
  10 XSNXDT XSNXDT ; 
  10 AF0RW-LATE-IDX AF0RW-LATE-IDX ; 
  10 AF0RW-BEG-DT AF0RW-BEG-DT ; 
    15 * num(3) ; 
    15 AF0RW-BEG-AFMO AF0RW-BEG-AFMO ; 
    15 * num(2) ; 
  10 AF0RW-END-DT AF0RW-END-DT ; 
    15 * num(3) ; 
    15 AF0RW-END-AFMO AF0RW-END-AFMO ; 
    15 * num(2) ; 
  10 AF0RW-AFMO-TBLE AF0RW-AFMO-TBLE [9] ; 
    15 AF0RW-AFMO-YR AF0RW-AFMO-YR ; 
    15 AF0RW-AFMO-MNTH AF0RW-AFMO-MNTH ; 
  10 AF0RW-HIST-XSN1 AF0RW-HIST-XSN1 [9] ; 
    15 AF0RW-HIST-YR1 AF0RW-HIST-YR1 ; 
    15 AF0RW-HIST-MNTH1 AF0RW-HIST-MNTH1 ; 
  10 AF0RW-HIST-XSN2 AF0RW-HIST-XSN2 [9] ; 
    15 AF0RW-HIST-YR2 AF0RW-HIST-YR2 ; 
    15 AF0RW-HIST-MNTH2 AF0RW-HIST-MNTH2 ; 
  10 AF0RW-HIST-BDT1 AF0RW-HIST-BDT1 ; 
  10 AF0RW-HIST-XDT1 AF0RW-HIST-XDT1 ; 
  10 AF0RW-HIST-BDT2 AF0RW-HIST-BDT2 ; 
  10 AF0RW-HIST-XDT2 AF0RW-HIST-XDT2 ; 
end // end AF0RW01

//*** RECORD=AF0RW02 ****
// Working Storage (2) for AF0R - Record Work Areas
// ***********************
Record AF0RW02 type basicRecord
  10 AF0RWDST AF0RWDST ; 
  10 AF0RWDDM AF0RWDDM ; 
  10 AF0RWDDV AF0RWDDV ; 
  10 AF0RWDOG AF0RWDOG ; 
  10 AF0RWSDI AF0RWSDI ; 
  10 AF0RWUPD AF0RWUPD ; 
  10 AF0RWCHG AF0RWCHG [14] ; 
  10 AF0RWRKY AF0RWRKY [14] ; 
  10 AF0RWRKS AF0RWRKS [14] ; 
  10 AF0RWRKO AF0RWRKO [14] ; 
  10 AF0RWRKM AF0RWRKM [14] ; 
  10 AF0RWRKV AF0RWRKV [14] ; 
  10 AF0RWRKE AF0RWRKE [14] ; 
  10 AF0RWRKR AF0RWRKR [14] ; 
  10 AF0RWRKA AF0RWRKA [14] ; 
  10 AF0RWBKP AF0RWBKP [14] ; 
  10 AF0RWCF1 AF0RWCF1 [14] ; 
  10 AF0RWCW1 AF0RWCW1 [14] ; 
  10 AF0RWCF2 AF0RWCF2 [14] ; 
  10 AF0RWCW2 AF0RWCW2 [14] ; 
  10 AF0RWCF3 AF0RWCF3 [14] ; 
  10 AF0RWCW3 AF0RWCW3 [14] ; 
  10 AF0RWCF4 AF0RWCF4 [14] ; 
  10 AF0RWCW4 AF0RWCW4 [14] ; 
  10 AF0RWCPR AF0RWCPR [14] ; 
  10 AF0RWCW5 AF0RWCW5 [14] ; 
  10 AF0RWCTL AF0RWCTL [14] ; 
  10 AF0RWCTW AF0RWCTW [14] ; 
  10 AF0RWCCT AF0RWCCT [14] ; 
end // end AF0RW02

//*** RECORD=AF0RW03 ****
// Working Storage (2) for AF0R - Record Work Areas
// ***********************
Record AF0RW03 type basicRecord
  10 AF0RWDPI AF0RWDPI ; 
  10 AF0RWTOT AF0RWTOT ; 
  10 AF0RWTF1 AF0RWTF1 ; 
  10 AF0RWTF2 AF0RWTF2 ; 
  10 AF0RWTF3 AF0RWTF3 ; 
  10 AF0RWTF4 AF0RWTF4 ; 
  10 AF0RWTF5 AF0RWTF5 ; 
  10 AF0RWHB1 AF0RWHB1 [12] ; 
  10 AF0RWHB2 AF0RWHB2 [12] ; 
  10 AF0RWHB3 AF0RWHB3 [12] ; 
  10 AF0RWHB4 AF0RWHB4 [12] ; 
  10 AF0RWHB5 AF0RWHB5 [12] ; 
  10 AF0RWHB6 AF0RWHB6 [12] ; 
  10 AF0RWHF1 AF0RWHF1 [12] ; 
  10 AF0RWHF2 AF0RWHF2 [12] ; 
  10 AF0RWHF3 AF0RWHF3 [12] ; 
  10 AF0RWHF4 AF0RWHF4 [12] ; 
  10 AF0RWHPR AF0RWHPR [12] ; 
  10 AF0RWHTL AF0RWHTL [12] ; 
end // end AF0RW03

Record AF0RW04 type basicRecord
  10 AF0RWVFL AF0RWVFL ; 
  10 AF0RWVFT AF0RWVFT ; 
  10 AF0RWUFF AF0RWUFF ; 
end // end AF0RW04

// AFMO Month
DataItem AF0RW-AFMO-MNTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season Months Table(AF-MO)
DataItem AF0RW-AFMO-TBLE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AFMO Year
DataItem AF0RW-AFMO-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work beg AFMO
DataItem AF0RW-BEG-AFMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season Beg Date Work Area
DataItem AF0RW-BEG-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work END AFMO
DataItem AF0RW-END-AFMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season END Date Work Area
DataItem AF0RW-END-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN-APRL-SESN-BDT-1
DataItem AF0RW-HIST-BDT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN-APRL-SESN-BDT-2
DataItem AF0RW-HIST-BDT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist. Mnth1
DataItem AF0RW-HIST-MNTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist. Mnth2
DataItem AF0RW-HIST-MNTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN-APRL-SESN-XDT-1
DataItem AF0RW-HIST-XDT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN-APRL-SESN-XDT-2
DataItem AF0RW-HIST-XDT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Season Table1
DataItem AF0RW-HIST-XSN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Season Table2
DataItem AF0RW-HIST-XSN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist. Yr1
DataItem AF0RW-HIST-YR1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Hist. Yr2
DataItem AF0RW-HIST-YR2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Last Month Index in Array
DataItem AF0RW-LATE-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order Need Date MM
DataItem AF0RWBDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order Need Date wk
DataItem AF0RWBDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order Need Date YY
DataItem AF0RWBDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Bookings Mult.
DataItem AF0RWBKP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start category save
DataItem AF0RWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Changed Count
DataItem AF0RWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Fut 1
DataItem AF0RWCF1 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Fut 2
DataItem AF0RWCF2 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Fut 3
DataItem AF0RWCF3 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Fut 4
DataItem AF0RWCF4 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change/valid indicator
DataItem AF0RWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data contention indicator
DataItem AF0RWCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// G/A,CAT,SIL Comb. flag
DataItem AF0RWCMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update confirm flag
DataItem AF0RWCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Fut 5
DataItem AF0RWCPR decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wk check pcent total
DataItem AF0RWCPT decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current style counter
DataItem AF0RWCSY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Fut Totals
DataItem AF0RWCTL decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut Totals
DataItem AF0RWCTW decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut 1
DataItem AF0RWCW1 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut 2
DataItem AF0RWCW2 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut 3
DataItem AF0RWCW3 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut 4
DataItem AF0RWCW4 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alt Saved Fut 5
DataItem AF0RWCW5 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved default XDM cd
DataItem AF0RWDDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved default XDV cd
DataItem AF0RWDDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved default XOW_OWN_GRP_CD
DataItem AF0RWDOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data processed indicator
DataItem AF0RWDPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved default style
DataItem AF0RWDST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style desc
DataItem AF0RWDSY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal date century
DataItem AF0RWDTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date dd
DataItem AF0RWDTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date mm
DataItem AF0RWDTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date wk area
DataItem AF0RWDTW num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date yy
DataItem AF0RWDTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist alpha as-of-date 1
DataItem AF0RWDX1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist alpha as-of-date 2
DataItem AF0RWDX2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// External date dd
DataItem AF0RWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date mm
DataItem AF0RWEDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date wk area
DataItem AF0RWEDW num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date yy
DataItem AF0RWEDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start gender/age save
DataItem AF0RWGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical pending actvty ind
DataItem AF0RWHAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist Qty Save Array - Fut 1
DataItem AF0RWHB1 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Qty Save Array - Fut 2
DataItem AF0RWHB2 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Qty Save Array - Fut 3
DataItem AF0RWHB3 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Qty Save Array - Fut 4
DataItem AF0RWHB4 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Qty Save Array - Fut 5
DataItem AF0RWHB5 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Qty Save Array - Totals
DataItem AF0RWHB6 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Category cd
DataItem AF0RWHCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical As-Of-Date (1)
DataItem AF0RWHD1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical As-Of-Date (2)
DataItem AF0RWHD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Data Select Ind
DataItem AF0RWHDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Division cd
DataItem AF0RWHDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist Pcent Save Array - Fut 1
DataItem AF0RWHF1 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Pcent Save Array - Fut 2
DataItem AF0RWHF2 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Pcent Save Array - Fut 3
DataItem AF0RWHF3 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist Pcent Save Array - Fut 4
DataItem AF0RWHF4 decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Gender/Age cd
DataItem AF0RWHGC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical XOW_OWN_GRP_CD
DataItem AF0RWHOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Pcent value
DataItem AF0RWHPC num(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Prod line cd
DataItem AF0RWHPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist Pcent Save Array - Fut 5
DataItem AF0RWHPR decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist prod TYPE save
DataItem AF0RWHPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Season cd (1)
DataItem AF0RWHS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Season cd (2)
DataItem AF0RWHS2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Silhouette cd
DataItem AF0RWHSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist season cd col hdg
DataItem AF0RWHSH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Style no.
DataItem AF0RWHST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical col hdgs wk area
DataItem AF0RWHSY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist Pcent Save Array - Totals
DataItem AF0RWHTL decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Season yr (1)
DataItem AF0RWHY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Season yr (2)
DataItem AF0RWHY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist season yr col hdg
DataItem AF0RWHYH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inactive/Space status ind
DataItem AF0RWIIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record retrieve loop ctr
DataItem AF0RWLCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style read ctr loop limit
DataItem AF0RWLIM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row select loop mode ind
DataItem AF0RWLIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error message wk area
DataItem AF0RWMNO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month table
DataItem AF0RWMTB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist data sel option val ind 1
DataItem AF0RWOP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist data sel option val ind 2
DataItem AF0RWOP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Adjusted percent value
DataItem AF0RWPCT num(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page size limit
DataItem AF0RWPGL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max page count
DataItem AF0RWPGM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current page count
DataItem AF0RWPGV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0RWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page start address
DataItem AF0RWPSA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pcent Select Data ind
DataItem AF0RWPSD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Rec Key - AFBNDTPR
DataItem AF0RWRKA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Rec Key - XSECD
DataItem AF0RWRKE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Rec Key - XDMCD
DataItem AF0RWRKM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved rec key - XOWCD
DataItem AF0RWRKO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Rec Key - XSNYR
DataItem AF0RWRKR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Rec Key - Style
DataItem AF0RWRKS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved Rec Key - XDVCD
DataItem AF0RWRKV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid Record Key indicator
DataItem AF0RWRKY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk historical as-of-date
DataItem AF0RWSAS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season yr date yy 2
DataItem AF0RWSD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season yr date cc
DataItem AF0RWSDC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Stored data indicator
DataItem AF0RWSDI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season yr date
DataItem AF0RWSDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved original XDVCD
DataItem AF0RWSDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season yr date yy
DataItem AF0RWSDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved original XGACD
DataItem AF0RWSGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette save
DataItem AF0RWSIL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved XOW_OWN_GRP_CD
DataItem AF0RWSOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XPCCD
DataItem AF0RWSPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XPLCD
DataItem AF0RWSPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XDRCD
DataItem AF0RWSPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style qualify flag
DataItem AF0RWSQU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XSECD
DataItem AF0RWSSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk historical season cd
DataItem AF0RWSSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XSUCD
DataItem AF0RWSSL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk historical season yr
DataItem AF0RWSSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alternate style number 1
DataItem AF0RWST1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate style number 2
DataItem AF0RWST2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style save
DataItem AF0RWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style select wk key
DataItem AF0RWSYK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical wk total Fut 1
DataItem AF0RWTF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical wk total Fut 2
DataItem AF0RWTF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical wk total Fut 3
DataItem AF0RWTF3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical wk total Fut 4
DataItem AF0RWTF4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical wk total Fut 5
DataItem AF0RWTF5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Qty Wk Total
DataItem AF0RWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total Pcent wk
DataItem AF0RWTPC decimal(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved override flag
DataItem AF0RWUFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// For update indicator
DataItem AF0RWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// updated data flag
DataItem AF0RWUPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start xxxuser save
DataItem AF0RWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved override flag
DataItem AF0RWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved override mult factor
DataItem AF0RWVFT decimal(3,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Valid select fld ind
DataItem AF0RWVLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Validation request ind
DataItem AF0RWVLI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style valid ind
DataItem AF0RWVST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start DIVISION save
DataItem AF0RWXDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XGACD
DataItem AF0RWXGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start XOW_OWN_GRP_CD
DataItem AF0RWXOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPCCD
DataItem AF0RWXPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start PR LINE  save
DataItem AF0RWXPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start PR TYPE  save
DataItem AF0RWXPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0RWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0RWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style row qualfication ind
DataItem AF0RWXST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XSUCD
DataItem AF0RWXSU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0RWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0RWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

