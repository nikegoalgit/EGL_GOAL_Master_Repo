package af0b;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPAF100;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSLC;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XDMCD;
import corpx1.XDVABRV;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGATBL;
import corpx1.XLCTBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XOWABRV;
import corpx2.XOWCD;
import corpy2.YSNTBL;
import pc.common.PC6REC;
import pc.common.PCYREC;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY5REC;
import ta.common.TA1REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0B ****
// This application is designed to enter forecast dollar amts
// for apparel forecasted styles. The user will be able to
// activate and inactivate certain styles for a particular
// season. Forecast dollar amounts for each active style can
// also be entered.
// 
// This application will maintain the Season/Style Database.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 05/08/89   JRAMOS   New application.
// 08/10/90   cross    fix div on update
// 04/12/93   Tdodso   changed status to update colors
// 06/28/93   LREIN    added in stock processing
// 12-16-93   LREIN    removed code that updated in stock qty
// 04-25-94   LREIN    Added code for corporate look (XOW '**')
// 02-08-95   kj       xsn -> ysn
// 02-24-97   AELKIN   Fixed style status update and display.
// 12-15-97   oricha   y2k modifications:  af0bs23, 112, 151,
//                     m001: zero fill xsnyr.
// 05-07-98   schen    block fcst dollar field from updating.
// 05-24-99   craymo   AB0S19 - added logic to disallow any
//                     data entry beyond SU 2000
// *********************
Program AF0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0BW01 AF0BW01; // record
  AF0BW02 AF0BW02; // record
  AF0BW03 AF0BW03; // record
  AF1REC AF1REC; // record
  AF2REC AF2REC; // record
  AF5REC AF5REC; // record
  AF9REC AF9REC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC6REC PC6REC; // record
  PCYREC PCYREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY5REC SY5REC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use AF0BM.AF0BM001, // form
  	AF0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/

    set AF0BW01 empty; /* Initialize working storage*/
    set AF0BW02 empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set AF9REC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set SY5REC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0BM001 initial; /* Initialize map output area*/

    AFWREC.AFWAPPL = "AF0B"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/

    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/


              /* (Initialize Style Tracking Limit Ctrs)*/

    AF0BW01.AF0BWCSY = +10; /* Map Detail max lines*/
    AF0BW01.AF0BWPGV = +1; /* Set style reference ptr at page 1*/


       /* (Define Map Environment, Assign/Edit Defaults)*/

    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process name*/


                      /* (Set Map Item Values)*/

    AF0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/


                      /* (Process Passed Items)*/

    if (XP1REC.XDVCD == " ")
      XP1REC.XDVCD = "01";
    end

    AF0BM001.PG1FCTCD = XP1REC.XXXUSER; /* Fcster to map*/
    AF0BM001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    AF0BM001.XSNYR = XP1REC.XSNYR; /* Season yr to map*/
    AF0BM001.XPRCD = XP1REC.XPRCD; /* Product type cd to map*/
    AF0BM001.XGACD = XP1REC.XGACD; /* Gender age cd to map*/
    AF0BM001.XPLCD = XP1REC.XPLCD; /* Product Line cd to map*/
    AF0BM001.XPCCD = XP1REC.XPCCD; /* Category cd to map*/
    AF0BM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd to map*/
    AF0BM001.XDVCD = XP1REC.XDVCD; /* Division cd to map*/
    AF0BM001.SY1STNBR = XP1REC.SY1STNBR; /* Style cd to map*/
    AF0BM001.AF0BMXOW = "00"; /* default owner group*/
    AF0BM001.XLCCD[1] = XP1REC.XLCCD[1]; /* Life cycle cd 1 to map*/
    AF0BM001.XLCCD[2] = XP1REC.XLCCD[2]; /* Life cycle cd 1 to map*/
    AF0BM001.XLCCD[3] = XP1REC.XLCCD[3]; /* Life cycle cd 1 to map*/
    AF0BM001.XLCCD[4] = XP1REC.XLCCD[4]; /* Life cycle cd 1 to map*/
    AF0BM001.AF0BM-BLNK-FL = "N"; /* blank only flag*/

    XP1REC.XXXUSER = " "; /* Clear Fcster code*/
    XP1REC.XSECD = " "; /* Clear Season cd*/
    XP1REC.XSNYR = 0; /* Clear Season yr*/
    XP1REC.XPRCD = " "; /* Clear Product type cd*/
    XP1REC.XGACD = " "; /* Clear Gender age cd*/
    XP1REC.XPLCD = " "; /* Clear Product line cd*/
    XP1REC.XPCCD = " "; /* Clear Category cd*/
    XP1REC.XSUCD = " "; /* Clear Silhouette cd*/
    XP1REC.XDVCD = " "; /* Clear Division cd*/
    XP1REC.SY1STNBR = " "; /* Clear Style cd*/
    XP1REC.XOWCD = " "; /* Clear owner group code*/
    XP1REC.XLCCD[1] = " "; /* clear life cyc*/
    XP1REC.XLCCD[2] = " "; /* clear life cyc*/
    XP1REC.XLCCD[3] = " "; /* clear life cyc*/
    XP1REC.XLCCD[4] = " "; /* clear life cyc*/

    XP1REC.XPRABRV = " "; /* Clear XPR abrv*/
    XP1REC.XGAABRV = " "; /* Clear XGA abrv*/
    XP1REC.XPLABRV = " "; /* Clear XPL abrv*/
    XP1REC.XPCABRV = " "; /* Clear XPC abrv*/
    XP1REC.XSUABRV = " "; /* Clear XSU abrv*/
    XP1REC.SY1SSTNM = " "; /* Clear Short Style abrv*/


                 /* (Protect,Dark Map Dtl Lines)*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 10) /* Protect/darken map display*/
      set AF0BM001.AF0BMSTA[AFWIDX5] skip, invisible; /* Row status*/
      set AF0BM001.AF0BMDIV[AFWIDX5] skip, invisible; /* Division*/
      set AF0BM001.AF0BMTYP[AFWIDX5] skip, invisible; /* Product type*/
      set AF0BM001.AF0BMGNA[AFWIDX5] skip, invisible; /* Gender/Age*/
      set AF0BM001.AF0BMLIN[AFWIDX5] skip, invisible; /* Product line*/
      set AF0BM001.AF0BMCAT[AFWIDX5] skip, invisible; /* Category*/
      set AF0BM001.AF0BMSIL[AFWIDX5] skip, invisible; /* Silhouette*/
      set AF0BM001.AF0BMSTY[AFWIDX5] skip, invisible; /* Style*/
      set AF0BM001.AF0BMSTN[AFWIDX5] skip, invisible; /* Style name*/
      set AF0BM001.SY5PRCUN[AFWIDX5] skip, invisible; /* Whsale price*/
      set AF0BM001.AF2FSTDL[AFWIDX5] skip, invisible; /* Fcst dlrs*/
      set AF0BM001.AF0BMFCU[AFWIDX5] skip, invisible; /* Fcst units*/
      set AF0BM001.XOWCD[AFWIDX5] skip, invisible; /* owner group*/
      set AF0BM001.AF0BMFOD[AFWIDX5] skip, invisible; /* First offer date*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    set AF0BM001.XSECD cursor; /* Set cursor position*/


                   /* (Converse Main Process)*/

    goto AF0B001; /* Main Process*/



    AF0B001: AF0B001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Apparel Fcst/Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AF0B001; /* Converse Apparel Fcst/Buy Prototype*/


  end // end main
end // end AF0B

// Choose which map to display
Function AF0B001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/



  AF0B110(); /* Obtain the data to display*/

  AF0B120(); /* Format and display the map*/

  AF0B130(); /* Check attention identifier*/

  AF0B140(); /* Reset fields to normal intensity*/

  AF0B150(); /* Verify the entered data*/

  AF0B160(); /* Process valid input request*/




end // end AF0B001

// Obtain the data to display
Function AF0B110()
   /* ------------------------------------------------------------*/
   /* If new keys not entered, select set style using old keys.*/
   /* if old keys entered, get new G/A, CAT and SIL combination;*/
      /* set select style using new keys.*/
   /* Obtain and store all styles associated with the current*/
      /* keys; format current map pages and rebuild reference*/
      /* pointers from the last style processed.*/
   /* ------------------------------------------------------------*/


   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/

  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || AF0BW01.AF0BWCNF == "Y"           /* Update confirm flag set*/
   || AF0BW01.AF0BWPND == "Y"           /* Pop-up window processing active*/
   || converseVar.eventKey is pa2       /* PA2 was pressed*/
   || converseVar.eventKey is pf14      /* PF14 was pressed*/
   || AFWREC.AFWFIRST == " "            /* First time through*/
   || AF9REC.AF9TYP99 == "Y"            /* Last TYP,G/A,LIN,CAT,SIL comb.*/
   || AF0BW01.AF0BWCIN == "Y")          /* Data contention detected*/
    return; /* Then exit to next process*/
  end

  if (AF0BW01.AF0BWCNF == "U") /* Update confirm flag set*/
    AF0BW01.AF0BWCNF = " ";
    return; /* Then exit to next process*/
  end




   /* *========================================================**/
   /* * Set Select Using Old TYP,G/A,LIN,CAT & SIL Combination **/
   /* * ... And Obtain Next Set of Styles from Current Keys    **/
   /* * HOWEVER, If Current Style/s in Map Just Updated,       **/
   /* *   Updated, then Set Start at Current Style             **/
   /* *   Reference Pointer.                                   **/
   /* *========================================================**/

  if (AFWREC.AFWSWR == "N") /* No new keys entered*/
    if (converseVar.eventKey is pf7 /* PF7 was pressed*/
     || converseVar.eventKey is pf8 /* or PF8 was pressed*/
     || converseVar.eventKey is enter) /* or Enter was pressed*/
      AF0BW01.AF0BWSYK = XP1REC.SY1STNBR; /* To sty work key*/
      AFWREC.AFWIDX3 = 0; /* Reset style map storage index*/
      AF0BW01.AF0BWSTC = 0; /* Reset loop ctr*/
      AF0BW01.AF0BWCTS = 0; /* Reset style count save*/
      AF0BW01.AF0BWPGM = AF0BW01.AF0BWPGV + 1; /* Set next ref ptr index*/
      AFWREC.AFWIXM = 1; /* Set map loop index*/
      while (AFWREC.AFWIXM <= 10) /* Clear map storage area*/
        AF0BW02.AF0BWCHG[AFWIXM] = " "; /* Change/Validation Flag*/
        AF0BW02.AF0BWSTA[AFWIXM] = " "; /* Status*/
        AF0BW02.AF0BWDIV[AFWIXM] = " "; /* DIV*/
        AF0BW02.AF0BWPRT[AFWIXM] = " "; /* PR TYP*/
        AF0BW02.AF0BWGNA[AFWIXM] = " "; /* G/A*/
        AF0BW02.AF0BWPRL[AFWIXM] = " "; /* PR LIN*/
        AF0BW02.AF0BWPCC[AFWIXM] = " "; /* PR CAT*/
        AF0BW02.AF0BWSLC[AFWIXM] = " "; /* SILH*/
        AF0BW02.AF0BWSTM[AFWIXM] = " "; /* Style*/
        AF0BW02.XOWCD[AFWIXM] = " "; /* owner group*/
        AF0BW02.AF0BWSTN[AFWIXM] = " "; /* Sty nm*/
        AF0BW02.AF0BWPRC[AFWIXM] = 0; /* Price*/
        AF0BW02.AF0BWFDL[AFWIXM] = 0; /* Dlrs*/
        AF0BW02.AF0BWFCU[AFWIXM] = 0; /* Units*/
        AF0BW02.AF0BWFOD[AFWIXM] = " "; /* First Offer Date*/
        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      end
      if (converseVar.eventKey is enter) /* enter*/
        XP1REC.SY1STNBR = AF0BM001.SY1STNBR; /* reset key*/
        XP1REC.XPRCD = AF0BM001.XPRCD; /* reset key*/
        XP1REC.XDVCD = AF0BM001.XDVCD; /* reset key*/
        XP1REC.XGACD = AF0BM001.XGACD; /* reset key*/
        XP1REC.XPLCD = AF0BM001.XPLCD; /* reset key*/
        XP1REC.XPCCD = AF0BM001.XPCCD; /* reset key*/
        XP1REC.XSUCD = AF0BM001.XSUCD; /* reset key*/
        XP1REC.XOWCD = AF0BM001.AF0BMXOW;
      end
    else
      if (converseVar.eventKey is pf15 /* PF15 (Next TYP Requested)*/
       || converseVar.eventKey is pf16 /* PF16 (Next G/A Requested)*/
       || converseVar.eventKey is pf17 /* PF17 (Next LIN Requested)*/
       || converseVar.eventKey is pf18 /* PF18 (Next CAT Requested)*/
       || converseVar.eventKey is pf19) /* PF19 (Next SILH Requested)*/
        AF0BW01.AF0BWCMS = "Y"; /* Get new TYP,G/A,LIN,CAT,SILH*/
        AF0BW01.AF0BWSYK = " "; /* Reset style to select*/
      else
        return; /* Exit to next process*/
      end
    end
  else

     /* *========================================**/
     /* * Set Select Using New Keys,             **/
     /* * ... And Obtain First Style of New Set  **/
     /* *========================================**/

    if (AFWREC.AFWSWR == "Y") /* New keys entered*/

      AF0BW01.AF0BWCMS = "Y"; /* Get new TYP,G/A,LIN,CAT,SIL comb.*/
      set AF9REC empty; /* Clear work record*/

      set AF0BW02 empty; /* Clear wk storage record*/
      AFWREC.AFWIDX3 = 0; /* Reset style map store index*/
      AF0BW01.AF0BWSTC = 0; /* Reset loop ctr*/
      AF0BW01.AF0BWCTS = 0; /* Reset style count save*/
      AF0BW01.AF0BWPGV = +1; /* Reset style reference ptr*/
      AF0BW01.AF0BWPGM = +2; /* Set next ref ptr index*/

      if (AF0BM001.SY1STNBR != " ") /* Particular style entered*/
        AF0BW01.AF0BWSYK = AF0BW01.SY1STNBR; /* To sty work key*/
      else
        AF0BW01.AF0BWSYK = AF0BM001.AF0BMSTY[1]; /* to sty work key*/
      end

    end

  end




   /* *========================================================**/
   /* * Obtain TYP,G/A,LIN,CAT,SILH combination                **/
   /* *========================================================**/

  if (AF0BW01.AF0BWCMS != " ") /* Obtain next or new comb.*/

    AF0BW01.AF0BWCMS = " "; /* Reset indicator*/
    AF0B111(); /* Obtain new TYP,G/A,LIN,CAT & SILH*/
                                   /* Comb*/

    if (AF9REC.AF9TYP99 == "Y") /* Last TYP retrieved*/
      return; /* Exit to next process*/
    end

  end




   /* *============================================**/
   /* * Select Style Rows, Store all valid styles  **/
   /* *============================================**/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    AF0B112(); /* Select Scan Style*/
  end


  if (converseVar.validationMsgNum == 0) /* No errors*/

    while (AF0BW01.AF0BWSTC <= AF0BW01.AF0BWCSY) /* Fill up map page*/
      AF0B113(); /* Get next(or current) valid style*/
    end

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
      AF0B114(); /* Close Select Scan cursor*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/

        AF0B114(); /* Close Select Scan cursor*/

        if ("99" in XPRTBL.XPRCD)
          sysVar.arrayIndex = sysVar.arrayIndex - 1;
          XP1REC.XPRCD = XPRTBL.XPRCD[sysVar.arrayIndex];
        end

        if ("99" in XGATBL.XGACD)
          sysVar.arrayIndex = sysVar.arrayIndex - 1;
          XP1REC.XGACD = XGATBL.XGACD[sysVar.arrayIndex];
        end

        if ("99" in XPLTBL.XPLCD)
          sysVar.arrayIndex = sysVar.arrayIndex - 1;
          XP1REC.XPLCD = XPLTBL.XPLCD[sysVar.arrayIndex];
        end

        if ("99" in XPCTBL.XPCCD)
          sysVar.arrayIndex = sysVar.arrayIndex - 1;
          XP1REC.XPCCD = XPCTBL.XPCCD[sysVar.arrayIndex];
        end

        if ("99" in XSUTBL.XSUCD)
          sysVar.arrayIndex = sysVar.arrayIndex - 1;
          XP1REC.XSUCD = XSUTBL.XSUCD[sysVar.arrayIndex];
        end

        if (AF0BW01.AF0BWCTS <= 0) /* No qualified style/s found*/
          converseLib.validationFailed(15); /* Indicate no data found*/
          AFWREC.AFWPRCSN = "110 "; /* Process number*/

          AFWREC.AFWIDX5 = 1; /* set loop index*/
          while (AFWREC.AFWIDX5 <= 10) /* protect, darken map fields*/
            set AF0BM001.AF0BMSTA[AFWIDX5] skip, invisible; /* status*/
            set AF0BM001.AF0BMDIV[AFWIDX5] skip, invisible; /* division*/
            set AF0BM001.AF0BMTYP[AFWIDX5] skip, invisible; /* pr typ*/
            set AF0BM001.AF0BMGNA[AFWIDX5] skip, invisible; /* g/a*/
            set AF0BM001.AF0BMLIN[AFWIDX5] skip, invisible; /* pr line*/
            set AF0BM001.AF0BMCAT[AFWIDX5] skip, invisible; /* pr cat*/
            set AF0BM001.AF0BMSIL[AFWIDX5] skip, invisible; /* silh*/
            set AF0BM001.AF0BMSTY[AFWIDX5] skip, invisible; /* style*/
            set AF0BM001.XOWCD[AFWIDX5] skip, invisible; /* owner group*/
            set AF0BM001.AF0BMSTN[AFWIDX5] skip, invisible; /* style name*/
            set AF0BM001.SY5PRCUN[AFWIDX5] skip, invisible; /* whlsl price*/
            set AF0BM001.AF2FSTDL[AFWIDX5] skip, invisible; /* fcst style $*/
            set AF0BM001.AF0BMFCU[AFWIDX5] skip, invisible;
                                   /* fcst style unts*/
            set AF0BM001.AF0BMFOD[AFWIDX5] skip, invisible; /* 1st offer date*/
            AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* loop through*/
          end

          set AF0BM001.XSECD cursor; /* set cursor position*/

        end

      end

    end

  end




   /* *=========================================================**/
   /* * Check Obtain Data Status, Inactivate All Loop Controls  **/
   /* *=========================================================**/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0BW01.AF0BWCTS = 0; /* Reset style count save*/
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
  end


  AF0BW01.AF0BWCNF = "N"; /* Reset update confirm flag*/



end // end AF0B110

// Get new G/A, CAT & SIL Comb.
Function AF0B111()
   /* ------------------------------------------------------------*/
   /* Get new TYP, G/A, LIN, CAT and SILH combination*/
   /* ------------------------------------------------------------*/


   /* *==========================================**/
   /* *  Obtain Next Combination for Processing  **/
   /* *==========================================**/

  AF9REC.XPRCD = XP1REC.XPRCD; /* Product Type cd*/
  AF9REC.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
  AF9REC.XPLCD = XP1REC.XPLCD; /* Product Line cd*/
  AF9REC.XPCCD = XP1REC.XPCCD; /* Category cd*/
  AF9REC.XSUCD = XP1REC.XSUCD; /* Sihouette cd*/

  XPAF100(); /* Combination retrieval rtn*/

  XP1REC.XPRCD = XPRTBL.XPRCD[AF9TPIXM]; /* Save to wk storage*/
  AF0BW01.AF0BWXPR = XPRTBL.XPRCD[AF9TPIXM]; /* Save internal start*/
  XP1REC.XPRDESC = XPRTBL.XPRDESC[AF9TPIXM]; /* Save to wk storage*/
  XP1REC.XPRABRV = XPRTBL.XPRABRV[AF9TPIXM]; /* Save to wk storage*/

  XP1REC.XGACD = XGATBL.XGACD[AF9GAIXM]; /* Save to wk storage*/
  AF0BW01.AF0BWXGA = XGATBL.XGACD[AF9GAIXM]; /* Save internal start*/
  XP1REC.XGADESC = XGATBL.XGADESC[AF9GAIXM]; /* Save to wk storage*/
  XP1REC.XGAABRV = XGATBL.XGAABRV[AF9GAIXM]; /* Save to wk storage*/

  XP1REC.XPLCD = XPLTBL.XPLCD[AF9LNIXM]; /* Save to wk storage*/
  AF0BW01.AF0BWXPL = XPLTBL.XPLCD[AF9LNIXM]; /* Save internal start*/
  XP1REC.XPLDESC = XPLTBL.XPLDESC[AF9LNIXM]; /* Save to wk storage*/
  XP1REC.XPLABRV = XPLTBL.XPLABRV[AF9LNIXM]; /* Save to wk storage*/

  XP1REC.XPCCD = XPCTBL.XPCCD[AF9PCIXM]; /* Save to wk storage*/
  AF0BW01.AF0BWXPC = XPCTBL.XPCCD[AF9PCIXM]; /* Save internal start*/
  XP1REC.XPCDESC = XPCTBL.XPCDESC[AF9PCIXM]; /* Save to wk storage*/
  XP1REC.XPCABRV = XPCTBL.XPCABRV[AF9PCIXM]; /* Save to wk storage*/

  XP1REC.XSUCD = XSUTBL.XSUCD[AF9SUIXM]; /* Save to wk storage*/
  AF0BW01.AF0BWXSU = XSUTBL.XSUCD[AF9SUIXM]; /* Save internal start*/
  XP1REC.XSUDESC = XSUTBL.XSUDESC[AF9SUIXM]; /* Save to wk storage*/
  XP1REC.XSUABRV = XSUTBL.XSUABRV[AF9SUIXM]; /* Save to wk storage*/



   /* *================================**/
   /* *  Check for Last TYP Retrieved  **/
   /* *================================**/

  if (AF9REC.AF9TYP99 == "Y") /* Last Product Type cd retrieved*/

    if (AFWREC.AFWIDX3 == 0) /* No map dtl lines built*/
      AFWREC.AFWNMO = 15; /* Indicate no more data*/
      AFWREC.AFWPRCSN = "111 "; /* Process number*/
    end

  end



end // end AF0B111

// Select set style
Function AF0B112()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AF2REC empty; /* Reset rec work area*/

  AF2REC.XPRCD = XP1REC.XPRCD; /* XPR cd*/
  AF2REC.XGACD = XP1REC.XGACD; /* XGA cd*/
  AF2REC.XPLCD = XP1REC.XPLCD; /* XPL cd*/
  AF2REC.XPCCD = XP1REC.XPCCD; /* XPC cd*/
  AF2REC.XSUCD = XP1REC.XSUCD; /* XSU cd*/
  AF2REC.XDVCD = XP1REC.XDVCD; /* xdvcd*/
  AF2REC.SY1STNBR = AF0BW01.AF0BWSYK; /* Style no.*/
  AF2REC.SY4SZSCL = "**"; /* Size scale cd*/
  AF2REC.AF2FSTST = "*"; /* Forecast status*/

  if (AF0BM001.AF0BMXOW == " ")
    AF2REC.XOWCD = "**";
  else
    AF2REC.XOWCD = AF0BM001.AF0BMXOW;
  end
  if (XP1REC.XXXUSER == " ") /* No user specified*/
    AF2REC.PG1FCTCD = "**"; /* Get all users*/
  else
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
  end

  AF0BW01.AF0BWXSY = 0; /* Reset xsnyr wk area*/
  AF0BW01.AF0BWXSY = XP1REC.XSNYR; /* Move to wk area*/
   /* ----------------------y2k out begin ------------------*/
   /* AF0BW01.AF0BWXSY = AF0BW01.AF0BWXSY + 1900;/* Add century*/
   /* ----------------------y2k out end --------------------*/
   /* ----------------------y2k in  begin ------------------*/
  if (AF0BW01.AF0BWXSY < 1900) /* no ccyy built yet*/
    if (AF0BW01.AF0BWXSY > 60)
      AF0BW01.AF0BWXSY = AF0BW01.AF0BWXSY + 1900; /* Add century*/
    else
      AF0BW01.AF0BWXSY = AF0BW01.AF0BWXSY + 2000; /* Add century*/
    end
  end
   /* ----------------------y2k in end ---------------------*/
  AF2REC.XSNYR = AF0BW01.AF0BWXSY; /* XSE yr*/

  AF2REC.XSECD = XP1REC.XSECD; /* XSE cd*/



   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFSTY01  **/
   /* *====================================**/

  try
    call "IO3510" ("SS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "112 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0B112

// Process selected styles
Function AF0B113()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/

   /* This processing loop will continue until all styles to fit*/
     /* a map page PLUS one more style (Serving as the FORWARD*/
     /* reference pointer) is retrieved. Styles 1 through 12 will*/
     /* be formatted into the current page, while style 13 will*/
     /* be stored to serve as a reference pointer (Start) for the*/
     /* NEXT page. Note that Style 13 also serves as a BACKWARD*/
     /* reference pointer since it always indicates the start*/
     /* point in obtaining styles for the current page being*/
     /* processed.*/

   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO3510" ("SN", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If call successful, store style forecast data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

                   /* ( Row Found )*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

       /* ******* Added for IOMOD Changes  *********/
      XP1REC.XPRCD = AF2REC.XPRCD; /* Update current xprcd*/
      XP1REC.XGACD = AF2REC.XGACD; /* Update current xgacd*/
      XP1REC.XPLCD = AF2REC.XPLCD; /* Update current xplcd*/
      XP1REC.XPCCD = AF2REC.XPCCD; /* Update current xpccd*/
      XP1REC.XSUCD = AF2REC.XSUCD; /* Update current xsucd*/
      XP1REC.XDVCD = AF2REC.XDVCD; /* Update current xdvcd*/
       /* ******************************************/

      if (XP1REC.PG1FCTCD == " " /* Get all forecasters*/
       || AF2REC.PG1FCTCD == XP1REC.PG1FCTCD) /* Check forecaster cd*/

        if (AF0BM001.AF0BMXOW != " " /* get specific owner groups*/
         && AF0BM001.AF0BMXOW != "**") /* corporate look*/
          if (AF2REC.XOWCD != AF0BM001.AF0BMXOW) /* no match*/
            return; /* dont process this row*/
          end
        end

        if (AF0BW01.XXXSTAT == " " /* Get all statuses*/
         || AF0BW01.XXXSTAT == "A" /* Active status requested*/
         || AF2REC.AF2FSTST == AF0BW01.XXXSTAT) /* Check status cd*/

          if (AF0BW01.XXXSTAT == "A") /* Active status requested*/
            if (AF2REC.AF2FSTST != "N" /* Row status cd not new*/
             && AF2REC.AF2FSTST != "A") /* Row status cd not active*/
              return; /* Loop through (Bypass Style row)*/
            end
          end

          AF0BW01.AF0BWSQU = " "; /* Reset style qual ind*/
          AF0BS01(); /* Check if style qualified for*/
                                   /* processing*/

          if (AF0BW01.AF0BWSQU == "Y") /* Style is qualified*/
            AF0BS02(); /* Process qualified style*/
            AF0BW01.AF0BWSTC = AF0BW01.AF0BWSTC + 1; /* Add to Loop ctr*/
          end

          return; /* Loop through (Style selected)*/

        else

          return; /* Loop through (Bypass Style row)*/

        end


      else

        return; /* Loop through (Bypass Style row)*/

      end

    else

                      /* ( Row Not Found )*/

      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/

        AF0BW01.AF0BWCTS = AF0BW01.AF0BWSTC; /* Save style count*/
        AF0BW01.AF0BWSTC = +9999; /* Force loop termination.*/
        AF0BW02.AF0BWRPT[AF0BWPGM] = "END***"; /* Mark last style*/
        return; /* Return to calling process*/

      end

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "113 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0B113

// Close style cursor
Function AF0B114()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3510" ("CS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "114 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0B114

// Format and display the map
Function AF0B120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/


  if (AF0BW01.AF0BWPND != "Y" /* No pop-up windows active*/
   && AFWREC.AFWFIRST != " ") /* or Not the first time*/

    if (converseVar.validationMsgNum == 0 /* No error found*/
     && converseVar.eventKey not pf14)    /* Status change not requested*/

      AF0B121(); /* Format the data on the map*/

    else

      AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AF0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0BM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0BM001.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end


  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0BM001 alarm; /* Indicate sound alarm*/
  end


  converse AF0BM001 ;


   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/

  AFWREC.AFWNMO = 0; /* Info message number*/

  COMMAREA.CATOAP = AF0BM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0BM001.CAITEM; /* Application data*/


   /* ----------------------------------------------------------*/
    /* Reset AF9REC First Time Through, Contention Indicators*/
   /* ----------------------------------------------------------*/

  AF9REC.AF9FSTID = "Y"; /* Fst time indicator to 'Y'(es)*/
  AF0BW01.AF0BWCIN = " "; /* Reset Data Contention indicator*/



end // end AF0B120

// Format screen/page
Function AF0B121()

   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/

  set AF0BM001 initial; /* M001 input/output area*/



   /* *===============================**/
   /* *  Check Security Requirements  **/
   /* *===============================**/

  if (COMMAREA.CACHGFL == "N" /* User not allowed to update*/
   || AFWREC.AFWIDX3 == 0)    /* No Style rows exist*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 10) /* Protect enterable field*/
      set AF0BM001.AF2FSTDL[AFWIDX5] skip; /* Forecast dlr fld*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

  end


   /* *=====================**/
   /* *  Format Map Header  **/
   /* *=====================**/

                /* (Format Header Start Flds)*/
  AF0BM001.PG1FCTCD = AF0BW01.AF0BWUSR; /* Forecaster id*/
  AF0BM001.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0BM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0BM001.XLCCD[1] = AF0BW01.AF0BWLCD[1]; /* life cycle codes*/
  AF0BM001.XLCCD[2] = AF0BW01.AF0BWLCD[2]; /* life cycle codes*/
  AF0BM001.XLCCD[3] = AF0BW01.AF0BWLCD[3]; /* life cycle codes*/
  AF0BM001.XLCCD[4] = AF0BW01.AF0BWLCD[4]; /* life cycle codes*/
  AF0BM001.XDVCD = AF0BW01.XDVCD; /* Start DIV cd*/
  AF0BM001.XPRCD = AF0BW01.AF0BWTYP; /* Start TYP cd*/
  AF0BM001.XGACD = AF0BW01.AF0BWGA; /* Start G/A cd*/
  AF0BM001.XPLCD = AF0BW01.AF0BWLIN; /* Start LIN cd*/
  AF0BM001.XPCCD = AF0BW01.AF0BWCAT; /* Start CAT cd*/
  AF0BM001.XSUCD = AF0BW01.AF0BWSIL; /* Start SIL cd*/
  AF0BM001.SY1STNBR = AF0BW01.AF0BWSTY; /* Start Style no.*/
  AF0BM001.AF0BMXOW = AF0BW01.AF0BWXOW; /* owner group*/
  AF0BM001.XXXSTAT = AF0BW01.AF0BWSTS; /* Start Status no.*/

             /* (Format Header Description Flds)*/
  AF0BM001.XDVABRV = AF0BW01.XDVABRV; /* DIV abrv*/
  AF0BM001.XPRABRV = AF0BW01.AF0BWAPR; /* TYP abrv*/
  AF0BM001.XGAABRV = AF0BW01.AF0BWAGA; /* G/A abrv*/
  AF0BM001.XPLABRV = AF0BW01.AF0BWAPL; /* LIN abrv*/
  AF0BM001.XPCABRV = AF0BW01.AF0BWAPC; /* CAT abrv*/
  AF0BM001.XSUABRV = AF0BW01.AF0BWASL; /* SIL abrv*/
  AF0BM001.AF0BMSDC = AF0BW01.AF0BWSTD; /* Active abrv*/
  AF0BM001.XOWABRV = AF0BW01.XOWABRV; /* owner group abrv*/
  AF0BM001.AF0BM-BLNK-FL = AF0BW01.AF0BW-BLNK-FL; /* blank only ind*/



   /* *=============================**/
   /* *  Process Color Detail Recs  **/
   /* *=============================**/


  if (AFWREC.AFWIDX3 <= 0) /* No style rows exist*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 10) /* Protect,dark map dtl flds*/
      set AF0BM001.AF0BMSTA[AFWIDX5] skip, invisible; /* Status*/
      set AF0BM001.AF0BMDIV[AFWIDX5] skip, invisible; /* DIV*/
      set AF0BM001.AF0BMTYP[AFWIDX5] skip, invisible; /* TYP*/
      set AF0BM001.AF0BMGNA[AFWIDX5] skip, invisible; /* G/A*/
      set AF0BM001.AF0BMLIN[AFWIDX5] skip, invisible; /* LIN*/
      set AF0BM001.AF0BMCAT[AFWIDX5] skip, invisible; /* Category*/
      set AF0BM001.AF0BMSIL[AFWIDX5] skip, invisible; /* Silhouette*/
      set AF0BM001.AF0BMSTY[AFWIDX5] skip, invisible; /* Style*/
      set AF0BM001.XOWCD[AFWIDX5] skip, invisible; /* owner group*/
      set AF0BM001.AF0BMSTN[AFWIDX5] skip, invisible; /* Style name*/
      set AF0BM001.SY5PRCUN[AFWIDX5] skip, invisible; /* Whlesale price*/
      set AF0BM001.AF2FSTDL[AFWIDX5] skip, invisible; /* Fcst style dlrs*/
      set AF0BM001.AF0BMFCU[AFWIDX5] skip, invisible; /* Fcst style units*/
      set AF0BM001.AF0BMFOD[AFWIDX5] skip, invisible; /* First offer date*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    set AF0BM001.XSECD cursor; /* Set cursor position*/

    if (converseVar.eventKey is pf7 /* Page back requested*/
     || converseVar.eventKey is pf8) /* Page forward requested*/

      converseLib.validationFailed(4); /* Invalid request*/
      AFWREC.AFWPRCSN = "121 "; /* Process number*/

      return; /* Exit to redisplay map*/

    end

  end



  if (AFWREC.AFWIDX3 > 0) /* Style rows exist*/


     /* *================================**/
     /* *  Move Page Detail Flds to Map  **/
     /* *================================**/

    AFWREC.AFWIXM = 1; /* Set map loop index*/

    while (AFWREC.AFWIXM <= AFWREC.AFWIDX3) /* Fill up page*/

      AF0BM001.AF0BMSTA[AFWIXM] = AF0BW02.AF0BWSTA[AFWIXM]; /* Status*/
      AF0BM001.AF0BMDIV[AFWIXM] = AF0BW02.AF0BWDIV[AFWIXM]; /* DIV*/
      AF0BM001.AF0BMTYP[AFWIXM] = AF0BW02.AF0BWPRT[AFWIXM]; /* TYP*/
      AF0BM001.AF0BMGNA[AFWIXM] = AF0BW02.AF0BWGNA[AFWIXM]; /* G/A*/
      AF0BM001.AF0BMLIN[AFWIXM] = AF0BW02.AF0BWPRL[AFWIXM]; /* LIN*/
      AF0BM001.AF0BMCAT[AFWIXM] = AF0BW02.AF0BWPCC[AFWIXM]; /* Cat*/
      AF0BM001.AF0BMSIL[AFWIXM] = AF0BW02.AF0BWSLC[AFWIXM]; /* Silh*/
      AF0BM001.AF0BMSTY[AFWIXM] = AF0BW02.AF0BWSTM[AFWIXM]; /* Style*/
      AF0BM001.XOWCD[AFWIXM] = AF0BW02.XOWCD[AFWIXM]; /* owner group*/
      AF0BM001.AF0BMSTN[AFWIXM] = AF0BW02.AF0BWSTN[AFWIXM]; /* Sty nm*/
      AF0BM001.SY5PRCUN[AFWIXM] = AF0BW02.AF0BWPRC[AFWIXM]; /* Price*/
      AF0BM001.AF2FSTDL[AFWIXM] = AF0BW02.AF0BWFDL[AFWIXM]; /* Dlrs*/

      if (AF0BM001.XOWCD[AFWIXM] == "**")
        set AF0BM001.AF2FSTDL[AFWIXM] skip; /* cant update*/
      end

      AF0BM001.AF0BMFCU[AFWIXM] = AF0BW02.AF0BWFCU[AFWIXM]; /* Units*/
      AF0BM001.AF0BMFOD[AFWIXM] = AF0BW02.AF0BWFOD[AFWIXM]; /* F O D*/

      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

    end


     /* *=====================================**/
     /* *  Suppress Duplicate Control Fields  **/
     /* *=====================================**/

    AFWREC.AFWIXM = 2; /* Set map loop index*/

    AF0BW01.AF0BWSPR = AF0BW02.AF0BWPRT[1]; /* Move to save fld*/
    AF0BW01.AF0BWSGA = AF0BW02.AF0BWGNA[1]; /* Move to save fld*/
    AF0BW01.AF0BWSPL = AF0BW02.AF0BWPRL[1]; /* Move to save fld*/
    AF0BW01.AF0BWSPC = AF0BW02.AF0BWPCC[1]; /* Move to save fld*/
    AF0BW01.AF0BWSSU = AF0BW02.AF0BWSLC[1]; /* Move to save fld*/
    AF0BW01.AF0BWSDV = AF0BW02.AF0BWDIV[1]; /* DIV*/

    while (AFWREC.AFWIXM <= AFWREC.AFWIDX3) /* Suppress Dup G/A,CAT,SIL*/


      if (AF0BM001.AF0BMSIL[AFWIXM] == AF0BW01.AF0BWSSU) /* Silh*/
        AF0BM001.AF0BMSIL[AFWIXM] = " "; /* Suppress Silh*/
      else
        AF0BW01.AF0BWSSU = AF0BW02.AF0BWSLC[AFWIXM]; /* Save Silh*/
      end


      if (AF0BM001.AF0BMCAT[AFWIXM] == AF0BW01.AF0BWSPC) /* Cat*/
        AF0BM001.AF0BMCAT[AFWIXM] = " "; /* Suppress Cat*/
      else
        AF0BW01.AF0BWSPC = AF0BW02.AF0BWPCC[AFWIXM]; /* Save Cat*/
      end


      if (AF0BM001.AF0BMLIN[AFWIXM] == AF0BW01.AF0BWSPL) /* PR LIN*/
        AF0BM001.AF0BMLIN[AFWIXM] = " "; /* Suppress PR LIN*/
      else
        AF0BW01.AF0BWSPL = AF0BW02.AF0BWPRL[AFWIXM]; /* Save PR LIN*/
      end


      if (AF0BM001.AF0BMGNA[AFWIXM] == AF0BW01.AF0BWSGA) /* G/A*/
        AF0BM001.AF0BMGNA[AFWIXM] = " "; /* Suppress G/A*/
      else
        AF0BW01.AF0BWSGA = AF0BW02.AF0BWGNA[AFWIXM]; /* Save G/A*/
      end


      if (AF0BM001.AF0BMTYP[AFWIXM] == AF0BW01.AF0BWSPR) /* PR TYP*/
        AF0BM001.AF0BMTYP[AFWIXM] = " "; /* Suppress PR TYP*/
      else
        AF0BW01.AF0BWSPR = AF0BW02.AF0BWPRT[AFWIXM]; /* Save PR TYP*/
      end

      if (AF0BM001.AF0BMDIV[AFWIXM] == AF0BW01.AF0BWSDV) /* division*/
        AF0BM001.AF0BMDIV[AFWIXM] = " "; /* Suppress division*/
      else
        AF0BW01.AF0BWSDV = AF0BW02.AF0BWDIV[AFWIXM]; /* Save division*/
      end


      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

    end



     /* *===================**/
     /* *  Position Cursor  **/
     /* *===================**/

    if ((COMMAREA.CACHGFL == "Y" /* Updates allowed*/
     || COMMAREA.CAADDFL == "Y") /* Adds allowed*/
     && AF0BM001.XOWCD[1] != "**") /* corporate look*/

      if (converseVar.eventKey is pf14) /* Status update req*/
        set AF0BM001.AF0BMSTA[1] cursor; /* Position cursor*/
      /* ELSE;*/
      /* SET AF0BM001.AF2FSTDL(1) CURSOR;/* Position cursor*/
      end

    else /* (No updates or adds allowed)*/

      set AF0BM001.XSECD cursor; /* Position cursor*/

    end


     /* *============================================**/
     /* *  Set Protect,Dark All Unused Detail Lines  **/
     /* *============================================**/

    if (AFWREC.AFWIDX3 < 10) /* Page not full*/

      AFWREC.AFWIXM = AFWREC.AFWIDX3 + 1; /* Set loop index start*/

      while (AFWREC.AFWIXM <= 10) /* Dark,prot unused lines*/

        set AF0BM001.AF0BMSTA[AFWIXM] skip, invisible; /* Status*/
        set AF0BM001.AF0BMDIV[AFWIXM] skip, invisible; /* DIV*/
        set AF0BM001.AF0BMTYP[AFWIXM] skip, invisible; /* PR TYP*/
        set AF0BM001.AF0BMGNA[AFWIXM] skip, invisible; /* G/A*/
        set AF0BM001.AF0BMLIN[AFWIXM] skip, invisible; /* PR LIN*/
        set AF0BM001.AF0BMCAT[AFWIXM] skip, invisible; /* Cat*/
        set AF0BM001.AF0BMSIL[AFWIXM] skip, invisible; /* Silh*/
        set AF0BM001.AF0BMSTY[AFWIXM] skip, invisible; /* Style*/
        set AF0BM001.XOWCD[AFWIXM] skip, invisible; /* owner group*/
        set AF0BM001.AF0BMSTN[AFWIXM] skip, invisible; /* Style nm*/
        set AF0BM001.SY5PRCUN[AFWIXM] skip, invisible; /* Price*/
        set AF0BM001.AF2FSTDL[AFWIXM] skip, invisible; /* Dlrs*/
        set AF0BM001.AF0BMFCU[AFWIXM] skip, invisible; /* Units*/
        set AF0BM001.AF0BMFOD[AFWIXM] skip, invisible; /* First offer date*/

        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

      end

    end


  end



end // end AF0B121

// Check attention identifier
Function AF0B130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/



  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AF0BM001 initial; /* Clear the map fields*/

    if (AFWREC.AFWIDX3 == 0) /* No style row/s existing*/

      AFWREC.AFWIXM = 1; /* Reset loop index*/

      while (AFWREC.AFWIXM <= 10) /* Dark,prot unused lines*/

        set AF0BM001.AF0BMSTA[AFWIXM] skip, invisible; /* Status*/
        set AF0BM001.AF0BMDIV[AFWIXM] skip, invisible; /* DIV*/
        set AF0BM001.AF0BMTYP[AFWIXM] skip, invisible; /* PR TYP*/
        set AF0BM001.AF0BMGNA[AFWIXM] skip, invisible; /* G/A*/
        set AF0BM001.AF0BMLIN[AFWIXM] skip, invisible; /* PR LIN*/
        set AF0BM001.AF0BMCAT[AFWIXM] skip, invisible; /* Cat*/
        set AF0BM001.AF0BMSIL[AFWIXM] skip, invisible; /* Silh*/
        set AF0BM001.AF0BMSTY[AFWIXM] skip, invisible; /* Style*/
        set AF0BM001.XOWCD[AFWIXM] skip, invisible; /* owner group*/
        set AF0BM001.AF0BMSTN[AFWIXM] skip, invisible; /* Style nm*/
        set AF0BM001.SY5PRCUN[AFWIXM] skip, invisible; /* Price*/
        set AF0BM001.AF2FSTDL[AFWIXM] skip, invisible; /* Dlrs*/
        set AF0BM001.AF0BMFCU[AFWIXM] skip, invisible; /* Units*/
        set AF0BM001.AF0BMFOD[AFWIXM] skip, invisible; /* First Offer Date*/

        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

      end

    end

    exit stack; /* Exit to redisplay map*/

  end



  if (AF0BM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0BM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0BM001.CAITEM; /* Application data*/

      XP1REC.XPRCD = AF0BW01.AF0BWTYP; /* Restore start XPRCD*/
      XP1REC.XGACD = AF0BW01.AF0BWGA; /* Restore start XGACD*/
      XP1REC.XPLCD = AF0BW01.AF0BWLIN; /* Restore start XPLCD*/
      XP1REC.XPCCD = AF0BW01.AF0BWCAT; /* Restore start XPCCD*/
      XP1REC.XSUCD = AF0BW01.AF0BWSIL; /* Restore start XSUCD*/
      XP1REC.SY1STNBR = AF0BW01.SY1STNBR; /* Restore start style*/
      XP1REC.XDVCD = AF0BW01.XDVCD; /* Restore start xdvcd*/
      XP1REC.XLCCD[1] = AF0BM001.XLCCD[1]; /* restore life cyc*/
      XP1REC.XLCCD[2] = AF0BM001.XLCCD[2]; /* restore life cyc*/
      XP1REC.XLCCD[3] = AF0BM001.XLCCD[3]; /* restore life cyc*/
      XP1REC.XLCCD[4] = AF0BM001.XLCCD[4]; /* restore life cyc*/

      AF0BW01.AF0BWTYP = " "; /* Clear start XPRCD*/
      AF0BW01.AF0BWGA = " "; /* Clear start XGACD*/
      AF0BW01.AF0BWLIN = " "; /* Clear start XPLCD*/
      AF0BW01.AF0BWCAT = " "; /* Clear start XPCCD*/
      AF0BW01.AF0BWSIL = " "; /* Clear start XSUCD*/
      AF0BW01.XDVCD = " "; /* Clear start xdvcd*/
      AF0BW01.SY1STNBR = " "; /* Clear start style*/
      AF0BW01.AF0BWAPR = " "; /* Clear TYP abrv*/
      AF0BW01.AF0BWAGA = " "; /* Clear G/A abrv*/
      AF0BW01.AF0BWAPL = " "; /* Clear LIN abrv*/
      AF0BW01.AF0BWAPC = " "; /* Clear CAT abrv*/
      AF0BW01.AF0BWASL = " "; /* Clear SIL abrv*/
      AF0BW01.AF0BWASY = " "; /* Clear Short Style abrv*/
      AF0BW01.XDVABRV = " "; /* Clear xdvabrv*/
      AF0BW01.AF0BWLCD[1] = " "; /* Clear life cycle*/
      AF0BW01.AF0BWLCD[2] = " "; /* Clear life cycle*/
      AF0BW01.AF0BWLCD[3] = " "; /* Clear life cycle*/
      AF0BW01.AF0BWLCD[4] = " "; /* Clear life cycle*/

      XSAFS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AF0BM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AF0BM001.CAITEM > " ") /* Application data was entered*/
    set AF0BM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0BM001"; /* Appl find code*/
    end

    XP1REC.XPRCD = AF0BW01.AF0BWTYP; /* Restore start XPRCD*/
    XP1REC.XGACD = AF0BW01.AF0BWGA; /* Restore start XGACD*/
    XP1REC.XPLCD = AF0BW01.AF0BWLIN; /* Restore start XPLCD*/
    XP1REC.XPCCD = AF0BW01.AF0BWCAT; /* Restore start XPCCD*/
    XP1REC.XSUCD = AF0BW01.AF0BWSIL; /* Restore start XSUCD*/
    XP1REC.SY1STNBR = AF0BW01.SY1STNBR; /* Restore start style*/
    XP1REC.XDVCD = AF0BW01.XDVCD; /* Restore start xdvcd*/
    XP1REC.XLCCD[1] = AF0BW01.AF0BWLCD[1]; /* Restore life cyc*/
    XP1REC.XLCCD[2] = AF0BW01.AF0BWLCD[2]; /* Restore life cyc*/
    XP1REC.XLCCD[3] = AF0BW01.AF0BWLCD[3]; /* Restore life cyc*/
    XP1REC.XLCCD[4] = AF0BW01.AF0BWLCD[4]; /* Restore life cyc*/

    XP1REC.XPRABRV = AF0BW01.AF0BWAPR; /* PR TYP abrv*/
    XP1REC.XGAABRV = AF0BW01.AF0BWAGA; /* G/A abrv*/
    XP1REC.XPLABRV = AF0BW01.AF0BWAPL; /* PR LIN abrv*/
    XP1REC.XPCABRV = AF0BW01.AF0BWAPC; /* CAT abrv*/
    XP1REC.XSUABRV = AF0BW01.AF0BWASL; /* SIL abrv*/
    XP1REC.XDVABRV = AF0BW01.XDVABRV; /* xdvcd-abrv*/

    AF0BW01.AF0BWTYP = " "; /* Clear start XPRCD*/
    AF0BW01.AF0BWGA = " "; /* Clear start XGACD*/
    AF0BW01.AF0BWLIN = " "; /* Clear start XPLCD*/
    AF0BW01.AF0BWCAT = " "; /* Clear start XPCCD*/
    AF0BW01.AF0BWSIL = " "; /* Clear start XSUCD*/
    AF0BW01.SY1STNBR = " "; /* Clear start style*/
    AF0BW01.XDVCD = " "; /* Clear start xdvcd*/
    AF0BW01.AF0BWLCD[1] = " "; /* Clear life cycle*/
    AF0BW01.AF0BWLCD[2] = " "; /* Clear life cycle*/
    AF0BW01.AF0BWLCD[3] = " "; /* Clear life cycle*/
    AF0BW01.AF0BWLCD[4] = " "; /* Clear life cycle*/
    AF0BW01.AF0BWAPR = " "; /* Clear PR TYP abrv*/
    AF0BW01.AF0BWAGA = " "; /* Clear G/A abrv*/
    AF0BW01.AF0BWAPL = " "; /* Clear PR LIN abrv*/
    AF0BW01.AF0BWAPC = " "; /* Clear CAT abrv*/
    AF0BW01.AF0BWASL = " "; /* Clear SIL abrv*/
    AF0BW01.AF0BWASY = " "; /* Clear Short Style abrv*/
    AF0BW01.XDVABRV = " "; /* Clear xdvabrv*/

    COMMAREA.CATOAP = "AF0M";
    XSAFS01(); /* Exit to another application*/
    COMMAREA.CACURRAP = "AF0A"; /* this is came back from xfer*/
    XSAFS01(); /* with security error*/
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19) /* and PF19 was not pressed*/

    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/


    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


  if (AFWREC.AFWFIRST == " ") /* First time through*/

    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end

  end


  if (converseVar.eventKey is pf14) /* PF14 was pressed*/

    if (COMMAREA.CAADDFL == "N" /* Add not allowed*/
     || COMMAREA.CACHGFL == "N" /* Change not allowed*/
     || AF0BW01.XXXSTAT == "N") /* Status is new*/

      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate function*/
      exit stack; /* Exit to redisplay map*/

    else

      if (AFWREC.AFWIDX3 > 0) /* Style rows exist*/

        AFWREC.AFWIXM = 1; /* Set loop index*/

        while (AFWREC.AFWIXM <= AFWREC.AFWIDX3) /* Process whole page*/
          set AF0BM001.AF0BMSTA[AFWIXM] normal; /* Unprotect fld*/
          AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
        end
        set AF0BM001.AF0BMSTA[1] cursor; /* Set cursor position*/

        exit stack; /* Exit to redisplay map*/

      else

        AFWREC.AFWPRCSN = "130 "; /* Process number*/
        converseLib.validationFailed(4); /* Indicate invalid attention key*/
        exit stack; /* Exit to redisplay map*/

      end

    end

  end


  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   || converseVar.eventKey is pf16 /* PF16 was pressed*/
   || converseVar.eventKey is pf17 /* PF17 was pressed*/
   || converseVar.eventKey is pf18 /* PF18 was pressed*/
   || converseVar.eventKey is pf19) /* PF19 was pressed*/

    if (AF9REC.AF9TYP99 == "Y") /* Last PR TYP code retrieved*/
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end

  end

end // end AF0B130

// Reset hilght flds; disp pop-up
Function AF0B140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0BM001.PG1FCTCD normal; /* Forecaster cd*/
  set AF0BM001.XSECD normal; /* Sesn cd*/
  set AF0BM001.XSNYR normal; /* Sesn yr*/
  set AF0BM001.XPRCD normal; /* Product Type cd*/
  set AF0BM001.XGACD normal; /* Gender Age cd*/
  set AF0BM001.XPLCD normal; /* Product Line cd*/
  set AF0BM001.XPCCD normal; /* Category cd*/
  set AF0BM001.XSUCD normal; /* Silhouette cd*/
  set AF0BM001.AF0BMXOW normal; /* owner group code*/
  set AF0BM001.SY1STNBR normal; /* Style no.*/
  set AF0BM001.XDVCD normal; /* Division cd*/
  set AF0BM001.XLCCD[1] normal; /* Life Cycle cd 1*/
  set AF0BM001.XLCCD[2] normal; /* Life Cycle cd 2*/
  set AF0BM001.XLCCD[3] normal; /* Life Cycle cd 3*/
  set AF0BM001.XLCCD[4] normal; /* Life Cycle cd 4*/
  set AF0BM001.XXXSTAT normal; /* Status cd*/

  AF0BM001.XXXPRCNM = "AF0B    "; /* Reset process name*/


  set AF0BM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0BM001.CAITEM initialAttributes; /* Commarea application data*/


   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0BM001.XSECD == "?"
   || AF0BM001.XPRCD == "?"
   || AF0BM001.XGACD == "?"
   || AF0BM001.XPLCD == "?"
   || AF0BM001.XPCCD == "?"
   || AF0BM001.XSUCD == "?"
   || AF0BM001.XDVCD == "?"
   || AF0BM001.AF0BMXOW == "?"
   || AF0BM001.XLCCD[1] == "?"
   || AF0BM001.XLCCD[2] == "?"
   || AF0BM001.XLCCD[3] == "?"
   || AF0BM001.XLCCD[4] == "?")

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    AF0BW01.AF0BWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/

  end



   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/

  if (AF0BM001.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0BM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0BM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
      set AF0BM001.XSECD cursor;
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product Type cd*/
   /* *============================**/

  if (AF0BM001.XPRCD == "?") /* Pop-up window requested*/

    XP1REC.XPRCD = AF0BM001.XPRCD; /* Set XP1REC field*/

    XSAFSPR(); /* Pop-up window func requested*/

    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0BM001.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
      AF0BM001.XPRABRV = XP1REC.XPRABRV; /* Move abrv to map*/
      set AF0BM001.XPRCD cursor;
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/

  if (AF0BM001.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0BM001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0BM001.XGACD = XP1REC.XGACD; /* Move selected code to map*/
      AF0BM001.XGAABRV = XP1REC.XGAABRV; /* Move abrv to map*/
      set AF0BM001.XGACD cursor;
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product Line cd*/
   /* *============================**/

  if (AF0BM001.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0BM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0BM001.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
      AF0BM001.XPLABRV = XP1REC.XPLABRV; /* Move abrv to map*/
      set AF0BM001.XPLCD cursor;
    end

  end



   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/

  if (AF0BM001.XPCCD == "?") /* Pop-up window requested*/

    XP1REC.XPCCD = AF0BM001.XPCCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0BM001.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
      AF0BM001.XPCABRV = XP1REC.XPCABRV; /* Move abrv to map*/
      set AF0BM001.XPCCD cursor;
    end

  end



   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Sihouette cd*/
   /* *=============================**/


  if (AF0BM001.XSUCD == "?") /* Pop-up window requested*/

    XP1REC.XSUCD = AF0BM001.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSU(); /* Pop-up window func requested*/

    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0BM001.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/
      AF0BM001.XSUABRV = XP1REC.XSUABRV; /* Move abrv to map*/
      set AF0BM001.XSUCD cursor;
    end

  end



   /* *=============================**/
   /* *  Pop-up Window for XDVCD    * Division cd*/
   /* *=============================**/


  if (AF0BM001.XDVCD == "?") /* Pop-up window requested*/

    XP1REC.XDVCD = AF0BM001.XDVCD; /* Set XP1REC field*/

    XSAFSDV(); /* Pop-up window func requested*/

    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0BM001.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
      AF0BM001.XDVABRV = XP1REC.XDVABRV; /* Move abrv to map*/
      set AF0BM001.XDVCD cursor;
    end

  end



   /* *=============================**/
   /* *  Pop-up Window for XLCCD    * Life cycle cd*/
   /* *=============================**/

  AFWREC.AFWIXM = 1;

  while (AFWREC.AFWIXM <= 4)

    if (AF0BM001.XLCCD[AFWIXM] == "?") /* Pop-up window requested*/

      XP1REC.XLCCD = AF0BM001.XLCCD[AFWIXM]; /* Set XP1REC field*/

      XSAFSLC(); /* Pop-up window func requested*/

      if (XP1REC.XLCCD == "?") /* Check results*/
        XP1REC.XLCCD[AFWIXM] = " "; /* Space out invalid data*/
      else
        AF0BM001.XLCCD[AFWIXM] = XP1REC.XLCCD; /* Move code to map*/
        set AF0BM001.XLCCD[AFWIXM] cursor;
      end

    end

    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;

  end




   /* *=============================**/
   /* *  Pop-up Window for XOWCD    * Owner group cd*/
   /* *=============================**/


  if (AF0BM001.AF0BMXOW == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0BM001.AF0BMXOW; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* warehouse code*/

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0BM001.AF0BMXOW = XP1REC.XOWCD; /* Move selected code to map*/
      AF0BM001.XOWABRV = XP1REC.XOWABRV; /* Move abrv to map*/
      set AF0BM001.XOWCD cursor;
    end

  end

   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/


  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0BW01.AF0BWPND = "Y"; /* Activate pop-up window ind*/

  exit stack; /* Exit to redisplay map*/



end // end AF0B140

// Verify Entered Data
Function AF0B150()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  AF0B151(); /* Verify data entered*/


  if (converseVar.validationMsgNum != 0) /* Errors found*/

    AF0BW01.AF0BWCNF = "N"; /* Reset update confirm flag*/
    exit stack; /* Exit to redisplay map*/

  else /* (No errors)*/

    if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/

      AF0BW01.AF0BWCNF = "N"; /* Reset update confirm flag*/
      exit stack; /* Exit to redisplay map*/

    else /* (Selection criteria unchanged)*/

      AF0B152(); /* Verify any changed dtl data*/

    end

  end


   /* *============================**/
   /* * Check End of TYP Indicator **/
   /* *============================**/

  if (converseVar.eventKey not pf7) /* Page back not requested*/

    if (AF9REC.AF9TYP99 == "Y" /* No more TYP codes to process*/
     && AFWREC.AFWSWR == "N"   /* No new keys entered*/
     && AF0BW01.AF0BWADI == "0") /* No valid map dtl updates found*/
      AFWREC.AFWNMO = 15; /* Indicate no more data*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      exit stack; /* Exit to reselect data*/
    end

  end



end // end AF0B150

// Validate Map Fields
Function AF0B151()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *****                                                  ******/
   /* *************************************************************/


  AF0BW01.AFWSWR = AFWREC.AFWSWR; /* Save data select setting*/

  AFWREC.AFWSWR = "N"; /* initialize switch to 'OFF'*/
  AFWREC.AFWFIRST = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* initialize msg hold area*/



   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/


   /* --------------- y2k out begin ---------------*/
   /* IF AF0BW01.AF0BWSTS NE AF0BM001.XXXSTAT /* Start Status no.*/
    /* OR AF0BW01.AF0BWSTY NE AF0BM001.SY1STNBR /* Start Style no.*/
    /* OR AF0BW01.AF0BWSIL NE AF0BM001.XSUCD /* Start SIL cd*/
    /* OR AF0BW01.AF0BWCAT NE AF0BM001.XPCCD /* Start CAT cd*/
    /* OR AF0BW01.AF0BWTYP NE AF0BM001.XPRCD /* Start prod type code*/
    /* OR AF0BW01.AF0BWGA NE AF0BM001.XGACD /* Start G/A cd*/
    /* OR AF0BW01.AF0BWLIN NE AF0BM001.XPLCD /* Start prod line cd*/
    /* OR XP1REC.XSNYR NE AF0BM001.XSNYR /* Season yr*/
         /* y2k fix:  line below was removed*/
    /* OR AF0BM001.XSNYR EQ 0         /* Map fld zeroed out*/
    /* OR XP1REC.XSECD NE AF0BM001.XSECD /* Season cd*/
    /* OR AF0BM001.XSECD EQ ' '       /* Map fld spaced out*/
    /* OR AF0BW01.AF0BWUSR NE AF0BM001.PG1FCTCD /* Forecaster cd*/
    /* OR AF0BW01.AF0BWLCD(1) NE AF0BM001.XLCCD(1) /* life cyc cd*/
    /* OR AF0BW01.AF0BWLCD(2) NE AF0BM001.XLCCD(2) /* life cyc cd*/
    /* OR AF0BW01.AF0BWLCD(3) NE AF0BM001.XLCCD(3) /* life cyc cd*/
    /* OR AF0BW01.AF0BWLCD(4) NE AF0BM001.XLCCD(4) /* life cyc cd*/
    /* OR AF0BW01.XDVCD NE AF0BM001.XDVCD /* division cd*/
    /* OR AF0BW01.AF0BWXOW NE AF0BM001.AF0BMXOW /* owner group code*/
                                  /* OR AF0BW01.AF0BW-BLNK-FL NE*/
                                   /* AF0BM001.AF0BM-BLNK-FL;/* blank only*/
                                   /* ind*/
    /* ;*/
    /* MOVE 'Y' TO AFWREC.AFWSWR;     /* New criteria entered*/
    /* MOVE ' ' TO AF9REC.AF9TYP99;   /* Reset last G/A encountered flag*/
    /* ;*/
   /* END;*/
   /* --------------- y2k out end -----------------*/

   /* --------------- y2k in begin ----------------*/
  if (AF0BW01.AF0BWSTS != AF0BM001.XXXSTAT     /* Start Status no.*/
   || AF0BW01.AF0BWSTY != AF0BM001.SY1STNBR    /* Start Style no.*/
   || AF0BW01.AF0BWSIL != AF0BM001.XSUCD       /* Start SIL cd*/
   || AF0BW01.AF0BWCAT != AF0BM001.XPCCD       /* Start CAT cd*/
   || AF0BW01.AF0BWTYP != AF0BM001.XPRCD       /* Start prod type code*/
   || AF0BW01.AF0BWGA != AF0BM001.XGACD        /* Start G/A cd*/
   || AF0BW01.AF0BWLIN != AF0BM001.XPLCD       /* Start prod line cd*/
   || XP1REC.XSNYR != AF0BM001.XSNYR           /* Season yr*/
   || XP1REC.XSECD != AF0BM001.XSECD           /* Season cd*/
   || AF0BM001.XSECD == " "                    /* Map fld spaced out*/
   || AF0BW01.AF0BWUSR != AF0BM001.PG1FCTCD    /* Forecaster cd*/
   || AF0BW01.AF0BWLCD[1] != AF0BM001.XLCCD[1] /* life cyc cd*/
   || AF0BW01.AF0BWLCD[2] != AF0BM001.XLCCD[2] /* life cyc cd*/
   || AF0BW01.AF0BWLCD[3] != AF0BM001.XLCCD[3] /* life cyc cd*/
   || AF0BW01.AF0BWLCD[4] != AF0BM001.XLCCD[4] /* life cyc cd*/
   || AF0BW01.XDVCD != AF0BM001.XDVCD          /* division cd*/
   || AF0BW01.AF0BWXOW != AF0BM001.AF0BMXOW    /* owner group code*/
   || AF0BW01.AF0BW-BLNK-FL != AF0BM001.AF0BM-BLNK-FL) /* blank only ind*/

    AFWREC.AFWSWR = "Y"; /* New criteria entered*/
    AF9REC.AF9TYP99 = " "; /* Reset last G/A encountered flag*/

  end
   /* --------------- y2k in end ------------------*/

   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/

  if (AFWREC.AFWSWR == "Y" /* New keys entered*/
   && converseVar.eventKey not enter) /* Enter key not pressed*/

    converseLib.validationFailed(4); /* Request not permitted*/
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    exit stack; /* Exit to reselect data*/

  end




   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/

  if (AFWREC.AFWSWR == "Y") /* New keys entered*/

    AF0BS19(); /* Edit season yr*/
    if (XP1REC.XP1MNO == 0) /* No validation errors*/
      AF0BS37(); /* Edit blank only indicator*/
      AF0BS36(); /* Edit owner group code*/
      AF0BS11(); /* Edit status cd*/
      AF0BS29(); /* Edit life cyc cd*/
      AF0BS27(); /* Edit division cd*/
      AF0BS12(); /* Edit style no.*/
      AF0BS16(); /* Edit silhouette cd*/
      AF0BS17(); /* Edit category cd*/
      AF0BS28(); /* Edit prod lin cd*/
      AF0BS18(); /* Edit gender/age cd*/
      AF0BS26(); /* Edit prod typ cd*/
      AF0BS20(); /* Edit season cd*/
      AF0BS21(); /* Edit forecaster cd*/
    end

  end


   /* *====================================**/
   /* *  Check Criteria Validation Status  **/
   /* *====================================**/

  if (XP1REC.XP1MNO == 0 /* No validation errors*/
   && AFWREC.AFWSWR == "Y") /* New selection criteria entered*/

    XP1REC.XSUCD = AF0BW01.AF0BWSIL; /* New start SIL cd*/
    XP1REC.XPCCD = AF0BW01.AF0BWCAT; /* New start CAT cd*/
    XP1REC.XGACD = AF0BW01.AF0BWGA; /* New start G/A cd*/
    XP1REC.XPRCD = AF0BW01.AF0BWTYP; /* New typ cd*/
    XP1REC.XPLCD = AF0BW01.AF0BWLIN; /* New lin cd*/
    XP1REC.XDVCD = AF0BW01.XDVCD; /* New div cd*/
    XP1REC.XLCCD[1] = AF0BW01.AF0BWLCD[1]; /* New life cyc*/
    XP1REC.XLCCD[2] = AF0BW01.AF0BWLCD[2]; /* New life cyc*/
    XP1REC.XLCCD[3] = AF0BW01.AF0BWLCD[3]; /* New life cyc*/
    XP1REC.XLCCD[4] = AF0BW01.AF0BWLCD[4]; /* New life cyc*/

  end


  if (XP1REC.XP1MNO != 0) /* Validation error present*/

    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 10) /* Protect/darken map display*/
      set AF0BM001.AF0BMSTA[AFWIDX5] skip, invisible; /* Status*/
      set AF0BM001.AF0BMDIV[AFWIDX5] skip, invisible; /* division*/
      set AF0BM001.AF0BMTYP[AFWIDX5] skip, invisible; /* type*/
      set AF0BM001.AF0BMLIN[AFWIDX5] skip, invisible; /* line*/
      set AF0BM001.AF0BMGNA[AFWIDX5] skip, invisible; /* G/A*/
      set AF0BM001.AF0BMCAT[AFWIDX5] skip, invisible; /* Category*/
      set AF0BM001.AF0BMSIL[AFWIDX5] skip, invisible; /* Silhouette*/
      set AF0BM001.AF0BMSTY[AFWIDX5] skip, invisible; /* Style*/
      set AF0BM001.XOWCD[AFWIDX5] skip, invisible; /* owner group*/
      set AF0BM001.AF0BMSTN[AFWIDX5] skip, invisible; /* Style name*/
      set AF0BM001.SY5PRCUN[AFWIDX5] skip, invisible; /* Whlesale price*/
      set AF0BM001.AF2FSTDL[AFWIDX5] skip, invisible; /* Fcst style dlrs*/
      set AF0BM001.AF0BMFCU[AFWIDX5] skip, invisible; /* Fcst style units*/
      set AF0BM001.AF0BMFOD[AFWIDX5] skip, invisible; /* fist off dt*/
      set AF0BM001.AF0BMDIV[AFWIDX5] skip, invisible; /* divison*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

  end




   /* *==========================**/
   /* *  Edit Map Detail Lines   **/
   /* *==========================**/

  if (AFWREC.AFWSWR == "N" /* No selection criteria changed*/
   && XP1REC.XP1MNO == 0)  /* and No validation errors*/

    move " " to AF0BW02.AF0BWFDI[1] for all; /* Reset dollar update ind*/
    AF0BS22(); /* Edit map detail lines*/


     /* *======================================**/
     /* *  Check Map Detail Validation Errors  **/
     /* *======================================**/

    if (XP1REC.XP1MNO != 0) /* Validation error present*/

      if (XP1REC.XP1MNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XP1REC.XP1MNO);
      end /* Set message for display*/
      AFWREC.AFWSWR = "N"; /* Do not select new data*/

    end

  end




end // end AF0B151

// Verify map detail items
Function AF0B152()
   /* ------------------------------------------------------------*/
   /* Check if updates were entered in the detail data.*/
   /* ------------------------------------------------------------*/


  AF0BW01.AF0BWADI = "0"; /* set valid flag indicator*/

  AFWREC.AFWIDX4 = 1; /* Set loop index*/


  while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3) /* Find updates*/

    if (AF0BW02.AF0BWCHG[AFWIDX4] == "Y") /* With valid updates*/
      AF0BW01.AF0BWADI = "Y"; /* Indicate w/ updates*/
    end

    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop through*/

  end



end // end AF0B152

// Process valid input request
Function AF0B160()
   /* *========================================**/
   /* * 'PF15', 'PF16', 'PF17' 'PF18' 'PF19' KEYS*/
   /* *========================================**/


  if (converseVar.eventKey is pf15 /* PF15 (Next TYP)*/
   || converseVar.eventKey is pf16 /* PF16 (Next G/A)*/
   || converseVar.eventKey is pf17 /* or PF17 (Next LIN)*/
   || converseVar.eventKey is pf18 /* or PF17 (Next CAT)*/
   || converseVar.eventKey is pf19) /* or PF17 (Next SILH)*/

    AF0BW01.AF0BWCNF = "N"; /* Reset update confirm flag*/

    set AF0BW02 empty; /* Clear wk storage record*/
    AFWREC.AFWIDX3 = 0; /* Reset style map store index*/
    AF0BW01.AF0BWSTC = 0; /* Reset loop ctr*/
    AF0BW01.AF0BWCTS = 0; /* Reset style count save*/
    AF0BW01.AF0BWPGV = +1; /* Reset style reference ptr*/
    AF0BW01.AF0BWPGM = +2; /* Set next ref ptr index*/

    XP1REC.XGACD = AF0BW01.AF0BWAG2; /* Set new start XGA*/
    XP1REC.XPCCD = AF0BW01.AF0BWAP2; /* Set new start XPC*/
    XP1REC.XSUCD = AF0BW01.AF0BWAS2; /* Set new start XSU*/
    XP1REC.XPRCD = AF0BW01.AF0BWAT2; /* set new start xprcd*/
    XP1REC.XPLCD = AF0BW01.AF0BWAL2; /* set new start xplcd*/

    set AF9REC empty; /* Reset combination ptrs*/
    AF0B111(); /* Get new G/A,CAT,SIL Combination*/

    AF9REC.AF9FSTID = "Y"; /* Reset first time flag to 'Y'*/

    return; /* Execute next process*/

  end



   /* *==========================**/
   /* *  'ENTER' Key Processing  **/
   /* *==========================**/

  if (converseVar.eventKey is enter) /* enter key pressed*/

    if (AFWREC.AFWSWR == "Y") /* new data requested*/
      return; /* Execute next process*/

    else

      if (AF0BW01.AF0BWADI == "Y") /* With valid updates*/

        AF0B161(); /* Update DACAST.VAFSTY01*/

        AF0BW01.AF0BWCNF = "U"; /* Indicate successful update*/

        AFWREC.AFWNMO = 13; /* Indicate successful update*/
        AFWREC.AFWPRCSN = "160 "; /* Process number*/

        AFWREC.AFWSWR = "N"; /**/
        XP1REC.XGACD = AF0BW02.AF0BWXGA[AF0BWPGV]; /* Set XGA*/
        XP1REC.XPCCD = AF0BW02.AF0BWXPC[AF0BWPGV]; /* Set XPC*/
        XP1REC.XSUCD = AF0BW02.AF0BWXSU[AF0BWPGV]; /* Set XSU*/
        XP1REC.SY1STNBR = AF0BW02.AF0BWRPT[AF0BWPGV]; /* Set sty*/
        XP1REC.XPRCD = AF0BW02.AF0BWXPR[AF0BWPGV]; /* Set type*/
        XP1REC.XPLCD = AF0BW02.AF0BWXPL[AF0BWPGV]; /* Set line*/
        XP1REC.XDVCD = AF0BW02.AF0BWIDV[AF0BWPGV]; /* Set division*/
        set AF9REC empty; /* Reset combination ptrs*/
        AF0B111(); /* Get new G/A,CAT,SIL Combination*/

        return; /* Execute next process*/

      else

        return; /* Execute next process*/

      end

    end

  end



   /* *=======================**/
   /* * 'PF7' Key Processing  **/
   /* *=======================**/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    if (AF0BW01.AF0BWPGV <= 1) /* At page 1*/

      XP1REC.XGACD = AF0BW02.AF0BWXGA[1]; /* Set start XGA*/
      XP1REC.XPCCD = AF0BW02.AF0BWXPC[1]; /* Set start XPC*/
      XP1REC.XSUCD = AF0BW02.AF0BWXSU[1]; /* Set start XSU*/
      XP1REC.SY1STNBR = AF0BW02.AF0BWRPT[1]; /* Set start sty*/
      XP1REC.XPRCD = AF0BW02.AF0BWXPR[1]; /* Set type*/
      XP1REC.XPLCD = AF0BW02.AF0BWXPL[1]; /* Set line*/
      XP1REC.XDVCD = AF0BW02.AF0BWIDV[1]; /* Set division*/

      converseLib.validationFailed(2); /* Indicate no prev page*/
      AFWREC.AFWPRCSN = "160 "; /* Process number*/

    else

      AF0BW01.AF0BWPGV = AF0BW01.AF0BWPGV - 1; /* Back one page*/
      XP1REC.XGACD = AF0BW02.AF0BWXGA[AF0BWPGV]; /* Set start XGA*/
      XP1REC.XPCCD = AF0BW02.AF0BWXPC[AF0BWPGV]; /* Set start XPC*/
      XP1REC.XSUCD = AF0BW02.AF0BWXSU[AF0BWPGV]; /* Set start XSU*/
      XP1REC.SY1STNBR = AF0BW02.AF0BWRPT[AF0BWPGV]; /* Set start sty*/
      XP1REC.XPRCD = AF0BW02.AF0BWXPR[AF0BWPGV]; /* Set type*/
      XP1REC.XPLCD = AF0BW02.AF0BWXPL[AF0BWPGV]; /* Set line*/
      XP1REC.XDVCD = AF0BW02.AF0BWIDV[AF0BWPGV]; /* Set division*/

    end

    /* *IF AF9REC.AF9typ99 NE 'Y'     ; Not last combination*/
    set AF9REC empty; /* Reset combination ptrs*/
    AF0B111(); /* Get new G/A,CAT,SIL Combination*/
    /* *END ;*/

    return; /* Execute next process*/

  end



   /* *=======================**/
   /* * 'PF8' Key Processing  **/
   /* *=======================**/

  if (converseVar.eventKey is pf8) /* Scroll fwd requested*/

    AF0BW01.AF0BWPGM = AF0BW01.AF0BWPGV + 1; /* Frwd one page*/

    if (AF0BW02.AF0BWRPT[AF0BWPGM] == " " /* Not a valid style*/
     || AF0BW02.AF0BWRPT[AF0BWPGM] == "END***") /* or End of page set*/

      XP1REC.XGACD = AF0BW02.AF0BWXGA[AF0BWPGV]; /* Set start XGA*/
      XP1REC.XPCCD = AF0BW02.AF0BWXPC[AF0BWPGV]; /* Set start XPC*/
      XP1REC.XSUCD = AF0BW02.AF0BWXSU[AF0BWPGV]; /* Set start XSU*/
      XP1REC.SY1STNBR = AF0BW02.AF0BWRPT[AF0BWPGV]; /* Set start sty*/
      XP1REC.XPRCD = AF0BW02.AF0BWXPR[AF0BWPGV]; /* Set type*/
      XP1REC.XPLCD = AF0BW02.AF0BWXPL[AF0BWPGV]; /* Set line*/
      XP1REC.XDVCD = AF0BW02.AF0BWIDV[AF0BWPGV]; /* Set division*/

      converseLib.validationFailed(3); /* Indicate no more pages to display*/
      AFWREC.AFWPRCSN = "160 "; /* Process number*/

    else

      XP1REC.XGACD = AF0BW02.AF0BWXGA[AF0BWPGM]; /* Set start XGA*/
      XP1REC.XPCCD = AF0BW02.AF0BWXPC[AF0BWPGM]; /* Set start XPC*/
      XP1REC.XSUCD = AF0BW02.AF0BWXSU[AF0BWPGM]; /* Set start XSU*/
      XP1REC.SY1STNBR = AF0BW02.AF0BWRPT[AF0BWPGM]; /* Set start sty*/
      XP1REC.XPRCD = AF0BW02.AF0BWXPR[AF0BWPGM]; /* Set start type*/
      XP1REC.XPLCD = AF0BW02.AF0BWXPL[AF0BWPGM]; /* Set start line*/
      XP1REC.XDVCD = AF0BW02.AF0BWIDV[AF0BWPGM];
                                   /* Set start division*/
      AF0BW01.AF0BWPGV = AF0BW01.AF0BWPGM; /* Set new page*/

    end

    if (AF9REC.AF9TYP99 != "Y") /* Not last combination*/
      set AF9REC empty; /* Reset combination ptrs*/
      AF0B111(); /* Get new G/A,CAT,SIL Combination*/
    end

    return; /* Execute next process*/

  end



end // end AF0B160

// Process DACAST.VAFSTY01 Upds
Function AF0B161()
   /* ------------------------------------------------------------*/
   /* Update DACAST.VAFSTY01 rows from valid screen updates. All*/
    /* screen detail lines are scanned for records that have*/
    /* valid updates in them. If they have, then the correspon-*/
    /* ding DB rows are updated. Otherwise, they are bypassed.*/
   /* ------------------------------------------------------------*/


   /* *============================**/
   /* *  Get System Date and Time  **/
   /* *============================**/

  XX0XS01(); /* System date/time process*/



   /* *========================================**/
   /* *  Obtain Map Detail Records for Update  **/
   /* *========================================**/


  AF0BW01.AF0BWADI = "0"; /* set valid flag indicator*/

  AFWREC.AFWIDX4 = 1; /* Set loop index*/


  while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3) /* Find updates*/

    if (AF0BW02.AF0BWCHG[AFWIDX4] == "Y") /* With valid updates*/
      AF0BS23(); /* Update Style DB*/
    end

    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop through*/

  end



end // end AF0B161

// Check Style Row for processing
Function AF0BS01()
   /* ------------------------------------------------------------*/
   /* Check obtained style if it qualifies according to criteria*/
   /* set by the user.*/
   /* ------------------------------------------------------------*/

   /* *====================**/
   /* *  Check Start Keys  **/
   /* *====================**/

  if (AF0BW01.SY1STNBR != " ") /* Specific style entered*/

    if (AF2REC.SY1STNBR == AF0BW01.SY1STNBR) /* The style specified*/

      if (AF0BW01.AF0BWSIL != " ") /* XSUCD specified*/

        if (AF0BW01.AF0BWSIL == XP1REC.XSUCD) /* Comb.match with criteria*/
                        /* (XSUCD valid)*/
        else
          return; /* ****** Get next style in set*/
        end
      end

      if (AF0BW01.AF0BWCAT != " ") /* XPCCD specified*/
        if (AF0BW01.AF0BWCAT == XP1REC.XPCCD) /* Comb.match with criteria*/
                        /* (XPCCD valid)*/
        else
          return; /* ****** Get next style in set*/
        end
      end

      if (AF0BW01.AF0BWLIN != " ") /* XPLCD specified*/
        if (AF0BW01.AF0BWLIN == XP1REC.XPLCD) /* Comb.match with criteria*/
                        /* (XPLCD valid)*/
        else
          return; /* ****** Get next style in set*/
        end
      end

      if (AF0BW01.AF0BWGA != " ") /* XGACD specified*/
        if (AF0BW01.AF0BWGA == XP1REC.XGACD) /* Comb.match with criteria*/
                        /* (XGACD valid)*/
        else
          return; /* ****** Get next style in set*/
        end
      end

      if (AF0BW01.AF0BWTYP != " ") /* XPRCD specified*/
        if (AF0BW01.AF0BWTYP == XP1REC.XPRCD) /* Comb.match with criteria*/
                        /* (XPRCD valid)*/
        else
          return; /* ****** Get next style in set*/
        end
      end

      if (AF0BW01.AF0BWLCD[1] != " " /* life cycle check requested*/
       || AF0BW01.AF0BWLCD[2] != " " /* life cycle check requested*/
       || AF0BW01.AF0BWLCD[3] != " " /* life cycle check requested*/
       || AF0BW01.AF0BWLCD[4] != " ") /* life cycle check requested*/
        AF0BS25(); /* life cycle validate*/

        if (AF0BW03.AF0BWCNT == 0) /* none in life cycle(s)*/
          return;
        end
      end

      if (AF0BM001.XXXSTAT == "A" /* only active requested*/
       && AF2REC.AF2FSTST != "A") /* not active style*/
        return; /* dont qualify*/
      end

      if (AF0BM001.XXXSTAT == "I" /* only inactive requested*/
       && AF2REC.AF2FSTST != "I") /* not inactive style*/
        return; /* dont qualify*/
      end

      if (AF0BM001.XXXSTAT == "N" /* only new requested*/
       && AF2REC.AF2FSTST != "N") /* not new style*/
        return;
      end /* dont qualify*/

      if (AF0BM001.AF0BMXOW != " "  /* XOWCD specified*/
       && AF0BM001.AF0BMXOW != "**" /* XOWCD specified*/
       && AF0BM001.AF0BMXOW != AF2REC.XOWCD) /* Comb.match with criteria*/
        return; /* ****** Get next style in set*/
      end

      AF0BW01.AF0BWST1 = " "; /* Indicate style for processing*/
      AF0BW01.AF0BWSQU = "Y"; /* Style qualified*/
    else

      if (AF0BW01.AF0BWST1 == " ") /* Specified style already processed*/
                   /* (Style retrieved is valid)*/
        AF0BW01.AF0BWSQU = "Y"; /* Style qualified*/
      else
        return;
      end

    end

  else

    if (AF0BW01.AF0BWLCD[1] != " " /* life cycle check requested*/
     || AF0BW01.AF0BWLCD[2] != " " /* life cycle check requested*/
     || AF0BW01.AF0BWLCD[3] != " " /* life cycle check requested*/
     || AF0BW01.AF0BWLCD[4] != " ") /* life cycle check requested*/
      AF0BS25(); /* life cycle validate*/

      if (AF0BW03.AF0BWCNT == 0) /* none in life cycle(s)*/
        return;
      end
    end

    if (AF0BM001.AF0BMXOW != " " /* an owner group requested*/
     && AF2REC.XOWCD != AF0BM001.AF0BMXOW) /* not equal*/
      return; /* dont qualify*/
    end

    if (AF0BM001.XXXSTAT == "A" /* only active requested*/
     && AF2REC.AF2FSTST != "A") /* not active style*/
      return; /* dont qualify*/
    end

    if (AF0BM001.XXXSTAT == "I" /* only inactive requested*/
     && AF2REC.AF2FSTST != "I") /* not inactive style*/
      return; /* dont qualify*/
    end

    if (AF0BM001.XXXSTAT == "N" /* only new requested*/
     && AF2REC.AF2FSTST != "N") /* not new style*/
      return;
    end /* dont qualify*/

    AF0BS38(); /* select DACAST.VAFCLR01 cursor*/
    AF0BS39(); /* fetch 1 DACAST.VAFCLR01 row*/
    AF0BS40(); /* close DACAST.VAFCLR01 cursor*/
    if (AF0BM001.AF0BM-BLNK-FL == "Y" /* blanks only*/
     && AF5REC.PG2SCRFL != "B")       /* not a blank*/
      return;
    else
      if (AF0BM001.AF0BM-BLNK-FL != "Y" /* not blanks only*/
       && AF5REC.PG2SCRFL == "B")       /* blank style*/
        return;
      end
    end /* dont qualify*/
               /* (Accept Style for processing)*/
    AF0BW01.AF0BWSQU = "Y"; /* Style qualified*/

  end



end // end AF0BS01

// Process qualified style
Function AF0BS02()
   /* ------------------------------------------------------------*/
   /* Store obtained style data into working storage.*/
   /* Update Forward/Backward reference pointer, using next page*/
      /* value (current page + 1) as index.*/
   /* ------------------------------------------------------------*/


   /* *============================**/
   /* *  Update Reference Pointer  **/
   /* *============================**/


  if (AFWREC.AFWSWR == "Y"         /* New keys entered*/
   || converseVar.eventKey is pf15 /* PF15 (next TYP requested)*/
   || converseVar.eventKey is pf16 /* PF16 (next G/A requested)*/
   || converseVar.eventKey is pf17 /* PF17 (next LIN requested)*/
   || converseVar.eventKey is pf18 /* PF18 (next CAT requested)*/
   || converseVar.eventKey is pf19) /* PF19 (next SIL requested)*/

    if (AF0BW02.AF0BWRPT[1] == " ") /* First style of new set*/
      AF0BW02.AF0BWXPR[1] = XP1REC.XPRCD; /* Save XPR*/
      AF0BW02.AF0BWXGA[1] = XP1REC.XGACD; /* Save XGA*/
      AF0BW02.AF0BWXPL[1] = XP1REC.XPLCD; /* Save XPL*/
      AF0BW02.AF0BWXPC[1] = XP1REC.XPCCD; /* Save CAT*/
      AF0BW02.AF0BWXSU[1] = XP1REC.XSUCD; /* Save SIL*/
      AF0BW02.AF0BWIDV[1] = XP1REC.XDVCD; /* Save division*/
      AF0BW02.AF0BWRPT[1] = AF2REC.SY1STNBR;
    end

  end


  if (AF0BW01.AF0BWPGM > 100) /* Ref ptr exceeds allocation*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    AFWREC.AFWPRCSN = "S02 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "REF PTR EXCEEDS 100 RECS";
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end
              /* (Forward Reference Ptr Valid)*/
  AF0BW02.AF0BWXPR[AF0BWPGM] = XP1REC.XPRCD; /* Save XPR*/
  AF0BW02.AF0BWXGA[AF0BWPGM] = XP1REC.XGACD; /* Save XGA*/
  AF0BW02.AF0BWXPL[AF0BWPGM] = XP1REC.XPLCD; /* Save XPL*/
  AF0BW02.AF0BWXPC[AF0BWPGM] = XP1REC.XPCCD; /* Save CAT*/
  AF0BW02.AF0BWXSU[AF0BWPGM] = XP1REC.XSUCD; /* Save SIL*/
  AF0BW02.AF0BWIDV[AF0BWPGM] = XP1REC.XDVCD; /* Save division*/
  AF0BW02.AF0BWRPT[AF0BWPGM] = AF2REC.SY1STNBR; /* Save Style*/
  AF0BW02.AF0BWXOW[AF0BWPGM] = AF2REC.XOWCD; /* save owner group*/



   /* *===========================**/
   /* *  Format Detail Map Lines  **/
   /* *===========================**/


  if (AFWREC.AFWIDX3 >= 10) /* 10 Lines/Map max*/
    return; /* Return to calling process*/
  end

  AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* Add to map dtl index*/

  AF0BW01.AF0BWAT2 = XP1REC.XPRCD; /* Save last XPR in page*/
  AF0BW01.AF0BWAG2 = XP1REC.XGACD; /* Save last XGA in page*/
  AF0BW01.AF0BWAL2 = XP1REC.XPLCD; /* Save last XPL in page*/
  AF0BW01.AF0BWAP2 = XP1REC.XPCCD; /* Save last CAT in page*/
  AF0BW01.AF0BWAS2 = XP1REC.XSUCD; /* Save last SIL in page*/
  AF0BW01.AF0BWAD2 = XP1REC.XDVCD; /* Save last div in page*/


  if (AFWREC.AFWIDX3 == 1) /* First style in page*/
    XP1REC.SY1STNBR = AF2REC.SY1STNBR; /* Set curr start style*/
  end


  AF0BW02.AF0BWSTA[AFWIDX3] = AF2REC.AF2FSTST; /* Status*/
  AF0BW02.AF0BWPRT[AFWIDX3] = XP1REC.XPRCD; /* TYP*/
  AF0BW02.AF0BWGNA[AFWIDX3] = XP1REC.XGACD; /* G/A*/
  AF0BW02.AF0BWPRL[AFWIDX3] = XP1REC.XPLCD; /* LIN*/
  AF0BW02.AF0BWPCC[AFWIDX3] = XP1REC.XPCCD; /* Category*/
  AF0BW02.AF0BWSLC[AFWIDX3] = XP1REC.XSUCD; /* Silhouette*/
  AF0BW02.AF0BWDIV[AFWIDX3] = XP1REC.XDVCD; /* division*/
  AF0BW02.XOWCD[AFWIDX3] = XP1REC.XOWCD; /* owner group*/
  AF0BW02.AF0BWSTM[AFWIDX3] = AF2REC.SY1STNBR; /* Style*/

   /* -------------- (* Get Style Name *) -----------------*/

  AF0BS03(); /* Select set style*/
  AF0BS04(); /* Process selected style*/

  AF0BW02.AF0BWSTN[AFWIDX3] = PG2REC.SY1SSTNM; /* Style name*/

  AF0BS05(); /* Close style cursor*/
   /* ------------------------------------------------------*/

   /* -------- (* Get Style Wholesale Price *) -------------*/

  if (PG2REC.XLCCD1 != "01") /* not an experimental style*/
    AF0BS06(); /* Obtain wholesale price*/
  else /* is an experimental style*/
    AF0BW01.AF0BWWPR = PG2REC.PG2WHRRC;
  end

  AF0BW02.AF0BWPRC[AFWIDX3] = AF0BW01.AF0BWWPR; /* Wholesale price*/
   /* ------------------------------------------------------*/


  AF0BW02.AF0BWFDL[AFWIDX3] = AF2REC.AF2FSTDL; /* Fcst style dlrs*/

  if (AF0BW01.AF0BWWPR == 0) /* Wholesale price zeroes*/
    AF0BW02.AF0BWFCU[AFWIDX3] = 0; /* No forecast units*/
  else
    AF0BW01.AF0BWFSU = mathLib.round(AF2REC.AF2FSTDL / AF0BW01.AF0BWWPR, -mathLib.decimals(AF0BW01.AF0BWFSU));
    AF0BW02.AF0BWFCU[AFWIDX3] = AF0BW01.AF0BWFSU; /* Fcst units*/
  end


               /* (Store Other Record Keys)*/

   /* MOVE AF2REC.AFPPGRCD TO AF0BW02.AF0BWBGC(AFWIDX3); /* buy %*/
  AF0BW01.AF0BWDT2 = 0; /* ;init date*/
  AF0BW01.AF0BWDT2 = AF2REC.AF2SFODT; /* reformat date*/
  AF0BW01.AF0BWDYY = AF0BW01.AF0BWDY2; /* reformat yy*/
  AF0BW01.AF0BWDDD = AF0BW01.AF0BWDD2; /* reformat dd*/
  AF0BW01.AF0BWDMM = AF0BW01.AF0BWDM2; /* reformat mm*/
  AF0BW02.AF0BWFOD[AFWIDX3] = AF0BW01.AF0BWDTE; /* reformated date*/
  AF0BW02.AF0BWXDM[AFWIDX3] = AF2REC.XDMCD; /* Dimension cd*/
  AF0BW02.AF0BWXSE[AFWIDX3] = AF2REC.XSECD; /* Season cd*/
  AF0BW02.AF0BWXSN[AFWIDX3] = AF2REC.XSNYR; /* Season yr*/
  AF0BW02.AF0BWFCT[AFWIDX3] = AF2REC.PG1FCTCD; /* Season yr*/
  AF0BW02.AF0BWSZS[AFWIDX3] = AF2REC.SY4SZSCL; /* Size scale*/
  AF0BW02.XOWCD[AFWIDX3] = AF2REC.XOWCD; /* owner group*/
  AF0BW02.AF0BWFST[AFWIDX3] = AF2REC.AF2FSTST; /* Status cd*/
  AF0BW02.AF0BWCCT[AFWIDX3] = AF2REC.ZZZCHGCT; /* Change count*/



end // end AF0BS02

// Select Set Style
Function AF0BS03()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/


   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S03 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0BS03

// Process selected style
Function AF0BS04()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call.*/
   /* To get the style name only one (1) valid row is needed to*/
     /* be read.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/

      PG2REC.SY1SSTNM = " "; /* Return blank style name*/
      return; /* Exit to calling rtn*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S04 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0BS04

// Close style cursor
Function AF0BS05()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AF0BS05

// Obtain wholesale price
Function AF0BS06()

   /* ------------------------------------------------------------*/
             /* Obtain price from PRICE SUBROUTINE*/
   /* ------------------------------------------------------------*/

   /* *===================**/
   /* *  SelectION FIELDS **/
   /* *===================**/

  set AF1REC empty; /* Reset rec work area*/

  AF1REC.XSECD = AF2REC.XSECD;
  AF1REC.XSNYR = AF2REC.XSNYR;
  AF1REC.XGPCD = "03"; /* GPC cd*/
  AF1REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
  AF1REC.SY2CLRID = "***"; /* Color*/
  AF1REC.XPYCD = "01"; /* Price type*/
  AF1REC.XQACD = "01"; /* Price quality*/


  try
    call "AF1730" (AF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


  if (sysVar.errorCode != "00000000" /* Call NOT successful*/
   || AF1REC.AF1-RETURN-CODE == 1    /* and normal return code*/
   || AF1REC.AF1-RETURN-CODE == 3)   /* and normal return code*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    SQLCA.VAGen_SQLCODE = AF1REC.AF1-ERROR-SQLCODE;

    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "S06 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PRICE SUBROUTINE ";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRICE01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  else
    AF0BW01.AF0BWWPR = AF1REC.SY5PRCUN;
  end






end // end AF0BS06

// Edit Start Status cd
Function AF0BS11()
  AF0BW01.AF0BWSTS = AF0BM001.XXXSTAT; /* save to wk map storage*/

  if (AF0BM001.XXXSTAT != "A"
   && AF0BM001.XXXSTAT != "N"
   && AF0BM001.XXXSTAT != "I"
   && AF0BM001.XXXSTAT != " ")

                   /* (field in error)*/
    AF0BW01.XXXSTAT = " "; /* Space out wk storage*/
    AF0BM001.AF0BMSDC = " "; /* Space out desc*/
    AFWREC.AFWPRCSN = "S11 "; /* Process number*/
    set AF0BM001.XXXSTAT cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 32; /* indicate error message*/

  else

                   /* (field is valid)*/
    AF0BW01.XXXSTAT = AF0BM001.XXXSTAT; /* save to wk storage*/

    if (AF0BW01.XXXSTAT == "A") /* Active*/
      AF0BW01.AF0BWSTD = "ACTIVE  "; /* Description*/
      AF0BM001.AF0BMSDC = "ACTIVE  "; /* Description*/
    else
      if (AF0BW01.XXXSTAT == "N") /* New*/
        AF0BW01.AF0BWSTD = "NEW    "; /* Description*/
        AF0BM001.AF0BMSDC = "NEW    "; /* Description*/
      else
        if (AF0BW01.XXXSTAT == "I") /* Inactive*/
          AF0BW01.AF0BWSTD = "INACTIVE"; /* Description*/
          AF0BM001.AF0BMSDC = "INACTIVE"; /* Description*/
        else
          AF0BW01.AF0BWSTD = " "; /* Space out desc*/
          AF0BM001.AF0BMSDC = " "; /* Space out desc*/
        end
      end
    end

  end



end // end AF0BS11

// Edit Style no.
Function AF0BS12()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/

  if (AF0BM001.SY1STNBR == " ") /* Style = spaces*/
    AF0BW01.SY1STNBR = " "; /* Move to wk storage*/
    AF0BW01.AF0BWST1 = " "; /* Move to wk storage*/
    AF0BW01.AF0BWST2 = " "; /* Move to wk storage*/
    AF0BW01.AF0BWSTY = " "; /* Move to wk storage*/
    AF0BW01.AF0BWASY = " "; /* Space out description*/
    return; /* Exit to calling process*/
  end

  AF0BW01.AF0BWSTY = AF0BM001.SY1STNBR; /* Save to wk map storage*/


   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/

  AF0BS13(); /* Select set style*/

  AF0BS14(); /* Validate style*/

  AF0BS15(); /* Close style cursor*/



end // end AF0BS12

// Select set style
Function AF0BS13()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0BM001.SY1STNBR; /* Style no.*/


   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S13 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0BS13

// Process retrieved style
Function AF0BS14()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
                     /* (Field is valid)*/
      AF0BW01.SY1STNBR = AF0BM001.SY1STNBR; /* Save to wk st*/

      if (AF0BM001.SY1STNBR == AF0BW01.AF0BWST2) /* Save to alt wk stor*/
                      /* (Same style being processed)*/
                            /* --- B U T ---*/
        if (AFWREC.AFWSWR == "Y") /* Style is part of new keys entered*/
          AF0BW01.AF0BWST1 = AF0BM001.SY1STNBR; /* Restore alt wk*/
        end

      else
        AF0BW01.AF0BWST1 = AF0BM001.SY1STNBR; /* Save to alt wk stor*/
        AF0BW01.AF0BWST2 = AF0BM001.SY1STNBR; /* Save to alt wk stor*/
      end

      return; /* Return to calling process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
                    /* (Field in error)*/
      set AF0BM001.SY1STNBR cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 33; /* Indicate not found*/
      AFWREC.AFWPRCSN = "S14 "; /* Process number*/
      AF0BW01.SY1STNBR = " "; /* Space out wk storage*/
      return; /* Exit to calling rtn*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0BS14

// Close style cursor
Function AF0BS15()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S15 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/




end // end AF0BS15

// Edit Silhouette cd
Function AF0BS16()


  if (AF0BM001.XSUCD == " ") /* Field eq spaces*/
    AF0BW01.AF0BWSIL = " "; /* Space out save area*/
    AF0BW01.AF0BWASL = " "; /* Space out save desc*/
    AF0BM001.XSUABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  AF0BW01.AF0BWSIL = AF0BM001.XSUCD; /* save to wk map storage*/


  if (AF0BM001.XSUCD in XSUTBL.XSUCD)

    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      if (AF0BM001.XSUCD == AF0BW01.AF0BWAS1) /* EQ previous XSU*/
        AF0BW01.AF0BWASL = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0BW01.AF0BWAS1 = AF0BM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUCD = AF0BM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0BW01.AF0BWASL = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0BM001.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S16 "; /* Process number*/
  set AF0BM001.XSUCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  AF0BW01.AF0BWASL = " "; /* Space out save desc*/
  AF0BM001.XSUABRV = " "; /* Space out desc*/


end // end AF0BS16

// Edit Category cd
Function AF0BS17()


  if (AF0BM001.XPCCD == " ") /* Map fld spaces*/
    AF0BW01.AF0BWCAT = " "; /* Space out save area*/
    AF0BW01.AF0BWAPC = " "; /* Space out save desc*/
    AF0BM001.XPCABRV = " "; /* Space out map desc*/
    return; /* Return to calling routine*/
  end

  AF0BW01.AF0BWCAT = AF0BM001.XPCCD; /* save to wk map storage*/


  if (AF0BM001.XPCCD in XPCTBL.XPCCD)

    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      if (AF0BM001.XPCCD == AF0BW01.AF0BWAP1) /* EQ previous XPC*/
        AF0BW01.AF0BWAPC = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0BW01.AF0BWAP1 = AF0BM001.XPCCD; /* save to wk storage*/
        XP1REC.XPCCD = AF0BM001.XPCCD; /* save to wk storage*/
        XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0BW01.AF0BWAPC = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0BM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S17 "; /* Process number*/
  set AF0BM001.XPCCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 35; /* indicate error message*/
  AF0BW01.AF0BWAPC = " "; /* Space out save desc*/
  AF0BM001.XPCABRV = " "; /* Space out map desc*/



end // end AF0BS17

// Edit Gender/Age cd
Function AF0BS18()


  if (AF0BM001.XGACD == " ") /* Map fld eq spaces*/
    AF0BW01.AF0BWGA = " "; /* Space out save fld*/
    AF0BW01.AF0BWAGA = " "; /* Space out save desc*/
    AF0BM001.XGAABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  AF0BW01.AF0BWGA = AF0BM001.XGACD; /* save to wk map storage*/

  AF0BW01.AF0BWGAG = AF0BM001.XGACD; /* format to wk key*/
  AF0BW01.AF0BWGAP = "03"; /* Apparel GPC*/


  if (AF0BW01.AF0BWGAK in XGATBL.XGAKEY)

    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XGATBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      if (AF0BM001.XGACD == AF0BW01.AF0BWAG1) /* EQ previous XGA*/
        AF0BW01.AF0BWAGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0BW01.AF0BWAG1 = AF0BM001.XGACD; /* save to wk storage*/
        XP1REC.XGACD = AF0BM001.XGACD; /* save to wk storage*/
        XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0BW01.AF0BWAGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0BM001.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S18 "; /* Process number*/
  set AF0BM001.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  AF0BW01.AF0BWAGA = " "; /* Space out save desc*/
  AF0BM001.XGAABRV = " "; /* Space out map desc*/



end // end AF0BS18

// Edit Season yr
Function AF0BS19()


  AF0BW01.AF0BWXSY = 0; /* initialize xsnyr wk area*/
  AF0BW01.AF0BWXSY = AF0BM001.XSNYR; /* move to wk area*/
  if (AF0BM001.XSNYR > 75)
    AF0BW01.AF0BWXSY = AF0BW01.AF0BWXSY + 1900; /* move century*/
  else
    AF0BW01.AF0BWXSY = AF0BW01.AF0BWXSY + 2000; /* move century*/
  end

      /* *************************************************************/
      /* ***** Do not allow user to enter anything past FA 2000  *****/
      /* *************************************************************/

  if (AF0BW01.AF0BWXSY < 2000)
    AF0BS19S();
  else
    if (AF0BW01.AF0BWXSY == 2000)
      if (AF0BM001.XSECD == "SP"
       || AF0BM001.XSECD == "SU")
        AF0BS19S();
      else
         /* (field in error)*/
        AFWREC.AFWPRCSN = "S19 "; /* Process number*/
        set AF0BM001.XSNYR cursor, bold; /* highlight field*/
        set AF0BM001.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
      end
    else
      if (AF0BW01.AF0BWXSY > 2000)
         /* (field in error)*/
        AFWREC.AFWPRCSN = "S19 "; /* Process number*/
        set AF0BM001.XSNYR cursor, bold; /* highlight field*/
        set AF0BM001.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
      end
    end
  end


end // end AF0BS19

// Search season yr table
Function AF0BS19S()



      /* *************************************************************/
      /* ***** Loop thru procedure until both XSE AND XSN values *****/
      /* ***** found on a single table row.                      *****/
      /* *************************************************************/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0BW01.AF0BWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      XP1REC.XSNYR = AF0BM001.XSNYR; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S19 "; /* Process number*/
  set AF0BM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/




end // end AF0BS19S

// Edit Season cd
Function AF0BS20()


  if (AF0BM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0BM001.XSECD; /* save to working storage*/

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S20 "; /* Process number*/
    set AF0BM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/

  end

  AF0BW01.AF0BWXSS = " "; /* Initialize wk area*/
  AF0BW01.AF0BWXYR = +0; /* Initialize wk area*/

  AF0BW01.AF0BWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  AF0BW01.AF0BWXYR = XP1REC.XSNYR; /* Format wk area*/

  AF0BW01.AF0BWXSA = AF0BW01.AF0BWXSY;

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0BW01.AF0BWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S20 "; /* Process number*/
  set AF0BM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/

end // end AF0BS20

// Edit Forecaster cd
Function AF0BS21()


  if (AF0BM001.PG1FCTCD == " ") /* Eq spaces*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    AF0BW01.AF0BWUSR = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0BW01.AF0BWUSR = AF0BM001.PG1FCTCD; /* Move to wk map storage*/


   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0BM001.PG1FCTCD; /* Forecaster id*/


   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0BM001.PG1FCTCD cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S21 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.XXXUSER = AF0BM001.PG1FCTCD; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end
      end
    end
  end

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0BS21"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0BM001.PG1FCTCD; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AF0BS21

// Edit map detail items
Function AF0BS22()
   /* ------------------------------------------------------------*/
   /* Edit Map Detail Lines: Note that validation of map items*/
     /* is on a page-by-page basis. This ensures that all items*/
     /* are valid before any scrolling command is processed.*/
   /* ------------------------------------------------------------*/


  if (AFWREC.AFWIDX3 <= 0) /* No style rows exist*/
    return; /* Return to calling process*/
  end

   /* *===============================**/
   /* *  Store/Validate Changed Data  **/
   /* *===============================**/
  AFWREC.AFWIXM = 1; /* set loop index*/

  while (AFWREC.AFWIXM <= AFWREC.AFWIDX3) /* Process whole page*/
    if (AF0BW02.AF0BWCHG[AFWIXM] != "Y") /* Not for update*/
      if (AF0BM001.AF2FSTDL[AFWIXM] != AF0BW02.AF0BWFDL[AFWIXM]
       || AF0BM001.AF0BMSTA[AFWIXM] != AF0BW02.AF0BWSTA[AFWIXM]
       || AF0BM001.AF0BMFOD[AFWIXM] != AF0BW02.AF0BWFOD[AFWIXM])
        /* OR AF0BM001.AF0BMBGC(AFWIXM) NE AF0BW02.AF0BWBGC(AFWIXM);*/
        AF0BW02.AF0BWCHG[AFWIXM] = "C"; /* Changes entered*/
      else
        AF0BW02.AF0BWCHG[AFWIXM] = " "; /* Changes not entered*/
      end
    end
                   /* (*** STATUS CD ***)*/
    AF0BW01.AF0BW-INACTIVE-STYLE-ACTIVATED[AFWIXM] = "N";
    if (AF0BW02.AF0BWSTA[AFWIXM] == "I")
      if (AF0BM001.AF0BMSTA[AFWIXM] == "A"
       || AF0BM001.AF0BMSTA[AFWIXM] == " ")
        AF0BW01.AF0BW-INACTIVE-STYLE-ACTIVATED[AFWIXM] = "Y";
      end
    end
    if (AF0BM001.AF0BMSTA[AFWIXM] != "A" /* Not active*/
     && AF0BM001.AF0BMSTA[AFWIXM] != "N" /* Not New*/
     && AF0BM001.AF0BMSTA[AFWIXM] != "I" /* Not inactive*/
     && AF0BM001.AF0BMSTA[AFWIXM] != " ") /* Not spaces*/
                    /* (Field in Error)*/
      XP1REC.XP1MNO = 32; /* Indicate Error msg*/
      set AF0BM001.AF0BMSTA[AFWIXM] cursor, bold;
      AFWREC.AFWPRCSN = "S22 "; /* Process number*/
      AF0BW02.AF0BWCHG[AFWIXM] = "N"; /* Change not valid*/
    else
      if (AF0BM001.AF0BMSTA[AFWIXM] == "N") /* Change to New*/
        if (AF0BW02.AF0BWSTA[AFWIXM] == "A" /* Active*/
         || AF0BW02.AF0BWSTA[AFWIXM] == "I") /* Inactive*/
                        /* (Field in Error)*/
          XP1REC.XP1MNO = 43; /* Indicate Error msg*/
          set AF0BM001.AF0BMSTA[AFWIXM] cursor, bold;
          AFWREC.AFWPRCSN = "S22 "; /* Process number*/
          AF0BW02.AF0BWCHG[AFWIXM] = "N"; /* Change not valid*/
        else
                            /* (Field is Valid)*/
          AF0BW02.AF0BWSTA[AFWIXM] = AF0BM001.AF0BMSTA[AFWIXM];
        end

      else
        if (AF0BM001.AF0BMSTA[AFWIXM] == " ") /* Spaced out*/
                           /* (Field is Valid)*/
          AF0BW02.AF0BWSTA[AFWIXM] = "A"; /* DEFAULT TO ACTIVE*/
        else
          if (AF0BM001.AF0BMSTA[AFWIXM] == "I") /* inactivate*/
            AF0BS35(); /* verify no open po's against style*/
            if (PCYREC.PCYCOUNT > 0) /* open po's against style*/
              XP1REC.XP1MNO = 119; /* Indicate Error msg*/
              set AF0BM001.AF0BMSTA[AFWIXM] cursor, bold;
              AFWREC.AFWPRCSN = "S22 "; /* Process number*/
              AF0BW02.AF0BWCHG[AFWIXM] = "N"; /* change not valid*/
            else
                        /* (Field is Valid)*/
              AF0BW02.AF0BWSTA[AFWIXM] = AF0BM001.AF0BMSTA[AFWIXM];
            end
          else
                            /* (Field is Valid)*/
            AF0BW02.AF0BWSTA[AFWIXM] = AF0BM001.AF0BMSTA[AFWIXM];
          end
        end
      end
    end
                      /* (Style Forecast Dollars)*/
    if (AF0BM001.AF2FSTDL[AFWIXM] != AF0BW02.AF0BWFDL[AFWIXM])
      if (AF0BW02.AF0BWSTA[AFWIXM] == "A" /* Active status*/
       || AF0BW02.AF0BWSTA[AFWIXM] == "N") /* New status*/
                                  /* (Valid Change)*/
        AF0BW02.AF0BWFDI[AFWIXM] = "Y"; /* Set update indicator*/
      else
                        /* (Field in Error)*/
        XP1REC.XP1MNO = 45; /* Indicate Error msg*/
        set AF0BM001.AF2FSTDL[AFWIXM] cursor, bold;
        AFWREC.AFWPRCSN = "S22 "; /* Process number*/
        AF0BW02.AF0BWCHG[AFWIXM] = "N"; /* Invalid change*/
      end
    end
                      /* (first offer date)*/
    AF0BW02.AF0BWFOI[AFWIXM] = "N"; /* FOD update ind*/
    if (AF0BM001.AF0BMFOD[AFWIXM] != AF0BW02.AF0BWFOD[AFWIXM])
      AF0BW01.AF0BWDTE = AF0BM001.AF0BMFOD[AFWIXM];
      if (AF0BW01.AF0BWDMM >= 01 /* month at least january*/
       && AF0BW01.AF0BWDMM <= 12) /* month not greater than december*/
        if (AF0BW01.AF0BWDDD <= 31) /* day not greater than 31*/
          AF0BW02.AF0BWFOI[AFWIXM] = "Y"; /* FOD update ind*/
        else
          XP1REC.XP1MNO = 63; /* Indicate Error msg*/
          set AF0BM001.AF0BMFOD[AFWIXM] cursor, bold;
          AFWREC.AFWPRCSN = "S22 "; /* Process number*/
          AF0BW02.AF0BWCHG[AFWIXM] = "N"; /* Invalid change*/
        end
      else
        XP1REC.XP1MNO = 63; /* Indicate Error msg*/
        set AF0BM001.AF0BMFOD[AFWIXM] cursor, bold;
        AFWREC.AFWPRCSN = "S22 "; /* Process number*/
        AF0BW02.AF0BWCHG[AFWIXM] = "N"; /* Invalid change*/
      end
    end
                      /* (buy %)*/
    /* IF AF0BM001.AF0BMBGC(AFWIXM) NE AF0BW02.AF0BWBGC(AFWIXM);*/
     /* MOVE AF0BM001.AF0BMBGC(AFWIXM) TO AF0BW02.AF0BWBGC(AFWIXM);*/
    /* END;*/
                      /* (Check for Valid Changes)*/
    if (AF0BW02.AF0BWCHG[AFWIXM] == "C") /* With valid changes*/
      AF0BW02.AF0BWCHG[AFWIXM] = "Y"; /* For update OK*/
      if (AF0BW02.AF0BWFDI[AFWIXM] == "Y")
        AF0BW02.AF0BWFDL[AFWIXM] = AF0BM001.AF2FSTDL[AFWIXM];
      end
      if (AF0BW02.AF0BWFOI[AFWIXM] == "Y")
        AF0BW02.AF0BWFOD[AFWIXM] = AF0BM001.AF0BMFOD[AFWIXM];
      end
    end

    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
  end

end // end AF0BS22

// Update DACAST.VAFSTY01 DB
Function AF0BS23()
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/


   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/

  set AF2REC empty; /* Reset Wk Storage field*/

                   /* (Build DB Keys)*/
  AF2REC.SY1STNBR = AF0BW02.AF0BWSTM[AFWIDX4]; /* Style no.*/
  AF2REC.XDMCD = AF0BW02.AF0BWXDM[AFWIDX4]; /* Dim cd*/
  AF2REC.XDVCD = AF0BW02.AF0BWDIV[AFWIDX4]; /* Div cd*/
  AF2REC.XSECD = AF0BW02.AF0BWXSE[AFWIDX4]; /* Season cd*/
  AF2REC.XSNYR = AF0BW02.AF0BWXSN[AFWIDX4]; /* Season cd*/
  AF2REC.PG1FCTCD = AF0BW02.AF0BWFCT[AFWIDX4]; /* Forecaster cd*/
  AF2REC.XGACD = AF0BW02.AF0BWGNA[AFWIDX4]; /* G/A cd*/
  AF2REC.XPCCD = AF0BW02.AF0BWPCC[AFWIDX4]; /* CAT cd*/
  AF2REC.XSUCD = AF0BW02.AF0BWSLC[AFWIDX4]; /* SIL cd*/
  AF2REC.SY4SZSCL = AF0BW02.AF0BWSZS[AFWIDX4]; /* Size scale*/
  AF2REC.AF2FSTST = AF0BW02.AF0BWFST[AFWIDX4]; /* Size status*/
  AF2REC.XPRCD = AF0BW02.AF0BWPRT[AFWIDX4]; /* type code*/
  AF2REC.XPLCD = AF0BW02.AF0BWPRL[AFWIDX4]; /* line code*/
  AF2REC.XOWCD = AF0BW02.XOWCD[AFWIDX4]; /* default og*/

  AF2REC.XSECD = XP1REC.XSECD; /* Season cd*/

  AF0BW01.AF0BWXSY = 0; /* Initialize xsnyr wk area*/
  AF0BW01.AF0BWXSY = XP1REC.XSNYR; /* Move to wk area*/
   /* ------------------ y2k out begin ----------------*/
   /* AF0BW01.AF0BWXSY = AF0BW01.AF0BWXSY + 1900;/* Add Century*/
   /* ------------------ y2k out end ------------------*/
   /* ------------------ y2k in  begin ----------------*/
  if (AF0BW01.AF0BWXSY < 1900) /* no ccyy built yet*/
    if (AF0BW01.AF0BWXSY > 60)
      AF0BW01.AF0BWXSY = AF0BW01.AF0BWXSY + 1900; /* Add Century*/
    else
      AF0BW01.AF0BWXSY = AF0BW01.AF0BWXSY + 2000; /* Add Century*/
    end
  end
   /* ------------------ y2k in end -------------------*/
  AF2REC.XSNYR = AF0BW01.AF0BWXSY; /* Season yr*/



   /* *===================================**/
   /* *  Obtain Row From DACAST.VAFSTY01  **/
   /* *===================================**/
    /* --> The purpose of this select is to obtain the non-update*/
    /* data from the row to be updated, which would otherwise*/
    /* be stored. To protect against concurrent update, however,*/
    /* the original change count obtained when the particular row*/
    /* was first retrieved will be used in the update process.*/

  AF0BS24(); /* Select unique DACAST.VAFSTY01 row*/



   /* *========================================**/
   /* *  Move Update Items into Retrieved Row  **/
   /* *========================================**/

  if (AF0BW02.AF0BWFDI[AFWIDX4] == "Y") /* Dollar fcst updated*/
    if (AF2REC.AF2FSTST == "N") /* Style status is new*/
      AF2REC.AF2FSTST = "A"; /* Change status to active*/
      AF0BW02.AF0BWSTA[AFWIDX4] = "A";

    else

      AF2REC.AF2FSTST = AF0BW02.AF0BWSTA[AFWIDX4]; /* Style status*/

    end

  else

    AF2REC.AF2FSTST = AF0BW02.AF0BWSTA[AFWIDX4]; /* Style status*/

  end

  AF2REC.AF2FSTDL = AF0BW02.AF0BWFDL[AFWIDX4]; /* Forecast Dollar*/

  if (AF0BW02.AF0BWFOI[AFWIDX4] == "Y") /* update first offer date*/
    AF0BW01.AF0BWDTE = 0; /* Init date wk area*/
    AF0BW01.AF0BWDT2 = 0; /* Init date wk area*/
    AF0BW01.AF0BWDTE = AF0BW02.AF0BWFOD[AFWIDX4]; /* reformat date*/
    /* ---------------- y2k out begin ------------------*/
    /* AF0BW01.AF0BWDT2 = AF0BW01.AF0BWDT2 + 19000000;/* Add Century*/
    /* ---------------- y2k out begin ------------------*/
    /* ---------------- y2k out begin ------------------*/
    if (AF0BW01.AF0BWDYY > 60)
      AF0BW01.AF0BWDT2 = AF0BW01.AF0BWDT2 + 19000000; /* Add Century*/
    else
      AF0BW01.AF0BWDT2 = AF0BW01.AF0BWDT2 + 20000000; /* Add Century*/
    end
    /* ---------------- y2k out begin ------------------*/
    AF0BW01.AF0BWDY2 = AF0BW01.AF0BWDYY; /* reformat yy*/
    AF0BW01.AF0BWDM2 = AF0BW01.AF0BWDMM; /* reformat mm*/
    AF0BW01.AF0BWDD2 = AF0BW01.AF0BWDDD; /* reformat dd*/
    if (AF0BW01.AF0BWDT2 != AF2REC.AF2SFODT) /* first offer date*/
      AF2REC.AF2SFODT = AF0BW01.AF0BWDT2;
    end
    AF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    AF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    AF2REC.ZZZCHGCT = AF0BW02.AF0BWCCT[AFWIDX4]; /* Change count*/
  end



   /* *==============================**/
   /* *  Update DACAST.VAFSTY01 Row  **/
   /* *==============================**/

  try
    call "IO3510" ("U ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AF0BS30(); /* ; change color status*/
    return; /* Return to calling process*/

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row updated by other user/s*/

      AFWREC.AFWSWR = "N"; /* turn off reselect flag*/
      AFWREC.AFWNMO = 12; /* Indicate concurrent updating*/
      AFWREC.AFWPRCSN = "S23"; /* Process number*/
      AF0BW01.AF0BWCNF = "U"; /* Indicate reupdating required*/

      XP1REC.XGACD = AF0BW02.AF0BWXGA[AF0BWPGV]; /* Set XGA reference*/
      XP1REC.XPCCD = AF0BW02.AF0BWXPC[AF0BWPGV]; /* Set XPC reference*/
      XP1REC.XSUCD = AF0BW02.AF0BWXSU[AF0BWPGV]; /* Set XSU reference*/
      XP1REC.SY1STNBR = AF0BW02.AF0BWRPT[AF0BWPGV];
                                   /* Style reference*/
      XP1REC.XOWCD = AF0BW02.XOWCD[AF0BWPGV];
      XP1REC.XPRCD = AF0BW02.AF0BWXPR[AF0BWPGV]; /* prod type*/
      XP1REC.XPLCD = AF0BW02.AF0BWXPL[AF0BWPGV]; /* prod line*/
      XP1REC.XDVCD = AF0BW02.AF0BWIDV[AF0BWPGV]; /* division code*/

      set AF9REC empty; /* Reset combination ptrs*/
      AF0B111(); /* Get new G/A,CAT,SIL combination*/

      exit stack; /* Exit to redisplay map*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
        AF0BW01.AF0BWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S23 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0BS23

// Select unique DACAST.VAFSTY01
Function AF0BS24()
   /* ------------------------------------------------------------*/
   /* Select unique the DACAST.VAFSTY01 row to be updated.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3510" ("S ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      AF0BW01.AF0BWCNF = "N"; /* Reset upd confirm flag*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S24 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0BS24

// Count nbr styles w/ life cycle
Function AF0BS25()
  set PG2REC empty;
  set AF5REC empty;
  set AF0BW03 empty;
  PG2REC.XLCCD1 = AF0BM001.XLCCD[1];
  PG2REC.XLCCD2 = AF0BM001.XLCCD[2];
  PG2REC.XLCCD3 = AF0BM001.XLCCD[3];
  PG2REC.XLCCD4 = AF0BM001.XLCCD[4];
  PG2REC.XGPCD = "03";
  PG2REC.XDMCD = AF2REC.XDMCD;
  PG2REC.SY1STNBR = AF2REC.SY1STNBR;
  AF5REC.XSECD = AF2REC.XSECD;
  AF5REC.XSNYR = AF2REC.XSNYR;
  AF0BW03.AF0BWIOT = "SC";

  try
    call "AF1610" (AF0BW03, SQLCA, PG2REC, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S25 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "QUALIFY ON LIFE CYCLE   ";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "JOIN    "; /* Data base name*/
  TA1REC.TA1TBLVU = "AFSYCLR "; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0BS25

// Edit typ cd
Function AF0BS26()


  if (AF0BM001.XPRCD == " ") /* Map fld eq spaces*/
    AF0BW01.AF0BWTYP = " "; /* Space out save fld*/
    AF0BW01.AF0BWAPR = " "; /* Space out save desc*/
    AF0BM001.XPRABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  AF0BW01.AF0BWTYP = AF0BM001.XPRCD; /* save to wk map storage*/

  if (AF0BM001.XPRCD in XPRTBL.XPRCD)
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      if (AF0BM001.XPRCD == AF0BW01.AF0BWAT1) /* EQ previous xpr_cd*/
        AF0BW01.AF0BWAPR = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0BW01.AF0BWAT1 = AF0BM001.XPRCD; /* save to wk storage*/
        XP1REC.XPRCD = AF0BM001.XPRCD; /* save to wk storage*/
        XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0BW01.AF0BWAPR = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0BM001.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
    end
  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S26 "; /* Process number*/
  set AF0BM001.XPRCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 80; /* indicate error message*/
  AF0BW01.AF0BWAPR = " "; /* Space out save desc*/
  AF0BM001.XPRABRV = " "; /* Space out map desc*/



end // end AF0BS26

// Edit division cd
Function AF0BS27()


  if (AF0BM001.XDVCD == AF0BW01.AF0BWXDV) /* EQ previous xdv_cd*/
    return; /* Exit to calling process*/
  end

  if (AF0BM001.XDVCD == " ") /* Map fld eq spaces*/
    AF0BW01.XDVCD = " "; /* Space out save fld*/
    AF0BW01.XDVABRV = " "; /* Space out save desc*/
    AF0BM001.XDVABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/

  else

    if (AF0BM001.XDVCD in XDVTBL.XDVCD)
       /* IF XDVTBL.XXXSTAT(EZETST) EQ 'A'     ; Active status*/
      AF0BW01.AF0BWXDV = AF0BM001.XDVCD; /* save to wk storage*/
      AF0BW01.XDVCD = AF0BM001.XDVCD; /* save to wk map storage*/
      XP1REC.XDVCD = AF0BM001.XDVCD; /* save to wk storage*/
      AF0BW01.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
    end
  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S27 "; /* Process number*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  set AF0BM001.XDVCD cursor, bold; /* highlight field*/
  AF0BW01.XDVABRV = " "; /* Space out save desc*/



end // end AF0BS27

// Edit ln cd
Function AF0BS28()


  if (AF0BM001.XPLCD == " ") /* Map fld eq spaces*/
    AF0BW01.AF0BWLIN = " "; /* Space out save fld*/
    AF0BW01.AF0BWAPL = " "; /* Space out save desc*/
    AF0BM001.XPLABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  AF0BW01.AF0BWLIN = AF0BM001.XPLCD; /* save to wk map storage*/

  AF0BW01.AF0BWLN = AF0BM001.XPLCD; /* format to wk key*/
  AF0BW01.AF0BWLNP = "03"; /* Apparel GPC*/


  if (AF0BW01.AF0BWLNK in XPLTBL.XPLKEY)
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      if (AF0BM001.XPLCD == AF0BW01.AF0BWAL1) /* EQ previous xpl_cd*/
        AF0BW01.AF0BWAPL = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0BW01.AF0BWAL1 = AF0BM001.XPLCD; /* save to wk storage*/
        XP1REC.XPLCD = AF0BM001.XPLCD; /* save to wk storage*/
        XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0BW01.AF0BWAPL = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0BM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
    end
  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S28 "; /* Process number*/
  set AF0BM001.XPLCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  AF0BW01.AF0BWAPL = " "; /* Space out save desc*/
  AF0BM001.XPLABRV = " "; /* Space out map desc*/



end // end AF0BS28

// Edit life cycle codes
Function AF0BS29()

  AFWREC.AFWIDX1 = 1; /* Reset loop index*/
  while (AFWREC.AFWIDX1 <= 4) /* Edit life cycle codes*/
    if (AF0BM001.XLCCD[AFWIDX1] == " ") /* Map fld spaces*/
      AF0BW01.AF0BWLCD[AFWIDX1] = " ";
      AF0BM001.XLCCD[AFWIDX1] = " ";
    else
      if (AF0BM001.XLCCD[AFWIDX1] in XLCTBL.XLCCD)
        AF0BW01.AF0BWLCD[AFWIDX1] = XLCTBL.XLCCD[sysVar.arrayIndex];
      else
        AF0BW01.AF0BWLCD[AFWIDX1] = AF0BM001.XLCCD[AFWIDX1];
        XP1REC.XLCCD[AFWIDX1] = AF0BM001.XLCCD[AFWIDX1];
        AFWREC.AFWPRCSN = "S29 "; /* Process number*/
        set AF0BM001.XLCCD[AFWIDX1] cursor, bold;
        XP1REC.XP1MNO = 79; /* indicate error message*/
      end
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
  end

end // end AF0BS29

// inactivate color status
Function AF0BS30()
   /* ------------------------------------------------------------*/
   /* process color rows to update*/
   /* ------------------------------------------------------------*/
  AF0BS31(); /* select scan dacast.vafclr01.*/
  if (SQLCA.VAGen_SQLCODE == 0) /* loop through results table*/
    AF0BS32(); /* fetch first color row*/
    while (AFWREC.AFWSWC == " ")
      AF0BS33(); /* update color row*/
      AF0BS32(); /* fetch next color row*/
    end
  end
  AF0BS34();
  return; /* Return to calling process*/

end // end AF0BS30

// Select set DACAST.VAFCLR01
Function AF0BS31()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  set AF5REC empty; /* clear work area*/
  AF5REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
  AF5REC.XDMCD = AF2REC.XDMCD; /* Dimension cd*/
  AF5REC.XDVCD = AF2REC.XDVCD; /* Division cd*/
  AF5REC.XSECD = AF2REC.XSECD; /* Season cd*/
  AF5REC.XSNYR = AF2REC.XSNYR; /* season yr*/
  AF5REC.XOWCD = AF2REC.XOWCD; /* owner group*/

   /* *====================================**/
   /* *  select Data from DACAST.VAFCLR01  **/
   /* *====================================**/
  try
    call "IO3520" ("SS", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S31 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end AF0BS31

// Process DACAST.VAFCLR01 rows
Function AF0BS32()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until there are no more*/
     /* rows to be processed.*/
   /* All colors retrieved are stored in an array with their*/
     /* accompanying data.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
   /* *=============================**/
   /* *  FETCH DACAST.VAFCLR01 ROW  **/
   /* *=============================**/

  set AF5REC empty; /* clear work area*/
  try
    call "IO3520" ("SN", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
   /* ------------------------------------------------------------*/
    /* If call successful, process the retrieved row.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AFWREC.AFWSWC = " "; /* indicate a row feteched*/
    return; /* return*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* No more records found*/
      AFWREC.AFWSWC = "N"; /* indicate no row feteched*/
      return; /* Return to calling process*/
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S32 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end AF0BS32

// Update DACAST.VAFCLR01 DB
Function AF0BS33()
   /* ------------------------------------------------------------*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/
  AF5REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
  AF5REC.XOWCD = AF2REC.XOWCD; /* Owner group cd*/
  AF5REC.XDMCD = AF2REC.XDMCD; /* Dimension cd*/
  AF5REC.XDVCD = AF2REC.XDVCD; /* div cd*/
  AF5REC.XSECD = AF2REC.XSECD; /* Season cd*/
  AF5REC.XSNYR = AF2REC.XSNYR; /* Season yr*/
  AF5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AF5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  if (AF2REC.AF2FSTST == "I")
    AF5REC.AF5FSCST = "I"; /* Inactive color status*/
    AF5REC.AF5BTBQ = 0; /* Zero BTB qty*/
    AF5REC.AF5BTBPT = 0; /* Zero BTB %*/
  else
    if (AF0BW01.AF0BW-INACTIVE-STYLE-ACTIVATED[AFWIDX4] == "Y")
      AF5REC.AF5FSCST = "A"; /* active color status*/
    end
  end

   /* IF AF5REC.AF5FSCST NE 'I';       /* not inactive*/
    /* ;*/
    /* IF AF5REC.AF-IN-STK-PCT NE 0   /* an instock color*/
      /* AND AF5REC.XOWCD EQ '00';*/
      /* AF5REC.AF-IN-STK-QTY = AF2REC.AF2FSTDL * AF5REC.AF5FSCPT*/
        /* * AF5REC.AF-IN-STK-PCT / AF0BW02.AF0BWPRC(AFWIDX4) (R;*/
      /* AF5REC.AF-IN-STK-QTY = AF5REC.AF-IN-STK-QTY / 10000 (R;*/
    /* END;*/
    /* ;*/
   /* END;*/

   /* *==============================**/
   /* *  Update DACAST.VAFCLR01 Row  **/
   /* *==============================**/
  try
    call "IO3520" ("U ", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* reselct same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S33"; /* Process number*/
      AF0BW01.AF0BWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
        AF0BW01.AF0BWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S33 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end AF0BS33

// Close Dacast.vafclr01 csr
Function AF0BS34()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  try
    call "IO3520" ("CS", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S34 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

end // end AF0BS34

// Count open PO's for style
Function AF0BS35()
   /* ----------------------------------------------------------*/
   /* COUNT OPEN PO'S AGAINST STYLE*/
   /* ----------------------------------------------------------*/

  set PCYREC empty;
  set PC6REC empty;

  PC6REC.XGPCD = "03";
  PC6REC.SY1STNBR = AF0BM001.AF0BMSTY[AFWIXM];
  PC6REC.SY2CLRID = "*";
  PC6REC.XDMCD = "00";
  PC6REC.XOWCD = AF0BM001.XOWCD[AFWIXM];
  PC6REC.YSMXDV = "10";
  move AF0BW-XSE-1 to AF0BW-PCF-1 withV60Compat;
  move AF0BW-XSN-2 to AF0BW-PCF-2 withV60Compat;
  PC6REC.PCFSECD = AF0BW-PCFSECD;
  PCYREC.PCYFUNC = "T7";


  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWPRCSN = "S35"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "COUNT DPRODC.VPOITM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "AF0BS35"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* EXIT TO DISPLAY MAP*/


   /* ------------- End of process AF0BS35 -----------------------*/

end // end AF0BS35

// edit owner group
Function AF0BS36()


  if (AF0BM001.AF0BMXOW == AF0BW01.AF0BWXOW) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end

  if (AF0BM001.AF0BMXOW == " ") /* Map fld eq spaces*/
    AF0BW01.AF0BWXOW = " "; /* Space out save fld*/
    AF0BW01.XOWABRV = "ALL"; /* Space out save desc*/
    AF0BM001.XOWABRV = "ALL"; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  if (AF0BM001.AF0BMXOW == "**") /* Map fld eq spaces*/
    AF0BW01.AF0BWXOW = "**"; /* Space out save fld*/
    AF0BW01.XOWABRV = "ALL"; /* Space out save desc*/
    AF0BM001.XOWABRV = "ALL"; /* Space out map desc*/
    return; /* Return to calling process*/
  else

    XP1REC.XWHCD = "51";
    XP1REC.XOWCD = AF0BM001.AF0BMXOW;
    if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
      AF0BW01.AF0BWXOW = AF0BM001.AF0BMXOW; /* save to wk storage*/
      XP1REC.XOWCD = AF0BM001.AF0BMXOW; /* save to wk storage*/
      AF0BW01.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0BM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk map*/
      XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
    end
  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S36 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  set AF0BM001.AF0BMXOW cursor, bold; /* highlight field*/
  AF0BW01.XOWABRV = " "; /* Space out save desc*/



end // end AF0BS36

// Edit blank only indicator
Function AF0BS37()

  if (AF0BM001.AF0BM-BLNK-FL == " ")
    AF0BM001.AF0BM-BLNK-FL = "N";
    AF0BW01.AF0BW-BLNK-FL = "N";
    return;
  end

  if (AF0BM001.AF0BM-BLNK-FL != "Y"
   && AF0BM001.AF0BM-BLNK-FL != "N")

                   /* (field in error)*/
    AF0BW01.AF0BW-BLNK-FL = " "; /* Space out wk storage*/
    AFWREC.AFWPRCSN = "S37 "; /* Process number*/
    set AF0BM001.AF0BM-BLNK-FL cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 39; /* indicate error message*/

  else

                   /* (field is valid)*/
    AF0BW01.AF0BW-BLNK-FL = AF0BM001.AF0BM-BLNK-FL;


  end


end // end AF0BS37

// Select DACAST.VAFCLR01 cursor
Function AF0BS38()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  set AF5REC empty; /* clear work area*/
  AF5REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
  AF5REC.XOWCD = AF2REC.XOWCD; /* Owner group cd*/
  AF5REC.XDMCD = AF2REC.XDMCD; /* Dimension cd*/
  AF5REC.XDVCD = AF2REC.XDVCD; /* Division cd*/
  AF5REC.XSECD = AF2REC.XSECD; /* Season cd*/
  AF5REC.XSNYR = AF2REC.XSNYR; /* season yr*/

   /* *====================================**/
   /* *  select Data from DACAST.VAFCLR01  **/
   /* *====================================**/
  try
    call "IO3520" ("SS", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S38 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end AF0BS38

// Fetch 1 DACAST.VAFCLR01 row
Function AF0BS39()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until there are no more*/
     /* rows to be processed.*/
   /* All colors retrieved are stored in an array with their*/
     /* accompanying data.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  set AF5REC empty; /* clear work area*/

   /* *=============================**/
   /* *  FETCH DACAST.VAFCLR01 ROW  **/
   /* *=============================**/

  try
    call "IO3520" ("SN", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
    /* If call successful, process the retrieved row.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AFWREC.AFWSWC = " "; /* indicate a row feteched*/
    return; /* return*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* No more records found*/
      AFWREC.AFWSWC = "N"; /* indicate no row feteched*/
      return; /* Return to calling process*/
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0BW01.AF0BWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S39 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end AF0BS39

// Close DACAST.VAFCLR01 cursor
Function AF0BS40()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3520" ("CS", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S40 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

end // end AF0BS40

//*** RECORD=AF0BW01 ****
// Working Storage (1) for AF0E - Program-defined Variables
// ***********************
Record AF0BW01 type basicRecord
  10 AFWSWR AFWSWR ; 
  10 XDMCD XDMCD ; 
  10 XDVCD XDVCD ; 
  10 XDVABRV XDVABRV ; 
  10 XXXSTAT XXXSTAT ; 
  10 AF0BWADI AF0BWADI ; 
  10 AF0BWCIN AF0BWCIN ; 
  10 AF0BWCMS AF0BWCMS ; 
  10 AF0BWCNF AF0BWCNF ; 
  10 AF0BWCSY AF0BWCSY ; 
  10 AF0BWUSR AF0BWUSR ; 
  10 AF0BWTYP AF0BWTYP ; 
  10 AF0BWGA AF0BWGA ; 
  10 AF0BWLIN AF0BWLIN ; 
  10 AF0BWCAT AF0BWCAT ; 
  10 AF0BWSIL AF0BWSIL ; 
  10 SY1STNBR SY1STNBR ; 
  10 AF0BWAPR AF0BWAPR ; 
  10 AF0BWAGA AF0BWAGA ; 
  10 AF0BWAPL AF0BWAPL ; 
  10 AF0BWAPC AF0BWAPC ; 
  10 AF0BWASL AF0BWASL ; 
  10 AF0BWXOW AF0BWXOW ; 
  10 XOWABRV XOWABRV ; 
  10 AF0BWASY AF0BWASY ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 AF0BWSTD AF0BWSTD ; 
  10 AF0BWSTS AF0BWSTS ; 
  10 AF0BWSTY AF0BWSTY ; 
  10 AF0BWSDV AF0BWSDV ; 
  10 AF0BWSPR AF0BWSPR ; 
  10 AF0BWSGA AF0BWSGA ; 
  10 AF0BWSPL AF0BWSPL ; 
  10 AF0BWSPC AF0BWSPC ; 
  10 AF0BWSSU AF0BWSSU ; 
  10 AF0BWXPR AF0BWXPR ; 
  10 AF0BWAT1 AF0BWAT1 ; 
  10 AF0BWAT2 AF0BWAT2 ; 
  10 AF0BWXDV AF0BWXDV ; 
  10 AF0BWAD1 AF0BWAD1 ; 
  10 AF0BWAD2 AF0BWAD2 ; 
  10 AF0BWXGA AF0BWXGA ; 
  10 AF0BWAG1 AF0BWAG1 ; 
  10 AF0BWAG2 AF0BWAG2 ; 
  10 AF0BWXPL AF0BWXPL ; 
  10 AF0BWAL1 AF0BWAL1 ; 
  10 AF0BWAL2 AF0BWAL2 ; 
  10 AF0BWXPC AF0BWXPC ; 
  10 AF0BWAP1 AF0BWAP1 ; 
  10 AF0BWAP2 AF0BWAP2 ; 
  10 AF0BWXSU AF0BWXSU ; 
  10 AF0BWAS1 AF0BWAS1 ; 
  10 AF0BWAS2 AF0BWAS2 ; 
  10 AF0BWST1 AF0BWST1 ; 
  10 AF0BWST2 AF0BWST2 ; 
  10 AF0BWSDT AF0BWSDT ; 
  10 AF0BWEDT AF0BWEDT ; 
  10 AF0BWXSA AF0BWXSA ; 
  10 AF0BWXSY AF0BWXSY ; 
    15 AF0BWXSS AF0BWXSS ; 
      20 AF0BW-XSE-1 AF0BW-XSE-1 ; 
      20 AF0BW-XSE-2 AF0BW-XSE-2 ; 
    15 AF0BWXYR AF0BWXYR ; 
      20 AF0BW-XSN-1 AF0BW-XSN-1 ; 
      20 AF0BW-XSN-2 AF0BW-XSN-2 ; 
  10 AF0BW-PCFSECD AF0BW-PCFSECD ; 
    15 AF0BW-PCF-1 AF0BW-PCF-1 ; 
    15 AF0BW-PCF-2 AF0BW-PCF-2 ; 
  10 AF0BWGAK AF0BWGAK ; 
    15 AF0BWGAG AF0BWGAG ; 
    15 AF0BWGAP AF0BWGAP ; 
  10 AF0BWLNK AF0BWLNK ; 
    15 AF0BWLN AF0BWLN ; 
    15 AF0BWLNP AF0BWLNP ; 
  10 AF0BWLPI AF0BWLPI ; 
  10 AF0BWSTC AF0BWSTC ; 
  10 AF0BWCTS AF0BWCTS ; 
  10 AF0BWPGM AF0BWPGM ; 
  10 AF0BWPGV AF0BWPGV ; 
  10 AF0BWPND AF0BWPND ; 
  10 AF0BWSQU AF0BWSQU ; 
  10 AF0BWSYK AF0BWSYK ; 
  10 AF0BWSZT AF0BWSZT ; 
  10 AF0BWFSU AF0BWFSU ; 
  10 AF0BWWPR AF0BWWPR ; 
  10 AF0BWLCD AF0BWLCD [4] ; 
  10 AF0BWDTE AF0BWDTE ; 
    15 AF0BWDMM AF0BWDMM ; 
    15 AF0BWDDD AF0BWDDD ; 
    15 AF0BWDYY AF0BWDYY ; 
  10 AF0BWDT2 AF0BWDT2 ; 
    15 AF0BWDC2 AF0BWDC2 ; 
    15 AF0BWDY2 AF0BWDY2 ; 
    15 AF0BWDM2 AF0BWDM2 ; 
    15 AF0BWDD2 AF0BWDD2 ; 
  10 AF0BW-BLNK-FL AF0BW-BLNK-FL ; 
  10 AF0BW-INACTIVE-STYLE-ACTIVATED AF0BW-INACTIVE-STYLE-ACTIVATED [10] ; 
end // end AF0BW01

//*** RECORD=AF0BW02 ****
// Working Storage (2) for AF0E - Record Work Areas
// ***********************
Record AF0BW02 type basicRecord
  10 AF0BWSRP AF0BWSRP [101] ; 
    15 AF0BWXPR AF0BWXPR ; 
    15 AF0BWXGA AF0BWXGA ; 
    15 AF0BWXPL AF0BWXPL ; 
    15 AF0BWXPC AF0BWXPC ; 
    15 AF0BWXSU AF0BWXSU ; 
    15 AF0BWXOW AF0BWXOW ; 
    15 AF0BWRPT AF0BWRPT ; 
    15 AF0BWIDV AF0BWIDV ; 
  10 AF0BWMDL AF0BWMDL [10] ; 
    15 AF0BWCHG AF0BWCHG ; 
    15 AF0BWSTA AF0BWSTA ; 
    15 AF0BWDIV AF0BWDIV ; 
    15 AF0BWPRT AF0BWPRT ; 
    15 AF0BWGNA AF0BWGNA ; 
    15 AF0BWPRL AF0BWPRL ; 
    15 AF0BWPCC AF0BWPCC ; 
    15 AF0BWSLC AF0BWSLC ; 
    15 AF0BWSTM AF0BWSTM ; 
    15 XOWCD XOWCD ; 
    15 AF0BWSTN AF0BWSTN ; 
    15 AF0BWPRC AF0BWPRC ; 
    15 AF0BWFDI AF0BWFDI ; 
    15 AF0BWFDL AF0BWFDL ; 
    15 AF0BWFCU AF0BWFCU ; 
    15 AF0BWFOD AF0BWFOD ; 
    15 AF0BWFOI AF0BWFOI ; 
    15 AF0BWCCT AF0BWCCT ; 
    15 AF0BWXDM AF0BWXDM ; 
    15 AF0BWXSE AF0BWXSE ; 
    15 AF0BWXSN AF0BWXSN ; 
    15 AF0BWFCT AF0BWFCT ; 
    15 AF0BWSZS AF0BWSZS ; 
    15 AF0BWFST AF0BWFST ; 
end // end AF0BW02

//*** RECORD=AF0BW03 ****
// Working Storage (3) for AF0B - Record Work Areas
// ***********************
Record AF0BW03 type basicRecord
  10 AF0BWIOT AF0BWIOT ; 
  10 AF0BWCNT AF0BWCNT ; 
end // end AF0BW03

// Blank only indicator
DataItem AF0BW-BLNK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status changed to inactive
DataItem AF0BW-INACTIVE-STYLE-ACTIVATED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc-po-id-sesn-cd wk char 1
DataItem AF0BW-PCF-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc-po-id-sesn-cd wk char 2
DataItem AF0BW-PCF-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc-po-id-sesn-cd wk area
DataItem AF0BW-PCFSECD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE wk char 1
DataItem AF0BW-XSE-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE wk char 2
DataItem AF0BW-XSE-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk char 1
DataItem AF0BW-XSN-1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk char 2
DataItem AF0BW-XSN-2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alternate start XdvCD (1)
DataItem AF0BWAD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XdvCD (2)
DataItem AF0BWAD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color upd val flag
DataItem AF0BWADI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XGACD (1)
DataItem AF0BWAG1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XGACD (2)
DataItem AF0BWAG2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start G/A   desc
DataItem AF0BWAGA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPLCD (1)
DataItem AF0BWAL1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPLCD (2)
DataItem AF0BWAL2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPCCD (1)
DataItem AF0BWAP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPCCD (2)
DataItem AF0BWAP2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start CAT   desc
DataItem AF0BWAPC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start LIN   desc
DataItem AF0BWAPL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start TYP   desc
DataItem AF0BWAPR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XSUCD (1)
DataItem AF0BWAS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XSUCD (2)
DataItem AF0BWAS2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start SILH  desc
DataItem AF0BWASL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start STYLE desc
DataItem AF0BWASY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPRCD (1)
DataItem AF0BWAT1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPRCD (2)
DataItem AF0BWAT2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start category save
DataItem AF0BWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change count
DataItem AF0BWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Field change indicator
DataItem AF0BWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data contention indicator
DataItem AF0BWCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// G/A,CAT,SIL Comb. flag
DataItem AF0BWCMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update confirm flag
DataItem AF0BWCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cnt nbr of styles
DataItem AF0BWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of Styles to retrieve
DataItem AF0BWCSY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style count save area
DataItem AF0BWCTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date cc
DataItem AF0BWDC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date dd
DataItem AF0BWDD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date dd
DataItem AF0BWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start xdvcd
DataItem AF0BWDIV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date mm
DataItem AF0BWDM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date mm
DataItem AF0BWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date ccyymmdd
DataItem AF0BWDT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date mmddyy
DataItem AF0BWDTE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date yy
DataItem AF0BWDY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date yy
DataItem AF0BWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN End Date
DataItem AF0BWEDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecaster cd
DataItem AF0BWFCT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast units
DataItem AF0BWFCU num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fcst dollar update ind
DataItem AF0BWFDI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecasted style dollars
DataItem AF0BWFDL num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First Offer Date
DataItem AF0BWFOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first offer date update ind
DataItem AF0BWFOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status cd
DataItem AF0BWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast units
DataItem AF0BWFSU num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start gender/age save
DataItem AF0BWGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGATBL xgacd key
DataItem AF0BWGAG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGATBL key wk area
DataItem AF0BWGAK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGATBL xgpcd key
DataItem AF0BWGAP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Gender/Age cd
DataItem AF0BWGNA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal start xdvcd
DataItem AF0BWIDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// I/O task
DataItem AF0BWIOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// life cycle codes
DataItem AF0BWLCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start LIN TYP
DataItem AF0BWLIN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XplTBL lin cd
DataItem AF0BWLN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xpltbl key wk area
DataItem AF0BWLNK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XplTBL xgpcd key
DataItem AF0BWLNP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Row select loop mode ind
DataItem AF0BWLPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map detail lines array
DataItem AF0BWMDL char(81)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Category cd
DataItem AF0BWPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max page count
DataItem AF0BWPGM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current page count
DataItem AF0BWPGV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0BWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Price per unit
DataItem AF0BWPRC num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PR LIN cd
DataItem AF0BWPRL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PR TYP cd
DataItem AF0BWPRT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal Start Style
DataItem AF0BWRPT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN Start Date
DataItem AF0BWSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved DIV for suppress
DataItem AF0BWSDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved G/A for suppress
DataItem AF0BWSGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette save
DataItem AF0BWSIL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Silhouette cd
DataItem AF0BWSLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved CAT for suppress
DataItem AF0BWSPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved LIN for suppress
DataItem AF0BWSPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved TYP for suppress
DataItem AF0BWSPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style qualify flag
DataItem AF0BWSQU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reference ptr array
DataItem AF0BWSRP char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved SIL for suppress
DataItem AF0BWSSU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate style number 1
DataItem AF0BWST1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate style number 2
DataItem AF0BWST2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast status cd
DataItem AF0BWSTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid style count
DataItem AF0BWSTC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Status description
DataItem AF0BWSTD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style no
DataItem AF0BWSTM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style name
DataItem AF0BWSTN char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start status save
DataItem AF0BWSTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style save
DataItem AF0BWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style select wk key
DataItem AF0BWSYK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size scale cd
DataItem AF0BWSZS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size pct total
DataItem AF0BWSZT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start PR TYP
DataItem AF0BWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start xxxuser save
DataItem AF0BWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wholesale price
DataItem AF0BWWPR num(8,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dimension cd
DataItem AF0BWXDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal start xdvcd
DataItem AF0BWXDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XGACD
DataItem AF0BWXGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select owner group
DataItem AF0BWXOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPCCD
DataItem AF0BWXPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPLCD
DataItem AF0BWXPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPRCD
DataItem AF0BWXPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0BWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season cd
DataItem AF0BWXSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season yr
DataItem AF0BWXSN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSE wk season cd
DataItem AF0BWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XSUCD
DataItem AF0BWXSU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0BWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0BWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

