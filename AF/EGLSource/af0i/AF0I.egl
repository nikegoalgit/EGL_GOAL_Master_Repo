package af0i;

import af.common.AF-IN-STK-QTY;
import af.common.AF-LGSH-BLABK-IND;
import af.common.AF-LGSH-SELECT-FL;
import af.common.AF1REC;
import af.common.AF2REC;
import af.common.AF5REC;
import af.common.AF9REC;
import af.common.AFWREC;
import af.common.AFWSWR;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPAF100;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSLC;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.AIRSPD-LGSH-FL;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XDMCD;
import corpx1.XDVABRV;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGATBL;
import corpx1.XGPCD;
import corpx1.XLCTBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XSNBDT;
import corpx2.XSNXDT;
import corpy2.YSNTBL;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY5REC;
import sy.common.SY6REC;
import ta.common.TA1REC;
import ta.common.TAEREC;
import vv.common.VAFCLR02;
//*** PROGRAM=AF0I ****
// This application is designed to allow forecasters to inquire
// on Long and Short information for a given set of styles. The
// forecasters will be able to scroll through a whole G/A, CAT
// or  SIL  or  specify a given style. All pertinent Long and
// Short  information  will be displayed in two (2) maps. All
// valid colors for the style will be displayed, and scrolling
// functions are available to display all colors.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 04/19/90   JRAMOS   New application.
// 02/08/93   kjohn2   changes
// 06/28/93   lrein    added in stock processing
// 08/26/93   tdodso   added bla/bkgs indicator
// 11/29/93   lrein    fixed so can scroll through styles even
//                     though next style nbr is less than curr
//                     style nbr
// 03-09-94   LREIN    March table changes
// 03-17-94   mhuynh   Expanded the color % field to have two
//                     digits to the right of the decimal point
// 05-04-94   LREIN    Pick up new t-shirt lgsh field for blnks
//                     for display of long and short
// 02-10-95   KJ       XSN-YSN - RMVE SESN HARDCODE
// 09-26-95   RPRADO   ADDED AIR SCREEN
// 10-05-95   RPRADO   corrected prod line desc
// 10-05-95   RPRADO   added switch for airspd adjustments
// 02/21/96   kj       corporate BLA
// 07/96      kj        airspeed flags
// y2kfix 12/16/97 pharwo year 2000 compliance changes to
//                     af0i112, af0i152, af0is08, af0is21.
// 05/25/99   craymo    AF0IS21 - added logic to disallow any
//                      data entry beyond SU 2000.
// *********************
Program AF0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0IW01 AF0IW01; // record
  AF0IW02 AF0IW02; // record
  AF0IW03 AF0IW03; // record
  AF0IW04 AF0IW04; // record
  AF0IW05 AF0IW05; // record
  AF1REC AF1REC; // record
  AF2REC AF2REC; // record
  AF5REC AF5REC; // record
  AF9REC AF9REC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY5REC SY5REC; // record
  SY6REC SY6REC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VAFCLR02 VAFCLR02; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use AF0IM.AF0IM001,  // forms
      AF0IM.AF0IM002, 
      AF0IM.AF0IM003, 
      AF0IM.AF0IM010
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/
    ;
    set AF0IW01 empty; /* Initialize working storage*/
    set AF0IW02 empty; /* Initialize working storage*/
    set AF0IW03 empty; /* Initialize working storage*/
    set AF0IW04 empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set VAFCLR02 empty; /* Initialize working storage*/
    set AF9REC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set SY5REC empty; /* Initialize working storage*/
    set SY6REC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0IM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF0I"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    ;
    ;
                /* (Initialize Style Row Loop Limit Ctr)*/
    ;
    AF0IW01.AF0IWLIM = +10000; /* Stop loop every 10000 rows read*/
    ;
    ;
          /* (Define Map Environment, Assign/Edit Defaults)*/
    ;
    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process name*/
    ;
    AF0IW01.AF0IWCRY = "B"; /* Carryover flag option*/
    AF0IW01.AF0IWSCL = "Y"; /* Color display option*/
    AF0IW01.AF0IWFSP = "F"; /* Forecast spread mode*/
    AF0IW01.AF0IM-IN-STK-FLAG = "Y";
    AF0IW01.AF0IM-AIR-FLAG = "Y";
    ;
    ;
                    /* (Set Map Item Values)*/
    ;
    AF0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/
    ;
    ;
    if (XP1REC.XOWCD == " ")
      XP1REC.XOWCD = "00";
      XP1REC.XOWABRV = "N/A";
    end
    ;
                    /* (Process Passed Items)*/
    ;
    AF0IM001.XXXUSER = XP1REC.XXXUSER; /* Fcster code to map*/
    AF0IM001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    AF0IM001.XSNYR = XP1REC.XSNYR; /* Season yr to map*/
    AF0IM001.XPRCD = XP1REC.XPRCD; /* product type to map*/
    AF0IM001.XPLCD = XP1REC.XPLCD; /* product line to map*/
    AF0IM001.XGACD = XP1REC.XGACD; /* Gender age cd to map*/
    AF0IM001.XPCCD = XP1REC.XPCCD; /* Category cd to map*/
    AF0IM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd to map*/
    AF0IM001.SY1STNBR = XP1REC.SY1STNBR; /* Style cd to map*/
    AF0IM001.XOWCD = XP1REC.XOWCD; /* Owner group cd to map*/
    AF0IM001.XOWABRV = XP1REC.XOWABRV; /* Owner group abrv to map*/
    AF0IM001.AF0IM-BLNK-FL = "N"; /* Blank indicator*/
    AF0IM001.AF0IM-IN-STK-FLAG = "Y";
    AF0IM001.AF0IM-AIR-FLAG = "Y";
    ;
    XP1REC.XXXUSER = " "; /* Clear Fcster code*/
    XP1REC.XSECD = " "; /* Clear Season cd*/
    XP1REC.XSNYR = 0; /* Clear Season yr*/
    XP1REC.XPRCD = " "; /* Clear product type cd*/
    XP1REC.XPLCD = " "; /* Clear product line cd*/
    XP1REC.XGACD = " "; /* Clear Gender age cd*/
    XP1REC.XPCCD = " "; /* Clear Category cd*/
    XP1REC.XSUCD = " "; /* Clear Silhouette cd*/
    XP1REC.SY1STNBR = " "; /* Clear Style cd*/
    XP1REC.XOWCD = " "; /* Clear owner group cd*/
    XP1REC.XPRDESC = " "; /* Clear Xpr desc*/
    XP1REC.XGADESC = " "; /* Clear XGA desc*/
    XP1REC.XPCDESC = " "; /* Clear Xpc desc*/
    XP1REC.XSUDESC = " "; /* Clear Xsu desc*/
    XP1REC.SY1STYNM = " "; /* Clear Style desc*/
    XP1REC.XOWDESC = " "; /* Clear Xow desc*/
    ;
    ;
                 /* (Protect,Dark Map Dtl Lines)*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 8) /* Protect/darken map display*/
      ;
       /* SET AF0IM001.AF0IMGA(AFWIDX5) AUTOSKIP,DARK; xgacd*/
       /* SET AF0IM001.AF0IMPC(AFWIDX5) AUTOSKIP,DARK; xpccd*/
       /* SET AF0IM001.AF0IMSU(AFWIDX5) AUTOSKIP,DARK; xsucd*/
       /* SET AF0IM001.AF0IMSTY(AFWIDX5) AUTOSKIP,DARK; style no.*/
      set AF0IM001.AF0IMCLR[AFWIDX5] skip, invisible; /* color id*/
      set AF0IM001.AF0IMBKD[AFWIDX5] skip, invisible; /* booked dlr*/
      set AF0IM001.AF0IMBKP[AFWIDX5] skip, invisible; /* booked pct*/
      set AF0IM001.AF0IMFCD[AFWIDX5] skip, invisible; /* forecast dlr*/
      set AF0IM001.AF0IMFCP[AFWIDX5] skip, invisible; /* forecast pct*/
      set AF0IM001.AF0IMPRD[AFWIDX5] skip, invisible; /* purchased dlr*/
      set AF0IM001.AF0IMPRP[AFWIDX5] skip, invisible; /* purchased pct*/
      set AF0IM001.AF0IMABF[AFWIDX5] skip, invisible; /* add buy flag*/
      set AF0IM001.AF0IMLGQ[AFWIDX5] skip, invisible; /* long qty*/
      set AF0IM001.AF0IMSHQ[AFWIDX5] skip, invisible; /* short qty*/
      ;
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      ;
    end
    ;
    set AF0IM001.XSECD cursor; /* Set cursor position*/
    ;
    ;
                      /* (Converse Main Process)*/
    ;
    goto AF0I001; /* Main Process*/
    ;
    ;
    ;
    AF0I001: AF0I001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Apparel Fcst/Buy Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0I001; /* Converse Apparel Fcst/Buy Prototype*/
    ;
    ;
  end // end main
end // end AF0I

// Choose which map to display
Function AF0I001()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed. If an invalid map request is detected*/
   /* error is indicated and control is passed to the Master Menu*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.AFWMAP == "1") /* Map 1 (AF0IM001) request*/
    AF0I100(); /* Process Map 1*/
  else
    if (AFWREC.AFWMAP == "2") /* Map 2 (AF0IM002) request*/
      AF0I200(); /* Process Map 2*/
    else
      if (AFWREC.AFWMAP == "3") /* Map 3 (AF0IM010) request*/
        AF0I300(); /* Process Map 3*/
      else
        if (AFWREC.AFWMAP == "4") /* Map 4 (AF0IM003) request*/
          AF0I400(); /* Process Map 4*/
        else
                    /* (Map Number Invalid)*/
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1PGMNM = "AF0I001 "; /* Process name*/
          TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
          TA1REC.TA1MAP = AFWREC.AFWMAP; /* Map name*/
          TAEREC.TAEDESC1 = "MAP NUMBER IS INVALID";
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error rtn*/
          ;
        end
      end
    end
  end
  ;
  ;
end // end AF0I001

// Process map 1
Function AF0I100()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF0I110(); /* Obtain the data to display*/
  ;
  AF0I120(); /* Format and display the map*/
  ;
  AF0I130(); /* Check attention identifier*/
  ;
  AF0I140(); /* Reset fields to normal intensity*/
  ;
  AF0I150(); /* Verify the entered data*/
  ;
  AF0I160(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0I100

// Obtain data to display
Function AF0I110()
  ;
   /* ------------------------------------------------------------*/
   /* If new keys not entered, select set style using old keys.*/
   /* if old keys entered, get new G/A, CAT and SIL combination;*/
      /* set select style using new keys.*/
   /* Obtain and store all colors associated with the style;*/
      /* format all map detail pages.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/
  ;
  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || AF0IW01.AF0IWPND == "Y"           /* Pop-up window processing active*/
   || converseVar.eventKey is pa2       /* PA2 was pressed*/
   || converseVar.eventKey is pf7       /* PF7 was pressed*/
   || converseVar.eventKey is pf8       /* PF8 was pressed*/
   || converseVar.eventKey is pf10      /* PF10 was pressed*/
   || AFWREC.AFWFIRST == " ")           /* First time through*/
    return; /* Then exit to next process*/
  end
  ;
  ;
  ;
  if (AF9REC.AF9TYP99 == "Y") /* Last G/A,CAT,SIL comb.*/
    AFWREC.AFWSWR = "Y"; /* Force new selection*/
  end
  ;
  ;
  ;
   /* *=======================================**/
   /* *  Check for Data Contention Condition  **/
   /* *=======================================**/
  ;
  if (AF0IW01.AF0IWCIN == "Y") /* Data contention present*/
    ;
    AFWREC.AFWSWR = "Y"; /* Do new select cycle using old keys*/
    ;
  end
  ;
  ;
  ;
   /* *================================================**/
   /* * Set Select Using Old G/A,CAT & SIL Combination **/
   /* * ... And Obtain Next Style from Current Set     **/
   /* *================================================**/
  ;
  ;
  if (AFWREC.AFWSWR == "N") /* No new keys entered*/
    ;
    if (converseVar.eventKey is pf15 /* PF15 (Next G/A requested)*/
     || converseVar.eventKey is pf16 /* PF16 (Next G/A requested)*/
     || converseVar.eventKey is pf17 /* PF17 (Next G/A requested)*/
     || converseVar.eventKey is pf18 /* PF17 (Next G/A requested)*/
     || converseVar.eventKey is pf19) /* PF17 (Next G/A requested)*/
      ;
      AF0IW01.AF0IWCMS = "Y"; /* Get next G/A,CAT,SIL comb.*/
      AF0IW01.AF0IWSYK = " "; /* Reset style to select*/
      AF0IW01.AF0IWOGK = " "; /* Reset own gp to select*/
      AF0IW01.AF0IWCSY = 1; /* Set style ctr to get 1st style*/
      ;
    else
      ;
      if (converseVar.eventKey is pf10) /* Display map 1*/
        ;
        AF0IW01.AF0IWSYK = XP1REC.SY1STNBR; /* To sty work key*/
        AF0IW01.AF0IWOGK = XP1REC.XOWCD; /* To og  work key*/
        AF0IW01.AF0IWCSY = 1;
                                   /* Set style ctr to get 1st style*/
        ;
      else
        ;
        AF0IW01.AF0IWSYK = XP1REC.SY1STNBR; /* To sty work key*/
        AF0IW01.AF0IWOGK = XP1REC.XOWCD; /* To owg work key*/
        AF0IW01.AF0IWCSY = 2; /* Set style ctr to get next style*/
        ;
      end
      ;
    end
    ;
    ;
  else
    ;
     /* *========================================**/
     /* * Set Select Using New Keys,             **/
     /* * ... And Obtain First Style of New Set  **/
     /* *========================================**/
    ;
    if (AFWREC.AFWSWR == "Y") /* New keys entered*/
      ;
      AF0IW01.AF0IWCMS = "Y"; /* Get new G/A.CAT,SIL comb.*/
      AFWREC.AFWIDX3 = 0;
      set AF9REC empty; /* Clear work record*/
      ;
      AF0IW01.AF0IWCSY = 1; /* Set style ctr to get 1st style*/
      AF0IW01.AF0IWLCT = 0; /* Reset Style loop ctr*/
      ;
      if (AF0IM001.SY1STNBR != " ") /* Particular style entered*/
        AF0IW01.AF0IWSYK = AF0IW01.SY1STNBR; /* To sty work key*/
        if (AF0IM001.XOWCD != " " /* particular owg entered*/
         && AF0IM001.XOWCD != "**") /* particular owg entered*/
          AF0IW01.AF0IWOGK = AF0IW01.AF0IWOWG; /* To owg work key*/
        else
          AF0IW01.AF0IWOGK = " "; /* To owg work key*/
        end
      else
        AF0IW01.AF0IWSYK = " "; /* To sty work key*/
      end
      ;
    end
    ;
  end
  ;
  ;
  AF0IW01.AF0IWCIN = " "; /* Reset contention indicator*/
  ;
  ;
  ;
   /* *========================================================**/
   /* * Obtain Gender/Age, Category and Silhouette Combination **/
   /* *========================================================**/
  ;
  if (AF0IW01.AF0IWCMS != " ") /* Obtain next or new comb.*/
    ;
    AF0IW01.AF0IWCMS = " "; /* Reset indicator*/
    ;
    AF0I111(); /* Obtain new G/A, CAT & SIL Comb*/
    ;
  end
  ;
  ;
  ;
   /* *==========================**/
   /* * Select Style/Color Rows  **/
   /* *==========================**/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors*/
    AF0I112(); /* Select Scan Style*/
  end
  if (converseVar.validationMsgNum == 0) /* No errors*/
    AFWREC.AFWIDX5 = 0; /* Reset loop ctr*/
    while (AFWREC.AFWIDX5 < AF0IW01.AF0IWCSY) /* Until next style ret*/
      AF0I113(); /* Get next(or current) valid style*/
    end
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
      AF0I114(); /* Close Select Scan cursor*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        AF0I114(); /* Close Select Scan cursor*/
        AF9REC.AF9TYP99 = "Y"; /* Force end of current combination*/
        AF9REC.AF9GAG99 = "Y"; /* Force end of current combination*/
        AF9REC.AF9LIN99 = "Y"; /* Force end of current combination*/
        AF9REC.AF9CAT99 = "Y"; /* Force end of current combination*/
        AF9REC.AF9SIL99 = "Y"; /* Force end of current combination*/
        if (AFWREC.AFWIDX3 <= 0) /* No qualified colors found*/
          converseLib.validationFailed(15); /* Indicate no data found*/
          AFWREC.AFWPRCSN = "110 "; /* Process number*/
          AF0IS01(); /* Clear map display*/
          AF0IM001.XSECD = AF0IW01.AF0IWXSS;
          AF0IM001.XSNYR = AF0IW01.AF0IWXYR;
          AF0IM001.SY1STNBR = AF0IW01.SY1STNBR;
          AF0IM001.SY1SSTNM = AF0IW01.SY1SSTNM;
          set AF0IM001.XSECD cursor; /* Set cursor position*/
        end
      end
    end
  end
  ;
   /* *=========================================================**/
   /* * Check Obtain Data Status, Inactivate All Loop Controls  **/
   /* *=========================================================**/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0IW01.AF0IWLCT = 0; /* Reset style loop ctr*/
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
    AFWREC.AFWTSP = 1; /* Set TSQ page to 1*/
  end
end // end AF0I110

// Get next XGA,XPC,XSU comb.
Function AF0I111()
  ;
   /* ------------------------------------------------------------*/
   /* Get new G/A, CAT and SIL combination*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==========================================**/
   /* *  Obtain Next Combination for Processing  **/
   /* *==========================================**/
  ;
  AF9REC.XPRCD = XP1REC.XPRCD; /* product type cd*/
  AF9REC.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
  AF9REC.XPLCD = XP1REC.XPLCD; /* product line cd*/
  AF9REC.XPCCD = XP1REC.XPCCD; /* Category cd*/
  AF9REC.XSUCD = XP1REC.XSUCD; /* Sihouette cd*/
  ;
  XPAF100(); /* Combination retrieval rtn*/
  ;
  XP1REC.XPRCD = XPRTBL.XPRCD[AF9TPIXM]; /* Save to wk storage*/
  AF0IW01.AF0IWXPR = XPRTBL.XPRCD[AF9TPIXM]; /* Save internal start*/
  XP1REC.XPRDESC = XPRTBL.XPRDESC[AF9TPIXM]; /* Save to wk storage*/
  XP1REC.XPRABRV = XPRTBL.XPRABRV[AF9TPIXM]; /* Save to wk storage*/
  ;
  XP1REC.XGACD = XGATBL.XGACD[AF9GAIXM]; /* Save to wk storage*/
  AF0IW01.AF0IWXGA = XGATBL.XGACD[AF9GAIXM]; /* Save internal start*/
  XP1REC.XGADESC = XGATBL.XGADESC[AF9GAIXM]; /* Save to wk storage*/
  XP1REC.XGAABRV = XGATBL.XGAABRV[AF9GAIXM]; /* Save to wk storage*/
  ;
  XP1REC.XPLCD = XPLTBL.XPLCD[AF9LNIXM]; /* Save to wk storage*/
  AF0IW01.AF0IWXPL = XPLTBL.XPLCD[AF9LNIXM]; /* Save internal start*/
  XP1REC.XPLDESC = XPLTBL.XPLDESC[AF9LNIXM]; /* Save to wk storage*/
  XP1REC.XPLABRV = XPLTBL.XPLABRV[AF9LNIXM]; /* Save to wk storage*/
  ;
  XP1REC.XPCCD = XPCTBL.XPCCD[AF9PCIXM]; /* Save to wk storage*/
  AF0IW01.AF0IWXPC = XPCTBL.XPCCD[AF9PCIXM]; /* Save internal start*/
  XP1REC.XPCDESC = XPCTBL.XPCDESC[AF9PCIXM]; /* Save to wk storage*/
  XP1REC.XPCABRV = XPCTBL.XPCABRV[AF9PCIXM]; /* Save to wk storage*/
  ;
  XP1REC.XSUCD = XSUTBL.XSUCD[AF9SUIXM]; /* Save to wk storage*/
  AF0IW01.AF0IWXSU = XSUTBL.XSUCD[AF9SUIXM]; /* Save internal start*/
  XP1REC.XSUDESC = XSUTBL.XSUDESC[AF9SUIXM]; /* Save to wk storage*/
  XP1REC.XSUABRV = XSUTBL.XSUABRV[AF9SUIXM]; /* Save to wk storage*/
  ;
  ;
  if (AF9REC.AF9TYP99 == "Y") /* Last Gender/Age cd retrieved*/
    ;
    AF0IW01.AF0IWLCT = 0; /* Reset style loop ctr*/
    converseLib.validationFailed(15); /* Indicate no more data*/
    AFWREC.AFWPRCSN = "111 "; /* Process number*/
    ;
    AF0IS01(); /* Clear map detail*/
    ;
    set AF0IM001.XSECD cursor; /* Set cursor position*/
    ;
  end
  ;
  ;
end // end AF0I111

// Select set DACAST.VAFSTY01
Function AF0I112()
  ;
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set AF2REC empty; /* Reset rec work area*/
  ;
  AF2REC.XDVCD = XP1REC.XDVCD; /* division cd*/
  AF2REC.XPRCD = XP1REC.XPRCD; /* product type cd*/
  AF2REC.XGACD = XP1REC.XGACD; /* XGA cd*/
  AF2REC.XPLCD = XP1REC.XPLCD; /* product line cd*/
  ;
  if (XP1REC.XPCCD != "00")
    AF2REC.XPCCD = XP1REC.XPCCD; /* XPC cd*/
  end
  ;
  AF2REC.XSUCD = XP1REC.XSUCD; /* XSU cd*/
  ;
  AF2REC.SY1STNBR = AF0IW01.AF0IWSYK; /* Style no.*/
  ;
  AF2REC.SY4SZSCL = "**"; /* Size scale cd*/
  ;
  AF2REC.AF2FSTST = "*"; /* Forecast status*/
  ;
  if (AF0IM001.XOWCD == " " /* No og specified*/
   || AF0IM001.XOWCD == "**")
    AF2REC.XOWCD = "**"; /* Get all owner groups*/
  else
    AF2REC.XOWCD = XP1REC.XOWCD; /* Owner group cd*/
  end
  ;
  if (XP1REC.XXXUSER == " ") /* No user specified*/
    AF2REC.PG1FCTCD = "**"; /* Get all users*/
  else
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
  end
  ;
  AF0IW01.AF0IWXSY = 0; /* Reset xsnyr wk area*/
  AF0IW01.AF0IWXSY = XP1REC.XSNYR; /* Move to wk area*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* AF0IW01.AF0IWXSY = AF0IW01.AF0IWXSY + 1900;/* Add century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AF0IW01.AF0IWXYY > 60)
    AF0IW01.AF0IWXCC = 19;
  else
    AF0IW01.AF0IWXCC = 20;
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  AF2REC.XSNYR = AF0IW01.AF0IWXSY; /* XSE yr*/
  ;
  AF2REC.XSECD = XP1REC.XSECD; /* XSE cd*/
  ;
  ;
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFSTY01  **/
   /* *====================================**/
  ;
  try
    call "IO3510" ("SS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "112 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AF0I112

// Process DACAST.VAFSTY01 rows
Function AF0I113()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until the next style to*/
     /* be processed is retrieved (current style + 1). If done*/
     /* for the first time after a new select has been made, it*/
     /* will retrieve the first style in the set --*/
     /* (current style + 0).*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/
  ;
  try
    call "IO3510" ("SN", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
   /* ------------------------------------------------------------*/
   /* If call sucessful, store style forecast data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    converseLib.validationFailed(0);
                   /* (Check Loop Ctr Value)*/
    ;
    AF0IW01.AF0IWLCT = AF0IW01.AF0IWLCT + 1; /* Add to style ctr*/
    ;
    if (AF0IW01.AF0IWLCT > AF0IW01.AF0IWLIM) /* Loop limit exceeded*/
      converseLib.validationFailed(44); /* Indicate loop exceeded*/
      AFWREC.AFWIDX5 = +9999; /* Force loop termination.*/
      return; /* Exit to display map*/
    end
    ;
                   /* (Loop Ctr Within Limits)*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      ;
      /* *********** Added for IOMOD Changes  *****************/
      XP1REC.XPRCD = AF2REC.XPRCD; /* Update XPR Comb. code*/
      XP1REC.XGACD = AF2REC.XGACD; /* Update XGA Comb. code*/
      XP1REC.XPLCD = AF2REC.XPLCD; /* Update XPL Comb. code*/
      XP1REC.XPCCD = AF2REC.XPCCD; /* Update XPC Comb. code*/
      XP1REC.XSUCD = AF2REC.XSUCD; /* Update XSU Comb. code*/
      ;
      if (XP1REC.XPRCD in XPRTBL.XPRCD) /* Check code in table*/
        AF9REC.AF9TPIXM = sysVar.arrayIndex; /* Update XGA Comb. index*/
        AF9REC.AF9SWEND = "N"; /* initialize loop index*/
        while (AF9REC.AF9SWEND == "N")
          if (XPRTBL.XXXSTAT[AF9TPIXM] == "A")
            AF9REC.AF9SWEND = "Y";
          else
            AF9REC.AF9TPIXM = AF9REC.AF9TPIXM + 1;
            if (XP1REC.XPRCD != XPRTBL.XPRCD[AF9TPIXM])
              AF9REC.AF9TPIXM = AF9REC.AF9TPIXM - 1;
              AF9REC.AF9SWEND = "Y";
            end
          end
        end
        AF0IW01.AF0IWXPR = XPRTBL.XPRCD[AF9TPIXM];
        XP1REC.XPRDESC = XPRTBL.XPRDESC[AF9TPIXM];
        XP1REC.XPRABRV = XPRTBL.XPRABRV[AF9TPIXM];
      end
      ;
      if (XP1REC.XGACD in XGATBL.XGACD) /* Check code in table*/
        AF9REC.AF9GAIXM = sysVar.arrayIndex; /* Update XGA Comb. index*/
        AF9REC.AF9SWEND = "N"; /* initialize loop index*/
        while (AF9REC.AF9SWEND == "N")
          if (XGATBL.XXXSTAT[AF9GAIXM] == "A" && 
          XGATBL.XGPCD[AF9GAIXM] == "03")
            AF9REC.AF9SWEND = "Y";
          else
            AF9REC.AF9GAIXM = AF9REC.AF9GAIXM + 1;
            if (XP1REC.XGACD != XGATBL.XGACD[AF9GAIXM])
              AF9REC.AF9GAIXM = AF9REC.AF9GAIXM - 1;
              AF9REC.AF9SWEND = "Y";
            end
          end
        end
        AF0IW01.AF0IWXGA = XGATBL.XGACD[AF9GAIXM];
        XP1REC.XGADESC = XGATBL.XGADESC[AF9GAIXM];
        XP1REC.XGAABRV = XGATBL.XGAABRV[AF9GAIXM];
      end
      ;
      if (XP1REC.XPLCD in XPLTBL.XPLCD) /* Check code in table*/
        AF9REC.AF9LNIXM = sysVar.arrayIndex; /* Update XPL Comb. index*/
        AF9REC.AF9SWEND = "N"; /* initialize loop index*/
        while (AF9REC.AF9SWEND == "N")
          if (XPLTBL.XXXSTAT[AF9LNIXM] == "A" && 
          XPLTBL.XGPCD[AF9LNIXM] == "03")
            AF9REC.AF9SWEND = "Y";
          else
            AF9REC.AF9LNIXM = AF9REC.AF9LNIXM + 1;
            if (XP1REC.XPLCD != XPLTBL.XPLCD[AF9LNIXM])
              AF9REC.AF9LNIXM = AF9REC.AF9LNIXM - 1;
              AF9REC.AF9SWEND = "Y";
            end
          end
        end
        AF0IW01.AF0IWXPL = XPLTBL.XPLCD[AF9LNIXM];
        XP1REC.XPLDESC = XPLTBL.XPLDESC[AF9LNIXM];
        XP1REC.XPLABRV = XPLTBL.XPLABRV[AF9LNIXM];
      end
      ;
      if (XP1REC.XPCCD in XPCTBL.XPCCD) /* Check code in table*/
        AF9REC.AF9PCIXM = sysVar.arrayIndex; /* Update XPC Comb. index*/
        AF9REC.AF9SWEND = "N"; /* initialize loop index*/
        while (AF9REC.AF9SWEND == "N")
          if (XPCTBL.XXXSTAT[AF9PCIXM] == "A" && 
          XPCTBL.XGPCD[AF9PCIXM] == "03")
            AF9REC.AF9SWEND = "Y";
          else
            AF9REC.AF9PCIXM = AF9REC.AF9PCIXM + 1;
            if (XP1REC.XPCCD != XPCTBL.XPCCD[AF9PCIXM])
              AF9REC.AF9PCIXM = AF9REC.AF9PCIXM - 1;
              AF9REC.AF9SWEND = "Y";
            end
          end
        end
        AF0IW01.AF0IWXPC = XPCTBL.XPCCD[AF9PCIXM];
        XP1REC.XPCDESC = XPCTBL.XPCDESC[AF9PCIXM];
        XP1REC.XPCABRV = XPCTBL.XPCABRV[AF9PCIXM];
      end
      ;
      if (XP1REC.XSUCD in XSUTBL.XSUCD) /* Check code in table*/
        AF9REC.AF9SUIXM = sysVar.arrayIndex; /* Update XSU Comb. index*/
        AF9REC.AF9SWEND = "N"; /* initialize loop index*/
        while (AF9REC.AF9SWEND == "N")
          if (XSUTBL.XXXSTAT[AF9SUIXM] == "A" && 
          XSUTBL.XGPCD[AF9SUIXM] == "03")
            AF9REC.AF9SWEND = "Y";
          else
            AF9REC.AF9SUIXM = AF9REC.AF9SUIXM + 1;
            if (XP1REC.XSUCD != XSUTBL.XSUCD[AF9SUIXM])
              AF9REC.AF9SUIXM = AF9REC.AF9SUIXM - 1;
              AF9REC.AF9SWEND = "Y";
            end
          end
        end
        AF0IW01.AF0IWXSU = XSUTBL.XSUCD[AF9SUIXM];
        XP1REC.XSUDESC = XSUTBL.XSUDESC[AF9SUIXM];
        XP1REC.XSUABRV = XSUTBL.XSUABRV[AF9SUIXM];
      end
      /* ******************************************************/
      ;
      ;
      if (XP1REC.PG1FCTCD == " " /* Get all forecasters*/
       || AF2REC.PG1FCTCD == XP1REC.PG1FCTCD) /* Check forecaster cd*/
        ;
        if (AF2REC.AF2FSTST == "A" /* Style status active*/
         || AF2REC.AF2FSTST == "N") /* or Style status new*/
          ;
          AF0IW01.AF0IWSQU = " "; /* Reset style qual code*/
          AF0IS02(); /* Check if style qualified for*/
                                   /* processing*/
          ;
          if (AF0IW01.AF0IWSQU == "Y") /* Style qualified*/
            ;
            XP1REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
            XP1REC.XOWCD = AF2REC.XOWCD; /* Style no.*/
            ;
            AF0IS06(); /* Obtain price for style*/
            ;
            AF0IS07(); /* Obtain all colors w/in style*/
            ;
            if (AF0IW01.AF0IWSQU == "Y") /* Style still qualified*/
              if (AFWREC.AFWIDX3 > 0) /* Qualified colors obtained*/
                AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Add to style ctr*/
              end
            end
            ;
            return; /* Loop through (Style selected)*/
            ;
          else
            ;
            if (AF0IW01.SY1STNBR != " " /* style does not qualify*/
             && AF0IW01.SY1STNBR == AF2REC.SY1STNBR
             && AF0IW01.AF0IWOGK <= AF2REC.XOWCD)
              AFWREC.AFWIDX5 = +9999; /* Force loop termination.*/
            end
            ;
            return; /* Loop through (Bypass style row)*/
            ;
          end
          ;
        else
          ;
          return; /* Loop through (Bypass Style row)*/
          ;
        end
        ;
      else
        ;
        return; /* Loop through (Bypass Style row)*/
        ;
      end
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        ;
        AFWREC.AFWIDX5 = +9999; /* Terminate loop.*/
        ;
        return; /* Return to calling process*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "113 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0I113

// Close style cursor
Function AF0I114()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3510" ("CS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "114 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0I114

// Format and display the map
Function AF0I120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0IW01.AF0IWPND != "Y" /* No pop-up windows active*/
   && AFWREC.AFWFIRST != " ") /* or Not the first time*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error found*/
      ;
      AF0I121(); /* Format the data on the map*/
      ;
    else
      ;
      if (converseVar.validationMsgNum == 38) /* No error found*/
        AF0IS-001();
      end
      ;
      AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0IM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0IM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0IM001 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF0IM001 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF0IM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0IM001.CAITEM; /* Application data*/
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Reset AF9REC First Time Through Indicator*/
   /* ----------------------------------------------------------*/
  ;
  AF9REC.AF9FSTID = "Y"; /* Fst time indicator to 'Y'(es)*/
  ;
  ;
  ;
end // end AF0I120

// Format map contents
Function AF0I121()
  ;
   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/
  ;
  set AF0IM001 initial; /* M001 input/output area*/
  ;
  ;
   /* *=====================**/
   /* *  Format Map Header  **/
   /* *=====================**/
  ;
                /* (Format Header Start Flds)*/
  AF0IM001.XDVCD = AF0IW01.AF0IWDIV; /* division code*/
  AF0IM001.XDVABRV = AF0IW01.XDVABRV; /* division abbrev*/
  AF0IM001.XXXUSER = AF0IW01.AF0IWUSR; /* Forecaster id*/
  AF0IM001.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0IM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0IM001.XGACD = AF0IW01.AF0IWGA; /* Start G/A cd*/
  AF0IM001.XPRCD = AF0IW01.AF0IWTYP; /* Start type cd*/
  AF0IM001.XPCCD = AF0IW01.AF0IWCAT; /* Start CAT cd*/
  AF0IM001.XPLCD = AF0IW01.AF0IWSLN; /* Start line cd*/
  AF0IM001.XSUCD = AF0IW01.AF0IWSIL; /* Start SIL cd*/
  AF0IM001.XOWCD = AF0IW01.AF0IWOWG; /* Start OG cd*/
  AF0IM001.AF0IM-BLNK-FL = AF0IW01.AF0IW-BLNK-FL; /* BLANK indicator*/
  AF0IM001.AF0IM-IN-STK-FLAG = AF0IW01.AF0IM-IN-STK-FLAG;
  AF0IM001.AF0IM-AIR-FLAG = AF0IW01.AF0IM-AIR-FLAG;
  AF0IM001.AF0ITOTA = AF0IW04.AF0IMASD;
  ;
  if (AF0IW01.AF0IM-IN-STK-FLAG == "Y"
   || AF0IW01.AF0IM-IN-STK-FLAG == " ")
    AF0IM001.AF0IM-RAW-FCST-LIT = "STYLE RAW FCST:";
    AF0IM001.AF0IM-RAW-FCST = AF0IW04.AF0IM-RAW-FCST;
    set AF0IM001.AF0IM-RAW-FCST-LIT normal;
    set AF0IM001.AF0IM-RAW-FCST normal;
  end
  ;
  AF0IM001.SY1STNBR = AF0IW01.AF0IWSTY; /* Start Style no.*/
  AF0IM001.AF0IMCOV = AF0IW01.AF0IWCRY; /* Carryover option*/
  AF0IM001.XLCCD[1] = AF0IW01.AF0IWLC[1]; /* life cycle code*/
  AF0IM001.XLCCD[2] = AF0IW01.AF0IWLC[2]; /* life cycle code*/
  AF0IM001.XLCCD[3] = AF0IW01.AF0IWLC[3]; /* life cycle code*/
  AF0IM001.XLCCD[4] = AF0IW01.AF0IWLC[4]; /* life cycle code*/
  ;
             /* (Format Header Description Flds)*/
  AF0IM001.XPRABRV = AF0IW01.AF0IWDPR; /* product type abrv*/
  AF0IM001.XGAABRV = AF0IW01.AF0IWDGA; /* G/A desc*/
  AF0IM001.XPLABRV = AF0IW01.AF0IWDPL; /* product line abrv*/
  AF0IM001.XPCABRV = AF0IW01.AF0IWDPC; /* CAT desc*/
  AF0IM001.XSUABRV = AF0IW01.AF0IWDSL; /* SIL desc*/
  AF0IM001.XOWABRV = AF0IW01.AF0IWDOG; /* OG desc*/
  AF0IM001.SY1SSTNM = AF0IW01.AF0IWDSY; /* Style desc*/
  ;
  ;
  if (AF9REC.AF9GAIXM > 0 /* XGA Combination index valid*/
   && AF9REC.AF9PCIXM > 0 /* XPC Combination index valid*/
   && AF9REC.AF9SUIXM > 0 /* XSU Combination index valid*/
   && AF9REC.AF9TPIXM > 0 /* Xpr Combination index valid*/
   && AF9REC.AF9LNIXM > 0 /* Xpl Combination index valid*/
   && AFWREC.AFWIDX3 != 0) /* data to display*/
    ;
               /* (Format Current Combination Flds)*/
    AF0IM001.AF0IMDVC = XP1REC.XDVCD; /* Cur division cd*/
    AF0IM001.AF0IMDPT = XP1REC.XPRCD; /* Cur product type cd*/
    AF0IM001.AF0IWCGA = XP1REC.XGACD; /* Cur G/A cd*/
    AF0IM001.AF0IWCPL = XP1REC.XPLCD; /* Cur product line cd*/
    AF0IM001.AF0IWCPC = XP1REC.XPCCD; /* Cur CAT cd*/
    AF0IM001.AF0IWCSU = XP1REC.XSUCD; /* Cur SIL cd*/
    ;
    AF0IM001.SY5PRCUN = AF0IW01.AF0IWPRC; /* wholesale price*/
    ;
           /* (Format Current Combination Description Flds)*/
    AF0IM001.AF0IMDVA = XP1REC.XDVABRV; /* Cur div desc*/
    AF0IM001.AF0IWPTA = XP1REC.XPRABRV; /* Cur type desc*/
    AF0IM001.AF0IGAAB = XP1REC.XGAABRV; /* Cur G/A desc*/
    AF0IM001.AF0IWPLA = XP1REC.XPLABRV; /* Cur line desc*/
    AF0IM001.AF0IWPCA = XP1REC.XPCABRV; /* Cur CAT desc*/
    AF0IM001.AF0ISUAB = XP1REC.XSUABRV; /* Cur SIL desc*/
    AF0IM001.AF0IM-CURR-XOW = XP1REC.XOWCD; /* Cur OG cd*/
    AF0IM001.AF0IMCV2 = AF0IW01.AF0IWCV2; /* Carryover option*/
    AF0IM001.AF-LGSH-BLABK-IND = AF0IW01.AF-LGSH-BLABK-IND;
    AF0IM001.AF-LGSH-SELECT-FL = AF0IW01.AF-LGSH-SELECT-FL;
    ;
  end
  ;
   /* *==================================================================**/
  /* CHECK TO DISPLAY IF FORECAST PERCENT WARNING MESSAGE TO BE DISPLAYED **/
   /* *==================================================================**/
  ;
  if (AF0IW01.AF0IWTPC < 99.5
   || AF0IW01.AF0IWTPC > 100.5)
    set AF0IM001.AF0IM-PCT-WARNING skip, bold;
    set AF0IM001.AF0IM-PCT-MESG skip, bold;
    set AF0IM001.AF0IM-TOTAL-PCT skip, bold;
    AF0IM001.AF0IM-TOTAL-PCT = AF0IW01.AF0IWTPC;
  else /* DARKIN FIELDS*/
    set AF0IM001.AF0IM-PCT-WARNING skip, invisible;
    set AF0IM001.AF0IM-PCT-MESG skip, invisible;
    set AF0IM001.AF0IM-TOTAL-PCT skip, invisible;
  end
   /* *=============================**/
   /* *  Process Color Detail Recs  **/
   /* *=============================**/
  ;
  set AF0IM001.XSECD cursor; /* Set cursor position*/
  ;
  if (AFWREC.AFWIDX3 == 0) /* No data to display*/
    ;
    AFWREC.AFWPRCSN = "121 "; /* Process number*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page from map wk array.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  AF0IW01.AF0IWPSA = AF0IW01.AF0IWPGV * 7 - 7 + 1; /* Start addr*/
  ;
  if (AF0IW01.AF0IWPGV == AF0IW01.AF0IWPGM) /* Last page*/
    AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0IW01.AF0IWPSA + 1; /* Max lines*/
  else
    AFWREC.AFWIDX5 = 7; /* Max lines to display*/
  end
  ;
  ;
  while (AFWREC.AFWIXM <= AFWREC.AFWIDX5) /* Fill up page*/
    ;
    /* MOVE AF0IW03.AF0IMGA(AF0IWPSA) TO AF0IM001.AF0IMGA(AFWIXM);*/
    /* MOVE AF0IW03.AF0IMPC(AF0IWPSA) TO AF0IM001.AF0IMPC(AFWIXM);*/
    /* MOVE AF0IW03.AF0IMSU(AF0IWPSA) TO AF0IM001.AF0IMSU(AFWIXM);*/
    AF0IM001.AF0IMSTY = AF0IW03.AF0IMSTY[AF0IWPSA]; /* (AFWIXM)*/
    AF0IM001.AF0IMCLR[AFWIXM] = AF0IW03.AF0IMCLR[AF0IWPSA];
    AF0IM001.AF0IMBKD[AFWIXM] = AF0IW03.AF0IMBKD[AF0IWPSA];
    AF0IM001.AF0IMBKP[AFWIXM] = AF0IW03.AF0IMBKP[AF0IWPSA];
    AF0IM001.AF0IMFCD[AFWIXM] = AF0IW03.AF0IMFCD[AF0IWPSA];
    ;
    /* IF AF0IW01.AF0IM-IN-STK-FLAG EQ 'Y';*/
    ;
     /* IF AF0IW04.AF0IMFCD = 0;     /* no fcst dlrs*/
       /* MOVE 0 TO AF0IW01.AF0IM-TOT-COLR-PCT;*/
     /* ELSE;*/
       /* AF0IW01.AF0IM-TOT-COLR-PCT = 100 * AF0IW03.AF0IMFCD(AF0IWPSA) /*/
         /* AF0IW04.AF0IMFCD (R;*/
     /* END;*/
     /* ;*/
     /* MOVE AF0IW01.AF0IM-TOT-COLR-PCT TO AF0IM001.AF0IMFCP(AFWIXM);*/
    /* ELSE;*/
    AF0IM001.AF0IMFCP[AFWIXM] = AF0IW03.AF0IMFCP[AF0IWPSA];
    /* END;*/
    ;
    AF0IM001.AF0IMPRD[AFWIXM] = AF0IW03.AF0IMPRD[AF0IWPSA];
    AF0IM001.AF0IMPRP[AFWIXM] = AF0IW03.AF0IMPRP[AF0IWPSA];
    AF0IM001.AF0IMABF[AFWIXM] = AF0IW03.AF0IMABF[AF0IWPSA];
    AF0IM001.AF0IMLGQ[AFWIXM] = AF0IW03.AF0IMLGQ[AF0IWPSA];
    AF0IM001.AF0IMSHQ[AFWIXM] = AF0IW03.AF0IMSHQ[AF0IWPSA];
    ;
    AF0IW01.AF0IWPSA = AF0IW01.AF0IWPSA + 1; /* Next record*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
  end
  ;
  if (AF0IW01.AF0IWPGV == AF0IW01.AF0IWPGM /* Last page*/
   && AFWREC.AFWIXM <= 6)                 
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
  end
  ;
  if (AF0IW01.AF0IWPGV == AF0IW01.AF0IWPGM /* Last page*/
   && AFWREC.AFWIXM <= 8)                 
    ;
    AF0IM001.AF0IMCLR[AFWIXM] = "TOTAL";
    AF0IM001.AF0IMBKD[AFWIXM] = AF0IW04.AF0IMBKD;
    AF0IM001.AF0IMFCD[AFWIXM] = AF0IW04.AF0IMFCD;
    AF0IM001.AF0IMPRD[AFWIXM] = AF0IW04.AF0IMPRD;
    AF0IM001.AF0IMLGQ[AFWIXM] = AF0IW04.AF0IMLGQ;
    AF0IM001.AF0IMSHQ[AFWIXM] = AF0IW04.AF0IMSHQ;
  end
  ;
   /* -----------------------------------------------------------*/
    /* Set Protect,Dark All Unused Detail Lines*/
   /* -----------------------------------------------------------*/
  ;
  if (AF0IW01.AF0IWPGV == AF0IW01.AF0IWPGM) /* Last page*/
    ;
    AF0IW01.AF0IWPSA = AF0IW01.AF0IWPGV * 7 - 7 + 1; /* Start idx*/
    AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0IW01.AF0IWPSA + 1; /* Max*/
    ;
    AFWREC.AFWIXM = AFWREC.AFWIDX5 + 3; /* Set loop index start*/
    ;
    while (AFWREC.AFWIXM <= 7) /* Dark,prot unused lines*/
      ;
         /* SET AF0IM001.AF0IMGA(AFWIXM) AUTOSKIP,DARK;*/
         /* SET AF0IM001.AF0IMPC(AFWIXM) AUTOSKIP,DARK;*/
         /* SET AF0IM001.AF0IMSU(AFWIXM) AUTOSKIP,DARK;*/
         /* SET AF0IM001.AF0IMSTY(AFWIXM) AUTOSKIP,DARK;*/
      set AF0IM001.AF0IMCLR[AFWIXM] skip, invisible;
      set AF0IM001.AF0IMBKD[AFWIXM] skip, invisible;
      set AF0IM001.AF0IMBKP[AFWIXM] skip, invisible;
      set AF0IM001.AF0IMFCD[AFWIXM] skip, invisible;
      set AF0IM001.AF0IMFCP[AFWIXM] skip, invisible;
      set AF0IM001.AF0IMPRD[AFWIXM] skip, invisible;
      set AF0IM001.AF0IMPRP[AFWIXM] skip, invisible;
      set AF0IM001.AF0IMABF[AFWIXM] skip, invisible;
      set AF0IM001.AF0IMLGQ[AFWIXM] skip, invisible;
      set AF0IM001.AF0IMSHQ[AFWIXM] skip, invisible;
      ;
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I121

// Check attention identifier
Function AF0I130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0IM001 initial; /* Clear the map fields*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AF0IM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0IM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0IM001.CAITEM; /* Application data*/
      ;
      XP1REC.XPRCD = AF0IW01.AF0IWTYP; /* Restore start XPRCD*/
      XP1REC.XGACD = AF0IW01.AF0IWGA; /* Restore start XGACD*/
      XP1REC.XPLCD = AF0IW01.AF0IWSLN; /* Restore start XPLCD*/
      XP1REC.XPCCD = AF0IW01.AF0IWCAT; /* Restore start XPCCD*/
      XP1REC.XSUCD = AF0IW01.AF0IWSIL; /* Restore start XSUCD*/
      XP1REC.SY1STNBR = AF0IW01.SY1STNBR; /* Restore start style*/
      ;
      AF0IW01.AF0IWTYP = " "; /* Clear start XPRCD*/
      AF0IW01.AF0IWGA = " "; /* Clear start XGACD*/
      AF0IW01.AF0IWSLN = " "; /* Clear start XPLCD*/
      AF0IW01.AF0IWCAT = " "; /* Clear start xpcCD*/
      AF0IW01.AF0IWSIL = " "; /* Clear start xsuCD*/
      AF0IW01.SY1STNBR = " "; /* Clear start style*/
      ;
      AF0IW01.AF0IWDPR = " "; /* Clear type desc*/
      AF0IW01.AF0IWDGA = " "; /* Clear G/A desc*/
      AF0IW01.AF0IWDPL = " "; /* Clear line desc*/
      AF0IW01.AF0IWDPC = " "; /* Clear CAT desc*/
      AF0IW01.AF0IWDSL = " "; /* Clear SIL desc*/
      AF0IW01.AF0IWDSY = " "; /* Clear Style desc*/
      ;
      if (XP1REC.XPRCD == " ")
        XP1REC.XPRABRV = " ";
        XP1REC.XPRDESC = " ";
      end
      ;
      if (XP1REC.XGACD == " ")
        XP1REC.XGAABRV = " ";
        XP1REC.XGADESC = " ";
      end
      ;
      if (XP1REC.XPLCD == " ")
        XP1REC.XPLABRV = " ";
        XP1REC.XPLDESC = " ";
      end
      ;
      if (XP1REC.XPCCD == " ")
        XP1REC.XPCABRV = " ";
        XP1REC.XPCDESC = " ";
      end
      ;
      if (XP1REC.XSUCD == " ")
        XP1REC.XSUABRV = " ";
        XP1REC.XSUDESC = " ";
      end
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0IM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF0IM001.CAITEM > " ") /* Application data was entered*/
    set AF0IM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0IM001"; /* Appl find code*/
    end
    ;
    XP1REC.XGACD = AF0IW01.AF0IWGA; /* Restore start XGACD*/
    XP1REC.XPRCD = AF0IW01.AF0IWTYP; /* Restore start XPRCD*/
    XP1REC.XPLCD = AF0IW01.AF0IWSLN; /* Restore start XPLCD*/
    XP1REC.XPCCD = AF0IW01.AF0IWCAT; /* Restore start xpcCD*/
    XP1REC.XSUCD = AF0IW01.AF0IWSIL; /* Restore start xsuCD*/
    XP1REC.SY1STNBR = AF0IW01.SY1STNBR; /* Restore start style*/
    ;
    AF0IW01.AF0IWTYP = " "; /* Clear start XPRCD*/
    AF0IW01.AF0IWGA = " "; /* Clear start XGACD*/
    AF0IW01.AF0IWSLN = " "; /* Clear start XPLCD*/
    AF0IW01.AF0IWCAT = " "; /* Clear start xpcCD*/
    AF0IW01.AF0IWSIL = " "; /* Clear start xsuCD*/
    AF0IW01.SY1STNBR = " "; /* Clear start style*/
    ;
    AF0IW01.AF0IWDPR = " "; /* Clear type desc*/
    AF0IW01.AF0IWDGA = " "; /* Clear G/A desc*/
    AF0IW01.AF0IWDPL = " "; /* Clear line desc*/
    AF0IW01.AF0IWDPC = " "; /* Clear CAT desc*/
    AF0IW01.AF0IWDSL = " "; /* Clear SIL desc*/
    AF0IW01.AF0IWDSY = " "; /* Clear Style desc*/
    ;
    if (XP1REC.XPRCD == " ")
      XP1REC.XPRABRV = " ";
      XP1REC.XPRDESC = " ";
    end
    ;
    if (XP1REC.XGACD == " ")
      XP1REC.XGAABRV = " ";
      XP1REC.XGADESC = " ";
    end
    ;
    if (XP1REC.XPLCD == " ")
      XP1REC.XPLABRV = " ";
      XP1REC.XPLDESC = " ";
    end
    ;
    if (XP1REC.XPCCD == " ")
      XP1REC.XPCABRV = " ";
      XP1REC.XPCDESC = " ";
    end
    ;
    if (XP1REC.XSUCD == " ")
      XP1REC.XSUABRV = " ";
      XP1REC.XSUDESC = " ";
    end
    ;
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AFWREC.AFWFIRST == " ") /* First time through*/
    ;
    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   || converseVar.eventKey is pf16 /* PF16 was pressed*/
   || converseVar.eventKey is pf17 /* PF17 was pressed*/
   || converseVar.eventKey is pf18 /* PF18 was pressed*/
   || converseVar.eventKey is pf19) /* PF19 was pressed*/
    ;
    if (AF9REC.AF9GAG99 == "Y" /* Last G/A code retrieved*/
     || AF9REC.AF9CAT99 == "Y" /* Last CAT code retrieved*/
     || AF9REC.AF9SIL99 == "Y" /* Last SIL code retrieved*/
     || AF9REC.AF9TYP99 == "Y" /* Last type code retrieved*/
     || AF9REC.AF9LIN99 == "Y") /* Last line code retrieved*/
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(15); /* Indicate no data to display*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I130

// Reset highlighted fields
Function AF0I140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0IM001.XXXUSER normal; /* Forecaster cd*/
  set AF0IM001.XSECD normal; /* Sesn cd*/
  set AF0IM001.XSNYR normal; /* Sesn yr*/
  set AF0IM001.XPRCD normal; /* Product type cd*/
  set AF0IM001.XGACD normal; /* Gender Age cd*/
  set AF0IM001.XPLCD normal; /* Product line cd*/
  set AF0IM001.XPCCD normal; /* Category cd*/
  set AF0IM001.XSUCD normal; /* Silhouette cd*/
  set AF0IM001.XDVCD normal; /* Division cd*/
  set AF0IM001.XLCCD[1] normal; /* Lif cycle select code*/
  set AF0IM001.XLCCD[2] normal; /* Lif cycle select code*/
  set AF0IM001.XLCCD[3] normal; /* Lif cycle select code*/
  set AF0IM001.XLCCD[4] normal; /* Lif cycle select code*/
  set AF0IM001.SY1STNBR normal; /* Style no.*/
  set AF0IM001.AF0IMCOV normal; /* Carryover flag*/
  set AF0IM001.XOWCD normal; /* Owner group cd*/
  set AF0IM001.AF0IM-BLNK-FL normal; /* BLANKS indicator*/
  set AF0IM001.AF0IM-RAW-FCST-LIT initialAttributes; /* title raw fcst*/
  set AF0IM001.AF0IM-RAW-FCST initialAttributes; /* raw fcst amt*/
  ;
  AF0IM001.XXXPRCNM = "AF0I    "; /* Reset process name*/
  ;
  ;
  set AF0IM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0IM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/
  ;
  if (AF0IM001.XSECD == "?"
   || AF0IM001.XDVCD == "?"
   || AF0IM001.XPRCD == "?"
   || AF0IM001.XGACD == "?"
   || AF0IM001.XPLCD == "?"
   || AF0IM001.XPCCD == "?"
   || AF0IM001.XSUCD == "?"
   || AF0IM001.XLCCD[1] == "?"
   || AF0IM001.XOWCD == "?")
    ;
    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    ;
    AF0IW01.AF0IWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/
  ;
  if (AF0IM001.XSECD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XSECD = AF0IM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSE(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0IM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XDVCD   * Division cd*/
   /* *============================**/
  ;
  if (AF0IM001.XDVCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XDVCD = AF0IM001.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSDV(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
      AF0IM001.XDVCD = " "; /* Move selected code to map*/
      AF0IM001.XDVABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0IM001.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
      AF0IM001.XDVABRV = XP1REC.XDVABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product type cd*/
   /* *============================**/
  ;
  if (AF0IM001.XPRCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPRCD = AF0IM001.XPRCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPR(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
      AF0IM001.XPRCD = " "; /* Move selected code to map*/
      AF0IM001.XPRABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0IM001.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
      AF0IM001.XPRABRV = XP1REC.XPRABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/
  ;
  if (AF0IM001.XGACD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XGACD = AF0IM001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSGA(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
      AF0IM001.XGACD = " "; /* Move selected code to map*/
      AF0IM001.XGAABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0IM001.XGACD = XP1REC.XGACD; /* Move selected code to map*/
      AF0IM001.XGAABRV = XP1REC.XGAABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product line cd*/
   /* *============================**/
  ;
  if (AF0IM001.XPLCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPLCD = AF0IM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPL(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
      AF0IM001.XPLCD = " "; /* Move selected code to map*/
      AF0IM001.XPLABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0IM001.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
      AF0IM001.XPLABRV = XP1REC.XPLABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XLCCD   * Life cycle code*/
   /* *============================**/
  ;
  if (AF0IM001.XLCCD[1] == "?") /* Pop-up window requested*/
    ;
    XP1REC.XLCCD = AF0IM001.XLCCD[1]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSLC(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XLCCD == "?") /* Check results*/
      XP1REC.XLCCD = " "; /* Space out invalid data*/
      AF0IM001.XLCCD[1] = " "; /* Move selected code to map*/
    else /* Else*/
      AF0IM001.XLCCD[1] = XP1REC.XLCCD; /* Move selected code to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/
  ;
  if (AF0IM001.XPCCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPCCD = AF0IM001.XPCCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPC(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
      AF0IM001.XPCCD = " "; /* Move selected code to map*/
      AF0IM001.XPCABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0IM001.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
      AF0IM001.XPCABRV = XP1REC.XPCABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Silhouette cd*/
   /* *=============================**/
  ;
  ;
  if (AF0IM001.XSUCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XSUCD = AF0IM001.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSU(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
      AF0IM001.XSUCD = " "; /* Move selected code to map*/
      AF0IM001.XSUABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0IM001.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/
      AF0IM001.XSUABRV = XP1REC.XSUABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product line cd*/
   /* *============================**/
  ;
  if (AF0IM001.XPLCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPLCD = AF0IM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPL(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
      AF0IM001.XPLCD = " "; /* Move selected code to map*/
      AF0IM001.XPLABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0IM001.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
      AF0IM001.XPLABRV = XP1REC.XPLABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XOWCD   * Owner group cd*/
   /* *============================**/
  ;
  if (AF0IM001.XOWCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XOWCD = AF0IM001.XOWCD; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Display whse 51 only*/
    ;
    XSAFSOW(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
      AF0IM001.XOWCD = " "; /* Move selected code to map*/
      AF0IM001.XOWABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0IM001.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
      AF0IM001.XOWABRV = XP1REC.XOWABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/
  ;
  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0IW01.AF0IWPND = "Y"; /* Activate pop-up window ind*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
end // end AF0I140

// Verify entered data
Function AF0I150()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or Scroll forward request*/
    ;
    AF0I151(); /* Verify scroll request*/
    ;
    if (converseVar.validationMsgNum != 0) /* Errors found*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  else
    ;
    AF0I152(); /* Verify selection criteria*/
    ;
  end
  ;
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors found*/
    ;
    AF0IS01(); /* Clear map detail area*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  else
    ;
    if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/
      exit stack; /* Go back to start of applic*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I150

// Check scroll request
Function AF0I151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7) /* Scroll back request*/
    ;
    AF0IW01.AF0IWPGW = AF0IW01.AF0IWPGV - 1; /* Check resulting page*/
    ;
    if (AF0IW01.AF0IWPGW <= 0) /* No previous pages*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(2); /* No previous page to display*/
    end
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    ;
    AF0IW01.AF0IWPGW = AF0IW01.AF0IWPGV + 1; /* Check resulting page*/
    ;
    if (AF0IW01.AF0IWPGW > AF0IW01.AF0IWPGM) /* Exceeds max page*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(3); /* No more pages to display*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I151

// Verify selection data
Function AF0I152()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *************************************************************/
  ;
  ;
  AF0IW01.AFWSWR = AFWREC.AFWSWR; /* Save data select setting*/
  ;
  AFWREC.AFWSWR = "N"; /* initialize switch to 'OFF'*/
  AFWREC.AFWFIRST = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* initialize msg hold area*/
  ;
  ;
  ;
   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/
  ;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF AF0IW01.AF0IWSTY NE AF0IM001.SY1STNBR/* Start Style no.*/
   /* OR AF0IW01.AF0IWSIL NE AF0IM001.XSUCD/* Start SIL cd*/
   /* OR AF0IW01.AF0IWCAT NE AF0IM001.XPCCD/* Start CAT cd*/
   /* OR AF0IW01.AF0IWSLN NE AF0IM001.XPLCD/* Start line cd*/
   /* OR AF0IW01.AF0IWGA NE AF0IM001.XGACD/* Start G/A cd*/
   /* OR AF0IW01.AF0IWTYP NE AF0IM001.XPRCD/* Start type  cd*/
   /* OR AF0IW01.AF0IWDIV NE AF0IM001.XDVCD/* Start div cd*/
   /* OR AF0IW01.AF0IWLC(1) NE AF0IM001.XLCCD(1)/* select life cycle*/
   /* OR AF0IW01.AF0IWLC(2) NE AF0IM001.XLCCD(2)/* select life cycle*/
   /* OR AF0IW01.AF0IWLC(3) NE AF0IM001.XLCCD(3)/* select life cycle*/
   /* OR AF0IW01.AF0IWLC(4) NE AF0IM001.XLCCD(4)/* select life cycle*/
   /* OR XP1REC.XSNYR NE AF0IM001.XSNYR/* Season yr*/
   /* OR AF0IM001.XSNYR EQ 0         /* Map fld zeroed out*/
   /* OR XP1REC.XSECD NE AF0IM001.XSECD/* Season cd*/
   /* OR AF0IM001.XSECD EQ ' '       /* Map fld spaced out*/
   /* OR AF0IW01.AF0IWUSR NE AF0IM001.XXXUSER/* Forecaster cd*/
   /* OR AF0IW01.AF0IWCRY NE AF0IM001.AF0IMCOV/* carry over selection*/
   /* OR AF0IW01.AF0IWOWG NE AF0IM001.XOWCD/* start own gp cd*/
   /* OR AF0IW01.AF0IW-BLNK-FL NE AF0IM001.AF0IM-BLNK-FL*/
   /* OR AF0IW01.AF0IM-IN-STK-FLAG NE AF0IM001.AF0IM-IN-STK-FLAG*/
   /* OR AF0IW01.AF0IM-AIR-FLAG NE AF0IM001.AF0IM-AIR-FLAG;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AF0IW01.AF0IWSTY != AF0IM001.SY1STNBR   /* Start Style no.*/
   || AF0IW01.AF0IWSIL != AF0IM001.XSUCD      /* Start SIL cd*/
   || AF0IW01.AF0IWCAT != AF0IM001.XPCCD      /* Start CAT cd*/
   || AF0IW01.AF0IWSLN != AF0IM001.XPLCD      /* Start line cd*/
   || AF0IW01.AF0IWGA != AF0IM001.XGACD       /* Start G/A cd*/
   || AF0IW01.AF0IWTYP != AF0IM001.XPRCD      /* Start type  cd*/
   || AF0IW01.AF0IWDIV != AF0IM001.XDVCD      /* Start div cd*/
   || AF0IW01.AF0IWLC[1] != AF0IM001.XLCCD[1] /* select life cycle*/
   || AF0IW01.AF0IWLC[2] != AF0IM001.XLCCD[2] /* select life cycle*/
   || AF0IW01.AF0IWLC[3] != AF0IM001.XLCCD[3] /* select life cycle*/
   || AF0IW01.AF0IWLC[4] != AF0IM001.XLCCD[4] /* select life cycle*/
   || XP1REC.XSNYR != AF0IM001.XSNYR          /* Season yr*/
   || XP1REC.XSECD != AF0IM001.XSECD          /* Season cd*/
   || AF0IM001.XSECD == " "                   /* Map fld spaced out*/
   || AF0IW01.AF0IWUSR != AF0IM001.XXXUSER    /* Forecaster cd*/
   || AF0IW01.AF0IWCRY != AF0IM001.AF0IMCOV   /* carry over selection*/
   || AF0IW01.AF0IWOWG != AF0IM001.XOWCD      /* start own gp cd*/
   || AF0IW01.AF0IW-BLNK-FL != AF0IM001.AF0IM-BLNK-FL
   || AF0IW01.AF0IM-IN-STK-FLAG != AF0IM001.AF0IM-IN-STK-FLAG
   || AF0IW01.AF0IM-AIR-FLAG != AF0IM001.AF0IM-AIR-FLAG)
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    ;
    AFWREC.AFWSWR = "Y"; /* New criteria entered*/
    ;
  end
  ;
  ;
   /* *============================**/
   /* * Check End of G/A Indicator **/
   /* *============================**/
  ;
  if (AF9REC.AF9TYP99 == "Y" /* No more combo codes to process*/
   && AFWREC.AFWSWR == "N")  /* No new keys entered*/
    converseLib.validationFailed(15); /* Indicate no more data*/
    AFWREC.AFWPRCSN = "152 "; /* Process number*/
    exit stack; /* Exit to reselect data*/
  end
  ;
  ;
   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/
  ;
  if (AFWREC.AFWSWR == "Y" /* New keys entered*/
   && converseVar.eventKey not enter) /* Enter key not pressed*/
    ;
    converseLib.validationFailed(4); /* Request not permitted*/
    AFWREC.AFWPRCSN = "152 "; /* Process number*/
    exit stack; /* Exit to reselect data*/
    ;
  end
  ;
  ;
  ;
  ;
   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/
  ;
  ;
  if (AFWREC.AFWSWR == "Y") /* New criteria entered*/
    ;
    if (AF0IM001.AF0IM-IN-STK-FLAG == " "
     || AF0IM001.AF0IM-IN-STK-FLAG == "Y")
      AF0IW01.AF0IM-IN-STK-FLAG = "Y";
    else
      AF0IW01.AF0IM-IN-STK-FLAG = "N";
    end
    ;
    if (AF0IM001.AF0IM-AIR-FLAG == " "
     || AF0IM001.AF0IM-AIR-FLAG == "Y")
      AF0IW01.AF0IM-AIR-FLAG = "Y";
    else
      AF0IW01.AF0IM-AIR-FLAG = "N";
    end
    ;
    AF0IS21(); /* Edit season yr*/
    if (XP1REC.XP1MNO == 0)
      AF0IS32(); /* Edit carry-over selection flag*/
      AF0IS39(); /* Edit blank selection flag*/
      AF0IS41(); /* Edit airspd flag*/
      AF0IS38(); /* Edit owner group selection*/
      AF0IS34(); /* Edit life cycle selection*/
      AF0IS35(); /* Edit division.*/
      AF0IS14(); /* Edit style no.*/
      AF0IS18(); /* Edit silhouette cd*/
      AF0IS19(); /* Edit category cd*/
      AF0IS36(); /* Edit product line cd*/
      AF0IS20(); /* Edit gender/age cd*/
      AF0IS37(); /* Edit product type cd*/
      AF0IS22(); /* Edit season cd*/
      AF0IS23(); /* Edit forecaster cd*/
      ;
    end
  end
  ;
  ;
   /* *====================================**/
   /* *  Check Criteria Validation Status  **/
   /* *====================================**/
  ;
  if (XP1REC.XP1MNO == 0 /* No validation errors*/
   && AFWREC.AFWSWR == "Y") /* New selection criteria entered*/
    ;
    XP1REC.XSUCD = AF0IW01.AF0IWSIL; /* New start SIL cd*/
    XP1REC.XPCCD = AF0IW01.AF0IWCAT; /* New start CAT cd*/
    XP1REC.XPLCD = AF0IW01.AF0IWSLN; /* New start LINE cd*/
    XP1REC.XGACD = AF0IW01.AF0IWGA; /* New start G/A cd*/
    XP1REC.XPRCD = AF0IW01.AF0IWTYP; /* New start TYPE cd*/
    XP1REC.SY1STNBR = AF0IW01.SY1STNBR; /* New start STYLE*/
    ;
  end
  ;
  ;
  if (XP1REC.XP1MNO != 0) /* Validation error present*/
    ;
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    AF0IS01(); /* Protect/darken map display*/
    ;
  end
  ;
  ;
  ;
end // end AF0I152

// Process valid request
Function AF0I160()
  ;
   /* *============================**/
   /* *  Check Loop Limit Counter  **/
   /* *============================**/
  ;
  if (AF0IW01.AF0IWLCT > AF0IW01.AF0IWLIM) /* Style ctr loop limit reached*/
    AF0IW01.AF0IWLCT = 0; /* Reset loop ctr*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Scroll Request.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    AF0IW01.AF0IWPGV = AF0IW01.AF0IWPGV - 1; /* Decrement page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    AF0IW01.AF0IWPGV = AF0IW01.AF0IWPGV + 1; /* Increment page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Shift Screen Right request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Display AF0TM005*/
    ;
    AFWREC.AFWMAP = "2"; /* Indicate Map 2 to process*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* 'PF15', 'PF16', 'PF17' 'PF18' 'PF19' Key Processing.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf15 /* PF15 (next type)*/
   || converseVar.eventKey is pf16 /* PF16 (Next G/A)*/
   || converseVar.eventKey is pf17 /* or PF17 (Next line)*/
   || converseVar.eventKey is pf18 /* or PF18 (Next categ)*/
   || converseVar.eventKey is pf19) /* or PF19 (Next Sihouette)*/
    ;
    return; /* Execute next process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Display Process Options Map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf20) /* Display AF0IM002*/
    ;
    AFWREC.AFWMAP = "3"; /* Indicate Map 2 to process*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* 'ENTER' Key Processing.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* enter key pressed*/
    ;
        /* (Redisplay current data)*/
    ;
  end
  ;
  ;
  ;
end // end AF0I160

// Process map 2
Function AF0I200()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0I220(); /* Format and display the map*/
  ;
  AF0I230(); /* Check attention identifier*/
  ;
  AF0I240(); /* Reset fields to normal intensity*/
  ;
  AF0I250(); /* Verify the entered data*/
  ;
  AF0I260(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0I200

// Format and display the map
Function AF0I220()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No error found*/
    ;
    AF0I221(); /* Format the data on the map*/
    ;
  else
    ;
    AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0IM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0IM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0IM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0IM002 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF0IM002 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF0IM002.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0IM002.CAITEM; /* Application data*/
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Reset AF9REC First Time Through Indicator*/
   /* ----------------------------------------------------------*/
  ;
  AF9REC.AF9FSTID = "Y"; /* Fst time indicator to 'Y'(es)*/
  ;
  ;
  ;
end // end AF0I220

// Format map contents
Function AF0I221()
  ;
   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/
  ;
  set AF0IM002 initial; /* M001 input/output area*/
  ;
  ;
  ;
   /* *=====================**/
   /* *  Format Map Header  **/
   /* *=====================**/
  ;
                /* (Format Header Start Flds)*/
  AF0IM002.XXXUSER = AF0IW01.AF0IWUSR; /* Forecaster id*/
  AF0IM001.XDVCD = AF0IW01.AF0IWDIV; /* division code*/
  AF0IM001.XDVABRV = AF0IW01.XDVABRV; /* division abbreviation*/
  AF0IM002.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0IM002.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0IM002.XPRCD = AF0IW01.AF0IWTYP; /* start product type*/
  AF0IM002.XGACD = AF0IW01.AF0IWGA; /* Start G/A cd*/
  AF0IM002.XPLCD = AF0IW01.AF0IWSLN; /* start product line*/
  AF0IM002.XPCCD = AF0IW01.AF0IWCAT; /* Start CAT cd*/
  AF0IM002.XSUCD = AF0IW01.AF0IWSIL; /* Start SIL cd*/
  AF0IM002.SY1STNBR = AF0IW01.AF0IWSTY; /* Start Style no.*/
  AF0IM002.XOWCD = XP1REC.XOWCD; /* start OG cd*/
  AF0IM002.AF0IM-BLNK-FL = AF0IW01.AF0IW-BLNK-FL; /* Blanks only*/
  AF0IM002.AF0IM-IN-STK-FLAG = AF0IW01.AF0IM-IN-STK-FLAG;
  AF0IM002.AF0IM-AIR-FLAG = AF0IW01.AF0IM-AIR-FLAG;
  AF0IM002.AF0IMCOV = AF0IW01.AF0IWCRY; /* Carryover option*/
  AF0IM002.AF0ITOTA = AF0IW04.AF0IMASD; /* AIRSPEED TOTAL*/
  ;
  if (AF0IW01.AF0IM-IN-STK-FLAG == "Y")
    AF0IM002.AF0IM-RAW-FCST-LIT = "STYLE RAW-FCST:";
    AF0IM002.AF0IM-RAW-FCST = AF0IW04.AF0IM-RAW-FCST;
    set AF0IM002.AF0IM-RAW-FCST-LIT normal; /* make visible*/
    set AF0IM002.AF0IM-RAW-FCST normal; /* make visible*/
  end
  ;
             /* (Format Header Description Flds)*/
  AF0IM002.XPRABRV = AF0IW01.AF0IWDPR; /* type desc*/
  AF0IM002.XGAABRV = AF0IW01.AF0IWDGA; /* G/A desc*/
  AF0IM002.XPLABRV = AF0IW01.AF0IWDPL; /* line desc*/
  AF0IM002.XPCABRV = AF0IW01.AF0IWDPC; /* CAT desc*/
  AF0IM002.XSUABRV = AF0IW01.AF0IWDSL; /* SIL desc*/
  AF0IM002.SY1SSTNM = AF0IW01.AF0IWDSY; /* Style desc*/
  AF0IM002.XOWABRV = XP1REC.XOWABRV; /* OG desc*/
  AF0IM002.SY5PRCUN = AF0IW01.AF0IWPRC; /* wholesale price*/
  ;
  ;
  if (AF9REC.AF9GAIXM > 0 /* XGA Combination index valid*/
   && AF9REC.AF9PCIXM > 0 /* XPC Combination index valid*/
   && AF9REC.AF9TPIXM > 0 /* XPR Combination index valid*/
   && AF9REC.AF9LNIXM > 0 /* XPL Combination index valid*/
   && AF9REC.AF9SUIXM > 0 /* XSU Combination index valid*/
   && AFWREC.AFWIDX3 != 0) /* data to display*/
    ;
               /* (Format Current Combination Flds)*/
    AF0IM002.AF0IMDVC = XP1REC.XDVCD; /* Cur divisiom cd*/
    AF0IM002.AF0IWCPT = XP1REC.XPRCD; /* Cur type cd*/
    AF0IM002.AF0IWCGA = XP1REC.XGACD; /* Cur G/A cd*/
    AF0IM002.AF0IWCPL = XP1REC.XPLCD; /* Cur line cd*/
    AF0IM002.AF0IWCPC = XP1REC.XPCCD; /* Cur CAT cd*/
    AF0IM002.AF0IWCSU = XP1REC.XSUCD; /* Cur SIL cd*/
    AF0IM002.AF0IM-CURR-XOW = AF2REC.XOWCD; /* Cur OG cd*/
    AF0IM002.AF0IMCV2 = AF0IW01.AF0IWCV2; /* Carryover option*/
    AF0IM002.AF-LGSH-BLABK-IND = AF0IW01.AF-LGSH-BLABK-IND;
    AF0IM002.AF-LGSH-SELECT-FL = AF0IW01.AF-LGSH-SELECT-FL;
    ;
           /* (Format Current Combination Description Flds)*/
    AF0IM002.AF0IMDVA = XP1REC.XDVABRV; /* Cur div desc*/
    AF0IM002.AF0IWPTA = XP1REC.XPRABRV; /* Cur typ desc*/
    AF0IM002.AF0IGAAB = XP1REC.XGAABRV; /* Cur G/A desc*/
    AF0IM002.AF0IWPLA = XP1REC.XPLABRV; /* Cur line desc*/
    AF0IM002.AF0IWPCA = XP1REC.XPCABRV; /* Cur CAT desc*/
    AF0IM002.AF0ISUAB = XP1REC.XSUABRV; /* Cur SIL desc*/
    ;
  end
  ;
  ;
  ;
   /* *=============================**/
   /* *  Process Color Detail Recs  **/
   /* *=============================**/
  ;
  set AF0IM002.XSECD cursor; /* Set cursor position*/
  ;
  if (AFWREC.AFWIDX3 == 0) /* No data to display*/
    ;
    AFWREC.AFWPRCSN = "221 "; /* Process number*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page from map wk array.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  AF0IW01.AF0IWPSA = AF0IW01.AF0IWPGV * 7 - 7 + 1; /* Start addr*/
  ;
  if (AF0IW01.AF0IWPGV == AF0IW01.AF0IWPGM) /* Last page*/
    AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0IW01.AF0IWPSA + 1; /* Max lines*/
  else
    AFWREC.AFWIDX5 = 7; /* Max lines to display*/
  end
  ;
  AF0IM002.AF0IMSTY = AF0IW03.AF0IMSTY[1];
  ;
  while (AFWREC.AFWIXM <= AFWREC.AFWIDX5) /* Fill up page*/
    ;
    AF0IM002.AF0IMCLR[AFWIXM] = AF0IW03.AF0IMCLR[AF0IWPSA];
    AF0IM002.AF0IMBLD[AFWIXM] = AF0IW03.AF0IMBLD[AF0IWPSA];
    AF0IM002.AF0IMBLQ[AFWIXM] = AF0IW03.AF0IMBLQ[AF0IWPSA];
    AF0IM002.AF0IMLGD[AFWIXM] = AF0IW03.AF0IMLGD[AF0IWPSA];
    AF0IM002.AF0IMLGQ[AFWIXM] = AF0IW03.AF0IMLGQ[AF0IWPSA];
    AF0IM002.AF0IMSHD[AFWIXM] = AF0IW03.AF0IMSHD[AF0IWPSA];
    AF0IM002.AF0IMSHQ[AFWIXM] = AF0IW03.AF0IMSHQ[AF0IWPSA];
    AF0IM002.AF0IMLGC[AFWIXM] = AF0IW03.AF0IMLGC[AF0IWPSA];
    ;
    AF0IW01.AF0IWPSA = AF0IW01.AF0IWPSA + 1; /* Next record*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
  end
  ;
  ;
  if (AF0IW01.AF0IWPGV == AF0IW01.AF0IWPGM /* Last page*/
   && AFWREC.AFWIXM <= 7)                 
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    AF0IM002.AF0IMCLR[AFWIXM] = "TOTAL";
    AF0IM002.AF0IMBLD[AFWIXM] = AF0IW04.AF0IMBLD;
    AF0IM002.AF0IMBLQ[AFWIXM] = AF0IW04.AF0IMBLQ;
    AF0IM002.AF0IMLGD[AFWIXM] = AF0IW04.AF0IMLGD;
    AF0IM002.AF0IMLGQ[AFWIXM] = AF0IW04.AF0IMLGQ;
    AF0IM002.AF0IMSHD[AFWIXM] = AF0IW04.AF0IMSHD;
    AF0IM002.AF0IMSHQ[AFWIXM] = AF0IW04.AF0IMSHQ;
    AF0IM002.AF0IMLGC[AFWIXM] = AF0IW04.AF0IMLGC;
    ;
    ;
  end
  ;
   /* -----------------------------------------------------------*/
    /* Set Protect,Dark All Unused Detail Lines*/
   /* -----------------------------------------------------------*/
  ;
  if (AF0IW01.AF0IWPGV == AF0IW01.AF0IWPGM) /* Last page*/
    ;
    AF0IW01.AF0IWPSA = AF0IW01.AF0IWPGV * 7 - 7 + 1; /* Start idx*/
    AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0IW01.AF0IWPSA + 1; /* Max*/
    ;
    AFWREC.AFWIXM = AFWREC.AFWIDX5 + 3; /* Set loop index start*/
    ;
    while (AFWREC.AFWIXM <= 7) /* Dark,prot unused lines*/
      ;
      set AF0IM002.AF0IMCLR[AFWIXM] skip, invisible;
      set AF0IM002.AF0IMBLD[AFWIXM] skip, invisible;
      set AF0IM002.AF0IMBLQ[AFWIXM] skip, invisible;
      set AF0IM002.AF0IMLGD[AFWIXM] skip, invisible;
      set AF0IM002.AF0IMLGQ[AFWIXM] skip, invisible;
      set AF0IM002.AF0IMSHD[AFWIXM] skip, invisible;
      set AF0IM002.AF0IMSHQ[AFWIXM] skip, invisible;
      set AF0IM002.AF0IMLGC[AFWIXM] skip, invisible;
      ;
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I221

// Check attention identifier
Function AF0I230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0IM002 initial; /* Clear the map fields*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AF0IM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0IM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0IM002.CAITEM; /* Application data*/
      ;
      XP1REC.XPRCD = AF0IW01.AF0IWTYP; /* Restore start XPRCD*/
      XP1REC.XGACD = AF0IW01.AF0IWGA; /* Restore start XGACD*/
      XP1REC.XPLCD = AF0IW01.AF0IWSLN; /* Restore start XPLCD*/
      XP1REC.XPCCD = AF0IW01.AF0IWCAT; /* Restore start XPCCD*/
      XP1REC.XSUCD = AF0IW01.AF0IWSIL; /* Restore start XSUCD*/
      XP1REC.SY1STNBR = AF0IW01.SY1STNBR; /* Restore start style*/
      ;
      AF0IW01.AF0IWTYP = " "; /* Clear start XPRCD*/
      AF0IW01.AF0IWGA = " "; /* Clear start XGACD*/
      AF0IW01.AF0IWSLN = " "; /* Clear start XPLCD*/
      AF0IW01.AF0IWCAT = " "; /* Clear start xpcCD*/
      AF0IW01.AF0IWSIL = " "; /* Clear start xsuCD*/
      AF0IW01.SY1STNBR = " "; /* Clear start style*/
      ;
      AF0IW01.AF0IWDPR = " "; /* Clear type desc*/
      AF0IW01.AF0IWDGA = " "; /* Clear G/A desc*/
      AF0IW01.AF0IWDPL = " "; /* Clear line desc*/
      AF0IW01.AF0IWDPC = " "; /* Clear CAT desc*/
      AF0IW01.AF0IWDSL = " "; /* Clear SIL desc*/
      AF0IW01.AF0IWDSY = " "; /* Clear Style desc*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0IM002.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF0IM002.CAITEM > " ") /* Application data was entered*/
    set AF0IM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0IM002"; /* Appl find code*/
    end
    ;
    XP1REC.XGACD = AF0IW01.AF0IWGA; /* Restore start XGACD*/
    XP1REC.XPRCD = AF0IW01.AF0IWTYP; /* Restore start XPRCD*/
    XP1REC.XPLCD = AF0IW01.AF0IWSLN; /* Restore start XPLCD*/
    XP1REC.XPCCD = AF0IW01.AF0IWCAT; /* Restore start xpcCD*/
    XP1REC.XSUCD = AF0IW01.AF0IWSIL; /* Restore start xsuCD*/
    XP1REC.SY1STNBR = AF0IW01.SY1STNBR; /* Restore start style*/
    ;
    AF0IW01.AF0IWTYP = " "; /* Clear start XPRCD*/
    AF0IW01.AF0IWGA = " "; /* Clear start XGACD*/
    AF0IW01.AF0IWSLN = " "; /* Clear start XPLCD*/
    AF0IW01.AF0IWCAT = " "; /* Clear start xpcCD*/
    AF0IW01.AF0IWSIL = " "; /* Clear start xsuCD*/
    AF0IW01.SY1STNBR = " "; /* Clear start style*/
    ;
    AF0IW01.AF0IWDPR = " "; /* Clear type desc*/
    AF0IW01.AF0IWDGA = " "; /* Clear G/A desc*/
    AF0IW01.AF0IWDPL = " "; /* Clear line desc*/
    AF0IW01.AF0IWDPC = " "; /* Clear CAT desc*/
    AF0IW01.AF0IWDSL = " "; /* Clear SIL desc*/
    AF0IW01.AF0IWDSY = " "; /* Clear Style desc*/
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11) /* and PF11 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AFWREC.AFWFIRST == " ") /* First time through*/
    ;
    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "230 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I230

// Reset highlighted fields
Function AF0I240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes.*/
   /* ------------------------------------------------------------*/
  ;
  AF0IM002.XXXPRCNM = "AF0I    "; /* Reset process name*/
  ;
  ;
  set AF0IM002.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0IM002.CAITEM initialAttributes; /* Commarea application data*/
  set AF0IM002.AF0IM-RAW-FCST-LIT initialAttributes;
  set AF0IM002.AF0IM-RAW-FCST initialAttributes;
  ;
  ;
  ;
end // end AF0I240

// Verify entered data
Function AF0I250()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or Scroll forward request*/
    ;
    AF0I251(); /* Verify scroll request*/
    ;
    if (converseVar.validationMsgNum != 0) /* Errors found*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I250

// Check scroll request
Function AF0I251()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7) /* Scroll back request*/
    ;
    AF0IW01.AF0IWPGW = AF0IW01.AF0IWPGV - 1; /* Check resulting page*/
    ;
    if (AF0IW01.AF0IWPGW <= 0) /* No previous pages*/
      AFWREC.AFWPRCSN = "251 "; /* Process number*/
      AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(2); /* No previous page to display*/
    end
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    ;
    AF0IW01.AF0IWPGW = AF0IW01.AF0IWPGV + 1; /* Check resulting page*/
    ;
    if (AF0IW01.AF0IWPGW > AF0IW01.AF0IWPGM) /* Exceeds max page*/
      AFWREC.AFWPRCSN = "251 "; /* Process number*/
      AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(3); /* No more pages to display*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I251

// Process valid request
Function AF0I260()
  ;
   /* ------------------------------------------------------------*/
   /* Scroll Request.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    AF0IW01.AF0IWPGV = AF0IW01.AF0IWPGV - 1; /* Decrement page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    AF0IW01.AF0IWPGV = AF0IW01.AF0IWPGV + 1; /* Increment page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Shift Screen Left request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Display AF0iM001*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate Map 1 to process*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Shift Screen right request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Display AF0iM003*/
    ;
    AFWREC.AFWMAP = "4"; /* Indicate Map 4 to process*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end AF0I260

// Process map 3
Function AF0I300()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF0I320(); /* Format and display the map*/
  ;
  AF0I330(); /* Check attention identifier*/
  ;
  AF0I340(); /* Reset fields to normal intensity*/
  ;
  AF0I350(); /* Verify the entered data*/
  ;
  AF0I360(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0I300

// Format and display the map
Function AF0I320()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No error found*/
    ;
    AF0I321(); /* Format the data on the map*/
    ;
  else
    ;
    AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0IM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0IM010.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0IM010 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF0IM010 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Reset AF9REC First Time Through Indicator*/
   /* ----------------------------------------------------------*/
  ;
  AF9REC.AF9FSTID = "Y"; /* Fst time indicator to 'Y'(es)*/
  ;
  ;
  ;
end // end AF0I320

// Format map contents
Function AF0I321()
  ;
   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/
  ;
  set AF0IM010 initial; /* M001 input/output area*/
  ;
  ;
  ;
   /* *=======================**/
   /* *  Format Map Contents  **/
   /* *=======================**/
  ;
  AF0IM010.AF0IMCRY = AF0IW01.AF0IWCRY; /* Carryover flag*/
  AF0IM010.AF0IMSCL = AF0IW01.AF0IWSCL; /* Color display flag*/
  AF0IM010.AF0IMBBS = AF0IW01.AF0IWBBS; /* Bal to book sign*/
  AF0IM010.AF0IMBTB = AF0IW01.AF0IWBTB; /* Bal to book pcent*/
  AF0IM010.AF0IMFPS = AF0IW01.AF0IWFPS; /* Fcst vs Purchase sign*/
  AF0IM010.AF0IMFPV = AF0IW01.AF0IWFPV; /* Fcst vs Purchase pcent*/
  AF0IM010.AF0IMLSS = AF0IW01.AF0IWLSS; /* Long Short sign*/
  AF0IM010.AF0IMLSU = AF0IW01.AF0IWLSU; /* Long Short qty*/
  AF0IM010.AF0IMBUS = AF0IW01.AF0IWBUS; /* BLA units sign*/
  AF0IM010.AF0IMBLU = AF0IW01.AF0IWBLU; /* BLA units qty*/
  AF0IM010.AF0IMFSP = AF0IW01.AF0IWFSP; /* Forecast spread mode*/
  ;
  ;
  ;
end // end AF0I321

// Check attention identifier
Function AF0I330()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0IM010 initial; /* Clear the map fields*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0IM010"; /* Appl find code*/
    end
    ;
    XP1REC.XPRCD = AF0IW01.AF0IWTYP; /* Restore start xPRCD*/
    XP1REC.XGACD = AF0IW01.AF0IWGA; /* Restore start XGACD*/
    XP1REC.XPLCD = AF0IW01.AF0IWSLN; /* Restore start xPLCD*/
    XP1REC.XPCCD = AF0IW01.AF0IWCAT; /* Restore start xpcCD*/
    XP1REC.XSUCD = AF0IW01.AF0IWSIL; /* Restore start xsuCD*/
    XP1REC.SY1STNBR = AF0IW01.SY1STNBR; /* Restore start style*/
    ;
    AF0IW01.AF0IWTYP = " "; /* Clear start XPRCD*/
    AF0IW01.AF0IWGA = " "; /* Clear start XGACD*/
    AF0IW01.AF0IWSLN = " "; /* Clear start XPLCD*/
    AF0IW01.AF0IWCAT = " "; /* Clear start xpcCD*/
    AF0IW01.AF0IWSIL = " "; /* Clear start xsuCD*/
    AF0IW01.SY1STNBR = " "; /* Clear start style*/
    ;
    AF0IW01.AF0IWDPR = " "; /* Clear type desc*/
    AF0IW01.AF0IWDGA = " "; /* Clear G/A desc*/
    AF0IW01.AF0IWDPL = " "; /* Clear line desc*/
    AF0IW01.AF0IWDPC = " "; /* Clear CAT desc*/
    AF0IW01.AF0IWDSL = " "; /* Clear SIL desc*/
    AF0IW01.AF0IWDSY = " "; /* Clear Style desc*/
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "330 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
end // end AF0I330

// Reset highlighted fields
Function AF0I340()
   /* ------------------------------------------------------------*/
   /* Reset field attributes.*/
   /* ------------------------------------------------------------*/
  ;
  AF0IM010.XXXPRCNM = "AF0I    "; /* Reset process name*/
  ;
  set AF0IM010.AF0IMCRY initialAttributes; /* Carryover flag*/
  set AF0IM010.AF0IMSCL initialAttributes; /* Color display flag*/
  set AF0IM010.AF0IMBBS initialAttributes; /* Bal to book sign*/
  set AF0IM010.AF0IMBTB initialAttributes; /* Bal to book pcent*/
  set AF0IM010.AF0IMFPS initialAttributes; /* Fcst vs Purchase sign*/
  set AF0IM010.AF0IMFPV initialAttributes; /* Fcst vs Purchase pcent*/
  set AF0IM010.AF0IMLSS initialAttributes; /* Long Short sign*/
  set AF0IM010.AF0IMLSU initialAttributes; /* Long Short qty*/
  set AF0IM010.AF0IMBUS initialAttributes; /* BLA units sign*/
  set AF0IM010.AF0IMBLU initialAttributes; /* BLA units qty*/
  set AF0IM010.AF0IMFSP initialAttributes; /* Forecast spread mode*/
  ;
  ;
  ;
end // end AF0I340

// Verify entered data
Function AF0I350()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0IW01.AF0IWCRY != AF0IM010.AF0IMCRY /* Carryover flag*/
   || AF0IW01.AF0IWSCL != AF0IM010.AF0IMSCL /* Color display flag*/
   || AF0IW01.AF0IWBBS != AF0IM010.AF0IMBBS /* Bal to book sign*/
   || AF0IW01.AF0IWBTB != AF0IM010.AF0IMBTB /* Bal to book pcent*/
   || AF0IW01.AF0IWFPS != AF0IM010.AF0IMFPS /* Fcst vs Purchase sign*/
   || AF0IW01.AF0IWFPV != AF0IM010.AF0IMFPV /* Fcst vs Purchase pcent*/
   || AF0IW01.AF0IWLSS != AF0IM010.AF0IMLSS /* Long Short sign*/
   || AF0IW01.AF0IWLSU != AF0IM010.AF0IMLSU /* Long Short qty*/
   || AF0IW01.AF0IWBUS != AF0IM010.AF0IMBUS /* BLA units sign*/
   || AF0IW01.AF0IWBLU != AF0IM010.AF0IMBLU /* BLA units qty*/
   || AF0IW01.AF0IWFSP != AF0IM010.AF0IMFSP) /* Forecast spread mode*/
    ;
    AFWREC.AFWSWR = "Y"; /* Reselect new data*/
    ;
  end
  ;
  ;
  AF0IS25(); /* Carryover flag*/
  AF0IS26(); /* Color display flag*/
  AF0IS27(); /* Bal to book sign*/
  AF0IS28(); /* Fcst vs Purchase sign*/
  AF0IS29(); /* Long Short sign*/
  AF0IS30(); /* BLA units sign*/
  AF0IS31(); /* Forecast spread mode*/
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors found*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  ;
end // end AF0I350

// Process valid request
Function AF0I360()
  ;
   /* ------------------------------------------------------------*/
   /* Return to Inquiry screen request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf20) /* Display AF0iM001*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate Map 1 to process*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
end // end AF0I360

// Process map 4
Function AF0I400()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0I420(); /* Format and display the map*/
  ;
  AF0I430(); /* Check attention identifier*/
  ;
  AF0I440(); /* Reset fields to normal intensity*/
  ;
  AF0I450(); /* Verify the entered data*/
  ;
  AF0I460(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0I400

// Format and display map
Function AF0I420()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No error found*/
    ;
    AF0I421(); /* Format the data on the map*/
    ;
  else
    ;
    AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0IM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0IM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0IM003.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0IM003.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0IM003 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF0IM003 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF0IM003.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0IM003.CAITEM; /* Application data*/
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Reset AF9REC First Time Through Indicator*/
   /* ----------------------------------------------------------*/
  ;
  AF9REC.AF9FSTID = "Y"; /* Fst time indicator to 'Y'(es)*/
  ;
  ;
  ;
end // end AF0I420

// Format map contents
Function AF0I421()
  ;
   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/
  ;
  set AF0IM003 initial; /* M003 input/output area*/
  ;
  ;
  ;
   /* *=====================**/
   /* *  Format Map Header  **/
   /* *=====================**/
  ;
                /* (Format Header Start Flds)*/
  AF0IM001.XXXUSER = AF0IW01.AF0IWUSR; /* Forecaster id*/
  AF0IM001.XDVCD = AF0IW01.AF0IWDIV; /* division code*/
  AF0IM001.XDVABRV = AF0IW01.XDVABRV; /* division abbreviation*/
  AF0IM003.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0IM003.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0IM003.XPRCD = AF0IW01.AF0IWTYP; /* start product type*/
  AF0IM003.XGACD = AF0IW01.AF0IWGA; /* Start G/A cd*/
  AF0IM003.XPLCD = AF0IW01.AF0IWSLN; /* start product line*/
  AF0IM003.XPCCD = AF0IW01.AF0IWCAT; /* Start CAT cd*/
  AF0IM003.XSUCD = AF0IW01.AF0IWSIL; /* Start SIL cd*/
  AF0IM003.SY1STNBR = AF0IW01.AF0IWSTY; /* Start Style no.*/
  AF0IM003.XOWCD = XP1REC.XOWCD; /* start OG cd*/
  AF0IM003.AF0IM-BLNK-FL = AF0IW01.AF0IW-BLNK-FL; /* Blanks only*/
  AF0IM003.AF0IM-IN-STK-FLAG = AF0IW01.AF0IM-IN-STK-FLAG;
  AF0IM003.AF0IM-AIR-FLAG = AF0IW01.AF0IM-AIR-FLAG;
  AF0IM003.AF0IMCOV = AF0IW01.AF0IWCRY; /* Carryover option*/
  AF0IM003.AF0ITOTA = AF0IW04.AF0IMASD;
  ;
  if (AF0IW01.AF0IM-IN-STK-FLAG == "Y")
    AF0IM003.AF0IM-RAW-FCST-LIT = "STYLE RAW-FCST:";
    AF0IM003.AF0IM-RAW-FCST = AF0IW04.AF0IM-RAW-FCST;
    set AF0IM003.AF0IM-RAW-FCST-LIT normal; /* make visible*/
    set AF0IM003.AF0IM-RAW-FCST normal; /* make visible*/
  end
  ;
             /* (Format Header Description Flds)*/
  AF0IM003.XPRABRV = AF0IW01.AF0IWDPR; /* type desc*/
  AF0IM003.XGAABRV = AF0IW01.AF0IWDGA; /* G/A desc*/
  AF0IM003.XPLABRV = AF0IW01.AF0IWDPL; /* line desc*/
  AF0IM003.XPCABRV = AF0IW01.AF0IWDPC; /* CAT desc*/
  AF0IM003.XSUABRV = AF0IW01.AF0IWDSL; /* SIL desc*/
  AF0IM003.SY1SSTNM = AF0IW01.AF0IWDSY; /* Style desc*/
  AF0IM003.XOWABRV = XP1REC.XOWABRV; /* OG desc*/
  AF0IM003.SY5PRCUN = AF0IW01.AF0IWPRC; /* wholesale price*/
  ;
  ;
  if (AF9REC.AF9GAIXM > 0 /* XGA Combination index valid*/
   && AF9REC.AF9PCIXM > 0 /* XPC Combination index valid*/
   && AF9REC.AF9TPIXM > 0 /* XPR Combination index valid*/
   && AF9REC.AF9LNIXM > 0 /* XPL Combination index valid*/
   && AF9REC.AF9SUIXM > 0 /* XSU Combination index valid*/
   && AFWREC.AFWIDX3 != 0) /* data to display*/
    ;
               /* (Format Current Combination Flds)*/
    AF0IM003.AF0IMDVC = XP1REC.XDVCD; /* Cur divisiom cd*/
    AF0IM003.AF0IWCPT = XP1REC.XPRCD; /* Cur type cd*/
    AF0IM003.AF0IWCGA = XP1REC.XGACD; /* Cur G/A cd*/
    AF0IM003.AF0IWCPL = XP1REC.XPLCD; /* Cur line cd*/
    AF0IM003.AF0IWCPC = XP1REC.XPCCD; /* Cur CAT cd*/
    AF0IM003.AF0IWCSU = XP1REC.XSUCD; /* Cur SIL cd*/
    AF0IM003.AF0IM-CURR-XOW = AF2REC.XOWCD; /* Cur OG cd*/
    AF0IM003.AF0IMCV2 = AF0IW01.AF0IWCV2; /* Carryover option*/
    AF0IM003.AF-LGSH-BLABK-IND = AF0IW01.AF-LGSH-BLABK-IND;
    AF0IM003.AF-LGSH-SELECT-FL = AF0IW01.AF-LGSH-SELECT-FL;
    ;
           /* (Format Current Combination Description Flds)*/
    AF0IM003.AF0IMDVA = XP1REC.XDVABRV; /* Cur div desc*/
    AF0IM003.AF0IWPTA = XP1REC.XPRABRV; /* Cur typ desc*/
    AF0IM003.AF0IGAAB = XP1REC.XGAABRV; /* Cur G/A desc*/
    AF0IM003.AF0IWPLA = XP1REC.XPLABRV; /* Cur line desc*/
    AF0IM003.AF0IWPCA = XP1REC.XPCABRV; /* Cur CAT desc*/
    AF0IM003.AF0ISUAB = XP1REC.XSUABRV; /* Cur SIL desc*/
    ;
  end
  ;
  ;
  ;
   /* *=============================**/
   /* *  Process Color Detail Recs  **/
   /* *=============================**/
  ;
  set AF0IM003.XSECD cursor; /* Set cursor position*/
  ;
  if (AFWREC.AFWIDX3 == 0) /* No data to display*/
    ;
    AFWREC.AFWPRCSN = "221 "; /* Process number*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page from map wk array.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  AF0IW01.AF0IWPSA = AF0IW01.AF0IWPGV * 7 - 7 + 1; /* Start addr*/
  ;
  if (AF0IW01.AF0IWPGV == AF0IW01.AF0IWPGM) /* Last page*/
    AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0IW01.AF0IWPSA + 1; /* Max lines*/
  else
    AFWREC.AFWIDX5 = 7; /* Max lines to display*/
  end
  ;
  AF0IM003.AF0IMSTY = AF0IW03.AF0IMSTY[1];
  ;
  while (AFWREC.AFWIXM <= AFWREC.AFWIDX5) /* Fill up page*/
    ;
    AF0IM003.AF0IMCLR[AFWIXM] = AF0IW03.AF0IMCLR[AF0IWPSA];
    AF0IM003.AF0IMASD[AFWIXM] = AF0IW03.AF0IMASD[AF0IWPSA];
    AF0IM003.AF0IMASQ[AFWIXM] = AF0IW03.AF0IMASQ[AF0IWPSA];
    AF0IM003.AIRSPD-LGSH-FL[AFWIXM] = AF0IW03.AIRSPD-LGSH-FL[AF0IWPSA];
    ;
    AF0IW01.AF0IWPSA = AF0IW01.AF0IWPSA + 1; /* Next record*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
  end
  ;
  ;
  if (AF0IW01.AF0IWPGV == AF0IW01.AF0IWPGM /* Last page*/
   && AFWREC.AFWIXM <= 7)                 
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    AF0IM003.AF0IMCLR[AFWIXM] = "TOTAL";
    AF0IM003.AF0IMASD[AFWIXM] = AF0IW04.AF0IMASD;
    AF0IM003.AF0IMASQ[AFWIXM] = AF0IW04.AF0IMASQ;
    ;
    ;
  end
  ;
   /* -----------------------------------------------------------*/
    /* Set Protect,Dark All Unused Detail Lines*/
   /* -----------------------------------------------------------*/
  ;
  if (AF0IW01.AF0IWPGV == AF0IW01.AF0IWPGM) /* Last page*/
    ;
    AF0IW01.AF0IWPSA = AF0IW01.AF0IWPGV * 7 - 7 + 1; /* Start idx*/
    AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0IW01.AF0IWPSA + 1; /* Max*/
    ;
    AFWREC.AFWIXM = AFWREC.AFWIDX5 + 3; /* Set loop index start*/
    ;
    while (AFWREC.AFWIXM <= 7) /* Dark,prot unused lines*/
      ;
      set AF0IM003.AF0IMCLR[AFWIXM] skip, invisible;
      set AF0IM003.AF0IMASD[AFWIXM] skip, invisible;
      set AF0IM003.AF0IMASQ[AFWIXM] skip, invisible;
      ;
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I421

// Check attention identifier
Function AF0I430()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0IM003 initial; /* Clear the map fields*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AF0IM003.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0IM003.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0IM003.CAITEM; /* Application data*/
      ;
      XP1REC.XPRCD = AF0IW01.AF0IWTYP; /* Restore start XPRCD*/
      XP1REC.XGACD = AF0IW01.AF0IWGA; /* Restore start XGACD*/
      XP1REC.XPLCD = AF0IW01.AF0IWSLN; /* Restore start XPLCD*/
      XP1REC.XPCCD = AF0IW01.AF0IWCAT; /* Restore start XPCCD*/
      XP1REC.XSUCD = AF0IW01.AF0IWSIL; /* Restore start XSUCD*/
      XP1REC.SY1STNBR = AF0IW01.SY1STNBR; /* Restore start style*/
      ;
      AF0IW01.AF0IWTYP = " "; /* Clear start XPRCD*/
      AF0IW01.AF0IWGA = " "; /* Clear start XGACD*/
      AF0IW01.AF0IWSLN = " "; /* Clear start XPLCD*/
      AF0IW01.AF0IWCAT = " "; /* Clear start xpcCD*/
      AF0IW01.AF0IWSIL = " "; /* Clear start xsuCD*/
      AF0IW01.SY1STNBR = " "; /* Clear start style*/
      ;
      AF0IW01.AF0IWDPR = " "; /* Clear type desc*/
      AF0IW01.AF0IWDGA = " "; /* Clear G/A desc*/
      AF0IW01.AF0IWDPL = " "; /* Clear line desc*/
      AF0IW01.AF0IWDPC = " "; /* Clear CAT desc*/
      AF0IW01.AF0IWDSL = " "; /* Clear SIL desc*/
      AF0IW01.AF0IWDSY = " "; /* Clear Style desc*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0IM003.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF0IM003.CAITEM > " ") /* Application data was entered*/
    set AF0IM003.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0IM003"; /* Appl find code*/
    end
    ;
    XP1REC.XGACD = AF0IW01.AF0IWGA; /* Restore start XGACD*/
    XP1REC.XPRCD = AF0IW01.AF0IWTYP; /* Restore start XPRCD*/
    XP1REC.XPLCD = AF0IW01.AF0IWSLN; /* Restore start XPLCD*/
    XP1REC.XPCCD = AF0IW01.AF0IWCAT; /* Restore start xpcCD*/
    XP1REC.XSUCD = AF0IW01.AF0IWSIL; /* Restore start xsuCD*/
    XP1REC.SY1STNBR = AF0IW01.SY1STNBR; /* Restore start style*/
    ;
    AF0IW01.AF0IWTYP = " "; /* Clear start XPRCD*/
    AF0IW01.AF0IWGA = " "; /* Clear start XGACD*/
    AF0IW01.AF0IWSLN = " "; /* Clear start XPLCD*/
    AF0IW01.AF0IWCAT = " "; /* Clear start xpcCD*/
    AF0IW01.AF0IWSIL = " "; /* Clear start xsuCD*/
    AF0IW01.SY1STNBR = " "; /* Clear start style*/
    ;
    AF0IW01.AF0IWDPR = " "; /* Clear type desc*/
    AF0IW01.AF0IWDGA = " "; /* Clear G/A desc*/
    AF0IW01.AF0IWDPL = " "; /* Clear line desc*/
    AF0IW01.AF0IWDPC = " "; /* Clear CAT desc*/
    AF0IW01.AF0IWDSL = " "; /* Clear SIL desc*/
    AF0IW01.AF0IWDSY = " "; /* Clear Style desc*/
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10) /* and PF10 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AFWREC.AFWFIRST == " ") /* First time through*/
    ;
    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "230 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I430

// Reset highlighted fields
Function AF0I440()
   /* ------------------------------------------------------------*/
   /* Reset field attributes.*/
   /* ------------------------------------------------------------*/
  ;
  AF0IM002.XXXPRCNM = "AF0I    "; /* Reset process name*/
  ;
  ;
  set AF0IM003.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0IM003.CAITEM initialAttributes; /* Commarea application data*/
  set AF0IM003.AF0IM-RAW-FCST-LIT initialAttributes;
  set AF0IM003.AF0IM-RAW-FCST initialAttributes;
  ;
  ;
  ;
end // end AF0I440

// Verify entered data
Function AF0I450()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or Scroll forward request*/
    ;
    AF0I451(); /* Verify scroll request*/
    ;
    if (converseVar.validationMsgNum != 0) /* Errors found*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I450

// Check scroll amount
Function AF0I451()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7) /* Scroll back request*/
    ;
    AF0IW01.AF0IWPGW = AF0IW01.AF0IWPGV - 1; /* Check resulting page*/
    ;
    if (AF0IW01.AF0IWPGW <= 0) /* No previous pages*/
      AFWREC.AFWPRCSN = "251 "; /* Process number*/
      AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(2); /* No previous page to display*/
    end
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    ;
    AF0IW01.AF0IWPGW = AF0IW01.AF0IWPGV + 1; /* Check resulting page*/
    ;
    if (AF0IW01.AF0IWPGW > AF0IW01.AF0IWPGM) /* Exceeds max page*/
      AFWREC.AFWPRCSN = "251 "; /* Process number*/
      AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(3); /* No more pages to display*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0I451

// Process valid request
Function AF0I460()
  ;
   /* ------------------------------------------------------------*/
   /* Scroll Request.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    AF0IW01.AF0IWPGV = AF0IW01.AF0IWPGV - 1; /* Decrement page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    AF0IW01.AF0IWPGV = AF0IW01.AF0IWPGV + 1; /* Increment page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Shift Screen Left request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Display AF0iM002*/
    ;
    AFWREC.AFWMAP = "2"; /* Indicate Map 2 to process*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end AF0I460

// fORMAT FOR ERROR DISPLAY
Function AF0IS-001()
  AF0IM001.SY1SSTNM = AF0IW01.AF0IWDSY; /* Style desc*/
               /* (Format Current Combination Flds)*/
  AF0IM001.AF0IMDVC = XP1REC.XDVCD; /* Cur division cd*/
  AF0IM001.AF0IMDPT = XP1REC.XPRCD; /* Cur product type cd*/
  AF0IM001.AF0IWCGA = XP1REC.XGACD; /* Cur G/A cd*/
  AF0IM001.AF0IWCPL = XP1REC.XPLCD; /* Cur product line cd*/
  AF0IM001.AF0IWCPC = XP1REC.XPCCD; /* Cur CAT cd*/
  AF0IM001.AF0IWCSU = XP1REC.XSUCD; /* Cur SIL cd*/
  AF0IM001.AF0IMDVA = XP1REC.XDVABRV; /* Cur div desc*/
  AF0IM001.AF0IWPTA = XP1REC.XPRABRV; /* Cur type desc*/
  AF0IM001.AF0IGAAB = XP1REC.XGAABRV; /* Cur G/A desc*/
  AF0IM001.AF0IWPLA = XP1REC.XPLABRV; /* Cur line desc*/
  AF0IM001.AF0IWPCA = XP1REC.XPCABRV; /* Cur CAT desc*/
  AF0IM001.AF0ISUAB = XP1REC.XSUABRV; /* Cur SIL desc*/
  AF0IM001.AF0IM-CURR-XOW = XP1REC.XOWCD; /* Cur OG cd*/
  AF0IM001.AF0IMCV2 = AF0IW01.AF0IWCV2; /* Carryover option*/
  AF0IM001.AF0IMSTY = XP1REC.SY1STNBR;
  ;
  AFWREC.AFWIXM = 1;
  ;
  while (AFWREC.AFWIXM <= 7) /* Dark,prot unused lines*/
    ;
    set AF0IM001.AF0IMCLR[AFWIXM] skip, invisible;
    set AF0IM001.AF0IMBKD[AFWIXM] skip, invisible;
    set AF0IM001.AF0IMBKP[AFWIXM] skip, invisible;
    set AF0IM001.AF0IMFCD[AFWIXM] skip, invisible;
    set AF0IM001.AF0IMFCP[AFWIXM] skip, invisible;
    set AF0IM001.AF0IMPRD[AFWIXM] skip, invisible;
    set AF0IM001.AF0IMPRP[AFWIXM] skip, invisible;
    set AF0IM001.AF0IMABF[AFWIXM] skip, invisible;
    set AF0IM001.AF0IMLGQ[AFWIXM] skip, invisible;
    set AF0IM001.AF0IMSHQ[AFWIXM] skip, invisible;
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
  end
  ;
end // end AF0IS-001

// Clear map detail lines
Function AF0IS01()
  ;
  ;
              /* (Protect,Dark Map 1 Dtl Lines)*/
  ;
  AFWREC.AFWIDX5 = 1; /* Set loop index*/
  ;
  while (AFWREC.AFWIDX5 <= 8) /* Protect/darken map display*/
    ;
     /* SET AF0IM001.AF0IMGA(AFWIDX5) AUTOSKIP,DARK; xgacd*/
     /* SET AF0IM001.AF0IMPC(AFWIDX5) AUTOSKIP,DARK; xpccd*/
     /* SET AF0IM001.AF0IMSU(AFWIDX5) AUTOSKIP,DARK; xsucd*/
     /* SET AF0IM001.AF0IMSTY(AFWIDX5) AUTOSKIP,DARK; style no.*/
    set AF0IM001.AF0IMCLR[AFWIDX5] skip, invisible; /* color id*/
    set AF0IM001.AF0IMBKD[AFWIDX5] skip, invisible; /* booked dlr*/
    set AF0IM001.AF0IMBKP[AFWIDX5] skip, invisible; /* booked pct*/
    set AF0IM001.AF0IMFCD[AFWIDX5] skip, invisible; /* forecast dlr*/
    set AF0IM001.AF0IMFCP[AFWIDX5] skip, invisible; /* forecast pct*/
    set AF0IM001.AF0IMPRD[AFWIDX5] skip, invisible; /* purchased dlr*/
    set AF0IM001.AF0IMPRP[AFWIDX5] skip, invisible; /* purchased pct*/
    set AF0IM001.AF0IMABF[AFWIDX5] skip, invisible; /* add buy flag*/
    set AF0IM001.AF0IMLGQ[AFWIDX5] skip, invisible; /* long qty*/
    set AF0IM001.AF0IMSHQ[AFWIDX5] skip, invisible; /* short qty*/
    ;
    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0IS01

// Check if style qualified
Function AF0IS02()
  ;
  if (AF0IW01.SY1STNBR != " ") /* Specific style entered*/
    ;
    if (AF2REC.SY1STNBR == AF0IW01.SY1STNBR) /* The style specified*/
      ;
      if (AF0IW01.AF0IWOGK != " ")
        if (AF2REC.XOWCD >= AF0IW01.AF0IWOGK)
                        /* (XOWCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0IW01.AF0IWSIL != " ") /* XSUCD specified*/
        if (AF0IW01.AF0IWSIL == XP1REC.XSUCD) /* Comb.match with criteria*/
                        /* (XSUCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0IW01.AF0IWCAT != " ") /* XPCCD specified*/
        if (AF0IW01.AF0IWCAT == XP1REC.XPCCD) /* Comb.match with criteria*/
                        /* (XPCCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0IW01.AF0IWSLN != " ") /* XPLCD specified*/
        if (AF0IW01.AF0IWSLN == XP1REC.XPLCD) /* Comb.match with criteria*/
                        /* (XPLCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0IW01.AF0IWGA != " ") /* XGACD specified*/
        if (AF0IW01.AF0IWGA == XP1REC.XGACD) /* Comb.match with criteria*/
                        /* (XGACD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0IW01.AF0IWTYP != " ") /* XPRCD specified*/
        if (AF0IW01.AF0IWTYP == XP1REC.XPRCD) /* Comb.match with criteria*/
                        /* (XPRCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      AF0IW01.AF0IWST1 = " "; /* Indicate style for processing*/
      AF0IW01.AF0IWSQU = "Y"; /* Style qualified*/
      ;
    else
      ;
      if (AF0IW01.AF0IWST1 == " ") /* Specified style already processed*/
                   /* (Style retrieved is valid)*/
      else
        return; /* ****** EXIT to get next style*/
      end
    end
    ;
  end
  ;
  if (AF2REC.SY1STNBR >= XP1REC.SY1STNBR)
    if (AF2REC.SY1STNBR == XP1REC.SY1STNBR)
      if (AF2REC.XOWCD > XP1REC.XOWCD)
        AFWREC.AFWIDX5 = 9;
        AF0IW01.AF0IWSQU = "Y";
      else
        return;
      end
    else
      AFWREC.AFWIDX5 = 9;
      AF0IW01.AF0IWSQU = "Y"; /* Style qualified*/
    end
  else
    AFWREC.AFWIDX5 = 9;
    AF0IW01.AF0IWSQU = "Y"; /* Style qualified*/
   /* EZERTN;                        /* ****** EXIT to get next style*/
  end
  ;
  if (AF0IM001.XLCCD[1] != " ") /* select life cycle entered*/
    AF0IS33(); /* qualify life cycle*/
    ;
    if (AF0IW05.AF0IWCNT == 0) /* none in life cycle(s)*/
      AF0IW01.AF0IWSQU = "N"; /* not qualified*/
      return;
    end
    ;
  end
  ;
       /* (check style if qualified per carryover option)*/
  ;
  AF0IS03(); /* Select style from DPRODG.VSYCLR01*/
  AF0IS04(); /* Fetch first DPRODG.VSYCLR01 row*/
  AF0IS05(); /* Close DPRODG.VSYCLR01 cursor*/
  ;
  ;
  ;
  ;
  ;
end // end AF0IS02

// Select style for qualification
Function AF0IS03()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set PG2REC empty; /* Reset rec work area*/
  ;
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
  ;
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S03 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0IS03

// check for carryover qualifying
Function AF0IS04()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and check.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  SQLCA.VAGen_SQLCODE = 0;
  AF0IW01.AF0IWCVF = "N";
  ;
  while (SQLCA.VAGen_SQLCODE == 0
   && AF0IW01.AF0IWCVF == "N"
   && sysVar.errorCode == "00000000") /* Call successful*/
    ;
    try
      call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
    end
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* Return code normal*/
      ;
      AF0IW01.AF0IWYRC = AF0IW01.AF0IWXSY;
      AF0IW01.AF0IWYRC = AF0IW01.AF0IWYRC + 1;
      ;
      if (PG2REC.SY2POFXD > AF0IW01.XSNXDT)
        AF0IW01.AF0IWCVF = "Y";
      end
    end
  end /* end while*/
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    ;
    if (AF0IW01.AF0IWCRY == "N") /* No carryovers*/
      ;
      if (AF0IW01.AF0IWCVF == "Y") /* carry overs found*/
                  /* (not qualified)*/
        AF0IW01.AF0IWSQU = "N"; /* Indicate style not qualified*/
        return; /* Return to calling process*/
        ;
      else
        ;
        AF0IW01.AF0IWSQU = "Y"; /* Indicate style qualified*/
        AF0IW01.AF0IWCV2 = "N"; /* move carryover option*/
        return; /* Return to calling process*/
        ;
      end
      ;
    else
      ;
      if (AF0IW01.AF0IWCRY == "C") /* Carryovers only*/
        ;
        if (AF0IW01.AF0IWCVF == "Y") /* carry overs found*/
                      /* (style qualified)*/
          AF0IW01.AF0IWSQU = "Y"; /* Indicate style qualified*/
          AF0IW01.AF0IWCV2 = "C"; /* move carryover option*/
          return; /* Return to calling process*/
          ;
        else
                    /* (style not qualified)*/
          AF0IW01.AF0IWSQU = "N"; /* Indicate style not qualified*/
          return; /* Return to calling process*/
          ;
        end
        ;
      else
        if (AF0IW01.AF0IWCRY == "B") /* both carryovers and non*/
          AF0IW01.AF0IWSQU = "Y"; /* Indicate style qualified*/
          ;
          if (AF0IW01.AF0IWCVF == "Y") /* carry overs found*/
                         /* (style carryover)*/
            AF0IW01.AF0IWCV2 = "C"; /* move carryover option*/
            return; /* Return to calling process*/
          else
            AF0IW01.AF0IWCV2 = "N"; /* move carryover option*/
            return; /* Return to calling process*/
          end
          ;
        end
        ;
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S04 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0IS04

// Close DACAST.VAFSTY01 cursor
Function AF0IS05()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  ;
  ;
end // end AF0IS05

// Obtain price for style
Function AF0IS06()
  ;
   /* ------------------------------------------------------------*/
             /* Obtain Data from PRICE SUBROUTINE*/
   /* ------------------------------------------------------------*/
  ;
   /* *===================**/
   /* *  SelectION FIELDS **/
   /* *===================**/
  ;
  set AF1REC empty; /* Reset rec work area*/
  ;
  AF1REC.XSECD = AF2REC.XSECD;
  AF1REC.XSNYR = AF2REC.XSNYR;
  AF1REC.XGPCD = "03"; /* GPC cd*/
  AF1REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
  AF1REC.SY2CLRID = "***"; /* Color*/
  AF1REC.XPYCD = "01"; /* Price type*/
  AF1REC.XQACD = "01"; /* Price quality*/
  ;
  ;
  try
    call "AF1730" (AF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/
  ;
  ;
  if (sysVar.errorCode != "00000000" /* Call NOT successful*/
   || AF1REC.AF1-RETURN-CODE == 1    /* and normal return code*/
   || AF1REC.AF1-RETURN-CODE == 3)   /* and normal return code*/
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    SQLCA.VAGen_SQLCODE = AF1REC.AF1-ERROR-SQLCODE;
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "S06 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "DECLARE TABLE ROW";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRICE01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/
    ;
    AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  else
    AF0IW01.AF0IWPRC = AF1REC.SY5PRCUN;
  end
  ;
  ;
  ;
end // end AF0IS06

// Obtain colors for style
Function AF0IS07()
  ;
   /* ------------------------------------------------------------*/
             /* Obtain Data from DACAST.VAFCLR01*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and process all colors for the style.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0IS08(); /* Select colors*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    AFWREC.AFWSWC = "N"; /* Set loop indicator*/
    AFWREC.AFWIDX2 = 0; /* Reset record ctr*/
    ;
    set AF0IW02 empty; /* Initialize map wk area*/
    set AF0IW04 empty; /* Initialize total area*/
    move "*" to AF0IW02.AF0IWLIN[1] for all; /* All map lines to empty*/
    ;
             /* (Process/Store All Color Rows Retrieved)*/
    ;
    while (AFWREC.AFWSWC == "N") /* Until all rows processed*/
      ;
      AF0IS09(); /* Process color data calc*/
      ;
      if (converseVar.validationMsgNum != 0) /* Errors found*/
        AFWREC.AFWSWC = "Y"; /* Force loop end*/
      end
      ;
    end
    ;
    AF0IS12(); /* Close color cursor*/
    if (converseVar.validationMsgNum != 0)
      if (converseVar.validationMsgNum == 38) /* Errors found*/
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
        return;
      end
      exit stack;
    end
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if row matches BLANK style criteria.*/
     /* If not return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0IW01.AF0IW-BLNK-FL == "Y"
   && VAFCLR02.PG2SCRFL != "B")
    AF0IW01.AF0IWSQU = "N"; /* style not qualified*/
    AFWREC.AFWIDX5 = 0; /* style not qualified*/
    return;
  else
    if (AF0IW01.AF0IW-BLNK-FL == "N"
     && VAFCLR02.PG2SCRFL == "B")
      AF0IW01.AF0IWSQU = "N"; /* style not qualified*/
      AFWREC.AFWIDX5 = 0; /* style not qualified*/
      return;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if extra forecasts are present. If so, then revise*/
     /* forecasts by spreading extra forecast amts over valid*/
     /* colors depending on forecasted percent.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors found*/
    return; /* Return to calling process*/
  end
  ;
          /* (calculate for extra forecast, if any)*/
  ;
  AFWREC.AFWIXM = 1; /* Initialize loop index*/
  AF0IW01.AF0IWEFC = 0; /* Initialize extra fcst fld*/
  AF0IW01.AF0IWSFI = "N"; /* Reset spread fcst ind*/
  ;
  while (AFWREC.AFWIXM <= AFWREC.AFWIDX2) /* Process all colors*/
    ;
    if (AF0IW02.AF0IMABF == "N" /* Buy flag no*/
     && AF0IW02.AF0IMPRD[AFWIXM] < AF0IW02.AF0IMFCD[AFWIXM])
      AF0IW01.AF0IWQT1 = AF0IW02.AF0IMPRD[AFWIXM];
      AF0IW01.AF0IWQT2 = AF0IW02.AF0IMFCD[AFWIXM];
      AF0IW01.AF0IWQT3 = AF0IW01.AF0IWQT2 - AF0IW01.AF0IWQT1;
      AF0IW01.AF0IWEFC = AF0IW01.AF0IWEFC + AF0IWQT3; /* Extra fcst*/
    end
    ;
    if (AF0IW02.AF0IMABF == "Y") /* Buy flag yes*/
      AF0IW01.AF0IWSFI = "Y"; /* Indicate spread fcst*/
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
  end
  ;
  if (AF0IW01.AF0IWSFI == "N") /* Do not spread fcst*/
    AF0IW01.AF0IWEFC = 0; /* Initialize extra fcst fld*/
  end
  ;
                /* (apply extra forecast)*/
  ;
  AF0IW01.AF0IWQT1 = AF0IW01.AF0IWEFC; /* To wk fld*/
  ;
  if (AF0IW01.AF0IWEFC > 0) /* With extra forecast*/
    ;
    while (AF0IW01.AF0IWEFC != 0) /* Apply extra fcst until zero*/
      ;
      AFWREC.AFWIXM = 1; /* Initialize loop index*/
      while (AFWREC.AFWIXM <= AFWREC.AFWIDX2) /* Process all colors*/
        ;
        if (AF0IW02.AF0IMABF[AFWIXM] == "N" /* Buy flag = no*/
         && AF0IW02.AF0IMPRD[AFWIXM] >= AF0IW02.AF0IMFCD[AFWIXM])
            /* (next sentence)*/
        else
          ;
          AF0IW01.AF0IWQT2 = AF0IW01.AF0IWEFC * AF0IW02.AF0IMFCP[AFWIXM];
          AF0IW01.AF0IWQT3 = AF0IW02.AF0IMFCD[AFWIXM];
          AF0IW01.AF0IWQT3 = AF0IW01.AF0IWQT3 + AF0IW01.AF0IWQT2;
          AF0IW02.AF0IMFCD[AFWIXM] = AF0IW01.AF0IWQT3;
          AF0IW01.AF0IWEFC = AF0IW01.AF0IWEFC - AF0IW01.AF0IWQT2;
        end
        ;
        if (AF0IW01.AF0IWEFC < 1) /* Min extra fcst*/
          AF0IW01.AF0IWEFC = 0; /* zero out*/
          AFWREC.AFWIXM = 9999; /* terminate loop*/
        end
        ;
        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
        ;
      end
      ;
      if (AF0IW01.AF0IWEFC == AF0IW01.AF0IWQT1) /* No spreads done*/
        AF0IW01.AF0IWEFC = 0; /* Terminate (infinite) loop*/
        AFWREC.AFWPRCSN = "S07 "; /* Process number*/
        converseLib.validationFailed(72); /* indicate error message*/
        exit stack; /* Exit to redisplay map*/
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Round and balance forecasted percents (Round-up or Round-*/
     /* down).*/
   /* ------------------------------------------------------------*/
  ;
  AF0IS13(); /* Adjust forecast pcents*/
  ;
   /* WHILE AF0IW01.AF0IWTPC NE 100 ; Adjust residual pcts*/
    /* AND AF0IW01.AF0IWTPC NE 0;*/
  ;
    /* AF0IR09                      ; Readjust forecast pcents*/
  ;
   /* END ;*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Perform final adjustments to forecasts using revised*/
     /* percents.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIXM = 1; /* Initialize loop index*/
  while (AFWREC.AFWIXM <= AFWREC.AFWIDX2) /* Process all colors*/
    ;
    AF0IW01.AF0IWQT1 = mathLib.round(AF2REC.AF2FSTDL * AF0IW02.AF0IMFCP[AFWIXM]     + 100 * AF0IW02.AF-IN-STK-QTY[AFWIXM] * AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW01.AF0IWQT1));
    AF0IW02.AF0IMFCD[AFWIXM] = mathLib.round(AF0IW02.AF0IMFCD[AFWIXM] / 100, -mathLib.decimals(AF0IW02.AF0IMFCD[AFWIXM]));
    /* AF0IW02.AF0IMFCD(AFWIXM) = AF0IW01.AF0IWQT1 / 100 (R;*/
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Recalculate Long & Short Quantities.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0IW01.AF0IWFSP == "B") /* Bookings forecast spread mode*/
    ;
    AFWREC.AFWIXM = 1; /* Initialize loop index*/
    while (AFWREC.AFWIXM <= AFWREC.AFWIDX2) /* Process all colors*/
      ;
      AF0IW01.AF0IWQT1 = AF0IW02.AF0IMFCQ[AFWIXM];
      AF0IW01.AF0IWQT2 = AF0IW02.AF0IMPRQ[AFWIXM];
      AF0IW01.AF0IWQT3 = AF0IW01.AF0IWQT1 - AF0IW01.AF0IWQT2; /* Qty diff*/
      ;
      if (AF0IW01.AF0IWQT3 <= 0) /* Long qty diff*/
        AF0IW02.AF0IMLGQ[AFWIXM] = AF0IW01.AF0IWQT3;
        AF0IW01.AF0IWQT4 = mathLib.round(AF0IW01.AF0IWQT3 * AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW01.AF0IWQT4));
        AF0IW02.AF0IMLGD[AFWIXM] = AF0IW01.AF0IWQT4;
        AF0IW02.AF0IMSHQ[AFWIXM] = 0; /* Clear short qty*/
        AF0IW02.AF0IMSHD[AFWIXM] = 0; /* Clear short dlr*/
      else
        AF0IW02.AF0IMSHQ[AFWIXM] = AF0IW01.AF0IWQT3;
        AF0IW01.AF0IWQT4 = mathLib.round(AF0IW01.AF0IWQT3 * AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW01.AF0IWQT4));
        AF0IW02.AF0IMSHD[AFWIXM] = AF0IW01.AF0IWQT4;
        AF0IW02.AF0IMLGQ[AFWIXM] = 0; /* Clear short qty*/
        AF0IW02.AF0IMLGD[AFWIXM] = 0; /* Clear short dlr*/
      end
      ;
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if colors obtained match selection criteria. Only*/
     /* those colors that meet specifications may be displayed.*/
     /* Disqualified colors will not be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIXM = 1; /* Initialize loop index*/
  while (AFWREC.AFWIXM <= AFWREC.AFWIDX2) /* Process all colors*/
    ;
    AF0IW01.AF0IWBKF = "N"; /* Reset bookings sel flag*/
    AF0IW01.AF0IWFPF = "N"; /* Reset fcst vs pur sel flag*/
    AF0IW01.AF0IWLSF = "N"; /* Reset long/short sel flag*/
    AF0IW01.AF0IWBKF = "N"; /* Reset BLA sel flag*/
    ;
                   /* (bookings selection)*/
    if (AF0IW01.AF0IWBBS == " " /* No relational specified*/
     || AF0IW01.AF0IWBTB == 0)  /* or zero Bal to Book argument*/
      ;
      AF0IW01.AF0IWBKF = "Y"; /* Indicate selected*/
      ;
    end
    ;
    if (AF0IW01.AF0IWBBS == ">") /* GT relational*/
      if (AF0IW02.AF0IMBBK[AFWIXM] >= AF0IW01.AF0IWBTB) /* For select*/
        AF0IW01.AF0IWBKF = "Y"; /* Indicate selected*/
      end
    end
    ;
    if (AF0IW01.AF0IWBBS == "<") /* LT relational*/
      if (AF0IW02.AF0IMBBK[AFWIXM] <= AF0IW01.AF0IWBTB) /* For select*/
        AF0IW01.AF0IWBKF = "Y"; /* Indicate selected*/
      end
    end
    ;
                /* (fcst vs purch var selection)*/
    if (AF0IW02.AF0IMFCQ[AFWIXM] > 0 /* GT zero*/
     && AF0IW02.AF0IMPRQ[AFWIXM] > 0) /* GT zero*/
      ;
      AF0IW01.AF0IWQT1 = AF0IW02.AF0IMFCQ[AFWIXM]; /* To wk*/
      AF0IW01.AF0IWQT2 = AF0IW02.AF0IMPRQ[AFWIXM]; /* To wk*/
      AF0IW01.AF0IWPC4 = mathLib.round(AF0IW01.AF0IWQT1 / AF0IW01.AF0IWQT2, -mathLib.decimals(AF0IW01.AF0IWPC4));
      AF0IW01.AF0IWPC5 = AF0IW01.AF0IWPC4 * 100;
      AF0IW02.AF0IMPRV[AFWIXM] = 100 - AF0IW01.AF0IWPC5; /* Variance*/
      ;
    else
      ;
      AF0IW02.AF0IMPRV[AFWIXM] = 0; /* Zero-out variance*/
      ;
    end
    ;
    if (AF0IW01.AF0IWFPS == " " /* No relational specified*/
     || AF0IW01.AF0IWFPV == 0)  /* or zero Fcst vs Purch argument*/
      ;
      AF0IW01.AF0IWFPF = "Y"; /* Indicate selected*/
      ;
    end
    ;
    if (AF0IW01.AF0IWFPS == ">") /* GT relational*/
      if (AF0IW02.AF0IMPRV[AFWIXM] >= AF0IW01.AF0IWFPV) /* For select*/
        AF0IW01.AF0IWFPF = "Y"; /* Indicate selected*/
      end
    end
    ;
    if (AF0IW01.AF0IWFPS == "<") /* LT relational*/
      if (AF0IW02.AF0IMPRV[AFWIXM] <= AF0IW01.AF0IWFPV) /* For select*/
        AF0IW01.AF0IWFPF = "Y"; /* Indicate selected*/
      end
    end
    ;
                  /* (long / short selection)*/
    if (AF0IW01.AF0IWLSS == " " /* No relational specified*/
     || AF0IW01.AF0IWLSU == 0)  /* or zero Fcst vs Purch argument*/
      ;
      AF0IW01.AF0IWLSF = "Y"; /* Indicate selected*/
      ;
    end
    ;
    if (AF0IW01.AF0IWLSS == ">") /* GT relational*/
      if (AF0IW01.AF0IWLSU > 0) /* Long/short argument > 0*/
        if (AF0IW02.AF0IMLGQ[AFWIXM] >= AF0IW01.AF0IWLSU) /* For select*/
          AF0IW01.AF0IWLSF = "Y"; /* Indicate selected*/
        end
      end
    end
    ;
    if (AF0IW01.AF0IWLSS == "<") /* LT relational*/
      if (AF0IW01.AF0IWLSU > 0) /* Long/short argument > 0*/
        if (AF0IW02.AF0IMLGQ[AFWIXM] <= AF0IW01.AF0IWLSU) /* For select*/
          AF0IW01.AF0IWLSF = "Y"; /* Indicate selected*/
        end
      end
    end
    ;
    if (AF0IW01.AF0IWLSS == "<") /* LT relational*/
      if (AF0IW01.AF0IWLSU < 0) /* Long/short argument > 0*/
        if (AF0IW02.AF0IMSHQ[AFWIXM] <= AF0IW01.AF0IWLSU) /* For select*/
          AF0IW01.AF0IWLSF = "Y"; /* Indicate selected*/
        end
      end
    end
    ;
    if (AF0IW01.AF0IWLSS == ">") /* GT relational*/
      if (AF0IW01.AF0IWLSU < 0) /* Long/short argument > 0*/
        if (AF0IW02.AF0IMSHQ[AFWIXM] >= AF0IW01.AF0IWLSU) /* For select*/
          AF0IW01.AF0IWLSF = "Y"; /* Indicate selected*/
        end
      end
    end
    ;
                      /* (BLA selection)*/
    if (AF0IW01.AF0IWBUS == " " /* No relational specified*/
     || AF0IW01.AF0IWBLU == 0)  /* or zero BLA argument*/
      ;
      AF0IW01.AF0IWBLF = "Y"; /* Indicate selected*/
      ;
    end
    ;
    if (AF0IW01.AF0IWBUS == ">") /* GT relational*/
      if (AF0IW02.AF0IMBLQ[AFWIXM] >= AF0IW01.AF0IWBLU) /* For select*/
        AF0IW01.AF0IWBLF = "Y"; /* Indicate selected*/
      end
    end
    ;
    if (AF0IW01.AF0IWBUS == "<") /* LT relational*/
      if (AF0IW02.AF0IMBLQ[AFWIXM] <= AF0IW01.AF0IWBLU) /* For select*/
        AF0IW01.AF0IWBLF = "Y"; /* Indicate selected*/
      end
    end
    ;
    ;
                  /* (check selection flag settings)*/
    if (AF0IW01.AF0IWBKF == "Y" /* Passed bookings selection*/
     && AF0IW01.AF0IWFPF == "Y" /* Passed fcst vs pur selection*/
     && AF0IW01.AF0IWLSF == "Y" /* Passed long short selection*/
     && AF0IW01.AF0IWBLF == "Y") /* Passed BLA selection*/
      AF0IW02.AF0IWLIN[AFWIXM] = " "; /* Indicate for display*/
    else
      AF0IW02.AF0IWLIN[AFWIXM] = "*"; /* Indicate not for display*/
    end
    ;
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Repage and resize all colors for display. Qualified colors*/
     /* will be transferred/compressed into the final output*/
     /* display array (AF0IW03).*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  AFWREC.AFWIDX3 = 0; /* Reset record ctr*/
  AF0IW01.AF0IWPGM = 1; /* Reset max page ctr*/
  AF0IW01.AF0IWPGV = 1; /* Reset variable page ctr*/
  ;
  set AF0IW03 empty; /* Initialize map wk area*/
  move "*" to AF0IW03.AF0IWLIN[1] for all; /* All map lines to empty*/
  ;
  ;
  while (AFWREC.AFWIDX1 <= AFWREC.AFWIDX2) /* Process all colors*/
    ;
    if (AF0IW02.AF0IWLIN[AFWIDX1] == " ") /* Row is qualified*/
      ;
      AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* Increment record ctr*/
      ;
      ;
       /* *=====================**/
       /* *  Check Page Number  **/
       /* *=====================**/
      ;
      if (AFWREC.AFWIDX3 == 07  /* One page created*/
       || AFWREC.AFWIDX3 == 14  /* Another page created*/
       || AFWREC.AFWIDX3 == 21  /* even another page created*/
       || AFWREC.AFWIDX3 == 28  /* yet one more page created*/
       || AFWREC.AFWIDX3 == 35  /* the 5th of pageness created*/
       || AFWREC.AFWIDX3 == 42  /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 49  /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 56  /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 63  /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 70  /* the 10th of pageness created*/
       || AFWREC.AFWIDX3 == 77  /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 84  /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 91  /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 98  /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 105 /* the 15th of pageness created*/
       || AFWREC.AFWIDX3 == 112 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 119 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 126 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 133 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 140 /* the 20th of pageness created*/
       || AFWREC.AFWIDX3 == 147 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 154 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 161 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 168 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 175 /* the 25th of pageness created*/
       || AFWREC.AFWIDX3 == 182 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 189 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 196 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 203 /* the omega of pageness created*/
       || AFWREC.AFWIDX3 == 210) /* the 30th of pageness created*/
        AF0IW01.AF0IWPGM = AF0IW01.AF0IWPGM + 1; /* Add to max pages*/
      end
      ;
      ;
       /* *====================================**/
       /* *  Move Color Data to display array  **/
       /* *====================================**/
      ;
      AF0IW03.AF0IWLIN[AFWIDX3] = AF0IW02.AF0IWLIN[AFWIDX1];
      AF0IW03.AF0IMGA[AFWIDX3] = AF0IW02.AF0IMGA[AFWIDX1];
      AF0IW03.AF0IMPC[AFWIDX3] = AF0IW02.AF0IMPC[AFWIDX1];
      AF0IW03.AF0IMSU[AFWIDX3] = AF0IW02.AF0IMSU[AFWIDX1];
      AF0IW03.AF0IMSTY[AFWIDX3] = AF0IW02.AF0IMSTY[AFWIDX1];
      AF0IW03.AF0IMCLR[AFWIDX3] = AF0IW02.AF0IMCLR[AFWIDX1];
      AF0IW03.AF0IMBBK[AFWIDX3] = AF0IW02.AF0IMBBK[AFWIDX1];
      AF0IW03.AF0IMBKD[AFWIDX3] = AF0IW02.AF0IMBKD[AFWIDX1];
      AF0IW03.AF0IMBKP[AFWIDX3] = AF0IW02.AF0IMBKP[AFWIDX1];
      AF0IW03.AF0IMFCD[AFWIDX3] = AF0IW02.AF0IMFCD[AFWIDX1];
      AF0IW03.AF0IMFCQ[AFWIDX3] = AF0IW02.AF0IMFCQ[AFWIDX1];
      AF0IW03.AF0IMFCP[AFWIDX3] = AF0IW02.AF0IMFCP[AFWIDX1];
      AF0IW03.AF0IMPRD[AFWIDX3] = AF0IW02.AF0IMPRD[AFWIDX1];
      AF0IW03.AF0IMPRQ[AFWIDX3] = AF0IW02.AF0IMPRQ[AFWIDX1];
      AF0IW03.AF0IMPRP[AFWIDX3] = AF0IW02.AF0IMPRP[AFWIDX1];
      AF0IW03.AF0IMABF[AFWIDX3] = AF0IW02.AF0IMABF[AFWIDX1];
      AF0IW03.AF0IMLGQ[AFWIDX3] = AF0IW02.AF0IMLGQ[AFWIDX1];
      AF0IW03.AF0IMSHQ[AFWIDX3] = AF0IW02.AF0IMSHQ[AFWIDX1];
      AF0IW03.AF0IMBLD[AFWIDX3] = AF0IW02.AF0IMBLD[AFWIDX1];
      AF0IW03.AF0IMASD[AFWIDX3] = AF0IW02.AF0IMASD[AFWIDX1];
      AF0IW03.AF0IMBLQ[AFWIDX3] = AF0IW02.AF0IMBLQ[AFWIDX1];
      AF0IW03.AF0IMASQ[AFWIDX3] = AF0IW02.AF0IMASQ[AFWIDX1];
      AF0IW03.AF0IMLGD[AFWIDX3] = AF0IW02.AF0IMLGD[AFWIDX1];
      AF0IW03.AF0IMSHD[AFWIDX3] = AF0IW02.AF0IMSHD[AFWIDX1];
      AF0IW03.AF0IMLGC[AFWIDX3] = AF0IW02.AF0IMLGC[AFWIDX1];
      AF0IW03.AF0IMPRV[AFWIDX3] = AF0IW02.AF0IMPRV[AFWIDX1];
      AF0IW03.AIRSPD-LGSH-FL[AFWIDX3] = AF0IW02.AIRSPD-LGSH-FL[AFWIDX1];
      AF0IW04.AF0IMBKD = AF0IW04.AF0IMBKD + AF0IW02.AF0IMBKD[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMFCD = AF0IW04.AF0IMFCD + AF0IW02.AF0IMFCD[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMFCQ = AF0IW04.AF0IMFCQ + AF0IW02.AF0IMFCQ[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMPRQ = AF0IW04.AF0IMPRQ + AF0IW02.AF0IMPRQ[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMPRD = AF0IW04.AF0IMPRD + AF0IW02.AF0IMPRD[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMLGQ = AF0IW04.AF0IMLGQ + AF0IW02.AF0IMLGQ[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMSHQ = AF0IW04.AF0IMSHQ + AF0IW02.AF0IMSHQ[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMBLD = AF0IW04.AF0IMBLD + AF0IW02.AF0IMBLD[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMASD = AF0IW04.AF0IMASD + AF0IW02.AF0IMASD[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMBLQ = AF0IW04.AF0IMBLQ + AF0IW02.AF0IMBLQ[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMASQ = AF0IW04.AF0IMASQ + AF0IW02.AF0IMASQ[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMLGD = AF0IW04.AF0IMLGD + AF0IW02.AF0IMLGD[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMSHD = AF0IW04.AF0IMSHD + AF0IW02.AF0IMSHD[AFWIDX3];
                                   /* tot*/
      AF0IW04.AF0IMLGC = AF0IW04.AF0IMLGC + AF0IW02.AF0IMLGC[AFWIDX3];
                                   /* tot*/
    end
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  if (AF0IW01.AF0IM-AIR-FLAG == "N") /* RECOMPUTE BOOK PERCENTAGES*/
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= AFWREC.AFWIDX2) /* Process all colors*/
      if (AF0IW04.AF0IMBKD > 0)
        AF0IW03.AF0IMBKP[AFWIDX1] = (AF0IW03.AF0IMBKD[AFWIDX1] * 100)         / AF0IW04.AF0IMBKD;
      else
        AF0IW03.AF0IMBKP[AFWIDX1] = 0;
      end
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    end
  end
  ;
  ;
end // end AF0IS07

// Select set DACAST.VAFCLR01
Function AF0IS08()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set VAFCLR02 empty; /* Reset rec work area*/
  ;
  VAFCLR02.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  VAFCLR02.XDMCD = "00"; /* Dimension cd*/
  VAFCLR02.XDVCD = AF2REC.XDVCD; /* Division cd*/
  VAFCLR02.XOWCD = AF2REC.XOWCD; /* Division cd*/
  VAFCLR02.XSECD = XP1REC.XSECD; /* Season cd*/
  ;
  AF0IW01.AF0IWXSY = 0; /* Initialize xsnyr wk area*/
  AF0IW01.AF0IWXSY = XP1REC.XSNYR; /* Move to wk area*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* AF0IW01.AF0IWXSY = AF0IW01.AF0IWXSY + 1900;/* Add Century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AF0IW01.AF0IWXYY > 60)
    AF0IW01.AF0IWXCC = 19; /* Add Century*/
  else
    AF0IW01.AF0IWXCC = 20; /* Add Century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  VAFCLR02.XSNYR = AF0IW01.AF0IWXSY; /* Season yr*/
  ;
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFCLR01  **/
   /* *====================================**/
  ;
  try
    call "VAFCLR02" ("SS", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S08 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0IS08

// Process DACAST.VAFCLR01 rows
Function AF0IS09()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until there are no more*/
     /* rows to be processed.*/
   /* All colors retrieved are stored in an array with their*/
     /* accompanying data.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *=============================**/
   /* *  Access DACAST.VAFCLR01 DB  * Obtain color row*/
   /* *=============================**/
  ;
  try
    call "VAFCLR02" ("SN", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
    /* If call successful, process the retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    if (VAFCLR02.AF5FSCST == "I") /* color is inactive*/
      return;
    end
    ;
    if (AF0IW01.AF0IW-BLNK-FL == "Y" /* BLANKS only requested*/
     && VAFCLR02.PG2SCRFL == "B")    /* Style is a BLANK*/
      AF0IS10(); /* Store/calc data in wk array*/
    else
      if (AF0IW01.AF0IW-BLNK-FL == "N" /* BLANKS only not requested*/
       && VAFCLR02.PG2SCRFL != "B")    /* Style is not a BLANKS*/
        AF0IS10(); /* Store/calc data in wk array*/
      else
        AFWREC.AFWSWC = "Y"; /* Indicate end of loop*/
      end
    end
    ;
    return; /* Loop through*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    AFWREC.AFWSWC = "Y"; /* Indicate end of loop*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No more records found*/
      ;
      if (AFWREC.AFWIDX2 == 0) /* No records retrieved*/
        converseLib.validationFailed(38); /* Indicate style w/ no colors*/
        AFWREC.AFWPRCSN = "S09 "; /* Process number*/
      end
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0IS09

// Store/Calculate Color data
Function AF0IS10()
  ;
   /* ------------------------------------------------------------*/
   /* Obtain cost per color within the style in process.*/
   /* Format data for display into map wk area.*/
   /* Calculate all data required to display.*/
   /* ------------------------------------------------------------*/
  ;
   /* *========================**/
   /* *  Obtain Cost of Color  **/
   /* *========================**/
  ;
  AF0IS11(); /* Get color cost*/
  ;
  ;
  ;
   /* *=============================================**/
   /* *  Calculate/Format Color Data into Wk Array  **/
   /* *=============================================**/
  ;
  AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Set store index*/
  ;
  if (AFWREC.AFWIDX2 == 1) /* Move 1st BLABK indicator to WS*/
    ;
    AF0IW01.AF-LGSH-BLABK-IND = VAFCLR02.AF-LGSH-BLABK-IND;
    AF0IW01.AF-LGSH-SELECT-FL = VAFCLR02.AF-LGSH-SELECT-FL;
    ;
  end
  ;
  AF0IW02.AF0IWLIN[AFWIDX2] = " "; /* Indicate map line valid*/
  ;
              /* (record key information)*/
  AF0IW02.AF0IMGA[AFWIDX2] = XP1REC.XGACD; /* Gender age*/
  AF0IW02.AF0IMPC[AFWIDX2] = XP1REC.XPCCD; /* Category*/
  AF0IW02.AF0IMSU[AFWIDX2] = XP1REC.XSUCD; /* Silhouette*/
  AF0IW02.AF0IMSTY[AFWIDX2] = VAFCLR02.SY1STNBR; /* Style*/
  AF0IW02.AF0IMCLR[AFWIDX2] = VAFCLR02.SY2CLRID; /* Color*/
  AF0IW02.AF0IMABF[AFWIDX2] = VAFCLR02.AF5CLBFL; /* Buy flag*/
  AF0IW02.AF0IMBBK[AFWIDX2] = VAFCLR02.AF5BTBPT; /* Bal to book pct*/
  AF0IW02.AF-IN-STK-QTY[AFWIDX2] = VAFCLR02.AF-IN-STK-QTY;
  ;
                  /* (long/short qty)*/
  if (VAFCLR02.PG2SCRFL == "B") /* a blank*/
    /* AND VAFCLR02.XOWCD = '00'; commented out so all blanks use prev btb*/
    ;
    if (VAFCLR02.AF-LGSH-TS-QTY < 0) /* Long/short qty negative*/
      AF0IW02.AF0IMSHQ[AFWIDX2] = VAFCLR02.AF-LGSH-TS-QTY * -1; /* Short qty*/
    else
      AF0IW02.AF0IMLGQ[AFWIDX2] = VAFCLR02.AF-LGSH-TS-QTY; /* Long qty*/
    end
    ;
  else /* ; not a blank*/
    ;
    if (VAFCLR02.AF5LGSHQ < 0) /* Long/short qty negative*/
      AF0IW02.AF0IMSHQ[AFWIDX2] = VAFCLR02.AF5LGSHQ * -1; /* Short qty*/
    else
      AF0IW02.AF0IMLGQ[AFWIDX2] = VAFCLR02.AF5LGSHQ; /* Long qty*/
    end
    ;
  end
  ;
                /* (bookings dollar/pct)*/
  AF0IW02.AF0IMBKD[AFWIDX2] = mathLib.round(VAFCLR02.AF5BKQ * AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW02.AF0IMBKD[AFWIDX2]));
  AF0IW02.AF0IMBKP[AFWIDX2] = VAFCLR02.AF5BKPT;
  ;
             /* (forecast dollar/pct - initial)*/
  AF0IW02.AF0IMFCD[AFWIDX2] = mathLib.round(AF2REC.AF2FSTDL * VAFCLR02.AF5FSCPT, -mathLib.decimals(AF0IW02.AF0IMFCD[AFWIDX2]));
  AF0IW04.AF0IM-RAW-FCST = mathLib.round(AF0IW04.AF0IM-RAW-FCST + AF0IW02.AF0IMFCD[AFWIDX2] / 100, -mathLib.decimals(AF0IW04.AF0IM-RAW-FCST));
  ;
  if (AF0IW01.AF0IM-IN-STK-FLAG == "Y")
    AF0IW02.AF0IMFCD[AFWIDX2] = mathLib.round(AF0IW02.AF0IMFCD[AFWIDX2] +     100 * VAFCLR02.AF-IN-STK-QTY * AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW02.AF0IMFCD[AFWIDX2]));
  end
  ;
  if (AF0IW01.AF0IWPRC > 0) /* Price GT zero*/
    AF0IW02.AF0IMFCQ[AFWIDX2] = mathLib.round(AF2REC.AF2FSTDL / AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW02.AF0IMFCQ[AFWIDX2]));
  else
    AF0IW02.AF0IMFCQ[AFWIDX2] = 0; /* Default to zero*/
  end
  ;
  if (AF0IW01.AF0IWFSP == "F") /* Forecast spread mode F*/
    ;
    if (AF0IW01.AF0IM-IN-STK-FLAG == "Y")
      AF0IW02.AF0IMFCP[AFWIDX2] = VAFCLR02.AF-WT-COLR-PCT;
    else
      AF0IW02.AF0IMFCP[AFWIDX2] = VAFCLR02.AF5FSCPT;
    end
    ;
  else
    AF0IW02.AF0IMFCP[AFWIDX2] = VAFCLR02.AF5BKPT;
  end
  ;
                /* (purchased dollar/pct)*/
  AF0IW02.AF0IMPRD[AFWIDX2] = mathLib.round(VAFCLR02.AF5PRSCQ * AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW02.AF0IMPRD[AFWIDX2]));
  AF0IW02.AF0IMPRQ[AFWIDX2] = VAFCLR02.AF5PRSCQ;
  AF0IW02.AF0IMPRP[AFWIDX2] = VAFCLR02.AF5PRSCP;
  ;
                   /* (BLA dollar/qty)*/
  AF0IW02.AF0IMBLD[AFWIDX2] = mathLib.round(VAFCLR02.AF5BLAQ * AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW02.AF0IMBLD[AFWIDX2]));
  AF0IW02.AF0IMBLQ[AFWIDX2] = VAFCLR02.AF5BLAQ;
  ;
  ;
                   /* (AIRSPEED FLAG )*/
  AF0IW02.AIRSPD-LGSH-FL[AFWIDX2] = VAFCLR02.AIRSPD-LGSH-FL;
  ;
                   /* (AIR dollar/qty)*/
  AF0IW02.AF0IMASD[AFWIDX2] = mathLib.round(VAFCLR02.AIRSPD-LGSH-QTY *   AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW02.AF0IMASD[AFWIDX2]));
  AF0IW02.AF0IMASQ[AFWIDX2] = VAFCLR02.AIRSPD-LGSH-QTY;
  ;
  if (AF0IW01.AF0IM-AIR-FLAG == "N")
    /* BLA ADJUSTMENTS FOR AIRSP*/
    AF0IW02.AF0IMBLD[AFWIDX2] = AF0IW02.AF0IMBLD[AFWIDX2] +     AF0IW02.AF0IMASD[AFWIDX2];
    AF0IW02.AF0IMBLQ[AFWIDX2] = AF0IW02.AF0IMBLQ[AFWIDX2] +     AF0IW02.AF0IMASQ[AFWIDX2];
    /* BKG ADJUSTMENTS FOR AIRSP*/
    AF0IW02.AF0IMBKD[AFWIDX2] = AF0IW02.AF0IMBKD[AFWIDX2] -     AF0IW02.AF0IMASD[AFWIDX2];
  end
                  /* (long/short dollar)*/
  if (VAFCLR02.AF5LGSHQ < 0) /* Long/short qty negative*/
    AF0IW02.AF0IMSHD[AFWIDX2] = mathLib.round(VAFCLR02.AF5LGSHQ * AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW02.AF0IMSHD[AFWIDX2]));
  else
    AF0IW02.AF0IMLGD[AFWIDX2] = mathLib.round(VAFCLR02.AF5LGSHQ * AF0IW01.AF0IWPRC, -mathLib.decimals(AF0IW02.AF0IMLGD[AFWIDX2]));
  end
  ;
                  /* (long pos at cost)*/
  if (VAFCLR02.AF5LGSHQ < 0) /* Long/short qty negative*/
     /* (next sentence)*/
  else
    AF0IW02.AF0IMLGC[AFWIDX2] = mathLib.round(VAFCLR02.AF5LGSHQ * AF0IW01.AF0IWCST, -mathLib.decimals(AF0IW02.AF0IMLGC[AFWIDX2]));
  end
  ;
  ;
end // end AF0IS10

// Obtain long cost for style
Function AF0IS11()
  ;
   /* ------------------------------------------------------------*/
             /* Obtain Data from DPROD.VDCOST01*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch first row to obtain price.*/
   /* Close set cursor.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=====================**/
   /* *  Select unique row  **/
   /* *=====================**/
  ;
  set SY6REC empty; /* Reset rec work area*/
  ;
  SY6REC.XGPCD = "03"; /* GPC cd*/
  SY6REC.SY1STNBR = VAFCLR02.SY1STNBR; /* Style no.*/
  SY6REC.SY2CLRID = VAFCLR02.SY2CLRID; /* Color*/
  SY6REC.XDMCD = "00"; /* dimininsion code*/
  SY6REC.XCOCD = "01"; /* Cost type*/
  SY6REC.XQACD = "01"; /* Cost quality*/
  ;
  ;
  try
    call "IO0360" ("S ", SQLCA, SY6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Data Found*/
    ;
    if (SY6REC.SY6CSEDT[1] <= AF0IW01.XSNBDT) /* Get price/sn start dt*/
      AF0IW01.AF0IWCST = SY6REC.SY6CSTUN[1];
    else
      if (SY6REC.SY6CSEDT[2] <= AF0IW01.XSNBDT)
        AF0IW01.AF0IWCST = SY6REC.SY6CSTUN[2];
      else
        if (SY6REC.SY6CSEDT[3] <= AF0IW01.XSNBDT)
          AF0IW01.AF0IWCST = SY6REC.SY6CSTUN[3];
        else
          if (SY6REC.SY6CSEDT[4] <= AF0IW01.XSNBDT)
            AF0IW01.AF0IWCST = SY6REC.SY6CSTUN[4];
          else
            if (SY6REC.SY6CSEDT[5] <= AF0IW01.XSNBDT)
              AF0IW01.AF0IWCST = SY6REC.SY6CSTUN[5];
            else
              if (SY6REC.SY6CSEDT[6] <= AF0IW01.XSNBDT)
                AF0IW01.AF0IWCST = SY6REC.SY6CSTUN[6];
              else
                AF0IW01.AF0IWCST = 1.00; /* Default to $1.00*/
              end
            end
          end
        end
      end
    end
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* No data found*/
      ;
      AF0IW01.AF0IWCST = 1.00; /* Default to $1.00*/
      ;
    else
      ;
      TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      AFWREC.AFWPRCSN = "S11 "; /* Process number*/
      TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
      TA1REC.TA1LOC = "GET DPROD.VDCOST01 ROW";
      TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDCOST01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
      AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      ;
      exit stack; /* Exit to redisplay map*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF0IS11

// Close DACAST.VAFCLR01 cursor
Function AF0IS12()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VAFCLR02" ("CS", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal retun code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S12 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0IS12

// Adjust forecast pcents
Function AF0IS13()
  ;
   /* ------------------------------------------------------------*/
   /* Calculate total forecast pcents.*/
   /* If total pcents > 100, then adjust down pcents until = 100.*/
   /* If total pcents < 100 and > 0, then adjust up until = 100.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=======================**/
   /* *  Compute Total Pcent  **/
   /* *=======================**/
  ;
  AFWREC.AFWIXM = 1; /* Initialize loop index*/
  AF0IW01.AF0IWTPC = 0; /* Initialize total pcent fld*/
  ;
  while (AFWREC.AFWIXM <= AFWREC.AFWIDX2) /* Process all colors*/
    ;
    AF0IW01.AF0IWTPC = AF0IW01.AF0IWTPC + AF0IW02.AF0IMFCP[AFWIXM];
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* loop through*/
    ;
  end
  ;
  ;
end // end AF0IS13

// Edit Style no.
Function AF0IS14()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/
  ;
  if (AF0IM001.SY1STNBR == " ") /* Style = spaces*/
    AF0IW01.SY1STNBR = " "; /* Move to wk storage*/
    AF0IW01.AF0IWST1 = " "; /* Move to wk storage*/
    AF0IW01.AF0IWST2 = " "; /* Move to wk storage*/
    AF0IW01.AF0IWSTY = " "; /* Move to wk storage*/
    AF0IW01.SY1SSTNM = " "; /* Space out description*/
    AF0IW01.AF0IWDSY = " "; /* Space out description*/
    AF0IM001.SY1SSTNM = " "; /* Space out description*/
    return; /* Exit to calling process*/
  end
  ;
  AF0IW01.AF0IWSTY = AF0IM001.SY1STNBR; /* Save to wk map storage*/
  ;
  ;
   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/
  ;
  AF0IS15(); /* Select set style*/
  ;
  AF0IS16(); /* Validate style*/
  ;
  AF0IS17(); /* Close style cursor*/
  ;
  ;
  ;
end // end AF0IS14

// Select set style
Function AF0IS15()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set PG2REC empty; /* Reset rec work area*/
  ;
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0IM001.SY1STNBR; /* Style no.*/
  ;
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S15 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0IS15

// Process retrieved style
Function AF0IS16()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
                     /* (Field is valid)*/
      AF0IW01.SY1STNBR = AF0IM001.SY1STNBR; /* Save to wk st*/
      ;
      if (AF0IM001.SY1STNBR == AF0IW01.AF0IWST2) /* Save to alt wk stor*/
                      /* (Same style being processed)*/
                            /* --- B U T ---*/
        if (AFWREC.AFWSWR == "Y") /* Style is part of new keys entered*/
          AF0IW01.AF0IWST1 = AF0IM001.SY1STNBR; /* Restore alt wk*/
        end
        ;
      else
        AF0IW01.AF0IWST1 = AF0IM001.SY1STNBR; /* Save to alt wk stor*/
        AF0IW01.AF0IWST2 = AF0IM001.SY1STNBR; /* Save to alt wk stor*/
      end
      ;
      AF0IW01.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AF0IW01.AF0IWDSY = PG2REC.SY1SSTNM; /* move style desc*/
      AF0IM001.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      return; /* Return to calling process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
                    /* (Field in error)*/
      set AF0IM001.SY1STNBR cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 33; /* Indicate not found*/
      AFWREC.AFWPRCSN = "S16 "; /* Process number*/
      AF0IW01.SY1STNBR = " "; /* Space out wk storage*/
      AF0IW01.SY1SSTNM = " "; /* move style desc*/
      AF0IW01.AF0IWDSY = " "; /* move style desc*/
      AF0IM001.SY1SSTNM = " "; /* Space out desc*/
      return; /* Exit to calling rtn*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S16 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0IS16

// Close style cursor
Function AF0IS17()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S17 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  ;
  ;
end // end AF0IS17

// Edit Silhouette cd
Function AF0IS18()
  ;
  ;
  if (AF0IM001.XSUCD == " ") /* Field eq spaces*/
    AF0IW01.AF0IWSIL = " "; /* Space out save area*/
    AF0IW01.AF0IWDSL = " "; /* Space out save abrv*/
    AF0IM001.XSUABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end
  ;
  AF0IW01.AF0IWSIL = AF0IM001.XSUCD; /* save to wk map storage*/
  AF0IW01.AF0IWTCD = AF0IM001.XSUCD;
  AF0IW01.XGPCD = "03";
  ;
  ;
  if (AF0IW01.AF0IWTKY in XSUTBL.XSUKEY)
    ;
    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
                       /* (field is valid)*/
      if (AF0IM001.XSUCD == AF0IW01.AF0IWAS1) /* EQ previous XSU*/
        AF0IW01.AF0IWDSL = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0IW01.AF0IWAS1 = AF0IM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUCD = AF0IM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex]; /* To wk storage*/
        XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0IW01.AF0IWDSL = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0IM001.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S18 "; /* Process number*/
  set AF0IM001.XSUCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  AF0IW01.AF0IWDSL = " "; /* Space out save abrv*/
  AF0IM001.XSUABRV = " "; /* Space out abrv*/
  AF0IM001.XSUABRV = " "; /* Space out abrv*/
  ;
  ;
end // end AF0IS18

// Edit Category cd
Function AF0IS19()
  ;
  ;
  if (AF0IM001.XPCCD == " ") /* Map fld spaces*/
    AF0IW01.AF0IWCAT = " "; /* Space out save area*/
    AF0IW01.AF0IWDPC = " "; /* Space out save desc*/
    AF0IM001.XPCABRV = " "; /* Space out map desc*/
    return; /* Return to calling routine*/
  end
  ;
  AF0IW01.AF0IWCAT = AF0IM001.XPCCD; /* save to wk map storage*/
  AF0IW01.AF0IWTCD = AF0IM001.XPCCD;
  AF0IW01.XGPCD = "03";
  ;
  ;
  if (AF0IW01.AF0IWTKY in XPCTBL.XPCKEY)
    ;
    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
                       /* (field is valid)*/
      if (AF0IM001.XPCCD == AF0IW01.AF0IWAP1) /* EQ previous XPC*/
        AF0IW01.AF0IWDPC = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0IW01.AF0IWAP1 = AF0IM001.XPCCD; /* save to wk storage*/
        XP1REC.XPCCD = AF0IM001.XPCCD; /* save to wk storage*/
        XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex]; /* To wk storage*/
        XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0IW01.AF0IWDPC = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0IM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S19 "; /* Process number*/
  set AF0IM001.XPCCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 35; /* indicate error message*/
  AF0IW01.AF0IWDPC = " "; /* Space out save desc*/
  AF0IM001.XPCABRV = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF0IS19

// Edit Gender/Age cd
Function AF0IS20()
  ;
  ;
  if (AF0IM001.XGACD == " ") /* Map fld eq spaces*/
    AF0IW01.AF0IWGA = " "; /* Space out save fld*/
    AF0IW01.AF0IWDGA = " "; /* Space out save desc*/
    AF0IM001.XGAABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  AF0IW01.AF0IWGA = AF0IM001.XGACD; /* save to wk map storage*/
  AF0IW01.AF0IWTKY = AF0IM001.XGACD;
  AF0IW01.XGPCD = "03";
  ;
  ;
  if (AF0IW01.AF0IWTKY in XGATBL.XGAKEY)
    ;
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      ;
      if (AF0IM001.XGACD == AF0IW01.AF0IWAG1) /* EQ previous XGA*/
        AF0IW01.AF0IWDGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0IW01.AF0IWAG1 = AF0IM001.XGACD; /* save to wk storage*/
        XP1REC.XGACD = AF0IM001.XGACD; /* save to wk storage*/
        XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* To wk storage*/
        XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0IW01.AF0IWDGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0IM001.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S20 "; /* Process number*/
  set AF0IM001.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  AF0IW01.AF0IWDGA = " "; /* Space out save desc*/
  AF0IM001.XGAABRV = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF0IS20

// Edit Season yr
Function AF0IS21()
  ;
  ;
  AF0IW01.AF0IWXSY = 0; /* initialize xsnyr wk area*/
  AF0IW01.AF0IWXSY = AF0IM001.XSNYR; /* move to wk area*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* AF0IW01.AF0IWXSY = AF0IW01.AF0IWXSY + 1900;/* move century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AF0IW01.AF0IWXYY > 60)
    AF0IW01.AF0IWXCC = 19; /* move century*/
  else
    AF0IW01.AF0IWXCC = 20; /* move century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  ;
  if (AF0IW01.AF0IWXSY < 2000)
    AF0IS21S();
  else
    if (AF0IW01.AF0IWXSY == 2000)
      if (AF0IM001.XSECD == "SP"
       || AF0IM001.XSECD == "SU")
        AF0IS21S();
      else
        /* field in error*/
        AFWREC.AFWPRCSN = "S21 "; /* Process number*/
        set AF0IM001.XSNYR cursor, bold; /* highlight field*/
        set AF0IM001.XSECD cursor, bold;
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
      end
    else
      if (AF0IW01.AF0IWXSY > 2000)
        AFWREC.AFWPRCSN = "S21 "; /* Process number*/
        set AF0IM001.XSNYR cursor, bold; /* highlight field*/
        set AF0IM001.XSECD cursor, bold;
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
      end
    end
  end
  ;
end // end AF0IS21

// Season yr search
Function AF0IS21S()
  ;
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0IW01.AF0IWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF0IM001.XSNYR; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
  ;
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S21 "; /* Process number*/
  set AF0IM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/
  ;
  ;
end // end AF0IS21S

// Edit Season cd
Function AF0IS22()
  ;
  ;
  if (AF0IM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0IM001.XSECD; /* save to working storage*/
    ;
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S22 "; /* Process number*/
    set AF0IM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/
    ;
  end
  ;
  AF0IW01.AF0IWXSS = " "; /* Initialize wk area*/
  AF0IW01.AF0IWXYR = +0; /* Initialize wk area*/
  ;
  AF0IW01.AF0IWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  AF0IW01.AF0IWXYR = XP1REC.XSNYR; /* Format wk area*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5]
     == AF0IW01.AF0IWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      AF0IW01.XSNBDT = YSNTBL.XSN-SESN-BDT[AFWIDX5]; /* save to wk*/
      AF0IW01.XSNXDT = YSNTBL.XSN-SESN-XDT[AFWIDX5]; /* save to w*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
  ;
  AFWREC.AFWPRCSN = "S22 "; /* Process number*/
  set AF0IM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/
  ;
end // end AF0IS22

// Edit Forecaster cd
Function AF0IS23()
  ;
  ;
  if (AF0IM001.XXXUSER == " ") /* Eq spaces*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    AF0IW01.AF0IWUSR = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0IW01.AF0IWUSR = AF0IM001.XXXUSER; /* Move to wk map storage*/
  ;
  ;
   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/
  ;
  set PG1REC empty; /* Clear row storage area*/
  ;
  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0IM001.XXXUSER; /* Forecaster id*/
  ;
  ;
   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/
  ;
  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0IM001.XXXUSER cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S23 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      XP1REC.XXXUSER = " "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/
      ;
      /* ***** EXIT PROCESS HERE ******/
      ;
    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.XXXUSER = AF0IM001.XXXUSER; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/
          ;
          /* ***** EXIT PROCESS HERE ******/
          ;
        end
      end
    end
  end
  ;
   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0IE12"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0IM001.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0IS23

// Edit Carryover flag
Function AF0IS25()
  ;
  AF0IW01.AF0IWCRY = AF0IM010.AF0IMCRY; /* Save to wk storage*/
  ;
  ;
  if (AF0IM010.AF0IMCRY != "C"
   && AF0IM010.AF0IMCRY != "N"
   && AF0IM010.AF0IMCRY != "B")
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S25 "; /* Process number*/
    set AF0IM010.AF0IMCRY cursor, bold; /* highlight field*/
    converseLib.validationFailed(72); /* indicate invalid data entered*/
    AF0IW01.AF0IWCRY = " "; /* Space out save area*/
    ;
  end
  ;
  ;
  ;
end // end AF0IS25

// Edit Color display flag
Function AF0IS26()
  ;
  AF0IW01.AF0IWSCL = AF0IM010.AF0IMSCL; /* Save to wk storage*/
  ;
  ;
  if (AF0IM010.AF0IMSCL != "Y"
   && AF0IM010.AF0IMSCL != "N")
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S26 "; /* Process number*/
    set AF0IM010.AF0IMSCL cursor, bold; /* highlight field*/
    converseLib.validationFailed(72); /* indicate invalid data entered*/
    AF0IW01.AF0IWSCL = " "; /* Space out save area*/
    ;
  end
  ;
  ;
  ;
end // end AF0IS26

// Edit Bal to book sign/pct
Function AF0IS27()
  ;
  AF0IW01.AF0IWBBS = AF0IM010.AF0IMBBS; /* Save to wk storage*/
  AF0IW01.AF0IWBTB = AF0IM010.AF0IMBTB; /* Save to wk storage*/
  ;
  if (AF0IM010.AF0IMBBS == " ") /* Contains spaces*/
    ;
    if (AF0IM010.AF0IMBTB > 0) /* Valid qty entered*/
                       /* (field in error)*/
      AFWREC.AFWPRCSN = "S27 "; /* Process number*/
      set AF0IM010.AF0IMBBS cursor, bold; /* highlight field*/
      set AF0IM010.AF0IMBTB cursor, bold; /* highlight field*/
      converseLib.validationFailed(72); /* indicate invalid data entered*/
      AF0IW01.AF0IWBBS = " "; /* Space out save area*/
      AF0IW01.AF0IWBTB = 0; /* Zero out save area*/
      return; /* Return to calling process*/
      ;
    else
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
  end
  ;
  ;
  if (AF0IM010.AF0IMBBS != ">"
   && AF0IM010.AF0IMBBS != "<")
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S27 "; /* Process number*/
    set AF0IM010.AF0IMBBS cursor, bold; /* highlight field*/
    converseLib.validationFailed(72); /* indicate invalid data entered*/
    AF0IW01.AF0IWBBS = " "; /* Space out save area*/
    ;
  end
  ;
  ;
  ;
end // end AF0IS27

// Edit Fcst vs Purch sign/pct
Function AF0IS28()
  ;
  AF0IW01.AF0IWFPS = AF0IM010.AF0IMFPS; /* Save to wk storage*/
  AF0IW01.AF0IWFPV = AF0IM010.AF0IMFPV; /* Save to wk storage*/
  ;
  if (AF0IM010.AF0IMFPS == " ") /* Contains spaces*/
    ;
    if (AF0IM010.AF0IMFPV > 0) /* Valid qty entered*/
                       /* (field in error)*/
      AFWREC.AFWPRCSN = "S28 "; /* Process number*/
      set AF0IM010.AF0IMFPS cursor, bold; /* highlight field*/
      set AF0IM010.AF0IMFPV cursor, bold; /* highlight field*/
      converseLib.validationFailed(72); /* indicate invalid data entered*/
      AF0IW01.AF0IWFPS = " "; /* Space out save area*/
      AF0IW01.AF0IWFPV = 0; /* Zero out save area*/
      return; /* Return to calling process*/
      ;
    else
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
  end
  ;
  ;
  if (AF0IM010.AF0IMFPS != ">"
   && AF0IM010.AF0IMFPS != "<")
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S28 "; /* Process number*/
    set AF0IM010.AF0IMFPS cursor, bold; /* highlight field*/
    converseLib.validationFailed(72); /* indicate invalid data entered*/
    AF0IW01.AF0IWFPS = " "; /* Space out save area*/
    ;
  end
  ;
  ;
  ;
end // end AF0IS28

// Edit Long Short sign/qty
Function AF0IS29()
  ;
  AF0IW01.AF0IWLSS = AF0IM010.AF0IMLSS; /* Save to wk storage*/
  AF0IW01.AF0IWLSU = AF0IM010.AF0IMLSU; /* Save to wk storage*/
  ;
  if (AF0IM010.AF0IMLSS == " ") /* Contains spaces*/
    ;
    if (AF0IM010.AF0IMLSU > 0) /* Valid qty entered*/
                       /* (field in error)*/
      AFWREC.AFWPRCSN = "S29 "; /* Process number*/
      set AF0IM010.AF0IMLSS cursor, bold; /* highlight field*/
      set AF0IM010.AF0IMLSU cursor, bold; /* highlight field*/
      converseLib.validationFailed(72); /* indicate invalid data entered*/
      AF0IW01.AF0IWLSS = " "; /* Space out save area*/
      AF0IW01.AF0IWLSU = 0; /* Zero out save area*/
      return; /* Return to calling process*/
      ;
    else
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
  end
  ;
  ;
  if (AF0IM010.AF0IMLSS != ">"
   && AF0IM010.AF0IMLSS != "<")
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S29 "; /* Process number*/
    set AF0IM010.AF0IMLSS cursor, bold; /* highlight field*/
    converseLib.validationFailed(72); /* indicate invalid data entered*/
    AF0IW01.AF0IWLSS = " "; /* Space out save area*/
    ;
  end
  ;
  ;
  ;
end // end AF0IS29

// Edit BLA sign/qty
Function AF0IS30()
  ;
  AF0IW01.AF0IWBUS = AF0IM010.AF0IMBUS; /* Save to wk storage*/
  AF0IW01.AF0IWBLU = AF0IM010.AF0IMBLU; /* Save to wk storage*/
  ;
  if (AF0IM010.AF0IMBUS == " ") /* Contains spaces*/
    ;
    if (AF0IM010.AF0IMBLU > 0) /* Valid qty entered*/
                       /* (field in error)*/
      AFWREC.AFWPRCSN = "S30 "; /* Process number*/
      set AF0IM010.AF0IMBUS cursor, bold; /* highlight field*/
      set AF0IM010.AF0IMBLU cursor, bold; /* highlight field*/
      converseLib.validationFailed(72); /* indicate invalid data entered*/
      AF0IW01.AF0IWBUS = " "; /* Space out save area*/
      AF0IW01.AF0IWBLU = 0; /* Zero out save area*/
      return; /* Return to calling process*/
      ;
    else
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
  end
  ;
  ;
  if (AF0IM010.AF0IMBUS != ">"
   && AF0IM010.AF0IMBUS != "<")
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S30 "; /* Process number*/
    set AF0IM010.AF0IMBUS cursor, bold; /* highlight field*/
    converseLib.validationFailed(72); /* indicate invalid data entered*/
    AF0IW01.AF0IWBUS = " "; /* Space out save area*/
    ;
  end
  ;
  ;
  ;
end // end AF0IS30

// Edit Forecast spread
Function AF0IS31()
  ;
  AF0IW01.AF0IWFSP = AF0IM010.AF0IMFSP; /* Save to wk storage*/
  ;
  ;
  if (AF0IM010.AF0IMFSP != "F"
   && AF0IM010.AF0IMFSP != "B")
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S31 "; /* Process number*/
    set AF0IM010.AF0IMFSP cursor, bold; /* highlight field*/
    converseLib.validationFailed(72); /* indicate invalid data entered*/
    AF0IW01.AF0IWFSP = " "; /* Space out save area*/
    ;
  end
  ;
  ;
  ;
end // end AF0IS31

// Edit Carryover selection flag
Function AF0IS32()
  ;
  if (AF0IM001.AF0IMCOV == " ")
                                   /* user did not select on optional field*/
    AF0IM001.AF0IMCOV = "B"; /* default*/
  end
  ;
  AF0IW01.AF0IWCRY = AF0IM001.AF0IMCOV; /* Save to wk storage*/
  ;
  ;
  if (AF0IM001.AF0IMCOV != "C"
   && AF0IM001.AF0IMCOV != "N"
   && AF0IM001.AF0IMCOV != "B")
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S32 "; /* Process number*/
    set AF0IM001.AF0IMCOV cursor, bold; /* highlight field*/
    converseLib.validationFailed(72); /* indicate invalid data entered*/
    AF0IW01.AF0IWCRY = " "; /* Space out save area*/
    exit stack;
    ;
  end
  ;
  AF0IM001.AF0IMCV2 = " ";
  ;
  ;
end // end AF0IS32

// qualify by xlccd selection
Function AF0IS33()
  set PG2REC empty;
  set AF5REC empty;
  set AF0IW05 empty;
  PG2REC.XLCCD1 = AF0IM001.XLCCD[1];
  PG2REC.XLCCD2 = AF0IM001.XLCCD[2];
  PG2REC.XLCCD3 = AF0IM001.XLCCD[3];
  PG2REC.XLCCD4 = AF0IM001.XLCCD[4];
   /* MOVE XP1REC.XGPCD TO PG2REC.XGPCD;*/
  PG2REC.XGPCD = "03";
  PG2REC.XDMCD = AF2REC.XDMCD;
  PG2REC.SY1STNBR = AF2REC.SY1STNBR;
  AF5REC.XSECD = AF2REC.XSECD;
  AF5REC.XSNYR = AF2REC.XSNYR;
  AF0IW05.AF0IWIOT = "SC";
  ;
  try
    call "AF1610" (AF0IW05, SQLCA, PG2REC, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0IW01.AF0IWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S33 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "QUALIFY ON LIFE CYCLE   ";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "JOIN    "; /* Data base name*/
  TA1REC.TA1TBLVU = "AFSYCLR "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0IM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0IS33

// edit life cycle selection
Function AF0IS34()
  AFWREC.AFWIDX1 = 4;
  ;
  while (AFWREC.AFWIDX1 >= 1)
    ;
    if (AF0IM001.XLCCD[AFWIDX1] != " ")
      ;
      if (AF0IM001.XLCCD[AFWIDX1] in XLCTBL.XLCCD
       && XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
                         /* (field is valid)*/
         /* MOVE af0iM001.XLCCD TO XP1REC.XLCCD;save to ws*/
        AF0IW01.AF0IWLC[AFWIDX1] = AF0IM001.XLCCD[AFWIDX1];
        ;
      else
                         /* (field in error)*/
        AFWREC.AFWPRCSN = "S34 "; /* Process number*/
        set AF0IM001.XLCCD[AFWIDX1] cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 79; /* indicate error message*/
        AF0IW01.AF0IWLC[AFWIDX1] = " ";
         /* MOVE ' ' TO XP1REC.XLCCD      ; save to working storage*/
         /* EZERTN                        ; return to calling process*/
        ;
      end
      ;
    else
      AF0IW01.AF0IWLC[AFWIDX1] = " ";
    end
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 - 1;
  end
  ;
end // end AF0IS34

// edit division code
Function AF0IS35()
  if (AF0IM001.XDVCD == " ") /* Map fld eq spaces*/
    AF0IW01.AF0IWDIV = " "; /* Space out save fld*/
    AF0IW01.XDVABRV = " "; /* Space out save desc*/
    AF0IM001.XDVABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  AF0IW01.AF0IWDIV = AF0IM001.XDVCD; /* save to wk map storage*/
  ;
  ;
  if (AF0IM001.XDVCD in XDVTBL.XDVCD)
    ;
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || AF0IM001.XDVCD == "05")                 
      AF0IW01.AF0IWDIV = AF0IM001.XDVCD; /* save to wk storage*/
      XP1REC.XDVCD = AF0IM001.XDVCD; /* save to wk storage*/
      XP1REC.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0IW01.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0IM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S35 "; /* Process number*/
  set AF0IM001.XDVCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  AF0IW01.XDVABRV = " "; /* Space out save desc*/
  AF0IM001.XDVABRV = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF0IS35

// edit product line cd
Function AF0IS36()
  if (AF0IM001.XPLCD == " ") /* Map fld eq spaces*/
    AF0IW01.AF0IWSLN = " "; /* Space out save fld*/
    AF0IW01.AF0IWDPL = " "; /* Space out save abrv*/
    AF0IM001.XPLABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end
  ;
  AF0IW01.AF0IWSLN = AF0IM001.XPLCD; /* save to wk map storage*/
  ;
  ;
  if (AF0IM001.XPLCD in XPLTBL.XPLCD)
    ;
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      ;
      if (AF0IM001.XPLCD == AF0IW01.AF0IWAL1) /* EQ previous xpl*/
        AF0IW01.AF0IWDPL = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0IW01.AF0IWAL1 = AF0IM001.XPLCD; /* save to wk storage*/
        XP1REC.XPLCD = AF0IM001.XPLCD; /* save to wk storage*/
        XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0IW01.AF0IWDPL = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0IM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S36 "; /* Process number*/
  set AF0IM001.XPLCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  AF0IW01.AF0IWDPL = " "; /* Space out save abrv*/
  AF0IM001.XPLABRV = " "; /* Space out map abrv*/
  ;
  ;
  ;
end // end AF0IS36

// edit product type cd
Function AF0IS37()
  if (AF0IM001.XPRCD == " ") /* Map fld eq spaces*/
    AF0IW01.AF0IWTYP = " "; /* Space out save fld*/
    AF0IW01.AF0IWDPR = " "; /* Space out save abrv*/
    AF0IM001.XPRABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end
  ;
  AF0IW01.AF0IWTYP = AF0IM001.XPRCD; /* save to wk map storage*/
  ;
  ;
  if (AF0IM001.XPRCD in XPRTBL.XPRCD)
    ;
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      ;
      if (AF0IM001.XPRCD == AF0IW01.AF0IWAT1) /* EQ previous xpr*/
        AF0IW01.AF0IWDPR = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0IW01.AF0IWAT1 = AF0IM001.XPRCD; /* save to wk storage*/
        XP1REC.XPRCD = AF0IM001.XPRCD; /* save to wk storage*/
        XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0IW01.AF0IWDPR = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0IM001.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S37 "; /* Process number*/
  set AF0IM001.XPRCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 80; /* indicate error message*/
  AF0IW01.AF0IWDPL = " "; /* Space out save abrv*/
  AF0IM001.XPRABRV = " "; /* Space out map abrv*/
  ;
  ;
  ;
end // end AF0IS37

// Edit owner group cd
Function AF0IS38()
  ;
  if (AF0IM001.XOWCD == " " /* Map fld eq spaces*/
   || AF0IM001.XOWCD == "**") /* Map fld eq ***/
    AF0IW01.AF0IWOWG = "**"; /* Wildcard save fld*/
    AF0IW01.AF0IWDOG = "ALL";
    AF0IM001.XOWCD = "**";
    AF0IM001.XOWABRV = "ALL";
    return; /* Return to calling process*/
  end
  ;
  AF0IW01.AF0IWOWG = AF0IM001.XOWCD; /* save to wk map storage*/
  AF0IW01.AF0IWHSE = "51"; /* whse 51 only*/
  ;
  ;
  if (AF0IW01.AF0IWOWK in XOWTBL.XOWKEY)
    ;
    if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      ;
      AF0IW01.AF0IWOGK = AF0IM001.XOWCD; /* owner group key*/
      XP1REC.XOWCD = AF0IM001.XOWCD;
      AF0IW01.AF0IWDOG = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
      AF0IM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S38 "; /* Process number*/
  set AF0IM001.XOWCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  AF0IW01.AF0IWOWG = " "; /* Space out save abrv*/
  AF0IW01.AF0IWDOG = " "; /* Space out save abrv*/
  AF0IM001.XOWABRV = " "; /* Space out map abrv*/
  XP1REC.XOWCD = " ";
  XP1REC.XOWABRV = " ";
  ;
  ;
  ;
end // end AF0IS38

// Edit blank indicator flag
Function AF0IS39()
  ;
  if (AF0IM001.AF0IM-BLNK-FL == " ")
    AF0IM001.AF0IM-BLNK-FL = "N";
    AF0IW01.AF0IW-BLNK-FL = "N";
    return;
  end
  ;
  if (AF0IM001.AF0IM-BLNK-FL != "Y"
   && AF0IM001.AF0IM-BLNK-FL != "N")
    ;
                   /* (field in error)*/
    AF0IW01.AF0IW-BLNK-FL = " "; /* Space out wk storage*/
    AFWREC.AFWPRCSN = "S39 "; /* Process number*/
    set AF0IM001.AF0IM-BLNK-FL cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 39; /* indicate error message*/
    ;
  else
    ;
                   /* (field is valid)*/
    AF0IW01.AF0IW-BLNK-FL = AF0IM001.AF0IM-BLNK-FL;
    ;
    ;
  end
  ;
  ;
end // end AF0IS39

// edit airspd indicator flag
Function AF0IS41()
  ;
  if (AF0IM001.AF0IM-AIR-FLAG == " ")
    AF0IM001.AF0IM-AIR-FLAG = "Y";
    AF0IW01.AF0IM-AIR-FLAG = "Y";
    return;
  end
  ;
  if (AF0IM001.AF0IM-AIR-FLAG != "Y"
   && AF0IM001.AF0IM-AIR-FLAG != "N")
    ;
                   /* (field in error)*/
    AF0IW01.AF0IM-AIR-FLAG = " "; /* Space out wk storage*/
    AFWREC.AFWPRCSN = "S39 "; /* Process number*/
    set AF0IM001.AF0IM-AIR-FLAG cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 39; /* indicate error message*/
    ;
  else
    ;
                   /* (field is valid)*/
    AF0IW01.AF0IM-AIR-FLAG = AF0IM001.AF0IM-AIR-FLAG;
    ;
    ;
  end
  ;
  ;
end // end AF0IS41

//*** RECORD=AF0IW01 ****
// Working Storage (1) for AF0I - Program-defined Variables
// ***********************
Record AF0IW01 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 XDMCD XDMCD ; 
  10 XDVCD XDVCD ; 
  10 XSNBDT XSNBDT ; 
  10 XSNXDT XSNXDT ; 
  10 XXXSTAT XXXSTAT ; 
  10 * char(3) ; 
  10 AFWSWR AFWSWR ; 
  10 AF0IWADI AF0IWADI ; 
  10 AF0IWAPC AF0IWAPC ; 
  10 AF0IWBKF AF0IWBKF ; 
  10 AF0IWBLF AF0IWBLF ; 
  10 AF0IWCAT AF0IWCAT ; 
  10 AF0IWTYP AF0IWTYP ; 
  10 AF0IWSLN AF0IWSLN ; 
  10 AF0IWDIV AF0IWDIV ; 
  10 AF0IWOWK AF0IWOWK ; 
    15 AF0IWHSE AF0IWHSE ; 
    15 AF0IWOWG AF0IWOWG ; 
  10 AF0IWLC AF0IWLC [4] ; 
  10 AF0IWCFD AF0IWCFD ; 
  10 AF0IWCIN AF0IWCIN ; 
  10 AF0IWCMS AF0IWCMS ; 
  10 AF0IWCNF AF0IWCNF ; 
  10 AF0IWCPT AF0IWCPT ; 
  10 AF0IWCSY AF0IWCSY ; 
  10 AF0IWYRC AF0IWYRC ; 
  10 AF0IWCST AF0IWCST ; 
  10 AF0IWCUI AF0IWCUI ; 
  10 XDVABRV XDVABRV ; 
  10 AF0IWDSY AF0IWDSY ; 
  10 AF0IWDSL AF0IWDSL ; 
  10 AF0IWDPC AF0IWDPC ; 
  10 AF0IWDGA AF0IWDGA ; 
  10 AF0IWDPR AF0IWDPR ; 
  10 AF0IWDPL AF0IWDPL ; 
  10 AF0IWDOG AF0IWDOG ; 
  10 AF0IWDUP AF0IWDUP ; 
  10 AF0IWEFC AF0IWEFC ; 
  10 AF0IWEPC AF0IWEPC ; 
  10 AF0IWFPF AF0IWFPF ; 
  10 AF0IWGA AF0IWGA ; 
  10 AF0IWIIN AF0IWIIN ; 
  10 AF0IWLCT AF0IWLCT ; 
  10 AF0IWLIM AF0IWLIM ; 
  10 AF0IWLIN AF0IWLIN ; 
  10 AF0IWLSF AF0IWLSF ; 
  10 AF0IWPCT AF0IWPCT ; 
  10 AF0IWPC1 AF0IWPC1 ; 
  10 AF0IWPC2 AF0IWPC2 ; 
  10 AF0IWPC3 AF0IWPC3 ; 
  10 AF0IWPC4 AF0IWPC4 ; 
  10 AF0IWPC5 AF0IWPC5 ; 
  10 AF0IWPGM AF0IWPGM ; 
  10 AF0IWPGW AF0IWPGW ; 
  10 AF0IWPGV AF0IWPGV ; 
  10 AF0IWPND AF0IWPND ; 
  10 AF0IWPRC AF0IWPRC ; 
  10 AF0IWPSA AF0IWPSA ; 
  10 AF0IWQLF AF0IWQLF ; 
  10 AF0IWQT1 AF0IWQT1 ; 
  10 AF0IWQT2 AF0IWQT2 ; 
  10 AF0IWQT3 AF0IWQT3 ; 
  10 AF0IWQT4 AF0IWQT4 ; 
  10 AF0IWQT5 AF0IWQT5 ; 
  10 AF0IWQT6 AF0IWQT6 ; 
  10 AF0IWSFI AF0IWSFI ; 
  10 AF0IWSIL AF0IWSIL ; 
  10 AF0IWSIX AF0IWSIX ; 
  10 AF0IWSQU AF0IWSQU ; 
  10 AF0IWSTD AF0IWSTD ; 
  10 AF0IWSTS AF0IWSTS ; 
  10 AF0IWSTY AF0IWSTY ; 
  10 AF0IWXLC AF0IWXLC [4] ; 
  10 AF0IWST1 AF0IWST1 ; 
  10 AF0IWST2 AF0IWST2 ; 
  10 AF0IWSYK AF0IWSYK ; 
  10 AF0IWOGK AF0IWOGK ; 
  10 AF0IWTPC AF0IWTPC ; 
  10 AF0IWUSR AF0IWUSR ; 
  10 AF0IWXGA AF0IWXGA ; 
  10 AF0IWAG1 AF0IWAG1 ; 
  10 AF0IWXPR AF0IWXPR ; 
  10 AF0IWAT1 AF0IWAT1 ; 
  10 AF0IWXPL AF0IWXPL ; 
  10 AF0IWAL1 AF0IWAL1 ; 
  10 AF0IWXPC AF0IWXPC ; 
  10 AF0IWAP1 AF0IWAP1 ; 
  10 AF0IWXSU AF0IWXSU ; 
  10 AF0IWAS1 AF0IWAS1 ; 
  10 AF0IWXSY AF0IWXSY ; 
    15 AF0IWXCC AF0IWXCC ; 
    15 AF0IWXYY AF0IWXYY ; 
  10 AF0IWXSA AF0IWXSA ; 
    15 AF0IWXSS AF0IWXSS ; 
    15 AF0IWXYR AF0IWXYR ; 
  10 * char(3) ; 
  10 AF0IWCRY AF0IWCRY ; 
  10 AF0IWCVF AF0IWCVF ; 
  10 AF0IWCV2 AF0IWCV2 ; 
  10 AF0IWSCL AF0IWSCL ; 
  10 AF0IWBBS AF0IWBBS ; 
  10 AF0IWBTB AF0IWBTB ; 
  10 AF0IWFPS AF0IWFPS ; 
  10 AF0IWFPV AF0IWFPV ; 
  10 AF0IWLSS AF0IWLSS ; 
  10 AF0IWLSU AF0IWLSU ; 
  10 AF0IWBUS AF0IWBUS ; 
  10 AF0IWBLU AF0IWBLU ; 
  10 AF0IWFSP AF0IWFSP ; 
  10 AF0IWTKY AF0IWTKY ; 
    15 AF0IWTCD AF0IWTCD ; 
    15 XGPCD XGPCD ; 
  10 AF0IW-BLNK-FL AF0IW-BLNK-FL ; 
  10 AF0IM-IN-STK-FLAG AF0IM-IN-STK-FLAG ; 
  10 AF0IM-AIR-FLAG AF0IM-AIR-FLAG ; 
  10 AF0IW-TOT-FCST-DLR AF0IW-TOT-FCST-DLR ; 
  10 AF0IM-TOT-COLR-PCT AF0IM-TOT-COLR-PCT ; 
  10 AF-LGSH-BLABK-IND AF-LGSH-BLABK-IND ; 
  10 AF-LGSH-SELECT-FL AF-LGSH-SELECT-FL ; 
end // end AF0IW01

//*** RECORD=AF0IW02 ****
// Working Storage (2) for AF0I - Map Work Area
// ***********************
Record AF0IW02 type basicRecord
  10 AF0IWLIN AF0IWLIN [300] ; 
  10 AF0IMGA AF0IMGA [300] ; 
  10 AF0IMPC AF0IMPC [300] ; 
  10 AF0IMSU AF0IMSU [300] ; 
  10 AF0IMSTY AF0IMSTY [300] ; 
  10 AF0IMCLR AF0IMCLR [300] ; 
  10 AF0IMBBK AF0IMBBK [300] ; 
  10 AF0IMBKD AF0IMBKD [300] ; 
  10 AF0IMBKP AF0IMBKP [300] ; 
  10 AF0IMFCD AF0IMFCD [300] ; 
  10 AF0IMFCQ AF0IMFCQ [300] ; 
  10 AF0IMFCP AF0IMFCP [300] ; 
  10 AF0IMPRD AF0IMPRD [300] ; 
  10 AF0IMPRQ AF0IMPRQ [300] ; 
  10 AF0IMPRP AF0IMPRP [300] ; 
  10 AF0IMABF AF0IMABF [300] ; 
  10 AF0IMLGQ AF0IMLGQ [300] ; 
  10 AF0IMSHQ AF0IMSHQ [300] ; 
  10 AF0IMBLD AF0IMBLD [300] ; 
  10 AF0IMASD AF0IMASD [300] ; 
  10 AF0IMBLQ AF0IMBLQ [300] ; 
  10 AF0IMASQ AF0IMASQ [300] ; 
  10 AF0IMLGD AF0IMLGD [300] ; 
  10 AF0IMSHD AF0IMSHD [300] ; 
  10 AF0IMLGC AF0IMLGC [300] ; 
  10 AF0IMPRV AF0IMPRV [300] ; 
  10 AF-IN-STK-QTY AF-IN-STK-QTY [300] ; 
  10 AIRSPD-LGSH-FL AIRSPD-LGSH-FL [300] ; 
end // end AF0IW02

//*** RECORD=AF0IW03 ****
// Working Storage (2) for AF0I - Map Work Area
// ***********************
Record AF0IW03 type basicRecord
  10 AF0IWLIN AF0IWLIN [300] ; 
  10 AF0IMGA AF0IMGA [300] ; 
  10 AF0IMPC AF0IMPC [300] ; 
  10 AF0IMSU AF0IMSU [300] ; 
  10 AF0IMSTY AF0IMSTY [300] ; 
  10 AF0IMCLR AF0IMCLR [300] ; 
  10 AF0IMBBK AF0IMBBK [300] ; 
  10 AF0IMBKD AF0IMBKD [300] ; 
  10 AF0IMBKP AF0IMBKP [300] ; 
  10 AF0IMFCD AF0IMFCD [300] ; 
  10 AF0IMFCQ AF0IMFCQ [300] ; 
  10 AF0IMFCP AF0IMFCP [300] ; 
  10 AF0IMPRD AF0IMPRD [300] ; 
  10 AF0IMPRQ AF0IMPRQ [300] ; 
  10 AF0IMPRP AF0IMPRP [300] ; 
  10 AF0IMABF AF0IMABF [300] ; 
  10 AF0IMLGQ AF0IMLGQ [300] ; 
  10 AF0IMSHQ AF0IMSHQ [300] ; 
  10 AF0IMBLD AF0IMBLD [300] ; 
  10 AF0IMASD AF0IMASD [300] ; 
  10 AF0IMBLQ AF0IMBLQ [300] ; 
  10 AF0IMASQ AF0IMASQ [300] ; 
  10 AF0IMLGD AF0IMLGD [300] ; 
  10 AF0IMSHD AF0IMSHD [300] ; 
  10 AF0IMLGC AF0IMLGC [300] ; 
  10 AF0IMPRV AF0IMPRV [300] ; 
  10 AF-IN-STK-QTY AF-IN-STK-QTY [300] ; 
  10 AIRSPD-LGSH-FL AIRSPD-LGSH-FL [300] ; 
end // end AF0IW03

//*** RECORD=AF0IW04 ****
// Working Storage (4) for AF0I - this will rprsnt the tot line
// ***********************
Record AF0IW04 type basicRecord
  10 AF0IMBKD AF0IMBKD ; 
  10 AF0IMFCD AF0IMFCD ; 
  10 AF0IMFCQ AF0IMFCQ ; 
  10 AF0IMPRD AF0IMPRD ; 
  10 AF0IMPRQ AF0IMPRQ ; 
  10 AF0IMLGQ AF0IMLGQ ; 
  10 AF0IMSHQ AF0IMSHQ ; 
  10 AF0IMBLD AF0IMBLD ; 
  10 AF0IMASD AF0IMASD ; 
  10 AF0IMBLQ AF0IMBLQ ; 
  10 AF0IMASQ AF0IMASQ ; 
  10 AF0IMLGD AF0IMLGD ; 
  10 AF0IMSHD AF0IMSHD ; 
  10 AF0IMLGC AF0IMLGC ; 
  10 AF0IM-RAW-FCST AF0IM-RAW-FCST ; 
end // end AF0IW04

//*** RECORD=AF0IW05 ****
// record passed betewwn AF0I and special IOMOD AF1610.  It
// contains two fields -- io function requested and count of
// rows satisfying the selection criteria
// ***********************
Record AF0IW05 type basicRecord
  10 AF0IWIOT AF0IWIOT ; 
  10 AF0IWCNT AF0IWCNT ; 
end // end AF0IW05

// INCLUDE AIRSPEED FLAG
DataItem AF0IM-AIR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// include in stock flag
DataItem AF0IM-IN-STK-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst $ without in stock
DataItem AF0IM-RAW-FCST int {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// color pct including instock
DataItem AF0IM-TOT-COLR-PCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map add buy flag
DataItem AF0IMABF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// airspeed dollars
DataItem AF0IMASD num(9)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// airspeed quantity
DataItem AF0IMASQ num(9)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// map bal to booked pct
DataItem AF0IMBBK num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map booked - dollars
DataItem AF0IMBKD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map booked - pct
DataItem AF0IMBKP num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map BLA - dollars
DataItem AF0IMBLD int {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// map BLA - qty
DataItem AF0IMBLQ decimal(9,1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// map color id
DataItem AF0IMCLR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map forecast - dollars
DataItem AF0IMFCD num(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map forecast - pct
DataItem AF0IMFCP num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map forecast - qty
DataItem AF0IMFCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map xgacd
DataItem AF0IMGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map long - dollars at cost
DataItem AF0IMLGC int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map long - dollars
DataItem AF0IMLGD int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map long  - qty
DataItem AF0IMLGQ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map xpccd
DataItem AF0IMPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map purchased - dollars
DataItem AF0IMPRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map purchased - pct
DataItem AF0IMPRP num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map purchased - qty
DataItem AF0IMPRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fcst to Purch variance
DataItem AF0IMPRV num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map short - dollars
DataItem AF0IMSHD int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map short - qty
DataItem AF0IMSHQ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map style no.
DataItem AF0IMSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map xsucd
DataItem AF0IMSU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Blank only indicator fl
DataItem AF0IW-BLNK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total style forecast dollars
DataItem AF0IW-TOT-FCST-DLR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color upd val flag
DataItem AF0IWADI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XGACD
DataItem AF0IWAG1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPLCD
DataItem AF0IWAL1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPCCD
DataItem AF0IWAP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Adjustment pcent
DataItem AF0IWAPC bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alternate start XSUCD
DataItem AF0IWAS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPRCD
DataItem AF0IWAT1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bal to book sign
DataItem AF0IWBBS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bookings select flag
DataItem AF0IWBKF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BLA select flag
DataItem AF0IWBLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BLA qty
DataItem AF0IWBLU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bal to book pct
DataItem AF0IWBTB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BLA sign
DataItem AF0IWBUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start category save
DataItem AF0IWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst dlr for color
DataItem AF0IWCFD decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data contention indicator
DataItem AF0IWCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// G/A,CAT,SIL Comb. flag
DataItem AF0IWCMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update confirm flag
DataItem AF0IWCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// returned row count
DataItem AF0IWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current Product Type Code
DataItem AF0IWCPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carryover flag
DataItem AF0IWCRY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved color cost
DataItem AF0IWCST bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current style counter
DataItem AF0IWCSY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color update indicator
DataItem AF0IWCUI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carryover flag(internal)
DataItem AF0IWCV2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carryover found flag
DataItem AF0IWCVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start gender/age desc
DataItem AF0IWDGA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start division code
DataItem AF0IWDIV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start owner group desc
DataItem AF0IWDOG char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start category desc
DataItem AF0IWDPC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start product line desc
DataItem AF0IWDPL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start product type desc
DataItem AF0IWDPR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette desc
DataItem AF0IWDSL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style desc
DataItem AF0IWDSY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Duplicates indicator
DataItem AF0IWDUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Extra fcst indicator
DataItem AF0IWEFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Extra fcst pcent
DataItem AF0IWEPC bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fcst vs Purch select flag
DataItem AF0IWFPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst vs Purch sign
DataItem AF0IWFPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst vs Purch pct
DataItem AF0IWFPV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fcst spread mode
DataItem AF0IWFSP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start gender/age save
DataItem AF0IWGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start whse code
DataItem AF0IWHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inactive/Space status ind
DataItem AF0IWIIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// io function requested
DataItem AF0IWIOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Life cycle select
DataItem AF0IWLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record retrieve loop ctr
DataItem AF0IWLCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style read ctr loop limit
DataItem AF0IWLIM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row select loop mode ind
DataItem AF0IWLIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Long/Short select flag
DataItem AF0IWLSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Long short sign
DataItem AF0IWLSS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Long short qty
DataItem AF0IWLSU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Owner group select wk key
DataItem AF0IWOGK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start owner group code
DataItem AF0IWOWG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start owner group key
DataItem AF0IWOWK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pcent wk 1
DataItem AF0IWPC1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pcent wk 2
DataItem AF0IWPC2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pcent wk 3
DataItem AF0IWPC3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pcent wk 4
DataItem AF0IWPC4 bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pcent wk 5
DataItem AF0IWPC5 bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Adjusted percent value
DataItem AF0IWPCT num(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max page count
DataItem AF0IWPGM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current page count
DataItem AF0IWPGV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk page count
DataItem AF0IWPGW smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0IWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Price
DataItem AF0IWPRC bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page start address
DataItem AF0IWPSA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color qualify flag
DataItem AF0IWQLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk qty 1
DataItem AF0IWQT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk qty 2
DataItem AF0IWQT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk qty 3
DataItem AF0IWQT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk qty 4
DataItem AF0IWQT4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk qty 5
DataItem AF0IWQT5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk qty 6
DataItem AF0IWQT6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color display flag
DataItem AF0IWSCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast spread ind
DataItem AF0IWSFI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette save
DataItem AF0IWSIL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Store index save area
DataItem AF0IWSIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start product line save
DataItem AF0IWSLN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style qualify flag
DataItem AF0IWSQU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate style number 1
DataItem AF0IWST1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate style number 2
DataItem AF0IWST2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status description
DataItem AF0IWSTD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start status save
DataItem AF0IWSTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style save
DataItem AF0IWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style select wk key
DataItem AF0IWSYK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table code value
DataItem AF0IWTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table key
DataItem AF0IWTKY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total pcents
DataItem AF0IWTPC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start product type save
DataItem AF0IWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start xxxuser save
DataItem AF0IWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0IWXCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal start XGACD
DataItem AF0IWXGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start life cycle save
DataItem AF0IWXLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPCCD
DataItem AF0IWXPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPLCD
DataItem AF0IWXPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPRCD
DataItem AF0IWXPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0IWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0IWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XSUCD
DataItem AF0IWXSU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0IWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0IWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xsnyr work area
DataItem AF0IWXYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season yr comparison field
DataItem AF0IWYRC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

