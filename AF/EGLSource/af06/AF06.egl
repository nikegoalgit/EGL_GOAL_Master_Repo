package af06;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom3.XPAF001;
import corpcom3.XPTA0P;
import corpcom3.XSAFS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XSETBL;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpz3.ZZZCHGCT;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA3USRID;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=AF06 ****
// This application is part of the Forecast Performance sub-
// system of the Apparel Forecast System.  Its purpose is to
// inquire on which snapshots have been taken and to do various
// maintenance on them.  The actual maintenance on the snapshot
// database will be done by a batch program which this applica-
// tion can also request to be submitted.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 08-22-91   LREIN    New application.
// *********************
Program AF06 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF06W00 AF06W00; // record
  AF06W01 AF06W01; // record
  AF06W02 AF06W02; // record
  AF06W03 AF06W03; // record
  AF06W04 AF06W04; // record
  AFLREC AFLREC; // record
  AFNREC AFNREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AF06T01 {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use AF06M.AF06M001, // form
  AF06M.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Menu Main process.*/
     /* ------------------------------------------------------------*/
    ;
    set AFWREC empty; /* Initialize working storage*/
    set AF06M001 initial; /* Initialize map output area*/
    set AFLREC empty;
    set AFNREC empty;
    set TA1REC empty;
    set AF06W02 empty; /* area for event code table*/
    ;
    AFWREC.AFWSWR = "Y"; /* request data to display*/
    AF06W00.AF06WFMS = "Y"; /* map should be formatted*/
    AF06M001.XXXUSER = XP1REC.XXXUSER;
    AFWREC.AFWFIRST = "F"; /* first time through*/
    move " " to AF06M001.XSECD[1] for all; /* these two lines determine*/
    AF06W00.AF06WMSL = sysVar.arrayIndex; /* the max number of screen lines*/
    AFWREC.AFWTSL = sysVar.arrayIndex * 55 + 4; /* number of lines * length of line + 4*/
    AF06W00.AF06WDT = VGVar.currentShortGregorianDate; /* work date*/
    ;
    if (AF06W00.AF06WYR < 80)
      AF06W00.AF06WCCY = 2000 + AF06W00.AF06WYR;
    else
      AF06W00.AF06WCCY = 1900 + AF06W00.AF06WYR;
    end
    ;
    goto AF06001; /* Converse main process*/
    ;
    ;
    ;
    AF06001: AF06001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process*/
     /* ------------------------------------------------------------*/
    ;
    goto AF06001; /* Converse main process*/
    ;
    ;
    ;
  end // end main
end // end AF06

// Main Process
Function AF06001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AF06100(); /* Obtain the data to display*/
  ;
  AF06200(); /* Format and display the map*/
  ;
  AF06300(); /* Check attention identifier*/
  ;
  AF06400(); /* Reset fields to normal intensity*/
  ;
  AF06500(); /* Verify the entered data*/
  ;
  AF06600(); /* Process valid request*/
  ;
  ;
  ;
end // end AF06001

// Obtain data to display
Function AF06100()
  if (AFWREC.AFWFIRST == "F") /* first time through*/
    AFWREC.AFWFIRST = "N"; /* not any more*/
    AF06110(); /* select set dacast.vevent01*/
    AFWREC.AFWIDX1 = 1; /* first bucket*/
    SQLCA.VAGen_SQLCODE = 0;
    ;
    while (SQLCA.VAGen_SQLCODE != 100) /* for each row*/
      AF06120(); /* fetch next row*/
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* next bucket*/
    end
    ;
    AF06130(); /* close cursor*/
  end
  ;
  if (AFWREC.AFWSWR != "Y" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* an error*/
    return; /* dont mess around with getting data*/
  end
  ;
  AF06140(); /* open cursor dacast.vsnpin01*/
  SQLCA.VAGen_SQLCODE = 0;
  AFWREC.AFWIDX2 = 1; /* first row*/
  set AF06W01 empty; /* initialise screen work area*/
  AF06310(); /* purge temp storage queue*/
  ;
  while (SQLCA.VAGen_SQLCODE != 100) /* for each row*/
    AF06150(); /* process SNPIN rows*/
  end
  ;
  AF06160(); /* close cursor*/
  ;
  if (AFWREC.AFWIDX1 > 1) /* partial page formatted*/
    AF06153(); /* add page to tsq*/
  end
  ;
  AFWREC.AFWSWR = "N"; /* data all obtained*/
  AFWREC.AFWTSP = 1; /* start at page 1*/
  ;
  if (TA5REC.TA5TSQIX < 1)
    converseLib.validationFailed(99); /* no snapshots on file*/
    AF06M001.XXXMODID = "100"; /* process number*/
  end
  ;
  ;
  ;
end // end AF06100

// Select set DACAST.VEVENT01
Function AF06110()
   /* ===================================**/
   /* Select Set from DACAST.VEVENT01  **/
   /* ===================================**/
  ;
  set AFNREC empty;
  try
    call "IO5990" ("SS", SQLCA, AFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF06M001.XXXMODID = "110 "; /* Process number*/
  TA1REC.TA1PGMNM = "AF06110"; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET EVENT";
  TA1REC.TA1MAP = "AF06M001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VEVENT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF06110

// Fetch next row DACAST.VEVENT01
Function AF06120()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5990" ("SN", SQLCA, AFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  if (sysVar.errorCode == "00000000"
  )
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        AF06W02.AFNEVNCD[AFWIDX1] = AFNREC.AFNEVNCD;
        AF06W02.AFNEDESC[AFWIDX1] = AFNREC.AFNEDESC;
        return;
      end
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF06M001.XXXMODID = "120"; /* process name*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        AF06M001.XXXMODID = "120"; /* process name*/
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF06M001.XXXMODID = "120 "; /* Process number*/
  TA1REC.TA1PGMNM = "AF06120"; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AF06M001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VEVENT01"; /* Table view name*/
  try
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* Error diag. routine*/
  return; /* Return to previous process*/
  ;
  ;
  ;
end // end AF06120

// Close cursor DACAST.VEVENT01
Function AF06130()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5990" ("CS", SQLCA, AFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF06M001.XXXMODID = "130"; /* Process number*/
  TA1REC.TA1PGMNM = "AF06130"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE CURSOR           ";
  TA1REC.TA1MAP = "AF06M001"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VEVENT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF06130

// Open cursor DACAST.VSNPIN01
Function AF06140()
   /* ===================================**/
   /* Select Set from DACAST.VEVENT01  **/
   /* ===================================**/
  ;
  set AFLREC empty;
  try
    call "IO5980" ("SS", SQLCA, AFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF06M001.XXXMODID = "140 "; /* Process number*/
  TA1REC.TA1PGMNM = "AF06140"; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET SNAP";
  TA1REC.TA1MAP = "AF06M001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSNPIN01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF06140

// Process DACAST.VSNPIN01 rows
Function AF06150()
  AF06151(); /* fetch row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* no more rows*/
    return; /* return to calling process*/
  end
  ;
  AF06152(); /* save in working storage*/
  ;
  if (AFWREC.AFWIDX2 > AF06W00.AF06WMSL) /* page full*/
    AF06153(); /* add to temp storage*/
    AFWREC.AFWIDX2 = 1; /* first bucket*/
  end
  ;
  ;
  ;
end // end AF06150

// Fetch next row DACAST.VSNPIN01
Function AF06151()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, return to calling process*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5980" ("SN", SQLCA, AFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  if (sysVar.errorCode == "00000000"
  )
    if (SQLCA.VAGen_SQLCODE == 100 /* End of selected set*/
     || SQLCA.VAGen_SQLCODE == 0)  /* good call       set*/
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AFWREC.AFWPRCSN = "151 "; /* process name*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        AFWREC.AFWPRCSN = "151 "; /* process name*/
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF06M001.XXXMODID = "151 "; /* Process number*/
  TA1REC.TA1PGMNM = "AF06151"; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AF06M001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSNPIN01"; /* Table view name*/
  try
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* Error diag. routine*/
  exit stack; /* return to display the map*/
  ;
  ;
  ;
end // end AF06151

// Save data in working storage
Function AF06152()
  AF06W01.AFLSPSIN[AFWIDX2] = AFLREC.AFLSPSIN; /* snapshot status*/
  AF06W01.AFNEVNCD[AFWIDX2] = AFLREC.AFNEVNCD; /* event code*/
  AF06W01.XSECD[AFWIDX2] = AFLREC.XSECD; /* snapshot season*/
  AF06W01.XSNYR[AFWIDX2] = AFLREC.XSNYR; /* snapshot year*/
  AF06W01.AFLSNPDT[AFWIDX2] = AFLREC.AFLSNPDT; /* snapshot dt*/
  AF06W01.AFLSNCMT[AFWIDX2] = AFLREC.AFLSNCMT; /* snapshot comment*/
  AF06W01.ZZZCHGCT[AFWIDX2] = AFLREC.ZZZCHGCT; /* change count*/
  ;
  if (AFLREC.AFNEVNCD in AF06W02.AFNEVNCD) /* match on event table*/
    AF06W01.AFNEDESC[AFWIDX2] = AF06W02.AFNEDESC[sysVar.arrayIndex];
  else /* no match*/
    AF06W01.AFNEDESC[AFWIDX2] = "UNKNOWN"; /* description*/
  end
  AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* next bucket*/
  ;
  ;
  ;
end // end AF06152

// Add page to temp storage
Function AF06153()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  AF06W01.AF06WTSL = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = "AF06"; /* Application id*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  call "TA0050" (AF06W01, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AF06M001.XXXMODID = "153"; /* Process number*/
    TA1REC.TA1PGMNM = "AF06153"; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AF06M001"; /* MAP NAME*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    return; /* Return to previous process*/
  end
  ;
  AFWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
  AFWREC.AFWIXM = 1; /* Reset display line number*/
  set AF06W01 empty; /* Clear temporary storage record*/
  ;
  ;
  ;
end // end AF06153

// Close cursor DACAST.VSNPIN01
Function AF06160()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5980" ("CS", SQLCA, AFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF06M001.XXXMODID = "160"; /* Process number*/
  TA1REC.TA1PGMNM = "AF06160"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE CURSOR           ";
  TA1REC.TA1MAP = "AF06M001"; /* map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSNPIN01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF06160

// Format and display the map
Function AF06200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  AF06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AF06M001 alarm; /* Indicate sound alarm*/
  end
  ;
  if (AF06W00.AF06WFMS == "N" /* dont format map*/
   || converseVar.validationMsgNum != 0) /* Error message to display*/
   /* next sentence                /* return to calling process*/
  else
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Information message number*/
    XP1REC.XP1MNO = 0; /* Reset information message number*/
    set AF06M001 initial;
    AF06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    AF06210(); /* Format the data on the page*/
    AF06W00.AF06WFMS = "N"; /* map is formatted*/
  end
  ;
  AFWREC.AFWIXM = 1; /* first screen line*/
  ;
  while (AFWREC.AFWIXM <= AFWREC.AFWIDX3) /* screen lines formatted*/
    ;
    if (AF06M001.AFLSPSIN[AFWIXM] != " ") /* an entry this line*/
      set AF06M001.AFNEVNCD[AFWIXM] skip; /* cant touch this*/
      set AF06M001.XSECD[AFWIXM] skip; /* cant touch this*/
      set AF06M001.XSNYR[AFWIXM] skip; /* cant touch this*/
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next line*/
  end
  converse AF06M001 ;
  ;
  ;
  ;
end // end AF06200

// Format the map from working st
Function AF06210()
  AF06211(); /* get page from tsq*/
  AFWREC.AFWIXM = 1; /* first screen line*/
  ;
  while (AFWREC.AFWIXM <= AF06W00.AF06WMSL) /* max possible lines*/
    AF06M001.AFLSPSIN[AFWIXM] = AF06W01.AFLSPSIN[AFWIXM];
    AF06M001.AFNEVNCD[AFWIXM] = AF06W01.AFNEVNCD[AFWIXM];
    AF06M001.AFNEDESC[AFWIXM] = AF06W01.AFNEDESC[AFWIXM];
    AF06M001.XSECD[AFWIXM] = AF06W01.XSECD[AFWIXM];
    AF06M001.XSNYR[AFWIXM] = AF06W01.XSNYR[AFWIXM];
    AF06M001.AFLSNPDT[AFWIXM] = AF06W01.AFLSNPDT[AFWIXM];
    AF06M001.AFLSNCMT[AFWIXM] = AF06W01.AFLSNCMT[AFWIXM];
    ;
    if (AF06W01.AFLSPSIN[AFWIXM] != " ") /* an entry this line*/
      AFWREC.AFWIDX3 = AFWREC.AFWIXM; /* number of lines formatted*/
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next line*/
  end
  ;
  ;
  ;
end // end AF06210

// Get page from temp storage
Function AF06211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  set AF06W01 empty; /* initialise tsq work area*/
  AF06W01.AF06WTSL = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = "AF06"; /* Application identification*/
  TA5REC.TA5TSQIX = AFWREC.AFWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  call "TA0050" (AF06W01, TA5REC) {isNoRefresh = yes}; /* Temporary storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0 /* no errors*/
   || TA5REC.TA5RTNCD == 1 /* both of these will*/
   || TA5REC.TA5RTNCD == 7) /* indicate no more pages*/
   /* next sentence;*/
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AF06M001.XXXMODID = "211 "; /* Process number*/
    TA1REC.TA1PGMNM = "AF06211"; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AF06M001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    converseLib.validationFailed(5); /* Indicate no data to display*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  AFWREC.AFWIXM = 1; /* first line*/
  ;
  while (AFWREC.AFWIXM <= AF06W00.AF06WMSL) /* for each line*/
    ;
    if (AF06W01.AFNEVNCD[AFWIXM] == " ")
      AF06W01.AFNEVNCD[AFWIXM] = "00";
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next line*/
  end
  ;
  ;
  ;
end // end AF06211

// Check Attention Identifier
Function AF06300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF06M001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF06M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF06M001.CAITEM; /* Application data*/
      AF06310(); /* purge temp storage queue*/
      XSAFS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set AF06M001.CATOAP cursor, modified, bold; /* Highlight in case*/
    AF06M001.XXXMODID = "300 "; /* of returning from*/
    exit stack; /* transfer with error*/
  end
  ;
  if (AF06M001.CAITEM > " ") /* Application data was entered*/
    set AF06M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AF06M001.XXXMODID = "300 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF06M001"; /* Appl find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF1 was pressed*/
      COMMAREA.CATOAP = "AF04"; /* Appl find code*/
    end
    ;
    AF06310(); /* purge temp storage queue*/
    XSAFS01(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pa2   /* reset*/
   && converseVar.eventKey not pf7   /* scroll up*/
   && converseVar.eventKey not pf8   /* scroll down*/
   && converseVar.eventKey not pf5   /* create snapshot*/
   && converseVar.eventKey not pf6   /* create partial snapshot*/
   && converseVar.eventKey not pf9)  /* request report*/
    AF06M001.XXXMODID = "300 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf5 /* create snapshot*/
   || converseVar.eventKey is pf7 /* scroll up*/
   || converseVar.eventKey is pf8 /* scroll down*/
   || converseVar.eventKey is enter)
    return; /* return to calling process*/
  end
  ;
  if (converseVar.eventKey is pa2) /* reset*/
    COMMAREA.CATOAP = "AF06";
  else
    ;
    if (converseVar.eventKey is pf6) /* create partial snapshot*/
      COMMAREA.CATOAP = "AF07";
    else
      ;
      if (converseVar.eventKey is pf9) /* request snapshot report*/
        COMMAREA.CATOAP = "AF08";
      end
    end
  end
  ;
  XSAFS01(); /* Exit to another application*/
  set AF06M001.CATOAP cursor, modified, bold; /* Highlight in case*/
  AF06M001.XXXMODID = "300 "; /* of returning from*/
  exit stack; /* transfer with error*/
  ;
  ;
  ;
end // end AF06300

// Purge temp storage queue
Function AF06310()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = "AF06"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  call "TA0050" (AF06W01, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    AF06M001.XXXMODID = "310 "; /* Process number*/
    TA1REC.TA1PGMNM = "AF06310"; /* Error location*/
    TA1REC.TA1LOC = "PURGE TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AF06M001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  AFWREC.AFWTSP = 0; /* Reset current page number*/
  AFWREC.TA5TSQIX = 0; /* Reset highest page number*/
  ;
  ;
  ;
end // end AF06310

// Reset highlighted fields
Function AF06400()
  AFWREC.AFWIXM = 1; /* first screen line*/
  ;
  while (AFWREC.AFWIXM <= AF06W00.AF06WMSL) /* max possible lines*/
    set AF06M001.AFLSPSIN[AFWIXM] initialAttributes; /* snapshot status*/
    set AF06M001.AFNEVNCD[AFWIXM] initialAttributes; /* event code*/
    set AF06M001.AFNEDESC[AFWIXM] initialAttributes; /* event description*/
    set AF06M001.AFLSNPDT[AFWIXM] initialAttributes; /* snapshot date*/
    set AF06M001.AFLSNCMT[AFWIXM] initialAttributes; /* snapshot comment*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next line*/
  end
  ;
  ;
end // end AF06400

// validate entered data
Function AF06500()
  if (converseVar.eventKey is pf7) /* scroll up*/
    ;
    if (AFWREC.AFWTSP == 1) /* already on first page*/
      converseLib.validationFailed(2); /* error no more backward*/
      AF06M001.XXXMODID = "500"; /* process number*/
      exit stack; /* return to display the map*/
    else /* no error*/
      return; /* return to calling process*/
    end
    ;
  end
  if (converseVar.eventKey is pf8) /* scroll down*/
    ;
    if (AFWREC.AFWTSP == AFWREC.TA5TSQIX) /* already on last page*/
      converseLib.validationFailed(3); /* error no more forward*/
      AF06M001.XXXMODID = "500"; /* process number*/
      exit stack; /* return to display the map*/
    else /* no error*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
  AF06W00.AF06WDCS = "N"; /* data hasnt changed*/
  AFWREC.AFWIXM = 1; /* first line*/
  ;
  while (AFWREC.AFWIXM <= AF06W00.AF06WMSL /* max screen lines*/
   && AF06W00.AF06WDCS == "N") /* data hasnt changed*/
    AF06510(); /* verify if data changed*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next screen line*/
  end
  if (AF06W00.AF06WDCS == "N") /* no changed screen data*/
    return; /* return to calling process*/
  end
  ;
  AFWREC.AFWIXM = AF06W00.AF06WMSL; /* last screen row*/
  ;
  while (AFWREC.AFWIXM >= 1) /* for each screen row*/
    ;
    if (AF06M001.XSNYR[AFWIXM] != AF06W01.XSNYR[AFWIXM])
      ;
      if (AF06M001.XSNYR[AFWIXM] < AF06W00.AF06WCCY) /* current ccyy*/
        set AF06M001.XSNYR[AFWIXM] cursor, bold; /* highlight*/
        AF06M001.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(72);
      end
      ;
    end
    ;
    if (AF06M001.XSECD[AFWIXM] != AF06W01.XSECD[AFWIXM]) /* season changed*/
      ;
      if (AF06M001.XSECD[AFWIXM] in XSETBL.XSECD) /* season match?*/
   /* NEXT SENTENCE                               no error*/
      else /* error*/
        set AF06M001.XSECD[AFWIXM] cursor, bold; /* highlight*/
        AF06M001.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(16);
      end
      ;
    end
    ;
    if (AF06M001.AFNEVNCD[AFWIXM] != AF06W01.AFNEVNCD[AFWIXM])
      ;
      if (AF06M001.AFNEVNCD[AFWIXM] in AF06W02.AFNEVNCD)
   /* NEXT SENTENCE                               no error*/
      else /* error*/
        set AF06M001.AFNEVNCD[AFWIXM] cursor, bold; /* highlight*/
        AF06M001.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(100);
      end
      ;
    end
    ;
    if (AF06M001.AFLSPSIN[AFWIXM] != AF06W01.AFLSPSIN[AFWIXM])
      AF06520(); /* validate status*/
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* previous screen line*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* an error*/
    AF06W00.AF06WFMS = "N"; /* dont format map*/
    AFWREC.AFWSWR = "Y"; /* request data*/
    exit stack; /* return to display map*/
  end
  ;
  ;
  ;
end // end AF06500

// Check if data entered
Function AF06510()
  AFWREC.AFWIXM = 1; /* first screen line*/
  ;
  while (AFWREC.AFWIXM <= AF06W00.AF06WMSL) /* max possible lines*/
    ;
    if (AF06W01.AFLSPSIN[AFWIXM] != AF06M001.AFLSPSIN[AFWIXM]
     || AF06W01.AFNEVNCD[AFWIXM] != AF06M001.AFNEVNCD[AFWIXM]
     || AF06W01.AFNEDESC[AFWIXM] != AF06M001.AFNEDESC[AFWIXM]
     || AF06W01.XSECD[AFWIXM] != AF06M001.XSECD[AFWIXM]
     || AF06W01.XSNYR[AFWIXM] != AF06M001.XSNYR[AFWIXM])
      AF06W00.AF06WDCS = "Y"; /* data changed*/
    end
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next line*/
  end
  ;
  ;
end // end AF06510

// Validate status change
Function AF06520()
  if (AF06M001.AFLSPSIN[AFWIXM] != "R" /* replace*/
   && AF06M001.AFLSPSIN[AFWIXM] != "N" /* new*/
   && AF06M001.AFLSPSIN[AFWIXM] != "D" /* delete*/
   && AF06M001.AFLSPSIN[AFWIXM] != "U") /* undelete*/
    set AF06M001.AFLSPSIN[AFWIXM] cursor, bold; /* highlight*/
    AF06M001.XXXMODID = "520"; /* process number*/
    converseLib.validationFailed(101); /* invalid status*/
    return; /* return to calling process*/
  end
  ;
  if (AF06M001.AFLSPSIN[AFWIXM] == "R") /* changed to replace*/
    ;
    if (AF06W01.AFLSPSIN[AFWIXM] != "A" /* originally active*/
     && AF06W01.AFLSPSIN[AFWIXM] != "N") /* originally new*/
      set AF06M001.AFLSPSIN[AFWIXM] cursor, bold; /* highlight*/
      AF06M001.XXXMODID = "520"; /* process number*/
      converseLib.validationFailed(102); /* error can only repl new or active*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
  if (AF06M001.AFLSPSIN[AFWIXM] == "D") /* changed to delete*/
    ;
    if (AF06W01.AFLSPSIN[AFWIXM] != "A" /* originally active*/
     && AF06W01.AFLSPSIN[AFWIXM] != "N" /* originally new*/
     && AF06W01.AFLSPSIN[AFWIXM] != "U") /* originally undelete*/
      set AF06M001.AFLSPSIN[AFWIXM] cursor, bold; /* highlight*/
      AF06M001.XXXMODID = "520"; /* process number*/
      converseLib.validationFailed(103); /* error cant delete this status*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
  if (AF06M001.AFLSPSIN[AFWIXM] == "N"           /* new snap requested*/
   && AF06M001.XSNYR[AFWIXM] >= AF06W00.AF06WCCY /* current ccyy*/
   && AF06M001.XSECD[AFWIXM] in XSETBL.XSECD)    /* season match*/
    set AFLREC empty; /* initialise record*/
    AFLREC.XSECD = AF06M001.XSECD[AFWIXM]; /* season code*/
    AFLREC.XSNYR = AF06M001.XSNYR[AFWIXM]; /* season year*/
    AFLREC.AFNEVNCD = AF06M001.AFNEVNCD[AFWIXM]; /* event code*/
    AFLREC.AFLSPSIN = "A"; /* active status*/
    AF06521(); /* fetch unique DACAST.VSNPIN01*/
    ;
    if (SQLCA.VAGen_SQLCODE != 100) /* row was found*/
      set AF06M001.AFLSPSIN[AFWIXM] cursor, bold; /* highlight*/
      AF06M001.XXXMODID = "520"; /* process number*/
      converseLib.validationFailed(104); /* error already an active*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
  if (AF06M001.AFLSPSIN[AFWIXM] == "U") /* changed to undelete*/
    ;
    if (AF06W01.AFLSPSIN[AFWIXM] != "P" /* originally purge*/
     && AF06W01.AFLSPSIN[AFWIXM] != "D") /* originally delete*/
      set AF06M001.AFLSPSIN[AFWIXM] cursor, bold; /* highlight*/
      AF06M001.XXXMODID = "520"; /* process number*/
      converseLib.validationFailed(105); /* err cant undelete this status*/
      return; /* return to calling process*/
    else
      AFLREC.XSECD = AF06M001.XSECD[AFWIXM]; /* season code*/
      AFLREC.XSNYR = AF06M001.XSNYR[AFWIXM]; /* season year*/
      AFLREC.AFNEVNCD = AF06M001.AFNEVNCD[AFWIXM]; /* event code*/
      AFLREC.AFLSPSIN = "A"; /* active status*/
      AF06521(); /* fetch unique DACAST.VSNPIN01*/
      ;
      if (SQLCA.VAGen_SQLCODE != 100) /* row was found*/
        set AF06M001.AFLSPSIN[AFWIXM] cursor, bold; /* highlight*/
        AF06M001.XXXMODID = "520"; /* process number*/
        converseLib.validationFailed(104); /* error already an active*/
        return; /* return to calling process*/
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF06520

// Fetch unique DACAST.VSNPIN01
Function AF06521()
   /* ===================================**/
   /* Select unique   DACAST.VSNPIN01  **/
   /* ===================================**/
  ;
  try
    call "IO5980" ("SE", SQLCA, AFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select exist (s2?)*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF06M001.XXXMODID = "521 "; /* Process number*/
  TA1REC.TA1PGMNM = "AF06521"; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE SNAP";
  TA1REC.TA1MAP = "AF06M001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSNPIN01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF06521

// Process valid request
Function AF06600()
  if (converseVar.eventKey is pf7 /* scroll up*/
   || converseVar.eventKey is pf8) /* scroll down*/
    AF06610(); /* process scroll request*/
    return; /* return to calling process*/
  else
    if (converseVar.eventKey is pf5) /* submit snapshot create*/
      AF06620(); /* process snapshot submit*/
      return; /* return to calling process*/
    end
  end
   /* its gotta be enter which means this is the update pass*/
  ;
  XX0XS01(); /* get date and time*/
  AFWREC.AFWIXM = 1; /* first screen line*/
  ;
  while (AFWREC.AFWIXM <= AF06W00.AF06WMSL) /* for each screen line*/
    ;
    if (AF06M001.AFLSPSIN[AFWIXM] != AF06W01.AFLSPSIN[AFWIXM] /* some*/
     || AF06M001.AFNEVNCD[AFWIXM] != AF06W01.AFNEVNCD[AFWIXM] /* data*/
     || AF06M001.XSECD[AFWIXM] != AF06W01.XSECD[AFWIXM]       /* on the*/
     || AF06M001.XSNYR[AFWIXM] != AF06W01.XSNYR[AFWIXM]       /* screen*/
     || AF06M001.AFLSNPDT[AFWIXM] != AF06W01.AFLSNPDT[AFWIXM] /* was*/
     || AF06M001.AFLSNCMT[AFWIXM] != AF06W01.AFLSNCMT[AFWIXM]) /* changed*/
      AF06630(); /* process update*/
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next screen line*/
  end
  ;
  ;
  ;
  ;
end // end AF06600

// Process scroll request
Function AF06610()
  AF06W00.AF06WFMS = "Y"; /* format map*/
  ;
  if (converseVar.eventKey is pf7) /* scroll up*/
    AFWREC.AFWTSP = AFWREC.AFWTSP - 1; /* make prev page current*/
  else /* onie thang left is scroll down*/
    AFWREC.AFWTSP = AFWREC.AFWTSP + 1; /* make next page current*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
   /* mOVE AFWREC.AFWTSL TO AF06W01.AF06WTSL;  /* Temporary storage length*/
   /* mOVE 'AF06' TO TA5REC.TA5APPID;  /*       Application identification*/
   /* MOVE AFWREC.AFWTSP TO TA5REC.TA5TSQIX;/*  Page number*/
   /* MOVE 'R' TO TA5REC.TA5FNCCD;     /*       Function code*/
  ;
   /* CALL TA0050 AF06W02,TA5REC (NOMAPS;/* Temporary storage subroutine*/
  ;
   /* IF TA5REC.TA5RTNCD NE 0;         /*    Error was found*/
    /* MOVE 'APPL' TO TA1REC.TA1TYPE; /*    Type of error*/
    /* MOVE 'RETN' TO TA1REC.TA1FUNC; /*    Termination function*/
    /* MOVE '610 ' TO AF06M001.XXXMODID;/* Process number*/
    /* MOVE 'AF06610' TO TA1REC.TA1PGMNM;/* Error location*/
    /* MOVE 'READ PAGE FROM TEMPORARY STORAGE' TO TA1REC.TA1LOC;*/
    /* MOVE 'AF06M001' TO TA1REC.TA1MAP;/*  Map name*/
    /* MOVE TA5REC.TA5DATA TO SQLCA.SQLCAREC;/* Subroutine parameters*/
  ;
    /* CALL TA0020 TA1REC,SQLCA (NOMAPS;/*  Error diagnosis routine*/
  ;
    /* SET AF06M001 PAGE;             /* Clear screen before redisplay*/
    /* EZEFLO;                        /* Exit to redisplay map*/
   /* END;*/
  ;
  ;
  ;
end // end AF06610

// Submit snapshot create
Function AF06620()
  set TA6REC empty; /* initialise jcl table*/
  set AF06W04 empty;
  AF06621(); /* determine CICS region*/
  TA6REC.TA6INDEX = 1; /* jcl index*/
  ;
  if (TA3REC.TA3RGNID == "03") /* PRODUCTION region*/
    AFWREC.AFWIDX2 = 1; /* point to prod jcl*/
  else
    ;
    if ("/*EOF" in AF06T01.TARJCL)
      AFWREC.AFWIDX2 = sysVar.arrayIndex;
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Point to TEST JCL*/
      AF06W04.AF06WSLH = "//"; /* // to indicate jcl*/
      AF06W04.AF06WNTF = "NOTIFY="; /* notify jcl keyword*/
      AF06W04.TA3USRID = TA3REC.TA3USRID; /* logon id*/
    else
      AFWREC.AFWIDX2 = 1; /* Input table index*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (AFWREC.AFWIDX2 > 0) /* Until end of table*/
    ;
    if (AF06T01.TARTYPE[AFWIDX2] == "P") /* Parameters statement*/
      AF06T01.TARJCL[AFWIDX2] = "F"; /* full snapshot*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/
    ;
    if (AF06T01.TARTYPE[AFWIDX2] == "N") /* Notify statement*/
      TA6REC.TARJCL[TA6INDEX] = AF06W04.AF06WJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    else
      ;
      TA6REC.TARJCL[TA6INDEX] = AF06T01.TARJCL[AFWIDX2]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AF06T01.TARTYPE[AFWIDX2]; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (AF06T01.TARJCL[AFWIDX2] == "/*EOF") /* End of table*/
      AFWREC.AFWIDX2 = 0; /* Indicate end of table*/
    else
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Increment table index*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* completion message*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Submit the JCL*/
  end
  ;
  AF06M001.XXXMODID = "620 "; /* Process number*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    AF06W00.AF06WFMS = "Y"; /* format screen*/
    XP1REC.XP1MNO = 70; /* Indicate job was submitted*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    AF06W00.AF06WFMS = "Y"; /* format screen*/
    XP1REC.XP1MNO = 69; /* Indicate user cancelled*/
  else
    XP1REC.XP1MNO = 10; /* Indicate system error*/
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end AF06620

// Determine CICS region
Function AF06621()
   /* ------------------------------------------------------------*/
   /* FIND IN WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING*/
   /* ------------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ALLFLDS";
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    AF06M001.XXXMODID = "621"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "AF06621"; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    AF06M001.XXXMODID = "621"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "AF06621"; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
  ;
end // end AF06621

// Process update request
Function AF06630()
  if (AF06M001.AFLSPSIN[AFWIXM] == "N" /* request for new snapshot*/
   && AF06W01.AFLSPSIN[AFWIXM] != "N") /* this for change only comment*/
    AF06631(); /* process add*/
    XP1REC.XP1MNO = 1; /* info msg update ok*/
    return; /* return to calling process*/
  end
  ;
  if (AF06M001.AFLSPSIN[AFWIXM] == "D") /* delete a snapshot*/
    AF06632(); /* process delete*/
    XP1REC.XP1MNO = 1; /* info msg update ok*/
    return; /* return to calling process*/
  end
  ;
  if (AF06M001.AFLSPSIN[AFWIXM] == "R") /* replace an existing snapshot*/
    AF06633(); /* process replace*/
    XP1REC.XP1MNO = 1; /* info msg update ok*/
    return; /* return to calling process*/
  end
  ;
  if (AF06M001.AFLSNCMT[AFWIXM] == AF06W01.AFLSNCMT[AFWIXM] /* no cmt chg*/
   && AF06M001.AFLSPSIN[AFWIXM] != "U")                     /* undelete a deleted snapshot*/
    return; /* return to calling process*/
  end
  ;
  set AFLREC empty; /* clear record*/
  AFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  AFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  AFLREC.ZZZCHGCT = AF06W01.ZZZCHGCT[AFWIXM];
  AFLREC.AFNEVNCD = AF06M001.AFNEVNCD[AFWIXM];
  AFLREC.AFLSNPDT = AF06M001.AFLSNPDT[AFWIXM];
  AFLREC.XSECD = AF06M001.XSECD[AFWIXM];
  AFLREC.XSNYR = AF06M001.XSNYR[AFWIXM];
  AFLREC.AFLSNCMT = AF06M001.AFLSNCMT[AFWIXM];
  ;
  if (AF06M001.AFLSPSIN[AFWIXM] == "U") /* undelete a deleted snapshot*/
    AFLREC.AFLSPSIN = "A";
  else
    AFLREC.AFLSPSIN = AF06W01.AFLSPSIN[AFWIXM];
  end
  AF06S03(); /* update DACAST.VSNPIN01 row*/
  XP1REC.XP1MNO = 1; /* info msg update ok*/
  ;
  ;
  ;
end // end AF06630

// Process add request
Function AF06631()
  set AFLREC empty; /* clear record*/
  AFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  AFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  AFLREC.ZZZCHGCT = AF06W01.ZZZCHGCT[AFWIXM];
  AFLREC.AFLSPSIN = AF06M001.AFLSPSIN[AFWIXM];
  AFLREC.AFNEVNCD = AF06M001.AFNEVNCD[AFWIXM];
  AFLREC.AFLSNPDT = AF06M001.AFLSNPDT[AFWIXM];
  AFLREC.XSECD = AF06M001.XSECD[AFWIXM];
  AFLREC.XSNYR = AF06M001.XSNYR[AFWIXM];
  AFLREC.AFLSNCMT = AF06M001.AFLSNCMT[AFWIXM];
  AF06S01(); /* insert DACAST.VSNPIN01 row*/
  AFWREC.AFWSWR = "Y"; /* request data*/
  AF06W00.AF06WFMS = "Y"; /* format map*/
  ;
  ;
  ;
end // end AF06631

// Process delete request
Function AF06632()
  set AFLREC empty; /* clear out workrecord*/
  ;
  if (AF06W01.AFLSPSIN[AFWIXM] == "N") /* the existing is new*/
    AFLREC.AFNEVNCD = AF06W01.AFNEVNCD[AFWIXM]; /* event code*/
    AFLREC.AFLSNPDT = AF06W01.AFLSNPDT[AFWIXM]; /* snapshot date*/
    AF06S02(); /* delete row from DACAST.VSNPIN01*/
  else
    AFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    AFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    AFLREC.ZZZCHGCT = AF06W01.ZZZCHGCT[AFWIXM];
    AFLREC.AFLSPSIN = AF06M001.AFLSPSIN[AFWIXM];
    AFLREC.AFNEVNCD = AF06M001.AFNEVNCD[AFWIXM];
    AFLREC.AFLSNPDT = AF06M001.AFLSNPDT[AFWIXM];
    AFLREC.XSECD = AF06M001.XSECD[AFWIXM];
    AFLREC.XSNYR = AF06M001.XSNYR[AFWIXM];
    AFLREC.AFLSNCMT = AF06M001.AFLSNCMT[AFWIXM];
    AF06S03(); /* update DACAST.VSNPIN01 row*/
  end
  ;
  AFWREC.AFWSWR = "Y"; /* request data*/
  AF06W00.AF06WFMS = "Y"; /* format map*/
  ;
  ;
  ;
end // end AF06632

// Process replace request
Function AF06633()
  set AFLREC empty; /* clear out record*/
  AFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  AFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  AFLREC.ZZZCHGCT = AF06W01.ZZZCHGCT[AFWIXM];
  AFLREC.AFNEVNCD = AF06M001.AFNEVNCD[AFWIXM];
  AFLREC.AFLSNPDT = AF06M001.AFLSNPDT[AFWIXM];
  AFLREC.XSECD = AF06M001.XSECD[AFWIXM];
  AFLREC.XSNYR = AF06M001.XSNYR[AFWIXM];
  AFLREC.AFLSNCMT = AF06M001.AFLSNCMT[AFWIXM];
  ;
  if (AF06W01.AFLSPSIN[AFWIXM] == "A") /* the existing is active*/
    AFLREC.AFLSPSIN = "D"; /* snapshot status*/
    AF06S03(); /* update DACAST.VSNPIN01 row*/
    AFLREC.AFLSPSIN = "N"; /* snapshot status*/
    AFLREC.AFLSNPDT = 0; /* clear out snapshot taken date*/
    AF06S01(); /* insert new row*/
  else
    AFLREC.AFLSPSIN = "N"; /* snapshot status*/
    AF06S03(); /* update DACAST.VSNPIN01 row*/
  end
  AFWREC.AFWSWR = "Y"; /* request data*/
  AF06W00.AF06WFMS = "Y"; /* format map*/
  ;
  ;
  ;
end // end AF06633

// Insert DACAST.VSNPIN01 row
Function AF06S01()
   /* ===================================**/
   /* Insert row into DACAST.VSNPIN01  **/
   /* ===================================**/
  ;
  try
    call "IO5980" ("A ", SQLCA, AFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AFWREC.AFWSWR = "Y"; /* request data*/
    AF06W00.AF06WFMS = "Y"; /* format map*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* backout any changes*/
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF06M001.XXXMODID = "S01 "; /* Process number*/
  TA1REC.TA1PGMNM = "AF06S01"; /* Error location*/
  TA1REC.TA1LOC = "INSERT ROW TO SNAP";
  TA1REC.TA1MAP = "AF06M001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSNPIN01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF06S01

// Delete DACAST.VSNPIN01 row
Function AF06S02()
   /* ===================================**/
   /* Delete row from DACAST.VSNPIN01  **/
   /* ===================================**/
  ;
  try
    call "IO5980" ("D ", SQLCA, AFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      AFWREC.AFWSWR = "Y"; /* request data*/
      AF06W00.AF06WFMS = "Y"; /* format map*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any updates*/
      AF06M001.XXXMODID = "S02"; /* process number*/
      set AF06M001.AFLSPSIN[AFWIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(12); /* data already updated or something*/
      exit stack; /* return to display the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* backout any changes*/
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF06M001.XXXMODID = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = "AF06S02"; /* Error location*/
  TA1REC.TA1LOC = "DELETE ROW FROM SNAP";
  TA1REC.TA1MAP = "AF06M001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSNPIN01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF06S02

// Update DACAST.VSNPIN01 row
Function AF06S03()
   /* ===================================**/
   /* Update row in   DACAST.VSNPIN01  **/
   /* ===================================**/
  ;
  try
    call "IO5980" ("U ", SQLCA, AFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      AFWREC.AFWSWR = "Y"; /* request data*/
      AF06W00.AF06WFMS = "Y"; /* format map*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any updates*/
      AF06M001.XXXMODID = "S03"; /* process number*/
      set AF06M001.AFLSPSIN[AFWIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(12); /* data already updated or something*/
      exit stack; /* return to display the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* backout any changes*/
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF06M001.XXXMODID = "S03 "; /* Process number*/
  TA1REC.TA1PGMNM = "AF06S03"; /* Error location*/
  TA1REC.TA1LOC = "UPDATE ROW IN SNAP";
  TA1REC.TA1MAP = "AF06M001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSNPIN01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF06S03

//*** RECORD=AF06W00 ****
// *-----------------------------------------------------------
// * This record is used for miscellaneous data items needed
// * in AF06
// *-----------------------------------------------------------
// ***********************
Record AF06W00 type basicRecord
  10 AF06WFMS AF06WFMS ; 
  10 AF06WMSL AF06WMSL ; 
  10 AF06WDT AF06WDT ; 
    15 AF06WYR AF06WYR ; 
    15 * char(4) ; 
  10 AF06WCCY AF06WCCY ; 
  10 AF06WDCS AF06WDCS ; 
end // end AF06W00

//*** RECORD=AF06W01 ****
// *-----------------------------------------------------------
// *  This record is used to hold the data that will be dis-
// *  played on the screen of AF06
// *-----------------------------------------------------------
// ***********************
Record AF06W01 type basicRecord
  5 * char(774) ; 
    10 AF06WTSL AF06WTSL ; 
    10 AF06WGP1 AF06WGP1 [14] ; 
      15 AFLSPSIN AFLSPSIN ; 
      15 AFNEVNCD AFNEVNCD ; 
      15 AFNEDESC AFNEDESC ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 AFLSNPDT AFLSNPDT ; 
      15 AFLSNCMT AFLSNCMT ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end AF06W01

//*** RECORD=AF06W02 ****
// *-----------------------------------------------------------
// *  This record is used to hold a table of the event code
// *  and event description from DACAST.VEVENT01.  The entire
// *  DACAST.VEVENT01 table is read into this array
// *-----------------------------------------------------------
// ***********************
Record AF06W02 type basicRecord
  10 AFNEVNCD AFNEVNCD [24] ; 
  10 AFNEDESC AFNEDESC [24] ; 
end // end AF06W02

Record AF06W03 type basicRecord
  10 * char(3) ; 
end // end AF06W03

Record AF06W04 type basicRecord
  10 AF06WJCL AF06WJCL ; 
    15 AF06WSLH AF06WSLH ; 
    15 * char(13) ; 
    15 AF06WNTF AF06WNTF ; 
    15 TA3USRID TA3USRID ; 
    15 * char(50) ; 
end // end AF06W04

// Work current century, year
DataItem AF06WCCY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data changed switch
DataItem AF06WDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work current date
DataItem AF06WDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format map switch
DataItem AF06WFMS char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Group level
DataItem AF06WGP1 char(55)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem AF06WJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maximum screen lines
DataItem AF06WMSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// literal NOTIFY=
DataItem AF06WNTF char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// // to indicate jcl stmnt
DataItem AF06WSLH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage length
DataItem AF06WTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work current year
DataItem AF06WYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

