package af0s;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom3.XPAF001;
import corpcom3.XPTA0P;
import corpcom3.XSAFS01;
import corpcom4.XSPF4;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XGAABRV;
import corpx1.XGACD1;
import corpx1.XGACD2;
import corpx1.XGADESC;
import corpx1.XGATBL;
import corpx1.XGPCD;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx2.XPCCD;
import corpx2.XPCSDESC;
import corpx2.XPLCD;
import corpx2.XPLSDESC;
import corpx2.XPRCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA3USRID;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0S ****
// ************************************************************
// * CONTROL  DATE  USERID  COMMENTS                          *
// * ------- ------ ------  ----------------------------------*
// * AF9999  090393 Tdodso  4.1 conversion                    *
// * y2kfix  121797 pharwo  regenerate for xx0xs01, xp1rec    *
// *                                                          *
// ************************************************************
// *********************
Program AF0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0SW00 AF0SW00; // record
  AF0SW01 AF0SW01; // record
  AF0SW02 AF0SW02; // record
  AF0SW03 AF0SW03; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VAFOVR01 VAFOVR01; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AF0ST01 {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use AF0SM.AF0SM001,  // forms
      AF0SM.AF0SM002,
      AF0SM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
    set AF0SW00 empty;
    set AF0SW01 empty;
    set AFWREC empty;
    set VAFOVR01 empty;
    set ERRSQLCA empty;
    set SQLCA empty;
    set TA1REC empty;
    set TA5REC empty;
    set TAEREC empty;
    set XX0XW01 empty;
    set AF0SM001 initial;
    set AF0SM002 initial;
    AFWREC.AFWMAP = "1"; /* display map 1 first*/
    AFWREC.AFWSWR = "Y"; /* request data to display*/
    AF0SW00.AF0SW-FORMAT-MAP = "Y";
    AF0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date to map*/
    AF0SM002.XXXCURDT = VGVar.currentShortGregorianDate; /* current date to map*/
    AFWREC.AFWNMO = 14; /* max lines on screen*/
    AFWREC.AFWTSL = 819; /* temp storage length*/
    AFWREC.AFWTSP = 1; /* start temp storage page*/
    goto AF0S-0001; /* converse main process*/
    AF0S-0001: AF0S-0001();
    goto AF0S-0001;
  end // end main
end // end AF0S

// determine which map to process
Function AF0S-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.AFWMAP == "1") /* Map 1 was requested*/
    AFWREC.XXXMAPNM = "AF0SM001"; /* Move map name to AFWREC*/
    AF0S-1000(); /* process map 1*/
  else

    if (AFWREC.AFWMAP == "2") /* Map 2 was requested*/
      AFWREC.XXXMAPNM = "AF0SM002"; /* Move map name to AFWREC*/
      AF0S-2000(); /* process map 2*/
    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      AFWREC.AFWPRCSN = "0001 "; /* Process number*/
      TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = AFWREC.AFWMAP; /* Map name*/
      SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
      XSPF4(); /* Exit to Master Menu*/
    end

  end


end // end AF0S-0001

// map 1 (inq/maint) main process
Function AF0S-1000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* PROCESSING UNDER ERROR CONDITIONS.*/
   /* ------------------------------------------------------------*/

  AF0S-1100(); /* Obtain the data to display*/

  AF0S-1200(); /* Format and display the map*/

  AF0S-1300(); /* Check attention identifier*/

  AF0S-1400(); /* Reset fields to normal intensity*/

  AF0S-1500(); /* Verify the entered data*/

  AF0S-1600(); /* Process valid input request*/


end // end AF0S-1000

// obtain data to display
Function AF0S-1100()
  if (AFWREC.AFWSWR != "Y") /* data not requested*/
    return; /* return to calling process*/
  end

  AFWREC.AFWSWR = "N"; /* dont display data*/
  AFWREC.AFWIDX1 = 0; /* no rows retrieved*/
  set AF0SW01 empty; /* initialise display ws*/
  AF0S-1110(); /* select set DACAST.VAFOVR01*/
  AF0S-1120(); /* fetch database row*/
  AF0S-1150(); /* purge temp storage*/

  while (SQLCA.VAGen_SQLCODE != 100) /* for each database row*/
    AF0S-1130(); /* save data in working storage*/
    AF0S-1120(); /* fetch database row*/
  end

  AF0S-1140(); /* close cursor DACAST.VAFOVR01*/

  if (AFWREC.AFWIDX1 > 0) /* partial screen formatted*/
    AF0S-1131(); /* add record to temp storage*/
  end /* end*/
                                  /* blank line*/
  if (AFWREC.AFWIDX1 == 0 /* no data to display*/
   && TA5REC.TA5TSQIX == 1) /* no temp storage pages*/
    AF0SM001.XXXMODID = "1000"; /* process number*/
    converseLib.validationFailed(15); /* msg no data to display*/
  end /* end*/
                                  /* blank line*/


end // end AF0S-1100

// select set DACAST.VAFOVR01
Function AF0S-1110()
  try
    call "IO6370" ("S1", SQLCA, VAFOVR01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen for redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF0SM001.XXXMODID = "1110"; /* Process number*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AF0SM001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFOVR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AFWREC.AFWSWR = "Y"; /* Request obtain data*/
  exit stack; /* Return to flow*/



end // end AF0S-1110

// fetch next row DACAST.VAFOVR01
Function AF0S-1120()
  try
    call "IO6370" ("N1", SQLCA, VAFOVR01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* no sql errors*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* return to calling process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AF0SM001.XXXMODID = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = "AF0S1120"; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AF0SM001"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFOVR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AFWREC.AFWSWR = "N"; /* request data*/

  exit stack; /* Return to flow*/

end // end AF0S-1120

// save data in working storage
Function AF0S-1130()
  AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
  AF0SW01.XPRCD[AFWIDX1] = VAFOVR01.XPRCD;
  AF0SW01.XPLCD[AFWIDX1] = VAFOVR01.XPLCD;
  AF0SW01.XPCCD[AFWIDX1] = VAFOVR01.XPCCD;
  AF0SW01.XGACD1[AFWIDX1] = VAFOVR01.XGACD1;
  AF0SW01.XGACD2[AFWIDX1] = VAFOVR01.XGACD2;
  if (VAFOVR01.AF-XGA-DELT-FL == "Y") /* set up delete flag on screen*/
    AF0SW01.AF-XGA-DELT-FL[AFWIDX1] = "D";
  else
    AF0SW01.AF-XGA-DELT-FL[AFWIDX1] = " ";
  end
  AF0SW01.ZZZCHGCT[AFWIDX1] = VAFOVR01.ZZZCHGCT;
  AF0SW00.XGPCD = "03"; /* apparel gpc code*/
  AF0SW00.AF0SW-CODE = VAFOVR01.XPLCD; /* product line*/

  if (AF0SW00.AF0SW-KEY in XPLTBL.XPLKEY)
    AF0SW01.XPLSDESC[AFWIDX1] = XPLTBL.XPLSDESC[sysVar.arrayIndex];
  else
    AF0SW01.XPLSDESC[AFWIDX1] = "NO DESC";
  end
  AF0SW00.XGPCD = "03"; /* apparel gpc code*/
  AF0SW00.AF0SW-CODE = VAFOVR01.XPCCD; /* product category*/

  if (AF0SW00.AF0SW-KEY in XPCTBL.XPCKEY)
    AF0SW01.XPCSDESC[AFWIDX1] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
  else
    AF0SW01.XPCSDESC[AFWIDX1] = "NO DESC";
  end
  AF0SW00.XGPCD = "03"; /* apparel gpc code*/
  AF0SW00.AF0SW-CODE = VAFOVR01.XGACD2; /* 'to' gender/age code*/

  if (AF0SW00.AF0SW-KEY in XGATBL.XGAKEY)
    AF0SW01.XGADESC[AFWIDX1] = XGATBL.XGADESC[sysVar.arrayIndex];
  else
    AF0SW01.XGADESC[AFWIDX1] = "NO DESC";
  end

  AF0SW00.XGPCD = "03"; /* apparel gpc code*/
  AF0SW00.AF0SW-CODE = VAFOVR01.XGACD1; /* 'from' gender/age code*/

  if (AF0SW00.AF0SW-KEY in XGATBL.XGAKEY)
    AF0SW01.XGAABRV[AFWIDX1] = XGATBL.XGAABRV[sysVar.arrayIndex];
  else
    AF0SW01.XGAABRV[AFWIDX1] = "NO DSC";
  end

  if (AFWREC.AFWIDX1 == 14) /* page full*/
    AF0S-1131(); /* add to temp-storage*/
    AFWREC.AFWIDX1 = 0; /* reset screen index*/
  end



end // end AF0S-1130

// add record to temp storage
Function AF0S-1131()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  AF0SW01.AF-TSQ-LENGTH = AFWREC.AFWTSL; /* temporary storage length*/
  TA5REC.TA5APPID = "AF0S"; /* Application id*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (AF0SW01, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AF0SM001.XXXMODID = "153"; /* Process number*/
    TA1REC.TA1PGMNM = "AF0S153"; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AF0SM001"; /* MAP NAME*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    return; /* Return to previous process*/
  end

  AFWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
  set AF0SW01 empty; /* Clear temporary storage record*/



end // end AF0S-1131

// close cursor DACAST.VAFOVR01
Function AF0S-1140()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6370" ("C1", SQLCA, VAFOVR01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AF0SM001.XXXMODID = "1140"; /* Process number*/
  TA1REC.TA1PGMNM = "AF0S-1140"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AF0SM001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFOVR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/

end // end AF0S-1140

// purge temp storage
Function AF0S-1150()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "AF0S"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (AF0SW01, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    AF0SM001.XXXMODID = "1150"; /* Process number*/
    TA1REC.TA1PGMNM = "AF0S1150"; /* Error location*/
    TA1REC.TA1LOC = "PURGE TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AF0SM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  end

  AFWREC.AFWTSP = 1; /* Reset current page number*/
  AFWREC.TA5TSQIX = 0; /* Reset highest page number*/



end // end AF0S-1150

// format and converse map 1
Function AF0S-1200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AF0SM001 alarm; /* Indicate sound alarm*/
  end

  AF0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* date*/

  if (COMMAREA.CACHGFL != "Y") /* no change authority*/
    AF0S-1220(); /* protect enterable fields*/
  end

  if (AF0SW00.AF0SW-FORMAT-MAP == "Y") /* map to be formatted*/
    set AF0SM001 initial;
    AF0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* date*/

    if (COMMAREA.CACHGFL != "Y") /* no change authority*/
      AF0S-1220(); /* protect enterable fields*/
    end

    AF0S-1230(); /* get tsq record*/
    AFWREC.AFWIXM = 1; /* first screen line*/

    while (AFWREC.AFWIXM <= AFWREC.AFWNMO) /* for each screen line*/
      AF0S-1210(); /* format detail line*/
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    end

  end

  AFWREC.AFWIXM = AFWREC.AFWNMO; /* screen index to max*/

  while (AFWREC.AFWIXM >= 1 /* for each screen line*/
   && AF0SM001.XPRCD[AFWIXM] == " ") /* with no entry*/
    set AF0SM001.XPRCD[AFWIXM] skip, invisible;
    set AF0SM001.XPLCD[AFWIXM] skip, invisible;
    set AF0SM001.XPCCD[AFWIXM] skip, invisible;
    set AF0SM001.XGACD2[AFWIXM] skip, invisible;
    set AF0SM001.XGACD1[AFWIXM] skip, invisible;
    set AF0SM001.XPLSDESC[AFWIXM] skip, invisible;
    set AF0SM001.XPCSDESC[AFWIXM] skip, invisible;
    set AF0SM001.XGADESC[AFWIXM] skip, invisible;
    set AF0SM001.XGAABRV[AFWIXM] skip, invisible;
    set AF0SM001.AF0SW-DELETE-IND[AFWIXM] skip, invisible;
    AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* previous line*/
  end

  AF0SW00.AF0SW-FORMAT-MAP = "N"; /* dont format map*/
  converseLib.clearScreen();

  if (AFWREC.AFWIDX1 > 0 /* data retrieved*/
   && COMMAREA.CACHGFL == "Y") /* change authority*/
    set AF0SM001.XGACD2[1] cursor; /* place cursor*/
  end

  converse AF0SM001 ;
end // end AF0S-1200

// format map 1 detail lines
Function AF0S-1210()
  AF0SM001.XPRCD[AFWIXM] = AF0SW01.XPRCD[AFWIXM];
  AF0SM001.XPLCD[AFWIXM] = AF0SW01.XPLCD[AFWIXM];
  AF0SM001.XPCCD[AFWIXM] = AF0SW01.XPCCD[AFWIXM];
  AF0SM001.XGACD2[AFWIXM] = AF0SW01.XGACD2[AFWIXM];
  AF0SM001.XGACD1[AFWIXM] = AF0SW01.XGACD1[AFWIXM];
  AF0SM001.XPLSDESC[AFWIXM] = AF0SW01.XPLSDESC[AFWIXM];
  AF0SM001.XPCSDESC[AFWIXM] = AF0SW01.XPCSDESC[AFWIXM];
  AF0SM001.XGADESC[AFWIXM] = AF0SW01.XGADESC[AFWIXM];
  AF0SM001.XGAABRV[AFWIXM] = AF0SW01.XGAABRV[AFWIXM];
  AF0SM001.AF0SW-DELETE-IND[AFWIXM] = AF0SW01.AF-XGA-DELT-FL[AFWIXM];

end // end AF0S-1210

// protect enterable fields
Function AF0S-1220()
  AFWREC.AFWIXM = 1; /* first screen line*/

  while (AFWREC.AFWIXM <= AFWREC.AFWNMO) /* for each screen line*/
    set AF0SM001.XGACD2[AFWIXM] skip;
    set AF0SM001.AF0SW-DELETE-IND[AFWIXM] skip, invisible;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next screen line*/
  end



end // end AF0S-1220

// retrieve page from tsq
Function AF0S-1230()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  set AF0SW01 empty; /* initialise tsq work area*/
  AF0SW01.AF-TSQ-LENGTH = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = "AF0S"; /* Application identification*/
  TA5REC.TA5TSQIX = AFWREC.AFWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (AF0SW01, TA5REC) {isNoRefresh = yes}; /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0 /* no errors*/
   || TA5REC.TA5RTNCD == 1 /* both of these will*/
   || TA5REC.TA5RTNCD == 7) /* indicate no more pages*/
   /* next sentence;*/
  else
    if (TA5REC.TA5RTNCD == 4) /* no queue (no data to display)*/
      AF0SW00.AF0SW-FORMAT-MAP = "N"; /* dont format map*/
      AFWREC.AFWSWR = "N"; /* dont request data*/
      converseLib.validationFailed(15); /* Indicate no data to display*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      exit stack; /* Exit to redisplay map*/
    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      AF0SM001.XXXMODID = "1230 "; /* Process number*/
      TA1REC.TA1PGMNM = "AF0S1230"; /* Error location*/
      TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
      TA1REC.TA1MAP = "AF0SM001"; /* Map name*/
      SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.validationFailed(15); /* Indicate no data to display*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      exit stack; /* Exit to redisplay map*/
    end

  end



end // end AF0S-1230

// check map 1 pf keys
Function AF0S-1300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AF0SM001 initial; /* Clear the map fields*/
    AF0SW00.AF0SW-FORMAT-MAP = "Y"; /* redisplay page data from WS*/
    exit stack; /* Exit to redisplay map*/
  end

  if (AF0SM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      AF0S-1310(); /* submit background update of vafsty*/
      COMMAREA.CATOAP = AF0SM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0SM001.CAITEM; /* Application data*/
      XSAFS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set AF0SM001.CATOAP cursor, modified, bold; /* Highlight*/
    AF0SM001.XXXMODID = "1300"; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    AF0S-1310(); /* submit background update of vafsty*/
    XSAFS01(); /* Exit to another application*/
    AF0SM001.XXXMODID = "1300"; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf13)

    if (COMMAREA.CAADDFL != "Y") /* no add authority*/
      AF0SM001.XXXMODID = "1300"; /* process number*/
      converseLib.validationFailed(6); /* cant accesss requested appl*/
      exit stack; /* exit to redisplay the map*/
    else /* has add authority*/
      AFWREC.AFWMAP = 2; /* display add map*/
      exit stack; /* exit to display the map*/
    end

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf13  /* add screen*/
   && converseVar.eventKey not pf7   /* scroll back*/
   && converseVar.eventKey not pf8)  /* scroll forward*/
    AF0SM001.XXXMODID = "1300"; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/
  end


end // end AF0S-1300

// Format batch JCL
Function AF0S-1310()
  if (AF0SW00.AF0SW-DATA-CHANGED-SW != "Y") /* if data was not changed*/
    return; /* don't submit update*/
  end
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/
  AF0S-1312(); /* determine CICS region*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

  if (TA3REC.TA3RGNID == "03") /* production region*/
    AF0SW01.AF0S-IDX1 = 1;
  else
    if ("/*EOF" in AF0ST01.TARJCL)
      AF0SW01.AF0S-IDX1 = sysVar.arrayIndex;
      AF0SW01.AF0S-IDX1 = AF0SW01.AF0S-IDX1 + 1;
    else
      AF0SW01.AF0S-IDX1 = 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (AF0SW01.AF0S-IDX1 > 0) /* Until end of table*/

    if (AF0ST01.TARTYPE[AF0S-IDX1] == "N") /* notify statement*/
      set AF0SW03 empty;
      AF0SW03.AF0SWSLH = "//";
      AF0SW03.AF0SWNFY = "NOTIFY=";
      AF0SW03.TA3USRID = TA3REC.TA3USRID;
      AF0ST01.TARJCL[AF0S-IDX1] = AF0SW03.AF0SWJCL;
      AF0ST01.TARTYPE[AF0S-IDX1] = " ";
    end

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = AF0ST01.TARJCL[AF0S-IDX1]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AF0ST01.TARTYPE[AF0S-IDX1]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0ST01.TARJCL[AF0S-IDX1] == "/*EOF") /* End of table*/
      AF0SW01.AF0S-IDX1 = 0; /* Indicate end of table*/
    else
      AF0SW01.AF0S-IDX1 = AF0SW01.AF0S-IDX1 + 1; /* Increment table index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  AF0S-1311(); /* Submit the JCL*/



end // end AF0S-1310

// Submit Job/Select Printer
Function AF0S-1311()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* send message to terminal*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    return; /* Return to performing process*/

  end

  exit stack; /* Exit to display map*/

end // end AF0S-1311

// Determine CICS region
Function AF0S-1312()
   /* ------------------------------------------------------------*/
   /* FIND IN WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ALLFLDS";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    AF0SM001.XXXMODID = "1312"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "AF0S1312"; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    AF0SM001.XXXMODID = "1312"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "AF0S1312"; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end



end // end AF0S-1312

// reset map 1 highlighted fields
Function AF0S-1400()
  AFWREC.AFWIXM = 1; /* first screen line*/

  while (AFWREC.AFWIXM <= AFWREC.AFWNMO) /* for each line*/
    set AF0SM001.XGACD2[AFWIXM] initialAttributes;
    set AF0SM001.AF0SW-DELETE-IND[AFWIXM] initialAttributes;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next line*/
  end



end // end AF0S-1400

// edit map 1 input data
Function AF0S-1500()
  if (converseVar.eventKey is pf7) /* scroll up*/

    if (AFWREC.AFWTSP == 1) /* already on first page*/
      converseLib.validationFailed(2); /* error no more backward*/
      AF0SM001.XXXMODID = "1500"; /* process number*/
      exit stack; /* return to display the map*/
    else /* no error*/
      return; /* return to calling process*/
    end

  end
  if (converseVar.eventKey is pf8) /* scroll down*/

    if (AFWREC.AFWTSP == AFWREC.TA5TSQIX) /* already on last page*/
      converseLib.validationFailed(3); /* error no more forward*/
      AF0SM001.XXXMODID = "1500"; /* process number*/
      exit stack; /* return to display the map*/
    else /* no error*/
      return; /* return to calling process*/
    end

  end

  AF0SW00.AF0SW-DATA-CHANGED-SW = "N"; /* data not changed*/
  AF0S-1510(); /* check if data changed*/

  if (AF0SW00.AF0SW-DATA-CHANGED-SW == "Y") /* data changed*/
    AFWREC.AFWIXM = AFWREC.AFWNMO; /* last screen line*/

    while (AFWREC.AFWIXM >= 1) /* for each screen line*/
      AF0S-1520(); /* edit g/a code*/
      AF0S-1530(); /* edit delete ind*/
      AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* previous line*/
    end

  end

  if (converseVar.validationMsgNum != 0) /* errors found*/
    exit stack; /* return to display the map*/
  end



end // end AF0S-1500

// check if data changed
Function AF0S-1510()
  AFWREC.AFWIXM = 1; /* first screen line*/

  while (AFWREC.AFWIXM <= AFWREC.AFWNMO /* for each line*/
   && AF0SW00.AF0SW-DATA-CHANGED-SW == "N") /* data not changed*/

    if (AF0SM001.AF0SW-DELETE-IND[AFWIXM] == "D")
      AF0SW00.AF0SW-DATA-CHANGED-SW = "Y";
    end

    if (AF0SM001.XGACD2[AFWIXM] != AF0SW01.XGACD2[AFWIXM])
      AF0SW00.AF0SW-DATA-CHANGED-SW = "Y";
    end

    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
  end



end // end AF0S-1510

// edit gender/age code
Function AF0S-1520()
  if (AF0SM001.XGACD2[AFWIXM] == " ") /* Map fld eq spaces*/
    return; /* Return to calling process*/
  end

  AF0SW00.AF0SW-CODE = AF0SM001.XGACD2[AFWIXM]; /* build xgatbl key*/
  AF0SW00.XGPCD = "03"; /* apparel gpc code*/

  if (AF0SW00.AF0SW-KEY in XGATBL.XGAKEY
   && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
    return; /* Exit to calling process*/
  end

  AF0SM001.XXXMODID = "1520"; /* Process number*/
  set AF0SM001.XGACD2[AFWIXM] cursor, bold; /* highlight field*/
  converseLib.validationFailed(36); /* indicate error message*/



end // end AF0S-1520

// edit delete indicator
Function AF0S-1530()
  if (AF0SM001.AF0SW-DELETE-IND[AFWIXM] != " "
   && AF0SM001.AF0SW-DELETE-IND[AFWIXM] != "D")
    set AF0SM001.AF0SW-DELETE-IND[AFWIXM] cursor, bold;
    AF0SM001.XXXMODID = "1530";
    converseLib.validationFailed(19);
  end



end // end AF0S-1530

// process map 1 valid input
Function AF0S-1600()
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    AF0S-1610();
    return;
  end

  AFWREC.AFWIXM = 1; /* first screen line*/

  while (AFWREC.AFWIXM <= AFWREC.AFWNMO) /* for each line*/

    if (AF0SM001.AF0SW-DELETE-IND[AFWIXM] == "D" /* line to be deleted*/
     || AF0SM001.XGACD2[AFWIXM] != AF0SW01.XGACD2[AFWIXM]) /* data changed*/
      AF0S-1620(); /* change row*/

    end

    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next line*/
  end

  if (converseVar.validationMsgNum == 0) /* everything ok*/

    if (COMMAREA.CACHGFL == "Y") /* change authority*/
      converseLib.validationFailed(13); /* database update ok*/
    end

    AF0SW00.AF0SW-FORMAT-MAP = "Y";
    AFWREC.AFWSWR = "Y"; /* request data*/
  end



end // end AF0S-1600

// process scroll request
Function AF0S-1610()
  AF0SW00.AF0SW-FORMAT-MAP = "Y"; /* format map*/

  if (converseVar.eventKey is pf7) /* scroll up*/
    AFWREC.AFWTSP = AFWREC.AFWTSP - 1; /* make prev page current*/
  else /* onie thang left is scroll down*/
    AFWREC.AFWTSP = AFWREC.AFWTSP + 1; /* make next page current*/
  end



end // end AF0S-1610

// change DACAST.VAFOVR01 row
Function AF0S-1620()
  XX0XS01();
  set VAFOVR01 empty;
  VAFOVR01.XPRCD = AF0SW01.XPRCD[AFWIXM];
  VAFOVR01.XPLCD = AF0SW01.XPLCD[AFWIXM];
  VAFOVR01.XPCCD = AF0SW01.XPCCD[AFWIXM];
  VAFOVR01.XGACD1 = AF0SW01.XGACD1[AFWIXM]; /* 'from' g/a*/
  VAFOVR01.XGACD2 = AF0SM001.XGACD2[AFWIXM]; /* 'to' g/a*/
  if (AF0SM001.AF0SW-DELETE-IND[AFWIXM] == "D") /* set up delete flag*/
    VAFOVR01.AF-XGA-DELT-FL = "Y";
  else
    VAFOVR01.AF-XGA-DELT-FL = "N";
  end
  VAFOVR01.ZZZCHGCT = AF0SW01.ZZZCHGCT[AFWIXM]; /* Change count*/
  VAFOVR01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VAFOVR01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO6370" ("U ", SQLCA, VAFOVR01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AF0SW00.AF0SW-FORMAT-MAP = "Y";
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AF0SM001.XXXMODID = "1620"; /* Process number*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any changes*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "1620"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE ROW IN TABLE    ";
  TA1REC.TA1MAP = "AF0SM001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFOVR01"; /* Table view name*/
  move VAFOVR01 to AF0SW02 withV60Compat; /* work record*/
  TA1REC.TA1TBLKE = AF0SW02.AF0SW-VAFOVR01-KEY; /* Table view key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0SM001.XXXMODID = "1620"; /* Process name*/
  exit stack; /* Exit to redisplay map*/



end // end AF0S-1620

// map 2 (add) main process
Function AF0S-2000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* PROCESSING UNDER ERROR CONDITIONS.*/
   /* ------------------------------------------------------------*/

  AF0S-2200(); /* Format and display the map*/

  AF0S-2300(); /* Check attention identifier*/

  AF0S-2400(); /* Reset fields to normal intensity*/

  AF0S-2500(); /* Verify the entered data*/

  AF0S-2600(); /* Process valid input request*/


end // end AF0S-2000

// format and converse map 2
Function AF0S-2200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AF0SM002 alarm; /* Indicate sound alarm*/
  end

  if (AF0SW00.AF0SW-FORMAT-MAP == "Y")
    set AF0SM002 empty;
  end

  AF0SM002.XXXCURDT = VGVar.currentShortGregorianDate; /* date*/

  AF0SW00.AF0SW-FORMAT-MAP = "N"; /* dont format map*/
  converseLib.clearScreen();
  
  converse AF0SM002 ;
end // end AF0S-2200

// check map 2 pf keys
Function AF0S-2300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AF0SM002 initial; /* Clear the map fields*/
    AF0SW00.AF0SW-FORMAT-MAP = "Y"; /* redisplay page data from WS*/
    exit stack; /* Exit to redisplay map*/
  end

  if (AF0SM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      AF0S-1310(); /* submit background afsty update*/
      COMMAREA.CATOAP = AF0SM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0SM002.CAITEM; /* Application data*/
      XSAFS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set AF0SM002.CATOAP cursor, modified, bold; /* Highlight*/
    AF0SM002.XXXMODID = "2300"; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    AF0S-1310(); /* submit background afsty update*/
    XSAFS01(); /* Exit to another application*/
    AF0SM002.XXXMODID = "2300"; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf13) /* transfer to inq/chg*/
    AFWREC.AFWMAP = "1"; /* change/inq map*/
    AF0SW00.AF0SW-FORMAT-MAP = "Y";
    AFWREC.AFWSWR = "Y"; /* request data*/
    exit stack; /* continue*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf13) /* maint/inq screen*/
    AF0SM002.XXXMODID = "2300"; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/
  end



end // end AF0S-2300

// reset map 2 highlighted fields
Function AF0S-2400()
  AFWREC.AFWIXM = 1; /* first screen line*/

  while (AFWREC.AFWIXM <= AFWREC.AFWNMO) /* for each line*/
    set AF0SM002.XPRCD[AFWIXM] initialAttributes;
    set AF0SM002.XPLCD[AFWIXM] initialAttributes;
    set AF0SM002.XPCCD[AFWIXM] initialAttributes;
    set AF0SM002.XGACD1[AFWIXM] initialAttributes;
    set AF0SM002.XGACD2[AFWIXM] initialAttributes;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next line*/
  end



end // end AF0S-2400

// edit map 2 input data
Function AF0S-2500()
  AF0SW00.AF0SW-DATA-CHANGED-SW = "N"; /* data not added*/
  AF0S-2510(); /* check if data added*/

  if (AF0SW00.AF0SW-DATA-CHANGED-SW == "Y") /* data added*/
    AFWREC.AFWIXM = AFWREC.AFWNMO; /* last screen line*/

    while (AFWREC.AFWIXM >= 1) /* for each screen line*/
      AF0S-2520(); /* edit 'to' g/a code*/
      AF0S-2530(); /* edit cat code*/
      AF0S-2540(); /* edit line code*/
      AF0S-2550(); /* edit type code*/
      AF0S-2560(); /* edit 'from' g/a code*/
      AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* previous line*/
    end

  end

  if (converseVar.validationMsgNum != 0) /* errors found*/
    exit stack; /* return to display the map*/
  end



end // end AF0S-2500

// check if data added
Function AF0S-2510()
  AFWREC.AFWIXM = 1; /* first screen line*/

  while (AFWREC.AFWIXM <= AFWREC.AFWNMO /* for each line*/
   && AF0SW00.AF0SW-DATA-CHANGED-SW == "N") /* data not added*/

    if (AF0SM002.XGACD2[AFWIXM] != " "
     || AF0SM002.XPCCD[AFWIXM] != " "
     || AF0SM002.XPLCD[AFWIXM] != " "
     || AF0SM002.XPRCD[AFWIXM] != " ")
      AF0SW00.AF0SW-DATA-CHANGED-SW = "Y";
    end

    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
  end



end // end AF0S-2510

// edit 'to' g/a code map 2
Function AF0S-2520()
  if (AF0SM002.XGACD2[AFWIXM] == " ") /* Map fld eq spaces*/
    return; /* Return to calling process*/
  end

  AF0SW00.AF0SW-CODE = AF0SM002.XGACD2[AFWIXM]; /* build xgatbl key*/
  AF0SW00.XGPCD = "03"; /* apparel gpc code*/

  if (AF0SW00.AF0SW-KEY in XGATBL.XGAKEY
   && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
    return; /* Exit to calling process*/
  end

  AF0SM002.XXXMODID = "2520"; /* Process number*/
  set AF0SM002.XGACD2[AFWIXM] cursor, bold; /* highlight field*/
  converseLib.validationFailed(36); /* indicate error message*/



end // end AF0S-2520

// edit category code
Function AF0S-2530()
  if (AF0SM002.XPCCD[AFWIXM] == " ") /* Map fld eq spaces*/
    return; /* Return to calling process*/
  end

  AF0SW00.AF0SW-CODE = AF0SM002.XPCCD[AFWIXM]; /* build xpctbl key*/
  AF0SW00.XGPCD = "03"; /* apparel gpc code*/

  if (AF0SW00.AF0SW-KEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
    return; /* Exit to calling process*/
  end

  AF0SM002.XXXMODID = "2530"; /* Process number*/
  set AF0SM002.XPCCD[AFWIXM] cursor, bold; /* highlight field*/
  converseLib.validationFailed(35); /* indicate error message*/



end // end AF0S-2530

// edit product line code
Function AF0S-2540()
  if (AF0SM002.XPLCD[AFWIXM] == " ") /* Map fld eq spaces*/
    return; /* Return to calling process*/
  end

  AF0SW00.AF0SW-CODE = AF0SM002.XPLCD[AFWIXM]; /* build xpltbl key*/
  AF0SW00.XGPCD = "03"; /* apparel gpc code*/

  if (AF0SW00.AF0SW-KEY in XPLTBL.XPLKEY
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
    return; /* Exit to calling process*/
  end

  AF0SM002.XXXMODID = "2540"; /* Process number*/
  set AF0SM002.XPLCD[AFWIXM] cursor, bold; /* highlight field*/
  converseLib.validationFailed(81); /* indicate error message*/



end // end AF0S-2540

// edit product type code
Function AF0S-2550()
  if (AF0SM002.XPRCD[AFWIXM] == " ") /* Map fld eq spaces*/
    return; /* Return to calling process*/
  end

  if (AF0SM002.XPRCD in XPRTBL.XPRCD
   && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
    return; /* Exit to calling process*/
  end

  AF0SM002.XXXMODID = "2550"; /* Process number*/
  set AF0SM002.XPRCD[AFWIXM] cursor, bold; /* highlight field*/
  converseLib.validationFailed(80); /* indicate error message*/



end // end AF0S-2550

// edit 'from' g/a code map 2
Function AF0S-2560()
  if (AF0SM002.XGACD1[AFWIXM] == " ") /* Map fld eq spaces*/
    return; /* Return to calling process*/
  end

  AF0SW00.AF0SW-CODE = AF0SM002.XGACD1[AFWIXM]; /* build xgatbl key*/
  AF0SW00.XGPCD = "03"; /* apparel gpc code*/

  if (AF0SW00.AF0SW-KEY in XGATBL.XGAKEY
   && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
    return; /* Exit to calling process*/
  end

  AF0SM002.XXXMODID = "2560"; /* Process number*/
  set AF0SM002.XGACD1[AFWIXM] cursor, bold; /* highlight field*/
  converseLib.validationFailed(36); /* indicate error message*/



end // end AF0S-2560

// process map 2 valid input
Function AF0S-2600()
  AFWREC.AFWIXM = 1; /* first screen line*/

  while (AFWREC.AFWIXM <= AFWREC.AFWNMO /* for each line*/
   && AF0SM002.XPRCD[AFWIXM] != " ") /* with data in it*/
    AF0S-2620(); /* check for duplicates*/

    if (converseVar.validationMsgNum == 0)
      AF0S-2610(); /* add row*/
    end

    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next line*/
  end

  if (converseVar.validationMsgNum == 0) /* everything ok*/
    converseLib.validationFailed(13); /* database update ok*/
    AF0SW00.AF0SW-FORMAT-MAP = "Y";
  end



end // end AF0S-2600

// add row to DACAST.VAFOVR01
Function AF0S-2610()
  XX0XS01();
  set VAFOVR01 empty;
  VAFOVR01.XPRCD = AF0SM002.XPRCD[AFWIXM];
  VAFOVR01.XPLCD = AF0SM002.XPLCD[AFWIXM];
  VAFOVR01.XPCCD = AF0SM002.XPCCD[AFWIXM];
  VAFOVR01.XGACD1 = AF0SM002.XGACD1[AFWIXM];
  VAFOVR01.XGACD2 = AF0SM002.XGACD2[AFWIXM];
  VAFOVR01.AF-XGA-DELT-FL = "N"; /* default delete flag to no*/
  VAFOVR01.ZZZCHGCT = 0; /* Change count*/
  VAFOVR01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VAFOVR01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO6370" ("A ", SQLCA, VAFOVR01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and nermal return code*/
    return; /* Return to calling process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "2610"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "ADD ROW TO TABLE    ";
  TA1REC.TA1MAP = "AF0SM002"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFOVR01"; /* Table view name*/
  move VAFOVR01 to AF0SW02 withV60Compat; /* work record*/
  TA1REC.TA1TBLKE = AF0SW02.AF0SW-VAFOVR01-KEY; /* Table view key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0SM002.XXXMODID = "2610"; /* Process name*/
  exit stack; /* Exit to redisplay map*/



end // end AF0S-2610

// check for duplicates
Function AF0S-2620()
  set VAFOVR01 empty;
  VAFOVR01.XPRCD = AF0SM002.XPRCD[AFWIXM];
  VAFOVR01.XPLCD = AF0SM002.XPLCD[AFWIXM];
  VAFOVR01.XPCCD = AF0SM002.XPCCD[AFWIXM];
  VAFOVR01.XGACD1 = AF0SM002.XGACD1[AFWIXM];
  VAFOVR01.XGACD2 = AF0SM002.XGACD2[AFWIXM];

  try
    call "IO6370" ("S ", SQLCA, VAFOVR01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      AF0SM002.XXXMODID = "2620";
      converseLib.validationFailed(55);
      set AF0SM002.XGACD1[AFWIXM] cursor, bold;
      set AF0SM002.XPRCD[AFWIXM] bold;
      set AF0SM002.XPLCD[AFWIXM] bold;
      set AF0SM002.XPCCD[AFWIXM] bold;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return; /* Return to calling process*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AF0SW00.AF0SW-FORMAT-MAP = "Y";
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AF0SM001.XXXMODID = "1610"; /* Process number*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any changes*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "2620"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CHECK FOR DUPLICATES     ";
  TA1REC.TA1MAP = "AF0SM001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFOVR01"; /* Table view name*/
  move VAFOVR01 to AF0SW02 withV60Compat; /* work record*/
  TA1REC.TA1TBLKE = AF0SW02.AF0SW-VAFOVR01-KEY; /* Table view key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0SM002.XXXMODID = "2620"; /* Process name*/
  exit stack; /* Exit to redisplay map*/



end // end AF0S-2620

//*** RECORD=AF0SW00 ****
// This record is misc working-storage for CSP appl AF0S
// ***********************
Record AF0SW00 type basicRecord
  10 AF0SW-FORMAT-MAP AF0SW-FORMAT-MAP ; 
  10 AF0SW-KEY AF0SW-KEY ; 
    15 AF0SW-CODE AF0SW-CODE ; 
    15 XGPCD XGPCD ; 
  10 AF0SW-DATA-CHANGED-SW AF0SW-DATA-CHANGED-SW ; 
end // end AF0SW00

//*** RECORD=AF0SW01 ****
// This record is display working storage for CSP appl AF0S
// ***********************
Record AF0SW01 type basicRecord
  5 AF0SW01-GROUP-LEVEL AF0SW01-GROUP-LEVEL ; 
    10 AF-TSQ-LENGTH AF-TSQ-LENGTH ; 
    10 * char(58) [14] ; 
      15 XPRCD XPRCD ; 
      15 XPLCD XPLCD ; 
      15 XPCCD XPCCD ; 
      15 XGACD1 XGACD1 ; 
      15 XGACD2 XGACD2 ; 
      15 AF-XGA-DELT-FL AF-XGA-DELT-FL ; 
      15 ZZZCHGCT ZZZCHGCT ; 
      15 XPLSDESC XPLSDESC ; 
      15 XPCSDESC XPCSDESC ; 
      15 XGADESC XGADESC ; 
      15 XGAABRV XGAABRV ; 
    10 AF0S-IDX1 AF0S-IDX1 ; 
end // end AF0SW01

Record AF0SW02 type basicRecord
  10 AF0SW-VAFOVR01-KEY AF0SW-VAFOVR01-KEY ; 
  10 * char(10) ; 
end // end AF0SW02

//*** RECORD=AF0SW03 ****
// supplies //    NOTIFY=userid for TEST use only
// ***********************
Record AF0SW03 type basicRecord
  10 AF0SWJCL AF0SWJCL ; 
    15 AF0SWSLH AF0SWSLH ; 
    15 * char(13) ; 
    15 AF0SWNFY AF0SWNFY ; 
    15 TA3USRID TA3USRID ; 
    15 * char(50) ; 
end // end AF0SW03

//*** RECORD=VAFOVR01 ****
// *******************temp g/a override************************
// DB2 TABLE:         DACAST.VAFOVR01
// COPYLIB MEMBER:    DCL0
// I/O MOD:           IO
// KEY TO DB2 TABLE:  xprcd
//                    xplcd
//                    xpccd
// DATE CREATED:      05-08-92
// MAINTENANCE LOG:
//   DATE    USERID  COMMENT
// --------  ------  -------
// 05-08-92  LREIN   INITIAL INSTALLATION
// 05/02/92  jfugat  added xgacd2 and af-xga-delt-fl
// ************************
Record VAFOVR01 type basicRecord
  10 VAFOVR01-GROUP VAFOVR01-GROUP ; 
    15 XPRCD XPRCD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XGACD1 XGACD1 ; 
    15 XGACD2 XGACD2 ; 
    15 AF-XGA-DELT-FL AF-XGA-DELT-FL ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end VAFOVR01

// Temp storage length
DataItem AF-TSQ-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// af_xga_delt_fl
DataItem AF-XGA-DELT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0S-IDX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0SW-CODE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0SW-DATA-CHANGED-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0SW-FORMAT-MAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0SW-KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0SW-VAFOVR01-KEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level
DataItem AF0SW01-GROUP-LEVEL char(819)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job Control Language statement
DataItem AF0SWJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal NOTIFY=
DataItem AF0SWNFY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// // to indicate jcl stmnt
DataItem AF0SWSLH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vafovr01-group
DataItem VAFOVR01-GROUP char(19)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

