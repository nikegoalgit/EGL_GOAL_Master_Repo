package af0e;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPAF100;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSLC;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.AIRSPD-LGSH-FL;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGACD;
import corpx1.XGAKEY;
import corpx1.XGATBL;
import corpx1.XGPCD;
import corpx1.XLCCD;
import corpx1.XLCTBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XOWABRV;
import corpx2.XOWCD;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpy2.YSNTBL;
import pc.common.PC6REC;
import pc.common.PCYREC;
import pg.common.PG1REC;
import pg.common.PG2REC;
import pg.common.PG2SCRFL;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY5REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import vv.common.VAFCLR02;
import vv.common.VAVPCT01;
//*** PROGRAM=AF0E ****
// This application is designed to enter color percents for
// apparel forecasted style/colors. The user will be able to
// activate and inactivate certain colors for a particular
// style. Percentages for each active color will also be
// entered and an additional buy flag can be set.
// 
// This application will maintain the Season/Style/Color/
// Databases.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 04/07/89   JRAMOS   New application.
// 08/10/90   cross    fix to allow for all div's
// 04/12/93   Tdodso   changed status to update style
// 06/28/93   Lrein    added in stock processing
//                     also removed sum of color pct = 100
//                     edit for blanks.
// 12/07/93   wdrake   fix to show blanks total colr % always
// 12/16/93   lrein    removed code to update in stock quantity
// 01/04/93   sbabco   eliminate po type 'ir' from selection
//                     when search for existing po's.
// 04-01-94   LREIN    protect entry of colr pct when looking
//                     at corp view (no foolin)
// 05-18-94   LREIN    dont edit for open po's when making prod
//                     type 97 inactive.
// 02-08-95   kj       xsn-ysn
// 08/6/96    kj       airspeed install
// 12-17-96   oricha   y2k modifications:  S1C,S14,S24,S26,
//                     S27, S28, 112, 151, W01; M001 zero
//                     fills on xsnyr.
// 04-08-96   schen    add units to screen for reports
// 05-24-99   craymo   AF0ES10 - added logic to disallow any
//                     data entry beyond SU 2000
// *********************
Program AF0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0EW01 AF0EW01; // record
  AF0EW02 AF0EW02; // record
  AF0EW03 AF0EW03; // record
  AF1REC AF1REC; // record
  AF2REC AF2REC; // record
  AF9REC AF9REC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC6REC PC6REC; // record
  PCYREC PCYREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY5REC SY5REC; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VAFCLR02 VAFCLR02; // record
  VAVPCT01 VAVPCT01; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use AF0EM.AF0EM001,  // forms
      AF0EM.AF0EM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/
    ;
    set AF0EW01 empty; /* Initialize working storage*/
    set AF0EW02 empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set VAFCLR02 empty; /* Initialize working storage*/
    set AF9REC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0EM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF0E"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    ;
    ;
              /* (Initialize Style Row Loop Limit Ctr)*/
    ;
    AF0EW01.AF0EWLIM = +10000; /* Stop loop every 10000 rows read*/
    ;
    ;
       /* (Define Map Environment, Assign/Edit Defaults)*/
    ;
    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process name*/
    ;
    ;
                      /* (Set Map Item Values)*/
    ;
    AF0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/
    ;
    ;
                      /* (Process Passed Items)*/
    ;
    AF0EM001.XXXUSER = XP1REC.XXXUSER; /* Fcster code to map*/
    AF0EM001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    AF0EM001.XSNYR = XP1REC.XSNYR; /* Season yr to map*/
    ;
    AF0EM001.XDVCD = "01"; /* default to domestic*/
    AF0EM001.AF0EMXOW = "00"; /* default to 00*/
    ;
    AF0EM001.XPRCD = XP1REC.XPRCD; /* Product type to map*/
    AF0EM001.XGACD = XP1REC.XGACD; /* Gender age cd to map*/
    AF0EM001.XPLCD = XP1REC.XPLCD; /* Product line cd to map*/
    AF0EM001.XPCCD = XP1REC.XPCCD; /* Category cd to map*/
    AF0EM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd to map*/
    AF0EM001.XLCCD[1] = XP1REC.XLCCD[1];
    AF0EM001.XLCCD[2] = XP1REC.XLCCD[2];
    AF0EM001.XLCCD[3] = XP1REC.XLCCD[3];
    AF0EM001.XLCCD[4] = XP1REC.XLCCD[4];
    AF0EM001.SY1STNBR = XP1REC.SY1STNBR; /* Style cd to map*/
    AF0EM001.AF0EM-BLNK-FL = "N";
    ;
    XP1REC.XXXUSER = " "; /* Clear Fcster code*/
    XP1REC.XSECD = " "; /* Clear Season cd*/
    XP1REC.XSNYR = 0; /* Clear Season yr*/
    XP1REC.XDVCD = " "; /* Clear Division   cd*/
    XP1REC.XOWCD = " "; /* Clear XOW cd*/
    XP1REC.XPRCD = " "; /* Clear Prod type  cd*/
    XP1REC.XGACD = " "; /* Clear Gender age cd*/
    XP1REC.XPLCD = " "; /* Clear Prod line cd*/
    XP1REC.XPCCD = " "; /* Clear Category cd*/
    XP1REC.XSUCD = " "; /* Clear Silhouette cd*/
    XP1REC.SY1STNBR = " "; /* Clear Style cd*/
    XP1REC.XDVDESC = " "; /* Clear XDV desc*/
    XP1REC.XPRDESC = " "; /* Clear XPR desc*/
    XP1REC.XGADESC = " "; /* Clear XGA desc*/
    XP1REC.XPLDESC = " "; /* Clear XPL desc*/
    XP1REC.XPCDESC = " "; /* Clear Xpc desc*/
    XP1REC.XSUDESC = " "; /* Clear Xsu desc*/
    XP1REC.SY1SSTNM = " "; /* Clear Style desc*/
    ;
    ;
                 /* (Protect,Dark Map Dtl Lines)*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0EM001.AF0EMSTA[AFWIDX5] skip, invisible; /* Row status*/
      set AF0EM001.AF0EMSTY[AFWIDX5] skip, invisible; /* Style no.*/
      set AF0EM001.AF0EMSNM[AFWIDX5] skip, invisible; /* Style nm*/
      set AF0EM001.AF0EMCLR[AFWIDX5] skip, invisible; /* Color cd*/
      set AF0EM001.AF0EMCDS[AFWIDX5] skip, invisible; /* Color desc*/
      set AF0EM001.AF5CLRPT[AFWIDX5] skip, invisible; /* Color pcent*/
      set AF0EM001.AF5ADBFL[AFWIDX5] skip, invisible; /* Add buy flag*/
      set AF0EM001.AF0EMFUN[AFWIDX5] skip, invisible; /* Fcsted units*/
      set AF0EM001.AF0EMCFD[AFWIDX5] skip, invisible; /* Fcst color*/
      set AF0EM002.AF2SFODT[AFWIDX5] skip, invisible; /* First offer date*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    ;
    set AF0EM001.XSECD cursor; /* Set cursor position*/
    AF0EM001.AF0EMCPT = 0; /* Clear color pcent total*/
    ;
    ;
                      /* (Converse Main Process)*/
    ;
    goto AF0E001; /* Main Process*/
    ;
    ;
    ;
    AF0E001: AF0E001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Apparel Fcst/Buy Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0E001; /* Converse Apparel Fcst/Buy Prototype*/
    ;
    ;
  end // end main
end // end AF0E

// Choose which map to display
Function AF0E001()
  if (AFWREC.AFWMAP == "1")
    AF0E100();
  else
    AF0E200();
  end
  ;
  ;
end // end AF0E001

// main process map 1
Function AF0E100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF0E110(); /* Obtain the data to display*/
  ;
  AF0E120(); /* Format and display the map*/
  ;
  AF0E130(); /* Check attention identifier*/
  ;
  AF0E140(); /* Reset fields to normal intensity*/
  ;
  AF0E150(); /* Verify the entered data*/
  ;
  AF0E160(); /* Process valid input request*/
  ;
  ;
  ;
  ;
end // end AF0E100

// Obtain the data to display
Function AF0E110()
   /* ------------------------------------------------------------*/
   /* If new keys not entered, select set style using old keys.*/
   /* if old keys entered, get new G/A, CAT and SIL combination;*/
      /* set select style using new keys.*/
   /* Obtain and store all colors associated with the style;*/
      /* format all map detail pages.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/
  ;
  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || AF0EW01.AF0EWCNF == "Y"           /* Update confirm flag set*/
   || AF0EW01.AF0EWPND == "Y"           /* Pop-up window processing active*/
   || converseVar.eventKey is pa2       /* clear screen*/
   || converseVar.eventKey is pf7       /* scroll back*/
   || converseVar.eventKey is pf8       /* scroll forward*/
   || converseVar.eventKey is pf10      /* scroll left*/
   || converseVar.eventKey is pf14      /* change statuses*/
   || AFWREC.AFWFIRST == " ")           /* First time through*/
    return; /* Then exit to next process*/
  end
  ;
  if (AF0EW01.AF0EWDUP == "Y") /* Duplicates flag set*/
    AF0EW01.AF0EWDUP = " "; /* Reset duplicates flag*/
    ;
    if (AF0EW01.AF0EWCNF != "U") /* Update confirm flag set*/
      return; /* Then exit to next process*/
    end
    ;
  end
  ;
  if (AF9REC.AF9TYP99 == "Y") /* Last TYP,G/A,LINE,CAT,SIL comb.*/
    AFWREC.AFWSWR = "Y"; /* Force new selection*/
  end
  ;
   /* *=======================================**/
   /* *  Check for Data Contention Condition  **/
   /* *=======================================**/
  ;
  if (AF0EW01.AF0EWCIN == "Y") /* Data contention present*/
    AFWREC.AFWSWR = "Y"; /* Do new select cycle using old keys*/
  end
  ;
   /* *==========================**/
   /* *  Clear Record Work Area  **/
   /* *==========================**/
  ;
  set AF0EW02 empty; /* Clear working storage record*/
  AFWREC.AFWIDX3 = 0; /* Reset color storage index*/
  ;
   /* *========================================================*/
   /* * Set Select Using Old TYP,G/A,LINE,CAT & SIL Combination*/
   /* * ... And Obtain Next Style from Current Set*/
   /* *========================================================*/
  ;
  if (AFWREC.AFWSWR == "N") /* No new keys entered*/
    ;
    if (converseVar.eventKey is pf15 /* PF15 (Next TYPE requested)*/
     || converseVar.eventKey is pf16 /* PF16 (Next G/A requested)*/
     || converseVar.eventKey is pf17 /* PF17 (Next LINE requested)*/
     || converseVar.eventKey is pf18 /* PF18 (Next CAT requested)*/
     || converseVar.eventKey is pf19) /* PF19 (Next SILH requested)*/
      AF0EW01.AF0EWCMS = "Y"; /* Get next KEY comb.*/
      AF0EW01.AF0EWSYK = " "; /* Reset style to select*/
      AF0EW01.AF0EWOGK = " "; /* Reset OG to select*/
      AF0EW01.AF0EWCSY = 1; /* Set style ctr to get 1st style*/
    else
      AF0EW01.AF0EWSYK = XP1REC.SY1STNBR; /* To sty work key*/
      AF0EW01.AF0EWOGK = XP1REC.XOWCD; /* To OG  work key*/
      AF0EW01.AF0EWCSY = 2; /* Set style ctr to get next style*/
    end
    ;
  else
    ;
     /* *========================================**/
     /* * Set Select Using New Keys,             **/
     /* * ... And Obtain First Style of New Set  **/
     /* * HOWEVER, If Current Style/Color Just   **/
     /* *   Updated, then Set Start at Current   **/
     /* *      STYLE.                            **/
     /* *========================================**/
    ;
    if (AFWREC.AFWSWR == "Y") /* New keys entered*/
      AF0EW01.AF0EWCMS = "Y"; /* Get new KEY comb.*/
      set AF9REC empty; /* Clear work record*/
      AF0EW01.AF0EWCSY = 1; /* Set style ctr to get 1st style*/
      AF0EW01.AF0EWLCT = 0; /* Reset Style loop ctr*/
      ;
      if (AF0EW01.AF0EWCNF == "U") /* Successful update done*/
        AF0EW01.SY1STNBR = AF0EM001.AF0EMSTY[1];
        if (AF0EM001.XPRCD != " ")
          AF0EW01.AF0EWTYP = AF0EM001.AF0EMTCD;
        end
        if (AF0EM001.XGACD != " ")
          AF0EW01.AF0EWGA = AF0EM001.AF0EMGCD;
        end
        if (AF0EM001.XPLCD != " ")
          AF0EW01.AF0EWPLN = AF0EM001.AF0EMLCD;
        end
        if (AF0EM001.XPCCD != " ")
          AF0EW01.AF0EWCAT = AF0EM001.AF0EMCCD;
        end
        if (AF0EM001.XSUCD != " ")
          AF0EW01.AF0EWSIL = AF0EM001.AF0EMSCD;
        end
        AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
        AF0EW01.AF0EWST1 = "X";
        AF0EW01.AF0EWSYK = XP1REC.SY1STNBR; /* Set Curr style*/
        AF0EW01.AF0EWOGK = XP1REC.XOWCD; /* Set Curr OG*/
      else
        ;
        if (AF0EM001.SY1STNBR != " ") /* Particular style entered*/
          AF0EW01.AF0EWSYK = AF0EW01.SY1STNBR; /* To sty work key*/
        else
          AF0EW01.AF0EWSYK = " "; /* To sty work key*/
        end
        ;
        if (AF0EM001.XOWCD != " ") /* Particular style entered*/
          AF0EW01.AF0EWOGK = AF0EW01.AF0EWXOW; /* To sty work key*/
        else
          AF0EW01.AF0EWOGK = " "; /* To sty work key*/
        end
        ;
      end
      ;
    end
    ;
  end
  ;
  AF0EW01.AF0EWCIN = " "; /* Reset contention indicator*/
  ;
   /* *========================================================**/
   /* * Obtain Gender/Age, Category and Silhouette Combination **/
   /* *========================================================**/
  ;
  if (AF0EW01.AF0EWCMS != " ") /* Obtain next or new comb.*/
    AF0EW01.AF0EWCMS = " "; /* Reset indicator*/
    AF0E111(); /* Obtain new KEY Comb*/
  end
  ;
   /* *==========================**/
   /* * Select Style/Color Rows  **/
   /* *==========================**/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors*/
    AF0E112(); /* Select Scan Style*/
  end
  ;
  if (converseVar.validationMsgNum == 0) /* No errors*/
    AFWREC.AFWIDX5 = 0; /* Reset loop ctr*/
    ;
    while (AFWREC.AFWIDX5 < AF0EW01.AF0EWCSY) /* Until next sty ret*/
      set AF0EW02 empty; /* Clear working storage record*/
      AFWREC.AFWIDX3 = 0; /* Reset color storage index*/
      converseLib.validationFailed(0); /* Reset message*/
      AF0E113(); /* Get next(or current) valid style*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
      AF0E114(); /* Close Select Scan cursor*/
      AF0E115(); /* check in stock percents*/
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        AF0E114(); /* Close Select Scan cursor*/
        AF9REC.AF9TYP99 = "Y"; /* Force end of current combination*/
        AF9REC.AF9GAG99 = "Y"; /* Force end of current combination*/
        AF9REC.AF9LIN99 = "Y"; /* Force end of current combination*/
        AF9REC.AF9CAT99 = "Y"; /* Force end of current combination*/
        AF9REC.AF9SIL99 = "Y"; /* Force end of current combination*/
        ;
        if (AFWREC.AFWIDX3 <= 0) /* No qualified colors found*/
          converseLib.validationFailed(15); /* Indicate no data found*/
          AFWREC.AFWPRCSN = "110 "; /* Process number*/
          AFWREC.AFWIDX1 = 1; /* Set loop index*/
          ;
          while (AFWREC.AFWIDX1 <= 9) /* Protect/darken map display*/
            set AF0EM001.AF0EMSTA[AFWIDX1] skip, invisible; /* Row status*/
            set AF0EM001.AF0EMSTY[AFWIDX1] skip, invisible; /* Style no.*/
            set AF0EM001.AF0EMSNM[AFWIDX1] skip, invisible; /* Style nm*/
            set AF0EM001.AF0EMCLR[AFWIDX1] skip, invisible; /* Color cd*/
            set AF0EM001.AF0EMCDS[AFWIDX1] skip, invisible; /* Color desc*/
            set AF0EM001.AF5CLRPT[AFWIDX1] skip, invisible; /* Color pcent*/
            set AF0EM001.AF5ADBFL[AFWIDX1] skip, invisible; /* Add buy flag*/
            set AF0EM001.AF0EMFUN[AFWIDX1] skip, invisible; /* Fcsted units*/
            set AF0EM001.AF0EMCFD[AFWIDX1] skip, invisible; /* Fcst color*/
            set AF0EM001.XOWCD[AFWIDX1] skip, invisible; /* owner group*/
            AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
          end
          ;
          set AF0EM001.XSECD cursor; /* Set cursor position*/
          AF0EM001.AF0EMCPT = 0; /* Clear color pcent total*/
        end
        ;
      end
      ;
    end
    ;
  end
  ;
   /* *=========================================================**/
   /* * Check Obtain Data Status, Inactivate All Loop Controls  **/
   /* *=========================================================**/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0EW01.AF0EWLCT = 0; /* Reset style loop ctr*/
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
    ;
    if (AF0EW01.AF0EW-MULTI-PCT-SW == "Y")
      AF0EW02.AF0EW-STY-ISTK-PCT = 0;
    else
      AF0EW02.AF0EW-STY-ISTK-PCT = AF0EW01.AF0EW-OLD-PCT;
    end
    ;
  end
  ;
  ;
end // end AF0E110

// Obtain G/A, CAT & SIL Comb.
Function AF0E111()
   /* ------------------------------------------------------------*/
   /* Get new G/A, CAT and SIL combination*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==========================================**/
   /* *  Obtain Next Combination for Processing  **/
   /* *==========================================**/
  ;
  AF9REC.XPRCD = XP1REC.XPRCD; /* Product type cd*/
  AF9REC.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
  AF9REC.XPLCD = XP1REC.XPLCD; /* Product line cd*/
  AF9REC.XPCCD = XP1REC.XPCCD; /* Category cd*/
  AF9REC.XSUCD = XP1REC.XSUCD; /* Sihouette cd*/
  ;
  XPAF100(); /* Combination retrieval rtn*/
  ;
  XP1REC.XPRCD = XPRTBL.XPRCD[AF9TPIXM]; /* Save to wk storage*/
  AF0EW01.AF0EWXPR = XPRTBL.XPRCD[AF9TPIXM]; /* Save internal start*/
  XP1REC.XPRDESC = XPRTBL.XPRDESC[AF9TPIXM]; /* Save to wk storage*/
  XP1REC.XPRABRV = XPRTBL.XPRABRV[AF9TPIXM]; /* Save to wk storage*/
  ;
  XP1REC.XGACD = XGATBL.XGACD[AF9GAIXM]; /* Save to wk storage*/
  AF0EW01.AF0EWXGA = XGATBL.XGACD[AF9GAIXM]; /* Save internal start*/
  XP1REC.XGADESC = XGATBL.XGADESC[AF9GAIXM]; /* Save to wk storage*/
  XP1REC.XGAABRV = XGATBL.XGAABRV[AF9GAIXM]; /* Save to wk storage*/
  ;
  XP1REC.XPLCD = XPLTBL.XPLCD[AF9LNIXM]; /* Save to wk storage*/
  AF0EW01.AF0EWXPL = XPLTBL.XPLCD[AF9LNIXM]; /* Save internal start*/
  XP1REC.XPLDESC = XPLTBL.XPLDESC[AF9LNIXM]; /* Save to wk storage*/
  XP1REC.XPLABRV = XPLTBL.XPLABRV[AF9LNIXM]; /* Save to wk storage*/
  ;
  XP1REC.XPCCD = XPCTBL.XPCCD[AF9PCIXM]; /* Save to wk storage*/
  AF0EW01.AF0EWXPC = XPCTBL.XPCCD[AF9PCIXM]; /* Save internal start*/
  XP1REC.XPCDESC = XPCTBL.XPCDESC[AF9PCIXM]; /* Save to wk storage*/
  XP1REC.XPCABRV = XPCTBL.XPCABRV[AF9PCIXM]; /* Save to wk storage*/
  ;
  XP1REC.XSUCD = XSUTBL.XSUCD[AF9SUIXM]; /* Save to wk storage*/
  AF0EW01.AF0EWXSU = XSUTBL.XSUCD[AF9SUIXM]; /* Save internal start*/
  XP1REC.XSUDESC = XSUTBL.XSUDESC[AF9SUIXM]; /* Save to wk storage*/
  XP1REC.XSUABRV = XSUTBL.XSUABRV[AF9SUIXM]; /* Save to wk storage*/
  ;
  ;
  if (AF9REC.AF9TYP99 == "Y") /* Last Gender/Age cd retrieved*/
    ;
    AF0EW01.AF0EWLCT = 0; /* Reset style loop ctr*/
    converseLib.validationFailed(15); /* Indicate no more data*/
    AFWREC.AFWPRCSN = "111 "; /* Process number*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0EM001.AF0EMSTA[AFWIDX5] skip, invisible; /* Row status*/
      set AF0EM001.AF0EMSTY[AFWIDX5] skip, invisible; /* Style no.*/
      set AF0EM001.AF0EMSNM[AFWIDX5] skip, invisible; /* Style nm*/
      set AF0EM001.AF0EMCLR[AFWIDX5] skip, invisible; /* Color cd*/
      set AF0EM001.AF0EMCDS[AFWIDX5] skip, invisible; /* Color desc*/
      set AF0EM001.AF5CLRPT[AFWIDX5] skip, invisible; /* Color pcent*/
      set AF0EM001.AF5ADBFL[AFWIDX5] skip, invisible; /* Add buy flag*/
      set AF0EM001.AF0EMFUN[AFWIDX5] skip, invisible; /* Fcsted units*/
      set AF0EM001.AF0EMCFD[AFWIDX5] skip, invisible; /* Fcst color*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    ;
    set AF0EM001.XSECD cursor; /* Set cursor position*/
    AF0EM001.AF0EMCPT = 0; /* Clear color pcent total*/
    ;
  end
  ;
  ;
end // end AF0E111

// Select Set for Style
Function AF0E112()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set AF2REC empty; /* Reset rec work area*/
  ;
  AF2REC.XDVCD = AF0EM001.XDVCD; /* division code*/
  AF2REC.XGACD = XP1REC.XGACD; /* gender/age*/
   /* IF XP1REC.XPCCD NE '00';*/
  AF2REC.XPCCD = XP1REC.XPCCD; /* category*/
   /* END;*/
  AF2REC.XSUCD = XP1REC.XSUCD; /* silhouette*/
  AF2REC.XPLCD = XP1REC.XPLCD; /* product line*/
  AF2REC.XPRCD = XP1REC.XPRCD; /* product type*/
  AF2REC.SY1STNBR = AF0EW01.AF0EWSYK; /* Style no.*/
   /* MOVE ' ' TO AF2REC.SY1STNBR     ; Style no.*/
  AF2REC.SY4SZSCL = "**"; /* Size scale cd*/
  ;
  if (AF0EW01.AF0EWXOW == " ") /* no owner group entered*/
    AF2REC.XOWCD = "**"; /* Wild card og*/
  else
    AF2REC.XOWCD = AF0EW01.AF0EWXOW; /* move selected og*/
  end
  ;
  if (AF0EW01.XXXSTAT == " ") /* no status entered*/
    AF2REC.AF2FSTST = "*"; /* Wild card forecast status*/
  else
    AF2REC.AF2FSTST = AF0EW01.XXXSTAT;
  end
  ;
  ;
  if (XP1REC.XXXUSER == " ") /* No user specified*/
    AF2REC.PG1FCTCD = "**"; /* Get all users*/
  else
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
  end
  ;
  AF0EW01.AF0EWXSY = 0; /* Reset xsnyr wk area*/
  AF0EW01.AF0EWXSY = XP1REC.XSNYR; /* Move to wk area*/
   /* --------------- y2k out begin ---------------*/
   /* AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 1900;/* Add century*/
   /* --------------- y2k out end  ----------------*/
  ;
   /* --------------- y2k in begin ----------------*/
  if (AF0EW01.AF0EWXSY < 1900) /* no century built yet*/
    if (AF0EW01.AF0EWXSY > 60)
      AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 1900; /* Add century*/
    else
      AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 2000; /* Add century*/
    end
  end
   /* --------------- y2k in end ------------------*/
  ;
  AF2REC.XSNYR = AF0EW01.AF0EWXSY; /* XSE yr*/
  ;
  AF2REC.XSECD = XP1REC.XSECD; /* XSE cd*/
  ;
  ;
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFSTY01  **/
   /* *====================================**/
  ;
  try
    call "IO3510" ("SS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "112 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AF0E112

// Fetch Style Rows /add unit
Function AF0E113()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until the next style to*/
     /* be processed is retrieved (current style + 1). If done*/
     /* for the first time after a new select has been made, it*/
     /* will retrieve the first style in the set --*/
     /* (current style + 0).*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/
  ;
  try
    call "IO3510" ("SN", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
   /* ------------------------------------------------------------*/
   /* If call sucessful, store style forecast data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
                   /* (Check Loop Ctr Value)*/
    ;
    AF0EW01.AF0EWLCT = AF0EW01.AF0EWLCT + 1; /* Add to style ctr*/
    ;
    if (AF0EW01.AF0EWLCT > AF0EW01.AF0EWLIM) /* Loop limit exceeded*/
      converseLib.validationFailed(44); /* Indicate loop exceeded*/
      AFWREC.AFWIDX5 = +9999; /* Force loop termination.*/
      return; /* Exit to display map*/
    end
    ;
                   /* (Loop Ctr Within Limits)*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      ;
      ;
      ;
      ;
      /* *********** Added for IOMOD Changes  *****************/
      XP1REC.XDVCD = AF2REC.XDVCD; /* Update XDV Comb. code*/
      XP1REC.XPRCD = AF2REC.XPRCD; /* Update XPR Comb. code*/
      XP1REC.XGACD = AF2REC.XGACD; /* Update XGA Comb. code*/
      XP1REC.XPLCD = AF2REC.XPLCD; /* Update XPL Comb. code*/
      XP1REC.XPCCD = AF2REC.XPCCD; /* Update XPC Comb. code*/
      XP1REC.XSUCD = AF2REC.XSUCD; /* Update XSU Comb. code*/
      XP1REC.XOWCD = AF2REC.XOWCD; /* owner group*/
      ;
      if (XP1REC.XPRCD in XPRTBL.XPRCD) /* Check code in table*/
        AF9REC.AF9TPIXM = sysVar.arrayIndex; /* Update XGA Comb. index*/
        AF0EW01.AF0EWXPR = XPRTBL.XPRCD[sysVar.arrayIndex]; /* Save internal start*/
        XP1REC.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
                                   /* Save to wk storage*/
        XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
                                   /* Save to wk storage*/
      end
      ;
      if (XP1REC.XGACD in XGATBL.XGACD) /* Check code in table*/
        AF9REC.AF9GAIXM = sysVar.arrayIndex; /* Update XGA Comb. index*/
        AF0EW01.AF0EWXGA = XGATBL.XGACD[sysVar.arrayIndex]; /* Save internal start*/
        XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
                                   /* Save to wk storage*/
        XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
                                   /* Save to wk storage*/
      end
      ;
      if (XP1REC.XPLCD in XPLTBL.XPLCD) /* Check code in table*/
        AF9REC.AF9LNIXM = sysVar.arrayIndex; /* Update XGA Comb. index*/
        AF0EW01.AF0EWXPL = XPLTBL.XPLCD[sysVar.arrayIndex]; /* Save internal start*/
        XP1REC.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex];
                                   /* Save to wk storage*/
        XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
                                   /* Save to wk storage*/
      end
      ;
      if (XP1REC.XPCCD in XPCTBL.XPCCD) /* Check code in table*/
        AF9REC.AF9PCIXM = sysVar.arrayIndex; /* Update XPC Comb. index*/
        AF0EW01.AF0EWXPC = XPCTBL.XPCCD[sysVar.arrayIndex]; /* Save internal start*/
        XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex];
                                   /* Save to wk storage*/
        XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
                                   /* Save to wk storage*/
      end
      ;
      AF9REC.XGPCD = "03";
      AF9REC.AF9TBCD = XP1REC.XSUCD;
      ;
      if (AF9REC.AF9TBKEY in XSUTBL.XSUKEY) /* Check code in table*/
        AF9REC.AF9SUIXM = sysVar.arrayIndex; /* Update XSU Comb. index*/
        AF0EW01.AF0EWXSU = XSUTBL.XSUCD[sysVar.arrayIndex]; /* Save internal start*/
        XP1REC.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex];
                                   /* Save to wk storage*/
        XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
                                   /* Save to wk storage*/
      end
      /* ******************************************************/
      ;
      if (XP1REC.PG1FCTCD == " " /* Get all forecasters*/
       || AF2REC.PG1FCTCD == XP1REC.PG1FCTCD) /* Check forecaster cd*/
        ;
        if (AF2REC.AF2FSTST == "A" /* Style status active*/
         || AF2REC.AF2FSTST == "N" /* or Style status new*/
         || AF2REC.AF2FSTST == "I") /* or Style status inactive*/
          ;
          AF0EW01.AF0EWSQU = " "; /* Reset style qual code*/
          AF0ES1A(); /* Check if style qualified for*/
                                   /* processing*/
          ;
          if (AF2REC.SY1STNBR == AF0EW01.AF0EWSYK /* style and og check*/
           && XP1REC.XOWCD < AF0EW01.AF0EWOGK)    /* already processed style*/
            AF0EW01.AF0EWSQU = " "; /* Reset style qual code*/
          end
          ;
          if (AF0EW01.AF0EWSQU == "Y") /* Style qualified*/
            XP1REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
            AF0EW02.AF0EWFST = AF2REC.AF2FSTDL; /* Style fcst dlrs*/
            AF0EW02.AF0EWFUN = AF2REC.AFMFSTQT; /* Style fcst qtys*/
            AF0EW02.AF2FSTST = AF2REC.AF2FSTST; /* Style fcst stat*/
            AF0EW02.XOWCD = AF2REC.XOWCD; /* owner group*/
            AF0EW02.AF0EW-STY-ISTK-PCT = AF2REC.AF-IN-STK-PCT;
            AF0ES20(); /* get wholesale price*/
            AF0ES1B(); /* Obtain all colors w/in style*/
            ;
            if (AF0EW01.AF0EW-BLNK-FL == "Y" /* BLANKS requested*/
             && VAFCLR02.PG2SCRFL != "B")    /* Style not a BLANK*/
              return;
            else
              if (AF0EW01.AF0EW-BLNK-FL == "N" /* BLANKS not requested*/
               && VAFCLR02.PG2SCRFL == "B")    /* Style is a BLANK*/
                return;
              end
            end
            ;
            if (AFWREC.AFWIDX3 > 0) /* Qualified colors obtained*/
              AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Add to style ctr*/
            else
              AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Add to style ctr*/
            end
            ;
            return; /* Loop through (Style selected)*/
            ;
          else
            ;
            return; /* Loop through (Bypass style row)*/
            ;
          end
          ;
        else
          ;
          return; /* Loop through (Bypass Style row)*/
          ;
        end
        ;
      else
        ;
        return; /* Loop through (Bypass Style row)*/
        ;
      end
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        ;
        AFWREC.AFWIDX5 = +9999; /* Terminate loop.*/
        ;
        return; /* Return to calling process*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "113 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0E113

// Close select set cursor
Function AF0E114()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3510" ("CS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "114 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0E114

// Check in stock percents
Function AF0E115()
  AF0EW01.AF0EW-ISTK-SW = "N"; /* Not an in stock style*/
  AF0EW01.AF0EW-MULTI-PCT-SW = "N"; /* Only 1 non 0 value for pct*/
  AF0EW01.AF0EW-OLD-PCT = 0; /* Saved color in stock pct*/
  AF0ES1C(); /* Open AFCLR*/
  AF0ES33(); /* get a row*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0
   && AF0EW01.AF0EW-MULTI-PCT-SW == "N") /* while still rows and only 1 pct*/
    ;
    if (VAFCLR02.AF-IN-STK-PCT == 0)
      /* next sentence*/
    else /* an in stock style*/
      AF0EW01.AF0EW-ISTK-SW = "Y"; /* Is an in stock style*/
      ;
      if (AF0EW01.AF0EW-OLD-PCT == 0)
        AF0EW01.AF0EW-OLD-PCT = VAFCLR02.AF-IN-STK-PCT;
      else
        ;
        if (VAFCLR02.AF-IN-STK-PCT != AF0EW01.AF0EW-OLD-PCT)
          AF0EW01.AF0EW-MULTI-PCT-SW = "Y"; /* more than one pct value*/
        end
        ;
      end
      ;
    end
    ;
    AF0ES33(); /* get a row*/
  end
  ;
  AF0ES1E(); /* close cursor afclr*/
end // end AF0E115

// Format and display the map
Function AF0E120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0EW01.AF0EWPND != "Y" /* No pop-up windows active*/
   && AFWREC.AFWFIRST != " ") /* or Not the first time*/
    ;
    if (converseVar.validationMsgNum == 0 /* No error found*/
     && converseVar.eventKey not pf14)    /* Status change not requested*/
      ;
      AF0E121(); /* Format the data on the map*/
      ;
    else
      ;
      AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0EM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0EM001 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF0EM001 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF0EM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0EM001.CAITEM; /* Application data*/
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Reset AF9REC First Time Through Indicator*/
   /* ----------------------------------------------------------*/
  ;
  AF9REC.AF9FSTID = "Y"; /* Fst time indicator to 'Y'(es)*/
  ;
  ;
  ;
end // end AF0E120

// Format screen/page/add unit
Function AF0E121()
  ;
   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/
  ;
  set AF0EM001 initial; /* M001 input/output area*/
  ;
  ;
  ;
   /* *===============================**/
   /* *  Check Security Requirements  **/
   /* *===============================**/
  ;
  if (COMMAREA.CACHGFL == "N" /* User not allowed to update*/
   || AFWREC.AFWIDX3 == 0)    /* No Color rows exist*/
    ;
    set AF0EM001.AF2FSTUN skip;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 9) /* Protect enterable fields*/
      set AF0EM001.AF5CLRPT[AFWIDX5] skip; /* Clr pcent fld*/
      set AF0EM001.AF5ADBFL[AFWIDX5] skip; /* Add buy fld*/
      set AF0EM001.XOWCD[AFWIDX5] skip;
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    ;
  end
  ;
  ;
  if (COMMAREA.CAADDFL == "N") /* User not allowed to add*/
    set AF0EM001.AF0EMP14 skip, invisible; /* Mask PF14 function*/
  end
  ;
  ;
   /* *=====================**/
   /* *  Format Map Header  **/
   /* *=====================**/
  ;
                /* (Format Header Start Flds)*/
  AF0EM001.XXXUSER = AF0EW01.AF0EWUSR; /* Forecaster id*/
  AF0EM001.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0EM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0EM001.XPRCD = AF0EW01.AF0EWTYP; /* Start type cd*/
  AF0EM001.XGACD = AF0EW01.AF0EWGA; /* Start G/A cd*/
  AF0EM001.XPLCD = AF0EW01.AF0EWPLN; /* Start line cd*/
  AF0EM001.XPCCD = AF0EW01.AF0EWCAT; /* Start CAT cd*/
  AF0EM001.XDVCD = AF0EW01.AF0EWDIV; /* Start DIV cd*/
  AF0EM001.XSUCD = AF0EW01.AF0EWSIL; /* Start SIL cd*/
  AF0EM001.SY1STNBR = AF0EW01.AF0EWSTY; /* Start Style no.*/
  AF0EM001.XLCCD[1] = AF0EW01.XLCCD[1];
  AF0EM001.XLCCD[2] = AF0EW01.XLCCD[2];
  AF0EM001.XLCCD[3] = AF0EW01.XLCCD[3];
  AF0EM001.XLCCD[4] = AF0EW01.XLCCD[4];
  AF0EM001.AF0EMXOW = AF0EW01.AF0EWXOW;
  AF0EM001.XXXSTAT = AF0EW01.XXXSTAT; /* Start Status no.*/
  AF0EM001.AF0EM-BLNK-FL = AF0EW01.AF0EW-BLNK-FL; /* Start Status no.*/
  if (AF0EM001.AF0EMXOW != "00")
    set AF0EM001.AF0EM-ISTK-LIT skip, invisible;
    set AF0EM001.AF0EM-ISTK-PCT-LIT skip, invisible;
    set AF0EM001.AF-IN-STK-PCT skip, invisible;
  else
    AF0EM001.AF-IN-STK-PCT = AF0EW02.AF0EW-STY-ISTK-PCT;
  end
  ;
             /* (Format Header Description Flds)*/
  AF0EM001.XPRABRV = AF0EW01.AF0EWDPR; /* type desc*/
  AF0EM001.XGAABRV = AF0EW01.AF0EWDGA; /* G/A desc*/
  AF0EM001.XPLABRV = AF0EW01.AF0EWDPL; /* line desc*/
  AF0EM001.XPCABRV = AF0EW01.AF0EWDPC; /* CAT desc*/
  AF0EM001.XSUABRV = AF0EW01.AF0EWDSL; /* SIL desc*/
  AF0EM001.XDVDESC = AF0EW01.AF0EWDDV; /* SIL desc*/
  if (AF0EM001.AF0EMXOW == "**" /* corporate look*/
   || AF0EM001.AF0EMXOW == " ")
    AF0EM001.XOWABRV = "ALL";
  else
    AF0EM001.XOWABRV = AF0EW01.XOWABRV; /* owner group desc*/
    /* MOVE AF0EW01.AF0EWDSY TO AF0EM001.SY1SSTNM; DIV desc*/
    /* MOVE AF0EW01.AF0EWSTD TO AF0EM001.AF0EMSTD; Active desc*/
  end
  ;
  if (AF9REC.AF9GAIXM > 0 /* XGA Combination index valid*/
   && AF9REC.AF9TPIXM > 0 /* XPR Combination index valid*/
   && AF9REC.AF9LNIXM > 0 /* XPL Combination index valid*/
   && AF9REC.AF9PCIXM > 0 /* XPC Combination index valid*/
   && AF9REC.AF9SUIXM > 0) /* XSU Combination index valid*/
    ;
               /* (Format Current Combination Flds)*/
    AF0EM001.AF0EMDCD = XP1REC.XDVCD; /* Cur DIV cd*/
    AF0EM001.AF0EMTCD = XP1REC.XPRCD; /* Cur TYP cd*/
    AF0EM001.AF0EMGCD = XP1REC.XGACD; /* Cur G/A cd*/
    AF0EM001.AF0EMLCD = XP1REC.XPLCD; /* Cur LIN cd*/
    AF0EM001.AF0EMCCD = XP1REC.XPCCD; /* Cur CAT cd*/
    AF0EM001.AF0EMSCD = XP1REC.XSUCD; /* Cur SIL cd*/
    ;
           /* (Format Current Combination Description Flds)*/
    /* MOVE XP1REC.XGAABRV TO AF0EM001.XGAABRV; Cur G/A desc*/
    /* MOVE XP1REC.XPCABRV TO AF0EM001.XPCABRV; Cur CAT desc*/
    /* MOVE XP1REC.XSUABRV TO AF0EM001.XSUABRV; Cur SIL desc*/
    ;
  end
  ;
  ;
  ;
   /* *=============================**/
   /* *  Process Color Detail Recs  **/
   /* *=============================**/
  ;
  ;
  if (AFWREC.AFWIDX3 <= 0) /* No color rows exist*/
    ;
    AFWREC.AFWIXM = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIXM <= 9) /* Dark,prot unused lines*/
      ;
      set AF0EM001.AF0EMSTA[AFWIXM] skip, invisible; /* Stat*/
      set AF0EM001.AF0EMSTY[AFWIXM] skip, invisible; /* Style*/
      set AF0EM001.AF0EMSNM[AFWIXM] skip, invisible; /* Style name*/
      set AF0EM001.AF0EMCLR[AFWIXM] skip, invisible; /* Clr*/
      set AF0EM001.AF0EMCDS[AFWIXM] skip, invisible; /* Desc*/
      set AF0EM001.AF5CLRPT[AFWIXM] skip, invisible; /* Pcnt*/
      set AF0EM001.AF5ADBFL[AFWIXM] skip, invisible; /* Buyf*/
      set AF0EM001.AF0EMFUN[AFWIXM] skip, invisible; /* Fcsted units*/
      set AF0EM001.AF0EMCFD[AFWIXM] skip, invisible; /* Fcst clr dlrs*/
      set AF0EM001.XOWCD[AFWIXM] skip, invisible; /* owner group*/
      ;
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      ;
    end
    ;
    if (converseVar.eventKey is pf7 /* Page back requested*/
     || converseVar.eventKey is pf8) /* Page forward requested*/
      ;
      converseLib.validationFailed(15); /* Indicate no data found to display*/
      AFWREC.AFWPRCSN = "121 "; /* Process number*/
      ;
      return; /* Exit to redisplay map*/
      ;
    else
      ;
      return; /* Exit to redisplay map*/
      ;
    end
    ;
  end
  ;
  ;
  ;
  if (AFWREC.AFWIDX3 > 0) /* Color rows exist*/
    ;
    ;
     /* *=======================**/
     /* *  Obtain Desired Page  **/
     /* *=======================**/
    ;
    if (AF0EW01.AF0EWPGV <= 0) /* No previous page*/
      ;
      AF0EW01.AF0EWPGV = 1; /* Set to page one*/
      converseLib.validationFailed(2); /* Indicate no prev page*/
      AFWREC.AFWPRCSN = "121 "; /* Process number*/
      ;
    else
      ;
      if (AF0EW01.AF0EWPGV > AF0EW01.AF0EWPGM) /* Greater than max page*/
        AF0EW01.AF0EWPGV = AF0EW01.AF0EWPGM; /* Set max page*/
        converseLib.validationFailed(3); /* Indicate no more pages to disp*/
        AFWREC.AFWPRCSN = "121 "; /* Process number*/
      end
      ;
    end
    ;
    ;
    ;
     /* *===========================**/
     /* *  Check Color Pcent Totals **/
     /* *===========================**/
    ;
    AFWREC.AFWIDX4 = 1; /* Set Loop index*/
    AF0EW01.AF0EWCPT = 0; /* Reset accumulator*/
    ;
    if (converseVar.eventKey is pf7 /* PF7 was pressed*/
     || converseVar.eventKey is pf8) /* pf8 was pressed*/
      while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3) /* LE Max Color Recs*/
        AF0EW01.AF0EWCPT = AF0EW01.AF0EWCPT + AF0EW02.AF0EWCLP[AFWIDX4];
        AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
      end
    else
      while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3) /* LE Max Color Recs*/
        ;
        AF0EW01.AF0EWCPT = AF0EW01.AF0EWCPT + AF0EW02.AF0EWCLW[AFWIDX4];
        AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
      end
    end
    ;
    AF0EM001.AF0EMCPT = AF0EW01.AF0EWCPT; /* Total color pcents*/
    ;
    if (AF0EW01.AF0EWCPT != 100.00 /* Pcent not equal 100*/
     && AF0EW01.AF0EWCPT != 0)    
      set AF0EM001.AF0EMCPT skip, bold; /* Highlight fld*/
    else
      set AF0EM001.AF0EMCPT skip; /* Reset fld*/
    end
    ;
    if (AF0EW02.AF0EWFUN != AF0EW01.AF0EWTUN /* Fcst sty qty changed*/
     && AF0EW01.AF0EWTUN != 0)              
      AF0EM001.AF2FSTUN = AF0EW01.AF0EWTUN; /* Fcst sty qtys*/
    else
      AF0EM001.AF2FSTUN = AF0EW02.AF0EWFUN; /* Fcst sty qtys*/
    end
    AF0EM001.SY5PRCUN = AF0EW01.AF0EWPRC; /* wholesale price*/
    ;
    ;
     /* *================================**/
     /* *  Move Page Detail Flds to Map  **/
     /* *================================**/
    ;
    AFWREC.AFWIXM = 1; /* Set map loop index*/
    ;
    AF0EW01.AF0EWPSA = AF0EW01.AF0EWPGV * 9 - 9 + 1; /* Start addr*/
    ;
    if (AF0EW01.AF0EWPGV == AF0EW01.AF0EWPGM) /* Last page*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0EW01.AF0EWPSA + 1; /* Max lines*/
    else
      AFWREC.AFWIDX5 = 9; /* Max lines to display*/
    end
    ;
    ;
    while (AFWREC.AFWIXM <= AFWREC.AFWIDX5) /* Fill up page*/
      ;
      AF0EM001.AF0EMSTA[AFWIXM] = AF0EW02.AF0EWSTA[AF0EWPSA]; /* Stat*/
      ;
      if (AFWREC.AFWIXM == 1)
        AF0EM001.AF0EMSTY[AFWIXM] = XP1REC.SY1STNBR; /* Style*/
        AF0EM001.AF0EMSNM[AFWIXM] = XP1REC.SY1SSTNM; /* Style name*/
        AF0EM001.XOWCD[AFWIXM] = AF0EW02.XOWCD[AF0EWPSA]; /* own grp*/
      else
        AF0EM001.AF0EMSTY[AFWIXM] = " "; /* Style*/
        AF0EM001.AF0EMSNM[AFWIXM] = " "; /* Style name*/
      end
      ;
      AF0EM001.AF0EMCLR[AFWIXM] = AF0EW02.AF0EWCLR[AF0EWPSA]; /* Clr*/
      AF0EM001.AF0EMCDS[AFWIXM] = AF0EW02.AF0EWCLD[AF0EWPSA]; /* Desc*/
      ;
      if (AF0EW01.AF0EW-ISTK-SW == "Y")
        set AF0EM001.AF0EM-ISTK-LIT skip, bold;
      else
        set AF0EM001.AF0EM-ISTK-LIT skip, invisible;
      end
      ;
      if (converseVar.eventKey is pf7 /* PF7 was pressed*/
       || converseVar.eventKey is pf8) /* PF8 was pressed*/
        AF0EM001.AF5CLRPT[AFWIXM] = AF0EW02.AF0EWCLP[AF0EWPSA]; /* Pcnt*/
      else
        AF0EM001.AF5CLRPT[AFWIXM] = AF0EW02.AF0EWCLW[AF0EWPSA]; /* Pcnt*/
      end
      ;
      if (AF0EM001.XOWCD[1] == "**") /* corp look*/
        set AF0EM001.AF5CLRPT[AFWIXM] skip; /* protect*/
        set AF0EM001.AF2FSTUN skip;
      end
      ;
      if (AF0EM001.XOWCD[1] != "**" /* corp look*/
       && AF0EM001.AF0EM-BLNK-FL == "Y") /* a blank*/
        set AF0EM001.AF5ADBFL[AFWIXM] skip; /* protect*/
      end
      ;
      if (AF0EW02.AF0EWFUN != 0)
        AF0EM001.AF0EMFUN[AFWIXM] = AF0EM001.AF5CLRPT[AFWIXM] *         AF0EW02.AF0EWFUN;
        AF0EM001.AF0EMFUN[AFWIXM] = mathLib.round(AF0EM001.AF0EMFUN[AFWIXM] / 100, -mathLib.decimals(AF0EM001.AF0EMFUN[AFWIXM]));
      else
        AF0EM001.AF0EMFUN[AFWIXM] = 0;
      end
      ;
      if (AF0EW01.AF0EWPRC != 0)
        AF0EW02.AF0EWFST = AF0EW01.AF0EWPRC *         AF0EW02.AF0EWFUN;
      else
        AF0EW02.AF0EWFST = 0;
      end
      ;
      AF0EM001.AF5ADBFL[AFWIXM] = AF0EW02.AF0EWADB[AF0EWPSA]; /* Buyf*/
      /* MOVE AF0EW02.AF0EWFST TO AF0EM001.AF2FSTDL(AFWIXM)Fcststydlr*/
      ;
      AF0EW01.AF0EWPCT = AF0EW02.AF0EWCLW[AF0EWPSA] / 100; /* Act pct value*/
      AF0EW01.AF0EWCFD = AF0EW02.AF0EWFST * AF0EW01.AF0EWPCT; /* Clr dlrs*/
      ;
      AF0EM001.AF0EMCFD[AFWIXM] = AF0EW01.AF0EWCFD; /* Fcst clr dlrs*/
      ;
      AF0EW01.AF0EWPSA = AF0EW01.AF0EWPSA + 1; /* Next record*/
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      ;
    end
    ;
    ;
    /* ------------------------------------------------------------*/
      /* In cases where invalid update/s on  percentage amt fld/s*/
      /* has been made and PA2 was pressed to restore the original*/
      /* contents of the percentage flds, the ff. code will restore*/
      /* the percentage fields from an alternate save area and*/
      /* reset indicators which trigger the update process.*/
    /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is pa2)
      move AF0EW02.AF0EWSTW to AF0EW02.AF0EWSTA[1] for all; /* Restore*/
      move AF0EW02.AF0EWCLW to AF0EW02.AF0EWCLP[1] for all; /* Restore*/
      move AF0EW02.AF0EWADW to AF0EW02.AF0EWADB[1] for all; /* Restore*/
      move " " to AF0EW02.AF0EWCHG[1] for all; /* Reset change indicator*/
      AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
    end
    ;
    ;
    ;
     /* *===================**/
     /* *  Position Cursor  **/
     /* *===================**/
    ;
    if ((COMMAREA.CACHGFL == "Y" /* Updates allowed*/
     || COMMAREA.CAADDFL == "Y") /* Adds allowed*/
     && AF0EM001.XOWCD[1] != "**")
      ;
      if (converseVar.eventKey is pf14) /* Status update req*/
        set AF0EM001.AF0EMSTA[1] cursor; /* Position cursor*/
      else
        set AF0EM001.AF2FSTUN cursor; /* Position cursor*/
      end
      ;
    else /* (No updates or adds allowed)*/
      ;
      set AF0EM001.XSECD cursor; /* Position cursor*/
      ;
    end
    ;
    ;
     /* *============================================**/
     /* *  Set Protect,Dark All Unused Detail Lines  **/
     /* *============================================**/
    ;
    if (AF0EW01.AF0EWPGV == AF0EW01.AF0EWPGM) /* Last page*/
      ;
      AF0EW01.AF0EWPSA = AF0EW01.AF0EWPGV * 9 - 9 + 1; /* Start idx*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0EW01.AF0EWPSA + 1; /* Max*/
      ;
      AFWREC.AFWIXM = AFWREC.AFWIDX5 + 1; /* Set loop index start*/
      ;
      while (AFWREC.AFWIXM <= 9) /* Dark,prot unused lines*/
        ;
        set AF0EM001.AF0EMSTA[AFWIXM] skip, invisible; /* Stat*/
        set AF0EM001.AF0EMSTY[AFWIXM] skip, invisible; /* Style*/
        set AF0EM001.AF0EMSNM[AFWIXM] skip, invisible; /* Style name*/
        set AF0EM001.AF0EMCLR[AFWIXM] skip, invisible; /* Clr*/
        set AF0EM001.AF0EMCDS[AFWIXM] skip, invisible; /* Desc*/
        set AF0EM001.AF5CLRPT[AFWIXM] skip, invisible; /* Pcnt*/
        set AF0EM001.AF5ADBFL[AFWIXM] skip, invisible; /* Buyf*/
        set AF0EM001.AF0EMFUN[AFWIXM] skip, invisible; /* Fcsted units*/
        set AF0EM001.AF0EMCFD[AFWIXM] skip, invisible; /* Fcst clr dlrs*/
        set AF0EM001.XOWCD[AFWIXM] skip, invisible; /* owner group*/
        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
        ;
      end
      ;
    end
    ;
    ;
  end
  ;
  ;
  ;
end // end AF0E121

// Check attention identifier
Function AF0E130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AF0EM001 initial; /* Clear the map fields*/
    AF0EW01.AF0EWTFT = 0;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AF0EM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0EM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0EM001.CAITEM; /* Application data*/
      ;
      XP1REC.XDVCD = AF0EW01.AF0EWDIV; /* Restore start XDVCD*/
      XP1REC.XPRCD = AF0EW01.AF0EWTYP; /* Restore start XPRCD*/
      XP1REC.XGACD = AF0EW01.AF0EWGA; /* Restore start XGACD*/
      XP1REC.XPLCD = AF0EW01.AF0EWPLN; /* Restore start XPLCD*/
      XP1REC.XPCCD = AF0EW01.AF0EWCAT; /* Restore start xpcCD*/
      XP1REC.XSUCD = AF0EW01.AF0EWSIL; /* Restore start xsuCD*/
      XP1REC.SY1STNBR = AF0EW01.SY1STNBR; /* Restore start style*/
      XP1REC.XLCCD[1] = AF0EM001.XLCCD[1];
      XP1REC.XLCCD[2] = AF0EM001.XLCCD[2];
      XP1REC.XLCCD[3] = AF0EM001.XLCCD[3];
      XP1REC.XLCCD[4] = AF0EM001.XLCCD[4];
      ;
      AF0EW01.AF0EWDIV = " "; /* Clear start XDVCD*/
      AF0EW01.AF0EWTYP = " "; /* Clear start XPRCD*/
      AF0EW01.AF0EWGA = " "; /* Clear start XGACD*/
      AF0EW01.AF0EWPLN = " "; /* Clear start XPLCD*/
      AF0EW01.AF0EWCAT = " "; /* Clear start xpcCD*/
      AF0EW01.AF0EWSIL = " "; /* Clear start xsuCD*/
      AF0EW01.SY1STNBR = " "; /* Clear start style*/
      ;
      AF0EW01.AF0EWDDV = " "; /* Clear DIV desc*/
      AF0EW01.AF0EWDPR = " "; /* Clear TYP desc*/
      AF0EW01.AF0EWDGA = " "; /* Clear G/A desc*/
      AF0EW01.AF0EWDPL = " "; /* Clear LIN desc*/
      AF0EW01.AF0EWDPC = " "; /* Clear CAT desc*/
      AF0EW01.AF0EWDSL = " "; /* Clear SIL desc*/
      AF0EW01.AF0EWDSY = " "; /* Clear Style desc*/
      ;
      XSAFS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set AF0EM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AF0EM001.CAITEM > " ") /* Application data was entered*/
    set AF0EM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0EM001"; /* Appl find code*/
    end
    ;
    XP1REC.XDVCD = AF0EW01.AF0EWDIV; /* Restore start XDVCD*/
    XP1REC.XPRCD = AF0EW01.AF0EWTYP; /* Restore start XPRCD*/
    XP1REC.XGACD = AF0EW01.AF0EWGA; /* Restore start XGACD*/
    XP1REC.XPLCD = AF0EW01.AF0EWPLN; /* Restore start XPLCD*/
    XP1REC.XPCCD = AF0EW01.AF0EWCAT; /* Restore start xpcCD*/
    XP1REC.XSUCD = AF0EW01.AF0EWSIL; /* Restore start xsuCD*/
    XP1REC.SY1STNBR = AF0EW01.SY1STNBR; /* Restore start style*/
    ;
    AF0EW01.AF0EWDIV = " "; /* Clear start XDVCD*/
    AF0EW01.AF0EWTYP = " "; /* Clear start XPRCD*/
    AF0EW01.AF0EWGA = " "; /* Clear start XGACD*/
    AF0EW01.AF0EWPLN = " "; /* Clear start XPLCD*/
    AF0EW01.AF0EWCAT = " "; /* Clear start xpcCD*/
    AF0EW01.AF0EWSIL = " "; /* Clear start xsuCD*/
    AF0EW01.SY1STNBR = " "; /* Clear start style*/
    ;
    AF0EW01.AF0EWDDV = " "; /* Clear DIV desc*/
    AF0EW01.AF0EWDPR = " "; /* Clear TYP desc*/
    AF0EW01.AF0EWDGA = " "; /* Clear G/A desc*/
    AF0EW01.AF0EWDPL = " "; /* Clear LIN desc*/
    AF0EW01.AF0EWDPC = " "; /* Clear CAT desc*/
    AF0EW01.AF0EWDSL = " "; /* Clear SIL desc*/
    AF0EW01.AF0EWDSY = " "; /* Clear Style desc*/
    COMMAREA.CATOAP = "AF0M";
    XSAFS01(); /* Exit to another application*/
    COMMAREA.CACURRAP = "AF0A"; /* this is came back from xfer*/
    XSAFS01(); /* with security error*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf11  /* page right*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19) /* and PF19 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AFWREC.AFWFIRST == " ") /* First time through*/
    ;
    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    ;
    if (COMMAREA.CAADDFL == "N") /* Add not allowed*/
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    else
      ;
      if (AFWREC.AFWIDX3 > 0) /* Color records exist*/
        AFWREC.AFWIXM = 1; /* Set loop index*/
        AF0EW01.AF0EWPSA = AF0EW01.AF0EWPGV * 9 - 9 + 1; /* Start addr*/
        ;
        if (AF0EW01.AF0EWPGV == AF0EW01.AF0EWPGM) /* Last page*/
          AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0EW01.AF0EWPSA + 1; /* Max*/
        else
          AFWREC.AFWIDX5 = 9; /* Max lines to unprotect*/
        end
        ;
        while (AFWREC.AFWIXM <= AFWREC.AFWIDX5) /* Process whole page*/
          set AF0EM001.AF0EMSTA[AFWIXM] normal; /* Unprotect fld*/
          AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
        end
        ;
        set AF0EM001.AF0EMSTA[1] cursor; /* Set cursor position*/
        exit stack; /* Exit to redisplay map*/
      else
        AFWREC.AFWPRCSN = "130 "; /* Process number*/
        converseLib.validationFailed(4); /* Indicate invalid attention key*/
        exit stack; /* Exit to redisplay map*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   || converseVar.eventKey is pf16 /* PF16 was pressed*/
   || converseVar.eventKey is pf17 /* PF17 was pressed*/
   || converseVar.eventKey is pf18 /* PF18 was pressed*/
   || converseVar.eventKey is pf19) /* PF19 was pressed*/
    ;
    if (AF9REC.AF9GAG99 == "Y" /* Last G/A code retrieved*/
     || AF9REC.AF9TYP99 == "Y" /* Last TYP code retrieved*/
     || AF9REC.AF9LIN99 == "Y" /* Last LIN code retrieved*/
     || AF9REC.AF9CAT99 == "Y" /* Last CAT code retrieved*/
     || AF9REC.AF9SIL99 == "Y") /* Last SIL code retrieved*/
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(15); /* Indicate no data to display*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
end // end AF0E130

// Reset hilght flds; disp pop-up
Function AF0E140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0EM001.XXXUSER normal; /* Forecaster cd*/
  set AF0EM001.XSECD normal; /* Sesn cd*/
  set AF0EM001.XSNYR normal; /* Sesn yr*/
  set AF0EM001.XDVCD normal; /* Division code*/
  set AF0EM001.XPRCD normal; /* Type code*/
  set AF0EM001.XGACD normal; /* Gender Age cd*/
  set AF0EM001.XPLCD normal; /* Line code*/
  set AF0EM001.XPCCD normal; /* Category cd*/
  set AF0EM001.XSUCD normal; /* Silhouette cd*/
  set AF0EM001.XLCCD[1] normal; /* Life cycle select cd 1*/
  set AF0EM001.XLCCD[2] normal; /* Life cycle select cd 2*/
  set AF0EM001.XLCCD[3] normal; /* Life cycle select cd 3*/
  set AF0EM001.XLCCD[4] normal; /* Life cycle select cd 4*/
  set AF0EM001.SY1STNBR normal; /* Style no.*/
  set AF0EM001.XXXSTAT normal; /* Status cd*/
  set AF0EM001.AF0EMXOW normal; /* owner group*/
  set AF0EM001.AF0EM-BLNK-FL normal; /* blank only flag*/
  set AF0EM001.AF0EM-ISTK-LIT initialAttributes;
  AF0EM001.XXXPRCNM = "AF0E    "; /* Reset process name*/
  set AF0EM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0EM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/
  ;
  if (AF0EM001.XSECD == "?"
   || AF0EM001.XGACD == "?"
   || AF0EM001.XPCCD == "?"
   || AF0EM001.XSUCD == "?"
   || AF0EM001.XPRCD == "?"
   || AF0EM001.XPLCD == "?"
   || AF0EM001.XDVCD == "?"
   || AF0EM001.XLCCD[1] == "?"
   || AF0EM001.AF0EMXOW == "?")
    ;
    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    AF0EW01.AF0EWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/
  ;
  if (AF0EM001.XSECD == "?") /* Pop-up window requested*/
    XP1REC.XSECD = AF0EM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSSE(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0EM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XDVCD   * Division cd*/
   /* *============================**/
  ;
  if (AF0EM001.XDVCD == "?") /* Pop-up window requested*/
    XP1REC.XDVCD = AF0EM001.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSDV(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0EM001.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
      AF0EM001.XDVDESC = XP1REC.XDVDESC; /* Move desc to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product type cd*/
   /* *============================**/
  ;
  if (AF0EM001.XPRCD == "?") /* Pop-up window requested*/
    XP1REC.XPRCD = AF0EM001.XPRCD; /* Set XP1REC field*/
    XP1REC.XPRCD = "03"; /* Display Apparel only*/
    XSAFSPR(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0EM001.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
      AF0EM001.XPRABRV = XP1REC.XPRABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/
  ;
  if (AF0EM001.XGACD == "?") /* Pop-up window requested*/
    XP1REC.XGACD = AF0EM001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSGA(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0EM001.XGACD = XP1REC.XGACD; /* Move selected code to map*/
      AF0EM001.XGAABRV = XP1REC.XGAABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product line cd*/
   /* *============================**/
  ;
  if (AF0EM001.XPLCD == "?") /* Pop-up window requested*/
    XP1REC.XPLCD = AF0EM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPL(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0EM001.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
      AF0EM001.XPLABRV = XP1REC.XPLABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XLCCD   * Life cycle code*/
   /* *============================**/
  ;
  if (AF0EM001.XLCCD[1] == "?") /* Pop-up window requested*/
    XP1REC.XLCCD = AF0EM001.XLCCD[1]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSLC(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XLCCD == "?") /* Check results*/
      XP1REC.XLCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0EM001.XLCCD[1] = XP1REC.XLCCD; /* Move selected code to map*/
    end
    ;
  end
  ;
   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/
  ;
  if (AF0EM001.XPCCD == "?") /* Pop-up window requested*/
    XP1REC.XPCCD = AF0EM001.XPCCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPC(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0EM001.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
      AF0EM001.XPCABRV = XP1REC.XPCABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Sihouette cd*/
   /* *=============================**/
  ;
  if (AF0EM001.XSUCD == "?") /* Pop-up window requested*/
    XP1REC.XSUCD = AF0EM001.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSSU(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0EM001.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/
      AF0EM001.XSUABRV = XP1REC.XSUABRV; /* Move desc to map*/
    end
    ;
  end
  ;
  if (AF0EM001.AF0EMXOW == "?") /* Pop-up window requested*/
    XP1REC.XOWCD = AF0EM001.AF0EMXOW; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* warehouse*/
    XSAFSOW(); /* Pop-up window func*/
    ;
    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0EM001.AF0EMXOW = XP1REC.XOWCD; /* Move selected code to map*/
      AF0EM001.XOWABRV = XP1REC.XOWABRV; /* Move desc to map*/
    end
    ;
  end
  ;
   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/
  ;
  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0EW01.AF0EWPND = "Y"; /* Activate pop-up window ind*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0E140

// Verify the entered data
Function AF0E150()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0E151(); /* Verify data entered*/
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors found*/
    ;
    AF0EW01.AF0EWCNF = "N"; /* Reset update confirm flag*/
    exit stack; /* Exit to redisplay map*/
    ;
  else /* (No errors)*/
    ;
    if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/
      ;
      AF0EW01.AF0EWCNF = "N"; /* Reset update confirm flag*/
      exit stack; /* Exit to redisplay map*/
      ;
    else /* (Selection criteria unchanged)*/
      ;
      AF0E152(); /* Verify any changed dtl data*/
      ;
    end
    ;
  end
end // end AF0E150

// Edit selection criteria
Function AF0E151()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *************************************************************/
  ;
  ;
  AF0EW01.AFWSWR = AFWREC.AFWSWR; /* Save data select setting*/
  ;
  AFWREC.AFWSWR = "N"; /* initialize switch to 'OFF'*/
  AFWREC.AFWFIRST = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* initialize msg hold area*/
  ;
  ;
  ;
   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/
  ;
  ;
   /* ----------------------- y2k out begin ---------------*/
   /* IF AF0EW01.AF0EWSTS NE AF0EM001.XXXSTAT  /* Start Status no.*/
    /* OR AF0EW01.AF0EWSTY NE AF0EM001.SY1STNBR  /* Start Style no.*/
    /* OR AF0EW01.AF0EWSIL NE AF0EM001.XSUCD  /* Start SIL cd*/
    /* OR AF0EW01.AF0EWCAT NE AF0EM001.XPCCD  /* Start CAT cd*/
    /* OR AF0EW01.AF0EWPLN NE AF0EM001.XPLCD  /* Start product line cd*/
    /* OR AF0EW01.AF0EWGA NE AF0EM001.XGACD   /* Start G/A cd*/
    /* OR AF0EW01.AF0EWTYP NE AF0EM001.XPRCD  /* Start product type cd*/
    /* OR XP1REC.XDVCD NE AF0EM001.XDVCD      /* start division code*/
    /* OR XP1REC.XSNYR NE AF0EM001.XSNYR      /* Season yr*/
        /* y2k:  removed line below for year 2000*/
    /* OR AF0EM001.XSNYR EQ 0          /* Map fld zeroed out*/
    /* OR XP1REC.XSECD NE AF0EM001.XSECD      /* Season cd*/
    /* OR AF0EM001.XSECD EQ ' '        /* Map fld spaced out*/
    /* OR AF0EW01.AF0EWUSR NE AF0EM001.XXXUSER  /* Forecaster cd*/
    /* OR AF0EW01.XLCCD(1) NE AF0EM001.XLCCD(1)*/
    /* OR AF0EW01.XLCCD(2) NE AF0EM001.XLCCD(2)*/
    /* OR AF0EW01.XLCCD(3) NE AF0EM001.XLCCD(3)*/
    /* OR AF0EW01.XLCCD(4) NE AF0EM001.XLCCD(4)*/
    /* OR AF0EW01.AF0EWXOW NE AF0EM001.AF0EMXOW*/
    /* OR AF0EW01.AF0EW-BLNK-FL NE AF0EM001.AF0EM-BLNK-FL;*/
    /* MOVE 'Y' TO AFWREC.AFWSWR;      /* New criteria entered*/
    /* MOVE 0 TO AF0EW01.AF0EWTFT;*/
   /* END;*/
   /* ----------------------- y2k out end -----------------*/
   /* ----------------------- y2k in begin ----------------*/
  if (AF0EW01.AF0EWSTS != AF0EM001.XXXSTAT  /* Start Status no.*/
   || AF0EW01.AF0EWSTY != AF0EM001.SY1STNBR /* Start Style no.*/
   || AF0EW01.AF0EWSIL != AF0EM001.XSUCD    /* Start SIL cd*/
   || AF0EW01.AF0EWCAT != AF0EM001.XPCCD    /* Start CAT cd*/
   || AF0EW01.AF0EWPLN != AF0EM001.XPLCD    /* Start product line cd*/
   || AF0EW01.AF0EWGA != AF0EM001.XGACD     /* Start G/A cd*/
   || AF0EW01.AF0EWTYP != AF0EM001.XPRCD    /* Start product type cd*/
   || XP1REC.XDVCD != AF0EM001.XDVCD        /* start division code*/
   || XP1REC.XSNYR != AF0EM001.XSNYR        /* Season yr*/
   || XP1REC.XSECD != AF0EM001.XSECD        /* Season cd*/
   || AF0EM001.XSECD == " "                 /* Map fld spaced out*/
   || AF0EW01.AF0EWUSR != AF0EM001.XXXUSER  /* Forecaster cd*/
   || AF0EW01.XLCCD[1] != AF0EM001.XLCCD[1] 
   || AF0EW01.XLCCD[2] != AF0EM001.XLCCD[2] 
   || AF0EW01.XLCCD[3] != AF0EM001.XLCCD[3] 
   || AF0EW01.XLCCD[4] != AF0EM001.XLCCD[4] 
   || AF0EW01.AF0EWXOW != AF0EM001.AF0EMXOW 
   || AF0EW01.AF0EW-BLNK-FL != AF0EM001.AF0EM-BLNK-FL)
    AFWREC.AFWSWR = "Y"; /* New criteria entered*/
    AF0EW01.AF0EWTFT = 0;
  end
   /* ----------------------- y2k in  end -----------------*/
  ;
   /* *============================**/
   /* * Check End of G/A Indicator **/
   /* *============================**/
  ;
  if (AF9REC.AF9TYP99 == "Y" /* No more type codes to process*/
   && AFWREC.AFWSWR == "N")  /* No new keys entered*/
    converseLib.validationFailed(15); /* Indicate no more data*/
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    exit stack; /* Exit to reselect data*/
  end
  ;
  ;
   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/
  ;
  if (AFWREC.AFWSWR == "Y" /* New keys entered*/
   && converseVar.eventKey not enter) /* Enter key not pressed*/
    converseLib.validationFailed(4); /* Request not permitted*/
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    exit stack; /* Exit to reselect data*/
  end
  ;
   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/
  ;
  if (AFWREC.AFWSWR == "Y") /* New selection criteria entered*/
    AF0ES10(); /* Edit season yr*/
    if (XP1REC.XP1MNO == 0) /* No validation errors*/
      AF0ES23(); /* Edit blank only fl*/
      AF0ES22(); /* Edit owner group cd*/
      AF0ES02(); /* Edit status cd*/
      AF0ES16(); /* Edit life cycle cd*/
      AF0ES17(); /* Edit division*/
      AF0ES03(); /* Edit style no.*/
      AF0ES07(); /* Edit silhouette cd*/
      AF0ES08(); /* Edit category cd*/
      AF0ES18(); /* Edit product line cd*/
      AF0ES09(); /* Edit gender/age cd*/
      AF0ES19(); /* Edit product type*/
      AF0ES11(); /* Edit season cd*/
      AF0ES12(); /* Edit forecaster cd*/
    end
  end
  ;
   /* *====================================**/
   /* *  Check Criteria Validation Status  **/
   /* *====================================**/
  ;
  if (XP1REC.XP1MNO == 0 /* No validation errors*/
   && AFWREC.AFWSWR == "Y") /* New selection criteria entered*/
    XP1REC.XSUCD = AF0EW01.AF0EWSIL; /* New start SIL cd*/
    XP1REC.XPCCD = AF0EW01.AF0EWCAT; /* New start CAT cd*/
    XP1REC.XPLCD = AF0EW01.AF0EWPLN; /* New start line cd*/
    XP1REC.XGACD = AF0EW01.AF0EWGA; /* New start G/A cd*/
    XP1REC.XPRCD = AF0EW01.AF0EWTYP; /* New start type cd*/
  end
  ;
  ;
  if (XP1REC.XP1MNO != 0) /* Validation error present*/
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIDX5 <= 9) /* Protect/darken map display*/
      set AF0EM001.AF0EMSTA[AFWIDX5] skip, invisible; /* Row status*/
      set AF0EM001.AF0EMSTY[AFWIDX5] skip, invisible; /* Style no.*/
      set AF0EM001.XOWCD[AFWIDX5] skip, invisible; /* owner group*/
      set AF0EM001.AF0EMSNM[AFWIDX5] skip, invisible; /* Style nm*/
      set AF0EM001.AF0EMCLR[AFWIDX5] skip, invisible; /* Color cd*/
      set AF0EM001.AF0EMCDS[AFWIDX5] skip, invisible; /* Color desc*/
      set AF0EM001.AF5CLRPT[AFWIDX5] skip, invisible; /* Color pcent*/
      set AF0EM001.AF5ADBFL[AFWIDX5] skip, invisible; /* Add buy flag*/
      set AF0EM001.AF0EMFUN[AFWIDX5] skip, invisible; /* Fcst units*/
      set AF0EM001.AF0EMCFD[AFWIDX5] skip, invisible; /* Fcst color*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    ;
    AF0EM001.AF0EMCPT = 0; /* Clear color pcent total*/
    ;
  end
  ;
   /* *==========================**/
   /* *  Edit Map Detail Lines   **/
   /* *==========================**/
  ;
  if (AFWREC.AFWSWR == "N" /* No selection criteria changed*/
   && XP1REC.XP1MNO == 0)  /* and No validation errors*/
    AF0ES13(); /* Edit map detail lines*/
    ;
     /* *======================================**/
     /* *  Check Map Detail Validation Errors  **/
     /* *======================================**/
    ;
    if (XP1REC.XP1MNO != 0) /* Validation error present*/
      if (XP1REC.XP1MNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XP1REC.XP1MNO);
      end /* Set message for display*/
      AFWREC.AFWSWR = "N"; /* Do not select new data*/
    end
    ;
  end
  ;
  ;
  ;
  ;
end // end AF0E151

// Verify map detail items
Function AF0E152()
   /* ------------------------------------------------------------*/
   /* Check if updates were entered in the detail data.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0EW01.AF0EWADI = "0"; /* set valid flag indicator*/
  ;
  AFWREC.AFWIDX4 = 1; /* Set loop index*/
  ;
  ;
  while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3) /* Find updates*/
    ;
    if (AF0EW02.AF0EWCHG[AFWIDX4] == "Y") /* With valid updates*/
      AF0EW01.AF0EWADI = "Y"; /* Indicate w/ updates*/
    end
    ;
    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0E152

// Process valid input request/
Function AF0E160()
  if (converseVar.eventKey is pf11)
    AFWREC.AFWMAP = "2";
    return;
  end
   /* *============================**/
   /* *  Check Loop Limit Counter  **/
   /* *============================**/
  ;
  if (AF0EW01.AF0EWLCT > AF0EW01.AF0EWLIM) /* Style ctr loop limit reached*/
    AF0EW01.AF0EWLCT = 0; /* Reset loop ctr*/
  end
  ;
   /* *========================================**/
   /* * PF Key Processing                      **/
   /* *========================================**/
  ;
  if (converseVar.eventKey is pf15 /* PF15 (Next type)*/
   || converseVar.eventKey is pf16 /* PF16 (Next G/A)*/
   || converseVar.eventKey is pf17 /* or PF17 (Next Line)*/
   || converseVar.eventKey is pf18 /* or PF18 (Next Category)*/
   || converseVar.eventKey is pf19) /* or PF17 (Next Sihouette)*/
    AF0EW01.AF0EWCNF = "N"; /* Reset update confirm flag*/
    return; /* Execute next process*/
  end
  ;
   /* *==========================**/
   /* *  'ENTER' Key Processing  **/
   /* *==========================**/
  ;
  if (converseVar.eventKey is enter) /* enter key pressed*/
    ;
    if (AFWREC.AFWSWR == "Y") /* new data requested*/
      return; /* Execute next process*/
    else
      ;
      if (AF0EW02.AF0EWFUN != AF0EM001.AF2FSTUN /* new sty fcst u*/
       || AF0EW02.AF0EW-STY-ISTK-PCT != AF0EM001.AF-IN-STK-PCT)
        ;
        if (AF0EW02.AF0EW-STY-ISTK-PCT != AF0EM001.AF-IN-STK-PCT)
          AF2REC.AF-IN-STK-PCT = AF0EM001.AF-IN-STK-PCT;
          AFWREC.AFWIDX4 = 1;
        end
        ;
        if (AF0EW02.AF0EWFUN != AF0EM001.AF2FSTUN) /* new sty fcst u entered*/
          AF2REC.AFMFSTQT = AF0EM001.AF2FSTUN;
          AF0EW02.AF0EWFST = AF0EW01.AF0EWPRC * AF0EM001.AF2FSTUN;
          AF2REC.AF2FSTDL = AF0EW02.AF0EWFST;
          ;
          if (AF0EW02.AF2FSTST == "N" /* new status*/
           || AF0EW02.AF2FSTST == "I") /* inactive status*/
            AF2REC.AF2FSTST = "A"; /* active status*/
          else
            AF2REC.AF2FSTST = AF0EW02.AF2FSTST;
          end
          ;
          AF0EW01.AF0EWTFT = 0;
        end
        ;
        AFWREC.AFWIDX4 = 1;
        ;
        while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3)
          ;
          if (AF0EW02.XOWCD[AFWIDX4] == "00")
            AF0EW02.AF0EWCHG[AFWIDX4] = "Y";
            AF0EW01.AF0EWADI = "Y";
          end
          ;
          AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1;
        end
        ;
        AF0E162(); /* update afsty*/
        AF0EW01.AF0EWCNF = "U"; /* Indicate successful update*/
        AFWREC.AFWSWR = "Y"; /* Reselect updated record*/
        AFWREC.AFWNMO = 13; /* Indicate successful update*/
        AFWREC.AFWPRCSN = "160 "; /* Process number*/
      end
      ;
      if (AF0EW01.AF0EWADI == "Y") /* With valid updates*/
        ;
           /* (Check Color Pcent Totals)*/
        ;
        AFWREC.AFWIDX4 = 1; /* Set Loop index*/
        AF0EW01.AF0EWCPT = 0; /* Reset accumulator*/
        ;
        while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3) /* LE Max Color Recs*/
          ;
          if (AF0EW02.PG2SCRFL[AFWIDX4] == "B"
           && AF0EW02.XOWCD[AFWIDX4] == "00")
            AF0EW01.AF0EWCPT = 0;
          else
            AF0EW01.AF0EWCPT = AF0EW01.AF0EWCPT + AF0EW02.AF0EWCLP[AFWIDX4];
          end
          ;
          AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
        end
        ;
        AF0EM001.AF0EMCPT = AF0EW01.AF0EWCPT; /* Total color pcents*/
        ;
        if (AF0EW01.AF0EWCPT != 100.00 /* Pcent not equal 100*/
         && AF0EW01.AF0EWCPT != 0)     /* Pcent not equal 0*/
           /* **IF AF0EW01.AF0EWCNF NE 'Y'     ; Update not confirmed*/
          AF0EW01.AF0EWCNF = "Y"; /* set upd confirm flag*/
          AFWREC.AFWPRCSN = "160 "; /* Process number*/
          converseLib.validationFailed(40); /* Indicate not equal 100 or 0*/
          set AF0EM001.AF0EMCPT skip, bold; /* Highlight fld*/
          set AF0EM001.AF5CLRPT[1] cursor;
          return; /* Execute next process*/
           /* **END ;*/
          ;
        end
        ;
        if (AF0EW01.AF0EWCPT == 100.00 /* Pcent equal 100*/
         || AF0EW01.AF0EWCPT == 0)     /* Pcent equal 0*/
           /* **OR AF0EW01.AF0EWCNF EQ 'Y'     ; Upd flag set to confirm*/
          ;
             /* (Check Color Pcent Totals for Duplicates)*/
          ;
          AFWREC.AFWIDX4 = 1; /* Set Loop index*/
          AF0EW01.AF0EWCPT = 0; /* Reset accumulator*/
          ;
          while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3) /* LE Max Color Recs*/
            if (AF0EW02.AF0EWSTA[AFWIDX4] != AF0EW02.AF0EWSTW[AFWIDX4])
              AF0EW01.AF0EWCPT = AF0EW01.AF0EWCPT + 1; /* valid update*/
            else
              if (AF0EW02.AF0EWCLP[AFWIDX4] != AF0EW02.AF0EWCLW[AFWIDX4])
                AF0EW01.AF0EWCPT = AF0EW01.AF0EWCPT + 1; /* valid update*/
              else
                if (AF0EW02.AF0EWADB[AFWIDX4] != AF0EW02.AF0EWADW[AFWIDX4]
                )
                  AF0EW01.AF0EWCPT = AF0EW01.AF0EWCPT + 1; /* valid update*/
                else
                  if (AF0EW02.AF0EW-STY-ISTK-PCT != AF0EM001.AF-IN-STK-PCT
                  )
                    AF0EW01.AF0EWCPT = AF0EW01.AF0EWCPT + 1;
                                   /* valid update*/
                  else
                    if (AF0EW02.AF0EWFUN != AF0EM001.AF2FSTUN)
                      AF0EW01.AF0EWCPT = AF0EW01.AF0EWCPT + 1;
                                   /* valid update*/
                    end
                  end
                end
              end
            end
            AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
          end
          ;
          if (AF0EW01.AF0EWCPT == 0) /* Duplicates found*/
            AF0EW01.AF0EWDUP = "Y"; /* Set duplicates flag*/
            return; /* Exit to redisplay style*/
          end
          ;
          AF0E161(); /* Update DACAST.VAFCLR01*/
          AF0E163(); /* check for inactive update*/
          AF0EW01.AF0EWCNF = "U"; /* Indicate successful update*/
          AFWREC.AFWSWR = "Y"; /* Reselect updated record*/
          AFWREC.AFWNMO = 13; /* Indicate successful update*/
          AFWREC.AFWPRCSN = "160 "; /* Process number*/
          return; /* Execute next process*/
        end
        ;
      end
      ;
    end
    ;
  end
  ;
  if (AF0EW02.AF0EWFUN != AF0EM001.AF2FSTUN) /* new sty fcst u entered*/
    AF0EW01.AF0EWTUN = AF0EM001.AF2FSTUN;
    AF0EW02.AF0EWFST = AF0EM001.AF2FSTUN * AF0EW01.AF0EWPRC;
  else
    AF0EW01.AF0EWTUN = 0;
  end
   /* *=======================**/
   /* * 'PF7' Key Processing  **/
   /* *=======================**/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    AF0EW01.AF0EWPGV = AF0EW01.AF0EWPGV - 1; /* Back one page*/
    return; /* Execute next process*/
  end
  ;
   /* *=======================**/
   /* * 'PF8' Key Processing  **/
   /* *=======================**/
  ;
  if (converseVar.eventKey is pf8) /* Scroll fwd requested*/
    AF0EW01.AF0EWPGV = AF0EW01.AF0EWPGV + 1; /* Fwd one page*/
    return; /* Execute next process*/
  end
  ;
end // end AF0E160

// Process DACAST.VAFCLR01 Upds
Function AF0E161()
   /* ------------------------------------------------------------*/
   /* Update DACAST.VAFCLR01 rows from valid screen updates. All*/
    /* screen detail lines are scanned for records that have*/
    /* valid updates in them. If they have, then the correspon-*/
    /* ding DB rows are updated. Otherwise, they are bypassed.*/
   /* ------------------------------------------------------------*/
  ;
   /* *============================**/
   /* *  Get System Date and Time  **/
   /* *============================**/
  ;
  XX0XS01(); /* System date/time process*/
  ;
   /* *========================================**/
   /* *  Obtain Map Detail Records for Update  **/
   /* *========================================**/
  ;
  AF0EW01.AF0EWADI = "0"; /* set valid flag indicator*/
  AFWREC.AFWIDX4 = 1; /* Set loop index*/
  ;
  while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3) /* Find updates*/
    ;
    if (AF0EW02.AF0EWCHG[AFWIDX4] == "Y") /* With valid updates*/
      AF0ES14(); /* Update Color DB*/
    else
      ;
      if (AF0EW01.AF0EWCUI == "Y" /* Color % updates present*/
       && AF0EW02.AF0EWSTA[AFWIDX4] == "N") /* Color status new*/
        AF0ES14(); /* Update Color DB*/
      end
      ;
    end
    ;
    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop through*/
  end
  ;
  ;
end // end AF0E161

// update DACAST.VAFSTY01
Function AF0E162()
   /* ------------------------------------------------------------*/
   /* Update DACAST.VAFSTY01 row from valid screen updates.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *============================**/
   /* *  Get System Date and Time  **/
   /* *============================**/
  ;
  XX0XS01(); /* System date/time process*/
  ;
  ;
  ;
   /* *========================================**/
   /* *  Obtain Map Detail Records for Update  **/
   /* *========================================**/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/
  ;
  AF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AF2REC.AF2FSTDT = XX0XW01.XX0XWDAT; /* forecast $ change date*/
  AF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* *==============================**/
   /* *  Update DACAST.VAFSTY01 Row  **/
   /* *==============================**/
  ;
  try
    call "IO3510" ("U ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AFWREC.AFWSWR = "Y"; /* request new data*/
    AF0EW01.AF0EWCNF = "U"; /* successful update*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "162"; /* Process number*/
      AF0EW01.AF0EWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
        AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "162 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0E162

// check for all inactive colors
Function AF0E163()
  VAFCLR02.AF5FSCST = "I";
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFCLR01  **/
   /* *====================================**/
  ;
  try
    call "VAFCLR02" ("S2", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If not successful, abend*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || SQLCA.VAGen_SQLCODE != 0)      /* or not normal return code*/
    ;
    /* ------------------------------------------------------------*/
     /* If data not available, return an error message to the user.*/
     /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    if (sysVar.errorCode == "00000000") /* Call successful*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "163 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SELECT 2 TABLE ROW";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
   /* *=============================**/
   /* *  Access DACAST.VAFCLR01 DB  * Obtain color row*/
   /* *=============================**/
  ;
  try
    call "VAFCLR02" ("N2", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
  ;
   /* ------------------------------------------------------------*/
    /* If call successful, process the retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found -- no non inactive*/
                                   /* colors*/
      AF2REC.AF2FSTST = "I"; /* inactivate style status*/
      AF0E162(); /* update afsty row*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* If an active row found*/
        if (AF2REC.AF2FSTST == "I") /* If Style's status is Inactive*/
          AF2REC.AF2FSTST = "A"; /* Change to Active*/
          AF0E162(); /* update afsty row*/
        end
      end
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      ;
      if (SQLCA.VAGen_SQLCODE != 0) /* not good call*/
        converseLib.validationFailed(10); /* Indicate system error*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      ;
    end
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "163 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VAFCLR02" ("C2", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal retun code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "163 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0E163

// main process map 2
Function AF0E200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields.*/
   /* 5) Verify the entered data.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AF0E220(); /* Format and display the map*/
  ;
  AF0E230(); /* Check attention identifier*/
  ;
  AF0E240(); /* Reset highlighted fields*/
  ;
  AF0E250(); /* Verify the entered data*/
  ;
  AF0E260(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0E200

// format and display the map
Function AF0E220()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No error found*/
    AF0E221(); /* Format the data on the map*/
  else
    AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0EM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  AF0EM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0EM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0EM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0EM002 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF0EM002 ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  COMMAREA.CATOAP = AF0EM002.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0EM002.CAITEM; /* Application data*/
  ;
   /* ----------------------------------------------------------*/
    /* Reset AF9REC First Time Through Indicator*/
   /* ----------------------------------------------------------*/
  ;
  AF9REC.AF9FSTID = "Y"; /* Fst time indicator to 'Y'(es)*/
  ;
  ;
  ;
end // end AF0E220

// format screen page map 2/
Function AF0E221()
   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/
  ;
  set AF0EM002 initial; /* m002 input/output area*/
  ;
   /* *=====================**/
   /* *  Format Map Header  **/
   /* *=====================**/
  ;
                /* (Format Header Start Flds)*/
  AF0EM002.XXXUSER = AF0EW01.AF0EWUSR; /* Forecaster id*/
  AF0EM002.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0EM002.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0EM002.SY5PRCUN = AF0EW01.AF0EWPRC; /* Price*/
  AF0EM002.XPRCD = AF0EW01.AF0EWTYP; /* Start type cd*/
  AF0EM002.XGACD = AF0EW01.AF0EWGA; /* Start G/A cd*/
  AF0EM002.AF2FSTUN = AF0EM001.AF2FSTUN; /* Fcst Sty Qty*/
  AF0EM002.XPLCD = AF0EW01.AF0EWPLN; /* Start line cd*/
  AF0EM002.XPCCD = AF0EW01.AF0EWCAT; /* Start CAT cd*/
  AF0EM002.AF0EMCPT = AF0EW01.AF0EWCPT; /* Tot Clr Pct*/
  AF0EM002.XDVCD = AF0EW01.AF0EWDIV; /* Start DIV cd*/
  AF0EM002.XSUCD = AF0EW01.AF0EWSIL; /* Start SIL cd*/
  AF0EM002.SY1STNBR = AF0EW01.AF0EWSTY; /* Start Style no.*/
  AF0EM002.XLCCD[1] = AF0EW01.XLCCD[1];
  AF0EM002.XLCCD[2] = AF0EW01.XLCCD[2];
  AF0EM002.XLCCD[3] = AF0EW01.XLCCD[3];
  AF0EM002.XLCCD[4] = AF0EW01.XLCCD[4];
  AF0EM002.AF0EMXOW = AF0EW01.AF0EWXOW;
  AF0EM002.XXXSTAT = AF0EW01.XXXSTAT; /* Start Status no.*/
  AF0EM002.AF0EM-BLNK-FL = AF0EW01.AF0EW-BLNK-FL; /* Start Status no.*/
  ;
             /* (Format Header Description Flds)*/
  AF0EM002.XPRABRV = AF0EW01.AF0EWDPR; /* type desc*/
  AF0EM002.XGAABRV = AF0EW01.AF0EWDGA; /* G/A desc*/
  AF0EM002.XPLABRV = AF0EW01.AF0EWDPL; /* line desc*/
  AF0EM002.XPCABRV = AF0EW01.AF0EWDPC; /* CAT desc*/
  AF0EM002.XSUABRV = AF0EW01.AF0EWDSL; /* SIL desc*/
  AF0EM002.XDVDESC = AF0EW01.AF0EWDDV; /* SIL desc*/
  AF0EM002.XOWABRV = AF0EW01.XOWABRV; /* owner group desc*/
  ;
  if (AF9REC.AF9GAIXM > 0 /* XGA Combination index valid*/
   && AF9REC.AF9TPIXM > 0 /* XPR Combination index valid*/
   && AF9REC.AF9LNIXM > 0 /* XPL Combination index valid*/
   && AF9REC.AF9PCIXM > 0 /* XPC Combination index valid*/
   && AF9REC.AF9SUIXM > 0) /* XSU Combination index valid*/
    ;
               /* (Format Current Combination Flds)*/
    AF0EM002.AF0EMDCD = XP1REC.XDVCD; /* Cur DIV cd*/
    AF0EM002.AF0EMTCD = XP1REC.XPRCD; /* Cur TYP cd*/
    AF0EM002.AF0EMGCD = XP1REC.XGACD; /* Cur G/A cd*/
    AF0EM002.AF0EMLCD = XP1REC.XPLCD; /* Cur LIN cd*/
    AF0EM002.AF0EMCCD = XP1REC.XPCCD; /* Cur CAT cd*/
    AF0EM002.AF0EMSCD = XP1REC.XSUCD; /* Cur SIL cd*/
  end
  ;
  if (AF0EM002.AF0EMXOW != "00")
    set AF0EM002.AF0EM-ISTK-LIT invisible;
    set AF0EM002.AF0EM-ISTK-PCT-LIT invisible;
    set AF0EM002.AF-IN-STK-PCT invisible;
    set AF0EM002.AF0EM-ISTK-TITLE invisible;
    set AF0EM002.AF0EM-ISTK-PCT-TITLE invisible;
  else
    /* MOVE AF0EM001.AF0EM-ISTK-LIT TO AF0EM002.AF0EM-ISTK-LIT;*/
    AF0EM002.AF0EM-ISTK-PCT-LIT = AF0EM001.AF0EM-ISTK-PCT-LIT;
    AF0EM002.AF-IN-STK-PCT = AF0EW02.AF0EW-STY-ISTK-PCT;
  end
  ;
   /* *=============================**/
   /* *  Process Color Detail Recs  **/
   /* *=============================**/
  ;
  if (AFWREC.AFWIDX3 <= 0) /* No color rows exist*/
    AFWREC.AFWIXM = 1; /* Set loop index*/
    ;
    while (AFWREC.AFWIXM <= 9) /* Dark,prot unused lines*/
      set AF0EM002.AF0EMSTA[AFWIXM] skip, invisible; /* Stat*/
      set AF0EM002.AF0EMSTY[AFWIXM] skip, invisible; /* Style*/
      set AF0EM002.AF0EMSNM[AFWIXM] skip, invisible; /* Style name*/
      set AF0EM002.AF0EMCLR[AFWIXM] skip, invisible; /* Clr*/
      set AF0EM002.AF2SFODT[AFWIXM] skip, invisible; /* first offer date*/
      set AF0EM002.XOWCD[AFWIXM] skip, invisible; /* owner group*/
      set AF0EM002.AF0EM-PCT[AFWIXM] skip, invisible; /* in stock percent*/
      set AF0EM002.AF-WT-COLR-PCT[AFWIXM] skip, invisible;
      set AF0EM002.AIRSPD-LGSH-FL[AFWIXM] skip, invisible;
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    end
    ;
    if (converseVar.eventKey is pf7 /* Page back requested*/
     || converseVar.eventKey is pf8) /* Page forward requested*/
      converseLib.validationFailed(15); /* Indicate no data found to display*/
      AFWREC.AFWPRCSN = "221 "; /* Process number*/
      return; /* Exit to redisplay map*/
    else
      return; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  if (AFWREC.AFWIDX3 > 0) /* Color rows exist*/
    ;
     /* *=======================**/
     /* *  Obtain Desired Page  **/
     /* *=======================**/
    ;
    if (AF0EW01.AF0EWPGV <= 0) /* No previous page*/
      AF0EW01.AF0EWPGV = 1; /* Set to page one*/
      converseLib.validationFailed(2); /* Indicate no prev page*/
      AFWREC.AFWPRCSN = "221 "; /* Process number*/
    else
      ;
      if (AF0EW01.AF0EWPGV > AF0EW01.AF0EWPGM) /* Greater than max page*/
        AF0EW01.AF0EWPGV = AF0EW01.AF0EWPGM; /* Set max page*/
        converseLib.validationFailed(3); /* Indicate no more pages to disp*/
        AFWREC.AFWPRCSN = "221 "; /* Process number*/
      end
      ;
    end
    ;
    ;
     /* *================================**/
     /* *  Move Page Detail Flds to Map  **/
     /* *================================**/
    ;
    AFWREC.AFWIXM = 1; /* Set map loop index*/
    AF0EW01.AF0EWPSA = AF0EW01.AF0EWPGV * 9 - 9 + 1; /* Start addr*/
    ;
    if (AF0EW01.AF0EWPGV == AF0EW01.AF0EWPGM) /* Last page*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0EW01.AF0EWPSA + 1; /* Max lines*/
    else
      AFWREC.AFWIDX5 = 9; /* Max lines to display*/
    end
    ;
    while (AFWREC.AFWIXM <= AFWREC.AFWIDX5) /* Fill up page*/
      AF0EM002.AF0EMSTA[AFWIXM] = AF0EW02.AF0EWSTA[AF0EWPSA]; /* Stat*/
      ;
      if (AFWREC.AFWIXM == 1)
        AF0EM002.AF0EMSTY[AFWIXM] = XP1REC.SY1STNBR; /* Style*/
        AF0EM002.AF0EMSNM[AFWIXM] = XP1REC.SY1SSTNM; /* Style name*/
        AF0EM002.XOWCD[AFWIXM] = AF0EW02.XOWCD[AF0EWPSA]; /* own grp*/
      else
        AF0EM002.AF0EMSTY[AFWIXM] = " "; /* Style*/
        AF0EM002.AF0EMSNM[AFWIXM] = " "; /* Style name*/
      end
      ;
      AF0EM002.AF0EMCLR[AFWIXM] = AF0EW02.AF0EWCLR[AF0EWPSA]; /* Clr*/
      AF0EM002.AF2SFODT[AFWIXM] = AF0EW02.AF2SFODT[AF0EWPSA]; /* Desc*/
      AF0EM002.AF-WT-COLR-PCT[AFWIXM] = AF0EW02.AF-WT-COLR-PCT[AF0EWPSA]; /* weighted pct*/
      ;
      AF0EM002.AIRSPD-LGSH-FL[AFWIXM] = AF0EW02.AIRSPD-LGSH-FL[AF0EWPSA]; /* airspeed flag*/
      ;
      if (AF0EW02.XOWCD[AF0EWPSA] == "00")
        AF0EM002.AF0EM-PCT[AFWIXM] = AF0EW02.AF-IN-STK-PCT[AF0EWPSA];
        set AF0EM002.AF0EM-PCT[AFWIXM] initialAttributes;
      else
        set AF0EM002.AF0EM-PCT[AFWIXM] skip, invisible;
      end
      ;
      if (COMMAREA.CACHGFL != "Y")
        set AF0EM002.AF0EM-PCT[AFWIXM] skip; /* protect*/
        set AF0EM002.AF2SFODT[AFWIXM] skip; /* protect*/
        set AF0EM002.AIRSPD-LGSH-FL[AFWIXM] skip; /* airspeed flag*/
      end
      ;
      AF0EW01.AF0EWPSA = AF0EW01.AF0EWPSA + 1; /* Next record*/
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
      /* In cases where invalid update/s on  percentage amt fld/s*/
      /* has been made and PA2 was pressed to restore the original*/
      /* contents of the percentage flds, the ff. code will restore*/
      /* the percentage fields from an alternate save area and*/
      /* reset indicators which trigger the update process.*/
    /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is pa2)
      move AF0EW02.AF0EWSTW to AF0EW02.AF0EWSTA[1] for all; /* Restore*/
      move AF0EW02.AF0EWCLW to AF0EW02.AF0EWCLP[1] for all; /* Restore*/
      move AF0EW02.AF0EWADW to AF0EW02.AF0EWADB[1] for all; /* Restore*/
      move " " to AF0EW02.AF0EWCHG[1] for all; /* Reset change indicator*/
      AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
    end
    ;
     /* *===================**/
     /* *  Position Cursor  **/
     /* *===================**/
    ;
    if (COMMAREA.CACHGFL == "Y")
      set AF0EM002.AF0EM-PCT[1] cursor; /* Position cursor*/
    else
      set AF0EM002.CATOAP cursor;
    end
    ;
     /* *============================================**/
     /* *  Set Protect,Dark All Unused Detail Lines  **/
     /* *============================================**/
    ;
    if (AF0EW01.AF0EWPGV == AF0EW01.AF0EWPGM) /* Last page*/
      AF0EW01.AF0EWPSA = AF0EW01.AF0EWPGV * 9 - 9 + 1; /* Start idx*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0EW01.AF0EWPSA + 1; /* Max*/
      AFWREC.AFWIXM = AFWREC.AFWIDX5 + 1; /* Set loop index start*/
      ;
      while (AFWREC.AFWIXM <= 9) /* Dark,prot unused lines*/
        set AF0EM002.AF0EMSTA[AFWIXM] skip, invisible; /* Stat*/
        set AF0EM002.AF0EMSTY[AFWIXM] skip, invisible; /* Style*/
        set AF0EM002.AF0EMSNM[AFWIXM] skip, invisible; /* Style name*/
        set AF0EM002.AF0EMCLR[AFWIXM] skip, invisible; /* Clr*/
        set AF0EM002.AF2SFODT[AFWIXM] skip, invisible; /* Desc*/
        set AF0EM002.XOWCD[AFWIXM] skip, invisible; /* owner group*/
        set AF0EM002.AF0EM-PCT[AFWIXM] skip, invisible; /* in stock percent*/
        set AF0EM002.AF-WT-COLR-PCT[AFWIXM] skip, invisible;
        set AF0EM002.AIRSPD-LGSH-FL[AFWIXM] skip, invisible;
        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF0E221

// check attn identifier map 2
Function AF0E230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AF0EM002 initial; /* Clear the map fields*/
    AF0EW01.AF0EWTFT = 0;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AF0EM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0EM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0EM002.CAITEM; /* Application data*/
      XP1REC.XDVCD = AF0EW01.AF0EWDIV; /* Restore start XDVCD*/
      XP1REC.XPRCD = AF0EW01.AF0EWTYP; /* Restore start XPRCD*/
      XP1REC.XGACD = AF0EW01.AF0EWGA; /* Restore start XGACD*/
      XP1REC.XPLCD = AF0EW01.AF0EWPLN; /* Restore start XPLCD*/
      XP1REC.XPCCD = AF0EW01.AF0EWCAT; /* Restore start xpcCD*/
      XP1REC.XSUCD = AF0EW01.AF0EWSIL; /* Restore start xsuCD*/
      XP1REC.SY1STNBR = AF0EW01.SY1STNBR; /* Restore start style*/
      XP1REC.XLCCD[1] = AF0EM002.XLCCD[1];
      XP1REC.XLCCD[2] = AF0EM002.XLCCD[2];
      XP1REC.XLCCD[3] = AF0EM002.XLCCD[3];
      XP1REC.XLCCD[4] = AF0EM002.XLCCD[4];
      AF0EW01.AF0EWDIV = " "; /* Clear start XDVCD*/
      AF0EW01.AF0EWTYP = " "; /* Clear start XPRCD*/
      AF0EW01.AF0EWGA = " "; /* Clear start XGACD*/
      AF0EW01.AF0EWPLN = " "; /* Clear start XPLCD*/
      AF0EW01.AF0EWCAT = " "; /* Clear start xpcCD*/
      AF0EW01.AF0EWSIL = " "; /* Clear start xsuCD*/
      AF0EW01.SY1STNBR = " "; /* Clear start style*/
      AF0EW01.AF0EWDDV = " "; /* Clear DIV desc*/
      AF0EW01.AF0EWDPR = " "; /* Clear TYP desc*/
      AF0EW01.AF0EWDGA = " "; /* Clear G/A desc*/
      AF0EW01.AF0EWDPL = " "; /* Clear LIN desc*/
      AF0EW01.AF0EWDPC = " "; /* Clear CAT desc*/
      AF0EW01.AF0EWDSL = " "; /* Clear SIL desc*/
      AF0EW01.AF0EWDSY = " "; /* Clear Style desc*/
      XSAFS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set AF0EM002.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AF0EM002.CAITEM > " ") /* Application data was entered*/
    set AF0EM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0EM002"; /* Appl find code*/
    end
    ;
    if (converseVar.eventKey is pf3 /* PF1 was pressed*/
     || converseVar.eventKey is pf4) /* PF1 was pressed*/
      COMMAREA.CATOAP = "AF0M"; /* calc long & short*/
    end
    ;
    XP1REC.XDVCD = AF0EW01.AF0EWDIV; /* Restore start XDVCD*/
    XP1REC.XPRCD = AF0EW01.AF0EWTYP; /* Restore start XPRCD*/
    XP1REC.XGACD = AF0EW01.AF0EWGA; /* Restore start XGACD*/
    XP1REC.XPLCD = AF0EW01.AF0EWPLN; /* Restore start XPLCD*/
    XP1REC.XPCCD = AF0EW01.AF0EWCAT; /* Restore start xpcCD*/
    XP1REC.XSUCD = AF0EW01.AF0EWSIL; /* Restore start xsuCD*/
    XP1REC.SY1STNBR = AF0EW01.SY1STNBR; /* Restore start style*/
    AF0EW01.AF0EWDIV = " "; /* Clear start XDVCD*/
    AF0EW01.AF0EWTYP = " "; /* Clear start XPRCD*/
    AF0EW01.AF0EWGA = " "; /* Clear start XGACD*/
    AF0EW01.AF0EWPLN = " "; /* Clear start XPLCD*/
    AF0EW01.AF0EWCAT = " "; /* Clear start xpcCD*/
    AF0EW01.AF0EWSIL = " "; /* Clear start xsuCD*/
    AF0EW01.SY1STNBR = " "; /* Clear start style*/
    AF0EW01.AF0EWDDV = " "; /* Clear DIV desc*/
    AF0EW01.AF0EWDPR = " "; /* Clear TYP desc*/
    AF0EW01.AF0EWDGA = " "; /* Clear G/A desc*/
    AF0EW01.AF0EWDPL = " "; /* Clear LIN desc*/
    AF0EW01.AF0EWDPC = " "; /* Clear CAT desc*/
    AF0EW01.AF0EWDSL = " "; /* Clear SIL desc*/
    AF0EW01.AF0EWDSY = " "; /* Clear Style desc*/
    XSAFS01(); /* Exit to another application*/
    ;
    if (converseVar.eventKey is pf3 /* PF1 was pressed*/
     || converseVar.eventKey is pf4) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "AF0A"; /* if came back from xfer*/
    end /* with security error*/
    ;
    XSAFS01(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* page left*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19) /* and PF19 was not pressed*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AFWREC.AFWFIRST == " ") /* First time through*/
    ;
    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "230 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   || converseVar.eventKey is pf16 /* PF16 was pressed*/
   || converseVar.eventKey is pf17 /* PF17 was pressed*/
   || converseVar.eventKey is pf18 /* PF18 was pressed*/
   || converseVar.eventKey is pf19) /* PF19 was pressed*/
    ;
    if (AF9REC.AF9GAG99 == "Y" /* Last G/A code retrieved*/
     || AF9REC.AF9TYP99 == "Y" /* Last TYP code retrieved*/
     || AF9REC.AF9LIN99 == "Y" /* Last LIN code retrieved*/
     || AF9REC.AF9CAT99 == "Y" /* Last CAT code retrieved*/
     || AF9REC.AF9SIL99 == "Y") /* Last SIL code retrieved*/
      AFWREC.AFWPRCSN = "230 "; /* Process number*/
      converseLib.validationFailed(15); /* Indicate no data to display*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0E230

// Reset highlighted fields
Function AF0E240()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  AF0EM001.XXXPRCNM = "AF0E    "; /* Reset process name*/
  ;
  AFWREC.AFWIXM = 1;
  while (AFWREC.AFWIXM <= 9)
    set AF0EM002.AF2SFODT[AFWIXM] initialAttributes;
    set AF0EM002.AIRSPD-LGSH-FL[AFWIXM] initialAttributes;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
  end
  ;
  set AF0EM002.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0EM002.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/
  ;
  converseLib.clearScreen();
   /* Reset screen before display*/
  ;
  ;
  ;
end // end AF0E240

// Verify the entered data
Function AF0E250()
   /* ------------------------------------------------------------*/
   /* Edit Map Detail Lines: Note that validation of map items*/
     /* is on a page-by-page basis. This ensures that all items*/
     /* are valid before any scrolling command is processed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.AFWIDX3 <= 0) /* No color records exist*/
    return; /* Return to calling process*/
  end
  ;
  ;
  AFWREC.AFWIXM = 1; /* set loop index*/
  ;
  AF0EW01.AF0EWPSA = AF0EW01.AF0EWPGV * 9 - 9 + 1; /* Start addr*/
  ;
  ;
  if (AF0EW01.AF0EWPGV == AF0EW01.AF0EWPGM) /* In last page*/
    AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0EW01.AF0EWPSA + 1;
  else
    AFWREC.AFWIDX5 = 9; /* Set loop max*/
  end
  ;
  ;
  ;
   /* *===============================**/
   /* *  Store/Validate Changed Data  **/
   /* *===============================**/
  ;
  AF0EW01.AF0EWADI = "0"; /* set valid flag indicator*/
  AFWREC.AFWIXM = 1; /* set loop index*/
  ;
  while (AFWREC.AFWIXM <= AFWREC.AFWIDX5) /* Process whole page*/
    ;
               /* (Check if changes were entered)*/
    ;
    if (AF0EM002.AF-IN-STK-PCT != AF0EW02.AF0EW-STY-ISTK-PCT
     && AF0EM002.AF0EM-PCT[AFWIXM] != 0)
      AF0EM002.AF0EM-PCT[AFWIXM] = AF0EM002.AF-IN-STK-PCT;
    end
    ;
    if (AF0EM002.AF2SFODT[AFWIXM] != AF0EW02.AF2SFODT[AF0EWPSA]
     || AF0EM002.AF0EM-PCT[AFWIXM] != AF0EW02.AF-IN-STK-PCT[AF0EWPSA]
     || AF0EM002.AIRSPD-LGSH-FL[AFWIXM] != 
    AF0EW02.AIRSPD-LGSH-FL[AF0EWPSA])
      AF0EW02.AF0EWCHG[AF0EWPSA] = "C"; /* Changes entered*/
      AF0EW02.AF0EWCHG[AF0EWPSA] = "Y"; /* For update OK*/
      AF0EW01.AF0EWADI = "Y"; /* Indicate w/ updates*/
    end
    ;
    AF0EW01.AF0EWPSA = AF0EW01.AF0EWPSA + 1; /* Next record*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0E250

// process valid input request
Function AF0E260()
   /* ------------------------------------------*/
   /* Process Valid Input Request*/
   /* ------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10)
    AFWREC.AFWMAP = "1";
    exit stack;
  end
   /* *============================**/
   /* *  Check Loop Limit Counter  **/
   /* *============================**/
  ;
  if (AF0EW01.AF0EWLCT > AF0EW01.AF0EWLIM) /* Style ctr loop limit reached*/
    AF0EW01.AF0EWLCT = 0; /* Reset loop ctr*/
  end
  ;
   /* *========================================**/
   /* * PF Key Processing                      **/
   /* *========================================**/
  ;
  if (converseVar.eventKey is pf15 /* PF15 (Next type)*/
   || converseVar.eventKey is pf16 /* PF16 (Next G/A)*/
   || converseVar.eventKey is pf17 /* or PF17 (Next Line)*/
   || converseVar.eventKey is pf18 /* or PF18 (Next Category)*/
   || converseVar.eventKey is pf19) /* or PF17 (Next Sihouette)*/
    AF0EW01.AF0EWCNF = "N"; /* Reset update confirm flag*/
    AFWREC.AFWMAP = "1";
    return; /* Execute next process*/
  end
  ;
  ;
   /* *==========================**/
   /* *  'ENTER' Key Processing  **/
   /* *==========================**/
  ;
  if (converseVar.eventKey is enter) /* enter key pressed*/
    ;
    if (AF0EW01.AF0EWADI == "Y") /* With valid updates*/
      AFWREC.AFWIDX4 = 1; /* Set Loop index*/
      ;
      while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3 /* LE Max Color Recs*/
       && AFWREC.AFWIDX4 <= 9) /* max lines per page.*/
        AFWREC.AFWIDX5 = 9 * AF0EW01.AF0EWPGV + AFWREC.AFWIDX4 - 9;
        ;
        if (AF0EM002.AF2SFODT[AFWIDX4] != AF0EW02.AF2SFODT[AFWIDX5])
          AF0EW01.AF0EW-FRST-OFDT = AF0EM002.AF2SFODT[AFWIDX4];
          if (AF0EW01.AF0EW-FOD-YY > 50)
            AF0EW01.AF0EW-FOD-CCC = 19;
          else
            AF0EW01.AF0EW-FOD-CCC = 20;
          end
          AF0EW02.AF2SFODT[AFWIDX5] = AF0EW01.AF0EW-FRST-OFDT;
        end
        ;
        if (AF0EM002.AF0EM-PCT[AFWIDX4] != AF0EW02.AF-IN-STK-PCT[AFWIDX5])
          AF0EW02.AF-IN-STK-PCT[AFWIDX5] = AF0EM002.AF0EM-PCT[AFWIDX4];
        end
        ;
        if (AF0EM002.AIRSPD-LGSH-FL[AFWIDX4]
         != AF0EW02.AIRSPD-LGSH-FL[AFWIDX5])
          if (AF0EM002.AIRSPD-LGSH-FL[AFWIDX4] == "Y"
           || AF0EM002.AIRSPD-LGSH-FL[AFWIDX4] == "N")
            AF0EW02.AIRSPD-LGSH-FL[AFWIDX5] = AF0EM002.AIRSPD-LGSH-FL[AFWIDX4];
          else
            AF0EM002.AIRSPD-LGSH-FL[AFWIDX4] = AF0EW02.AIRSPD-LGSH-FL[AFWIDX5];
            set AF0EM002.AIRSPD-LGSH-FL[AFWIDX4] bold;
          end
        end
        ;
        AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
      end
      ;
      AF0E261(); /* Update DACAST.VAFCLR01*/
      AF0EW01.AF0EWCNF = "U"; /* Indicate successful update*/
      AFWREC.AFWSWR = "Y"; /* Reselect updated record*/
      AFWREC.AFWNMO = 13; /* Indicate successful update*/
      AFWREC.AFWPRCSN = "260 "; /* Process number*/
    end
    ;
    if (AF0EW02.AF0EW-STY-ISTK-PCT != AF0EM002.AF-IN-STK-PCT)
      AF2REC.AF-IN-STK-PCT = AF0EM002.AF-IN-STK-PCT;
      AF0EM001.AF-IN-STK-PCT = AF0EM002.AF-IN-STK-PCT;
      AF0EW02.AF0EW-STY-ISTK-PCT = AF0EM002.AF-IN-STK-PCT;
      AF0ES29();
      AF0EW01.AF0EWCNF = "U"; /* Indicate successful update*/
      AFWREC.AFWSWR = "Y"; /* Reselect updated record*/
      AFWREC.AFWNMO = 13; /* Indicate successful update*/
      AFWREC.AFWPRCSN = "260 "; /* Process number*/
    end
    ;
    AF0E115();
    ;
    if (AF0EW01.AF0EW-MULTI-PCT-SW == "N")
      AF0EW02.AF0EW-STY-ISTK-PCT = AF0EW01.AF0EW-OLD-PCT;
    else
      AF0EW02.AF0EW-STY-ISTK-PCT = 0;
    end
    ;
  end
  ;
  ;
   /* *=======================**/
   /* * 'PF7' Key Processing  **/
   /* *=======================**/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    AF0EW01.AF0EWPGV = AF0EW01.AF0EWPGV - 1; /* Back one page*/
    return; /* Execute next process*/
  end
  ;
   /* *=======================**/
   /* * 'PF8' Key Processing  **/
   /* *=======================**/
  ;
  if (converseVar.eventKey is pf8) /* Scroll fwd requested*/
    AF0EW01.AF0EWPGV = AF0EW01.AF0EWPGV + 1; /* Fwd one page*/
    return; /* Execute next process*/
  end
  ;
  ;
end // end AF0E260

// Perform updates
Function AF0E261()
   /* ------------------------------------------------------------*/
   /* Update DACAST.VAFCLR01 rows from valid screen updates. All*/
    /* screen detail lines are scanned for records that have*/
    /* valid updates in them. If they have, then the correspon-*/
    /* ding DB rows are updated. Otherwise, they are bypassed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *============================**/
   /* *  Get System Date and Time  **/
   /* *============================**/
  ;
  XX0XS01(); /* System date/time process*/
  ;
  ;
  ;
   /* *========================================**/
   /* *  Obtain Map Detail Records for Update  **/
   /* *========================================**/
  ;
  ;
  AF0EW01.AF0EWADI = "0"; /* set valid flag indicator*/
  ;
  AFWREC.AFWIDX4 = 1; /* Set loop index*/
  ;
  while (AFWREC.AFWIDX4 <= AFWREC.AFWIDX3) /* Find updates*/
    ;
    if (AF0EW02.AF0EWCHG[AFWIDX4] == "Y") /* With valid updates*/
      AF0ES24(); /* Update Color DB*/
      AF0ES25(); /* Update Avail Pct DB*/
      ;
      if (VAFCLR02.AF-IN-STK-PCT != 0)
        ;
        if (VAFCLR02.AF-IN-STK-PCT == AF0EW02.AF0EW-STY-ISTK-PCT)
          /* next sentence*/
        else
          ;
          if (VAFCLR02.AF-IN-STK-PCT == AF0EW01.AF0EW-OLD-PCT)
            AF0EM002.AF-IN-STK-PCT = AF0EW-OLD-PCT;
            AF0EW02.AF0EW-STY-ISTK-PCT = AF0EW-OLD-PCT;
          else
            AF0EM002.AF-IN-STK-PCT = 0;
            AF0EW02.AF0EW-STY-ISTK-PCT = 0;
          end
          ;
        end
        ;
      end
      ;
    end
    ;
    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop through*/
  end
  ;
  ;
  ;
end // end AF0E261

// Access DPRODG.VSYCLR01 db
Function AF0ES01()
   /* ------------------------------------------------------------*/
   /* Obtain Style and Color descriptions from DPRODG.VSYCLR01.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/
  ;
  set PG2REC empty; /* initialize db record*/
  PG2REC.XGPCD = "03"; /* gpc cd*/
  PG2REC.SY1STNBR = XP1REC.SY1STNBR; /* style*/
  PG2REC.SY2CLRID = VAFCLR02.SY2CLRID; /* color*/
  PG2REC.XDMCD = "00"; /* dimension cd*/
  ;
  ;
   /* *=============================**/
   /* *  Access DPRODG.VSYCLR01 DB  * Obtain style,color desc*/
   /* *=============================**/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      XP1REC.SY1SSTNM = " "; /* Move blank style desc*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S01 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES01

// Edit Start Status cd
Function AF0ES02()
  AF0EW01.AF0EWSTS = AF0EM001.XXXSTAT; /* save to wk map storage*/
  ;
  if (AF0EM001.XXXSTAT != "A"
   && AF0EM001.XXXSTAT != "N"
   && AF0EM001.XXXSTAT != "I"
   && AF0EM001.XXXSTAT != " ")
    ;
                   /* (field in error)*/
    AF0EW01.XXXSTAT = " "; /* Space out wk storage*/
    AF0EM001.AF0EMSTD = " "; /* Space out desc*/
    AFWREC.AFWPRCSN = "S02 "; /* Process number*/
    set AF0EM001.XXXSTAT cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 32; /* indicate error message*/
    ;
  else
    ;
                   /* (field is valid)*/
    AF0EW01.XXXSTAT = AF0EM001.XXXSTAT; /* save to wk storage*/
    ;
    if (AF0EW01.XXXSTAT == "A") /* Active*/
      AF0EW01.AF0EWSTD = "ACTIVE  "; /* Description*/
      AF0EM001.AF0EMSTD = "ACTIVE  "; /* Description*/
    else
      if (AF0EW01.XXXSTAT == "N") /* New*/
        AF0EW01.AF0EWSTD = "NEW    "; /* Description*/
        AF0EM001.AF0EMSTD = "NEW    "; /* Description*/
      else
        if (AF0EW01.XXXSTAT == "I") /* Inactive*/
          AF0EW01.AF0EWSTD = "INACTIVE"; /* Description*/
          AF0EM001.AF0EMSTD = "INACTIVE"; /* Description*/
        else
          AF0EW01.AF0EWSTD = " "; /* Space out desc*/
          AF0EM001.AF0EMSTD = " "; /* Space out desc*/
        end
      end
    end
    ;
  end
  ;
  ;
end // end AF0ES02

// Edit Style no.
Function AF0ES03()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/
  ;
  if (AF0EM001.SY1STNBR == " ") /* Style = spaces*/
    AF0EW01.SY1STNBR = " "; /* Move to wk storage*/
    AF0EW01.AF0EWST1 = " "; /* Move to wk storage*/
    AF0EW01.AF0EWST2 = " "; /* Move to wk storage*/
    AF0EW01.AF0EWSTY = " "; /* Move to wk storage*/
    AF0EW01.SY1SSTNM = " "; /* Space out description*/
    AF0EW01.AF0EWDSY = " "; /* Space out description*/
     /* MOVE ' ' TO AF0EM001.SY1SSTNM ; Space out description*/
    return; /* Exit to calling process*/
  end
  ;
  AF0EW01.AF0EWSTY = AF0EM001.SY1STNBR; /* Save to wk map storage*/
  ;
  ;
   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/
  ;
  AF0ES04(); /* Select set style*/
  ;
  AF0ES05(); /* Validate style*/
  ;
  AF0ES06(); /* Close style cursor*/
  ;
  ;
  ;
end // end AF0ES03

// Select set style
Function AF0ES04()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set PG2REC empty; /* Reset rec work area*/
  ;
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0EM001.SY1STNBR; /* Style no.*/
  ;
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S04 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES04

// Process retrieved style
Function AF0ES05()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
                     /* (Field is valid)*/
      AF0EW01.SY1STNBR = AF0EM001.SY1STNBR; /* Save to wk st*/
      ;
      if (AF0EM001.SY1STNBR == AF0EW01.AF0EWST2) /* Save to alt wk stor*/
                      /* (Same style being processed)*/
                            /* --- B U T ---*/
        if (AFWREC.AFWSWR == "Y") /* Style is part of new keys entered*/
          AF0EW01.AF0EWST1 = AF0EM001.SY1STNBR; /* Restore alt wk*/
        end
        ;
      else
        AF0EW01.AF0EWST1 = AF0EM001.SY1STNBR; /* Save to alt wk stor*/
        AF0EW01.AF0EWST2 = AF0EM001.SY1STNBR; /* Save to alt wk stor*/
      end
      ;
      AF0EW01.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AF0EW01.AF0EWDSY = PG2REC.SY1SSTNM; /* move style desc*/
        /* MOVE PG2REC.SY1SSTNM TO AF0EM001.SY1SSTNM; move style desc*/
      return; /* Return to calling process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
                    /* (Field in error)*/
      set AF0EM001.SY1STNBR cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 33; /* Indicate not found*/
      AFWREC.AFWPRCSN = "S05 "; /* Process number*/
      AF0EW01.SY1STNBR = " "; /* Space out wk storage*/
      AF0EW01.SY1SSTNM = " "; /* move style desc*/
      AF0EW01.AF0EWDSY = " "; /* move style desc*/
         /* MOVE ' ' TO AF0EM001.SY1SSTNM      ; Space out desc*/
      return; /* Exit to calling rtn*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES05

// Close style cursor
Function AF0ES06()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  ;
  ;
  ;
end // end AF0ES06

// Edit Silhouette cd
Function AF0ES07()
  ;
  ;
  if (AF0EM001.XSUCD == " ") /* Field eq spaces*/
    AF0EW01.AF0EWSIL = " "; /* Space out save area*/
    AF0EW01.AF0EWDSL = " "; /* Space out save desc*/
    AF0EM001.XSUABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  AF0EW01.AF0EWSIL = AF0EM001.XSUCD; /* save to wk map storage*/
  ;
  ;
  if (AF0EM001.XSUCD in XSUTBL.XSUCD)
    ;
    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      if (AF0EM001.XSUCD == AF0EW01.AF0EWAS1) /* EQ previous XSU*/
        AF0EW01.AF0EWDSL = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0EW01.AF0EWAS1 = AF0EM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUCD = AF0EM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex]; /* To wk storage*/
        XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0EW01.AF0EWDSL = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0EM001.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S07 "; /* Process number*/
  set AF0EM001.XSUCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  AF0EW01.AF0EWDSL = " "; /* Space out save desc*/
  AF0EM001.XSUABRV = " "; /* Space out desc*/
  ;
  ;
end // end AF0ES07

// Edit Category cd
Function AF0ES08()
  ;
  ;
  if (AF0EM001.XPCCD == " ") /* Map fld spaces*/
    AF0EW01.AF0EWCAT = " "; /* Space out save area*/
    AF0EW01.AF0EWDPC = " "; /* Space out save desc*/
    AF0EM001.XPCABRV = " "; /* Space out map desc*/
    return; /* Return to calling routine*/
  end
  ;
  AF0EW01.AF0EWCAT = AF0EM001.XPCCD; /* save to wk map storage*/
  ;
  ;
  if (AF0EM001.XPCCD in XPCTBL.XPCCD)
    ;
    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      if (AF0EM001.XPCCD == AF0EW01.AF0EWAP1) /* EQ previous XPC*/
        AF0EW01.AF0EWDPC = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0EW01.AF0EWAP1 = AF0EM001.XPCCD; /* save to wk storage*/
        XP1REC.XPCCD = AF0EM001.XPCCD; /* save to wk storage*/
        XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex]; /* To wk storage*/
        XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0EW01.AF0EWDPC = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0EM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S08 "; /* Process number*/
  set AF0EM001.XPCCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 35; /* indicate error message*/
  AF0EW01.AF0EWDPC = " "; /* Space out save desc*/
  AF0EM001.XPCABRV = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF0ES08

// Edit Gender/Age cd
Function AF0ES09()
  ;
  ;
  if (AF0EM001.XGACD == " ") /* Map fld eq spaces*/
    AF0EW01.AF0EWGA = " "; /* Space out save fld*/
    AF0EW01.AF0EWDGA = " "; /* Space out save desc*/
    AF0EM001.XGAABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  AF0EW01.AF0EWGA = AF0EM001.XGACD; /* save to wk map storage*/
  AF0EW01.XGACD = AF0EM001.XGACD; /* build xgatbl key*/
  AF0EW01.XGPCD = "03"; /* apparel gpc code*/
  ;
  if (AF0EW01.XGAKEY in XGATBL.XGAKEY)
    ;
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      ;
      if (AF0EM001.XGACD == AF0EW01.AF0EWAG1) /* EQ previous XGA*/
        AF0EW01.AF0EWDGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0EW01.AF0EWAG1 = AF0EM001.XGACD; /* save to wk storage*/
        XP1REC.XGACD = AF0EM001.XGACD; /* save to wk storage*/
        XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* To wk storage*/
        XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0EW01.AF0EWDGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0EM001.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S09 "; /* Process number*/
  set AF0EM001.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  AF0EW01.AF0EWDGA = " "; /* Space out save desc*/
  AF0EM001.XGAABRV = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF0ES09

// Edit Season yr
Function AF0ES10()
  ;
  ;
  AF0EW01.AF0EWXSY = 0; /* initialize xsnyr wk area*/
  AF0EW01.AF0EWXSY = AF0EM001.XSNYR; /* move to wk area*/
  ;
  if (AF0EW01.AF0EWXSY > 75)
    AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 1900; /* move century*/
  else
    AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 2000; /* move century*/
  end
  ;
  /* *************************************************************/
  /* ***** Do not allow user to enter anything past FA 2000  *****/
  /* *************************************************************/
  ;
  if (AF0EW01.AF0EWXSY < 2000)
    AF0ES10S();
  else
    if (AF0EW01.AF0EWXSY == 2000)
      if (AF0EM001.XSECD == "SP"
       || AF0EM001.XSECD == "SU")
        AF0ES10S();
      else
          /* (field in error)*/
        AFWREC.AFWPRCSN = "S10 "; /* Process number*/
        set AF0EM001.XSNYR cursor, bold; /* highlight field*/
        set AF0EM001.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
      end
    else
      if (AF0EW01.AF0EWXSY > 2000)
          /* (field in error)*/
        AFWREC.AFWPRCSN = "S10 "; /* Process number*/
        set AF0EM001.XSNYR cursor, bold; /* highlight field*/
        set AF0EM001.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
      end
    end
  end
  ;
end // end AF0ES10

// Season yr search
Function AF0ES10S()
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0EW01.AF0EWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF0EM001.XSNYR; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
  ;
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S10 "; /* Process number*/
  set AF0EM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/
  ;
end // end AF0ES10S

// Edit Season cd
Function AF0ES11()
  ;
  ;
  if (AF0EM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0EM001.XSECD; /* save to working storage*/
    ;
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S11 "; /* Process number*/
    set AF0EM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/
    ;
  end
  ;
  AF0EW01.AF0EWXSS = " "; /* Initialize wk area*/
  AF0EW01.AF0EWXYR = +0; /* Initialize wk area*/
  ;
  AF0EW01.AF0EWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  AF0EW01.AF0EWXYR = XP1REC.XSNYR; /* Format wk area*/
  ;
  ;
      /* *************************************************************/
      /* ***** Loop thru procedure until both XSE AND XSN values *****/
      /* ***** found on a single table row.                      *****/
      /* *************************************************************/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSECD[AFWIDX5] == XP1REC.XSECD
     && YSNTBL.XSNYR[AFWIDX5] == AF0EW01.AF0EWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S11 "; /* Process number*/
  set AF0EM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/
  ;
end // end AF0ES11

// Edit Forecaster cd
Function AF0ES12()
  ;
  ;
  if (AF0EM001.XXXUSER == " ") /* Eq spaces*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    AF0EW01.AF0EWUSR = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0EW01.AF0EWUSR = AF0EM001.XXXUSER; /* Move to wk map storage*/
  ;
  ;
   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/
  ;
  set PG1REC empty; /* Clear row storage area*/
  ;
  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0EM001.XXXUSER; /* Forecaster id*/
  ;
  ;
   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/
  ;
  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0EM001.XXXUSER cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S12 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      XP1REC.XXXUSER = " "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/
      ;
      /* ***** EXIT PROCESS HERE ******/
      ;
    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.XXXUSER = AF0EM001.XXXUSER; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/
          ;
          /* ***** EXIT PROCESS HERE ******/
          ;
        end
      end
    end
  end
  ;
   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0ES80"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0EM001.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0ES12

// Edit map detail items
Function AF0ES13()
   /* ------------------------------------------------------------*/
   /* Edit Map Detail Lines: Note that validation of map items*/
     /* is on a page-by-page basis. This ensures that all items*/
     /* are valid before any scrolling command is processed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.AFWIDX3 <= 0) /* No color records exist*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  AFWREC.AFWIXM = 1; /* set loop index*/
  ;
  AF0EW01.AF0EWPSA = AF0EW01.AF0EWPGV * 9 - 9 + 1; /* Start addr*/
  ;
  if (AF0EW01.AF0EWPGV == AF0EW01.AF0EWPGM) /* In last page*/
    AFWREC.AFWIDX5 = AFWREC.AFWIDX3 - AF0EW01.AF0EWPSA + 1;
  else
    AFWREC.AFWIDX5 = 9; /* Set loop max*/
  end
  ;
  ;
  ;
   /* *===============================**/
   /* *  Store/Validate Changed Data  **/
   /* *===============================**/
  ;
  AFWREC.AFWIXM = 1; /* set loop index*/
  ;
  while (AFWREC.AFWIXM <= AFWREC.AFWIDX5) /* Process whole page*/
    ;
               /* (Check if changes were entered)*/
    ;
    if (AF0EM001.AF5ADBFL[AFWIXM] != AF0EW02.AF0EWADB[AF0EWPSA]
     || AF0EM001.AF5CLRPT[AFWIXM] != AF0EW02.AF0EWCLP[AF0EWPSA]
     || AF0EM001.AF0EMSTA[AFWIXM] != AF0EW02.AF0EWSTA[AF0EWPSA])
      AF0EW02.AF0EWCHG[AF0EWPSA] = "C"; /* Changes entered*/
    end
    ;
    ;
                /* (*** ADD BUY FIELD ***)*/
    if (AF0EM001.AF5ADBFL[AFWIXM] != "Y" /* Not yes*/
     && AF0EM001.AF5ADBFL[AFWIXM] != "N" /* Not no*/
     && AF0EM001.AF5ADBFL[AFWIXM] != "C" /* Not COMPLETED*/
     && AF0EM001.AF5ADBFL[AFWIXM] != " ") /* Not spaces*/
      ;
                    /* (Field in Error)*/
      XP1REC.XP1MNO = 93; /* Indicate Error msg*/
      set AF0EM001.AF5ADBFL[AFWIXM] cursor, bold;
      AFWREC.AFWPRCSN = "S13 "; /* Process number*/
      AF0EW02.AF0EWCHG[AF0EWPSA] = "N"; /* change/s not OK*/
      ;
    else
                     /* (Field is Valid)*/
      if (AF0EM001.AF5ADBFL[AFWIXM] == " " /* Spaced out*/
       && AF0EW02.AF0EWADB[AF0EWPSA] != " ") /* Prev not spaces*/
        ;
        AF0EW02.AF0EWADB[AF0EWPSA] = "Y"; /* Default to yes*/
        ;
      else
        ;
        AF0EW02.AF0EWADB[AF0EWPSA] = AF0EM001.AF5ADBFL[AFWIXM];
        ;
      end
      ;
    end
    ;
                      /* (Color Pcent)*/
    if (AF0EM001.AF5CLRPT[AFWIXM] != AF0EW02.AF0EWCLP[AF0EWPSA])
      AF0EW02.AF0EWCLP[AF0EWPSA] = AF0EM001.AF5CLRPT[AFWIXM];
      if (AF0EM001.AF0EMSTA[AFWIXM] == "N")
        AF0EW02.AF0EWSTA[AF0EWPSA] = "A";
        AF0EM001.AF0EMSTA[AFWIXM] = "A";
      end
    end
    ;
    ;
                   /* (*** STATUS CD ***)*/
    if (AF0EM001.AF0EMSTA[AFWIXM] != "A" /* Not active*/
     && AF0EM001.AF0EMSTA[AFWIXM] != "N" /* Not New*/
     && AF0EM001.AF0EMSTA[AFWIXM] != "I" /* Not inactive*/
     && AF0EM001.AF0EMSTA[AFWIXM] != " ") /* Not spaces*/
      ;
                    /* (Field in Error)*/
      XP1REC.XP1MNO = 32; /* Indicate Error msg*/
      set AF0EM001.AF0EMSTA[AFWIXM] cursor, bold;
      AFWREC.AFWPRCSN = "S13 "; /* Process number*/
      ;
    else
      ;
      if (AF0EM001.AF0EMSTA[AFWIXM] == "N") /* If it's new*/
        ;
        if (AF0EW02.AF0EWSTA[AF0EWPSA] == "A" /* Active*/
         || AF0EW02.AF0EWSTA[AF0EWPSA] == "I") /* Inactive*/
          ;
                        /* (Field in Error)*/
          XP1REC.XP1MNO = 43; /* Indicate Error msg*/
          set AF0EM001.AF0EMSTA[AFWIXM] cursor, bold;
          AFWREC.AFWPRCSN = "S13 "; /* Process number*/
          ;
        else
                            /* (Field is Valid)*/
          AF0EW02.AF0EWSTA[AF0EWPSA] = AF0EM001.AF0EMSTA[AFWIXM];
          ;
        end
        ;
      else
        ;
        if (AF0EM001.AF0EMSTA[AFWIXM] == " ") /* Spaced out*/
                           /* (Field is Valid)*/
          AF0EW02.AF0EWSTA[AF0EWPSA] = "A"; /* DEFAULT TO ACTIVE*/
          ;
        else
          ;
          if (AF0EM001.AF0EMSTA[AFWIXM] == "I") /* inactivate*/
            ;
            if (AF0EW02.XPRCD[AF0EWPSA] != "97") /* not special makeup*/
              AF0ES21(); /* verify no open po's*/
            else
              PCYREC.PCYCOUNT = 0;
            end
            ;
            if (PCYREC.PCYCOUNT > 0) /* open po's against style/color*/
              XP1REC.XP1MNO = 119; /* Indicate Error msg*/
              set AF0EM001.AF0EMSTA[AFWIXM] cursor, bold;
              AFWREC.AFWPRCSN = "S13 "; /* Process number*/
            else
                                /* (Field is Valid)*/
              AF0EW02.AF0EWSTA[AF0EWPSA] = AF0EM001.AF0EMSTA[AFWIXM];
            end
            ;
          else
                            /* (Field is Valid)*/
            AF0EW02.AF0EWSTA[AF0EWPSA] = AF0EM001.AF0EMSTA[AFWIXM];
            ;
          end
        end
      end
    end
    ;
    ;
    if (AF0EW02.AF0EWCHG[AF0EWPSA] == "C") /* With valid changes*/
      AF0EW02.AF0EWCHG[AF0EWPSA] = "Y"; /* For update OK*/
    end
    ;
    ;
    AF0EW01.AF0EWPSA = AF0EW01.AF0EWPSA + 1; /* Next record*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0ES13

// Update DACAST.VAFCLR01 DB
Function AF0ES14()
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/
  ;
  set VAFCLR02 empty; /* Reset Wk Storage field*/
  ;
  VAFCLR02.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  VAFCLR02.SY2CLRID = AF0EW02.AF0EWCLR[AFWIDX4]; /* Color ID*/
  VAFCLR02.XDMCD = "00"; /* Dimension cd*/
  ;
  VAFCLR02.XDVCD = AF0EW02.XDVCD[AFWIDX4]; /* div cd*/
  VAFCLR02.XOWCD = AF0EW02.XOWCD[AFWIDX4]; /* owner group*/
  ;
  VAFCLR02.XSECD = XP1REC.XSECD; /* Season cd*/
  ;
  AF0EW01.AF0EWXSY = 0; /* Initialize xsnyr wk area*/
  AF0EW01.AF0EWXSY = XP1REC.XSNYR; /* Move to wk area*/
   /* -------------- y2k out begin ---------------*/
   /* AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 1900;/* Add Century*/
   /* -------------- y2k out begin ---------------*/
   /* -------------- y2k in  begin ---------------*/
  if (AF0EW01.AF0EWXSY < 1900) /* no century built yet*/
    if (AF0EW01.AF0EWXSY > 60)
      AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 1900; /* Add Century*/
    else
      AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 2000; /* Add Century*/
    end
  end
   /* -------------- y2k in end ------------------*/
  VAFCLR02.XSNYR = AF0EW01.AF0EWXSY; /* Season yr*/
  ;
  ;
  ;
  ;
   /* *=====================================**/
   /* *  Move Update Items into Output Row  **/
   /* *=====================================**/
  ;
  VAFCLR02.AF5FSCST = AF0EW02.AF0EWSTA[AFWIDX4]; /* Color status*/
  ;
  if (VAFCLR02.AF5FSCST == "I")
    VAFCLR02.AF5BTBQ = 0; /* BTB QTY*/
    VAFCLR02.AF5BTBPT = 0; /* BTB %*/
  else
    VAFCLR02.AF5BTBQ = AF0EW02.AF5BTBQ[AFWIDX4]; /* BTB QTY*/
    VAFCLR02.AF5BTBPT = AF0EW02.AF5BTBPT[AFWIDX4]; /* BTB %*/
  end
  ;
  VAFCLR02.AF5FSCPT = AF0EW02.AF0EWCLP[AFWIDX4]; /* Color pcent fcst*/
  VAFCLR02.AF5CLBFL = AF0EW02.AF0EWADB[AFWIDX4]; /* Addl buy flag*/
  ;
  VAFCLR02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VAFCLR02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VAFCLR02.ZZZCHGCT = AF0EW02.AF0EWCCT[AFWIDX4]; /* Change count*/
  ;
  if (AF0EW02.AF0EW-STY-ISTK-PCT != AF0EM001.AF-IN-STK-PCT
   && AF0EW02.AF-IN-STK-PCT[AFWIDX4] != 0
   && AF0EW02.XOWCD[AFWIDX4] == "00")
    VAFCLR02.AF-IN-STK-PCT = AF0EM001.AF-IN-STK-PCT;
  else
    VAFCLR02.AF-IN-STK-PCT = AF0EW02.AF-IN-STK-PCT[AFWIDX4];
  end
  if (AF0EW02.XOWCD[AFWIDX4] == "00")
    if (AF0EW01.AF0EWPRC > 0)
      VAFCLR02.AF-IN-STK-QTY = AF0EW02.AF0EWFST *       AF0EW02.AF0EWCLP[AFWIDX4]       * VAFCLR02.AF-IN-STK-PCT / AF0EW01.AF0EWPRC;
      VAFCLR02.AF-IN-STK-QTY = mathLib.round(AF-IN-STK-QTY / 10000, -mathLib.decimals(VAFCLR02.AF-IN-STK-QTY));
    else
      VAFCLR02.AF-IN-STK-QTY = 0;
    end
  end
  ;
   /* *========================================**/
   /* * Move Non-Update Items into Output Row  **/
   /* *========================================**/
  ;
  VAFCLR02.AF5FSCDT = AF0EW02.AF5FSCDT[AFWIDX4]; /* Fcst clr chg dt*/
  VAFCLR02.AF5LGSHQ = AF0EW02.AF5LGSHQ[AFWIDX4]; /* # Units lng/sht*/
  VAFCLR02.AF5BLAQ = AF0EW02.AF5BLAQ[AFWIDX4]; /* Avail units*/
  VAFCLR02.AF5BKQ = AF0EW02.AF5BKQ[AFWIDX4]; /* Tot $ cust ord*/
  VAFCLR02.AF5BKPT = AF0EW02.AF5BKPT[AFWIDX4]; /* % total book*/
  VAFCLR02.AF5PRSCQ = AF0EW02.AF5PRSCQ[AFWIDX4]; /* Pur sty/clr qt*/
  VAFCLR02.AF5PRSCP = AF0EW02.AF5PRSCP[AFWIDX4]; /* Pur sty/clr %*/
  VAFCLR02.AF5LSCDT = AF0EW02.AF5LSCDT[AFWIDX4]; /* Calc date*/
  VAFCLR02.AF2SFODT = AF0EW02.AF2SFODT[AFWIDX4]; /* First offer date*/
  VAFCLR02.XPCCD = AF0EW02.XPCCD[AFWIDX4]; /* Product Category*/
  VAFCLR02.XPLCD = AF0EW02.XPLCD[AFWIDX4]; /* Product Line*/
  VAFCLR02.XPRCD = AF0EW02.XPRCD[AFWIDX4]; /* Product Type*/
  VAFCLR02.AF-WT-COLR-PCT = AF0EW02.AF-WT-COLR-PCT[AFWIDX4];
  VAFCLR02.AIRSPD-LGSH-FL = AF0EW02.AIRSPD-LGSH-FL[AFWIDX4];
  ;
   /* *==============================**/
   /* *  Update DACAST.VAFCLR01 Row  **/
   /* *==============================**/
  ;
  try
    call "VAFCLR02" ("U ", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S14"; /* Process number*/
      AF0EW01.AF0EWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
        AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES14

// select based on life cycle
Function AF0ES15()
  set PG2REC empty;
  set VAFCLR02 empty;
  set AF0EW03 empty;
  PG2REC.XLCCD1 = AF0EM001.XLCCD[1];
  PG2REC.XLCCD2 = AF0EM001.XLCCD[2];
  PG2REC.XLCCD3 = AF0EM001.XLCCD[3];
  PG2REC.XLCCD4 = AF0EM001.XLCCD[4];
   /* MOVE XP1REC.XGPCD TO PG2REC.XGPCD;*/
  PG2REC.XGPCD = "03";
  PG2REC.XDMCD = AF2REC.XDMCD;
  PG2REC.SY1STNBR = AF2REC.SY1STNBR;
  VAFCLR02.XSECD = AF2REC.XSECD;
  VAFCLR02.XSNYR = AF2REC.XSNYR;
  AF0EW03.AF0EWIOT = "SC";
  ;
  try
    call "AF1610" (AF0EW03, SQLCA, PG2REC, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S15 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "QUALIFY ON LIFE CYCLE   ";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "JOIN    "; /* Data base name*/
  TA1REC.TA1TBLVU = "AFSYCLR "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES15

// edit select life cycle cds
Function AF0ES16()
  AFWREC.AFWIDX1 = 4;
  ;
  while (AFWREC.AFWIDX1 >= 1)
    ;
    if (AF0EM001.XLCCD[AFWIDX1] != " ")
      ;
      if (AF0EM001.XLCCD[AFWIDX1] in XLCTBL.XLCCD
       && XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
                         /* (field is valid)*/
         /* MOVE AF0EM001.XLCCD TO XP1REC.XLCCD;save to ws*/
        AF0EW01.XLCCD[AFWIDX1] = AF0EM001.XLCCD[AFWIDX1];
        ;
      else
                         /* (field in error)*/
        AFWREC.AFWPRCSN = "S16 "; /* Process number*/
        set AF0EM001.XLCCD[AFWIDX1] cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 79; /* indicate error message*/
        AF0EW01.XLCCD[AFWIDX1] = " ";
         /* MOVE ' ' TO XP1REC.XLCCD      ; save to working storage*/
         /* EZERTN                        ; return to calling process*/
        ;
      end
      ;
    else
      AF0EW01.XLCCD[AFWIDX1] = " ";
    end
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 - 1;
  end
  ;
end // end AF0ES16

// edit select division
Function AF0ES17()
  if (AF0EM001.XDVCD == " ") /* Map fld eq spaces*/
    AF0EW01.AF0EWDIV = " "; /* Space out save fld*/
    AF0EW01.AF0EWDDV = " "; /* Space out save desc*/
    AF0EM001.XDVDESC = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  AF0EW01.AF0EWDIV = AF0EM001.XDVCD; /* save to wk map storage*/
  ;
  ;
  if (AF0EM001.XDVCD in XDVTBL.XDVCD)
    ;
     /* IF XDVTBL.XXXSTAT(EZETST) EQ 'A'     ; Active status*/
    AF0EW01.AF0EWDIV = AF0EM001.XDVCD; /* save to wk storage*/
    XP1REC.XDVCD = AF0EM001.XDVCD; /* save to wk storage*/
    XP1REC.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex]; /* To wk storage*/
    AF0EW01.AF0EWDDV = XDVTBL.XDVDESC[sysVar.arrayIndex]; /* To wk storage*/
    AF0EM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex]; /* To map*/
    return; /* Exit to calling process*/
     /* END ;*/
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S17 "; /* Process number*/
  set AF0EM001.XDVCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  AF0EW01.AF0EWDDV = " "; /* Space out save desc*/
  AF0EM001.XDVDESC = " "; /* Space out map desc*/
  ;
  ;
  ;
end // end AF0ES17

// Edit product line cd
Function AF0ES18()
  if (AF0EM001.XPLCD == " ") /* Map fld eq spaces*/
    AF0EW01.AF0EWPLN = " "; /* Space out save fld*/
    AF0EW01.AF0EWDPL = " "; /* Space out save abrv*/
    AF0EM001.XPLABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end
  ;
  AF0EW01.AF0EWPLN = AF0EM001.XPLCD; /* save to wk map storage*/
  ;
  ;
  if (AF0EM001.XPLCD in XPLTBL.XPLCD)
    ;
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      ;
      if (AF0EM001.XPLCD == AF0EW01.AF0EWAL1) /* EQ previous xpl*/
        AF0EW01.AF0EWDPL = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0EW01.AF0EWAL1 = AF0EM001.XPLCD; /* save to wk storage*/
        XP1REC.XPLCD = AF0EM001.XPLCD; /* save to wk storage*/
        XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0EW01.AF0EWDPL = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0EM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S18 "; /* Process number*/
  set AF0EM001.XPLCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  AF0EW01.AF0EWDPL = " "; /* Space out save abrv*/
  AF0EM001.XPLABRV = " "; /* Space out map abrv*/
  ;
  ;
  ;
end // end AF0ES18

// Edit product type cd
Function AF0ES19()
  if (AF0EM001.XPRCD == " ") /* Map fld eq spaces*/
    AF0EW01.AF0EWTYP = " "; /* Space out save fld*/
    AF0EW01.AF0EWDPR = " "; /* Space out save abrv*/
    AF0EM001.XPRABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end
  ;
  AF0EW01.AF0EWTYP = AF0EM001.XPRCD; /* save to wk map storage*/
  ;
  ;
  if (AF0EM001.XPRCD in XPRTBL.XPRCD)
    ;
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      ;
      if (AF0EM001.XPRCD == AF0EW01.AF0EWAT1) /* EQ previous xpr*/
        AF0EW01.AF0EWDPR = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0EW01.AF0EWAT1 = AF0EM001.XPRCD; /* save to wk storage*/
        XP1REC.XPRCD = AF0EM001.XPRCD; /* save to wk storage*/
        XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0EW01.AF0EWDPR = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0EM001.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S19 "; /* Process number*/
  set AF0EM001.XPRCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 80; /* indicate error message*/
  AF0EW01.AF0EWDPL = " "; /* Space out save abrv*/
  AF0EM001.XPRABRV = " "; /* Space out map abrv*/
  ;
  ;
  ;
end // end AF0ES19

// Check if Style qualified
Function AF0ES1A()
  ;
  if (AF0EW01.SY1STNBR != " ") /* Specific style entered*/
    ;
    if (AF2REC.SY1STNBR == AF0EW01.SY1STNBR) /* The style specified*/
      ;
      if (AF0EW01.AF0EWSIL != " ") /* XSUCD specified*/
        if (AF0EW01.AF0EWSIL == XP1REC.XSUCD) /* Comb.match with criteria*/
                        /* (XSUCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0EW01.AF0EWCAT != " ") /* XPCCD specified*/
        if (AF0EW01.AF0EWCAT == XP1REC.XPCCD) /* Comb.match with criteria*/
                        /* (XPCCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0EW01.AF0EWTYP != " ") /* XPRCD specified*/
        if (AF0EW01.AF0EWTYP == XP1REC.XPRCD) /* Comb.match with criteria*/
                        /* (XPRCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0EW01.AF0EWGA != " ") /* XGACD specified*/
        if (AF0EW01.AF0EWGA == XP1REC.XGACD) /* Comb.match with criteria*/
                        /* (XGACD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0EW01.AF0EWPLN != " ") /* XPLCD specified*/
        if (AF0EW01.AF0EWPLN == XP1REC.XPLCD) /* Comb.match with criteria*/
                        /* (XPLCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0EW01.AF0EWXOW != " ") /* xowcd specified*/
        if (AF0EW01.AF0EWXOW == AF2REC.XOWCD) /* Comb.match with criteria*/
          /* next sentence    (XOWCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0EM001.XLCCD[1] != " ") /* life cycle check requested*/
        AF0ES15(); /* life cycle validate*/
        if (AF0EW03.AF0EWCNT == 0) /* none in life cycle(s)*/
          return;
        end
      end
      ;
      if (AF0EM001.XXXSTAT == "A" /* only active requested*/
       && AF2REC.AF2FSTST != "A") /* not active style*/
        return; /* dont qualify*/
      end
      ;
      if (AF0EM001.XXXSTAT == "I" /* only inactive requested*/
       && AF2REC.AF2FSTST != "I") /* not inactive style*/
        return; /* dont qualify*/
      end
      ;
      if (AF0EM001.XXXSTAT == "N" /* only new requested*/
       && AF2REC.AF2FSTST != "N") /* not new style*/
        return;
      end /* dont qualify*/
      ;
      ;
      AF0EW01.AF0EWST1 = " "; /* Indicate style for processing*/
      AF0EW01.AF0EWSQU = "Y"; /* Style qualified*/
      ;
    else
      ;
      if (AF0EW01.AF0EWST1 == " ") /* Specified style already processed*/
                   /* (Style retrieved is valid)*/
        AF0EW01.AF0EWSQU = "Y"; /* Style qualified*/
        ;
      else
        ;
        return; /* ****** EXIT to get next style*/
        ;
      end
      ;
    end
    ;
  else
    ;
    if (AF0EW01.AF0EWXOW != " ") /* xowcd specified*/
      if (AF0EW01.AF0EWXOW == AF2REC.XOWCD) /* Comb.match with criteria*/
          /* next sentence    (XOWCD valid)*/
      else
        return; /* ****** EXIT to get next style*/
      end
    end
    ;
    if (AF0EM001.XLCCD[1] != " ") /* life cycle check requested*/
      AF0ES15(); /* life cycle validate*/
      if (AF0EW03.AF0EWCNT == 0) /* none in life cycle(s)*/
        return;
      end
    end
    ;
    if (AF0EM001.XXXSTAT == "A" /* only active requested*/
     && AF2REC.AF2FSTST != "A") /* not active style*/
      return; /* dont qualify*/
    end
    ;
    if (AF0EM001.XXXSTAT == "I" /* only inactive requested*/
     && AF2REC.AF2FSTST != "I") /* not inactive style*/
      return; /* dont qualify*/
    end
    ;
    if (AF0EM001.XXXSTAT == "N" /* only new requested*/
     && AF2REC.AF2FSTST != "N") /* not new style*/
      return;
    end /* dont qualify*/
    ;
               /* (Accept Style for processing)*/
    AF0EW01.AF0EWSQU = "Y"; /* Style qualified*/
    ;
  end
  ;
  ;
  ;
end // end AF0ES1A

// Obtain Color data
Function AF0ES1B()
   /* ------------------------------------------------------------*/
   /* Using the current style no. as part of the key,*/
   /* All qualified colors are obtained from the color DB.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================================**/
   /* * Obtain All Colors within Style  **/
   /* *=================================**/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors*/
    AF0ES1C(); /* Select colors*/
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors*/
    ;
    AFWREC.AFWSWC = "N"; /* Set loop indicator*/
    AF0EW01.AF0EWIIN = "N"; /* Reset status indicator*/
    AFWREC.AFWIDX3 = 0; /* Reset record ctr*/
    AF0EW01.AF0EWPGM = 1; /* Reset max page ctr*/
    AF0EW01.AF0EWPGV = 1; /* Reset variable page ctr*/
    ;
    while (AFWREC.AFWSWC == "N") /* Obtain and store all colors*/
      AF0ES1D(); /* Get all colors*/
    end
    ;
    ;
    AF0ES1E(); /* Close color cursor*/
    ;
    ;
    /* ----------------------------------------------------------*/
      /* After retrieving all qualified colors, a requalification*/
       /* is now done based on the specified status code set by*/
       /* the user. Note that this activity cannot be done while*/
       /* colors are being retrieved because there is no way of*/
       /* predicting the presence (or absence) of a particular*/
       /* row with status code/s conforming to selection specs.*/
    /* ----------------------------------------------------------*/
    ;
    ;
    if (AFWREC.AFWNMO == 0) /* Style with colors*/
      ;
      ;
      if (AF0EW01.XXXSTAT == "A" /* Active status*/
       || AF0EW01.XXXSTAT == "N") /* New status*/
        ;
        if (AFWREC.AFWIDX3 == 0) /* No qualified colors obtained*/
          ;
          return; /* ****** EXIT to Obtain next style*/
          ;
        end
        ;
      else
        if (AF0EW01.AF0EW-BLNK-FL == "Y" /* BLANKS only requested*/
         && VAFCLR02.PG2SCRFL != "B")    /* Not a BLANK style*/
          return;
        else
          if (AF0EW01.AF0EW-BLNK-FL == "N" /* BLANKS not selected*/
           && VAFCLR02.PG2SCRFL == "B")    /* BLANK style*/
            return;
          end
        end
      end
      ;
      ;
      if (AF0EW01.XXXSTAT == "N" /* New status specified*/
       || AF0EW01.XXXSTAT == "I") /* or Inactive status*/
        ;
        AFWREC.AFWIDX1 = 0; /* Set New status ctr*/
        AFWREC.AFWIDX4 = 0; /* Set Inactive status ctr*/
        AFWREC.AFWIDX2 = 1; /* Set loop index*/
        ;
        while (AFWREC.AFWIDX2 <= AFWREC.AFWIDX3) /* Count Status cds*/
          ;
          if (AF0EW02.AF0EWSTA[AFWIDX2] == "N") /* New status found*/
            AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Add to ctr*/
          else
            if (AF0EW02.AF0EWSTA[AFWIDX2] == "I") /* Inact status found*/
              AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Add to ctr*/
            end
          end
          ;
          AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
          ;
        end
        ;
        if (AF0EW01.XXXSTAT == "N") /* New status*/
          ;
          if (AFWREC.AFWIDX1 <= 0) /* No new status in set*/
            ;
            return; /* ****** EXIT to Obtain next style*/
            ;
          end
          ;
        end
        ;
        if (AF0EW01.XXXSTAT == "I") /* Inactive status*/
          ;
          if (AFWREC.AFWIDX4 <= 0) /* No inactive status in set*/
            ;
            return; /* ******* EXIT Obtain next style*/
            ;
          end
          ;
        end
        ;
      end
      ;
    end
    ;
    ;
    if (AFWREC.AFWNMO != 0 /* Other informatory data present*/
     && AFWREC.AFWIDX3 == 0) /* and No colors retrieved*/
      ;
      AF0EW01.AF0EWLCT = 0; /* Reset style loop ctr*/
      if (AFWREC.AFWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(AFWREC.AFWNMO);
      end /* Indicate error msg.*/
      ;
                 /* (Format Current Combination Flds)*/
      ;
      AF0EM001.AF0EMDCD = XP1REC.XDVCD; /* Cur G/A cd*/
      AF0EM001.AF0EMTCD = XP1REC.XPRCD; /* Cur G/A cd*/
      AF0EM001.AF0EMGCD = XP1REC.XGACD; /* Cur G/A cd*/
      AF0EM001.AF0EMLCD = XP1REC.XPLCD; /* Cur G/A cd*/
      AF0EM001.AF0EMCCD = XP1REC.XPCCD; /* Cur CAT cd*/
      AF0EM001.AF0EMSCD = XP1REC.XSUCD; /* Cur SIL cd*/
      ;
             /* (Format Current Combination Description Flds)*/
      /* MOVE XP1REC.XGAABRV TO AF0EM001.XGAABRV; Cur G/A desc*/
      /* MOVE XP1REC.XPCABRV TO AF0EM001.XPCABRV; Cur CAT desc*/
      /* MOVE XP1REC.XSUABRV TO AF0EM001.XSUABRV; Cur SIL desc*/
      ;
                  /* (Darken Map Detail Lines)*/
      ;
      set AF0EM001.AF0EMSTA[1] skip, invisible; /* Row status*/
      AF0EM001.AF0EMSTY[1] = XP1REC.SY1STNBR; /* Style no.*/
      AF0EM001.AF0EMSNM[1] = XP1REC.SY1SSTNM; /* Style nm*/
      set AF0EM001.AF0EMCLR[1] skip, invisible; /* Color cd*/
      set AF0EM001.AF0EMCDS[1] skip, invisible; /* Color desc*/
      set AF0EM001.AF5CLRPT[1] skip, invisible; /* Color pcent*/
      set AF0EM001.AF5ADBFL[1] skip, invisible; /* Add buy flag*/
      set AF0EM001.AF0EMFUN[1] skip, invisible; /* Fcst units*/
      set AF0EM001.AF0EMCFD[1] skip, invisible; /* Fcst color*/
      ;
      AFWREC.AFWIDX1 = 2; /* Set loop index*/
      ;
      while (AFWREC.AFWIDX1 <= 9) /* Protect/darken map display*/
        set AF0EM001.AF0EMSTA[AFWIDX1] skip, invisible; /* Row status*/
        set AF0EM001.AF0EMSTY[AFWIDX1] skip, invisible; /* Style no.*/
        set AF0EM001.AF0EMSNM[AFWIDX1] skip, invisible; /* Style nm*/
        set AF0EM001.AF0EMCLR[AFWIDX1] skip, invisible; /* Color cd*/
        set AF0EM001.AF0EMCDS[AFWIDX1] skip, invisible; /* Color desc*/
        set AF0EM001.AF5CLRPT[AFWIDX1] skip, invisible; /* Color pcent*/
        set AF0EM001.AF5ADBFL[AFWIDX1] skip, invisible; /* Add buy flag*/
        set AF0EM001.AF0EMFUN[AFWIDX1] skip, invisible; /* Fcst style*/
        set AF0EM001.AF0EMCFD[AFWIDX1] skip, invisible; /* Fcst color*/
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      end
      ;
      set AF0EM001.XSECD cursor; /* Set cursor position*/
      AF0EM001.AF0EMCPT = 0; /* Clear color pcent total*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF0ES1B

// Set Select Color rows
Function AF0ES1C()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set VAFCLR02 empty; /* Reset rec work area*/
  ;
  VAFCLR02.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  VAFCLR02.XDMCD = "00"; /* Dimension cd*/
  ;
   /* IF COMMAREA.XDVCD NE ' '        ; XDVCD passed*/
    /* MOVE COMMAREA.XDVCD TO AF5REC.XDVCD  ; Division cd*/
   /* ELSE ;*/
    /* MOVE '01' TO AF5REC.XDVCD     ; Division cd*/
   /* END ;*/
  ;
  VAFCLR02.XDVCD = AF2REC.XDVCD;
  VAFCLR02.XSECD = XP1REC.XSECD; /* Season cd*/
  VAFCLR02.XOWCD = AF2REC.XOWCD; /* owner group*/
  AF0EW01.AF0EWXSY = 0; /* Initialize xsnyr wk area*/
  AF0EW01.AF0EWXSY = XP1REC.XSNYR; /* Move to wk area*/
  ;
   /* ---------------- y2k out begin --------------*/
   /* AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 1900;/* Add Century*/
   /* ---------------- y2k out end ----------------*/
  ;
   /* ---------------- y2k in  begin --------------*/
  if (AF0EW01.AF0EWXSY < 1900) /* no century built yet*/
    if (AF0EW01.AF0EWXSY > 65)
      AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 1900; /* Add Century*/
    else
      AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 2000; /* Add Century*/
    end
  end
   /* ---------------- y2k in end -----------------*/
  VAFCLR02.XSNYR = AF0EW01.AF0EWXSY; /* Season yr*/
  ;
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFCLR01  **/
   /* *====================================**/
  ;
  try
    call "VAFCLR02" ("SS", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S1C "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES1C

// process Color rows
Function AF0ES1D()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until there are no more*/
     /* rows to be processed.*/
   /* All colors retrieved are stored in an array with their*/
     /* accompanying data. Style/Color descriptions are also*/
     /* obtained from the appropriate databases.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *=============================**/
   /* *  Access DACAST.VAFCLR02 DB  * Obtain color row*/
   /* *=============================**/
  ;
  try
    call "VAFCLR02" ("SN", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
    /* If call successful, process the retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    ;
     /* *=========================================**/
     /* *  Check If Row Qualified for Processing  **/
     /* *=========================================**/
    ;
    AF0EW01.AF0EWQLF = "N"; /* Reset color qual flag*/
    ;
    if (AF0EW01.XXXSTAT == " ") /* no status selection*/
      AF0EW01.AF0EWQLF = "Y"; /* Row is qualified*/
    else
      if (AF0EW01.XXXSTAT == "A" /* Active status specified*/
       && VAFCLR02.AF5FSCST == "A") /* Row status active*/
        AF0EW01.AF0EWQLF = "Y"; /* Row is qualified*/
      else
        ;
        if (AF0EW01.XXXSTAT == "N" /* New status specified*/
         && VAFCLR02.AF5FSCST == "N") /* Row status new*/
          AF0EW01.AF0EWQLF = "Y"; /* Row is qualified*/
        else
          ;
          if (AF0EW01.XXXSTAT == "I" /* inactive status specified*/
           && VAFCLR02.AF5FSCST == "I") /* Row status inactive*/
            AF0EW01.AF0EWQLF = "Y"; /* Row is qualified*/
            AF0EW01.AF0EWIIN = "Y"; /* Row not 'A' or 'N' status*/
          end
          ;
        end
        ;
      end
      ;
    end
    ;
    if (AF0EM001.AF0EM-BLNK-FL == "Y"
     && VAFCLR02.PG2SCRFL != "B")
      AF0EW01.AF0EWQLF = "N"; /* Style is not a BLANK*/
      AFWREC.AFWSWC = "Y"; /* End color loop*/
      AF0EW01.AF0EWIIN = "Y";
      return;
    else
      if (AF0EM001.AF0EM-BLNK-FL == "N"
       && VAFCLR02.PG2SCRFL == "B")
        AF0EW01.AF0EWQLF = "N"; /* Style is a BLANK*/
        AFWREC.AFWSWC = "Y"; /* End color loop*/
        AF0EW01.AF0EWIIN = "Y";
        return;
      end
    end
    ;
    ;
     /* *=============================**/
     /* *  Check if Row is Qualified  **/
     /* *=============================**/
    ;
    if (AF0EW01.AF0EWQLF == "Y") /* Row is qualified*/
      ;
      AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* Increment record ctr*/
      ;
      ;
       /* *=====================**/
       /* *  Check Page Number  **/
       /* *=====================**/
      ;
      if (AFWREC.AFWIDX3 == 9   /* Page 1 created*/
       || AFWREC.AFWIDX3 == 18  /* Page 2 created*/
       || AFWREC.AFWIDX3 == 27  /* Page 3 created*/
       || AFWREC.AFWIDX3 == 36  /* Page 4 created*/
       || AFWREC.AFWIDX3 == 45  /* Page 5 created*/
       || AFWREC.AFWIDX3 == 54  /* Page 6 created*/
       || AFWREC.AFWIDX3 == 63  /* Page 7 created*/
       || AFWREC.AFWIDX3 == 72  /* Page 8 created*/
       || AFWREC.AFWIDX3 == 81  /* Page 9 created*/
       || AFWREC.AFWIDX3 == 90  /* Page 10 created*/
       || AFWREC.AFWIDX3 == 99  /* Page 11 created*/
       || AFWREC.AFWIDX3 == 108 /* Page 12 created*/
       || AFWREC.AFWIDX3 == 117 /* Page 13 created*/
       || AFWREC.AFWIDX3 == 126 /* Page 14 created*/
       || AFWREC.AFWIDX3 == 135 /* Page 15 created*/
       || AFWREC.AFWIDX3 == 144 /* Page 16 created*/
       || AFWREC.AFWIDX3 == 153 /* Page 17 created*/
       || AFWREC.AFWIDX3 == 162 /* Page 18 created*/
       || AFWREC.AFWIDX3 == 171 /* Page 19 created*/
       || AFWREC.AFWIDX3 == 180 /* Page 20 created*/
       || AFWREC.AFWIDX3 == 189 /* Page 21 created*/
       || AFWREC.AFWIDX3 == 198 /* Page 22 created*/
       || AFWREC.AFWIDX3 == 207 /* Page 23 created*/
       || AFWREC.AFWIDX3 == 216 /* Page 24 created*/
       || AFWREC.AFWIDX3 == 225) /* Page 25 created*/
        AF0EW01.AF0EWPGM = AF0EW01.AF0EWPGM + 1; /* Add to max pages*/
      end
      ;
      ;
       /* *=============================**/
       /* *  Access DPRODG.VSYCLR01 DB  * Obtain style,color desc*/
       /* *=============================**/
      ;
      AF0ES01(); /* Obtain style,color desc*/
      ;
      ;
       /* *===========================**/
       /* *  Store Color in Wk Array  **/
       /* *===========================**/
      ;
      AF0EW02.AF0EWPGE[AFWIDX3] = AF0EW01.AF0EWPGM; /* Page no.*/
      AF0EW02.AF0EWCHG[AFWIDX3] = " "; /* Change status*/
      AF0EW02.AF0EWSTA[AFWIDX3] = VAFCLR02.AF5FSCST; /* Rec status*/
      AF0EW02.AF0EWSTW[AFWIDX3] = VAFCLR02.AF5FSCST; /* Rec status wk*/
      AF0EW02.AF0EWCLR[AFWIDX3] = VAFCLR02.SY2CLRID; /* Color cd*/
      AF0EW02.PG2SCRFL[AFWIDX3] = VAFCLR02.PG2SCRFL;
      AF0EW02.AF2SFODT[AFWIDX3] = VAFCLR02.AF2SFODT;
                                   /* first offer date*/
      ;
      if (XP1REC.SY1SSTNM == " ") /* No style desc found*/
        AF0EW02.AF0EWCLD[AFWIDX3] = " "; /* Move blank clr dsc*/
      else
        AF0EW02.AF0EWCLD[AFWIDX3] = PG2REC.SY2CLRAB; /* Move clr dsc*/
      end
      ;
      AF0EW02.AF0EWCLP[AFWIDX3] = VAFCLR02.AF5FSCPT; /* Color pcent*/
      AF0EW02.AF0EWCLW[AFWIDX3] = VAFCLR02.AF5FSCPT;
                                   /* Color pcent wk 2*/
      AF0EW02.AF0EWADB[AFWIDX3] = VAFCLR02.AF5CLBFL; /* Add buy flag*/
      AF0EW02.AF0EWADW[AFWIDX3] = VAFCLR02.AF5CLBFL;
                                                         /* Add buy flag wk*/
      AF0EW02.AF0EWCCT[AFWIDX3] = VAFCLR02.ZZZCHGCT; /* Change count*/
      ;
      AF0EW02.XDVCD[AFWIDX3] = VAFCLR02.XDVCD; /* save div code*/
      AF0EW02.XOWCD[AFWIDX3] = VAFCLR02.XOWCD; /* save div code*/
      AF0EW02.XPCCD[AFWIDX3] = VAFCLR02.XPCCD; /* save prod cat*/
      AF0EW02.XPLCD[AFWIDX3] = VAFCLR02.XPLCD; /* save prod line*/
      AF0EW02.XPRCD[AFWIDX3] = VAFCLR02.XPRCD; /* save prod type*/
      AF0EW02.AF5FSCDT[AFWIDX3] = VAFCLR02.AF5FSCDT;
                                                         /* Fcst clr chg dt*/
      AF0EW02.AF5LGSHQ[AFWIDX3] = VAFCLR02.AF5LGSHQ;
                                                         /* # Units lng/sht*/
      AF0EW02.AF5BLAQ[AFWIDX3] = VAFCLR02.AF5BLAQ; /* Avail units*/
      AF0EW02.AF5BKQ[AFWIDX3] = VAFCLR02.AF5BKQ; /* Tot $ cust ord*/
      AF0EW02.AF5BKPT[AFWIDX3] = VAFCLR02.AF5BKPT; /* % total book*/
      AF0EW02.AF5BTBQ[AFWIDX3] = VAFCLR02.AF5BTBQ; /* Cust books*/
      AF0EW02.AF5BTBPT[AFWIDX3] = VAFCLR02.AF5BTBPT; /* % bal to book*/
      AF0EW02.AF5PRSCQ[AFWIDX3] = VAFCLR02.AF5PRSCQ; /* Pur sty/clr qt*/
      AF0EW02.AF5PRSCP[AFWIDX3] = VAFCLR02.AF5PRSCP; /* Pur sty/clr %*/
      AF0EW02.AF5LSCDT[AFWIDX3] = VAFCLR02.AF5LSCDT; /* Calc date*/
      AF0EW02.AF-IN-STK-PCT[AFWIDX3] = VAFCLR02.AF-IN-STK-PCT;
      AF0EW02.AF-WT-COLR-PCT[AFWIDX3] = VAFCLR02.AF-WT-COLR-PCT;
      AF0EW02.AIRSPD-LGSH-FL[AFWIDX3] = VAFCLR02.AIRSPD-LGSH-FL;
    end
    ;
    return; /* Loop through*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    AFWREC.AFWSWC = "Y"; /* Indicate end of loop*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No more records found*/
      ;
      if (AFWREC.AFWIDX3 == 0) /* No records retrieved*/
        ;
        if (AF0EW01.AF0EWIIN == "Y") /* With unqualified color rows*/
          return; /* Return to calling process*/
        else
          AFWREC.AFWNMO = 38; /* Indicate style w/ no colors*/
          AFWREC.AFWPRCSN = "S1D "; /* Process number*/
          return; /* Return to calling process*/
        end
        ;
      else
        return; /* Return to calling process*/
      end
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S1D "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES1D

// Close Color cursor
Function AF0ES1E()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VAFCLR02" ("CS", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal retun code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S1E "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0ES1E

// get wholesale price
Function AF0ES20()
  ;
   /* ------------------------------------------------------------*/
             /* Obtain Data from PRICE SUBROUTINE*/
   /* ------------------------------------------------------------*/
  ;
   /* *===================**/
   /* *  SelectION FIELDS **/
   /* *===================**/
  ;
  set AF1REC empty; /* Reset rec work area*/
  ;
  AF1REC.XSECD = AF2REC.XSECD;
  AF1REC.XSNYR = AF2REC.XSNYR;
  AF1REC.XGPCD = "03"; /* GPC cd*/
  AF1REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
  AF1REC.SY2CLRID = "***"; /* Color*/
  AF1REC.XPYCD = "01"; /* Price type*/
  AF1REC.XQACD = "01"; /* Price quality*/
  ;
  ;
  try
    call "AF1730" (AF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/
  ;
  ;
  if (sysVar.errorCode != "00000000" /* Call NOT successful*/
   || AF1REC.AF1-RETURN-CODE == "1"  /* and normal return code*/
   || AF1REC.AF1-RETURN-CODE == "3") /* and normal return code*/
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    SQLCA.VAGen_SQLCODE = AF1REC.AF1-ERROR-SQLCODE;
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "S06 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "DECLARE TABLE ROW";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRICE01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/
    ;
    AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  else
    AF0EW01.AF0EWPRC = AF1REC.SY5PRCUN;
  end
  ;
  ;
  ;
end // end AF0ES20

// Verify no open po's
Function AF0ES21()
   /* ----------------------------------------------------------*/
   /* COUNT OPEN PO'S AGAINST STYLE*/
   /* ----------------------------------------------------------*/
  ;
  set PCYREC empty;
  set PC6REC empty;
  ;
  PC6REC.XGPCD = "03";
  PC6REC.SY1STNBR = AF0EM001.AF0EMSTY[1];
  PC6REC.SY2CLRID = AF0EM001.AF0EMCLR[AFWIXM];
  PC6REC.XDMCD = "00";
  PC6REC.XOWCD = AF0EM001.XOWCD[1];
  PC6REC.YSMXDV = "10";
  move AF0EW-XSE-1 to AF0EW-PCF-1 withV60Compat;
  move AF0EW-XSN-2 to AF0EW-PCF-2 withV60Compat;
  PC6REC.PCFSECD = AF0EW-PCFSECD;
  PCYREC.PCYFUNC = "T8";
  ;
  ;
  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWPRCSN = "S21"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "COUNT DPRODC.VPOITM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "AF0ES21"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* EXIT TO DISPLAY MAP*/
  ;
  ;
   /* ------------- End of process AF0ES21 -----------------------*/
  ;
end // end AF0ES21

// Edit owner group cd
Function AF0ES22()
  if (AF0EM001.AF0EMXOW == AF0EW01.AF0EWXOW) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end
  ;
  if (AF0EM001.AF0EMXOW == " ") /* Map fld eq spaces*/
    AF0EW01.AF0EWXOW = " "; /* Space out save fld*/
    AF0EW01.XOWABRV = " "; /* Space out save desc*/
    AF0EM001.XOWABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  if (AF0EM001.AF0EMXOW == "**") /* corporate look*/
    AF0EW01.AF0EWXOW = "**"; /* Space out save fld*/
    AF0EW01.XOWABRV = " "; /* Space out save desc*/
    AF0EM001.XOWABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  else
    XP1REC.XWHCD = "51";
    XP1REC.XOWCD = AF0EM001.AF0EMXOW;
    ;
    if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
      AF0EW01.AF0EWXOW = AF0EM001.AF0EMXOW; /* save to wk storage*/
      XP1REC.XOWCD = AF0EM001.AF0EMXOW; /* save to wk storage*/
      AF0EW01.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0EM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk map*/
      XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
    end
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S22 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  set AF0EM001.AF0EMXOW cursor, bold; /* highlight field*/
  AF0EW01.XOWABRV = " "; /* Space out save desc*/
  AF0EM001.XOWABRV = " "; /* Space out save desc*/
  ;
  ;
  ;
end // end AF0ES22

// Edit blank only flag
Function AF0ES23()
  ;
  if (AF0EM001.AF0EM-BLNK-FL == " ")
    AF0EM001.AF0EM-BLNK-FL = "N";
    AF0EW01.AF0EW-BLNK-FL = "N";
    return;
  end
  ;
  if (AF0EM001.AF0EM-BLNK-FL != "Y"
   && AF0EM001.AF0EM-BLNK-FL != "N")
    ;
                   /* (field in error)*/
    AF0EW01.AF0EW-BLNK-FL = " "; /* Space out wk storage*/
    AFWREC.AFWPRCSN = "S23 "; /* Process number*/
    set AF0EM001.AF0EM-BLNK-FL cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 39; /* indicate error message*/
    ;
  else
    ;
                   /* (field is valid)*/
    AF0EW01.AF0EW-BLNK-FL = AF0EM001.AF0EM-BLNK-FL;
    ;
    ;
  end
  ;
  ;
end // end AF0ES23

// Update DACAST.VAFCLR01 - fod
Function AF0ES24()
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/
  ;
   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/
  ;
  set VAFCLR02 empty; /* Reset Wk Storage field*/
  VAFCLR02.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  VAFCLR02.XDMCD = "00"; /* Dimension cd*/
  VAFCLR02.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0EW01.AF0EWXSY = 0; /* Initialize xsnyr wk area*/
  AF0EW01.AF0EWXSY = XP1REC.XSNYR; /* Move to wk area*/
   /* -------------- y2k out begin ---------------*/
   /* AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 1900;/* Add Century*/
   /* -------------- y2k out end -----------------*/
   /* -------------- y2k in begin ----------------*/
  if (AF0EW01.AF0EWXSY < 1900) /* no century built yet*/
    if (AF0EW01.AF0EWXSY > 60)
      AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 1900; /* Add Century*/
    else
      AF0EW01.AF0EWXSY = AF0EW01.AF0EWXSY + 2000; /* Add Century*/
    end
  end
   /* -------------- y2k in end ------------------*/
  VAFCLR02.XSNYR = AF0EW01.AF0EWXSY; /* Season yr*/
  VAFCLR02.SY2CLRID = AF0EW02.AF0EWCLR[AFWIDX4]; /* Color ID*/
  VAFCLR02.XDVCD = AF0EW02.XDVCD[AFWIDX4]; /* div cd*/
  VAFCLR02.XOWCD = AF0EW02.XOWCD[AFWIDX4]; /* owner group*/
  ;
   /* *=====================================**/
   /* *  Move Update Items into Output Row  **/
   /* *=====================================**/
  ;
  VAFCLR02.AF2SFODT = AF0EW02.AF2SFODT[AFWIDX4]; /* First offer date*/
  VAFCLR02.AF-IN-STK-PCT = AF0EW02.AF-IN-STK-PCT[AFWIDX4];
  VAFCLR02.AIRSPD-LGSH-FL = AF0EW02.AIRSPD-LGSH-FL[AFWIDX4];
  ;
   /* IF AF0EW02.XOWCD(AFWIDX4) EQ '00';*/
    /* AF5REC.AF-IN-STK-QTY =*/
      /* AF0EM002.AF2FSTDL * AF0EW02.AF0EWCLP(AFWIDX4) **/
      /* AF5REC.AF-IN-STK-PCT / AF0EW01.AF0EWPRC (R;*/
    /* AF5REC.AF-IN-STK-QTY =*/
      /* AF5REC.AF-IN-STK-QTY / 10000 (R;*/
   /* END;*/
  ;
  VAFCLR02.ZZZCHGCT = AF0EW02.AF0EWCCT[AFWIDX4]; /* Change count*/
  VAFCLR02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VAFCLR02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* *==============================**/
   /* *  Update DACAST.VAFCLR01 Row  **/
   /* *==============================**/
  ;
  try
    call "VAFCLR02" ("U2", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AF0EW02.AF0EWCCT[AFWIDX4] = AF0EW02.AF0EWCCT[AFWIDX4] + 1;
    ;
    /* IF AF0EM001.AF-IN-STK-PCT EQ 0*/
     /* AND AF5REC.AF-IN-STK-PCT NE 0;*/
     /* MOVE AF5REC.AF-IN-STK-PCT TO AF2REC.AF-IN-STK-PCT;*/
     /* MOVE AF5REC.AF-IN-STK-PCT TO AF0EM001.AF-IN-STK-PCT;*/
     /* AF0ES29;*/
    /* END;*/
    ;
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S24"; /* Process number*/
      AF0EW01.AF0EWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
        AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S24 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES24

// DACAST.VAVPCT01 processing
Function AF0ES25()
   /* ---------------------------------------------------------*/
   /* 1)  Select cursor for DACAST.VAVPCT01 to determine if a row*/
   /* exists for STYLE, COLOR, DIM, OG, DIV, SESN & AF-MO-AVAL-PCT*/
   /* equal 100.*/
   /* 2)  If row exists:*/
   /* - delete the row*/
   /* - move AF-SESN-FRST-OFDT to AF-MO.*/
   /* - move 100 to AF-MO-AVAL-PCT.*/
   /* - write a new row.*/
   /* If row does not exist:*/
   /* - write a new row.*/
   /* ---------------------------------------------------------*/
  ;
  ;
  AF0EW01.AF0EW-SESN-FRST-OFDT = AF0EW02.AF2SFODT[AFWIDX4];
  ;
  ;
  AF0ES26(); /* Select DACAST.VAVPCT01*/
  ;
  if (AF0EW01.AF0EW-ROW-EXISTS == "Y")
    if (VAVPCT01.AF-MO-AVAL-PCT == 100)
      AF0ES27(); /* Delete DACAST.VAVPCT01*/
      AF0ES28(); /* Write  DACAST.VAVPCT01*/
    end
  else
    AF0ES28(); /* Write  DACAST.VAVPCT01*/
  end
  ;
  ;
end // end AF0ES25

// Select Count DACAST.VAVPCT01
Function AF0ES26()
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform select count process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/
  ;
  AF0EW01.AF0EW-ROW-EXISTS = "N";
  set VAVPCT01 empty;
  ;
  VAVPCT01.SY-STY-NBR = XP1REC.SY1STNBR;
  VAVPCT01.SY-COLR-CD-ID = AF0EW02.AF0EWCLR[AFWIDX4];
  VAVPCT01.XDM-DIM-CD = "00";
  VAVPCT01.XOW-OWN-GRP-CD = AF0EW02.XOWCD[AFWIDX4];
  VAVPCT01.XDV-DIV-CD = AF0EW02.XDVCD[AFWIDX4];
  VAVPCT01.XSE-SESN-CD = XP1REC.XSECD;
  VAVPCT01.XSN-SESN-YR-RNG = AF0EW01.AF0EWXSY;
  ;
  ;
  ;
   /* *==============================**/
   /* * Select DACAST.VAVPCT01 Csr   **/
   /* *==============================**/
  ;
   /* ------------ y2k out begin --------------*/
   /* cALL IO6530 'S1',SQLCA,VAVPCT01 (NOMAPS,NONCSP,REPLY;*/
   /* ------------ y2k out end ----------------*/
   /* ------------ y2k in  begin --------------*/
  try
    call "VAVPCT02" ("S1", SQLCA, VAVPCT01) {isNoRefresh = yes, isExternal = yes};
  end
   /* ------------ y2k in end -----------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    ;
    /* *==============================**/
    /* *  Fetch DACAST.VAVPCT01 Row   **/
    /* *==============================**/
    ;
   /* ------------ y2k out begin --------------*/
   /* cALL IO6530 'n1',SQLCA,VAVPCT01 (NOMAPS,NONCSP,REPLY;*/
   /* ------------ y2k out end ----------------*/
   /* ------------ y2k in  begin --------------*/
    try
      call "VAVPCT02" ("N1", SQLCA, VAVPCT01) {isNoRefresh = yes, isExternal = yes};
    end
   /* ------------ y2k in end -----------------*/
    ;
    ;
    if (sysVar.errorCode == "00000000") /* Call successful*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
        if (VAVPCT01.SY-STY-NBR == XP1REC.SY1STNBR
         && VAVPCT01.SY-COLR-CD-ID == AF0EW02.AF0EWCLR[AFWIDX4])
          AF0EW01.AF0EW-ROW-EXISTS = "Y";
        end
        ;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
         /* continue*/
        end
      end
      ;
      ;
    /* *==============================**/
    /* *  Close DACAST.VAVPCT01 Csr   **/
    /* *==============================**/
      ;
   /* ------------ y2k out begin --------------*/
   /* cALL IO6530 'c1',SQLCA,VAVPCT01 (NOMAPS,NONCSP,REPLY;*/
   /* ------------ y2k out end ----------------*/
   /* ------------ y2k in  begin --------------*/
      try
        call "VAVPCT02" ("C1", SQLCA, VAVPCT01) {isNoRefresh = yes, isExternal = yes};
      end
   /* ------------ y2k in end -----------------*/
      ;
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
        ;
        return;
        ;
      end
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S26"; /* Process number*/
      AF0EW01.AF0EWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
        AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S26 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT COUNT TABLE ROWS  ";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVPCT02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES26

// Delete DACAST.VAVPCT01
Function AF0ES27()
   /* ------------------------------------------------------------*/
   /* Call IO module to perform delete process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==============================**/
   /* *  Delete DACAST.VAVPCT01 Row  **/
   /* *==============================**/
  ;
   /* ------------ y2k out begin ---------------*/
   /* CALL IO6530 'D ',SQLCA,VAVPCT01 (NOMAPS,NONCSP,REPLY;*/
   /* ------------ y2k out end -----------------*/
   /* ------------ y2k in  begin ---------------*/
  try
    call "VAVPCT02" ("D ", SQLCA, VAVPCT01) {isNoRefresh = yes, isExternal = yes};
  end
   /* ------------ y2k in end ------------------*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S27"; /* Process number*/
      AF0EW01.AF0EWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
        AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S27 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "DELETE TABLE ROW         ";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVPCT02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES27

// Add DACAST.VAVPCT01
Function AF0ES28()
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform add process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *======================**/
   /* *  Enter update fields **/
   /* *======================**/
  ;
  XX0XS01();
  VAVPCT01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAVPCT01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
  ;
   /* -------------- y2k out begin -------------*/
   /* MOVE AF0EW01.AF0EW-SESN-YYMM TO VAVPCT01.AF-MO;*/
   /* -------------- y2k out end ---------------*/
  ;
   /* -------------- y2k in  begin -------------*/
  VAVPCT01.AF-MO = AF0EW01.AF0EW-SESN-CYM;
   /* -------------- y2k in end ----------------*/
  ;
  VAVPCT01.AF-MO-AVAL-PCT = 100;
  ;
  ;
   /* *==============================**/
   /* * select DACAST.VAVPCT01 Row   **/
   /* *==============================**/
  ;
   /* -------------- y2k out begin -------------*/
   /* CALL IO6530 'S ',SQLCA,VAVPCT01 (NOMAPS,NONCSP,REPLY;*/
   /* -------------- y2k out end ---------------*/
   /* -------------- y2k in begin --------------*/
  try
    call "VAVPCT02" ("S ", SQLCA, VAVPCT01) {isNoRefresh = yes, isExternal = yes};
  end
   /* -------------- y2k in  end ---------------*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
    /* *==============================**/
    /* *  Add DACAST.VAVPCT01 Row     **/
    /* *==============================**/
      ;
   /* -------------- y2k out begin -------------*/
   /* CALL IO6530 'a ',SQLCA,VAVPCT01 (NOMAPS,NONCSP,REPLY;*/
   /* -------------- y2k out end ---------------*/
   /* -------------- y2k in begin --------------*/
      try
        call "VAVPCT02" ("A ", SQLCA, VAVPCT01) {isNoRefresh = yes, isExternal = yes};
      end
   /* -------------- y2k in  end ---------------*/
      ;
   /* ------------------------------------------------------------*/
    /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
        return; /* Return to calling process*/
      end
      ;
   /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
      ;
      if (sysVar.errorCode == "00000000") /* Call successful*/
        ;
        if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
          AFWREC.AFWSWR = "Y"; /* Reselect same data*/
          AFWREC.AFWNMO = 12; /* Indicate external update done*/
          AFWREC.AFWPRCSN = "S27"; /* Process number*/
          AF0EW01.AF0EWCNF = "U"; /* Indicate reupdate*/
          exit stack; /* Exit to redisplay map*/
        else
          if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
            AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
            AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
            converseLib.validationFailed(11); /* Indicate not available*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
          else
            converseLib.validationFailed(10); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback();
            converseLib.clearScreen();
             /* Clear screen before redisplay*/
          end
        end
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      AFWREC.AFWPRCSN = "S27 "; /* Process number*/
      TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
      TA1REC.TA1LOC = "ADD TABLE ROW            ";
      TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAVPCT02"; /* Table view name*/
      ;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      ;
      exit stack; /* Exit to redisplay map*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S27"; /* Process number*/
      AF0EW01.AF0EWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
        AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S27 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "ADD TABLE ROW            ";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAVPCT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES28

// Update afsty in-stk-pct
Function AF0ES29()
  ;
  try
    call "IO3510" ("U ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      AFWREC.AFWSWR = "Y"; /* request new data*/
      AF0EW01.AF0EWCNF = "U"; /* successful update*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100)
      AF0ES30();
      return;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S29"; /* Process number*/
      AF0EW01.AF0EWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
        AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S29 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES29

// Update afsty in stk pct 2 time
Function AF0ES30()
  AF2REC.ZZZCHGCT = AF2REC.ZZZCHGCT + 1;
  ;
  try
    call "IO3510" ("U ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      AFWREC.AFWSWR = "Y"; /* request new data*/
      AF0EW01.AF0EWCNF = "U"; /* successful update*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "S30"; /* Process number*/
      AF0EW01.AF0EWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
        AF0EW01.AF0EWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S30 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0EM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES30

// Fetch AFCLR row
Function AF0ES33()
  ;
   /* *=============================**/
   /* *  Access DACAST.VAFCLR01 DB  * Obtain color row*/
   /* *=============================**/
  ;
  try
    call "VAFCLR02" ("SN", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
   /* ------------------------------------------------------------*/
    /* If call successful, process the retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0EW01.AF0EWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S33 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0EM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0ES33

//*** RECORD=AF0EW01 ****
// Working Storage (1) for AF0E - Program-defined Variables
//                                add un flag
// ***********************
Record AF0EW01 type basicRecord
  10 AFWSWR AFWSWR ; 
  10 SY1STNBR SY1STNBR ; 
  10 AF0EWST1 AF0EWST1 ; 
  10 AF0EWST2 AF0EWST2 ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 XDMCD XDMCD ; 
  10 XDVCD XDVCD ; 
  10 XXXSTAT XXXSTAT ; 
  10 AF0EWADI AF0EWADI ; 
  10 AF0EWCAT AF0EWCAT ; 
  10 AF0EWCFD AF0EWCFD ; 
  10 AF0EWCIN AF0EWCIN ; 
  10 AF0EWCMS AF0EWCMS ; 
  10 AF0EWCNF AF0EWCNF ; 
  10 AF0EWCPT AF0EWCPT ; 
  10 AF0EWCSY AF0EWCSY ; 
  10 AF0EWCUI AF0EWCUI ; 
  10 AF0EWDSY AF0EWDSY ; 
  10 AF0EWDSL AF0EWDSL ; 
  10 AF0EWDPC AF0EWDPC ; 
  10 AF0EWDGA AF0EWDGA ; 
  10 AF0EWDPR AF0EWDPR ; 
  10 AF0EWDPL AF0EWDPL ; 
  10 AF0EWDDV AF0EWDDV ; 
  10 AF0EWDUP AF0EWDUP ; 
  10 AF0EWGA AF0EWGA ; 
  10 AF0EWTYP AF0EWTYP ; 
  10 AF0EWPLN AF0EWPLN ; 
  10 AF0EWDIV AF0EWDIV ; 
  10 AF0EWIIN AF0EWIIN ; 
  10 AF0EWLCT AF0EWLCT ; 
  10 AF0EWLIM AF0EWLIM ; 
  10 AF0EWLIN AF0EWLIN ; 
  10 AF0EWSIL AF0EWSIL ; 
  10 AF0EWPCT AF0EWPCT ; 
  10 AF0EWPGM AF0EWPGM ; 
  10 AF0EWPGV AF0EWPGV ; 
  10 AF0EWPND AF0EWPND ; 
  10 AF0EWPSA AF0EWPSA ; 
  10 AF0EWQLF AF0EWQLF ; 
  10 AF0EWSQU AF0EWSQU ; 
  10 AF0EWSTD AF0EWSTD ; 
  10 AF0EWSTS AF0EWSTS ; 
  10 AF0EWSTY AF0EWSTY ; 
  10 AF0EWSYK AF0EWSYK ; 
  10 AF0EWOGK AF0EWOGK ; 
  10 AF0EWUSR AF0EWUSR ; 
  10 AF0EWXPR AF0EWXPR ; 
  10 AF0EWAT1 AF0EWAT1 ; 
  10 AF0EWXGA AF0EWXGA ; 
  10 AF0EWAG1 AF0EWAG1 ; 
  10 AF0EWXPL AF0EWXPL ; 
  10 AF0EWAL1 AF0EWAL1 ; 
  10 AF0EWXPC AF0EWXPC ; 
  10 AF0EWAP1 AF0EWAP1 ; 
  10 AF0EWXSU AF0EWXSU ; 
  10 AF0EWXOW AF0EWXOW ; 
  10 XOWABRV XOWABRV ; 
  10 AF0EWAS1 AF0EWAS1 ; 
  10 AF0EWXSY AF0EWXSY ; 
  10 AF0EWXSA AF0EWXSA ; 
    15 AF0EWXSS AF0EWXSS ; 
      20 AF0EW-XSE-1 AF0EW-XSE-1 ; 
      20 AF0EW-XSE-2 AF0EW-XSE-2 ; 
    15 AF0EWXYR AF0EWXYR ; 
      20 AF0EW-XSN-1 AF0EW-XSN-1 ; 
      20 AF0EW-XSN-2 AF0EW-XSN-2 ; 
  10 AF0EW-PCFSECD AF0EW-PCFSECD ; 
    15 AF0EW-PCF-1 AF0EW-PCF-1 ; 
    15 AF0EW-PCF-2 AF0EW-PCF-2 ; 
  10 XLCCD XLCCD [4] ; 
  10 AF0EWPRC AF0EWPRC ; 
  10 AF0EWTFT AF0EWTFT ; 
  10 AF0EWTUN AF0EWTUN ; 
  10 XGAKEY XGAKEY ; 
    15 XGACD XGACD ; 
    15 XGPCD XGPCD ; 
  10 AF0EW-BLNK-FL AF0EW-BLNK-FL ; 
  10 AF0EW-SESN-FRST-OFDT AF0EW-SESN-FRST-OFDT ; 
    15 AF0EW-SESN-CYM AF0EW-SESN-CYM ; 
      20 AF0EW-SESN-CC AF0EW-SESN-CC ; 
      20 AF0EW-SESN-YYMM AF0EW-SESN-YYMM ; 
    15 AF0EW-SESN-DD AF0EW-SESN-DD ; 
  10 AF0EW-ROW-EXISTS AF0EW-ROW-EXISTS ; 
  10 AF0EW-FRST-OFDT AF0EW-FRST-OFDT ; 
    15 AF0EW-FOD-CCC AF0EW-FOD-CCC ; 
    15 AF0EW-FOD-YY AF0EW-FOD-YY ; 
    15 AF0EW-FOD-MM AF0EW-FOD-MM ; 
    15 AF0EW-FOD-DD AF0EW-FOD-DD ; 
  10 AF0EW-ISTK-SW AF0EW-ISTK-SW ; 
  10 AF0EW-MULTI-PCT-SW AF0EW-MULTI-PCT-SW ; 
  10 AF0EW-OLD-PCT AF0EW-OLD-PCT ; 
end // end AF0EW01

//*** RECORD=AF0EW02 ****
// Working Storage (2) for AF0E - Record Work Areas / add un fl
// ***********************
Record AF0EW02 type basicRecord
  10 AF0EWFST AF0EWFST ; 
  10 AF0EWFUN AF0EWFUN ; 
  10 AF2FSTST AF2FSTST ; 
  10 AF0EW-STY-ISTK-PCT AF0EW-STY-ISTK-PCT ; 
  10 AF0EWCA AF0EWCA [300] ; 
    15 AF0EWPGE AF0EWPGE ; 
    15 AF0EWCHG AF0EWCHG ; 
    15 AF0EWSTA AF0EWSTA ; 
    15 AF0EWSTW AF0EWSTW ; 
    15 AF0EWCLR AF0EWCLR ; 
    15 AF0EWCLD AF0EWCLD ; 
    15 AF0EWCLP AF0EWCLP ; 
    15 AF0EWCLW AF0EWCLW ; 
    15 AF0EWADB AF0EWADB ; 
    15 AF0EWADW AF0EWADW ; 
    15 XDVCD XDVCD ; 
    15 XOWCD XOWCD ; 
    15 XPCCD XPCCD ; 
    15 XPLCD XPLCD ; 
    15 XPRCD XPRCD ; 
    15 AF0EWCCT AF0EWCCT ; 
    15 AF5FSCDT AF5FSCDT ; 
    15 AF5LGSHQ AF5LGSHQ ; 
    15 AF5BLAQ AF5BLAQ ; 
    15 AF5BKQ AF5BKQ ; 
    15 AF5BKPT AF5BKPT ; 
    15 AF5BTBQ AF5BTBQ ; 
    15 AF5BTBPT AF5BTBPT ; 
    15 AF5PRSCQ AF5PRSCQ ; 
    15 AF5PRSCP AF5PRSCP ; 
    15 AF5LSCDT AF5LSCDT ; 
    15 AF2SFODT AF2SFODT ; 
    15 AF-IN-STK-PCT AF-IN-STK-PCT ; 
    15 PG2SCRFL PG2SCRFL ; 
    15 AF-WT-COLR-PCT AF-WT-COLR-PCT ; 
    15 AIRSPD-LGSH-FL AIRSPD-LGSH-FL ; 
end // end AF0EW02

//*** RECORD=AF0EW03 ****
// record passed betewwn AF0E and special IOMOD AF1610.  It
// contains two fields -- io function requested and count of
// rows satisfying the selection criteria
// ***********************
Record AF0EW03 type basicRecord
  10 AF0EWIOT AF0EWIOT ; 
  10 AF0EWCNT AF0EWCNT ; 
end // end AF0EW03

// blank only flag
DataItem AF0EW-BLNK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0EW-FOD-CCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0EW-FOD-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0EW-FOD-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0EW-FOD-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0EW-FRST-OFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// in stock style switch
DataItem AF0EW-ISTK-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// more than one color pct value
DataItem AF0EW-MULTI-PCT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save in stock pct
DataItem AF0EW-OLD-PCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PCF char 1
DataItem AF0EW-PCF-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PCF char 2
DataItem AF0EW-PCF-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PCFSECD wk area
DataItem AF0EW-PCFSECD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row exists flag
DataItem AF0EW-ROW-EXISTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0EW-SESN-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyymm
DataItem AF0EW-SESN-CYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0EW-SESN-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0EW-SESN-FRST-OFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0EW-SESN-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0EW-STY-ISTK-PCT decimal(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSE char 1
DataItem AF0EW-XSE-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE char 2
DataItem AF0EW-XSE-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN char 1
DataItem AF0EW-XSN-1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN char 2
DataItem AF0EW-XSN-2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Add buy flag
DataItem AF0EWADB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color upd val flag
DataItem AF0EWADI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add buy flag wk
DataItem AF0EWADW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XGACD
DataItem AF0EWAG1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPLCD
DataItem AF0EWAL1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPCCD
DataItem AF0EWAP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XSUCD
DataItem AF0EWAS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPRCD
DataItem AF0EWAT1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color Detail Array
DataItem AF0EWCA char(94)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start category save
DataItem AF0EWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change count
DataItem AF0EWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fcst dlr for color
DataItem AF0EWCFD decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change/valid indicator
DataItem AF0EWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data contention indicator
DataItem AF0EWCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color desc
DataItem AF0EWCLD char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color pcent
DataItem AF0EWCLP num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color cd
DataItem AF0EWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forecasted color % for a style
DataItem AF0EWCLW num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// G/A,CAT,SIL Comb. flag
DataItem AF0EWCMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update confirm flag
DataItem AF0EWCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// returned row count
DataItem AF0EWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total color pcent
DataItem AF0EWCPT decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current style counter
DataItem AF0EWCSY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color update indicator
DataItem AF0EWCUI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select division abrv
DataItem AF0EWDDV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start gender/age abrv
DataItem AF0EWDGA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select division save
DataItem AF0EWDIV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start category abrv
DataItem AF0EWDPC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start prod line abrv
DataItem AF0EWDPL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start prod type abrv
DataItem AF0EWDPR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette abrv
DataItem AF0EWDSL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style desc
DataItem AF0EWDSY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Duplicates indicator
DataItem AF0EWDUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style dlr forecast
DataItem AF0EWFST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style dlr forecast
DataItem AF0EWFUN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start gender/age save
DataItem AF0EWGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inactive/Space status ind
DataItem AF0EWIIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// io function requested
DataItem AF0EWIOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record retrieve loop ctr
DataItem AF0EWLCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style read ctr loop limit
DataItem AF0EWLIM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row select loop mode ind
DataItem AF0EWLIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOW_OWN_GRP_CD work key
DataItem AF0EWOGK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Adjusted percent value
DataItem AF0EWPCT decimal(7,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page number
DataItem AF0EWPGE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max page count
DataItem AF0EWPGM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current page count
DataItem AF0EWPGV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start product line save
DataItem AF0EWPLN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0EWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unit wholesale price
DataItem AF0EWPRC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page start address
DataItem AF0EWPSA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color qualify flag
DataItem AF0EWQLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette save
DataItem AF0EWSIL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style qualify flag
DataItem AF0EWSQU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate style number 1
DataItem AF0EWST1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate style number 2
DataItem AF0EWST2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color status cd
DataItem AF0EWSTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status description
DataItem AF0EWSTD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start status save
DataItem AF0EWSTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color status cd wk
DataItem AF0EWSTW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style save
DataItem AF0EWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style select wk key
DataItem AF0EWSYK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style dlr forecast SAVE CHANGE
DataItem AF0EWTFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style dlr forecast SAVE CHANGE
DataItem AF0EWTUN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start product type save
DataItem AF0EWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start xxxuser save
DataItem AF0EWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XGACD
DataItem AF0EWXGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save owner group
DataItem AF0EWXOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPCCD
DataItem AF0EWXPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPLCD
DataItem AF0EWXPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPRCD
DataItem AF0EWXPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0EWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE wk season cd
DataItem AF0EWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XSUCD
DataItem AF0EWXSU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0EWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0EWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

