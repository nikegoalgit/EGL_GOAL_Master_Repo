package af0j;

import af.common.AFCREC;
import af.common.AFDREC;
import af.common.AFEREC;
import af.common.AFWREC;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPAF001;
import corpcom3.XPXDV01;
import corpcom3.XPXOW01;
import corpcom3.XPXSE01;
import corpcom3.XPXWH01;
import corpcom3.XPXX001;
import corpcom3.XSAFS01;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XCTCD;
import corpx1.XDMCD;
import corpx1.XDVABRV;
import corpx1.XDVDESC;
import corpx1.XDVTBL;
import corpx1.XGPCD;
import corpx1.XOTTBL;
import corpx1.XOWTBL;
import corpx1.XSETBL;
import corpx1.XWHTBL;
import corpx2.XOTABRV;
import corpx2.XOWCD;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWHABRV;
import corpx2.XWHCD;
import corpy2.YSNTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import pc.common.PC2INSEG;
import pg.common.PG2REC;
import pg.common.PG3REC;
import pt.common.PT2RNUM;
import pt.common.PT3AVQT;
import pt.common.PT3AVTOT;
import pt.common.PT3REC;
import pt.common.PT3YYMM;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY5SZID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0J ****
// This application is designed to enter adjustments to the
// apparel demand or apparel bottom line availability. The
// adjustment records created by this application will be
// used in batch updates each night for adjustment purposes.
// 
// The records are retrieved from the source databases
// (DACAST.VDMAND01, DMODEL.VABASM01, DACAST.VDMANA01) one at
// a time for display to the user. The user may then enter
// adjustments for update.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 02/21/89   JRAMOS   New application.
// 04/30/93   jricha   added in "current" selection option.
// 03-08-94   LREIN    March table change
// 02/10/95   KJ       XSN->YSN
// *********************
Program AF0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0JW02 AF0JW02; // record
  AF0JW03 AF0JW03; // record
  AF0JW04 AF0JW04; // record
  AFCREC AFCREC; // record
  AFDREC AFDREC; // record
  AFEREC AFEREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PT3REC PT3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VAFPAR01 VAFPAR01; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use AF0JM.AF0JM001, // form
  AF0JM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Fcst/Buy Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    set VAFPAR01 empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set AF0JW02 empty; /* Initialize working storage*/
    set AF0JW03 empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0JM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF0J"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    ;
    ;
    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-Initialize process name*/
    ;
    ;
    if (AFWREC.AFWFIRST == " ") /* If first time through*/
      if (COMMAREA.CAFRMSYS == "AF") /* And came from within the system*/
                    /* (move passed data to map)*/
        AF0JM001.XSECD = XP1REC.XSECD; /* Season cd*/
        AF0JM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
        AF0JM001.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
        AF0JM001.SY2CLRID = XP1REC.SY2CLRID; /* Color cd*/
        AF0JM001.XOTCD = XP1REC.XOTCD; /* Order type cd*/
        AF0JM001.XWHCD = XP1REC.XWHCD; /* Warehouse cd*/
      end
    end
    ;
    AF0JM001.XOWCD = "00";
    AF0JM001.AFEADJT = "2"; /* DEFAULT TO BLA*/
    AF0JM001.AF0JM-WEEK-CURR-PERIOD-TYPE = "C"; /**/
    ;
    goto AF0J001; /* Converse Transportation Prototype*/
    ;
    ;
    AF0J001: AF0J001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Apparel Fcst/Buy Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0J001; /* Converse Apparel Fcst/Buy Prototype*/
    ;
    ;
  end // end main
end // end AF0J

// Choose which map to display
Function AF0J001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AF0J110(); /* Obtain the data to display*/
  ;
  AF0J120(); /* Format and display the map*/
  ;
  AF0J130(); /* Check attention identifier*/
  ;
  AF0J140(); /* Reset fields to normal intensity*/
  ;
  AF0J150(); /* Verify the entered data*/
  ;
  AF0J160(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0J001

// Obtain the data to display
Function AF0J110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* if data was requested, fetch and format the data in the*/
      /* page; indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===============================**/
   /* *  Check Request for Data Flag  **/
   /* *===============================**/
  ;
  if (AFWREC.AFWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* Errors found*/
    return; /* Return to previous process*/
  end
  ;
  ;
  set AF0JW02 empty; /* Clear working storage record*/
  AFWREC.AFWIDX3 = 0; /* Initialize adjustments array index*/
  ;
  ;
   /* *==============================**/
   /* * Obtain Data and Format Page  **/
   /* *==============================**/
  ;
  if (XP1REC.AFEADJT == "1")
    AF0J111(); /* Get data from DACAST.VDMANO/C01*/
  else
    if (XP1REC.AFEADJT == "2")
      if (AF0JW03.AF0JM-WEEK-CURR-PERIOD-TYPE == "C") /* current data*/
        AF0J112(); /* Get data from DMODEL.VABASM01*/
      else /**/
        AF0J114(); /* get data from dacast.afpar01*/
      end /**/
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0J113(); /* Get data from DACAST.VDMANA01*/
  else /* Errors were found*/
    return; /* Exit to next process*/
  end
  ;
  ;
  AFWREC.AFWIDX5 = 1; /* Set loop index*/
  ;
  while (AFWREC.AFWIDX5 <= 10) /* Center size descriptions*/
    AF0JW02.AF0JWSDS = " "; /* Initialize wk area*/
    AF0JW02.AF0JWSDC = " "; /* Initialize wk area*/
    AF0JW02.AF0JWSDS = AF0JW02.AF0JWSZD[AFWIDX5];
    if (AF0JW02.AF0JWSD5 != " ")
      if (AF0JW02.AF0JWSD4 != " ")
        if (AF0JW02.AF0JWSD3 != " ")
          if (AF0JW02.AF0JWSD2 != " ")
            if (AF0JW02.AF0JWSD1 != " ")
            else
              AF0JW02.AF0JWSC2 = AF0JW02.AF0JWSD2;
              AF0JW02.AF0JWSC3 = AF0JW02.AF0JWSD3;
              AF0JW02.AF0JWSC4 = AF0JW02.AF0JWSD4;
              AF0JW02.AF0JWSC5 = AF0JW02.AF0JWSD5;
            end
          else
            AF0JW02.AF0JWSC3 = AF0JW02.AF0JWSD3;
            AF0JW02.AF0JWSC4 = AF0JW02.AF0JWSD4;
            AF0JW02.AF0JWSC5 = AF0JW02.AF0JWSD5;
          end
        else
          AF0JW02.AF0JWSC4 = AF0JW02.AF0JWSD4;
          AF0JW02.AF0JWSC5 = AF0JW02.AF0JWSD5;
        end
      else
        AF0JW02.AF0JWSC4 = AF0JW02.AF0JWSD5;
      end
      AF0JW02.AF0JWSZD[AFWIDX5] = AF0JW02.AF0JWSDC;
    end
    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
  end
  ;
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
  end
  ;
  ;
end // end AF0J110

// Get data frm DACAST.VDMANO/C01
Function AF0J111()
   /* ------------------------------------------------------------*/
   /* *  access DACAST.VDMANO01 and DACAST.VDMANC01 dbs  **/
          /* - Get row based on the keys supplied.*/
          /* - If any error, indicate a system error.*/
          /* - Format the data into working storage areas.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set AFCREC empty; /* initialize db record*/
  set AFDREC empty; /* initialize db record*/
  AFWREC.AFWIDX2 = 0; /* initialize qty store ptr*/
  ;
  ;
   /* *=================**/
   /* *  Build db key   * (Key applicable to both dbs)*/
   /* *=================**/
  ;
  AFCREC.SY1STNBR = XP1REC.SY1STNBR; /* style*/
  AFCREC.SY2CLRID = XP1REC.SY2CLRID; /* color*/
  AFCREC.XDMCD = "00"; /* dimension cd*/
  AFCREC.XWHCD = XP1REC.XWHCD; /* whse cd*/
  AFCREC.XDVCD = AF0JW03.AF0JWXDV; /* div cd*/
  AFCREC.XSECD = XP1REC.XSECD; /* season cd*/
  AFCREC.XSNYR = XP1REC.XSNYR; /* season yr*/
  AFCREC.AFBNDTPR = XP1REC.AFBNDTPR; /* order need date*/
  AFCREC.YSMSUMCD = XP1REC.XOTCD; /* order type cd*/
  ;
  AFDREC.AFDKEY = AFCREC.AFCKEY; /* Pass rec key for select*/
  AFCREC.XOWCD = XP1REC.XOWCD; /* Owner Group Cd*/
  AFDREC.XOWCD = XP1REC.XOWCD; /* Owner Group Cd*/
  ;
  ;
   /* *===============================**/
   /* *  Process DACAST.VDMANO01 row  **/
   /* *===============================**/
  ;
  AF0JS01(); /* process open db record*/
  ;
  ;
   /* *===============================**/
   /* *  Process DACAST.VDMANC01 row  **/
   /* *===============================**/
  ;
  AF0JS02(); /* process completed db record*/
  ;
  ;
   /* *===============================*  If no db rows processed,*/
   /* *  Check for db rows processed  *  protect map and prepare*/
   /* *===============================*  not found message.*/
  ;
  if (AFCREC.AFCKEY == " " /* No open row processed*/
   && AFDREC.AFDKEY == " ") /* and No completed row processed*/
    ;
    set AF0JM001.SY1STNBR cursor; /* Position cursor*/
    AFWREC.AFWPRCSN = "111 "; /* Process name*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Map process name*/
    converseLib.validationFailed(15); /* Indicate no records found*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 16) /* Protect/darken map display*/
      set AF0JM001.SY4IDDSC[AFWIDX5] skip, invisible; /* Size desc*/
      set AF0JM001.AF0JMDBQ[AFWIDX5] skip, invisible; /* Actual qty*/
      set AF0JM001.AFEADJQ[AFWIDX5] skip, invisible; /* Adj qty*/
      set AF0JM001.AF0JMADJ[AFWIDX5] skip, invisible; /* Adj upd qty*/
      set AF0JM001.AF0JMTOT[AFWIDX5] skip, invisible; /* Qty totals*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    ;
    set AF0JM001.AF0JMSTD skip, invisible; /* Protect/darken line2 hdgs*/
    set AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC1 skip, invisible; /**/
    set AF0JM001.AF0JM-AFEADJT-DESC1 skip, invisible; /**/
    set AF0JM001.AF0JMADF skip, invisible; /* Protect/darken line2 hdgs*/
    set AF0JM001.AF0JMFD2 skip, invisible; /* Protect/darken line2 hdgs*/
    set AF0JM001.AF0JMTLF skip, invisible; /* Protect/darken line2 hdgs*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* *===========================**/
   /* * Get all size descriptions **/
   /* *===========================**/
  ;
  TA1REC.TA1PGMNM = "AF0J111 "; /* program name*/
  TA1REC.TA1MAP = "AF0JM001"; /* processing map*/
  ;
  PG3REC.PG3XDVCD = " "; /* all divisions returned*/
  PG3REC.XGPCD = "03"; /* gpc cd as key*/
  PG3REC.SY1STNBR = XP1REC.SY1STNBR; /* style as key*/
  PG3REC.SY2CLRID = XP1REC.SY2CLRID; /* color as key*/
  PG3REC.XDMCD = "00"; /* dim cd as key*/
  PG3REC.XQACD = "01"; /* qual cd as key*/
  ;
  PG3REC.PG3FUNCD = "PC"; /* all valid sizes*/
  PG3REC.PG3DATFM = "N"; /* not compressed sizes*/
  ;
  ;
   /* *=======================**/
   /* *     call xspg301      * (get all sizes)*/
   /* *=======================**/
  ;
  XSPG301();
  ;
  if (sysVar.errorCode != "00000000" /* unexpected error found*/
   || PG3REC.PG3RETCD != "00")      
    ;
    AFWREC.AFWPRCSN = "111 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Map process name*/
    ;
    if (PG3REC.PG3RETCD == "09") /* deadlock condition*/
      converseLib.validationFailed(11); /* indicate data in use*/
    else
      converseLib.validationFailed(10); /* indicate system error*/
    end
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
   /* *======================================**/
   /* * store sizes/qtys into program array  **/
   /* *======================================**/
  ;
  AFWREC.AFWIDX1 = 1; /* index for db array*/
  AFWREC.AFWIDX2 = 0; /* index for size array*/
  AFWREC.AFWIDX3 = 0; /* index for program array/s*/
  ;
  while (AFWREC.AFWIDX1 <= 10)
    if (AF0JW02.SY5SZID[AFWIDX1] != 0) /* scan for non-zeros*/
      AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* assign store pointer*/
      AF0JW02.AF0JWSIX[AFWIDX3] = AF0JW02.SY5SZID[AFWIDX1];
      AFWREC.AFWIDX2 = AF0JW02.SY5SZID[AFWIDX1]; /* get pointer*/
      AF0JW02.AF0JWSZD[AFWIDX3] = PG3REC.SY4IDDSC[AFWIDX2];
      AF0JW02.AF0JWACT[AFWIDX3] = AF0JW02.PT3AVQT[AFWIDX1];
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
  end
  ;
end // end AF0J111

// Get data from DMODEL.VABASM01
Function AF0J112()
   /* ------------------------------------------------------------*/
           /* - Get row based on the keys supplied.*/
           /* - If any error, indicate a system error.*/
           /* - Format the data into working storage areas.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *==============================**/
   /* *  access DMODEL.VABASM01 db   **/
   /* *==============================**/
  ;
  set PT3REC empty; /* initialize db record*/
  ;
  PT3REC.XGPCD = "03"; /* gpc cd*/
  PT3REC.SY1STNBR = XP1REC.SY1STNBR; /* style*/
  PT3REC.SY2CLRID = XP1REC.SY2CLRID; /* color*/
  PT3REC.XDMCD = "00"; /* dimension cd*/
  PT3REC.PC2INSEG = "000"; /* spec diff cd*/
  PT3REC.XPGCD = "00"; /* packing type cd*/
  PT3REC.XOWCD = XP1REC.XOWCD; /* owner group*/
  PT3REC.XUMCD = AF0JW03.XUMCD; /* unit of measure cd*/
  PT3REC.XQACD = "01"; /* qual cd*/
  PT3REC.XWHCD = XP1REC.XWHCD; /* whse cd*/
  AF0JW04.AF0JWDBF = "S1"; /* select/open cursor db func*/
  AF0JW04.AF0JWWHL = XP1REC.XWHCD; /* whse cd to lo range*/
  AF0JW04.AF0JWWHH = XP1REC.XWHCD; /* whse cd to hi range*/
  PT3REC.PT3YYMM = 9999; /* pt period month*/
  ;
  AF0JS03(); /* process all db records*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    return; /* Exit to next process*/
  end
  ;
  ;
  ;
   /* *===========================**/
   /* * get all size descriptions **/
   /* *===========================**/
  ;
  TA1REC.TA1PGMNM = "AF0J112 "; /* program name*/
  TA1REC.TA1MAP = "AF0JM001"; /* processing map*/
  ;
  PG3REC.PG3XDVCD = " "; /* all divisions returned*/
  PG3REC.XGPCD = "03"; /* gpc cd as key*/
  PG3REC.SY1STNBR = XP1REC.SY1STNBR; /* style as key*/
  PG3REC.SY2CLRID = XP1REC.SY2CLRID; /* color as key*/
  PG3REC.XDMCD = "00"; /* dim cd as key*/
  PG3REC.XQACD = "01"; /* qual cd as key*/
  ;
  PG3REC.PG3FUNCD = "PC"; /* all valid sizes*/
  PG3REC.PG3DATFM = "N"; /* not compressed sizes*/
  ;
  ;
   /* *=======================**/
   /* *     call xspg301      * (get all sizes)*/
   /* *=======================**/
  ;
  XSPG301();
  ;
  if (sysVar.errorCode != "00000000" /* unexpected error found*/
   || PG3REC.PG3RETCD != "00")      
    ;
    AFWREC.AFWPRCSN = "112 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Map process name*/
    ;
    if (PG3REC.PG3RETCD == "09") /* deadlock condition*/
      converseLib.validationFailed(11); /* indicate data in use*/
    else
      converseLib.validationFailed(10); /* indicate system error*/
    end
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
   /* *======================================**/
   /* * store sizes/qtys into program array  **/
   /* *======================================**/
  ;
  AFWREC.AFWIDX1 = 1; /* index for db array*/
  AFWREC.AFWIDX2 = 0; /* index for size array*/
  AFWREC.AFWIDX3 = 0; /* index for program array/s*/
  ;
  while (AFWREC.AFWIDX1 <= 10)
    if (AF0JW02.SY5SZID[AFWIDX1] != 0) /* scan for non-zeros*/
      AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* assign store pointer*/
      AF0JW02.AF0JWSIX[AFWIDX3] = AF0JW02.SY5SZID[AFWIDX1];
      AFWREC.AFWIDX2 = AF0JW02.SY5SZID[AFWIDX1]; /* get pointer*/
      AF0JW02.AF0JWSZD[AFWIDX3] = PG3REC.SY4IDDSC[AFWIDX2];
      AF0JW02.AF0JWACT[AFWIDX3] = AF0JW02.PT3AVQT[AFWIDX1];
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
  end
  ;
end // end AF0J112

// Get data from DACAST.VDMANA01
Function AF0J113()
   /* ------------------------------------------------------------*/
           /* - Get row based on the keys supplied.*/
           /* - If any error, indicate a system error.*/
           /* - Format the data into working storage areas.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================================**/
   /* *    access DACAST.VDMANA01 db    **/
   /* *=================================**/
  ;
  set AFEREC empty; /* initialize db record*/
  ;
  AFEREC.SY1STNBR = XP1REC.SY1STNBR; /* style*/
  AFEREC.SY2CLRID = XP1REC.SY2CLRID; /* color*/
  AFEREC.XDMCD = "00"; /* dimension cd*/
  AFEREC.XWHCD = XP1REC.XWHCD; /* whse cd*/
  AFEREC.XSECD = XP1REC.XSECD; /* season cd*/
  AFEREC.XSNYR = XP1REC.XSNYR; /* season yr*/
  AFEREC.XOWCD = XP1REC.XOWCD; /* Owner Group Cd*/
  ;
  if (XP1REC.AFEADJT == "2") /* If adjustment type = 2*/
    AFEREC.YSMSUMCD = " "; /* default to spaces*/
    AFEREC.XDVCD = " "; /* default to spaces*/
    AFEREC.AFBNDTPR = +9999; /* default to 9999*/
  else
    AFEREC.XDVCD = AF0JW03.AF0JWXDV; /* div cd*/
    AFEREC.AFBNDTPR = XP1REC.AFBNDTPR; /* order need date*/
    AFEREC.YSMSUMCD = XP1REC.XOTCD; /* order type cd*/
  end
  ;
  AFEREC.AFEADJT = XP1REC.AFEADJT; /* adjustment type cd*/
  ;
   /* =========== get from database ==========*/
  ;
  try
    call "IO3140" ("S ", SQLCA, AFEREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ========== STORE SIZES/QTYS RETRIEVED: ==========*/
  ;
   /* *======================================**/
   /* * store sizes/qtys into program array  **/
   /* *======================================**/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    AFWREC.AFWIDX1 = 1; /* index for db array*/
    AFWREC.AFWIDX2 = 0; /* index for size array*/
    ;
    while (AFWREC.AFWIDX1 <= 10)
      if (AFEREC.SY5SZID[AFWIDX1] != 0) /* scan for non-zeros*/
        AFWREC.AFWIDX2 = AFEREC.SY5SZID[AFWIDX1]; /* get pointer*/
        AF0JW02.AF0JWSZW = PG3REC.SY4IDDSC[AFWIDX2]; /* get desc*/
        if (AFWREC.AFWIDX2 in AF0JW02.AF0JWSIX)
          AF0JW02.AF0JWADJ[sysVar.arrayIndex] = AFEREC.AFEADJQ[AFWIDX1];
        else
          AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* add to wk array*/
          AF0JW02.AF0JWSIX[AFWIDX3] = AFEREC.SY5SZID[AFWIDX1];
          AF0JW02.AF0JWSZD[AFWIDX3] = AF0JW02.AF0JWSZW;
          AF0JW02.AF0JWADJ[AFWIDX3] = AFEREC.AFEADJQ[AFWIDX1];
        end
      end
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* loop through*/
    end
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ========================================*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "113 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DACAST.VDMANA01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANA01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  return; /* Return to previous process*/
end // end AF0J113

Function AF0J114()
   /* ------------------------------------------------------------*/
           /* - Get row based on the keys supplied.*/
           /* - If any error, indicate a system error.*/
           /* - Format the data into working storage areas.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
   /* *==============================**/
   /* *  access DACAST.VAFPAR01 db   **/
   /* *==============================**/
  ;
  set VAFPAR01 empty; /* initialize db record*/
  ;
  VAFPAR01.XGPCD = "03"; /* gpc cd*/
  VAFPAR01.SY1STNBR = XP1REC.SY1STNBR; /* style*/
  VAFPAR01.SY2CLRID = XP1REC.SY2CLRID; /* color*/
  VAFPAR01.XDMCD = "00"; /* dimension cd*/
  VAFPAR01.PC2INSEG = "000"; /* spec diff cd*/
  VAFPAR01.XPGCD = "00"; /* packing type cd*/
  VAFPAR01.XOWCD = XP1REC.XOWCD; /* owner group*/
  VAFPAR01.XUMCD = AF0JW03.XUMCD; /* unit of measure cd*/
  VAFPAR01.XQACD = "01"; /* qual cd*/
  VAFPAR01.XWHCD = XP1REC.XWHCD; /* whse cd*/
  AF0JW04.AF0JWDBF = "S1"; /* select/open cursor db func*/
  AF0JW04.AF0JWWHL = XP1REC.XWHCD; /* whse cd to lo range*/
  AF0JW04.AF0JWWHH = XP1REC.XWHCD; /* whse cd to hi range*/
  VAFPAR01.PT3YYMM = 9999; /* pt period month*/
  ;
  AF0JS30(); /* process all db VAFPAR01 RECORDS*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    return; /* Exit to next process*/
  end
  ;
  ;
  ;
   /* *===========================**/
   /* * get all size descriptions **/
   /* *===========================**/
  ;
  TA1REC.TA1PGMNM = "AF0J114 "; /* program name*/
  TA1REC.TA1MAP = "AF0JM001"; /* processing map*/
  ;
  PG3REC.PG3XDVCD = " "; /* all divisions returned*/
  PG3REC.XGPCD = "03"; /* gpc cd as key*/
  PG3REC.SY1STNBR = XP1REC.SY1STNBR; /* style as key*/
  PG3REC.SY2CLRID = XP1REC.SY2CLRID; /* color as key*/
  PG3REC.XDMCD = "00"; /* dim cd as key*/
  PG3REC.XQACD = "01"; /* qual cd as key*/
  ;
  PG3REC.PG3FUNCD = "PC"; /* all valid sizes*/
  PG3REC.PG3DATFM = "N"; /* not compressed sizes*/
  ;
  ;
   /* *=======================**/
   /* *     call xspg301      * (get all sizes)*/
   /* *=======================**/
  ;
  XSPG301();
  ;
  if (sysVar.errorCode != "00000000" /* unexpected error found*/
   || PG3REC.PG3RETCD != "00")      
    ;
    AFWREC.AFWPRCSN = "114 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Map process name*/
    ;
    if (PG3REC.PG3RETCD == "09") /* deadlock condition*/
      converseLib.validationFailed(11); /* indicate data in use*/
    else
      converseLib.validationFailed(10); /* indicate system error*/
    end
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
   /* *======================================**/
   /* * store sizes/qtys into program array  **/
   /* *======================================**/
  ;
  AFWREC.AFWIDX1 = 1; /* index for db array*/
  AFWREC.AFWIDX2 = 0; /* index for size array*/
  AFWREC.AFWIDX3 = 0; /* index for program array/s*/
  ;
  while (AFWREC.AFWIDX1 <= 10)
    if (AF0JW02.SY5SZID[AFWIDX1] != 0) /* scan for non-zeros*/
      AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* assign store pointer*/
      AF0JW02.AF0JWSIX[AFWIDX3] = AF0JW02.SY5SZID[AFWIDX1];
      AFWREC.AFWIDX2 = AF0JW02.SY5SZID[AFWIDX1]; /* get pointer*/
      AF0JW02.AF0JWSZD[AFWIDX3] = PG3REC.SY4IDDSC[AFWIDX2];
      AF0JW02.AF0JWACT[AFWIDX3] = AF0JW02.PT3AVQT[AFWIDX1];
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
  end
  ;
end // end AF0J114

// Format and display the map
Function AF0J120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0JW03.AF0JWPND != "Y") /* POPUP WINDOW INDICATED*/
    if (converseVar.validationMsgNum == 0 /* No error message to display*/
     || AF0JW03.AF0JWUPC == "Y"           /* Successful update done*/
     || AFWREC.AFWFIRST == " ")           /* Or first time through*/
      ;
      if (AFWREC.AFWFIRST == " ") /* First time through*/
        if (COMMAREA.CAITEM > " ") /* Application data exists*/
          AF0JM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
          set AF0JM001.CAITEM modified; /* Set MDT on*/
          COMMAREA.CAITEM = " "; /* Clear application data*/
        end
        AFWREC.AFWFIRST = "N"; /* First pass ind 'off'*/
        AF0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
        set AF0JM001.SY1STNBR cursor; /* cursor to season cd field*/
        set AF0JM001.AF0JMP09 skip, invisible; /* Mask PF9 function*/
        ;
        if (COMMAREA.CAADDFL == "N" /* Not allowed to add*/
         || COMMAREA.CACHGFL == "N" /* Not allowed to change*/
         || COMMAREA.CADELFL == "N") /* Not allowed to delete*/
          set AF0JM001.AF0JMAF1 skip, invisible;
        end
                    /* (Protect map input fields)*/
        AFWREC.AFWIDX5 = 1; /* Set loop index*/
        while (AFWREC.AFWIDX5 <= 16) /* Set map display*/
          set AF0JM001.AF0JMADJ[AFWIDX5] skip, invisible; /* protect fld*/
          AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
        end
             /* (Protect line 2 headings)*/
        set AF0JM001.AF0JMSTD skip, invisible;
        set AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC1 skip, invisible;
        set AF0JM001.AF0JM-AFEADJT-DESC1 skip, invisible;
        set AF0JM001.AF0JMADF skip, invisible;
        set AF0JM001.AF0JMFD2 skip, invisible;
        set AF0JM001.AF0JMTLF skip, invisible;
        ;
      else
        ;
        set AF0JM001 initial; /* clear map output area*/
        set AF0JM001.AF0JMP09 skip, invisible; /* Mask PF9 function*/
        AF0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
        ;
        if (COMMAREA.CAADDFL == "N" /* Not allowed to add*/
         || COMMAREA.CACHGFL == "N" /* Not allowed to change*/
         || COMMAREA.CADELFL == "N") /* Not allowed to delete*/
          set AF0JM001.AF0JMAF1 skip, invisible;
          set AF0JM001.AF0JMFD2 skip, invisible;
          AFWREC.AFWIDX5 = 1; /* Set loop index*/
          while (AFWREC.AFWIDX5 <= 16) /* Set map display*/
            set AF0JM001.AF0JMADJ[AFWIDX5] skip, invisible; /* Protect fld*/
            AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
          end
        end
        ;
        if (converseVar.validationMsgNum == 0 /* No error message to display*/
         || converseVar.validationMsgNum == 1) /* Successful update done*/
          AF0J121(); /* Format the data on the page*/
        end
        ;
        if (converseVar.validationMsgNum == 0) /* No error message to display*/
          if (AFWREC.AFWNMO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(AFWREC.AFWNMO);
          end /* Information message number*/
        end
      end
      ;
    end
  end
  ;
  AFWREC.AFWNMO = 0; /* Reset information message number*/
  ;
  ;
   /* *===============================**/
   /* *  check for successful update  **/
   /* *===============================**/
  ;
  if (AF0JW03.AF0JWUPC == "Y") /* Indicate successful update*/
    AF0JW03.AF0JWUPC = " "; /* Reset flag*/
    AFWREC.AFWPRCSN = "120 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Map process name*/
    converseLib.validationFailed(1);
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AF0JM001 alarm; /* Indicate sound alarm*/
  end
  ;
  if (AF0JM001.AF0JM-WEEK-CURR-PERIOD-TYPE == "W") /**/
    AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC = "WEEKEND"; /**/
    AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC1 = "WEEKEND"; /**/
  else /**/
    if (AF0JM001.AF0JM-WEEK-CURR-PERIOD-TYPE == "C") /**/
      AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC = "CURRENT"; /**/
      AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC1 = "CURRENT"; /**/
    else /**/
      AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC = "       "; /**/
      AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC1 = "       "; /**/
    end /**/
  end /**/
  ;
  if (AF0JM001.AFEADJT == "1") /**/
    AF0JM001.AF0JM-AFEADJT-DESC = "DMD :"; /**/
    AF0JM001.AF0JM-AFEADJT-DESC1 = "DMD :"; /**/
  else
    if (AF0JM001.AFEADJT == "2") /**/
      AF0JM001.AF0JM-AFEADJT-DESC = "BLA :"; /**/
      AF0JM001.AF0JM-AFEADJT-DESC1 = "BLA :"; /**/
    else
      AF0JM001.AF0JM-AFEADJT-DESC = "   "; /**/
      AF0JM001.AF0JM-AFEADJT-DESC1 = "   "; /**/
    end /**/
  end /**/
  ;
  ;
  converse AF0JM001 ;
  ;
  AF0JW03.AF0JWPND = "N";
  ;
end // end AF0J120

// Format the selected data
Function AF0J121()
   /* -----------------------------*/
    /* compute adjustment totals.*/
   /* -----------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* set loop index*/
  move 0 to AF0JW02.AF0JWTOT[1] for all; /* initialize accum array*/
  ;
  while (AFWREC.AFWIDX1 <= 16) /* add up qty act + adjs*/
    AF0JW02.AF0JWACW = AF0JW02.AF0JWACT[AFWIDX1];
    AF0JW02.AF0JWADW = AF0JW02.AF0JWADJ[AFWIDX1];
    AF0JW02.AF0JWUPW = AF0JW02.AF0JWUPD[AFWIDX1];
    AF0JW02.AF0JWTOT[AFWIDX1] = AF0JW02.AF0JWTOT[AFWIDX1] + AF0JWACW;
    AF0JW02.AF0JWTOT[AFWIDX1] = AF0JW02.AF0JWTOT[AFWIDX1] + AF0JWADW;
    AF0JW02.AF0JWTOT[AFWIDX1] = AF0JW02.AF0JWTOT[AFWIDX1] + AF0JWUPW;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* loop through*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Move all saved map items into the physical map for display.*/
   /* ------------------------------------------------------------*/
  ;
  AF0JM001.XSECD = XP1REC.XSECD; /* season cd*/
  AF0JM001.XSNYR = XP1REC.XSNYR; /* season yr*/
  AF0JM001.XOWCD = XP1REC.XOWCD; /* Owner Group Code*/
  AF0JM001.AFEADJT = XP1REC.AFEADJT; /* adjustment type*/
  AF0JM001.AF0JM-WEEK-CURR-PERIOD-TYPE = AF0JW03.AF0JM-WEEK-CURR-PERIOD-TYPE; /* WEEKEND/CURRENT PERIOD*/
  AF0JM001.SY1STNBR = XP1REC.SY1STNBR; /* style*/
  AF0JM001.SY2CLRID = XP1REC.SY2CLRID; /* color*/
  AF0JM001.XDVCD = AF0JW03.AF0JWXDV; /* division cd*/
  AF0JM001.XWHCD = XP1REC.XWHCD; /* whse cd*/
  AF0JM001.AF0JMNMO = AF0JW03.AF0JWNMW; /* order need date*/
  AF0JM001.AF0JWNYR = AF0JW03.AF0JWNYR; /* order need year*/
  AF0JM001.XOTCD = AF0JW03.AF0JWXOT; /* order type cd*/
  ;
  AF0JM001.SY1SSTNM = AF0JW03.SY1SSTNM; /* style desc*/
  AF0JM001.SY2CLRAB = AF0JW03.SY2CLRAB; /* color desc*/
  AF0JM001.XDVABRV = AF0JW03.XDVABRV; /* div cd desc*/
  AF0JM001.XWHABRV = AF0JW03.XWHABRV; /* whse cd desc*/
  AF0JM001.XOTABRV = AF0JW03.XOTABRV; /* xot cd desc*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Move all saved array items to the physical map for display.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  ;
  while (AFWREC.AFWIXM <= 16) /* Until end of lines*/
    ;
    AF0JM001.SY4IDDSC[AFWIXM] = AF0JW02.AF0JWSZD[AFWIXM];
    AF0JM001.AF0JMDBQ[AFWIXM] = AF0JW02.AF0JWACT[AFWIXM];
    AF0JM001.AFEADJQ[AFWIXM] = AF0JW02.AF0JWADJ[AFWIXM];
    AF0JM001.AF0JMADJ[AFWIXM] = AF0JW02.AF0JWUPD[AFWIXM];
    AF0JM001.AF0JMTOT[AFWIXM] = AF0JW02.AF0JWTOT[AFWIXM];
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
  ;
   /* ----------------------------------------------*/
   /* Set map autoskip, dark for all unused fields.*/
   /* ----------------------------------------------*/
  ;
  AFWREC.AFWIXM = AFWREC.AFWIDX3 + 1; /* set map array start*/
  ;
  while (AFWREC.AFWIXM <= 16)
    set AF0JM001.SY4IDDSC[AFWIXM] skip, invisible;
    set AF0JM001.AF0JMDBQ[AFWIXM] skip, invisible;
    set AF0JM001.AFEADJQ[AFWIXM] skip, invisible;
    set AF0JM001.AF0JMADJ[AFWIXM] skip, invisible;
    set AF0JM001.AF0JMTOT[AFWIXM] skip, invisible;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* loop through*/
  end
  ;
  if (AFWREC.AFWIDX3 <= 8) /* autoskip,dark heading items*/
    set AF0JM001.AF0JMSTD skip, invisible;
    set AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC1 skip, invisible;
    set AF0JM001.AF0JM-AFEADJT-DESC1 skip, invisible;
    set AF0JM001.AF0JMADF skip, invisible;
    set AF0JM001.AF0JMFD2 skip, invisible;
    set AF0JM001.AF0JMTLF skip, invisible;
  end
  ;
  ;
  ;
   /* -------------------------------------*/
   /* Position cursor before map display.*/
   /* -------------------------------------*/
  ;
  if (AFWREC.AFWIDX3 > 0)
    if (COMMAREA.CACHGFL == "Y"
     || COMMAREA.CAADDFL == "Y")
      set AF0JM001.AF0JMADJ[1] cursor; /* ok for update*/
    else
      set AF0JM001.SY1STNBR cursor; /* not ok for update*/
    end
  else
    set AF0JM001.SY1STNBR cursor; /* select inq*/
  end
end // end AF0J121

// Check attention identifier
Function AF0J130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AF0JM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  if (AF0JM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0JM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0JM001.CAITEM; /* Application data*/
      XSAFS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set AF0JM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF0JM001.CAITEM > " ") /* Application data was entered*/
    set AF0JM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0JM001"; /* Appl find code*/
    end
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (AF0JM001.XOTCD == "?") /* Check xotcd for pop-up*/
      set AF0JM001.XOTCD cursor; /* Position cursor*/
    else
      if (AF0JM001.XWHCD == "?") /* Check xwhcd for pop-up*/
        set AF0JM001.XWHCD cursor; /* Position cursor*/
      else
        if (AF0JM001.XDVCD == "?") /* Check xdvcd for pop-up*/
          set AF0JM001.XDVCD cursor; /* Position cursor*/
        else
          if (AF0JM001.XOWCD == "?") /* Check xdvcd for pop-up*/
            set AF0JM001.XOWCD cursor; /* Position cursor*/
          else
            if (AF0JM001.XSECD == "?") /* Check xsecd for pop-up*/
              set AF0JM001.XSECD cursor; /* Position cursor*/
            end
          end
        end
      end
    end
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
end // end AF0J130

// Reset hilght flds; disp pop-up
Function AF0J140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0JM001.XSECD normal; /* Reset sesn cd*/
  set AF0JM001.XSNYR normal; /* Reset sesn yr*/
  set AF0JM001.AFEADJT normal; /* Reset adjustment yr*/
  set AF0JM001.AF0JM-WEEK-CURR-PERIOD-TYPE normal; /* Reset period type*/
  set AF0JM001.SY1STNBR normal; /* Reset style no.*/
  set AF0JM001.SY2CLRID normal; /* Reset color cd*/
  set AF0JM001.XOWCD normal; /* Reset Owner Group Cd*/
  set AF0JM001.XDVCD normal; /* Reset division cd*/
  set AF0JM001.XWHCD normal; /* Reset whse cd*/
  set AF0JM001.AF0JMNMO normal; /* Reset need month*/
  set AF0JM001.AF0JWNYR normal; /* Reset need year*/
  set AF0JM001.XOTCD normal; /* Reset order type cd*/
  AF0JM001.XXXPRCNM = "AF0J    "; /* Reset process name*/
  ;
  ;
  set AF0JM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0JM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
  ;
   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/
  ;
  if (AF0JM001.XWHCD == "?"
   || AF0JM001.XDVCD == "?"
   || AF0JM001.XSECD == "?"
   || AF0JM001.XOWCD == "?")
    ;
    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Map process name*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    ;
    return; /* return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XWH Cd  **/
   /* *============================**/
  ;
  if (AF0JM001.XWHCD == "?") /* Pop-up window func requested*/
    XPXX001(); /* Init for pop-up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD; /* Specify only apparel cds*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODE"; /* Pop-up hdg*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXWH01(); /* perform XWH pop-up window*/
    end
    ;
    if (XX0XW02.XX0XWPIX > 0) /* user selected a code*/
      AF0JM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move to map*/
      AF0JM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];
    else /* user did not select a code*/
      AF0JM001.XWHCD = XP1REC.XWHCD; /* Reset map fields*/
      AF0JM001.XWHABRV = XP1REC.XWHABRV;
    end
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XDV Cd  **/
   /* *============================**/
  ;
  if (AF0JM001.XDVCD == "?") /* Pop-up window func requested*/
    XPXX001(); /* Init for pop-up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD; /* Specify only apparel cds*/
    XX0XW02.XX0XWHDR = "DIVISION CODE"; /* Pop-up hdg*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXDV01(); /* perform XDV pop-up window*/
    end
    ;
    if (XX0XW02.XX0XWPIX > 0) /* user selected a code*/
      AF0JM001.XDVCD = XDVTBL.XDVCD[XX0XWPIX]; /* move to map*/
      AF0JM001.XDVABRV = XDVTBL.XDVABRV[XX0XWPIX];
    else /* user did not select a code*/
      AF0JM001.XDVCD = AF0JW03.AF0JWXDV; /* Reset map fields*/
      AF0JM001.XDVABRV = AF0JW03.XDVABRV;
    end
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XOW Cd  **/
   /* *============================**/
  ;
  if (AF0JM001.XOWCD == "?") /* Pop-up window func requested*/
    AF0JS14();
    if (XP1REC.XP1MNO != 28)
      XPXX001(); /* Init for pop-up window*/
      XX0XW02.XGPCD = XP1REC.XGPCD; /* Specify only apparel cds*/
      XX0XW02.XWHCD = XP1REC.XWHCD; /* Specify WHSE*/
      XX0XW02.XX0XWHDR = " OWNER GROUP "; /* Pop-up hdg*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXOW01(); /* perform XOW pop-up window*/
      end
      ;
      if (XX0XW02.XX0XWPIX > 0) /* user selected a code*/
        AF0JM001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* move to map*/
      else /* user did not select a code*/
        AF0JM001.XOWCD = "00"; /* Default to '00'*/
      end
    else
      if (XP1REC.XP1MNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XP1REC.XP1MNO);
      end
      XP1REC.XP1MNO = 0;
    end
  end
  ;
  ;
  ;
   /* *=============================**/
   /* *  Pop-up Window for XSEC Cd  **/
   /* *=============================**/
  ;
  if (AF0JM001.XSECD == "?") /* Pop-up window func requested*/
    XPXX001(); /* Init for pop-up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD; /* Specify only apparel cds*/
    XX0XW02.XX0XWHDR = "SEASON CODE"; /* Pop-up hdg*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXSE01(); /* perform XSE pop-up window*/
    end
    ;
    if (XX0XW02.XX0XWPIX > 0) /* user selected a code*/
      AF0JM001.XSECD = XSETBL.XSECD[XX0XWPIX]; /* move to map*/
    else /* user did not select a code*/
      AF0JM001.XSECD = XP1REC.XSECD; /* Reset map fields*/
    end
  end
  ;
  ;
   /* *================================**/
   /* *  Reset map, Redisplay Changes  **/
   /* *================================**/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  AF0JW03.AF0JWPND = "Y";
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AF0J140

// Verify the entered data
Function AF0J150()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  AF0J151(); /* Verify selection criteria*/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (AFWREC.AFWSWR == "Y") /* If new selection criteria entered*/
      exit stack; /* Go back to start of appl*/
    else /* Else(selection criteria not changed)*/
      AF0J152(); /* Verify any changed data*/
      if (AF0JW02.AF0JWADI == "N") /* No data changed*/
        return; /* Execute next process*/
      end
    end
  end
  ;
  if (converseVar.validationMsgNum != 0 /* Errors were found*/
   || AF0JW02.AF0JWADI == "0")          /* No adjustments were entered*/
    exit stack; /* Exit to redisplay map*/
  else
    return; /* Execute next process*/
  end
end // end AF0J150

// Edit selection criteria
Function AF0J151()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *************************************************************/
  ;
  ;
  AFWREC.AFWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* initialize msg hold area*/
  ;
  ;
  ;
   /* *============================**/
   /* *  check selection criteria  **/
   /* *============================**/
  ;
  ;
  if (AF0JM001.XOTCD != XP1REC.XOTCD /* Check if changed*/
   && AF0JM001.AFEADJT == "1")       /* and Adjustment type = 1*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
  ;
  ;
  AF0JW03.AF0JWNYR = AF0JM001.AF0JWNYR; /* To wk area*/
  AF0JW03.AF0JWNMW = AF0JM001.AF0JMNMO; /* To wk area*/
  ;
  if (AF0JW03.AF0JWNDT != XP1REC.AFBNDTPR /* Check if changed*/
   && AF0JM001.AFEADJT == "1")            /* and Adjustment type = 1*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
  ;
  ;
  if (AF0JM001.XWHCD != XP1REC.XWHCD) /* Check if changed*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
  ;
  ;
  if (AF0JM001.XDVCD != AF0JW03.AF0JWXDV /* Check if changed*/
   && AF0JM001.AFEADJT == "1")           /* and Adjustment type = 1*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
  ;
  ;
  if (AF0JM001.SY2CLRID != XP1REC.SY2CLRID) /* Check if changed*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
  ;
  ;
  if (AF0JM001.SY1STNBR != XP1REC.SY1STNBR) /* Check if changed*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
   /* */
  ;
  if (AF0JM001.AFEADJT != XP1REC.AFEADJT) /* Check if changed*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
  ;
  ;
  if (AF0JM001.AF0JM-WEEK-CURR-PERIOD-TYPE != 
  AF0JW03.AF0JM-WEEK-CURR-PERIOD-TYPE) /* CHECK IF CHANGED*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
  ;
  ;
  AF0JW02.AF0JWXSY = 0; /* Initialize xsnyr wk area*/
  AF0JW02.AF0JWXSY = AF0JM001.XSNYR; /* Move to wk area*/
  AF0JW02.AF0JWXSY = AF0JW02.AF0JWXSY + 1900; /* Add century*/
  ;
  if (AF0JW02.AF0JWXSY != XP1REC.XSNYR) /* Check if changed*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
  ;
  ;
  if (AF0JM001.XSECD != XP1REC.XSECD) /* Check if changed*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
  ;
  if (AF0JM001.XOWCD != XP1REC.XOWCD) /* Check if changed*/
    AFWREC.AFWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end
  ;
  ;
  ;
   /* *===========================**/
   /* *  Edit selection criteria  **/
   /* *===========================**/
  ;
  AF0JS07(); /* edit order type cd*/
  AF0JS12(); /* edit need yr*/
  AF0JS13(); /* edit need month*/
  AF0JS14(); /* edit whse cd*/
  AF0JS15(); /* edit division cd*/
  AF0JS16(); /* edit style/color*/
  AF0JS20(); /* edit style/color*/
  AF0JS17(); /* edit adjustment type*/
  AF0JS21(); /* edit WEEK-CURR-PERIOD TYPE*/
  AF0JS18(); /* edit season yr*/
  AF0JS19(); /* edit season cd*/
  ;
  ;
  ;
   /* *===========================**/
   /* *  check validation errors  **/
   /* *===========================**/
  ;
  if (XP1REC.XP1MNO != 0) /* Validation error present*/
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Initialize switch to 'OFF'*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 16) /* Protect/darken map display*/
      set AF0JM001.SY4IDDSC[AFWIDX5] skip, invisible; /* Size desc*/
      set AF0JM001.AF0JMDBQ[AFWIDX5] skip, invisible; /* Actual qty*/
      set AF0JM001.AFEADJQ[AFWIDX5] skip, invisible; /* Adj qty*/
      set AF0JM001.AF0JMADJ[AFWIDX5] skip, invisible; /* Adj upd qty*/
      set AF0JM001.AF0JMTOT[AFWIDX5] skip, invisible; /* Qty totals*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    if (AFWREC.AFWIDX3 >= 8) /* Size/qty buckets >= 8*/
      set AF0JM001.AF0JMSTD skip, invisible; /* Darken line 2 hdgs*/
      set AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC1 skip, invisible; /**/
      set AF0JM001.AF0JM-AFEADJT-DESC skip, invisible; /* Darken line 2 hdgs*/
      set AF0JM001.AF0JMADF skip, invisible; /* Darken line 2 hdgs*/
      set AF0JM001.AF0JMFD2 skip, invisible; /* Darken line 2 hdgs*/
      set AF0JM001.AF0JMTLF skip, invisible; /* Darken line 2 hdgs*/
    end
  end
  ;
  ;
   /* *===============================**/
   /* *  Check Data Selection Status  **/
   /* *===============================**/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (AFWREC.AFWSWR == "N" /* Same keys entered*/
     && AFWREC.AFWIDX3 == 0) /* No data retrieved*/
      AFWREC.AFWSWR = "Y"; /* then attempt to retrieve again*/
    end
  end
  ;
  ;
end // end AF0J151

// Verify any changed data
Function AF0J152()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AFWREC.AFWIXM = 1; /* set loop index*/
  AF0JW02.AF0JWADI = "N"; /* set adj change indicator*/
  ;
  while (AFWREC.AFWIXM <= 16) /* store changed adjustments*/
    if (AF0JM001.AF0JMADJ[AFWIXM] != AF0JW02.AF0JWUPD[AFWIXM])
      AF0JW02.AF0JWADI = "Y"; /* change/s were done*/
      AF0JW02.AF0JWUPD[AFWIXM] = AF0JM001.AF0JMADJ[AFWIXM];
    end
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* loop through*/
  end
  ;
  ;
   /* *=====================**/
   /* *  Check Adjustments  **/
   /* *=====================**/
  ;
  AFWREC.AFWIDX4 = 1; /* Set loop index*/
  AFWREC.AFWIDX5 = 0; /* Set adjustments counter*/
  ;
  while (AFWREC.AFWIDX4 <= 10) /* Find and count non-zero adj*/
    if (AF0JW02.AF0JWUPD[AFWIDX4] != 0) /* Adjustment entered*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Count adjustment*/
    end
    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop through*/
  end
  ;
  if (AFWREC.AFWIDX5 <= 0) /* Adjustments not found*/
    AF0JW02.AF0JWADI = "0"; /* set adj change indicator*/
  end
end // end AF0J152

// Process valid input request
Function AF0J160()
  if (converseVar.eventKey is enter) /* enter key pressed*/
    ;
    if (AFWREC.AFWSWR == "Y") /* new data requested*/
      return; /* Exit to reselect data*/
    end
    ;
    if (COMMAREA.CAADDFL == "Y" /* Allowed to add*/
     || COMMAREA.CACHGFL == "Y" /* Allowed to change*/
     || COMMAREA.CADELFL == "Y") /* Allowed to delete*/
      AF0J161(); /* Update DACAST.VDMANA01*/
      AFWREC.AFWSWR = "Y"; /* Request updated record*/
      AF0JW03.AF0JWUPC = "Y"; /* Indicate successful update*/
      return;
    end
    ;
  end
end // end AF0J160

// Update DACAST.VDMANA01 db
Function AF0J161()
   /* ------------------------------------------------------------*/
           /* - Get row based on the keys supplied.*/
           /* - If any error, indicate a system error.*/
           /* - Update DACAST.VDMANA01 db.*/
   /* ------------------------------------------------------------*/
  ;
   /* *==========================**/
   /* *  Get system date & time  **/
   /* *==========================**/
  ;
  XX0XS01();
  ;
  ;
   /* *==============================**/
   /* *   Set DACAST.VDMANA01 keys   **/
   /* *==============================**/
  ;
  set AFEREC empty; /* initialize db record*/
  ;
  AFEREC.SY1STNBR = XP1REC.SY1STNBR; /* style*/
  AFEREC.SY2CLRID = XP1REC.SY2CLRID; /* color*/
  AFEREC.XDMCD = "00"; /* dimension cd*/
  AFEREC.XWHCD = XP1REC.XWHCD; /* whse cd*/
  AFEREC.XSECD = XP1REC.XSECD; /* season cd*/
  AFEREC.XSNYR = XP1REC.XSNYR; /* season yr*/
  AFEREC.XOWCD = XP1REC.XOWCD;
  ;
  if (XP1REC.AFEADJT == "2") /* If adjustment type = 2*/
    AFEREC.XDVCD = " "; /* default to spaces*/
    AFEREC.AFBNDTPR = +9999; /* default to 9999*/
    AFEREC.YSMSUMCD = " "; /* default to spaces*/
  else
    AFEREC.XDVCD = AF0JW03.AF0JWXDV; /* div cd*/
    AFEREC.AFBNDTPR = XP1REC.AFBNDTPR; /* order need date*/
    AFEREC.YSMSUMCD = XP1REC.XOTCD; /* order type cd*/
  end
  ;
  ;
  AFEREC.AFEADJT = XP1REC.AFEADJT; /* adjustment type cd*/
  ;
  ;
  ;
   /* *==========================**/
   /* *  Access DACAST.VDMANA01  **/
   /* *==========================**/
  ;
  try
    call "IO3140" ("S ", SQLCA, AFEREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
  ;
   /* *===========================**/
   /* *  Determine Update Action  **/
   /* *===========================**/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* DB row found*/
      AF0J163(); /* Add entered adjustments*/
      return; /* Return to calling routine*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AF0J162(); /* Insert adjustment row*/
      return; /* Return to calling routine*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "161 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DACAST.VDMANA01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANA01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Redisplay map*/
  ;
  ;
end // end AF0J161

// Insert DACAST.VDMANA01 Row
Function AF0J162()
   /* ------------------------------------------------------------*/
   /* - Create a new DACAST.VDMANA01 row if adjustments have been*/
       /* entered.*/
   /* ------------------------------------------------------------*/
  ;
   /* *====================**/
   /* *    Reset AFEREC    **/
   /* *====================**/
  ;
  set AFEREC empty; /* initialize db record*/
  ;
  AFEREC.SY1STNBR = XP1REC.SY1STNBR; /* style*/
  AFEREC.SY2CLRID = XP1REC.SY2CLRID; /* color*/
  AFEREC.XDMCD = "00"; /* dimension cd*/
  AFEREC.XWHCD = XP1REC.XWHCD; /* whse cd*/
  AFEREC.XSECD = XP1REC.XSECD; /* season cd*/
  AFEREC.XSNYR = XP1REC.XSNYR; /* season yr*/
  AFEREC.XOWCD = XP1REC.XOWCD; /* season yr*/
  ;
  if (XP1REC.AFEADJT == "2") /* If adjustment type = 2*/
    AFEREC.XDVCD = " "; /* div cd*/
    AFEREC.AFBNDTPR = +9999; /* order need date*/
    AFEREC.YSMSUMCD = " "; /* default to spaces*/
  else
    AFEREC.XDVCD = AF0JW03.AF0JWXDV; /* div cd*/
    AFEREC.AFBNDTPR = XP1REC.AFBNDTPR; /* order need date*/
    AFEREC.YSMSUMCD = XP1REC.XOTCD; /* order type cd*/
  end
  ;
  AFEREC.AFEADJT = XP1REC.AFEADJT; /* adjustment type cd*/
  ;
  ;
  ;
   /* *==========================**/
   /* *  Move db data to AFEREC  **/
   /* *==========================**/
  ;
  AFEREC.AF-AVG-UNT-PRC-AMT = 0; /* Price per unit*/
  ;
  AFWREC.AFWIDX4 = 1; /* Set loop index*/
  ;
  while (AFWREC.AFWIDX4 <= 10) /* Move adjustments to AFEREC*/
    AFEREC.SY5SZID[AFWIDX4] = AF0JW02.AF0JWSIX[AFWIDX4];
    AFEREC.AFEADJQ[AFWIDX4] = AF0JW02.AF0JWUPD[AFWIDX4];
    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* loop through*/
  end
  ;
  AFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AFEREC.ZZZCHGCT = 0; /* Change count*/
  ;
  ;
  ;
   /* *==========================**/
   /* *  Update DACAST.VDMANA01  **/
   /* *==========================**/
  ;
  try
    call "IO3140" ("A ", SQLCA, AFEREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
  ;
   /* *========================**/
   /* *  Check DB Return code  **/
   /* *========================**/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "162 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "ADD DACAST.VDMANA01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANA01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Redisplay map*/
  ;
  ;
end // end AF0J162

// Update DACAST.VDMANA01 Row
Function AF0J163()
   /* ------------------------------------------------------------*/
   /* - Update DACAST.VDMANA01 row if adjustments have been*/
       /* entered.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==========================**/
   /* *  Move db data to AFEREC  **/
   /* *==========================**/
  ;
  AFWREC.AFWIDX4 = 1; /* Set outer loop index*/
  ;
  while (AFWREC.AFWIDX4 <= 10) /* Add adjustments to AFEREC*/
    if (AF0JW02.AF0JWUPD[AFWIDX4] != 0) /* Find non-zero adjustment*/
      AFWREC.AFWIDX5 = 1; /* Set inner loop index*/
      while (AFWREC.AFWIDX5 <= 10) /* Find size in AFEREC*/
        if (AFEREC.SY5SZID[AFWIDX5] == AF0JW02.AF0JWSIX[AFWIDX4])
          AF0JW02.AF0JWQTW = AF0JW02.AF0JWUPD[AFWIDX4];
          AFEREC.AFEADJQ[AFWIDX5] = AFEREC.AFEADJQ[AFWIDX5] + AF0JW02.AF0JWQTW;
          AFWREC.AFWIDX5 = 59; /* Force loop termination*/
        else
          AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* loop through*/
        end
      end
    end
    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* loop through*/
  end
  ;
  AFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  ;
   /* *==========================**/
   /* *  Update DACAST.VDMANA01  **/
   /* *==========================**/
  ;
  try
    call "IO3140" ("U ", SQLCA, AFEREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
  ;
   /* *========================**/
   /* *  Check DB Return code  **/
   /* *========================**/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      AFWREC.AFWNMO = 12; /* Indicate upd by others*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "163 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPD DACAST.VDMANA01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANA01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0J163

// Fetch row and accum qtys
Function AF0JS01()
   /* ------------------------------------------------------------*/
   /* Fetch the target rows with a cursor select and loop.*/
   /* If any error, indicate a system error.*/
   /* Accumulate qtys in a working storage array depending on*/
      /* the size index.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3920" ("S2", SQLCA, AFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* cursor*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    try
      call "IO3920" ("N2", SQLCA, AFCREC) {isNoRefresh = yes, isExternal = yes};
    end /* fetch*/
    if (sysVar.errorCode == "00000000" /* call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* fetched a row*/
      ;
      while (SQLCA.VAGen_SQLCODE == 0)
        ;
         /* *==============================================**/
         /* *   store/ accumulate PT3AVQT for current row  **/
         /* *==============================================**/
        ;
        AFWREC.AFWIDX1 = 1; /* set loop index*/
        ;
        while (AFWREC.AFWIDX1 <= 10) /* scan AFCREC size array*/
          ;
          if (AFCREC.SY5SZID[AFWIDX1] != 0) /* find non-zero size id idx*/
            ;
            if (AFCREC.SY5SZID[AFWIDX1] in AF0JW02.SY5SZID) /* Size found?*/
              ;
                      /* (add open, reserved & alloc qty if found)*/
              ;
              AF0JW02.AF0JWQTW = AFCREC.AFCOPDMD[AFWIDX1]; /* Move to wk*/
              AF0JW02.PT3AVQT[sysVar.arrayIndex] = AF0JW02.PT3AVQT[sysVar.arrayIndex] + AF0JW02.AF0JWQTW;
              ;
            else
              ;
                  /* (store open, reserved & alloc qty if not found)*/
              ;
              AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* assign store ptr*/
              AF0JW02.SY5SZID[AFWIDX2] = AFCREC.SY5SZID[AFWIDX1];
              AF0JW02.PT3AVQT[AFWIDX2] = AFCREC.AFCOPDMD[AFWIDX1];
            end
            ;
          end
          ;
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* loop through*/
          ;
        end /* =====> loop end*/
        ;
        try
          call "IO3920" ("N2", SQLCA, AFCREC) {isNoRefresh = yes, isExternal = yes};
        end /* fetch next*/
        ;
      end /* end cursor loop*/
      try
        call "IO3920" ("C2", SQLCA, AFCREC) {isNoRefresh = yes, isExternal = yes};
      end /* close cursor*/
      return; /* Return to calling process*/
      ;
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No records found*/
      AFCREC.AFCKEY = " "; /* Reset AFCREC key to spaces*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S01 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANO01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AF0JS01

// Fetch row and accum qtys
Function AF0JS02()
   /* ------------------------------------------------------------*/
   /* Fetch the target row with a cursor process.*/
   /* If any error, indicate a system error.*/
   /* Accumulate qtys in a working storage array depending on*/
      /* the size index.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3930" ("S2", SQLCA, AFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    try
      call "IO3930" ("N2", SQLCA, AFDREC) {isNoRefresh = yes, isExternal = yes};
    end /* fetch*/
    if (sysVar.errorCode == "00000000" /* call successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      while (SQLCA.VAGen_SQLCODE == 0) /* cursor loop*/
        ;
         /* *==============================================**/
         /* *   store/ accumulate PT3AVQT for current row  **/
         /* *==============================================**/
        ;
        AFWREC.AFWIDX1 = 1; /* set loop index*/
        ;
        while (AFWREC.AFWIDX1 <= 10) /* find non-zero size id index*/
          ;
          if (AFDREC.SY5SZID[AFWIDX1] != 0)
            ;
            if (AFDREC.SY5SZID[AFWIDX1] in AF0JW02.SY5SZID) /* Size found?*/
              ;
                            /* (add shipped qty if found)*/
              ;
              AF0JW02.AF0JWQTW = AFDREC.SR1QTYSH[AFWIDX1];
              AF0JW02.PT3AVQT[sysVar.arrayIndex] = AF0JW02.PT3AVQT[sysVar.arrayIndex] + AF0JW02.AF0JWQTW;
              ;
            else
              ;
                          /* (store shipped qty if not found)*/
              ;
              AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* assign store ptr*/
              AF0JW02.SY5SZID[AFWIDX2] = AFDREC.SY5SZID[AFWIDX1];
              AF0JW02.PT3AVQT[AFWIDX2] = AFDREC.SR1QTYSH[AFWIDX1];
            end
            ;
          end
          ;
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* loop through*/
          ;
        end /* =====> loop end*/
        try
          call "IO3930" ("N2", SQLCA, AFDREC) {isNoRefresh = yes, isExternal = yes};
        end /* fetch next*/
      end
      try
        call "IO3930" ("C2", SQLCA, AFDREC) {isNoRefresh = yes, isExternal = yes};
      end /* close cursor*/
      ;
      return; /* Exit to calling process*/
      ;
    end
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No records found*/
      AFDREC.AFDKEY = " "; /* Reset AFDREC key to spaces*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANC01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to calling process*/
  ;
  ;
end // end AF0JS02

// Fetch/process VABASM01 rows
Function AF0JS03()
   /* ------------------------------------------------------------*/
   /* Obtain all DMODEL.VABASM01 rows (with the same key), and*/
     /* accumulate PT_AVAL_QTY_SZs into a working storage array.*/
  ;
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch row/s retrieved, accumulate qtys to array depending*/
    /* on size index value.*/
   /* At end of rows, close the selected set cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0JS04(); /* Select set and open the cursor*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AFWREC.AFWSWC = "N"; /* Initialize end of file switch*/
    AFWREC.AFWIDX2 = 0; /* Initialize store/accum ptr*/
    PT3REC.PT3KEY = " "; /* Initialize work record key*/
    while (AFWREC.AFWSWC == "N") /* Until cursor end of file*/
      AF0JS05(); /* Obtain data and format page*/
      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        AFWREC.AFWSWC = "Y"; /* Force end of file*/
      end
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ;
    if (PT3REC.PT3KEY == " ") /* No records processed*/
      set AF0JM001.SY1STNBR cursor; /* Position cursor*/
      AFWREC.AFWPRCSN = "S01 "; /* Process name*/
      AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Map process name*/
      converseLib.validationFailed(15); /* Indicate no records found*/
      AFWREC.AFWIDX5 = 1; /* Set loop index*/
      while (AFWREC.AFWIDX5 <= 16) /* Protect/darken map display*/
        set AF0JM001.SY4IDDSC[AFWIDX5] skip, invisible; /* Size desc*/
        set AF0JM001.AF0JMDBQ[AFWIDX5] skip, invisible; /* Actual qty*/
        set AF0JM001.AFEADJQ[AFWIDX5] skip, invisible; /* Adj qty*/
        set AF0JM001.AF0JMADJ[AFWIDX5] skip, invisible; /* Adj upd qty*/
        set AF0JM001.AF0JMTOT[AFWIDX5] skip, invisible; /* Qty totals*/
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      end
      set AF0JM001.AF0JMSTD skip, invisible; /* Protect/darken line2 hdgs*/
      set AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC1 skip, invisible; /**/
      set AF0JM001.AF0JM-AFEADJT-DESC1 skip, invisible; /**/
      set AF0JM001.AF0JMADF skip, invisible; /* Protect/darken line2 hdgs*/
      set AF0JM001.AF0JMFD2 skip, invisible; /* Protect/darken line2 hdgs*/
      set AF0JM001.AF0JMTLF skip, invisible; /* Protect/darken line2 hdgs*/
    end
    ;
    AF0JS06(); /* Close the selected set cursor*/
    ;
  end
end // end AF0JS03

// Select set and open cursor
Function AF0JS04()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3090" (AF0JW04, SQLCA, PT3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling routine*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASM01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AF0JS04

// Fetch row and accum qtys
Function AF0JS05()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Accumulate qtys in a working storage array depending on*/
      /* the size index.*/
   /* ------------------------------------------------------------*/
  ;
  AF0JW04.AF0JWDBF = "N1"; /* Set next function*/
  ;
  ;
  try
    call "IO3090" (AF0JW04, SQLCA, PT3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    ;
     /* *==============================================**/
     /* *   store/ accumulate PT3AVQT for current row  **/
     /* *==============================================**/
    ;
    if (PT3REC.PT3YYMM == 9999) /* accumulate only these recs*/
      ;
      ;
      AFWREC.AFWIDX1 = 1; /* set loop index*/
      ;
      while (AFWREC.AFWIDX1 <= 10) /* find non-zero size id index*/
        ;
        if (PT3REC.SY5SZID[AFWIDX1] != 0)
                             /* (add qty if found)*/
          if (PT3REC.SY5SZID[AFWIDX1] in AF0JW02.SY5SZID)
            AF0JW02.AF0JWQTW = PT3REC.PT3AVQT[AFWIDX1];
            AF0JW02.PT3AVQT[sysVar.arrayIndex] = AF0JW02.PT3AVQT[sysVar.arrayIndex] + AF0JW02.AF0JWQTW;
            AFWREC.AFWIDX1 = 70; /* force loop termination*/
          else
                              /* (store qty if not found)*/
            AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* assign store ptr*/
            AF0JW02.SY5SZID[AFWIDX2] = PT3REC.SY5SZID[AFWIDX1];
            AF0JW02.PT3AVQT[AFWIDX2] = PT3REC.PT3AVQT[AFWIDX1];
          end
        end
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* loop through*/
        ;
      end /* =====> loop end*/
      ;
      return; /* Loop through*/
      ;
    end
    ;
    return; /* Loop through*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASM01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0JS05

// Close selected set cursor
Function AF0JS06()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  AF0JW04.AF0JWDBF = "C1"; /* Set close function*/
  ;
  try
    call "IO3090" (AF0JW04, SQLCA, PT3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Exit to calling process*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASM01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0JS06

// Edit order type cd
Function AF0JS07()
  AF0JW03.AF0JWXOT = AF0JM001.XOTCD; /* save to wk storage*/
  AF0JW03.XOTABRV = " "; /* set desc*/
  AF0JM001.XOTABRV = " "; /* set desc*/
  ;
  ;
  if (AF0JM001.AFEADJT == "2") /* Adjustment type = 2*/
             /* (Ignore input - not validated)*/
    return; /* Return to calling process*/
  end
  ;
  ;
  XP1REC.XOTCD = AF0JM001.XOTCD; /* save to wk storage*/
  ;
  ;
  if (XP1REC.XOTCD == "10"
   || XP1REC.XOTCD == "20"
   || XP1REC.XOTCD == "30"
   || XP1REC.XOTCD == "40"
   || XP1REC.XOTCD == "50"
   || XP1REC.XOTCD == "60")
    ;
    if (XP1REC.XOTCD == "10") /* f1*/
      AF0JW03.XOTABRV = "FUT 1"; /* move desc*/
      AF0JM001.XOTABRV = "FUT 1"; /* move desc*/
    end
    ;
    if (XP1REC.XOTCD == "20") /* f2*/
      AF0JW03.XOTABRV = "FUT 2"; /* move desc*/
      AF0JM001.XOTABRV = "FUT 2"; /* move desc*/
    end
    ;
    if (XP1REC.XOTCD == "30") /* f3*/
      AF0JW03.XOTABRV = "FUT 3"; /* move desc*/
      AF0JM001.XOTABRV = "FUT 3"; /* move desc*/
    end
    ;
    if (XP1REC.XOTCD == "40") /* f4*/
      AF0JW03.XOTABRV = "FUT 4"; /* move desc*/
      AF0JM001.XOTABRV = "FUT 4"; /* move desc*/
    end
    ;
    if (XP1REC.XOTCD == "50") /* promo*/
      AF0JW03.XOTABRV = "PROP"; /* move desc*/
      AF0JM001.XOTABRV = "PROP"; /* move desc*/
    end
    ;
    if (XP1REC.XOTCD == "60") /* special makeup*/
      AF0JW03.XOTABRV = "SP MU"; /* move desc*/
      AF0JM001.XOTABRV = "SP MU"; /* move desc*/
    end
    ;
  else
                   /* (field in error)*/
    AFWREC.AFWPRCSN = "S05 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0JM001.XOTCD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 27; /* indicate error message*/
    XP1REC.XOTCD = " "; /* Reset save fld*/
    AF0JW03.XOTABRV = " "; /* move desc*/
    AF0JM001.XOTABRV = " "; /* move desc*/
    ;
  end
end // end AF0JS07

// Edit need yr
Function AF0JS12()
  AF0JW03.AF0JWNYR = AF0JM001.AF0JWNYR; /* save to wk storage*/
  ;
  ;
  if (AF0JM001.AFEADJT == "2") /* Adjustment type = 2*/
              /* (Ignore input - not validated)*/
    return; /* Return to calling process*/
  end
  ;
  ;
  if (AF0JW03.AF0JWNYR <= 0)
                   /* (field in error)*/
    AFWREC.AFWPRCSN = "S12 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0JM001.AF0JWNYR cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 22; /* indicate error message*/
    ;
  end
end // end AF0JS12

// Edit need month
Function AF0JS13()
  AF0JW03.AF0JWNMW = AF0JM001.AF0JMNMO; /* save to wk storage*/
  ;
  ;
  if (AF0JM001.AFEADJT == "2") /* Adjustment type = 2*/
              /* (Ignore input - not validated)*/
    return; /* Return to calling process*/
  end
  ;
  ;
  if (AF0JW03.AF0JWNMW <= 0
   || AF0JW03.AF0JWNMW > 12)
                   /* (field in error)*/
    AFWREC.AFWPRCSN = "S13 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0JM001.AF0JMNMO cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 22; /* indicate error message*/
    XP1REC.AFBNDTPR = 0; /* Reset save fld*/
    ;
  else
    ;
    if (AF0JW03.AF0JWNYR > 0) /* Need year valid*/
      XP1REC.AFBNDTPR = AF0JW03.AF0JWNDT; /* save to wk storage*/
    end
    ;
  end
end // end AF0JS13

// Edit warehouse cd
Function AF0JS14()
  XP1REC.XWHCD = AF0JM001.XWHCD; /* save to working storage*/
  AF0JW03.XWHABRV = " "; /* set desc*/
  AF0JM001.XWHABRV = " "; /* set desc*/
  ;
  ;
  if (XP1REC.XWHCD == " ") /* Whse cd = spaces*/
                   /* (field in error)*/
    AFWREC.AFWPRCSN = "S14 "; /* Process name*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process number*/
    set AF0JM001.XWHCD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 28; /* indicate error message*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  if (XP1REC.XWHCD in XWHTBL.XWHCD)
    ;
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status is active*/
                       /* (field is valid)*/
      AF0JW03.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* move desc*/
      AF0JM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* move desc*/
      ;
    else
                     /* (field in error)*/
      AFWREC.AFWPRCSN = "S12 "; /* Process name*/
      AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process number*/
      set AF0JM001.XWHCD cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 28; /* indicate error message*/
      XP1REC.XWHCD = " "; /* Reset save fld*/
      ;
    end
    ;
  else
                   /* (field in error)*/
    AFWREC.AFWPRCSN = "S12 "; /* Process name*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process number*/
    set AF0JM001.XWHCD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 28; /* indicate error message*/
    XP1REC.XWHCD = " "; /* Reset save fld*/
    ;
  end
end // end AF0JS14

// Edit division cd
Function AF0JS15()
  AF0JW03.AF0JWXDV = AF0JM001.XDVCD; /* save to working storage*/
  AF0JW03.XDVABRV = " "; /* set desc*/
  AF0JM001.XDVABRV = " "; /* set desc*/
  ;
  ;
  if (AF0JM001.AFEADJT == "2") /* Adjustment type = 2*/
              /* (Ignore input - not validated)*/
    return; /* Return to calling process*/
  end
  ;
  ;
  if (AF0JW03.AF0JWXDV in XDVTBL.XDVCD)
                     /* (field is valid)*/
    AF0JW03.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* move desc*/
    AF0JM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* move desc*/
  else
                   /* (field in error)*/
    AFWREC.AFWPRCSN = "S15 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0JM001.XDVCD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 29; /* indicate error message*/
    ;
  end
end // end AF0JS15

// Edit style/color
Function AF0JS16()
   /* *================================**/
   /* *  Save map items to wk storage  **/
   /* *================================**/
  ;
  XP1REC.SY1STNBR = AF0JM001.SY1STNBR; /* save to wk storage*/
  XP1REC.SY2CLRID = AF0JM001.SY2CLRID; /* save to wk storage*/
  ;
  AF0JM001.SY1SSTNM = " "; /* move spaces to desc*/
  AF0JW03.SY1SSTNM = " "; /* move spaces to desc*/
  AF0JM001.SY2CLRAB = " "; /* move spaces to desc*/
  AF0JW03.SY2CLRAB = " "; /* move spaces to desc*/
  ;
  ;
   /* *==============================**/
   /* *  access DPRODG.VSYCLR01 db   **/
   /* *==============================**/
  ;
  set PG2REC empty; /* initialize db record*/
  PG2REC.XGPCD = "03"; /* gpc cd*/
  PG2REC.SY1STNBR = XP1REC.SY1STNBR; /* style*/
  PG2REC.SY2CLRID = XP1REC.SY2CLRID; /* color*/
  PG2REC.XDMCD = "00"; /* dimension cd*/
  ;
   /* =========== get from database ==========*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ========================================*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
           /* (style/color combination found in database)*/
    ;
                /* (move desc to map)*/
    AF0JM001.SY1SSTNM = PG2REC.SY1SSTNM; /* move desc*/
    AF0JW03.SY1SSTNM = PG2REC.SY1SSTNM; /* move desc*/
    AF0JM001.SY2CLRAB = PG2REC.SY2CLRAB; /* move desc*/
    AF0JW03.SY2CLRAB = PG2REC.SY2CLRAB; /* move desc*/
          /* (save uom cd to working storage)*/
    AF0JW03.XUMCD = PG2REC.XUMCD; /* save data*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call unsuccessful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AFWREC.AFWPRCSN = "S16 "; /* Process number*/
      AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      set AF0JM001.SY1STNBR cursor, bold; /* highlight field*/
      set AF0JM001.SY2CLRID bold; /* Highlight field*/
      XP1REC.XP1MNO = 23; /* Indicate no data found msg*/
      XP1REC.SY1STNBR = " "; /* Reset save fld*/
      XP1REC.SY2CLRID = " "; /* Reset save fld*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S16 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redsiplay map*/
  ;
  ;
end // end AF0JS16

// Edit adjustment type
Function AF0JS17()
  XP1REC.AFEADJT = AF0JM001.AFEADJT; /* save to working storage*/
  ;
  ;
  if (XP1REC.AFEADJT != "1"
   && XP1REC.AFEADJT != "2")
                   /* (field in error)*/
    AFWREC.AFWPRCSN = "S17 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0JM001.AFEADJT cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 30; /* indicate error message*/
    XP1REC.AFEADJT = " "; /* Reset save fld*/
    ;
  end
end // end AF0JS17

// Edit season yr
Function AF0JS18()
  XP1REC.XSNYR = AF0JM001.XSNYR; /* save to working storage*/
  ;
  ;
  AF0JW02.AF0JWXSY = 0; /* initialize xsnyr wk area*/
  AF0JW02.AF0JWXSY = XP1REC.XSNYR; /* move to wk area*/
  AF0JW02.AF0JWXSY = AF0JW02.AF0JWXSY + 1900; /* move century*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0JW02.AF0JWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF0JW02.AF0JWXSY; /* Save to wk area*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
  ;
  AFWREC.AFWPRCSN = "S18 "; /* Process number*/
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  set AF0JM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset save fld*/
  ;
end // end AF0JS18

// Edit season cd
Function AF0JS19()
  XP1REC.XSECD = AF0JM001.XSECD; /* save to working storage*/
  ;
  ;
  if (XP1REC.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S19 "; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0JM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* Reset saved fld*/
    return; /* return to calling process*/
    ;
  end
  ;
  AF0JW02.AF0JWXSS = " "; /* Initialize wk area*/
  AF0JW02.AF0JWXYR = +0; /* Initialize wk area*/
  ;
  AF0JW02.AF0JWXSS = XP1REC.XSECD; /* Format wk area*/
  AF0JW02.AF0JWXYR = XP1REC.XSNYR; /* Format wk area*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0JW02.AF0JWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S17 "; /* Process number*/
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  set AF0JM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset save fld*/
end // end AF0JS19

// Edit Owner Group
Function AF0JS20()
  ;
  if (AF0JM001.XOWCD == " ")
                   /* (field in error)*/
    AFWREC.AFWPRCSN = "S20 "; /* Process name*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process number*/
    set AF0JM001.XOWCD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 121; /* indicate error message*/
    return; /* Return to calling process*/
    ;
  end
  ;
  if (AF0JM001.XWHCD == " ")
    return;
  end
  ;
  if (AF0JM001.XOWCD == XP1REC.XOWCD) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end
  ;
  XP1REC.XOWCD = AF0JM001.XOWCD;
  XP1REC.XOWABRV = " ";
  ;
  if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
    XP1REC.XOWCD = AF0JM001.XOWCD; /* save to wk storage*/
    XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk storage*/
    return; /* Exit to calling process*/
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S20 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  set AF0JM001.XOWCD cursor, bold; /* highlight field*/
  ;
  ;
  ;
end // end AF0JS20

Function AF0JS21()
  ;
  AF0JW03.AF0JM-WEEK-CURR-PERIOD-TYPE = AF0JM001.AF0JM-WEEK-CURR-PERIOD-TYPE; /* SAVE TO WORKING STG.*/
  ;
  ;
  if (AF0JW03.AF0JM-WEEK-CURR-PERIOD-TYPE != "W" /* NOT WEEKEND*/
   && AF0JW03.AF0JM-WEEK-CURR-PERIOD-TYPE != "C") /* NOT CURRENT*/
                   /* (field in error)*/
    AFWREC.AFWPRCSN = "S21A"; /* Process number*/
    AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0JM001.AF0JM-WEEK-CURR-PERIOD-TYPE cursor, bold; /**/
    XP1REC.XP1MNO = 134; /* indicate error message*/
    XP1REC.AFEADJT = " "; /* Reset save fld*/
  else /**/
    if (AF0JW03.AF0JM-WEEK-CURR-PERIOD-TYPE == "C") /* CURRENT  AND*/
      if (XP1REC.AFEADJT == "1") /* LOOKING FOR DMD*/
        AFWREC.AFWPRCSN = "S21B"; /* Process number*/
        AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
        set AF0JM001.AF0JM-WEEK-CURR-PERIOD-TYPE cursor, bold;
                                   /* HIGHLIGHT FIELD*/
        set AF0JM001.AFEADJT cursor, bold; /* HIGHLIGHT FIELD*/
        XP1REC.XP1MNO = 135; /* CURRENT DMD DATA IS NOT ACTIVE.*/
        XP1REC.AFEADJT = " "; /* Reset save fld*/
      end /**/
    end /**/
    ;
  end
end // end AF0JS21

Function AF0JS30()
   /* ------------------------------------------------------------*/
   /* Obtain all DACAST.VAFPAR01 rows (with the same key), and*/
     /* accumulate PT_AVAL_QTY_SZs into a working storage array.*/
  ;
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch row/s retrieved, accumulate qtys to array depending*/
    /* on size index value.*/
   /* At end of rows, close the selected set cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0JS31(); /* Select set and open the cursor*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AFWREC.AFWSWC = "N"; /* Initialize end of file switch*/
    AFWREC.AFWIDX2 = 0; /* Initialize store/accum ptr*/
    VAFPAR01.VAFPAR01-KEY = " "; /* INIT. WORK RECORD KEY.*/
    while (AFWREC.AFWSWC == "N") /* Until cursor end of file*/
      AF0JS32(); /* Obtain data and format page*/
      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        AFWREC.AFWSWC = "Y"; /* Force end of file*/
      end
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ;
    if (VAFPAR01.VAFPAR01-KEY == " ") /* No records processed*/
      set AF0JM001.SY1STNBR cursor; /* Position cursor*/
      AFWREC.AFWPRCSN = "S30 "; /* Process name*/
      AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Map process name*/
      converseLib.validationFailed(15); /* Indicate no records found*/
      AFWREC.AFWIDX5 = 1; /* Set loop index*/
      while (AFWREC.AFWIDX5 <= 16) /* Protect/darken map display*/
        set AF0JM001.SY4IDDSC[AFWIDX5] skip, invisible; /* Size desc*/
        set AF0JM001.AF0JMDBQ[AFWIDX5] skip, invisible; /* Actual qty*/
        set AF0JM001.AFEADJQ[AFWIDX5] skip, invisible; /* Adj qty*/
        set AF0JM001.AF0JMADJ[AFWIDX5] skip, invisible; /* Adj upd qty*/
        set AF0JM001.AF0JMTOT[AFWIDX5] skip, invisible; /* Qty totals*/
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
      end
      set AF0JM001.AF0JMSTD skip, invisible; /* Protect/darken line2 hdgs*/
      set AF0JM001.AF0JM-WEEK-CURR-PERIOD-DESC1 skip, invisible; /**/
      set AF0JM001.AF0JM-AFEADJT-DESC1 skip, invisible; /**/
      set AF0JM001.AF0JMADF skip, invisible; /* Protect/darken line2 hdgs*/
      set AF0JM001.AF0JMFD2 skip, invisible; /* Protect/darken line2 hdgs*/
      set AF0JM001.AF0JMTLF skip, invisible; /* Protect/darken line2 hdgs*/
    end
    ;
    AF0JS33(); /* Close the selected set cursor*/
    ;
  end
end // end AF0JS30

Function AF0JS31()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6700" (AF0JW04, SQLCA, VAFPAR01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling routine*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S31 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPAR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AF0JS31

Function AF0JS32()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Accumulate qtys in a working storage array depending on*/
      /* the size index.*/
   /* ------------------------------------------------------------*/
  ;
  AF0JW04.AF0JWDBF = "N1"; /* Set next function*/
  ;
  ;
  try
    call "IO6700" (AF0JW04, SQLCA, VAFPAR01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    ;
     /* *==============================================**/
     /* *   store/ accumulate PT3AVQT for current row  **/
     /* *==============================================**/
    ;
    if (VAFPAR01.PT3YYMM == 9999) /* accumulate only these recs*/
      ;
      ;
      AFWREC.AFWIDX1 = 1; /* set loop index*/
      ;
      while (AFWREC.AFWIDX1 <= 10) /* find non-zero size id index*/
        ;
        if (VAFPAR01.SY5SZID[AFWIDX1] != 0)
                             /* (add qty if found)*/
          if (VAFPAR01.SY5SZID[AFWIDX1] in AF0JW02.SY5SZID)
            AF0JW02.AF0JWQTW = VAFPAR01.PT3AVQT[AFWIDX1];
            AF0JW02.PT3AVQT[sysVar.arrayIndex] = AF0JW02.PT3AVQT[sysVar.arrayIndex] +             AF0JW02.AF0JWQTW;
            AFWREC.AFWIDX1 = 70; /* force loop termination*/
          else
                              /* (store qty if not found)*/
            AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* assign store ptr*/
            AF0JW02.SY5SZID[AFWIDX2] = VAFPAR01.SY5SZID[AFWIDX1];
            AF0JW02.PT3AVQT[AFWIDX2] = VAFPAR01.PT3AVQT[AFWIDX1];
          end
        end
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* loop through*/
        ;
      end /* =====> loop end*/
      ;
      return; /* Loop through*/
      ;
    end
    ;
    return; /* Loop through*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S32 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPAR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0JS32

Function AF0JS33()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  AF0JW04.AF0JWDBF = "C1"; /* Set close function*/
  ;
  try
    call "IO6700" (AF0JW04, SQLCA, VAFPAR01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Exit to calling process*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S33 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFPAR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0JM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0JS33

//*** RECORD=AF0JW02 ****
// Working Storage Record for AF0J
// ***********************
Record AF0JW02 type basicRecord
  10 AF0JWSZD AF0JWSZD [16] ; 
  10 AF0JWSIX AF0JWSIX [16] ; 
  10 AF0JWACT AF0JWACT [16] ; 
  10 AF0JWADJ AF0JWADJ [16] ; 
  10 AF0JWUPD AF0JWUPD [16] ; 
  10 AF0JWTOT AF0JWTOT [16] ; 
  10 SY5SZID SY5SZID [10] ; 
  10 PT3AVQT PT3AVQT [10] ; 
  10 AF0JWSZW AF0JWSZW ; 
  10 AF0JWQTW AF0JWQTW ; 
  10 AF0JWACW AF0JWACW ; 
  10 AF0JWADW AF0JWADW ; 
  10 AF0JWUPW AF0JWUPW ; 
  10 AF0JWCNF AF0JWCNF ; 
  10 AF0JWADI AF0JWADI ; 
  10 AF0JWXSY AF0JWXSY ; 
  10 AF0JWSDS AF0JWSDS ; 
    15 AF0JWSD1 AF0JWSD1 ; 
    15 AF0JWSD2 AF0JWSD2 ; 
    15 AF0JWSD3 AF0JWSD3 ; 
    15 AF0JWSD4 AF0JWSD4 ; 
    15 AF0JWSD5 AF0JWSD5 ; 
  10 AF0JWSDC AF0JWSDC ; 
    15 AF0JWSC1 AF0JWSC1 ; 
    15 AF0JWSC2 AF0JWSC2 ; 
    15 AF0JWSC3 AF0JWSC3 ; 
    15 AF0JWSC4 AF0JWSC4 ; 
    15 AF0JWSC5 AF0JWSC5 ; 
  10 AF0JWXSA AF0JWXSA ; 
    15 AF0JWXSS AF0JWXSS ; 
    15 AF0JWXYR AF0JWXYR ; 
end // end AF0JW02

//*** RECORD=AF0JW03 ****
// Work Storage Record for AF0J - Saved map flds not on XP1REC
// ***********************
Record AF0JW03 type basicRecord
  10 AF0JWXDV AF0JWXDV ; 
  10 XDVDESC XDVDESC ; 
  10 XUMCD XUMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XDVABRV XDVABRV ; 
  10 XWHABRV XWHABRV ; 
  10 XOTABRV XOTABRV ; 
  10 AF0JWUPC AF0JWUPC ; 
  10 AF0JWPND AF0JWPND ; 
  10 AF0JWXOT AF0JWXOT ; 
  10 AF0JWNDT AF0JWNDT ; 
    15 AF0JWNYR AF0JWNYR ; 
    15 AF0JWNMW AF0JWNMW ; 
  10 AF0JM-WEEK-CURR-PERIOD-TYPE AF0JM-WEEK-CURR-PERIOD-TYPE ; 
end // end AF0JW03

//*** RECORD=AF0JW04 ****
// Work Storage Record for AF0J - Whse Cd Low-High Range
// ***********************
Record AF0JW04 type basicRecord
  10 AF0JWDBF AF0JWDBF ; 
  10 AF0JWWHL AF0JWWHL ; 
  10 AF0JWWHH AF0JWWHH ; 
end // end AF0JW04

//*** RECORD=VAFPAR01 ****
// *********** MODELING APPAREL BASE BY MONTH TABLE ***********
// 
// DB2 TABLE VIEW:      DACAST.VAFPAR01
// 
// DCLGEN MEMBER:       DCL00936
// 
// I/O MODULE:          IO6700
// 
// KEY TO TABLE:        XGPCD
//                      SY1STNBR
//                      SY2CLRID
//                      XDMCD
//                      XSDCD
//                      XPGCD
//                      XUMCD
//                      XQACD
//                      XWHCD
//                      XOWCD
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/04/93  JRICHA  New record.
// ************************
Record VAFPAR01 type basicRecord
  5 VAFPAR01-GROUP VAFPAR01-GROUP ; 
    10 VAFPAR01-KEY VAFPAR01-KEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XQACD XQACD ; 
      15 XWHCD XWHCD ; 
      15 XCTCD XCTCD ; 
      15 XOWCD XOWCD ; 
    10 PT3YYMM PT3YYMM ; 
    10 PT2RNUM PT2RNUM ; 
    10 SY5SZID SY5SZID [10] ; 
    10 PT3AVQT PT3AVQT [10] ; 
    10 PT3AVTOT PT3AVTOT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VAFPAR01

// weekend/current to date choice
DataItem AF0JM-WEEK-CURR-PERIOD-TYPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual sup/dmd figures
DataItem AF0JWACT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// act work area
DataItem AF0JWACW int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// adjustment change ind
DataItem AF0JWADI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjust.sup/dmd figures
DataItem AF0JWADJ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// adj work area
DataItem AF0JWADW int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update confirm flag
DataItem AF0JWCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0JWDBF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// afpndtpr wk area
DataItem AF0JWNDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order need month
DataItem AF0JWNMW num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order need year
DataItem AF0JWNYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// POP-UP IND
DataItem AF0JWPND char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty work area
DataItem AF0JWQTW int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size dsc wka 1
DataItem AF0JWSC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size dsc wka 2
DataItem AF0JWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size dsc wka 3
DataItem AF0JWSC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size dsc wka 4
DataItem AF0JWSC4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size dsc wka 5
DataItem AF0JWSC5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size desc wk 1
DataItem AF0JWSD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size desc wk 2
DataItem AF0JWSD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size desc wk 3
DataItem AF0JWSD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size desc wk 4
DataItem AF0JWSD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size desc wk 5
DataItem AF0JWSD5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size desc work area 2
DataItem AF0JWSDC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size desc work area 1
DataItem AF0JWSDS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save area size index
DataItem AF0JWSIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save area size desc
DataItem AF0JWSZD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem AF0JWSZW char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjustment totals
DataItem AF0JWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update successful flag
DataItem AF0JWUPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjustment updates
DataItem AF0JWUPD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// upd work area
DataItem AF0JWUPW int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0JWWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF0JWWHL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// division code
DataItem AF0JWXDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot cd wk area
DataItem AF0JWXOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0JWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0JWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0JWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0JWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem VAFPAR01-GROUP char(111)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VAFPAR01-KEY char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

