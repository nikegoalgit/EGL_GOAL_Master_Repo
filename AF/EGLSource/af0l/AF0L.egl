package af0l;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPTA0P;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSLC;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom4.XSPG201;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGACD;
import corpx1.XGATBL;
import corpx1.XLCCD;
import corpx1.XLCTBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XOWCD;
import corpx2.XOWDESC;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XSECD;
import corpx2.XSUCD;
import corpy2.YSNTBL;
import pg.common.PG1FCTCD;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY4REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0L ****
// This application is designed to enter size percents for
// apparel forecasted styles/sizes within a specific Gender/Age
// Category, Silhouette and Size Scale Combination. Data Base
// access can be for a specific forecaster or all forecasters
// combined. All entered size percentages should total 100%.
// After valid size percenteages have been entered, parameter
// records containing the percentages and record key data will
// be created and a batch job submitted to actually effect the
// updates into the DACAST.VAFSTY01 database.
// 
// The user will be able to select historical as-of-date
// information for inquiry and comparison purposes on this
// screen. This information will be shown positionally by size
// beside the percentage fields for update. The user can enter
// Season Code/Season Year/AS-Of-Date inquiries up to a maximum
// of two (2) positions.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 08/25/89   JRAMOS   New application.
// 07/13/93   TDODSO   CHANGED TEST JCL TO RUN TESTENC
// 02-10-95   KJ       XSN->YSN
// *********************
Program AF0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0LW01 AF0LW01; // record
  AF0LW02 AF0LW02; // record
  AF0LW03 AF0LW03; // record
  AF0LW04 AF0LW04; // record
  AF0LW05 AF0LW05; // record
  AF2REC AF2REC; // record
  AFFREC AFFREC; // record
  AFGREC AFGREC; // record
  AFHREC AFHREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AF0LT02 {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use AF0LM.AF0LM001, // form
  AF0LM.XX0XM001,
  AF0LM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/

    set AF0LW01 empty; /* Initialize working storage*/
    set AF0LW02 empty; /* Initialize working storage*/
    set AF0LW03 empty; /* Initialize working storage*/
    set AF0LW04 empty; /* Initialize working storage*/
    set AF0LW05 empty; /* Initialize working storage*/
    set AFFREC empty; /* Initialize working storage*/
    set AFGREC empty; /* Initialize working storage*/
    set AFHREC empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set SY4REC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA6REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0LM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF0L"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/

    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/


                      /* (Assign Constants)*/

    XP1REC.XGPCD = "03"; /* Apparel GPC cd only*/
    XP1REC.XDVCD = "01"; /* Default division cd*/
    XP1REC.XLCCD[1] = "10"; /* Default life cycle cd 1*/
    XP1REC.XLCCD[2] = "  "; /* Default life cycle cd 2*/
    XP1REC.XLCCD[3] = "  "; /* Default life cycle cd 3*/
    XP1REC.XLCCD[4] = "  "; /* Default life cycle cd 4*/
    XP1REC.XDVABRV = "NIKE D"; /* Default division abrv*/


       /* (Define Map Environment, Assign/Edit Defaults)*/

    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process number*/


                      /* (Set Map Item Values)*/

    AF0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/


                      /* (Process Passed Items)*/

    AF0LM001.PG1FCTCD = XP1REC.XXXUSER; /* Fcster code to map*/
    AF0LM001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    AF0LM001.XSNYR = XP1REC.XSNYR; /* Season yr to map*/
    AF0LM001.XGACD = XP1REC.XGACD; /* Gender age cd to map*/

    if (XP1REC.XGACD == " ")
      XP1REC.XGAABRV = " ";
    end

    if (XP1REC.XPLCD == " ")
      XP1REC.XPLABRV = " ";
    end

    if (XP1REC.XPCCD == " ")
      XP1REC.XPCABRV = " ";
    end

    if (XP1REC.XGACD == " ")
      XP1REC.XGAABRV = " ";
    end

    if (XP1REC.XSUCD == " ")
      XP1REC.XSUABRV = " ";
    end

    if (XP1REC.XOWCD == " ")
      XP1REC.XOWCD = "00";
      XP1REC.XOWABRV = "N/A";
      XP1REC.XOWDESC = "NOT APPLICABLE";
    end

    AF0LM001.XGAABRV = XP1REC.XGAABRV; /* Gender age cd to map*/
    AF0LM001.XPLCD = XP1REC.XPLCD; /* Product line cd to map*/
    AF0LM001.XPLABRV = XP1REC.XPLABRV; /* Product line cd to map*/
    AF0LM001.XDVCD = XP1REC.XDVCD; /* Division cd to map*/
    AF0LM001.XDVABRV = XP1REC.XDVABRV; /* Division abrv to map*/
    AF0LM001.XPCCD = XP1REC.XPCCD; /* Category cd to map*/
    AF0LM001.XPCABRV = XP1REC.XPCABRV; /* Category cd to map*/
    AF0LM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd to map*/
    AF0LM001.XSUABRV = XP1REC.XSUABRV; /* Silhouette cd to map*/
    AF0LM001.XOWCD = XP1REC.XOWCD; /* Owner group cd to map*/
    AF0LM001.XOWABRV = XP1REC.XOWABRV; /* Owner group abrv to map*/
    AF0LM001.XLCCD[1] = XP1REC.XLCCD[1]; /* Life cycle cd 1 to map*/
    AF0LM001.XLCCD[2] = XP1REC.XLCCD[2]; /* Life cycle cd 2 to map*/
    AF0LM001.XLCCD[3] = XP1REC.XLCCD[3]; /* Life cycle cd 3 to map*/
    AF0LM001.XLCCD[4] = XP1REC.XLCCD[4]; /* Life cycle cd 4 to map*/

    XP1REC.XSECD = " "; /* Clear Season cd*/
    XP1REC.XSNYR = 0; /* Clear Season yr*/
    XP1REC.XGACD = " "; /* Clear Gender age cd*/
    XP1REC.XPLCD = " "; /* Clear Product line cd*/
    XP1REC.XPCCD = " "; /* Clear Category cd*/
    XP1REC.XSUCD = " "; /* Clear Silhouette cd*/
    XP1REC.XOWCD = " "; /* Clear Owner group cd*/
    XP1REC.XGAABRV = " "; /* Clear XGA abrv*/
    XP1REC.XPLABRV = " "; /* Clear XPL abrv*/
    XP1REC.XPCABRV = " "; /* Clear XPC abrv*/
    XP1REC.XSUABRV = " "; /* Clear XSU abrv*/
    XP1REC.XOWABRV = " "; /* Clear XOW abrv*/


                 /* (Protect,Dark Map Dtl Lines)*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 30) /* Protect/darken map display*/
      set AF0LM001.AF0LMSZD[AFWIDX5] skip, invisible; /* Size description*/
      set AF0LM001.AF0LMSZP[AFWIDX5] skip, invisible; /* Size percentage*/
      set AF0LM001.AF0LMHPA[AFWIDX5] skip, invisible; /* Historical data A*/
      set AF0LM001.AF0LMHPB[AFWIDX5] skip, invisible; /* Historical data B*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    set AF0LM001.AF0LMHP1 skip, invisible; /* Hist headings 1*/
    set AF0LM001.AF0LMHP2 skip, invisible; /* Hist headings 2*/
    set AF0LM001.AF0LMHP3 skip, invisible; /* Hist headings 3*/
    set AF0LM001.AF0LMHP4 skip, invisible; /* Hist headings 4*/
    set AF0LM001.AF0LMHP5 skip, invisible; /* Hist headings 5*/
    set AF0LM001.AF0LMHP6 skip, invisible; /* Hist headings 6*/

    set AF0LM001.XSECD cursor; /* Set cursor position*/

    set AF0LM001.AF0LMP05 skip, invisible; /* PF05 prompt*/
    set AF0LM001.AF0LMSC5 skip, invisible; /* Seas-Yr copy prompt*/
    set AF0LM001.AF0LMP06 skip, invisible; /* PF06 prompt*/
    set AF0LM001.AF0LMSC6 skip, invisible; /* Seas-Yr copy prompt*/
    set AF0LM001.AF0LMP10 skip, invisible; /* PF10 prompt*/
    set AF0LM001.AF0LMP11 skip, invisible; /* PF11 prompt*/


                      /* (Converse Main Process)*/

    goto AF0L001; /* Main Process*/



    AF0L001: AF0L001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Monthly Demand Pcent Application*/
     /* ------------------------------------------------------------*/

    goto AF0L001;


  end // end main
end // end AF0L

// Choose which map to display
Function AF0L001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/



  AF0L110(); /* Obtain the data to display*/

  AF0L120(); /* Format and display the map*/

  AF0L130(); /* Check attention identifier*/

  AF0L140(); /* Reset fields to normal intensity*/

  AF0L150(); /* Verify the entered data*/

  AF0L160(); /* Process valid input request*/




end // end AF0L001

// Obtain Data to Display
Function AF0L110()
   /* ------------------------------------------------------------*/
   /* Check for common data selection criteria. If met, then*/
     /* exit to next process;*/

   /* Execute data retrieval processes for Style/Pct  display;*/
   /* Execute data retrieval processes for Historical display.*/

   /* --> Note that while Style/Pct  data and Historical data*/
       /* share the same screen(or map), both are intrinsically*/
       /* different from each other so processes to obtain data*/
       /* are completely seperate and unrelated.*/

   /* ...Then merge the wk arrays of both Current and Historical*/
   /* such that all percentages would be lined up beside their*/
   /* respective valid sizes; all sizes sequenced from the*/
   /* smallest size to the largest size; and the display array*/
   /* compressed such that only valid sizes for the header*/
   /* selection will be shown.*/

   /* ------------------------------------------------------------*/




   /* *========================================**/
   /* *  Check Common Data Selection Criteria  **/
   /* *========================================**/

  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || AF0LW01.AF0LWPND == "Y"           /* Pop-up window processing active*/
   || converseVar.eventKey is pa2       /* PA2 was pressed*/
   || AFWREC.AFWFIRST == " ")           /* First time through*/
    return; /* Then exit to next process*/
  end



   /* *======================================**/
   /* *  Obtain Data for Style/Pct  Display  **/
   /* *======================================**/

  AF0L111(); /* Obtain Style/Pct  data*/



   /* *======================================**/
   /* *  Obtain Data for Historical Display  **/
   /* *======================================**/


  if (converseVar.validationMsgNum == 0) /* No errors found*/

    AF0L112(); /* Obtain Historical data*/

  end



   /* *==================================================**/
   /* *  Match/Merge Current and Historical Data Arrays  **/
   /* * -- This set of code will ensure that all         **/
   /* * corresponding current and historical size data   **/
   /* * will be aligned with each other. Unmatched       **/
   /* * current and/or historical data will be sorted/   **/
   /* * merged along with the matched data.              **/
   /* *==================================================**/

  if (converseVar.validationMsgNum != 0) /* Errors found*/
    return; /* Exit to next process*/
  end



  AF0LW02.AF0LWIDX = 0; /* Set display index*/
  AF0LW02.AF0LWVCT = 0; /* Set Current data counter*/
  AFWREC.AFWIDX1 = 1; /* Set loop index*/

  move 0 to AF0LW02.AF0LWSZI[1] for all; /* Initialize Curr size id array*/
  move " " to AF0LW02.AF0LWSZN[1] for all; /* Initialize Curr size desc array*/
  move " " to AF0LW02.AF0LWVCS[1] for all; /* Initialize Curr size ind array*/
  move 0 to AF0LW03.AF0LWPC1[1] for all; /* Initialize Hist pcent 1 array*/
  move 0 to AF0LW03.AF0LWPC2[1] for all; /* Initialize Hist pcent 2 array*/


  while (AFWREC.AFWIDX1 <= 40) /* Match/Merge/Compress into Display Arrays*/

                 /* (Check Current Data)*/

    if (AF0LW02.AF0LWSZ[AFWIDX1] != 0) /* Valid size*/

      AF0LW02.AF0LWIDX = AF0LW02.AF0LWIDX + 1; /* Add to displ index*/
      AF0LW02.AF0LWSZI[AF0LWIDX] = AF0LW02.AF0LWSZ[AFWIDX1];
      AF0LW02.AF0LWSZN[AF0LWIDX] = AF0LW02.AF0LWSZD[AFWIDX1];
      AF0LW02.AF0LWVCS[AF0LWIDX] = "Y"; /* Indicate Curr size id*/
      AF0LW02.AF0LWVCT = AF0LW02.AF0LWVCT + 1; /* Accum curr data ctr*/

               /* (Check Historical Data - Selection 1)*/

      if (AF0LW03.AF0LWSW1[AFWIDX1] != " ") /* VALID SIZE*/
        AF0LW03.AF0LWPC1[AF0LWIDX] = AF0LW03.AF0LWQT1[AFWIDX1];
      end

               /* (Check Historical Data - Selection 2)*/

      if (AF0LW03.AF0LWSW2[AFWIDX1] != " ") /* VALID SIZE*/
        AF0LW03.AF0LWPC2[AF0LWIDX] = AF0LW03.AF0LWQT2[AFWIDX1];
      end


    else

               /* (Check Historical Data - Selection 1)*/

      if (AF0LW03.AF0LWSW1[AFWIDX1] != " ") /* VALID SIZE*/
        AF0LW02.AF0LWIDX = AF0LW02.AF0LWIDX + 1; /* Add to displ index*/
        AF0LW03.AF0LWPC1[AF0LWIDX] = AF0LW03.AF0LWQT1[AFWIDX1];
        AF0LW02.AF0LWSZN[AF0LWIDX] = SY4REC.SY4IDDSC[AFWIDX1];

                 /* (Check Historical Data - Selection 2)*/

        if (AF0LW03.AF0LWSW2[AFWIDX1] != " ") /* VALID SIZE*/
          AF0LW03.AF0LWPC2[AF0LWIDX] = AF0LW03.AF0LWQT2[AFWIDX1];
        end

      else

                 /* (Check Historical Data - Selection 2)*/

        if (AF0LW03.AF0LWSW2[AFWIDX1] != " ") /* VALID SIZE*/
          AF0LW02.AF0LWIDX = AF0LW02.AF0LWIDX + 1; /* Add to displ index*/
          AF0LW03.AF0LWPC2[AF0LWIDX] = AF0LW03.AF0LWQT2[AFWIDX1];
          AF0LW02.AF0LWSZN[AF0LWIDX] = SY4REC.SY4IDDSC[AFWIDX1];
        end

      end

    end

    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

  end



end // end AF0L110

// Obtain Style/Pct Data
Function AF0L111()
   /* ------------------------------------------------------------*/
              /* ** Obtain Style/Pct Data ***/
   /* If new keys entered, select set style using new keys.*/
   /* Obtain and store all rows associated with the style;*/
      /* format all map detail pages.*/
   /* ------------------------------------------------------------*/


   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/

  if (AFWREC.AFWSWR == "N") /* No new keys entered*/
    return; /* Then exit to next process*/
  end


   /* *===================**/
   /* * Select Style Row  **/
   /* *===================**/

  AF0LS02(); /* Select Scan Style*/



   /* *==============================**/
   /* * Process Selected Style Rows  **/
   /* *==============================**/

  if (converseVar.validationMsgNum == 0) /* No errors*/

    set AF0LW02 empty; /* Clear working storage record*/
    AFWREC.AFWSWC = " "; /* Reset EOF indicator*/

    while (AFWREC.AFWSWC == " ") /* Process all style rows*/

      AF0LS03(); /* DACAST.VAFSTY01 processing*/

    end


    if (converseVar.validationMsgNum == 0) /* No errors found*/

      AF0LS05(); /* Close Select Scan cursor*/

    end

  end



   /* *=========================================================**/
   /* * Check Obtain Data Status, Inactivate All Loop Controls  **/
   /* *=========================================================**/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0LW01.AF0LWPGV = 1; /* Set display at page one*/
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
  end



end // end AF0L111

// Obtain Historical data
Function AF0L112()
   /* ------------------------------------------------------------*/
               /* ** Obtain Historical Data ***/
   /* If new keys not entered, the return to calling process.*/
   /* If new keys entered, then obtain data from the historical*/
     /* databases, depending if the style no. was entered or not.*/
   /* Store all sizes/pcent qtys, format into map pages.*/
   /* ------------------------------------------------------------*/


   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/

  if (AF0LW01.AF0LWHFL != "Y") /* No historical data entered*/
    return; /* Then exit to next process*/
  end



   /* *==========================**/
   /* *  Clear Record Work Area  **/
   /* *==========================**/

  set AF0LW03 empty; /* Clear working storage record*/



   /* *=================================**/
   /* * Select Database to be Accessed  **/
   /* *=================================**/

  if (AF0LW01.AF0LWHST == " ") /* Historical Style not specified*/

    AFWREC.AFWIDX1 = 1; /* Reset categ loop index*/
    while (AFWREC.AFWIDX1 <= 3) /* Process all historical categories*/

      AFWREC.AFWIDX2 = 1; /* Reset selections loop index*/

      while (AFWREC.AFWIDX2 <= 2) /* Process all selections*/
        AF0LS06(); /* Process Historical Summary DB*/
        AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
      end

      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

    end

  else

    AFWREC.AFWIDX2 = 1; /* Reset selections loop index*/

    while (AFWREC.AFWIDX2 <= 2) /* Process all selections*/
      AF0LS10(); /* Process Historical Detail DB*/
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
    end

  end



   /* *=================================**/
   /* * Compute Historical Percentages  **/
   /* *=================================**/

                /* (Process Selection 1)*/

  if (AF0LW03.AF0LWHT1 > 0) /* Non-zero Qty1 totals*/

    AFWREC.AFWIDX1 = 1; /* Reset Loop Index*/
    while (AFWREC.AFWIDX1 <= 40) /* Process all Sizes/Qtys*/

      if (AF0LW03.AF0LWQW1[AFWIDX1] > 0) /* Valid size*/
        AF0LW01.AF0LWHPC = mathLib.round(AF0LW03.AF0LWQW1[AFWIDX1] / AF0LW03.AF0LWHT1, -mathLib.decimals(AF0LW01.AF0LWHPC));
        AF0LW03.AF0LWQT1[AFWIDX1] = mathLib.round(AF0LW01.AF0LWHPC * 100, -mathLib.decimals(AF0LW03.AF0LWQT1[AFWIDX1])); /* Pcent*/
        AF0LW03.AF0LWHM1 = AF0LW03.AF0LWHM1 + 1; /* Count valid sizes*/
      end

      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    end

  end

                /* (Process Selection 2)*/

  if (AF0LW03.AF0LWHT2 > 0) /* Non-zero Qty2 totals*/

    AFWREC.AFWIDX1 = 1; /* Reset Loop Index*/
    while (AFWREC.AFWIDX1 <= 40) /* Process all Sizes/Qtys*/

      if (AF0LW03.AF0LWQW2[AFWIDX1] > 0) /* Valid size*/
        AF0LW01.AF0LWHPC = mathLib.round(AF0LW03.AF0LWQW2[AFWIDX1] / AF0LW03.AF0LWHT2, -mathLib.decimals(AF0LW01.AF0LWHPC));
        AF0LW03.AF0LWQT2[AFWIDX1] = mathLib.round(AF0LW01.AF0LWHPC * 100, -mathLib.decimals(AF0LW03.AF0LWQT2[AFWIDX1])); /* Pcent*/
        AF0LW03.AF0LWHM2 = AF0LW03.AF0LWHM2 + 1; /* Count valid sizes*/
      end

      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    end

  end



   /* *==========================**/
   /* * Check Obtain Data Status **/
   /* *==========================**/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0LW01.AF0LWPGV = 1; /* Set current page to 1*/
    AF0LW01.AF0LWHDS = "N"; /* Request for history data completed*/
  end



end // end AF0L112

// Format and display the map
Function AF0L120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/


  if (AF0LW01.AF0LWPND != "Y" /* No pop-up windows active*/
   && AFWREC.AFWFIRST != " ") /* and not the first time*/

    if (converseVar.validationMsgNum == 0) /* No error found*/
      converseLib.validationFailed(42); /* Press ENTER to update msg*/

      AF0L121(); /* Format the data on the map*/

    else

      AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/

    end

  end



   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AF0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0LM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0LM001.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end


  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0LM001 alarm; /* Indicate sound alarm*/
  end



  converse AF0LM001 ;


   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/

  AFWREC.AFWNMO = 0; /* Info message number*/

  COMMAREA.CATOAP = AF0LM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0LM001.CAITEM; /* Application data*/

end // end AF0L120

// Format map data
Function AF0L121()

   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/

  set AF0LM001 initial; /* M001 input/output area*/



   /* *===============================**/
   /* *  Check Security Requirements  **/
   /* *===============================**/

  if (COMMAREA.CACHGFL != "Y") /* User not allowed to update*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 30) /* Protect enterable fields*/
      set AF0LM001.AF0LMSZP[AFWIDX5] skip; /* Size percent flds*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

  end



   /* *=====================**/
   /* *  Format Map Header  **/
   /* *=====================**/

                /* (Format Header Start Flds)*/
  AF0LM001.PG1FCTCD = AF0LW01.AF0LWFCT; /* Forecaster id*/
  AF0LM001.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0LM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0LM001.XGACD = XP1REC.XGACD; /* G/A cd*/
  AF0LM001.XPLCD = XP1REC.XPLCD; /* PR LIN cd*/
  AF0LM001.XPCCD = XP1REC.XPCCD; /* CAT cd*/
  AF0LM001.XSUCD = XP1REC.XSUCD; /* SIL cd*/
  AF0LM001.XDVCD = XP1REC.XDVCD; /* DIV cd*/
  AF0LM001.XOWCD = XP1REC.XOWCD; /* OWG cd*/
  AF0LM001.XLCCD[1] = XP1REC.XLCCD[1]; /* Life cycle cd 1*/
  AF0LM001.XLCCD[2] = XP1REC.XLCCD[2]; /* Life cycle cd 2*/
  AF0LM001.XLCCD[3] = XP1REC.XLCCD[3]; /* Life cycle cd 3*/
  AF0LM001.XLCCD[4] = XP1REC.XLCCD[4]; /* Life cycle cd 4*/

             /* (Format Header Description Flds)*/
  AF0LM001.XGAABRV = XP1REC.XGAABRV; /* G/A abrv*/
  AF0LM001.XPLABRV = XP1REC.XPLABRV; /* PR LIN abrv*/
  AF0LM001.XPCABRV = XP1REC.XPCABRV; /* CAT abrv*/
  AF0LM001.XSUABRV = XP1REC.XSUABRV; /* SIL abrv*/
  AF0LM001.XDVABRV = XP1REC.XDVABRV; /* DIV abrv*/
  AF0LM001.XOWABRV = XP1REC.XOWABRV; /* OWG abrv*/

          /* (Format Historical Selection Fields)*/
  AF0LM001.AF0LMHDV = AF0LW01.AF0LWHDV; /* Hist DIV cd*/
  AF0LM001.AF0LMHPR = AF0LW01.AF0LWHPR; /* Hist PR TYPE cd*/
  AF0LM001.AF0LMHGC = AF0LW01.AF0LWHGC; /* Hist G/A cd*/
  AF0LM001.AF0LMHPL = AF0LW01.AF0LWHPL; /* Hist PR LINE cd*/
  AF0LM001.AF0LMHSC = AF0LW01.AF0LWHSC; /* Hist Sil cd*/
  AF0LM001.AF0LMHOG = AF0LW01.AF0LWHOG; /* Hist Owg cd*/
  AF0LM001.AF0LMHC1 = AF0LW01.AF0LWHCC[1]; /* Hist Cat cd*/
  AF0LM001.AF0LMHC2 = AF0LW01.AF0LWHCC[2]; /* Hist Cat cd*/
  AF0LM001.AF0LMHC3 = AF0LW01.AF0LWHCC[3]; /* Hist Cat cd*/
  AF0LM001.AF0LMHST = AF0LW01.AF0LWHST; /* Hist Style*/
  AF0LM001.AF0LMHS1 = AF0LW01.AF0LWHS1; /* Hist Season cd 1*/
  AF0LM001.AF0LMHY1 = AF0LW01.AF0LWHY1; /* Hist Season yr 1*/
  AF0LM001.AF0LMHD1 = AF0LW01.AF0LWDX1; /* Hist As of Date 1*/
  AF0LM001.AF0LMHS2 = AF0LW01.AF0LWHS2; /* Hist Season cd 2*/
  AF0LM001.AF0LMHY2 = AF0LW01.AF0LWHY2; /* Hist Season yr 2*/
  AF0LM001.AF0LMHD2 = AF0LW01.AF0LWDX2; /* Hist As of Date 2*/



   /* *=========================================**/
   /* *  Process Current Data Map Detail Lines  **/
   /* *=========================================**/


  if (AF0LW02.AF0LWVCT > 0) /* Current size data existing*/


     /* *===========================**/
     /* *  Check Size  Pcent Totals **/
     /* *===========================**/

    AFWREC.AFWIDX4 = 1; /* Set Loop index*/
    AF0LW01.AF0LWCPT = 0; /* Reset accumulator*/

    while (AFWREC.AFWIDX4 <= AF0LW02.AF0LWIDX) /* LE Max Size Recs*/
      AF0LW01.AF0LWCPT = AF0LW01.AF0LWCPT + AF0LW02.AF0LWSZP[AFWIDX4];
      AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
    end

    AF0LM001.AF0LMSPC = AF0LW01.AF0LWCPT; /* Total Size pcents*/

    if (AF0LW01.AF0LWCPT != 100.00) /* Pcent not equal 100*/
      set AF0LM001.AF0LMSPC skip, bold; /* Highlight fld*/
    else
      set AF0LM001.AF0LMSPC initialAttributes; /* Reset fld*/
    end


     /* *================================**/
     /* *  Move Page Detail Flds to Map  **/
     /* *================================**/

    if (AF0LW01.AF0LWPGV == 1) /* On page 1 to display*/

      AFWREC.AFWIXM = 1; /* Reset loop index*/
      while (AFWREC.AFWIXM <= 30) /* Fill up page*/

        if (AF0LW02.AF0LWSZN[AFWIXM] != " ") /* Valid size*/
          AF0LM001.AF0LMSZD[AFWIXM] = AF0LW02.AF0LWSZN[AFWIXM];
          AF0LM001.AF0LMSZP[AFWIXM] = AF0LW02.AF0LWSZP[AFWIXM];

          if (AF0LW02.AF0LWVCS[AFWIXM] == " ") /* Size not for curr data*/
            set AF0LM001.AF0LMSZP[AFWIXM] skip, invisible; /* Darken fld*/
          end

        else
          set AF0LM001.AF0LMSZD[AFWIXM] skip, invisible; /* Darken fld*/
          set AF0LM001.AF0LMSZP[AFWIXM] skip, invisible; /* Darken fld*/
        end

        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

      end

    else

      AFWREC.AFWIXM = 1; /* Reset loop index*/
      AFWREC.AFWIDX1 = 31; /* Reset display index*/

      while (AFWREC.AFWIXM <= 30) /* Fill up page*/

        if (AFWREC.AFWIDX1 <= 40) /* Display last 10 sizes*/

          if (AF0LW02.AF0LWSZN[AFWIDX1] != " ") /* Valid size*/
            AF0LM001.AF0LMSZD[AFWIXM] = AF0LW02.AF0LWSZN[AFWIDX1];
            AF0LM001.AF0LMSZP[AFWIXM] = AF0LW02.AF0LWSZP[AFWIDX1];

            if (AF0LW02.AF0LWVCS[AFWIDX1] == " ") /* Size not for curr data*/
              set AF0LM001.AF0LMSZP[AFWIXM] skip, invisible; /* Protect fld*/
            end

          else
            set AF0LM001.AF0LMSZD[AFWIXM] skip, invisible; /* Darken fld*/
            set AF0LM001.AF0LMSZP[AFWIXM] skip, invisible; /* Darken fld*/
          end

        else
          set AF0LM001.AF0LMSZD[AFWIXM] skip, invisible; /* Darken fld*/
          set AF0LM001.AF0LMSZP[AFWIXM] skip, invisible; /* Darken fld*/
        end

        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Accumulate display index*/
        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

      end

    end



     /* *===================**/
     /* *  Position Cursor  **/
     /* *===================**/

    if (COMMAREA.CACHGFL == "Y") /* Updates allowed*/

      AFWREC.AFWIXM = 1; /* Set display index to 1*/

      if (AF0LW01.AF0LWPGV == 1) /* Display set at page one*/
        AFWREC.AFWIDX1 = 1; /* Set loop index*/
      else
        AFWREC.AFWIDX1 = +31; /* Set fld address at 31st elem*/
      end

      while (AFWREC.AFWIXM <= 30) /* Process whole page*/

        if (AF0LW02.AF0LWVCS[AFWIDX1] != " ") /* First current size*/
          set AF0LM001.AF0LMSZP[AFWIXM] cursor; /* Position cursor*/
          AFWREC.AFWIXM = +99; /* Force loop end*/
        end

        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

        if (AFWREC.AFWIDX1 > AF0LW02.AF0LWIDX) /* Max elems reached*/
          AFWREC.AFWIXM = +88; /* Force loop end*/
        end

      end

      if (AFWREC.AFWIDX1 == +88) /* No current sizes found*/
        set AF0LM001.XSECD cursor; /* Set cursor on XSECD map fld*/
      end

    else /* (No updates allowed)*/
      set AF0LM001.XSECD cursor; /* Position cursor*/
    end

  else

    AFWREC.AFWIXM = 1; /* Set loop index*/

    while (AFWREC.AFWIXM <= 30) /* Protect/darken map display*/
      set AF0LM001.AF0LMSZP[AFWIXM] skip, invisible; /* Size percent*/
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    end

    set AF0LM001.XSECD cursor; /* Set cursor position*/
    AF0LM001.AF0LMSPC = 0; /* Clear color pcent total*/
    AFWREC.AFWPRCSN = "121 "; /* Process number*/
    AFWREC.AFWNMO = 86; /* Indicate no data to display*/

  end

  if (AF0LW01.AF0LWJFL == "Y") /* JCL has been submitted*/
    AF0LW01.AF0LWJFL = "N"; /* reset JCL switch*/
    set AF0LM001.XGACD cursor; /* cursor placed for next global update*/
  end


   /* *=======================================**/
   /* *  Process Historical Map Detail Lines  **/
   /* *=======================================**/


  AFWREC.AFWIDX1 = AF0LW03.AF0LWHM1 + AF0LW03.AF0LWHM2; /* Check indexes*/

  if (AFWREC.AFWIDX1 > 0) /* Historical data present*/


     /* *==========================**/
     /* *  Format Column Headings  **/
     /* *==========================**/

    AF0LW01.AF0LWHSH = AF0LW01.AF0LWHS1; /* Season cd*/
    AF0LW01.AF0LWHYH = AF0LW01.AF0LWHY1; /* Season yr*/

    AF0LW01.AF0LWHCS = AF0LW01.AF0LWHS2; /* Season cd*/
    AF0LW01.AF0LWHCY = AF0LW01.AF0LWHY2; /* Season yr*/

    if (AF0LW02.AF0LWIDX < 11) /* One column of data present*/

      if (AF0LW03.AF0LWHM1 > 0) /* Historical data 1 present*/
        AF0LW01.AF0LWPF5 = "Y";
        AF0LM001.AF0LMHP1 = AF0LW01.AF0LWHSY; /* Col 1 hdg*/
        AF0LM001.AF0LMSC5 = AF0LW01.AF0LWHSY; /* Seas-Yr prompt*/
        set AF0LM001.AF0LMP05 initialAttributes; /* PF05 prompt*/
        set AF0LM001.AF0LMSC5 initialAttributes; /* Seas-Yr prompt*/
      else
        AF0LW01.AF0LWPF5 = "N";
        set AF0LM001.AF0LMHP1 skip, invisible; /* Col 1 hdg*/
        set AF0LM001.AF0LMP05 skip, invisible; /* PF05 prompt*/
        set AF0LM001.AF0LMSC5 skip, invisible; /* Seas-Yr prompt*/
      end

      if (AF0LW03.AF0LWHM2 > 0) /* Historical data 2 present*/
        AF0LW01.AF0LWPF6 = "Y";
        AF0LM001.AF0LMHP2 = AF0LW01.AF0LWHCH; /* Col 2 hdg*/
        AF0LM001.AF0LMSC6 = AF0LW01.AF0LWHCH; /* Seas-Yr prompt*/
        set AF0LM001.AF0LMP06 initialAttributes; /* PF06 prompt*/
        set AF0LM001.AF0LMSC6 initialAttributes; /* Seas-Yr prompt*/
      else
        AF0LW01.AF0LWPF6 = "N";
        set AF0LM001.AF0LMHP2 skip, invisible; /* Col 2 hdg*/
        set AF0LM001.AF0LMP06 skip, invisible; /* PF06 prompt*/
        set AF0LM001.AF0LMSC6 skip, invisible; /* Seas-Yr prompt*/
      end

      set AF0LM001.AF0LMHP3 skip, invisible; /* Protect,dark shdg*/
      set AF0LM001.AF0LMHP4 skip, invisible; /* Protect,dark shdg*/
      set AF0LM001.AF0LMHP5 skip, invisible; /* Protect,dark shdg*/
      set AF0LM001.AF0LMHP6 skip, invisible; /* Protect,dark shdg*/


    else


      if (AF0LW02.AF0LWIDX < 21) /* Two columns of data present*/

        if (AF0LW03.AF0LWHM1 > 0) /* Historical data 1 present*/
          AF0LW01.AF0LWPF5 = "Y";
          AF0LM001.AF0LMHP1 = AF0LW01.AF0LWHSY; /* Col 1 hdg*/
          AF0LM001.AF0LMHP3 = AF0LW01.AF0LWHSY; /* Col 3 hdg*/
          AF0LM001.AF0LMSC5 = AF0LW01.AF0LWHSY; /* Seas-Yr prompt*/
          set AF0LM001.AF0LMP05 initialAttributes; /* PF05 prompt*/
          set AF0LM001.AF0LMSC5 initialAttributes; /* Seas-Yr prompt*/
        else
          AF0LW01.AF0LWPF5 = "N";
          set AF0LM001.AF0LMHP1 skip, invisible; /* Col 1 hdg*/
          set AF0LM001.AF0LMHP3 skip, invisible; /* Col 3 hdg*/
          set AF0LM001.AF0LMP05 skip, invisible; /* PF05 prompt*/
          set AF0LM001.AF0LMSC5 skip, invisible; /* Seas-Yr prompt*/
        end

        if (AF0LW03.AF0LWHM2 > 0) /* Historical data 2 present*/
          AF0LW01.AF0LWPF6 = "Y";
          AF0LM001.AF0LMHP2 = AF0LW01.AF0LWHCH; /* Col 2 hdg*/
          AF0LM001.AF0LMHP4 = AF0LW01.AF0LWHCH; /* Col 4 hdg*/
          AF0LM001.AF0LMSC6 = AF0LW01.AF0LWHCH; /* Seas-Yr prompt*/
          set AF0LM001.AF0LMP06 initialAttributes; /* PF06 prompt*/
          set AF0LM001.AF0LMSC6 initialAttributes; /* Seas-Yr prompt*/
        else
          AF0LW01.AF0LWPF6 = "N";
          set AF0LM001.AF0LMHP2 skip, invisible; /* Col 2 hdg*/
          set AF0LM001.AF0LMHP4 skip, invisible; /* Col 4 hdg*/
          set AF0LM001.AF0LMP06 skip, invisible; /* PF06 prompt*/
          set AF0LM001.AF0LMSC6 skip, invisible; /* Seas-Yr prompt*/
        end

        set AF0LM001.AF0LMHP5 skip, invisible; /* Protect,dark shdg*/
        set AF0LM001.AF0LMHP6 skip, invisible; /* Protect,dark shdg*/


      else


        if (AF0LW02.AF0LWIDX >= 21) /* All columns with data*/

          if (AF0LW03.AF0LWHM1 > 0) /* Historical data 1 present*/
            AF0LW01.AF0LWPF5 = "Y";
            AF0LM001.AF0LMHP1 = AF0LW01.AF0LWHSY; /* Col 1 hdg*/
            AF0LM001.AF0LMHP3 = AF0LW01.AF0LWHSY; /* Col 3 hdg*/
            AF0LM001.AF0LMHP5 = AF0LW01.AF0LWHSY; /* Col 4 hdg*/
            AF0LM001.AF0LMSC5 = AF0LW01.AF0LWHSY; /* Seas-Yr prompt*/
            set AF0LM001.AF0LMP05 initialAttributes; /* PF06 prompt*/
            set AF0LM001.AF0LMSC5 initialAttributes; /* Seas-Yr prompt*/
          else
            AF0LW01.AF0LWPF5 = "N";
            set AF0LM001.AF0LMHP1 skip, invisible; /* Col 1 hdg*/
            set AF0LM001.AF0LMHP3 skip, invisible; /* Col 3 hdg*/
            set AF0LM001.AF0LMHP5 skip, invisible; /* Col 5 hdg*/
            set AF0LM001.AF0LMP05 skip, invisible; /* PF05 prompt*/
            set AF0LM001.AF0LMSC5 skip, invisible; /* Seas-Yr prompt*/
          end

          if (AF0LW03.AF0LWHM2 > 0) /* Historical data 2 present*/
            AF0LW01.AF0LWPF6 = "Y";
            AF0LM001.AF0LMHP2 = AF0LW01.AF0LWHCH; /* Col 2 hdg*/
            AF0LM001.AF0LMHP4 = AF0LW01.AF0LWHCH; /* Col 4 hdg*/
            AF0LM001.AF0LMHP6 = AF0LW01.AF0LWHCH; /* Col 6 hdg*/
            AF0LM001.AF0LMSC6 = AF0LW01.AF0LWHCH; /* Seas-Yr prompt*/
            set AF0LM001.AF0LMP06 initialAttributes; /* PF06 prompt*/
            set AF0LM001.AF0LMSC6 initialAttributes; /* Seas-Yr prompt*/
          else
            AF0LW01.AF0LWPF6 = "N";
            set AF0LM001.AF0LMHP2 skip, invisible; /* Col 2 hdg*/
            set AF0LM001.AF0LMHP4 skip, invisible; /* Col 4 hdg*/
            set AF0LM001.AF0LMHP6 skip, invisible; /* Col 6 hdg*/
            set AF0LM001.AF0LMP06 skip, invisible; /* PF06 prompt*/
            set AF0LM001.AF0LMSC6 skip, invisible; /* Seas-Yr prompt*/
          end

        end

      end

    end


     /* *================================**/
     /* *  Move Page Detail Flds to Map  **/
     /* *================================**/


    if (AF0LW01.AF0LWPGV == 1) /* On page 1 to display*/


      if (AF0LW03.AF0LWHM1 > 0) /* Historical data 1 present*/

        AFWREC.AFWIXM = 1; /* Reset loop index*/
        AFWREC.AFWIDX1 = 1; /* Reset display index*/

        while (AFWREC.AFWIXM <= 30) /* Fill up page*/

          if (AFWREC.AFWIDX1 <= AF0LW02.AF0LWIDX) /* valid hist pcent*/
            AF0LM001.AF0LMSZD[AFWIXM] = AF0LW02.AF0LWSZN[AFWIDX1];
            AF0LM001.AF0LMHPA[AFWIXM] = AF0LW03.AF0LWPC1[AFWIDX1];
          else
            set AF0LM001.AF0LMHPA[AFWIXM] skip, invisible; /* Darken fld*/
          end

          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
          AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

        end

      end


      if (AF0LW03.AF0LWHM2 > 0) /* Historical data 2 present*/

        AFWREC.AFWIXM = 1; /* Reset loop index*/
        AFWREC.AFWIDX1 = 1; /* Reset display index*/

        while (AFWREC.AFWIXM <= 30) /* Fill up page*/

          if (AFWREC.AFWIDX1 <= AF0LW02.AF0LWIDX) /* valid hist pcent*/
            AF0LM001.AF0LMSZD[AFWIXM] = AF0LW02.AF0LWSZN[AFWIDX1];
            AF0LM001.AF0LMHPB[AFWIXM] = AF0LW03.AF0LWPC2[AFWIDX1];
          else
            set AF0LM001.AF0LMHPB[AFWIXM] skip, invisible; /* Darken fld*/
          end

          AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

        end

      end


    else


      if (AF0LW03.AF0LWHM1 > 30) /* Historical data 1 w/ page 2*/

        AFWREC.AFWIXM = 1; /* Reset loop index*/
        AFWREC.AFWIDX1 = 31; /* Reset display index*/

        while (AFWREC.AFWIXM <= 30) /* Fill up page*/

          if (AFWREC.AFWIDX1 <= 40) /* Display last 10 sizes*/

            if (AF0LW03.AF0LWPC1[AFWIDX1] != 0) /* Valid pcent*/
              AF0LM001.AF0LMSZD[AFWIXM] = AF0LW02.AF0LWSZN[AFWIDX1];
              AF0LM001.AF0LMHPA[AFWIXM] = AF0LW03.AF0LWPC1[AFWIDX1];
            else
              set AF0LM001.AF0LMHPA[AFWIXM] skip, invisible; /* Darken fld*/
            end

          else
            set AF0LM001.AF0LMHPA[AFWIXM] skip, invisible; /* Darken fld*/
          end

          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Accumulate display index*/
          AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

        end

      end


      if (AF0LW03.AF0LWHM2 > 30) /* Historical data 2 w/ page 2*/

        AFWREC.AFWIXM = 1; /* Reset loop index*/
        AFWREC.AFWIDX1 = 31; /* Reset display index*/

        while (AFWREC.AFWIXM <= 30) /* Fill up page*/

          if (AFWREC.AFWIDX1 <= 40) /* Display last 10 sizes*/

            if (AF0LW03.AF0LWPC2[AFWIDX1] != 0) /* Valid pcent*/
              AF0LM001.AF0LMSZD[AFWIXM] = AF0LW02.AF0LWSZN[AFWIDX1];
              AF0LM001.AF0LMHPB[AFWIXM] = AF0LW03.AF0LWPC2[AFWIDX1];
            else
              set AF0LM001.AF0LMHPB[AFWIXM] skip, invisible; /* Darken fld*/
            end

          else
            set AF0LM001.AF0LMHPB[AFWIXM] skip, invisible; /* Darken fld*/
          end

          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Accumulate display index*/
          AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

        end

      end


    end


  else /* No historical data present*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 30) /* Protect/darken map display*/
      set AF0LM001.AF0LMHPA[AFWIDX5] skip, invisible; /* Hist pcent 1*/
      set AF0LM001.AF0LMHPB[AFWIDX5] skip, invisible; /* Hist pcent 2*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    set AF0LM001.AF0LMHP1 skip, invisible; /* Protect,dark shdg*/
    set AF0LM001.AF0LMHP2 skip, invisible; /* Protect,dark shdg*/
    set AF0LM001.AF0LMHP3 skip, invisible; /* Protect,dark shdg*/
    set AF0LM001.AF0LMHP4 skip, invisible; /* Protect,dark shdg*/
    set AF0LM001.AF0LMHP5 skip, invisible; /* Protect,dark shdg*/
    set AF0LM001.AF0LMHP6 skip, invisible; /* Protect,dark shdg*/
    set AF0LM001.AF0LMP05 skip, invisible; /* Protect,dark shdg*/
    set AF0LM001.AF0LMSC5 skip, invisible; /* Protect,dark shdg*/
    set AF0LM001.AF0LMP06 skip, invisible; /* Protect,dark shdg*/
    set AF0LM001.AF0LMSC6 skip, invisible; /* Protect,dark shdg*/

    if (AF0LM001.AF0LMHST != " " /* Style entered*/
     || AF0LM001.AF0LMHGC != " " /* or Valid Gender/Age cd*/
     || AF0LM001.AF0LMHSC != " " /* or Valid Silhouette cd*/
     || AF0LM001.AF0LMHC1 != " " /* or Valid Category cd 1*/
     || AF0LM001.AF0LMHC2 != " " /* or Valid Category cd 2*/
     || AF0LM001.AF0LMHC3 != " ") /* or Valid Category cd 3*/

      AFWREC.AFWPRCSN = "121 "; /* Process number*/
      AFWREC.AFWNMO = 85; /* Indicate no data to display*/

    end

  end



   /* *======================**/
   /* *  Set Prompt Options  **/
   /* *======================**/

  if (AF0LW02.AF0LWIDX <= 30) /* Data contained in 1 screen*/

    set AF0LM001.AF0LMP10 skip, invisible;
    set AF0LM001.AF0LMP11 skip, invisible;

  else

    if (AF0LW01.AF0LWPGV == 1) /* Display in page 1*/
      set AF0LM001.AF0LMP10 skip, invisible;
      set AF0LM001.AF0LMP11 initialAttributes;
    else
      set AF0LM001.AF0LMP10 initialAttributes;
      set AF0LM001.AF0LMP11 skip, invisible;
    end

  end



end // end AF0L121

// Check Attention Identifier
Function AF0L130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AF0LM001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end



  if (AF0LM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSAFS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AF0LM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AF0LM001.CAITEM > " ") /* Application data was entered*/
    set AF0LM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0LM001"; /* Appl find code*/
    end

    XSAFS01(); /* Exit to another application*/

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11) /* and PF11 was not pressed*/

    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/


    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


  if (AFWREC.AFWFIRST == " ") /* First time through*/

    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end

  end


  if (converseVar.eventKey is pf10 /* PF10 was pressed*/
   || converseVar.eventKey is pf11) /* PF11 was pressed*/

    AF0LW01.AF0LWHAC = "Y"; /* Indicate pending hist actvty*/

  else

    AF0LW01.AF0LWHAC = " "; /* Indicate no pending hist actvty*/

  end



end // end AF0L130

// Reset Hilght Flds; Disp Pop-up
Function AF0L140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to defined state.*/
   /* ------------------------------------------------------------*/

  set AF0LM001.XLCCD[1] initialAttributes; /* Life cycle cd 1*/
  set AF0LM001.XLCCD[2] initialAttributes; /* Life cycle cd 2*/
  set AF0LM001.XLCCD[3] initialAttributes; /* Life cycle cd 3*/
  set AF0LM001.XLCCD[4] initialAttributes; /* Life cycle cd 4*/
  set AF0LM001.PG1FCTCD initialAttributes; /* Forecaster cd*/
  set AF0LM001.XSECD initialAttributes; /* Sesn cd*/
  set AF0LM001.XSNYR initialAttributes; /* Sesn yr*/
  set AF0LM001.XGACD initialAttributes; /* Gender Age cd*/
  set AF0LM001.XPLCD initialAttributes; /* Product Line cd*/
  set AF0LM001.XPCCD initialAttributes; /* Category cd*/
  set AF0LM001.XSUCD initialAttributes; /* Silhouette cd*/
  set AF0LM001.XDVCD initialAttributes; /* Division cd*/
  set AF0LM001.XOWCD initialAttributes; /* Owner Group cd*/

  set AF0LM001.AF0LMHDV initialAttributes; /* Hist DIV cd*/
  set AF0LM001.AF0LMHPR initialAttributes; /* Hist PR TYP cd*/
  set AF0LM001.AF0LMHGC initialAttributes; /* Hist G/A cd*/
  set AF0LM001.AF0LMHPL initialAttributes; /* Hist PR LIN cd*/
  set AF0LM001.AF0LMHSC initialAttributes; /* Hist SILH cd*/
  set AF0LM001.AF0LMHC1 initialAttributes; /* Hist Cat cd 1*/
  set AF0LM001.AF0LMHC2 initialAttributes; /* Hist Cat cd 2*/
  set AF0LM001.AF0LMHC3 initialAttributes; /* Hist Cat cd 3*/
  set AF0LM001.AF0LMHST initialAttributes; /* Hist Style*/
  set AF0LM001.AF0LMHOG initialAttributes; /* Hist Owg cd*/
  set AF0LM001.AF0LMHS1 initialAttributes; /* Hist Season cd 1*/
  set AF0LM001.AF0LMHY1 initialAttributes; /* Hist Season yr 1*/
  set AF0LM001.AF0LMHD1 initialAttributes; /* Hist As of Date 1*/
  set AF0LM001.AF0LMHS2 initialAttributes; /* Hist Season cd 2*/
  set AF0LM001.AF0LMHY2 initialAttributes; /* Hist Season yr 2*/
  set AF0LM001.AF0LMHD2 initialAttributes; /* Hist As of Date 2*/

  AF0LM001.XXXPRCNM = "AF0L    "; /* Reset process name*/


  if (AF0LW01.AF0LWPF5 == "Y")
    set AF0LM001.AF0LMP05 initialAttributes; /* PF5  prompt*/
    set AF0LM001.AF0LMSC5 initialAttributes; /* Seas-yr prompt*/
  else
    set AF0LM001.AF0LMP05 skip, invisible; /* PF5  prompt*/
    set AF0LM001.AF0LMSC5 skip, invisible; /* Seas-yr prompt*/
  end

  if (AF0LW01.AF0LWPF6 == "Y")
    set AF0LM001.AF0LMP06 initialAttributes; /* PF6  prompt*/
    set AF0LM001.AF0LMSC6 initialAttributes; /* Seas-yr prompt*/
  else
    set AF0LM001.AF0LMP06 skip, invisible; /* PF6  prompt*/
    set AF0LM001.AF0LMSC6 skip, invisible; /* Seas-yr prompt*/
  end

  set AF0LM001.AF0LMP10 skip, invisible; /* PF10 prompt*/
  set AF0LM001.AF0LMP11 skip, invisible; /* PF11 prompt*/

  set AF0LM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0LM001.CAITEM initialAttributes; /* Commarea application data*/


   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0LM001.XSECD == "?"    /* Season cd*/
   || AF0LM001.XGACD == "?"    /* Gender/Age cd*/
   || AF0LM001.XPLCD == "?"    /* Product Line cd*/
   || AF0LM001.XPCCD == "?"    /* Category cd*/
   || AF0LM001.XSUCD == "?"    /* Silhouette cd*/
   || AF0LM001.XOWCD == "?"    /* Owner Group cd*/
   || AF0LM001.XDVCD == "?"    /* Division cd*/
   || AF0LM001.XLCCD[1] == "?" /* Life cycle cd 1*/
   || AF0LM001.XLCCD[2] == "?" /* Life cycle cd 2*/
   || AF0LM001.XLCCD[3] == "?" /* Life cycle cd 3*/
   || AF0LM001.XLCCD[4] == "?" /* Life cycle cd 4*/
   || AF0LM001.AF0LMHDV == "?" /* Historical DIV cd*/
   || AF0LM001.AF0LMHPR == "?" /* Historical PR TYP cd*/
   || AF0LM001.AF0LMHGC == "?" /* Historical G/A cd*/
   || AF0LM001.AF0LMHPL == "?" /* Historical PR LIN cd*/
   || AF0LM001.AF0LMHC1 == "?" /* Historical Cat cd 1*/
   || AF0LM001.AF0LMHC2 == "?" /* Historical Cat cd 2*/
   || AF0LM001.AF0LMHC3 == "?" /* Historical Cat cd 3*/
   || AF0LM001.AF0LMHSC == "?" /* Historical Silh cd*/
   || AF0LM001.AF0LMHOG == "?" /* Historical Owg cd*/
   || AF0LM001.AF0LMHS1 == "?" /* Historical Season cd 1*/
   || AF0LM001.AF0LMHS2 == "?") /* Historical Season cd 2*/

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    AF0LW01.AF0LWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/

  end



   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season cd*/
   /* *============================**/

  if (AF0LM001.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0LM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSE(); /* Pop-up window func requested*/

    AF0LM001.XSECD = XP1REC.XSECD; /* Move selection to map fld*/
    XP1REC.XSECD = " "; /* Space out wk area*/

  end



   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/

  if (AF0LM001.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0LM001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSGA(); /* Pop-up window func requested*/

    AF0LM001.XGACD = XP1REC.XGACD; /* Move selection to map fld*/
    XP1REC.XGACD = " "; /* Space out wk area*/

  end



   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product Line cd*/
   /* *============================**/

  if (AF0LM001.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0LM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPL(); /* Pop-up window func requested*/

    AF0LM001.XPLCD = XP1REC.XPLCD; /* Move selection to map fld*/
    XP1REC.XPLCD = " "; /* Space out wk area*/

  end



   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/

  if (AF0LM001.XPCCD == "?") /* Pop-up window requested*/

    XP1REC.XPCCD = AF0LM001.XPCCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPC(); /* Pop-up window func requested*/

    AF0LM001.XPCCD = XP1REC.XPCCD; /* Move selection to map fld*/
    XP1REC.XPCCD = " "; /* Space out wk area*/

  end



   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Silhouette cd*/
   /* *=============================**/


  if (AF0LM001.XSUCD == "?") /* Pop-up window requested*/

    XP1REC.XSUCD = AF0LM001.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSU(); /* Pop-up window func requested*/

    AF0LM001.XSUCD = XP1REC.XSUCD; /* Move selection to map*/
    XP1REC.XSUCD = " "; /* Space out wk area*/

  end



   /* *=============================**/
   /* *  Pop-up Window for XOWCD    * Owner Group cd*/
   /* *=============================**/


  if (AF0LM001.XOWCD == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0LM001.XOWCD; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Display whse 51 only*/

    XSAFSOW(); /* Pop-up window func requested*/

    AF0LM001.XOWCD = XP1REC.XOWCD; /* Move selection to map*/
    AF0LM001.XOWABRV = XP1REC.XOWABRV;

  end



   /* *=============================**/
   /* *  Pop-up Window for XDVCD    * Division cd*/
   /* *=============================**/


  if (AF0LM001.XDVCD == "?") /* Pop-up window requested*/

    XP1REC.XDVCD = AF0LM001.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSDV(); /* Pop-up window func requested*/

    AF0LM001.XDVCD = XP1REC.XDVCD; /* Move selection to map*/
    XP1REC.XDVCD = " "; /* Space out wk area*/

  end



   /* *=============================**/
   /* *  Pop-up Window for XLCCD    * Life cycle cd*/
   /* *=============================**/


  AFWREC.AFWIXM = 1; /* Reset map index*/

  while (AFWREC.AFWIXM <= 4)

    if (AF0LM001.XLCCD[AFWIXM] == "?") /* Pop-up window requested*/

      XP1REC.XLCCD = AF0LM001.XLCCD[AFWIXM]; /* Set XP1REC field*/

      XSAFSLC(); /* Pop-up window func requested*/

      AF0LM001.XLCCD[AFWIXM] = XP1REC.XLCCD; /* Move selection to map*/
      XP1REC.XLCCD = " "; /* Space out wk area*/

    end

    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* increment index*/

  end


   /* *=====================================**/
   /* *  Pop-up Window for Historical XDVCD **/
   /* *=====================================**/

  if (AF0LM001.AF0LMHDV == "?") /* Pop-up window requested*/

    XP1REC.XDVCD = AF0LM001.AF0LMHDV; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSDV(); /* Pop-up window func requested*/

    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    end

    AF0LM001.AF0LMHDV = XP1REC.XDVCD; /* Move selected code to map*/


  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XPRCD **/
   /* *=====================================**/

  if (AF0LM001.AF0LMHPR == "?") /* Pop-up window requested*/

    XP1REC.XPRCD = AF0LM001.AF0LMHPR; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPR(); /* Pop-up window func requested*/

    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    end

    AF0LM001.AF0LMHPR = XP1REC.XPRCD; /* Move selected code to map*/

    XP1REC.XPRCD = AF0LW01.AF0LWSPR; /* Restore orig XP1REC fld*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XGACD **/
   /* *=====================================**/

  if (AF0LM001.AF0LMHGC == "?") /* Pop-up window requested*/

    AF0LW01.AF0LWSGA = XP1REC.XGACD; /* Save orig XP1REC fld*/
    XP1REC.XGACD = AF0LM001.AF0LMHGC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    end

    AF0LM001.AF0LMHGC = XP1REC.XGACD; /* Move selected code to map*/

    XP1REC.XGACD = AF0LW01.AF0LWSGA; /* Restore orig XP1REC fld*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XPLCD **/
   /* *=====================================**/

  if (AF0LM001.AF0LMHPL == "?") /* Pop-up window requested*/

    AF0LW01.AF0LWSPL = XP1REC.XPLCD; /* Save orig XP1REC fld*/
    XP1REC.XPLCD = AF0LM001.AF0LMHPL; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    end

    AF0LM001.AF0LMHPL = XP1REC.XPLCD; /* Move selected code to map*/

    XP1REC.XPLCD = AF0LW01.AF0LWSPL; /* Restore orig XP1REC fld*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XPCCD **/
   /* *=====================================**/

  if (AF0LM001.AF0LMHC1 == "?") /* Pop-up window requested*/

    AF0LW01.AF0LWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0LM001.AF0LMHC1; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end

    AF0LM001.AF0LMHC1 = XP1REC.XPCCD; /* Move sel code to map*/

    XP1REC.XPCCD = AF0LW01.AF0LWSPC; /* Restore orig XP1REC field*/

  end

  if (AF0LM001.AF0LMHC2 == "?") /* Pop-up window requested*/

    AF0LW01.AF0LWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0LM001.AF0LMHC2; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end

    AF0LM001.AF0LMHC2 = XP1REC.XPCCD; /* Move sel code to map*/

    XP1REC.XPCCD = AF0LW01.AF0LWSPC; /* Restore orig XP1REC field*/

  end

  if (AF0LM001.AF0LMHC3 == "?") /* Pop-up window requested*/

    AF0LW01.AF0LWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0LM001.AF0LMHC3; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPC(); /* Pop-up window func requested*/

    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end

    AF0LM001.AF0LMHC3 = XP1REC.XPCCD; /* Move sel code to map*/

    XP1REC.XPCCD = AF0LW01.AF0LWSPC; /* Restore orig XP1REC field*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XSUCD **/
   /* *=====================================**/


  if (AF0LM001.AF0LMHSC == "?") /* Pop-up window requested*/

    AF0LW01.AF0LWSSL = XP1REC.XSUCD; /* Save orig XP1REC field*/
    XP1REC.XSUCD = AF0LM001.AF0LMHSC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSU(); /* Pop-up window func requested*/

    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    end

    AF0LM001.AF0LMHSC = XP1REC.XSUCD; /* Move selected code to map*/

    XP1REC.XSUCD = AF0LW01.AF0LWSSL; /* Restore orig XP1REC fld*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XOWCD **/
   /* *=====================================**/


  if (AF0LM001.AF0LMHOG == "?") /* Pop-up window requested*/

    AF0LW01.XOWCD = XP1REC.XOWCD; /* Save orig XP1REC field*/
    XP1REC.XOWCD = AF0LM001.AF0LMHOG; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Display whse 51 only*/

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
      XP1REC.XOWABRV = " ";
      XP1REC.XOWDESC = " ";
    end

    AF0LM001.AF0LMHOG = XP1REC.XOWCD; /* Move selected code to map*/

    XP1REC.XOWCD = AF0LW01.XOWCD; /* Restore orig XP1REC fld*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XSECD * Season cd 1*/
   /* *=====================================**/

  if (AF0LM001.AF0LMHS1 == "?") /* Pop-up window requested*/

    AF0LW01.AF0LWSSC = XP1REC.XSECD; /* Save orig XP1REC field*/
    XP1REC.XSECD = AF0LM001.AF0LMHS1; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    end

    AF0LM001.AF0LMHS1 = XP1REC.XSECD; /* Move selected code to map*/

    XP1REC.XSECD = AF0LW01.AF0LWSSC; /* Restore orig XP1REC field*/

  end



   /* *=====================================**/
   /* *  Pop-up Window for Historical XSECD * Season cd 2*/
   /* *=====================================**/

  if (AF0LM001.AF0LMHS2 == "?") /* Pop-up window requested*/

    AF0LW01.AF0LWSSC = XP1REC.XSECD; /* Save orig XP1REC field*/
    XP1REC.XSECD = AF0LM001.AF0LMHS2; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    end

    AF0LM001.AF0LMHS2 = XP1REC.XSECD; /* Move selected code to map*/
    AF0LW01.AF0LWHS2 = XP1REC.XSECD; /* Save to wk area*/

    XP1REC.XSECD = AF0LW01.AF0LWSSC; /* Restore orig XP1REC field*/

  end



   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/


  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0LW01.AF0LWPND = "Y"; /* Activate pop-up window ind*/

  exit stack; /* Exit to redisplay map*/



end // end AF0L140

// Verify the entered data
Function AF0L150()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf10 /* Shift left request*/
   || converseVar.eventKey is pf11) /* or Shift right request*/

    AF0L151(); /* Verify scroll request*/

    if (converseVar.validationMsgNum != 0) /* Errors found*/

      exit stack; /* then exit to redisplay map*/

    end

  else

    AF0L152(); /* Verify selection criteria*/

  end



  if (converseVar.validationMsgNum != 0) /* Errors found*/

    /* SET AF0LM001.AF0LMP05 AUTOSKIP,DARK; Dark,prot PF5  prompt*/
    /* SET AF0LM001.AF0LMSC5 AUTOSKIP,DARK; Dark,prot Sn-yr prompt*/
    /* SET AF0LM001.AF0LMP06 AUTOSKIP,DARK; Dark,prot PF6  prompt*/
    /* SET AF0LM001.AF0LMSC6 AUTOSKIP,DARK; Dark,prot Sn-yr prompt*/
    set AF0LM001.AF0LMP10 skip, invisible; /* Dark,prot PF10 prompt*/
    set AF0LM001.AF0LMP11 skip, invisible; /* Dark,prot PF11 prompt*/

    exit stack; /* Exit to redisplay map*/

  else

    if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/

      exit stack; /* Exit to obtain new data*/

    else /* (Selection criteria unchanged)*/

      if (converseVar.eventKey is enter) /* Enter key pressed*/

        AF0L153(); /* Verify any changed dtl data*/

      end

    end

  end



end // end AF0L150

// Verify scroll request
Function AF0L151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to shift left or right as requested*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf10 /* Shift left request*/
   && AF0LW01.AF0LWPGV <= 1)       /* and no previous pages*/

    if (AF0LW02.AF0LWIDX > 30) /* Data for more than 1 page*/
      set AF0LM001.AF0LMP10 skip, invisible; /* PF10(Shift Left)  Prompt*/
      set AF0LM001.AF0LMP11 initialAttributes; /* PF11(Shift Right) prompt*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      converseLib.validationFailed(2); /* No previous page to display*/
    else
      set AF0LM001.AF0LMP10 skip, invisible; /* PF10(Shift Left)  Prompt*/
      set AF0LM001.AF0LMP11 skip, invisible; /* PF11(Shift Right) prompt*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      converseLib.validationFailed(4); /* Invalid key pressed*/
    end

    AF0LW01.AF0LWPGV = 1; /* Default to first page*/

  end


  if (converseVar.eventKey is pf11 /* Shift right request*/
   && AF0LW01.AF0LWPGV >= 2)       /* and no previous pages*/

    if (AF0LW02.AF0LWIDX > 30) /* Data for more than 1 page*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      converseLib.validationFailed(3); /* No more pages to display*/
      set AF0LM001.AF0LMP10 initialAttributes; /* PF10(Shift Left) Prompt*/
      set AF0LM001.AF0LMP11 skip, invisible; /* Prot,dark PF11 prompt*/
    else
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      converseLib.validationFailed(4); /* Invalid key pressed*/
    end

    AF0LW01.AF0LWPGV = 2; /* Default to second page*/

  end


  if (converseVar.eventKey is pf11 /* Shift right request*/
   && AF0LW02.AF0LWIDX <= 30)      /* and Data for only one page*/

    set AF0LM001.AF0LMP10 skip, invisible; /* PF10(Shift Left)  Prompt*/
    set AF0LM001.AF0LMP11 skip, invisible; /* PF11(Shift Right) prompt*/
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    converseLib.validationFailed(4); /* Invalid key pressed*/

    AF0LW01.AF0LWPGV = 1; /* Default to first page*/

  end



end // end AF0L151

// Edit selection criteria
Function AF0L152()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *****                                                  ******/
     /* -- This process is composed of two(2) major phases:     **/
    /* The first phase processes the selection criteria of the  **/
    /* Historical data requests. The second phase processes the **/
    /* Style/Size data requests.  Both phases, however, share   **/
    /* one error message area (EZEMNO). Since the application   **/
    /* interrogates EZEMNO to determine what kind of processing **/
    /* is necessary, an error in either Historical data editing **/
    /* or Style/Size data editing will prevent  retrieval of    **/
    /* detail data for BOTH, until all errors are rectified.    **/
   /* *************************************************************/


  AFWREC.AFWFIRST = "N"; /* First Pass switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* Initialize msg hold area*/
  AF0LW01.AF0LWMNO = 0; /* Initialize wk msg hold area*/



   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* ** PHASE 1: Process Historical Data Selection Criteria ***/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/


   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/


  if (AF0LW01.AF0LWHDV != AF0LM001.AF0LMHDV    /* Division cd*/
   || AF0LW01.AF0LWHPR != AF0LM001.AF0LMHPR    /* Product type cd*/
   || AF0LW01.AF0LWHGC != AF0LM001.AF0LMHGC    /* Gender/Age cd*/
   || AF0LW01.AF0LWHPL != AF0LM001.AF0LMHPL    /* Product Line cd*/
   || AF0LW01.AF0LWHCC[1] != AF0LM001.AF0LMHC1 /* Cat cd 1*/
   || AF0LW01.AF0LWHCC[2] != AF0LM001.AF0LMHC2 /* Cat cd 2*/
   || AF0LW01.AF0LWHCC[3] != AF0LM001.AF0LMHC3 /* Cat cd 3*/
   || AF0LW01.AF0LWHSC != AF0LM001.AF0LMHSC    /* Silhouette cd*/
   || AF0LW01.AF0LWHST != AF0LM001.AF0LMHST    /* Style no.*/
   || AF0LW01.AF0LWHOG != AF0LM001.AF0LMHOG    /* Owner group*/
   || AF0LW01.AF0LWHS1 != AF0LM001.AF0LMHS1    /* Season cd 1*/
   || AF0LW01.AF0LWHY1 != AF0LM001.AF0LMHY1    /* Season yr 1*/
   || AF0LW01.AF0LWDX1 != AF0LM001.AF0LMHD1    /* As of Date 1*/
   || AF0LW01.AF0LWHS2 != AF0LM001.AF0LMHS2    /* Season cd 2*/
   || AF0LW01.AF0LWHY2 != AF0LM001.AF0LMHY2    /* Season yr 2*/
   || AF0LW01.AF0LWDX2 != AF0LM001.AF0LMHD2)   /* As of Date 2*/

    AF0LW01.AF0LWHAC = "Y"; /* Indicate hist pending actvty*/

  else

    AF0LW01.AF0LWHFL = "N"; /* Hist Data Sel sw to 'OFF'*/

    if (converseVar.eventKey not pf10 /* PF10 key not pressed*/
     && converseVar.eventKey not pf11) /* PF11 key not pressed*/
      AF0LW01.AF0LWHAC = " "; /* Reset hist pending actvty ind*/
    end

  end



   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/

  if (AF0LW01.AF0LWHFL == "Y" /* New criteria entered*/
   && converseVar.eventKey not enter) /* Enter key not pressed*/

    converseLib.validationFailed(4); /* Request not permitted*/
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end



   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/
   /* *==> These routines perform standalone edit checks on the*/
    /* selection criteria entered. Relational edit checks will be*/
    /* done when all standalone edit errors have been resolved.*/

  AF0LS14(); /* Obtain As-of-Date XREF record*/
  AF0LS15(); /* Edit historical as-of-date 2*/
  AF0LS17(); /* Edit historical season yr 2*/
  AF0LS18(); /* Edit historical season cd 2*/
  AF0LS19(); /* Edit historical as-of-date 1*/
  AF0LS20(); /* Edit historical season yr 1*/
  AF0LS21(); /* Edit historical season cd 1*/
  AF0LS41(); /* Edit historical owner group cd*/
  AF0LS22(); /* Edit historical style no.*/
  AF0LS23(); /* Edit historical silhouette cd*/
  AF0LS24(); /* Edit historical category cd*/
  AF0LS35(); /* Edit historical product line cd*/
  AF0LS25(); /* Edit historical gender/age cd*/
  AF0LS36(); /* Edit historical product type cd*/
  AF0LS37(); /* Edit historical division cd*/



   /* *================================**/
   /* * Perform Relational Edit Checks **/
   /* *================================**/

  if (XP1REC.XP1MNO == 0) /* No historical edit errors*/
    AF0LS26(); /* Relational edit checks*/
  end



   /* *==============================**/
   /* * Save Historical Edit Message **/
   /* *==============================**/

  AF0LW01.AF0LWMNO = XP1REC.XP1MNO; /* Save hist edit message*/
  XP1REC.XP1MNO = 0; /* Reset message area*/


   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
      /* ** PHASE 2: Process Style/Size Selection Criteria ***/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/


   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/


  if (XP1REC.XLCCD[1] != AF0LM001.XLCCD[1] /* Start Life cycle cd 1*/
   || XP1REC.XLCCD[2] != AF0LM001.XLCCD[2] /* Start Life cycle cd 2*/
   || XP1REC.XLCCD[3] != AF0LM001.XLCCD[3] /* Start Life cycle cd 3*/
   || XP1REC.XLCCD[4] != AF0LM001.XLCCD[4] /* Start Life cycle cd 4*/
                                           
   || XP1REC.XSUCD != AF0LM001.XSUCD       /* Start SIL cd*/
   || AF0LM001.XSUCD == " "                /* Start SIL cd spaced out*/
                                           
   || XP1REC.XPCCD != AF0LM001.XPCCD       /* Start CAT cd*/
   || AF0LM001.XPCCD == " "                /* Start CAT cd spaced out*/
                                           
   || XP1REC.XDVCD != AF0LM001.XDVCD       /* Start DIV cd*/
   || AF0LM001.XDVCD == " "                /* Start DIV cd spaced out*/
                                           
   || XP1REC.XPLCD != AF0LM001.XPLCD       /* Start PR LIN cd*/
   || AF0LM001.XPLCD == " "                /* Start PR LIN cd spaced out*/
                                           
   || XP1REC.XOWCD != AF0LM001.XOWCD       /* Start Owg cd*/
   || AF0LM001.XOWCD == " "                /* Start Owg cd spaced out*/
                                           
   || XP1REC.XGACD != AF0LM001.XGACD       /* Start G/A cd*/
   || AF0LM001.XGACD == " "                /* Start G/A cd spaced out*/
                                           
   || XP1REC.XSNYR != AF0LM001.XSNYR       /* Season yr*/
   || AF0LM001.XSNYR == 0                  /* Map fld zeroed out*/
                                           
   || XP1REC.XSECD != AF0LM001.XSECD       /* Season cd*/
   || AF0LM001.XSECD == " "                /* Map fld spaced out*/
                                           
   || AF0LW01.AF0LWFCT != AF0LM001.PG1FCTCD) /* Forecaster cd*/

    AFWREC.AFWSWR = "Y"; /* New criteria entered*/

  end



   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/

  if (AFWREC.AFWSWR == "Y" /* New keys entered*/
   && converseVar.eventKey not enter) /* Enter key not pressed*/

    converseLib.validationFailed(4); /* Request not permitted*/
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end




   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/


  AF0LS40(); /* Edit life cycle cd*/
  AF0LS28(); /* Edit silhouette cd*/
  AF0LS29(); /* Edit category cd*/
  AF0LS38(); /* Edit division cd*/
  AF0LS39(); /* Edit product line cd*/
  AF0LS42(); /* Edit owner group cd*/
  AF0LS30(); /* Edit gender/age cd*/
  AF0LS31(); /* Edit season yr*/
  AF0LS32(); /* Edit season cd*/
  AF0LS33(); /* Edit forecaster cd*/



   /* *=================================**/
   /* *  Check Validation Error Status  **/
   /* *=================================**/


  if (AF0LW01.AF0LWMNO != 0) /* Historical Data has errors*/

    if (AF0LW01.AF0LWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AF0LW01.AF0LWMNO);
    end /* Set message for display*/
    AF0LW01.AF0LWHFL = "N"; /* Do not select new data*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 30) /* Protect/darken map display*/
      set AF0LM001.AF0LMHPA[AFWIDX5] skip, invisible; /* Size pcent A*/
      set AF0LM001.AF0LMHPB[AFWIDX5] skip, invisible; /* Size pcent B*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    set AF0LM001.AF0LMHP1 skip, invisible; /* Size Hist pcent hdg 1*/
    set AF0LM001.AF0LMHP2 skip, invisible; /* Size Hist pcent hdg 2*/
    set AF0LM001.AF0LMHP3 skip, invisible; /* Size Hist pcent hdg 3*/
    set AF0LM001.AF0LMHP4 skip, invisible; /* Size Hist pcent hdg 4*/
    set AF0LM001.AF0LMHP5 skip, invisible; /* Size Hist pcent hdg 5*/
    set AF0LM001.AF0LMHP6 skip, invisible; /* Size Hist pcent hdg 6*/
    set AF0LM001.AF0LMP05 skip, invisible; /* PF05 prompt*/
    set AF0LM001.AF0LMSC5 skip, invisible; /* Seas-Yr prompt*/
    set AF0LM001.AF0LMP06 skip, invisible; /* PF06 prompt*/
    set AF0LM001.AF0LMSC6 skip, invisible; /* Seas-Yr prompt*/

  end


  if (XP1REC.XP1MNO != 0) /* Style/Size error present*/

    XP1REC.XXXUSER = " "; /* Clear selection flds*/
    XP1REC.XSECD = " "; /* Clear selection flds*/
    XP1REC.XSNYR = 0; /* Clear selection flds*/
    XP1REC.XGACD = " "; /* Clear selection flds*/
    XP1REC.XPLCD = " "; /* Clear selection flds*/
    XP1REC.XPCCD = " "; /* Clear selection flds*/
    XP1REC.XSUCD = " "; /* Clear selection flds*/
    XP1REC.XDVCD = " "; /* Clear selection flds*/
    XP1REC.XOWCD = " "; /* Clear selection flds*/
    XP1REC.XLCCD[1] = " "; /* Clear selection flds*/
    XP1REC.XLCCD[2] = " "; /* Clear selection flds*/
    XP1REC.XLCCD[3] = " "; /* Clear selection flds*/
    XP1REC.XLCCD[4] = " "; /* Clear selection flds*/

    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 30) /* Protect/darken map display*/
      set AF0LM001.AF0LMSZD[AFWIDX5] skip, invisible; /* Size desc*/
      set AF0LM001.AF0LMSZP[AFWIDX5] skip, invisible; /* Size pcents*/
      set AF0LM001.AF0LMHPA[AFWIDX5] skip, invisible; /* Size pcent A*/
      set AF0LM001.AF0LMHPB[AFWIDX5] skip, invisible; /* Size pcent B*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    set AF0LM001.AF0LMHP1 skip, invisible; /* Size Hist pcent hdg 1*/
    set AF0LM001.AF0LMHP2 skip, invisible; /* Size Hist pcent hdg 2*/
    set AF0LM001.AF0LMHP3 skip, invisible; /* Size Hist pcent hdg 3*/
    set AF0LM001.AF0LMHP4 skip, invisible; /* Size Hist pcent hdg 4*/
    set AF0LM001.AF0LMHP5 skip, invisible; /* Size Hist pcent hdg 5*/
    set AF0LM001.AF0LMHP6 skip, invisible; /* Size Hist pcent hdg 6*/
    set AF0LM001.AF0LMP05 skip, invisible; /* PF05 prompt*/
    set AF0LM001.AF0LMSC5 skip, invisible; /* Seas-Yr prompt*/
    set AF0LM001.AF0LMP06 skip, invisible; /* PF06 prompt*/
    set AF0LM001.AF0LMSC6 skip, invisible; /* Seas-Yr prompt*/

    AF0LM001.AF0LMSPC = 0; /* Clear color pcent total*/

  end



end // end AF0L152

// Verify Map Dtl Data
Function AF0L153()
   /* ------------------------------------------------------------*/
   /* Edit Map Detail Lines: Note that validation of map items*/
     /* is on a page-by-page basis. This ensures that all items*/
     /* are valid before any scrolling command is processed.*/
   /* ------------------------------------------------------------*/


  if (AF0LW02.AF0LWIDX == 0) /* No color records exist*/

    return; /* Return to calling process*/

  end


   /* *================================**/
   /* *  Assign Array Start Addresses  **/
   /* *================================**/

  AFWREC.AFWIXM = 1; /* set display index*/

  if (AF0LW01.AF0LWPGV == 1) /* Display in page one*/
    AFWREC.AFWIDX4 = 1; /* Set start address(1-30 Elems)*/
  else
    AFWREC.AFWIDX4 = 31; /* Set start address(31-40 Elems)*/
  end


   /* *===============================**/
   /* *  Store/Validate Changed Data  **/
   /* *===============================**/

  while (AFWREC.AFWIXM <= 30) /* Process whole page*/

    if (AF0LW02.AF0LWVCS[AFWIDX4] != " ") /* Current size*/
                        /* (Size Pcent)*/
      if (AF0LM001.AF0LMSZP[AFWIXM] != AF0LW02.AF0LWSZP[AFWIDX4])
        AF0LW02.AF0LWSZP[AFWIDX4] = AF0LM001.AF0LMSZP[AFWIXM];
        AF0LW02.AF0LWCHG = "Y"; /* Changes entered*/
      end

    end

    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Get next wk array elem*/

    if (AFWREC.AFWIDX4 > AF0LW02.AF0LWIDX) /* Max array elem reached*/
      AFWREC.AFWIXM = +99; /* Terminate loop*/
    end

  end



end // end AF0L153

// Process Valid Request
Function AF0L160()

   /* *==========================**/
   /* *  'ENTER' Key Processing  **/
   /* *==========================**/

  if (converseVar.eventKey is enter) /* enter key pressed*/

    if (AFWREC.AFWSWR == "Y") /* new data requested*/
      return; /* Execute next process*/
    else

      if (AF0LW02.AF0LWCHG == "Y") /* With updates*/

        if (AF0LW01.AF0LWHAC == "Y") /* Historical activity pending*/
          AFWREC.AFWPRCSN = "160 "; /* Process number*/
          AFWREC.AFWNMO = 62; /* Indicate pending activity*/
          return; /* Execute next process*/
        end

           /* (Check Size Pcent Totals)*/

        AFWREC.AFWIDX4 = 1; /* Set Loop index*/
        AF0LW01.AF0LWCPT = 0; /* Reset accumulator*/

        while (AFWREC.AFWIDX4 <= AF0LW02.AF0LWIDX) /* LE Max Size Recs*/
          AF0LW01.AF0LWCPT = AF0LW01.AF0LWCPT + AF0LW02.AF0LWSZP[AFWIDX4];
          AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
        end

        AF0LM001.AF0LMSPC = AF0LW01.AF0LWCPT; /* Total size pcents*/

        if (AF0LW01.AF0LWCPT == 0) /* Pcent equal 0*/
          AF0LW02.AF0LWCHG = "N"; /* Deactivate valid changes flag*/
          return; /* Execute next process*/
        end

        if (AF0LW01.AF0LWCPT != 100.00) /* Pcent not equal 100*/
          AFWREC.AFWPRCSN = "160 "; /* Process number*/
          converseLib.validationFailed(40); /* Indicate not equal 100*/
          set AF0LM001.AF0LMSPC skip, bold; /* Highlight fld*/
          set AF0LM001.AF0LMP10 skip, invisible; /* Darken fld*/
          set AF0LM001.AF0LMP11 skip, invisible; /* Darken fld*/
          return; /* Execute next process*/
        end

        if (AF0LW01.AF0LWCPT == 100.00) /* Pcent equal 100*/
          AF0L162(); /* determine region*/
          AF0L161(); /* Submit Batch Update Job*/
          return; /* Execute next process*/
        end

      end

    end

  end

   /* *========================**/
   /* * 'PF5'  Key Processing  **/
   /* *========================**/

  if (converseVar.eventKey is pf5) /* Copy history 1 requested*/

    if (AF0LW01.AF0LWPF5 == "Y")
      AFWREC.AFWIDX4 = 1; /* Set Loop index*/

      while (AFWREC.AFWIDX4 <= AF0LW02.AF0LWIDX) /* LE Max Size Recs*/
        AF0LW02.AF0LWSZP[AFWIDX4] = AF0LM001.AF0LMHPA[AFWIDX4];
        AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
      end

      AF0LW02.AF0LWCHG = "Y"; /* Update switch*/
    else
      AFWREC.AFWPRCSN = "160 "; /* Process number*/
      converseLib.validationFailed(4); /* Invalid PF key*/
    end

    return;

  end

   /* *========================**/
   /* * 'PF6'  Key Processing  **/
   /* *========================**/

  if (converseVar.eventKey is pf6) /* Copy history 2 requested*/

    if (AF0LW01.AF0LWPF6 == "Y")
      AFWREC.AFWIDX4 = 1; /* Set Loop index*/

      while (AFWREC.AFWIDX4 <= AF0LW02.AF0LWIDX) /* LE Max Size Recs*/
        AF0LW02.AF0LWSZP[AFWIDX4] = AF0LM001.AF0LMHPB[AFWIDX4];
        AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
      end

      AF0LW02.AF0LWCHG = "Y"; /* Update switch*/
      converseLib.validationFailed(42); /* Press ENTER to update*/
    else
      AFWREC.AFWPRCSN = "160 "; /* Process number*/
    end

    return;

  end

   /* *========================**/
   /* * 'PF10' Key Processing  **/
   /* *========================**/

  if (converseVar.eventKey is pf10) /* Shift left requested*/
    AF0LW01.AF0LWPGV = AF0LW01.AF0LWPGV - 1; /* Back one page*/
    return; /* Execute next process*/
  end

   /* *========================**/
   /* * 'PF11' Key Processing  **/
   /* *========================**/

  if (converseVar.eventKey is pf11) /* Shift right requested*/
    AF0LW01.AF0LWPGV = AF0LW01.AF0LWPGV + 1; /* Fwd one page*/
    return; /* Execute next process*/
  end



end // end AF0L160

// Prepare jobstream to submit
Function AF0L161()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  AFWREC.AFWIDX1 = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  AF0LW01.AF0LWLCT = 1; /* Initialize parameter count*/

  if (TA3REC.TA3RGNID == "03") /* PRODUCTION region*/
    AFWREC.AFWIDX1 = 1; /* point to PROD JCL*/
  else
    if ("/*EOF" in AF0LT02.TARJCL) /* find end of PROD JCL*/
      AFWREC.AFWIDX1 = sysVar.arrayIndex;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* point to TEST JCL*/
    else
      AFWREC.AFWIDX1 = 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (AFWREC.AFWIDX1 > 0) /* Until end of table*/

    if (AF0LT02.TARTYPE[AFWIDX1] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the color breakout for submission*/
      /* ------------------------------------------------------------*/

      set AF0LW04 empty; /* Reset parameters work area*/
      set AF0LW05 empty; /* Reset parameters work area*/

      AF0LW04.AF0LWRT = AF0LW01.AF0LWLCT; /* Record type*/
      AF0LW04.XSECD = XP1REC.XSECD; /* Season cd*/
      AF0LW04.AF0LWXSN = XP1REC.XSNYR; /* Season yr*/
      AF0LW04.XGACD = XP1REC.XGACD; /* Season yr*/
      AF0LW04.XPLCD = XP1REC.XPLCD; /* Product line cd*/
      AF0LW04.XPCCD = XP1REC.XPCCD; /* Category cd*/
      AF0LW04.XSUCD = XP1REC.XSUCD; /* Silhouette cd*/
      AF0LW04.XDVCD = XP1REC.XDVCD; /* Division cd*/
      AF0LW04.XOWCD = XP1REC.XOWCD; /* Owner group cd*/
      AF0LW04.XLCCD[1] = XP1REC.XLCCD[1]; /* Life cycle cd 1*/
      AF0LW04.XLCCD[2] = XP1REC.XLCCD[2]; /* Life cycle cd 2*/
      AF0LW04.XLCCD[3] = XP1REC.XLCCD[3]; /* Life cycle cd 3*/
      AF0LW04.XLCCD[4] = XP1REC.XLCCD[4]; /* Life cycle cd 4*/
      AF0LW04.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
      AF0LW04.XXXSTAT = XP1REC.XXXSTAT; /* Status cd*/

      if (AF0LW01.AF0LWLCT == 1) /* Record type 1*/

               /* (Move 1st 10 size elements)*/

        AFWREC.AFWIDX2 = 1; /* Reset loop index*/
        while (AFWREC.AFWIDX2 <= AF0LW02.AF0LWIDX) /* Process valid sizes*/

          if (AF0LW02.AF0LWVCS[AFWIDX2] != " ") /* Current size*/

            AFWREC.AFWIDX3 = AF0LW02.AF0LWSZI[AFWIDX2]; /* Wk index*/

            if (AFWREC.AFWIDX3 > 0 /* Valid size*/
             && AFWREC.AFWIDX3 <= 10) /* Size 1 - 10 only*/

              AF0LW04.AF0LWPSZ[AFWIDX3] = AF0LW02.AF0LWSZP[AFWIDX2];
              AF0LW04.AF0LWDSZ[AFWIDX3] = AF0LW02.AF0LWSZI[AFWIDX2];

            end

          end

          AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/

        end

        AF0LT02.TARJCL[AFWIDX1] = AF0LW04.AF0LWJCL;

      end


      if (AF0LW01.AF0LWLCT == 2) /* Record type 2*/

               /* (Move 2nd 10 size elements)*/

        AFWREC.AFWIDX2 = 1; /* Reset loop index*/
        while (AFWREC.AFWIDX2 <= AF0LW02.AF0LWIDX) /* Process valid sizes*/

          if (AF0LW02.AF0LWVCS[AFWIDX2] != " ") /* Current size*/

            AFWREC.AFWIDX3 = AF0LW02.AF0LWSZI[AFWIDX2]; /* Wk index*/

            if (AFWREC.AFWIDX3 > 0   /* Valid size*/
             && AFWREC.AFWIDX3 >= 11 /* Size 11 - up only*/
             && AFWREC.AFWIDX3 <= 40) /* Size 40 - down only*/

              AF0LW04.AF0LWPSZ[AFWIDX3] = AF0LW02.AF0LWSZP[AFWIDX2];
              AF0LW04.AF0LWDSZ[AFWIDX3] = AF0LW02.AF0LWSZI[AFWIDX2];

            end

          end

          AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/

        end

        AF0LT02.TARJCL[AFWIDX1] = AF0LW04.AF0LWJCL;

      end


      if (AF0LW01.AF0LWLCT == 3) /* Record type 3*/

        AF0LW05.AF0LWRT = AF0LW01.AF0LWLCT; /* Record type*/
        AF0LW05.XSECD = XP1REC.XSECD; /* Season cd*/
        AF0LW05.AF0LWXSN = XP1REC.XSNYR; /* Season yr*/
        AF0LW05.XDVCD = XP1REC.XDVCD; /* Division cd*/
        AF0LW05.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
        AF0LW05.XPLCD = XP1REC.XPLCD; /* Product Line cd*/
        AF0LW05.XPCCD = XP1REC.XPCCD; /* Category cd*/
        AF0LW05.XSUCD = XP1REC.XSUCD; /* Silhouette cd*/
        AF0LW05.XOWCD = XP1REC.XOWCD; /* Owner group cd*/
        AF0LW05.XLCCD[1] = XP1REC.XLCCD[1]; /* Life cycle cd 1*/
        AF0LW05.XLCCD[2] = XP1REC.XLCCD[2]; /* Life cycle cd 2*/
        AF0LW05.XLCCD[3] = XP1REC.XLCCD[3]; /* Life cycle cd 3*/
        AF0LW05.XLCCD[4] = XP1REC.XLCCD[4]; /* Life cycle cd 4*/
        AF0LW05.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
        AF0LW05.XXXSTAT = XP1REC.XXXSTAT; /* Status cd*/

                /* (Format Historical Selection Fields)*/
        AF0LW05.AF0LWHDV = AF0LW01.AF0LWHDV; /* Hist DIV cd*/
        AF0LW05.AF0LWHPR = AF0LW01.AF0LWHPR; /* Hist PR TYP cd*/
        AF0LW05.AF0LWHGC = AF0LW01.AF0LWHGC; /* Hist G/A cd*/
        AF0LW05.AF0LWHPL = AF0LW01.AF0LWHPL; /* Hist PR LIN cd*/
        AF0LW05.AF0LWHCC[1] = AF0LW01.AF0LWHCC[1]; /* Hist CAT 1*/
        AF0LW05.AF0LWHCC[2] = AF0LW01.AF0LWHCC[2]; /* Hist CAT 2*/
        AF0LW05.AF0LWHCC[3] = AF0LW01.AF0LWHCC[3]; /* Hist CAT 3*/
        AF0LW05.AF0LWHSC = AF0LW01.AF0LWHSC; /* Hist SILH cd*/
        AF0LW05.AF0LWHOG = AF0LW01.AF0LWHOG; /* Hist Owg cd*/
        AF0LW05.AF0LWHST = AF0LW01.AF0LWHST; /* Hist Style*/
        AF0LW05.AF0LWHS1 = AF0LW01.AF0LWHS1; /* Hist Season cd 1*/
        AF0LW05.AF0LWHY1 = AF0LW01.AF0LWHY1; /* Hist Season yr 1*/
          /* MOVE AF0LW01.AF0LWDX1 TO AF0LW01.AF0LWEDW; Reformat Date*/
          /* MOVE AF0LW01.AF0LWEDM TO AF0LW01.AF0LWDTM; Month*/
          /* MOVE AF0LW01.AF0LWEDD TO AF0LW01.AF0LWDTD; Day*/
          /* MOVE AF0LW01.AF0LWEDY TO AF0LW01.AF0LWDTY; Year*/
          /* MOVE AF0LW01.AF0LWHC1 TO AF0LW01.AF0LWDTC; Century*/
        AF0LW05.AF0LWHA1 = AF0LW01.AF0LWHD1; /* Hist As of Date 1*/
        AF0LW05.AF0LWHS2 = AF0LW01.AF0LWHS2; /* Hist Season cd 2*/
        AF0LW05.AF0LWHY2 = AF0LW01.AF0LWHY2; /* Hist Season yr 2*/
          /* MOVE AF0LW01.AF0LWDX2 TO AF0LW01.AF0LWEDW; Reformat Date*/
          /* MOVE AF0LW01.AF0LWEDM TO AF0LW01.AF0LWDTM; Month*/
          /* MOVE AF0LW01.AF0LWEDD TO AF0LW01.AF0LWDTD; Day*/
          /* MOVE AF0LW01.AF0LWEDY TO AF0LW01.AF0LWDTY; Year*/
          /* MOVE AF0LW01.AF0LWHC2 TO AF0LW01.AF0LWDTC; Century*/
        AF0LW05.AF0LWHA2 = AF0LW01.AF0LWHD2; /* Hist As of Date 2*/


        AF0LT02.TARJCL[AFWIDX1] = AF0LW05.AF0LWJCL;
        AF0LW01.AF0LWLCT = 0;

      end

      AF0LW01.AF0LWLCT = AF0LW01.AF0LWLCT + 1; /* Add to param count*/

    end


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = AF0LT02.TARJCL[AFWIDX1]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AF0LT02.TARTYPE[AFWIDX1]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AF0LT02.TARJCL[AFWIDX1] == "/*EOF") /* End of table*/
      AFWREC.AFWIDX1 = 0; /* Indicate end of table*/
    else
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Increment table index*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/


  AF0LS34(); /* Submit JCL/Jobstream for batch run*/


end // end AF0L161

// determine cics region
Function AF0L162()
   /* ------------------------------------------------------------*/
    /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    AFWREC.AFWPRCSN = "161"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    AFWREC.AFWPRCSN = "161"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end



end // end AF0L162

// Obtain Size Scale record
Function AF0LS01()
   /* ------------------------------------------------------------*/
              /* ** Obtain DPROD.VSCALE01 Row ***/
           /* Get Unique Size Scale record from DB.*/
   /* This routine functions in two ways. It could retrieve the*/
   /* size scale specified, or validate the size scale code*/
   /* passed to it.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set SY4REC empty; /* Reset rec work area*/

  SY4REC.SY4SZSCL = PG2REC.SY4SZSCL; /* Size scale cd*/



   /* *====================================**/
   /* *  Obtain Data from DPROD.VSCALE01   **/
   /* *====================================**/

  try
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Size scale found*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100 /* Size scale not found*/
     && AF0LW01.AF0LWVLI == "Y")   /* and Validation request*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S01 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCALE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS01

// Select DACAST.VAFSTY01 rows
Function AF0LS02()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AF2REC empty; /* Reset rec work area*/

  AF2REC.XDVCD = XP1REC.XDVCD; /* XDV cd*/
  AF2REC.XGACD = XP1REC.XGACD; /* XGA cd*/
  AF2REC.XPLCD = XP1REC.XPLCD; /* XPL cd*/
  AF2REC.XPCCD = XP1REC.XPCCD; /* XPC cd*/
  AF2REC.XSUCD = XP1REC.XSUCD; /* XSU cd*/
  AF2REC.AF2FSTST = "*"; /* Forecast status*/
  AF2REC.SY4SZSCL = "**"; /* Size scale*/

  if (XP1REC.XOWCD == " " /* No og specified*/
   || XP1REC.XOWCD == "**")
    AF2REC.XOWCD = "**"; /* Get all og*/
  else
    AF2REC.XOWCD = XP1REC.XOWCD; /* owner group cd*/
  end

  if (AF0LW01.AF0LWFCT == " ") /* No user specified*/
    AF2REC.PG1FCTCD = "**"; /* Get all users*/
  else
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
  end

  AF0LW01.AF0LWXSY = 0; /* Reset xsnyr wk area*/
  AF0LW01.AF0LWXSY = XP1REC.XSNYR; /* Move to wk area*/
  AF0LW01.AF0LWXSY = AF0LW01.AF0LWXSY + 1900; /* Add century*/
  AF2REC.XSNYR = AF0LW01.AF0LWXSY; /* XSE yr*/

  AF2REC.XSECD = XP1REC.XSECD; /* XSE cd*/



   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFSTY01  **/
   /* *====================================**/

  try
    call "IO3510" ("S4", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0LW01.AF0LWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS02

// Process DACAST.VAFSTY01 rows
Function AF0LS03()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until all selected rows*/
     /* have been processed.*/
   /* When a row has been retrieved, the corresponding DPRODG.*/
     /* VSYCLR01 row/s will be retrieved to determine the valid*/
     /* sizes for the style. The sizes will be saved in an*/
     /* internal program array for display.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO3510" ("N4", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
        /* If call sucessful, determine valid sizes*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          /* (Check if all rows for selection criteria processed)*/

      AF0LW01.AF0LWXSY = 0; /* Reset xsnyr wk area*/
      AF0LW01.AF0LWXSY = XP1REC.XSNYR; /* Move to wk area*/
      AF0LW01.AF0LWXSY = AF0LW01.AF0LWXSY + 1900; /* Add century*/

      if (XP1REC.XSECD != AF2REC.XSECD     /* XSECD not equal criteria*/
       || AF0LW01.AF0LWXSY != AF2REC.XSNYR /* XSNYR not equal criteria*/
       || XP1REC.XGACD != AF2REC.XGACD     /* XGACD not equal criteria*/
       || XP1REC.XPCCD != AF2REC.XPCCD     /* XPCCD not equal criteria*/
       || XP1REC.XSUCD != AF2REC.XSUCD)    /* XSUCD not equal criteria*/

        AFWREC.AFWSWC = "Y"; /* End process loop*/

        return; /* Return to calling process*/

      end

      if (XP1REC.PG1FCTCD == " " /* Get all forecasters*/
       || AF2REC.PG1FCTCD == XP1REC.PG1FCTCD) /* Forecaster cd specified*/

        if (AF2REC.AF2FSTST == "A" /* Style status active*/
         || AF2REC.AF2FSTST == "N") /* or style status new*/

          AF0LS04(); /* Determine valid sizes*/

          return; /* Loop through (Row processed)*/

        end

        return; /* Loop through (Row bypassed)*/

      end

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/

        AFWREC.AFWSWC = "Y"; /* End process loop*/

        return; /* Return to calling process*/

      end

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0LW01.AF0LWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S03 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS03

// Store valid sizes
Function AF0LS04()
   /* ------------------------------------------------------------*/
              /* ** Store DPRODG.VSYCLR01 Data ***/
   /* Store all sizes into program wk array for display and*/
     /* possible percentage entry/update.*/
   /* ------------------------------------------------------------*/


   /* *==============================**/
   /* *  Get DPRODG.VSYCLR01 Record  **/
   /* *==============================**/
   /* ===> Since a style/color row retrieved is assumed to have*/
    /* same sizes valid for all colors within the given style,*/
    /* one(1) row successfully retrieved will be enough to*/
    /* satisfy processing requirements.*/


  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  XP1REC.SY1STNBR = AF2REC.SY1STNBR; /* Save Style no.*/
  PG2REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0LD06"; /* Process name*/

  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Abnormal SQLCODE returned*/
    return; /* Get next style*/
  end



   /* *======================================**/
   /* * Store Sizes/qtys into Program Array  **/
   /* *======================================**/

  AF0LS01(); /* obtain size scale descriptions*/

  AFWREC.AFWIDX1 = 1; /* Reset size scale array index*/

  while (AFWREC.AFWIDX1 <= 40) /* Move size/qty to wk area*/

    if (PG2REC.XDVCD[AFWIDX1] == PG2REC.XDVCD1) /* Size valid for style*/
                  /* (Store in Program Array)*/
      AF0LW02.AF0LWSZ[AFWIDX1] = AFWREC.AFWIDX1; /* Store sizeid*/
      AF0LW02.AF0LWSZD[AFWIDX1] = SY4REC.SY4IDDSC[AFWIDX1]; /* Desc*/

    end

    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

  end



end // end AF0LS04

// Close DACAST.VAFSTY01 cursor
Function AF0LS05()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3510" ("C4", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS05

// Process Historical Summary DB
Function AF0LS06()
   /* ------------------------------------------------------------*/
             /* ** Obtain DACAST.VDMANZ01 Rows ***/
   /* Set Select Historical Summary DB (DACAST.VDMANZ01) rows.*/
   /* If valid selection fields found  (Maximum 3 categories and*/
     /* and 2 selections)  Then:*/
    /* - Process all rows selected; Store all row data into map*/
      /* page/s for display.*/
    /* - Close DB cursor.*/
   /* Otherwise return to calling process.*/
   /* ------------------------------------------------------------*/


   /* *======================================**/
   /* *  Set Select Historical Summary Rows  **/
   /* *======================================**/

  AF0LW01.AF0LWVLF = " "; /* Reset valid select indicator*/

  AF0LS07(); /* Set Select DACAST.VDMANZ01 rows*/


   /* *===================================**/
   /* *  Process Historical Summary Rows  **/
   /* *===================================**/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    if (AF0LW01.AF0LWVLF == "1" /* Valid select fields found*/
     || AF0LW01.AF0LWVLF == "2") /* Valid select fields found*/

      AFWREC.AFWSWC = " "; /* Reset EOF switch*/
      while (AFWREC.AFWSWC != "Y") /* Process all retrieved rows*/
        AF0LS08(); /* Process Hist Summary data*/
      end

      if (converseVar.validationMsgNum == 0) /* No errors found*/
        AF0LS09(); /* Close DACAST.VDMANZ01 cursor*/
      end

    end

  end



end // end AF0LS06

// Select Set Hist Summary DB
Function AF0LS07()
   /* ------------------------------------------------------------*/
            /* ** Obtain DACAST.VDMANZ01 ***/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AFHREC empty; /* Reset rec work area*/

  if (AF0LW01.AF0LWHOG == " ")
    AFHREC.XOWCD = "**";
  else
    AFHREC.XOWCD = AF0LW01.AF0LWHOG; /* Owner group cd*/
  end

  AFHREC.XDVCD = AF0LW01.AF0LWHDV; /* Division cd*/
  AFHREC.XPRCD = AF0LW01.AF0LWHPR; /* Product type cd*/
  AFHREC.XGACD = AF0LW01.AF0LWHGC; /* Gender/Age cd*/
  AFHREC.XPLCD = AF0LW01.AF0LWHPL; /* Product line cd*/

  AFHREC.XPCCD = "**"; /* Use as key*/

  AFHREC.XSUCD = AF0LW01.AF0LWHSC; /* Silhouette cd*/
  AFHREC.SY4SZSCL = XP1REC.SY4SZSCL; /* Size scale cd*/


  if (AFWREC.AFWIDX2 == 1) /* First selection in map*/
           /* (Reformat As-Of-Date to Internal Date)*/
    AF0LW01.AF0LWEDW = AF0LW01.AF0LWHD1; /* To ext wk dt area*/
    AF0LW01.AF0LWDTC = 019; /* To int wk Century*/
    AF0LW01.AF0LWDTM = AF0LW01.AF0LWEDM; /* To int wk mm*/
    AF0LW01.AF0LWDTD = AF0LW01.AF0LWEDD; /* To int wk dd*/
    AF0LW01.AF0LWDTY = AF0LW01.AF0LWEDY; /* To int wk yy*/
    AFHREC.AFFASODT = AF0LW01.AF0LWDTW; /* As of date*/

    AFHREC.XSECD = AF0LW01.AF0LWHS1; /* Season cd*/
                 /* (Reformat Season Year)*/
    AF0LW01.AF0LWXSY = 0; /* Reset xsnyr wk area*/
    AF0LW01.AF0LWXSY = AF0LW01.AF0LWHY1; /* Season yr*/
    AF0LW01.AF0LWXSY = AF0LW01.AF0LWXSY + 1900; /* Add century*/
    AFHREC.XSNYR = AF0LW01.AF0LWXSY; /* Season yr*/

    AF0LW01.AF0LWVLF = "1"; /* Indicate sel fld*/

  else
    if (AF0LW01.AF0LWHD2 != 0   /* Valid as of date*/
     && AF0LW01.AF0LWHS2 != " " /* Valid season cd*/
     && AF0LW01.AF0LWHY2 != 0)  /* Valid season yr*/
             /* (Reformat as-of-date to internal date)*/
      AF0LW01.AF0LWEDW = AF0LW01.AF0LWHD2; /* To ext wk dt area*/
      AF0LW01.AF0LWDTC = 019; /* To int wk Century*/
      AF0LW01.AF0LWDTM = AF0LW01.AF0LWEDM; /* To int wk mm*/
      AF0LW01.AF0LWDTD = AF0LW01.AF0LWEDD; /* To int wk dd*/
      AF0LW01.AF0LWDTY = AF0LW01.AF0LWEDY; /* To int wk yy*/
      AFHREC.AFFASODT = AF0LW01.AF0LWDTW; /* As of date*/

      AFHREC.XSECD = AF0LW01.AF0LWHS2; /* Season cd*/
                   /* (Reformat Season Year)*/
      AF0LW01.AF0LWXSY = 0; /* Reset xsnyr wk area*/
      AF0LW01.AF0LWXSY = AF0LW01.AF0LWHY2; /* Season yr*/
      AF0LW01.AF0LWXSY = AF0LW01.AF0LWXSY + 1900; /* Add century*/
      AFHREC.XSNYR = AF0LW01.AF0LWXSY; /* Season yr*/

      AF0LW01.AF0LWVLF = "2"; /* Indicate sel fld*/

    else

      AF0LW01.AF0LWVLF = "N"; /* Indicate invalid sel fld*/
      return; /* Return to calling process*/

    end

  end


   /* *====================================**/
   /* *  Obtain Data from DACAST.VDMANZ01  **/
   /* *====================================**/

  try
    call "IO4210" ("S1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AF0LW01.AF0LWVLF = "N"; /* Indicate invalid cat cd*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S07 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS07

// Process Hist Summary rows
Function AF0LS08()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* Store Historical Summary data; If size not yet in save*/
     /* array, then create size, otherwise, accumulate.*/
     /* Maintain overall qty totals.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO4210" ("N1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
   /* If call successful, store historical summary data*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (AFHREC.XPCCD != AF0LW01.AF0LWHCC[1]
       && AFHREC.XPCCD != AF0LW01.AF0LWHCC[2]
       && AFHREC.XPCCD != AF0LW01.AF0LWHCC[3])

        return; /* Return to calling process*/

      else

        AF0LW03.AF0LWTOT = 0; /* Clear wk qty totals fld*/
        AF0LW03.AF0LWTOT = AF0LW03.AF0LWTOT + AFHREC.AFGSOT1Q; /* Add Qty1*/
        AF0LW03.AF0LWTOT = AF0LW03.AF0LWTOT + AFHREC.AFGSOT2Q; /* Add Qty2*/
        AF0LW03.AF0LWTOT = AF0LW03.AF0LWTOT + AFHREC.AFGSOT3Q; /* Add Qty3*/
        AF0LW03.AF0LWTOT = AF0LW03.AF0LWTOT + AFHREC.AFGSOT4Q; /* Add Qty4*/
        AF0LW03.AF0LWTOT = AF0LW03.AF0LWTOT + AFHREC.AFGSOT5Q; /* Add Qty5*/

        if (AF0LW01.AF0LWVLF == "1") /* Selection Field 1 specified*/

          AF0LW03.AF0LWHT1 = AF0LW03.AF0LWHT1 + AF0LW03.AF0LWTOT; /* Sum*/

          AFWREC.AFWIDX5 = AFHREC.SY5SZID; /* Get size ptr*/
          AF0LW03.AF0LWSW1[AFWIDX5] = "S"; /* Size selected*/
          AF0LW03.AF0LWT1 = AF0LW03.AF0LWQW1[AFWIDX5]; /* Move to wk*/
          AF0LW03.AF0LWT1 = AF0LW03.AF0LWT1 + AF0LW03.AF0LWTOT; /* Accum*/
          AF0LW03.AF0LWQW1[AFWIDX5] = AF0LW03.AF0LWT1; /* Move back*/

        else

          if (AF0LW01.AF0LWVLF == "2") /* Selection Field 2 specified*/

            AF0LW03.AF0LWHT2 = AF0LW03.AF0LWHT2 + AF0LW03.AF0LWTOT; /* Sum*/

            AFWREC.AFWIDX5 = AFHREC.SY5SZID; /* Get size ptr*/
            AF0LW03.AF0LWSW2[AFWIDX5] = "S"; /* Size selected*/
            AF0LW03.AF0LWT1 = AF0LW03.AF0LWQW2[AFWIDX5];
                                   /* Move to wk*/
            AF0LW03.AF0LWT1 = AF0LW03.AF0LWT1 + AF0LW03.AF0LWTOT; /* Accum*/
            AF0LW03.AF0LWQW2[AFWIDX5] = AF0LW03.AF0LWT1; /* Move back*/

          else

            AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
            return; /* Return to calling process*/

          end

        end

      end

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/
    end


  end



   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWSWC = "Y"; /* Force end of data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S08 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS08

// Close Hist Summary cursor
Function AF0LS09()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4210" ("C1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS09

// Process Historical Detail DB
Function AF0LS10()
   /* ------------------------------------------------------------*/
             /* ** Obtain DACAST.VDMANY01 Rows ***/
   /* Set Select Historical Detail DB (DACAST.VDMANY01) rows.*/
   /* If valid selection fields found  (Maximum 3 categories and*/
     /* and 2 selections)  Then:*/
    /* - Process all rows selected; Store all row data into map*/
      /* page/s for display.*/
    /* - Close DB cursor.*/
   /* Otherwise return to calling process.*/
   /* ------------------------------------------------------------*/


   /* *=====================================**/
   /* *  Set Select Historical Detail Rows  **/
   /* *=====================================**/

  AF0LW01.AF0LWVLF = " "; /* Reset valid select indicator*/

  AF0LS11(); /* Set Select DACAST.VDMANY01 rows*/


   /* *==================================**/
   /* *  Process Historical Detail Rows  **/
   /* *==================================**/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    if (AF0LW01.AF0LWVLF == "1" /* Valid select fields found*/
     || AF0LW01.AF0LWVLF == "2") /* Valid select fields found*/

      AFWREC.AFWSWC = " "; /* Reset EOF switch*/
      while (AFWREC.AFWSWC != "Y") /* Process all retrieved rows*/
        AF0LS12(); /* Process Hist Detail data*/
      end

      if (converseVar.validationMsgNum == 0) /* No errors found*/
        AF0LS13(); /* Close DACAST.VDMANY01 cursor*/
      end

    end

  end



end // end AF0LS10

// Select Set Hist Detail DB
Function AF0LS11()
   /* ------------------------------------------------------------*/
            /* ** Obtain DACAST.VDMANY01 ***/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AFGREC empty; /* Reset rec work area*/

  AFGREC.SY1STNBR = AF0LW01.AF0LWHST; /* Style as key*/

  if (AFWREC.AFWIDX2 == 1) /* First selection in map*/
             /* (Reformat As-of-Date to Internal Date)*/
    AF0LW01.AF0LWEDW = AF0LW01.AF0LWHD1; /* To ext date wk*/
    AF0LW01.AF0LWDTC = 019; /* To int date wk century*/
    AF0LW01.AF0LWDTM = AF0LW01.AF0LWEDM; /* To int date wk mm*/
    AF0LW01.AF0LWDTD = AF0LW01.AF0LWEDD; /* To int date wk dd*/
    AF0LW01.AF0LWDTY = AF0LW01.AF0LWEDY; /* To int date wk yy*/
    AFGREC.AFFASODT = AF0LW01.AF0LWDTW; /* As of date*/

    AFGREC.XOWCD = AF0LW01.AF0LWHOG; /* Owner group*/
    AFGREC.XSECD = AF0LW01.AF0LWHS1; /* Season cd*/
                   /* (Reformat Season Year)*/
    AF0LW01.AF0LWXSY = 0; /* Reset wk area*/
    AF0LW01.AF0LWXSY = AF0LW01.AF0LWHY1; /* To XSNYR wk area*/
    AF0LW01.AF0LWXSY = AF0LW01.AF0LWXSY + 1900; /* Add century*/
    AFGREC.XSNYR = AF0LW01.AF0LWXSY; /* Season yr*/

    AF0LW01.AF0LWVLF = "1"; /* Indicate sel fld*/

  else

    if (AF0LW01.AF0LWHD2 != 0   /* Valid as of date*/
     && AF0LW01.AF0LWHS2 != " " /* Valid season cd*/
     && AF0LW01.AF0LWHY2 != 0)  /* Valid season yr*/
               /* (Reformat As-of-Date to Internal Date)*/
      AF0LW01.AF0LWEDW = AF0LW01.AF0LWHD2; /* To ext date wk*/
      AF0LW01.AF0LWDTC = 019; /* To int date wk century*/
      AF0LW01.AF0LWDTM = AF0LW01.AF0LWEDM; /* To int date wk mm*/
      AF0LW01.AF0LWDTD = AF0LW01.AF0LWEDD; /* To int date wk dd*/
      AF0LW01.AF0LWDTY = AF0LW01.AF0LWEDY; /* To int date wk yy*/
      AFGREC.AFFASODT = AF0LW01.AF0LWDTW; /* As of date*/

      AFGREC.XSECD = AF0LW01.AF0LWHS2; /* Season cd*/
                     /* (Reformat Season Year)*/
      AF0LW01.AF0LWXSY = 0; /* Reset wk area*/
      AF0LW01.AF0LWXSY = AF0LW01.AF0LWHY2; /* To XSNYR wk area*/
      AF0LW01.AF0LWXSY = AF0LW01.AF0LWXSY + 1900; /* Add century*/
      AFGREC.XSNYR = AF0LW01.AF0LWXSY; /* Season yr*/

      AF0LW01.AF0LWVLF = "2"; /* Indicate sel fld*/

    else

      AF0LW01.AF0LWVLF = "N"; /* Indicate invalid sel fld*/
      return; /* Return to calling process*/

    end

  end


   /* *====================================**/
   /* *  Obtain Data from DACAST.VDMANY01  **/
   /* *====================================**/

  try
    call "IO4200" ("S1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AF0LW01.AF0LWVLF = "N"; /* Indicate invalid cat cd*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S11 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS11

// Process Hist Detail rows
Function AF0LS12()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* Store Historical Detail data; If size not yet in save*/
     /* array, then create size, otherwise, accumulate.*/
     /* Maintain overall qty totals.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO4200" ("N1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
   /* If call successful, store historical summary data*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      AFWREC.AFWIDX3 = 1; /* Reset Size/Qty index*/

      while (AFWREC.AFWIDX3 <= 10) /* Process all sizes/qtys*/

        if (AFGREC.SY5SZID[AFWIDX3] != 0) /* Valid style found*/

          AF0LW03.AF0LWTOT = 0; /* Clear wk qty totals fld*/
          AF0LW03.AF0LWTOT = AF0LW03.AF0LWTOT + AFGREC.AFGSOT1Q[AFWIDX3];
          AF0LW03.AF0LWTOT = AF0LW03.AF0LWTOT + AFGREC.AFGSOT2Q[AFWIDX3];
          AF0LW03.AF0LWTOT = AF0LW03.AF0LWTOT + AFGREC.AFGSOT3Q[AFWIDX3];
          AF0LW03.AF0LWTOT = AF0LW03.AF0LWTOT + AFGREC.AFGSOT4Q[AFWIDX3];
          AF0LW03.AF0LWTOT = AF0LW03.AF0LWTOT + AFGREC.AFGSOT5Q[AFWIDX3];

          if (AF0LW01.AF0LWVLF == "1") /* Selection Field 1 specified*/

            AF0LW03.AF0LWHT1 = AF0LW03.AF0LWHT1 + AF0LW03.AF0LWTOT; /* Sum*/

            AFWREC.AFWIDX5 = AFGREC.SY5SZID[AFWIDX3]; /* Get size ptr*/
            AF0LW03.AF0LWSW1[AFWIDX5] = "S"; /* Size selected*/
            AF0LW03.AF0LWT1 = AF0LW03.AF0LWQW1[AFWIDX5]; /* To wk*/
            AF0LW03.AF0LWT1 = AF0LW03.AF0LWT1 + AF0LW03.AF0LWTOT; /* Accum*/
            AF0LW03.AF0LWQW1[AFWIDX5] = AF0LW03.AF0LWT1; /* Move back*/

          else

            if (AF0LW01.AF0LWVLF == "2") /* Selection Field 1 specified*/

              AF0LW03.AF0LWHT2 = AF0LW03.AF0LWHT2 + AF0LW03.AF0LWTOT;
                                   /* Sum*/

              AFWREC.AFWIDX5 = AFGREC.SY5SZID[AFWIDX3];
              AF0LW03.AF0LWSW2[AFWIDX5] = "S"; /* Size selected*/
              AF0LW03.AF0LWT1 = AF0LW03.AF0LWQW2[AFWIDX5];
              AF0LW03.AF0LWT1 = AF0LW03.AF0LWT1 + AF0LW03.AF0LWTOT;
              AF0LW03.AF0LWQW2[AFWIDX5] = AF0LW03.AF0LWT1;

            else

              AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
              return; /* Return to calling process*/

            end

          end

        end

        AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* Loop through*/

      end

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/
    end


  end



   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWSWC = "Y"; /* Force end of data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S12 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS12

// Close Hist Detail cursor
Function AF0LS13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4200" ("C1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S13 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS13

// Obtain As-of-Date XREF record
Function AF0LS14()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select unique' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4190" ("S ", SQLCA, AFFREC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and XREF record found*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANX01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0LS14

// Edit historical as-of-date 2
Function AF0LS15()
  if (AF0LM001.AF0LMHD2 == " ") /* As-of-date fld spaces*/
    AF0LW01.AF0LWDX2 = " "; /* Space out alpha wk fld*/
    AF0LW01.AF0LWHD2 = 0; /* Zero out num wk fld*/
    return; /* Return to calling process*/
  end


  AF0LW01.AF0LWSSE = AF0LM001.AF0LMHS2; /* Move season cd wk fld*/
  AF0LW01.AF0LWSSY = AF0LM001.AF0LMHY2; /* Move season yr wk fld*/
  AF0LW01.AF0LWSAS = AF0LM001.AF0LMHD2; /* Move as-of-date wk fld*/
  AF0LW01.AF0LWDX2 = AF0LM001.AF0LMHD2; /* Move as-of-date wk fld*/

  AF0LW01.AF0LWVLF = " "; /* Reset validation ind*/


  AF0LS16(); /* Edit Historical as-of-date*/


  if (AF0LW01.AF0LWVLF == " ") /* As-of-date found*/
                  /* (Field is valid)*/
    AF0LW01.AF0LWHD2 = TA2REC.TA2GRGA; /* Save to wk fld*/
    AF0LW01.AF0LWHC2 = TA2REC.TA2CENT; /* Save to wk fld*/

  else
                  /* (Field in error)*/
    AF0LW01.AF0LWHD2 = 0; /* Zero out num wk fld*/
    AFWREC.AFWPRCSN = "S15 "; /* Process number*/
    set AF0LM001.AF0LMHD2 cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 47; /* Indicate error message*/

  end



end // end AF0LS15

// Check as-of-date in XREF file
Function AF0LS16()

   /* ------------------------------------------------------------*/
     /* check valid end date entered*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGA = AF0LW01.AF0LWSAS; /* To ext date wk area*/

  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD != 0) /* invalid date entered*/
    AF0LW01.AF0LWVLF = "E"; /* Indicate invalid date*/
    return; /* Return to calling process*/
  end



   /* ------------------------------------------------------------*/
    /* if date valid, check DACAST.VDMANX01 db for valid match*/
   /* ------------------------------------------------------------*/

           /* (Reformat As-of-Date to Internal Date)*/
  AF0LW01.AF0LWEDW = TA2REC.TA2GRGA; /* To ext date wk area*/
  AF0LW01.AF0LWDTC = 019; /* To int date century*/
  AF0LW01.AF0LWDTM = AF0LW01.AF0LWEDM; /* To int date mm*/
  AF0LW01.AF0LWDTD = AF0LW01.AF0LWEDD; /* To int date dd*/
  AF0LW01.AF0LWDTY = AF0LW01.AF0LWEDY; /* To int date yy*/

                 /* (Reformat Season Year)*/
  AF0LW01.AF0LWXSY = 0; /* Reset XSNYR wk area*/
  AF0LW01.AF0LWXSY = AF0LW01.AF0LWSSY; /* Move to wk area*/
  AF0LW01.AF0LWXSY = AF0LW01.AF0LWXSY + 1900; /* Add century*/


  AFWREC.AFWIDX2 = 1; /* Reset loop index*/

  while (AFWREC.AFWIDX2 <= 35) /* Process all as-of-dates*/

    if (AFFREC.XSECD[AFWIDX2] == AF0LW01.AF0LWSSE /* Season cd*/
     && AFFREC.XSNYR[AFWIDX2] == AF0LW01.AF0LWXSY /* Season yr*/
     && AFFREC.AFFASODT[AFWIDX2] == AF0LW01.AF0LWDTW) /* as-of-date*/
      return; /* Return to calling process*/
    end

    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/

  end

  AF0LW01.AF0LWVLF = "E"; /* As-of-date not found*/



end // end AF0LS16

// Edit historical season yr 2
Function AF0LS17()
  if (AF0LM001.AF0LMHY2 == 0) /* Historical season yr zeroes*/
    AF0LW01.AF0LWHY2 = 0; /* move to wk storage*/
    return; /* Return to calling process*/
  end

  AF0LW01.AF0LWHY2 = AF0LM001.AF0LMHY2; /* save to wk storage*/

  AF0LW01.AF0LWXSY = 0; /* initialize xsnyr wk area*/
  AF0LW01.AF0LWXSY = AF0LM001.AF0LMHY2; /* move to wk area*/
  AF0LW01.AF0LWXSY = AF0LW01.AF0LWXSY + 1900; /* move century*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0LW01.AF0LWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

  AFWREC.AFWPRCSN = "S17 "; /* Process number*/
  set AF0LM001.AF0LMHY2 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/

end // end AF0LS17

// Edit historical season cd 2
Function AF0LS18()
  if (AF0LM001.AF0LMHS2 == " ") /* Season cd spaces*/
    AF0LW01.AF0LWHS2 = " "; /* save to wk storage*/
    return;
  end

  AF0LW01.AF0LWHS2 = AF0LM001.AF0LMHS2; /* save to wk storage*/

  if (AF0LM001.AF0LMHS2 in XSETBL.XSECD)
    AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
                     /* (field is valid)*/
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S18 "; /* Process number*/
    set AF0LM001.AF0LMHS2 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    return; /* return to calling process*/

  end

  AF0LW01.AF0LWXSS = " "; /* Initialize wk area*/
  AF0LW01.AF0LWXYR = +0; /* Initialize wk area*/

  AF0LW01.AF0LWXSS = AF0LM001.AF0LMHS2; /* To XSECD wk area*/
  AF0LW01.AF0LWXYR = AF0LM001.AF0LMHY2; /* Format wk area*/


  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0LW01.AF0LWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

  AFWREC.AFWPRCSN = "S18 "; /* Process number*/
  set AF0LM001.AF0LMHY2 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/

end // end AF0LS18

// Edit historical as-of-date 1
Function AF0LS19()
  if (AF0LM001.AF0LMHD1 == " ") /* As-of-date zero*/
    AF0LW01.AF0LWDX1 = " "; /* Space out alpha wk fld*/
    AF0LW01.AF0LWHD1 = 0; /* Zero out num wk fld*/
    return; /* Return to calling process*/
  end


  AF0LW01.AF0LWSSE = AF0LM001.AF0LMHS1; /* Move season cd wk fld*/
  AF0LW01.AF0LWSSY = AF0LM001.AF0LMHY1; /* Move season yr wk fld*/
  AF0LW01.AF0LWSAS = AF0LM001.AF0LMHD1; /* Move as-of-date wk fld*/
  AF0LW01.AF0LWDX1 = AF0LM001.AF0LMHD1; /* Save to wk fld*/

  AF0LW01.AF0LWVLF = " "; /* Reset validation ind*/


  AF0LS16(); /* Edit Historical as-of-date*/


  if (AF0LW01.AF0LWVLF == " ") /* As-of-date found*/
    AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
                  /* (Field is valid)*/
    AF0LW01.AF0LWHD1 = TA2REC.TA2GRGA; /* Save to wk fld*/
    AF0LW01.AF0LWHC1 = TA2REC.TA2CENT; /* Save to wk fld*/

  else
                  /* (Field in error)*/
    AF0LW01.AF0LWHD1 = 0; /* Zero out num wk fld*/
    AFWREC.AFWPRCSN = "S19 "; /* Process number*/
    set AF0LM001.AF0LMHD1 cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 47; /* Indicate error message*/

  end



end // end AF0LS19

// Edit historical season yr 1
Function AF0LS20()
  if (AF0LM001.AF0LMHY1 == 0) /* Season yr eq zeroes*/
    AF0LW01.AF0LWHY1 = 0; /* save to wk storage*/
    return; /* Return to calling process*/
  end

  AF0LW01.AF0LWHY1 = AF0LM001.AF0LMHY1; /* save to wk storage*/

  AF0LW01.AF0LWXSY = 0; /* initialize xsnyr wk area*/
  AF0LW01.AF0LWXSY = AF0LM001.AF0LMHY1; /* move to wk area*/
  AF0LW01.AF0LWXSY = AF0LW01.AF0LWXSY + 1900; /* move century*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0LW01.AF0LWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

  AFWREC.AFWPRCSN = "S20 "; /* Process number*/
  set AF0LM001.AF0LMHY1 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/


end // end AF0LS20

// Edit historical season cd 1
Function AF0LS21()
  if (AF0LM001.AF0LMHS1 == " ") /* Season cd spaces*/
    AF0LW01.AF0LWHS1 = " "; /* save to wk storage*/
    return; /* REturn to calling process*/
  end

  AF0LW01.AF0LWHS1 = AF0LM001.AF0LMHS1; /* save to wk storage*/

  if (AF0LM001.AF0LMHS1 in XSETBL.XSECD)
    AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
                     /* (field is valid)*/
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S21 "; /* Process number*/
    set AF0LM001.AF0LMHS1 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    return; /* return to calling process*/

  end

  AF0LW01.AF0LWXSS = " "; /* Initialize wk area*/
  AF0LW01.AF0LWXYR = +0; /* Initialize wk area*/

  AF0LW01.AF0LWXSS = AF0LM001.AF0LMHS1; /* To XSECD wk area*/
  AF0LW01.AF0LWXYR = AF0LM001.AF0LMHY1; /* Format wk area*/


  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0LW01.AF0LWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

  AFWREC.AFWPRCSN = "S21 "; /* Process number*/
  set AF0LM001.AF0LMHY1 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/

end // end AF0LS21

// Edit historical style no.
Function AF0LS22()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'XSPG201' call.*/
   /* If not found, indicate an edit error.*/
   /* ------------------------------------------------------------*/



   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/

  if (AF0LM001.AF0LMHST == " ") /* Style = spaces*/
    AF0LW01.AF0LWHST = " "; /* Move to wk storage*/
    return; /* Exit to calling process*/
  end


  AF0LW01.AF0LWHST = AF0LM001.AF0LMHST; /* Save to wk fld*/


   /* *=======================================**/
   /* *  Get Style Row from  DPRODG.VSYCLR01  **/
   /* *=======================================**/

  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0LM001.AF0LMHST; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0LV24"; /* Process name*/

  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/



   /* *==========================**/
   /* *  Check Retrieval Status  **/
   /* *==========================**/


  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
    AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/

                   /* (Field is valid)*/

  else

                  /* (Field in error)*/
    set AF0LM001.AF0LMHST cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate not found*/
    AFWREC.AFWPRCSN = "S22 "; /* Process number*/
    return; /* Return to calling process*/

  end


end // end AF0LS22

// Edit historical silhouette cd
Function AF0LS23()

  if (AF0LM001.AF0LMHSC == " ") /* Field eq spaces*/
    AF0LW01.AF0LWHSC = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0LW01.AF0LWHSC = AF0LM001.AF0LMHSC; /* save to wk map storage*/


  if (AF0LM001.AF0LMHSC in XSUTBL.XSUCD)

    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/

      AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
                       /* (field is valid)*/
      return; /* Return to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S23 "; /* Process number*/
  set AF0LM001.AF0LMHSC cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/


end // end AF0LS23

// Edit historical category cd
Function AF0LS24()

  if (AF0LM001.AF0LMHC1 == " " /* Field eq spaces*/
   && AF0LM001.AF0LMHC2 == " " /* Field eq spaces*/
   && AF0LM001.AF0LMHC3 == " ") /* Field eq spaces*/
    AF0LW01.AF0LWHCC[1] = " "; /* Space out save area*/
    AF0LW01.AF0LWHCC[2] = " "; /* Space out save area*/
    AF0LW01.AF0LWHCC[3] = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end


  if (AF0LM001.AF0LMHC3 != " ")
    if (AF0LM001.AF0LMHC3 in XPCTBL.XPCCD
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
      AF0LW01.AF0LWHCC[3] = AF0LM001.AF0LMHC3; /* save to save area*/
    else
      AFWREC.AFWPRCSN = "S36 "; /* Process number*/
      set AF0LM001.AF0LMHC3 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 80; /* indicate error message*/
      AF0LW01.AF0LWHCC[3] = " "; /* Space out save area*/
    end
  else
    AF0LW01.AF0LWHCC[3] = " "; /* Space out save area*/
  end


  if (AF0LM001.AF0LMHC2 != " ")
    if (AF0LM001.AF0LMHC2 in XPCTBL.XPCCD
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
      AF0LW01.AF0LWHCC[2] = AF0LM001.AF0LMHC2; /* save to save area*/
    else
      AFWREC.AFWPRCSN = "S36 "; /* Process number*/
      set AF0LM001.AF0LMHC2 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 80; /* indicate error message*/
      AF0LW01.AF0LWHCC[2] = " "; /* Space out save area*/
    end
  else
    AF0LW01.AF0LWHCC[2] = " "; /* Space out save area*/
  end


  if (AF0LM001.AF0LMHC1 != " ")
    if (AF0LM001.AF0LMHC1 in XPCTBL.XPCCD
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
      AF0LW01.AF0LWHCC[1] = AF0LM001.AF0LMHC1; /* save to save area*/
    else
      AFWREC.AFWPRCSN = "S36 "; /* Process number*/
      set AF0LM001.AF0LMHC1 cursor, bold; /* highlight field*/
      XP1REC.XP1MNO = 80; /* indicate error message*/
      AF0LW01.AF0LWHCC[1] = " "; /* Space out save area*/
    end
  end


end // end AF0LS24

// Edit historical Gender/Age cd
Function AF0LS25()

  if (AF0LM001.AF0LMHGC == " ") /* Map fld eq spaces*/
    AF0LW01.AF0LWHGC = " "; /* Space out save fld*/
    return; /* Return to calling process*/
  end


  AF0LW01.AF0LWHGC = AF0LM001.AF0LMHGC; /* save to wk storage*/


  if (AF0LM001.AF0LMHGC in XGATBL.XGACD)

    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XGATBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
                      /* (Field is valid)*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S25 "; /* Process number*/
  set AF0LM001.AF0LMHGC cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/



end // end AF0LS25

// Relational edit checking
Function AF0LS26()

  if (AF0LW01.AF0LWHFL == "N") /* no history data has been entered*/
    return;
  end

   /* *============================================**/
   /* * Check season cd/yr/as-of-date completeness **/
   /* *============================================**/

            /* (Sesn Cd/Yr/As-of-date Option 1)*/

  if (AF0LM001.AF0LMHS1 != " " /* Valid season yr 1*/
   && AF0LM001.AF0LMHY1 != 0   /* and Valid season yr 1*/
   && AF0LM001.AF0LMHD1 != " ") /* and Valid as-of-date 1*/
               /* (valid option 1)*/
    AF0LW01.AF0LWOP1 = "V"; /* Indicate valid option 1*/

  else

    if (AF0LM001.AF0LMHS1 == " " /* Empty season yr 1*/
     && AF0LM001.AF0LMHY1 == 0   /* and empty season yr 1*/
     && AF0LM001.AF0LMHD1 == " ") /* and empty as-of-date 1*/
                 /* (empty option 1)*/
      AF0LW01.AF0LWOP1 = " "; /* Indicate empty option 1*/

    else
             /* (option 1 in error - incomplete fields)*/
      AFWREC.AFWPRCSN = "S26 "; /* Process number*/
      set AF0LM001.AF0LMHS1 cursor, bold; /* Highlight field*/
      set AF0LM001.AF0LMHY1 bold; /* Highlight field*/
      set AF0LM001.AF0LMHD1 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0LW01.AF0LWOP1 = "E"; /* Indicate error option 1*/

    end

  end

            /* (Sesn Cd/Yr/As-of-date Option 2)*/

  if (AF0LM001.AF0LMHS2 != " " /* Valid season yr 2*/
   && AF0LM001.AF0LMHY2 != 0   /* and Valid season yr 2*/
   && AF0LM001.AF0LMHD2 != " ") /* and Valid as-of-date 2*/
               /* (valid option 2)*/
    AF0LW01.AF0LWOP2 = "V"; /* Indicate valid option 2*/

  else

    if (AF0LM001.AF0LMHS2 == " " /* Empty season yr 2*/
     && AF0LM001.AF0LMHY2 == 0   /* and empty season yr 2*/
     && AF0LM001.AF0LMHD2 == " ") /* and empty as-of-date 2*/
                 /* (empty option 2)*/
      AF0LW01.AF0LWOP2 = " "; /* Indicate empty option 2*/

    else
             /* (option 2 in error - incomplete fields)*/
      AFWREC.AFWPRCSN = "S26 "; /* Process number*/
      set AF0LM001.AF0LMHS2 cursor, bold; /* Highlight field*/
      set AF0LM001.AF0LMHY2 bold; /* Highlight field*/
      set AF0LM001.AF0LMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0LW01.AF0LWOP2 = "E"; /* Indicate error option 1*/

    end

  end



  if (AF0LW01.AF0LWOP1 == "V" /* Option 1 valid*/
   && AF0LW01.AF0LWOP2 == "V") /* and Option 1 valid*/

    if (AF0LM001.AF0LMHS1 == AF0LM001.AF0LMHS2 /* Duplicate sesn cd*/
     && AF0LM001.AF0LMHY1 == AF0LM001.AF0LMHY2 /* Duplicate sesn yr*/
     && AF0LM001.AF0LMHD1 == AF0LM001.AF0LMHD2) /* Duplicate as-of-date*/

             /* (option 2 in error - Duplicate fields)*/
      AFWREC.AFWPRCSN = "S26 "; /* Process number*/
      set AF0LM001.AF0LMHS2 cursor, bold; /* Highlight field*/
      set AF0LM001.AF0LMHY2 bold; /* Highlight field*/
      set AF0LM001.AF0LMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0LW01.AF0LWOP2 = "E"; /* Indicate error option 1*/

    end

  end



  if (XP1REC.XP1MNO != 0) /* Errors detected*/
    return; /* Return to calling process*/
  end



   /* *==========================================**/
   /* * Check Historical Fields for Completeness **/
   /* *==========================================**/


  if (AF0LW01.AF0LWOP1 == "V" /* Option 1 valid*/
   || AF0LW01.AF0LWOP2 == "V") /* Option 2 valid*/

    if (AF0LM001.AF0LMHST == " ") /* style not entered*/

      if (AF0LM001.AF0LMHDV != " " /* Valid Division cd*/
       && AF0LM001.AF0LMHPR != " " /* and Valid Product type cd*/
       && AF0LM001.AF0LMHGC != " " /* and Valid Gender/Age cd*/
       && AF0LM001.AF0LMHPL != " " /* and Valid Product Line cd*/
       && AF0LM001.AF0LMHSC != " ") /* and Valid Silhouette cd*/

        if (AF0LM001.AF0LMHC1 != " " /* Categ 1 valid*/
         || AF0LM001.AF0LMHC2 != " " /* or Categ 2 valid*/
         || AF0LM001.AF0LMHC3 != " ") /* or Categ 3 valid*/
          return; /* Return to calling process*/
        end
      end
    else /* Valid style entered*/
      return; /* Return to calling process*/
    end
  end


  AF0LW01.AF0LWHFL = "N"; /* init history entered flag*/


  if (AF0LW01.AF0LWOP1 == " " /* Option 1 not entered*/
   && AF0LW01.AF0LWOP2 == " ") /* Option 2 not entered*/
    AFWREC.AFWPRCSN = "S26 "; /* Process number*/
    XP1REC.XP1MNO = 84; /* Indicate error message*/
    set AF0LM001.AF0LMHS1 cursor, bold; /* Highlight field*/
    set AF0LM001.AF0LMHY1 bold; /* Highlight field*/
    set AF0LM001.AF0LMHD1 bold; /* Highlight field*/
    set AF0LM001.AF0LMHS2 bold; /* Highlight field*/
    set AF0LM001.AF0LMHY2 bold; /* Highlight field*/
    set AF0LM001.AF0LMHD2 bold; /* Highlight field*/
  end


  if (AF0LM001.AF0LMHST != " ") /* valid style*/
    return; /* return to calling program*/
  end


  if (AF0LM001.AF0LMHSC == " ")
    AFWREC.AFWPRCSN = "S26 "; /* Process number*/
    XP1REC.XP1MNO = 84; /* Indicate error message*/
    set AF0LM001.AF0LMHSC cursor, bold; /* Highlight field*/
  end


  if (AF0LM001.AF0LMHC1 == " "
   && AF0LM001.AF0LMHC2 == " "
   && AF0LM001.AF0LMHC3 == " ")
    AFWREC.AFWPRCSN = "S26 "; /* Process number*/
    XP1REC.XP1MNO = 84; /* Indicate error message*/
    set AF0LM001.AF0LMHC1 cursor, bold; /* Highlight field*/
    set AF0LM001.AF0LMHC2 bold; /* Highlight field*/
    set AF0LM001.AF0LMHC3 bold; /* Highlight field*/
  end


  if (AF0LM001.AF0LMHPL == " ")
    AFWREC.AFWPRCSN = "S26 "; /* Process number*/
    XP1REC.XP1MNO = 83; /* Indicate error message*/
    set AF0LM001.AF0LMHPL cursor, bold; /* Highlight field*/
  end


  if (AF0LM001.AF0LMHGC == " ")
    AFWREC.AFWPRCSN = "S26 "; /* Process number*/
    XP1REC.XP1MNO = 83; /* Indicate error message*/
    set AF0LM001.AF0LMHGC cursor, bold; /* Highlight field*/
  end


  if (AF0LM001.AF0LMHPR == " ")
    AFWREC.AFWPRCSN = "S26 "; /* Process number*/
    XP1REC.XP1MNO = 83; /* Indicate error message*/
    set AF0LM001.AF0LMHPR cursor, bold; /* Highlight field*/
  end


  if (AF0LM001.AF0LMHDV == " ")
    AFWREC.AFWPRCSN = "S26 "; /* Process number*/
    XP1REC.XP1MNO = 83; /* Indicate error message*/
    set AF0LM001.AF0LMHDV cursor, bold; /* Highlight field*/
  end



end // end AF0LS26

// Edit silhouette cd
Function AF0LS28()

  XP1REC.XSUCD = AF0LM001.XSUCD; /* save to wk map storage*/

  if (AF0LM001.XSUCD == " ")
    XP1REC.XSUABRV = " ";
    XP1REC.XSUDESC = " ";
    AF0LM001.XSUABRV = " ";
  end

  if (AF0LM001.XSUCD in XSUTBL.XSUCD)

    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0LM001.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/
    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S28 "; /* Process number*/
  set AF0LM001.XSUCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  XP1REC.XSUCD = " "; /* Space out code*/
  XP1REC.XSUABRV = " "; /* Space out desc*/
  AF0LM001.XSUABRV = " "; /* Space out desc*/


end // end AF0LS28

// Edit category cd
Function AF0LS29()

  XP1REC.XPCCD = AF0LM001.XPCCD; /* save to wk map storage*/

  if (AF0LM001.XPCCD == " ")
    XP1REC.XPCABRV = " ";
    XP1REC.XPCDESC = " ";
    AF0LM001.XPCABRV = " ";
  end


  if (AF0LM001.XPCCD in XPCTBL.XPCCD)

    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/

                    /* (field is valid)*/
      XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0LM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/

    end
                         /* (field in error)*/
  else
                         /* (field in error)*/
    AFWREC.AFWPRCSN = "S29 "; /* Process number*/
    set AF0LM001.XPCCD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 35; /* indicate error message*/
    XP1REC.XPCCD = " "; /* Space out code*/
    XP1REC.XPCABRV = " "; /* Space out save desc*/
    AF0LM001.XPCABRV = " "; /* Space out map desc*/

  end

end // end AF0LS29

// Edit Gender/Age cd
Function AF0LS30()

  XP1REC.XGACD = AF0LM001.XGACD; /* save to wk map storage*/

  if (AF0LM001.XGACD == " ")
    XP1REC.XGAABRV = " ";
    XP1REC.XGADESC = " ";
    AF0LM001.XGAABRV = " ";
  end

  if (AF0LM001.XGACD in XGATBL.XGACD)

    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XGATBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/

                   /* (Field is Valid)*/
      XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0LM001.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/

    end

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S30 "; /* Process number*/
    set AF0LM001.XGACD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 36; /* indicate error message*/
    XP1REC.XGACD = " "; /* Space out code*/
    XP1REC.XGAABRV = " "; /* Space out save desc*/
    AF0LM001.XGAABRV = " "; /* Space out map desc*/

  end

end // end AF0LS30

// Edit season yr
Function AF0LS31()

  AF0LW01.AF0LWXSY = 0; /* initialize xsnyr wk area*/
  AF0LW01.AF0LWXSY = AF0LM001.XSNYR; /* move to wk area*/
  AF0LW01.AF0LWXSY = AF0LW01.AF0LWXSY + 1900; /* move century*/


  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0LW01.AF0LWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      XP1REC.XSNYR = AF0LM001.XSNYR; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S31 "; /* Process number*/
  set AF0LM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/


end // end AF0LS31

// Edit season cd
Function AF0LS32()


  if (AF0LM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0LM001.XSECD; /* save to working storage*/

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S32 "; /* Process number*/
    set AF0LM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/

  end


  AF0LW01.AF0LWXSS = " "; /* Initialize wk area*/
  AF0LW01.AF0LWXYR = +0; /* Initialize wk area*/

  AF0LW01.AF0LWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  AF0LW01.AF0LWXYR = XP1REC.XSNYR; /* Format wk area*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0LW01.AF0LWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S32 "; /* Process number*/
  set AF0LM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/

end // end AF0LS32

// Edit forecaster cd
Function AF0LS33()
   /* *====================================**/
    /* Check Forecaster Userid for Spaces  **/
   /* *====================================**/

  XP1REC.PG1FCTCD = AF0LM001.PG1FCTCD; /* save to wk map storage*/

  if (AF0LM001.PG1FCTCD == " ") /* Forecaster cd = spaces*/
    AF0LW01.AF0LWFCT = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out Forecaster cd*/
    AF0LM001.PG1FCTCD = " "; /* Space out map abrv*/

    AFWREC.AFWPRCSN = "S33 "; /* Process number*/
    set AF0LM001.PG1FCTCD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 37; /* indicate error message*/
    return;
  end
                   /* (field in error)*/


  AF0LW01.AF0LWFCT = AF0LM001.PG1FCTCD; /* Move to wk map storage*/


   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0LM001.PG1FCTCD; /* Forecaster id*/


   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0LM001.PG1FCTCD cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S33 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      AF0LW01.AF0LWFCT = " "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AF0LW01.AF0LWCIN = "Y"; /* Data contention detected*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          AF0LW01.AF0LWFCT = AF0LM001.PG1FCTCD; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end
      end
    end
  end

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0LV37"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0LM001.PG1FCTCD; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AF0LS33

// Submit JCL via XPTA0P
Function AF0LS34()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No return msg after job done*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end


   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/

  AFWREC.AFWPRCSN = "S34 "; /* Process number*/
  AF0LM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    AFWREC.AFWNMO = 70; /* Indicate job was submitted*/
    AF0LW01.AF0LWJFL = "Y"; /* Set JCL submitted switch*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    converseLib.validationFailed(71); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
  end

  exit stack; /* Exit to display map*/


end // end AF0LS34

// Edit historical pr line cd
Function AF0LS35()

  if (AF0LM001.AF0LMHPL == " ") /* Field eq spaces*/
    AF0LW01.AF0LWHPL = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0LW01.AF0LWHPL = AF0LM001.AF0LMHPL; /* save to wk map storage*/


  if (AF0LM001.AF0LMHPL in XPLTBL.XPLCD)

    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
                       /* (field is valid)*/
      return; /* Return to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S35 "; /* Process number*/
  set AF0LM001.AF0LMHPL cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  AF0LW01.AF0LWHPL = " "; /* Space out save desc*/


end // end AF0LS35

// Edit historical pr type cd
Function AF0LS36()

  if (AF0LM001.AF0LMHPR == " ") /* Field eq spaces*/
    AF0LW01.AF0LWHPR = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0LW01.AF0LWHPR = AF0LM001.AF0LMHPR; /* save to wk map storage*/


  if (AF0LM001.AF0LMHPR in XPRTBL.XPRCD)

    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
                       /* (field is valid)*/
      return; /* Return to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S36 "; /* Process number*/
  set AF0LM001.AF0LMHPR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 80; /* indicate error message*/
  AF0LW01.AF0LWHPR = " "; /* Space out save desc*/


end // end AF0LS36

// Edit historical division cd
Function AF0LS37()

  if (AF0LM001.AF0LMHDV == " ") /* Field eq spaces*/
    AF0LW01.AF0LWHDV = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0LW01.AF0LWHDV = AF0LM001.AF0LMHDV; /* save to wk map storage*/


  if (AF0LM001.AF0LMHDV in XDVTBL.XDVCD)
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || XDVTBL.XDVCD[sysVar.arrayIndex] == "05")
      AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/

                       /* (field is valid)*/
      return; /* Return to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S37 "; /* Process number*/
  set AF0LM001.AF0LMHDV cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  AF0LW01.AF0LWHDV = " "; /* Space out save desc*/


end // end AF0LS37

// Edit division cd
Function AF0LS38()

  XP1REC.XDVCD = AF0LM001.XDVCD; /* save to wk map storage*/

  if (AF0LM001.XDVCD == " ")
    XP1REC.XDVABRV = " ";
    XP1REC.XDVDESC = " ";
    AF0LM001.XDVABRV = " ";
  end

  if (AF0LM001.XDVCD in XDVTBL.XDVCD)

    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || XDVTBL.XDVCD[sysVar.arrayIndex] == "05")
                       /* (field is valid)*/
      XP1REC.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0LM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/

    end

                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S38 "; /* Process number*/
    set AF0LM001.XDVCD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 29; /* indicate error message*/
    XP1REC.XDVCD = " "; /* Space out code*/
    XP1REC.XDVABRV = " "; /* Space out save abrv*/
    AF0LM001.XDVABRV = " "; /* Space out map abrv*/


  end

end // end AF0LS38

// Edit product line cd
Function AF0LS39()

  XP1REC.XPLCD = AF0LM001.XPLCD; /* save to wk map storage*/

  if (AF0LM001.XPLCD == " ")
    XP1REC.XPLABRV = " ";
    XP1REC.XPLDESC = " ";
    AF0LM001.XPLABRV = " ";
  end

  if (AF0LM001.XPLCD in XPLTBL.XPLCD)

    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0LM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/

    end

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S39 "; /* Process number*/
    set AF0LM001.XPLCD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 81; /* indicate error message*/
    XP1REC.XPLCD = " "; /* Space out code*/
    XP1REC.XPLABRV = " "; /* Space out save desc*/
    AF0LM001.XPLABRV = " "; /* Space out map desc*/

  end

end // end AF0LS39

// Edit life cycle cds
Function AF0LS40()

  AFWREC.AFWIXM = 1;

  while (AFWREC.AFWIXM <= 4)

    if (AF0LM001.XLCCD[AFWIXM] == " ")
      XP1REC.XLCCD[AFWIXM] = " ";

    else

      if (AF0LM001.XLCCD[AFWIXM] in XLCTBL.XLCCD)
        if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
          XP1REC.XLCCD[AFWIXM] = AF0LM001.XLCCD[AFWIXM];

        end

      else
                         /* (field in error)*/
        AFWREC.AFWPRCSN = "S40 "; /* Process number*/
        set AF0LM001.XLCCD[AFWIXM] cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 79; /* indicate error message*/
        XP1REC.XLCCD[AFWIXM] = " "; /* Space out code*/

      end

    end

    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* increment map index*/

  end
end // end AF0LS40

// Edit historical owner group
Function AF0LS41()

  if (AF0LM001.AF0LMHOG == " ") /* Field eq spaces*/
    AF0LW01.AF0LWHOG = "  ";
    return; /* Return to calling process*/
  end

  AF0LW01.AF0LWHOG = AF0LM001.AF0LMHOG; /* save to wk map storage*/
  AF0LW01.AF0LWHSE = "51"; /* whse 51 only*/


  if (AF0LW01.AF0LWHKY in XOWTBL.XOWKEY)

    AF0LW01.AF0LWHFL = "Y"; /* history entered flag*/
                       /* (field is valid)*/
    return; /* Return to calling process*/

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S42 "; /* Process number*/
  set AF0LM001.AF0LMHOG cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 121; /* indicate error message*/


end // end AF0LS41

// Edit owner group cd
Function AF0LS42()

  if (AF0LM001.XOWCD == " "
   || AF0LM001.XOWCD == "**")
    XP1REC.XOWCD = "**";
    XP1REC.XOWABRV = "ALL";
    XP1REC.XOWDESC = "ALL";
    return;
  end

  XP1REC.XOWCD = AF0LM001.XOWCD; /* save to wk map storage*/
  XP1REC.XWHCD = "51"; /* get whse 51 only*/

  if (XP1REC.XOWKEY in XOWTBL.XOWKEY)

    XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk storage*/
    XP1REC.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex]; /* To wk storage*/
    return; /* Exit to calling process*/

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S42 "; /* Process number*/
  set AF0LM001.XOWCD cursor, bold; /* highlight field*/
  AF0LM001.XOWABRV = " ";
  XP1REC.XP1MNO = 121; /* indicate error message*/
  XP1REC.XOWCD = " "; /* Space out code*/
  XP1REC.XOWABRV = " "; /* Space out desc*/
  XP1REC.XOWDESC = " "; /* Space out desc*/


end // end AF0LS42

//*** RECORD=AF0LW01 ****
// Working Storage (1) for AF0E - Program-defined Variables
// ***********************
Record AF0LW01 type basicRecord
  10 AF0LWCIN AF0LWCIN ; 
  10 AF0LWCNF AF0LWCNF ; 
  10 AF0LWCPT AF0LWCPT ; 
  10 AF0LWDTW AF0LWDTW ; 
    15 AF0LWDTC AF0LWDTC ; 
    15 AF0LWDTY AF0LWDTY ; 
    15 AF0LWDTM AF0LWDTM ; 
    15 AF0LWDTD AF0LWDTD ; 
  10 AF0LWDX1 AF0LWDX1 ; 
  10 AF0LWDX2 AF0LWDX2 ; 
  10 AF0LWEDW AF0LWEDW ; 
    15 AF0LWEDM AF0LWEDM ; 
    15 AF0LWEDD AF0LWEDD ; 
    15 AF0LWEDY AF0LWEDY ; 
  10 AF0LWFCT AF0LWFCT ; 
  10 AF0LWHAC AF0LWHAC ; 
  10 AF0LWHCH AF0LWHCH ; 
    15 AF0LWHCS AF0LWHCS ; 
    15 AF0LWHCY AF0LWHCY ; 
  10 AF0LWHDS AF0LWHDS ; 
  10 AF0LWHDV AF0LWHDV ; 
  10 AF0LWHPR AF0LWHPR ; 
  10 AF0LWHGC AF0LWHGC ; 
  10 AF0LWHPL AF0LWHPL ; 
  10 AF0LWHCC AF0LWHCC [3] ; 
  10 AF0LWHSC AF0LWHSC ; 
  10 AF0LWHKY AF0LWHKY ; 
    15 AF0LWHSE AF0LWHSE ; 
    15 AF0LWHOG AF0LWHOG ; 
  10 AF0LWHST AF0LWHST ; 
  10 AF0LWHSY AF0LWHSY ; 
    15 AF0LWHSH AF0LWHSH ; 
    15 AF0LWHYH AF0LWHYH ; 
  10 AF0LWHS1 AF0LWHS1 ; 
  10 AF0LWHY1 AF0LWHY1 ; 
  10 AF0LWHD1 AF0LWHD1 ; 
  10 AF0LWHC1 AF0LWHC1 ; 
  10 AF0LWHS2 AF0LWHS2 ; 
  10 AF0LWHY2 AF0LWHY2 ; 
  10 AF0LWHD2 AF0LWHD2 ; 
  10 AF0LWHC2 AF0LWHC2 ; 
  10 AF0LWHPC AF0LWHPC ; 
  10 AF0LWLCT AF0LWLCT ; 
  10 AF0LWMNO AF0LWMNO ; 
  10 AF0LWHFL AF0LWHFL ; 
  10 AF0LWOP1 AF0LWOP1 ; 
  10 AF0LWOP2 AF0LWOP2 ; 
  10 AF0LWPGV AF0LWPGV ; 
  10 AF0LWPND AF0LWPND ; 
  10 AF0LWSSE AF0LWSSE ; 
  10 AF0LWSSY AF0LWSSY ; 
  10 AF0LWSAS AF0LWSAS ; 
  10 AF0LWSQU AF0LWSQU ; 
  10 AF0LWSSC AF0LWSSC ; 
  10 AF0LWSPR AF0LWSPR ; 
  10 AF0LWSGA AF0LWSGA ; 
  10 AF0LWSPL AF0LWSPL ; 
  10 AF0LWSPC AF0LWSPC ; 
  10 AF0LWSSL AF0LWSSL ; 
  10 AF0LWSDV AF0LWSDV ; 
  10 XOWCD XOWCD ; 
  10 XOWDESC XOWDESC ; 
  10 AF0LWVLF AF0LWVLF ; 
  10 AF0LWVLI AF0LWVLI ; 
  10 AF0LWXSY AF0LWXSY ; 
  10 AF0LWXSA AF0LWXSA ; 
    15 AF0LWXSS AF0LWXSS ; 
    15 AF0LWXYR AF0LWXYR ; 
  10 AF0LWIXT AF0LWIXT ; 
  10 AF0LWJFL AF0LWJFL ; 
  10 AF0LWPF5 AF0LWPF5 ; 
  10 AF0LWPF6 AF0LWPF6 ; 
end // end AF0LW01

//*** RECORD=AF0LW02 ****
// Working Storage (2) for AF0L - DACAST.VAFSTY01 Record wkarea
// ***********************
Record AF0LW02 type basicRecord
  10 AF0LWCHG AF0LWCHG ; 
  10 AF0LWIDX AF0LWIDX ; 
  10 AF0LWVCT AF0LWVCT ; 
  10 AF0LWVCS AF0LWVCS [40] ; 
  10 AF0LWSZ AF0LWSZ [40] ; 
  10 AF0LWSZD AF0LWSZD [40] ; 
  10 AF0LWSZI AF0LWSZI [40] ; 
  10 AF0LWSZN AF0LWSZN [40] ; 
  10 AF0LWSZP AF0LWSZP [40] ; 
end // end AF0LW02

//*** RECORD=AF0LW03 ****
// Working Storage (2) for AF0E - Record Work Areas
// ***********************
Record AF0LW03 type basicRecord
  10 AF0LWHM1 AF0LWHM1 ; 
  10 AF0LWHM2 AF0LWHM2 ; 
  10 AF0LWHX1 AF0LWHX1 ; 
  10 AF0LWHX2 AF0LWHX2 ; 
  10 AF0LWTOT AF0LWTOT ; 
  10 AF0LWT1 AF0LWT1 ; 
  10 AF0LWHT1 AF0LWHT1 ; 
  10 AF0LWHT2 AF0LWHT2 ; 
  10 AF0LWSW1 AF0LWSW1 [40] ; 
  10 AF0LWQW1 AF0LWQW1 [40] ; 
  10 AF0LWSW2 AF0LWSW2 [40] ; 
  10 AF0LWQW2 AF0LWQW2 [40] ; 
  10 AF0LWQT1 AF0LWQT1 [40] ; 
  10 AF0LWPC1 AF0LWPC1 [40] ; 
  10 AF0LWQT2 AF0LWQT2 [40] ; 
  10 AF0LWPC2 AF0LWPC2 [40] ; 
end // end AF0LW03

//*** RECORD=AF0LW04 ****
// Working Storage (4) for AF0L - Parameter Work Area
// ***********************
Record AF0LW04 type basicRecord
  5 AF0LWJCL AF0LWJCL ; 
    10 AF0LWRT AF0LWRT ; 
    10 XSECD XSECD ; 
    10 AF0LWXSN AF0LWXSN ; 
    10 XDVCD XDVCD ; 
    10 XOWCD XOWCD ; 
    10 XPRCD XPRCD ; 
    10 XGACD XGACD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 XSUCD XSUCD ; 
    10 PG1FCTCD PG1FCTCD ; 
    10 XLCCD XLCCD [4] ; 
    10 XXXSTAT XXXSTAT ; 
    10 AF0LWDSZ AF0LWDSZ [10] ; 
    10 AF0LWPSZ AF0LWPSZ [10] ; 
end // end AF0LW04

//*** RECORD=AF0LW05 ****
// Working Storage (5) for AF0L - Parameter Work Area
// ***********************
Record AF0LW05 type basicRecord
  5 AF0LWJCL AF0LWJCL ; 
    10 AF0LWRT AF0LWRT ; 
    10 XSECD XSECD ; 
    10 AF0LWXSN AF0LWXSN ; 
    10 XDVCD XDVCD ; 
    10 XOWCD XOWCD ; 
    10 XPRCD XPRCD ; 
    10 XGACD XGACD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 XSUCD XSUCD ; 
    10 PG1FCTCD PG1FCTCD ; 
    10 XLCCD XLCCD [4] ; 
    10 XXXSTAT XXXSTAT ; 
    10 AF0LWHDV AF0LWHDV ; 
    10 AF0LWHPR AF0LWHPR ; 
    10 AF0LWHGC AF0LWHGC ; 
    10 AF0LWHPL AF0LWHPL ; 
    10 AF0LWHCC AF0LWHCC [3] ; 
    10 AF0LWHSC AF0LWHSC ; 
    10 AF0LWHOG AF0LWHOG ; 
    10 AF0LWHST AF0LWHST ; 
    10 AF0LWHS1 AF0LWHS1 ; 
    10 AF0LWHY1 AF0LWHY1 ; 
    10 AF0LWHA1 AF0LWHA1 ; 
    10 AF0LWHS2 AF0LWHS2 ; 
    10 AF0LWHY2 AF0LWHY2 ; 
    10 AF0LWHA2 AF0LWHA2 ; 
    10 AF0LWFIL AF0LWFIL ; 
end // end AF0LW05

// Data changed indicator
DataItem AF0LWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data contention indicator
DataItem AF0LWCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update confirm flag
DataItem AF0LWCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wk check pcent total
DataItem AF0LWCPT decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size descriptions
DataItem AF0LWDSZ num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date ccc
DataItem AF0LWDTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date dd
DataItem AF0LWDTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date mm
DataItem AF0LWDTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date wk area
DataItem AF0LWDTW num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date yy
DataItem AF0LWDTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist alpha as-of-date 1
DataItem AF0LWDX1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist alpha as-of-date 2
DataItem AF0LWDX2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// External date dd
DataItem AF0LWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date mm
DataItem AF0LWEDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date wk area
DataItem AF0LWEDW num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date yy
DataItem AF0LWEDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk user termid
DataItem AF0LWFCT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Filler
DataItem AF0LWFIL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical As-of-Date (1)
DataItem AF0LWHA1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical As-of-Date (2)
DataItem AF0LWHA2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical pending actvty ind
DataItem AF0LWHAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Century (1)
DataItem AF0LWHC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Century (2)
DataItem AF0LWHC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Category cd
DataItem AF0LWHCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Hdgs wk area 2
DataItem AF0LWHCH char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Hdgs 2 xsecd
DataItem AF0LWHCS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Hdgs 2 xsnyr
DataItem AF0LWHCY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical As-Of-Date (1)
DataItem AF0LWHD1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical As-Of-Date (2)
DataItem AF0LWHD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Data Select Ind
DataItem AF0LWHDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Division cd
DataItem AF0LWHDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical data entered fl
DataItem AF0LWHFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Gender/Age cd
DataItem AF0LWHGC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Own Grp Key
DataItem AF0LWHKY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last size selected ptr -1
DataItem AF0LWHM1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last size selected ptr -2
DataItem AF0LWHM2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Owner group cd
DataItem AF0LWHOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Pcent value
DataItem AF0LWHPC num(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Product Line cd
DataItem AF0LWHPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Product type cd
DataItem AF0LWHPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Season cd (1)
DataItem AF0LWHS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Season cd (2)
DataItem AF0LWHS2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Silhouette cd
DataItem AF0LWHSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Whse cd
DataItem AF0LWHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist season cd col hdg
DataItem AF0LWHSH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Style no.
DataItem AF0LWHST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical col hdgs wk area
DataItem AF0LWHSY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical selection 1 total
DataItem AF0LWHT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 2 total
DataItem AF0LWHT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array Max value(Index)- 1
DataItem AF0LWHX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array Max value(Index)- 2
DataItem AF0LWHX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Season yr (1)
DataItem AF0LWHY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Season yr (2)
DataItem AF0LWHY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist season yr col hdg
DataItem AF0LWHYH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size storage index
DataItem AF0LWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// JCL INTR index
DataItem AF0LWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job Control Language statement
DataItem AF0LWJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL submitted flag
DataItem AF0LWJFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record retrieve loop ctr
DataItem AF0LWLCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error message wk area
DataItem AF0LWMNO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist data sel option val ind 1
DataItem AF0LWOP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist data sel option val ind 2
DataItem AF0LWOP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical selection 1 pcts
DataItem AF0LWPC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 2 pcts
DataItem AF0LWPC2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF5 Valid flag
DataItem AF0LWPF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF6 Valid flag
DataItem AF0LWPF6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current page count
DataItem AF0LWPGV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0LWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size percents
DataItem AF0LWPSZ num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 1 qtys
DataItem AF0LWQT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 2 qtys
DataItem AF0LWQT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 1 wk qty
DataItem AF0LWQW1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 2 wk qty
DataItem AF0LWQW2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record type
DataItem AF0LWRT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk historical as-of-date
DataItem AF0LWSAS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XDVCD
DataItem AF0LWSDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XGACD
DataItem AF0LWSGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XPCCD
DataItem AF0LWSPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XPLCD
DataItem AF0LWSPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XPRCD
DataItem AF0LWSPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style qualify flag
DataItem AF0LWSQU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XSECD
DataItem AF0LWSSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk historical season cd
DataItem AF0LWSSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XSUCD
DataItem AF0LWSSL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk historical season yr
DataItem AF0LWSSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 1 sel ind
DataItem AF0LWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical selection 2 sel ind
DataItem AF0LWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size ID wk array
DataItem AF0LWSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size wk desc array
DataItem AF0LWSZD char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size ID wk display array
DataItem AF0LWSZI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size wk desc display array
DataItem AF0LWSZN char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size wk pcent display array
DataItem AF0LWSZP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical wk total
DataItem AF0LWT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Qty grand total
DataItem AF0LWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current size indicator
DataItem AF0LWVCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current size counter
DataItem AF0LWVCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Valid select fld ind
DataItem AF0LWVLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Validation request ind
DataItem AF0LWVLI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0LWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season yr
DataItem AF0LWXSN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season cd
DataItem AF0LWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0LWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0LWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

