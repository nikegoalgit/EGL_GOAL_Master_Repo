package af08;

import af.common.AFLREC;
import af.common.AFNEVNCD;
import af.common.AFWREC;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPTA0P;
import corpcom3.XSAFS01;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSSE;
import corpcom4.XSPG201;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XGACD;
import corpx1.XGATBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx2.XOWCD;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XSECD;
import corpx2.XSUCD;
import corpy2.YSNTBL;
import pg.common.PG1FCTCD;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1STNBR;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=AF08 ****
// This application allows the user to submit JCL (AF1701) that
// will run the apparel forecast performance report.
// 
// Upon initial entry, the user's own name is given as default
// forecaster.  they may enter further selection criteria such
// as gender age, categoy, or even just a certain style.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 08/26/91            New application.
// 02-15-95   kj       xsn-ysn
// *********************
Program AF08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF08W01 AF08W01; // record
  AF08W02 AF08W02; // record
  AF08W03 AF08W03; // record
  AF08W04 AF08W04; // record
  AFLREC AFLREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AF08T01; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AF08M.AF08M001, // form
  AF08M.XX0XM001,
  AF08M.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the apparel forecast performance process.*/
     /* ------------------------------------------------------------*/
    ;
    set AFWREC empty; /* Initialize working storage*/
    set AFLREC empty; /* Initialize working storage*/
    set AF08W01 empty; /* Initialize working storage*/
    set AF08W02 empty; /* Initialize working storage*/
    set AF08W03 empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF08M001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF08"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "Y"; /* Indicate request for data*/
    AF08W01.AF08WSUB = "N"; /* indicate to submit job*/
    ;
                    /* *//* assign constants*/
    XP1REC.XGPCD = "03";
    XP1REC.XDVCD = "01";
    XP1REC.XDVDESC = "NIKE DOMESTIC";
    ;
                    /* assign map defaults*/
    AF08M001.AF08MVC1 = "02";
    AF08M001.AF08MVC2 = "08";
    AF08M001.AFNEVNCD[1] = "01";
    AF08M001.AFNEVNCD[2] = "02";
    AF08M001.AFNEVNCD[3] = "03";
    AF08M001.AFNEVNCD[4] = "04";
    AF08M001.AFNEVNCD[5] = "05";
    AF08M001.AFNEVNCD[6] = "06";
    AF08M001.AFNEVNCD[7] = "07";
    AF08M001.AFNEVNCD[8] = "08";
    ;
                    /* process passed items*/
    if (XP1REC.XOWCD == " ")
      XP1REC.XOWCD = "00";
      XP1REC.XOWABRV = "N/A";
      XP1REC.XOWDESC = "NOT APPLICABLE";
    end
    ;
    AF08M001.XXXUSER = XP1REC.XXXUSER;
    AF08M001.XSECD = XP1REC.XSECD;
    AF08M001.XSNYR = XP1REC.XSNYR;
    AF08M001.XOWCD = XP1REC.XOWCD;
    AF08M001.XOWABRV = XP1REC.XOWABRV;
    ;
    set AF08M001.XSECD cursor; /* set cursor*/
    ;
    goto AF08100; /* Converse Special Initialization*/
    ;
    ;
    AF08100: AF08100();
     /* *************************************************************/
     /* Flow to converse apparel forecast performance             **/
     /* *************************************************************/
    ;
    goto AF08100;
    ;
    ;
  end // end main
end // end AF08

// Driver process for 100 map
Function AF08100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AF08120(); /* Format and display the map*/
  ;
  AF08130(); /* Check attention identifier*/
  ;
  AF08140(); /* Reset fields to normal intensity*/
  ;
  AF08150(); /* Verify the entered data*/
  ;
  AF08160(); /* Process valid input request*/
  ;
  ;
end // end AF08100

// Format and display the map
Function AF08120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWFIRST != " ")
    if (AF08W01.AF08WPND != "Y")
      if (converseVar.validationMsgNum == 0)
        AF08123();
      else
        AFWREC.AFWNMO = converseVar.validationMsgNum;
      end
    end
  end
  ;
  AF08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* move today's date to map*/
  AF08M001.CATOAP = COMMAREA.CATOAP;
  AF08M001.CAITEM = COMMAREA.CAITEM;
  ;
  if (AFWREC.AFWNMO != 0)
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    AF08M001.XXXPRCNM = AFWREC.AFWERLOC;
    set AF08M001 alarm;
  end
  ;
  converse AF08M001 ;
  ;
   /* clear message work area and save fast path information*/
  AFWREC.AFWNMO = 0; /* info message number*/
  COMMAREA.CATOAP = AF08M001.CATOAP; /* to application*/
  COMMAREA.CAITEM = AF08M001.CAITEM; /* application data*/
  ;
end // end AF08120

// move xp1rec cds & desc to map
Function AF08123()
   /* ------------------------------------------------------------*/
   /* format map data*/
   /* ------------------------------------------------------------*/
  ;
   /* ----------------------*/
   /* clear map fields*/
   /* ----------------------*/
  set AF08M001 initial; /* m001 input/output area*/
  ;
   /* ----------------------*/
   /* clear map fields*/
   /* ----------------------*/
  AF08M001.XXXUSER = XP1REC.XXXUSER;
  AF08M001.XSECD = XP1REC.XSECD;
  AF08M001.XSNYR = XP1REC.XSNYR;
  AF08M001.XGACD = XP1REC.XGACD;
  AF08M001.XGADESC = XP1REC.XGADESC;
  AF08M001.XPLCD = XP1REC.XPLCD;
  AF08M001.XPLDESC = XP1REC.XPLDESC;
  AF08M001.XPCCD = XP1REC.XPCCD;
  AF08M001.XPCDESC = XP1REC.XPCDESC;
  AF08M001.XOWCD = XP1REC.XOWCD;
  AF08M001.XOWABRV = XP1REC.XOWABRV;
  AF08M001.SY1STNBR = XP1REC.SY1STNBR;
  ;
  AF08M001.AF08MVC1 = AF08W01.AF08WVC1;
  AF08M001.AF08MVC2 = AF08W01.AF08WVC2;
  ;
  AF08M001.AFNEVNCD[1] = AF08W03.AFNEVNCD[1];
  AF08M001.AFNEVNCD[2] = AF08W03.AFNEVNCD[2];
  AF08M001.AFNEVNCD[3] = AF08W03.AFNEVNCD[3];
  AF08M001.AFNEVNCD[4] = AF08W03.AFNEVNCD[4];
  AF08M001.AFNEVNCD[5] = AF08W03.AFNEVNCD[5];
  AF08M001.AFNEVNCD[6] = AF08W03.AFNEVNCD[6];
  AF08M001.AFNEVNCD[7] = AF08W03.AFNEVNCD[7];
  AF08M001.AFNEVNCD[8] = AF08W03.AFNEVNCD[8];
  ;
  if (AF08M001.AFNEVNCD[1] == 0)
    set AF08M001.AFNEVNCD[1] invisible;
  end
  if (AF08M001.AFNEVNCD[2] == 0)
    set AF08M001.AFNEVNCD[2] invisible;
  end
  if (AF08M001.AFNEVNCD[3] == 0)
    set AF08M001.AFNEVNCD[3] invisible;
  end
  if (AF08M001.AFNEVNCD[4] == 0)
    set AF08M001.AFNEVNCD[4] invisible;
  end
  if (AF08M001.AFNEVNCD[5] == 0)
    set AF08M001.AFNEVNCD[5] invisible;
  end
  if (AF08M001.AFNEVNCD[6] == 0)
    set AF08M001.AFNEVNCD[6] invisible;
  end
  if (AF08M001.AFNEVNCD[7] == 0)
    set AF08M001.AFNEVNCD[7] invisible;
  end
  if (AF08M001.AFNEVNCD[8] == 0)
    set AF08M001.AFNEVNCD[8] invisible;
  end
    /* set cursor position*/
  ;
  set AF08M001.XSECD cursor; /* cursor at xsecd field*/
  ;
end // end AF08123

// Check attention identifier
Function AF08130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AF08M001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AF08M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSAFS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set AF08M001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AF08M001.CAITEM > " ") /* application data was entered*/
    set AF08M001.CAITEM cursor, modified, bold; /* highlight data*/
    converseLib.validationFailed(7); /* enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* process number*/
    exit stack; /* redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf6 /* or PF6 was pressed*/
   || converseVar.eventKey is pf10) /* or PF10 was pressed*/
    if (converseVar.eventKey is pf1) /* pf1 is pressed*/
      COMMAREA.CAITEM = "AF08M001"; /* appl find code*/
    end
    if (converseVar.eventKey is pf3) /* pf3 is pressed*/
      COMMAREA.CATOAP = "AF04"; /* fluctuations menu*/
    end
    if (converseVar.eventKey is pf6) /* pf6 is pressed*/
      COMMAREA.CATOAP = "AF07"; /* fluctuations menu*/
    end
    if (converseVar.eventKey is pf10) /* pf10 is pressed*/
      COMMAREA.CATOAP = "AF06"; /* snap inq. menu*/
    end
    XSAFS01(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AFWREC.AFWFIRST == " ") /* first time throught*/
    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "130 "; /* process number*/
      converseLib.validationFailed(4); /* indicate invalid attention key*/
      exit stack; /* exit to redisplay map*/
    end
  end
  ;
end // end AF08130

// Reset highlighted fields
Function AF08140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AF08M001.XXXUSER initialAttributes;
  set AF08M001.XSECD initialAttributes;
  set AF08M001.XSNYR initialAttributes;
  set AF08M001.XGACD initialAttributes;
  set AF08M001.XGADESC initialAttributes;
  set AF08M001.AF08MSM1 initialAttributes;
  set AF08M001.XPLCD initialAttributes;
  set AF08M001.XPLDESC initialAttributes;
  set AF08M001.AF08MSM2 initialAttributes;
  set AF08M001.XPCCD initialAttributes;
  set AF08M001.XPCDESC initialAttributes;
  set AF08M001.AF08MSM3 initialAttributes;
  set AF08M001.AF08MSM4 initialAttributes;
  set AF08M001.XOWCD initialAttributes;
  set AF08M001.XOWABRV initialAttributes;
  set AF08M001.AF08MSM5 initialAttributes;
  set AF08M001.SY1STNBR initialAttributes;
  set AF08M001.AF08MDU initialAttributes;
  set AF08M001.AF08MVC1 initialAttributes;
  set AF08M001.AF08MVC2 initialAttributes;
  set AF08M001.AFNEVNCD[1] initialAttributes;
  set AF08M001.AFNEVNCD[2] initialAttributes;
  set AF08M001.AFNEVNCD[3] initialAttributes;
  set AF08M001.AFNEVNCD[4] initialAttributes;
  set AF08M001.AFNEVNCD[5] initialAttributes;
  set AF08M001.AFNEVNCD[6] initialAttributes;
  set AF08M001.AFNEVNCD[7] initialAttributes;
  set AF08M001.AFNEVNCD[8] initialAttributes;
  set AF08M001.VAGen_EZEMSG initialAttributes;
  ;
  ;
  set AF08M001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF08M001.CAITEM initialAttributes; /* Commarea application data*/
  ;
   /* *==========================================*/
   /* if no pop-up windows requested, return*/
   /* *==========================================*/
  ;
  if (AF08M001.XSECD == "?" /* season cd*/
   || AF08M001.XGACD == "?" /* gender/age*/
   || AF08M001.XPLCD == "?" /* product line*/
   || AF08M001.XPCCD == "?" /* category cd*/
   || AF08M001.XOWCD == "?") /* owner group cd*/
    if (converseVar.eventKey not enter) /* enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* process number*/
      converseLib.validationFailed(4); /* indicate key not valid*/
      exit stack; /* exit to display map*/
    end
  else
    AF08W01.AF08WPND = " "; /* deactivate pop-up window ind*/
    return;
  end
  ;
   /* *==========================================*/
  /* pop-up window for xsecd  season code*/
   /* *==========================================*/
  ;
  if (AF08M001.XSECD == "?") /* pop-up window requested*/
    XP1REC.XSECD = AF08M001.XSECD; /* set xp1rec field*/
    XP1REC.XGPCD = "03"; /* display apparel only*/
    XSAFSSE();
    AF08M001.XSECD = XP1REC.XSECD; /* move selection to map fld*/
    XP1REC.XSECD = " "; /* space out wk area*/
  end
  ;
   /* *==========================================*/
  /* pop-up window for xgacd  gender/age code*/
   /* *==========================================*/
  ;
  if (AF08M001.XGACD == "?") /* pop-up window requested*/
    XP1REC.XGACD = AF08M001.XGACD; /* set xp1rec field*/
    XP1REC.XGPCD = "03"; /* display apparel one*/
    XSAFSGA();
    AF08M001.XGACD = XP1REC.XGACD; /* move selection to map fld*/
    XP1REC.XGACD = " "; /* space out wk area*/
  end
  ;
   /* *==========================================*/
  /* pop-up window for xplcd  product line cd*/
   /* *==========================================*/
  ;
  if (AF08M001.XPLCD == "?") /* pop-up window requested*/
    XP1REC.XPLCD = AF08M001.XPLCD; /* set xp1rec field*/
    XP1REC.XGPCD = "03"; /* display apparel one*/
    XSAFSPL();
    AF08M001.XPLCD = XP1REC.XPLCD; /* move selection to map fld*/
    XP1REC.XPLCD = " "; /* space out wk area*/
  end
  ;
   /* *==========================================*/
  /* pop-up window for xpccd  category code*/
   /* *==========================================*/
  ;
  if (AF08M001.XPCCD == "?") /* pop-up window requested*/
    XP1REC.XPCCD = AF08M001.XPCCD; /* set xp1rec field*/
    XP1REC.XGPCD = "03"; /* display apparel one*/
    XSAFSPC();
    AF08M001.XPCCD = XP1REC.XPCCD; /* move selection to map fld*/
    XP1REC.XPCCD = " "; /* space out wk area*/
  end
  ;
   /* *==========================================*/
  /* pop-up window for xowcd  owner group*/
   /* *==========================================*/
  ;
  if (AF08M001.XOWCD == "?") /* pop-up window requested*/
    XP1REC.XOWCD = AF08M001.XOWCD; /* set xp1rec field*/
    XP1REC.XWHCD = "51"; /* display whse 51 only*/
    XSAFSOW();
    AF08M001.XOWCD = XP1REC.XOWCD; /* move selection to map fld*/
    AF08M001.XOWABRV = XP1REC.XOWABRV;
  end
  ;
   /* *==========================================*/
  /* reset map, redisplay changes*/
   /* *==========================================*/
  converseLib.clearScreen();
   /* reset screen before display*/
  AF08W01.AF08WPND = "Y"; /* activate pop-up window ind*/
  exit stack; /* exit to redisplay map*/
  ;
end // end AF08140

// Verify the entered data
Function AF08150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  AF08153(); /* verify map input data;*/
  if (converseVar.validationMsgNum != 0) /* errors found*/
    exit stack; /* exit to redisplay map*/
  else
  end
  ;
  ;
end // end AF08150

// Verify any changed data
Function AF08153()
   /* ------------------------------------------------------------*/
   /* edit selection criteria*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWFIRST = "N"; /* first pass switch to 'off'*/
  XP1REC.XP1MNO = 0; /* initialize msg hold area*/
  ;
  AF08S10(); /* process for all blanks*/
  ;
  if (XP1REC.XP1MNO == 0) /* no errors were found*/
    set AF08W03 empty;
    AF08W01.AF08WIDX = 8;
    while (AF08W01.AF08WIDX > 0) /* until end of codes*/
      if (AF08M001.AFNEVNCD[AF08WIDX] > 0)
        AF08S30(); /* process event code*/
      else
        AF08W03.AFNEVNCD[AF08WIDX] = 0;
      end
      AF08W01.AF08WIDX = AF08W01.AF08WIDX - 1; /* increment line index*/
    end
  end
  ;
  AF08S50(); /* process variance calculation*/
  AF08S55(); /* report options*/
  AF08S05(); /* style*/
  AF08S12(); /* owner group*/
  AF08S15(); /* product category*/
  AF08S45(); /* product line*/
  AF08S20(); /* gender-age*/
  AF08S25(); /* season year*/
  AF08S35(); /* season code*/
  AF08S70(); /* sum*/
  AF08S60(); /* forecaster*/
  ;
  ;
  if (XP1REC.XP1MNO != 0) /* style/size error present*/
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* set message for display*/
  end
  ;
  if (XP1REC.XP1MNO == 0) /* if no errors were found*/
    if (AF08W01.AF08WSUB == "N") /* if job submit flag = no*/
      AF08W01.AF08WSUB = "Y"; /* change job submit flag*/
      converseLib.validationFailed(64); /* confirm data message*/
    end
  end
  ;
  if (converseVar.validationMsgNum != 0) /* erros were found*/
    exit stack;
  end
end // end AF08153

// Process valid input request
Function AF08160()
   /* ------------------------------------------------------------*/
   /* Check for validation errors*/
   /* ------------------------------------------------------------*/
  ;
  AF08W01.AF08WSUB = "N"; /* set submit flag to no*/
  ;
  AF08161(); /* determine region*/
  ;
  set TA6REC empty; /* subroutine work area*/
  ;
  TA6REC.TA6INDEX = 1; /* initialize parameters index*/
  ;
  if (TA3REC.TA3RGNID == "03") /* if production region*/
    AFWREC.AFWIDX1 = 1; /* set index to point at prod jcl*/
  else
    if ("/*EOF" in AF08T01.TARJCL) /* find end of prod jcl*/
      AFWREC.AFWIDX1 = sysVar.arrayIndex;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
    else
      AFWREC.AFWIDX1 = 1;
    end
  end
  ;
   /* --------------------------------------------------------*/
   /* format jcl and parameters into the subroutine work area.*/
   /* --------------------------------------------------------*/
  ;
  while (AFWREC.AFWIDX1 > 0) /* unitl end of table*/
    if (AF08T01.TARTYPE[AFWIDX1] == "P") /* parameters statement*/
      set AF08W02 empty; /* reset parameters statement*/
      AF08W02.XSECD = XP1REC.XSECD;
      AF08W02.PG1FCTCD = XP1REC.PG1FCTCD;
      AF08W02.AF08WXSN = AF08W01.AF08WXSY;
      AF08W02.XGACD = XP1REC.XGACD;
      AF08W02.XPLCD = XP1REC.XPLCD;
      AF08W02.XPCCD = XP1REC.XPCCD;
      AF08W02.XOWCD = XP1REC.XOWCD;
      AF08W02.AF08WSM1 = AF08W01.AF08WSM1;
      AF08W02.AF08WSM2 = AF08W01.AF08WSM2;
      AF08W02.AF08WSM3 = AF08W01.AF08WSM3;
      AF08W02.AF08WSM4 = AF08W01.AF08WSM4;
      AF08W02.AF08WSM5 = AF08W01.AF08WSM5;
      AF08W02.SY1STNBR = XP1REC.SY1STNBR;
      AF08W02.AF08WDU = AF08W01.AF08WDU;
      AF08W02.AF08WVC1 = AF08W01.AF08WVC1;
      AF08W02.AF08WVC2 = AF08W01.AF08WVC2;
      AF08W02.AF08WEV1 = AF08W03.AFNEVNCD[1];
      AF08W02.AF08WEV2 = AF08W03.AFNEVNCD[2];
      AF08W02.AF08WEV3 = AF08W03.AFNEVNCD[3];
      AF08W02.AF08WEV4 = AF08W03.AFNEVNCD[4];
      AF08W02.AF08WEV5 = AF08W03.AFNEVNCD[5];
      AF08W02.AF08WEV6 = AF08W03.AFNEVNCD[6];
      AF08W02.AF08WEV7 = AF08W03.AFNEVNCD[7];
      AF08W02.AF08WEV8 = AF08W03.AFNEVNCD[8];
      ;
      AF08T01.TARJCL[AFWIDX1] = AF08W02.AF08WJCL;
    end
    ;
    if (AF08T01.TARTYPE[AFWIDX1] == "Q") /* parameters statement*/
      set AF08W04 empty; /* reset parameters statement*/
      AF08W04.XSECD = XP1REC.XSECD;
      AF08W04.AF08WYR2 = AF08W01.AF08WXSY;
      AF08T01.TARTYPE[AFWIDX1] = "P";
      ;
      AF08T01.TARJCL[AFWIDX1] = AF08W04.AF08WJCL;
    end
   /* --------------------------------------------------------*/
   /* format the job control language statement from the table*/
   /* --------------------------------------------------------*/
    ;
    TA6REC.TARJCL[TA6INDEX] = AF08T01.TARJCL[AFWIDX1]; /* jcl*/
    TA6REC.TARTYPE[TA6INDEX] = AF08T01.TARTYPE[AFWIDX1]; /* type*/
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms index*/
    ;
   /* --------------------------------------------------------*/
   /* if not end of table, increment the table index*/
   /* --------------------------------------------------------*/
    ;
    if (AF08T01.TARJCL[AFWIDX1] == "/*EOF") /* end of table*/
      AFWREC.AFWIDX1 = 0; /* indicate end of table*/
    else
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* increment table index*/
    end
  end
  ;
  ;
  AF08S75(); /* submit jcl/jobstream for batch run*/
  set AF08M001 initial; /* clear map*/
  ;
   /* --------------------------------------------------------*/
   /* assign defaults to map*/
   /* --------------------------------------------------------*/
  AF08M001.AF08MVC1 = "02";
  AF08M001.AF08MVC2 = "08";
  AF08M001.AFNEVNCD[1] = "01";
  AF08M001.AFNEVNCD[2] = "02";
  AF08M001.AFNEVNCD[3] = "03";
  AF08M001.AFNEVNCD[4] = "04";
  AF08M001.AFNEVNCD[5] = "05";
  AF08M001.AFNEVNCD[6] = "06";
  AF08M001.AFNEVNCD[7] = "07";
  AF08M001.AFNEVNCD[8] = "08";
  ;
  set AF08M001.XSECD cursor; /* cursor at xsecd field*/
  ;
end // end AF08160

// determine region
Function AF08161()
   /* ------------------------------------------------------------*/
    /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /* ------------------------------------------------------------*/
  ;
  set TA3REC empty;
  ;
  TA3REC.TA3OPTN = "ASSIGN ";
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    ;
    AFWREC.AFWPRCSN = "161"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
    ;
  end
  ;
  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    ;
    AFWREC.AFWPRCSN = "161"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
    ;
  end
  ;
  ;
  ;
end // end AF08161

// style edit in selection
Function AF08S05()
   /* ============================================================*/
   /* ===== edit style in selection criteria                 =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
   /* ***************************************************************/
   /* /  check map input for spaces*/
   /* ***************************************************************/
  if (AF08M001.SY1STNBR != XP1REC.SY1STNBR)
    AF08W01.AF08WSUB = "N";
  end
  ;
  if (AF08M001.SY1STNBR == " ")
    XP1REC.SY1STNBR = " "; /* move to wk storage*/
    XP1REC.SY1STYNM = " "; /* move to wk storage*/
    return;
  end
  ;
  XP1REC.SY1STNBR = AF08M001.SY1STNBR; /* save to wk fld*/
  ;
   /* ***************************************************************/
   /* /  get style row from dprodg.vsyclr01*/
   /* ***************************************************************/
  ;
  set PG2REC empty; /* reset record wk area*/
  PG2REC.XGPCD = "03"; /* gpc code*/
  PG2REC.SY1STNBR = AF08M001.SY1STNBR; /* style no. as key*/
  TA1REC.TA1PGMNM = "AF08V22"; /* process name*/
  XSPG201(); /* obtain dprodg.vsyclr01 row*/
  ;
   /* ***************************************************************/
   /* /  check retrieval status*/
   /* ***************************************************************/
  if (SQLCA.VAGen_SQLCODE == 0) /* style row found*/
    XP1REC.SY1STYNM = PG2REC.SY1STYNM; /* style name to wk area*/
  else
    set AF08M001.SY1STNBR cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 33; /* indicate not found*/
    AFWREC.AFWPRCSN = "S05 "; /* process number*/
    XP1REC.SY1STNBR = " "; /* move wk storage*/
    XP1REC.SY1STYNM = " "; /* move wk storage*/
    return;
  end
  ;
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
  ;
  ;
end // end AF08S05

// edit event codes
Function AF08S10()
  /* ===========================================*/
  /* edit event codes*/
  /* ===========================================*/
  ;
  if (AF08M001.AFNEVNCD[1] != AF08W03.AFNEVNCD[1]
   || AF08M001.AFNEVNCD[2] != AF08W03.AFNEVNCD[2]
   || AF08M001.AFNEVNCD[3] != AF08W03.AFNEVNCD[3]
   || AF08M001.AFNEVNCD[4] != AF08W03.AFNEVNCD[4]
   || AF08M001.AFNEVNCD[5] != AF08W03.AFNEVNCD[5]
   || AF08M001.AFNEVNCD[6] != AF08W03.AFNEVNCD[6]
   || AF08M001.AFNEVNCD[7] != AF08W03.AFNEVNCD[7]
   || AF08M001.AFNEVNCD[8] != AF08W03.AFNEVNCD[8])
    AF08W01.AF08WSUB = "N";
  end
  ;
  if (AF08M001.AFNEVNCD[1] == " "
   && AF08M001.AFNEVNCD[2] == " "
   && AF08M001.AFNEVNCD[3] == " "
   && AF08M001.AFNEVNCD[4] == " "
   && AF08M001.AFNEVNCD[5] == " "
   && AF08M001.AFNEVNCD[6] == " "
   && AF08M001.AFNEVNCD[7] == " "
   && AF08M001.AFNEVNCD[8] == " ")
    AFWREC.AFWPRCSN = "S10 "; /* process number*/
    set AF08M001.AFNEVNCD[1] cursor, bold; /* highlight field*/
    set AF08M001.AFNEVNCD[2] bold;
    set AF08M001.AFNEVNCD[3] bold;
    set AF08M001.AFNEVNCD[4] bold;
    set AF08M001.AFNEVNCD[5] bold;
    set AF08M001.AFNEVNCD[6] bold;
    set AF08M001.AFNEVNCD[7] bold;
    set AF08M001.AFNEVNCD[8] bold;
    XP1REC.XP1MNO = 106; /* indicate error message*/
  end
  ;
  ;
end // end AF08S10

// owner group in selection
Function AF08S12()
   /* ============================================================*/
   /* ===== owner group code edit in selection criteria      =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  if (AF08M001.XOWCD != XP1REC.XOWCD)
    AF08W01.AF08WSUB = "N";
  end
  ;
  if (AF08M001.XOWCD == " ") /* xpccd eq spaces*/
    XP1REC.XOWCD = " "; /* space out code*/
    XP1REC.XOWABRV = " "; /* space out desc*/
    AF08M001.XOWABRV = " "; /* space map desc*/
    return;
  end
  ;
  XP1REC.XOWCD = AF08M001.XOWCD; /* save to wk map storage*/
  XP1REC.XWHCD = "51"; /* whse 51 only*/
  ;
  if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
    XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* to wk storage*/
    AF08M001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* to map*/
    return;
  end
  ;
  AFWREC.AFWPRCSN = "S12 "; /* process number*/
  set AF08M001.XOWCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  XP1REC.XOWCD = " "; /* space out code*/
  XP1REC.XOWABRV = " "; /* space out save desc*/
  AF08M001.XOWABRV = " "; /* space out map desc*/
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
end // end AF08S12

// product category edit in selec
Function AF08S15()
   /* ============================================================*/
   /* ===== product category edit in selection criteria      =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  if (AF08M001.XPCCD != XP1REC.XPCCD)
    AF08W01.AF08WSUB = "N";
  end
  ;
  XP1REC.XPCCD = AF08M001.XPCCD; /* save to wk map storage*/
  ;
  if (AF08M001.XPCCD == " ") /* xpccd eq spaces*/
    XP1REC.XPCCD = " "; /* space out code*/
    XP1REC.XPCDESC = " "; /* space out desc*/
    AF08M001.XPCDESC = " "; /* space map desc*/
    return;
  end
  ;
  if (AF08M001.XPCCD in XPCTBL.XPCCD)
    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* apparel cd*/
      XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex]; /* to wk storage*/
      AF08M001.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex]; /* to map*/
      return;
    end
  end
  ;
  AFWREC.AFWPRCSN = "S15 "; /* process number*/
  set AF08M001.XPCCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 35; /* indicate error message*/
  XP1REC.XPCCD = " "; /* space out code*/
  XP1REC.XPCDESC = " "; /* space out save desc*/
  AF08M001.XPCDESC = " "; /* space out map desc*/
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
end // end AF08S15

// gender/age edit in selection
Function AF08S20()
   /* ============================================================*/
   /* ===== gender/age edit in selection criteria            =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  if (AF08M001.XGACD != XP1REC.XGACD)
    AF08W01.AF08WSUB = "N";
  end
  ;
  XP1REC.XGACD = AF08M001.XGACD; /* save to wk map storage*/
  ;
  if (AF08M001.XGACD == " ") /* xgacd eq spaces*/
    XP1REC.XGACD = " "; /* space out code*/
    XP1REC.XGADESC = " "; /* space out wk desc*/
    AF08M001.XGADESC = " "; /* space out map desc*/
    return;
  end
  ;
  if (AF08M001.XGACD in XGATBL.XGACD)
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A" /* active status*/
     && XGATBL.XGPCD[sysVar.arrayIndex] == "03") /* apparel cd*/
      XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* to wk storage*/
      AF08M001.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* to map*/
      return; /* exit to calling process*/
    end
  end
  ;
  AFWREC.AFWPRCSN = "S20 "; /* process name*/
  set AF08M001.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  XP1REC.XGACD = " "; /* space out code*/
  XP1REC.XGADESC = " "; /* space out save desc*/
  AF08M001.XGADESC = " "; /* space out map desc*/
  ;
  ;
end // end AF08S20

// Edit season cd/yr
Function AF08S25()
  /* ==========================================*/
  /* edit season year*/
  /* ==========================================*/
  ;
  if (AF08M001.XSNYR != XP1REC.XSNYR)
    AF08W01.AF08WSUB = "N";
  end
  ;
  AF08W01.AF08WXSY = 0; /* initialize xsnyr wk area*/
  AF08W01.AF08WXSY = AF08M001.XSNYR; /* move to wk area*/
  AF08W01.AF08WXSY = AF08W01.AF08WXSY + 1900; /* move century*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF08W01.AF08WXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF08M001.XSNYR; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S25 "; /* Process number*/
  set AF08M001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0;
end // end AF08S25

// edit event code
Function AF08S30()
  ;
  set AFLREC empty;
  ;
  AFLREC.AFNEVNCD = AF08M001.AFNEVNCD[AF08WIDX];
  AFLREC.XSECD = AF08M001.XSECD;
  AF08W01.AF08WYR = AF08M001.XSNYR + 1900;
  AFLREC.XSNYR = AF08W01.AF08WYR;
  AFLREC.AFLSPSIN = "A";
  ;
  try
    call "IO5980" ("SE", SQLCA, AFLREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      AF08W03.AFNEVNCD[AF08WIDX] = AF08M001.AFNEVNCD[AF08WIDX];
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not on database*/
        converseLib.validationFailed(107); /* code does not exist*/
        XP1REC.XP1MNO = 107;
        AFWREC.AFWPRCSN = "S30 "; /* process number*/
        set AF08M001.AFNEVNCD[AF08WIDX] cursor, bold;
        return;
      end
    end
  end
  ;
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    XP1REC.XP1MNO = 11;
    AFWREC.AFWPRCSN = "S30 "; /* process number*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    XP1REC.XP1MNO = 10;
    AFWREC.AFWPRCSN = "S30 "; /* process number*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  XP1REC.XP1MNO = 101; /* INDICATE ERROR*/
  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  AFWREC.AFWPRCSN = "S30 "; /* process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* error location*/
  TA1REC.TA1LOC = "EDIT EVENT CODES FOR EXISTANCE";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* map name*/
  TA1REC.TA1DBASE = "DACAST "; /* data base name*/
  TA1REC.TA1TBLVU = "VEVENT01"; /* table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* exit to diaplay map*/
  ;
end // end AF08S30

// season code edit in selection
Function AF08S35()
   /* ============================================================*/
   /* =====                                                  =====*/
   /* ===== season code edit in selection criteria           =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  if (AF08M001.XSECD != XP1REC.XSECD)
    AF08W01.AF08WSUB = "N";
  end
  ;
  if (AF08M001.XSECD in XSETBL.XSECD)
    XP1REC.XSECD = AF08M001.XSECD; /* save to working storage*/
  else
    AFWREC.AFWPRCSN = "S35 "; /* process number*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    set AF08M001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/
  end
  ;
  AF08W01.AF08WXSS = " "; /* initialize wk area*/
  AF08W01.AF08WXYR = +0; /* initialize wk area*/
  ;
  AF08W01.AF08WXSS = XP1REC.XSECD; /* to xsecd wk area*/
  AF08W01.AF08WXYR = XP1REC.XSNYR; /* format wk area*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF08W01.AF08WXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
        AFWREC.AFWPRCSN = "S35 "; /* process number*/
        XP1REC.XP1MNO = 26; /* indicate error message*/
        set AF08M001.XSNYR cursor, bold; /* highlight field*/
        XP1REC.XSNYR = 0; /* zero out save area*/
        return;
      end
    end
  end
   /* ====================== END OF PROCESS ======================*/
end // end AF08S35

// product line edit in selection
Function AF08S45()
   /* ============================================================*/
   /* =====   product line  edit in selection criteria       =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  if (AF08M001.XPLCD != XP1REC.XPLCD)
    AF08W01.AF08WSUB = "N";
  end
  ;
  XP1REC.XPLCD = AF08M001.XPLCD; /* save to wk map storage*/
  ;
  if (AF08M001.XPLCD == " ") /* xplcd eq spaces*/
    XP1REC.XPLCD = " "; /* space out code*/
    XP1REC.XPLDESC = " "; /* space out desc*/
    AF08M001.XPLDESC = " "; /* space out map desc*/
    return;
  end
  ;
  if (AF08M001.XPLCD in XPLTBL.XPLCD)
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* apparel cd*/
      XP1REC.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex]; /* to wk storage*/
      AF08M001.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex]; /* to map*/
      return; /* exit to calling process*/
    end
  end
  ;
  AFWREC.AFWPRCSN = "S45 "; /* process number*/
  set AF08M001.XPLCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  XP1REC.XPLCD = " "; /* space out code*/
  XP1REC.XPLDESC = " "; /* space out desc*/
  AF08M001.XPLDESC = " "; /* space out map desc*/
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
end // end AF08S45

// edit variance calculation
Function AF08S50()
  /* ============================================*/
  /* edit variance calculation*/
  /* ============================================*/
  ;
  if (AF08M001.AF08MVC2 != AF08W01.AF08WVC2
   || AF08M001.AF08MVC1 != AF08W01.AF08WVC1)
    AF08W01.AF08WSUB = "N";
  end
  ;
  AF08W01.AF08WVC2 = AF08M001.AF08MVC2;
  AF08W01.AF08WVC1 = AF08M001.AF08MVC1;
  ;
  if (AF08M001.AF08MVC2 == " ")
    AFWREC.AFWPRCSN = "S50 "; /* process number*/
    XP1REC.XP1MNO = 108; /* indicate error message*/
    set AF08M001.AF08MVC2 cursor, bold;
  end
  if (AF08M001.AF08MVC1 == " ")
    AFWREC.AFWPRCSN = "S50 "; /* process number*/
    XP1REC.XP1MNO = 108; /* indicate error message*/
    set AF08M001.AF08MVC1 cursor, bold;
  end
  ;
  if (XP1REC.XP1MNO == 0)
    if (AF08M001.AF08MVC2 in AF08W03.AFNEVNCD)
    else
      AFWREC.AFWPRCSN = "S50 "; /* process number*/
      XP1REC.XP1MNO = 110; /* indicate error message*/
      set AF08M001.AF08MVC2 cursor, bold;
      AF08W01.AF08WVC2 = "  ";
    end
    if (AF08M001.AF08MVC1 in AF08W03.AFNEVNCD)
    else
      AFWREC.AFWPRCSN = "S50 "; /* process number*/
      XP1REC.XP1MNO = 110; /* indicate error message*/
      set AF08M001.AF08MVC1 cursor, bold;
      AF08W01.AF08WVC1 = "  ";
    end
  end
  ;
end // end AF08S50

// edit report options
Function AF08S55()
  /* ======================================================*/
  /* edit report options*/
  /* ======================================================*/
  ;
  if (AF08M001.AF08MDU != AF08W01.AF08WDU)
    AF08W01.AF08WSUB = "N";
  end
  ;
  if (AF08M001.AF08MDU != AF08W01.AF08WDU)
    AF08W01.AF08WSUB = "N";
  end
  ;
  AF08W01.AF08WDU = AF08M001.AF08MDU; /* save to wk map storage*/
  ;
  if (AF08M001.AF08MDU != "D"
   && AF08M001.AF08MDU != "U")
    AFWREC.AFWPRCSN = "S55 "; /* process number*/
    set AF08M001.AF08MDU cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 109; /* indicate error message*/
    AF08W01.AF08WDU = " "; /* space out flag*/
  end
  ;
end // end AF08S55

// Edit forecaster cd
Function AF08S60()
   /* *====================================**/
    /* Check Forecaster Userid for Spaces  **/
   /* *====================================**/
  ;
  if (AF08M001.XXXUSER != AF08W01.AF08WFCT)
    AF08W01.AF08WSUB = "N";
  end
  ;
  if (AF08M001.XXXUSER == " ") /* Forecaster cd = spaces*/
    AF08W01.AF08WFCT = "        "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out Forecaster cd*/
    return; /* Return to calling process*/
  end
  ;
  ;
  AF08W01.AF08WFCT = AF08M001.XXXUSER; /* Move to wk map storage*/
  ;
  ;
   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/
  ;
  set PG1REC empty; /* Clear row storage area*/
  ;
  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF08M001.XXXUSER; /* Forecaster id*/
  ;
  ;
   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/
  ;
  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF08M001.XXXUSER cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S60 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      AF08W01.AF08WFCT = "        "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/
      ;
      /* ***** EXIT PROCESS HERE ******/
      ;
    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AFWREC.AFWPRCSN = "S60 "; /* Process number*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          AFWREC.AFWPRCSN = "S60 "; /* Process number*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          AF08W01.AF08WFCT = AF08M001.XXXUSER; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/
          ;
          /* ***** EXIT PROCESS HERE ******/
          ;
        end
      end
    end
  end
  ;
   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF08V33"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF08M001.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Return to previous process*/
  ;
  ;
  ;
end // end AF08S60

// edit sum values
Function AF08S70()
   /* ------------------------------------------------------------*/
   /* no edits done for the sum fields*/
   /* ------------------------------------------------------------*/
  ;
  if (AF08M001.AF08MSM1 != AF08W01.AF08WSM1
   || AF08M001.AF08MSM2 != AF08W01.AF08WSM2
   || AF08M001.AF08MSM3 != AF08W01.AF08WSM3
   || AF08M001.AF08MSM4 != AF08W01.AF08WSM4
   || AF08M001.AF08MSM5 != AF08W01.AF08WSM5)
    AF08W01.AF08WSUB = "N";
  end
  ;
  AF08W01.AF08WSM1 = AF08M001.AF08MSM1;
  AF08W01.AF08WSM2 = AF08M001.AF08MSM2;
  AF08W01.AF08WSM3 = AF08M001.AF08MSM3;
  AF08W01.AF08WSM4 = AF08M001.AF08MSM4;
  AF08W01.AF08WSM5 = AF08M001.AF08MSM5;
  ;
end // end AF08S70

// Submit JCL via XPTA0P
Function AF08S75()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
  ;
   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/
  ;
  AFWREC.AFWPRCSN = "S75 "; /* Process number*/
  AF08M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(70); /* Indicate job was submitted*/
    set AF08M001.XSECD cursor; /* Set cursor to XSECD field*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    converseLib.validationFailed(71); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF08S75

//*** RECORD=AF08W01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AF08W01 type basicRecord
  10 AF08WSJC AF08WSJC ; 
  10 AF08WXSA AF08WXSA ; 
    15 AF08WXSS AF08WXSS ; 
    15 AF08WXYR AF08WXYR ; 
  10 AF08WIDX AF08WIDX ; 
  10 AF08WXSY AF08WXSY ; 
  10 AF08WYR AF08WYR ; 
  10 AF08WFCT AF08WFCT ; 
  10 AF08WDU AF08WDU ; 
  10 AF08WPND AF08WPND ; 
  10 AF08WVC1 AF08WVC1 ; 
  10 AF08WVC2 AF08WVC2 ; 
  10 AF08WSM1 AF08WSM1 ; 
  10 AF08WSM2 AF08WSM2 ; 
  10 AF08WSM3 AF08WSM3 ; 
  10 AF08WSM4 AF08WSM4 ; 
  10 AF08WSM5 AF08WSM5 ; 
  10 AF08WSUB AF08WSUB ; 
end // end AF08W01

//*** RECORD=AF08W02 ****
// JCL variable storage for AF08 for apparel forecast performan
// ***********************
Record AF08W02 type basicRecord
  10 AF08WJCL AF08WJCL ; 
    15 PG1FCTCD PG1FCTCD ; 
    15 XSECD XSECD ; 
    15 AF08WXSN AF08WXSN ; 
    15 XOWCD XOWCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 XSUCD XSUCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 AF08WSM1 AF08WSM1 ; 
    15 AF08WSM2 AF08WSM2 ; 
    15 AF08WSM3 AF08WSM3 ; 
    15 AF08WSM4 AF08WSM4 ; 
    15 AF08WSM5 AF08WSM5 ; 
    15 AF08WDU AF08WDU ; 
    15 AF08WVC1 AF08WVC1 ; 
    15 AF08WVC2 AF08WVC2 ; 
    15 AF08WEV1 AF08WEV1 ; 
    15 AF08WEV2 AF08WEV2 ; 
    15 AF08WEV3 AF08WEV3 ; 
    15 AF08WEV4 AF08WEV4 ; 
    15 AF08WEV5 AF08WEV5 ; 
    15 AF08WEV6 AF08WEV6 ; 
    15 AF08WEV7 AF08WEV7 ; 
    15 AF08WEV8 AF08WEV8 ; 
    15 * char(30) ; 
end // end AF08W02

//*** RECORD=AF08W03 ****
// ********************************
// working storage table of valid event codes
// ********************************
// ***********************
Record AF08W03 type basicRecord
  10 AFNEVNCD AFNEVNCD [8] ; 
end // end AF08W03

//*** RECORD=AF08W04 ****
// JCL variable storage for AF08 for apparel forecast performan
// ***********************
Record AF08W04 type basicRecord
  10 AF08WJCL AF08WJCL ; 
    15 * char(2) ; 
    15 XSECD XSECD ; 
    15 AF08WYR2 AF08WYR2 ; 
    15 * char(74) ; 
end // end AF08W04

// carryover indicator
DataItem AF08WDU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Show all colors flag
DataItem AF08WEV1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Balance to book operator
DataItem AF08WEV2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// balance to book percentage
DataItem AF08WEV3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast vs purchased operator
DataItem AF08WEV4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst vs purchases variance %
DataItem AF08WEV5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Long and short units operator
DataItem AF08WEV6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LONG AND SHORT UNITS
DataItem AF08WEV7 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// B.L.A. units operator
DataItem AF08WEV8 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AF1082_BLA_CUR_WKND
DataItem AF08WFCT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL table index
DataItem AF08WIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job Control Language statement
DataItem AF08WJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm swutch
DataItem AF08WPND char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Submit JCL (y/n) switch
DataItem AF08WSJC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF08WSM1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF08WSM2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF08WSM3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF08WSM4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF08WSM5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF08WSUB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color percent indicator
DataItem AF08WVC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary indicator
DataItem AF08WVC2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF08WXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_YR_RNG
DataItem AF08WXSN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season cd
DataItem AF08WXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF08WXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF08WXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF08WYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN_SESN_YR_RNG
DataItem AF08WYR2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

