package af02;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPXSE01;
import corpcom3.XPXX001;
import corpcom3.XSAFS01;
import corpcom4.XSPG201;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XDMCD;
import corpx1.XOWTBL;
import corpx1.XSETBL;
import corpx2.XOWCD;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpy2.YSNTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import pc.common.PC2REC;
import pg.common.PG2REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=AF02 ****
// This application is used as summary inquiry into the
// Customer Special Bookings database (DACAST.VADJCU01).
// 
// The Customer Special Bookings rows are selected and saved
// in temporary storage.  The rows are summarized by Style/
// Color/Customer/Need Date.  There is a PFkey to swap between
// AF02 & AF0D (the Customer Speical Bookings Detail).
// 
// A temporary storage queue is shared between the 2 programs
// so that the user can choose a summarized sty/clr/cust/date
// and swap to AF0D and see the detail displayed.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 09/01/92   NMASTE   New application.
// 02/02/93   nmaste   Fixed initial entry loop.
// 02-15-95   kj       xsn-ysn
// 01-02-97   oricha   y2k modifications:  af02-112, 113, 115,
//                     s04, s10, w00, w02, w03.
// 05-28-99   craymo   AF02S10, modified logic to disallow
//                     any data entry beyond SU 2000
// *********************
Program AF02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF02W-00 AF02W-00; // record
  AF02W-02 AF02W-02; // record
  AF02W-03 AF02W-03; // record
  AF02W-04 AF02W-04; // record
  AF1REC AF1REC; // record
  AFBREC AFBREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  PC2REC PC2REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOWTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AF02M.AF02M001, // form
  	AF02M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Forcasting Customer*/
     /* Special Bookings*/
     /* ------------------------------------------------------------*/
    ;
    set AFWREC empty; /* Initialize working storage*/
    set AF02W-00 empty; /* Initialize working storage*/
    set AF02W-02 empty; /* Initialize working storage*/
    set AF02W-03 empty; /* Initialize working storage*/
    set AF02W-04 empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF02M001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF02"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "-000"; /* Initialize process number to zero*/
    ;
    AFWREC.AFWTSL = +1110; /* tsq length*/
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    AFWREC.AFWFIRST = " "; /* First time*/
    ;
    AF02M001.XSECD = XP1REC.XSECD;
    AF02M001.XSNYR = XP1REC.XSNYR;
    ;
     /* ------------------------------------------------------------*/
     /* Protect, darken map array.*/
     /* ------------------------------------------------------------*/
    ;
    AFWREC.AFWIXM = 1; /* line index*/
    while (AFWREC.AFWIXM <= 14)
      ;
      set AF02M001.AF02M-DET-SEL[AFWIXM] skip, invisible;
      set AF02M001.KUCCOID[AFWIXM] skip, invisible;
      set AF02M001.KUCCONM[AFWIXM] skip, invisible;
      set AF02M001.SY1STNBR[AFWIXM] skip, invisible;
      set AF02M001.SY2CLRID[AFWIXM] skip, invisible;
      set AF02M001.XOWCD[AFWIXM] skip, invisible;
      set AF02M001.AF02M-OP-NEED-DT[AFWIXM] skip, invisible;
      set AF02M001.AFBSBKQ[AFWIXM] skip, invisible;
      set AF02M001.AFBSBKDL[AFWIXM] skip, invisible;
      ;
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* inc line index*/
    end
    ;
    ;
    set AF02M001.CATOAP initialAttributes; /* FAST PATH to application*/
    set AF02M001.CAITEM initialAttributes; /* FAST PATH application data*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Do AF02.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF02-100; /* Converse Customer Special Bookings*/
    ;
    ;
    AF02-100: AF02-100();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Customer Speical Bookings process.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF02-100; /* Converse Customer Special Bookings*/
    ;
    ;
  end // end main
end // end AF02

// Driver Process for 100 map
Function AF02-100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AF02-110(); /* Obtain the data to display*/
  ;
  AF02-120(); /* Format and display the map*/
  ;
  AF02-130(); /* Check attention identifier*/
  ;
  AF02-140(); /* Reset fields to normal intensity*/
  ;
  AF02-150(); /* Verify the entered data*/
  ;
  AF02-160(); /* Process valid input request*/
  ;
  ;
end // end AF02-100

// Obtain Data to Display
Function AF02-110()
   /* ------------------------------------------------------------*/
   /* If previous application was AF0D, read, process and purge*/
   /* AF0D tsq.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.AFWFIRST == " ") /* first time through*/
    if (COMMAREA.CAFROMAP == "AF0D" /* from detail program*/
     && XP1REC.XP1MISC2 == "Y"      /* AF0D tsq exists*/
     && XP1REC.XP1MISC1 == "N")     /* AF0D tsq not processed*/
      AF02S-13(); /* read AF0D tsq*/
      AF02S-14(); /* process AF0D tsq*/
      AF02S-15(); /* purge AF0D tsq*/
      XP1REC.XP1MISC1 = "Y"; /* af0D tsq processed*/
      AFWREC.AFWSWR = "Y";
      AFWREC.AFWFIRST = "N";
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWSWR == "N" /* Data was not requested*/
   || AFWREC.XXXMSGNO != 0 /* or an error was found*/
   || converseVar.validationMsgNum != 0) /* error*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  AF02S-02(); /* Purge any temporary storage*/
  AFWREC.AFWTSP = 0; /* reset page select*/
  AFWREC.AFWIDX4 = 0; /* max lines selected*/
  ;
  ;
   /* -----------------------------------------------------------*/
   /* if a customer number specified, get the cust name.*/
   /* -----------------------------------------------------------*/
  ;
  if (AF02M001.AF02M-SEL-CO-ID > 0)
    set KUCREC empty;
    KUCREC.KUCCOID = AF02M001.AF02M-SEL-CO-ID;
    AF02S-06(); /* get customer name*/
    AF02W-04.AF02W-HDR-CO-NM = KUCREC.KUCCONM;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  AF02-112(); /* Select set and open cursor*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* init page index save area*/
   /* ------------------------------------------------------------*/
  ;
  set AF02W-03 empty; /* clear page index save area*/
  AFWREC.AFWIDX4 = 0; /* index max screen lines*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  AF02-113(); /* Fetch selected rows*/
  ;
  while (AFWREC.AFWSWC != "Y") /* Until end of cursor*/
    ;
    if (AFWREC.AFWSWC != "Y") /* not end of cursor*/
      if (AFBREC.XXXSTAT == "A") /* valid row*/
        AF02S-04(); /* load table*/
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (AFWREC.AFWIXM > 14) /* Page is full*/
      AF02S-03(); /* Add page to temporary storage*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWIXM > 1 /* Page was formatted*/
   || AF02W-02.KUCCOID[1] > 0) /* Data in cust id*/
    ;
    while (AFWREC.AFWIXM < 14)
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
      AF02W-02.XXXSTAT[AFWIXM] = "L";
    end
    ;
    AF02S-03(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  ;
  AF02-115(); /* Close the selected set cursor*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.TA5TSQIX == 0) /* No data to display*/
    ;
    AFWREC.AFWPRCSN = "-110"; /* Module identification*/
    AF02M001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    set AF02M001.XSECD cursor, bold; /* Highlight*/
    set AF02M001.XSNYR bold; /* Highlight*/
    if (AF02W-04.AF02W-HDR-CO-ID > " ")
      AF02M001.AF02M-SEL-CO-ID = AF02W-04.AF02W-HDR-CO-ID;
      set AF02M001.AF02M-SEL-CO-ID bold; /* highlight*/
    end
    if (AF02W-04.AF02W-HDR-NEED-DT > 0)
      AF02M001.AF02M-SEL-NEED-DT = AF02W-04.AF02W-HDR-NEED-DT;
      set AF02M001.AF02M-SEL-NEED-DT bold; /* highlight*/
    end
    if (AF02W-04.AF02W-HDR-STY-NBR > " ")
      AF02M001.AF02M-SEL-STY-NBR = AF02W-04.AF02W-HDR-STY-NBR;
      set AF02M001.AF02M-SEL-STY-NBR bold; /* highlight*/
    end
    converseLib.validationFailed(15); /* Indicate no data to display*/
    move "L" to AF02W-02.XXXSTAT[1] for all; /* set screen lines blank*/
    XP1REC.XP1MISC2 = "N"; /* Indicate no tsq*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No error was found*/
    AFWREC.AFWSWR = "N"; /* Request for data switch*/
  end
  ;
  ;
end // end AF02-110

// Select DACAST.VADJCU01
Function AF02-112()
   /* ------------------------------------------------------------*/
   /* Obtain the Customer Special Bookings*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWSWC = "N"; /* End of cursor switch*/
  ;
  set AFBREC empty; /* Clear row storage area*/
  ;
  AFBREC.XSECD = XP1REC.XSECD; /* Sesn Code*/
  AFBREC.XSNYR = XP1REC.XSNYR; /* Sesn Year*/
  ;
  if (AF02W-04.AF02W-HDR-CO-ID <= 0)
    AFBREC.KUCCOID = -1;
  else
    AFBREC.KUCCOID = AF02W-04.AF02W-HDR-CO-ID; /* customer number*/
  end
  ;
  if (AF02W-04.AF02W-HDR-NEED-DT <= 0)
    AFBREC.AFBNDTPR = -1;
  else
    AF02W-00.AF02W-MAP-NEED-DT = AF02W-04.AF02W-HDR-NEED-DT;
    AF02W-00.AF02W-TSQ-YY = AF02W-00.AF02W-MAP-YY;
    AF02W-00.AF02W-TSQ-MM = AF02W-00.AF02W-MAP-MM;
   /* -------- y2k in begin ---------*/
    if (AF02W-00.AF02W-MAP-YY > 65)
      AF02W-00.AF02W-TSQ-CC = 19;
    else
      AF02W-00.AF02W-TSQ-CC = 20;
    end
   /* -------- y2k in begin ---------*/
    AFBREC.AFBNDTPR = AF02W-00.AF02W-TSQ-NEED-DT; /* af_mo need date*/
  end
  ;
  AFBREC.SY1STNBR = AF02W-04.AF02W-HDR-STY-NBR; /* Style number*/
  AFBREC.SY2CLRID = AF02W-04.AF02W-HDR-COLR-CD-ID; /* Style number*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VADJCU02" ("S3", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  AFWREC.AFWPRCSN = "-112"; /* Module identification*/
  AF02M001.XXXPRCNM = AFWREC.AFWERLOC;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AFWREC.AFWERLOC; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU02"; /* Table view name*/
  TA1REC.TA1TBLKE = AFBREC.AFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF02-112

// Fetch DACAST.VADJCU01
Function AF02-113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VADJCU02" ("N3", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      AFWREC.AFWSWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  AFWREC.AFWPRCSN = "-113"; /* Module identification*/
  AF02M001.XXXPRCNM = AFWREC.AFWERLOC;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU02"; /* Table view name*/
  TA1REC.TA1TBLKE = AFBREC.AFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF02-113

// Close DACAST.VADJCU01
Function AF02-115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VADJCU02" ("C3", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  AFWREC.AFWPRCSN = "-115"; /* Module identification*/
  AF02M001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF02-115

// Format and Display the Map
Function AF02-120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  AF02-121(); /* Format the data on the page*/
  ;
  AF02M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  if (AFWREC.XXXMSGNO != 0) /* non system message*/
    if (AFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.XXXMSGNO);
    end /* display message*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AF02M001 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF02M001 ;
  ;
  ;
  AFWREC.AFWSWR = "N"; /* Reset reselect switch*/
  AFWREC.XXXMSGNO = 0; /* Reset information message number*/
  ;
  COMMAREA.CATOAP = AF02M001.CATOAP; /* To Application*/
  COMMAREA.CAITEM = AF02M001.CAITEM; /* Application Data*/
  ;
end // end AF02-120

// Format Data on the Map
Function AF02-121()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWSERCH == "Y"
   && AFWREC.TA5TSQIX > 0) /* pages where formated*/
    AF02-122(); /* find page using select key*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (AFWREC.AFWTSP == 0)
      AFWREC.AFWTSP = 1; /* init 1st page*/
    end
    ;
    ;
    if (AFWREC.AFWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (AFWREC.AFWTSP > AFWREC.TA5TSQIX) /* Desired greater highest*/
        AFWREC.AFWTSP = AFWREC.TA5TSQIX; /* Default to highest*/
      end
      ;
      set AF02M001 initial; /* clear map*/
      ;
      AF02S-01(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen,*/
     /* and saved screen header info*/
    /* ------------------------------------------------------------*/
    ;
    ;
    AF02M001.AF02M-PAGE = AFWREC.AFWTSP; /* Current page*/
    AF02M001.TA5TSQIX = AFWREC.TA5TSQIX; /* Highest page*/
    ;
    ;
  end
  ;
    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/
  ;
   /* IF AF02W-04.AF02W-HDR-SESN-ABRV > 0;*/
  AF02M001.XSECD = AF02W-04.AF02W-HDR-SESN-CD;
  AF02M001.XSNYR = AF02W-04.AF02W-HDR-SESN-YR-RNG;
   /* END;*/
  ;
   /* IF AF02W-04.AF02W-HDR-NEED-DT > 0;*/
  AF02M001.AF02M-SEL-NEED-DT = AF02W-04.AF02W-HDR-NEED-DT;
   /* END;*/
  ;
   /* IF AF02W-04.AF02W-HDR-STY-NBR > ' ';*/
  AF02M001.AF02M-SEL-STY-NBR = AF02W-04.AF02W-HDR-STY-NBR;
   /* END;*/
  ;
   /* IF AF02W-04.AF02W-HDR-CO-ID > 0;*/
  AF02M001.AF02M-SEL-CO-ID = AF02W-04.AF02W-HDR-CO-ID;
  AF02M001.AF02M-SEL-CO-NM = AF02W-04.AF02W-HDR-CO-NM;
   /* END;*/
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  while (AFWREC.AFWIXM <= 14) /* Until end of lines*/
    ;
    if (AF02W-02.XXXSTAT[AFWIXM] != "L") /* Line Has Data*/
      AF02M001.AF02M-DET-SEL[AFWIXM] = AF02W-02.AF02W-DET-SEL[AFWIXM];
      AF02M001.KUCCOID[AFWIXM] = AF02W-02.KUCCOID[AFWIXM];
      AF02M001.KUCCONM[AFWIXM] = AF02W-02.AF02W-CO-NM[AFWIXM];
      AF02M001.SY1STNBR[AFWIXM] = AF02W-02.SY1STNBR[AFWIXM];
      AF02M001.SY2CLRID[AFWIXM] = AF02W-02.SY2CLRID[AFWIXM];
      AF02M001.XOWCD[AFWIXM] = AF02W-02.XOWCD[AFWIXM];
      AF02W-00.AF02W-MAP-YY = AF02W-02.AF02W-NEED-YY[AFWIXM];
      AF02W-00.AF02W-MAP-MM = AF02W-02.AF02W-NEED-MM[AFWIXM];
      AF02M001.AF02M-OP-NEED-DT[AFWIXM] = AF02W-00.AF02W-MAP-NEED-DT;
      AF02M001.AFBSBKQ[AFWIXM] = AF02W-02.AFBSBKQ[AFWIXM];
      AF02M001.AFBSBKDL[AFWIXM] = AF02W-02.AF02W-BOOK-DLR[AFWIXM];
      ;
    else
      ;
      set AF02M001.AF02M-DET-SEL[AFWIXM] skip, invisible; /* select detail*/
      set AF02M001.AFBSBKDL[AFWIXM] skip, invisible; /* dollars*/
      set AF02M001.AFBSBKQ[AFWIXM] skip, invisible; /* qty*/
      set AF02M001.KUCCOID[AFWIXM] skip, invisible; /* customer / xref*/
      set AF02M001.KUCCONM[AFWIXM] skip, invisible; /* customer / name*/
      set AF02M001.SY1STNBR[AFWIXM] skip, invisible; /* style*/
      set AF02M001.SY2CLRID[AFWIXM] skip, invisible; /* color id*/
      set AF02M001.XOWCD[AFWIXM] skip, invisible; /* owner group*/
      set AF02M001.AF02M-OP-NEED-DT[AFWIXM] skip, invisible; /* need dte mm*/
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* if af02w-00.xsecd contains data, user has selected xsecd from*/
   /* table, bypass xp1rec.xsecd and use the tables selected xsecd.*/
   /* --------------------------------------------------------------*/
  ;
  if (AF02W-04.AF02W-HDR-SESN-CD > " ")
    AF02M001.XSECD = AF02W-04.AF02W-HDR-SESN-CD;
    AF02M001.XSNYR = AF02W-04.AF02W-HDR-SESN-YR-RNG;
    ;
  else
    ;
    if (XP1REC.XSECD != " ")
      AF02M001.XSECD = XP1REC.XSECD; /* sesn*/
      AF02M001.XSNYR = XP1REC.XSNYR; /* sesn*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* when a new page has been selected because of a key search*/
   /* set the cursor using afwidx3 from AF02-122*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWSERCH == "T") /* user key search*/
    set AF02M001.AF02M-SEL-STY-NBR cursor;
    set AF02M001.SY1STNBR[AFWIDX3] bold;
  end
  ;
  AFWREC.AFWIDX3 = 0;
  AFWREC.AFWSERCH = " "; /* reset search switch*/
   /* ------------------------------------------------------------*/
end // end AF02-121

// Find next TSQ Page
Function AF02-122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 0; /* set index to zero*/
  AFWREC.AFWIDX2 = 0; /* set index to zero*/
  AF02W-00.AF02W-TSQ-CO-ID = " ";
  AF02W-00.AF02W-TSQ-STY-NBR = " ";
  AF02W-00.AF02W-TSQ-NEED-DT = 0;
  sysVar.arrayIndex = 0;
  ;
  ;
  if (AF02W-00.AF02W-MAP-STY-NBR != " ") /* style entered*/
    ;
    if (AF02W-00.AF02W-MAP-STY-NBR in AF02W-03.SY1STNBR) /* tbl of pages*/
      AFWREC.AFWIDX1 = sysVar.arrayIndex; /* 1st style*/
    end
    ;
  else
    ;
    if (AF02W-00.AF02W-MAP-CO-ID != " ") /* cus xref entered*/
      ;
      if (AF02W-00.AF02W-MAP-CO-ID in AF02W-03.KUCCOID)
        AFWREC.AFWIDX1 = sysVar.arrayIndex; /* 1st cus x-ref*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* ok we have found a starting point in the page table*/
   /* ------------------------------------------------------------*/
  if (sysVar.arrayIndex == 0) /* no starting point*/
    ;
    AFWREC.AFWIDX1 = 1;
    ;
  else
    ;
    AFWREC.AFWIDX1 = sysVar.arrayIndex;
    ;
  end
  ;
  while (AFWREC.AFWIDX1 <= AFWIDX4 /* table max*/
   && AFWREC.AFWSERCH != "T") /* selected page*/
                       /* (style)*/
    if (AF02W-00.AF02W-MAP-STY-NBR != " ") /* from map*/
      AF02W-00.AF02W-TSQ-STY-NBR = AF02W-03.SY1STNBR[AFWIDX1];
    end
                        /* (customer xref)*/
    if (AF02W-00.AF02W-MAP-CO-ID != " ") /* from map*/
      AF02W-00.AF02W-TSQ-CO-ID = AF02W-03.KUCCOID[AFWIDX1];
    end
                        /* (need date )*/
    if (AF02W-00.AF02W-MAP-NEED-DT != 0) /* from map*/
      AF02W-00.AF02W-TSQ-NEED-DT = AF02W-03.AFBNDTPR[AFWIDX1];
    end
    ;
    if (AF02W-00.AF02W-MAP-KEY <= AF02W-00.AF02W-TSQ-KEY) /* page select keys*/
      AFWREC.AFWSERCH = "T"; /* selected page*/
      AFWREC.AFWTSP = AF02W-03.AFWTSP[AFWIDX1]; /* current page*/
      AFWREC.AFWIDX3 = AF02W-03.AF02W-CURR-LINE[AFWIDX1];
      set AF02M001.AF02M-DET-SEL[AFWIDX3] cursor;
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* inc index*/
  end
  ;
  ;
  if (AFWREC.AFWIDX1 > AFWREC.AFWIDX4) /* select key gt than last entry*/
    AFWREC.AFWSERCH = "T"; /* selected page*/
    AFWREC.AFWTSP = AF02W-03.AFWTSP[AFWIDX4]; /* current page*/
    AFWREC.AFWIDX3 = AF02W-03.AF02W-CURR-LINE[AFWIDX4];
    set AF02M001.AF02M-DET-SEL[AFWIDX3] cursor;
  end
end // end AF02-122

// Check Attention Identifier
Function AF02-130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF02M001 initial; /* Clear the map fields*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    if (AFWREC.AFWSWR == "Y") /* Data was requested*/
      ;
      AFWREC.AFWSWR = "N"; /* Request for data switch*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF02M001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      AF02S-02(); /* Purge temporary storage*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      AFWREC.XXXMSGNO = 5; /* Indicate PF key not valid*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/
    ;
    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* force reselect*/
    converseLib.validationFailed(0);
    AFWREC.AFWPRCSN = "-130"; /* Module identification*/
    AF02M001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    set AF02M001.CATOAP cursor, bold; /* Highlight*/
    move "L" to AF02W-02.XXXSTAT[1] for all;
    AFWREC.AFWSWR = "Y"; /* reselect*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF02M001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "AF00"; /* TO application*/
    end
    ;
    AF02S-02(); /* Purge temporary storage*/
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/
    ;
    AFWREC.AFWPRCSN = "-130"; /* Module identification*/
    AF02M001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    AFWREC.AFWFIRST = " ";
    AFWREC.AFWSWR = "Y"; /* reselect*/
    ;
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9)  /* and PF9 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "-130"; /* Module identification*/
    AF02M001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end AF02-130

// Reset the Highlighted Fields
Function AF02-140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  set AF02M001.XSECD initialAttributes; /* sesn code*/
  set AF02M001.XSNYR initialAttributes; /* sesn yr*/
  set AF02M001.AF02M-SEL-NEED-DT initialAttributes; /* need dte mm*/
  set AF02M001.AF02M-SEL-STY-NBR initialAttributes; /* style*/
  set AF02M001.AF02M-SEL-CO-ID initialAttributes; /* customer*/
  set AF02M001.AF02M-PAGE initialAttributes; /* page*/
  ;
  AFWREC.AFWIXM = 1; /* line index*/
  while (AFWREC.AFWIXM <= 14)
    ;
    set AF02M001.AF02M-DET-SEL[AFWIXM] initialAttributes; /* detail selection*/
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* inc line index*/
  end
  ;
  ;
  set AF02M001.CATOAP initialAttributes; /* FAST PATH to application*/
  set AF02M001.CAITEM initialAttributes; /* FAST PATH application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF02M001.XSECD == "?") /* sesn code list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      AF02M001.XXXPRCNM = "-140"; /* Module identification*/
      converseLib.validationFailed(04); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of sesn codes.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF02M001.XSECD == "?") /* sesn code list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "SEASON CODE "; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSE01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX > 0) /* selection made*/
      ;
      AF02M001.XSECD = XSETBL.XSECD[XX0XWPIX]; /* Selected code*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  set AF02M001.XSNYR cursor;
  ;
  return;
  ;
end // end AF02-140

// Verify the Entered Data
Function AF02-150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF02M001.CAITEM > " ") /* Application data was entered*/
    ;
    set AF02M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    AFWREC.AFWPRCSN = "-150 "; /* Process number*/
    AF02M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    AF02-151(); /* Verify scroll request*/
    return;
  end
  ;
  /* *******************************************************/
  /* do not allow user to enter anything past SU 2000  **/
  /* *******************************************************/
  ;
  AF02W-04.AF02W-HDR-SESN-YR-RNG = AF02M001.XSNYR;
  AF02W-04.AF02W-HDR-SESN-CD = AF02M001.XSECD;
  if (AF02W-04.AF02W-HDR-SESN-YR-RNG > 50)
    AF02W-00.XSNYR = AF02W-04.AF02W-HDR-SESN-YR-RNG + 1900;
  else
    AF02W-00.XSNYR = AF02W-04.AF02W-HDR-SESN-YR-RNG + 2000;
  end
  XP1REC.XSNYR = AF02W-00.XSNYR;
  if (AF02W-00.XSNYR == 2000)
    if (AF02M001.XSECD == "FA"
     || AF02M001.XSECD == "HO")
       /* field in error*/
      XP1REC.XSECD = " ";
      AF02W-00.XSNYR = 0;
      XP1REC.XSNYR = 0;
      set AF02M001.XSECD cursor, bold;
      set AF02M001.XSNYR cursor, bold;
      AFWREC.XXXMSGNO = 138; /* invalid sesn*/
      return;
    else
      if (AF02W-00.XSNYR > 2000)
        /* field in error*/
        XP1REC.XSECD = " ";
        AF02W-00.XSNYR = 0;
        XP1REC.XSNYR = 0;
        set AF02M001.XSECD cursor, bold;
        set AF02M001.XSNYR cursor, bold;
        AFWREC.XXXMSGNO = 138; /* invalid sesn*/
        return;
      end
    end
  end
  ;
  if (AF02M001.AF02M-SEL-CO-ID != AF02W-04.AF02W-HDR-CO-ID)
    AFWREC.AFWSWR = "Y";
    AF02S-07(); /* Verify customer*/
  end
  ;
  if (AF02M001.AF02M-SEL-STY-NBR != AF02W-04.AF02W-HDR-STY-NBR)
    AFWREC.AFWSWR = "Y";
    AF02S-08(); /* Verify style*/
  end
  ;
  if (AF02M001.AF02M-SEL-NEED-DT != AF02W-04.AF02W-HDR-NEED-DT)
    AFWREC.AFWSWR = "Y";
    AF02S-09(); /* Verify need date*/
  end
  ;
  if (AF02M001.XSNYR != AF02W-04.AF02W-HDR-SESN-YR-RNG
   || AF02M001.XSECD != AF02W-04.AF02W-HDR-SESN-CD)
    AFWREC.AFWSWR = "Y";
  end
  AF02S-10(); /* Verify season year key data*/
  ;
  if (AFWREC.AFWSWR == "Y" /* If new selection criteria entered*/
   || AFWREC.XXXMSGNO != 0) /* errors exist*/
    AF02W-04.AF02W-HDR-COLR-CD-ID = " ";
    return; /* key changed restart*/
  end
  ;
  ;
  AF02W-00.AF02W-SEL-COUNT = 0;
  AFWREC.AFWIXM = 14; /* Initialize line index*/
  while (AFWREC.AFWIXM > 0) /* Until end of lines*/
    AF02S-11(); /* Verify selections*/
    AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* Decrement line number*/
  end
  ;
  if (AF02W-00.AF02W-SEL-COUNT > 1)
    AFWREC.XXXMSGNO = 124;
    AFWREC.AFWIXM = 14; /* Initialize line index*/
    while (AFWREC.AFWIXM > 0) /* Until end of lines*/
      if (AF02M001.AF02M-DET-SEL[AFWIXM] == "S")
        set AF02M001.AF02M-DET-SEL[AFWIXM] cursor, bold;
      end
      AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* Decrement line number*/
    end
  else
    if (AF02W-00.AF02W-SEL-COUNT > 0)
      if (converseVar.eventKey is enter)
        AFWREC.XXXMSGNO = 126;
        AFWREC.AFWIXM = 14; /* Initialize line index*/
        while (AFWREC.AFWIXM > 0) /* Until end of lines*/
          if (AF02M001.AF02M-DET-SEL[AFWIXM] == "S")
            set AF02M001.AF02M-DET-SEL[AFWIXM] cursor, bold;
          end
          AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* Decrement line number*/
        end
      end
      AF02S-12(); /* update tsq page*/
    else
      if (converseVar.eventKey is pf9) /* if pf9 and nothing selected,*/
        AF02W-02.AF02W-DET-SEL[1] = "S"; /* select first line*/
        AF02S-12(); /* update tsq page*/
      end
    end
  end
  ;
end // end AF02-150

// Validate Scroll
Function AF02-151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && AFWREC.AFWTSP < 2)          /* and no previous pages*/
    ;
    AFWREC.AFWPRCSN = "-151"; /* Module identification*/
    AF02M001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    AF02M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AFWREC.AFWTSP >= AFWREC.TA5TSQIX) /* and no more pages*/
    ;
    AFWREC.AFWPRCSN = "-151"; /* Module identification*/
    AF02M001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    AF02M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end AF02-151

// Process Valid Input Request
Function AF02-160()
   /* -----------------------------------------------------------*/
   /* if edits didn't pass, go back to the top*/
   /* -----------------------------------------------------------*/
  ;
  if (AFWREC.XXXMSGNO > 0)
    exit stack;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* If an Update has been completed save page num.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    AFWREC.AFWTSP = AFWREC.AFWTSP - 1; /* Decrement page number*/
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    AFWREC.AFWTSP = AFWREC.AFWTSP + 1; /* Increment page number*/
    exit stack;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
        /* Transfer to Customer Bookings Detail screen*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf9) /* Bookings Detail*/
    ;
    COMMAREA.CATOAP = "AF0D";
    XP1REC.XP1MISC1 = "N"; /* tells af0d to process af02 tsq*/
    XP1REC.XP1MNO = AFWREC.AFWTSP; /* tsq page to msgno*/
    XSAFS01(); /* transfer to requested application*/
    ;
     /* -----------------------------------------------------*/
     /* if transfer failed, display returned error message.*/
     /* -----------------------------------------------------*/
    ;
    AFWREC.AFWPRCSN = "-160";
    AF02M001.XXXPRCNM = AFWREC.AFWERLOC;
    AFWREC.AFWFIRST = " ";
    AFWREC.AFWSWR = "Y";
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end AF02-160

// Retrieve next TSQ Page
Function AF02S-01()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  AF02W-02.AF02W-TSQ-LEN = AFWREC.AFWTSL; /* Temp storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = AFWREC.AFWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (AF02W-02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF02M001.XXXPRCNM = "S-02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF02M001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF02S-01

// Purge Temporary Storage
Function AF02S-02()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set AF02W-02 empty; /* M001 display storage*/
  ;
  AFWREC.AFWSWU = "N"; /* Storage update switch*/
  ;
  AFWREC.TA5TSQIX = 0; /* Highest page number*/
  AFWREC.AFWIXM = 1; /* Display line number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (AF02W-02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    XP1REC.XP1MISC2 = "N"; /* Indicate no tsq*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF02M001.XXXPRCNM = "AF02S-03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF02M001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF02S-02

// Add Temporary Storage Page
Function AF02S-03()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  AF02W-02.AF02W-TSQ-LEN = AFWREC.AFWTSL; /* Temp storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (AF02W-02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    XP1REC.XP1MISC2 = "Y"; /* Indicate tsq exists*/
    ;
    set AF02W-02 empty; /* M001 display storage*/
    ;
    AFWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    AFWREC.AFWIXM = 1; /* Display line number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF02M001.XXXPRCNM = "AF02S-04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF02M001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF02S-03

// load temp storage table
Function AF02S-04()
   /* ----------------------------------------------------*/
    /* if cust id, style, color & need date are the same,*/
    /* add spcl book qty & spcl book dlr*/
   /* ----------------------------------------------------*/
  ;
  if (AFBREC.KUCCOID == AF02W-02.KUCCOID[AFWIXM]) /* cu ids equal*/
    if (AFBREC.SY1STNBR == AF02W-02.SY1STNBR[AFWIXM]) /* stys equal*/
      if (AFBREC.SY2CLRID == AF02W-02.SY2CLRID[AFWIXM]) /* clrs equal*/
        /* --------y2k in begin --------*/
        if (AF02W-02.AF02W-NEED-DT > 0)
          if (AF02W-02.AF02W-NEED-YY > 65)
            AF02W-02.AF02W-NEED-CC = 19;
          else
            AF02W-02.AF02W-NEED-CC = 20;
          end
        end
        /* --------y2k in end ----------*/
        if (AFBREC.AFBNDTPR == AF02W-02.AF02W-NEED-DT[AFWIXM]) /* date equal*/
          AF02W-02.AFBSBKQ[AFWIXM] = AF02W-02.AFBSBKQ[AFWIXM]           + AFBREC.AFBSBKQ;
          AF02W-00.AF02W-TEMP-DLR = 0;
          AF02W-TEMP-DLR = mathLib.round(AFBREC.AFBSBKQ * AFBREC.AFBSBKDL, -mathLib.decimals(AF02W-TEMP-DLR));
          AF02W-02.AF02W-BOOK-DLR[AFWIXM] = AF02W-02.AF02W-BOOK-DLR[AFWIXM]           + AF02W-TEMP-DLR;
        else
          AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
          if (AFWREC.AFWIXM > 14)
            return;
          else
            AF02S-05(); /* move to table*/
          end
        end
      else
        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
        if (AFWREC.AFWIXM > 14)
          return;
        else
          AF02S-05(); /* move to table*/
        end
      end
    else
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
      if (AFWREC.AFWIXM > 14)
        return;
      else
        AF02S-05(); /* move to table*/
      end
    end
  else
    if (AFWREC.AFWIXM == 1) /* first time*/
      AF02S-05(); /* move to table*/
    else
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
      if (AFWREC.AFWIXM > 14)
        return;
      else
        AF02S-05(); /* move to table*/
      end
    end
  end
  ;
  AF02-113(); /* fetch next row*/
  ;
end // end AF02S-04

// move to table
Function AF02S-05()
  AF02W-02.KUCCOID[AFWIXM] = AFBREC.KUCCOID;
  set KUCREC empty;
  AF02W-00.AF02W-TSQ-CO-ID = AFBREC.KUCCOID; /* cust id*/
  KUCREC.KUCCOID = AFBREC.KUCCOID; /* cust id*/
  AF02S-06(); /* get customer name for temp storage*/
  AF02W-02.AF02W-CO-NM[AFWIXM] = KUCREC.KUCCONM; /* abrv cust nm*/
  AF02W-02.SY1STNBR[AFWIXM] = AFBREC.SY1STNBR; /* style*/
  AF02W-02.SY2CLRID[AFWIXM] = AFBREC.SY2CLRID; /* color*/
  AF02W-02.AF02W-NEED-DT[AFWIXM] = AFBREC.AFBNDTPR; /* need date*/
  AF02W-02.AFBSBKQ[AFWIXM] = AF02W-02.AFBSBKQ[AFWIXM]   + AFBREC.AFBSBKQ; /* qty*/
  AF02W-00.AF02W-TEMP-DLR = 0;
  AF02W-00.AF02W-TEMP-DLR = mathLib.round(AFBREC.AFBSBKQ * AFBREC.AFBSBKDL, -mathLib.decimals(AF02W-00.AF02W-TEMP-DLR));
  AF02W-02.AF02W-BOOK-DLR[AFWIXM] = AF02W-02.AF02W-BOOK-DLR[AFWIXM]   + AF02W-00.AF02W-TEMP-DLR;
  AF02W-02.AFBTXT1[AFWIXM] = AFBREC.AFBTXT1; /* text 1*/
  AF02W-02.XDMCD[AFWIXM] = AFBREC.XDMCD; /* dimension code*/
  AF02W-02.XSECD[AFWIXM] = AFBREC.XSECD; /* sesn code*/
  AF02W-02.XOWCD[AFWIXM] = AFBREC.XOWCD; /* owner group code*/
  AF02W-02.AFBTXT2[AFWIXM] = AFBREC.AFBTXT2; /* text 2*/
  AF02W-02.XSNYR[AFWIXM] = AFBREC.XSNYR; /* season year*/
  AF02W-02.XXXSTAT[AFWIXM] = AFBREC.XXXSTAT; /* status*/
  AF02W-02.ZZZCHGDT[AFWIXM] = AFBREC.ZZZCHGDT; /* chg date*/
  AF02W-02.ZZZCHGTM[AFWIXM] = AFBREC.ZZZCHGTM; /* chg time*/
  AF02W-02.ZZZCHGCT[AFWIXM] = AFBREC.ZZZCHGCT; /* chg count*/
  ;
                  /* (build index of temp storage pages)*/
  ;
  AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1;
  if (AFWREC.AFWIDX4 > 500)
    AFWREC.AFWSWC = "Y";
    converseLib.validationFailed(89); /* more data than can be shown*/
  else
    AF02W-03.SY1STNBR[AFWIDX4] = AFBREC.SY1STNBR; /* style*/
    AF02W-03.AFBNDTPR[AFWIDX4] = AFBREC.AFBNDTPR; /* need dte*/
    ;
    AF02W-03.KUCCOID[AFWIDX4] = AFBREC.KUCCOID; /* cus x-ref*/
    AF02W-03.AF02W-CURR-LINE[AFWIDX4] = AFWREC.AFWIXM; /* scrn line*/
    AF02W-03.AFWTSP[AFWIDX4] = AFWREC.TA5TSQIX + 1;
  end
  ;
  ;
  ;
  return; /* Return to previous process*/
  ;
  ;
  ;
end // end AF02S-05

// Get Customer Name
Function AF02S-06()
   /* -------------------------------*/
   /* obtain the customer name*/
   /* -------------------------------*/
  ;
  ;
  try
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* -------------------------------*/
   /* if successful, return with name*/
   /* -------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return;
    ;
  else
    ;
    KUCREC.KUCCONM = "NOT AVAILABLE"; /* if name not found, fill*/
    ;
  end
  ;
end // end AF02S-06

// Edit Customer
Function AF02S-07()
   /* ============================================================*/
   /* ===== edit Customer from header selection              =====*/
   /* ============================================================*/
  ;
  ;
  if (AF02M001.AF02M-SEL-CO-ID == 0)
    AF02W-04.AF02W-HDR-CO-ID = AF02M001.AF02M-SEL-CO-ID;
    AF02M001.AF02M-SEL-CO-NM = " ";
    AF02W-04.AF02W-HDR-CO-NM = AF02M001.AF02M-SEL-CO-NM;
    return;
  end
  ;
  ;
  KUCREC.KUCCOID = AF02M001.AF02M-SEL-CO-ID;
  ;
  ;
   /* -------------------------------*/
   /* obtain the customer name*/
   /* -------------------------------*/
  ;
  try
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* -------------------------------*/
   /* if successful, return with name*/
   /* -------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    AF02W-04.AF02W-HDR-CO-ID = KUCREC.KUCCOID;
    AF02W-04.AF02W-HDR-CO-NM = KUCREC.KUCCONM;
    ;
    return;
    ;
  else
    ;
    if (SQLCA.VAGen_SQLCODE == 100)
      AF02M001.AF02M-SEL-CO-NM = " ";
      AF02W-04.AF02W-HDR-CO-ID = 0;
      AF02W-04.AF02W-HDR-CO-NM = " ";
      set AF02M001.AF02M-SEL-CO-ID cursor, bold;
      AFWREC.XXXMSGNO = 24;
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF02M001.XXXPRCNM = "AF02S-07"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "EDIT CUSTOMER                   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF02M001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = "S-07"; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end AF02S-07

// Edit Style
Function AF02S-08()
   /* ============================================================*/
   /* ===== edit Style from header selection                 =====*/
   /* ============================================================*/
  ;
  ;
  if (AF02M001.AF02M-SEL-STY-NBR == " ")
    AF02W-04.AF02W-HDR-STY-NBR = AF02M001.AF02M-SEL-STY-NBR;
    return;
  end
  ;
  ;
  PG2REC.XGPCD = "03";
  PG2REC.SY1STNBR = AF02M001.AF02M-SEL-STY-NBR;
  ;
  XSPG201(); /* validate gpc/style*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    AF02W-04.AF02W-HDR-STY-NBR = AF02M001.AF02M-SEL-STY-NBR;
    return;
  else
    AF02W-04.AF02W-HDR-STY-NBR = " ";
    set AF02M001.AF02M-SEL-STY-NBR cursor, bold;
    AFWREC.XXXMSGNO = 033; /* invalid style*/
  end
  ;
  ;
end // end AF02S-08

// Edit Need Date
Function AF02S-09()
   /* ============================================================*/
   /* ===== edit Need Date from header selection             =====*/
   /* ============================================================*/
  ;
  ;
  if (AF02M001.AF02M-SEL-NEED-DT == 0) /* header need date*/
    AF02W-04.AF02W-HDR-NEED-DT = AF02M001.AF02M-SEL-NEED-DT;
    return;
  end
  ;
  ;
  AF02W-04.AF02W-HDR-NEED-DT = AF02M001.AF02M-SEL-NEED-DT;
  if (AF02W-04.AF02W-HDR-MM > 12
   || AF02W-04.AF02W-HDR-MM < 1)
    AF02W-04.AF02W-HDR-NEED-DT = 0;
    set AF02M001.AF02M-SEL-NEED-DT cursor, bold;
    AFWREC.XXXMSGNO = 022; /* invalid date*/
  end
  ;
  ;
end // end AF02S-09

// Edit Season
Function AF02S-10()
   /* ============================================================*/
   /* ===== edit Season from header selection                =====*/
   /* ============================================================*/
  ;
  ;
   /* ------------- y2k out begin -----------*/
   /* IF AF02M001.XSNYR EQ 0;*/
    /* MOVE 0 TO AF02W-04.AF02W-HDR-SESN-YR-RNG;*/
    /* MOVE 0 TO XP1REC.XSNYR;*/
    /* SET AF02M001.XSNYR CURSOR,BRIGHT;*/
    /* MOVE 026 TO AFWREC.XXXMSGNO;   /* invalid sesn*/
   /* ELSE;*/
   /* ------------- y2k out end -------------*/
  ;
  AF02W-04.AF02W-HDR-SESN-YR-RNG = AF02M001.XSNYR;
  if (AF02W-04.AF02W-HDR-SESN-YR-RNG > 50)
    AF02W-00.XSNYR = AF02W-04.AF02W-HDR-SESN-YR-RNG + 1900;
  else
    AF02W-00.XSNYR = AF02W-04.AF02W-HDR-SESN-YR-RNG + 2000;
  end
  XP1REC.XSNYR = AF02W-00.XSNYR;
   /* ------------- y2k out begin -----------*/
   /* end;*/
   /* ------------- y2k out end -------------*/
  ;
  if (AF02M001.XSECD == " ")
    AF02W-04.AF02W-HDR-SESN-CD = " ";
    XP1REC.XSECD = " ";
    set AF02M001.XSECD cursor, bold;
    AFWREC.XXXMSGNO = 016; /* invalid sesn*/
  else
    AF02W-04.AF02W-HDR-SESN-CD = AF02M001.XSECD;
    XP1REC.XSECD = AF02M001.XSECD;
  end
  ;
  ;
  if (AF02M001.XSECD == " "
  ) /* ------------- y2k out begin -----------*/
   /* OR AF02M001.XSNYR EQ 0;*/
   /* ------------- y2k out end -------------*/
    return;
  end
  ;
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999)
    if (YSNTBL.XSNABRV[AFWIDX5]
     == AF02W-04.AF02W-HDR-SESN-ABRV
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      AFWREC.AFWIDX5 = 9999;
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AF02W-04.AF02W-HDR-SESN-CD = " ";
        XP1REC.XSECD = " ";
        AF02W-04.AF02W-HDR-SESN-YR-RNG = 0;
        AF02W-00.XSNYR = 0;
        XP1REC.XSNYR = 0;
        set AF02M001.XSECD cursor, bold;
        set AF02M001.XSNYR bold;
        AFWREC.XXXMSGNO = 067; /* invalid sesn*/
        AFWREC.AFWIDX5 = 9999;
      end
    end
  end
  ;
end // end AF02S-10

// Edit Selections
Function AF02S-11()
  /* ------------------------------------------------------------*/
   /* Edit Selections*/
   /* ------------------------------------------------------------*/
  ;
             /* line  must contain data*/
  if (AF02W-02.XXXSTAT[AFWIXM] != "L") /* Line Has Data*/
                          /* (detail flag)*/
    if (AF02M001.AF02M-DET-SEL[AFWIXM] != " "
     && AF02M001.AF02M-DET-SEL[AFWIXM] != "S")
      set AF02M001.AF02M-DET-SEL[AFWIXM] cursor, bold;
      AFWREC.XXXMSGNO = 123;
    end
    ;
    AF02W-02.AF02W-DET-SEL[AFWIXM] = AF02M001.AF02M-DET-SEL[AFWIXM];
    ;
    if (AF02M001.AF02M-DET-SEL[AFWIXM] == "S")
      AF02W-00.AF02W-SEL-COUNT = AF02W-00.AF02W-SEL-COUNT + 1;
      return;
    end
    ;
  end
  ;
  ;
  ;
end // end AF02S-11

// Update TSQ page
Function AF02S-12()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (XP1REC.XP1MISC2 != "Y") /* tsq exists*/
    return;
  end
  ;
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  TA5REC.TA5TSQIX = AFWREC.AFWTSP; /* tsq page to update*/
  ;
  try
    call "TA0050" (AF02W-02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF02M001.XXXPRCNM = "AF02S-12"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF02M001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF02S-12

// Read AF0D tsq
Function AF02S-13()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  AF02W-02.AF02W-TSQ-LEN = AFWREC.AFWTSL;
  TA5REC.TA5APPID = "AF0D"; /* Application identification*/
  TA5REC.TA5TSQIX = XP1REC.XP1MNO; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (AF02W-02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF02M001.XXXPRCNM = "S-14"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF02M001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF02S-13

// Process AF0D tsq
Function AF02S-14()
   /* -------------------------------------------------------------*/
       /* move AF0D tsq selection to af02w-04*/
   /* -------------------------------------------------------------*/
  ;
  AFWREC.AFWIXM = 1;
  ;
  while (AFWIXM <= 14)
    if (AF02W-02.AF02W-DET-SEL[AFWIXM] == "S")
      AF02W-04.AF02W-HDR-YY = AF02W-02.AF02W-NEED-YY[AFWIXM];
      AF02W-04.AF02W-HDR-MM = AF02W-02.AF02W-NEED-MM[AFWIXM];
      AF02M001.AF02M-SEL-NEED-DT = AF02W-04.AF02W-HDR-NEED-DT;
      AF02W-04.AF02W-HDR-STY-NBR = AF02W-02.SY1STNBR[AFWIXM];
      AF02M001.AF02M-SEL-STY-NBR = AF02W-04.AF02W-HDR-STY-NBR;
      AF02W-04.AF02W-HDR-COLR-CD-ID = AF02W-02.SY2CLRID[AFWIXM];
      AF02W-04.AF02W-HDR-CO-ID = AF02W-02.KUCCOID[AFWIXM];
      AF02M001.AF02M-SEL-CO-ID = AF02W-04.AF02W-HDR-CO-ID;
      AF02W-04.AF02W-HDR-CO-NM = AF02W-02.AF02W-CO-NM[AFWIXM];
      AF02W-04.AF02W-HDR-SESN-CD = AF02W-02.XSECD[AFWIXM];
      AF02M001.XSECD = AF02W-04.AF02W-HDR-SESN-CD;
      AF02W-00.AF02W-SESN-YEAR = AF02W-02.XSNYR[AFWIXM];
      AF02W-04.AF02W-HDR-SESN-YR-RNG = AF02W-00.AF02W-SESN-YY;
      AF02M001.XSNYR = AF02W-04.AF02W-HDR-SESN-YR-RNG;
      AFWIXM = 14;
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    ;
  end
  ;
  ;
end // end AF02S-14

// Purge AF0D tsq
Function AF02S-15()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set AF02W-02 empty; /* M001 display storage*/
  ;
  AFWREC.AFWSWU = "N"; /* Storage update switch*/
  ;
  AFWREC.TA5TSQIX = 0; /* Highest page number*/
  AFWREC.AFWIXM = 1; /* Display line number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = "AF0D"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (AF02W-02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    XP1REC.XP1MISC2 = "N"; /* indicate no tsq*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF02M001.XXXPRCNM = "S-15"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF02M001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF02S-15

//*** RECORD=AF02W-00 ****
// AF02 WORKING STORAGE RECORD
// ************************
Record AF02W-00 type basicRecord
  5 AF02W-MAP-KEY AF02W-MAP-KEY ; 
    10 AF02W-MAP-CO-ID AF02W-MAP-CO-ID ; 
    10 AF02W-MAP-STY-NBR AF02W-MAP-STY-NBR ; 
    10 AF02W-MAP-NEED-DT AF02W-MAP-NEED-DT ; 
      15 AF02W-MAP-MM AF02W-MAP-MM ; 
      15 AF02W-MAP-YY AF02W-MAP-YY ; 
  5 AF02W-TSQ-KEY AF02W-TSQ-KEY ; 
    10 AF02W-TSQ-CO-ID AF02W-TSQ-CO-ID ; 
    10 AF02W-TSQ-STY-NBR AF02W-TSQ-STY-NBR ; 
    10 AF02W-TSQ-NEED-DT AF02W-TSQ-NEED-DT ; 
      15 AF02W-TSQ-CC AF02W-TSQ-CC ; 
      15 AF02W-TSQ-YY AF02W-TSQ-YY ; 
      15 AF02W-TSQ-MM AF02W-TSQ-MM ; 
  5 XSECD XSECD ; 
  5 XSNYR XSNYR ; 
  5 AF02W-SESN-YEAR AF02W-SESN-YEAR ; 
    10 AF02W-SESN-CC AF02W-SESN-CC ; 
    10 AF02W-SESN-YY AF02W-SESN-YY ; 
  5 AF02W-SESN-ABRV AF02W-SESN-ABRV ; 
    10 AF02W-SESN-CD AF02W-SESN-CD ; 
    10 AF02W-SESN-YR AF02W-SESN-YR ; 
  5 AF02W-CO-NM AF02W-CO-NM ; 
  5 AF02W-BEG-OFFER-DT AF02W-BEG-OFFER-DT ; 
    10 AF02W-BEG-OFFER-CC AF02W-BEG-OFFER-CC ; 
    10 AF02W-BEG-OFFER-YY AF02W-BEG-OFFER-YY ; 
    10 AF02W-BEG-OFFER-MM AF02W-BEG-OFFER-MM ; 
  5 AF02W-END-OFFER-DT AF02W-END-OFFER-DT ; 
    10 AF02W-END-OFFER-CC AF02W-END-OFFER-CC ; 
    10 AF02W-END-OFFER-YY AF02W-END-OFFER-YY ; 
    10 AF02W-END-OFFER-MM AF02W-END-OFFER-MM ; 
  5 AF02W-HOLD-DATE AF02W-HOLD-DATE ; 
    10 AF02W-HOLD-CC AF02W-HOLD-CC ; 
    10 AF02W-HOLD-YY AF02W-HOLD-YY ; 
    10 AF02W-HOLD-MM AF02W-HOLD-MM ; 
    10 AF02W-HOLD-DD AF02W-HOLD-DD ; 
  5 AF02W-SEL-COUNT AF02W-SEL-COUNT ; 
  5 AF02W-TEMP-DLR AF02W-TEMP-DLR ; 
end // end AF02W-00

//*** RECORD=AF02W-02 ****
// ******************** saved forecast ************************
// 
// DB2 TABLE:           xxxxxx.xxxxxxxx
// 
// COPYLIB MEMBER:      xxxxxxxxx
// 
// I/O MOD:             IOxxxx
// 
// KEY TO DB2 TABLE:    xgpcd
//                      xsecd
//                      sy2sesny
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      kuccoid
// 
// DATE CREATED:        09/01/92
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 09-01-92   nam       INITIAL RECORD CREATION
// ************************
Record AF02W-02 type basicRecord
  5 AF02W-TSQ-LEN AF02W-TSQ-LEN ; 
  5 AF02W-GROUP AF02W-GROUP [14] ; 
    10 AF02W-KEY AF02W-KEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 XOWCD XOWCD ; 
      15 AF02W-NEED-DT AF02W-NEED-DT ; 
        20 AF02W-NEED-CC AF02W-NEED-CC ; 
        20 AF02W-NEED-YY AF02W-NEED-YY ; 
        20 AF02W-NEED-MM AF02W-NEED-MM ; 
    10 AF02W-CO-NM AF02W-CO-NM ; 
    10 AFBTXT1 AFBTXT1 ; 
    10 AFBTXT2 AFBTXT2 ; 
    10 AFBSBKQ AFBSBKQ ; 
    10 AF02W-BOOK-DLR AF02W-BOOK-DLR ; 
    10 XXXSTAT XXXSTAT ; 
    10 KUCCOID KUCCOID ; 
    10 AF02W-DET-SEL AF02W-DET-SEL ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end AF02W-02

//*** RECORD=AF02W-03 ****
// Customer Speical Bookings
// This Record is used for locating temporary storage page
// when a search key is entered in af02m001 screen header
// ************************
Record AF02W-03 type basicRecord
  5 AF02W-GROUP2 AF02W-GROUP2 [500] ; 
    10 KUCCOID KUCCOID ; 
    10 SY1STNBR SY1STNBR ; 
    10 AFBNDTPR AFBNDTPR ; 
    10 AFWTSP AFWTSP ; 
    10 AF02W-CURR-LINE AF02W-CURR-LINE ; 
end // end AF02W-03

//*** RECORD=AF02W-04 ****
// AF02 MAP COMPARISON AREA
// ************************
Record AF02W-04 type basicRecord
  10 AF02W-HDR-SESN-ABRV AF02W-HDR-SESN-ABRV ; 
    15 AF02W-HDR-SESN-CD AF02W-HDR-SESN-CD ; 
    15 AF02W-HDR-SESN-YR-RNG AF02W-HDR-SESN-YR-RNG ; 
  10 AF02W-HDR-NEED-DT AF02W-HDR-NEED-DT ; 
    15 AF02W-HDR-MM AF02W-HDR-MM ; 
    15 AF02W-HDR-YY AF02W-HDR-YY ; 
  10 AF02W-HDR-STY-NBR AF02W-HDR-STY-NBR ; 
  10 AF02W-HDR-COLR-CD-ID AF02W-HDR-COLR-CD-ID ; 
  10 AF02W-HDR-CO-ID AF02W-HDR-CO-ID ; 
  10 AF02W-HDR-CO-NM AF02W-HDR-CO-NM ; 
  10 AF02W-HOLD-DLR AF02W-HOLD-DLR ; 
end // end AF02W-04

DataItem AF02W-BEG-OFFER-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beg offer date w/o day
DataItem AF02W-BEG-OFFER-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem AF02W-BEG-OFFER-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AF02W-BEG-OFFER-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust spcl book dlr
DataItem AF02W-BOOK-DLR decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer num for name lookup
DataItem AF02W-CO-NM char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current screen line
DataItem AF02W-CURR-LINE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail select flag
DataItem AF02W-DET-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF02W-END-OFFER-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending offer date w/o day
DataItem AF02W-END-OFFER-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem AF02W-END-OFFER-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AF02W-END-OFFER-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group item for record level
DataItem AF02W-GROUP char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group item for record level
DataItem AF02W-GROUP2 char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer num from map
DataItem AF02W-HDR-CO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer name from map
DataItem AF02W-HDR-CO-NM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style from map
DataItem AF02W-HDR-COLR-CD-ID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need month from map
DataItem AF02W-HDR-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date from map
DataItem AF02W-HDR-NEED-DT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season abrv from map
DataItem AF02W-HDR-SESN-ABRV char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season code from map
DataItem AF02W-HDR-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season yr rng from map
DataItem AF02W-HDR-SESN-YR-RNG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style from map
DataItem AF02W-HDR-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need year from map
DataItem AF02W-HDR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold century
DataItem AF02W-HOLD-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold for beg and end date
DataItem AF02W-HOLD-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold day
DataItem AF02W-HOLD-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold $ for calcs
DataItem AF02W-HOLD-DLR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold month
DataItem AF02W-HOLD-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold year
DataItem AF02W-HOLD-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// afbrec key
DataItem AF02W-KEY char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 9 digit Cus X-ref
DataItem AF02W-MAP-CO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// search key from map
DataItem AF02W-MAP-KEY char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem AF02W-MAP-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date
DataItem AF02W-MAP-NEED-DT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style
DataItem AF02W-MAP-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem AF02W-MAP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order need century
DataItem AF02W-NEED-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order Need Date
DataItem AF02W-NEED-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order need month
DataItem AF02W-NEED-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order need year
DataItem AF02W-NEED-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count # selections
DataItem AF02W-SEL-COUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sesn cd sesn yy
DataItem AF02W-SESN-ABRV char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season Century
DataItem AF02W-SESN-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season code
DataItem AF02W-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season Year century + year
DataItem AF02W-SESN-YEAR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season yy
DataItem AF02W-SESN-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season Year
DataItem AF02W-SESN-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp dollars
DataItem AF02W-TEMP-DLR num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF02W-TSQ-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 9 digit Cus X-ref
DataItem AF02W-TSQ-CO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// search key from tps
DataItem AF02W-TSQ-KEY char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage page length
DataItem AF02W-TSQ-LEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem AF02W-TSQ-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date
DataItem AF02W-TSQ-NEED-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style
DataItem AF02W-TSQ-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem AF02W-TSQ-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

