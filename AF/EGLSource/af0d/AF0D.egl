package af0d;

import af.common.AF1REC;
import af.common.AFBNDTPR;
import af.common.AFBREC;
import af.common.AFBSBKQ;
import af.common.AFBTXT1;
import af.common.AFBTXT2;
import af.common.AFWREC;
import af.common.AFWTSP;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPXSE01;
import corpcom3.XPXX001;
import corpcom3.XSAFS01;
import corpcom4.XSPG202;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XDMCD;
import corpx1.XOWTBL;
import corpx1.XSETBL;
import corpx2.XOWCD;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpy2.YSNTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import pc.common.PC2REC;
import pg.common.PG2REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0D ****
// This application is used to inquiry and maintain the
// Customer Speical Bookings data base (dcast.vadjcu01).
// 
// There are two logical screens and one physical map.
// 
// Screen one is used for inquire and maintenance. Upon entry
// this screen is displayed. A valid Season/Year must be
// entered before continueing. If the user wishes he may
// request a pop up window of valid seasons by entering a ?
// in the season field.  Once a valid season/year is entered
// the user may request a Display or transfer to the ADD SCREEN
// 
// Display; the Customer Special Bookings rows are selected
// and saved in temporay storage. A key list of the selected
// rows is also built. The key list is used to select pages
// form temporary storage, when a search request is enterd.
// The user may modify or delete rows, page forward or backward
// or transfer to the add screen. The inquiry maintenance
// process will be restarted by entering a new season/year key.
// 
// Screen two;          (Add Customer Special Bookings)
// Upon entry the season/year is protected, as this is the
// key. the user may enter from 1 to 14 Customer Special
// Bookings rows. The row must have a valid customer xref,
// style, color and need date before the row is added to the
// the data base. The user may transfer to inq/maint screen
// at any time by pressing PF14.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 03/01/89   RSAMUE   New application.
// 02/02/93   nmaste   Fixed initial entry loop.
// 02-08-95   kj       xsn-ysn
// 12-31-97   oricha   y2k modifications:  af0dw00, w02, w03,
//                     112, 113, 115, 121, 153, 154, 160, 161,
//                     163, 251, 261, 262, m001 zero fill
//                     season year, need date; af0d001 bump up
//                     temp stg length.
// *********************
Program AF0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0DW00 AF0DW00; // record
  AF0DW02 AF0DW02; // record
  AF0DW03 AF0DW03; // record
  AF0DW04 AF0DW04; // record
  AF1REC AF1REC; // record
  AFBREC AFBREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  PC2REC PC2REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOWTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AF0DM.AF0DM001, // form
  AF0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.-*/
     /* Flow to converse the Apparel Forcasting                   -*/
                      /* Customer Special Booking                 -*/
     /* ------------------------------------------------------------*/
    ;
    set AFWREC empty; /* Initialize working storage*/
    set AF0DW00 empty; /* Initialize working storage*/
    set AF0DW02 empty; /* Initialize working storage*/
    set AF0DW03 empty; /* Initialize working storage*/
    set AF0DW04 empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0DM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF0D"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    ;
    goto AF0D001;
                                     /* Converse A.F Customer Speical Booking*/
    ;
    ;
    AF0D001: AF0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0D001; /* Converse Customer Special Bookings*/
    ;
    ;
  end // end main
end // end AF0D

// Choose which map to display
Function AF0D001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWPRCSN = "M001"; /* Indicate map # 1*/
  AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
  AFWREC.AFWAPPL = "AF0D"; /* Re-Initialize process name*/
   /* ------- y2k out begin ------*/
   /* MOVE +1082 TO AFWREC.AFWTSL;      /* temp storage length*/
   /* ------- y2k out end --------*/
   /* ------- y2k in  begin ------*/
  AFWREC.AFWTSL = +1110; /* temp storage length*/
   /* ------- y2k in end ---------*/
  ;
  if (AFWREC.AFWFIRST == " ") /* first time*/
    if (COMMAREA.CAFROMAP == "AF02" /* from summary program*/
     && XP1REC.XP1MISC2 == "Y"      /* af02 tsq exists*/
     && XP1REC.XP1MISC1 == "N")     /* process af02 tsq*/
      AF0DS05(); /* read af02 tsq*/
      AF0DS06(); /* move to as0dw04*/
      AF0DS07(); /* purge af02 tsq*/
      XP1REC.XP1MISC1 = "Y"; /* af02 tsq processed*/
      AFWREC.AFWSWR = "Y";
    end
  end
  ;
                        /* Map1*/
  if (AFWREC.AFWMAP == "1")
    ;
    if (AFWREC.AFWFIRST == " " /* First time*/
     && AFWREC.AFWSWR == "Y")  /* user prompt ok*/
      AFWREC.AFWFIRST = "N";
    end
    ;
    if (AFWREC.AFWFIRST == " ") /* First time*/
      move "L" to AF0DW02.XXXSTAT[1] for all; /* Initialize line index*/
    end
    ;
    AFWREC.AFWFIRST = "N";
    ;
    AF0D100();
    ;
    ;
  else
    /* process Customer Adds*/
    ;
    AF0D200(); /* Add Customer Bookings*/
  end
   /* ------------------------------------------------------------*/
end // end AF0D001

// Driver process for 100 map
Function AF0D100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AF0D110(); /* Obtain the data to display*/
  ;
  AF0D120(); /* Format and display the map*/
  ;
  AF0D130(); /* Check attention identifier*/
  ;
  AF0D140(); /* Reset fields to normal intensity*/
  ;
  AF0D150(); /* Verify the entered data*/
  ;
  AF0D160(); /* Process valid input request*/
  ;
  ;
end // end AF0D100

// Obtain the data to display
Function AF0D110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    XP1REC.XP1MISC2 = "N"; /* indicate no tsq*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  AF0DS03(); /* Purge any temporary storage*/
  AFWREC.AFWTSP = 0; /* reset page select*/
  AFWREC.AFWIDX4 = 0; /* max lines selected*/
  AFWREC.AFWSWU = "N"; /* make sure that TSP is not updated*/
  ;
   /* -----------------------------------------------------------*/
   /* if a customer number specified, get the cust name.*/
   /* -----------------------------------------------------------*/
  if (AF0DM001.AF0DMCUS > 0)
    set KUCREC empty;
    AF0DW00.AF0DKCUS = AF0DM001.AF0DMCUS; /* set up for key*/
    AF0D116(); /* get customer name*/
    AF0DW04.AF0DCSNM = KUCREC.KUCCONM; /* save customer name*/
  end
  ;
  set AF0DM001 initial;
  ;
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  AF0D112(); /* Select set and open cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* initi page index save area*/
   /* ------------------------------------------------------------*/
  ;
  set AF0DW03 empty; /* clear page index save area*/
  AFWREC.AFWIDX4 = 0; /* index max screen lines*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  while (AFWREC.AFWSWC != "Y") /* Until end of cursor*/
    ;
    AF0D113(); /* Fetch selected rows*/
    ;
    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (AFWREC.AFWIXM > 14) /* Page is full*/
      AF0DS04(); /* Add page to temporary storage*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWIXM > 1) /* Page was formatted*/
    ;
    while (AFWREC.AFWIXM <= 14)
      AF0DW02.XXXSTAT[AFWIXM] = "L";
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    end
    ;
    AF0DS04(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  ;
  AF0D115(); /* Close the selected set cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.TA5TSQIX == 0) /* No data to display*/
    ;
    AFWREC.AFWPRCSN = "110"; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    set AF0DM001.XSECD cursor, bold; /* Highlight*/
    set AF0DM001.XSNYR bold; /* Highlight*/
    if (AF0DW04.AF0DCUST > " ")
      AF0DM001.AF0DMCUS = AF0DW04.AF0DCUST;
      set AF0DM001.AF0DMCUS bold; /* highlight*/
    end
    if (AF0DW04.AF0DNDDT > 0)
      AF0DM001.AF0DMNMY = AF0DW04.AF0DNDDT;
      set AF0DM001.AF0DMNMY bold; /* highlight*/
    end
    if (AF0DW04.AF0DSTYL > " ")
      AF0DM001.AF0DMSTY = AF0DW04.AF0DSTYL;
      set AF0DM001.AF0DMSTY bold; /* highlight*/
    end
    converseLib.validationFailed(15); /* Indicate no data to display*/
    move "L" to AF0DW02.XXXSTAT[1] for all; /* set screen lines blank*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No error was found*/
    AFWREC.AFWSWR = "N"; /* Request for data switch*/
  end
  ;
  ;
end // end AF0D110

// Select set and open cursor
Function AF0D112()
   /* ------------------------------------------------------------*/
   /* Obtain the Customer Special Bookings*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWSWC = "N"; /* End of cursor switch*/
  ;
  set AFBREC empty; /* Clear row storage area*/
  ;
  AFBREC.XSECD = XP1REC.XSECD; /* Sesn Code*/
  AFBREC.XSNYR = XP1REC.XSNYR; /* Sesn Year*/
  AFBREC.SY1STNBR = AF0DW04.AF0DSTYL; /* Style number*/
  AFBREC.SY2CLRID = AF0DW04.AF0DCOLR; /* Color*/
  if (AF0DW04.AF0DCUST <= 0)
    AFBREC.KUCCOID = -1;
  else
    AFBREC.KUCCOID = AF0DW04.AF0DCUST; /* customer number*/
  end
   /* ------------ y2k out begin -----------*/
   /* IF AF0DW04.AF0DNDDT <= 0;*/
    /* MOVE -1 TO AFBREC.AFBNDTPR;*/
   /* ELSE;*/
    /* MOVE AF0DW04.AF0DNDDT TO AF0DW00.AF0DWND1; /* flip need date*/
    /* MOVE AF0DW00.AF0DWYY1 TO AF0DW00.AF0DWYY2;*/
    /* MOVE AF0DW00.AF0DWMM1 TO AF0DW00.AF0DWMM2;*/
    /* MOVE AF0DW00.AF0DWND2 TO AFBREC.AFBNDTPR; /* af_mo need date*/
   /* END;*/
   /* ------------ y2k out end -------------*/
   /* ------------ y2k in  begin -----------*/
  if (AF0DW04.AF0DNDDT <= 0)
    AFBREC.AFBNDTPR = -1;
  else
    AF0DW00.AF0DWND3 = AF0DW04.AF0DNDDT;
    AF0DW00.AF0DWYY1 = AF0DW00.AF0DWYY3;
    AF0DW00.AF0DWYY2 = AF0DW00.AF0DWYY1;
    AF0DW00.AF0DWMM1 = AF0DW00.AF0DWMM3;
    AF0DW00.AF0DWMM2 = AF0DW00.AF0DWMM1;
    if (AF0DW00.AF0DWYY3 > 65)
      AF0DW00.AF0DWCC1 = 19;
    else
      AF0DW00.AF0DWCC1 = 20;
    end
    AF0DW00.AF0DWCC2 = AF0DW00.AF0DWCC1;
    AFBREC.AFBNDTPR = AF0DW00.AF0DWND2; /* af_mo need date*/
  end
   /* ------------ y2k in end -------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VADJCU02" ("S3", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  AFWREC.AFWPRCSN = "112"; /* Module identification*/
  AF0DM001.XXXPRCNM = AFWREC.AFWERLOC;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AFWREC.AFWERLOC; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU02"; /* Table view name*/
  TA1REC.TA1TBLKE = AFBREC.AFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0D112

// Fetch next row and format
Function AF0D113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VADJCU02" ("N3", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (AFBREC.XXXSTAT == "A") /* VALID ROW*/
        ;
        AF0DW02.KUCCOID[AFWIXM] = AFBREC.KUCCOID;
        set KUCREC empty;
        AF0DW00.AF0DKCUS = AFBREC.KUCCOID;
        AF0D116(); /* get customer name for temp storage*/
        AF0DW02.AF0DWCNM[AFWIXM] = KUCREC.KUCCONM; /* customer name*/
        AF0DW02.SY1STNBR[AFWIXM] = AFBREC.SY1STNBR; /* style*/
        AF0DW02.SY2CLRID[AFWIXM] = AFBREC.SY2CLRID; /* color*/
        AF0DW02.XDMCD[AFWIXM] = AFBREC.XDMCD; /* dimension code*/
        AF0DW02.XSECD[AFWIXM] = AFBREC.XSECD; /* sesn code*/
        AF0DW02.XOWCD[AFWIXM] = AFBREC.XOWCD; /* owner group code*/
        AF0DW02.AF0DWOND[AFWIXM] = AFBREC.AFBNDTPR; /* need dte*/
        AF0DW02.AFBTXT1[AFWIXM] = AFBREC.AFBTXT1; /* text 1*/
        AF0DW02.AFBTXT2[AFWIXM] = AFBREC.AFBTXT2; /* text 2*/
        AF0DW02.AFBSBKQ[AFWIXM] = AFBREC.AFBSBKQ; /* qty*/
        AF0DW02.AF0DBKDL[AFWIXM] = AFBREC.AFBSBKDL; /* dollars*/
        AF0DW02.XSNYR[AFWIXM] = AFBREC.XSNYR; /* season year*/
        AF0DW02.XXXSTAT[AFWIXM] = AFBREC.XXXSTAT; /* status*/
        AF0DW02.ZZZCHGDT[AFWIXM] = AFBREC.ZZZCHGDT; /* chg date*/
        AF0DW02.ZZZCHGTM[AFWIXM] = AFBREC.ZZZCHGTM; /* chg time*/
        AF0DW02.ZZZCHGCT[AFWIXM] = AFBREC.ZZZCHGCT; /* chg count*/
        ;
                  /* (build index of temp storage pages)*/
        ;
        AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1;
        if (AFWREC.AFWIDX4 > 500)
          AFWREC.AFWSWC = "Y";
          converseLib.validationFailed(89); /* more data than can be shown*/
        else
          AF0DW03.SY1STNBR[AFWIDX4] = AFBREC.SY1STNBR; /* style*/
          AF0DW03.AFBNDTPR[AFWIDX4] = AFBREC.AFBNDTPR; /* need dte*/
          ;
          AF0DW03.KUCCOID[AFWIDX4] = AFBREC.KUCCOID; /* cus x-ref*/
          AF0DW03.AF0DWSLN[AFWIDX4] = AFWREC.AFWIXM; /* scrn line*/
          AF0DW03.AFWTSP[AFWIDX4] = AFWREC.TA5TSQIX + 1; /* temp storage page*/
        end
        ;
        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      AFWREC.AFWSWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  AFWREC.AFWPRCSN = "113"; /* Module identification*/
  AF0DM001.XXXPRCNM = AFWREC.AFWERLOC;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU02"; /* Table view name*/
  TA1REC.TA1TBLKE = AFBREC.AFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0D113

// Close selected set cursor
Function AF0D115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VADJCU02" ("C3", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  AFWREC.AFWPRCSN = "115"; /* Module identification*/
  AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0D115

// select customer name
Function AF0D116()
   /* -------------------------------*/
   /* obtain the customer name*/
   /* -------------------------------*/
  KUCREC.KUCCOID = AF0DW00.AF0DKCUS;
  ;
  try
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* -------------------------------*/
   /* if successful, return with name*/
   /* -------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return;
  else
    KUCREC.KUCCONM = "NOT AVAILABLE"; /* if name not found, fill*/
  end
  ;
end // end AF0D116

// Format and display the map
Function AF0D120()
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0 /* Error message to display*/
   || AFWREC.XXXMSGNO != 0)            
    set AF0DM001 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  AF0D121(); /* Format the data on the page*/
  ;
  AF0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0DM001.AF0DMFNF = "INQ/MNT"; /* Processing Opt*/
  ;
  set AF0DM001.AF0DMP09 initialAttributes; /* PF09 Summary*/
  set AF0DM001.AF0DMP14 skip, invisible; /* PF14 Inq/Mnt*/
  ;
                          /* (check security)*/
  if (COMMAREA.CAADDFL == "N")
    set AF0DM001.AF0DMP13 skip, invisible; /* PF13 Add*/
  end
  ;
  ;
  if (COMMAREA.CADELFL != "Y")
    ;
    set AF0DM001.AF0DMDLF skip, invisible; /* PF9 Confirm Delete*/
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0) /* system error message*/
    if (AFWREC.XXXMSGNO != 0) /* non system message*/
      if (AFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(AFWREC.XXXMSGNO);
      end /* display message*/
    end
  end
  ;
  converse AF0DM001 ;
  ;
  AFWREC.AFWSWR = "N"; /* Reset reselect  switch*/
  AFWREC.XXXMSGNO = 0; /* Reset information message number*/
  COMMAREA.CATOAP = AF0DM001.CATOAP; /* To Application*/
  COMMAREA.CAITEM = AF0DM001.CAITEM; /* Application Data*/
  ;
  if (AFWREC.AFWFIRST == " ") /* first time*/
    ;
    /* init xp1rec sesn year force select*/
    ;
    XP1REC.XSECD = " ";
    XP1REC.XSNYR = 0;
    AF0DW04.AF0DCUST = 0;
    AF0DW04.AF0DNDDT = 0;
    AF0DW04.AF0DSTYL = " ";
  end
end // end AF0D120

// Format the display data
Function AF0D121()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWSERCH == "Y"
   && AFWREC.TA5TSQIX > 0) /* pages where formated*/
    AF0D122(); /* find page using select key*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (AFWREC.AFWTSP == 0)
      AFWREC.AFWTSP = 1; /* init 1st page*/
    end
    ;
    ;
    if (AFWREC.AFWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* --------------------------------------------------------*/
      /* if the current page has been changed, update the page*/
       /* in storage before obtaining the next one to display*/
      /* ------------------------------------------------------------*/
      ;
      if (AFWREC.AFWSWU == "Y") /* current page was changed*/
        ;
        AF0DS01(); /* update temporary storage page*/
        ;
        AFWREC.AFWSWU = "N"; /* storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (AFWREC.AFWTSP > AFWREC.TA5TSQIX) /* Desired greater highest*/
        AFWREC.AFWTSP = AFWREC.TA5TSQIX; /* Default to highest*/
      end
      ;
      set AF0DM001 initial; /* clear map*/
      AF0DS02(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen,*/
     /* and saved screen header info*/
    /* ------------------------------------------------------------*/
    ;
    ;
    AF0DM001.AF0DWTSP = AFWREC.AFWTSP; /* Current page*/
    AF0DM001.TA5TSQIX = AFWREC.TA5TSQIX; /* Highest page*/
    ;
    ;
    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (AF0DW04.AF0DNDDT > 0)
      AF0DM001.AF0DMNMY = AF0DW04.AF0DNDDT; /* need date*/
    end
    ;
    if (AF0DW04.AF0DSTYL > " ")
      AF0DM001.AF0DMSTY = AF0DW04.AF0DSTYL; /* style      hdr*/
    end
    ;
    if (AF0DW04.AF0DCUST > 0)
      AF0DM001.AF0DMCUS = AF0DW04.AF0DCUST; /* Customer   hdr*/
      AF0DM001.AF0DCSNM = AF0DW04.AF0DCSNM; /* customer name*/
    end
    ;
  end
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  while (AFWREC.AFWIXM <= 14) /* Until end of lines*/
    ;
    if (AF0DW02.XXXSTAT[AFWIXM] != "L") /* Line Has Data*/
                            /* (delete flag)*/
      if (AFWREC.XXXMSGNO == 0
       || AFWREC.XXXMSGNO == 1
       || AF0DM001.AF0DMDEL[AFWIXM] == "E")
        AF0DM001.AF0DMDEL[AFWIXM] = " ";
      end
                            /* (customer numeric id)*/
      AF0DM001.KUCCOID[AFWIXM] = AF0DW02.KUCCOID[AFWIXM];
                            /* (customer name )*/
      AF0DM001.AF0DCONM[AFWIXM] = AF0DW02.AF0DWCNM[AFWIXM];
                            /* (style number)*/
      AF0DM001.SY1STNBR[AFWIXM] = AF0DW02.SY1STNBR[AFWIXM];
                            /* (color id)*/
      AF0DM001.SY2CLRID[AFWIXM] = AF0DW02.SY2CLRID[AFWIXM];
                            /* (owner group)*/
      AF0DM001.XOWCD[AFWIXM] = AF0DW02.XOWCD[AFWIXM];
                            /* (need date)*/
   /* ---------- y2k out begin -----------*/
     /* MOVE AF0DW02.AF0DWOYY(AFWIXM) TO AF0DW00.AF0DWYY2;*/
     /* MOVE AF0DW02.AF0DWOMM(AFWIXM) TO AF0DW00.AF0DWMM2;*/
     /* MOVE AF0DW00.AF0DWND2 TO AF0DM001.AF0DMNMO(AFWIXM);*/
   /* ---------- y2k out end -------------*/
   /* ---------- y2k in  begin -----------*/
      AF0DW00.AF0DWYY3 = AF0DW02.AF0DWOYY[AFWIXM];
      AF0DW00.AF0DWMM3 = AF0DW02.AF0DWOMM[AFWIXM];
      AF0DM001.AF0DMNMO[AFWIXM] = AF0DW00.AF0DWND3;
   /* ---------- y2k in end --------------*/
      ;
                            /* (quantity)*/
      AF0DM001.AFBSBKQ[AFWIXM] = AF0DW02.AFBSBKQ[AFWIXM];
                            /* (dollars)*/
      AF0DW04.AF0DWDLR = AF0DW02.AF0DBKDL[AFWIXM];
      AF0DM001.AFBSBKDL[AFWIXM] = AF0DW02.AFBSBKQ[AFWIXM] *       AF0DW04.AF0DWDLR;
                            /* (sales)*/
      AF0DM001.AFBTXT1[AFWIXM] = AF0DW02.AFBTXT1[AFWIXM];
      set AF0DM001.AFBTXT1[AFWIXM] skip;
      ;
      if (COMMAREA.CACHGFL != "Y")
        set AF0DM001.SY1STNBR[AFWIXM] skip; /* style*/
        set AF0DM001.SY2CLRID[AFWIXM] skip; /* color*/
        set AF0DM001.XOWCD[AFWIXM] skip; /* owner group*/
        set AF0DM001.AFBSBKDL[AFWIXM] skip; /* dollars*/
        set AF0DM001.AFBSBKQ[AFWIXM] skip; /* qty*/
        set AF0DM001.AFBTXT1[AFWIXM] skip; /* sales orders*/
      end
      ;
      if (COMMAREA.CADELFL != "Y")
        set AF0DM001.AF0DMDEL[AFWIXM] skip, invisible; /* delete flag*/
      end
      ;
    else
      set AF0DM001.AF0DMDEL[AFWIXM] skip, invisible; /* delete flag*/
      set AF0DM001.AFBSBKDL[AFWIXM] skip, invisible; /* dollars*/
      set AF0DM001.AFBSBKQ[AFWIXM] skip, invisible; /* qty*/
      set AF0DM001.AFBTXT1[AFWIXM] skip, invisible; /* sales orders*/
      set AF0DM001.KUCCOID[AFWIXM] skip, invisible; /* customer / xref*/
      set AF0DM001.SY1STNBR[AFWIXM] skip, invisible; /* style*/
      set AF0DM001.SY2CLRID[AFWIXM] skip, invisible; /* color id*/
      set AF0DM001.XOWCD[AFWIXM] skip, invisible; /* owner group*/
      set AF0DM001.AF0DMNMO[AFWIXM] skip, invisible; /* need dte mm*/
      if (AFWREC.AFWIXM == 1)
        set AF0DM001.AF0DMPGL skip, invisible; /* page*/
        set AF0DM001.AF0DMOFL skip, invisible; /* of*/
      end
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
    ;
  end
  ;
   /* if af0dw00.xsecd contains data, user has selected*/
   /* xsecd from table. bypass  xp1rec.xsecd and use*/
   /* the table selected xsecd*/
  ;
  ;
  if (AF0DW00.XSECD > " ")
    AF0DM001.XSECD = AF0DW00.XSECD;
    XP1REC.XP1XSNYR = AF0DW00.XSNYR;
    AF0DM001.XSNYR = XP1REC.XP1XSNYY;
  /* MOVE AF0DW00.XSNYR TO AF0DM001.XSNYR;*/
    ;
  else
    ;
    if (XP1REC.XSECD != " ")
      AF0DM001.XSECD = XP1REC.XSECD; /* sesn*/
      XP1REC.XP1XSNYR = XP1REC.XSNYR;
      AF0DM001.XSNYR = XP1REC.XP1XSNYY;
  /* MOVE XP1REC.XSNYR TO AF0DM001.XSNYR;/* sesn*/
    end
  end
  ;
  AF0DW00.XSECD = " ";
  AF0DW00.XSNYR = 0;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* when a new page has been selected because of a key search*/
   /* set  the cursor using afwidx3 from af0d122*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWSERCH == "T") /* user key search*/
    if (COMMAREA.CADELFL == "Y")
      set AF0DM001.AF0DMDEL[AFWIDX3] cursor;
    else
      if (COMMAREA.CACHGFL == "Y")
        set AF0DM001.AFBSBKQ[AFWIDX3] cursor;
      else
        ;
        set AF0DM001.AF0DMSTY cursor;
        set AF0DM001.SY1STNBR[AFWIDX3] bold;
      end
    end
  end
  ;
  AFWREC.AFWIDX3 = 0;
  AFWREC.AFWSERCH = " "; /* reset search switch*/
   /* ------------------------------------------------------------*/
end // end AF0D121

// Search Temporary storage page
Function AF0D122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 0; /* set index to zero*/
  AFWREC.AFWIDX2 = 0; /* set index to zero*/
  AF0DW00.AF0DWCX2 = " ";
  AF0DW00.AF0DWSY2 = " ";
  AF0DW00.AF0DWND2 = 0;
  sysVar.arrayIndex = 0;
  ;
  ;
  if (AF0DW00.AF0DWSY1 != " ") /* style entered*/
    ;
    if (AF0DW00.AF0DWSY1 in AF0DW03.SY1STNBR) /* tbl of pages*/
      AFWREC.AFWIDX1 = sysVar.arrayIndex; /* 1st style*/
    end
    ;
  else
    ;
    if (AF0DW00.AF0DWCX1 != " ") /* cus xref entered*/
      ;
      if (AF0DW00.AF0DWCX1 in AF0DW03.KUCCOID) /* cus x-ref  tbl of pages*/
        AFWREC.AFWIDX1 = sysVar.arrayIndex; /* 1st cus x-ref*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* ok we have found a starting point in the page table*/
   /* ------------------------------------------------------------*/
  if (sysVar.arrayIndex == 0) /* no starting point*/
    ;
    AFWREC.AFWIDX1 = 1;
    ;
  else
    ;
    AFWREC.AFWIDX1 = sysVar.arrayIndex;
    ;
  end
  ;
  while (AFWREC.AFWIDX1 <= AFWIDX4 /* table max*/
   && AFWREC.AFWSERCH != "T") /* selected page*/
                       /* (style)*/
    if (AF0DW00.AF0DWSY1 != " ") /* from map*/
      AF0DW00.AF0DWSY2 = AF0DW03.SY1STNBR[AFWIDX1];
    end
                        /* (customer xref)*/
    if (AF0DW00.AF0DWCX1 != " ") /* from map*/
      AF0DW00.AF0DWCX2 = AF0DW03.KUCCOID[AFWIDX1];
    end
                        /* (need date )*/
    if (AF0DW00.AF0DWND1 != 0) /* from map*/
      AF0DW00.AF0DWND2 = AF0DW03.AFBNDTPR[AFWIDX1];
    end
    ;
    if (AF0DW00.AF0DWK1 <= AF0DW00.AF0DWK2) /* page select keys*/
      AFWREC.AFWSERCH = "T"; /* selected page*/
      AFWREC.AFWTSP = AF0DW03.AFWTSP[AFWIDX1]; /* current page*/
      AFWREC.AFWIDX3 = AF0DW03.AF0DWSLN[AFWIDX1]; /* screen line*/
      set AF0DM001.AF0DMDEL[AFWIDX3] cursor;
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* inc index*/
  end
  ;
  ;
  if (AFWREC.AFWIDX1 > AFWREC.AFWIDX4) /* select key gt than last entry*/
    AFWREC.AFWSERCH = "T"; /* selected page*/
    AFWREC.AFWTSP = AF0DW03.AFWTSP[AFWIDX4]; /* current page*/
    AFWREC.AFWIDX3 = AF0DW03.AF0DWSLN[AFWIDX4]; /* screen line*/
    set AF0DM001.AF0DMDEL[AFWIDX3] cursor;
  end
end // end AF0D122

// Check attention identifier
Function AF0D130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0DM001 initial; /* Clear the map fields*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    if (AFWREC.AFWSWR == "Y") /* Data was requested*/
      ;
      AFWREC.AFWSWR = "N"; /* Request for data switch*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0DM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      AF0DS03(); /* Purge temporary storage*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      AFWREC.XXXMSGNO = 5; /* Indicate PF key not valid*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/
    ;
    AFWREC.XXXMSGNO = converseVar.validationMsgNum; /* force reselect*/
    converseLib.validationFailed(0);
    AFWREC.AFWPRCSN = "130"; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    set AF0DM001.CATOAP cursor, bold; /* Highlight*/
    move "L" to AF0DW02.XXXSTAT[1] for all;
    AFWREC.AFWSWR = "Y"; /* reselect*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0DM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "AF00"; /* TO application*/
    end
    ;
    AF0DS03(); /* Purge temporary storage*/
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/
    ;
    AFWREC.AFWPRCSN = "130"; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    AFWREC.AFWFIRST = " ";
    AFWREC.AFWSWR = "Y"; /* reselect*/
    ;
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
                  /* Check for valid Add Process*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAADDFL == "Y") /* security ok*/
    if (converseVar.eventKey is pf13) /* Process Map 2*/
      return; /* return*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9)  /* and PF9 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130"; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end AF0D130

// Reset highlighted fields
Function AF0D140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  set AF0DM001.XSECD initialAttributes; /* sesn code*/
  set AF0DM001.XSNYR initialAttributes; /* sesn yr*/
  set AF0DM001.AF0DMNMY initialAttributes; /* need dte mm*/
  set AF0DM001.AF0DMSTY initialAttributes; /* style*/
  set AF0DM001.AF0DMCUS initialAttributes; /* customer*/
  set AF0DM001.AF0DMPGL initialAttributes; /* page*/
  set AF0DM001.AF0DMOFL initialAttributes; /* of*/
  ;
  AFWREC.AFWIXM = 1; /* line index*/
  while (AFWREC.AFWIXM <= 14)
    ;
    set AF0DM001.SY1STNBR[AFWIXM] initialAttributes; /* because of key search*/
    set AF0DM001.AFBTXT1[AFWIXM] skip; /* sales ord #*/
    ;
    ;
    if (COMMAREA.CADELFL == "Y")
      set AF0DM001.AF0DMDEL[AFWIXM] initialAttributes; /* delete flag*/
    end
    ;
    if (COMMAREA.CACHGFL == "Y")
      set AF0DM001.SY1STNBR[AFWIXM] initialAttributes; /* style*/
      set AF0DM001.SY2CLRID[AFWIXM] initialAttributes; /* color*/
      set AF0DM001.XOWCD[AFWIXM] initialAttributes; /* owner group*/
      set AF0DM001.AF0DMNMO[AFWIXM] initialAttributes; /* need date*/
      set AF0DM001.AFBSBKDL[AFWIXM] initialAttributes; /* dollars*/
      set AF0DM001.AFBSBKQ[AFWIXM] initialAttributes; /* qty*/
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* inc line index*/
  end
  ;
  set AF0DM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0DM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  if (COMMAREA.CADELFL == "Y")
    set AF0DM001.AF0DMDEL[1] cursor; /* delete flag*/
  else
    if (COMMAREA.CACHGFL == "Y")
      set AF0DM001.AFBSBKQ[1] cursor; /* qty*/
    else
      set AF0DM001.XSECD cursor; /* sesn code*/
    end
  end
  ;
  ;
  set AF0DM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set AF0DM001.CAITEM initialAttributes; /* FAST PATH application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0DM001.XSECD == "?") /* sesn code list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      AF0DM001.XXXPRCNM = "140"; /* Module identification*/
      converseLib.validationFailed(04); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of sesn codes.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (AF0DM001.XSECD == "?") /* sesn code list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "SEASON CODE "; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSE01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX > 0) /* selection made*/
      ;
      AF0DM001.XSECD = XSETBL.XSECD[XX0XWPIX]; /* Selected code*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  set AF0DM001.XSNYR cursor;
  ;
  return;
  ;
end // end AF0D140

// Verify the entered data
Function AF0D150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0DM001.CAITEM > " ") /* Application data was entered*/
    ;
    set AF0DM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    AFWREC.AFWPRCSN = "150 "; /* Process number*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    AF0D151(); /* Verify scroll request*/
    return;
  end
  ;
  AF0D152(); /* Verify season year key data*/
  if (AF0DM001.AF0DMCUS != AF0DW04.AF0DCUST)
    AFWREC.AFWSWR = "Y";
    AF0DW04.AF0DCUST = AF0DM001.AF0DMCUS;
  end
  if (AF0DM001.AF0DMSTY != AF0DW04.AF0DSTYL)
    AFWREC.AFWSWR = "Y";
    AF0DW04.AF0DSTYL = AF0DM001.AF0DMSTY;
  end
  if (AF0DM001.AF0DMNMY != AF0DW04.AF0DNDDT)
    AFWREC.AFWSWR = "Y";
    AF0DW04.AF0DNDDT = AF0DM001.AF0DMNMY;
  end
  ;
  if (AFWREC.AFWSWR == "Y" /* If new selection criteria entered*/
   || converseVar.validationMsgNum != 0)
    AF0DW04.AF0DCOLR = " ";
    return; /* key changed restart*/
  end
  ;
  ;
  AF0D153(); /* validate search request*/
  ;
  if (AFWREC.AFWSERCH != "N") /* key search request current pages*/
    ;
     /* (selection criteria not changed)*/
                         /* (edit rows)*/
    AF0DW00.AF0DW-SEL-COUNT = 0; /* initialize selection counter*/
    AFWREC.AFWIXM = 14; /* Initialize line index*/
    ;
    while (AFWREC.AFWIXM > 0) /* Until end of lines*/
      AF0D154(); /* Verify any changed data*/
      AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* Decrement line number*/
    end
    ;
    if (converseVar.eventKey is pf9)
      if (AF0DW00.AF0DW-SEL-COUNT > 1)
        AFWREC.XXXMSGNO = 124;
        AFWREC.AFWIXM = 14; /* Initialize line index*/
        while (AFWREC.AFWIXM > 0) /* Until end of lines*/
          if (AF0DM001.AF0DMDEL[AFWIXM] == "S")
            set AF0DM001.AF0DMDEL[AFWIXM] cursor, bold;
          end
          AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* Decrement line number*/
        end
      else
        if (AF0DW00.AF0DW-SEL-COUNT > 0)
          AF0DS01(); /* update tsq*/
        else
          AF0DW02.AF0DWPSW[1] = "S";
          AF0DS01(); /* update tsq*/
        end
      end
    end
    ;
  end
  ;
  ;
end // end AF0D150

// Verify scroll request
Function AF0D151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && AFWREC.AFWTSP < 2)          /* and no previous pages*/
    /* GET AF0D99*/
    ;
    AFWREC.AFWPRCSN = "151"; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AFWREC.AFWTSP >= AFWREC.TA5TSQIX) /* and no more pages*/
    ;
    AFWREC.AFWPRCSN = "151"; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end AF0D151

// process selection criteria
Function AF0D152()
  ;
   /* ============================================================*/
   /* ===== edit season/year in selection criteria           =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  ;
  ;
  if (AF0DM001.XSNYR > 75)
    AFWREC.AFWYYMM = 1900 + AF0DM001.XSNYR; /* set century = 19*/
  else
    AFWREC.AFWYYMM = 2000 + AF0DM001.XSNYR; /* set century = 20*/
  end
  if (AF0DM001.XSECD != XP1REC.XSECD /* Sesn Code*/
   || AFWREC.AFWYYMM != XP1REC.XSNYR) /* Sesn Year*/
    ;
    if (AF0DM001.XSECD in XSETBL.XSECD) /* Sesn Code*/
       /* (valid code)*/
      XP1REC.XSECD = AF0DM001.XSECD;
      AFWREC.AFWSWR = "Y";
               /* (only edit year if spring or fall season)*/
      ;
      AF0DW00.AF0DWSCD = AF0DM001.XSECD;
      AF0DW00.AF0DWSYY = AF0DM001.XSNYR;
      ;
      AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
      while (AFWREC.AFWIDX5 != 9999
       && AFWREC.AFWIDX5 != 0) /* end of search condition*/
        if (YSNTBL.XSNABRV[AFWIDX5] == AF0DWSCY
         && YSNTBL.XGPCD[AFWIDX5] == "03"
         && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
          XP1REC.XSECD = AF0DM001.XSECD;
          XP1REC.XSNYR = AFWREC.AFWYYMM;
          AFWREC.AFWSWR = "Y";
          AFWREC.AFWIDX5 = 0; /* END OF TABLE*/
          ;
        else
          if (YSNTBL.XGPCD[AFWIDX5] != "99")
            AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
          else
            AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
            set AF0DM001.XSNYR cursor, bold;
            AFWREC.XXXMSGNO = 26; /* non system error*/
            AFWREC.AFWSWR = "N";
          end
        end
      end
      ;
    else
      set AF0DM001.XSECD cursor, bold;
      XP1REC.XSNYR = 0;
      XP1REC.XSECD = " ";
      AFWREC.XXXMSGNO = 16; /* non system error*/
    end
  end
  ;
  if (AFWREC.XXXMSGNO > 0) /* save changed data for redisplay*/
    ;
    ;
    AF0DW00.XSECD = AF0DM001.XSECD;
    XP1REC.XSECD = AF0DM001.XSECD;
    AF0DW00.XSNYR = AF0DM001.XSNYR;
    XP1REC.XSNYR = AF0DM001.XSNYR;
    ;
    set AF0DM001 initial;
    ;
    AF0DS03(); /* purge temp storage*/
    ;
    if (AFWREC.XXXMSGNO == 26) /* non system error*/
      set AF0DM001.XSNYR cursor, bold;
    end
    ;
    ;
    if (AFWREC.XXXMSGNO == 16) /* non system error*/
      set AF0DM001.XSECD cursor, bold;
    end
    ;
    AFWREC.AFWFIRST = " ";
    AFWREC.AFWPRCSN = "152"; /* module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC;
    exit stack;
    ;
  end
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
end // end AF0D152

// process selection criteria
Function AF0D153()
  ;
   /* ============================================================*/
   /* ===== edit Need Date from header selection             =====*/
   /* =====                                                  =====*/
   /* ============================================================*/
  ;
  ;
   /* ----------- y2k out begin -----------*/
   /* IF AF0DM001.AF0DMNMY NE 0;       /* header need date*/
    /* MOVE AF0DM001.AF0DMNMY TO AF0DW00.AF0DWND2;*/
    /* IF AF0DW00.AF0DWMM2 GT 12*/
      /* OR AF0DW00.AF0DWMM2 LT 1;*/
      /* SET AF0DM001.AF0DMNMY CURSOR,BRIGHT;*/
      /* MOVE 022 TO AFWREC.XXXMSGNO; /* invalid date*/
    /* END;*/
   /* END;*/
   /* ----------- y2k out end -------------*/
   /* ----------- y2k in  begin -----------*/
  if (AF0DM001.AF0DMNMY != 0) /* header need date*/
    AF0DW00.AF0DWND3 = AF0DM001.AF0DMNMY;
    if (AF0DW00.AF0DWMM3 > 12
     || AF0DW00.AF0DWMM3 < 1)
      set AF0DM001.AF0DMNMY cursor, bold;
      AFWREC.XXXMSGNO = 022; /* invalid date*/
    end
  end
   /* ----------- y2k in end --------------*/
  ;
  ;
  if (AFWREC.XXXMSGNO != 0) /* error do not reselect*/
    AFWREC.AFWSWR = "N";
    exit stack;
  else
     /* - page search indicated then redisplay with selected page--*/
    if (AF0DM001.AF0DMNMY == 0   /* LAST SELECT nd date*/
     && AF0DM001.AF0DMSTY == " " /* LAST SELECT STYLE*/
     && AF0DM001.AF0DMCUS == 0)  /* LAST CUS X-REF*/
      AF0DW00.AF0DWSY1 = " ";
      AF0DW00.AF0DWCX1 = "-1";
      AF0DW00.AF0DWND1 = -1;
    end
    ;
  end
  ;
   /* ====================== END OF PROCESS ======================*/
  ;
end // end AF0D153

// Verify any changed data
Function AF0D154()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/
  ;
             /* line  must contain data*/
  if (AF0DW02.XXXSTAT[AFWIXM] != "L") /* Line Has Data*/
    ;
    if (converseVar.eventKey is pf9)
      if (AF0DM001.AF0DMDEL[AFWIXM] != " "
       && AF0DM001.AF0DMDEL[AFWIXM] != "S")
        set AF0DM001.AF0DMDEL[AFWIXM] cursor, bold;
        AFWREC.XXXMSGNO = 19;
        return;
      else
        AF0DW02.AF0DWPSW[AFWIXM] = AF0DM001.AF0DMDEL[AFWIXM];
        if (AF0DM001.AF0DMDEL[AFWIXM] == "S")
          AF0DW00.AF0DW-SEL-COUNT = AF0DW00.AF0DW-SEL-COUNT + 1;
          return;
        end
      end
    end
    ;
    if (AF0DM001.AF0DMDEL[AFWIXM] != " "
     && AF0DM001.AF0DMDEL[AFWIXM] != "D")
      set AF0DM001.AF0DMDEL[AFWIXM] cursor, bold;
      AFWREC.XXXMSGNO = 19;
      if (AF0DM001.AF0DMDEL[AFWIXM] == "S")
        AFWREC.XXXMSGNO = 125;
      end
      ;
    else
      ;
      if (AF0DM001.AF0DMDEL[AFWIXM] == "D" /* delete*/
       && AF0DW02.AF0DWPSW[AFWIXM] == " ") /* delete not cfm/processed*/
        AF0DW02.AF0DWPSW[AFWIXM] = "C"; /* set flag to confirm del*/
      end
      if (AF0DM001.AF0DMDEL[AFWIXM] == "D"
       || AF0DM001.AF0DMDEL[AFWIXM] == "S")
        AF0DW00.AF0DW-SEL-COUNT = AF0DW00.AF0DW-SEL-COUNT + 1;
      end
    end
    ;
    if (AF0DM001.AF0DMDEL[AFWIXM] == "D")
      return;
    end
    ;
  end
  ;
   /* -----------------------------------------------------*/
   /* validate style, color, and need date*/
   /* -----------------------------------------------------*/
  ;
  if (AF0DM001.SY1STNBR[AFWIXM] != AF0DW02.SY1STNBR[AFWIXM]
   || AF0DM001.SY2CLRID[AFWIXM] != AF0DW02.SY2CLRID[AFWIXM])
    ;
    PG2REC.XDMCD = "00"; /* dimemsion cd*/
    PG2REC.XGPCD = "03"; /* gpc code*/
    PG2REC.SY1STNBR = AF0DM001.SY1STNBR[AFWIXM]; /* style*/
    PG2REC.SY2CLRID = AF0DM001.SY2CLRID[AFWIXM]; /* color*/
    XSPG202();
    if (SQLCA.VAGen_SQLCODE != 0)
      AFWREC.XXXMSGNO = 23;
      AF0DM001.AF0DMDEL[AFWIXM] = "E"; /* line*/
      set AF0DM001.SY1STNBR[AFWIXM] cursor, bold;
      set AF0DM001.SY2CLRID[AFWIXM] bold;
      AF0DW02.SY1STNBR[AFWIXM] = AF0DM001.SY1STNBR[AFWIXM];
      AF0DW02.SY2CLRID[AFWIXM] = AF0DM001.SY2CLRID[AFWIXM];
    else
      AF0DM001.AF0DMDEL[AFWIXM] = "E";
    end
  end
  ;
  if (AF0DM001.XOWCD[AFWIXM] != AF0DW02.XOWCD[AFWIXM])
    XP1REC.XWHCD = "51";
    XP1REC.XOWCD = AF0DM001.XOWCD[AFWIXM];
    if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
   /* next sentence*/
    else
      AFWREC.XXXMSGNO = 121;
      AF0DM001.AF0DMDEL[AFWIXM] = "E"; /* line*/
      set AF0DM001.XOWCD[AFWIXM] cursor, bold;
      AF0DW02.XOWCD[AFWIXM] = AF0DM001.XOWCD[AFWIXM];
    end
  end
  ;
   /* validate need date*/
  ;
   /* ----------- y2k out begin ---------*/
   /* MOVE AF0DM001.AF0DMNMO(AFWIXM) TO AF0DW00.AF0DWND2;/* flip need date*/
   /* MOVE AF0DW00.AF0DWMM2 TO AF0DW00.AF0DWMM1;*/
   /* MOVE AF0DW00.AF0DWYY2 TO AF0DW00.AF0DWYY1;*/
   /* ----------- y2k out end  ----------*/
   /* ----------- y2k in begin ----------*/
  if (AF0DM001.AF0DMNMO[AFWIXM] > 0)
    AF0DW00.AF0DWND3 = AF0DM001.AF0DMNMO[AFWIXM]; /* flip need date*/
    AF0DW00.AF0DWMM2 = AF0DW00.AF0DWMM3;
    AF0DW00.AF0DWYY2 = AF0DW00.AF0DWYY3;
    AF0DW00.AF0DWMM1 = AF0DW00.AF0DWMM2;
    AF0DW00.AF0DWYY1 = AF0DW00.AF0DWYY2;
    if (AF0DW00.AF0DWYY2 > 65)
      AF0DW00.AF0DWCC2 = 19;
    else
      AF0DW00.AF0DWCC2 = 20;
    end
    AF0DW00.AF0DWCC1 = AF0DW00.AF0DWCC2;
  end
   /* ----------- y2k in end ------------*/
  ;

  if (AF0DW00.AF0DWND1 != AF0DW02.AF0DWOND[AFWIXM]
   && AF0DW00.AF0DWND1 != -1)
    if (AF0DW00.AF0DWMM2 < 01
     || AF0DW00.AF0DWMM2 > 12)
      set AF0DM001.AF0DMNMO[AFWIXM] cursor, bold;
      AF0DW02.AF0DWOND[AFWIXM] = AF0DW00.AF0DWND2;
      AFWREC.XXXMSGNO = 22;
      AF0DM001.AF0DMDEL[AFWIXM] = "E";
    else
      PG2REC.XDMCD = "00";
      PG2REC.XGPCD = "03";
      PG2REC.SY1STNBR = AF0DM001.SY1STNBR[AFWIXM];
      PG2REC.SY2CLRID = AF0DM001.SY2CLRID[AFWIXM];
      XSPG202();
      if (SQLCA.VAGen_SQLCODE == 0)
        AF0DW00.AF0DWHBE = PG2REC.SY2POFBD;
                                   /* trunc beg date to yymm*/
        /* ------------ y2k in begin ------------*/
        AF0DW00.AF0DWBCC = AF0DW00.AF0DWHCC;
        /* ------------ y2k in end --------------*/
        AF0DW00.AF0DWBYY = AF0DW00.AF0DWHYY;
        AF0DW00.AF0DWBMM = AF0DW00.AF0DWHMM;
        AF0DW00.AF0DWHBE = PG2REC.SY2POFXD; /* trun end date to yymm*/
        /* ------------ y2k in begin ------------*/
        AF0DW00.AF0DWECC = AF0DW00.AF0DWHCC;
        /* ------------ y2k in end --------------*/
        AF0DW00.AF0DWEYY = AF0DW00.AF0DWHYY;
        AF0DW00.AF0DWEMM = AF0DW00.AF0DWHMM;
        if (AF0DW00.AF0DWND1 < AF0DW00.AF0DWBDT
         || AF0DW00.AF0DWND1 > AF0DW00.AF0DWEDT)
          AFWREC.XXXMSGNO = 92;
          AF0DM001.AF0DMDEL[AFWIXM] = "E";
          AF0DW02.AF0DWOND[AFWIXM] = AF0DW00.AF0DWND1;
          set AF0DM001.AF0DMNMO[AFWIXM] cursor, bold;
        end
      end
    end
  end
  ;
  if (AFWREC.XXXMSGNO > 0)
    ;
    AFWREC.AFWPRCSN = "153"; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC;
    ;
  end
   /* ------------------------------------------------------------*/
  ;
  ;
end // end AF0D154

// Process valid input request
Function AF0D160()
   /* -----------------------------------------------------------*/
   /* if edits didn't pass, don't do updates*/
   /* -----------------------------------------------------------*/
  if (AFWREC.XXXMSGNO > 0)
    exit stack;
  end
   /* ------------------------------------------------------------*/
        /* check transfer to Customer Bookings Add screen*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13) /* Process Map 2*/
    ;
    set AF0DM001 initial; /* clear map*/
    ;
    AF0DM001.XSECD = XP1REC.XSECD;
    AF0DM001.XSNYR = XP1REC.XSNYR;
    ;
    set AF0DM001.KUCCOID[1] cursor;
    ;
    AFWREC.AFWIXM = 1;
    while (AFWREC.AFWIXM <= 14)
      set AF0DM001.KUCCOID[AFWIXM] normal; /* customer / xref*/
      set AF0DM001.SY1STNBR[AFWIXM] normal; /* style*/
      set AF0DM001.SY2CLRID[AFWIXM] normal; /* color id*/
      set AF0DM001.XOWCD[AFWIXM] normal; /* owner group*/
      set AF0DM001.AF0DMNMO[AFWIXM] normal; /* need dte mm*/
      set AF0DM001.AFBTXT1[AFWIXM] cursor; /* sales ord #*/
      AFWREC.AFWIXM = AFWIXM + 1;
    end
    ;
    set AF0DM001.XSECD protect; /* sesn code*/
    set AF0DM001.XSNYR protect; /* sesn code*/
    set AF0DW00 empty; /* work areas*/
    set AF0DW02 empty; /* display storage*/
    AFWREC.AFWFIRST = " "; /* Set first time sw to yes*/
    AFWREC.AFWMAP = "2"; /* Alters process flowin af0d001*/
    ;
    exit stack; /* Restart*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
        /* transfer to Customer Bookings summary screen*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf9) /* Transfer to AF02 summary*/
    ;
    COMMAREA.CATOAP = "AF02";
    XP1REC.XP1MNO = AFWREC.AFWTSP; /* ts page to xp1 msg no*/
    XP1REC.XP1MISC1 = "N"; /* af0d tsq not processed*/
    XP1REC.XP1MNO = AFWREC.AFWTSP; /* ts page to xp1 msg no*/
    XSAFS01();
    ;
    ;
    /* -------------------------------------------------------*/
    /* if transfer failed, display returned error message*/
    /* -------------------------------------------------------*/
    ;
    AFWREC.AFWPRCSN = "160";
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC;
    AFWREC.AFWFIRST = " ";
    AFWREC.AFWSWR = "Y";
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
      /* any modifiable data was changed, update the table row.*/
      /* updates are done with a delete and add because the*/
      /* user can change key fields.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AFWREC.AFWIXM = 1; /* set index to 1*/
  ;
  while (AFWREC.AFWIXM <= 14) /* 14 screen lines*/
    ;
    if (AF0DW02.XXXSTAT[AFWIXM] != "L") /* ONLY MODIFY VALID LINES*/
      if (AF0DM001.AF0DMDEL[AFWIXM] != "D") /* delete request*/
        /* ------------ y2k out begin ----------*/
         /* MOVE AF0DM001.AF0DMNMO(AFWIXM) TO*/
                                   /* AF0DW00.AF0DWND2;*/
        /* ------------ y2k out END ------------*/
        /* ------------ y2k in  begin ----------*/
        AF0DW00.AF0DWND3 = AF0DM001.AF0DMNMO[AFWIXM]; /* flip date*/
        AF0DWYY2 = AF0DW00.AF0DWYY3;
        AF0DWMM2 = AF0DW00.AF0DWMM3;
        if (AF0DW00.AF0DWYY3 > 65)
          AF0DW00.AF0DWCC2 = 19;
        else
          AF0DW00.AF0DWCC2 = 20;
        end
        AF0DW00.AF0DWCC1 = AF0DW00.AF0DWCC2;
        /* ------------ y2k in end -------------*/
        AF0DW00.AF0DWYY1 = AF0DW00.AF0DWYY2;
        AF0DW00.AF0DWMM1 = AF0DW00.AF0DWMM2;
        if (AF0DM001.SY1STNBR[AFWIXM] != AF0DW02.SY1STNBR[AFWIXM] /* style*/
         || AF0DM001.SY2CLRID[AFWIXM] != AF0DW02.SY2CLRID[AFWIXM] /* clr*/
         || AF0DM001.XOWCD[AFWIXM] != AF0DW02.XOWCD[AFWIXM]       /* own grp*/
         || AF0DW00.AF0DWND1 != AF0DW02.AF0DWOND[AFWIXM]          /* date*/
         || AF0DM001.AFBSBKQ[AFWIXM] != AF0DW02.AFBSBKQ[AFWIXM])  /* qty*/
          AFWREC.AFWSWU = "Y"; /* update temp storage*/
          ;
          if (AF0DW02.AF0DWPSW[AFWIXM] != "E") /* line passed edits*/
            XX0XS01(); /* Obtain date and time*/
            AF0D161(); /* Update table row*/
            ;
            /* ------------------------------------------------------------*/
             /* Indicate that the update was successfully completed.*/
              /* move updates to the current page/line*/
            ;
            /* ------------------------------------------------------------*/
            ;
            AFWREC.XXXMSGNO = 1; /* Indicate update completed*/
            AF0DW02.ZZZCHGCT[AFWIXM] = AFBREC.ZZZCHGCT;
          else
            AF0DW02.AF0DWPSW[AFWIXM] = " ";
          end
        end
      else
        if (AF0DM001.AF0DMDEL[AFWIXM] == "D" /* delete flag*/
         && AF0DW02.AF0DWPSW[AFWIXM] == "C"  /* delete confirmed*/
         && AF0DW00.AF0DWCFL == "Y"          /* confirmed*/
         && converseVar.eventKey is enter)   /* user confirmed*/
          AF0D163(); /* delete row*/
          AF0DW02.AF0DWPSW[AFWIXM] = "D"; /* row deleted*/
          AFWREC.XXXMSGNO = 14; /* Indicate update completed*/
          AFWREC.AFWSWR = "Y"; /* reselect yes*/
          AFWREC.AFWSERCH = "Y"; /* use to reposition page*/
          AF0DW00.AF0DWDEL = "Y";
                                   /* used to blank serch key on map*/
          AF0DW00.AF0DWND1 = AF0DW02.AF0DWOND[AFWIXM]; /* serch key*/
          AF0DW00.AF0DWSY1 = AF0DW02.SY1STNBR[AFWIXM];
          AF0DW00.AF0DWCX1 = AF0DW02.KUCCOID[AFWIXM];
        else
          if (AF0DM001.AF0DMDEL[AFWIXM] == "D" /* delete flag*/
           && AF0DW02.AF0DWPSW[AFWIXM] == "C") /* delete confirmed*/
            AFWREC.XXXMSGNO = 25; /* confirm delete message*/
          end
        end
      end
    end
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* inc index*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* If an Update has been completed save page num.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    AFWREC.AFWTSP = AFWREC.AFWTSP - 1; /* Decrement page number*/
  end
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    AFWREC.AFWTSP = AFWREC.AFWTSP + 1; /* Increment page number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9)  /* and PF9 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130"; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  if (AFWREC.XXXMSGNO == 1  /* update completed*/
   || AFWREC.XXXMSGNO == 14 /* confirm delete*/
   || AFWREC.XXXMSGNO == 25) /* confirm delete*/
    ;
    if (AFWREC.XXXMSGNO == 25) /* confirm delete*/
      AF0DW00.AF0DWCFL = "Y"; /* Set confirm flag*/
    else
      AF0DW00.AF0DWCFL = "N"; /* Reset confirm flag*/
    end
    ;
    AFWREC.AFWPRCSN = "160"; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC;
  end
  ;
end // end AF0D160

// Update the table row
Function AF0D161()
   /* ------------------------------------------------------------*/
   /* delete the current record from the table*/
   /* ------------------------------------------------------------*/
  AF0D163(); /* delete row using old data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the afbrec from temp storage row*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* then format the changed data from the map.*/
   /* ------------------------------------------------------------*/
  ;
  AFBREC.SY1STNBR = AF0DM001.SY1STNBR[AFWIXM]; /* style*/
  AFBREC.SY2CLRID = AF0DM001.SY2CLRID[AFWIXM]; /* color*/
  AFBREC.XOWCD = AF0DM001.XOWCD[AFWIXM]; /* owner group*/
  AFBREC.XDMCD = AF0DW02.XDMCD[AFWIXM]; /* dimension code*/
  AFBREC.XSNYR = AF0DW02.XSNYR[AFWIXM]; /* season year*/
  AFBREC.XSECD = AF0DW02.XSECD[AFWIXM]; /* sesn code*/
  ;
   /* ---------- y2k out begin ----------*/
   /* MOVE AF0DM001.AF0DMNMO(AFWIXM) TO AF0DW00.AF0DWND2; /* flip need date*/
   /* MOVE AF0DW00.AF0DWMM2 TO AF0DW00.AF0DWMM1;*/
   /* MOVE AF0DW00.AF0DWYY2 TO AF0DW00.AF0DWYY2;*/
   /* MOVE AF0DW00.AF0DWND1 TO AFBREC.AFBNDTPR;/* order need dte*/
   /* ---------- y2k out end ------------*/
  ;
   /* ---------- y2k in  begin ----------*/
  AF0DW00.AF0DWND3 = AF0DM001.AF0DMNMO[AFWIXM]; /* flip need date*/
  AF0DW00.AF0DWMM2 = AF0DW00.AF0DWMM3;
  AF0DW00.AF0DWMM1 = AF0DW00.AF0DWMM2;
  AF0DW00.AF0DWYY2 = AF0DW00.AF0DWYY3;
  AF0DW00.AF0DWYY1 = AF0DW00.AF0DWYY2;
  if (AF0DW00.AF0DWYY3 > 65)
    AF0DW00.AF0DWCC2 = 19;
  else
    AF0DW00.AF0DWCC2 = 20;
  end
  AF0DW00.AF0DWCC1 = AF0DW00.AF0DWCC2;
  AFBREC.AFBNDTPR = AF0DW00.AF0DWND1; /* order need dte*/
   /* ---------- y2k in end -------------*/
  ;
  AFBREC.KUCCOID = AF0DW02.KUCCOID[AFWIXM]; /* cust number*/
  AFBREC.ZZZCHGCT = AF0DW02.ZZZCHGCT[AFWIXM]; /* change count*/
  AFBREC.AFBTXT1 = AF0DW02.AFBTXT1[AFWIXM]; /* sales ord num*/
  AFBREC.AFBSBKQ = AF0DM001.AFBSBKQ[AFWIXM]; /* qty*/
  ;
  if (AF0DW02.AF0DBKDL > 0)
    AFBREC.AFBSBKDL = AF0DW02.AF0DBKDL[AFWIXM]; /* dollars*/
  else
    if (AF0DM001.AFBSBKDL[AFWIXM] > 0
     && AFBREC.AFBSBKQ > 0)
      AFBREC.AFBSBKDL = AF0DM001.AFBSBKDL[AFWIXM] / AFBREC.AFBSBKQ;
    else
      AFBREC.AFBSBKDL = 0; /* dollars/price*/
    end
  end
  ;
  ;
  AFBREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AFBREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VADJCU02" ("A ", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add  row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AF0DW02.SY1STNBR[AFWIXM] = AF0DM001.SY1STNBR[AFWIXM]; /* style*/
      AF0DW02.SY2CLRID[AFWIXM] = AF0DM001.SY2CLRID[AFWIXM]; /* color*/
      AF0DW02.XOWCD[AFWIXM] = AF0DM001.XOWCD[AFWIXM]; /* owner group*/
      AF0DW02.AF0DWOND[AFWIXM] = AF0DW00.AF0DWND1; /* need date*/
      AF0DW02.AFBSBKQ[AFWIXM] = AF0DM001.AFBSBKQ[AFWIXM]; /* qty*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  AFWREC.AFWPRCSN = "161"; /* Module identification*/
  AF0DM001.XXXPRCNM = AFWREC.AFWERLOC;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF0DM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = AFBREC.AFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0D161

// delete the table row
Function AF0D163()
   /* ------------------------------------------------------------*/
   /* Format the afbrec from temp storage row*/
   /* ------------------------------------------------------------*/
  ;
  AFBREC.SY1STNBR = AF0DW02.SY1STNBR[AFWIXM]; /* style*/
  AFBREC.SY2CLRID = AF0DW02.SY2CLRID[AFWIXM]; /* color*/
  AFBREC.XOWCD = AF0DW02.XOWCD[AFWIXM]; /* owner group*/
  AFBREC.XDMCD = AF0DW02.XDMCD[AFWIXM]; /* dimension code*/
  AFBREC.XSNYR = AF0DW02.XSNYR[AFWIXM]; /* season year*/
  AFBREC.XSECD = AF0DW02.XSECD[AFWIXM]; /* sesn code*/
  AFBREC.AFBNDTPR = AF0DW02.AF0DWOND[AFWIXM]; /* order need dte*/
  AFBREC.KUCCOID = AF0DW02.KUCCOID[AFWIXM]; /* cus xref*/
  AFBREC.ZZZCHGCT = AF0DW02.ZZZCHGCT[AFWIXM]; /* change count*/
  AFBREC.AFBTXT1 = AF0DW02.AFBTXT1[AFWIXM]; /* text 1*/
  AFBREC.AFBTXT2 = AF0DW02.AFBTXT2[AFWIXM]; /* text 2*/
  AFBREC.AFBSBKQ = AF0DW02.AFBSBKQ[AFWIXM]; /* qty*/
  AFBREC.AFBSBKDL = AF0DW02.AF0DBKDL[AFWIXM]; /* dollar*/
  ;
  ;
  AFBREC.ZZZCHGDT = AF0DW02.ZZZCHGDT; /* Change date*/
  AFBREC.ZZZCHGTM = AF0DW02.ZZZCHGTM; /* Change time*/
  AFBREC.ZZZCHGCT = AF0DW02.ZZZCHGCT; /* Change count*/
  ;
   /* ------------------------------------------------------------*/
   /* delete the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VADJCU02" ("D ", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* record already deleted*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
   /* GET AF0D99*/
  ;
  AFWREC.AFWPRCSN = "163"; /* Module identification*/
  AF0DM001.XXXPRCNM = AFWREC.AFWERLOC;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF0DM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU02"; /* Table view name*/
  TA1REC.TA1TBLKE = AFBREC.AFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0D163

// Driver process for 200 map Add
Function AF0D200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0D220(); /* Format and display the map*/
  ;
  AF0D230(); /* Check attention identifier*/
  ;
  AF0D240(); /* Reset fields to normal intensity*/
  ;
  AF0D250(); /* Verify the entered data*/
  ;
  AF0D260(); /* Process valid input request*/
  ;
  ;
end // end AF0D200

// Format and display the map
Function AF0D220()
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0 /* Error message to display*/
   || XXXMSGNO != 0)                   
    set AF0DM001 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  AF0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  ;
  AF0DM001.AF0DMFNF = "  ADD  "; /* Processing Opt*/
  ;
  ;
  set AF0DM001.AF0DMP07 skip, invisible; /* page back*/
  set AF0DM001.AF0DMP08 skip, invisible; /* page forward*/
  set AF0DM001.AF0DMP09 skip, invisible; /* PF09 Summary*/
  ;
  set AF0DM001.AF0DMP13 skip, invisible; /* PF13 Add*/
  set AF0DM001.AF0DMP14 initialAttributes; /* ;  PF14 inq/mnt*/
  ;
  set AF0DM001.AF0DMDLF skip, invisible; /* for add processing*/
  set AF0DM001.AF0DMPGL skip, invisible; /* for add processing*/
  set AF0DM001.AF0DWTSP skip, invisible;
  set AF0DM001.AF0DMOFL skip, invisible;
  set AF0DM001.TA5TSQIX skip, invisible;
  set AF0DM001.AF0DMNMY skip, invisible;
  set AF0DM001.AF0DMSTY skip, invisible;
  set AF0DM001.AF0DMCUS skip, invisible;
  ;
   /* -----------------------------------------------------------*/
        /* protect rows that have been added*/
   /* -----------------------------------------------------------*/
  ;
  AFWREC.AFWIXM = 1;
  while (AFWREC.AFWIXM <= 14)
    if (AF0DM001.AF0DMDEL[AFWIXM] == "A")
      set AF0DM001.KUCCOID[AFWIXM] protect; /* customer / xref*/
      set AF0DM001.SY1STNBR[AFWIXM] protect; /* style*/
      set AF0DM001.SY2CLRID[AFWIXM] protect; /* color id*/
      set AF0DM001.XOWCD[AFWIXM] protect; /* owner group*/
      set AF0DM001.AF0DMNMO[AFWIXM] protect; /* need dte mm*/
      set AF0DM001.AFBSBKDL[AFWIXM] protect; /* dollars*/
      set AF0DM001.AFBSBKQ[AFWIXM] protect; /* qty*/
      set AF0DM001.AFBTXT1[AFWIXM] protect; /* sales orders*/
    end
    ;
    set AF0DM001.AF0DMDEL[AFWIXM] protect, invisible; /* for testing*/
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* inc line index*/
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* system error message*/
    if (AFWREC.XXXMSGNO != 0) /* non system message*/
      if (AFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(AFWREC.XXXMSGNO);
      end /* display message*/
    end
  end
  if (converseVar.validationMsgNum == 0)
    set AF0DM001.KUCCOID[1] cursor;
  end
  ;
  converse AF0DM001 ;
  ;
  AFWREC.XXXMSGNO = 0; /* Reset information message number*/
  COMMAREA.CATOAP = AF0DM001.CATOAP; /* To Application*/
  COMMAREA.CAITEM = AF0DM001.CAITEM; /* Application Data*/
  ;
end // end AF0D220

// Check attention identifier
Function AF0D230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* Clear the map fields*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0DM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      AF0DS03(); /* Purge temporary storage*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/
    ;
    AF0DM001.XXXPRCNM = "130"; /* Module identification*/
    set AF0DM001.CATOAP cursor, bold; /* Highlight*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0DM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "AF00"; /* TO application*/
    end
    ;
    AF0DS03(); /* Purge temporary storage*/
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/
    ;
    AF0DM001.XXXPRCNM = "130"; /* Module identification*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
                  /* Check for valid chg process*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CACHGFL == "Y") /* security ok*/
    if (converseVar.eventKey is pf14) /* Process Map 1*/
      return;
    end
  end
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    AF0DM001.XXXPRCNM = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end AF0D230

// Reset highlighted fields
Function AF0D240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIXM = 1;
  while (AFWREC.AFWIXM <= 14)
    set AF0DM001.KUCCOID[AFWIXM] normal; /* customer / xref*/
    set AF0DM001.SY1STNBR[AFWIXM] normal; /* style*/
    set AF0DM001.SY2CLRID[AFWIXM] normal; /* color id*/
    set AF0DM001.XOWCD[AFWIXM] normal; /* owner group*/
    set AF0DM001.AF0DMNMO[AFWIXM] normal; /* need dte mm*/
    AFWREC.AFWIXM = AFWIXM + 1;
  end
  ;
  ;
  set AF0DM001.XSECD initialAttributes; /* sesn code*/
  set AF0DM001.XSNYR initialAttributes; /* sesn yr*/
  ;
  AFWREC.AFWIXM = 1; /* line index*/
  while (AFWREC.AFWIXM <= 14)
    ;
    if (AF0DM001.AF0DMDEL[AFWIXM] != "A")
                                   /* using del flag for process adds*/
      set AF0DM001.KUCCOID[AFWIXM] normal; /* customer / xref*/
      set AF0DM001.SY1STNBR[AFWIXM] normal; /* style*/
      set AF0DM001.SY2CLRID[AFWIXM] normal; /* color id*/
      set AF0DM001.XOWCD[AFWIXM] normal; /* owner group*/
      set AF0DM001.AF0DMNMO[AFWIXM] normal; /* need dte mm*/
      ;
      ;
      set AF0DM001.AFBSBKDL[AFWIXM] initialAttributes; /* dollars*/
      set AF0DM001.AFBSBKQ[AFWIXM] initialAttributes; /* qty*/
      set AF0DM001.AFBTXT1[AFWIXM] initialAttributes; /* sales orders*/
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* inc line index*/
  end
  ;
  set AF0DM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0DM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
  if (AF0DM001.XSECD == "?") /* sesn code list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      AF0DM001.XXXPRCNM = "240"; /* Module identification*/
      converseLib.validationFailed(04); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of sesn codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0DM001.XSECD == "?") /* sesn code list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "SEASON CODE "; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSE01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      AF0DM001.XSECD = XP1REC.XSECD; /* Restore prior code*/
    else
      ;
      AF0DM001.XSECD = XSETBL.XSECD[XX0XWPIX];
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  return;
  ;
end // end AF0D240

// Verify the entered data
Function AF0D250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0DM001.CAITEM > " ") /* Application data was entered*/
    ;
    set AF0DM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    AFWREC.AFWPRCSN = "250 "; /* Process number*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    return;
  end
  ;
  if (converseVar.eventKey is pf14) /* request for inq/maint*/
    return;
  end
  ;
  ;
  AFWREC.AFWIXM = 14; /* Initialize line index*/
  ;
  while (AFWREC.AFWIXM > 0) /* Until end of lines*/
    if (AF0DM001.AF0DMDEL[AFWIXM] != "A")
      AF0D251(); /* Verify new data*/
    end
    AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* Decrement line number*/
  end
  ;
   /* ------------------------------------------------------------*/
end // end AF0D250

// Verify any changed data
Function AF0D251()
   /* ============================================================*/
   /* ===== E D I T    F O R   V A L I D  I N P U T          =====*/
   /* =====                                                  =====*/
   /* =====*/
   /* ============================================================*/
  ;
        /* (process only if line has data)*/
  if (AF0DM001.SY1STNBR[AFWIXM] == " " /* style required field*/
   && AF0DM001.SY2CLRID[AFWIXM] == " " /* color*/
   && AF0DM001.XOWCD[AFWIXM] == " "    /* owner group*/
   && AF0DM001.KUCCOID[AFWIXM] == 0)   /* customer*/
    return;
  end
  ;
  AF0DM001.AF0DMDEL[AFWIXM] = " "; /* reset edit flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* quantity  entered...get price for dollars*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0DM001.AFBSBKQ[AFWIXM] > 0)
    AF0D253(); /* get price*/
    if (AFWREC.XXXMSGNO == 91)
      AF0DM001.AF0DMDEL[AFWIXM] = "E"; /* line*/
    end
  end
  ;
   /* -----------------------------------------------------------*/
   /* need date valid and between beg and end offer dates*/
   /* -----------------------------------------------------------*/
   /* ------------ Y2k out begin ------------*/
   /* MOVE AF0DM001.AF0DMNMO(AFWIXM) TO AF0DW00.AF0DWND2;*/
   /* ------------ Y2k out end --------------*/
   /* ------------ Y2k in  begin ------------*/
  AF0DW00.AF0DWND3 = AF0DM001.AF0DMNMO[AFWIXM];
  AF0DW00.AF0DWMM2 = AF0DW00.AF0DWMM3;
  AF0DW00.AF0DWYY2 = AF0DW00.AF0DWYY3;
  if (AF0DW00.AF0DWYY2 > 65)
    AF0DW00.AF0DWCC2 = 19;
  else
    AF0DW00.AF0DWCC2 = 20;
  end
  AF0DW00.AF0DWCC1 = AF0DW00.AF0DWCC2;
   /* ------------ Y2k in  end --------------*/
  AF0DW00.AF0DWMM1 = AF0DW00.AF0DWMM2;
  AF0DW00.AF0DWYY1 = AF0DW00.AF0DWYY2;
  ;
  if (AF0DW00.AF0DWMM2 < 01 /* need month*/
   || AF0DW00.AF0DWMM2 > 12)
    set AF0DM001.AF0DMNMO[AFWIXM] cursor, bold;
    AFWREC.XXXMSGNO = 22;
    AF0DM001.AF0DMDEL[AFWIXM] = "E"; /* line*/
  else
    PG2REC.XDMCD = "00";
    PG2REC.XGPCD = "03";
    PG2REC.SY1STNBR = AF0DM001.SY1STNBR[AFWIXM];
    PG2REC.SY2CLRID = AF0DM001.SY2CLRID[AFWIXM];
    XSPG202();
    if (SQLCA.VAGen_SQLCODE == 0)
      AF0DW00.AF0DWHBE = PG2REC.SY2POFBD;
      ;
      /* ------------ Y2k in  begin ------------*/
      AF0DW00.AF0DWBCC = AF0DW00.AF0DWHCC;
      /* ------------ Y2k in  end --------------*/
      ;
      AF0DW00.AF0DWBYY = AF0DW00.AF0DWHYY;
      AF0DW00.AF0DWBMM = AF0DW00.AF0DWHMM;
      AF0DW00.AF0DWHBE = PG2REC.SY2POFXD;
      ;
      /* ------------ Y2k in  begin ------------*/
      AF0DW00.AF0DWECC = AF0DW00.AF0DWHCC;
      /* ------------ Y2k in  end -------------*/
      ;
      AF0DW00.AF0DWEYY = AF0DW00.AF0DWHYY;
      AF0DW00.AF0DWEMM = AF0DW00.AF0DWHMM;
      if (AF0DW00.AF0DWND1 < AF0DW00.AF0DWBDT
       || AF0DW00.AF0DWND1 > AF0DW00.AF0DWEDT)
        AFWREC.XXXMSGNO = 92;
        AF0DM001.AF0DMDEL[AFWIXM] = "E";
        set AF0DM001.AF0DMNMO[AFWIXM] cursor, bold;
      end
    end
  end
  ;
  ;
  if (AF0DM001.SY1STNBR[AFWIXM] == " ") /* style required field*/
    set AF0DM001.SY1STNBR[AFWIXM] cursor, bold;
    AF0DM001.AF0DMDEL[AFWIXM] = "E"; /* line*/
    AFWREC.XXXMSGNO = 23;
  else
    ;
    PG2REC.XDMCD = "00"; /* dimension cd*/
    PG2REC.XGPCD = "03"; /* gpc code apparel*/
    PG2REC.SY1STNBR = AF0DM001.SY1STNBR[AFWIXM]; /* style*/
    PG2REC.SY2CLRID = AF0DM001.SY2CLRID[AFWIXM]; /* color*/
    XSPG202(); /* validate style color*/
    if (SQLCA.VAGen_SQLCODE != 0)
      AFWREC.XXXMSGNO = 23;
      AF0DM001.AF0DMDEL[AFWIXM] = "E"; /* line*/
      set AF0DM001.SY1STNBR[AFWIXM] cursor, bold;
      set AF0DM001.SY2CLRID[AFWIXM] bold;
    end
  end
  ;
  XP1REC.XWHCD = "51";
  XP1REC.XOWCD = AF0DM001.XOWCD[AFWIXM];
  ;
  if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
   /* next sentence*/
  else
    AFWREC.XXXMSGNO = 121;
    AF0DM001.AF0DMDEL[AFWIXM] = "E"; /* line*/
    set AF0DM001.XOWCD[AFWIXM] cursor, bold;
  end
  if (AF0DM001.KUCCOID[AFWIXM] == 0) /* Customer*/
    set AF0DM001.KUCCOID[AFWIXM] cursor, bold; /* Customer*/
    AF0DM001.AF0DMDEL[AFWIXM] = "E"; /* line*/
    AFWREC.XXXMSGNO = 24;
  else
    KUCREC.KUCCOID = AF0DM001.KUCCOID[AFWIXM]; /* Customer Xref*/
    AF0D252(); /* validate customer xref*/
    if (SQLCA.VAGen_SQLCODE != 0)
      set AF0DM001.KUCCOID[AFWIXM] cursor, bold; /* Customer*/
      AF0DM001.AF0DMDEL[AFWIXM] = "E"; /* line*/
      AFWREC.XXXMSGNO = 24;
    else
      AF0DM001.AF0DCONM[AFWIXM] = KUCREC.KUCCONM; /* customer name*/
    end
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
            /* if no errors exsist then flag line for update*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0DM001.AF0DMDEL[AFWIXM] == " ") /* no errors ok to add*/
    AF0DM001.AF0DMDEL[AFWIXM] = "U"; /* line ready for add processing*/
  end
  ;
   /* ====================== END OF PROCESS ======================*/
end // end AF0D251

// Select Customer Xref
Function AF0D252()
   /* ------------------------------------------------------------*/
   /* select Customer Xref*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  end /* get customer*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  AFWREC.AFWPRCSN = "252"; /* Module identification*/
  AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD NEW TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF0DM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCMPNY01"; /* Table view name*/
   /* OVE KUCREC.KUCCOID TO TA1REC.TA1TBLKE ; Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0D252

// obtain price from subroutine
Function AF0D253()
   /* ------------------------------------------------------------*/
   /* this module get the price for a new style/color*/
   /* ------------------------------------------------------------*/
  ;
  set AF1REC empty; /* Reset rec work area*/
  ;
  ;
  AF1REC.XSECD = XP1REC.XSECD;
  AF1REC.XSNYR = XP1REC.XSNYR;
  AF1REC.XGPCD = "03"; /* GPC cd*/
  AF1REC.SY1STNBR = AF0DM001.SY1STNBR[AFWIXM]; /* style*/
  AF1REC.SY2CLRID = AF0DM001.SY2CLRID[AFWIXM];
  AF1REC.XPYCD = "01"; /* Price type*/
  AF1REC.XQACD = "01"; /* Price quality*/
  ;
  try
    call "AF1730" (AF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/
  ;
  ;
  if (sysVar.errorCode != "00000000" /* Call NOT successful*/
   || AF1REC.AF1-RETURN-CODE == 1    /* and normal return code*/
   || AF1REC.AF1-RETURN-CODE == 3)   /* and normal return code*/
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    SQLCA.VAGen_SQLCODE = AF1REC.AF1-ERROR-SQLCODE;
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "253 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "DECLARE TABLE ROW";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRICE01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/
    ;
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  else
    if (AF1REC.AF1-RETURN-CODE == 2) /* no price found*/
       /* price is not availabe so user must enter dollars*/
      AFWREC.XXXMSGNO = 91;
      set AF0DM001.AFBSBKDL[AFWIXM] cursor, bold;
      AF0DW02.AF0DBKDL[AFWIXM] = 0;
      return;
    else
      AF0DW02.AF0DBKDL[AFWIXM] = AF1REC.SY5PRCUN;
      AF0DW04.AF0DWDLR = AF1REC.SY5PRCUN;
      AF0DM001.AFBSBKDL[AFWIXM] = AF0DM001.AFBSBKQ[AFWIXM] *       AF0DW04.AF0DWDLR;
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end AF0D253

// Process valid input request
Function AF0D260()
   /* ------------------------------------------------------------*/
      /* check for transfer to inq/maint process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14)
    AFWREC.AFWMAP = "1";
    set AF0DM001 initial;
    exit stack;
  end
   /* ------------------------------------------------------------*/
      /* any modifiable data was changed, update the table row.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  ;
  ;
  ;
  ;
  ;
  AF0DW00.AF0DWERR = "N"; /* Data Error*/
  ;
   /* ------------------------------------------------------------*/
      /* If xxxmsgno containes an error message. Then keep the*/
      /* current cursor position.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.XXXMSGNO > 0) /* data error occured*/
    AF0DW00.AF0DWERR = "Y"; /* Data Error*/
  end
  ;
  ;
  ;
  ;
  AFWREC.AFWIXM = 14; /* set index to last line*/
  ;
  while (AFWREC.AFWIXM > 0) /* 14 screen lines*/
    ;
    if (AF0DM001.AF0DMDEL[AFWIXM] == "U") /* line has passed edits*/
      AF0D261(); /* add afbrec*/
      if (converseVar.validationMsgNum == 0) /* successful add*/
        AF0DM001.AF0DMDEL[AFWIXM] = "A";
        AFWREC.XXXMSGNO = 13; /* successful add*/
        ;
                      /* set search keys for reselect.*/
                      /* position maint screen at last add*/
        ;
        AF0DW00.AF0DWSY1 = AF0DM001.SY1STNBR[AFWIXM]; /* STYLE*/
        AF0DW00.AF0DWCX1 = AF0DM001.KUCCOID[AFWIXM]; /* customer xref*/
        AF0DW00.AF0DWND2 = AF0DM001.AF0DMNMO[AFWIXM]; /* need month*/
        AFWREC.AFWSERCH = "Y"; /* set serch on*/
        AFWREC.AFWSWR = "Y"; /* set reselect on*/
      else
        AF0DM001.AF0DMDEL[AFWIXM] = "E";
        AFWREC.XXXMSGNO = 31;
        set AF0DM001.SY1STNBR[AFWIXM] cursor, bold;
        set AF0DM001.SY2CLRID[AFWIXM] bold;
      end
    end
    AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* inc index*/
  end
  if (AFWREC.XXXMSGNO == 31
   || AFWREC.XXXMSGNO == 13)
    ;
    AFWREC.AFWPRCSN = "260"; /* Module identification*/
    AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
                  /* (check cursor position*/
  end
  ;
  sysVar.arrayIndex = 0;
  ;
  if (AFWREC.XXXMSGNO != 31) /* dup record*/
    if (AF0DW00.AF0DWERR == "N") /* errors*/
      if (" " in AF0DM001.AF0DMDEL)
      end
    end
  end
  ;
  if (sysVar.arrayIndex != 0)
    set AF0DM001.KUCCOID[sysVar.arrayIndex] cursor;
  end
  ;
  ;
end // end AF0D260

// Select for adding table row
Function AF0D261()
   /* ------------------------------------------------------------*/
   /* move need date to group item, group item to afbrec*/
   /* ------------------------------------------------------------*/
  ;
   /* ---------- y2k out begin -----------*/
   /* MOVE AF0DM001.AF0DMNMO(AFWIXM) TO AF0DW00.AF0DWND2;*/
   /* MOVE AF0DW00.AF0DWMM2 TO AF0DW00.AF0DWMM1;*/
   /* MOVE AF0DW00.AF0DWYY2 TO AF0DW00.AF0DWYY2;*/
   /* MOVE AF0DW00.AF0DWND1 TO AF0DW02.AF0DWOND;*/
   /* ---------- y2k out end -------------*/
  ;
   /* ---------- y2k in  begin -----------*/
  AF0DW00.AF0DWND3 = AF0DM001.AF0DMNMO[AFWIXM];
  AF0DW00.AF0DWMM2 = AF0DW00.AF0DWMM3;
  AF0DW00.AF0DWMM1 = AF0DW00.AF0DWMM2;
  AF0DW00.AF0DWYY2 = AF0DW00.AF0DWYY3;
  AF0DW00.AF0DWYY1 = AF0DW00.AF0DWYY2;
  ;
  if (AF0DW00.AF0DWYY3 > 65)
    AF0DW00.AF0DWCC2 = 19;
  else
    AF0DW00.AF0DWCC2 = 20;
  end
  ;
  AF0DW02.AF0DWOND = AF0DW00.AF0DWND1;
   /* ---------- y2k in end --------------*/
  ;
   /* ------------------------------------------------------------*/
   /* then format the  data from the map to the afbrec.*/
   /* ------------------------------------------------------------*/
               /* (date from display storage)*/
  AFBREC.AFBNDTPR = AF0DW02.AF0DWOND; /* or/need/dte yymm*/
  AFBREC.SY1STNBR = AF0DM001.SY1STNBR[AFWIXM]; /* style*/
  AFBREC.SY2CLRID = AF0DM001.SY2CLRID[AFWIXM]; /* color*/
  AFBREC.XOWCD = AF0DM001.XOWCD[AFWIXM]; /* owner group*/
  ;
   /* ---------- y2k out begin -----------*/
   /* AFBREC.XSNYR = 1900 + AF0DM001.XSNYR;     /* ccyy*/
   /* ---------- y2k out end -------------*/
   /* ---------- y2k in begin ------------*/
  if (AFBREC.XSNYR < 1960) /* if no ccyy set up yet*/
    if (AFBREC.XSNYR > 65)
      AFBREC.XSNYR = 1900 + AF0DM001.XSNYR; /* ccyy*/
    else
      AFBREC.XSNYR = 2000 + AF0DM001.XSNYR; /* ccyy*/
    end
  end
   /* ---------- y2k in end --------------*/
  ;
  AFBREC.KUCCOID = AF0DM001.KUCCOID[AFWIXM]; /* customer xref*/
  AFBREC.XSECD = AF0DM001.XSECD; /* sesn code*/
  AFBREC.AFBTXT1 = AF0DM001.AFBTXT1[AFWIXM]; /* text 1*/
  AFBREC.AFBSBKQ = AF0DM001.AFBSBKQ[AFWIXM]; /* qty*/
  AFBREC.AFBSBKDL = AF0DW02.AF0DBKDL[AFWIXM]; /* dollar*/
  AFBREC.XXXSTAT = "A"; /* status*/
  AFBREC.XDMCD = "00"; /* dimension*/
  ;
  XX0XS01(); /* date and time*/
  ;
  AFBREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AFBREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AFBREC.ZZZCHGCT = 0; /* Change count*/
  ;
   /* ------------------------------------------------------------*/
   /* select unique to determine if row exists*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VADJCU02" ("S ", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return with error*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      converseLib.validationFailed(31); /* record can not exsist when adding*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If row not found, ok to add*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      AF0D262(); /* ok to add Customer Special booking*/
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  AFWREC.AFWPRCSN = "261"; /* Module identification*/
  AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD NEW TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = AFBREC.AFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0D261

// Add the table row
Function AF0D262()
   /* ------------------------------------------------------------*/
   /* add the row to the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VADJCU02" ("A ", SQLCA, AFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE < 0) /* invalid add*/
      ;
      AFWREC.AFWPRCSN = "262"; /* Module identification*/
      AF0DM001.XXXPRCNM = AFWREC.AFWERLOC;
      converseLib.validationFailed(12); /* Indicate updated by another*/
      ;
      return; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ;
  AFWREC.AFWPRCSN = "262"; /* Module identification*/
  AF0DM001.XXXPRCNM = AFWREC.AFWERLOC; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD  NEW  TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADJCU02"; /* Table view name*/
  TA1REC.TA1TBLKE = AFBREC.AFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0D262

// Update temporary storage page
Function AF0DS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (XP1REC.XP1MISC2 != "Y") /* tsq does not exist*/
    return;
  end
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (AF0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF0DM001.XXXPRCNM = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF0DM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0DS01

// Read temporary storage page
Function AF0DS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  AF0DW02.AF0DWLEN = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = AFWREC.AFWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (AF0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF0DM001.XXXPRCNM = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF0DM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0DS02

// Purge Temporary Storage
Function AF0DS03()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0DW02 empty; /* M001 display storage*/
  ;
  AFWREC.AFWSWU = "N"; /* Storage update switch*/
  ;
  AFWREC.TA5TSQIX = 0; /* Highest page number*/
  AFWREC.AFWIXM = 1; /* Display line number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (AF0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    XP1REC.XP1MISC2 = "N"; /* indicate no tsq*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF0DM001.XXXPRCNM = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF0DM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0DS03

// Add page to temporary storage
Function AF0DS04()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  AF0DW02.AF0DWLEN = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (AF0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    XP1REC.XP1MISC2 = "Y"; /* indicate tsq exists*/
    ;
    set AF0DW02 empty; /* M001 display storage*/
    ;
    AFWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    AFWREC.AFWIXM = 1; /* Display line number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF0DM001.XXXPRCNM = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF0DM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0DS04

// Read AF02 tsq
Function AF0DS05()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  AF0DW02.AF0DWLEN = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = "AF02"; /* Application identification*/
  TA5REC.TA5TSQIX = XP1REC.XP1MNO; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (AF0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF0DM001.XXXPRCNM = "S05"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF0DM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0DS05

// Move AF02 tsq to AF0DW04
Function AF0DS06()
   /* -------------------------------------------------------------*/
       /* move af02 tsq selection to af0dw04*/
   /* -------------------------------------------------------------*/
  ;
  AFWREC.AFWIXM = 1;
  ;
  while (AFWIXM <= 14)
    if (AF0DW02.AF0DWPSW[AFWIXM] == "S")
      AF0DW04.AF0DNDYY = AF0DW02.AF0DWOYY[AFWIXM]; /* need yr*/
      AF0DW04.AF0DNDMM = AF0DW02.AF0DWOMM[AFWIXM]; /* need mo*/
      AF0DW04.AF0DSTYL = AF0DW02.SY1STNBR[AFWIXM]; /* style nbr*/
      AF0DW04.AF0DCOLR = AF0DW02.SY2CLRID[AFWIXM]; /* color*/
      AF0DW04.AF0DCUST = AF0DW02.KUCCOID[AFWIXM]; /* cust nbr*/
      AF0DW04.AF0DCSNM = AF0DW02.AF0DWCNM[AFWIXM]; /* cust name*/
      AFWIXM = 14;
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    ;
  end
  ;
  ;
end // end AF0DS06

// Purge AF02 tsq
Function AF0DS07()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0DW02 empty; /* M001 display storage*/
  ;
  AFWREC.AFWSWU = "N"; /* Storage update switch*/
  ;
  AFWREC.TA5TSQIX = 0; /* Highest page number*/
  AFWREC.AFWIXM = 1; /* Display line number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = "AF02"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (AF0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    XP1REC.XP1MISC2 = "N"; /* indicate no tsq*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  AF0DM001.XXXPRCNM = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AF0DM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AF0DS07

//*** RECORD=AF0DW00 ****
// afod working storage record
// ***********************
Record AF0DW00 type basicRecord
  5 AF0DWK1 AF0DWK1 ; 
    10 AF0DWCX1 AF0DWCX1 ; 
    10 AF0DWSY1 AF0DWSY1 ; 
    10 AF0DWND1 AF0DWND1 ; 
      15 AF0DWCC1 AF0DWCC1 ; 
      15 AF0DWYY1 AF0DWYY1 ; 
      15 AF0DWMM1 AF0DWMM1 ; 
  5 AF0DWK2 AF0DWK2 ; 
    10 AF0DWCX2 AF0DWCX2 ; 
    10 AF0DWSY2 AF0DWSY2 ; 
    10 AF0DWND2 AF0DWND2 ; 
      15 AF0DWCC2 AF0DWCC2 ; 
      15 AF0DWYY2 AF0DWYY2 ; 
      15 AF0DWMM2 AF0DWMM2 ; 
  5 AF0DWND3 AF0DWND3 ; 
    10 AF0DWMM3 AF0DWMM3 ; 
    10 AF0DWYY3 AF0DWYY3 ; 
  5 * char(7) ; 
    10 AF0DWDEL AF0DWDEL ; 
    10 AF0DWCFL AF0DWCFL ; 
    10 AF0DWERR AF0DWERR ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
  5 AF0DWSCY AF0DWSCY ; 
    10 AF0DWSCD AF0DWSCD ; 
    10 AF0DWSYY AF0DWSYY ; 
  5 AF0DKCUS AF0DKCUS ; 
  5 AF0DWBDT AF0DWBDT ; 
    10 AF0DWBCC AF0DWBCC ; 
    10 AF0DWBYY AF0DWBYY ; 
    10 AF0DWBMM AF0DWBMM ; 
  5 AF0DWEDT AF0DWEDT ; 
    10 AF0DWECC AF0DWECC ; 
    10 AF0DWEYY AF0DWEYY ; 
    10 AF0DWEMM AF0DWEMM ; 
  5 AF0DWHBE AF0DWHBE ; 
    10 AF0DWHCC AF0DWHCC ; 
    10 AF0DWHYY AF0DWHYY ; 
    10 AF0DWHMM AF0DWHMM ; 
    10 AF0DWHDD AF0DWHDD ; 
  5 AF0DW-SEL-COUNT AF0DW-SEL-COUNT ; 
end // end AF0DW00

//*** RECORD=AF0DW02 ****
// ******************** saved forecast ************************
// 
// DB2 TABLE:           xxxxxx.xxxxxxxx
// 
// COPYLIB MEMBER:      xxxxxxxxx
// 
// I/O MOD:             IOxxxx
// 
// KEY TO DB2 TABLE:    xgpcd
//                      xsecd
//                      sy2sesny
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      kuccoid
// 
// DATE CREATED:        08/23/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 08-23-87   ban       INITIAL RECORD CREATION
// 01-11-91   kli       chg pc2cuxid to kkucoid
// ***********************
Record AF0DW02 type basicRecord
  5 AF0DWLEN AF0DWLEN ; 
  5 AF0DWGP2 AF0DWGP2 [14] ; 
    10 AF0DWKEY AF0DWKEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 XOWCD XOWCD ; 
      15 AF0DWOND AF0DWOND ; 
        20 AF0DW0CC AF0DW0CC ; 
        20 AF0DWOYY AF0DWOYY ; 
        20 AF0DWOMM AF0DWOMM ; 
    10 AF0DWCNM AF0DWCNM ; 
    10 AFBTXT1 AFBTXT1 ; 
    10 AFBTXT2 AFBTXT2 ; 
    10 AFBSBKQ AFBSBKQ ; 
    10 AF0DBKDL AF0DBKDL ; 
    10 XXXSTAT XXXSTAT ; 
    10 KUCCOID KUCCOID ; 
    10 AF0DWPSW AF0DWPSW ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end AF0DW02

//*** RECORD=AF0DW03 ****
// Customer Speical Bookings
// This Record is used for locating temporary storage page
// when a search key is entered in af0dm001 screen header
// ***********************
Record AF0DW03 type basicRecord
  5 AF0DWGP3 AF0DWGP3 [500] ; 
    10 KUCCOID KUCCOID ; 
    10 SY1STNBR SY1STNBR ; 
    10 AFBNDTPR AFBNDTPR ; 
    10 AFWTSP AFWTSP ; 
    10 AF0DWSLN AF0DWSLN ; 
end // end AF0DW03

//*** RECORD=AF0DW04 ****
// afod working storage record
// ***********************
Record AF0DW04 type basicRecord
  5 AF0DNDDT AF0DNDDT ; 
    10 AF0DNDMM AF0DNDMM ; 
    10 AF0DNDYY AF0DNDYY ; 
  5 AF0DSTYL AF0DSTYL ; 
  5 AF0DCOLR AF0DCOLR ; 
  5 AF0DCUST AF0DCUST ; 
  5 AF0DCSNM AF0DCSNM ; 
  5 AF0DWDLR AF0DWDLR ; 
end // end AF0DW04

// AF_SPCL_CUST_DLR
DataItem AF0DBKDL decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// stylefrom hdr
DataItem AF0DCOLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer name on hdr
DataItem AF0DCSNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer num frm hdr
DataItem AF0DCUST num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cus num for name lookup
DataItem AF0DKCUS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date from hdr
DataItem AF0DNDDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need month from hdr
DataItem AF0DNDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need year from hdr
DataItem AF0DNDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// stylefrom hdr
DataItem AF0DSTYL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection count
DataItem AF0DW-SEL-COUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0DW0CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0DWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beg offer date w/o day
DataItem AF0DWBDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem AF0DWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AF0DWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem AF0DWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem AF0DWCC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Confirm flag used for deletes
DataItem AF0DWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer name
DataItem AF0DWCNM char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 9 digit Cus X-ref
DataItem AF0DWCX1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 9 digit Cus X-ref
DataItem AF0DWCX2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Del flag used to position curs
DataItem AF0DWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold $ for calcs
DataItem AF0DWDLR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0DWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending offer date w/o day
DataItem AF0DWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem AF0DWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// err flag used to posit cur
DataItem AF0DWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem AF0DWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group item for record level
DataItem AF0DWGP2 char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group item for record level
DataItem AF0DWGP3 char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold for beg and end date
DataItem AF0DWHBE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold century
DataItem AF0DWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold day
DataItem AF0DWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold month
DataItem AF0DWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold year
DataItem AF0DWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// search key from map
DataItem AF0DWK1 char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search key from tps
DataItem AF0DWK2 char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// afbrec key
DataItem AF0DWKEY char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage page length
DataItem AF0DWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem AF0DWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem AF0DWMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need month from map
DataItem AF0DWMM3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date
DataItem AF0DWND1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date
DataItem AF0DWND2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0DWND3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order need month
DataItem AF0DWOMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order Need Date
DataItem AF0DWOND num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order need year
DataItem AF0DWOYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// process flag update confirm
DataItem AF0DWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season code
DataItem AF0DWSCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sesn cd sesn yy
DataItem AF0DWSCY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current screen line
DataItem AF0DWSLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style
DataItem AF0DWSY1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style
DataItem AF0DWSY2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season yy
DataItem AF0DWSYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem AF0DWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AF0DWYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need year from map
DataItem AF0DWYY3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

