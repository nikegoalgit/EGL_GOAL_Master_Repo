package af0f;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XPAF100;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSLC;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom4.XSPG201;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XDMCD;
import corpx1.XDVABRV;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGACD;
import corpx1.XGATBL;
import corpx1.XLCCD;
import corpx1.XLCTBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XOWABRV;
import corpx2.XOWCD;
import corpx2.XOWKEY;
import corpx2.XPCCD;
import corpx2.XPLABRV;
import corpx2.XPLCD;
import corpx2.XPRABRV;
import corpx2.XPRCD;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpx2.XSUCD;
import corpx2.XWHCD;
import corpy2.YSNTBL;
import corpz3.ZZZCHGCT;
import pg.common.PG1FCTCD;
import pg.common.PG1REC;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY4REC;
import sy.common.SY4SZSCL;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0F ****
// This application is designed to enter size percents for
// apparel forecasted style/sizes. The user will be able to
// activate and inactivate certain sizes for a particular
// style. Percentages for each active size will also be
// entered.
// 
// The user will be able to select historical as-of-date
// information for inquiry and comparison purposes on this
// screen. This information, which can be paged forward or
// backward, will be shown on the right side of the screen.
// 
// This application will maintain the Season/Style/Size/
// Databases.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/19/89   JRAMOS   New application.
// 04-25-94   LREIN    Added code for corporate look (XOW '**')
// 02-08-95   kj       xsn-ysn
// 12-30-97   oricha   y2k modifications:  af0fm001 (zero fill
//                     year); af0fs02, s09, s13, s18, s19, s22
//                     s35, 151, s14, s15, s10, s11.
// 08-05-98   rtempl   Fix bug that didn't include units
// *********************
Program AF0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0FW01 AF0FW01; // record
  AF0FW02 AF0FW02; // record
  AF0FW03 AF0FW03; // record
  AF0FW04 AF0FW04; // record
  AF2REC AF2REC; // record
  AF5REC AF5REC; // record
  AF9REC AF9REC; // record
  AFFREC AFFREC; // record
  AFGREC AFGREC; // record
  AFHREC AFHREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use AF0FM.AF0FM001, // form
  AF0FM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/

    set AF0FW01 empty; /* Initialize working storage*/
    set AF0FW02 empty; /* Initialize working storage*/
    set AF0FW03 empty; /* Initialize working storage*/
    set AFFREC empty; /* Initialize working storage*/
    set AFGREC empty; /* Initialize working storage*/
    set AFHREC empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set AF9REC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set PG3REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set SY4REC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0FM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF0F"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/

    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/


              /* (Initialize Style Row Loop Limit Ctr)*/

    AF0FW01.AF0FWLIM = +10000; /* Stop loop every 10000 rows read*/



       /* (Define Map Environment, Assign/Edit Defaults)*/

    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process name*/


                      /* (Set Map Item Values)*/

    AF0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/


    if (XP1REC.XDVCD == "  ")
      XP1REC.XDVCD = "01";
      XP1REC.XDVABRV = "NIKE D";
    end

    if (XP1REC.XOWCD == "  ")
      XP1REC.XOWCD = "00";
      XP1REC.XOWABRV = "N/A";
    end

                      /* (Process Passed Items)*/

    AF0FM001.XXXUSER = XP1REC.XXXUSER; /* Fcster code to map*/
    AF0FM001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    AF0FM001.XSNYR = XP1REC.XSNYR; /* Season yr to map*/
    AF0FM001.XPRCD = XP1REC.XPRCD; /* product type to map*/
    AF0FM001.XGACD = XP1REC.XGACD; /* Gender age cd to map*/
    AF0FM001.XPLCD = XP1REC.XPLCD; /* product line to map*/
    AF0FM001.XPCCD = XP1REC.XPCCD; /* Category cd to map*/
    AF0FM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd to map*/
    AF0FM001.XLCCD[1] = XP1REC.XLCCD[1]; /* life cycle to map*/
    AF0FM001.XLCCD[2] = XP1REC.XLCCD[2]; /* life cycle to map*/
    AF0FM001.XLCCD[3] = XP1REC.XLCCD[3]; /* life cycle to map*/
    AF0FM001.XLCCD[4] = XP1REC.XLCCD[4]; /* life cycle to map*/
    AF0FM001.SY1STNBR = XP1REC.SY1STNBR; /* Style cd to map*/
    AF0FM001.AF0FMXOW = XP1REC.XOWCD; /* Owner Group cd to map*/
    AF0FM001.XOWABRV = XP1REC.XOWABRV; /* Owner Group abrv to map*/
    AF0FM001.XDVCD = XP1REC.XDVCD; /* Division cd to map*/
    AF0FM001.XDVABRV = XP1REC.XDVABRV; /* Division abrv to map*/
    AF0FM001.AF0FM-BLNK-FL = "N"; /* Blank only indicator*/

    XP1REC.XXXUSER = " "; /* Clear Fcster code*/
    XP1REC.XSECD = " "; /* Clear Season cd*/
    XP1REC.XSNYR = 0; /* Clear Season yr*/
    XP1REC.XGACD = " "; /* Clear Gender age cd*/
    XP1REC.XGAABRV = " "; /* Clear XGA abrv*/
    XP1REC.XPCCD = " "; /* Clear Category cd*/
    XP1REC.XPCABRV = " "; /* Clear Xpc abrv*/
    XP1REC.XSUCD = " "; /* Clear Silhouette cd*/
    XP1REC.XSUABRV = " "; /* Clear Xsu abrv*/
    XP1REC.SY1STNBR = " "; /* Clear Style cd*/
    XP1REC.XOWCD = " "; /* Clear Owner group cd*/
    XP1REC.XOWABRV = " "; /* Clear Owner group abrv*/
    XP1REC.XDVCD = " "; /* Clear Division cd*/
    XP1REC.XDVABRV = " "; /* Clear Division abrv*/
    XP1REC.XPRCD = " "; /* clear xpr cd*/
    XP1REC.XPRABRV = " "; /* Clear xpr abrv*/
    XP1REC.XPLCD = " "; /* clear xpl cd*/
    XP1REC.XPLABRV = " "; /* Clear xpl abrv*/
    XP1REC.XLCCD[1] = " "; /* clear life cyc*/
    XP1REC.XLCCD[2] = " "; /* clear life cyc*/
    XP1REC.XLCCD[3] = " "; /* clear life cyc*/
    XP1REC.XLCCD[4] = " "; /* clear life cyc*/


                 /* (Protect,Dark Map Dtl Lines)*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 10) /* Protect/darken map display*/
      set AF0FM001.AF0FMSTY[AFWIDX5] skip, invisible; /* Style no.*/
      set AF0FM001.XOWCD[AFWIDX5] skip, invisible; /* Owner group cd*/
      set AF0FM001.AF0FMSTD[AFWIDX5] skip, invisible; /* Style desc*/
      set AF0FM001.AF2FSTST[AFWIDX5] skip, invisible; /* Style status*/
      set AF0FM001.SY4IDDSC[AFWIDX5] skip, invisible; /* Size desc*/
      set AF0FM001.AF2SZPCT[AFWIDX5] skip, invisible; /* Size pcent*/
      set AF0FM001.AF0FMSZ1[AFWIDX5] skip, invisible; /* History size 1*/
      set AF0FM001.AF0FMPC1[AFWIDX5] skip, invisible; /* History pcent 1*/
      set AF0FM001.AF0FMSZ2[AFWIDX5] skip, invisible; /* History size 2*/
      set AF0FM001.AF0FMPC2[AFWIDX5] skip, invisible; /* History pcent 2*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    set AF0FM001.XSECD cursor; /* Set cursor position*/
    AF0FM001.AF0FMPCT = 0; /* Clear total size pcent*/


                      /* (Converse Main Process)*/

    goto AF0F001; /* Main Process*/



    AF0F001: AF0F001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Season/Style Size/Pcent Application*/
     /* ------------------------------------------------------------*/

    goto AF0F001;


  end // end main
end // end AF0F

// Choose which map to display
Function AF0F001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/



  AF0F110(); /* Obtain the data to display*/

  AF0F120(); /* Format and display the map*/

  AF0F130(); /* Check attention identifier*/

  AF0F140(); /* Reset fields to normal intensity*/

  AF0F150(); /* Verify the entered data*/

  AF0F160(); /* Process valid input request*/




end // end AF0F001

// Obtain the data to display
Function AF0F110()
   /* ------------------------------------------------------------*/
   /* Check for common data selection criteria. If met, then*/
     /* exit to next process;*/

   /* Execute data retrieval processes for Style/Size display;*/
   /* Execute data retrieval processes for Historical display.*/

   /* --> Note that while Style/Size data and Historical data*/
       /* share the same screen(or map), both are intrinsically*/
       /* different from each other so processes to obtain data*/
       /* are completely seperate and unrelated.*/
   /* ------------------------------------------------------------*/
   /* *========================================**/
   /* *  Check Common Data Selection Criteria  **/
   /* *========================================**/

  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || AF0FW01.AF0FWPND == "Y"           /* Pop-up window processing active*/
   || converseVar.eventKey is pa2       /* PA2 was pressed*/
   || AFWREC.AFWFIRST == " ")           /* First time through*/
    return; /* Then exit to next process*/
  end

   /* *======================================**/
   /* *  Obtain Data for Style/Size Display  **/
   /* *======================================**/

  AF0F111(); /* Obtain Style/Size data*/

   /* *======================================**/
   /* *  Obtain Data for Historical Display  **/
   /* *======================================**/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    AF0F112(); /* Obtain Historical data*/
  end

end // end AF0F110

// Obtain Style/Size data
Function AF0F111()
   /* ------------------------------------------------------------*/
              /* ** Obtain Style/Size Data ***/
   /* If new keys not entered, select set style using old keys.*/
   /* if old keys entered, get new G/A, CAT and SIL combination;*/
      /* set select style using new keys.*/
   /* Obtain and store all colors associated with the style;*/
      /* format all map detail pages.*/
   /* ------------------------------------------------------------*/


   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/

  if (AF0FW01.AF0FWCNF == "Y"     /* Update confirm flag set*/
   || converseVar.eventKey is pf7 /* PF7 was pressed*/
   || converseVar.eventKey is pf8) /* PF8 was pressed*/
    return; /* Then exit to next process*/
  end

  if (AF0FW01.AF0FWHDS == "Y" /* Historical data requested*/
   && AFWREC.AFWSWR == "N")   /* and No Style/Size keys changed*/
    return; /* Then exit to next process*/
  end

  if (AF9REC.AF9TYP99 == "Y") /* Last product type*/
    AFWREC.AFWSWR = "Y"; /* Force new selection*/
  end

   /* *=======================================**/
   /* *  Check for Data Contention Condition  **/
   /* *=======================================**/
  if (AF0FW01.AF0FWCIN == "Y") /* Data contention present*/
    AFWREC.AFWSWR = "Y"; /* Do new select cycle using old keys*/
  end

   /* *================================================**/
   /* * Set Select Using Old G/A,CAT & SIL Combination **/
   /* * ... And Obtain Next Style from Current Set     **/
   /* *================================================**/
  if (AFWREC.AFWSWR == "N") /* No new keys entered*/
    if (converseVar.eventKey is pf15 /* PF15 (Next type requested)*/
     || converseVar.eventKey is pf16 /* PF16 (Next g/a requested)*/
     || converseVar.eventKey is pf17 /* PF17 (Next line requested)*/
     || converseVar.eventKey is pf18 /* pf18 (next cat requested)*/
     || converseVar.eventKey is pf19) /* pf19 (next silh requested)*/
      AF0FW01.AF0FWCMS = "Y"; /* Get next G/A,CAT,SIL comb.*/
      AF0FW01.AF0FWSYK = " "; /* Reset style to select*/
      AF0FW01.AF0FWCSY = 1; /* Set Style ctr to get first style*/
    else
      AF0FW01.AF0FWSYK = XP1REC.SY1STNBR; /* To sty work key*/
      AF0FW01.AF0FWCSY = 2;
    end
  else
     /* *========================================**/
     /* * Set Select Using New Keys,             **/
     /* * ... And Obtain First Style of New Set  **/
     /* * HOWEVER, If Current Style/Color Just   **/
     /* *   Updated, then Set Start at Current   **/
     /* *      STYLE.                            **/
     /* *========================================**/

    if (AFWREC.AFWSWR == "Y") /* New keys entered*/
      AF0FW01.AF0FWCMS = "Y"; /* Get new G/A.CAT,SIL comb.*/
      set AF9REC empty; /* Clear work record*/

      AF0FW01.AF0FWCSY = 1; /* Set style ctr to get 1st style*/
      AF0FW01.AF0FWLCT = 0; /* Reset Style loop ctr*/

      if (AF0FW01.AF0FWCNF == "U") /* Successful update done*/
        AF0FW01.AF0FWCNF = "N"; /* Reset upd confirm flag*/
        AF0FW01.AF0FWSYK = XP1REC.SY1STNBR; /* Set Curr style*/
        AF0FW01.AF0FWOGK = XP1REC.XOWCD; /* Set Curr own grp*/
      else
        if (AF0FM001.SY1STNBR != " ") /* Particular style entered*/
          AF0FW01.AF0FWSYK = AF0FW01.SY1STNBR; /* To sty work key*/

          if (AF0FM001.AF0FMXOW != " " /* Particular own grp entered*/
           && AF0FM001.AF0FMXOW != "**")
            AF0FW01.AF0FWOGK = AF0FW01.XOWCD;
          else
            AF0FW01.AF0FWOGK = " ";
          end

        else
          AF0FW01.AF0FWSYK = " "; /* To sty work key*/
        end
      end
    end
  end

  AF0FW01.AF0FWCIN = " "; /* Reset contention indicator*/
   /* *========================================================**/
   /* * Obtain Gender/Age, Category and Silhouette Combination **/
   /* *========================================================**/
  if (AF0FW01.AF0FWCMS != " ") /* Obtain next or new comb.*/
    AF0FW01.AF0FWCMS = " "; /* Reset indicator*/
    AF0FS01(); /* Obtain new G/A, CAT & SIL Comb*/
  end
   /* *===================**/
   /* * Select Style Row  **/
   /* *===================**/
  if (converseVar.validationMsgNum == 0) /* No errors*/
    AF0FS02(); /* Select Scan Style*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors*/
    AFWREC.AFWIDX5 = 0; /* Reset loop ctr*/
    while (AFWREC.AFWIDX5 < AF0FW01.AF0FWCSY) /* Until next style ret*/
      set AF0FW02 empty; /* Clear working storage record*/
      AF0FS03(); /* Get next(or current) valid style*/
    end
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
      AF0FS06(); /* Close Select Scan cursor*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        AF0FS06(); /* Close Select Scan cursor*/
        AF9REC.AF9GAG99 = "Y"; /* Force end of combination*/
        AF9REC.AF9LIN99 = "Y"; /* Force end of combination*/
        AF9REC.AF9TYP99 = "Y"; /* Force end of combination*/
        AF9REC.AF9CAT99 = "Y"; /* Force end of combination*/
        AF9REC.AF9SIL99 = "Y"; /* Force end of combination*/
      end
    end
  end
   /* *=========================================================**/
   /* * Check Obtain Data Status, Inactivate All Loop Controls  **/
   /* *=========================================================**/
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0FW01.AF0FWLCT = 0; /* Reset style loop ctr*/
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
  end

end // end AF0F111

// Obtain Historical data
Function AF0F112()
   /* ------------------------------------------------------------*/
               /* ** Obtain Historical Data ***/
   /* If new keys not entered, the return to calling process.*/
   /* If new keys entered, then obtain data from the historical*/
     /* databases, depending if the style no. was entered or not.*/
   /* Store all sizes/pcent qtys, format into map pages.*/
   /* ------------------------------------------------------------*/


   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/

  if (AF0FW01.AF0FWHDS == "N") /* Historical Data Select Ind off*/
    return; /* Then exit to next process*/
  end



   /* *==========================**/
   /* *  Clear Record Work Area  **/
   /* *==========================**/

  set AF0FW03 empty; /* Clear working storage record*/



   /* *============================**/
   /* *  Obtain Size Scale Record  **/
   /* *============================**/

  SY4REC.SY4SZSCL = XP1REC.SY4SZSCL; /* Size scale cd*/

  AF0FS05(); /* Get Size Scale*/



   /* *=================================**/
   /* * Select Database to be Accessed  **/
   /* *=================================**/

  if (AF0FW01.AF0FWHST == " ") /* Historical Style not specified*/

    AFWREC.AFWIDX1 = 1; /* Reset categ loop index*/
    while (AFWREC.AFWIDX1 <= 3) /* Process all historical categories*/

      AFWREC.AFWIDX2 = 1; /* Reset selections loop index*/

      while (AFWREC.AFWIDX2 <= 2) /* Process all selections*/
        AF0FS08(); /* Process Historical Summary DB*/
        AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
      end

      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

    end

  else

    AFWREC.AFWIDX2 = 1; /* Reset selections loop index*/

    while (AFWREC.AFWIDX2 <= 2) /* Process all selections*/
      AF0FS12(); /* Process Historical Detail DB*/
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
    end

  end



   /* *============================**/
   /* *  Find First Selected Size  **/
   /* *============================**/

  AFWREC.AFWIDX1 = 1; /* Reset loop index*/
  AFWREC.AFWIDX2 = 1; /* Reset ptr save*/

  while (AFWREC.AFWIDX1 <= 40) /* Process all size flds*/

    if (AF0FW03.AF0FWSW1[AFWIDX2] == "S" /* Size selected*/
     || AF0FW03.AF0FWSW2[AFWIDX2] == "S") /* Size selected*/
      AFWREC.AFWIDX1 = +99; /* Terminate loop*/
    else
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Increment ptr*/
    end

  end



   /* *====================================**/
   /* *  Find Last Selected Size (Cut-Off) **/
   /* *====================================**/

  AFWREC.AFWIDX4 = 40; /* Reset loop index to max*/

  while (AFWREC.AFWIDX4 != 0) /* Process all size flds*/

    if (AF0FW03.AF0FWSW1[AFWIDX4] == "S" /* Size selected*/
     && AF0FW03.AF0FWHM1 == 0)           /* Last size found*/
      AF0FW03.AF0FWHM1 = AFWREC.AFWIDX4; /* Save pointer*/
    end

    if (AF0FW03.AF0FWSW2[AFWIDX4] == "S" /* Size selected*/
     && AF0FW03.AF0FWHM2 == 0)           /* Last size found*/
      AF0FW03.AF0FWHM2 = AFWREC.AFWIDX4; /* Save pointer*/
    end

    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 - 1; /* Loop through*/

  end



   /* *=========================================**/
   /* *  Compress All Sizes into Display Array  **/
   /* *=========================================**/

               /* (Process Selection 1)*/
  AFWREC.AFWIDX3 = AFWREC.AFWIDX2; /* Set Start pt*/

  while (AFWREC.AFWIDX3 <= AF0FW03.AF0FWHM1) /* Process up to size cut-off*/

    AF0FW03.AF0FWHX1 = AF0FW03.AF0FWHX1 + 1; /* Assign store ptr*/
    AF0FW03.AF0FWSZ1[AF0FWHX1] = AFWREC.AFWIDX3; /* Size id*/
    AF0FW03.AF0FWSD1[AF0FWHX1] = SY4REC.SY4IDDSC[AFWIDX3]; /* desc*/
    AF0FW03.AF0FWQT1[AF0FWHX1] = AF0FW03.AF0FWQW1[AFWIDX3]; /* Qty*/

    AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* Loop through*/

  end

               /* (Process Selection 2)*/
  AFWREC.AFWIDX3 = AFWREC.AFWIDX2; /* Set Start pt*/

  while (AFWREC.AFWIDX3 <= AF0FW03.AF0FWHM2) /* Process up to size cut-off*/

    AF0FW03.AF0FWHX2 = AF0FW03.AF0FWHX2 + 1; /* Assign store ptr*/
    AF0FW03.AF0FWSZ2[AF0FWHX2] = AFWREC.AFWIDX3; /* Size id*/
    AF0FW03.AF0FWSD2[AF0FWHX2] = SY4REC.SY4IDDSC[AFWIDX3]; /* desc*/
    AF0FW03.AF0FWQT2[AF0FWHX2] = AF0FW03.AF0FWQW2[AFWIDX3]; /* Qty*/

    AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* Loop through*/

  end



   /* *=================================**/
   /* * Compute Historical Percentages  **/
   /* *=================================**/

                /* (Process Selection 1)*/
  if (AF0FW03.AF0FWHT1 > 0) /* Non-zero Qty1 totals*/

    AFWREC.AFWIDX1 = 1; /* Reset Loop Index*/
    while (AFWREC.AFWIDX1 <= 40) /* Process all Sizes/Qtys*/

      if (AF0FW03.AF0FWSZ1[AFWIDX1] > 0) /* Valid size*/
        AF0FW01.AF0FWHPC = mathLib.round(AF0FW03.AF0FWQT1[AFWIDX1] / AF0FW03.AF0FWHT1, -mathLib.decimals(AF0FW01.AF0FWHPC));
        AF0FW03.AF0FWPC1[AFWIDX1] = mathLib.round(AF0FW01.AF0FWHPC * 100, -mathLib.decimals(AF0FW03.AF0FWPC1[AFWIDX1])); /* percent*/
      end

      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    end

  end

                /* (Process Selection 2)*/
  if (AF0FW03.AF0FWHT2 > 0) /* Non-zero Qty2 totals*/

    AFWREC.AFWIDX1 = 1; /* Reset Loop Index*/
    while (AFWREC.AFWIDX1 <= 40) /* Process all Sizes/Qtys*/

      if (AF0FW03.AF0FWSZ2[AFWIDX1] > 0) /* Valid size*/
        AF0FW01.AF0FWHPC = mathLib.round(AF0FW03.AF0FWQT2[AFWIDX1] / AF0FW03.AF0FWHT2, -mathLib.decimals(AF0FW01.AF0FWHPC));
        AF0FW03.AF0FWPC2[AFWIDX1] = mathLib.round(AF0FW01.AF0FWHPC * 100, -mathLib.decimals(AF0FW03.AF0FWPC2[AFWIDX1])); /* Pcent*/
      end

      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    end

  end



   /* *===========================**/
   /* * Pad Unused Array Elements **/
   /* *===========================**/

                /* (Process Selection 1 Data)*/
  AFWREC.AFWIDX1 = AF0FW03.AF0FWHX1 + 1; /* Determine start point*/
  while (AFWREC.AFWIDX1 <= 40) /* Process all array elements*/

    AF0FW03.AF0FWSZ1[AFWIDX1] = +9999; /* Indicate unused fld*/
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

  end

                /* (Process Selection 2 Data)*/
  AFWREC.AFWIDX1 = AF0FW03.AF0FWHX2 + 1; /* Determine start point*/
  while (AFWREC.AFWIDX1 <= 40) /* Process all array elements*/

    AF0FW03.AF0FWSZ2[AFWIDX1] = +9999; /* Indicate unused fld*/
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/

  end



   /* *=============================**/
   /* * Determine Maximum Map Pages **/
   /* *    (For Both Selections)    **/
   /* *=============================**/

  if (AF0FW03.AF0FWHX1 >= AF0FW03.AF0FWHX2) /* Index 1 as reference*/
    AF0FW01.AF0FWPGM = mathLib.round(AF0FW03.AF0FWHX1 / 10 + 0.5, -mathLib.decimals(AF0FW01.AF0FWPGM)); /* Max page*/
  else /* Index 2 as reference*/
    AF0FW01.AF0FWPGM = mathLib.round(AF0FW03.AF0FWHX2 / 10 + 0.5, -mathLib.decimals(AF0FW01.AF0FWPGM)); /* Max page*/
  end

  if (AF0FW01.AF0FWPGM == 0) /* Max page eq 0*/
    AF0FW01.AF0FWPGM = 1; /* Set max page to 1*/
  end



   /* *==========================**/
   /* * Check Obtain Data Status **/
   /* *==========================**/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF0FW01.AF0FWPGV = 1; /* Set current page to 1*/
    AF0FW01.AF0FWHDS = "N"; /* Request for history data completed*/
  end



end // end AF0F112

// Format and display the map
Function AF0F120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/


  if (AF0FW01.AF0FWPND != "Y" /* No pop-up windows active*/
   && AFWREC.AFWFIRST != " ") /* or Not the first time*/

    if (converseVar.validationMsgNum == 0) /* No error found*/

      AF0F121(); /* Format the data on the map*/

    else

      AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/

    end

  end



   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AF0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AF0FM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0FM001.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end


  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0FM001 alarm; /* Indicate sound alarm*/
  end



  converse AF0FM001 ;


   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/

  AFWREC.AFWNMO = 0; /* Info message number*/

  COMMAREA.CATOAP = AF0FM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0FM001.CAITEM; /* Application data*/


   /* ----------------------------------------------------------*/
    /* Reset AF9REC First Time Through Indicator*/
   /* ----------------------------------------------------------*/

  AF9REC.AF9FSTID = "Y"; /* Fst time indicator to 'Y'(es)*/



end // end AF0F120

// Format map items
Function AF0F121()

   /* *====================**/
   /* *  Clear Map Fields  **/
   /* *====================**/

  set AF0FM001 initial; /* M001 input/output area*/



   /* *===============================**/
   /* *  Check Security Requirements  **/
   /* *===============================**/

  if (COMMAREA.CACHGFL == "N" /* User not allowed to update*/
   || AF0FW02.XOWCD == "**"   /* corporate look*/
   || AF0FW02.AF0FWIDX == 0)  /* No size rows exist*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 10) /* Protect enterable fields*/
      set AF0FM001.AF2SZPCT[AFWIDX5] skip; /* Size pcent fld*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

  end

   /* *=====================**/
   /* *  Format Map Header  **/
   /* *=====================**/

                /* (Format Header Start Flds)*/
  AF0FM001.XXXUSER = AF0FW01.AF0FWUSR; /* Forecaster id*/
  AF0FM001.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0FM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0FM001.XPRCD = AF0FW01.XPRCD; /* prod type code*/
  AF0FM001.XGACD = AF0FW01.AF0FWGA; /* Start G/A cd*/
  AF0FM001.XPLCD = AF0FW01.XPLCD; /* prod line code*/
  AF0FM001.XPCCD = AF0FW01.AF0FWCAT; /* Start CAT cd*/
  AF0FM001.XSUCD = AF0FW01.AF0FWSIL; /* Start SIL cd*/
  AF0FM001.SY1STNBR = AF0FW01.AF0FWSTY; /* Start Style no.*/
  AF0FM001.AF0FMXOW = AF0FW01.XOWCD; /* Owner Group cd*/
  AF0FM001.XDVCD = AF0FW01.XDVCD; /* division code*/
  AF0FM001.XLCCD[1] = AF0FW01.XLCCD[1]; /* life cycle code*/
  AF0FM001.XLCCD[2] = AF0FW01.XLCCD[2]; /* life cycle code*/
  AF0FM001.XLCCD[3] = AF0FW01.XLCCD[3]; /* life cycle code*/
  AF0FM001.XLCCD[4] = AF0FW01.XLCCD[4]; /* life cycle code*/
  AF0FM001.XXXSTAT = AF0FW01.AF0FWSTS; /* Start Status no.*/

             /* (Format Header Description Flds)*/
  AF0FM001.XPRABRV = AF0FW01.XPRABRV; /* prod type abrv*/
  AF0FM001.XGAABRV = AF0FW01.AF0FWDGA; /* G/A desc*/
  AF0FM001.XPLABRV = AF0FW01.XPLABRV; /* prod line abrv*/
  AF0FM001.XPCABRV = AF0FW01.AF0FWDPC; /* CAT desc*/
  AF0FM001.XSUABRV = AF0FW01.AF0FWDSL; /* SIL desc*/
  AF0FM001.XDVABRV = AF0FW01.XDVABRV; /* division abrv*/
  AF0FM001.XOWABRV = AF0FW01.XOWABRV; /* owner group abrv*/
  AF0FM001.AF0FM-BLNK-FL = AF0FW01.AF0FW-BLNK-FL; /* Blank only flag*/

  if (AF9REC.AF9GAIXM > 0 /* XGA Combination index valid*/
   && AF9REC.AF9PCIXM > 0 /* XPC Combination index valid*/
   && AF9REC.AF9SUIXM > 0 /* XSU Combination index valid*/
   && AF9REC.AF9TPIXM > 0 /* typ Combination index valid*/
   && AF9REC.AF9LNIXM > 0) /* ln Combination index valid*/
    AF0FM001.AF0FMTCD = XP1REC.XPRCD; /* Cur typ cd*/
    AF0FM001.AF0FMGCD = XP1REC.XGACD; /* Cur G/A cd*/
    AF0FM001.AF0FMLCD = XP1REC.XPLCD; /* Cur ln cd*/
    AF0FM001.AF0FMCCD = XP1REC.XPCCD; /* Cur CAT cd*/
    AF0FM001.AF0FMSCD = XP1REC.XSUCD; /* Cur SIL cd*/
    AF0FM001.AF0FMDCD = XP1REC.XDVCD; /* Cur division cd*/
  end

          /* (Format Historical Selection Fields)*/
  AF0FM001.AF0FMHDC = AF0FW01.AF0FMHDC; /* history division code*/
  AF0FM001.AF0FMHOG = AF0FW01.AF0FMHOG; /* history owner group code*/
  AF0FM001.AF0FMHTC = AF0FW01.AF0FMHTC; /* Hist type code*/
  AF0FM001.AF0FMHGC = AF0FW01.AF0FWHGC; /* Hist G/A cd*/
  AF0FM001.AF0FMHLC = AF0FW01.AF0FMHLC; /* Hist line code*/
  AF0FM001.AF0FMHCC[1] = AF0FW01.AF0FWHCC[1]; /* Hist Cat 1*/
  AF0FM001.AF0FMHCC[2] = AF0FW01.AF0FWHCC[2]; /* Hist Cat 2*/
  AF0FM001.AF0FMHCC[3] = AF0FW01.AF0FWHCC[3]; /* Hist Cat 3*/
  AF0FM001.AF0FMHSC = AF0FW01.AF0FWHSC; /* Hist Sil cd*/
  AF0FM001.AF0FMHST = AF0FW01.AF0FWHST; /* Hist Style*/
  AF0FM001.AF0FMHS1 = AF0FW01.AF0FWHS1; /* Hist Season cd 1*/
  AF0FM001.AF0FMHY1 = AF0FW01.AF0FWHY1; /* Hist Season yr 1*/
  AF0FM001.AF0FMHD1 = AF0FW01.AF0FWDX1; /* Hist As of Date 1*/
  AF0FM001.AF0FMHS2 = AF0FW01.AF0FWHS2; /* Hist Season cd 2*/
  AF0FM001.AF0FMHY2 = AF0FW01.AF0FWHY2; /* Hist Season yr 2*/
  AF0FM001.AF0FMHD2 = AF0FW01.AF0FWDX2; /* Hist As of Date 2*/


   /* *=======================================**/
   /* *  Process Style/Size Map Detail Lines  **/
   /* *=======================================**/

  if (AF0FW02.AF0FWIDX > 0) /* Size recs exist*/

    /* ------------------------------------------------------------*/
     /* In cases where invalid updates were made on percentage flds*/
     /* and PA2 was pressed to restore the original contents, the*/
     /* ff. code restores back the original percentages of the*/
     /* style being processed and resets indicators which trigger*/
     /* the update process.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pa2)

      move AF0FW02.AF0FWSPW to AF0FW02.AF0FWSZP[1] for all; /* Percentages*/
      AF0FW02.AF0FWCHG = " "; /* Change indicator*/

    end

    AF0FW01.AF0FWCNF = "N"; /* Update indicator*/

     /* *===========================**/
     /* *  Check Size  Pcent Totals **/
     /* *===========================**/

    AFWREC.AFWIDX4 = 1; /* Set Loop index*/
    AF0FW01.AF0FWCPT = 0; /* Reset accumulator*/

    while (AFWREC.AFWIDX4 <= AF0FW02.AF0FWIDX) /* LE Max Size Recs*/
      AF0FW01.AF0FWCPT = AF0FW01.AF0FWCPT + AF0FW02.AF0FWSZP[AFWIDX4];
      AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
    end

    AF0FM001.AF0FMPCT = AF0FW01.AF0FWCPT; /* Total Size pcents*/

    if (AF0FW01.AF0FWCPT != 100.00) /* Percent not equal 100*/
      set AF0FM001.AF0FMPCT skip, bold; /* Highlight fld*/
    else
      set AF0FM001.AF0FMPCT initialAttributes; /* Reset fld*/
    end

     /* *================================**/
     /* *  Move Page Detail Flds to Map  **/
     /* *================================**/

    AFWREC.AFWIXM = 1; /* Set map loop index*/

    while (AFWREC.AFWIXM <= 10) /* Fill up page*/

      if (AFWREC.AFWIXM == 1)
        AF0FM001.AF0FMSTY[1] = XP1REC.SY1STNBR; /* Style*/
        AF0FM001.XOWCD[1] = AF0FW02.XOWCD; /* Owner Group*/
        AF0FM001.AF0FMSTD[1] = XP1REC.SY1SSTNM; /* Style name*/
        AF0FM001.AF2FSTST[1] = AF0FW02.AF2FSTST; /* Status*/
      else
        AF0FM001.AF0FMSTY[AFWIXM] = " "; /* Style*/
        AF0FM001.XOWCD[AFWIXM] = " "; /* Owner Group*/
        AF0FM001.AF0FMSTD[AFWIXM] = " "; /* Style name*/
        AF0FM001.AF2FSTST[AFWIXM] = " "; /* Status*/
      end

      if (AF0FW02.AF0FWSZ[AFWIXM] != +9999) /* Valid style*/
        AF0FM001.SY4IDDSC[AFWIXM] = AF0FW02.AF0FWSZN[AFWIXM];
        AF0FM001.AF2SZPCT[AFWIXM] = AF0FW02.AF0FWSZP[AFWIXM];
      else
        set AF0FM001.SY4IDDSC[AFWIXM] skip, invisible; /* Space out*/
        set AF0FM001.AF2SZPCT[AFWIXM] skip, invisible; /* Space out*/
      end


      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

    end



     /* *===================**/
     /* *  Position Cursor  **/
     /* *===================**/

    if (COMMAREA.CACHGFL == "Y" /* Updates allowed*/
     && AF0FW02.XOWCD != "**")  /* Not corporate look*/
      set AF0FM001.AF2SZPCT[1] cursor; /* Position cursor*/
    else /* (No updates allowed)*/
      set AF0FM001.XSECD cursor; /* Position cursor*/
    end

  else

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 10) /* Protect/darken map display*/
      set AF0FM001.AF0FMSTY[AFWIDX5] skip, invisible; /* Style no.*/
      set AF0FM001.XOWCD[AFWIDX5] skip, invisible; /* Owner Group*/
      set AF0FM001.AF0FMSTD[AFWIDX5] skip, invisible; /* Style nm*/
      set AF0FM001.AF2FSTST[AFWIDX5] skip, invisible; /* Style status*/
      set AF0FM001.SY4IDDSC[AFWIDX5] skip, invisible; /* Size desc*/
      set AF0FM001.AF2SZPCT[AFWIDX5] skip, invisible; /* Size pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    set AF0FM001.XSECD cursor; /* Set cursor position*/
    AF0FM001.AF0FMPCT = 0; /* Clear color percent total*/
    AFWREC.AFWPRCSN = "121 "; /* Process number*/
    AFWREC.AFWNMO = 15; /* Indicate no data to display*/

  end



   /* *=======================================**/
   /* *  Process Historical Map Detail Lines  **/
   /* *=======================================**/


  AFWREC.AFWIDX1 = AF0FW03.AF0FWHX1 + AF0FW03.AF0FWHX2; /* Check indexes*/

  if (AFWREC.AFWIDX1 > 0) /* Historical data present*/


     /* *=======================**/
     /* *  Obtain Desired Page  **/
     /* *=======================**/

    if (AF0FW01.AF0FWPGV <= 0) /* No previous page*/

      AF0FW01.AF0FWPGV = 1; /* Set to page one*/
      converseLib.validationFailed(2); /* Indicate no prev page*/
      AFWREC.AFWPRCSN = "121 "; /* Process number*/

    else

      if (AF0FW01.AF0FWPGV > AF0FW01.AF0FWPGM) /* Greater than max page*/
        AF0FW01.AF0FWPGV = AF0FW01.AF0FWPGM; /* Set max page*/
        converseLib.validationFailed(3); /* Indicate no more pages to disp*/
        AFWREC.AFWPRCSN = "121 "; /* Process number*/
      end

    end


     /* *==========================**/
     /* *  Format Column Headings  **/
     /* *==========================**/

    if (AF0FW03.AF0FWHX1 > 0) /* Column 1 data present*/
      AF0FW01.AF0FWHSH = AF0FW01.AF0FWHS1; /* Season cd*/
      AF0FW01.AF0FWHYH = AF0FW01.AF0FWHY1; /* Season yr*/
      AF0FM001.AF0FMSY1 = AF0FW01.AF0FWHSY; /* Season cd/yr hdg*/
    else
      set AF0FM001.AF0FMSY1 skip, invisible; /* Space-out hdg*/
    end

    if (AF0FW03.AF0FWHX2 > 0) /* Column 2 data present*/
      AF0FW01.AF0FWHSH = AF0FW01.AF0FWHS2; /* Season cd*/
      AF0FW01.AF0FWHYH = AF0FW01.AF0FWHY2; /* Season yr*/
      AF0FM001.AF0FMSY2 = AF0FW01.AF0FWHSY; /* Season cd/yr hdg*/
    else
      set AF0FM001.AF0FMSY2 skip, invisible; /* Space-out hdg*/
    end



     /* *================================**/
     /* *  Move Page Detail Flds to Map  **/
     /* *================================**/

    AF0FW01.AF0FWPSA = AF0FW01.AF0FWPGV * 10 - 10 + 1; /* Start addr*/
    AFWREC.AFWIXM = AF0FW01.AF0FWPSA; /* Position at line 1 of page*/
    AF0FW01.AF0FWPGL = AFWREC.AFWIXM + 10 - 1; /* Page size limit*/
    AFWREC.AFWIDX2 = 1; /* Reset map index*/

    while (AFWREC.AFWIXM <= AF0FW01.AF0FWPGL) /* Fill up page*/

      if (AF0FW03.AF0FWSZ1[AFWIXM] != +9999) /* Valid size*/
        AF0FM001.AF0FMSZ1[AFWIDX2] = AF0FW03.AF0FWSD1[AFWIXM];
        AF0FM001.AF0FMPC1[AFWIDX2] = AF0FW03.AF0FWPC1[AFWIXM];
      else
        set AF0FM001.AF0FMSZ1[AFWIDX2] skip, invisible; /* Space out unused*/
        set AF0FM001.AF0FMPC1[AFWIDX2] skip, invisible; /* Space out unused*/
      end

      if (AF0FW03.AF0FWSZ2[AFWIXM] != +9999) /* Valid size*/
        AF0FM001.AF0FMSZ2[AFWIDX2] = AF0FW03.AF0FWSD2[AFWIXM];
        AF0FM001.AF0FMPC2[AFWIDX2] = AF0FW03.AF0FWPC2[AFWIXM];
      else
        set AF0FM001.AF0FMSZ2[AFWIDX2] skip, invisible; /* Space out unused*/
        set AF0FM001.AF0FMPC2[AFWIDX2] skip, invisible; /* Space out unused*/
      end

      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/

    end

  else /* No historical data present*/

    AFWREC.AFWIDX5 = 1; /* Set loop index*/

    while (AFWREC.AFWIDX5 <= 10) /* Protect/darken map display*/
      set AF0FM001.AF0FMSZ1[AFWIDX5] skip, invisible; /* Size desc 1*/
      set AF0FM001.AF0FMPC1[AFWIDX5] skip, invisible; /* Size pcent 1*/
      set AF0FM001.AF0FMSZ2[AFWIDX5] skip, invisible; /* Size desc 2*/
      set AF0FM001.AF0FMPC2[AFWIDX5] skip, invisible; /* Size pcent 2*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end

    if (AF0FM001.AF0FMHST != " "    /* Style entered*/
     || AF0FM001.AF0FMHGC != " "    /* or Valid Gender/Age cd*/
     || AF0FM001.AF0FMHSC != " "    /* or Valid Silhouette cd*/
     || AF0FM001.AF0FMHCC[1] != " " /* Categ 1 valid*/
     || AF0FM001.AF0FMHCC[2] != " " /* or Categ 2 valid*/
     || AF0FM001.AF0FMHCC[3] != " " /* or Categ 3 valid*/
     || AF0FM001.AF0FMHTC != " "    /* or typ cd*/
     || AF0FM001.AF0FMHLC != " ")   /* or ln cd*/

      AFWREC.AFWPRCSN = "121 "; /* Process number*/
      AFWREC.AFWNMO = 15; /* Indicate no data to display*/

    end

    if (converseVar.eventKey is pf7 /* PF7 was pressed*/
     || converseVar.eventKey is pf8) /* PF8 was pressed*/

      AFWREC.AFWPRCSN = "121 "; /* Process number*/
      converseLib.validationFailed(4); /* PF key not valid*/

    end

  end



end // end AF0F121

// Check Attention Identifier
Function AF0F130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AF0FM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (AF0FM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0FM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0FM001.CAITEM; /* Application data*/
      XP1REC.XGACD = AF0FW01.AF0FWGA; /* Restore start XGACD*/
      XP1REC.XPCCD = AF0FW01.AF0FWCAT; /* Restore start xpcCD*/
      XP1REC.XSUCD = AF0FW01.AF0FWSIL; /* Restore start xsuCD*/
      XP1REC.SY1STNBR = AF0FW01.SY1STNBR; /* Restore start style*/
      XP1REC.XPLCD = AF0FW01.XPLCD; /* Restore start line*/
      XP1REC.XPRCD = AF0FW01.XPRCD; /* Restore start type*/
      XP1REC.XLCCD[1] = AF0FW01.XLCCD[1]; /* Restore life cyc*/
      XP1REC.XLCCD[2] = AF0FW01.XLCCD[2]; /* Restore life cyc*/
      XP1REC.XLCCD[3] = AF0FW01.XLCCD[3]; /* Restore life cyc*/
      XP1REC.XLCCD[4] = AF0FW01.XLCCD[4]; /* Restore life cyc*/
      AF0FW01.AF0FWGA = " "; /* Clear start XGACD*/
      AF0FW01.AF0FWCAT = " "; /* Clear start xpcCD*/
      AF0FW01.AF0FWSIL = " "; /* Clear start xsuCD*/
      AF0FW01.SY1STNBR = " "; /* Clear start style*/
      AF0FW01.XPLCD = " "; /* Clear line*/
      AF0FW01.XPRCD = " "; /* Clear type*/
      AF0FW01.XLCCD[1] = " "; /* Clear life cyc*/
      AF0FW01.XLCCD[2] = " "; /* Clear life cyc*/
      AF0FW01.XLCCD[3] = " "; /* Clear life cyc*/
      AF0FW01.XLCCD[4] = " "; /* Clear life cyc*/
      AF0FW01.AF0FWDGA = " "; /* Clear G/A desc*/
      AF0FW01.AF0FWDPC = " "; /* Clear CAT desc*/
      AF0FW01.AF0FWDSL = " "; /* Clear SIL desc*/
      AF0FW01.XPLABRV = " "; /* Clear line abrv*/
      AF0FW01.XPRABRV = " "; /* Clear type abrv*/
      XSAFS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set AF0FM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (AF0FM001.CAITEM > " ") /* Application data was entered*/
    set AF0FM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0FM001"; /* Appl find code*/
    end
    XP1REC.XGACD = AF0FW01.AF0FWGA; /* Restore start XGACD*/
    XP1REC.XPCCD = AF0FW01.AF0FWCAT; /* Restore start xpcCD*/
    XP1REC.XSUCD = AF0FW01.AF0FWSIL; /* Restore start xsuCD*/
    XP1REC.SY1STNBR = AF0FW01.SY1STNBR; /* Restore start style*/
    XP1REC.XPLCD = AF0FW01.XPLCD; /* Restore start line*/
    XP1REC.XPRCD = AF0FW01.XPRCD; /* Restore start type*/
    XP1REC.XLCCD[1] = AF0FW01.XLCCD[1]; /* Restore life cyc*/
    XP1REC.XLCCD[2] = AF0FW01.XLCCD[2]; /* Restore life cyc*/
    XP1REC.XLCCD[3] = AF0FW01.XLCCD[3]; /* Restore life cyc*/
    XP1REC.XLCCD[4] = AF0FW01.XLCCD[4]; /* Restore life cyc*/
    AF0FW01.AF0FWGA = " "; /* Clear start XGACD*/
    AF0FW01.AF0FWCAT = " "; /* Clear start xpcCD*/
    AF0FW01.AF0FWSIL = " "; /* Clear start xsuCD*/
    AF0FW01.SY1STNBR = " "; /* Clear start style*/
    AF0FW01.XPLCD = " "; /* Clear line*/
    AF0FW01.XPRCD = " "; /* Clear type*/
    AF0FW01.XLCCD[1] = " "; /* Clear life cyc*/
    AF0FW01.XLCCD[2] = " "; /* Clear life cyc*/
    AF0FW01.XLCCD[3] = " "; /* Clear life cyc*/
    AF0FW01.XLCCD[4] = " "; /* Clear life cyc*/
    AF0FW01.AF0FWDGA = " "; /* Clear G/A desc*/
    AF0FW01.AF0FWDPC = " "; /* Clear CAT desc*/
    AF0FW01.AF0FWDSL = " "; /* Clear SIL desc*/
    AF0FW01.XPLABRV = " "; /* Clear line abrv*/
    AF0FW01.XPRABRV = " "; /* Clear type abrv*/
    XSAFS01(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19) /* and PF19 was not pressed*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (AFWREC.AFWFIRST == " ") /* First time through*/
    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf7 /* PF7 was pressed*/
   || converseVar.eventKey is pf8) /* PF8 was pressed*/
    AF0FW01.AF0FWHAC = "Y"; /* Indicate pending hist actvty*/
  else
    AF0FW01.AF0FWHAC = " "; /* Indicate no pending hist actvty*/
  end

  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   || converseVar.eventKey is pf16 /* PF16 was pressed*/
   || converseVar.eventKey is pf17 /* PF17 was pressed*/
   || converseVar.eventKey is pf18 /* PF18 was pressed*/
   || converseVar.eventKey is pf19) /* PF19 was pressed*/
    if (AF9REC.AF9GAG99 == "Y" /* Last G/A code retrieved*/
     || AF9REC.AF9CAT99 == "Y" /* Last CAT code retrieved*/
     || AF9REC.AF9SIL99 == "Y" /* Last SIL code retrieved*/
     || AF9REC.AF9TYP99 == "Y" /* Last typ code retrieved*/
     || AF9REC.AF9LIN99 == "Y") /* Last lin code retrieved*/
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(15); /* Indicate no data found*/
      exit stack; /* Exit to redisplay map*/
    end
  end

end // end AF0F130

// Reset Hilght Flds; Disp Pop-up
Function AF0F140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  set AF0FM001.XXXUSER normal; /* Forecaster cd*/
  set AF0FM001.XSECD normal; /* Sesn cd*/
  set AF0FM001.XSNYR normal; /* Sesn yr*/
  set AF0FM001.XGACD normal; /* Gender Age cd*/
  set AF0FM001.XPCCD normal; /* Category cd*/
  set AF0FM001.XSUCD normal; /* Silhouette cd*/
  set AF0FM001.AF0FM-BLNK-FL normal; /* Blank only indicator*/
  set AF0FM001.SY1STNBR normal; /* Style no.*/
  set AF0FM001.AF0FMXOW normal; /* Owner Group*/
  set AF0FM001.XXXSTAT normal; /* Status cd*/
  set AF0FM001.XPRCD normal; /* prod type cd*/
  set AF0FM001.XPLCD normal; /* prod line cd*/
  set AF0FM001.XDVCD normal; /* division cd*/
  set AF0FM001.XLCCD[1] normal; /* life cycle cd 1*/
  set AF0FM001.XLCCD[2] normal; /* life cycle cd 2*/
  set AF0FM001.XLCCD[3] normal; /* life cycle cd 3*/
  set AF0FM001.XLCCD[4] normal; /* life cycle cd 4*/

  set AF0FM001.AF0FMHGC normal; /* Hist G/A cd*/
  set AF0FM001.AF0FMHSC normal; /* Hist Sil cd*/
  set AF0FM001.AF0FMHCC[1] normal; /* Hist Cat 1*/
  set AF0FM001.AF0FMHCC[2] normal; /* Hist Cat 2*/
  set AF0FM001.AF0FMHCC[3] normal; /* Hist Cat 3*/
  set AF0FM001.AF0FMHST normal; /* Hist Style*/
  set AF0FM001.AF0FMHS1 normal; /* Hist Season cd 1*/
  set AF0FM001.AF0FMHY1 normal; /* Hist Season yr 1*/
  set AF0FM001.AF0FMHD1 normal; /* Hist As of Date 1*/
  set AF0FM001.AF0FMHS2 normal; /* Hist Season cd 2*/
  set AF0FM001.AF0FMHY2 normal; /* Hist Season yr 2*/
  set AF0FM001.AF0FMHD2 normal; /* Hist As of Date 2*/
  set AF0FM001.AF0FMHTC normal; /* Hist type cd*/
  set AF0FM001.AF0FMHLC normal; /* Hist line cd*/
  set AF0FM001.AF0FMHDC normal; /* Hist division cd*/
  set AF0FM001.AF0FMHOG normal; /* Hist owner grp cd*/
  set AF0FM001.AF0FMSTY[1] initialAttributes; /* Detail Style No. (1)*/

  AF0FM001.XXXPRCNM = "AF0F    "; /* Reset process name*/

  set AF0FM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0FM001.CAITEM initialAttributes; /* Commarea application data*/

   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0FM001.XSECD == "?"       /* Season cd*/
   || AF0FM001.XGACD == "?"       /* Gender/Age cd*/
   || AF0FM001.XPCCD == "?"       /* Category cd*/
   || AF0FM001.XSUCD == "?"       /* Silhouette cd*/
   || AF0FM001.XDVCD == "?"       /* divison cd*/
   || AF0FM001.XPRCD == "?"       /* prod type cd*/
   || AF0FM001.XPLCD == "?"       /* prod line cd*/
   || AF0FM001.AF0FMXOW == "?"    /* Owner Group*/
   || AF0FM001.XLCCD[1] == "?"    /* life cycle code 1*/
   || AF0FM001.AF0FMHGC == "?"    /* Historical G/A cd*/
   || AF0FM001.AF0FMHCC[1] == "?" /* Historical Cat cd 1*/
   || AF0FM001.AF0FMHCC[2] == "?" /* Historical Cat cd 2*/
   || AF0FM001.AF0FMHCC[3] == "?" /* Historical Cat cd 3*/
   || AF0FM001.AF0FMHSC == "?"    /* Historical Sil cd*/
   || AF0FM001.AF0FMHS1 == "?"    /* Historical Season cd 1*/
   || AF0FM001.AF0FMHS2 == "?"    /* Historical Season cd 2*/
   || AF0FM001.AF0FMHDC == "?"    /* Historical division cd*/
   || AF0FM001.AF0FMHLC == "?"    /* Historical line cd*/
   || AF0FM001.AF0FMHTC == "?")   /* Historical type cd*/

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    AF0FW01.AF0FWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/

  end

   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season cd*/
   /* *============================**/
  if (AF0FM001.XSECD == "?") /* Pop-up window requested*/
    XP1REC.XSECD = AF0FM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSSE(); /* Pop-up window func requested*/
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    end
    AF0FM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    set AF0FM001.XSECD cursor;
  end

   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/
  if (AF0FM001.XGACD == "?") /* Pop-up window requested*/
    XP1REC.XGACD = AF0FM001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSGA(); /* Pop-up window func requested*/
    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    end
    AF0FM001.XGACD = XP1REC.XGACD; /* Move selected code to map*/
    AF0FM001.XGAABRV = XP1REC.XGAABRV; /* Move desc to map*/
    set AF0FM001.XGACD cursor;
  end

   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/
  if (AF0FM001.XPCCD == "?") /* Pop-up window requested*/
    XP1REC.XPCCD = AF0FM001.XPCCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPC(); /* Pop-up window func requested*/
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end
    AF0FM001.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
    AF0FM001.XPCABRV = XP1REC.XPCABRV; /* Move desc to map*/
    set AF0FM001.XPCCD cursor;
  end

   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Silhouette cd*/
   /* *=============================**/
  if (AF0FM001.XSUCD == "?") /* Pop-up window requested*/
    XP1REC.XSUCD = AF0FM001.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSSU(); /* Pop-up window func requested*/
    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    end
    AF0FM001.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/
    AF0FM001.XSUABRV = XP1REC.XSUABRV; /* Move desc to map*/
    set AF0FM001.XSUCD cursor;
  end

   /* *============================**/
   /* *  Pop-up Window for xdvcD   * divison code*/
   /* *============================**/
  if (AF0FM001.XDVCD == "?") /* Pop-up window requested*/
    XP1REC.XDVCD = AF0FM001.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSDV(); /* Pop-up window func requested*/
    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
      XP1REC.XDVABRV = " "; /* Space out invalid data*/
    end
    AF0FM001.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
    AF0FM001.XDVABRV = XP1REC.XDVABRV; /* Move desc to map*/
    set AF0FM001.XDVCD cursor;
  end

   /* *============================**/
   /* *  Pop-up Window for xplcd   * prod line code*/
   /* *============================**/
  if (AF0FM001.XPLCD == "?") /* Pop-up window requested*/
    XP1REC.XPLCD = AF0FM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPL(); /* Pop-up window func requested*/
    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    end
    AF0FM001.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
    AF0FM001.XPLABRV = XP1REC.XPLABRV; /* Move desc to map*/
    set AF0FM001.XPLCD cursor;
  end

   /* *============================**/
   /* *  Pop-up Window for xprcd   * prod type code*/
   /* *============================**/
  if (AF0FM001.XPRCD == "?") /* Pop-up window requested*/
    XP1REC.XPRCD = AF0FM001.XPRCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPR(); /* Pop-up window func requested*/
    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    end
    AF0FM001.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
    AF0FM001.XPRABRV = XP1REC.XPRABRV; /* Move desc to map*/
    set AF0FM001.XPRCD cursor;
  end

   /* *============================**/
   /* *  Pop-up Window for XOWCD   * Owner Group Code*/
   /* *============================**/
  if (AF0FM001.AF0FMXOW == "?") /* Pop-up window requested*/
    XP1REC.XOWCD = AF0FM001.AF0FMXOW; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Display Whse 51 only*/
    XSAFSOW(); /* Pop-up window func requested*/
    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMXOW = XP1REC.XOWCD; /* Move selected code to map*/
    AF0FM001.XOWABRV = XP1REC.XOWABRV; /* Move desc to map*/
    set AF0FM001.AF0FMXOW cursor;
  end

   /* *============================**/
   /* *  Pop-up Window for xprcd   * prod type code*/
   /* *============================**/
  if (AF0FM001.XPRCD == "?") /* Pop-up window requested*/
    XP1REC.XPRCD = AF0FM001.XPRCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPR(); /* Pop-up window func requested*/
    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    end
    AF0FM001.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
    AF0FM001.XPRABRV = XP1REC.XPRABRV; /* Move desc to map*/
    set AF0FM001.XPRCD cursor;
  end

   /* *============================**/
   /* *  Pop-up Window for xlccD   * life cycle code 1*/
   /* *============================**/
  if (AF0FM001.XLCCD[1] == "?") /* Pop-up window requested*/
    XP1REC.XLCCD = AF0FM001.XLCCD[1]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSLC(); /* Pop-up window func requested*/
    if (XP1REC.XLCCD == "?") /* Check results*/
      XP1REC.XLCCD = " "; /* Space out invalid data*/
    end
    AF0FM001.XLCCD = XP1REC.XLCCD; /* Move selected code to map*/
    set AF0FM001.XLCCD[1] cursor;
  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XGACD **/
   /* *=====================================**/
  if (AF0FM001.AF0FMHGC == "?") /* Pop-up window requested*/
    AF0FW01.AF0FWSGA = XP1REC.XGACD; /* Save orig XP1REC fld*/
    XP1REC.XGACD = AF0FM001.AF0FMHGC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSGA(); /* Pop-up window func requested*/
    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMHGC = XP1REC.XGACD; /* Move selected code to map*/
    XP1REC.XGACD = AF0FW01.AF0FWSGA; /* Restore orig XP1REC fld*/
    set AF0FM001.AF0FMHGC cursor;
  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XdvCD **/
   /* *=====================================**/
  if (AF0FM001.AF0FMHDC == "?") /* Pop-up window requested*/
    AF0FW01.AF0FMHDC = XP1REC.XDVCD; /* Save orig XP1REC fld*/
    XP1REC.XDVCD = AF0FM001.AF0FMHDC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSDV(); /* Pop-up window func requested*/
    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMHDC = XP1REC.XDVCD; /* Move selected code to map*/
    XP1REC.XDVCD = AF0FW01.AF0FMHDC; /* Restore orig XP1REC fld*/
    set AF0FM001.AF0FMHDC cursor;
  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XplCD **/
   /* *=====================================**/
  if (AF0FM001.AF0FMHLC == "?") /* Pop-up window requested*/
    AF0FW01.XPLCD = XP1REC.XPLCD; /* Save orig XP1REC fld*/
    XP1REC.XPLCD = AF0FM001.AF0FMHLC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPL(); /* Pop-up window func requested*/
    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMHLC = XP1REC.XPLCD; /* Move selected code to map*/
    XP1REC.XPLCD = AF0FW01.XPLCD; /* Restore orig XP1REC fld*/
    set AF0FM001.AF0FMHLC cursor;
  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XprCD **/
   /* *=====================================**/
  if (AF0FM001.AF0FMHTC == "?") /* Pop-up window requested*/
    AF0FW01.XPRCD = XP1REC.XPRCD; /* Save orig XP1REC fld*/
    XP1REC.XPRCD = AF0FM001.AF0FMHTC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPR(); /* Pop-up window func requested*/
    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMHTC = XP1REC.XPRCD; /* Move selected code to map*/
    XP1REC.XPRCD = AF0FW01.XPRCD; /* Restore orig XP1REC fld*/
    set AF0FM001.AF0FMHTC cursor;
  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XPCCD * Category cd 1*/
   /* *=====================================**/
  if (AF0FM001.AF0FMHCC[1] == "?") /* Pop-up window requested*/
    AF0FW01.AF0FWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0FM001.AF0FMHCC[1]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPC(); /* Pop-up window func requested*/
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMHCC[1] = XP1REC.XPCCD; /* Move sel code to map*/
    XP1REC.XPCCD = AF0FW01.AF0FWSPC; /* Restore orig XP1REC field*/
    set AF0FM001.AF0FMHCC[1] cursor;
  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XPCCD * Category cd 2*/
   /* *=====================================**/
  if (AF0FM001.AF0FMHCC[2] == "?") /* Pop-up window requested*/
    AF0FW01.AF0FWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0FM001.AF0FMHCC[2]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSPC(); /* Pop-up window func requested*/
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMHCC[2] = XP1REC.XPCCD; /* Move sel code to map*/
    XP1REC.XPCCD = AF0FW01.AF0FWSPC; /* Restore orig XP1REC field*/
    set AF0FM001.AF0FMHCC[2] cursor;
  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XPCCD * Category cd 3*/
   /* *=====================================**/
  if (AF0FM001.AF0FMHCC[3] == "?") /* Pop-up window requested*/
    AF0FW01.AF0FWSPC = XP1REC.XPCCD; /* Save orig XP1REC field*/
    XP1REC.XPCCD = AF0FM001.AF0FMHCC[3]; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPC(); /* Pop-up window func requested*/
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMHCC[3] = XP1REC.XPCCD; /* Move sel code to map*/
    XP1REC.XPCCD = AF0FW01.AF0FWSPC; /* Restore orig XP1REC field*/
    set AF0FM001.AF0FMHCC[3] cursor;
  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XSUCD * Silhouette cd*/
   /* *=====================================**/
  if (AF0FM001.AF0FMHSC == "?") /* Pop-up window requested*/
    AF0FW01.AF0FWSSL = XP1REC.XSUCD; /* Save orig XP1REC field*/
    XP1REC.XSUCD = AF0FM001.AF0FMHSC; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSSU(); /* Pop-up window func requested*/
    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMHSC = XP1REC.XSUCD; /* Move selected code to map*/
    XP1REC.XSUCD = AF0FW01.AF0FWSSL; /* Restore orig XP1REC fld*/
    set AF0FM001.AF0FMHSC cursor;
  end

   /* *================================**/
   /* *  Pop-up Window for Historic XOW*/
   /* *================================**/
  if (AF0FM001.AF0FMHOG == "?") /* Pop-up window requested*/
    AF0FW01.XOWCD = XP1REC.XOWCD; /* Save orig XP1REC fld*/
    XP1REC.XOWCD = AF0FM001.AF0FMHOG; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Display Whse 51 only*/
    XSAFSOW(); /* Pop-up window func requested*/
    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMHOG = XP1REC.XOWCD; /* Move selected code to map*/
    XP1REC.XOWCD = AF0FW01.XOWCD; /* Restore orig XP1REC fld*/
    set AF0FM001.AF0FMHOG cursor;
  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XSECD * Season cd 1*/
   /* *=====================================**/
  if (AF0FM001.AF0FMHS1 == "?") /* Pop-up window requested*/
    AF0FW01.AF0FWSSC = XP1REC.XSECD; /* Save orginal XP1REC field*/
    XP1REC.XSECD = AF0FM001.AF0FMHS1; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSSE(); /* Pop-up window func requested*/
    if (XP1REC.XSECD == "?") /* check results*/
      XP1REC.XSECD = " ";
    end
    AF0FM001.AF0FMHS1 = XP1REC.XSECD; /* move selected code to map*/
    XP1REC.XSECD = AF0FW01.AF0FWSSC; /* Restore orig XP1REC field*/
    set AF0FM001.AF0FMHS1 cursor;
  end

   /* *=====================================**/
   /* *  Pop-up Window for Historical XSECD * Season cd 2*/
   /* *=====================================**/
  if (AF0FM001.AF0FMHS2 == "?") /* Pop-up window requested*/
    AF0FW01.AF0FWSSC = XP1REC.XSECD; /* Save orig XP1REC field*/
    XP1REC.XSECD = AF0FM001.AF0FMHS2; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    XSAFSSE(); /* Pop-up window func requested*/
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    end
    AF0FM001.AF0FMHS2 = XP1REC.XSECD; /* Move selected code to map*/
    XP1REC.XSECD = AF0FW01.AF0FWSSC; /* Restore orig XP1REC field*/
    set AF0FM001.AF0FMHS2 cursor;
  end

   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/
  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0FW01.AF0FWPND = "Y"; /* Activate pop-up window ind*/
  exit stack; /* Exit to redisplay map*/

end // end AF0F140

// Verify the entered data
Function AF0F150()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  AF0F151(); /* Verify data entered*/


  if (converseVar.validationMsgNum != 0) /* Errors found*/

    AF0FW01.AF0FWCNF = "N"; /* Reset update confirm flag*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/
                                    /* (For Style/Size Data)*/
    AF0FW01.AF0FWCNF = "N"; /* Reset update confirm flag*/
  end



end // end AF0F150

// Edit selection criteria
Function AF0F151()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *****                                                  ******/
     /* -- This process is composed of two(2) major phases:     **/
    /* The first phase processes the selection criteria of the  **/
    /* Historical data requests. The second phase processes the **/
    /* Style/Size data requests.  Both phases, however, share   **/
    /* one error message area (EZEMNO). Since the application   **/
    /* interrogates EZEMNO to determine what kind of processing **/
    /* is necessary, an error in either Historical data editing **/
    /* or Style/Size data editing will prevent  retrieval of    **/
    /* detail data for BOTH, until all errors are rectified.    **/
   /* *************************************************************/

  AF0FW01.AFWSWR = AFWREC.AFWSWR; /* Save data select setting*/
  AFWREC.AFWFIRST = "N"; /* First Pass switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* Initialize msg hold area*/
  AF0FW01.AF0FWMNO = 0; /* Initialize wk msg hold area*/

   /* ------------------------------------------------------------*/
   /* ** PHASE 1: Process Historical Data Selection Criteria ***/
   /* ------------------------------------------------------------*/
   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/

  if (AF0FW01.AF0FWHGC != AF0FM001.AF0FMHGC       /* Gender/Age cd*/
   || AF0FW01.AF0FWHCC[1] != AF0FM001.AF0FMHCC[1] /* Cat cd 1*/
   || AF0FW01.AF0FWHCC[2] != AF0FM001.AF0FMHCC[2] /* Cat cd 2*/
   || AF0FW01.AF0FWHCC[3] != AF0FM001.AF0FMHCC[3] /* Cat cd 3*/
   || AF0FW01.AF0FWHSC != AF0FM001.AF0FMHSC       /* Silhouette cd*/
   || AF0FW01.AF0FWHST != AF0FM001.AF0FMHST       /* Style no.*/
   || AF0FW01.AF0FWHS1 != AF0FM001.AF0FMHS1       /* Season cd 1*/
   || AF0FW01.AF0FWHY1 != AF0FM001.AF0FMHY1       /* Season yr 1*/
   || AF0FW01.AF0FWDX1 != AF0FM001.AF0FMHD1       /* As of Date 1*/
   || AF0FW01.AF0FWHS2 != AF0FM001.AF0FMHS2       /* Season cd 2*/
   || AF0FW01.AF0FWHY2 != AF0FM001.AF0FMHY2       /* Season yr 2*/
   || AF0FW01.AF0FWDX2 != AF0FM001.AF0FMHD2       /* As of Date 2*/
   || AF0FW01.AF0FMHLC != AF0FM001.AF0FMHLC       /* line code*/
   || AF0FW01.AF0FMHTC != AF0FM001.AF0FMHTC       /* type code*/
   || AF0FW01.AF0FMHDC != AF0FM001.AF0FMHDC       /* division code*/
   || AF0FW01.AF0FMHOG != AF0FM001.AF0FMHOG)      /* owner group cd*/
    AF0FW01.AF0FWHDS = "Y"; /* New criteria entered*/
    AF0FW01.AF0FWHAC = "Y"; /* Indicate hist pending actvty*/
  else
    AF0FW01.AF0FWHDS = "N"; /* Hist Data Sel sw to 'OFF'*/
    if (converseVar.eventKey not pf7 /* PF7 key not pressed*/
     && converseVar.eventKey not pf8) /* PF8 key not pressed*/
      AF0FW01.AF0FWHAC = " "; /* Reset hist pending actvty ind*/
    end
  end

   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/
  if (AF0FW01.AF0FWHDS == "Y" /* New criteria entered*/
   && converseVar.eventKey not enter) /* Enter key not pressed*/
    converseLib.validationFailed(4); /* Request not permitted*/
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end
   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/

  if (AF0FM001.AF0FMHD1 != " " /* As-of-Date entered*/
   || AF0FM001.AF0FMHD2 != " ")
    AF0FS16(); /* Obtain As-of-Date XREF record*/
  end

  AF0FS17(); /* Edit historical as-of-date 2*/
  AF0FS19(); /* Edit historical season yr 2*/
  AF0FS20(); /* Edit historical season cd 2*/
  AF0FS21(); /* Edit historical as-of-date 1*/
  AF0FS22(); /* Edit historical season yr 1*/
  AF0FS23(); /* Edit historical season cd 1*/
  AF0FS48(); /* Edit historical owner group cd*/
  AF0FS24(); /* Edit historical style no.*/
  AF0FS25(); /* Edit historical silhouette cd*/
  AF0FS26(); /* Edit historical category cd*/
  AF0FS39(); /* Edit historical product line*/
  AF0FS27(); /* Edit historical gender/age cd*/
  AF0FS40(); /* Edit historical product type*/
  AF0FS46(); /* Edit historical division code*/
   /* *================================**/
   /* * Perform Relational Edit Checks **/
   /* *================================**/
  if (XP1REC.XP1MNO == 0) /* No historical edit errors*/
    AF0FS28(); /* Relational edit checks*/
  end
   /* *==============================**/
   /* * Save Historical Edit Message **/
   /* *==============================**/
  AF0FW01.AF0FWMNO = XP1REC.XP1MNO; /* Save hist edit message*/
  XP1REC.XP1MNO = 0; /* Reset message area*/

   /* ------------------------------------------------------------*/
      /* ** PHASE 2: Process Style/Size Selection Criteria ***/
   /* ------------------------------------------------------------*/
   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/
   /* -------------- y2k out begin ------------*/
   /* IF AF0FW01.XOWCD NE AF0FM001.AF0FMXOW /* Owner Group Code*/
   /* OR AF0FW01.AF0FWSTS NE AF0FM001.XXXSTAT /* Start Status no.*/
   /* OR AF0FW01.AF0FWSTY NE AF0FM001.SY1STNBR /* Start Style no.*/
   /* OR AF0FW01.AF0FWSIL NE AF0FM001.XSUCD /* Start SIL cd*/
   /* OR AF0FW01.AF0FW-BLNK-FL NE AF0FM001.AF0FM-BLNK-FL /* Blank flag*/
   /* OR AF0FW01.AF0FWCAT NE AF0FM001.XPCCD /* Start CAT cd*/
   /* OR AF0FW01.AF0FWGA NE AF0FM001.XGACD /* Start G/A cd*/
   /* OR XP1REC.XSNYR NE AF0FM001.XSNYR /* Season yr*/
   /* OR XP1REC.XSECD NE AF0FM001.XSECD /* Season cd*/
   /* OR AF0FM001.XSECD EQ ' '       /* Map fld spaced out*/
   /* OR AF0FM001.XSNYR EQ 0         /* Map fld zeroed out*/
   /* OR AF0FW01.AF0FWUSR NE AF0FM001.XXXUSER /* Forecaster cd*/
   /* OR AF0FW01.XDVCD NE AF0FM001.XDVCD /* division code*/
   /* OR AF0FW01.XPRCD NE AF0FM001.XPRCD /* product type*/
   /* OR AF0FW01.XPLCD NE AF0FM001.XPLCD /* product line code*/
   /* OR AF0FW01.XLCCD(1) NE AF0FM001.XLCCD(1) /* life cycle code 1*/
   /* OR AF0FW01.XLCCD(2) NE AF0FM001.XLCCD(2) /* life cycle code 2*/
   /* OR AF0FW01.XLCCD(3) NE AF0FM001.XLCCD(3) /* life cycle code 3*/
   /* OR AF0FW01.XLCCD(4) NE AF0FM001.XLCCD(4);/* life cycle code 4*/
   /* MOVE 'Y' TO AFWREC.AFWSWR;     /* New criteria entered*/
   /* END;*/
   /* -------------- y2k out end --------------*/
   /* -------------- y2k in begin -------------*/
  AF0FW01.AF0FWXSY = XP1REC.XSNYR;
  if (AF0FW01.XOWCD != AF0FM001.AF0FMXOW              /* Owner Group Code*/
   || AF0FW01.AF0FWSTS != AF0FM001.XXXSTAT            /* Start Status no.*/
   || AF0FW01.AF0FWSTY != AF0FM001.SY1STNBR           /* Start Style no.*/
   || AF0FW01.AF0FWSIL != AF0FM001.XSUCD              /* Start SIL cd*/
   || AF0FW01.AF0FW-BLNK-FL != AF0FM001.AF0FM-BLNK-FL /* Blank flag*/
   || AF0FW01.AF0FWCAT != AF0FM001.XPCCD              /* Start CAT cd*/
   || AF0FW01.AF0FWGA != AF0FM001.XGACD               /* Start G/A cd*/
   || AF0FW01.AF0FWXS2 != AF0FM001.XSNYR              /* Season yr*/
   || XP1REC.XSECD != AF0FM001.XSECD                  /* Season cd*/
   || AF0FM001.XSECD == " "                           /* Map fld spaced out*/
   || AF0FW01.AF0FWUSR != AF0FM001.XXXUSER            /* Forecaster cd*/
   || AF0FW01.XDVCD != AF0FM001.XDVCD                 /* division code*/
   || AF0FW01.XPRCD != AF0FM001.XPRCD                 /* product type*/
   || AF0FW01.XPLCD != AF0FM001.XPLCD                 /* product line code*/
   || AF0FW01.XLCCD[1] != AF0FM001.XLCCD[1]           /* life cycle code 1*/
   || AF0FW01.XLCCD[2] != AF0FM001.XLCCD[2]           /* life cycle code 2*/
   || AF0FW01.XLCCD[3] != AF0FM001.XLCCD[3]           /* life cycle code 3*/
   || AF0FW01.XLCCD[4] != AF0FM001.XLCCD[4])          /* life cycle code 4*/
    AFWREC.AFWSWR = "Y"; /* New criteria entered*/
  end
   /* -------------- y2k in end ---------------*/
   /* *============================**/
   /* * Check End of G/A Indicator **/
   /* *============================**/
  if (AF9REC.AF9TYP99 == "Y") /* No more G/A codes to process*/
    if (AFWREC.AFWSWR == "N") /* No new keys entered*/
      converseLib.validationFailed(15); /* Indicate no more data*/
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      exit stack; /* Exit to reselect data*/
    end
  end
   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/
  if (AFWREC.AFWSWR == "Y"           /* New keys entered*/
   && converseVar.eventKey not enter /* Enter key not pressed*/
   && converseVar.eventKey not pf7   /* PF7 key not pressed*/
   && converseVar.eventKey not pf8)  /* PF8 key not pressed*/
    converseLib.validationFailed(4); /* Request not permitted*/
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end
   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/
  if (AFWREC.AFWSWR == "Y") /* New criteria entered*/
    AF0FS47(); /* Edit owner group code*/
    AF0FS29(); /* Edit status cd*/
    AF0FS44(); /* Edit life cycle codes*/
    AF0FS41(); /* Edit division code*/
    AF0FS30(); /* Edit style no.*/
    AF0FS49(); /* Edit blank only ind*/
    AF0FS32(); /* Edit silhouette cd*/
    AF0FS33(); /* Edit category cd*/
    AF0FS43(); /* Edit product line*/
    AF0FS34(); /* Edit gender/age cd*/
    AF0FS42(); /* Edit product type*/
    AF0FS35(); /* Edit season yr*/
    AF0FS36(); /* Edit season cd*/
    AF0FS37(); /* Edit forecaster cd*/
  end
   /* *====================================**/
   /* *  Check Criteria Validation Status  **/
   /* *====================================**/
  if (XP1REC.XP1MNO == 0 /* No validation errors*/
   && AFWREC.AFWSWR == "Y") /* New selection criteria entered*/
    XP1REC.XSUCD = AF0FW01.AF0FWSIL; /* New start SIL cd*/
    XP1REC.XPCCD = AF0FW01.AF0FWCAT; /* New start CAT cd*/
    XP1REC.XGACD = AF0FW01.AF0FWGA; /* New start G/A cd*/
    XP1REC.XDVCD = AF0FW01.XDVCD; /* New division code*/
    XP1REC.XPLCD = AF0FW01.XPLCD; /* New product line code*/
    XP1REC.XPRCD = AF0FW01.XPRCD; /* New product type code*/
  end
   /* *==========================**/
   /* *  Edit Map Detail Lines   **/
   /* *==========================**/
  if (AFWREC.AFWSWR == "N" /* No selection criteria changed*/
   && XP1REC.XP1MNO == 0)  /* and No validation errors*/
    AF0FS38(); /* Edit map detail lines*/
  end
   /* *=================================**/
   /* *  Check Validation Error Status  **/
   /* *=================================**/
  if (AF0FW01.AF0FWMNO != 0) /* Historical Data has errors*/
    if (AF0FW01.AF0FWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AF0FW01.AF0FWMNO);
    end /* Set message for display*/
    AF0FW01.AF0FWHDS = "N"; /* Do not select new data*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 10) /* Protect/darken map display*/
      set AF0FM001.AF0FMSZ1[AFWIDX5] skip, invisible; /* Size desc 1*/
      set AF0FM001.AF0FMPC1[AFWIDX5] skip, invisible; /* Size pcent 1*/
      set AF0FM001.AF0FMSZ2[AFWIDX5] skip, invisible; /* Size desc 2*/
      set AF0FM001.AF0FMPC2[AFWIDX5] skip, invisible; /* Size pcent 2*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
  end

  if (XP1REC.XP1MNO != 0) /* Style/Size error present*/
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 10) /* Protect/darken map display*/
      set AF0FM001.AF0FMSTY[AFWIDX5] skip, invisible; /* Style no.*/
      set AF0FM001.AF0FMSTD[AFWIDX5] skip, invisible; /* Style nm*/
      set AF0FM001.XOWCD[AFWIDX5] skip, invisible; /* Owner Group*/
      set AF0FM001.AF2FSTST[AFWIDX5] skip, invisible; /* Style status*/
      set AF0FM001.SY4IDDSC[AFWIDX5] skip, invisible; /* Size desc*/
      set AF0FM001.AF2SZPCT[AFWIDX5] skip, invisible; /* Size pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    AF0FM001.AF0FMPCT = 0; /* Clear color percent total*/
  end

end // end AF0F151

// Process Valid Request
Function AF0F160()
   /* *=======================================**/
   /* *  Check if Loop Control within Limits  **/
   /* *=======================================**/

  if (AF0FW01.AF0FWLCT > AF0FW01.AF0FWLIM) /* Style ctr loop limit reached*/
    AF0FW01.AF0FWLCT = 0; /* Reset loop ctr*/
  end



   /* *========================================**/
   /* * 'PF15', 'PF16', 'PF17' Key Processing  **/
   /* *========================================**/
  if (converseVar.eventKey is pf15 /* PF15 (Next type)*/
   || converseVar.eventKey is pf16 /* PF16 (Next g/a)*/
   || converseVar.eventKey is pf17 /* PF17 (NEXT LINE)*/
   || converseVar.eventKey is pf18 /* PF18 (NEXT CAT)*/
   || converseVar.eventKey is pf19) /* PF19 (NEXT SILH)*/
    AF0FW01.AF0FWCNF = "N"; /* Reset update confirm flag*/
    return; /* Execute next process*/
  end



   /* *==========================**/
   /* *  'ENTER' Key Processing  **/
   /* *==========================**/
  if (converseVar.eventKey is enter) /* enter key pressed*/
    if (AFWREC.AFWSWR == "Y") /* new data requested*/
      return; /* Execute next process*/
    else
      if (AF0FW02.AF0FWCHG == "Y") /* With updates*/
        if (AF0FW01.AF0FWHAC == "Y") /* Historical activity pending*/
          AFWREC.AFWPRCSN = "160 "; /* Process number*/
          AFWREC.AFWNMO = 62; /* Indicate pending activity*/
          return; /* Execute next process*/
        end
        AFWREC.AFWIDX4 = 1; /* Set Loop index*/
        AF0FW01.AF0FWCPT = 0; /* Reset accumulator*/
        while (AFWREC.AFWIDX4 <= AF0FW02.AF0FWIDX) /* LE Max Size Recs*/
          AF0FW01.AF0FWCPT = AF0FW01.AF0FWCPT + AF0FW02.AF0FWSZP[AFWIDX4];
          AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
        end

        if ((AF0FW02.XOWCD == "**" /* corporate look*/
         || AF0FW02.XOWCD == "00") /* this is calculated*/
         && AF0FM001.AF0FM-BLNK-FL == "Y") /* a blank*/
          AF0FW01.AF0FWCPT = 100;
        end

        AF0FM001.AF0FMPCT = AF0FW01.AF0FWCPT; /* Total size pcents*/
        if (AF0FW01.AF0FWCPT != 100.00 /* Pcent not equal 100*/
         && AF0FW01.AF0FWCPT != 0)     /* Pcent not equal 0*/
          /* **IF AF0FW01.AF0FWCNF NE 'Y'     ; Update not confirmed*/
          AF0FW01.AF0FWCNF = "Y"; /* set upd confirm flag*/
          AFWREC.AFWPRCSN = "160 "; /* Process number*/
          converseLib.validationFailed(40); /* Indicate not equal 100*/
          set AF0FM001.AF0FMPCT skip, bold; /* Highlight fld*/
          return; /* Execute next process*/
          /* **END ;*/
        end
        if (AF0FW01.AF0FWCPT == 100.00 /* Pcent equal 100*/
         || AF0FW01.AF0FWCPT == 0)     /* Pcent equal 0*/
          /* **OR AF0FW01.AF0FWCNF EQ 'Y'     ; Upd flag set to confirm*/
             /* (Check Size Pcent Totals for Duplicates)*/
          AFWREC.AFWIDX4 = 1; /* Set Loop index*/
          AF0FW01.AF0FWCPT = 0; /* Reset accumulator*/
          while (AFWREC.AFWIDX4 <= AF0FW02.AF0FWIDX) /* LE Max Size Recs*/
            if (AF0FW02.AF0FWSZP[AFWIDX4] != AF0FW02.AF0FWSPW[AFWIDX4])
              AF0FW01.AF0FWCPT = AF0FW01.AF0FWCPT + 1;
            end
            AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop Through*/
          end
          if (AF0FW01.AF0FWCPT == 0) /* Duplicates found*/
            return; /* Exit to redisplay map*/
          else
                    /* (Update DACAST.VAFSTY01)*/
          end
          if ((AF0FW02.XOWCD == "**" /* Corporate look*/
           || AF0FW02.XOWCD == "00") /* XOW 00 have calculated values*/
           && AF0FM001.AF0FM-BLNK-FL == "Y") /* for blanks*/
            return;
          else
            AF0F161(); /* Update DACAST.VAFSTY01*/
            AF0FW01.AF0FWCNF = "U"; /* Indicate successful update*/
            AFWREC.AFWSWR = "Y"; /* Reselect updated record*/
            AFWREC.AFWNMO = 13; /* Indicate successful update*/
            AFWREC.AFWPRCSN = "160 "; /* Process number*/
            return; /* Execute next process*/
          end
        end
      end
    end
  end



   /* *=======================**/
   /* * 'PF7' Key Processing  **/
   /* *=======================**/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    AF0FW01.AF0FWPGV = AF0FW01.AF0FWPGV - 1; /* Back one page*/
    return; /* Execute next process*/

  end



   /* *=======================**/
   /* * 'PF8' Key Processing  **/
   /* *=======================**/

  if (converseVar.eventKey is pf8) /* Scroll fwd requested*/

    AF0FW01.AF0FWPGV = AF0FW01.AF0FWPGV + 1; /* Fwd one page*/
    return; /* Execute next process*/

  end



end // end AF0F160

// Update DACAST.VAFSTY01
Function AF0F161()
   /* ------------------------------------------------------------*/
   /* Update DACAST.VAFSTY01 row from valid screen updates.*/
   /* ------------------------------------------------------------*/


   /* *============================**/
   /* *  Get System Date and Time  **/
   /* *============================**/

  XX0XS01(); /* System date/time process*/



   /* *========================================**/
   /* *  Obtain Map Detail Records for Update  **/
   /* *========================================**/


   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/


   /* *==========================**/
   /* *  Build DB Output Record  **/
   /* *==========================**/

  set AF2REC empty; /* Reset Wk Storage field*/

  AF2REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  AF2REC.XDMCD = AF0FW02.XDMCD; /* Dimension cd*/
  AF2REC.XDVCD = AF0FW02.XDVCD; /* Division cd*/
  AF2REC.XOWCD = AF0FW02.XOWCD; /* owner group code*/
  AF2REC.XSECD = AF0FW02.XSECD; /* Season cd*/
  AF2REC.XSNYR = AF0FW02.XSNYR; /* Season yr*/
  AF2REC.AF-MKT-STY-DLR = AF0FW02.AF-MKT-STY-DLR;
  AF2REC.AF-MKT-STY-DLR-DT = AF0FW02.AF-MKT-STY-DLR-DT;
  AF2REC.AF-MUL-FCTR = AF0FW02.AF-MUL-FCTR;
  AF2REC.AF-MUL-FCTR-FL = AF0FW02.AF-MUL-FCTR-FL;

  if (AF0FW02.AF2FSTDL > 0 /* Forecast dollars entered*/
   && AF0FW02.AF2FSTST == "N") /* Style status is new*/
    AF2REC.AF2FSTST = "A"; /* Set status to active*/
  else
    AF2REC.AF2FSTST = AF0FW02.AF2FSTST; /* Status cd*/
  end

  AF2REC.AF2FSTDL = AF0FW02.AF2FSTDL; /* Fcst dollars*/
  AF2REC.AF2FSTDT = AF0FW02.AF2FSTDT; /* Fcst date*/
  AF2REC.AFMFSTQT = AF0FW02.AFMFSTQT; /* fcst units!*/
  AF2REC.AF2SPCDT = AF0FW02.AF2SPCDT; /* Date size pcent fcsts*/
  AF2REC.AF2SFODT = AF0FW02.AF2SFODT; /* First offer date*/



   /* *=====================================**/
   /* *  Move Update Items into Output Row  **/
   /* *=====================================**/

  move AF0FW02.AF0FWSZP to AF2REC.AF2SZPCT[1] for all; /* Size pcent fcst array*/

  AF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AF2REC.ZZZCHGCT = AF0FW02.ZZZCHGCT; /* Change count*/



   /* *==============================**/
   /* *  Update DACAST.VAFSTY01 Row  **/
   /* *==============================**/

  try
    call "IO3510" ("U ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "161"; /* Process number*/
      AF0FW01.AF0FWCNF = "U"; /* Indicate reupdate*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AF0FW01.AF0FWCIN = "Y"; /* Data contention detected*/
        AF0FW01.AF0FWCNF = "N"; /* Reset upd confirm flag*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "161 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0F161

// Obtain G/A,CAT and SIL Comb.
Function AF0FS01()
   /* ------------------------------------------------------------*/
   /* Get new G/A, CAT and SIL combination*/
   /* ------------------------------------------------------------*/


   /* *==========================================**/
   /* *  Obtain Next Combination for Processing  **/
   /* *==========================================**/


  AF9REC.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
  AF9REC.XPCCD = XP1REC.XPCCD; /* Category cd*/
  AF9REC.XSUCD = XP1REC.XSUCD; /* Sihouette cd*/
  AF9REC.XPRCD = XP1REC.XPRCD; /* product type*/
  AF9REC.XPLCD = XP1REC.XPLCD; /* line code*/


  XPAF100(); /* Combination retrieval rtn*/


  XP1REC.XGACD = XGATBL.XGACD[AF9GAIXM]; /* Save to wk storage*/
  AF0FW01.AF0FWXGA = XGATBL.XGACD[AF9GAIXM]; /* Save internal start*/
  XP1REC.XGADESC = XGATBL.XGADESC[AF9GAIXM]; /* Save to wk storage*/
  XP1REC.XGAABRV = XGATBL.XGAABRV[AF9GAIXM]; /* Save to wk storage*/

  XP1REC.XPCCD = XPCTBL.XPCCD[AF9PCIXM]; /* Save to wk storage*/
  AF0FW01.AF0FWXPC = XPCTBL.XPCCD[AF9PCIXM]; /* Save internal start*/
  XP1REC.XPCDESC = XPCTBL.XPCDESC[AF9PCIXM]; /* Save to wk storage*/
  XP1REC.XPCABRV = XPCTBL.XPCABRV[AF9PCIXM]; /* Save to wk storage*/

  XP1REC.XSUCD = XSUTBL.XSUCD[AF9SUIXM]; /* Save to wk storage*/
  AF0FW01.AF0FWXSU = XSUTBL.XSUCD[AF9SUIXM]; /* Save internal start*/
  XP1REC.XSUDESC = XSUTBL.XSUDESC[AF9SUIXM]; /* Save to wk storage*/
  XP1REC.XSUABRV = XSUTBL.XSUABRV[AF9SUIXM]; /* Save to wk storage*/

  XP1REC.XPRCD = XPRTBL.XPRCD[AF9TPIXM]; /* Save to wk storage*/
  AF0FW01.AF0FWXPR = XPRTBL.XPRCD[AF9TPIXM];
                                   /* Save internal start*/
  XP1REC.XPRDESC = XPRTBL.XPRDESC[AF9TPIXM]; /* Save to wk storage*/
  XP1REC.XPRABRV = XPRTBL.XPRABRV[AF9TPIXM]; /* Save to wk storage*/

  XP1REC.XPLCD = XPLTBL.XPLCD[AF9LNIXM]; /* Save to wk storage*/
  AF0FW01.AF0FWXCD = XPLTBL.XPLCD[AF9LNIXM];
                                   /* Save internal start*/
  XP1REC.XPLDESC = XPLTBL.XPLDESC[AF9LNIXM]; /* Save to wk storage*/
  XP1REC.XPLABRV = XPLTBL.XPLABRV[AF9LNIXM]; /* Save to wk storage*/

  if (AF9REC.AF9TYP99 == "Y") /* Last product type*/
    AF0FW01.AF0FWLCT = 0; /* Reset style loop ctr*/
    converseLib.validationFailed(15); /* Indicate no more data*/
    AFWREC.AFWPRCSN = "S01 "; /* Process number*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    while (AFWREC.AFWIDX5 <= 10) /* Protect/darken map display*/
      set AF0FM001.AF0FMSTY[AFWIDX5] skip, invisible; /* Style no.*/
      set AF0FM001.XOWCD[AFWIDX5] skip, invisible; /* Owner group*/
      set AF0FM001.AF0FMSTD[AFWIDX5] skip, invisible; /* Style desc*/
      set AF0FM001.AF2FSTST[AFWIDX5] skip, invisible; /* Style status*/
      set AF0FM001.SY4IDDSC[AFWIDX5] skip, invisible; /* Size desc*/
      set AF0FM001.AF2SZPCT[AFWIDX5] skip, invisible; /* Size pcent*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    end
    set AF0FM001.XSECD cursor; /* Set cursor position*/
    AF0FM001.AF0FMPCT = 0; /* Clear color pcent total*/
  end

end // end AF0FS01

// Select DACAST.VAFSTY01 rows
Function AF0FS02()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AF2REC empty; /* Reset rec work area*/

  AF2REC.XGACD = XP1REC.XGACD; /* XGA cd*/
  AF2REC.XPCCD = XP1REC.XPCCD; /* XPC cd*/
  AF2REC.XSUCD = XP1REC.XSUCD; /* XSU cd*/
  AF2REC.XPLCD = XP1REC.XPLCD; /* ln cd*/
  AF2REC.XPRCD = XP1REC.XPRCD; /* typ cd*/
  AF2REC.XDVCD = XP1REC.XDVCD; /* division code*/
  AF2REC.SY1STNBR = AF0FW01.AF0FWSYK; /* Style no.*/
  AF2REC.SY4SZSCL = "**"; /* Size scale cd*/
  AF2REC.AF2FSTST = "*"; /* Forecast status*/

  if (AF0FM001.AF0FMXOW == " " /* No owner group specified*/
   || AF0FM001.AF0FMXOW == "**")
    AF2REC.XOWCD = "**"; /* Get all owner groups*/
  else
    AF2REC.XOWCD = XP1REC.XOWCD; /* Owner group cd*/
  end

  if (XP1REC.XXXUSER == " ") /* No user specified*/
    AF2REC.PG1FCTCD = "**"; /* Get all users*/
  else
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
  end

  AF0FW01.AF0FWXSY = 0; /* Reset xsnyr wk area*/
  AF0FW01.AF0FWXSY = XP1REC.XSNYR; /* Move to wk area*/

   /* -------------- y2k out begin -------------*/
   /* AF0FW01.AF0FWXSY = AF0FW01.AF0FWXSY + 1900; /* Add century*/
   /* -------------- y2k out end ---------------*/
   /* -------------- y2k in  begin -------------*/
  if (AF0FW01.AF0FWXSY < 1900) /* no century yet*/
    if (AF0FW01.AF0FWXSY > 65)
      AF0FW01.AF0FWXS1 = 19;
    else
      AF0FW01.AF0FWXS1 = 20;
    end
  end
   /* -------------- y2k in end ----------------*/

  AF2REC.XSNYR = AF0FW01.AF0FWXSY; /* XSE yr*/
  AF2REC.XSECD = XP1REC.XSECD; /* XSE cd*/

   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFSTY01  **/
   /* *====================================**/
  try
    call "IO3510" ("SS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    return; /* Return to calling process*/
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0FW01.AF0FWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  exit stack; /* Exit to redisplay map*/

end // end AF0FS02

// Process DACAST.VAFSTY01 rows
Function AF0FS03()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until the next style to*/
     /* be processed is retrieved (current style + 1). If done*/
     /* for the first time after a new select has been made, it*/
     /* will retrieve the first style in the set --*/
     /* (current style + 0).*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "IO3510" ("SN", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
   /* If call sucessful, store style/size data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    AF0FW01.AF0FWLCT = AF0FW01.AF0FWLCT + 1; /* Add to style ctr*/
    if (AF0FW01.AF0FWLCT > AF0FW01.AF0FWLIM) /* Loop limit exceeded*/
      converseLib.validationFailed(44); /* Indicate loop exceeded*/
      AFWREC.AFWIDX5 = +9999; /* Force loop termination.*/
      return; /* Exit to display map*/
    end
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.XGACD = AF2REC.XGACD; /* Update G/A comb code*/
      XP1REC.XPCCD = AF2REC.XPCCD; /* Update CAT comb code*/
      XP1REC.XSUCD = AF2REC.XSUCD; /* Update SIL comb code*/
      XP1REC.XPRCD = AF2REC.XPRCD; /* Update prod type code*/
      XP1REC.XPLCD = AF2REC.XPLCD; /* Update prod ln code*/
      if (XP1REC.XGACD in XGATBL.XGACD) /* Update G/A comb index*/
        AF9REC.AF9GAIXM = sysVar.arrayIndex;
      end
      if (XP1REC.XPCCD in XPCTBL.XPCCD) /* Update CAT comb index*/
        AF9REC.AF9PCIXM = sysVar.arrayIndex;
      end
      if (XP1REC.XSUCD in XSUTBL.XSUCD) /* Update SIL comb index*/
        AF9REC.AF9SUIXM = sysVar.arrayIndex;
      end
      if (XP1REC.XPRCD in XPRTBL.XPRCD) /* Update prod type index*/
        AF9REC.AF9TPIXM = sysVar.arrayIndex;
      end
      if (XP1REC.XPLCD in XPLTBL.XPLCD) /* Update prod ln index*/
        AF9REC.AF9LNIXM = sysVar.arrayIndex;
      end
      /* ------------------------------------------------------------*/
       /* Whenever a size row is successfully retrieved, it undergoes*/
         /* two qualification processes to determine suitablity for*/
         /* processing. The first process relates the row to selec-*/
         /* tion criteria data, and the second process determines if*/
         /* the style entered has been processed (in the case of*/
         /* multiple-row styles).*/
      /* ------------------------------------------------------------*/

      if (XP1REC.PG1FCTCD == " " /* Get all forecasters*/
       || AF2REC.PG1FCTCD == XP1REC.PG1FCTCD) /* Check forecaster cd*/
        if (AF0FW01.XXXSTAT == " ") /* Get all active/new styles*/
          if (AF2REC.AF2FSTST == "A" /* Style status active*/
           || AF2REC.AF2FSTST == "N") /* or style status new*/
            AF0FW01.AF0FWXST = "Y"; /* Row qualified*/
          else
            AF0FW01.AF0FWXST = "N"; /* Row not qualified*/
          end
        else
          if (AF0FW01.XXXSTAT == AF2REC.AF2FSTST) /* Get specific status*/
            AF0FW01.AF0FWXST = "Y"; /* Row qualified*/
          else
            AF0FW01.AF0FWXST = "N"; /* Row not qualified*/
          end
        end
        AF0FW01.AF0FWSQU = " "; /* Reset qual flag*/
        AF0FS07(); /* Check if style already processed*/
                 /* qualification process #2*/
        if (AF0FW01.AF0FWXST == "Y" /* Row qualified for processing*/
         && AF0FW01.AF0FWSQU == "Y") /* Style not yet processed*/
          if (AF0FM001.XLCCD[1] != " ") /* FIRST LIFE CYC CODE NOT BLANK*/
            AF0FS45();
            if (AF0FW04.AF0FWCNT == 0)
              return; /* bypass*/
            else
              AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Add to style ctr*/
              AF0FS04(); /* Store Style/Size data*/
              return;
            end
          else
            AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Add to style ctr*/
            AF0FS04(); /* Store Style/Size data*/
            return;
          end
        else
          return; /* Loop through (Bypass Style row)*/
        end
      else
        return; /* Loop through (Bypass Style row)*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        AFWREC.AFWIDX5 = +9999; /* Force loop termination.*/
        return; /* Return to calling process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0FW01.AF0FWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S03 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end AF0FS03

// Store Style/Size data
Function AF0FS04()
   /* ------------------------------------------------------------*/
              /* ** Store DACAST.VAFSTY01 Data ***/
   /* Get style short name.*/
   /* Save all non-update items into program wk array.*/
   /* Obtain size scale and descriptions.*/
   /* Store all sizes into program wk array for display and*/
     /* possible update.*/
   /* ------------------------------------------------------------*/
  AF0FW02.AF0FWINP = "Y"; /* Indicate map data formatted*/
   /* *========================**/
   /* *  Get Style Short Name  **/
   /* *========================**/
  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  XP1REC.SY1STNBR = AF2REC.SY1STNBR; /* Save Style no.*/
  PG2REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0FS04"; /* Process name*/

  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/

    if (AF0FW01.AF0FW-BLNK-FL == "Y"
     && PG2REC.PG2SCRFL != "B")
      AF0FW01.AF0FWSQU = "N";
      AFWREC.AFWIDX5 = 0;
      return;
    else
      if (AF0FW01.AF0FW-BLNK-FL == "N"
       && PG2REC.PG2SCRFL == "B")
        AF0FW01.AF0FWSQU = "N";
        AFWREC.AFWIDX5 = 0;
        return;
      end
    end

    XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* Save style name*/
    XP1REC.SY2CLRID = PG2REC.SY2CLRID; /* Save color cd*/
  else
    AFWREC.AFWPRCSN = "S04 "; /* Process number*/
    set AF0FM001.AF0FMSTY[1] bold; /* Highlight field*/
    converseLib.validationFailed(33); /* Indicate error message*/
    AF0FM001.AF0FMSTD = "NOT FOUND"; /* Not found desc*/
    exit stack; /* Exit to redisplay map*/
  end

   /* *=========================**/
   /* *  Save Non-Update Items  **/
   /* *=========================**/

  AF0FW02.XDMCD = AF2REC.XDMCD; /* Dimension cd*/
  AF0FW02.XDVCD = AF2REC.XDVCD; /* Division cd*/
  AF0FW02.XOWCD = AF2REC.XOWCD; /* owner group code*/
  AF0FW02.XSECD = AF2REC.XSECD; /* Season cd*/
  AF0FW02.XSNYR = AF2REC.XSNYR; /* Season yr*/
  AF0FW02.PG1FCTCD = AF2REC.PG1FCTCD; /* Forecaster cd*/
  AF0FW02.XGACD = AF2REC.XGACD; /* Gender/Age cd*/
  AF0FW02.XPCCD = AF2REC.XPCCD; /* Category cd*/
  AF0FW02.XSUCD = AF2REC.XSUCD; /* Silhouette cd*/
  AF0FW02.SY4SZSCL = AF2REC.SY4SZSCL; /* Size scale*/
  AF0FW02.AF2FSTST = AF2REC.AF2FSTST; /* Size status*/
  AF0FW02.AF2FSTDL = AF2REC.AF2FSTDL; /* Est Dlr Amt*/
  AF0FW02.AFMFSTQT = AF2REC.AFMFSTQT; /* Unit amount!*/
  AF0FW02.AF2FSTDT = AF2REC.AF2FSTDT; /* Fcst date*/
  AF0FW02.AF2SPCDT = AF2REC.AF2SPCDT; /* Date sz pcent fcst*/
  AF0FW02.ZZZCHGCT = AF2REC.ZZZCHGCT; /* Change count*/
  AF0FW02.XPRCD = AF2REC.XPRCD; /* prod type cd*/
  AF0FW02.XPLCD = AF2REC.XPLCD; /* prod ln cd*/
  AF0FW02.AF-MKT-STY-DLR = AF2REC.AF-MKT-STY-DLR; /* mkt sty dlr*/
  AF0FW02.AF-MKT-STY-DLR-DT = AF2REC.AF-MKT-STY-DLR-DT; /* mkt sty dt*/
  AF0FW02.AF-MUL-FCTR = AF2REC.AF-MUL-FCTR; /* multiplier factor*/
  AF0FW02.AF-MUL-FCTR-FL = AF2REC.AF-MUL-FCTR-FL;
  AF0FW02.AF2SFODT = AF2REC.AF2SFODT; /* first offer date*/

   /* *============================**/
   /* *  Obtain Size Descriptions  **/
   /* *============================**/

  AF0FW01.AF0FWVLI = " "; /* Indicate retrieval request*/

  AF0FS05(); /* Get size scale for style*/

   /* *======================================**/
   /* * Store Sizes/qtys into Program Array  **/
   /* *======================================**/
   /* ignore this comment*/
     /* The ff. process will merge sizes from the size scale*/
     /* data base and the existing sizes in AF2REC. In this way,*/
     /* the Style size ids in AF2REC will always reflect all*/
     /* the sizes for the style, whether percentages were*/
     /* entered or not.*/
   /* ignore that comment*/

                /* (Merge all sizes into wk arrays)*/
  AFWREC.AFWIDX1 = 1; /* Reset size scale array index*/
  AF0FW02.AF0FWIDX = 0; /* Reset Size/Pcent Array wk index*/

  while (AFWREC.AFWIDX1 <= 10) /* for each size bucket*/

    if (AF2REC.SY5SZID[AFWIDX1] != 0) /* valid size*/
      AF0FW02.AF0FWIDX = AF0FW02.AF0FWIDX + 1; /* next store table bucket*/
      AFWREC.AFWIDX3 = AF2REC.SY5SZID[AFWIDX1];
      AF0FW02.AF0FWSZD[AF0FWIDX] = SY4REC.SY4IDDSC[AFWIDX3];
      AF0FW02.AF0FWSZ[AF0FWIDX] = AF2REC.SY5SZID[AFWIDX1];
      AF0FW02.AF0FWSPE[AF0FWIDX] = AF2REC.AF2SZPCT[AFWIDX1];
    end

    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
  end

                 /* (Pad unused array elements)*/
  AFWREC.AFWIDX3 = AF0FW02.AF0FWIDX + 1; /* Determine start point*/
  while (AFWREC.AFWIDX3 <= 10) /* Pad unused array elems*/
    AF0FW02.AF0FWSZ[AFWIDX3] = +9999; /* Indicate unused fld*/
    AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* Loop through*/
  end
            /* (Initialize Output Arrays)*/
  move 0 to AF0FW02.AF0FWSZI[1] for all; /* Clear target array*/
  move " " to AF0FW02.AF0FWSZN[1] for all; /* Clear target array*/
  move 0 to AF0FW02.AF0FWSZP[1] for all; /* Clear target array*/
  AFWREC.AFWIDX1 = 1; /* Reset size scale array index*/
  while (AFWREC.AFWIDX1 <= 10) /* Move merged size data to target*/
                                   /* arrays*/
    if (AF0FW02.AF0FWSZ[AFWIDX1] != +9999) /* Valid size in range*/
      AF0FW02.AF0FWSZI[AFWIDX1] = AF0FW02.AF0FWSZ[AFWIDX1];
      AF0FW02.AF0FWSZN[AFWIDX1] = AF0FW02.AF0FWSZD[AFWIDX1];
      AF0FW02.AF0FWSZP[AFWIDX1] = AF0FW02.AF0FWSPE[AFWIDX1];
      AF0FW02.AF0FWSPW[AFWIDX1] = AF0FW02.AF0FWSPE[AFWIDX1];
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
  end

end // end AF0FS04

// Obtain Size Scale record
Function AF0FS05()
   /* ------------------------------------------------------------*/
       /* ** Obtain DPROD.VSCALE01 Row ***/
   /* Set Unique Size Scale record from DB.*/
   /* ------------------------------------------------------------*/
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  set SY4REC empty; /* Reset rec work area*/
  SY4REC.SY4SZSCL = AF2REC.SY4SZSCL; /* Size scale cd*/
   /* *====================================**/
   /* *  Obtain Data from DPROD.VSCALE01   **/
   /* *====================================**/
  try
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Size scale found*/
      return; /* Return to calling process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100 /* Size scale not found*/
     && AF0FW01.AF0FWVLI == "Y")   /* and Validation request*/
      return; /* Return to calling process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCALE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end AF0FS05

// Close DACAST.VAFSTY01 cursor
Function AF0FS06()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3510" ("CS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0FS06

// Check if Style valid
Function AF0FS07()
   /* ------------------------------------------------------------*/
   /* This routine checks against the inadvertent reprocessing*/
     /* of a specific style already processed. This is done by*/
     /* relating the current G/A,CAT and SIL combination with*/
     /* the G/A and/or CAT and/or SIL entered along with the*/
     /* style in question. If matched, then the style desired*/
     /* has been located. Otherwise, the search continues....*/
   /* ------------------------------------------------------------*/

  if (AF0FW01.SY1STNBR != " ") /* Specific style entered*/
    if (AF2REC.SY1STNBR == AF0FW01.SY1STNBR) /* The style specified*/

      if (AF0FW01.AF0FWOGK != " ")
        if (AF2REC.XOWCD >= AF0FW01.AF0FWOGK)
              /* XOWCD valid*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end

      if (AF0FW01.AF0FWSIL != " ") /* XSUCD specified*/
        if (AF0FW01.AF0FWSIL == XP1REC.XSUCD) /* Comb.match with criteria*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      if (AF0FW01.AF0FWCAT != " ") /* XPCCD specified*/
        if (AF0FW01.AF0FWCAT == XP1REC.XPCCD) /* Comb.match with criteria*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      if (AF0FW01.XPLCD != " ") /* product line*/
        if (AF0FW01.XPLCD == XP1REC.XPLCD) /* Comb.match with criteria*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      if (AF0FW01.AF0FWGA != " ") /* XGACD specified*/
        if (AF0FW01.AF0FWGA == XP1REC.XGACD) /* Comb.match with criteria*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      if (AF0FW01.XPRCD != " ") /* prod-typ-cd specified*/
        if (AF0FW01.XPRCD == XP1REC.XPRCD) /* Comb.match with criteria*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      AF0FW01.AF0FWST1 = " "; /* Indicate style for processing*/
      AF0FW01.AF0FWSQU = "Y"; /* Style qualified*/
    else
      if (AF0FW01.AF0FWST1 == " ") /* Specified style already processed*/
        AF0FW01.AF0FWSQU = "Y"; /* Style qualified*/
      else
        return; /* ****** EXIT to reselect data*/
      end
    end
  else
    AF0FW01.AF0FWSQU = "Y"; /* Style qualified*/
  end

  if (AF2REC.SY1STNBR >= XP1REC.SY1STNBR)
    if (AF2REC.SY1STNBR == XP1REC.SY1STNBR)
      if (AF2REC.XOWCD >= XP1REC.XOWCD)
        AF0FW01.AF0FWSQU = "Y";
        XP1REC.XOWCD = AF2REC.XOWCD;
       /* MOVE 1 TO AFWREC.AFWIDX5;*/
        return;
      else
        AF0FW01.AF0FWSQU = "N";
      end
    else
      AF0FW01.AF0FWSQU = "Y";
      XP1REC.SY1STNBR = AF2REC.SY1STNBR;
      XP1REC.XOWCD = AF2REC.XOWCD;
      AFWREC.AFWIDX5 = 1;
      return;
    end
  else
    return;
  end

end // end AF0FS07

// Process Historical Summary DB
Function AF0FS08()
   /* ------------------------------------------------------------*/
             /* ** Obtain DACAST.VDMANZ01 Rows ***/
   /* Set Select Historical Summary DB (DACAST.VDMANZ01) rows.*/
   /* If valid selection fields found  (Maximum 3 categories and*/
     /* and 2 selections)  Then:*/
    /* - Process all rows selected; Store all row data into map*/
      /* page/s for display.*/
    /* - Close DB cursor.*/
   /* Otherwise return to calling process.*/
   /* ------------------------------------------------------------*/


   /* *======================================**/
   /* *  Set Select Historical Summary Rows  **/
   /* *======================================**/

  AF0FW01.AF0FWVLF = " "; /* Reset valid select indicator*/

  AF0FS09(); /* Set Select DACAST.VDMANZ01 rows*/


   /* *===================================**/
   /* *  Process Historical Summary Rows  **/
   /* *===================================**/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    if (AF0FW01.AF0FWVLF == "1" /* Valid select fields found*/
     || AF0FW01.AF0FWVLF == "2") /* Valid select fields found*/

      AFWREC.AFWSWC = " "; /* Reset EOF switch*/
      while (AFWREC.AFWSWC != "Y") /* Process all retrieved rows*/
        AF0FS10(); /* Process Hist Summary data*/
      end

      if (converseVar.validationMsgNum == 0) /* No errors found*/
        AF0FS11(); /* Close DACAST.VDMANZ01 cursor*/
      end

    end

  end



end // end AF0FS08

// Select Set Hist Summary DB
Function AF0FS09()
   /* ------------------------------------------------------------*/
            /* ** Obtain DACAST.VDMANZ01 ***/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AFHREC empty; /* Reset rec work area*/

  AFHREC.XGACD = AF0FW01.AF0FWHGC; /* Gender/Age cd*/
  AFHREC.XPLCD = AF0FW01.AF0FMHLC; /* line code*/
  AFHREC.XPRCD = AF0FW01.AF0FMHTC; /* prod type cd*/
  AFHREC.XDVCD = AF0FW01.AF0FMHDC; /* division code*/

  if (AF0FW01.AF0FMHOG == " ")
    AFHREC.XOWCD = "**";
  else
    AFHREC.XOWCD = AF0FW01.AF0FMHOG;
  end

  if (AF0FW01.AF0FWHCC[AFWIDX1] != " ") /* Valid Category cd*/
    AFHREC.XPCCD = AF0FW01.AF0FWHCC[AFWIDX1]; /* Use as key*/
  else
    AF0FW01.AF0FWVLF = "N"; /* Indicate invalid sel field*/
    return; /* Return to calling process*/
  end

  AFHREC.XSUCD = AF0FW01.AF0FWHSC; /* Silhouette cd*/

  if (XP1REC.SY4SZSCL == "  ")
    AFHREC.SY4SZSCL = "**"; /* wild card*/
  else
    AFHREC.SY4SZSCL = XP1REC.SY4SZSCL; /* Size scale cd*/
  end

  if (AFWREC.AFWIDX2 == 1) /* First selection in map*/
    AFHREC.XSECD = AF0FW01.AF0FWHS1; /* Season cd*/
                 /* (Reformat Season Year)*/
    AF0FW01.AF0FWXSY = 0; /* Reset xsnyr wk area*/
    AF0FW01.AF0FWXSY = AF0FW01.AF0FWHY1; /* Season yr*/

    /* ----------------- y2k out begin -------------*/
    /* AF0FW01.AF0FWXSY = AF0FW01.AF0FWXSY + 1900;/* Add century*/
    /* ----------------- y2k out end ---------------*/
    /* ----------------- y2k in  begin -------------*/
    if (AF0FW01.AF0FWXSY < 1900) /* no century built yet*/
      if (AF0FW01.AF0FWXSY > 65)
        AF0FW01.AF0FWXS1 = 19;
      else
        AF0FW01.AF0FWXS1 = 20;
      end
    end
    /* ----------------- y2k in end ----------------*/

    AFHREC.XSNYR = AF0FW01.AF0FWXSY; /* Season yr*/

    if (AF0FW01.AF0FWHD1 == 0) /* No As-Of-Date entered*/
      AF0FS50(); /* Get latest As-Of-Date from VDMANX01*/
    else
           /* (Reformat As-Of-Date to Internal Date)*/
      AF0FW01.AF0FWEDW = AF0FW01.AF0FWHD1; /* To ext wk dt area*/
      /* ----------------- y2k out begin -------------*/
      /* MOVE 019 TO AF0FW01.AF0FWDTC;/* To int wk Century*/
      /* ----------------- y2k out end ---------------*/
      /* ----------------- y2k in  begin -------------*/
      if (AF0FW01.AF0FWHD1 > 65)
        AF0FW01.AF0FWDTC = 019; /* To int wk Century*/
      else
        AF0FW01.AF0FWDTC = 020; /* To int wk Century*/
      end
      /* ----------------- y2k in end ----------------*/
      AF0FW01.AF0FWDTM = AF0FW01.AF0FWEDM; /* To int wk mm*/
      AF0FW01.AF0FWDTD = AF0FW01.AF0FWEDD; /* To int wk dd*/
      AF0FW01.AF0FWDTY = AF0FW01.AF0FWEDY; /* To int wk yy*/
      AFHREC.AFFASODT = AF0FW01.AF0FWDTW; /* As of date*/
    end

    AF0FW01.AF0FWVLF = "1"; /* Indicate sel fld*/

  else
    if (AF0FW01.AF0FWHS2 != " " /* Valid season cd*/
    )                           /* ----------------- y2k out begin*/
                                   /* -------------*/
      /* AND AF0FW01.AF0FWHY2 NE 0;   /* Valid season yr*/
      /* ----------------- y2k out end ---------------*/

      AFHREC.XSECD = AF0FW01.AF0FWHS2; /* Season cd*/
                   /* (Reformat Season Year)*/
      AF0FW01.AF0FWXSY = 0; /* Reset xsnyr wk area*/
      AF0FW01.AF0FWXSY = AF0FW01.AF0FWHY2; /* Season yr*/
      /* ----------------- y2k out begin -------------*/
      /* AF0FW01.AF0FWXSY = AF0FW01.AF0FWXSY + 1900;/* Add century*/
      /* ----------------- y2k out end ---------------*/
      /* ----------------- y2k in  begin -------------*/
      if (AF0FW01.AF0FWXSY < 1900) /* no century built yet*/
        if (AF0FW01.AF0FWXSY > 65)
          AF0FW01.AF0FWXS1 = 19;
        else
          AF0FW01.AF0FWXS1 = 20;
        end
      end
      /* ----------------- y2k in end ----------------*/
      AFHREC.XSNYR = AF0FW01.AF0FWXSY; /* Season yr*/

      if (AF0FW01.AF0FWHD2 == 0) /* No As-Of-Date entered*/
        AF0FS50(); /* Get lastest Asofdt from VDMANX01*/
      else
             /* (Reformat as-of-date to internal date)*/
        AF0FW01.AF0FWEDW = AF0FW01.AF0FWHD2; /* To ext wk dt area*/
        /* ----------------- y2k out begin -------------*/
        /* MOVE 019 TO AF0FW01.AF0FWDTC;/* To int wk Century*/
        /* ----------------- y2k out end ---------------*/
        /* ----------------- y2k in  begin -------------*/
        if (AF0FW01.AF0FWHD2 > 65)
          AF0FW01.AF0FWDTC = 019; /* To int wk Century*/
        else
          AF0FW01.AF0FWDTC = 020; /* To int wk Century*/
        end
        /* ----------------- y2k in end ----------------*/
        AF0FW01.AF0FWDTM = AF0FW01.AF0FWEDM; /* To int wk mm*/
        AF0FW01.AF0FWDTD = AF0FW01.AF0FWEDD; /* To int wk dd*/
        AF0FW01.AF0FWDTY = AF0FW01.AF0FWEDY; /* To int wk yy*/
        AFHREC.AFFASODT = AF0FW01.AF0FWDTW; /* As of date*/
      end

      AF0FW01.AF0FWVLF = "2"; /* Indicate sel fld*/

    else

      AF0FW01.AF0FWVLF = "N"; /* Indicate invalid sel fld*/
      return; /* Return to calling process*/

    end

  end


   /* *====================================**/
   /* *  Obtain Data from DACAST.VDMANZ01  **/
   /* *====================================**/

  try
    call "VDMANZ02" ("S1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AF0FW01.AF0FWVLF = "N"; /* Indicate invalid cat cd*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0FS09

// Process Hist Summary rows
Function AF0FS10()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* Obtain size scale record, using input size scale code from*/
     /* map header as key.*/
   /* Store Historical Summary data; If size not yet in save*/
     /* array, then create size, otherwise, accumulate.*/
     /* Maintain overall qty totals.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "VDMANZ02" ("N1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
   /* If call successful, store historical summary data*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      AF0FW03.AF0FWTOT = 0; /* Clear wk qty totals fld*/
      AF0FW03.AF0FWTOT = AF0FW03.AF0FWTOT + AFHREC.AFGSOT1Q; /* Add Qty1*/
      AF0FW03.AF0FWTOT = AF0FW03.AF0FWTOT + AFHREC.AFGSOT2Q; /* Add Qty2*/
      AF0FW03.AF0FWTOT = AF0FW03.AF0FWTOT + AFHREC.AFGSOT3Q; /* Add Qty3*/
      AF0FW03.AF0FWTOT = AF0FW03.AF0FWTOT + AFHREC.AFGSOT4Q; /* Add Qty4*/
      AF0FW03.AF0FWTOT = AF0FW03.AF0FWTOT + AFHREC.AFGSOT5Q; /* Add Qty5*/

      if (AF0FW01.AF0FWVLF == "1") /* Selection Field 1 specified*/

        AF0FW03.AF0FWHT1 = AF0FW03.AF0FWHT1 + AF0FW03.AF0FWTOT; /* Sum*/

        AFWREC.AFWIDX5 = AFHREC.SY5SZID; /* Get size ptr*/
        AF0FW03.AF0FWSW1[AFWIDX5] = "S"; /* Size selected*/
        AF0FW03.AF0FWT1 = AF0FW03.AF0FWQW1[AFWIDX5]; /* Move to wk*/
        AF0FW03.AF0FWT1 = AF0FW03.AF0FWT1 + AF0FW03.AF0FWTOT; /* Accum*/
        AF0FW03.AF0FWQW1[AFWIDX5] = AF0FW03.AF0FWT1; /* Move back*/

      else

        if (AF0FW01.AF0FWVLF == "2") /* Selection Field 2 specified*/

          AF0FW03.AF0FWHT2 = AF0FW03.AF0FWHT2 + AF0FW03.AF0FWTOT; /* Sum*/

          AFWREC.AFWIDX5 = AFHREC.SY5SZID; /* Get size ptr*/
          AF0FW03.AF0FWSW2[AFWIDX5] = "S"; /* Size selected*/
          AF0FW03.AF0FWT1 = AF0FW03.AF0FWQW2[AFWIDX5]; /* Move to wk*/
          AF0FW03.AF0FWT1 = AF0FW03.AF0FWT1 + AF0FW03.AF0FWTOT; /* Accum*/
          AF0FW03.AF0FWQW2[AFWIDX5] = AF0FW03.AF0FWT1; /* Move back*/

        else

          AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
          return; /* Return to calling process*/

        end

      end

      if (AF0FW01.AF0FWVLF == "1")

        if (AF0FM001.AF0FMHD1 == " ") /* Reformat As-of-Date*/
          AF0FW01.AF0FWDTW = AFHREC.AFFASODT;
          AF0FW01.AF0FWEDY = AF0FW01.AF0FWDTY;
          AF0FW01.AF0FWEDD = AF0FW01.AF0FWDTD;
          AF0FW01.AF0FWEDM = AF0FW01.AF0FWDTM;
          AF0FW01.AF0FWDX1 = AF0FW01.AF0FWEDW;
        end

      else

        if (AF0FW01.AF0FWVLF == "2")

          if (AF0FM001.AF0FMHD2 == " ") /* Reformat As-of-Date*/
            AF0FW01.AF0FWDTW = AFHREC.AFFASODT;
            AF0FW01.AF0FWEDY = AF0FW01.AF0FWDTY;
            AF0FW01.AF0FWEDD = AF0FW01.AF0FWDTD;
            AF0FW01.AF0FWEDM = AF0FW01.AF0FWDTM;
            AF0FW01.AF0FWDX2 = AF0FW01.AF0FWEDW;
          end

        end

      end

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/
    end


  end



   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWSWC = "Y"; /* Force end of data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S10 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0FS10

// Close Hist Summary cursor
Function AF0FS11()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "VDMANZ02" ("C1", SQLCA, AFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S11 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANZ02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0FS11

// Process Historical Detail DB
Function AF0FS12()
   /* ------------------------------------------------------------*/
             /* ** Obtain DACAST.VDMANY01 Rows ***/
   /* Set Select Historical Detail DB (DACAST.VDMANY01) rows.*/
   /* If valid selection fields found  (Maximum 3 categories and*/
     /* and 2 selections)  Then:*/
    /* - Process all rows selected; Store all row data into map*/
      /* page/s for display.*/
    /* - Close DB cursor.*/
   /* Otherwise return to calling process.*/
   /* ------------------------------------------------------------*/


   /* *=====================================**/
   /* *  Set Select Historical Detail Rows  **/
   /* *=====================================**/

  AF0FW01.AF0FWVLF = " "; /* Reset valid select indicator*/

  AF0FS13(); /* Set Select DACAST.VDMANY01 rows*/


   /* *==================================**/
   /* *  Process Historical Detail Rows  **/
   /* *==================================**/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    if (AF0FW01.AF0FWVLF == "1" /* Valid select fields found*/
     || AF0FW01.AF0FWVLF == "2") /* Valid select fields found*/

      AFWREC.AFWSWC = " "; /* Reset EOF switch*/
      while (AFWREC.AFWSWC != "Y") /* Process all retrieved rows*/
        AF0FS14(); /* Process Hist Detail data*/
      end

      if (converseVar.validationMsgNum == 0) /* No errors found*/
        AF0FS15(); /* Close DACAST.VDMANY01 cursor*/
      end

    end

  end



end // end AF0FS12

// Select Set Hist Detail DB
Function AF0FS13()
   /* ------------------------------------------------------------*/
            /* ** Obtain DACAST.VDMANY01 ***/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AFGREC empty; /* Reset rec work area*/

  AFGREC.SY1STNBR = AF0FW01.AF0FWHST; /* Style as key*/

  if (AFWREC.AFWIDX2 == 1) /* First selection in map*/

    AFGREC.XSECD = AF0FW01.AF0FWHS1; /* Season cd*/
                   /* (Reformat Season Year)*/
    AF0FW01.AF0FWXSY = 0; /* Reset wk area*/
    AF0FW01.AF0FWXSY = AF0FW01.AF0FWHY1; /* To XSNYR wk area*/

    /* ---------------- y2k out begin --------------*/
    /* AF0FW01.AF0FWXSY = AF0FW01.AF0FWXSY + 1900;/* Add century*/
    /* ---------------- y2k out end ----------------*/
    /* ---------------- y2k in  begin --------------*/
    if (AF0FW01.AF0FWXSY < 1900) /* no century built yet*/
      if (AF0FW01.AF0FWXSY > 65)
        AF0FW01.AF0FWXS1 = 19;
      else
        AF0FW01.AF0FWXS1 = 20;
      end
    end
    /* ---------------- y2k in end -----------------*/

    AFGREC.XSNYR = AF0FW01.AF0FWXSY; /* Season yr*/

    if (AF0FW01.AF0FWHD1 == 0) /* No Asofdt entered*/
      AF0FS52(); /* Get Latest Asofdt from VDMANX01*/
    else
             /* (Reformat As-of-Date to Internal Date)*/
      AF0FW01.AF0FWEDW = AF0FW01.AF0FWHD1; /* To ext date wk*/
      /* ---------------- y2k out begin --------------*/
      /* MOVE 019 TO AF0FW01.AF0FWDTC;/* To int date wk century*/
      /* ---------------- y2k out end ----------------*/
      /* ---------------- y2k in  begin --------------*/
      if (AF0FW01.AF0FWEDW > 65)
        AF0FW01.AF0FWDTC = 019; /* To int date wk century*/
      else
        AF0FW01.AF0FWDTC = 020; /* To int date wk century*/
      end
      /* ---------------- y2k in end -----------------*/

      AF0FW01.AF0FWDTM = AF0FW01.AF0FWEDM; /* To int date wk mm*/
      AF0FW01.AF0FWDTD = AF0FW01.AF0FWEDD; /* To int date wk dd*/
      AF0FW01.AF0FWDTY = AF0FW01.AF0FWEDY; /* To int date wk yy*/
      AFGREC.AFFASODT = AF0FW01.AF0FWDTW; /* As of date*/
    end

    AF0FW01.AF0FWVLF = "1"; /* Indicate sel fld*/

  else

    if (AF0FW01.AF0FWHS2 != " " /* Valid season cd*/
    )                           /* ---------------- y2k out end --------*/
      /* AND AF0FW01.AF0FWHY2 NE 0;   /* Valid season yr*/
      /* ---------------- y2k out end --------*/

      AFGREC.XSECD = AF0FW01.AF0FWHS2; /* Season cd*/
                     /* (Reformat Season Year)*/
      AF0FW01.AF0FWXSY = 0; /* Reset wk area*/
      AF0FW01.AF0FWXSY = AF0FW01.AF0FWHY2; /* To XSNYR wk area*/
      /* ---------------- y2k out begin --------------*/
      /* AF0FW01.AF0FWXSY = AF0FW01.AF0FWXSY + 1900;/* Add century*/
      /* ---------------- y2k out end ----------------*/
      /* ---------------- y2k in  begin --------------*/
      if (AF0FW01.AF0FWXSY < 1900) /* no century built yet*/
        if (AF0FW01.AF0FWXSY > 65)
          AF0FW01.AF0FWXS1 = 19;
        else
          AF0FW01.AF0FWXS1 = 20;
        end
      end
      /* ---------------- y2k in end -----------------*/

      AFGREC.XSNYR = AF0FW01.AF0FWXSY; /* Season yr*/

      if (AF0FW01.AF0FWHD2 == 0) /* No Asofdt entered*/
        AF0FS52(); /* Get Latest Asofdt from VDMANX01*/
      else
               /* (Reformat As-of-Date to Internal Date)*/
        AF0FW01.AF0FWEDW = AF0FW01.AF0FWHD2; /* To ext date wk*/
        /* ---------------- y2k out begin --------------*/
        /* MOVE 019 TO AF0FW01.AF0FWDTC;/* To int date wk century*/
        /* ---------------- y2k out end ----------------*/
        /* ---------------- y2k in  begin --------------*/
        if (AF0FW01.AF0FWEDW > 65)
          AF0FW01.AF0FWDTC = 019; /* To int date wk century*/
        else
          AF0FW01.AF0FWDTC = 020; /* To int date wk century*/
        end
        /* ---------------- y2k in end -----------------*/

        AF0FW01.AF0FWDTM = AF0FW01.AF0FWEDM; /* To int date wk mm*/
        AF0FW01.AF0FWDTD = AF0FW01.AF0FWEDD; /* To int date wk dd*/
        AF0FW01.AF0FWDTY = AF0FW01.AF0FWEDY; /* To int date wk yy*/
        AFGREC.AFFASODT = AF0FW01.AF0FWDTW; /* As of date*/
      end

      AF0FW01.AF0FWVLF = "2"; /* Indicate sel fld*/

    else

      AF0FW01.AF0FWVLF = "N"; /* Indicate invalid sel fld*/
      return; /* Return to calling process*/

    end

  end


   /* *====================================**/
   /* *  Obtain Data from DACAST.VDMANY01  **/
   /* *====================================**/

  try
    call "VDMANY02" ("S1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AF0FW01.AF0FWVLF = "N"; /* Indicate invalid cat cd*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S13 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0FS13

// Process Hist Detail rows
Function AF0FS14()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* Obtain size scale record, using input size scale code from*/
     /* map header as key.*/
   /* Store Historical Detail data; If size not yet in save*/
     /* array, then create size, otherwise, accumulate.*/
     /* Maintain overall qty totals.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  try
    call "VDMANY02" ("N1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/



   /* ------------------------------------------------------------*/
   /* If call successful, store historical summary data*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      AFWREC.AFWIDX3 = 1; /* Reset Size/Qty index*/

      while (AFWREC.AFWIDX3 <= 10) /* Process all sizes/qtys*/

        if (AFGREC.SY5SZID[AFWIDX3] != 0) /* Valid style found*/

          AF0FW03.AF0FWTOT = 0; /* Clear wk qty totals fld*/
          AF0FW03.AF0FWTOT = AF0FW03.AF0FWTOT + AFGREC.AFGSOT1Q[AFWIDX3];
          AF0FW03.AF0FWTOT = AF0FW03.AF0FWTOT + AFGREC.AFGSOT2Q[AFWIDX3];
          AF0FW03.AF0FWTOT = AF0FW03.AF0FWTOT + AFGREC.AFGSOT3Q[AFWIDX3];
          AF0FW03.AF0FWTOT = AF0FW03.AF0FWTOT + AFGREC.AFGSOT4Q[AFWIDX3];
          AF0FW03.AF0FWTOT = AF0FW03.AF0FWTOT + AFGREC.AFGSOT5Q[AFWIDX3];

          if (AF0FW01.AF0FWVLF == "1") /* Selection Field 1 specified*/

            AF0FW03.AF0FWHT1 = AF0FW03.AF0FWHT1 + AF0FW03.AF0FWTOT; /* Sum*/

            AFWREC.AFWIDX5 = AFGREC.SY5SZID[AFWIDX3]; /* Get size ptr*/
            AF0FW03.AF0FWSW1[AFWIDX5] = "S"; /* Size selected*/
            AF0FW03.AF0FWT1 = AF0FW03.AF0FWQW1[AFWIDX5]; /* To wk*/
            AF0FW03.AF0FWT1 = AF0FW03.AF0FWT1 + AF0FW03.AF0FWTOT; /* Accum*/
            AF0FW03.AF0FWQW1[AFWIDX5] = AF0FW03.AF0FWT1; /* Move back*/


          else

            if (AF0FW01.AF0FWVLF == "2") /* Selection Field 1 specified*/

              AF0FW03.AF0FWHT2 = AF0FW03.AF0FWHT2 + AF0FW03.AF0FWTOT;
                                   /* Sum*/

              AFWREC.AFWIDX5 = AFGREC.SY5SZID[AFWIDX3];
              AF0FW03.AF0FWSW2[AFWIDX5] = "S"; /* Size selected*/
              AF0FW03.AF0FWT1 = AF0FW03.AF0FWQW2[AFWIDX5];
              AF0FW03.AF0FWT1 = AF0FW03.AF0FWT1 + AF0FW03.AF0FWTOT;
              AF0FW03.AF0FWQW2[AFWIDX5] = AF0FW03.AF0FWT1;

            else

              AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
              return; /* Return to calling process*/

            end

          end

        end

        AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1; /* Loop through*/

      end

      if (AF0FW01.AF0FWVLF == "1")

        if (AF0FM001.AF0FMHD1 == " ") /* Reformat date*/
          AF0FW01.AF0FWDTW = AFGREC.AFFASODT;
          AF0FW01.AF0FWEDY = AF0FW01.AF0FWDTY;
          AF0FW01.AF0FWEDD = AF0FW01.AF0FWDTD;
          AF0FW01.AF0FWEDM = AF0FW01.AF0FWDTM;
          AF0FW01.AF0FWDX1 = AF0FW01.AF0FWEDW;
        end

      else

        if (AF0FW01.AF0FWVLF == "2")

          if (AF0FM001.AF0FMHD2 == " ") /* Reformat date*/
            AF0FW01.AF0FWDTW = AFGREC.AFFASODT;
            AF0FW01.AF0FWEDY = AF0FW01.AF0FWDTY;
            AF0FW01.AF0FWEDD = AF0FW01.AF0FWDTD;
            AF0FW01.AF0FWEDM = AF0FW01.AF0FWDTM;
            AF0FW01.AF0FWDX2 = AF0FW01.AF0FWEDW;
          end

        end

      end

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/
    end


  end



   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWSWC = "Y"; /* Force end of data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0FS14

// Close Hist Detail cursor
Function AF0FS15()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "VDMANY02" ("C1", SQLCA, AFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S15 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANY02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0FS15

// Obtain As-of-Date XREF record
Function AF0FS16()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select unique' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4190" ("S ", SQLCA, AFFREC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and XREF record found*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S16 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANX01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0FS16

// Edit historical as-of-date 2
Function AF0FS17()
  if (AF0FM001.AF0FMHD2 == " ") /* As-of-date fld spaces*/
    AF0FW01.AF0FWDX2 = " "; /* Space out alpha wk fld*/
    AF0FW01.AF0FWHD2 = 0; /* Zero out num wk fld*/
    return; /* Return to calling process*/
  end


  AF0FW01.AF0FWSSE = AF0FM001.AF0FMHS2; /* Move season cd wk fld*/
  AF0FW01.AF0FWSSY = AF0FM001.AF0FMHY2; /* Move season yr wk fld*/
  AF0FW01.AF0FWSAS = AF0FM001.AF0FMHD2; /* Move as-of-date wk fld*/
  AF0FW01.AF0FWDX2 = AF0FM001.AF0FMHD2; /* Move as-of-date wk fld*/

  AF0FW01.AF0FWVLF = " "; /* Reset validation ind*/


  AF0FS18(); /* Edit Historical as-of-date*/


  if (AF0FW01.AF0FWVLF == " ") /* As-of-date found*/
                  /* (Field is valid)*/
    AF0FW01.AF0FWHD2 = TA2REC.TA2GRGA; /* Save to wk fld*/

  else
                  /* (Field in error)*/
    AF0FW01.AF0FWHD2 = 0; /* Zero out num wk fld*/
    AFWREC.AFWPRCSN = "S17 "; /* Process number*/
    set AF0FM001.AF0FMHD2 cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 47; /* Indicate error message*/

  end



end // end AF0FS17

// Check as-of-date in XREF file
Function AF0FS18()

   /* ------------------------------------------------------------*/
     /* check valid end date entered*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGA = AF0FW01.AF0FWSAS; /* To ext date wk area*/

  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD != 0) /* invalid date entered*/
    AF0FW01.AF0FWVLF = "E"; /* Indicate invalid date*/
    return; /* Return to calling process*/
  end



   /* ------------------------------------------------------------*/
    /* if date valid, check DACAST.VDMANX01 db for valid match*/
   /* ------------------------------------------------------------*/

           /* (Reformat As-of-Date to Internal Date)*/
  AF0FW01.AF0FWEDW = TA2REC.TA2GRGA; /* To ext date wk area*/

   /* --------------- y2k out begin -----------*/
   /* MOVE 019 TO AF0FW01.AF0FWDTC;     /* To int date century*/
   /* --------------- y2k out end -------------*/
   /* --------------- y2k in  begin -----------*/
  if (AF0FW01.AF0FWEDW > 65)
    AF0FW01.AF0FWDTC = 019; /* To int date century*/
  else
    AF0FW01.AF0FWDTC = 020; /* To int date century*/
  end
   /* --------------- y2k in end --------------*/

  AF0FW01.AF0FWDTM = AF0FW01.AF0FWEDM; /* To int date mm*/
  AF0FW01.AF0FWDTD = AF0FW01.AF0FWEDD; /* To int date dd*/
  AF0FW01.AF0FWDTY = AF0FW01.AF0FWEDY; /* To int date yy*/

                 /* (Reformat Season Year)*/
  AF0FW01.AF0FWXSY = 0; /* Reset XSNYR wk area*/
  AF0FW01.AF0FWXSY = AF0FW01.AF0FWSSY; /* Move to wk area*/

   /* --------------- y2k out begin -----------*/
   /* AF0FW01.AF0FWXSY = AF0FW01.AF0FWXSY + 1900; /* Add century*/
   /* --------------- y2k out end -------------*/
   /* --------------- y2k in  begin -----------*/
  if (AF0FW01.AF0FWXSY < 1900) /* no century built yet*/
    if (AF0FW01.AF0FWXSY > 65)
      AF0FW01.AF0FWXS1 = 19;
    else
      AF0FW01.AF0FWXS1 = 20;
    end
  end
   /* --------------- y2k in end --------------*/


  AFWREC.AFWIDX2 = 1; /* Reset loop index*/

  while (AFWREC.AFWIDX2 <= 35) /* Process all as-of-dates*/

    if (AFFREC.XSECD[AFWIDX2] == AF0FW01.AF0FWSSE /* Season cd*/
     && AFFREC.XSNYR[AFWIDX2] == AF0FW01.AF0FWXSY /* Season yr*/
     && AFFREC.AFFASODT[AFWIDX2] == AF0FW01.AF0FWDTW) /* as-of-date*/
      return; /* Return to calling process*/
    end

    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/

  end

  AF0FW01.AF0FWVLF = "E"; /* As-of-date not found*/



end // end AF0FS18

// Edit historical season yr 2
Function AF0FS19()
  if (AF0FM001.AF0FMHY2 == 0) /* Historical season yr zeroes*/
    AF0FW01.AF0FWHY2 = 0; /* move to wk storage*/
    return; /* Return to calling process*/
  end

  AF0FW01.AF0FWHY2 = AF0FM001.AF0FMHY2; /* save to wk storage*/

  AF0FW01.AF0FWXSY = 0; /* initialize xsnyr wk area*/
  AF0FW01.AF0FWXSY = AF0FM001.AF0FMHY2; /* move to wk area*/

   /* -------------- y2k out begin ---------*/
   /* AF0FW01.AF0FWXSY = AF0FW01.AF0FWXSY + 1900;/* move century*/
   /* -------------- y2k out end -----------*/
   /* -------------- y2k in  begin ---------*/
  if (AF0FW01.AF0FWXSY > 65)
    AF0FW01.AF0FWXS1 = 19;
  else
    AF0FW01.AF0FWXS1 = 20;
  end
   /* -------------- y2k in end ------------*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (AF0FW01.AF0FWXSY == YSNTBL.XSNYR[AFWIDX5]
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S19 "; /* Process number*/
  set AF0FM001.AF0FMHY2 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/

end // end AF0FS19

// Edit historical season cd 2
Function AF0FS20()
  if (AF0FM001.AF0FMHS2 == " ") /* Season cd spaces*/
    AF0FW01.AF0FWHS2 = " "; /* save to wk storage*/
    return;
  end

  AF0FW01.AF0FWHS2 = AF0FM001.AF0FMHS2; /* save to wk storage*/

  if (AF0FM001.AF0FMHS2 in XSETBL.XSECD)
                     /* (field is valid)*/

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S20 "; /* Process number*/
    set AF0FM001.AF0FMHS2 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    return; /* return to calling process*/

  end


  AF0FW01.AF0FWXSS = " "; /* Initialize wk area*/
  AF0FW01.AF0FWXYR = +0; /* Initialize wk area*/

  AF0FW01.AF0FWXSS = AF0FM001.AF0FMHS2; /* To XSECD wk area*/

  AF0FW01.AF0FWXYR = AF0FM001.AF0FMHY2; /* Format wk area*/


  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (AF0FW01.AF0FWXSA == YSNTBL.XSNABRV[AFWIDX5]
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S20 "; /* Process number*/
  set AF0FM001.AF0FMHY2 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/

end // end AF0FS20

// Edit historical as-of-date 1
Function AF0FS21()
  if (AF0FM001.AF0FMHD1 == " ") /* As-of-date spaces*/
    AF0FW01.AF0FWDX1 = " "; /* Space out alpha wk fld*/
    AF0FW01.AF0FWHD1 = 0; /* Zero out num wk fld*/
    return; /* Return to calling process*/
  end


  AF0FW01.AF0FWSSE = AF0FM001.AF0FMHS1; /* Move season cd wk fld*/
  AF0FW01.AF0FWSSY = AF0FM001.AF0FMHY1; /* Move season yr wk fld*/
  AF0FW01.AF0FWSAS = AF0FM001.AF0FMHD1; /* Move as-of-date wk fld*/
  AF0FW01.AF0FWDX1 = AF0FM001.AF0FMHD1; /* Save to wk fld*/

  AF0FW01.AF0FWVLF = " "; /* Reset validation ind*/


  AF0FS18(); /* Edit Historical as-of-date*/


  if (AF0FW01.AF0FWVLF == " ") /* As-of-date found*/
                  /* (Field is valid)*/
    AF0FW01.AF0FWHD1 = TA2REC.TA2GRGA; /* Save to wk fld*/

  else
                  /* (Field in error)*/
    AF0FW01.AF0FWHD1 = 0; /* Zero out num wk fld*/
    AFWREC.AFWPRCSN = "S21 "; /* Process number*/
    XP1REC.XP1MNO = 47; /* Indicate error message*/
    set AF0FM001.AF0FMHD1 cursor, bold; /* Highlight field*/

  end



end // end AF0FS21

// Edit historical season yr 1
Function AF0FS22()
  if (AF0FM001.AF0FMHY1 == 0) /* Season yr eq zeroes*/
    AF0FW01.AF0FWHY1 = 0; /* save to wk storage*/
    return; /* Return to calling process*/
  end

  AF0FW01.AF0FWHY1 = AF0FM001.AF0FMHY1; /* save to wk storage*/

  AF0FW01.AF0FWXSY = 0; /* initialize xsnyr wk area*/
  AF0FW01.AF0FWXSY = AF0FM001.AF0FMHY1; /* move to wk area*/

   /* ---------------- y2k out begin ---------*/
   /* AF0FW01.AF0FWXSY = AF0FW01.AF0FWXSY + 1900;/* move century*/
   /* ---------------- y2k out end -----------*/
   /* ---------------- y2k in  begin ---------*/
  if (AF0FW01.AF0FWXSY > 65)
    AF0FW01.AF0FWXS1 = 19;
  else
    AF0FW01.AF0FWXS1 = 20;
  end
   /* ---------------- y2k in end ------------*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (AF0FW01.AF0FWXSY == YSNTBL.XSNYR[AFWIDX5]
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S22 "; /* Process number*/
  set AF0FM001.AF0FMHY1 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/

end // end AF0FS22

// Edit historical season cd 1
Function AF0FS23()
  if (AF0FM001.AF0FMHS1 == " ") /* Season cd spaces*/
    AF0FW01.AF0FWHS1 = " "; /* save to wk storage*/
    return; /* REturn to calling process*/
  end

  AF0FW01.AF0FWHS1 = AF0FM001.AF0FMHS1; /* save to wk storage*/

  if (AF0FM001.AF0FMHS1 in XSETBL.XSECD)
                     /* (field is valid)*/

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S23 "; /* Process number*/
    set AF0FM001.AF0FMHS1 cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    return; /* return to calling process*/

  end


  AF0FW01.AF0FWXSS = " "; /* Initialize wk area*/
  AF0FW01.AF0FWXYR = +0; /* Initialize wk area*/

  AF0FW01.AF0FWXSS = AF0FM001.AF0FMHS1; /* To XSECD wk area*/
  AF0FW01.AF0FWXYR = AF0FM001.AF0FMHY1; /* Format wk area*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (AF0FW01.AF0FWXSA == YSNTBL.XSNABRV[AFWIDX5]
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S23 "; /* Process number*/
  set AF0FM001.AF0FMHY1 cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/

end // end AF0FS23

// Edit historical style no.
Function AF0FS24()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'XSPG201' call.*/
   /* If not found, indicate an edit error.*/
   /* ------------------------------------------------------------*/



   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/

  if (AF0FM001.AF0FMHST == " ") /* Style = spaces*/
    AF0FW01.AF0FWHST = " "; /* Move to wk storage*/
    return; /* Exit to calling process*/
  end


  AF0FW01.AF0FWHST = AF0FM001.AF0FMHST; /* Save to wk fld*/


   /* *=======================================**/
   /* *  Get Style Row from  DPRODG.VSYCLR01  **/
   /* *=======================================**/

  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0FM001.AF0FMHST; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0FS24"; /* Process name*/

  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/



   /* *==========================**/
   /* *  Check Retrieval Status  **/
   /* *==========================**/


  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/

                   /* (Field is valid)*/

  else

                  /* (Field in error)*/
    set AF0FM001.AF0FMHST cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate not found*/
    AFWREC.AFWPRCSN = "S24 "; /* Process number*/
    return; /* Return to calling process*/

  end



end // end AF0FS24

// Edit historical silhouette cd
Function AF0FS25()

  if (AF0FM001.AF0FMHSC == " ") /* Field eq spaces*/
    AF0FW01.AF0FWHSC = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0FW01.AF0FWHSC = AF0FM001.AF0FMHSC; /* save to wk map storage*/

  if (AF0FM001.AF0FMHSC in XSUTBL.XSUCD)
    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      AF0FM001.AF0FMHSC = XSUTBL.XSUCD[sysVar.arrayIndex]; /* To map*/
      return; /* Return to calling process*/
    end
  end

  AFWREC.AFWPRCSN = "S25 "; /* Process number*/
  set AF0FM001.AF0FMHSC cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  AF0FM001.AF0FMHSC = " "; /* Space out desc*/

end // end AF0FS25

// Edit history category cd
Function AF0FS26()

  AFWREC.AFWIDX1 = 1; /* Reset loop index*/
  while (AFWREC.AFWIDX1 <= 3) /* Edit all Historical cat cds*/
    if (AF0FM001.AF0FMHCC[AFWIDX1] == " ") /* Map fld spaces*/
      AF0FW01.AF0FWHCC[AFWIDX1] = " "; /* Space out save area*/
    else
      AF0FW01.AF0FWHCC[AFWIDX1] = AF0FM001.AF0FMHCC[AFWIDX1];
      if (AF0FM001.AF0FMHCC[AFWIDX1] in XPCTBL.XPCCD)
        if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
         && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
        else
          AFWREC.AFWPRCSN = "S26 "; /* Process number*/
          set AF0FM001.AF0FMHCC[AFWIDX1] cursor, bold;
          XP1REC.XP1MNO = 35; /* indicate error message*/
        end
      else
        AFWREC.AFWPRCSN = "S26 "; /* Process number*/
        set AF0FM001.AF0FMHCC[AFWIDX1] cursor, bold;
        XP1REC.XP1MNO = 35; /* indicate error message*/
      end
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
  end

end // end AF0FS26

// Edit historical Gender/Age cd
Function AF0FS27()


  if (AF0FM001.AF0FMHGC == " ") /* Map fld eq spaces*/
    AF0FW01.AF0FWHGC = " "; /* Space out save fld*/
    AF0FW01.AF0FWHGA = " "; /* Space out save desc*/
    return; /* Return to calling process*/
  end


  AF0FW01.AF0FWHGC = AF0FM001.AF0FMHGC; /* save to wk storage*/


  if (AF0FM001.AF0FMHGC in XGATBL.XGACD)

    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XGATBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                      /* (Field is valid)*/
      AF0FW01.AF0FWHGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S27 "; /* Process number*/
  set AF0FM001.AF0FMHGC cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  AF0FW01.AF0FWHGA = " "; /* Space out save desc*/



end // end AF0FS27

// Relational edit checking
Function AF0FS28()
   /* *============================================**/
   /* * Check season cd/yr/as-of-date completeness **/
   /* *============================================**/

            /* (Sesn Cd/Yr/As-of-date Option 1)*/

  if (AF0FM001.AF0FMHS1 != " " /* Valid season yr 1*/
   && AF0FM001.AF0FMHY1 != 0)  /* and Valid season yr 1*/
  /* AND AF0FM001.AF0FMHD1 NE ' ';   /* and Valid as-of-date 1*/
               /* (valid option 1)*/
    AF0FW01.AF0FWOP1 = "V"; /* Indicate valid option 1*/

  else

    if (AF0FM001.AF0FMHS1 == " " /* Empty season yr 1*/
     && AF0FM001.AF0FMHY1 == 0   /* and empty season yr 1*/
     && AF0FM001.AF0FMHD1 == " ") /* and empty as-of-date 1*/
                 /* (empty option 1)*/
      AF0FW01.AF0FWOP1 = " "; /* Indicate empty option 1*/

    else
             /* (option 1 in error - incomplete fields)*/
      AFWREC.AFWPRCSN = "S28 "; /* Process number*/
      set AF0FM001.AF0FMHS1 cursor, bold; /* Highlight field*/
      set AF0FM001.AF0FMHY1 bold; /* Highlight field*/
      set AF0FM001.AF0FMHD1 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0FW01.AF0FWOP1 = "E"; /* Indicate error option 1*/

    end

  end

            /* (Sesn Cd/Yr/As-of-date Option 2)*/

  if (AF0FM001.AF0FMHS2 != " " /* Valid season yr 2*/
   && AF0FM001.AF0FMHY2 != 0)  /* and Valid season yr 2*/
  /* AND AF0FM001.AF0FMHD2 NE ' ';   /* and Valid as-of-date 2*/
               /* (valid option 2)*/
    AF0FW01.AF0FWOP2 = "V"; /* Indicate valid option 2*/

  else

    if (AF0FM001.AF0FMHS2 == " " /* Empty season yr 2*/
     && AF0FM001.AF0FMHY2 == 0   /* and empty season yr 2*/
     && AF0FM001.AF0FMHD2 == " ") /* and empty as-of-date 2*/
                 /* (empty option 2)*/
      AF0FW01.AF0FWOP2 = " "; /* Indicate empty option 2*/

    else
             /* (option 2 in error - incomplete fields)*/
      AFWREC.AFWPRCSN = "S28 "; /* Process number*/
      set AF0FM001.AF0FMHS2 cursor, bold; /* Highlight field*/
      set AF0FM001.AF0FMHY2 bold; /* Highlight field*/
      set AF0FM001.AF0FMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0FW01.AF0FWOP2 = "E"; /* Indicate error option 1*/

    end

  end



  if (AF0FW01.AF0FWOP1 == "V" /* Option 1 valid*/
   && AF0FW01.AF0FWOP2 == "V") /* and Option 1 valid*/

    if (AF0FM001.AF0FMHS1 == AF0FM001.AF0FMHS2 /* Duplicate sesn cd*/
     && AF0FM001.AF0FMHS1 == AF0FM001.AF0FMHS2 /* Duplicate sesn yr*/
     && AF0FM001.AF0FMHD1 == AF0FM001.AF0FMHD2) /* Duplicate as-of-date*/

             /* (option 2 in error - Duplicate fields)*/
      AFWREC.AFWPRCSN = "S28 "; /* Process number*/
      set AF0FM001.AF0FMHS2 cursor, bold; /* Highlight field*/
      set AF0FM001.AF0FMHY2 bold; /* Highlight field*/
      set AF0FM001.AF0FMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/
      AF0FW01.AF0FWOP2 = "E"; /* Indicate error option 1*/

    end

  end



  if (XP1REC.XP1MNO != 0) /* Errors detected*/
    return; /* Return to calling process*/
  end



   /* *==========================================**/
   /* * Check Historical Fields for Completeness **/
   /* *==========================================**/
  if (AF0FW01.AF0FWOP1 == "V" /* Option 1 valid*/
   || AF0FW01.AF0FWOP2 == "V") /* Option 2 valid*/
    if (AF0FM001.AF0FMHST == " ") /* No style entered*/
      if (AF0FM001.AF0FMHGC != " " /* Valid Gender/Age cd*/
       && AF0FM001.AF0FMHSC != " " /* and Valid Silhouette cd*/
       && AF0FM001.AF0FMHDC != " " /* and Valid division*/
       && AF0FM001.AF0FMHTC != " " /* and Valid type*/
       && AF0FM001.AF0FMHLC != " ") /* and Valid line*/
        if (AF0FM001.AF0FMHCC[1] != " " /* Categ 1 valid*/
         || AF0FM001.AF0FMHCC[2] != " " /* or Categ 2 valid*/
         || AF0FM001.AF0FMHCC[3] != " ") /* or Categ 3 valid*/
          return; /* Return to calling process*/
        else
          AFWREC.AFWPRCSN = "S28 "; /* Process number*/
          set AF0FM001.AF0FMHDC cursor, bold; /* Highlight field*/
          set AF0FM001.AF0FMHGC bold; /* Highlight field*/
          set AF0FM001.AF0FMHSC bold; /* Highlight field*/
          set AF0FM001.AF0FMHDC bold; /* Highlight field*/
          set AF0FM001.AF0FMHTC bold; /* Highlight field*/
          set AF0FM001.AF0FMHLC bold; /* Highlight field*/
          set AF0FM001.AF0FMHCC[1] bold; /* Highlight field*/
          set AF0FM001.AF0FMHCC[2] bold; /* Highlight field*/
          set AF0FM001.AF0FMHCC[3] bold; /* Highlight field*/
          XP1REC.XP1MNO = 49; /* Indicate error message*/
          return; /* Return to calling process*/
        end
      else
        AFWREC.AFWPRCSN = "S28 "; /* Process number*/
        set AF0FM001.AF0FMHDC cursor, bold; /* Highlight field*/
        set AF0FM001.AF0FMHSC bold; /* Highlight field*/
        set AF0FM001.AF0FMHGC bold; /* Highlight field*/
        set AF0FM001.AF0FMHDC bold; /* Highlight field*/
        set AF0FM001.AF0FMHTC bold; /* Highlight field*/
        set AF0FM001.AF0FMHLC bold; /* Highlight field*/
        set AF0FM001.AF0FMHCC[1] bold; /* Highlight field*/
        set AF0FM001.AF0FMHCC[2] bold; /* Highlight field*/
        set AF0FM001.AF0FMHCC[3] bold; /* Highlight field*/
        XP1REC.XP1MNO = 49; /* Indicate error message*/
        return; /* Return to calling process*/
      end
    else /* Valid style entered*/
      return; /* Return to calling process*/
    end
  end



  if (AF0FW01.AF0FWOP1 == " " /* Option 1 empty*/
   || AF0FW01.AF0FWOP2 == " ") /* Option 2 empty*/

    if (AF0FM001.AF0FMHST != " ") /* Style entered*/
             /* (Data Request Option Missing)*/
      AFWREC.AFWPRCSN = "S28 "; /* Process number*/
      set AF0FM001.AF0FMHS1 cursor, bold; /* Highlight field*/
      set AF0FM001.AF0FMHST bold; /* Highlight field*/
      set AF0FM001.AF0FMHY1 bold; /* Highlight field*/
      set AF0FM001.AF0FMHD1 bold; /* Highlight field*/
      set AF0FM001.AF0FMHS2 bold; /* Highlight field*/
      set AF0FM001.AF0FMHY2 bold; /* Highlight field*/
      set AF0FM001.AF0FMHD2 bold; /* Highlight field*/
      XP1REC.XP1MNO = 47; /* Indicate error message*/

    else

      if (AF0FM001.AF0FMHGC != " ") /* Valid Gender/Age cd*/

        if (AF0FM001.AF0FMHSC != " ") /* Valid Silhouette cd*/

          if (AF0FM001.AF0FMHCC[1] != " " /* Categ 1 valid*/
           || AF0FM001.AF0FMHCC[2] != " " /* or Categ 2 valid*/
           || AF0FM001.AF0FMHCC[3] != " ") /* or Categ 3 valid*/
                   /* (Data Request Option Missing)*/
            AFWREC.AFWPRCSN = "S28 "; /* Process number*/
            set AF0FM001.AF0FMHS1 cursor, bold; /* Highlight field*/
            set AF0FM001.AF0FMHY1 bold; /* Highlight field*/
            set AF0FM001.AF0FMHD1 bold; /* Highlight field*/
            set AF0FM001.AF0FMHS2 bold; /* Highlight field*/
            set AF0FM001.AF0FMHY2 bold; /* Highlight field*/
            set AF0FM001.AF0FMHD2 bold; /* Highlight field*/
            XP1REC.XP1MNO = 47; /* Indicate error message*/

          else /* (G/A,CAT,SIL Option Invalid)*/
                   /* (Data Request Option Missing)*/
            AFWREC.AFWPRCSN = "S28 "; /* Process number*/
            set AF0FM001.AF0FMHS1 cursor, bold; /* Highlight field*/
            set AF0FM001.AF0FMHGC bold; /* Highlight field*/
            set AF0FM001.AF0FMHSC bold; /* Highlight field*/
            set AF0FM001.AF0FMHDC bold; /* Highlight field*/
            set AF0FM001.AF0FMHLC bold; /* Highlight field*/
            set AF0FM001.AF0FMHTC bold; /* Highlight field*/
            set AF0FM001.AF0FMHCC[1] bold; /* Highlight field*/
            set AF0FM001.AF0FMHCC[2] bold; /* Highlight field*/
            set AF0FM001.AF0FMHCC[3] bold; /* Highlight field*/
            set AF0FM001.AF0FMHY1 bold; /* Highlight field*/
            set AF0FM001.AF0FMHD1 bold; /* Highlight field*/
            set AF0FM001.AF0FMHS2 bold; /* Highlight field*/
            set AF0FM001.AF0FMHY2 bold; /* Highlight field*/
            set AF0FM001.AF0FMHD2 bold; /* Highlight field*/
            XP1REC.XP1MNO = 47; /* Indicate error message*/

          end

        else

          AFWREC.AFWPRCSN = "S28 "; /* Process number*/
          set AF0FM001.AF0FMHS1 cursor, bold; /* Highlight field*/
          set AF0FM001.AF0FMHGC bold; /* Highlight field*/
          set AF0FM001.AF0FMHSC bold; /* Highlight field*/
          set AF0FM001.AF0FMHDC bold; /* Highlight field*/
          set AF0FM001.AF0FMHLC bold; /* Highlight field*/
          set AF0FM001.AF0FMHTC bold; /* Highlight field*/
          set AF0FM001.AF0FMHCC[1] bold; /* Highlight field*/
          set AF0FM001.AF0FMHCC[2] bold; /* Highlight field*/
          set AF0FM001.AF0FMHCC[3] bold; /* Highlight field*/
          set AF0FM001.AF0FMHY1 bold; /* Highlight field*/
          set AF0FM001.AF0FMHD1 bold; /* Highlight field*/
          set AF0FM001.AF0FMHS2 bold; /* Highlight field*/
          set AF0FM001.AF0FMHY2 bold; /* Highlight field*/
          set AF0FM001.AF0FMHD2 bold; /* Highlight field*/
          XP1REC.XP1MNO = 47; /* Indicate error message*/

        end

      end

    end

  end
end // end AF0FS28

// Edit Start Status cd
Function AF0FS29()
  AF0FW01.AF0FWSTS = AF0FM001.XXXSTAT; /* save to wk map storage*/

  if (AF0FM001.XXXSTAT != "A"
   && AF0FM001.XXXSTAT != "N"
   && AF0FM001.XXXSTAT != "I"
   && AF0FM001.XXXSTAT != " ")

                   /* (field in error)*/
    AF0FW01.XXXSTAT = " "; /* Space out wk storage*/
    AFWREC.AFWPRCSN = "S29 "; /* Process number*/
    set AF0FM001.XXXSTAT cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 32; /* indicate error message*/

  else

                   /* (field is valid)*/
    AF0FW01.XXXSTAT = AF0FM001.XXXSTAT; /* save to wk storage*/

  end


end // end AF0FS29

// Edit Start Style no.
Function AF0FS30()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'XSPG201' call.*/
   /* If not found, indicate an edit error.*/
   /* ------------------------------------------------------------*/



   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/

  if (AF0FM001.SY1STNBR == " ") /* Style = spaces*/
    AF0FW01.SY1STNBR = " "; /* Move to wk storage*/
    XP1REC.SY1STNBR = " "; /* Move to wk storage*/
    AF0FW01.AF0FWST1 = " "; /* Move to wk storage*/
    AF0FW01.AF0FWST2 = " "; /* Move to wk storage*/
    AF0FW01.AF0FWSTY = " "; /* Move to wk storage*/
    return; /* Exit to calling process*/
  end


  AF0FW01.AF0FWSTY = AF0FM001.SY1STNBR; /* Save to wk map storage*/



   /* *=======================================**/
   /* *  Get Style Row from  DPRODG.VSYCLR01  **/
   /* *=======================================**/

  set PG2REC empty; /* Reset record wk area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0FW01.AF0FWSTY; /* Style no. as key*/
  TA1REC.TA1PGMNM = "AF0FV22"; /* Process name*/

  XSPG201(); /* Obtain DPRODG.VSYCLR01 row*/



   /* *==========================**/
   /* *  Check Retrieval Status  **/
   /* *==========================**/


  if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/

                   /* (Field is valid)*/
    AF0FW01.SY1STNBR = AF0FM001.SY1STNBR; /* Save to wk st*/
    XP1REC.SY1STNBR = AF0FM001.SY1STNBR; /* Save to wk st*/

    if (AF0FM001.SY1STNBR == AF0FW01.AF0FWST2) /* Save to alt wk stor*/

                    /* (Same style being processed)*/
                          /* --- B U T ---*/
      if (AFWREC.AFWSWR == "Y") /* Style is part of new keys entered*/
        AF0FW01.AF0FWST1 = AF0FM001.SY1STNBR; /* Restore alt wk*/
      end

    else
      AF0FW01.AF0FWST1 = AF0FM001.SY1STNBR; /* Save to alt wk stor*/
      AF0FW01.AF0FWST2 = AF0FM001.SY1STNBR; /* Save to alt wk stor*/
    end


  else

                  /* (Field in error)*/
    set AF0FM001.SY1STNBR cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate not found*/
    AFWREC.AFWPRCSN = "S30 "; /* Process number*/
    AF0FW01.SY1STNBR = " "; /* Space out wk storage*/

  end



end // end AF0FS30

// Edit silhouette cd
Function AF0FS32()


  if (AF0FM001.XSUCD == " ") /* Field eq spaces*/
    AF0FW01.AF0FWSIL = " "; /* Space out save area*/
    AF0FW01.AF0FWDSL = " "; /* Space out save desc*/
    AF0FM001.XSUABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  AF0FW01.AF0FWSIL = AF0FM001.XSUCD; /* save to wk map storage*/


  if (AF0FM001.XSUCD in XSUTBL.XSUCD)

    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      if (AF0FM001.XSUCD == AF0FW01.AF0FWAS1) /* EQ previous XSU*/
        AF0FW01.AF0FWDSL = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0FW01.AF0FWAS1 = AF0FM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUCD = AF0FM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0FW01.AF0FWDSL = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0FM001.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S32 "; /* Process number*/
  set AF0FM001.XSUCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  AF0FW01.AF0FWDSL = " "; /* Space out save desc*/
  AF0FM001.XSUABRV = " "; /* Space out desc*/


end // end AF0FS32

// Edit category cd
Function AF0FS33()


  if (AF0FM001.XPCCD == " ") /* Map fld spaces*/
    AF0FW01.AF0FWCAT = " "; /* Space out save area*/
    AF0FW01.AF0FWDPC = " "; /* Space out save desc*/
    AF0FM001.XPCABRV = " "; /* Space out map desc*/
    return; /* Return to calling routine*/
  end

  AF0FW01.AF0FWCAT = AF0FM001.XPCCD; /* save to wk map storage*/


  if (AF0FM001.XPCCD in XPCTBL.XPCCD)

    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      if (AF0FM001.XPCCD == AF0FW01.AF0FWAP1) /* EQ previous XPC*/
        AF0FW01.AF0FWDPC = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0FW01.AF0FWAP1 = AF0FM001.XPCCD; /* save to wk storage*/
        XP1REC.XPCCD = AF0FM001.XPCCD; /* save to wk storage*/
        XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0FW01.AF0FWDPC = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0FM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S33 "; /* Process number*/
  set AF0FM001.XPCCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 35; /* indicate error message*/
  AF0FW01.AF0FWDPC = " "; /* Space out save desc*/
  AF0FM001.XPCABRV = " "; /* Space out map desc*/



end // end AF0FS33

// Edit Gender/Age cd
Function AF0FS34()


  if (AF0FM001.XGACD == " ") /* Map fld eq spaces*/
    AF0FW01.AF0FWGA = " "; /* Space out save fld*/
    AF0FW01.AF0FWDGA = " "; /* Space out save desc*/
    AF0FM001.XGAABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  AF0FW01.AF0FWGA = AF0FM001.XGACD; /* save to wk map storage*/


  if (AF0FM001.XGACD in XGATBL.XGACD)

    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XGATBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/

      if (AF0FM001.XGACD == AF0FW01.AF0FWAG1) /* EQ previous XGA*/
        AF0FW01.AF0FWDGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        return; /* Exit to calling process*/
      else
        AF0FW01.AF0FWAG1 = AF0FM001.XGACD; /* save to wk storage*/
        XP1REC.XGACD = AF0FM001.XGACD; /* save to wk storage*/
        XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0FW01.AF0FWDGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0FM001.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S34 "; /* Process number*/
  set AF0FM001.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  AF0FW01.AF0FWDGA = " "; /* Space out save desc*/
  AF0FM001.XGAABRV = " "; /* Space out map desc*/



end // end AF0FS34

// Edit season yr
Function AF0FS35()


  AF0FW01.AF0FWXSY = 0; /* initialize xsnyr wk area*/
  AF0FW01.AF0FWXSY = AF0FM001.XSNYR; /* move to wk area*/

   /* --------------- y2k out begin ---------------*/
   /* AF0FW01.AF0FWXSY = AF0FW01.AF0FWXSY + 1900;/* move century*/
   /* --------------- y2k out end -----------------*/
   /* --------------- y2k in  begin ---------------*/
  if (AF0FW01.AF0FWXSY > 65)
    AF0FW01.AF0FWXS1 = 19;
  else
    AF0FW01.AF0FWXS1 = 20;
  end
   /* --------------- y2k in end ------------------*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (AF0FW01.AF0FWXSY == YSNTBL.XSNYR[AFWIDX5]
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      /* --------------- y2k out begin ---------------*/
      /* MOVE AF0FM001.XSNYR TO XP1REC.XSNYR;/* save to working storage*/
      /* --------------- y2k out end -----------------*/
      /* --------------- y2k in  begin ---------------*/
      XP1REC.XSNYR = AF0FW01.AF0FWXSY; /* save to working storage*/
      /* --------------- y2k in end ------------------*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S35 "; /* Process number*/
  set AF0FM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/

end // end AF0FS35

// Edit season cd
Function AF0FS36()


  if (AF0FM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0FM001.XSECD; /* save to working storage*/

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S36 "; /* Process number*/
    set AF0FM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/

  end


  AF0FW01.AF0FWXSS = " "; /* Initialize wk area*/
  AF0FW01.AF0FWXYR = +0; /* Initialize wk area*/

  AF0FW01.AF0FWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  AF0FW01.AF0FWXYR = XP1REC.XSNYR; /* Format wk area*/

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (AF0FW01.AF0FWXSA == YSNTBL.XSNABRV[AFWIDX5]
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S36 "; /* Process number*/
  set AF0FM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/

end // end AF0FS36

// Edit forecaster cd
Function AF0FS37()


  if (AF0FM001.XXXUSER == " ") /* Eq spaces*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    AF0FW01.AF0FWUSR = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0FW01.AF0FWUSR = AF0FM001.XXXUSER; /* Move to wk map storage*/


   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0FM001.XXXUSER; /* Forecaster id*/


   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0FM001.XXXUSER cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S37 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      XP1REC.XXXUSER = " "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AF0FW01.AF0FWCIN = "Y"; /* Data contention detected*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.XXXUSER = AF0FM001.XXXUSER; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end
      end
    end
  end

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0FS37"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0FM001.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AF0FS37

// Edit map detail lines
Function AF0FS38()
   /* ------------------------------------------------------------*/
   /* Edit Map Detail Lines: Note that validation of map items*/
     /* is on a page-by-page basis. This ensures that all items*/
     /* are valid before any scrolling command is processed.*/
   /* ------------------------------------------------------------*/


  if (AF0FW02.AF0FWIDX == 0) /* No color records exist*/

    return; /* Return to calling process*/

  end


  AFWREC.AFWIXM = 1; /* set loop index*/


   /* *===============================**/
   /* *  Store/Validate Changed Data  **/
   /* *===============================**/

  while (AFWREC.AFWIXM <= AF0FW02.AF0FWIDX) /* Process whole page*/

                        /* (Size Pcent)*/
    if (AF0FM001.AF2SZPCT[AFWIXM] != AF0FW02.AF0FWSZP[AFWIXM])
      AF0FW02.AF0FWSZP[AFWIXM] = AF0FM001.AF2SZPCT[AFWIXM];
      AF0FW02.AF0FWCHG = "Y"; /* Changes entered*/
    end

    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/

  end



end // end AF0FS38

// Edit history product line
Function AF0FS39()

  if (AF0FM001.AF0FMHLC == " ") /* Map fld spaces*/
    AF0FW01.AF0FMHLC = " ";
    return;
  else
    AF0FW01.AF0FMHLC = AF0FM001.AF0FMHLC;
    if (AF0FM001.AF0FMHLC in XPLTBL.XPLCD)
      if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      else
        AFWREC.AFWPRCSN = "S39 "; /* Process number*/
        set AF0FM001.AF0FMHLC cursor, bold;
        XP1REC.XP1MNO = 81; /* indicate error message*/
      end
    else
      AFWREC.AFWPRCSN = "S39 "; /* Process number*/
      set AF0FM001.AF0FMHLC cursor, bold;
      XP1REC.XP1MNO = 81; /* indicate error message*/
    end
  end

end // end AF0FS39

// Edit history product type code
Function AF0FS40()

  if (AF0FM001.AF0FMHTC == " ") /* Map fld spaces*/
    AF0FW01.AF0FMHTC = " ";
  else
    AF0FW01.AF0FMHTC = AF0FM001.AF0FMHTC;
    if (AF0FM001.AF0FMHTC in XPRTBL.XPRCD)
    else
      AFWREC.AFWPRCSN = "S40 "; /* Process number*/
      set AF0FM001.AF0FMHTC cursor, bold;
      XP1REC.XP1MNO = 80; /* indicate error message*/
    end
  end

end // end AF0FS40

// Edit division cd
Function AF0FS41()

  if (AF0FM001.XDVCD == " ") /* Map fld spaces*/
    AF0FW01.XDVCD = " ";
    AF0FW01.XDVABRV = " ";
    AF0FM001.XDVABRV = " ";
  end

  AF0FW01.XDVCD = AF0FM001.XDVCD;

  if (AF0FW01.XDVCD in XDVTBL.XDVCD)
    AF0FW01.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
  else
    AFWREC.AFWPRCSN = "S41 "; /* Process number*/
    set AF0FM001.XDVCD cursor, bold;
    XP1REC.XP1MNO = 29; /* indicate error message*/
  end


end // end AF0FS41

// Edit product type code
Function AF0FS42()

  if (AF0FM001.XPRCD == " ") /* Map fld spaces*/
    AF0FW01.XPRCD = " ";
    AF0FW01.XPRABRV = " ";
    AF0FM001.XPRABRV = " ";
    return;
  end

  AF0FW01.XPRCD = AF0FM001.XPRCD;

  if (AF0FW01.XPRCD in XPRTBL.XPRCD)
    if (AF0FM001.XPRCD == AF0FW01.AF0FWAPR)
      AF0FW01.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
      return;
    else
      AF0FW01.AF0FWAPR = AF0FM001.XPRCD;
      XP1REC.XPRCD = AF0FM001.XPRCD;
      XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
      AF0FW01.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
      AF0FM001.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
      return;
    end
  else
    AFWREC.AFWPRCSN = "S42 "; /* Process number*/
    set AF0FM001.XPRCD cursor, bold;
    XP1REC.XP1MNO = 80; /* indicate error message*/
  end


end // end AF0FS42

// edit product line code
Function AF0FS43()

  if (AF0FM001.XPLCD == " ") /* Map fld spaces*/
    AF0FW01.XPLCD = " ";
    AF0FW01.XPLABRV = " ";
    AF0FM001.XPLABRV = " ";
    return;
  end

  AF0FW01.XPLCD = AF0FM001.XPLCD;

  if (AF0FW01.XPLCD in XPLTBL.XPLCD)
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      if (AF0FM001.XPLCD == AF0FW01.AF0FWACD)
        AF0FW01.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        return;
      else
        AF0FW01.AF0FWACD = AF0FM001.XPLCD;
        XP1REC.XPLCD = AF0FM001.XPLCD;
        XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        AF0FW01.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        AF0FM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        return;
      end
    else
      AFWREC.AFWPRCSN = "S43 "; /* Process number*/
      set AF0FM001.XPLCD cursor, bold;
      XP1REC.XP1MNO = 81; /* indicate error message*/
    end
  else
    AFWREC.AFWPRCSN = "S43 "; /* Process number*/
    set AF0FM001.XPLCD cursor, bold;
    XP1REC.XP1MNO = 81; /* indicate error message*/
  end

end // end AF0FS43

// edit life cycle codes
Function AF0FS44()

  AFWREC.AFWIDX1 = 1; /* Reset loop index*/
  while (AFWREC.AFWIDX1 <= 4) /* Edit life cycle codes*/
    if (AF0FM001.XLCCD[AFWIDX1] == " ") /* Map fld spaces*/
      AF0FW01.XLCCD[AFWIDX1] = " ";
    else
      AF0FW01.XLCCD[AFWIDX1] = AF0FM001.XLCCD[AFWIDX1];
      if (AF0FM001.XLCCD[AFWIDX1] in XLCTBL.XLCCD)
      else
        AFWREC.AFWPRCSN = "S44 "; /* Process number*/
        set AF0FM001.XLCCD[AFWIDX1] cursor, bold;
        XP1REC.XP1MNO = 79; /* indicate error message*/
      end
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
  end

end // end AF0FS44

// Count nbr styles w/ life cycle
Function AF0FS45()
  set PG2REC empty;
  set AF5REC empty;
  set AF0FW04 empty;
  PG2REC.XLCCD1 = AF0FM001.XLCCD[1];
  PG2REC.XLCCD2 = AF0FM001.XLCCD[2];
  PG2REC.XLCCD3 = AF0FM001.XLCCD[3];
  PG2REC.XLCCD4 = AF0FM001.XLCCD[4];
  PG2REC.XGPCD = "03";
  PG2REC.XDMCD = AF2REC.XDMCD;
  PG2REC.SY1STNBR = AF2REC.SY1STNBR;
  AF5REC.XSECD = AF2REC.XSECD;
  AF5REC.XSNYR = AF2REC.XSNYR;
  AF0FW04.AF0FWIOT = "SC";

  try
    call "AF1610" (AF0FW04, SQLCA, PG2REC, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0FW01.AF0FWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S45 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "QUALIFY ON LIFE CYCLE   ";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "JOIN    "; /* Data base name*/
  TA1REC.TA1TBLVU = "AFSYCLR "; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0FM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0FS45

// Edit history divison code
Function AF0FS46()

  if (AF0FM001.AF0FMHDC == " ") /* Map fld spaces*/
    AF0FW01.AF0FMHDC = " ";
  else
    AF0FW01.AF0FMHDC = AF0FM001.AF0FMHDC;
    if (AF0FM001.AF0FMHDC in XDVTBL.XDVCD)
    else
      AFWREC.AFWPRCSN = "S45 "; /* Process number*/
      set AF0FM001.AF0FMHDC cursor, bold;
      XP1REC.XP1MNO = 29; /* indicate error message*/
    end
  end

end // end AF0FS46

// Edit Owner Group cd
Function AF0FS47()

  if (AF0FM001.AF0FMXOW == " ") /* Map fld spaces*/
    AF0FW01.XOWCD = "**";
    AF0FW01.XOWABRV = "ALL";
    XP1REC.XOWCD = "  ";
    XP1REC.XOWABRV = "ALL";
    AF0FM001.XOWCD = "  ";
    AF0FM001.XOWABRV = "ALL";
    return;
  end

  if (AF0FM001.AF0FMXOW == "**")
    AF0FW01.XOWCD = "**";
    AF0FW01.XOWABRV = "ALL";
    XP1REC.XOWCD = "**";
    XP1REC.XOWABRV = "ALL";
    AF0FM001.XOWCD = "**";
    AF0FM001.XOWABRV = "ALL";
    return;
  end

  AF0FW01.XWHCD = "51";
  AF0FW01.XOWCD = AF0FM001.AF0FMXOW;

  if (AF0FW01.XOWKEY in XOWTBL.XOWKEY)
    AF0FW01.XOWCD = AF0FM001.AF0FMXOW;
    XP1REC.XOWCD = AF0FM001.AF0FMXOW;
    AF0FW01.AF0FWOGK = AF0FM001.AF0FMXOW;
    AF0FW01.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
    XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
    AF0FM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
    return;
  else
    AFWREC.AFWPRCSN = "S47 "; /* Process number*/
    set AF0FM001.AF0FMXOW cursor, bold;
    AF0FM001.XOWABRV = " ";
    AF0FW01.XOWCD = " ";
    XP1REC.XOWCD = " ";
    AF0FW01.XOWABRV = " ";
    XP1REC.XOWABRV = " ";
    XP1REC.XP1MNO = 121; /* indicate error message*/
  end


end // end AF0FS47

// Edit historical owner group cd
Function AF0FS48()

  if (AF0FM001.AF0FMHOG == " ") /* Field eq spaces*/
    AF0FW01.AF0FMHOG = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  AF0FW01.AF0FMHOG = AF0FM001.AF0FMHOG; /* save to wk map storage*/
  AF0FW01.AF0FWHSE = "51"; /* whse 51 only*/

  if (AF0FW01.AF0FWHKY in XOWTBL.XOWKEY)
    AF0FM001.AF0FMHOG = XOWTBL.XOWCD[sysVar.arrayIndex]; /* To map*/
    return; /* Return to calling process*/
  end

  AFWREC.AFWPRCSN = "S48 "; /* Process number*/
  set AF0FM001.AF0FMHOG cursor, bold; /* highlight field*/
  AF0FW01.AF0FMHOG = " "; /* space out save field*/
  XP1REC.XP1MNO = 121; /* indicate error message*/

end // end AF0FS48

// Edit blank only indicator
Function AF0FS49()

  if (AF0FM001.AF0FM-BLNK-FL == " ")
    AF0FM001.AF0FM-BLNK-FL = "N";
    AF0FW01.AF0FW-BLNK-FL = "N";
    return;
  end

  if (AF0FM001.AF0FM-BLNK-FL != "Y"
   && AF0FM001.AF0FM-BLNK-FL != "N")

                   /* (field in error)*/
    AF0FW01.AF0FW-BLNK-FL = " "; /* Space out wk storage*/
    AFWREC.AFWPRCSN = "S49 "; /* Process number*/
    set AF0FM001.AF0FM-BLNK-FL cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 39; /* indicate error message*/

  else

                   /* (field is valid)*/
    AF0FW01.AF0FW-BLNK-FL = AF0FM001.AF0FM-BLNK-FL;


  end


end // end AF0FS49

// Get Latest As-Of-Date
Function AF0FS50()
   /* ------------------------------------------------------------*/
   /* Select row from DACAST.VDEMANX01*/
   /* ------------------------------------------------------------*/

  AF0FS16();

   /* ------------------------------------------------------------*/
   /* Process row*/
   /* ------------------------------------------------------------*/

  AF0FW01.AF0FWDTW = 0;

  AFWREC.AFWIDX3 = 1;

  while (AFWREC.AFWIDX3 <= 35)

    if (AFFREC.AFFASOST[AFWIDX3] == "A"
     && AFFREC.XSECD[AFWIDX3] == AFHREC.XSECD
     && AFFREC.XSNYR[AFWIDX3] == AFHREC.XSNYR
     && AFFREC.AFFASODT[AFWIDX3] > AF0FW01.AF0FWDTW)
      AF0FW01.AF0FWDTW = AFFREC.AFFASODT[AFWIDX3];
    end

    if (AFFREC.AFFASOST[AFWIDX3] == " "
     && AFFREC.XSECD[AFWIDX3] == " "
     && AFFREC.XSNYR[AFWIDX3] == 0
     && AFFREC.AFFASODT[AFWIDX3] == 0)
      AFWIDX3 = 36;
    else
      AFWIDX3 = AFWIDX3 + 1;
    end

  end

  AFHREC.AFFASODT = AF0FW01.AF0FWDTW;

end // end AF0FS50

// Get Latest As-Of-Date for Dtl
Function AF0FS52()
   /* ------------------------------------------------------------*/
   /* Select row from DACAST.VDMANX01*/
   /* ------------------------------------------------------------*/

  AF0FS16();

   /* ------------------------------------------------------------*/
   /* Process row*/
   /* ------------------------------------------------------------*/

  AF0FW01.AF0FWDTW = 0;

  AFWREC.AFWIDX3 = 1;

  while (AFWREC.AFWIDX3 <= 35)

    if (AFFREC.AFFASOST[AFWIDX3] == "A"
     && AFFREC.XSECD[AFWIDX3] == AFGREC.XSECD
     && AFFREC.XSNYR[AFWIDX3] == AFGREC.XSNYR
     && AFFREC.AFFASODT[AFWIDX3] > AF0FW01.AF0FWDTW)
      AF0FW01.AF0FWDTW = AFFREC.AFFASODT[AFWIDX3];
    end

    if (AFFREC.AFFASOST[AFWIDX3] == " "
     && AFFREC.XSECD[AFWIDX3] == " "
     && AFFREC.XSNYR[AFWIDX3] == 0
     && AFFREC.AFFASODT[AFWIDX3] == 0)
      AFWREC.AFWIDX3 = 36;
    else
      AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1;
    end

  end

  AFGREC.AFFASODT = AF0FW01.AF0FWDTW;

end // end AF0FS52

//*** RECORD=AF0FW01 ****
// Working Storage (1) for AF0E - Program-defined Variables
// ***********************
Record AF0FW01 type basicRecord
  10 AFWSWR AFWSWR ; 
  10 SY1STNBR SY1STNBR ; 
  10 AF0FWST1 AF0FWST1 ; 
  10 AF0FWST2 AF0FWST2 ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 XDMCD XDMCD ; 
  10 XDVCD XDVCD ; 
  10 AF0FMHDC AF0FMHDC ; 
  10 XDVABRV XDVABRV ; 
  10 XXXSTAT XXXSTAT ; 
  10 AF0FWCAT AF0FWCAT ; 
  10 AF0FWCIN AF0FWCIN ; 
  10 AF0FWCMS AF0FWCMS ; 
  10 AF0FWCNF AF0FWCNF ; 
  10 AF0FWCPT AF0FWCPT ; 
  10 AF0FWCSY AF0FWCSY ; 
  10 AF0FWDGA AF0FWDGA ; 
  10 AF0FWDPC AF0FWDPC ; 
  10 AF0FWDTW AF0FWDTW ; 
    15 AF0FWDTC AF0FWDTC ; 
    15 AF0FWDTY AF0FWDTY ; 
    15 AF0FWDTM AF0FWDTM ; 
    15 AF0FWDTD AF0FWDTD ; 
  10 AF0FWDSL AF0FWDSL ; 
  10 AF0FWDX1 AF0FWDX1 ; 
  10 AF0FWDX2 AF0FWDX2 ; 
  10 AF0FWEDW AF0FWEDW ; 
    15 AF0FWEDM AF0FWEDM ; 
    15 AF0FWEDD AF0FWEDD ; 
    15 AF0FWEDY AF0FWEDY ; 
  10 AF0FWGA AF0FWGA ; 
  10 AF0FWHAC AF0FWHAC ; 
  10 AF0FWHCC AF0FWHCC [3] ; 
  10 AF0FWHDS AF0FWHDS ; 
  10 AF0FWHGC AF0FWHGC ; 
  10 AF0FWHGA AF0FWHGA ; 
  10 AF0FWHSC AF0FWHSC ; 
  10 AF0FWHSA AF0FWHSA ; 
  10 AF0FWHST AF0FWHST ; 
  10 AF0FWHSY AF0FWHSY ; 
    15 AF0FWHSH AF0FWHSH ; 
    15 AF0FWHYH AF0FWHYH ; 
  10 AF0FWHS1 AF0FWHS1 ; 
  10 AF0FWHY1 AF0FWHY1 ; 
  10 AF0FWHD1 AF0FWHD1 ; 
  10 AF0FWHS2 AF0FWHS2 ; 
  10 AF0FWHY2 AF0FWHY2 ; 
  10 AF0FWHD2 AF0FWHD2 ; 
  10 AF0FWHPC AF0FWHPC ; 
  10 AF0FWLCT AF0FWLCT ; 
  10 AF0FWLIM AF0FWLIM ; 
  10 AF0FWLIN AF0FWLIN ; 
  10 AF0FWMNO AF0FWMNO ; 
  10 AF0FWOP1 AF0FWOP1 ; 
  10 AF0FWOP2 AF0FWOP2 ; 
  10 AF0FWPCT AF0FWPCT ; 
  10 AF0FWPGL AF0FWPGL ; 
  10 AF0FWPGM AF0FWPGM ; 
  10 AF0FWPGV AF0FWPGV ; 
  10 AF0FWPND AF0FWPND ; 
  10 AF0FWPSA AF0FWPSA ; 
  10 AF0FWSIL AF0FWSIL ; 
  10 AF0FWSSE AF0FWSSE ; 
  10 AF0FWSSY AF0FWSSY ; 
  10 AF0FWSAS AF0FWSAS ; 
  10 AF0FWSGA AF0FWSGA ; 
  10 AF0FWSPC AF0FWSPC ; 
  10 AF0FWSQU AF0FWSQU ; 
  10 AF0FWSSC AF0FWSSC ; 
  10 AF0FWSSL AF0FWSSL ; 
  10 AF0FWSTS AF0FWSTS ; 
  10 AF0FWSTY AF0FWSTY ; 
  10 AF0FWOWK AF0FWOWK ; 
    15 AF0FWHCD AF0FWHCD ; 
    15 AF0FWOWG AF0FWOWG ; 
  10 AF0FWDOG AF0FWDOG ; 
  10 AF0FWSYK AF0FWSYK ; 
  10 AF0FWOGK AF0FWOGK ; 
  10 AF0FWUSR AF0FWUSR ; 
  10 AF0FWVLF AF0FWVLF ; 
  10 AF0FWVLI AF0FWVLI ; 
  10 AF0FWXGA AF0FWXGA ; 
  10 AF0FWAG1 AF0FWAG1 ; 
  10 AF0FWXPC AF0FWXPC ; 
  10 AF0FWAP1 AF0FWAP1 ; 
  10 AF0FWXSU AF0FWXSU ; 
  10 AF0FWAS1 AF0FWAS1 ; 
  10 AF0FWXSY AF0FWXSY ; 
    15 AF0FWXS1 AF0FWXS1 ; 
    15 AF0FWXS2 AF0FWXS2 ; 
  10 AF0FWXSA AF0FWXSA ; 
    15 AF0FWXSS AF0FWXSS ; 
    15 AF0FWXYR AF0FWXYR ; 
  10 AF0FWXST AF0FWXST ; 
  10 AF0FMHLC AF0FMHLC ; 
  10 XPLCD XPLCD ; 
  10 XPLABRV XPLABRV ; 
  10 AF0FWXCD AF0FWXCD ; 
  10 AF0FWACD AF0FWACD ; 
  10 AF0FMHTC AF0FMHTC ; 
  10 XPRCD XPRCD ; 
  10 XPRABRV XPRABRV ; 
  10 AF0FWXPR AF0FWXPR ; 
  10 AF0FWAPR AF0FWAPR ; 
  10 XLCCD XLCCD [4] ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 XOWABRV XOWABRV ; 
  10 AF0FWHKY AF0FWHKY ; 
    15 AF0FWHSE AF0FWHSE ; 
    15 AF0FMHOG AF0FMHOG ; 
  10 AF0FW-BLNK-FL AF0FW-BLNK-FL ; 
end // end AF0FW01

//*** RECORD=AF0FW02 ****
// Working Storage (2) for AF0E - Record Work Areas
// ***********************
Record AF0FW02 type basicRecord
  10 AF0FWINP AF0FWINP ; 
  10 AF0FWIDX AF0FWIDX ; 
  10 XDMCD XDMCD ; 
  10 XOWCD XOWCD ; 
  10 XDVCD XDVCD ; 
  10 XSECD XSECD ; 
  10 XSNYR XSNYR ; 
  10 PG1FCTCD PG1FCTCD ; 
  10 XGACD XGACD ; 
  10 XPCCD XPCCD ; 
  10 XSUCD XSUCD ; 
  10 SY4SZSCL SY4SZSCL ; 
  10 AF2FSTST AF2FSTST ; 
  10 AF2FSTDL AF2FSTDL ; 
  10 AFMFSTQT AFMFSTQT ; 
  10 AF2FSTDT AF2FSTDT ; 
  10 AF-MKT-STY-DLR AF-MKT-STY-DLR ; 
  10 AF-MKT-STY-DLR-DT AF-MKT-STY-DLR-DT ; 
  10 AF-MUL-FCTR AF-MUL-FCTR ; 
  10 AF-MUL-FCTR-FL AF-MUL-FCTR-FL ; 
  10 AF2SPCDT AF2SPCDT ; 
  10 AF2SFODT AF2SFODT ; 
  10 AF0FWCHG AF0FWCHG ; 
  10 AF0FWSZI AF0FWSZI [10] ; 
  10 AF0FWSZN AF0FWSZN [10] ; 
  10 AF0FWSZP AF0FWSZP [10] ; 
  10 AF0FWSPW AF0FWSPW [10] ; 
  10 AF0FWSZ AF0FWSZ [10] ; 
  10 AF0FWSZD AF0FWSZD [10] ; 
  10 AF0FWSPE AF0FWSPE [10] ; 
  10 ZZZCHGCT ZZZCHGCT ; 
  10 XPRCD XPRCD ; 
  10 XPLCD XPLCD ; 
end // end AF0FW02

//*** RECORD=AF0FW03 ****
// Working Storage (2) for AF0E - Record Work Areas
// ***********************
Record AF0FW03 type basicRecord
  10 AF0FWHM1 AF0FWHM1 ; 
  10 AF0FWHM2 AF0FWHM2 ; 
  10 AF0FWHX1 AF0FWHX1 ; 
  10 AF0FWHX2 AF0FWHX2 ; 
  10 AF0FWTOT AF0FWTOT ; 
  10 AF0FWT1 AF0FWT1 ; 
  10 AF0FWHT1 AF0FWHT1 ; 
  10 AF0FWHT2 AF0FWHT2 ; 
  10 AF0FWSW1 AF0FWSW1 [40] ; 
  10 AF0FWQW1 AF0FWQW1 [40] ; 
  10 AF0FWSW2 AF0FWSW2 [40] ; 
  10 AF0FWQW2 AF0FWQW2 [40] ; 
  10 AF0FWSZ1 AF0FWSZ1 [40] ; 
  10 AF0FWSD1 AF0FWSD1 [40] ; 
  10 AF0FWQT1 AF0FWQT1 [40] ; 
  10 AF0FWPC1 AF0FWPC1 [40] ; 
  10 AF0FWSZ2 AF0FWSZ2 [40] ; 
  10 AF0FWSD2 AF0FWSD2 [40] ; 
  10 AF0FWQT2 AF0FWQT2 [40] ; 
  10 AF0FWPC2 AF0FWPC2 [40] ; 
end // end AF0FW03

//*** RECORD=AF0FW04 ****
// Working Storage (4) for call to af1610
// ***********************
Record AF0FW04 type basicRecord
  10 AF0FWIOT AF0FWIOT ; 
  10 AF0FWCNT AF0FWCNT ; 
end // end AF0FW04

// Historical Division Code
DataItem AF0FMHDC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Product Line Code
DataItem AF0FMHLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical select owner group
DataItem AF0FMHOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Product Type
DataItem AF0FMHTC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Blank only indicator
DataItem AF0FW-BLNK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start line code
DataItem AF0FWACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XGACD
DataItem AF0FWAG1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XPCCD
DataItem AF0FWAP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start product type
DataItem AF0FWAPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start XSUCD
DataItem AF0FWAS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start category save
DataItem AF0FWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change/valid indicator
DataItem AF0FWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data contention indicator
DataItem AF0FWCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// G/A,CAT,SIL Comb. flag
DataItem AF0FWCMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update confirm flag
DataItem AF0FWCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i/o counter
DataItem AF0FWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total color pcent
DataItem AF0FWCPT decimal(7,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current style counter
DataItem AF0FWCSY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start gender/age desc
DataItem AF0FWDGA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XOWABRV
DataItem AF0FWDOG char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start category desc
DataItem AF0FWDPC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette desc
DataItem AF0FWDSL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal date century
DataItem AF0FWDTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date dd
DataItem AF0FWDTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date mm
DataItem AF0FWDTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date wk area
DataItem AF0FWDTW num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal date yy
DataItem AF0FWDTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist alpha as-of-date 1
DataItem AF0FWDX1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist alpha as-of-date 2
DataItem AF0FWDX2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// External date dd
DataItem AF0FWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date mm
DataItem AF0FWEDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date wk area
DataItem AF0FWEDW num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// External date yy
DataItem AF0FWEDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start gender/age save
DataItem AF0FWGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical pending actvty ind
DataItem AF0FWHAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Category cd
DataItem AF0FWHCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start whse code
DataItem AF0FWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical As-Of-Date (1)
DataItem AF0FWHD1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical As-Of-Date (2)
DataItem AF0FWHD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Data Select Ind
DataItem AF0FWHDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Gender/Age abrv
DataItem AF0FWHGA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Gender/Age cd
DataItem AF0FWHGC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Owner Group Tbl key
DataItem AF0FWHKY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last size selected ptr -1
DataItem AF0FWHM1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last size selected ptr -2
DataItem AF0FWHM2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Pcent value
DataItem AF0FWHPC num(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Season cd (1)
DataItem AF0FWHS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Season cd (2)
DataItem AF0FWHS2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Silhouette abrv
DataItem AF0FWHSA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Silhouette cd
DataItem AF0FWHSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical warehouse code
DataItem AF0FWHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist season cd col hdg
DataItem AF0FWHSH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical Style no.
DataItem AF0FWHST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical col hdgs wk area
DataItem AF0FWHSY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical selection 1 total
DataItem AF0FWHT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 2 total
DataItem AF0FWHT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array Max value(Index)- 1
DataItem AF0FWHX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array Max value(Index)- 2
DataItem AF0FWHX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Season yr (1)
DataItem AF0FWHY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Season yr (2)
DataItem AF0FWHY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist season yr col hdg
DataItem AF0FWHYH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array Max value(Index)
DataItem AF0FWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formatted input indicator
DataItem AF0FWINP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i/o task parm
DataItem AF0FWIOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record retrieve loop ctr
DataItem AF0FWLCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style read ctr loop limit
DataItem AF0FWLIM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row select loop mode ind
DataItem AF0FWLIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error message wk area
DataItem AF0FWMNO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Owner group select wk key
DataItem AF0FWOGK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist data sel option val ind 1
DataItem AF0FWOP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist data sel option val ind 2
DataItem AF0FWOP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start owner group save
DataItem AF0FWOWG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start owner group key
DataItem AF0FWOWK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical selection 1 pcts
DataItem AF0FWPC1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 2 pcts
DataItem AF0FWPC2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Adjusted percent value
DataItem AF0FWPCT num(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page size limit
DataItem AF0FWPGL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max page count
DataItem AF0FWPGM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current page count
DataItem AF0FWPGV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0FWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page start address
DataItem AF0FWPSA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 1 qtys
DataItem AF0FWQT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 2 qtys
DataItem AF0FWQT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 1 wk qty
DataItem AF0FWQW1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 2 wk qty
DataItem AF0FWQW2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk historical as-of-date
DataItem AF0FWSAS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical selection 1 sz desc
DataItem AF0FWSD1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical selection 2 sz desc
DataItem AF0FWSD2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XGACD
DataItem AF0FWSGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette save
DataItem AF0FWSIL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XPCCD
DataItem AF0FWSPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst size pcent wk array
DataItem AF0FWSPE decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forecasted size percent
DataItem AF0FWSPW decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style qualify (2) flag
DataItem AF0FWSQU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XSECD
DataItem AF0FWSSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk historical season cd
DataItem AF0FWSSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved original XSUCD
DataItem AF0FWSSL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk historical season yr
DataItem AF0FWSSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alternate style number 1
DataItem AF0FWST1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate style number 2
DataItem AF0FWST2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start status save
DataItem AF0FWSTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style save
DataItem AF0FWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical selection 1 sel ind
DataItem AF0FWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical selection 2 sel ind
DataItem AF0FWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style select wk key
DataItem AF0FWSYK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id wk array
DataItem AF0FWSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 1 sizes
DataItem AF0FWSZ1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical selection 2 sizes
DataItem AF0FWSZ2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size description wk array
DataItem AF0FWSZD char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size id
DataItem AF0FWSZI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size description
DataItem AF0FWSZN char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// forecasted size percent
DataItem AF0FWSZP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical wk total
DataItem AF0FWT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical Qty grand total
DataItem AF0FWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start xxxuser save
DataItem AF0FWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid select fld ind
DataItem AF0FWVLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Validation request ind
DataItem AF0FWVLI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start line code
DataItem AF0FWXCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XGACD
DataItem AF0FWXGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XPCCD
DataItem AF0FWXPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start product type
DataItem AF0FWXPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc
DataItem AF0FWXS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem AF0FWXS2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk abrv
DataItem AF0FWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0FWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style row qualfication ind
DataItem AF0FWXST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal start XSUCD
DataItem AF0FWXSU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0FWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0FWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

