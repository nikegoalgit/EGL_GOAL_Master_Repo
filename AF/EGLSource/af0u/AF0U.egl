package af0u;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPAF001;
import corpcom3.XPAF100;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDVTBL;
import corpx1.XGATBL;
import corpx1.XGPCD;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XSNBDT;
import corpx2.XSNXDT;
import corpy2.YSNTBL;
import pg.common.PG1REC;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1STNBR;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0U ****
// This application will provide booking status information
// pertaining to the selection key/s specified by the user.
// Data by Style and/or Silhouette and/or Category and/or
// Gender Age within a given Season and Season Year are
// displayed by month by classification (Booked and Shipped)
// and may be shown either in units or dollars depending on
// user option. Percentages which utilize the data displayed
// as basis are also computed to provide additional tools for
// analysis.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 04/22/90   JRAMOS   New application.
// 04/03/91   JMCLAU   modify heading and application to
//                     provide the capability of selecting
//                     the next product type, gender age,
//                     product line, category or silhoutte.
// 09/03/93   tdodso   4.1 conversion.
// 03-08-94   LREIN    March table change
// 02-15-95   kj       xsn->ysn
// *********************
Program AF0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0UW01 AF0UW01; // record
  AF0UW02 AF0UW02; // record
  AF0UW03 AF0UW03; // record
  AF0UW04 AF0UW04; // record
  AF0UW05 AF0UW05; // record
  AF2REC AF2REC; // record
  AF9REC AF9REC; // record
  AFCREC AFCREC; // record
  AFDREC AFDREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use AF0UM.AF0UM001,  // forms
      AF0UM.AF0UM005,
      AF0UM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/
    ;
    set AF0UW01 empty; /* Initialize working storage*/
    set AF0UW02 empty; /* Initialize working storage*/
    set AF0UW03 empty; /* Initialize working storage*/
    move 0 to AF0UWSDA[1] for all; /* Initialize working storage*/
    move 0 to AF0UWSBK[1] for all; /* Initialize working storage*/
    move 0 to AF0UWSSH[1] for all; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set AF9REC empty; /* Initialize working storage*/
    set AFCREC empty; /* Initialize working storage*/
    set AFDREC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set PG3REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set YSMREC empty; /* Initialize working storage*/
    set AF0UM001 initial; /* Initialize map output area*/
    set AF0UM005 initial; /* Initialize map output area*/
    ;
    ;
                   /* (initialize style row loop limit ctr)*/
    ;
    AF0UW01.AF0UWLIM = +10000; /* stop loop every 10000 rows readl*/
    ;
    ;
    ;
                   /* (Define Map Environment)*/
    ;
    AFWREC.AFWAPPL = "AF0U"; /* Initialize appl ID for this appl*/
    ;
    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process name*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    AF0UW01.AF0UWCRY = "B"; /* carryover flag option*/
    ;
    ;
                      /* (Set TSQ Record Size)*/
    ;
    AFWREC.AFWTSL = +570; /* Current TSQ size*/
    ;
    ;
                      /* (Set Map Item Values)*/
    ;
    AF0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/
    AF0UW01.AF0UWDSO = "U"; /* Set display option as units*/
    AF0UM001.AF0UMDSO = "UNITS  "; /* Display option*/
    XP1REC.XDVCD = "01"; /* Default division cd*/
    XP1REC.XDVABRV = "NIKE D"; /* Default division abrv*/
    AF0UM001.XOWCD = "00";
    ;
                      /* (Process Passed Items)*/
    ;
    AF0UM001.PG1FCTCD = XP1REC.XXXUSER; /* Fcster code to map*/
    AF0UM001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    XP1REC.XP1XSNYR = XP1REC.XSNYR; /* Redefine Season yr*/
    AF0UM001.XSNYR = XP1REC.XP1XSNYY; /* Season yr to map*/
    AF0UM001.XPRCD = XP1REC.XPRCD; /* Product type cd to map*/
    AF0UM001.XGACD = XP1REC.XGACD; /* Gender age cd to map*/
    AF0UM001.XPLCD = XP1REC.XPLCD; /* Product line cd to map*/
    AF0UM001.XPCCD = XP1REC.XPCCD; /* Category cd to map*/
    AF0UM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd to map*/
    AF0UM001.XDVCD = XP1REC.XDVCD; /* Division cd to map*/
    AF0UM001.SY1STNBR = XP1REC.SY1STNBR; /* Style cd to map*/
    ;
    ;
    XP1REC.XXXUSER = " "; /* clear fcster code*/
    XP1REC.XSECD = " "; /* clear season cd*/
    XP1REC.XSNYR = 0; /* clear season yr*/
    XP1REC.XP1XSNYR = 0; /* clear season yr*/
    XP1REC.XPRCD = " "; /* clear product type cd*/
    XP1REC.XPLCD = " "; /* clear product line cd*/
    XP1REC.XGACD = " "; /* clear gender age cd*/
    XP1REC.XPCCD = " "; /* clear category cd*/
    XP1REC.XSUCD = " "; /* clear silhouette cd*/
    XP1REC.SY1STNBR = " "; /* clear style cd*/
    XP1REC.XGADESC = " "; /* clear xga desc*/
    XP1REC.XPCDESC = " "; /* clear xpc desc*/
    XP1REC.XSUDESC = " "; /* clear xsu desc*/
    ;
                      /* (Converse Main Process)*/
    ;
    goto AF0U001; /* Main Process*/
    ;
    ;
    AF0U001: AF0U001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Apparel Fcst/Buy Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0U001; /* Converse Apparel Fcst/Buy Prototype*/
    ;
    ;
  end // end main
end // end AF0U

// Choose which map to display
Function AF0U001()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed. If an invalid map request is detected*/
   /* error is indicated and control is passed to the Master Menu*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.AFWMAP == "1") /* Map 1 (AF0UM001) request*/
    AF0U100(); /* Process Map 1*/
  else
    if (AFWREC.AFWMAP == "2") /* Map 2 (AF0UM005) request*/
      AF0U200(); /* Process Map 2*/
    else
                  /* (Map Number Invalid)*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "AF0U001 "; /* Process name*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = AFWREC.AFWMAP; /* Map name*/
      TAEREC.TAEDESC1 = "MAP NUMBER IS INVALID";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error rtn*/
      ;
    end
  end
  ;
  ;
end // end AF0U001

// Process Map 1 (AF0UM001)
Function AF0U100()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF0U110(); /* Obtain the data to display*/
  ;
  AF0U120(); /* Format and display the map*/
  ;
  AF0U130(); /* Check attention identifier*/
  ;
  AF0U140(); /* Reset fields to normal intensity*/
  ;
  AF0U150(); /* Verify the entered data*/
  ;
  AF0U160(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0U100

// Obtain data to display
Function AF0U110()
  ;
   /* ------------------------------------------------------------*/
   /* If newa was not requested, return to the previous process.*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Check for User Response and process appropriate data base.*/
   /* If no errors found from data retrieve, indicate that the*/
     /* request for data was completed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || converseVar.eventKey is pa2       /* pa2 pressed*/
   || converseVar.eventKey is pf7       /* pf7 pressed*/
   || converseVar.eventKey is pf8       /* pf8 pressed*/
   || converseVar.eventKey is pf10      /* pf10 pressed*/
   || AFWREC.AFWFIRST == " ")           /* pf10 pressed*/
    return; /* Return to previous process*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Purge TSQ data set.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0U122(); /* Purge any temporary storage*/
  ;
  set AF0UW02 empty;
  set AF0UW03 empty;
  set AF0UW04 empty;
  set AF0UW05 empty;
  ;
  ;
  if (AF9REC.AF9TYP99 == "Y") /* Last G/A,CAT,SIL Comb.*/
    AFWREC.AFWSWR = "Y"; /* Force new selection*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
     /* Check for Data Contention Condition*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0UW01.AF0UWCIN == "Y") /* Data contention present*/
    ;
    AFWREC.AFWSWR = "Y"; /* Do new select cycle using old keys*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
     /* Set Select Using Old G/A, CAT & SIL Combination*/
     /* ... And Obtain Next Style from Current Set*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.AFWSWR == "N") /* No new keys entered*/
    ;
    if (converseVar.eventKey is pf15 /* pf15 (Next product type requested*/
     || converseVar.eventKey is pf16 /* pf16 (Next G/A requested*/
     || converseVar.eventKey is pf17 /* pf17 (Next product line requested*/
     || converseVar.eventKey is pf18 /* pf18 (Next category requested*/
     || converseVar.eventKey is pf19) /* pf19 (Next silhouette requested*/
      ;
      AF0UW01.AF0UWCMS = "Y"; /* Get next G/A,Cat,Sil Comb.*/
      AF0UW01.AF0UWSYK = " "; /* reset style to select*/
      AF0UW01.AF0UWOGK = " "; /* reset style to select*/
      AF0UW01.AF0UWCSY = 1; /* set style ctr to get 1st style*/
      ;
    else
      if (converseVar.eventKey is pf10) /* display map 1*/
        ;
        AF0UW01.AF0UWSYK = XP1REC.SY1STNBR; /* To sty work key*/
        AF0UW01.AF0UWOGK = XP1REC.XOWCD; /* To OG work key*/
        AF0UW01.AF0UWCSY = 1;
                                   /* Set style ctr to get 1st style*/
        ;
      else
        AF0UW01.AF0UWSYK = XP1REC.SY1STNBR; /* To sty work key*/
        AF0UW01.AF0UWOGK = XP1REC.XOWCD; /* To OG work key*/
       /* MOVE 2 AF0UW01.AF0UWCSY;   /* Set style ctr to get next style*/
        AF0UW01.AF0UWCSY = AF0UW01.AF0UWCSY + 1;
                              /* Set style ctr to get next style*/
      end
    end
  else
    ;
    /* ------------------------------------------------------------*/
      /* set select using new keys,*/
      /* ... and obtain first style of new set*/
    /* ------------------------------------------------------------*/
    ;
    if (AFWREC.AFWSWR == "Y") /* NEW KEYS ENTERED*/
      ;
      AF0UW01.AF0UWCMS = "Y"; /* get new G/A,CAT,SIL COMB.*/
      AFWREC.AFWIDX3 = 0;
      set AF9REC empty; /* clear work record*/
      ;
      AF0UW01.AF0UWCSY = 1; /* set style ctr to get 1st style*/
      AF0UW01.AF0UWLCT = 0; /* reset style loop ctr 1st style*/
      ;
      if (AF0UM001.SY1STNBR != " ") /* particular style entered*/
        AF0UW01.AF0UWSYK = AF0UW01.SY1STNBR; /* to sty work key*/
      else
        if (converseVar.eventKey is pf20) /**/
          AF0UW01.AF0UWSYK = XP1REC.SY1STNBR; /* To sty work key*/
        else
          AF0UW01.AF0UWSYK = " "; /* to sty work key*/
        end
      end
      if (AF0UM001.XOWCD != " ") /* particular OG    entered*/
        AF0UW01.AF0UWOGK = AF0UW01.AF0UWXOW; /* to OG  work key*/
      else
        if (converseVar.eventKey is pf20) /**/
          AF0UW01.AF0UWOGK = XP1REC.XOWCD; /* To OG work key*/
        else
          AF0UW01.AF0UWOGK = " "; /* to OG  work key*/
        end
      end
    end
  end
  ;
  ;
  AF0UW01.AF0UWCIN = " "; /* reset contention indicator*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
    /* OBTAIN GENDER/AGE, CATEGORY AND SILHOUETTE COMBINATION*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0UW01.AF0UWCMS != " ") /* OBTAIN NEXT OR NEW COMB.*/
    ;
    AF0UW01.AF0UWCMS = " "; /* RESET INDICATOR*/
    ;
    AF0U11C(); /* OBTAIN NEW G/A: CAT & SIL COMB*/
    ;
  end
   /* ------------------------------------------------------------*/
             /* Obtain Data from DACAST.VAFSTY01*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and process all summary data for the style.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* no errors*/
    AF0U111(); /* Select set DACAST.VAFSTY01 data*/
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    AFWREC.AFWIDX5 = 0; /* reset loop ctrd*/
    while (AFWREC.AFWIDX5 < AF0UW01.AF0UWCSY) /* until next style ret*/
      ;
      AF0U112(); /* Fetch DACAST.VAFSTY01 row*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Style row found*/
      ;
      AF0US12(); /* Close style cursor*/
      ;
      AF0UW01.AF0UWTBK = 0; /* Initialize total bookings fld*/
      AF0UW01.AF0UWMXP = 0; /* Initialize max xot ptr*/
      move " " to AF0UW01.AF0UWXOT[1] for all; /* Initialize XOT summ cd table*/
      set AF0UW04 empty; /* Clear XOT summary data record*/
      set AF0UW05 empty; /* Clear XOT summary data description*/
      ;
                   /* (Process Bookings Data)*/
      ;
      AF0U113(); /* Select set DACAST.VDMANO01 data*/
      ;
      if (converseVar.validationMsgNum == 0) /* No errors found*/
        ;
        AFWREC.AFWSWC = "N"; /* Reset EOF indicator*/
        while (AFWREC.AFWSWC == "N") /* Process DACAST.VDMANO01 row/s*/
          ;
          AF0U114(); /* Calc bookings data*/
          ;
          if (converseVar.validationMsgNum != 0) /* Errors found*/
            AFWREC.AFWSWC = "Y"; /* Force loop end*/
          end
          ;
        end
        ;
        AF0U115(); /* Close DACAST.VDMANO01 cursor*/
        ;
      end
      ;
                   /* (Process Shipping Data)*/
      ;
      AF0U116(); /* Select set DACAST.VDMANC01 data*/
      ;
      if (converseVar.validationMsgNum == 0) /* No errors found*/
        ;
        AFWREC.AFWSWC = "N"; /* Reset EOF indicator*/
        while (AFWREC.AFWSWC == "N") /* Process DACAST.VDMANC01 row/s*/
          ;
          AF0U117(); /* Calc shipping data*/
          ;
          if (converseVar.validationMsgNum != 0) /* Errors found*/
            AFWREC.AFWSWC = "Y"; /* Force loop end*/
          end
          ;
        end
      end
      ;
      AF0U118(); /* Close DACAST.VDMANC01 cursor*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        ;
        AF0US12(); /* Close style cursor*/
        AF9REC.AF9TYP99 = "Y"; /* force end of current combination*/
        AF9REC.AF9GAG99 = "Y"; /* force end of current combination*/
        AF9REC.AF9LIN99 = "Y"; /* force end of current combination*/
        AF9REC.AF9CAT99 = "Y"; /* force end of current combination*/
        AF9REC.AF9SIL99 = "Y"; /* force end of current combination*/
        ;
      end
      ;
    end
    ;
          /* (Format Summary Data into TSQ Map wk areas)*/
    ;
    set AF0UW02 empty; /* Clear map work area*/
    set AF0UW03 empty; /* Clear grand totals area*/
    AFWREC.AFWIXM = 0; /* Set store pointer*/
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    ;
    while (AFWREC.AFWIDX1 <= AF0UW01.AF0UWMXP) /* Until all XOTs processed*/
      ;
      AF0U119(); /* Format XOT summary data*/
      ;
      if (AFWREC.AFWIXM == 4) /* Page is full*/
        AF0U126(); /* Add page to TSQ*/
      end
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
    if (AFWREC.AFWIXM < 4 /* Last page not full*/
     && AFWREC.AFWIXM > 0) /* and last page not written to TSQ*/
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIXM + 1; /* Set start address*/
      while (AFWREC.AFWIDX1 <= 4) /* Process rem lines*/
        AF0UW02.AF0UWLID[AFWIDX1] = "*"; /* No data for line grp*/
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      end
      ;
      AF0U126(); /* Add page to temporary storage*/
      ;
    end
    ;
    ;
    AF0US13(); /* Calculate grand totals/pcts*/
    ;
  end
  ;
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check Obtain Data Status. INACTIVATE ALL LOOP CONTROLS    **/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ;
    AF0UW01.AF0UWLCT = 0; /* Reset style loop ctr*/
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
    AFWREC.AFWTSP = 1; /* Set TSQ page to 1*/
    ;
  end
  ;
  ;
end // end AF0U110

// Select set style
Function AF0U111()
  ;
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set AF2REC empty; /* Reset rec work area*/
  ;
  AF2REC.XDVCD = XP1REC.XDVCD; /* division cd*/
  AF2REC.XPRCD = XP1REC.XPRCD; /* product type cd*/
  AF2REC.XGACD = XP1REC.XGACD; /* XGA cd*/
  AF2REC.XPLCD = XP1REC.XPLCD; /* product line cd*/
  ;
  if (AF0UW01.AF0UWXOW > " ")
    AF2REC.XOWCD = AF0UW01.AF0UWXOW;
  else
    AF2REC.XOWCD = "**";
  end
  ;
  if (XP1REC.XPCCD != "00")
    AF2REC.XPCCD = XP1REC.XPCCD; /* XPC cd*/
  end
  ;
  AF2REC.XSUCD = XP1REC.XSUCD; /* XSU cd*/
  ;
  AF2REC.SY1STNBR = AF0UW01.AF0UWSYK; /* Style no.*/
  ;
  AF2REC.SY4SZSCL = "**"; /* Size scale cd*/
  ;
  AF2REC.AF2FSTST = "*"; /* Forecast status*/
  ;
  if (XP1REC.XXXUSER == " ") /* No user specified*/
    AF2REC.PG1FCTCD = "**"; /* Get all users*/
  else
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
  end
  ;
  AF0UW01.AF0UWXSY = 0; /* Reset xsnyr wk area*/
  AF0UW01.AF0UWXSY = XP1REC.XSNYR; /* Move to wk area*/
   /* AF0UW01.AF0UWXSY = AF0UW01.AF0UWXSY + 1900; Add century*/
  AF2REC.XSNYR = AF0UW01.AF0UWXSY; /* XSE yr*/
  ;
  AF2REC.XSECD = XP1REC.XSECD; /* XSE cd*/
  ;
  ;
  ;
   /* *====================================**/
   /* *  Obtain Data from DACAST.VAFSTY01  **/
   /* *====================================**/
  ;
  try
    call "IO3510" ("SS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0UW01.AF0UWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "111 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AF0U111

// Fetch DACAST.VAFSTY01 row
Function AF0U112()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until the next style to*/
     /* be processed is retrieved (current style + 1). If done*/
     /* for the first time after a new select has been made, it*/
     /* will retrieve the first style in the set --*/
     /* (current style + 0).*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/
  ;
  try
    call "IO3510" ("SN", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  ;
   /* ------------------------------------------------------------*/
   /* If call sucessful, store style forecast data;*/
   /* Increment style tracking(loop) counter*/
   /* If no more records, EZEFLO to start of applic to select*/
      /* next G/A, CAT, and SIL combination*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
                   /* (Check Loop Ctr Value)*/
    ;
    AF0UW01.AF0UWLCT = AF0UW01.AF0UWLCT + 1; /* Add to style ctr*/
    ;
    if (AF0UW01.AF0UWLCT > AF0UW01.AF0UWLIM) /* Loop limit exceeded*/
      converseLib.validationFailed(44); /* Indicate loop exceeded*/
      AFWREC.AFWIDX5 = +9999; /* Force loop termination.*/
      return; /* Exit to display map*/
    end
    ;
                   /* (Loop Ctr Within Limits)*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      ;
      /* *********** Added for IOMOD Changes  *****************/
      XP1REC.XPRCD = AF2REC.XPRCD; /* Update XPR Comb. code*/
      XP1REC.XGACD = AF2REC.XGACD; /* Update XGA Comb. code*/
      XP1REC.XPLCD = AF2REC.XPLCD; /* Update XPL Comb. code*/
      XP1REC.XPCCD = AF2REC.XPCCD; /* Update XPC Comb. code*/
      XP1REC.XSUCD = AF2REC.XSUCD; /* Update XSU Comb. code*/
      XP1REC.XOWCD = AF2REC.XOWCD; /* Update XOW Comb. code*/
      ;
      XP1REC.XOWCD = AF2REC.XOWCD; /* Update XOW*/
      ;
      if (XP1REC.XPRCD in XPRTBL.XPRCD) /* Check code in table*/
        AF9REC.AF9TPIXM = sysVar.arrayIndex; /* Update XGA Comb. index*/
        AF0UW01.AF0UWXPR = XPRTBL.XPRCD[sysVar.arrayIndex]; /* Save internal start*/
        XP1REC.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
                                   /* Save to wk storage*/
        XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
                                   /* Save to wk storage*/
      end
      ;
      if (XP1REC.XGACD in XGATBL.XGACD) /* Check code in table*/
        AF9REC.AF9GAIXM = sysVar.arrayIndex; /* Update XGA Comb. index*/
        AF0UW01.AF0UWXGA = XGATBL.XGACD[sysVar.arrayIndex]; /* Save internal start*/
        XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
                                   /* Save to wk storage*/
        XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
                                   /* Save to wk storage*/
      end
      ;
      if (XP1REC.XPLCD in XPLTBL.XPLCD) /* Check code in table*/
        AF9REC.AF9LNIXM = sysVar.arrayIndex; /* Update XPL Comb. index*/
        AF0UW01.AF0UWXPL = XPLTBL.XPLCD[sysVar.arrayIndex]; /* Save internal start*/
        XP1REC.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex];
                                   /* Save to wk storage*/
        XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
                                   /* Save to wk storage*/
      end
      ;
      if (XP1REC.XPCCD in XPCTBL.XPCCD) /* Check code in table*/
        AF9REC.AF9PCIXM = sysVar.arrayIndex; /* Update XPC Comb. index*/
        AF0UW01.AF0UWXPC = XPCTBL.XPCCD[sysVar.arrayIndex]; /* Save internal start*/
        XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex];
                                   /* Save to wk storage*/
        XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
                                   /* Save to wk storage*/
      end
      ;
      if (XP1REC.XSUCD in XSUTBL.XSUCD) /* Check code in table*/
        AF9REC.AF9SUIXM = sysVar.arrayIndex; /* Update XSU Comb. index*/
        AF0UW01.AF0UWXSU = XSUTBL.XSUCD[sysVar.arrayIndex]; /* Save internal start*/
        XP1REC.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex];
                                   /* Save to wk storage*/
        XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
                                   /* Save to wk storage*/
      end
      /* ******************************************************/
      ;
      ;
      if (XP1REC.PG1FCTCD == " " /* Get all forecasters*/
       || AF2REC.PG1FCTCD == XP1REC.PG1FCTCD) /* Check forecaster cd*/
        ;
        if (AF2REC.AF2FSTST == "A" /* Style status active*/
         || AF2REC.AF2FSTST == "N") /* or Style status new*/
          ;
          AF0UW01.AF0UWSQU = " "; /* Reset style qual code*/
          AF0US17(); /* CHECK IF STYLE QUALIFIED FOR*/
                                   /* PROCESSING*/
          ;
          if (AF2REC.SY1STNBR == AF0UW01.AF0UWSYK
           && XP1REC.XOWCD < AF0UW01.AF0UWOGK)
            AF0UW01.AF0UWSQU = " ";
          end
          ;
          if (AF0UW01.AF0UWSQU == "Y") /* Style qualified*/
            ;
            XP1REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
            ;
            AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Add to style ctr*/
            ;
            return; /* Loop through (Style selected)*/
            ;
          else
            ;
           /* IF AF0UW01.SY1STNBR NE ' ';/* style does not qualify*/
             /* AND AF0UW01.SY1STNBR = AF2REC.SY1STNBR;*/
             /* MOVE +9999 TO AFWREC.AFWIDX5;/* Force loop termination.*/
           /* END;*/
            ;
            return; /* Loop through (Bypass style row)*/
            ;
          end
          ;
        else
          ;
          return; /* Loop through (Bypass Style row)*/
          ;
        end
        ;
      else
        ;
        return; /* Loop through (Bypass Style row)*/
        ;
      end
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
        ;
        AFWREC.AFWIDX5 = +9999; /* Terminate loop.*/
        ;
        return; /* Return to calling process*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0UW01.AF0UWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "112 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
  ;
end // end AF0U112

// select set DACAST.VDMANO01
Function AF0U113()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AFCREC empty; /* Clear record work area*/
  ;
  AFCREC.SY1STNBR = AF2REC.SY1STNBR; /* Style*/
  AFCREC.SY2CLRID = "***"; /* Color*/
  AFCREC.XDMCD = AF2REC.XDMCD; /* Dimension cd*/
  AFCREC.XDVCD = AF2REC.XDVCD; /* Division cd*/
  AFCREC.XOWCD = AF2REC.XOWCD; /* Owner Group*/
  AFCREC.XSECD = AF2REC.XSECD; /* Season cd*/
  AFCREC.XSNYR = AF2REC.XSNYR; /* Season yr*/
  ;
  ;
  ;
   /* *===========================**/
   /* *  Access DACAST.VDMANO01   **/
   /* *===========================**/
  ;
  try
    call "IO3920" ("SS", SQLCA, AFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "113 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANO01"; /* Table view name*/
  TA1REC.TA1TBLKE = AFCREC.AFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0U113

// process DACAST.VDMANO01 rows
Function AF0U114()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* Process fetched row.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VDMANO01 **/
   /* *=========================**/
  ;
  try
    call "IO3920" ("SN", SQLCA, AFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      ;
      /* ---------------------------------------------------*/
            /* (Calculate Bookings Figures)*/
      /* ---------------------------------------------------*/
      ;
      AF0UW01.AF0UWQT1 = 0; /* Initialize qty sum wk*/
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      ;
      while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
                      /* (Sum-up qty flds)*/
        AF0UW01.AF0UWQT1 = AF0UW01.AF0UWQT1 + AFCREC.AFCOPDMD[AFWIDX1];
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
                   /* (Calculate Bookings)*/
      if (AF0UW01.AF0UWDSO == "U") /* Units option*/
                    /* (next sentence)*/
      else
        AF0UW01.AF0UWQT1 = mathLib.round(AF0UW01.AF0UWQT1 * AFCREC.AF-AVG-UNT-PRC-AMT, -mathLib.decimals(AF0UW01.AF0UWQT1));
      end
      ;
      /* ---------------------------------------------------*/
          /* (Accumulate Bookings into XOT Summary array)*/
      /* ---------------------------------------------------*/
      ;
      AF0UW01.AF0UWTBK = AF0UW01.AF0UWTBK + AF0UW01.AF0UWQT1; /* Tot bkngs*/
      ;
      AF0UW01.AF0UWAFD = AFCREC.AFBNDTPR; /* To AF month wk area*/
      AF0UW01.AF0UWYSC = AFCREC.YSMSUMCD; /* XOT sum cd arg*/
      AF0US02(); /* Get Sum cd address*/
      ;
      AF0UW05.AF0UWSMX = AF0UW04.AF0UWSDA[AF0UWYSI]; /* To desc*/
      ;
                  /* (Check for early or late season)*/
      if (AF0UW01.AF0UWAFD < AF0UW01.AF0UW-FIRST-MO) /* Early season*/
        AF0UW05.AF0UWSBK[1] = AF0UW05.AF0UWSBK[1] + AF0UW01.AF0UWQT1;
        AF0UW04.AF0UWSDA[AF0UWYSI] = AF0UW05.AF0UWSMX;
        return; /* Return to calling process*/
      else
        if (AF0UW01.AF0UWAFD > 
        AF0UW01.AF0UW-LAST-MO) /* Late*/
          AF0UW05.AF0UWSBK[AF0UW-LATE-MO] = AF0UW05.AF0UWSBK[AF0UW-LATE-MO]           + AF0UW01.AF0UWQT1;
          AF0UW04.AF0UWSDA[AF0UWYSI] = AF0UW05.AF0UWSMX;
          return; /* Return to calling process*/
        end
      end
      ;
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= AF0UW-MONTH-MAX) /* Process by Season month*/
        AFWREC.AFWIDX2 = AFWREC.AFWIDX1 + 1;
        if (AF0UW01.AF0UWAFM == AF0UW01.AF0UW-MO-TBLE[AFWIDX1]) /* Sn month*/
          AF0UW01.AF0UWQT2 = AF0UW05.AF0UWSBK[AFWIDX2];
          AF0UW01.AF0UWQT2 = AF0UW01.AF0UWQT2 + AF0UW01.AF0UWQT1;
          AF0UW05.AF0UWSBK[AFWIDX2] = AF0UW01.AF0UWQT2;
          AFWREC.AFWIDX1 = 99; /* Terminate loop*/
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      AF0UW04.AF0UWSDA[AF0UWYSI] = AF0UW05.AF0UWSMX;
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "114 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANO01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0U114

// close DACAST.VDMANO01 cursor
Function AF0U115()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VDMANO01 **/
   /* *=========================**/
  ;
  try
    call "IO3920" ("CS", SQLCA, AFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VDMANO01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0U115

// select DACAST.VDMANO01 rows
Function AF0U116()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AFDREC empty; /* Clear record work area*/
  ;
  AFDREC.SY1STNBR = AF2REC.SY1STNBR; /* Style*/
  AFDREC.SY2CLRID = "***"; /* Color*/
  AFDREC.XDMCD = AF2REC.XDMCD; /* Dimension cd*/
  AFDREC.XDVCD = AF2REC.XDVCD; /* Division cd*/
  AFDREC.XOWCD = AF2REC.XOWCD; /* Owner Group*/
  AFDREC.XSECD = AF2REC.XSECD; /* Season cd*/
  AFDREC.XSNYR = AF2REC.XSNYR; /* Season yr*/
  ;
  ;
  ;
   /* *===========================**/
   /* *  Access DACAST.VDMANC01   **/
   /* *===========================**/
  ;
  try
    call "IO3930" ("SS", SQLCA, AFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "116 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANC01"; /* Table view name*/
  TA1REC.TA1TBLKE = AFDREC.AFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0U116

// process DACAST.VDMANO01 rows
Function AF0U117()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* Process fetched row.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VDMANC01 **/
   /* *=========================**/
  ;
  try
    call "IO3930" ("SN", SQLCA, AFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      ;
      /* ---------------------------------------------------*/
            /* (Calculate Shipping Figures)*/
      /* ---------------------------------------------------*/
      ;
      AF0UW01.AF0UWQT1 = 0; /* Initialize qty sum wk*/
      ;
      if (AF0UW01.AF0UWDSO == "U") /* Units option*/
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
                        /* (Sum-up qty flds)*/
          AF0UW01.AF0UWQT1 = AF0UW01.AF0UWQT1 + AFDREC.SR1QTYSH[AFWIDX1];
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
          ;
        end
        ;
      else
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
                        /* (Sum-up dollar flds)*/
          AF0UW01.AF0UWQT1 = AF0UW01.AF0UWQT1 + AFDREC.AFDSHPDL[AFWIDX1];
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
          ;
        end
        ;
      end
      ;
      /* ---------------------------------------------------*/
          /* (Accumulate Shipping into XOT Summary array)*/
      /* ---------------------------------------------------*/
      ;
      AF0UW01.AF0UWAFD = AFDREC.AFBNDTPR; /* To AF month wk area*/
      AF0UW01.AF0UWYSC = AFDREC.YSMSUMCD; /* XOT sum cd arg*/
      AF0US02(); /* Get Sum cd address*/
      ;
      AF0UW05.AF0UWSMX = AF0UW04.AF0UWSDA[AF0UWYSI]; /* To desc*/
      ;
                  /* (Check for early or late season)*/
      if (AF0UW01.AF0UWAFD < AF0UW01.AF0UW-FIRST-MO) /* Early season*/
        AF0UW05.AF0UWSSH[1] = AF0UW05.AF0UWSSH[1] + AF0UW01.AF0UWQT1;
        AF0UW04.AF0UWSDA[AF0UWYSI] = AF0UW05.AF0UWSMX;
        return; /* Return to calling process*/
      else
        if (AF0UW01.AF0UWAFD > 
        AF0UW01.AF0UW-LAST-MO) /* late*/
          AF0UW05.AF0UWSSH[AF0UW-LATE-MO] = AF0UW05.AF0UWSSH[AF0UW-LATE-MO] + AF0UW01.AF0UWQT1;
          AF0UW04.AF0UWSDA[AF0UWYSI] = AF0UW05.AF0UWSMX;
          return; /* Return to calling process*/
        end
      end
      ;
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= AF0UW-MONTH-MAX)
                                   /* Process by Season month*/
        AFWREC.AFWIDX2 = AFWREC.AFWIDX1 + 1;
        if (AF0UW01.AF0UWAFM == AF0UW01.AF0UW-MO-TBLE[AFWIDX1])
                                   /* Sn month*/
          AF0UW01.AF0UWQT2 = AF0UW05.AF0UWSSH[AFWIDX2];
          AF0UW01.AF0UWQT2 = AF0UW01.AF0UWQT2 + AF0UW01.AF0UWQT1;
          AF0UW05.AF0UWSSH[AFWIDX2] = AF0UW01.AF0UWQT2;
          AFWREC.AFWIDX1 = 99; /* Terminate loop*/
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      AF0UW04.AF0UWSDA[AF0UWYSI] = AF0UW05.AF0UWSMX;
      ;
      ;
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AFWREC.AFWSWC = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "117 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANC01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0U117

// close DACAST.VDMANO01 cursor
Function AF0U118()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VDMANC01 **/
   /* *=========================**/
  ;
  try
    call "IO3930" ("CS", SQLCA, AFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "118 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VDMANC01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0U118

// Format XOT Summary Data
Function AF0U119()
  ;
   /* ------------------------------------------------------------*/
   /* Move map elements into display wk area.*/
   /* Calculate all line/grand totals.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Map store index*/
  ;
  AF0UW02.AF0UWLID[AFWIXM] = " "; /* Indicate valid line*/
  ;
  ;
              /* (Determine XOT desc)*/
  if (AF0UW01.AF0UWXOT[AFWIDX1] == "10") /* Futures 1*/
    AF0UW02.AF0UWXOD[AFWIXM] = "F1"; /* Desc*/
  else
    if (AF0UW01.AF0UWXOT[AFWIDX1] == "20") /* Futures 2*/
      AF0UW02.AF0UWXOD[AFWIXM] = "F2"; /* Desc*/
    else
      if (AF0UW01.AF0UWXOT[AFWIDX1] == "30") /* Futures 3*/
        AF0UW02.AF0UWXOD[AFWIXM] = "F3"; /* Desc*/
      else
        if (AF0UW01.AF0UWXOT[AFWIDX1] == "40") /* Futures 4*/
          AF0UW02.AF0UWXOD[AFWIXM] = "F4"; /* Desc*/
        else
          if (AF0UW01.AF0UWXOT[AFWIDX1] == "50") /* Futures 5*/
            AF0UW02.AF0UWXOD[AFWIXM] = "PR"; /* Desc*/
          else
            if (AF0UW01.AF0UWXOT[AFWIDX1] == "60") /* Futures 6*/
              AF0UW02.AF0UWXOD[AFWIXM] = "SM"; /* Desc*/
            end
          end
        end
      end
    end
  end
  ;
  ;
       /* (Format XOT summary figures, compute totals)*/
  AF0UW05.AF0UWSMX = AF0UW04.AF0UWSDA[AFWIDX1]; /* To desc*/
  ;
  AFWREC.AFWIDX2 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX2 <= 12) /* Process all season months*/
    ;
                  /* (Accumulate Grand totals)*/
    AF0UW01.AF0UWQT3 = AF0UW03.AF0UWTB[AFWIDX2]; /* Grand total*/
    AF0UW01.AF0UWQT3 = AF0UW01.AF0UWQT3 + AF0UW05.AF0UWSBK[AFWIDX2];
    AF0UW03.AF0UWTB[AFWIDX2] = AF0UW01.AF0UWQT3; /* (Bookings)*/
    ;
    AF0UW01.AF0UWQT4 = AF0UW03.AF0UWTS[AFWIDX2]; /* Grand total*/
    AF0UW01.AF0UWQT4 = AF0UW01.AF0UWQT4 + AF0UW05.AF0UWSSH[AFWIDX2];
    AF0UW03.AF0UWTS[AFWIDX2] = AF0UW01.AF0UWQT4; /* (Shipped)*/
    ;
       /* (Move Summary Figures to Map wk, Accum line totals)*/
    ;
    if (AFWREC.AFWIXM == 1) /* Line group 1*/
      ;
      AF0UW02.AF0UWB1[AFWIDX2] = AF0UW05.AF0UWSBK[AFWIDX2];
      AF0UW02.AF0UWS1[AFWIDX2] = AF0UW05.AF0UWSSH[AFWIDX2];
      ;
      AF0UW01.AF0UWQT1 = AF0UW02.AF0UWBT[1]; /* Line total*/
      AF0UW01.AF0UWQT1 = AF0UW01.AF0UWQT1 + AF0UW05.AF0UWSBK[AFWIDX2];
      AF0UW02.AF0UWBT[1] = AF0UW01.AF0UWQT1;
      ;
      AF0UW01.AF0UWQT2 = AF0UW02.AF0UWST[1]; /* Line total*/
      AF0UW01.AF0UWQT2 = AF0UW01.AF0UWQT2 + AF0UW05.AF0UWSSH[AFWIDX2];
      AF0UW02.AF0UWST[1] = AF0UW01.AF0UWQT2;
      ;
    else
      ;
      if (AFWREC.AFWIXM == 2) /* Line group 2*/
        ;
        AF0UW02.AF0UWB2[AFWIDX2] = AF0UW05.AF0UWSBK[AFWIDX2];
        AF0UW02.AF0UWS2[AFWIDX2] = AF0UW05.AF0UWSSH[AFWIDX2];
        ;
        AF0UW01.AF0UWQT1 = AF0UW02.AF0UWBT[2]; /* Line total*/
        AF0UW01.AF0UWQT1 = AF0UW01.AF0UWQT1 + AF0UW05.AF0UWSBK[AFWIDX2];
        AF0UW02.AF0UWBT[2] = AF0UW01.AF0UWQT1;
        ;
        AF0UW01.AF0UWQT2 = AF0UW02.AF0UWST[2]; /* Line total*/
        AF0UW01.AF0UWQT2 = AF0UW01.AF0UWQT2 + AF0UW05.AF0UWSSH[AFWIDX2];
        AF0UW02.AF0UWST[2] = AF0UW01.AF0UWQT2;
        ;
      else
        ;
        if (AFWREC.AFWIXM == 3) /* Line group 3*/
          ;
          AF0UW02.AF0UWB3[AFWIDX2] = AF0UW05.AF0UWSBK[AFWIDX2];
          AF0UW02.AF0UWS3[AFWIDX2] = AF0UW05.AF0UWSSH[AFWIDX2];
          ;
          AF0UW01.AF0UWQT1 = AF0UW02.AF0UWBT[3]; /* Line total*/
          AF0UW01.AF0UWQT1 = AF0UW01.AF0UWQT1 + AF0UW05.AF0UWSBK[AFWIDX2];
          AF0UW02.AF0UWBT[3] = AF0UW01.AF0UWQT1;
          ;
          AF0UW01.AF0UWQT2 = AF0UW02.AF0UWST[3]; /* Line total*/
          AF0UW01.AF0UWQT2 = AF0UW01.AF0UWQT2 + AF0UW05.AF0UWSSH[AFWIDX2];
          AF0UW02.AF0UWST[3] = AF0UW01.AF0UWQT2;
          ;
        else
          ;
          if (AFWREC.AFWIXM == 4) /* Line group 4*/
            ;
            AF0UW02.AF0UWB4[AFWIDX2] = AF0UW05.AF0UWSBK[AFWIDX2];
            AF0UW02.AF0UWS4[AFWIDX2] = AF0UW05.AF0UWSSH[AFWIDX2];
            ;
            AF0UW01.AF0UWQT1 = AF0UW02.AF0UWBT[4]; /* Line total*/
            AF0UW01.AF0UWQT1 = AF0UW01.AF0UWQT1 + AF0UW05.AF0UWSBK[AFWIDX2];
            AF0UW02.AF0UWBT[4] = AF0UW01.AF0UWQT1;
            ;
            AF0UW01.AF0UWQT2 = AF0UW02.AF0UWST[4]; /* Line total*/
            AF0UW01.AF0UWQT2 = AF0UW01.AF0UWQT2 + AF0UW05.AF0UWSSH[AFWIDX2];
            AF0UW02.AF0UWST[4] = AF0UW01.AF0UWQT2;
            ;
          else
            ;
            if (AFWREC.AFWIXM == 5) /* Line group 5*/
              ;
              AF0UW02.AF0UWB5[AFWIDX2] = AF0UW05.AF0UWSBK[AFWIDX2];
              AF0UW02.AF0UWS5[AFWIDX2] = AF0UW05.AF0UWSSH[AFWIDX2];
              ;
              AF0UW01.AF0UWQT1 = AF0UW02.AF0UWBT[5]; /* Line total*/
              AF0UW01.AF0UWQT1 = AF0UW01.AF0UWQT1 + AF0UW05.AF0UWSBK[AFWIDX2];
              AF0UW02.AF0UWBT[5] = AF0UW01.AF0UWQT1;
              ;
              AF0UW01.AF0UWQT2 = AF0UW02.AF0UWST[5]; /* Line total*/
              AF0UW01.AF0UWQT2 = AF0UW01.AF0UWQT2 + AF0UW05.AF0UWSSH[AFWIDX2];
              AF0UW02.AF0UWST[5] = AF0UW01.AF0UWQT2;
              ;
            end
          end
        end
      end
    end
    ;
    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
    ;
  end
  ;
  ;
end // end AF0U119

// Get next XGA,XPC,XSU comb.
Function AF0U11C()
  ;
   /* ------------------------------------------------------------*/
   /* Get new G/A, CAT and SIL combination*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==========================================**/
   /* *  Obtain Next Combination for Processing  **/
   /* *==========================================**/
  ;
  AF9REC.XPRCD = XP1REC.XPRCD; /* product type cd*/
  AF9REC.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
  AF9REC.XPLCD = XP1REC.XPLCD; /* product line cd*/
  AF9REC.XPCCD = XP1REC.XPCCD; /* Category cd*/
  AF9REC.XSUCD = XP1REC.XSUCD; /* Sihouette cd*/
  ;
  XPAF100(); /* Combination retrieval rtn*/
  ;
  XP1REC.XPRCD = XPRTBL.XPRCD[AF9TPIXM]; /* Save to wk storage*/
  AF0UW01.AF0UWXPR = XPRTBL.XPRCD[AF9TPIXM]; /* Save internal start*/
  XP1REC.XPRDESC = XPRTBL.XPRDESC[AF9TPIXM]; /* Save to wk storage*/
  XP1REC.XPRABRV = XPRTBL.XPRABRV[AF9TPIXM]; /* Save to wk storage*/
  ;
  XP1REC.XGACD = XGATBL.XGACD[AF9GAIXM]; /* Save to wk storage*/
  AF0UW01.AF0UWXGA = XGATBL.XGACD[AF9GAIXM]; /* Save internal start*/
  XP1REC.XGADESC = XGATBL.XGADESC[AF9GAIXM]; /* Save to wk storage*/
  XP1REC.XGAABRV = XGATBL.XGAABRV[AF9GAIXM]; /* Save to wk storage*/
  ;
  XP1REC.XPLCD = XPLTBL.XPLCD[AF9LNIXM]; /* Save to wk storage*/
  AF0UW01.AF0UWXPL = XPLTBL.XPLCD[AF9LNIXM]; /* Save internal start*/
  XP1REC.XPLDESC = XPLTBL.XPLDESC[AF9LNIXM]; /* Save to wk storage*/
  XP1REC.XPLABRV = XPLTBL.XPLABRV[AF9LNIXM]; /* Save to wk storage*/
  ;
  XP1REC.XPCCD = XPCTBL.XPCCD[AF9PCIXM]; /* Save to wk storage*/
  AF0UW01.AF0UWXPC = XPCTBL.XPCCD[AF9PCIXM]; /* Save internal start*/
  XP1REC.XPCDESC = XPCTBL.XPCDESC[AF9PCIXM]; /* Save to wk storage*/
  XP1REC.XPCABRV = XPCTBL.XPCABRV[AF9PCIXM]; /* Save to wk storage*/
  ;
  XP1REC.XSUCD = XSUTBL.XSUCD[AF9SUIXM]; /* Save to wk storage*/
  AF0UW01.AF0UWXSU = XSUTBL.XSUCD[AF9SUIXM]; /* Save internal start*/
  XP1REC.XSUDESC = XSUTBL.XSUDESC[AF9SUIXM]; /* Save to wk storage*/
  XP1REC.XSUABRV = XSUTBL.XSUABRV[AF9SUIXM]; /* Save to wk storage*/
  ;
  ;
  if (AF9REC.AF9TYP99 == "Y") /* Last Gender/Age cd retrieved*/
    ;
    AF0UW01.AF0UWLCT = 0; /* Reset style loop ctr*/
    converseLib.validationFailed(15); /* Indicate no more data*/
    AFWREC.AFWPRCSN = "11C "; /* Process number*/
    ;
    AF0US01(); /* Clear map detail*/
    ;
    set AF0UM001.XSECD cursor; /* Set cursor position*/
    ;
  end
  ;
  ;
end // end AF0U11C

// Format and display the map
Function AF0U120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0UW01.AF0UWPND != "Y" /* No pop-up windows active*/
   && AFWREC.AFWFIRST != " ") /* Not the first time*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error found*/
      AF0U121(); /* Format the data on the map*/
    else
      AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
    end
    ;
  else
    ;
    AF0US01(); /* Clear map detail area*/
    set AF0UM001.XSECD cursor; /* Set cursor position*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0UM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0UM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0UM001 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF0UM001 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF0UM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0UM001.CAITEM; /* Application data*/
  ;
  ;
   /* ----------------------------------------------------------*/
    /* RESET AF9REC FIREST TIME THROUGH INDICATOR*/
   /* ----------------------------------------------------------*/
  ;
  AF9REC.AF9FSTID = "Y"; /* FST TIME INDICATOR TO "Y"*/
  ;
  ;
  ;
end // end AF0U120

// Format data into map
Function AF0U121()
   /* ------------------------------------------------------------*/
   /* Clear Map for New Data to Display.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0UM001 initial; /* Clear map for display*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format Map Header.*/
   /* ------------------------------------------------------------*/
  ;
  AF0UM001.XSECD = XP1REC.XSECD; /* Season cd*/
  XP1REC.XP1XSNYR = XP1REC.XSNYR; /* Redefine Season yr*/
  AF0UM001.XSNYR = XP1REC.XP1XSNYY; /* Season yr*/
  AF0UM001.PG1FCTCD = AF0UW01.AF0UWUSR; /* FORECASTER ID*/
  AF0UM001.XDVCD = AF0UW01.AF0UWDIV; /* start div cd*/
  AF0UM001.XGACD = AF0UW01.AF0UWGA; /* start g/a cd*/
  AF0UM001.XPRCD = AF0UW01.AF0UWTYP; /* start type cd*/
  AF0UM001.XPCCD = AF0UW01.AF0UWCAT; /* start cat cd*/
  AF0UM001.XPLCD = AF0UW01.AF0UWSLN; /* start line cd*/
  AF0UM001.XSUCD = AF0UW01.AF0UWSIL; /* start sil cd*/
  AF0UM001.XOWCD = AF0UW01.AF0UWXOW; /* start xow cd*/
  AF0UM001.SY1STNBR = AF0UW01.AF0UWSTY; /* start style no.*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format Map Header description fields.*/
   /* ------------------------------------------------------------*/
  ;
  AF0UM001.XPRABRV = AF0UW01.AF0UWDPR; /* PRODUCT TYPE ABRV*/
  AF0UM001.XGAABRV = AF0UW01.AF0UWDGA; /* G/A ABRV*/
  AF0UM001.XPLABRV = AF0UW01.AF0UWDPL; /* PRODUCT LINE ABRV*/
  AF0UM001.XPCABRV = AF0UW01.AF0UWDPC; /* CAT DESC*/
  AF0UM001.XSUABRV = AF0UW01.AF0UWDSL; /* SIL DESC*/
  ;
  ;
  if (AF9REC.AF9GAIXM > 0 /* XGA COMBINATION INDEX VALID*/
   && AF9REC.AF9PCIXM > 0 /* XPC COMBINATION INDEX VALID*/
   && AF9REC.AF9SUIXM > 0 /* XSU COMBINATION INDEX VALID*/
   && AF9REC.AF9TPIXM > 0 /* xpr COMBINATION INDEX VALID*/
   && AF9REC.AF9LNIXM > 0) /* xpL COMBINATION INDEX VALID*/
    /* AND AFWREC.AFWIDX3 NE 0       ; data to display*/
    ;
           /* (FORMAT CURRENT COMBINATION FIELDS)*/
    AF0UM001.AF0UDVCD = XP1REC.XDVCD; /* Current Division cd*/
    AF0UM001.AF0UPRCD = XP1REC.XPRCD; /* Current Product type cd*/
    AF0UM001.AF0UGACD = XP1REC.XGACD; /* Current g/A cd*/
    AF0UM001.AF0UPLCD = XP1REC.XPLCD; /* Current Product  Line*/
    AF0UM001.AF0UPCCD = XP1REC.XPCCD; /* Current Category cd*/
    AF0UM001.AF0USUCD = XP1REC.XSUCD; /* Current Silhouette cd*/
    AF0UM001.AF0UMCOG = XP1REC.XOWCD; /* Current Owner Group cd*/
    AF0UM001.AF0USTY = XP1REC.SY1STNBR; /* Current style*/
    ;
  end
  ;
  if (AF0UW01.AF0UWDSO == "U") /* Display option in units*/
    AF0UM001.AF0UMDSO = "UNITS  ";
  else
    AF0UM001.AF0UMDSO = "DOLLARS";
  end
  ;
  if (AF0UW-LATE-MO <= 7)
    set AF0UM-SCROLL-RGT skip, invisible;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check if there are pages to display. If none, set message*/
     /* and redisplay map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set AF0UM001.XSECD cursor; /* Set cursor position*/
  ;
  if (AFWREC.TA5TSQIX == 0) /* No data to display*/
    ;
    AFWREC.AFWPRCSN = "121 "; /* Process number*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Display the Season Month Range.*/
   /* ------------------------------------------------------------*/
  ;
  AF0UM001.AF0UMSDS[1] = "EARLY"; /* Early*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  AFWREC.AFWIDX2 = 2; /* Initialize pos index*/
  while (AFWREC.AFWIDX1 <= 6) /* Get all months for map 1*/
    ;
    if (AF0UW01.AF0UW-MO-DESC[AFWIDX1] > " ")
      AF0UM001.AF0UMSDS[AFWIDX2] = AF0UW01.AF0UW-MO-DESC[AFWIDX1];
    else
      AF0UM001.AF0UMSDS[AFWIDX2] = "LATE";
      AFWREC.AFWIDX1 = 98; /* End Loop*/
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Next position*/
    ;
  end
  ;
  while (AFWREC.AFWIDX2 <= 7) /* Get all months for map 1*/
    set AF0UM001.AF0UMSDS[AFWIDX2] skip, invisible;
    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Next position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/
  ;
  if (XP1REC.SY1STNBR == " ") /* no styles found;*/
    converseLib.validationFailed(15);
    return;
  end
  ;
  AF0U127(); /* Obtain TSQ page*/
  ;
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  while (AFWREC.AFWIXM <= 5) /* Until end of map line groups*/
    ;
    if (AF0UW02.AF0UWLID[AFWIXM] != "*") /* Not Unused line*/
      ;
      if (AFWREC.AFWIXM == 1) /* 1st line group*/
        ;
        AF0UM001.AF0UMXOT[1] = AF0UW02.AF0UWXOD[1]; /* XOT desc*/
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 7)
          if (AFWREC.AFWIDX1 <= AF0UW-LATE-MO)
            AF0UM001.AF0UMB1[AFWIDX1] = AF0UW02.AF0UWB1[AFWIDX1];
            AF0UM001.AF0UMS1[AFWIDX1] = AF0UW02.AF0UWS1[AFWIDX1];
          else
            set AF0UM001.AF0UMB1[AFWIDX1] skip, invisible;
            set AF0UM001.AF0UMS1[AFWIDX1] skip, invisible;
          end
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        end
        ;
        AF0UM001.AF0UMBT[1] = AF0UW02.AF0UWBT[1]; /* Line totals*/
        AF0UM001.AF0UMST[1] = AF0UW02.AF0UWST[1];
        ;
        if (AF0UW01.AF0UWTBK == 0) /* Divide by zero ck*/
          AF0UW02.AF0UWBP[1] = 0;
        else
          AF0UW01.AF0UWPC1 = mathLib.round(AF0UW02.AF0UWBT[1] / AF0UW01.AF0UWTBK, -mathLib.decimals(AF0UW01.AF0UWPC1));
          AF0UW02.AF0UWBP[1] = mathLib.round(AF0UW01.AF0UWPC1 * 100, -mathLib.decimals(AF0UW02.AF0UWBP[1])); /* Line pcent*/
        end
        ;
        AF0UM001.AF0UMBP[1] = AF0UW02.AF0UWBP[1]; /* To map*/
        ;
      else
        ;
        if (AFWREC.AFWIXM == 2) /* 2nd line group*/
          ;
          AF0UM001.AF0UMXOT[2] = AF0UW02.AF0UWXOD[2]; /* XOT desc*/
          ;
          AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
          while (AFWREC.AFWIDX1 <= 7)
            if (AFWREC.AFWIDX1 <= AF0UW-LATE-MO)
              AF0UM001.AF0UMB2[AFWIDX1] = AF0UW02.AF0UWB2[AFWIDX1];
              AF0UM001.AF0UMS2[AFWIDX1] = AF0UW02.AF0UWS2[AFWIDX1];
            else
              set AF0UM001.AF0UMB2[AFWIDX1] skip, invisible;
              set AF0UM001.AF0UMS2[AFWIDX1] skip, invisible;
            end
            AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
          end
          ;
          AF0UM001.AF0UMBT[2] = AF0UW02.AF0UWBT[2];
          AF0UM001.AF0UMST[2] = AF0UW02.AF0UWST[2];
          ;
          ;
          if (AF0UW01.AF0UWTBK == 0) /* Divide by zero ck*/
            AF0UW02.AF0UWBP[2] = 0;
          else
            AF0UW01.AF0UWPC1 = mathLib.round(AF0UW02.AF0UWBT[2] / AF0UW01.AF0UWTBK, -mathLib.decimals(AF0UW01.AF0UWPC1));
            AF0UW02.AF0UWBP[2] = mathLib.round(AF0UW01.AF0UWPC1 * 100, -mathLib.decimals(AF0UW02.AF0UWBP[2])); /* Line pcent*/
          end
          ;
          AF0UM001.AF0UMBP[2] = AF0UW02.AF0UWBP[2]; /* To map*/
          ;
        else
          ;
          if (AFWREC.AFWIXM == 3) /* 3rd line group*/
            ;
            AF0UM001.AF0UMXOT[3] = AF0UW02.AF0UWXOD[3]; /* XOT desc*/
            ;
            AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
            while (AFWREC.AFWIDX1 <= 7)
              if (AFWREC.AFWIDX1 <= AF0UW-LATE-MO)
                AF0UM001.AF0UMB3[AFWIDX1] = AF0UW02.AF0UWB3[AFWIDX1];
                AF0UM001.AF0UMS3[AFWIDX1] = AF0UW02.AF0UWS3[AFWIDX1];
              else
                set AF0UM001.AF0UMB2[AFWIDX1] skip, invisible;
                set AF0UM001.AF0UMS2[AFWIDX1] skip, invisible;
              end
              AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
            end
            ;
            AF0UM001.AF0UMBT[3] = AF0UW02.AF0UWBT[3];
            AF0UM001.AF0UMST[3] = AF0UW02.AF0UWST[3];
            ;
            ;
            if (AF0UW01.AF0UWTBK == 0) /* Divide by zero ck*/
              AF0UW02.AF0UWBP[3] = 0;
            else
              AF0UW01.AF0UWPC1 = mathLib.round(AF0UW02.AF0UWBT[3] / AF0UW01.AF0UWTBK, -mathLib.decimals(AF0UW01.AF0UWPC1));
              AF0UW02.AF0UWBP[3] = mathLib.round(AF0UW01.AF0UWPC1 * 100, -mathLib.decimals(AF0UW02.AF0UWBP[3])); /* Line pcent*/
            end
            ;
            AF0UM001.AF0UMBP[3] = AF0UW02.AF0UWBP[3]; /* To map*/
            ;
          else
            ;
            if (AFWREC.AFWIXM == 4) /* 4th line group*/
              ;
              AF0UM001.AF0UMXOT[4] = AF0UW02.AF0UWXOD[4]; /* XOT desc*/
              ;
              AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
              while (AFWREC.AFWIDX1 <= 7)
                if (AFWREC.AFWIDX1 <= AF0UW-LATE-MO)
                  AF0UM001.AF0UMB4[AFWIDX1] = AF0UW02.AF0UWB4[AFWIDX1];
                  AF0UM001.AF0UMS4[AFWIDX1] = AF0UW02.AF0UWS4[AFWIDX1];
                else
                  set AF0UM001.AF0UMB2[AFWIDX1] skip, invisible;
                  set AF0UM001.AF0UMS2[AFWIDX1] skip, invisible;
                end
                AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
              end
              ;
              AF0UM001.AF0UMBT[4] = AF0UW02.AF0UWBT[4];
              AF0UM001.AF0UMST[4] = AF0UW02.AF0UWST[4];
              ;
              ;
              if (AF0UW01.AF0UWTBK == 0) /* Divide by zero ck*/
                AF0UW02.AF0UWBP[4] = 0;
              else
                AF0UW01.AF0UWPC1 = mathLib.round(AF0UW02.AF0UWBT[4] / AF0UW01.AF0UWTBK, -mathLib.decimals(AF0UW01.AF0UWPC1));
                AF0UW02.AF0UWBP[4] = mathLib.round(AF0UW01.AF0UWPC1 * 100, -mathLib.decimals(AF0UW02.AF0UWBP[4]));
                                   /* Line pcent*/
              end
              ;
              AF0UM001.AF0UMBP[4] = AF0UW02.AF0UWBP[4]; /* To map*/
              ;
            end
          end
        end
      end
      ;
    else
      ;
                /* (Protect,dark map fields)*/
      if (AFWREC.AFWIXM == 1) /* 1st line group*/
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 7)
          set AF0UM001.AF0UMB1[AFWIDX1] skip, invisible;
          set AF0UM001.AF0UMS1[AFWIDX1] skip, invisible;
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        end
        ;
        set AF0UM001.AF0UMBP[1] skip, invisible;
        set AF0UM001.AF0UMBT[1] skip, invisible;
        set AF0UM001.AF0UMST[1] skip, invisible;
        set AF0UM001.AF0UMXTB[1] skip, invisible;
        set AF0UM001.AF0UMXTS[1] skip, invisible;
        ;
      else
        ;
        if (AFWREC.AFWIXM == 2) /* 2nd line group*/
          ;
          AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
          while (AFWREC.AFWIDX1 <= 7)
            set AF0UM001.AF0UMB2[AFWIDX1] skip, invisible;
            set AF0UM001.AF0UMS2[AFWIDX1] skip, invisible;
            AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
          end
          ;
          set AF0UM001.AF0UMBP[2] skip, invisible;
          set AF0UM001.AF0UMBT[2] skip, invisible;
          set AF0UM001.AF0UMST[2] skip, invisible;
          set AF0UM001.AF0UMXTB[2] skip, invisible;
          set AF0UM001.AF0UMXTS[2] skip, invisible;
          ;
        else
          ;
          if (AFWREC.AFWIXM == 3) /* 3rd line group*/
            ;
            AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
            while (AFWREC.AFWIDX1 <= 7)
              set AF0UM001.AF0UMB3[AFWIDX1] skip, invisible;
              set AF0UM001.AF0UMS3[AFWIDX1] skip, invisible;
              AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
            end
            ;
            set AF0UM001.AF0UMBP[3] skip, invisible;
            set AF0UM001.AF0UMBT[3] skip, invisible;
            set AF0UM001.AF0UMST[3] skip, invisible;
            set AF0UM001.AF0UMXTB[3] skip, invisible;
            set AF0UM001.AF0UMXTS[3] skip, invisible;
            ;
          else
            ;
            if (AFWREC.AFWIXM == 4) /* 4th line group*/
              ;
              AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
              while (AFWREC.AFWIDX1 <= 7)
                set AF0UM001.AF0UMB4[AFWIDX1] skip, invisible;
                set AF0UM001.AF0UMS4[AFWIDX1] skip, invisible;
                AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
              end
              ;
              set AF0UM001.AF0UMBP[4] skip, invisible;
              set AF0UM001.AF0UMBT[4] skip, invisible;
              set AF0UM001.AF0UMST[4] skip, invisible;
              set AF0UM001.AF0UMXTB[4] skip, invisible;
              set AF0UM001.AF0UMXTS[4] skip, invisible;
              ;
            end
          end
        end
      end
      ;
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format style totals/pcents.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 7)
    if (AFWREC.AFWIDX1 <= AF0UW-LATE-MO)
      AF0UM001.AF0UMTB[AFWIDX1] = AF0UW03.AF0UWTB[AFWIDX1];
      AF0UM001.AF0UMTS[AFWIDX1] = AF0UW03.AF0UWTS[AFWIDX1];
      AF0UM001.AF0UMDP[AFWIDX1] = AF0UW03.AF0UWDP[AFWIDX1];
      AF0UM001.AF0UMDS[AFWIDX1] = AF0UW03.AF0UWDS[AFWIDX1];
    else
      set AF0UM001.AF0UMTB[AFWIDX1] skip, invisible;
      set AF0UM001.AF0UMTS[AFWIDX1] skip, invisible;
      set AF0UM001.AF0UMDP[AFWIDX1] skip, invisible;
      set AF0UM001.AF0UMDS[AFWIDX1] skip, invisible;
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
  end
  ;
  ;
  AF0UM001.AF0UMTBP = AF0UW03.AF0UWTBP; /* Booked grand totals*/
  AF0UM001.AF0UMTSP = AF0UW03.AF0UWTSP; /* Shipped grand totals*/
  AF0UM001.AF0UMDPT = AF0UW03.AF0UWDPT; /* Booked pcent grand total*/
  AF0UM001.AF0UMDST = AF0UW03.AF0UWDST; /* Shipped pcent grand total*/
  ;
  ;
end // end AF0U121

// Delete TSQ page
Function AF0U122()
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA5REC.TA5APPID = AFWREC.AFWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  ;
  ;
  call "TA0050" (AF0UW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                        /* ; subroutine*/
  ;
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    AFWREC.AFWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  ;
  ;
  AFWREC.AFWTSP = 0; /* Reset current page number*/
  AFWREC.TA5TSQIX = 0; /* Reset highest page number*/
  ;
  ;
end // end AF0U122

// Write to TSQ data set
Function AF0U126()
  ;
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF0UW02.AF0UWLEN = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = AFWREC.AFWAPPL; /* Application id*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  ;
  ;
  call "TA0050" (AF0UW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                        /* ;subroutine*/
  ;
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "126 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
  AFWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
  ;
  AFWREC.AFWIXM = 0; /* Reset display line number*/
  ;
  set AF0UW02 empty; /* Clear temporary storage record*/
  ;
  ;
  ;
end // end AF0U126

// Read TSQ data set
Function AF0U127()
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0UW02.AF0UWLEN = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = AFWREC.AFWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = AFWREC.AFWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  ;
  call "TA0050" (AF0UW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage subroutine*/
  ;
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "127 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AF0U127

// Check attention identifier
Function AF0U130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0UM001 initial; /* Clear the map fields*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AF0UM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0UM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0UM001.CAITEM; /* Application data*/
      ;
      XP1REC.XXXUSER = AF0UW01.AF0UWUSR; /* restore start forecaster*/
      XP1REC.XPRCD = AF0UW01.AF0UWTYP; /* restore start xprcd*/
      XP1REC.XGACD = AF0UW01.AF0UWGA; /* restore start xgacd*/
      XP1REC.XPLCD = AF0UW01.AF0UWSLN; /* restore start xplcd*/
      XP1REC.XPCCD = AF0UW01.AF0UWCAT; /* restore start xpccd*/
      XP1REC.XSUCD = AF0UW01.AF0UWSIL; /* restore start xsucd*/
      XP1REC.XOWCD = AF0UW01.AF0UWXOW; /* restore start xowcd*/
      XP1REC.SY1STNBR = AF0UW01.SY1STNBR; /* restore start style*/
      ;
      AF0UW01.AF0UWUSR = " "; /* clear start forecaster*/
      AF0UW01.AF0UWTYP = " "; /* clear start xprcd*/
      AF0UW01.AF0UWGA = " "; /* clear start xgacd*/
      AF0UW01.AF0UWSLN = " "; /* clear start xplcd*/
      AF0UW01.AF0UWCAT = " "; /* clear start xpccd*/
      AF0UW01.AF0UWSIL = " "; /* clear start xsucd*/
      AF0UW01.AF0UWXOW = " "; /* clear start xowcd*/
      AF0UW01.SY1STNBR = " "; /* clear start style*/
      ;
      AF0UW01.AF0UWDPR = " "; /* clear type desc*/
      AF0UW01.AF0UWDGA = " "; /* clear g/a  desc*/
      AF0UW01.AF0UWDPL = " "; /* clear line desc*/
      AF0UW01.AF0UWDPC = " "; /* clear cat  desc*/
      AF0UW01.AF0UWDSL = " "; /* clear sil  desc*/
      ;
      if (XP1REC.XPRCD == " ")
        XP1REC.XPRABRV = " ";
        XP1REC.XPRDESC = " ";
      end
      ;
      if (XP1REC.XGACD == " ")
        XP1REC.XGAABRV = " ";
        XP1REC.XGADESC = " ";
      end
      ;
      if (XP1REC.XPLCD == " ")
        XP1REC.XPLABRV = " ";
        XP1REC.XPLDESC = " ";
      end
      ;
      if (XP1REC.XPCCD == " ")
        XP1REC.XPCABRV = " ";
        XP1REC.XPCDESC = " ";
      end
      ;
      if (XP1REC.XSUCD == " ")
        XP1REC.XSUABRV = " ";
        XP1REC.XSUDESC = " ";
      end
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0UM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF0UM001.CAITEM > " ") /* Application data was entered*/
    set AF0UM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0UM001"; /* Appl find code*/
    end
    ;
    XP1REC.XXXUSER = AF0UW01.AF0UWUSR; /* restore start forecaster*/
    XP1REC.XPRCD = AF0UW01.AF0UWTYP; /* restore start xprcd*/
    XP1REC.XGACD = AF0UW01.AF0UWGA; /* restore start xgacd*/
    XP1REC.XPLCD = AF0UW01.AF0UWSLN; /* restore start xplcd*/
    XP1REC.XPCCD = AF0UW01.AF0UWCAT; /* restore start xpccd*/
    XP1REC.XSUCD = AF0UW01.AF0UWSIL; /* restore start xsucd*/
    XP1REC.XOWCD = AF0UW01.AF0UWXOW; /* restore start xowcd*/
    XP1REC.SY1STNBR = AF0UW01.SY1STNBR; /* restore start style*/
    ;
    AF0UW01.AF0UWUSR = " "; /* clear start forecaster*/
    AF0UW01.AF0UWTYP = " "; /* clear start xprcd*/
    AF0UW01.AF0UWGA = " "; /* clear start xgacd*/
    AF0UW01.AF0UWSLN = " "; /* clear start xslcd*/
    AF0UW01.AF0UWCAT = " "; /* clear start xpccd*/
    AF0UW01.AF0UWSIL = " "; /* clear start xsucd*/
    AF0UW01.AF0UWXOW = " "; /* clear start xowcd*/
    AF0UW01.SY1STNBR = " "; /* clear start style*/
    ;
    AF0UW01.AF0UWDPR = " "; /* clear type desc*/
    AF0UW01.AF0UWDGA = " "; /* clear g/a  desc*/
    AF0UW01.AF0UWDPL = " "; /* clear line desc*/
    AF0UW01.AF0UWDPC = " "; /* clear cat  desc*/
    AF0UW01.AF0UWDSL = " "; /* clear sil  desc*/
    ;
    if (XP1REC.XPRCD == " ")
      XP1REC.XPRABRV = " ";
      XP1REC.XPRDESC = " ";
    end
    ;
    if (XP1REC.XGACD == " ")
      XP1REC.XGAABRV = " ";
      XP1REC.XGADESC = " ";
    end
    ;
    if (XP1REC.XPLCD == " ")
      XP1REC.XPLABRV = " ";
      XP1REC.XPLDESC = " ";
    end
    ;
    if (XP1REC.XPCCD == " ")
      XP1REC.XPCABRV = " ";
      XP1REC.XPCDESC = " ";
    end
    ;
    if (XP1REC.XSUCD == " ")
      XP1REC.XSUABRV = " ";
      XP1REC.XSUDESC = " ";
    end
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf11 /* scroll right\*/
   && AF0UW-LATE-MO <= 7)         
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AFWREC.AFWFIRST == " ") /* first time through*/
    ;
    if (converseVar.eventKey not enter) /* and Enter key not pressed*/
      ;
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      ;
      exit stack; /* Exit to redisplay map*/
      ;
    end
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf15 /* pf15 was pressed*/
   || converseVar.eventKey is pf16 /* pf16 was pressed*/
   || converseVar.eventKey is pf17 /* pf16 was pressed*/
   || converseVar.eventKey is pf18 /* pf16 was pressed*/
   || converseVar.eventKey is pf19) /* pf16 was pressed*/
    ;
    if (AF9REC.AF9GAG99 == "Y" /* last ga code retrieved*/
     || AF9REC.AF9CAT99 == "Y" /* last cat code retrieved*/
     || AF9REC.AF9SIL99 == "Y" /* last sil code retrieved*/
     || AF9REC.AF9TYP99 == "Y" /* last type code retrieved*/
     || AF9REC.AF9LIN99 == "Y") /* last line code retrieved*/
      AFWREC.AFWPRCSN = "130 "; /* process number*/
      converseLib.validationFailed(15); /* indicate no data to display*/
      ;
      exit stack; /* exit to redisplay map*/
      ;
    end
    ;
  end
  ;
end // end AF0U130

// Reset hilght flds; disp pop-up
Function AF0U140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0UM001.AF0UM-SCROLL-RGT initialAttributes; /* scroll*/
  set AF0UM001.PG1FCTCD normal; /* Forecaster cd*/
  set AF0UM001.XSECD normal; /* Sesn cd*/
  set AF0UM001.XSNYR normal; /* Sesn yr*/
  set AF0UM001.XPRCD normal; /* Product Type cd*/
  set AF0UM001.XGACD normal; /* Gender Age cd*/
  set AF0UM001.XPLCD normal; /* Product Line cd*/
  set AF0UM001.XPCCD normal; /* Category cd*/
  set AF0UM001.XSUCD normal; /* Silhouette cd*/
  set AF0UM001.XDVCD normal; /* Division cd*/
  set AF0UM001.XOWCD normal; /* Division cd*/
  set AF0UM001.SY1STNBR normal; /* Style no.*/
  ;
  AF0UM001.XXXPRCNM = "AF0U    "; /* Reset process name*/
  ;
  ;
  set AF0UM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0UM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/
  ;
  if (AF0UM001.XSECD == "?"
   || AF0UM001.XPRCD == "?"
   || AF0UM001.XGACD == "?"
   || AF0UM001.XPLCD == "?"
   || AF0UM001.XSUCD == "?"
   || AF0UM001.XDVCD == "?"
   || AF0UM001.XOWCD == "?")
    ;
    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    ;
    AF0UW01.AF0UWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/
  ;
  if (AF0UM001.XSECD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XSECD = AF0UM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSE(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0UM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product Type cd*/
   /* *============================**/
  ;
  if (AF0UM001.XPRCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPRCD = AF0UM001.XPRCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPR(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0UM001.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/
  ;
  if (AF0UM001.XGACD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XGACD = AF0UM001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSGA(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0UM001.XGACD = XP1REC.XGACD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XGPLD   * Product Line cd*/
   /* *============================**/
  ;
  if (AF0UM001.XPLCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPLCD = AF0UM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPL(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0UM001.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/
  ;
  if (AF0UM001.XPCCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPCCD = AF0UM001.XPCCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPC(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0UM001.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Silhouette cd*/
   /* *=============================**/
  ;
  ;
  if (AF0UM001.XSUCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XSUCD = AF0UM001.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSU(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0UM001.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *=============================**/
   /* *  Pop-up Window for XOWCD    * Owner Group Cd*/
   /* *=============================**/
  ;
  ;
  if (AF0UM001.XOWCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XOWCD = AF0UM001.XOWCD; /* Set XP1REC field*/
    XP1REC.XWHCD = "51";
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSOW(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0UM001.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *=============================**/
   /* *  Pop-up Window for XDVCD    * Division cd*/
   /* *=============================**/
  ;
  ;
  if (AF0UM001.XDVCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XDVCD = AF0UM001.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSDV(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0UM001.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/
  ;
  ;
  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0UW01.AF0UWPND = "Y"; /* Activate pop-up window ind*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0U140

// Verify Entered Data
Function AF0U150()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or Scroll forward request*/
    ;
    AF0U151(); /* Verify scroll request*/
    ;
    if (converseVar.validationMsgNum != 0) /* Errors found*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  else
    ;
    AF0U152(); /* Verify selection criteria*/
    ;
  end
  ;
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors found*/
    ;
    AF0US01(); /* Clear map detail area*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  else
    ;
    if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/
      exit stack; /* Go back to start of applic*/
    end
    ;
  end
  ;
  ;
  ;
end // end AF0U150

// Verify Scroll Request
Function AF0U151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && AFWREC.AFWTSP < 2)          /* and no previous pages*/
    ;
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AFWREC.AFWTSP >= AFWREC.TA5TSQIX) /* and no more pages*/
    ;
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
  ;
end // end AF0U151

// Verify Selection Criteria
Function AF0U152()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *****                                                  ******/
   /* *************************************************************/
  ;
  ;
  AF0UW01.AFWSWR = AFWREC.AFWSWR; /* save data select setting*/
  ;
  AFWREC.AFWSWR = "N"; /* initialize switch to 'OFF'*/
  AFWREC.AFWFIRST = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* initialize msg hold area*/
  ;
  XP1REC.XP1XSNYR = XP1REC.XSNYR; /* Redefine Season yr*/
  ;
  /* AF0UW01.AF0UWYR = XP1REC.XSNYR - 1900;/* Get year*/
  /* MOVE AF0UW01.AF0UWYR TO AF0UW01.AF0UWXYR;*/
  ;
  ;
   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/
  ;
  ;
  if (AF0UW01.AF0UWSTY != AF0UM001.SY1STNBR /* Start Style no.*/
   || AF0UW01.AF0UWDIV != AF0UM001.XDVCD    /* Start DIV cd*/
   || AF0UW01.AF0UWSIL != AF0UM001.XSUCD    /* Start SILH cd*/
   || AF0UW01.AF0UWCAT != AF0UM001.XPCCD    /* Start CAT cd*/
   || AF0UW01.AF0UWSLN != AF0UM001.XPLCD    /* Start PR LIN cd*/
   || AF0UW01.AF0UWGA != AF0UM001.XGACD     /* Start G/A cd*/
   || AF0UW01.AF0UWTYP != AF0UM001.XPRCD    /* Start PR TYP cd*/
   || AF0UW01.AF0UWXOW != AF0UM001.XOWCD    /* Start Owner Group*/
   || XP1REC.XP1XSNYY != AF0UM001.XSNYR     /* Season yr*/
   || AF0UM001.XSNYR == 0                   /* Map fld zeroed out*/
   || XP1REC.XSECD != AF0UM001.XSECD        /* Season cd*/
   || AF0UM001.XSECD == " "                 /* Map fld spaced out*/
   || AF0UW01.AF0UWUSR != AF0UM001.PG1FCTCD) /* FORECASTER CD*/
    ;
    AFWREC.AFWSWR = "Y"; /* New criteria entered*/
    ;
    AF0US23();
    ;
  end
  ;
  ;
   /* *=============================**/
   /* *  CHECK END OF G/A INDICATOR **/
   /* *=============================**/
  ;
  ;
  if (AF9REC.AF9TYP99 == "Y" /* NO MORE COMBO CODES TO PROCESS*/
   && AFWREC.AFWSWR == "N")  /* NO NEW KEYS ENTERED*/
    converseLib.validationFailed(15); /* INDICATE NO MORE DATA*/
    AFWREC.AFWPRCSN = "152 "; /* PROCESS NUMBER*/
    ;
    AFWREC.AFWIXM = 1; /* Initialize line index*/
    ;
    while (AFWREC.AFWIXM <= 5) /* Until end of map line groups*/
      ;
                /* (Protect,dark map fields)*/
      if (AFWREC.AFWIXM == 1) /* 1st line group*/
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 7)
          set AF0UM001.AF0UMB1[AFWIDX1] skip, invisible;
          set AF0UM001.AF0UMS1[AFWIDX1] skip, invisible;
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        end
        ;
        set AF0UM001.AF0UMXOT[1] skip, invisible;
        set AF0UM001.AF0UMBP[1] skip, invisible;
        set AF0UM001.AF0UMBT[1] skip, invisible;
        ;
      else
        ;
        if (AFWREC.AFWIXM == 2) /* 2nd line group*/
          ;
          AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
          while (AFWREC.AFWIDX1 <= 7)
            set AF0UM001.AF0UMB2[AFWIDX1] skip, invisible;
            set AF0UM001.AF0UMS2[AFWIDX1] skip, invisible;
            AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
          end
          ;
          set AF0UM001.AF0UMST[2] skip, invisible;
          ;
        else
          ;
          if (AFWREC.AFWIXM == 3) /* 3rd line group*/
            ;
            AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
            while (AFWREC.AFWIDX1 <= 7)
              set AF0UM001.AF0UMB3[AFWIDX1] skip, invisible;
              set AF0UM001.AF0UMS3[AFWIDX1] skip, invisible;
              AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
            end
            ;
            set AF0UM001.AF0UMBP[3] skip, invisible;
            set AF0UM001.AF0UMBT[3] skip, invisible;
            set AF0UM001.AF0UMST[3] skip, invisible;
            set AF0UM001.AF0UMXTB[3] skip, invisible;
            ;
          else
            ;
            if (AFWREC.AFWIXM == 4) /* 4th line group*/
              ;
              AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
              while (AFWREC.AFWIDX1 <= 7)
                set AF0UM001.AF0UMB4[AFWIDX1] skip, invisible;
                set AF0UM001.AF0UMS4[AFWIDX1] skip, invisible;
                AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
              end
              ;
              set AF0UM001.AF0UMBP[4] skip, invisible;
              set AF0UM001.AF0UMBT[4] skip, invisible;
              set AF0UM001.AF0UMST[4] skip, invisible;
              set AF0UM001.AF0UMXTB[4] skip, invisible;
              ;
            end
          end
        end
      end
      ;
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      ;
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Format style totals/pcents.*/
    /* ------------------------------------------------------------*/
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 7)
      set AF0UM001.AF0UMTB[AFWIDX1] skip, invisible;
      set AF0UM001.AF0UMTS[AFWIDX1] skip, invisible;
      set AF0UM001.AF0UMDP[AFWIDX1] skip, invisible;
      set AF0UM001.AF0UMDS[AFWIDX1] skip, invisible;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    end
    ;
    ;
    set AF0UM001.AF0UMTBP skip, invisible; /* Booked grand totals*/
    set AF0UM001.AF0UMTSP skip, invisible; /* Shipped grand totals*/
    set AF0UM001.AF0UMDPT skip, invisible; /* Booked pcent grand total*/
    set AF0UM001.AF0UMDST skip, invisible; /* Shipped pcent grand total*/
    ;
    ;
    exit stack; /* EXIT TO RESELECT DATA*/
    ;
  end
  ;
  ;
   /* *=============================**/
   /* *  CHECK ATTN ID RESPONSE     **/
   /* *=============================**/
  ;
  ;
  if (AFWREC.AFWSWR == "Y"           /* NEW KEYS ENTERED*/
   && converseVar.eventKey not enter /* ENTER KEY NOT PRESSED*/
   && converseVar.eventKey not pf15  /* pf15 (next product type requested*/
   && converseVar.eventKey not pf16  /* pf16 (next g/a requested*/
   && converseVar.eventKey not pf17  /* pf17 (next product line requested*/
   && converseVar.eventKey not pf18  /* pf18 (next category requested*/
   && converseVar.eventKey not pf19  /* pf19 (next silhouette requested*/
   && converseVar.eventKey not pf20) /* pf20 (change from units to dollars*/
    ;
    ;
    AFWREC.AFWIXM = 1; /* Initialize line index*/
    ;
    while (AFWREC.AFWIXM <= 5) /* Until end of map line groups*/
      ;
                /* (Protect,dark map fields)*/
      if (AFWREC.AFWIXM == 1) /* 1st line group*/
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 7)
          set AF0UM001.AF0UMB1[AFWIDX1] skip, invisible;
          set AF0UM001.AF0UMS1[AFWIDX1] skip, invisible;
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        end
        ;
        set AF0UM001.AF0UMBP[1] skip, invisible;
        set AF0UM001.AF0UMBT[1] skip, invisible;
        set AF0UM001.AF0UMST[1] skip, invisible;
        set AF0UM001.AF0UMXTB[1] skip, invisible;
        set AF0UM001.AF0UMXTS[1] skip, invisible;
        ;
      else
        ;
        if (AFWREC.AFWIXM == 2) /* 2nd line group*/
          ;
          AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
          while (AFWREC.AFWIDX1 <= 7)
            set AF0UM001.AF0UMB2[AFWIDX1] skip, invisible;
            set AF0UM001.AF0UMS2[AFWIDX1] skip, invisible;
            AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
          end
          ;
          set AF0UM001.AF0UMBP[2] skip, invisible;
          set AF0UM001.AF0UMBT[2] skip, invisible;
          set AF0UM001.AF0UMST[2] skip, invisible;
          set AF0UM001.AF0UMXTB[2] skip, invisible;
          set AF0UM001.AF0UMXTS[2] skip, invisible;
          ;
        else
          ;
          if (AFWREC.AFWIXM == 3) /* 3rd line group*/
            ;
            AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
            while (AFWREC.AFWIDX1 <= 7)
              set AF0UM001.AF0UMB3[AFWIDX1] skip, invisible;
              set AF0UM001.AF0UMS3[AFWIDX1] skip, invisible;
              AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
            end
            ;
            set AF0UM001.AF0UMBP[3] skip, invisible;
            set AF0UM001.AF0UMBT[3] skip, invisible;
            set AF0UM001.AF0UMST[3] skip, invisible;
            set AF0UM001.AF0UMXTB[3] skip, invisible;
            set AF0UM001.AF0UMXTS[3] skip, invisible;
            ;
          else
            ;
            if (AFWREC.AFWIXM == 4) /* 4th line group*/
              ;
              AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
              while (AFWREC.AFWIDX1 <= 7)
                set AF0UM001.AF0UMB4[AFWIDX1] skip, invisible;
                set AF0UM001.AF0UMS4[AFWIDX1] skip, invisible;
                AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
              end
              ;
              set AF0UM001.AF0UMBP[4] skip, invisible;
              set AF0UM001.AF0UMBT[4] skip, invisible;
              set AF0UM001.AF0UMST[4] skip, invisible;
              set AF0UM001.AF0UMXTB[4] skip, invisible;
              set AF0UM001.AF0UMXTS[4] skip, invisible;
              ;
            end
          end
        end
      end
      ;
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
      ;
    end
    ;
    ;
    converseLib.validationFailed(4); /* REQUEST NO PERMITTED*/
    AFWREC.AFWPRCSN = "152 "; /* PROCESS NUMBER*/
    exit stack; /* EXIT TO RESELECT DATA*/
    ;
  end
  ;
   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/
  ;
  ;
  if (AFWREC.AFWSWR == "Y") /* NEW KEYS ENTERED*/
    AF0US14(); /* Edit division cd*/
    AF0US22(); /* Edit Owner Group Cd*/
    AF0US03(); /* Edit style no.*/
    AF0US07(); /* Edit silhouette cd*/
    AF0US08(); /* Edit category cd*/
    AF0US15(); /* Edit product line cd*/
    AF0US09(); /* Edit gender/age cd*/
    AF0US16(); /* Edit product type cd*/
    AF0US10(); /* Edit season yr*/
    AF0US11(); /* Edit season cd*/
    AF0US21(); /* Edit forecaster cd*/
  end
  ;
   /* *====================================**/
   /* *  check criteria validation status  **/
   /* *====================================**/
  ;
  ;
  ;
  if (XP1REC.XP1MNO == 0 /* no validation errors*/
   && AFWREC.AFWSWR == "Y") /* new selection criteria entered*/
    ;
    XP1REC.XSUCD = AF0UW01.AF0UWSIL; /* new start sil cd*/
    XP1REC.XPCCD = AF0UW01.AF0UWCAT; /* new start cat cd*/
    XP1REC.XPLCD = AF0UW01.AF0UWSLN; /* new start line cd*/
    XP1REC.XGACD = AF0UW01.AF0UWGA; /* new start g/a cd*/
    XP1REC.XPRCD = AF0UW01.AF0UWTYP; /* new start type cd*/
    XP1REC.XOWCD = AF0UW01.AF0UWXOW; /* new start XOW*/
  end
  ;
  if (XP1REC.XP1MNO != 0) /* validation error present*/
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/
    AFWREC.AFWIDX5 = 1; /* Set loop index*/
    ;
    AF0US01(); /* Clear map detail area*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
end // end AF0U152

// Process Valid Request
Function AF0U160()
  ;
   /* ------------------------------------------------------------*/
   /* Check Loop Limit Counter*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0UW01.AF0UWLCT > AF0UW01.AF0UWLIM) /* style ctr loop limit reached*/
    AF0UW01.AF0UWLCT = 0; /* reset loop ctr limit reached*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Scroll Request.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    AFWREC.AFWTSP = AFWREC.AFWTSP - 1; /* Decrement page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    AFWREC.AFWTSP = AFWREC.AFWTSP + 1; /* Increment page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Shift Screen Right request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Display AF0UM005*/
    ;
    if (AF0UW01.AF0UW-LATE-MO <= 7)
      converseLib.validationFailed(3);
    else
      AFWREC.AFWMAP = "2"; /* Indicate Map 2 to process*/
    end
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* 'pf15', 'pf16', 'pf17', 'pf18', 'pf19', key processing.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15 /* pf15 (next type)*/
   || converseVar.eventKey is pf16 /* pf16 (next g/a)*/
   || converseVar.eventKey is pf17 /* pf17 (next line)*/
   || converseVar.eventKey is pf18 /* pf18 (next cate)*/
   || converseVar.eventKey is pf19) /* pf19 (next sihe)*/
    ;
    return; /* Execute next process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Display Option change request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf20) /* CHANGE DISPLAY OPTION*/
    ;
    AFWREC.AFWSWR = "Y"; /* RESET DATA*/
    ;
    if (AF0UW01.AF0UWDSO == "U") /* DISPLAY OPTION IN UNITS*/
      AF0UW01.AF0UWDSO = "D"; /* THEN DISPLAY DATA IN DOLLARS*/
      return; /* EXECUTE NEXT PROCESS*/
    else
      AF0UW01.AF0UWDSO = "U"; /* ELSE DISPLAY DATA IN UNITS(qtys)*/
      return; /* EXECUTE NEXT PROCESS*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* 'ENTER' KEY PROCESSING.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER KEY PRESSEED*/
    ;
        /* (REDISPLAY CURRENT DATA)*/
    ;
  end
  ;
  ;
  ;
end // end AF0U160

// Process Map 2 (AF0UM005)
Function AF0U200()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display (N/A for this process).*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0U220(); /* Format and display the map*/
  ;
  AF0U230(); /* Check attention identifier*/
  ;
  AF0U240(); /* Reset fields to normal intensity*/
  ;
  AF0U250(); /* Verify the entered data*/
  ;
  AF0U260(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0U200

// Format and display the map
Function AF0U220()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.AFWFIRST != " ") /* Not the first time*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error found*/
      AF0U221(); /* Format the data on the map*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0UM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0UM005.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0UM005.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0UM005.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0UM005 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  converse AF0UM005 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF0UM005.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0UM005.CAITEM; /* Application data*/
  ;
  ;
  ;
end // end AF0U220

// Format data into map
Function AF0U221()
  ;
   /* ------------------------------------------------------------*/
   /* Clear Map for New Data to Display.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0UM005 initial; /* Clear map for display*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format Map Header.*/
   /* ------------------------------------------------------------*/
  ;
  AF0UM005.XSECD = XP1REC.XSECD; /* Season cd*/
  XP1REC.XP1XSNYR = XP1REC.XSNYR; /* Redefine Season yr*/
  AF0UM005.XSNYR = XP1REC.XP1XSNYY; /* Season yr*/
  AF0UM005.PG1FCTCD = AF0UW01.AF0UWUSR; /* FORECASTER ID*/
  AF0UM005.XDVCD = AF0UW01.AF0UWDIV; /* Start Division cd*/
  AF0UM005.XGACD = AF0UW01.AF0UWGA; /* Start G/A CD*/
  AF0UM005.XPRCD = AF0UW01.AF0UWTYP; /* Start PROD TYPE CD*/
  AF0UM005.XPCCD = AF0UW01.AF0UWCAT; /* Start CATEGORY CD*/
  AF0UM005.XPLCD = AF0UW01.AF0UWSLN; /* Start PROD LINE CD*/
  AF0UM005.XSUCD = AF0UW01.AF0UWSIL; /* Start SIL CD*/
  AF0UM005.SY1STNBR = AF0UW01.AF0UWSTY; /* Start STYLE NO.*/
  AF0UM005.XOWCD = AF0UW01.AF0UWXOW; /* Start Xow cd*/
  ;
   /* ------------------------------------------------------------*/
   /* Format Map Header Description Fields.*/
   /* ------------------------------------------------------------*/
  ;
  AF0UM005.XPRABRV = AF0UW01.AF0UWDPR; /* Product Type Abrv*/
  AF0UM005.XGAABRV = AF0UW01.AF0UWDGA; /* Product G/A  Abrv*/
  AF0UM005.XPLABRV = AF0UW01.AF0UWDPL; /* Product line Abrv*/
  AF0UM005.XPCABRV = AF0UW01.AF0UWDPC; /* Cat Desc*/
  AF0UM005.XSUABRV = AF0UW01.AF0UWDSL; /* Sil Desc*/
  ;
   /* ------------------------------------------------------------*/
   /* Format Current Combination Fields.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF9REC.AF9GAIXM > 0 /* XGA Combination Index Valid*/
   && AF9REC.AF9PCIXM > 0 /* XPC Combination Index Valid*/
   && AF9REC.AF9SUIXM > 0 /* XSU Combination Index Valid*/
   && AF9REC.AF9TPIXM > 0 /* XPR Combination Index Valid*/
   && AF9REC.AF9LNIXM > 0) /* XPL Combination Index Valid*/
    ;
    AF0UM005.AF0UDVCD = XP1REC.XDVCD; /* Current Division cd*/
    AF0UM005.AF0UPRCD = XP1REC.XPRCD; /* Current Product type*/
    AF0UM005.AF0UGACD = XP1REC.XGACD; /* Current G/A cd*/
    AF0UM005.AF0UPLCD = XP1REC.XPLCD; /* Current Product line*/
    AF0UM005.AF0UPCCD = XP1REC.XPCCD; /* Current Category cd*/
    AF0UM005.AF0USUCD = XP1REC.XSUCD; /* Current Silhouette cd*/
    AF0UM005.AF0UMCOG = XP1REC.XOWCD; /* Current Owner Group*/
    AF0UM005.AF0USTY = XP1REC.SY1STNBR; /* Current Style no.*/
    ;
  end
  ;
  if (AF0UW01.AF0UWDSO == "U") /* Display option in units*/
    AF0UM005.AF0UMDSO = "UNITS  ";
  else
    AF0UM005.AF0UMDSO = "DOLLARS";
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Protect Map Header Selection fields.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0UM005.XSECD skip; /* Season cd*/
  set AF0UM005.XSNYR skip; /* Season yr*/
  set AF0UM005.XPRCD skip; /* Product type cd*/
  set AF0UM005.XGACD skip; /* G/A cd*/
  set AF0UM005.XPLCD skip; /* Product line cd*/
  set AF0UM005.XPCCD skip; /* Category cd*/
  set AF0UM005.XSUCD skip; /* Silhouette cd*/
  set AF0UM005.XDVCD skip; /* Division cd*/
  set AF0UM005.SY1STNBR skip; /* Style no.*/
  set AF0UM005.XOWCD skip; /* Owner Group Cd*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if there are pages to display. If none, set message*/
     /* and redisplay map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set AF0UM005.CATOAP cursor; /* Set cursor position*/
  ;
  if (AFWREC.TA5TSQIX == 0) /* No data to display*/
    ;
    AFWREC.AFWPRCSN = "221 "; /* Process number*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
    return; /* Return to calling process*/
    ;
  end
  ;
  AFWREC.AFWIDX1 = 7; /* Initialize loop index*/
  AFWREC.AFWIDX2 = 1; /* Initialize pos index*/
  while (AFWREC.AFWIDX1 <= 10) /* Get all months for map 1*/
    ;
    if (AF0UW01.AF0UW-MO-DESC[AFWIDX1] > " ")
      AF0UM005.AF0UMHD[AFWIDX2] = AF0UW01.AF0UW-MO-DESC[AFWIDX1];
    else
      AF0UM005.AF0UMHD[AFWIDX2] = "LATE";
      AFWREC.AFWIDX1 = 98; /* End Loop*/
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Next position*/
    ;
  end
  ;
  if (AFWREC.AFWIDX1 == 11) /* set up late month*/
    AF0UM005.AF0UMHD[AFWIDX2] = "LATE";
  else
    ;
    while (AFWREC.AFWIDX2 <= 5) /* Get all months for map 1*/
      set AF0UM005.AF0UMHD[AFWIDX2] skip, invisible;
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Next position*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0U127(); /* Obtain TSQ page*/
  ;
  ;
  AFWREC.AFWIXM = 1; /* Initialize line index*/
  ;
  while (AFWREC.AFWIXM <= 4) /* Until end of map line groups*/
    ;
    if (AF0UW02.AF0UWLID[AFWIXM] != "*") /* Not Unused line*/
      ;
      if (AFWREC.AFWIXM == 1) /* 1st line group*/
        ;
        AF0UM005.AF0UMXOT[1] = AF0UW02.AF0UWXOD[1]; /* XOT desc*/
        ;
        AFWREC.AFWIDX1 = 8; /* Initialize loop index*/
        AFWREC.AFWIDX2 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 12)
          if (AFWREC.AFWIDX1 <= AF0UW-LATE-MO)
            AF0UM005.AF0UMB1[AFWIDX2] = AF0UW02.AF0UWB1[AFWIDX1];
            AF0UM005.AF0UMS1[AFWIDX2] = AF0UW02.AF0UWS1[AFWIDX1];
          else
            set AF0UM005.AF0UMB1[AFWIDX2] skip, invisible;
            set AF0UM005.AF0UMS1[AFWIDX2] skip, invisible;
          end
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
          AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
        end
        ;
        AF0UM005.AF0UMBT[1] = AF0UW02.AF0UWBT[1]; /* Line totals*/
        AF0UM005.AF0UMST[1] = AF0UW02.AF0UWST[1];
        ;
        ;
      else
        ;
        if (AFWREC.AFWIXM == 2) /* 2nd line group*/
          ;
          AF0UM005.AF0UMXOT[2] = AF0UW02.AF0UWXOD[2]; /* XOT desc*/
          ;
          AFWREC.AFWIDX1 = 8; /* Initialize loop index*/
          AFWREC.AFWIDX2 = 1; /* Initialize loop index*/
          while (AFWREC.AFWIDX1 <= 12)
            if (AFWREC.AFWIDX1 <= AF0UW-LATE-MO)
              AF0UM005.AF0UMB2[AFWIDX2] = AF0UW02.AF0UWB2[AFWIDX1];
              AF0UM005.AF0UMS2[AFWIDX2] = AF0UW02.AF0UWS2[AFWIDX1];
            else
              set AF0UM005.AF0UMB2[AFWIDX2] skip, invisible;
              set AF0UM005.AF0UMS2[AFWIDX2] skip, invisible;
            end
            AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
            AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
          end
          ;
          AF0UM005.AF0UMBT[2] = AF0UW02.AF0UWBT[2];
          AF0UM005.AF0UMST[2] = AF0UW02.AF0UWST[2];
          ;
          ;
        else
          ;
          if (AFWREC.AFWIXM == 3) /* 3rd line group*/
            ;
            AF0UM005.AF0UMXOT[3] = AF0UW02.AF0UWXOD[3]; /* XOT desc*/
            ;
            AFWREC.AFWIDX1 = 8; /* Initialize loop index*/
            AFWREC.AFWIDX2 = 1; /* Initialize loop index*/
            while (AFWREC.AFWIDX1 <= 12)
              if (AFWREC.AFWIDX1 <= AF0UW-LATE-MO)
                AF0UM005.AF0UMB3[AFWIDX2] = AF0UW02.AF0UWB3[AFWIDX1];
                AF0UM005.AF0UMS3[AFWIDX2] = AF0UW02.AF0UWS3[AFWIDX1];
              else
                set AF0UM005.AF0UMB3[AFWIDX2] skip, invisible;
                set AF0UM005.AF0UMS3[AFWIDX2] skip, invisible;
              end
              AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
              AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
            end
            ;
            AF0UM005.AF0UMBT[3] = AF0UW02.AF0UWBT[3];
            AF0UM005.AF0UMST[3] = AF0UW02.AF0UWST[3];
            ;
          else
            ;
            if (AFWREC.AFWIXM == 4) /* 4th line group*/
              ;
              AF0UM005.AF0UMXOT[4] = AF0UW02.AF0UWXOD[4]; /* XOT desc*/
              ;
              AFWREC.AFWIDX1 = 8; /* Initialize loop index*/
              AFWREC.AFWIDX2 = 1; /* Initialize loop index*/
              while (AFWREC.AFWIDX1 <= 12)
                if (AFWREC.AFWIDX1 <= AF0UW-LATE-MO)
                  AF0UM005.AF0UMB4[AFWIDX2] = AF0UW02.AF0UWB4[AFWIDX1];
                  AF0UM005.AF0UMS4[AFWIDX2] = AF0UW02.AF0UWS4[AFWIDX1];
                else
                  set AF0UM005.AF0UMB4[AFWIDX2] skip, invisible;
                  set AF0UM005.AF0UMS4[AFWIDX2] skip, invisible;
                end
                AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
                AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
              end
              ;
              AF0UM005.AF0UMBT[4] = AF0UW02.AF0UWBT[4];
              AF0UM005.AF0UMST[4] = AF0UW02.AF0UWST[4];
              ;
              ;
            end
          end
        end
      end
      ;
    else
      ;
                /* (Protect,dark map fields)*/
      if (AFWREC.AFWIXM == 1) /* 1st line group*/
        ;
        AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
        while (AFWREC.AFWIDX1 <= 5)
          set AF0UM005.AF0UMB1[AFWIDX1] skip, invisible;
          set AF0UM005.AF0UMS1[AFWIDX1] skip, invisible;
          AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        end
        ;
        set AF0UM005.AF0UMBT[1] skip, invisible;
        set AF0UM005.AF0UMST[1] skip, invisible;
        set AF0UM005.AF0UMXTB[1] skip, invisible;
        set AF0UM005.AF0UMXTS[1] skip, invisible;
        ;
      else
        ;
        if (AFWREC.AFWIXM == 2) /* 2nd line group*/
          ;
          AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
          while (AFWREC.AFWIDX1 <= 5)
            set AF0UM005.AF0UMB2[AFWIDX1] skip, invisible;
            set AF0UM005.AF0UMS2[AFWIDX1] skip, invisible;
            AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
          end
          ;
          set AF0UM005.AF0UMBT[2] skip, invisible;
          set AF0UM005.AF0UMST[2] skip, invisible;
          set AF0UM005.AF0UMXTB[2] skip, invisible;
          set AF0UM005.AF0UMXTS[2] skip, invisible;
          ;
        else
          ;
          if (AFWREC.AFWIXM == 3) /* 3rd line group*/
            ;
            AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
            while (AFWREC.AFWIDX1 <= 5)
              set AF0UM005.AF0UMB3[AFWIDX1] skip, invisible;
              set AF0UM005.AF0UMS3[AFWIDX1] skip, invisible;
              AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
            end
            ;
            set AF0UM005.AF0UMBT[3] skip, invisible;
            set AF0UM005.AF0UMST[3] skip, invisible;
            set AF0UM005.AF0UMXTB[3] skip, invisible;
            set AF0UM005.AF0UMXTS[3] skip, invisible;
            ;
          else
            ;
            if (AFWREC.AFWIXM == 4) /* 4th line group*/
              ;
              AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
              while (AFWREC.AFWIDX1 <= 5)
                set AF0UM005.AF0UMB4[AFWIDX1] skip, invisible;
                set AF0UM005.AF0UMS4[AFWIDX1] skip, invisible;
                AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
              end
              ;
              set AF0UM005.AF0UMBT[4] skip, invisible;
              set AF0UM005.AF0UMST[4] skip, invisible;
              set AF0UM005.AF0UMXTB[4] skip, invisible;
              set AF0UM005.AF0UMXTS[4] skip, invisible;
              ;
            end
          end
        end
      end
      ;
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format style totals/pcents.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 8; /* Initialize loop index*/
  AFWREC.AFWIDX2 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 12)
    if (AFWREC.AFWIDX1 <= AF0UW-LATE-MO)
      AF0UM005.AF0UMTB[AFWIDX2] = AF0UW03.AF0UWTB[AFWIDX1];
      AF0UM005.AF0UMTS[AFWIDX2] = AF0UW03.AF0UWTS[AFWIDX1];
      AF0UM005.AF0UMDP[AFWIDX2] = AF0UW03.AF0UWDP[AFWIDX1];
      AF0UM005.AF0UMDS[AFWIDX2] = AF0UW03.AF0UWDS[AFWIDX1];
    else
      set AF0UM005.AF0UMTB[AFWIDX2] skip, invisible;
      set AF0UM005.AF0UMTS[AFWIDX2] skip, invisible;
      set AF0UM005.AF0UMDP[AFWIDX2] skip, invisible;
      set AF0UM005.AF0UMDS[AFWIDX2] skip, invisible;
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Loop through*/
  end
  ;
  ;
  AF0UM005.AF0UMTBP = AF0UW03.AF0UWTBP; /* Booked grand totals*/
  AF0UM005.AF0UMTSP = AF0UW03.AF0UWTSP; /* Shipped grand totals*/
  AF0UM005.AF0UMDPT = AF0UW03.AF0UWDPT; /* Booked pcent grand total*/
  AF0UM005.AF0UMDST = AF0UW03.AF0UWDST; /* Shipped pcent grand total*/
  ;
end // end AF0U221

// Check attention identifier
Function AF0U230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AF0UM005 initial; /* Clear the map fields*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AF0UM005.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0UM005.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0UM005.CAITEM; /* Application data*/
      ;
      XP1REC.XXXUSER = AF0UW01.AF0UWUSR; /* Restore start forecaster*/
      XP1REC.XPRCD = AF0UW01.AF0UWTYP; /* Restore start xprcd*/
      XP1REC.XGACD = AF0UW01.AF0UWGA; /* Restore start xgacd*/
      XP1REC.XPLCD = AF0UW01.AF0UWSLN; /* Restore start xplcd*/
      XP1REC.XPCCD = AF0UW01.AF0UWCAT; /* Restore start xpccd*/
      XP1REC.XSUCD = AF0UW01.AF0UWSIL; /* Restore start xsucd*/
      XP1REC.XOWCD = AF0UW01.AF0UWXOW; /* restore start xowcd*/
      XP1REC.SY1STNBR = AF0UW01.SY1STNBR; /* Restore start style*/
      ;
      AF0UW01.AF0UWUSR = " "; /* Clear start forecaster*/
      AF0UW01.AF0UWTYP = " "; /* Clear start xprcd*/
      AF0UW01.AF0UWGA = " "; /* Clear start xgacd*/
      AF0UW01.AF0UWSLN = " "; /* Clear start xplcd*/
      AF0UW01.AF0UWCAT = " "; /* Clear start xpccd*/
      AF0UW01.AF0UWSIL = " "; /* Clear start xsucd*/
      AF0UW01.AF0UWXOW = " "; /* Clear start xowcd*/
      AF0UW01.SY1STNBR = " "; /* Clear start style*/
      ;
      AF0UW01.AF0UWDPR = " "; /* Clear type desc*/
      AF0UW01.AF0UWDGA = " "; /* Clear g/a  desc*/
      AF0UW01.AF0UWDPL = " "; /* Clear line desc*/
      AF0UW01.AF0UWDPC = " "; /* Clear cat  desc*/
      AF0UW01.AF0UWDSL = " "; /* Clear sil  desc*/
      ;
      if (XP1REC.XPRCD == " ")
        XP1REC.XPRABRV = " ";
        XP1REC.XPRDESC = " ";
      end
      ;
      if (XP1REC.XGACD == " ")
        XP1REC.XGAABRV = " ";
        XP1REC.XGADESC = " ";
      end
      ;
      if (XP1REC.XPLCD == " ")
        XP1REC.XPLABRV = " ";
        XP1REC.XPLDESC = " ";
      end
      ;
      if (XP1REC.XPCCD == " ")
        XP1REC.XPCABRV = " ";
        XP1REC.XPCDESC = " ";
      end
      ;
      if (XP1REC.XSUCD == " ")
        XP1REC.XSUABRV = " ";
        XP1REC.XSUDESC = " ";
      end
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0UM005.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF0UM005.CAITEM > " ") /* Application data was entered*/
    set AF0UM005.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0UM005"; /* Appl find code*/
    end
    ;
    ;
    XP1REC.XXXUSER = AF0UW01.AF0UWUSR; /* Restore start forecaster*/
    XP1REC.XPRCD = AF0UW01.AF0UWTYP; /* Restore start xprcd*/
    XP1REC.XGACD = AF0UW01.AF0UWGA; /* Restore start xgacd*/
    XP1REC.XPLCD = AF0UW01.AF0UWSLN; /* Restore start xplcd*/
    XP1REC.XPCCD = AF0UW01.AF0UWCAT; /* Restore start xpccd*/
    XP1REC.XSUCD = AF0UW01.AF0UWSIL; /* Restore start xsucd*/
    XP1REC.XOWCD = AF0UW01.AF0UWXOW; /* Restore start xowcd*/
    XP1REC.SY1STNBR = AF0UW01.SY1STNBR; /* Restore start style*/
    ;
    AF0UW01.AF0UWUSR = " "; /* Clear start forecaster*/
    AF0UW01.AF0UWTYP = " "; /* Clear start xprcd*/
    AF0UW01.AF0UWGA = " "; /* Clear start xgacd*/
    AF0UW01.AF0UWSLN = " "; /* Clear start xplcd*/
    AF0UW01.AF0UWCAT = " "; /* Clear start xpccd*/
    AF0UW01.AF0UWSIL = " "; /* Clear start xsucd*/
    AF0UW01.AF0UWXOW = " "; /* Clear start xowcd*/
    AF0UW01.SY1STNBR = " "; /* Clear start style*/
    ;
    AF0UW01.AF0UWDPR = " "; /* Clear type desc*/
    AF0UW01.AF0UWDGA = " "; /* Clear g/a  desc*/
    AF0UW01.AF0UWDPL = " "; /* Clear line desc*/
    AF0UW01.AF0UWDPC = " "; /* Clear cat  desc*/
    AF0UW01.AF0UWDSL = " "; /* Clear sil  desc*/
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "230 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
end // end AF0U230

// Reset hilght flds; disp pop-up
Function AF0U240()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  AF0UM005.XXXPRCNM = "AF0U    "; /* Reset process name*/
  ;
  ;
  set AF0UM005.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0UM005.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end AF0U240

// Verify Entered Data
Function AF0U250()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or Scroll forward request*/
    ;
    AF0U251(); /* Verify scroll request*/
    ;
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors found*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  ;
end // end AF0U250

// Verify Scroll Rqeuest
Function AF0U251()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && AFWREC.AFWTSP < 2)          /* and no previous pages*/
    ;
    AFWREC.AFWPRCSN = "251 "; /* Process number*/
    AF0UM005.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AFWREC.AFWTSP >= AFWREC.TA5TSQIX) /* and no more pages*/
    ;
    AFWREC.AFWPRCSN = "251 "; /* Process number*/
    AF0UM005.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
  ;
end // end AF0U251

// Process Valid Request
Function AF0U260()
  ;
   /* ------------------------------------------------------------*/
   /* Scroll Request.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    AFWREC.AFWTSP = AFWREC.AFWTSP - 1; /* Decrement page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    AFWREC.AFWTSP = AFWREC.AFWTSP + 1; /* Increment page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Shift Screen Left request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Display af0uM001*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate Map 1 to process*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Display Option change request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf20) /* Change Display Option*/
    ;
    AFWREC.AFWSWR = "Y"; /* Reselect data*/
    ;
    if (AF0UW01.AF0UWDSO == "U") /* Display Option in units*/
      AF0UW01.AF0UWDSO = "D"; /* then display data in dollars*/
    else
      AF0UW01.AF0UWDSO = "U"; /* else display data in units(qtys)*/
    end
    ;
    AFWREC.AFWMAP = "1"; /* Indicate Map 1*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
end // end AF0U260

// Clear map detail area
Function AF0US01()
   /* ------------------------------------------------------------*/
   /* Protect,Darken AF0UM001 Map Detail Area.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 7) /* Process all season ranges*/
    ;
    set AF0UM001.AF0UMSDS[AFWIDX1] skip, invisible;
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  set AF0UM001.AF0UMORD skip, invisible; /* Map headings*/
  set AF0UM001.AF0UMHTO skip, invisible; /* Map headings*/
  set AF0UM001.AF0UMHTY skip, invisible;
  ;
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 4) /* Process all map shdgs/line totals*/
    ;
    set AF0UM001.AF0UMXOT[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMXTB[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMXTS[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMBT[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMST[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMBP[AFWIDX1] skip, invisible;
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  set AF0UM001.AF0UMTH[1] skip, invisible; /* Style total shdgs*/
  set AF0UM001.AF0UMTH[2] skip, invisible;
  set AF0UM001.AF0UMTH[3] skip, invisible;
  set AF0UM001.AF0UMTH[4] skip, invisible;
  ;
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 7) /* Process all map detail flds*/
    ;
    set AF0UM001.AF0UMB1[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMS1[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMB2[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMS2[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMB3[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMS3[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMB4[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMS4[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMTB[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMTS[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMDP[AFWIDX1] skip, invisible;
    set AF0UM001.AF0UMDS[AFWIDX1] skip, invisible;
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  set AF0UM001.AF0UMTBP skip, invisible;
  set AF0UM001.AF0UMTSP skip, invisible;
  set AF0UM001.AF0UMDPT skip, invisible;
  set AF0UM001.AF0UMDST skip, invisible;
  ;
  ;
end // end AF0US01

// Obtain XOT Sum Cd Address
Function AF0US02()
   /* ------------------------------------------------------------*/
   /* Obtain XOT Summary code address.*/
   /* If XOT Summary code not found in array store new code*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0UW01.AF0UWYSC in AF0UW01.AF0UWXOT) /* XOT sum cd in table*/
    AF0UW01.AF0UWYSI = sysVar.arrayIndex; /* Pass back index*/
  else
    AF0UW01.AF0UWMXP = AF0UW01.AF0UWMXP + 1; /* Store index*/
    AF0UW01.AF0UWXOT[AF0UWMXP] = AF0UW01.AF0UWYSC; /* Save*/
    AF0UW01.AF0UWYSI = AF0UW01.AF0UWMXP; /* Pass back index*/
  end
end // end AF0US02

// Edit Style no.
Function AF0US03()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *===========================**/
   /* *  Check Style for spaces   **/
   /* *===========================**/
  ;
  if (AF0UM001.SY1STNBR == " ") /* Style eq spaces*/
     /* MOVE ' ' TO XP1REC.SY1STNBR   ; To save area*/
     /* MOVE ' ' TO XP1REC.SY1SSTNM   ; To save area*/
    AF0UW01.SY1STNBR = " "; /* move to wk storage*/
    AF0UW01.AF0UWST1 = " "; /* move to wk storage*/
    AF0UW01.AF0UWST2 = " "; /* move to wk storage*/
    AF0UW01.AF0UWSTY = " "; /* move to wk storage*/
     /* MOVE ' ' TO AF0UW01.SY1SSTNM  ; space out description*/
    AF0UW01.AF0UWDSY = " "; /* space out description*/
    return; /* Return to calling process*/
  end
  ;
  ;
  AF0UW01.AF0UWSTY = AF0UM001.SY1STNBR; /* Save to wk map storage*/
  ;
   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/
  ;
  ;
  AF0US04(); /* Select set style*/
  ;
  AF0US05(); /* Validate style*/
  ;
  AF0US06(); /* Close style cursor*/
  ;
  ;
  ;
end // end AF0US03

// Select set style
Function AF0US04()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set PG2REC empty; /* Reset rec work area*/
  ;
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0UM001.SY1STNBR; /* Style no.*/
  ;
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0UW01.AF0UWCIN = "Y"; /* Data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S04 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0US04

// Process retrieved style
Function AF0US05()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
                     /* (Field is valid)*/
      AF0UW01.SY1STNBR = AF0UM001.SY1STNBR; /* Save to wk st*/
      ;
      if (AF0UM001.SY1STNBR == AF0UW01.AF0UWST2) /* save to alt wk stor*/
                       /* (same style being processed)*/
                       /* --- B U T ---*/
        if (AFWREC.AFWSWR == "Y") /* style is part of new keys entered*/
          AF0UW01.AF0UWST1 = AF0UM001.SY1STNBR; /* restore alt wk*/
        end
        ;
      else
        AF0UW01.AF0UWST1 = AF0UM001.SY1STNBR; /* restore alt wk*/
        AF0UW01.AF0UWST2 = AF0UM001.SY1STNBR; /* restore alt wk*/
      end
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
                    /* (Field in error)*/
      set AF0UM001.SY1STNBR cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 33; /* Indicate not found*/
      AFWREC.AFWPRCSN = "S05 "; /* Process number*/
      AF0UW01.SY1STNBR = " "; /* Space out wk storage*/
      return; /* Exit to calling rtn*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AF0UW01.AF0UWCIN = "Y"; /* data contention detected*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0US05

// Close style cursor
Function AF0US06()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  ;
  ;
end // end AF0US06

// Edit Silhouette cd
Function AF0US07()
  ;
  ;
  if (AF0UM001.XSUCD == " ") /* Field eq spaces*/
    AF0UW01.AF0UWSIL = " "; /* Space out save area*/
    AF0UW01.AF0UWDSL = " "; /* Space out save area*/
    AF0UM001.XSUABRV = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0UW01.AF0UWSIL = AF0UM001.XSUCD; /* save to wk map storage*/
  AF0UW01.AF0UWTCD = AF0UM001.XSUCD;
  AF0UW01.XGPCD = "03";
  ;
  ;
  if (AF0UW01.AF0UWTKY in XSUTBL.XSUKEY)
    ;
    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
                      /* (field is valid)*/
      if (AF0UM001.XSUCD == AF0UW01.AF0UWAS1) /* eq previous xsu*/
        ;
        AF0UW01.AF0UWDSL = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* to wk storage*/
        return; /* Exit to calling process*/
      else
        AF0UW01.AF0UWAS1 = AF0UM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUCD = AF0UM001.XSUCD; /* save to wk storage*/
        XP1REC.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex]; /* To wk storage*/
        XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0UW01.AF0UWDSL = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0UM001.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
        ;
      end
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S07 "; /* Process number*/
  set AF0UM001.XSUCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  AF0UW01.AF0UWDSL = " "; /* To wk storage*/
  AF0UM001.XSUABRV = " "; /* To wk storage*/
  ;
  ;
  ;
end // end AF0US07

// Edit Category cd
Function AF0US08()
  ;
  ;
  if (AF0UM001.XPCCD == " ") /* Map fld spaces*/
    AF0UW01.AF0UWCAT = " "; /* Space out save area*/
    AF0UW01.AF0UWDPC = " "; /* Space out save area*/
    AF0UM001.XPCABRV = " "; /* Space out map desc*/
    return; /* Return to calling routine*/
  end
  ;
  AF0UW01.AF0UWCAT = AF0UM001.XPCCD; /* save to wk map storage*/
  AF0UW01.AF0UWTCD = AF0UM001.XPCCD;
  AF0UW01.XGPCD = "03";
  ;
  ;
  if (AF0UW01.AF0UWTKY in XPCTBL.XPCKEY)
    ;
    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
                       /* (field is valid)*/
      if (AF0UM001.XPCCD == AF0UW01.AF0UWAP1) /* To wk storage*/
        AF0UW01.AF0UWDPC = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* to wk storage*/
        return; /* Exit to calling process*/
      else
        AF0UW01.AF0UWAP1 = AF0UM001.XPCCD; /* Eq previous XPC*/
        XP1REC.XPCCD = AF0UM001.XPCCD; /* Save wk storage*/
        XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex]; /* To wk storage*/
        XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0UW01.AF0UWDPC = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0UM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S08 "; /* Process number*/
  set AF0UM001.XPCCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 35; /* indicate error message*/
  AF0UW01.AF0UWDPC = " "; /* To wk storage*/
  AF0UM001.XPCABRV = " "; /* To wk storage*/
  ;
  ;
  ;
end // end AF0US08

// Edit Gender/Age cd
Function AF0US09()
  ;
  if (AF0UM001.XGACD == " ") /* Field eq spaces*/
    AF0UW01.AF0UWGA = " "; /* Space out save area*/
    AF0UW01.AF0UWDGA = " "; /* Space out save desc*/
    AF0UM001.XGAABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end
  ;
  AF0UW01.AF0UWGA = AF0UM001.XGACD; /* save to wk map storage*/
  AF0UW01.AF0UWTKY = AF0UM001.XGACD;
  AF0UW01.XGPCD = "03";
  ;
  ;
  if (AF0UW01.AF0UWTKY in XGATBL.XGAKEY)
    ;
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
                      /* (field is valid)*/
      if (AF0UM001.XGACD == AF0UW01.AF0UWAG1) /* eq previous xgae*/
        AF0UW01.AF0UWDGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* to wk storage*/
        return; /* Exit to calling process*/
      else
        AF0UW01.AF0UWAG1 = AF0UM001.XGACD; /* save to wk storage*/
        XP1REC.XGACD = AF0UM001.XGACD; /* save to wk storage*/
        XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* To wk storage*/
        XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0UW01.AF0UWDGA = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0UM001.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S09 "; /* Process number*/
  set AF0UM001.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  AF0UW01.AF0UWDGA = " "; /* space out save desc*/
  AF0UM001.XGAABRV = " "; /* space out map desc*/
  ;
  ;
  ;
end // end AF0US09

// Edit Season yr
Function AF0US10()
  ;
  AF0UW01.AF0UWXSY = 0; /* initialize xsnyr wk area*/
  AF0UW01.AF0UWXSY = AF0UM001.XSNYR; /* move to wk area*/
  AF0UW01.AF0UWXSY = AF0UW01.AF0UWXSY + 1900; /* move century*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0UW01.AF0UWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF0UW01.AF0UWXSY; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S10 "; /* Process number*/
  set AF0UM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/
end // end AF0US10

// Edit Season cd
Function AF0US11()
  if (AF0UM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0UM001.XSECD; /* save to working storage*/
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S11 "; /* Process number*/
    set AF0UM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/
  end
  ;
  AF0UW01.AF0UWXSS = " "; /* Initialize wk area*/
  AF0UW01.AF0UWXYR = +0; /* Initialize wk area*/
  ;
  AF0UW01.AF0UWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  XP1REC.XP1XSNYR = XP1REC.XSNYR; /* Redefine season yr*/
  AF0UW01.AF0UWXYR = XP1REC.XP1XSNYY; /* Format wk area*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0UW01.AF0UWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF0UW01.AF0UWXSY; /* save to working storage*/
      AF0UW01.XSNBDT = YSNTBL.XSN-SESN-BDT[AFWIDX5]; /* Save to wk*/
      AF0UW01.XSNXDT = YSNTBL.XSN-SESN-XDT[AFWIDX5]; /* Save to wk*/
      AF0UW01.AF0UW-WK-BDT = YSNTBL.XSN-SESN-BDT[AFWIDX5];
      AF0UW01.AF0UW-WK-XDT = YSNTBL.XSN-SESN-XDT[AFWIDX5];
      AF0US19();
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (not an apparel season)*/
  AFWREC.AFWPRCSN = "S11 "; /* Process number*/
  set AF0UM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/
  XP1REC.XP1XSNYR = 0; /* Zero-out save area*/
end // end AF0US11

// close dacast.vafsty01 cursor
Function AF0US12()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VAFSTY01 **/
   /* *=========================**/
  ;
  try
    call "IO3510" ("CS", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return;
    ;
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S12 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0UM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  exit stack; /* exit to redisplay map*/
  ;
  ;
  ;
end // end AF0US12

// calculate grand totals/pcents
Function AF0US13()
  ;
   /* ------------------------------------------------------------*/
   /* Calculate Bookings and Shipped grand totals.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 12) /* Process all months*/
    AF0UW03.AF0UWTBP = AF0UW03.AF0UWTBP + AF0UW03.AF0UWTB[AFWIDX1];
    AF0UW03.AF0UWTSP = AF0UW03.AF0UWTSP + AF0UW03.AF0UWTS[AFWIDX1];
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate Bookings and Shipped percentages.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 12) /* Process all months*/
    ;
    if (AF0UW03.AF0UWTBP != 0)
      AF0UW01.AF0UWPC1 = mathLib.round(AF0UW03.AF0UWTB[AFWIDX1] / AF0UW03.AF0UWTBP, -mathLib.decimals(AF0UW01.AF0UWPC1));
    else
      AF0UW03.AF0UWTBP = 0;
      AF0UW01.AF0UWPC1 = 0;
    end
    ;
    AF0UW03.AF0UWDP[AFWIDX1] = mathLib.round(AF0UW01.AF0UWPC1 * 100, -mathLib.decimals(AF0UW03.AF0UWDP[AFWIDX1])); /* Bookings*/
    AF0UW03.AF0UWDPT = AF0UW03.AF0UWDPT + AF0UW03.AF0UWDP[AFWIDX1];
    ;
    if (AF0UW03.AF0UWTSP != 0)
      AF0UW01.AF0UWPC2 = mathLib.round(AF0UW03.AF0UWTS[AFWIDX1] / AF0UW03.AF0UWTSP, -mathLib.decimals(AF0UW01.AF0UWPC2));
    else
      AF0UW03.AF0UWTSP = 0;
      AF0UW01.AF0UWPC2 = 0;
    end
    ;
    AF0UW03.AF0UWDS[AFWIDX1] = mathLib.round(AF0UW01.AF0UWPC2 * 100, -mathLib.decimals(AF0UW03.AF0UWDS[AFWIDX1])); /* Shipped*/
    AF0UW03.AF0UWDST = AF0UW03.AF0UWDST + AF0UW03.AF0UWDS[AFWIDX1];
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0US13

// Edit Division cd
Function AF0US14()
  ;
  if (AF0UM001.XDVCD == " ") /* Map fld spaces*/
    AF0UW01.AF0UWDIV = " "; /* Space out save area*/
    XP1REC.XDVCD = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end
  ;
  AF0UW01.AF0UWDIV = AF0UM001.XDVCD; /* save to wk map storage*/
  ;
  ;
  if (AF0UM001.XDVCD in XDVTBL.XDVCD /* If division is valid*/
   || AF0UM001.XDVCD == "05")        /* or equal to 05 then process*/
    ;
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || AF0UM001.XDVCD == "05")                  /* Process 05 Division codes*/
      ;
                       /* (field is valid)*/
      AF0UW01.AF0UWDIV = AF0UM001.XDVCD; /* save to wk storage*/
      XP1REC.XDVCD = AF0UM001.XDVCD; /* save to wk storage*/
      XP1REC.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S14 "; /* Process number*/
  set AF0UM001.XDVCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  ;
  ;
  ;
end // end AF0US14

// Edit Product Line cd
Function AF0US15()
  ;
  if (AF0UM001.XPLCD == " ") /* Field eq spaces*/
    AF0UW01.AF0UWSLN = " "; /* Space out save fld*/
    AF0UW01.AF0UWDPL = " "; /* Space out save abrv*/
    AF0UM001.XPLABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end
  ;
  AF0UW01.AF0UWSLN = AF0UM001.XPLCD; /* save to wk map storage*/
  ;
  ;
  if (AF0UM001.XPLCD in XPLTBL.XPLCD)
    ;
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
      ;
                      /* (field is valid)*/
      if (AF0UM001.XPLCD == AF0UW01.AF0UWAL1) /* EQ PREVIOUS XPL*/
        AF0UW01.AF0UWDPL = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* to wk storage*/
        return; /* Exit to calling process*/
      else
        AF0UW01.AF0UWAL1 = AF0UM001.XPLCD; /* SAVE TO WK STORAGE*/
        XP1REC.XPLCD = AF0UM001.XPLCD; /* SAVE TO WK STORAGE*/
        AF0UW01.AF0UWDPL = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* to wk storage*/
        XP1REC.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex]; /* To wk storage*/
        XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0UM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* to map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S15 "; /* Process number*/
  set AF0UM001.XPLCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  AF0UW01.AF0UWDPL = " "; /* Space out save abrv*/
  AF0UM001.XPLABRV = " "; /* Space out map abrv*/
  ;
  ;
  ;
end // end AF0US15

// Edit Product Type cd
Function AF0US16()
  ;
  if (AF0UM001.XPRCD == " ") /* Field eq spaces*/
    AF0UW01.AF0UWTYP = " "; /* Space out save area*/
    AF0UW01.AF0UWDPR = " "; /* Space out save abrv*/
    AF0UM001.XPRABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end
  ;
  AF0UW01.AF0UWTYP = AF0UM001.XPRCD; /* save to wk map storage*/
  ;
  ;
  if (AF0UM001.XPRCD in XPRTBL.XPRCD)
    ;
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      ;
                      /* (field is valid)*/
      if (AF0UM001.XPRCD == AF0UW01.AF0UWAT1) /* eq previous xpr*/
        AF0UW01.AF0UWDPR = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* to wk storage*/
        return; /* Exit to calling process*/
      else
        AF0UW01.AF0UWAT1 = AF0UM001.XPRCD; /* save to wk storage*/
        XP1REC.XPRCD = AF0UM001.XPRCD; /* save to wk storage*/
        XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0UW01.AF0UWDPR = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
        AF0UM001.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To map*/
        return; /* Exit to calling process*/
      end
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S16 "; /* Process number*/
  set AF0UM001.XPRCD cursor, bold; /* Highlight field*/
  XP1REC.XP1MNO = 80; /* Indicate error message*/
  AF0UW01.AF0UWDPL = " "; /* Space out save abrv*/
  AF0UM001.XPRABRV = " "; /* Space out map abrv*/
  ;
  ;
  ;
end // end AF0US16

// Check if style qualified
Function AF0US17()
  ;
  if (AF0UW01.SY1STNBR != " ") /* Specific style entered*/
    ;
    if (AF2REC.SY1STNBR == AF0UW01.SY1STNBR) /* The style specified*/
      ;
      if (AF0UW01.AF0UWSIL != " ") /* XSUCD specified*/
        if (AF0UW01.AF0UWSIL == XP1REC.XSUCD) /* Comb.match with criteria*/
                        /* (XSUCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0UW01.AF0UWCAT != " ") /* XPCCD specified*/
        if (AF0UW01.AF0UWCAT == XP1REC.XPCCD) /* Comb.match with criteria*/
                        /* (XPCCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0UW01.AF0UWSLN != " ") /* XPLCD specified*/
        if (AF0UW01.AF0UWSLN == XP1REC.XPLCD) /* Comb.match with criteria*/
                        /* (XPLCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0UW01.AF0UWGA != " ") /* XGACD specified*/
        if (AF0UW01.AF0UWGA == XP1REC.XGACD) /* Comb.match with criteria*/
                        /* (XGACD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      if (AF0UW01.AF0UWTYP != " ") /* XPRCD specified*/
        if (AF0UW01.AF0UWTYP == XP1REC.XPRCD) /* Comb.match with criteria*/
                        /* (XPRCD valid)*/
        else
          return; /* ****** EXIT to get next style*/
        end
      end
      ;
      AF0UW01.AF0UWST1 = " "; /* Indicate style for processing*/
      AF0UW01.AF0UWSQU = "Y"; /* Style qualified*/
      ;
    else
      ;
      if (AF0UW01.AF0UWST1 == " ") /* Specified style already processed*/
                   /* (Style retrieved is valid)*/
        AF0UW01.AF0UWSQU = "Y"; /* Style qualified*/
        ;
      else
        ;
        return; /* ****** EXIT to get next style*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
  if (AF0UW01.SY1STNBR == " " /* Specific style not entered*/
   && AF2REC.SY1STNBR != " ") /* A valid style has been entered*/
    ;
    AF0UW01.AF0UWST1 = " "; /* Indicate style for processing*/
    AF0UW01.AF0UWSQU = "Y"; /* Style qualified*/
    ;
  end
  ;
       /* (check style if qualified per carryover option)*/
  ;
   /* AF0US18                 ; Select style from DPRODG.VSYCLR01*/
   /* AF0US19                  ; Fetch first DPRODG.VSYCLR01 row*/
   /* AF0US20                      ; Close DPRODG.VSYCLR01 cursor*/
  ;
  ;
  ;
  ;
  ;
end // end AF0US17

// Fill month buckets
Function AF0US19()
  ;
  move 0 to AF0UW-MO-TBLE[1] for all;
  move " " to AF0UW-MO-DESC[1] for all;
  ;
  AF0UW-FIRST-MO = AF0UW01.AF0UW-BDT-YYMM;
  AF0UW-LAST-MO = AF0UW01.AF0UW-XDT-YYMM;
  AF0UW-MO-TBLE[1] = AF0UW01.AF0UW-BDT-MM;
  ;
  AFWREC.AFWIDX1 = 1;
  ;
  AF0UW-WK-BDT = AF0UW-WK-BDT + 31;
  ;
  while (AF0UW-WK-BDT < AF0UW-WK-XDT
   && AFWIDX1 < 10)
    AF0UW-BDT-MM = AF0UW-BDT-MM + 1;
    if (AF0UW-BDT-MM == 13)
      AF0UW-BDT-MM = 1;
      AF0UW-WK-BDT = AF0UW-WK-BDT + 10000;
    end
    AFWIDX1 = AFWIDX1 + 1;
    AF0UW-MO-TBLE[AFWIDX1] = AF0UW01.AF0UW-BDT-MM;
  end
  ;
  move AFWIDX1 to AF0UW-MONTH-MAX withV60Compat;
  AF0UW01.AF0UW-LATE-MO = AF0UW-MONTH-MAX + 2;
  ;
  AFWREC.AFWIDX1 = 1;
  ;
  while (AFWIDX1 <= 10)
    if (AF0UW-MO-TBLE[AFWIDX1] == 1)
      AF0UW-MO-DESC[AFWIDX1] = "JAN";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 2)
      AF0UW-MO-DESC[AFWIDX1] = "FEB";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 3)
      AF0UW-MO-DESC[AFWIDX1] = "MAR";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 4)
      AF0UW-MO-DESC[AFWIDX1] = "APR";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 5)
      AF0UW-MO-DESC[AFWIDX1] = "MAY";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 6)
      AF0UW-MO-DESC[AFWIDX1] = "JUN";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 7)
      AF0UW-MO-DESC[AFWIDX1] = "JUL";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 8)
      AF0UW-MO-DESC[AFWIDX1] = "AUG";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 9)
      AF0UW-MO-DESC[AFWIDX1] = "SEP";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 10)
      AF0UW-MO-DESC[AFWIDX1] = "OCT";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 11)
      AF0UW-MO-DESC[AFWIDX1] = "NOV";
    end
    if (AF0UW-MO-TBLE[AFWIDX1] == 12)
      AF0UW-MO-DESC[AFWIDX1] = "DEC";
    end
    AFWIDX1 = AFWIDX1 + 1;
  end
end // end AF0US19

// Edit Forecaster cd
Function AF0US21()
  ;
  ;
  if (AF0UM001.PG1FCTCD == " ") /* Eq spaces*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    AF0UW01.AF0UWUSR = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0UW01.AF0UWUSR = AF0UM001.PG1FCTCD; /* Move to wk map storage*/
  ;
  ;
   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/
  ;
  set PG1REC empty; /* Clear row storage area*/
  ;
  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0UM001.PG1FCTCD; /* Forecaster id*/
  ;
  ;
   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/
  ;
  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0UM001.PG1FCTCD cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S21 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      XP1REC.XXXUSER = " "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/
      ;
      /* ***** EXIT PROCESS HERE ******/
      ;
    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AF0UW01.AF0UWCIN = "Y"; /* Data contention detected*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.XXXUSER = AF0UM001.PG1FCTCD; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/
          ;
          /* ***** EXIT PROCESS HERE ******/
          ;
        end
      end
    end
  end
  ;
   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0U12 "; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0UM001.PG1FCTCD; /* MOVE SIGNON to ERROR-DIAG*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0US21

// Edit Owner Group Cd
Function AF0US22()
  ;
  if (AF0UM001.XOWCD == AF0UW01.AF0UWXOW) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end
  ;
  if (AF0UM001.XOWCD == " ") /* Map fld eq spaces*/
    AF0UW01.AF0UWXOW = " "; /* Space out save fld*/
    XP1REC.XOWCD = " ";
    return; /* Return to calling process*/
  else
    XP1REC.XWHCD = "51"; /* wharehouse code*/
    XP1REC.XOWCD = AF0UM001.XOWCD; /* Owner Group Cd*/
    ;
    if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
      AF0UW01.AF0UWXOW = AF0UM001.XOWCD; /* save to wk storage*/
      return; /* Exit to calling process*/
    end
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S22 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  set AF0UM001.XOWCD cursor, bold; /* highlight field*/
  ;
  ;
  ;
end // end AF0US22

// Clear Current Fields
Function AF0US23()
  ;
      /* clear current fields*/
  ;
  XP1REC.XDVCD = " ";
  XP1REC.XPRCD = " ";
  XP1REC.XGACD = " ";
  XP1REC.XPLCD = " ";
  XP1REC.XPCCD = " ";
  XP1REC.XSUCD = " ";
  XP1REC.XOWCD = " ";
  XP1REC.SY1STNBR = " ";
end // end AF0US23

//*** RECORD=AF0UW01 ****
// Working Storage (1) for AF0U - Program-defined Variables
// ***********************
Record AF0UW01 type basicRecord
  10 AF0UWAFD AF0UWAFD ; 
    15 AF0UWAFY AF0UWAFY ; 
    15 AF0UWAFM AF0UWAFM ; 
  10 AF0UWDSO AF0UWDSO ; 
  10 AF0UWEOF AF0UWEOF ; 
  10 AF0UWSQU AF0UWSQU ; 
  10 AF0UW-MO-DESC AF0UW-MO-DESC [10] ; 
  10 AF0UW-MO-TBLE AF0UW-MO-TBLE [10] ; 
  10 AF0UW-MONTH-MAX AF0UW-MONTH-MAX ; 
  10 AF0UW-LATE-MO AF0UW-LATE-MO ; 
  10 AF0UW-FIRST-MO AF0UW-FIRST-MO ; 
  10 AF0UW-LAST-MO AF0UW-LAST-MO ; 
  10 AF0UWUSR AF0UWUSR ; 
  10 AF0UWDIV AF0UWDIV ; 
  10 AF0UWTYP AF0UWTYP ; 
  10 AF0UWGA AF0UWGA ; 
  10 AF0UWSLN AF0UWSLN ; 
  10 AF0UWCAT AF0UWCAT ; 
  10 AF0UWSIL AF0UWSIL ; 
  10 AF0UWXOW AF0UWXOW ; 
  10 AF0UWSTY AF0UWSTY ; 
  10 AF0UWDSL AF0UWDSL ; 
  10 AF0UWDPC AF0UWDPC ; 
  10 AF0UWDGA AF0UWDGA ; 
  10 AF0UWDPR AF0UWDPR ; 
  10 AF0UWDPL AF0UWDPL ; 
  10 AF0UWMXP AF0UWMXP ; 
  10 AF0UWPC1 AF0UWPC1 ; 
  10 AF0UWPC2 AF0UWPC2 ; 
  10 AF0UWPCT AF0UWPCT ; 
  10 AF0UWPND AF0UWPND ; 
  10 AF0UWPRC AF0UWPRC ; 
  10 AF0UWQT1 AF0UWQT1 ; 
  10 AF0UWQT2 AF0UWQT2 ; 
  10 AF0UWQT3 AF0UWQT3 ; 
  10 AF0UWQT4 AF0UWQT4 ; 
  10 AF0UWQT5 AF0UWQT5 ; 
  10 AF0UWQT6 AF0UWQT6 ; 
  10 AF0UWQT7 AF0UWQT7 ; 
  10 AF0UWSIX AF0UWSIX ; 
  10 AF0UWTBK AF0UWTBK ; 
  10 AF0UWXOT AF0UWXOT [20] ; 
  10 AF0UWYRC AF0UWYRC ; 
  10 AF0UWXSY AF0UWXSY ; 
  10 AF0UWXSA AF0UWXSA ; 
    15 AF0UWXSS AF0UWXSS ; 
    15 AF0UWXYR AF0UWXYR ; 
  10 AF0UWYR AF0UWYR ; 
  10 AF0UWYSC AF0UWYSC ; 
  10 AF0UWYSI AF0UWYSI ; 
  10 AF0UWCIN AF0UWCIN ; 
  10 AF0UWCMS AF0UWCMS ; 
  10 AF0UWCVF AF0UWCVF ; 
  10 AF0UWCRY AF0UWCRY ; 
  10 AF0UWCV2 AF0UWCV2 ; 
  10 AF0UWSYK AF0UWSYK ; 
  10 AF0UWOGK AF0UWOGK ; 
  10 AF0UWDSY AF0UWDSY ; 
  10 AF0UWLCT AF0UWLCT ; 
  10 AF0UWCSY AF0UWCSY ; 
  10 SY1STNBR SY1STNBR ; 
  10 AF0UWXGA AF0UWXGA ; 
  10 AF0UWAG1 AF0UWAG1 ; 
  10 AF0UWXPL AF0UWXPL ; 
  10 AF0UWAL1 AF0UWAL1 ; 
  10 AF0UWXPC AF0UWXPC ; 
  10 AF0UWAP1 AF0UWAP1 ; 
  10 AF0UWXSU AF0UWXSU ; 
  10 AF0UWAS1 AF0UWAS1 ; 
  10 AF0UWXPR AF0UWXPR ; 
  10 AF0UWAT1 AF0UWAT1 ; 
  10 AF0USQUR AF0USQUR ; 
  10 AF0UWLIM AF0UWLIM ; 
  10 AFWSWR AFWSWR ; 
  10 AF0UWST1 AF0UWST1 ; 
  10 AF0UWST2 AF0UWST2 ; 
  10 XSNBDT XSNBDT ; 
  10 XSNXDT XSNXDT ; 
  10 AF0UW-WK-BDT AF0UW-WK-BDT ; 
    15 * num(3) ; 
    15 AF0UW-BDT-YYMM AF0UW-BDT-YYMM ; 
      20 * num(2) ; // Work BDT Month
      20 AF0UW-BDT-MM AF0UW-BDT-MM ; 
    15 * num(2) ; 
  10 AF0UW-WK-XDT AF0UW-WK-XDT ; 
    15 * num(3) ; 
    15 AF0UW-XDT-YYMM AF0UW-XDT-YYMM ; 
      20 * num(2) ; // Work BDT Month
      20 AF0UW-XDT-MM AF0UW-XDT-MM ; 
    15 * num(2) ; 
  10 AF0UWTKY AF0UWTKY ; 
    15 AF0UWTCD AF0UWTCD ; 
    15 XGPCD XGPCD ; 
end // end AF0UW01

//*** RECORD=AF0UW02 ****
// Working Storage (2) for AF0U - Map field work areas
// ***********************
Record AF0UW02 type basicRecord
  10 AF0UWLEN AF0UWLEN ; 
  10 AF0UWLID AF0UWLID [5] ; 
  10 AF0UWXOD AF0UWXOD [5] ; 
  10 * char(3) ; 
  10 AF0UWB1 AF0UWB1 [12] ; 
  10 AF0UWS1 AF0UWS1 [12] ; 
  10 AF0UWB2 AF0UWB2 [12] ; 
  10 AF0UWS2 AF0UWS2 [12] ; 
  10 AF0UWB3 AF0UWB3 [12] ; 
  10 AF0UWS3 AF0UWS3 [12] ; 
  10 AF0UWB4 AF0UWB4 [12] ; 
  10 AF0UWS4 AF0UWS4 [12] ; 
  10 AF0UWB5 AF0UWB5 [12] ; 
  10 AF0UWS5 AF0UWS5 [12] ; 
  10 * char(3) ; 
  10 AF0UWBT AF0UWBT [5] ; 
  10 AF0UWST AF0UWST [5] ; 
  10 AF0UWBP AF0UWBP [5] ; 
end // end AF0UW02

//*** RECORD=AF0UW03 ****
// Working Storage (3) for AF0U - Grand total areas
// ***********************
Record AF0UW03 type basicRecord
  10 AF0UWTB AF0UWTB [12] ; 
  10 AF0UWTS AF0UWTS [12] ; 
  10 AF0UWDP AF0UWDP [12] ; 
  10 AF0UWDS AF0UWDS [12] ; 
  10 * char(3) ; 
  10 AF0UWTBP AF0UWTBP ; 
  10 AF0UWTSP AF0UWTSP ; 
  10 AF0UWDPT AF0UWDPT ; 
  10 AF0UWDST AF0UWDST ; 
end // end AF0UW03

//*** RECORD=AF0UW04 ****
// Working Storage (4) for AF0U - XOT Summary data arrays
// ***********************
Record AF0UW04 type basicRecord
  5 AF0UWSDA AF0UWSDA [20] ; 
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
    10 * num(9) ; // Numeric holding area
end // end AF0UW04

//*** RECORD=AF0UW05 ****
// Working Storage (5) for AF0U - XOT Summary data description
// ***********************
Record AF0UW05 type basicRecord
  5 AF0UWSMX AF0UWSMX ; 
    10 AF0UWSBK AF0UWSBK [12] ; 
    10 AF0UWSSH AF0UWSSH [12] ; 
end // end AF0UW05

// style quality flag
DataItem AF0USQUR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work BDT Month
DataItem AF0UW-BDT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work BDT Month
DataItem AF0UW-BDT-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first month
DataItem AF0UW-FIRST-MO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first month
DataItem AF0UW-LAST-MO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lt Month Bucket Pointer
DataItem AF0UW-LATE-MO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month Range Desc
DataItem AF0UW-MO-DESC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month Range Table
DataItem AF0UW-MO-TBLE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max Month Bucket Pointer
DataItem AF0UW-MONTH-MAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN-APRL-SESN-BDT WK
DataItem AF0UW-WK-BDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN-APRL-SESN-XDT WK
DataItem AF0UW-WK-XDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work XDT Month
DataItem AF0UW-XDT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work BDT Month
DataItem AF0UW-XDT-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AF month wk area
DataItem AF0UWAFD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AF month
DataItem AF0UWAFM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AF year
DataItem AF0UWAFY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alternate start xgacd
DataItem AF0UWAG1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// alternate start xplcd
DataItem AF0UWAL1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// alternate start xpccd
DataItem AF0UWAP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate start xsucd
DataItem AF0UWAS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// alternate start xprcd
DataItem AF0UWAT1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Booked  line 1
DataItem AF0UWB1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked  line 2
DataItem AF0UWB2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked  line 3
DataItem AF0UWB3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked  line 4
DataItem AF0UWB4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked  line 5
DataItem AF0UWB5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked line pcents
DataItem AF0UWBP int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Booked line totals
DataItem AF0UWBT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Start category save
DataItem AF0UWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data contention indicator
DataItem AF0UWCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// G/A,CAT,SIL COMB. FLAG
DataItem AF0UWCMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carryover flag
DataItem AF0UWCRY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current style counter
DataItem AF0UWCSY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// carryover flag (internal)
DataItem AF0UWCV2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carryover found flag
DataItem AF0UWCVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start gender/age desc
DataItem AF0UWDGA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start division save
DataItem AF0UWDIV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Booked style percentages
DataItem AF0UWDP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start category desc
DataItem AF0UWDPC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start product line desc
DataItem AF0UWDPL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start product type desc
DataItem AF0UWDPR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Booked pcent grand total
DataItem AF0UWDPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Shipped style percentages
DataItem AF0UWDS bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start silhouette desc
DataItem AF0UWDSL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data display option
DataItem AF0UWDSO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipped pcent grand total
DataItem AF0UWDST bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// start style desc
DataItem AF0UWDSY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End-of-File indicator
DataItem AF0UWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start gender/age save
DataItem AF0UWGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record retrieve loop ctr.
DataItem AF0UWLCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ Length
DataItem AF0UWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line data indicator
DataItem AF0UWLID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style read ctr loop limit
DataItem AF0UWLIM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Max XOT Sum cd index
DataItem AF0UWMXP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Select XOW_OWN_GRP_CD KEY
DataItem AF0UWOGK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk pct 1
DataItem AF0UWPC1 bin(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk pct 2
DataItem AF0UWPC2 bin(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk display pcent
DataItem AF0UWPCT num(6,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0UWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved unit price
DataItem AF0UWPRC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 1
DataItem AF0UWQT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 2
DataItem AF0UWQT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 3
DataItem AF0UWQT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 4
DataItem AF0UWQT4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 5
DataItem AF0UWQT5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 6
DataItem AF0UWQT6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk calc fld 7
DataItem AF0UWQT7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped line 1
DataItem AF0UWS1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped line 2
DataItem AF0UWS2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped line 3
DataItem AF0UWS3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped line 4
DataItem AF0UWS4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped line 5
DataItem AF0UWS5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XOT Booked summary data
DataItem AF0UWSBK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XOT Summary data table
DataItem AF0UWSDA char(216)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette save
DataItem AF0UWSIL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Store index save area
DataItem AF0UWSIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start product line save
DataItem AF0UWSLN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOT Summary data
DataItem AF0UWSMX char(216)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Qualify Flag
DataItem AF0UWSQU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOT Shipped summary data
DataItem AF0UWSSH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped line totals
DataItem AF0UWST int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// alternate style number 1
DataItem AF0UWST1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// alternate style number 2
DataItem AF0UWST2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style save
DataItem AF0UWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style select wk key
DataItem AF0UWSYK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Booked style totals
DataItem AF0UWTB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total bookings wk
DataItem AF0UWTBK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked grand totals
DataItem AF0UWTBP int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// table code value
DataItem AF0UWTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table key
DataItem AF0UWTKY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipped style totals
DataItem AF0UWTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipped grand totals
DataItem AF0UWTSP int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Start product type save
DataItem AF0UWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start xxxuser save
DataItem AF0UWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal start xgacd
DataItem AF0UWXGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOT sum description
DataItem AF0UWXOD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOT summary cd table
DataItem AF0UWXOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOW_OWN_GRP_CD
DataItem AF0UWXOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal start xpccd
DataItem AF0UWXPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal start xplcd
DataItem AF0UWXPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal start xprcd
DataItem AF0UWXPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0UWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0UWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal start xsucd
DataItem AF0UWXSU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0UWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0UWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wk season yr
DataItem AF0UWYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season yr comparison field
DataItem AF0UWYRC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XOT Sum cd pass argument
DataItem AF0UWYSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOT Sum cd passed index
DataItem AF0UWYSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

