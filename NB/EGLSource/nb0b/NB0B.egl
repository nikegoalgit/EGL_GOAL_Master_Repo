package nb0b;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XBCCD;
import corpx1.XCTTBL;
import corpx1.XSTTBL;
import corpx2.XNXCD;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KUGREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ku.common.KUZREC;
import nb.common.NB1AAFL;
import nb.common.NB1CFREQ;
import nb.common.NB1CMBFL;
import nb.common.NB1CPFL;
import nb.common.NB1CRADR;
import nb.common.NB1CTPH;
import nb.common.NB1FCFL;
import nb.common.NB1GRPCD;
import nb.common.NB1PAYFL;
import nb.common.NB1REC;
import nb.common.NB1SFREQ;
import nb.common.NB1STADR;
import nb.common.NB1TDFL;
import nb.common.NB5REC;
import nb.common.NB8REC;
import nb.common.NB8TEXT;
import nb.common.NB8TXSEQ;
import ta.common.TA1REC;
//*** PROGRAM=NB0B ****
// 
//  *********      NB0B: nike bank system         *************
//                     bank customer master
// 
// 
// PURPOSE: to display customer related data.
// 
// 
// NARRATIVE:
//    each customer who can participate in any nike bank
//    program has a customer master.  this customer master
//    contains information about the customer's status,
//    credit and statement information, and which ad programs
//    this customer is active in.
// 
// 
// 
//   MAINTENANCE HISTORY:
// 
//    date    name    description
//  --------  ------  --------------------------------------
//  12-07-87  sjob    creation........
//  03-02-88  sjob    changed pfkeys to standard bank pf's
//  10-20-88  sjob    add a customer notes yes/no field.
//  11-21-88  sjob    change length of customer from 8 to 7
//   1-24-89  sjob    (e45) delete from screen:
//                        df,aa,td, & co-op flags.
//   3-30-89  sjob    add division of '01' (domestic)
//   4-04-89  sjob    support multiple divisions.
//   4-26-89  jwood   added noncsp option to calls
//   4-26-89  jwood   added xssegtr logic
//   4-04-90  s.job   e65:support multiple sales reps
//   4-23-90  s.job   e13:activate the statement information.
//   6-11-90  s.job   e0: display 'brand' on map only- convert
//                        database in september.
//   9-11-90  s.job   B1: DISPLAY STATEMENT ADDRESS EVEN WHEN
//                        A CREDIT ADDRESS IS UNAVAILABLE.
//  10-11-90  s.job   E0:DB CHANGES- ADD BRAND TO BANK CUSTOMER
//  05-23-91  s.job   E0:fix stat. zip codes starting with 0
//  06-03-91  s.job   E0:fix credit zip codes starting with 0
//  07-24-91  s.job   E83:ability to only inactivate accounts
//                        with a store or dept > 0.
//  10-27-93  lgross  added numeric checks when entering from
//                    fastpaths. changed: nb0b000, nb0bw01
// ************************************************************
// 
// 
// *********************
Program NB0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KUCREC KUCREC; // record
  KUGREC KUGREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUZREC KUZREC; // record
  NB0BW01 NB0BW01; // record
  NB0BW02 NB0BW02; // record
  NB1REC NB1REC; // record
  NB5REC NB5REC; // record
  NB8REC NB8REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSTTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use NB0BM.NB0BM001,  // forms
      NB0BM.NB0BM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NB0B000: NB0B000();
    ;
    goto NB0B050;
    ;
    ;
    ;
    NB0B050: NB0B050();
    ;
    ;
    if (converseVar.validationMsgNum == 0 /* no errors.....*/
     && converseVar.eventKey is pf17      /* trans.to cust.inst.*/
     && NB0BW01.NB0BW1SW == "Y")          /* a nb1rec exists for cust.*/
      ;
      NB0BW02.NB0BWUFL = "Y"; /* update flag*/
      NB0BW02.NB0BWSCF = "N"; /* modify display window-flag*/
      NB0BM002.XXXRVNBR = "01"; /* revision number*/
      NB0BW02.NB0BWSDF = 1; /* screen display (1-14),(15-28)*/
      NB0BM002.XXXERRID = "NB0BA30"; /* initial map display proc.*/
      NB0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* date*/
      ;
      goto NB0B910;
    else
      goto NB0B050; /* continue this loop.*/
    end
    ;
    ;
    ;
    NB0B910: NB0B910();
    ;
    ;
    if (converseVar.eventKey is pf3 /* exit*/
     || converseVar.eventKey is pf16) /* customer*/
      goto NB0B050;
    else
      goto NB0B910;
    end
    ;
    ;
    ;
  end // end main
end // end NB0B

// initial process
Function NB0B000()
  ;
   /* ----------------------------------------------------------*/
   /* initialization process....*/
   /* 10/27/93  lgross Added numeric check for customer id, department*/
   /* and store*/
   /* ----------------------------------------------------------*/
  XSENTRY();
  XSSEGTR(); /* set segmented transaction id*/
  ;
  ;
  set NB0BM001 empty; /* ; clear maps & work record*/
  set NB0BM002 empty;
  set NB0BW01 empty;
  set NB0BW02 empty;
  set SQLCA empty;
  ;
  ;
  ;
  if (COMMAREA.CAITEM > " ")
    NB0BW01.NB0BWCAI = COMMAREA.CAITEM; /* key passed in?*/
    if (NB0BW01.NB0BWCCC is numeric) /* if no spaces*/
      /* next sentence*/
    else
      NB0BWCCO = 0; /* /set company id to 0*/
    end
    if (NB0BW01.NB0BWCCO > 0)
      if (NB0BW01.NB0BWBCD == "  ")
        NB0BW01.NB0BWBCD = "01"; /* BRAND    default*/
      end
      /* ----------------------------------------------------------*/
                       /* move initial key to map#1*/
      /* ----------------------------------------------------------*/
      NB0BM001.KUCCOID = NB0BW01.NB0BWCCO; /* move company to map1*/
      if (NB0BW01.NB0BWCSC is numeric) /* if no spaces*/
        /* next sentence*/
      else
        NB0BWCST = 0; /* set store to 0*/
      end
      NB0BM001.KUMSTRID = NB0BW01.NB0BWCST; /* move store   to map1*/
      if (NB0BW01.NB0BWCDC is numeric) /* if no spaces*/
        /* next sentence*/
      else
        NB0BWCDP = 0; /* set dept  to 0*/
      end
      NB0BM001.XNXCD = NB0BW01.NB0BWCDP; /* move dept    to map1*/
      NB0BM001.NB1GRPCD = NB0BW01.NB0BWCGP;
                                   /* move group code to map1*/
      NB0BM001.XBCCD = NB0BW01.NB0BWBCD; /* move BRAND    to map1*/
      /* ----------------------------------------------------------*/
                       /* clear work area to force key change*/
      /* ----------------------------------------------------------*/
      NB0BW01.NB0BWCCO = 0;
      NB0BW01.NB0BWCST = 0;
      NB0BW01.NB0BWCDP = 0;
      NB0BW01.NB0BWCGP = " ";
      NB0BW01.NB0BWBCD = " "; /* BRAND*/
    end
  end
  ;
  COMMAREA.CAITEM = " ";
  ;
  ;
  NB0BM001.XXXRVNBR = "01"; /* revision*/
  NB0BM001.XXXERRID = "NB0B300"; /* initial map display proc.*/
  NB0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* date.*/
  ;
  ;
  ;
   /* -------------  end process nb0b000  --------------------*/
end // end NB0B000

// master loop
Function NB0B050()
  ;
  ;
  NB0B100(); /* check for key change*/
  ;
  if (NB0BW01.NB0BWKSW == "Y") /* key was changed*/
    NB0B130(); /* customer db.- comp. data*/
    if (converseVar.validationMsgNum == 0
     && NB0BM001.KUMSTRID > 0) /* specific store......*/
      NB0B120(); /* customer db - store data*/
    end
    if (converseVar.validationMsgNum == 0) /* no problems...*/
      NB0B110(); /* nike bank cust. (nb1rec)*/
    end
    NB0B200(); /* format screen*/
  end
  ;
  ;
  NB0B300(); /* converse map1*/
  ;
  NB0BW01.NB0BWMOD = "N"; /* change requested flag*/
  NB0B400(); /* validate pf keys & fastpathing*/
  ;
  if (converseVar.eventKey is enter)
    NB0B500(); /* reset mdt*/
    NB0B600(); /* edit screen entry*/
    ;
    if (converseVar.validationMsgNum == 0) /* no edit errors*/
      if (NB0BW01.NB0BWMOD == "Y" /* nb1rec change requested*/
       || NB0BW01.NB0BWCFL != " " /* credit address changed/added*/
       || NB0BW01.NB0BWSFL != " ") /* srep   address changed/added*/
        ;
        NB0B700(); /* update database*/
        if (converseVar.validationMsgNum == 19) /* databases updated - no errors*/
          NB0B800(); /* update w/s for changes*/
        end
      end
    end
  end
  ;
  ;
  ;
   /* ------------------- end nb0b050 -------------------------*/
end // end NB0B050

// check for key change
Function NB0B100()
  ;
  ;
      /* --------------------------------------------------------*/
      /* check for any change in key (comp,store,dept, or group*/
      /* --------------------------------------------------------*/
  ;
  NB0BW01.NB0BWKSW = "N"; /* key change switch*/
  ;
  if (NB0BM001.XBCCD == "  ") /* no entered BRAND*/
    NB0BM001.XBCCD = "01"; /* default to domestic*/
  end
  ;
  if (NB0BM001.KUCCOID > 0) /* change in company*/
    if (NB0BM001.KUMSTRID != 0
     && NB0BM001.NB1GRPCD != " ") /* store id & group cd !*/
      converseLib.validationFailed(70);
                                   /* invalid: store id & grp*/
    else
      if (NB0BM001.KUCCOID != NB0BW01.NB0BWCCO  /* change in company*/
       || NB0BM001.KUMSTRID != NB0BW01.NB0BWCST /* change in store*/
       || NB0BM001.XNXCD != NB0BW01.NB0BWCDP    /* change in dpt*/
       || NB0BM001.NB1GRPCD != NB0BW01.NB0BWCGP /* change in group cd*/
       || NB0BM001.XBCCD != NB0BW01.NB0BWBCD)   /* change in BRAND*/
        ;
        NB0BW01.NB0BW1SW = "N"; /* nb1rec exists-bank cust.*/
        NB0BW01.NB0BW2SW = "N"; /* kucrec exists-comp.*/
        NB0BW01.NB0BW3SW = "N"; /* kumrec exists-store*/
        ;
        NB0BW01.NB0BWCCO = NB0BM001.KUCCOID; /* move key to hold*/
        NB0BW01.NB0BWCST = NB0BM001.KUMSTRID;
        NB0BW01.NB0BWCDP = NB0BM001.XNXCD;
        NB0BW01.NB0BWCGP = NB0BM001.NB1GRPCD;
        NB0BW01.NB0BWBCD = NB0BM001.XBCCD;
        ;
        set NB0BM001 empty;
        set NB0BM002 empty;
        ;
        NB0BM001.KUCCOID = NB0BW01.NB0BWCCO; /* move key back*/
        NB0BM001.KUMSTRID = NB0BW01.NB0BWCST;
        NB0BM001.XNXCD = NB0BW01.NB0BWCDP;
        NB0BM001.NB1GRPCD = NB0BW01.NB0BWCGP;
        NB0BM001.XBCCD = NB0BW01.NB0BWBCD;
        ;
        set NB0BW01 empty;
        set NB0BW02 empty;
        ;
        NB0BW01.NB0BWCCO = NB0BM001.KUCCOID; /* move key to hold*/
        NB0BW01.NB0BWCST = NB0BM001.KUMSTRID;
        NB0BW01.NB0BWCDP = NB0BM001.XNXCD;
        NB0BW01.NB0BWCGP = NB0BM001.NB1GRPCD;
        NB0BW01.NB0BWBCD = NB0BM001.XBCCD;
        ;
        NB0BM001.XXXRVNBR = "01"; /* revision #*/
        NB0BM001.XXXERRID = "NB0B300"; /* converse process*/
        NB0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
        ;
        ;
        NB0BW01.NB0BWKSW = "Y"; /* key change switch*/
        ;
      end
    end
  else
    converseLib.validationFailed(31); /* cust number req.*/
  end
  ;
  ;
  ;
   /* ------------------- end nb0b100 -------------------------*/
end // end NB0B100

// find bank customer (nb1rec)
Function NB0B110()
  ;
  ;
    /* ----------------------------------------------------*/
            /* bank customer master...(nb1rec)*/
    /* ----------------------------------------------------*/
  ;
  NB0BW01.NB0BWNOT = "NO "; /* customer notes?*/
  ;
  set NB1REC empty;
  set TA1REC empty;
  ;
  NB1REC.NB1CUST = NB0BW01.NB0BWCCO; /* company*/
  NB1REC.KUMSTRID = NB0BW01.NB0BWCST; /* store*/
  NB1REC.XNXCD = NB0BW01.NB0BWCDP; /* dept.*/
  NB1REC.NB1GRPCD = NB0BW01.NB0BWCGP; /* group*/
  NB1REC.XDVCD = "01"; /* division*/
  NB1REC.XBCCD = NB0BW01.NB0BWBCD; /* BRAND*/
  ;
  call "IO2210" ("S ", SQLCA, NB1REC) {isNoRefresh = yes, isExternal = yes}; /* get acct master*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    NB0BW01.NB0BW1SW = "Y"; /* a bank cust mstr*/
    ;
    NB0B112(); /* customer notes?*/
    ;
           /* *** map 1 *****/
    NB0BM001.NB0BMCNM = NB1REC.NB1CSTCT; /* contact name*/
    NB0BW01.NB0BMCNM = NB1REC.NB1CSTCT; /* contact name-hold*/
    NB0BM001.NB1CTPH = NB1REC.NB1CTPH; /* contact phone*/
    NB0BW01.NB1CTPH = NB1REC.NB1CTPH; /* contact phone-hold*/
    ;
    NB0BM001.NB1FCFL = NB1REC.NB1FCFL; /* fc flag*/
    NB0BW01.NB1FCFL = NB1REC.NB1FCFL; /* fc flag-hold*/
    ;
    NB0BM001.NB1PAYFL = NB1REC.NB1PAYFL; /* pay pop invoice flag*/
    NB0BW01.NB1PAYFL = NB1REC.NB1PAYFL; /* pay pop invoice flag-hold*/
    ;
    NB0BM001.NB1CFREQ = NB1REC.NB1CFREQ; /* cust stmt freq*/
    NB0BW01.NB1CFREQ = NB1REC.NB1CFREQ; /* cust stmt freq-hold*/
    ;
    NB0BM001.NB1CPFL = NB1REC.NB1CPFL; /* cust stmt print coop*/
    NB0BW01.NB1CPFL = NB1REC.NB1CPFL; /* cust stmt print coop hold*/
    ;
    NB0BM001.NB1AAFL = NB1REC.NB1AAFL; /* cust stmt print aa*/
    NB0BW01.NB1AAFL = NB1REC.NB1AAFL; /* cust stmt print aa hold*/
    ;
    NB0BM001.NB1TDFL = NB1REC.NB1TDFL; /* cust stmt print td*/
    NB0BW01.NB1TDFL = NB1REC.NB1TDFL; /* cust stmt print td hold*/
    ;
    NB0BM001.NB1SFREQ = NB1REC.NB1SFREQ; /* srep stmt freq*/
    NB0BW01.NB1SFREQ = NB1REC.NB1SFREQ; /* srep stmt freq-hold*/
    ;
    NB0BM001.NB1CMBFL = NB1REC.NB1CMBFL; /* combined fw/ap flag*/
    NB0BW01.NB1CMBFL = NB1REC.NB1CMBFL; /* combined fw/ap flag-hold*/
    ;
    ;
      /* **** status is only enterable if this is not a group  ****/
      /* **** group name is only displayed if it is a group    ****/
    ;
    if (NB0BW01.NB0BWCGP == " ") /* not a group*/
      set NB0BM001.NB0BMGRP protect, invisible; /* group description field*/
      NB0BM001.NB0BMSTT = NB1REC.NB1BTYPE; /* customer status*/
      NB0BW01.NB0BMSTT = NB1REC.NB1BTYPE; /* customer status-hold*/
      set NB0BM001.NB0BMSTA initialAttributes; /* heading "status:"*/
      NB0BM001.NB0BMSTA = "STATUS CODE :";
      set NB0BM001.NB0BMSTT initialAttributes; /* status field*/
    else /* is  a group*/
      set NB0BM001.NB0BMGRP initialAttributes; /* heading of group desc.*/
      NB0BM001.NB0BMGRP = "GROUP:";
      NB0B150(); /* get group name*/
      set NB0BM001.NB0BMSTA protect, invisible; /* heading "status:"*/
      set NB0BM001.NB0BMSTT protect, invisible; /* protect status field*/
    end
    ;
    ;
    NB0B140(); /* ;get credit &srep addr.*/
    ;
    ;
    ;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* no cust mstr*/
      converseLib.validationFailed(65); /* not a nike customer - enter data to add.*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(16); /* db in use-try later*/
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "NB0B";
        TA1REC.TA1LOCAT[1] = "S ";
        TA1REC.TA1LOCAT[2] = "NB0B110";
        TA1REC.TA1LOCAT[3] = "IO2210 ";
        TA1REC.TA1LOCAT[4] = "NB0BM001";
        TA1REC.TA1DBASE = "DNBANK.";
        TA1REC.TA1TBLVU = "VBCUST01";
        NB0BW01.NB0BWCKX = " ";
                                   /* clear key display area*/
        NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO;
                                   /* convert co. to display*/
        NB0BW01.NB0BWCSX = NB0BW01.NB0BWCST;
                                   /* convert store -display*/
        NB0BW01.NB0BWCDX = NB0BW01.NB0BWCDP;
                                   /* convert dept  -display*/
        NB0BW01.NB0BWCGX = NB0BW01.NB0BWCGP;
                                   /* convert group -display*/
        NB0BW01.NB0BWBCX = NB0BW01.NB0BWBCD; /* convert BRAND*/
        TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
    end
  end
  ;
  ;
  ;
end // end NB0B110

// get set of nb8rec records
Function NB0B112()
  ;
  ;
    /* ----------------------------------------------------*/
            /* bank customer text  ...(nb8rec)*/
    /* ----------------------------------------------------*/
  ;
  set NB8REC empty;
  set TA1REC empty;
  ;
  NB8REC.NB1CUST = NB0BW01.NB0BWCCO; /* company*/
  NB8REC.XDVCD = "01"; /* division*/
  NB8REC.XBCCD = NB0BW01.NB0BWBCD; /* BRAND*/
  ;
  TA1REC.TA1LOCAT[1] = "S1";
  call "IO2240" ("S1", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* get acct master*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    ;
    NB0BW02.NB0BW2S1 = 1; /* initialize subscript*/
    while (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
      NB0B114(); /* load w/s with text*/
    end
    ;
    ;
    TA1REC.TA1LOCAT[1] = "C1";
    call "IO2240" ("C1", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* get acct master*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* file opened & closed ok*/
    /* .... no problem, continue*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(16); /* db in use-try later*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[2] = "NB0B112";
      TA1REC.TA1LOCAT[3] = "IO2240 ";
      TA1REC.TA1LOCAT[4] = "NB0BM001";
      TA1REC.TA1DBASE = "DNBANK.";
      TA1REC.TA1TBLVU = "VBCTXT01";
      NB0BW01.NB0BWCKX = " "; /* clear key display area*/
      NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO; /* convert co. to display*/
      NB0BW01.NB0BWBCX = NB0BW01.NB0BWBCD; /* BRAND*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B112

// load w/s with text.
Function NB0B114()
  ;
  ;
  ;
  call "IO2240" ("N1", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* next text rec*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    ;
    if (NB8REC.NB8TEXT > " ")
      NB0BW01.NB0BWNOT = "YES"; /* customer notes exist*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* no cust notes*/
      /* .... no problem, continue*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(16); /* db in use-try later*/
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "NB0B";
        TA1REC.TA1LOCAT[1] = "N1";
        TA1REC.TA1LOCAT[2] = "NB0B114";
        TA1REC.TA1LOCAT[3] = "IO2240 ";
        TA1REC.TA1LOCAT[4] = "NB0BM001";
        TA1REC.TA1DBASE = "DNBANK.";
        TA1REC.TA1TBLVU = "VBCTXT01";
        NB0BW01.NB0BWCKX = " ";
                                   /* clear key display area*/
        NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO;
                                   /* convert co. to display*/
        NB0BW01.NB0BWBCX = NB0BW01.NB0BWBCD; /* BRAND*/
        TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        NB0BM002.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
    end
  end
  ;
  ;
  ;
end // end NB0B114

// find address(kulrec)record
Function NB0B115()
  ;
  ;
    /* ----------------------------------------------------*/
        /* find address .... & move to working storage*/
   /* 11/09/93 LGROSS CHANGED KULREC.XXXADDR1,2,3 TO KULREC.*/
   /* KULREC.XXX-ADDR1,2,3*/
    /* ----------------------------------------------------*/
  ;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* address.*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return*/
    NB0BW01.NB0BWAD1 = KULREC.XXX-ADDR1; /* line1*/
    NB0BW01.NB0BWAD2 = KULREC.XXX-ADDR2; /* line2*/
    NB0BW01.NB0BWAD3 = KULREC.XXX-ADDR3; /* line3*/
    NB0BW01.NB0BWADC = KULREC.XXXCITY; /* city*/
    NB0BW01.NB0BWADS = KULREC.XSTCD; /* state*/
    NB0BW01.NB0BWADZ = KULREC.XXXZIP; /* zip*/
    NB0BW01.NB0BWADT = KULREC.XCTCD; /* country*/
    ;
  else
    if (SQLCA.VAGen_SQLCODE == +100 /* no addr rec*/
     || SQLCA.VAGen_SQLCODE == -911) /* database in use*/
                                /* ;             continue*/
    else
      NB0BM001.XXXERRID = "NB0B115"; /* error process*/
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[1] = "S ";
      TA1REC.TA1LOCAT[2] = "NB0B115";
      TA1REC.TA1LOCAT[3] = "IO0170 ";
      TA1REC.TA1LOCAT[4] = "NB0BM001";
      TA1REC.TA1DBASE = "DCUST. ";
      TA1REC.TA1TBLVU = "VADDR001";
      NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO; /* convert co. display*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX; /* display key used*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B115

// find store (kumrec) record
Function NB0B120()
  ;
  ;
    /* ----------------------------------------------------*/
                    /* find store data*/
    /* ----------------------------------------------------*/
  ;
  ;
  set KUMREC empty;
  set SQLCA empty;
  set TA1REC empty;
  ;
  KUMREC.KUCCOID = NB0BW01.NB0BWCCO; /* company*/
  KUMREC.KUMSTRID = NB0BW01.NB0BWCST; /* store*/
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* obtain store record*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    ;
    NB0BM001.NB0BMNM1 = KUMREC.KUMSTRNM; /* move store name to map1*/
    NB0BW01.NB0BW3SW = "Y"; /* store exists....*/
    ;
    set KULREC empty;
    KULREC.KUCCOID = KUMREC.KUCCOID; /* company id*/
    KULREC.KULAAID = KUMREC.KUMSTAID; /* store addr pointer*/
    NB0B115(); /* get address*/
    ;
    set KUGREC empty;
    KUGREC.KUCCOID = KUMREC.KUCCOID; /* company id*/
    KUGREC.KUMSTRID = KUMREC.KUMSTRID; /* store id*/
    KUGREC.XNXCD = 0; /* department*/
    NB0B125(); /* get sales rep numbers*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* acct not valid*/
      converseLib.validationFailed(49); /* not a valid nike company/store.*/
      NB0BW01.NB0BWCCO = 0;
      NB0BW01.NB0BWCST = 0;
      NB0BW01.NB0BWCDP = 0;
      NB0BW01.NB0BWCDP = " ";
      NB0BW01.NB0BWBCD = " "; /* BRAND*/
    end
  end
  ;
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == +0 /* good return..*/
   || SQLCA.VAGen_SQLCODE == +100) /* rec not found*/
    ;
     /* all ok, or handled above*/
    ;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(16); /* db.in use - try later*/
      NB0BM001.XXXERRID = "NB0B120"; /* error process*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[1] = "S ";
      TA1REC.TA1LOCAT[2] = "NB0B120";
      TA1REC.TA1LOCAT[3] = "IO0340 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1LOCAT[4] = "NB0BM001";
      TA1REC.TA1DBASE = "DCUST. ";
      TA1REC.TA1TBLVU = "VCSTOR01";
      NB0BW01.NB0BWCKX = " "; /* clear key display*/
      NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO; /* convert co. display*/
      NB0BW01.NB0BWCSX = NB0BW01.NB0BWCST; /* convert st. display*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX; /* display key used.*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B120

// find srep record  (kugrec)
Function NB0B125()
  ;
  ;
  NB0BW01.NB0BWFRP = 0; /* clear ftwr srep id*/
  NB0BW01.NB0BWARP = 0; /* clear app. srep id*/
  ;
  ;
    /* ----------------------------------------------------*/
    /* division = domestic,  brand = i.e. , legal = side1,inc*/
    /* ----------------------------------------------------*/
  if (NB0BW01.NB0BWBCD == "07") /* i.e.*/
    KUGREC.YSBCD = "11"; /* sales responsibility*/
    NB0BW01.NB0BWHRP = 0; /* return srep field*/
    NB0B127(); /* get srep id*/
    if (NB0BW01.NB0BWHRP > 0) /* found a srep #*/
      NB0BW01.NB0BWFRP = NB0BWHRP; /* hold ftwr rep*/
      NB0BW01.NB0BWARP = NB0BWHRP; /* hold aprl rep*/
    end
  end
  ;
    /* ----------------------------------------------------*/
    /* division = domestic,  brand = side1, legal = side1,inc*/
    /* ----------------------------------------------------*/
  if (NB0BW01.NB0BWHRP == 0) /* haven't found a rep yet.*/
    if (NB0BW01.NB0BWBCD == "05" /* side 1*/
     || NB0BW01.NB0BWBCD == "07") /* i.e.*/
      KUGREC.YSBCD = "10"; /* sales responsibility*/
      NB0BW01.NB0BWHRP = 0; /* return srep field*/
      NB0B127(); /* get srep id*/
      if (NB0BW01.NB0BWHRP > 0) /* found a srep #*/
        NB0BW01.NB0BWFRP = NB0BWHRP; /* hold ftwr rep*/
        NB0BW01.NB0BWARP = NB0BWHRP; /* hold aprl rep*/
      end
    end
  end
  ;
    /* ----------------------------------------------------*/
    /* -    division = domestic,  brand = nike            -*/
    /* ----------------------------------------------------*/
  ;
  if (NB0BW01.NB0BWBCD == "01") /* domestic*/
      /* ----------------------------------------------------*/
      /* -          footwear...........*/
      /* ----------------------------------------------------*/
    KUGREC.YSBCD = "02"; /* sales responsibility ftwr*/
    NB0BW01.NB0BWHRP = 0; /* return srep field*/
    NB0B127(); /* get srep id*/
    if (NB0BW01.NB0BWHRP > 0) /* found a srep #*/
      NB0BW01.NB0BWFRP = NB0BWHRP; /* hold ftwr rep*/
    else
      KUGREC.YSBCD = "**"; /* get main rep*/
      NB0BW01.NB0BWHRP = 0; /* return srep field*/
      NB0B127(); /* get srep set*/
      if (NB0BW01.NB0BWHRP > 0) /* found a srep #*/
        NB0BW01.NB0BWFRP = NB0BWHRP; /* hold ftwr rep*/
      end
    end
      /* ----------------------------------------------------*/
      /* -          apparel*/
      /* ----------------------------------------------------*/
    KUGREC.YSBCD = "03"; /* sales responsibility aprl*/
    NB0BW01.NB0BWHRP = 0; /* return srep field*/
    NB0B127(); /* get srep id*/
    if (NB0BW01.NB0BWHRP > 0) /* found a srep #*/
      NB0BW01.NB0BWARP = NB0BWHRP; /* hold aprl rep*/
    else
      KUGREC.YSBCD = "**"; /* main rep.*/
      NB0BW01.NB0BWHRP = 0; /* return srep field*/
      NB0B127(); /* get srep set*/
      if (NB0BW01.NB0BWHRP > 0) /* found a srep #*/
        NB0BW01.NB0BWARP = NB0BWHRP; /* hold aprl rep*/
      end
    end
  end
  ;
  ;
  ;
end // end NB0B125

// call customer srep(kugrec)
Function NB0B127()
  ;
  if (KUGREC.YSBCD == "**")
    NB0BW01.NB0BWLO = "  ";
    NB0BW01.NB0BWHI = "99";
  else
    NB0BW01.NB0BWLO = KUGREC.YSBCD;
    NB0BW01.NB0BWLO = KUGREC.YSBCD;
  end
  ;
  ;
   /* OVE KUGREC.KUCCOID TO KUGREC.KUCCOID;*/
   /* OVE KUGREC.KUMSTRID TO KUGREC.KUMSTRID;*/
   /* OVE KUGREC.XNXCD TO KUGREC.XNXCD;*/
   /* OVE KUGREC.YSBCD TO KUGREC.YSBCD;*/
  ;
  KUGREC.KUGRPTDT = 999999999; /* reps not terminated*/
  call "IO5110" ("S1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes}; /* open set*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    call "IO5110" ("N1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes}; /* obtain srep*/
    if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
      NB0BW01.NB0BWHRP = KUGREC.SM4REPID; /* hold srep id*/
    else
      TA1REC.TA1LOCAT[1] = "N1";
    end
    ;
    call "IO5110" ("C1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
    if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "C1";
    end
  else
    TA1REC.TA1LOCAT[1] = "S1";
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == +0   /* good return..*/
   || SQLCA.VAGen_SQLCODE == +100 /* not found  ..*/
   || SQLCA.VAGen_SQLCODE == -911) /* in use*/
    ;
     /* continue*/
    ;
  else
    NB0BM001.XXXERRID = "NB0B127"; /* error process map 1*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "NB0B";
    TA1REC.TA1LOCAT[2] = "NB0B127";
    TA1REC.TA1LOCAT[3] = "IO5110 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1LOCAT[4] = "NB0BM001";
    TA1REC.TA1DBASE = "DCUST. ";
    TA1REC.TA1TBLVU = "VCUREP01";
    NB0BW01.NB0BWCKX = " "; /* clear key display area*/
    NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO; /* convert co. to display*/
    NB0BW01.NB0BWCSX = NB0BW01.NB0BWCST; /* convert st. to display*/
    NB0BW01.NB0BWCDX = NB0BW01.NB0BWCDP; /* convert dpt.to display*/
    TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
    NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  ;
end // end NB0B127

// find company(kucrec)record
Function NB0B130()
  ;
  ;
    /* ----------------------------------------------------*/
                    /* find company data*/
    /* ----------------------------------------------------*/
  ;
  ;
  set KUCREC empty;
  set SQLCA empty;
  set TA1REC empty;
  ;
  KUCREC.KUCCOID = NB0BW01.NB0BWCCO; /* company*/
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* obtain company rec.*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    NB0BM001.XIECD = KUCREC.XIECD; /* internal/ext code*/
    NB0BM001.YCPCD = KUCREC.YCPCD; /* analyst code*/
    NB0BM002.KUCCOID = KUCREC.KUCCOID; /* company id num - map #2*/
    NB0BM002.XBCCD = NB0BM001.XBCCD; /* BRAND        - map #2*/
    NB0BM002.NB0BMNM1 = KUCREC.KUCCONM; /* company name - map #2*/
    ;
    if (NB0BM001.KUMSTRID == 0) /* store id = 0*/
      NB0BM001.NB0BMNM1 = KUCREC.KUCCONM; /* co. name to map*/
      NB0BW01.NB0BW2SW = "Y"; /* co. exists*/
      ;
        /* ----------------------------------------------------*/
                        /* find company data*/
        /* ----------------------------------------------------*/
      ;
      if (KUCREC.KUCCOAID > 0)
                                   /* if addr pointer exists.*/
        set KULREC empty;
        KULREC.KUCCOID = KUCREC.KUCCOID; /* company id*/
        KULREC.KULAAID = KUCREC.KUCCOAID; /* comp. addr pointer*/
        NB0B115(); /* company address-kulrec*/
        SQLCA.VAGen_SQLCODE = +0; /* don't abend...continue*/
      end
      ;
      set KUGREC empty;
      KUGREC.KUCCOID = KUCREC.KUCCOID; /* company id*/
      KUGREC.KUMSTRID = 0; /* store  id*/
      KUGREC.XNXCD = 0; /* dept.  cd*/
      NB0B125(); /* get srep num -KUGREC*/
      SQLCA.VAGen_SQLCODE = +0; /* don't abend...continue*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* no acct.rec*/
        converseLib.validationFailed(44); /* invalid company*/
        NB0BW01.NB0BWCCO = 0;
        NB0BW01.NB0BWCST = 0;
        NB0BW01.NB0BWCDP = 0;
        NB0BW01.NB0BWCGP = " ";
        NB0BW01.NB0BWBCD = " "; /* BRAND*/
      end
    end
  end
  ;
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == +0 /* good return..*/
   || SQLCA.VAGen_SQLCODE == +100) /* rec not found*/
    ;
     /* all ok, or handled above*/
    ;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      NB0BM001.XXXERRID = "NB0B130"; /* error process*/
      converseLib.validationFailed(16); /* in use-try later*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[1] = "S ";
      TA1REC.TA1LOCAT[2] = "NB0B130";
      TA1REC.TA1LOCAT[3] = "IO0240 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1LOCAT[4] = "NB0BM001";
      TA1REC.TA1DBASE = "DCUST. ";
      TA1REC.TA1TBLVU = "VCMPNY01";
      NB0BW01.NB0BWCKX = " "; /* clear key display area*/
      NB0BW01.NB0BWCCX = NB0BW01.NB0BWCST; /* convert to display co.*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B130

// alt.addr from(kulrec)record
Function NB0B140()
  ;
   /* 11/09/93  LGROSS CHANGED KULREC.XXXADDR1,2,3 TO KULREC.*/
   /* XXX-ADDR1,2,3*/
  ;
  NB0BW01.NB1CRADR = NB1REC.NB1CRADR; /* hold cred addr.*/
  NB0BW01.NB1STADR = NB1REC.NB1STADR; /* hold srep addr.*/
  ;
  ;
  NB0BW01.NB0BWCKX = " "; /* area used to display any abend key*/
  ;
    /* ----------------------------------------------------*/
        /* find address .... & move to working storage*/
    /* ----------------------------------------------------*/
  ;
  if (NB1REC.NB1CRADR > 0) /* alt.cr.addr.exists*/
    ;
    set KULREC empty;
    KULREC.KUCCOID = NB0BM001.KUCCOID; /* company id*/
    KULREC.KULAAID = NB1REC.NB1CRADR; /* addr pointer*/
    NB0BW01.NB0BWCSX = NB1REC.NB1CRADR; /* display for abend*/
    ;
    call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* address.*/
    ;
    if (SQLCA.VAGen_SQLCODE == +0) /* good return*/
      ;
      /* ---------------------------------------------*/
      /* --  move alt. credit address to w/s  --------*/
       /* note: KULREC.XXXADDR1 isn't used for display*/
      /* ---------------------------------------------*/
      ;
      NB0BW01.NB0BMCAD[1] = KULREC.XXX-ADDR2; /* line2*/
      NB0BW01.NB0BMCAD[2] = KULREC.XXX-ADDR3; /* line3*/
      NB0BW01.NB0BMCCY = KULREC.XXXCITY; /* city*/
      NB0BW01.NB0BMCST = KULREC.XSTCD; /* state*/
      NB0BW01.NB0BMCZP = KULREC.XXXZIP; /* zip*/
      NB0BW01.NB0BMCCT = KULREC.XCTCD; /* country*/
      ;
      /* ---------------------------------------------*/
      /* --  move alt. credit address to map  --------*/
      /* --  only if currently being used.    --------*/
      /* ---------------------------------------------*/
      if (NB0BW01.NB0BMCAD[1] == "ADDRESS NOT ACTIVE")
          /* do not move to map*/
      else
        ;
        NB0BM001.NB0BMCAD[1] = KULREC.XXX-ADDR2; /* line2*/
        NB0BM001.NB0BMCAD[2] = KULREC.XXX-ADDR3; /* line3*/
        NB0BM001.NB0BMCCY = KULREC.XXXCITY; /* city*/
        NB0BM001.NB0BMCST = KULREC.XSTCD; /* state*/
        NB0BM001.NB0BMCZP = KULREC.XXXZIP; /* zip*/
        NB0BM001.NB0BMCCT = KULREC.XCTCD; /* country*/
      end
      ;
    end
  end
  ;
  ;
    /* ----------------------------------------------------*/
        /* find srep address & move to working storage*/
    /* ----------------------------------------------------*/
  ;
  if (NB1REC.NB1STADR > 0) /* alt.srep addr exists*/
    ;
    ;
    set KULREC empty;
    KULREC.KUCCOID = NB0BM001.KUCCOID; /* company id*/
    KULREC.KULAAID = NB1REC.NB1STADR; /* addr pointer*/
    NB0BW01.NB0BWCSX = NB1REC.NB1STADR; /* display for abend*/
    ;
    call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* address.*/
    ;
    if (SQLCA.VAGen_SQLCODE == +0) /* good return*/
      ;
      /* ---------------------------------------------*/
      /* --  move alt. srep   address to w/s  --------*/
       /* note: KULREC.XXXADDR1 isn't used for display*/
       /* and the 30th byte of lines 2 & 3 are a '*'*/
      /* ---------------------------------------------*/
      ;
      NB0BW01.NB0BMSAD[1] = KULREC.XXX-ADDR2; /* line2*/
      NB0BW01.NB0BMSAD[2] = KULREC.XXX-ADDR3; /* line3*/
      NB0BW01.NB0BMSCY = KULREC.XXXCITY; /* city*/
      NB0BW01.NB0BMSST = KULREC.XSTCD; /* state*/
      NB0BW01.NB0BMSZP = KULREC.XXXZIP; /* zip*/
      NB0BW01.NB0BMSCT = KULREC.XCTCD; /* country*/
      ;
      /* ---------------------------------------------*/
      /* --  move alt. srep   address to map  --------*/
      /* --  only if currently being used.    --------*/
      /* ---------------------------------------------*/
      if (NB0BW01.NB0BMSAD[1] == "ADDRESS NOT ACTIVE")
          /* do not move to map*/
      else
        ;
        ;
        NB0BM001.NB0BMSAD[1] = KULREC.XXX-ADDR2; /* line2*/
        NB0BM001.NB0BMSAD[2] = KULREC.XXX-ADDR3; /* line3*/
        NB0BM001.NB0BMSCY = KULREC.XXXCITY; /* city*/
        NB0BM001.NB0BMSST = KULREC.XSTCD; /* state*/
        NB0BM001.NB0BMSZP = KULREC.XXXZIP; /* zip*/
        NB0BM001.NB0BMSCT = KULREC.XCTCD; /* country*/
        ;
      end
    end
  end
  ;
  ;
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
         /* ok*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(16);
      NB0BM001.XXXERRID = "NB0B140"; /* problem process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no addr.record*/
                                  /* ;                 continue*/
      else
        NB0BM001.XXXERRID = "NB0B140"; /* error process*/
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "NB0B";
        TA1REC.TA1LOCAT[1] = "S ";
        TA1REC.TA1LOCAT[2] = "NB0B140";
        TA1REC.TA1LOCAT[3] = "IO0170 ";
        TA1REC.TA1LOCAT[4] = "NB0BM001";
        TA1REC.TA1DBASE = "DCUST. ";
        TA1REC.TA1TBLVU = "VADDR001";
        NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO; /* convert co. display*/
        TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX; /* display key used*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
    end
  end
  ;
  ;
  ;
end // end NB0B140

// select nb5rec & load map
Function NB0B150()
  ;
  ;
  ;
    /* --------------------------------------------------*/
       /* purpose:  get nb5rec for group description*/
    /* --------------------------------------------------*/
  ;
  NB5REC.NB5PNTCO = NB0BM001.KUCCOID; /* parent company*/
  NB5REC.NB1GRPCD = NB0BM001.NB1GRPCD; /* group code*/
  NB5REC.XDVCD = "01"; /* DIVISION*/
  NB5REC.XBCCD = NB0BM001.XBCCD; /* BRAND*/
  ;
  call "IO2220" ("S ", SQLCA, NB5REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    NB0BM001.NB0BMGNM = NB5REC.NB5GPDSC; /* group name to map*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* no more records*/
        /* continue....*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        NB0BM001.NB0BMGNM = " "; /* group name*/
      else
        set TA1REC empty;
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "NB0B";
        TA1REC.TA1LOCAT[1] = "S ";
        TA1REC.TA1LOCAT[2] = "NB0B150";
        TA1REC.TA1LOCAT[3] = "IO2220 ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1LOCAT[4] = "NB0BM001";
        TA1REC.TA1DBASE = "DNBANK.";
        TA1REC.TA1TBLVU = "VBCGRP01";
        NB0BW01.NB0BWCCX = NB0BM001.KUCCOID;
                                   /* convert co. to display*/
        NB0BW01.NB0BWCSX = " "; /* no store*/
        NB0BW01.NB0BWCDX = " "; /* no department*/
        NB0BW01.NB0BWCGX = NB0BM001.NB1GRPCD; /* add group cd to key*/
        NB0BW01.NB0BWBCX = NB0BM001.XBCCD; /* add BRAND    to key*/
        TA1TBLKE = NB0BW01.NB0BWCKX;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
    end
  end
  ;
  ;
  ;
end // end NB0B150

// format screen nb0bm001
Function NB0B200()
  ;
  ;
  ;
    /* ----------------------------------------------------*/
            /* set default values for bank participation*/
    /* ----------------------------------------------------*/
  ;
  if (NB0BW01.NB0BW2SW == "Y" /* company exists*/
   || NB0BW01.NB0BW3SW == "Y") /* store exists*/
    ;
    ;
    if (NB0BM001.NB1CFREQ == " ") /* cust statement freq*/
      NB0BM001.NB1CFREQ = "QT"; /* quarterly......*/
    end
    ;
    if (NB0BM001.NB1SFREQ == " ") /* srep statement freq*/
      NB0BM001.NB1SFREQ = "MO"; /* on request*/
    end
    ;
    if (NB0BM001.NB1GRPCD == " ") /* no group requested*/
      if (NB0BM001.NB0BMSTT == " ") /* status field*/
        NB0BM001.NB0BMSTT = "A"; /* default status*/
      end
    else
      set NB0BM001.NB0BMSTT protect, invisible;
    end
    ;
    if (NB0BM001.NB1CMBFL == " ") /* combine dollars flag*/
      NB0BM001.NB1CMBFL = "N";
    end
    ;
    if (NB0BM001.NB1FCFL == " ") /* fc flag*/
      NB0BM001.NB1FCFL = "N"; /* fc flag-hold*/
    end
    ;
    if (NB0BM001.NB1PAYFL == " ") /* pay invoice from bank*/
      NB0BM001.NB1PAYFL = "Y"; /* default to 'yes'*/
    end
    ;
    if (NB0BM001.NB1CPFL == " ") /* print coop on cust stmt.*/
      NB0BM001.NB1CPFL = "Y"; /* default to 'yes'*/
    end
    ;
    if (NB0BM001.NB1AAFL == " ") /* print aa on cust stmt.*/
      NB0BM001.NB1AAFL = "N"; /* default to 'no '*/
    end
    ;
    if (NB0BM001.NB1TDFL == " ") /* print td on cust stmt.*/
      NB0BM001.NB1TDFL = "N"; /* default to 'no '*/
    end
    ;
  else
    ;
    NB0BM001.NB1CFREQ = "  "; /* cust. statement freq*/
    NB0BM001.NB1SFREQ = "  "; /* srep ststement freq*/
    NB0BM001.NB0BMSTT = " "; /* status*/
    NB0BM001.NB1CMBFL = " "; /* combined funds flag*/
    NB0BM001.NB1FCFL = " "; /* fc flag-hold*/
    NB0BM001.NB1PAYFL = " "; /* pay inv.from bank*/
    NB0BM001.NB1CPFL = " "; /* print coop on cust stmt.*/
    NB0BM001.NB1AAFL = " "; /* print aa on cust stmt.*/
    NB0BM001.NB1TDFL = " "; /* print td on cust stmt.*/
  end
  ;
  NB0B210(); /* move addr to map*/
  ;
  ;
  ;
end // end NB0B200

// format address on screens..
Function NB0B210()
  ;
  ;
    /* ----------------------------------------------------*/
      /* move company data to map.*/
    /* ----------------------------------------------------*/
  ;
  NB0BM001.NB0BMASR = NB0BW01.NB0BWARP; /* ap.srep id*/
  NB0BM001.NB0BMFSR = NB0BW01.NB0BWFRP; /* ftwr srep id*/
  NB0BM001.XCTCD = NB0BW01.NB0BWADT; /* country*/
  NB0BM001.NB0BMNOT = NB0BW01.NB0BWNOT; /* company notes y/n*/
  ;
    /* *** clear any previous address*/
  ;
  NB0BM001.NB0BMHD1[1] = "       ";
  NB0BM001.NB0BMHD1[2] = "       ";
  NB0BM001.NB0BMHD1[3] = "       ";
  ;
    /* ----------------------------------------------------*/
    /* customer address may be 1-3 lines plus the city,state*/
    /* and zip.  the customer system pushes these lines to*/
    /* the bottom so a 1 line address will start in line 3.*/
    /* nb0a needs the address to start directly following*/
    /* the customer name if it is 3 lines long.  in all*/
    /* other cases, to skip a line and float the address*/
    /* up as far as possible.             ssj*/
    /* ----------------------------------------------------*/
  ;
  if (NB0BW01.NB0BWAD1 > " ") /* address is 3 lines long*/
    NB0BM001.NB0BMHD1[1] = "ADDRESS:";
    ;
        /* ****** move to map#1 **********/
    ;
    NB0BM001.NB0BMADR[1] = NB0BW01.NB0BWAD1;
    NB0BM001.NB0BMADR[2] = NB0BW01.NB0BWAD2;
    NB0BM001.NB0BMADR[3] = NB0BW01.NB0BWAD3;
    NB0BM001.NB0BMADR[4] = NB0BW01.NB0BWAD4;
    ;
  else
    NB0BM001.NB0BMHD1[2] = "ADDRESS:";
    ;
    if (NB0BW01.NB0BWAD2 > " ") /* address is 2 lines long*/
      ;
      NB0BM001.NB0BMADR[1] = NB0BW01.NB0BWAD1;
      NB0BM001.NB0BMADR[2] = NB0BW01.NB0BWAD2;
      NB0BM001.NB0BMADR[3] = NB0BW01.NB0BWAD3;
      NB0BM001.NB0BMADR[4] = NB0BW01.NB0BWAD4;
      ;
    else
      if (NB0BW01.NB0BWAD3 > " ") /* address is 1 lines long*/
        ;
        NB0BM001.NB0BMADR[2] = NB0BW01.NB0BWAD3;
                                   /* slide it up one*/
        NB0BM001.NB0BMADR[3] = NB0BW01.NB0BWAD4;
        ;
      else
                                   /* ; city, state & zip only*/
        ;
        NB0BM001.NB0BMADR[2] = NB0BW01.NB0BWAD4;
                                   /* slide it up two*/
        ;
      end
    end
  end
  ;
  ;
  ;
end // end NB0B210

// converse map 1 for customer
Function NB0B300()
  converse NB0BM001 ;
end // end NB0B300

// validate attention keys...
Function NB0B400()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* stop indiscriminate button pressing..........*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21)
    ;
     /* screen operator awake!*/
  else
    converseLib.validationFailed(03); /* invalid pk key..*/
  end
  ;
  ;
  if (converseVar.eventKey is pa2)
    NB0B500(); /* ; reset mdt's*/
    NB0B410();
    ;
  else
    ;
    if (NB0BM001.CATOAP > " ") /* requesting fast pathing*/
      COMMAREA.CATOAP = NB0BM001.CATOAP;
      COMMAREA.CAITEM = NB0BM001.CAITEM;
      COMMAREA.CAFROMAP = "NB0B";
      XSEXIT(); /* transfer out*/
      ;
       /* --- and if you are still in here !*/
      NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force alarm to sound*/
      exit stack; /* Exit to redisplay map*/
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    XSPF1(); /* Exit to the HELP facility*/
    ;
    NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force error*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf3) /* PF4 was pressed*/
    COMMAREA.CATOAP = "NB0M"; /* return to menu*/
    COMMAREA.CAFROMAP = "NB0B"; /* from here to there*/
    XSEXIT();
    ;
     /* --- and if you are still in here !*/
    NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    XSPF4(); /* Exit to system main menu*/
    ;
    NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf13) /* acct.summary    (nb0g)*/
    NB0B420(); /* set up transfer fields*/
    COMMAREA.CATOAP = "NB0G";
    XSEXIT();
  end
  ;
  ;
  if (converseVar.eventKey is pf14) /* balance inquiry (nb0a)*/
    NB0B420(); /* set up transfer fields*/
    COMMAREA.CATOAP = "NB0A";
    XSEXIT();
  end
  ;
  ;
  if (converseVar.eventKey is pf15) /* transfer to history*/
    NB0B420(); /* set up transfer fields*/
    COMMAREA.CATOAP = "NB0C";
    XSEXIT();
  end
  ;
  ;
  if (converseVar.eventKey is pf17) /* transfer to instructions...*/
    if (NB0BW01.NB0BW1SW != "Y") /* there is no nb1rec for customer*/
      converseLib.validationFailed(66); /* need nb1rec prior to cust.instruct.*/
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf18) /* transfer to fund transfer*/
    NB0B420(); /* set up transfer fields*/
    COMMAREA.CATOAP = "NB0D";
    XSEXIT();
  end
  ;
  ;
  if (converseVar.eventKey is pf20) /* transfer to group descriptions*/
    NB0B420(); /* set up transfer fields*/
    COMMAREA.CATOAP = "NB0E";
    XSEXIT();
  end
  ;
  ;
  if (converseVar.eventKey is pf21) /* transfer to group member*/
    NB0B420(); /* set up transfer fields*/
    COMMAREA.CATOAP = "NB0F";
    XSEXIT();
  end
  ;
  ;
  ;
end // end NB0B400

// reset previous errors  ...
Function NB0B410()
  ;
  ;
  if (NB0BW01.NB0BW1SW == "Y") /* bank cust exists*/
    ;
    ;
    /* ------------------------------------------------------------*/
     /* pa2 : refresh all enterable fields on map nb0bm001 with*/
           /* the original display.*/
    /* ------------------------------------------------------------*/
    NB0BM001.KUCCOID = NB0BW01.NB0BWCCO; /* company*/
    NB0BM001.KUMSTRID = NB0BW01.NB0BWCST; /* store*/
    NB0BM001.XNXCD = NB0BW01.NB0BWCDP; /* dept*/
    NB0BM001.NB1GRPCD = NB0BW01.NB0BWCGP; /* group code*/
    ;
    NB0BM001.NB1CTPH = NB0BW01.NB1CTPH; /* contact phone*/
    NB0BM001.NB0BMCNM = NB0BW01.NB0BMCNM; /* contact person*/
    NB0BM001.NB1FCFL = NB0BW01.NB1FCFL; /* forf. flag*/
    ;
    NB0BM001.NB0BMCAD[1] = NB0BW01.NB0BMCAD[1]; /* cred addr.line1*/
    NB0BM001.NB0BMCAD[2] = NB0BW01.NB0BMCAD[2]; /* cred addr.line2*/
    NB0BM001.NB0BMCCY = NB0BW01.NB0BMCCY; /* city*/
    NB0BM001.NB0BMCST = NB0BW01.NB0BMCST; /* state*/
    NB0BM001.NB0BMCZP = NB0BW01.NB0BMCZP; /* zip*/
    NB0BM001.NB0BMCCT = NB0BW01.NB0BMCCT; /* country*/
    ;
    NB0BM001.NB0BMSAD[1] = NB0BW01.NB0BMSAD[1]; /* stmt.addr.line1*/
    NB0BM001.NB0BMSAD[2] = NB0BW01.NB0BMSAD[2]; /* stmt.addr.line2*/
    NB0BM001.NB0BMSCY = NB0BW01.NB0BMSCY; /* city*/
    NB0BM001.NB0BMSST = NB0BW01.NB0BMSST; /* state*/
    NB0BM001.NB0BMSZP = NB0BW01.NB0BMSZP; /* zip*/
    NB0BM001.NB0BMSCT = NB0BW01.NB0BMSCT; /* country*/
    ;
    NB0BM001.NB1CFREQ = NB0BW01.NB1CFREQ; /* cust stat. freq.*/
    NB0BM001.NB1SFREQ = NB0BW01.NB1SFREQ; /* srep statment freq.*/
    NB0BM001.NB1CMBFL = NB0BW01.NB1CMBFL; /* combine flag.*/
    NB0BM001.NB1PAYFL = NB0BW01.NB1PAYFL; /* pay inv. from bank*/
    NB0BM001.NB1CPFL = NB0BW01.NB1CPFL; /* cust stat. print coop*/
    NB0BM001.NB1AAFL = NB0BW01.NB1AAFL; /* cust stat. print aa*/
    NB0BM001.NB1TDFL = NB0BW01.NB1TDFL; /* cust stat. print td*/
    ;
    ;
    if (NB0BM001.NB1GRPCD > " ") /* group code*/
      NB0BM001.NB0BMSTT = " ";
      set NB0BM001.NB0BMSTT protect;
    else
      NB0BM001.NB0BMSTT = NB0BW01.NB0BMSTT; /* customer status*/
    end
    ;
    ;
    ;
  else /* bank cust does not exist*/
    ;
    ;
    /* ------------------------------------------------------------*/
     /* pa2 : clears screen for new key*/
    /* ------------------------------------------------------------*/
    set NB0BM001 empty;
    set NB0BM002 empty;
    set NB0BW01 empty;
    set NB0BW02 empty;
    ;
    NB0BM001.XXXRVNBR = "01"; /* revision*/
    NB0BM001.XXXERRID = "NB0B300"; /* initial map display proc*/
    NB0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* date*/
    converseLib.validationFailed(31); /* ; customer number required*/
    ;
  end
  ;
  ;
  ;
end // end NB0B410

// xfr nb0b to another bank apl.
Function NB0B420()
  ;
  ;
  ;
  NB0BW01.NB0BWCCO = NB0BM001.KUCCOID; /* save company*/
  NB0BW01.NB0BWCST = NB0BM001.KUMSTRID; /* save store*/
  NB0BW01.NB0BWCDP = NB0BM001.XNXCD; /* save dpt*/
  NB0BW01.NB0BWCGP = NB0BM001.NB1GRPCD; /* save group*/
  NB0BW01.NB0BWBCD = NB0BM001.XBCCD; /* save BRAND*/
  ;
  COMMAREA.CAITEM = NB0BW01.NB0BWCAI; /* move key to comm*/
  ;
  COMMAREA.CAFROMAP = "NB0B";
  ;
  ;
  ;
end // end NB0B420

// reset mdt's
Function NB0B500()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* reset modified data tags....*/
   /* ------------------------------------------------------------*/
  ;
  set NB0BM001.KUCCOID cursor, initialAttributes; /* company*/
  set NB0BM001.KUMSTRID initialAttributes; /* store*/
  set NB0BM001.XNXCD initialAttributes; /* DEPARTMENT*/
  set NB0BM001.NB1GRPCD initialAttributes; /* group code*/
  ;
  set NB0BM001.NB1CTPH initialAttributes; /* contact phone*/
  set NB0BM001.NB0BMCNM initialAttributes; /* contact person*/
  set NB0BM001.NB1FCFL initialAttributes; /* forf. flag*/
  ;
  set NB0BM001.NB0BMCAD[1] initialAttributes; /* cred addr.line1*/
  set NB0BM001.NB0BMCAD[2] initialAttributes; /* cred addr.line2*/
  set NB0BM001.NB0BMCCY initialAttributes; /* city*/
  set NB0BM001.NB0BMCST initialAttributes; /* state*/
  set NB0BM001.NB0BMCZP initialAttributes; /* zip*/
  set NB0BM001.NB0BMCCT initialAttributes; /* country*/
  ;
  set NB0BM001.NB0BMSAD[1] initialAttributes; /* stmt.addr.line1*/
  set NB0BM001.NB0BMSAD[2] initialAttributes; /* stmt.addr.line2*/
  set NB0BM001.NB0BMSCY initialAttributes; /* city*/
  set NB0BM001.NB0BMSST initialAttributes; /* state*/
  set NB0BM001.NB0BMSZP initialAttributes; /* zip*/
  set NB0BM001.NB0BMSCT initialAttributes; /* country*/
  ;
  set NB0BM001.NB1CFREQ initialAttributes; /* cust stat. freq.*/
  set NB0BM001.NB1SFREQ initialAttributes; /* srep statment freq.*/
  set NB0BM001.NB1CMBFL initialAttributes; /* combined flag.*/
  set NB0BM001.NB1PAYFL initialAttributes; /* pay inv. from bank*/
  set NB0BM001.NB1CPFL initialAttributes; /* cust statement print coop*/
  set NB0BM001.NB1AAFL initialAttributes; /* cust statement print aa*/
  set NB0BM001.NB1TDFL initialAttributes; /* cust statement print td*/
  ;
  ;
  if (NB0BW01.NB1GRPCD > " ") /* group code*/
    set NB0BM001.NB0BMSTA protect, invisible;
    set NB0BM001.NB0BMSTT protect;
  else
    set NB0BM001.NB0BMSTA normal;
    set NB0BM001.NB0BMSTA initialAttributes;
    set NB0BM001.NB0BMSTT initialAttributes;
  end
  ;
  NB0BM001.XXXRVNBR = "01"; /* revision #*/
  NB0BM001.XXXERRID = "NB0B300"; /* initial map display proc.*/
  NB0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* date*/
  ;
  ;
  ;
end // end NB0B500

// edit entry fields
Function NB0B600()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* only edit if this record can be added/changed -*/
   /* .. and    edit all fields, bottom to top........*/
   /* ------------------------------------------------------------*/
  ;
  NB0BW01.NB0BWNEW = "N"; /* new record to add*/
  ;
  if (NB0BW01.NB0BW2SW == "N" /* no company rec*/
   && NB0BW01.NB0BW3SW == "N") /* no store rec*/
    ;
     /* drop thru editing*/
    ;
  else
    ;
        /* -------------------------------------------------*/
        /* customer combined funds flag for fw/ap.*/
        /* -------------------------------------------------*/
    ;
    if (NB0BW01.NB1CMBFL == NB0BM001.NB1CMBFL) /* combined fw/ap flag*/
           /* no change*/
    else
      if (NB0BW01.NB1CMBFL == " "
       && NB0BM001.NB1CMBFL == "N") /* default values.*/
        NB0BW01.NB0BWNEW = "Y"; /* new record to add*/
         /* no change*/
      else
        NB0BW01.NB0BWMOD = "Y";
                                   /* change requested*/
        if (NB0BM001.NB1CMBFL == "Y"
         || NB0BM001.NB1CMBFL == "N")
           /* proper flag value*/
        else
          set NB0BM001.NB1CMBFL cursor, modified, bold;
          converseLib.validationFailed(74); /* y or n valid*/
        end
      end
    end
    ;
        /* -------------------------------------------------*/
        /* customer status - changed only if not a group*/
    /* note:  if cust > 0, stor=0, and dept=0, it must be active.*/
        /* -------------------------------------------------*/
    ;
    if (NB0BM001.NB1GRPCD == " ") /* not a group....*/
      if (NB0BM001.NB0BMSTT != NB0BW01.NB0BMSTT) /* customer status*/
        if (NB0BW01.NB0BMSTT == " " /* no prior status*/
         && NB0BM001.NB0BMSTT == "A") /* default status*/
             /* this is a default value*/
          NB0BW01.NB0BWNEW = "Y"; /* new record to add*/
        else
          if (NB0BM001.KUMSTRID == 0
           && NB0BM001.XNXCD == 0)
            NB0BM001.NB0BMSTT = "A"; /* force active status*/
            NB0BW01.NB0BWMOD = "Y"; /* chg requested*/
          else
            if (NB0BM001.NB0BMSTT == "I"
             || NB0BM001.NB0BMSTT == "A")
              NB0BW01.NB0BWMOD = "Y"; /* chg requested*/
            else
              set NB0BM001.NB0BMSTT cursor, modified, bold; /* customer status*/
              converseLib.validationFailed(71); /* must be 'a' or 'i'*/
            end
          end
        end
      end
    end
    ;
        /* -------------------------------------------------*/
        /* statement and credit addresses.......*/
        /* -------------------------------------------------*/
    NB0B610();
    ;
        /* -------------------------------------------------*/
        /* statement frequency  - sales rep./credit*/
        /* -------------------------------------------------*/
    NB0B620(); /* statement frequency*/
    ;
        /* -------------------------------------------------*/
        /* program participation*/
        /* -------------------------------------------------*/
    NB0B630(); /* prog. participation*/
    ;
        /* -------------------------------------------------*/
        /* pay invoices with nike bank funds*/
        /* -------------------------------------------------*/
    NB0B640(); /* pay pop inv from bank*/
    ;
        /* -------------------------------------------------*/
        /* cutomer statement types*/
        /* -------------------------------------------------*/
    NB0B650();
                                   /* customer stmt information*/
    ;
    ;
    ;
                 /* ****** contact person - name ******/
    ;
    if (NB0BW01.NB0BMCNM != NB0BM001.NB0BMCNM) /* contact person*/
      NB0BW01.NB0BWMOD = "Y"; /* chg requested*/
    end
    ;
    ;
                 /* ****** contact person - phone ******/
    ;
    if (NB0BW01.NB1CTPH != NB0BM001.NB1CTPH) /* contact phone*/
      NB0BW01.NB0BWMOD = "Y"; /* chg requested*/
    end
  end
  ;
  ;
  ;
             /* -----------------------------------------*/
             /* ******** did the key change ???  *********/
             /* -----------------------------------------*/
  ;
  if (NB0BW01.NB0BWCCO != NB0BM001.KUCCOID  /* company*/
   || NB0BW01.NB0BWCST != NB0BM001.KUMSTRID /* store*/
   || NB0BW01.NB0BWCDP != NB0BM001.XNXCD    /* dept*/
   || NB0BW01.NB0BWCGP != NB0BM001.NB1GRPCD /* group code*/
   || NB0BW01.NB0BWBCD != NB0BM001.XBCCD)   /* BRAND*/
    if (NB0BW01.NB0BWMOD == "Y" /* change nb1rec?*/
     || NB0BW01.NB0BWCFL == "A" /* add new credit addr.*/
     || NB0BW01.NB0BWCFL == "C" /* change an address*/
     || NB0BW01.NB0BWSFL == "A" /* add new srep addr*/
     || NB0BW01.NB0BWSFL == "C") /* change srep addr.*/
             /* -----------------------------------------*/
               /* restore original key & process.*/
             /* -----------------------------------------*/
      ;
      converseLib.validationFailed(33); /* can not update & change key*/
      NB0BM001.KUCCOID = NB0BW01.NB0BWCCO; /* company*/
      NB0BM001.KUMSTRID = NB0BW01.NB0BWCST; /* store*/
      NB0BM001.XNXCD = NB0BW01.NB0BWCDP; /* dept*/
      NB0BM001.NB1GRPCD = NB0BW01.NB0BWCGP; /* group code*/
      NB0BM001.XBCCD = NB0BW01.NB0BWBCD; /* division*/
      ;
      set NB0BM001.KUCCOID cursor, modified, bold;
      set NB0BM001.KUMSTRID modified, bold; /* store*/
      set NB0BM001.XNXCD modified, bold; /* dept*/
      set NB0BM001.NB1GRPCD modified, bold; /* group code*/
      ;
    end
  else
    if (NB0BW01.NB0BW2SW == "Y" /* valid nike company*/
     || NB0BW01.NB0BW3SW == "Y") /* valid nike store*/
      if (NB0BW01.NB0BWNEW == "Y") /* new record to add*/
        ;
        /* --------------------------------------------*/
            /* wish to add rec with only default values*/
        /* --------------------------------------------*/
        NB0BW01.NB0BWMOD = "Y";
                                   /* ;    ok.... continue*/
      end
    else
      converseLib.validationFailed(44); /* invalid company*/
    end
  end
  ;
  ;
  ;
end // end NB0B600

// edit statement & credit addr.
Function NB0B610()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* ........  default to country to 'USA' if a state is given.*/
   /* ------------------------------------------------------------*/
  ;
  if (NB0BM001.NB0BMSAD[1] != " " /* srep.addr.line1*/
   || NB0BM001.NB0BMSAD[2] != " ") /* srep.addr.line2*/
    if (NB0BM001.NB0BMSST != " ") /* state filled?*/
      NB0BM001.NB0BMSCT = "USA ";
    end
  end
  ;
  ;
  ;
  if (NB0BM001.NB0BMCAD[1] != " " /* cust.addr.line1*/
   || NB0BM001.NB0BMCAD[2] != " ") /* cust.addr.line2*/
    if (NB0BM001.NB0BMCST != " ") /* state filled?*/
      NB0BM001.NB0BMCCT = "USA "; /* x*/
    end
  end
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* ........  edit statement and credit addresses...*/
   /* ------------------------------------------------------------*/
  ;
  ;
      /* -------------------------------------------------*/
      /* statement address......*/
          /* note- the following condition is a match:*/
             /* when the map addr. line 1 is blank &*/
             /* w/s addr. line 1 = 'address not active'*/
      /* -------------------------------------------------*/
  ;
  ;
  NB0BW01.NB0BWSFL = " "; /* set statment add.change flag*/
  NB0BW01.NB0BWCFL = " "; /* set statment add.change flag*/
  if (NB0BW01.NB0BMSAD[1] == "ADDRESS NOT ACTIVE" /* w/s  addr.line1*/
   && NB0BM001.NB0BMSAD[1] == " ")                /* ;       map*/
     /* treat like a match*/
  else
    if (NB0BW01.NB1STADR == 0) /* no prev. addr*/
      if (NB0BM001.NB0BMSAD[1] > " " /* map data*/
       || NB0BM001.NB0BMSAD[2] > " ")
        ;
          /* -------------------------------------------------*/
          /* ***  this is a new address entry*/
          /* -------------------------------------------------*/
        ;
        NB0BW01.NB0BWMOD = "Y"; /* change nb1rec*/
        NB0BW01.NB0BWSFL = "A"; /* srep addr. add*/
        if (NB0BM001.NB0BMSCY > " ") /* city is entered*/
             /* city must be present*/
        else
          converseLib.validationFailed(82); /* city required*/
          set NB0BM001.NB0BMSCY cursor, modified, bold; /* city*/
        end
        ;
        if (NB0BM001.NB0BMSZP > 0) /* city entered*/
             /* zip must be filled*/
        else
          NB0BM001.NB0BMSZP = 0000; /* ZIP*/
        end
        ;
        if (NB0BM001.NB0BMSST > " ") /* state code*/
          if (NB0BM001.NB0BMSST in XSTTBL.XSTCD)
            NB0BM001.NB0BMSST = XSTTBL.XSTCD[sysVar.arrayIndex];
          end /* valid?*/
          if (sysVar.arrayIndex == 0)
            set NB0BM001.NB0BMSST cursor, modified, bold; /* state*/
            converseLib.validationFailed(72); /* invalid state*/
          else
             /* ok!*/
          end
        else
          if (NB0BM001.NB0BMSCT > " ") /* country code*/
            if (NB0BM001.NB0BMSCT in XCTTBL.XCTCD)
              NB0BM001.NB0BMSCT = XCTTBL.XCTCD[sysVar.arrayIndex];
            end /* valid?*/
            if (sysVar.arrayIndex == 0)
              set NB0BM001.NB0BMSCT cursor, modified, bold; /* country*/
              converseLib.validationFailed(68); /* invalid cntry*/
            end
          else
            set NB0BM001.NB0BMSCT cursor, modified, bold; /* country*/
            set NB0BM001.NB0BMSST cursor, modified, bold; /* state*/
            converseLib.validationFailed(69); /* state or country*/
          end
        end
      end
    else
      if (NB0BW01.NB0BMSAD[1] != NB0BM001.NB0BMSAD[1] /* stmt.addr.line1*/
       || NB0BW01.NB0BMSAD[2] != NB0BM001.NB0BMSAD[2] /* stmt.addr.line1*/
       || NB0BW01.NB0BMSCY != NB0BM001.NB0BMSCY       /* city*/
       || NB0BW01.NB0BMSST != NB0BM001.NB0BMSST       /* state*/
       || NB0BW01.NB0BMSZP != NB0BM001.NB0BMSZP       /* zip*/
       || NB0BW01.NB0BMSCT != NB0BM001.NB0BMSCT)      /* country*/
        ;
          /* -------------------------------------------------*/
          /* ***  this is change to an existing address*/
          /* -------------------------------------------------*/
        ;
        NB0BW01.NB0BWSFL = "C";
                                   /* change srep addr.*/
        ;
        if (NB0BM001.NB0BMSAD[1] == " "
         && NB0BM001.NB0BMSAD[2] == " ")
          ;
            /* do not continue the edit*/
          ;
        else
          ;
          if (NB0BM001.NB0BMSCY > " ") /* city is entered*/
               /* city must be present*/
          else
            converseLib.validationFailed(82); /* city required*/
            set NB0BM001.NB0BMSCY cursor, modified, bold; /* city*/
          end
          ;
          if (NB0BM001.NB0BMSZP > 0) /* city is entered*/
               /* zip must be filled*/
          else
            NB0BM001.NB0BMSZP = 0000; /* ZIP*/
          end
          ;
          if (NB0BM001.NB0BMSST > " ") /* state code*/
            if (NB0BM001.NB0BMSST in XSTTBL.XSTCD)
              NB0BM001.NB0BMSST = XSTTBL.XSTCD[sysVar.arrayIndex];
            end /* valid?*/
            if (sysVar.arrayIndex == 0)
              set NB0BM001.NB0BMSST cursor, modified, bold; /* state*/
              converseLib.validationFailed(72); /* invalid state*/
            else
               /* ok!*/
            end
          else
            if (NB0BM001.NB0BMSCT > " ") /* country code*/
              if (NB0BM001.NB0BMSCT in XCTTBL.XCTCD)
                NB0BM001.NB0BMSCT = XCTTBL.XCTCD[sysVar.arrayIndex];
              end /* valid?*/
              if (sysVar.arrayIndex == 0)
                set NB0BM001.NB0BMSCT cursor, modified, bold; /* country*/
                converseLib.validationFailed(68); /* invalid cntry*/
              end
            else
              set NB0BM001.NB0BMSCT cursor, modified, bold; /* country*/
              set NB0BM001.NB0BMSST cursor, modified, bold; /* state*/
              converseLib.validationFailed(69); /* state or country*/
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
      /* -------------------------------------------------*/
      /* credit    address......*/
      /* -------------------------------------------------*/
  if (NB0BW01.NB0BMCAD[1] == "ADDRESS NOT ACTIVE" /* w/s  addr.line1*/
   && NB0BM001.NB0BMCAD[1] == " ")                /* map*/
     /* treat like a match*/
  else
    if (NB0BW01.NB1CRADR == 0) /* no prev. addr*/
      if (NB0BM001.NB0BMCAD[1] > " " /* map data*/
       || NB0BM001.NB0BMCAD[2] > " ")
        ;
          /* -------------------------------------------------*/
         /* ****  this is a new address entry*/
          /* -------------------------------------------------*/
        ;
        NB0BW01.NB0BWMOD = "Y"; /* change nb1rec*/
        NB0BW01.NB0BWCFL = "A"; /* cred.addr. add*/
        if (NB0BM001.NB0BMCCY > " ") /* city is entered*/
             /* city must be present*/
        else
          converseLib.validationFailed(82); /* city required*/
          set NB0BM001.NB0BMCCY cursor, modified, bold; /* city*/
        end
        if (NB0BM001.NB0BMCZP > 0) /* city is entered*/
             /* zip must be filled*/
        else
          NB0BM001.NB0BMCZP = 0000; /* ZIP*/
        end
        ;
        if (NB0BM001.NB0BMCST > " ")
          if (NB0BM001.NB0BMCST in XSTTBL.XSTCD)
            NB0BM001.NB0BMCST = XSTTBL.XSTCD[sysVar.arrayIndex];
          end /* valid?*/
          if (sysVar.arrayIndex == 0)
            set NB0BM001.NB0BMCST cursor, modified, bold; /* state*/
            converseLib.validationFailed(72); /* invalid state*/
          else
             /* ok!*/
          end
          ;
        else
          if (NB0BM001.NB0BMCCT > " ") /* country code*/
            if (NB0BM001.NB0BMCCT in XCTTBL.XCTCD)
              NB0BM001.NB0BMCCT = XCTTBL.XCTCD[sysVar.arrayIndex];
            end /* valid?*/
            if (sysVar.arrayIndex == 0)
              set NB0BM001.NB0BMCCT cursor, modified, bold; /* country*/
              converseLib.validationFailed(68); /* invalid cntry*/
            end
          else
            set NB0BM001.NB0BMCCT cursor, modified, bold; /* country*/
            set NB0BM001.NB0BMCST cursor, modified, bold; /* state*/
            converseLib.validationFailed(69); /* state or country*/
          end
        end
      end
    else
      if (NB0BW01.NB0BMCAD[1] != NB0BM001.NB0BMCAD[1] /* stmt.addr.line1*/
       || NB0BW01.NB0BMCAD[2] != NB0BM001.NB0BMCAD[2] /* stmt.addr.line1*/
       || NB0BW01.NB0BMCCY != NB0BM001.NB0BMCCY       /* city*/
       || NB0BW01.NB0BMCST != NB0BM001.NB0BMCST       /* state*/
       || NB0BW01.NB0BMCZP != NB0BM001.NB0BMCZP       /* zip*/
       || NB0BW01.NB0BMCCT != NB0BM001.NB0BMCCT)      /* country*/
        ;
          /* -------------------------------------------------*/
          /* ***  this is change to an existing address*/
          /* -------------------------------------------------*/
        ;
        NB0BW01.NB0BWCFL = "C"; /* change cred.addr*/
        ;
        if (NB0BM001.NB0BMCAD[1] == " " /* stmt.addr.line1*/
         && NB0BM001.NB0BMCAD[2] == " ") /* stmt.addr.line1*/
          ;
            /* do not continue edit*/
        else
          if (NB0BM001.NB0BMCCY > " ") /* city is entered*/
               /* city must be present*/
          else
            converseLib.validationFailed(82); /* city required*/
            set NB0BM001.NB0BMCCY cursor, modified, bold; /* city*/
          end
          ;
          if (NB0BM001.NB0BMCZP > 0) /* city is entered*/
               /* zip must be filled*/
          else
            NB0BM001.NB0BMCZP = 0000; /* ZIP*/
          end
          ;
          if (NB0BM001.NB0BMCST > " ") /* STATE*/
            if (NB0BM001.NB0BMCST in XSTTBL.XSTCD)
              NB0BM001.NB0BMCST = XSTTBL.XSTCD[sysVar.arrayIndex];
            end /* valid?*/
            if (sysVar.arrayIndex == 0)
              set NB0BM001.NB0BMCST cursor, modified, bold; /* state*/
              converseLib.validationFailed(72); /* invalid state*/
            else
               /* ok!*/
            end
          else
            if (NB0BM001.NB0BMCCT > " ") /* country code*/
              if (NB0BM001.NB0BMCCT in XCTTBL.XCTCD)
                NB0BM001.NB0BMCCT = XCTTBL.XCTCD[sysVar.arrayIndex];
              end /* valid?*/
              if (sysVar.arrayIndex == 0)
                set NB0BM001.NB0BMCCT cursor, modified, bold; /* country*/
                converseLib.validationFailed(68); /* invalid cntry*/
              end
            else
              set NB0BM001.NB0BMCCT cursor, modified, bold; /* country*/
              set NB0BM001.NB0BMCST cursor, modified, bold; /* state*/
              converseLib.validationFailed(69); /* state or country*/
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
end // end NB0B610

// statement frequency edit
Function NB0B620()
  ;
  ;
      /* -------------------------------------------------*/
      /* statement frequency  - sales rep.*/
      /* -------------------------------------------------*/
  ;
  if (NB0BM001.NB1SFREQ == NB0BW01.NB1SFREQ) /* srep statment freq.*/
     /* no change*/
  else
    if (NB0BM001.NB1SFREQ == "MO" /* default*/
     && NB0BW01.NB1SFREQ == " ")  /* no prior freq.*/
       /* nothing*/
    else
      NB0BW01.NB0BWMOD = "Y"; /* chg requested*/
      if (NB0BM001.NB1SFREQ == "MO"
       || NB0BM001.NB1SFREQ == "QT"
       || NB0BM001.NB1SFREQ == "YR"
       || NB0BM001.NB1SFREQ == "RQ")
      else
        set NB0BM001.NB1SFREQ cursor, modified, bold;
        converseLib.validationFailed(73); /* must be mo,qt,yr,rq*/
      end
    end
  end
  ;
      /* -------------------------------------------------*/
      /* statement frequency  - customer*/
      /* -------------------------------------------------*/
  ;
  ;
  if (NB0BM001.NB1CFREQ == NB0BW01.NB1CFREQ) /* cust.statment freq.*/
     /* no change*/
  else
    if (NB0BM001.NB1CFREQ == "RQ" /* default*/
     && NB0BW01.NB1CFREQ == " ")  /* no prior freq*/
       /* nothing*/
    else
      NB0BW01.NB0BWMOD = "Y"; /* change requested*/
      if (NB0BM001.NB1CFREQ == "MO"
       || NB0BM001.NB1CFREQ == "QT"
       || NB0BM001.NB1CFREQ == "YR"
       || NB0BM001.NB1CFREQ == "RQ")
      else
        set NB0BM001.NB1CFREQ cursor, modified, bold;
        converseLib.validationFailed(73); /* only mo,qt,yr,rq*/
      end
    end
  end
  ;
  ;
  ;
end // end NB0B620

// program participation
Function NB0B630()
  ;
  ;
  ;
      /* -------------------------------------------------*/
      /* program partipation*/
      /* -------------------------------------------------*/
  ;
               /* ****** f. co-op *******/
  if (NB0BW01.NB1FCFL == NB0BM001.NB1FCFL) /* forf.co-op flag*/
     /* no change*/
  else
    if (NB0BW01.NB1FCFL == " " /* nothing prior*/
     && NB0BM001.NB1FCFL == "N") /* default*/
      NB0BW01.NB0BWNEW = "Y"; /* new customer*/
      ;
    else
      NB0BW01.NB0BWMOD = "Y"; /* chg requested*/
      if (NB0BM001.NB1FCFL == "Y"
       || NB0BM001.NB1FCFL == "N")
         /* proper flag value*/
      else
        set NB0BM001.NB1FCFL cursor, modified, bold;
        converseLib.validationFailed(74); /* 'y'or'n' valid*/
      end
    end
  end
  ;
  ;
  ;
end // end NB0B630

// pay promo inv from bank edit
Function NB0B640()
  ;
  ;
      /* -------------------------------------------------*/
      /* pay promo invoices from nike bank co-op:  edit*/
      /* -------------------------------------------------*/
  ;
  if (NB0BM001.NB1PAYFL == NB0BW01.NB1PAYFL) /* pay invoices flag*/
     /* no change*/
  else
    if (NB0BM001.NB1PAYFL == "Y" /* default yes*/
     && NB0BW01.NB1PAYFL == " ") /* no prior value*/
       /* nothing*/
    else
      NB0BW01.NB0BWMOD = "Y"; /* chg requested*/
      if (NB0BM001.NB1PAYFL == "Y"
       || NB0BM001.NB1PAYFL == "N")
      else
        set NB0BM001.NB1PAYFL cursor, modified, bold;
        converseLib.validationFailed(74); /* must be yes or no*/
      end
    end
  end
  ;
  ;
  ;
end // end NB0B640

// customer statement types: edit
Function NB0B650()
  ;
  ;
      /* -------------------------------------------------*/
      /* customer statement types:  edits*/
      /* -------------------------------------------------*/
  ;
      /* -------------------------------------------------*/
                 /* print CO-OP............*/
      /* -------------------------------------------------*/
  ;
  if (NB0BM001.NB1CPFL == NB0BW01.NB1CPFL) /* print co-op flag*/
     /* no change*/
  else
    if (NB0BM001.NB1CPFL == "Y" /* default yes*/
     && NB0BW01.NB1CPFL == " ") /* no prior value*/
       /* nothing*/
    else
      NB0BW01.NB0BWMOD = "Y"; /* chg requested*/
      if (NB0BM001.NB1CPFL == "Y"
       || NB0BM001.NB1CPFL == "N")
      else
        set NB0BM001.NB1CPFL cursor, modified, bold;
        converseLib.validationFailed(74); /* must be yes or no*/
      end
    end
  end
  ;
  ;
      /* -------------------------------------------------*/
                 /* print AD ALLOWANCE.....*/
      /* -------------------------------------------------*/
  ;
  if (NB0BM001.NB1AAFL == NB0BW01.NB1AAFL) /* print aa flag*/
     /* no change*/
  else
    if (NB0BM001.NB1AAFL == "Y" /* default yes*/
     && NB0BW01.NB1AAFL == " ") /* no prior value*/
       /* nothing*/
    else
      NB0BW01.NB0BWMOD = "Y"; /* chg requested*/
      if (NB0BM001.NB1AAFL == "Y"
       || NB0BM001.NB1AAFL == "N")
      else
        set NB0BM001.NB1AAFL cursor, modified, bold;
        converseLib.validationFailed(74); /* must be yes or no*/
      end
    end
  end
  ;
      /* -------------------------------------------------*/
                 /* print TRADE DISCOUNT...*/
      /* -------------------------------------------------*/
  ;
  if (NB0BM001.NB1TDFL == NB0BW01.NB1TDFL) /* print td flag*/
     /* no change*/
  else
    if (NB0BM001.NB1TDFL == "Y" /* default yes*/
     && NB0BW01.NB1TDFL == " ") /* no prior value*/
       /* nothing*/
    else
      NB0BW01.NB0BWMOD = "Y"; /* chg requested*/
      if (NB0BM001.NB1TDFL == "Y"
       || NB0BM001.NB1TDFL == "N")
      else
        set NB0BM001.NB1TDFL cursor, modified, bold;
        converseLib.validationFailed(74); /* must be yes or no*/
      end
    end
  end
  ;
  ;
  ;
end // end NB0B650

// update databases!
Function NB0B700()
  ;
  ;
     /* --------------------------------------------*/
     /* format date for records.....*/
     /* --------------------------------------------*/
  ;
  NB0BW01.NB0BWDT1 = VGVar.currentShortGregorianDate;
  NB0BW01.NB0BWHYY = NB0BW01.NB0BWD1Y; /* year*/
  NB0BW01.NB0BWHMM = NB0BW01.NB0BWD1M; /* month*/
  NB0BW01.NB0BWHDD = NB0BW01.NB0BWD1D; /* day*/
  ;
  if (NB0BW01.NB0BWHYY <= 51)
    NB0BW01.NB0BWHCC = 20; /* century*/
  else
    NB0BW01.NB0BWHCC = 19;
  end
  ;
     /* --------------------------------------------*/
     /* perform any address updates.*/
     /* --------------------------------------------*/
  ;
  if (NB0BW01.NB0BWCFL == "A" /* new credit address*/
   || NB0BW01.NB0BWSFL == "A") /* new srep address*/
    NB0B710();
  end
  ;
  ;
  if (NB0BW01.NB0BWCFL == "C" /* modify an existing cred. addr.*/
   || NB0BW01.NB0BWSFL == "C") /* modify an existing srep addr.*/
    NB0B750();
  end
  ;
  ;
     /* --------------------------------------------*/
     /* update nike bank customer record.*/
     /* --------------------------------------------*/
  ;
  if (NB0BW01.NB0BWMOD == "Y") /* change made to nb1rec....*/
    NB0B760();
  end
  ;
  if (converseVar.validationMsgNum == 0)
    converseLib.validationFailed(19); /* database updated*/
  end
  ;
  ;
  ;
end // end NB0B700

// process adds new addresses
Function NB0B710()
  ;
  ;
     /* --------------------------------------------*/
     /* new credit address..*/
     /* --------------------------------------------*/
  ;
  if (NB0BW01.NB0BWCFL == "A") /* new credit address*/
    ;
    NB0BW01.NB0BWADR[1] = "NIKE BANK CREDIT ADDRESS";
    NB0BW01.NB0BWADX[1] = "*"; /* line format **/
    NB0BW01.NB0BWADR[2] = NB0BM001.NB0BMCAD[1];
    NB0BW01.NB0BWADX[2] = "*"; /* line format **/
    NB0BW01.NB0BWADR[3] = NB0BM001.NB0BMCAD[2];
    NB0BW01.NB0BWADX[3] = "*"; /* line format **/
    NB0BW01.NB0BWAFC = NB0BM001.NB0BMCCY; /* city*/
    NB0BW01.NB0BWAFS = NB0BM001.NB0BMCST; /* state*/
    NB0BW01.NB0BWAFZ = NB0BM001.NB0BMCZP; /* zip*/
    NB0BW01.NB0BWAFT = NB0BM001.NB0BMCCT; /* country*/
    ;
    ;
    NB0B720(); /* get next customer address id*/
    if (converseVar.validationMsgNum == 0)
      NB0BW01.NB1CRADR = KUCREC.KUCMADID; /* hold srep address id*/
      NB0BW01.NB0BWAID = KUCREC.KUCMADID; /* address id for updating*/
      NB0B730(); /* add new address record (kulrec)*/
      ;
      ;
      if (converseVar.validationMsgNum == 0)
        ;
          /* load w/s to reflect new address...*/
        ;
        NB0BW01.NB0BMCAD[1] = NB0BW01.NB0BWADR[2];
        NB0BW01.NB0BMCAD[2] = NB0BW01.NB0BWADR[3];
        NB0BW01.NB0BMCCY = NB0BW01.NB0BWAFC; /* city*/
        NB0BW01.NB0BMCST = NB0BW01.NB0BWAFS; /* state*/
        NB0BW01.NB0BMCZP = NB0BW01.NB0BWAFZ; /* zip*/
        NB0BW01.NB0BMCCT = NB0BW01.NB0BWAFT; /* country*/
        ;
      end
    end
  end
  ;
  ;
     /* --------------------------------------------*/
     /* new srep   address..*/
     /* --------------------------------------------*/
  ;
  if (NB0BW01.NB0BWSFL == "A") /* new srep   address*/
    NB0BW01.NB0BWADR[1] = "NIKE BANK SREP STATEMENT ADDR.";
    NB0BW01.NB0BWADX[1] = "*"; /* line format **/
    NB0BW01.NB0BWADR[2] = NB0BM001.NB0BMSAD[1];
    NB0BW01.NB0BWADX[2] = "*"; /* line format **/
    NB0BW01.NB0BWADR[3] = NB0BM001.NB0BMSAD[2];
    NB0BW01.NB0BWADX[3] = "*"; /* line format **/
    NB0BW01.NB0BWAFC = NB0BM001.NB0BMSCY; /* city*/
    NB0BW01.NB0BWAFS = NB0BM001.NB0BMSST; /* state*/
    NB0BW01.NB0BWAFZ = NB0BM001.NB0BMSZP; /* zip*/
    NB0BW01.NB0BWAFT = NB0BM001.NB0BMSCT; /* country*/
    ;
    ;
    ;
    NB0B720(); /* get next customer address id*/
    if (converseVar.validationMsgNum == 0)
      NB0BW01.NB1STADR = KUCREC.KUCMADID; /* hold cred.address id*/
      NB0BW01.NB0BWAID = KUCREC.KUCMADID; /* address id for updating*/
      NB0B730(); /* add new address record (kulrec)*/
      if (converseVar.validationMsgNum == 0)
          /* load w/s to reflect new address...*/
        ;
        NB0BW01.NB0BMSAD[1] = NB0BW01.NB0BWADR[2];
        NB0BW01.NB0BMSAD[2] = NB0BW01.NB0BWADR[3];
        ;
        NB0BW01.NB0BMSCY = NB0BW01.NB0BWAFC; /* city*/
        NB0BW01.NB0BMSST = NB0BW01.NB0BWAFS; /* state*/
        NB0BW01.NB0BMSZP = NB0BW01.NB0BWAFZ; /* zip*/
        NB0BW01.NB0BMSCT = NB0BW01.NB0BWAFT; /* country*/
        ;
      end
    end
  end
  ;
  ;
  ;
end // end NB0B710

// find company(kucrec)record
Function NB0B720()
  ;
  ;
    /* ----------------------------------------------------*/
                    /* find company data*/
    /* ----------------------------------------------------*/
  ;
  ;
  set KUCREC empty;
  set SQLCA empty;
  set TA1REC empty;
  ;
  KUCREC.KUCCOID = NB0BW01.NB0BWCCO; /* company*/
  TA1REC.TA1LOCAT[1] = "S ";
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* obtain company rec.*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    KUCREC.KUCMADID = KUCREC.KUCMADID + 1; /* set up address id*/
    TA1REC.TA1LOCAT[1] = "U ";
    call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* update kucrec.*/
  end
  ;
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return..*/
     /* all ok........*/
    ;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    ;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      NB0BM001.XXXERRID = "NB0B720"; /* error process*/
      converseLib.validationFailed(16); /* in use-try later*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[2] = "NB0B720";
      TA1REC.TA1LOCAT[3] = "IO0240 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1LOCAT[4] = "NB0BM001";
      TA1REC.TA1DBASE = "DCUST. ";
      TA1REC.TA1TBLVU = "VCMPNY01";
      NB0BW01.NB0BWCKX = " "; /* clear key display area*/
      NB0BW01.NB0BWCCX = NB0BW01.NB0BWCST; /* convert to display co.*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B720

// add new address rec(kulrec)
Function NB0B730()
  ;
   /* 11/09/93 LGROSS CHANGED KULREC.XXXADDR1 TO KULREC.*/
   /* XXX-ADDR1,2,3*/
  ;
  set KULREC empty;
  NB0BW01.NB0BWT1 = VGVar.currentFormattedTime;
  NB0BW01.NB0BWTHH = NB0BW01.NB0BWTHR;
  NB0BW01.NB0BWTMN = NB0BW01.NB0BWTMI;
  ;
  ;
    /* ----------------------------------------------------*/
         /* add address ....*/
    /* ----------------------------------------------------*/
  ;
  KULREC.KUCCOID = KUCREC.KUCCOID; /* company*/
  KULREC.KULAAID = NB0BW01.NB0BWAID; /* addr. id number*/
  KULREC.KULUSCNT = 1; /* addr. use count*/
  KULREC.XXX-ADDR1 = NB0BW01.NB0BWADR[1];
  KULREC.XXX-ADDR2 = NB0BW01.NB0BWADR[2];
  KULREC.XXX-ADDR3 = NB0BW01.NB0BWADR[3];
  KULREC.XXXCITY = NB0BW01.NB0BWAFC; /* city*/
  KULREC.XSTCD = NB0BW01.NB0BWAFS; /* state*/
  ;
  if (NB0BW01.NB0BWAFT == "USA ") /* country=usa*/
    KULREC.XXXZIP = NB0BW01.NB0BWAFZ; /* zip*/
  else
    KULREC.XXXZIP = "  "; /* blank zip for non usa.*/
  end
  ;
  KULREC.XCYCD = "000"; /* county code- for sales anal.*/
  KULREC.XCTCD = NB0BW01.NB0BWAFT; /* country*/
  KULREC.ZZZSDT = NB0BW01.NB0BWHDT; /* set up date*/
  KULREC.ZZZCHGDT = NB0BW01.NB0BWHDT; /* change date*/
  KULREC.ZZZCHGTM = NB0BW01.NB0BWT2; /* change time*/
  ;
  call "IO0170" ("A ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* address.*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    set KUZREC empty; /* audit rec.*/
    KUZREC.KUZTYPE = "A"; /* type of audit = add*/
    ;
    NB0B735(); /* cut audit record*/
  end /* for new address*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
     /* ok...*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  else
    NB0BM001.XXXERRID = "NB0B730"; /* error process*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "NB0B";
    TA1REC.TA1LOCAT[1] = "A ";
    TA1REC.TA1LOCAT[2] = "NB0B730";
    TA1REC.TA1LOCAT[3] = "IO0170 ";
    TA1REC.TA1LOCAT[4] = "NB0BM001";
    TA1REC.TA1DBASE = "DCUST. ";
    TA1REC.TA1TBLVU = "VADDR001";
    NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO; /* convert co. display*/
    NB0BW01.NB0BWCST = NB0BW01.NB0BWAID; /* convert addr. id #*/
    TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX; /* move to display field*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
    NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  ;
end // end NB0B730

// audit record (kuzrec) for cust
Function NB0B735()
  ;
  ;
    /* ----------------------------------------------------*/
    /* kuzrec - audit record for customer address kulrec rec.*/
    /* ----------------------------------------------------*/
  ;
  ;
  set SQLCA empty;
  set TA1REC empty;
  ;
  NB0BW01.NB0BWBIN = 65;
  KUZREC.KUZSSEQ = NB0BW01.NB0BWBIN; /* audit sort sequence*/
  ;
      /* KUZREC.kuztype is filled prior to # nb0b735*/
      /* KUZREC.kuzbfcd is filled (before/after flag)*/
  ;
  KUZREC.XXXTBLNM = "VADDR001"; /* table name*/
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* user id number*/
  KUZREC.KUCCOID = KULREC.KUCCOID; /* company*/
  NB0BW01.NB0BWBIN = 0;
  KUZREC.KUMSTRID = NB0BW01.NB0BWBIN; /* store*/
  KUZREC.XNXCD = NB0BW01.NB0BWBIN; /* department*/
  KUZREC.XGPCD = " "; /* gpc*/
  KUZREC.ZZZSDT = NB0BW01.NB0BWHDT; /* date*/
  ;
  NB0BW01.NB0BWT1 = VGVar.currentFormattedTime; /* get time*/
  NB0BW01.NB0BWT3H = NB0BW01.NB0BWTHR; /* hour*/
  NB0BW01.NB0BWT3M = NB0BW01.NB0BWTMI; /* min*/
  NB0BW01.NB0BWT3S = NB0BW01.NB0BWTSC; /* seconds*/
  KUZREC.ZZHHMMSS = NB0BW01.NB0BWT3; /* time - hhmmss*/
  ;
  NB0BW01.NB0BWBIN = 156;
  KUZREC.KUZLEN = NB0BW01.NB0BWBIN; /* rec.length being audited*/
  ;
  KUZREC.KUZDATA = KULREC.KULGRP;
  ;
  ;
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* add new audit rec*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return..*/
    ;
     /* ... ok*/
    ;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
       /* go on.....*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[1] = "A ";
      TA1REC.TA1LOCAT[2] = "NB0B735";
      TA1REC.TA1LOCAT[3] = "IO0500 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1LOCAT[4] = "NB0BM001";
      TA1REC.TA1DBASE = "DCUST. "; /* database*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* table view*/
      NB0BW01.NB0BWCKX = " "; /* clear key display area*/
      NB0BW01.NB0BWCCX = NB0BW01.NB0BWCST; /* convert to display co.*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B735

// change aternate addresses
Function NB0B750()
  ;
  ;
     /* --------------------------------------------*/
     /* change credit address..*/
     /* --------------------------------------------*/
  ;
  if (NB0BW01.NB0BWCFL == "C") /* change credit address*/
    if (NB0BM001.NB0BMCAD[1] == " "
     && NB0BM001.NB0BMCAD[2] == " ")
      ;
        /* --- address is being blanked out... ----*/
      ;
      ;
      NB0BW01.NB0BWADL[1] = "NIKE BANK CREDIT ADDRESS";
      NB0BW01.NB0BWADX[1] = "*"; /* line format **/
      NB0BW01.NB0BWADL[2] = "ADDRESS NOT ACTIVE";
      NB0BW01.NB0BWADX[2] = "*"; /* line format **/
      NB0BW01.NB0BWADL[3] = " ";
      NB0BW01.NB0BWADX[3] = "*"; /* line format **/
      ;
       /* --- restore original city,state,zip so cust. db is ok.*/
      ;
      NB0BW01.NB0BWAFC = NB0BW01.NB0BMCCY; /* city*/
      NB0BW01.NB0BWAFS = NB0BW01.NB0BMCST; /* state*/
      NB0BW01.NB0BWAFZ = NB0BW01.NB0BMCZP; /* zip*/
      NB0BW01.NB0BWAFT = NB0BW01.NB0BMCCT; /* country*/
      NB0BW01.NB0BWAID = NB0BW01.NB1CRADR; /* address id*/
      ;
      ;
    else
      NB0BW01.NB0BWADL[1] = "NIKE BANK CREDIT ADDRESS";
      NB0BW01.NB0BWADX[1] = "*"; /* line format **/
      NB0BW01.NB0BWADL[2] = NB0BM001.NB0BMCAD[1];
      NB0BW01.NB0BWADX[2] = "*"; /* line format **/
      NB0BW01.NB0BWADL[3] = NB0BM001.NB0BMCAD[2];
      NB0BW01.NB0BWADX[3] = "*"; /* line format **/
      NB0BW01.NB0BWAFC = NB0BM001.NB0BMCCY; /* city*/
      NB0BW01.NB0BWAFS = NB0BM001.NB0BMCST; /* state*/
      NB0BW01.NB0BWAFZ = NB0BM001.NB0BMCZP; /* zip*/
      NB0BW01.NB0BWAFT = NB0BM001.NB0BMCCT; /* country*/
      NB0BW01.NB0BWAID = NB0BW01.NB1CRADR; /* address id*/
    end
    ;
    NB0B755(); /* update customer address*/
    ;
    if (converseVar.validationMsgNum == 0)
      ;
       /* --- update w/s with new address ------*/
      ;
      NB0BW01.NB0BMCAD[1] = NB0BW01.NB0BWADL[2];
      NB0BW01.NB0BMCAD[2] = NB0BW01.NB0BWADL[3];
      NB0BW01.NB0BMCCY = NB0BW01.NB0BWAFC;
      NB0BW01.NB0BMCST = NB0BW01.NB0BWAFS;
      NB0BW01.NB0BMCZP = NB0BW01.NB0BWAFZ;
      NB0BW01.NB0BMCCT = NB0BW01.NB0BWAFT;
    end
  end
  ;
  ;
     /* --------------------------------------------*/
     /* new srep   address..*/
     /* --------------------------------------------*/
  ;
  if (NB0BW01.NB0BWSFL == "C") /* new srep   address*/
    if (NB0BM001.NB0BMSAD[1] == " "
     && NB0BM001.NB0BMSAD[2] == " ")
      ;
        /* --- address is being blanked out... ----*/
      ;
      ;
      NB0BW01.NB0BWADL[1] = "NIKE BANK SREP ADDRESS";
      NB0BW01.NB0BWADX[1] = "*"; /* line format **/
      NB0BW01.NB0BWADL[2] = "ADDRESS NOT ACTIVE";
      NB0BW01.NB0BWADX[2] = "*"; /* line format **/
      NB0BW01.NB0BWADR[3] = " ";
      NB0BW01.NB0BWADX[3] = "*"; /* line format **/
      ;
       /* --- restore original city,state,zip so cust. db is ok.*/
      ;
      NB0BW01.NB0BWAFC = NB0BW01.NB0BMSCY; /* city*/
      NB0BW01.NB0BWAFS = NB0BW01.NB0BMSST; /* state*/
      NB0BW01.NB0BWAFZ = NB0BW01.NB0BMSZP; /* zip*/
      NB0BW01.NB0BWAFT = NB0BW01.NB0BMSCT; /* country*/
      NB0BW01.NB0BWAID = NB0BW01.NB1STADR; /* address id*/
      ;
      ;
    else
      NB0BW01.NB0BWADL[1] = "NIKE BANK SREP ADDRESS";
      NB0BW01.NB0BWADX[1] = "*"; /* line format **/
      NB0BW01.NB0BWADL[2] = NB0BM001.NB0BMSAD[1];
      NB0BW01.NB0BWADX[2] = "*"; /* line format **/
      NB0BW01.NB0BWADL[3] = NB0BM001.NB0BMSAD[2];
      NB0BW01.NB0BWADX[3] = "*"; /* line format **/
      NB0BW01.NB0BWAFC = NB0BM001.NB0BMSCY; /* city*/
      NB0BW01.NB0BWAFS = NB0BM001.NB0BMSST; /* state*/
      NB0BW01.NB0BWAFZ = NB0BM001.NB0BMSZP; /* zip*/
      NB0BW01.NB0BWAFT = NB0BM001.NB0BMSCT; /* country*/
      NB0BW01.NB0BWAID = NB0BW01.NB1STADR; /* address id*/
      ;
    end
    ;
    NB0B755(); /* update srep. address*/
    if (converseVar.validationMsgNum == 0)
      ;
       /* --- update w/s with new address ------*/
      ;
      NB0BW01.NB0BMSAD[1] = NB0BW01.NB0BWADL[2];
      NB0BW01.NB0BMSAD[2] = NB0BW01.NB0BWADL[3];
      NB0BW01.NB0BMSCY = NB0BW01.NB0BWAFC;
      NB0BW01.NB0BMSST = NB0BW01.NB0BWAFS;
      NB0BW01.NB0BMSZP = NB0BW01.NB0BWAFZ;
      NB0BW01.NB0BMSCT = NB0BW01.NB0BWAFT;
    end
  end
  ;
  ;
  ;
end // end NB0B750

// update(kulrec)address rec.
Function NB0B755()
  ;
  ;
    /* ----------------------------------------------------*/
        /* update address in kulrec.....*/
   /* 11/09/93 LGROSS CHANGED KULREC.XXXADDR1,2,3 TO KULREC.*/
   /* XXX-ADDR1,2,3*/
    /* ----------------------------------------------------*/
  ;
  set KULREC empty;
  NB0BW01.NB0BWT1 = VGVar.currentFormattedTime;
  NB0BW01.NB0BWTHH = NB0BW01.NB0BWTHR;
  NB0BW01.NB0BWTMN = NB0BW01.NB0BWTMI;
  ;
  KULREC.KUCCOID = NB0BM001.KUCCOID; /* company*/
  KULREC.KULAAID = NB0BW01.NB0BWAID; /* addr. id number*/
  ;
  ;
  TA1REC.TA1LOCAT[1] = "S ";
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* address.*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    set KUZREC empty; /* audit rec*/
    KUZREC.KUZTYPE = "C";
    KUZREC.KUZBFCD = "B";
    ;
    NB0B735(); /* create before audit rec.*/
    ;
    if (SQLCA.VAGen_SQLCODE == +0)
      KULREC.XXX-ADDR1 = NB0BW01.NB0BWADR[1];
      KULREC.XXX-ADDR2 = NB0BW01.NB0BWADR[2];
      KULREC.XXX-ADDR3 = NB0BW01.NB0BWADR[3];
      KULREC.XXXCITY = NB0BW01.NB0BWAFC;
      KULREC.XSTCD = NB0BW01.NB0BWAFS;
      KULREC.XXXZIP = NB0BW01.NB0BWAFZ;
      KULREC.XCYCD = "000"; /* county code*/
      KULREC.XCTCD = NB0BW01.NB0BWAFT; /* country*/
      KULREC.ZZZCHGDT = NB0BW01.NB0BWHDT; /* change date*/
      KULREC.ZZZCHGTM = NB0BW01.NB0BWT2; /* change time*/
      ;
      TA1REC.TA1LOCAT[1] = "U ";
      call "IO0170" ("U ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* address.*/
      ;
      if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
        set KUZREC empty; /* audit rec*/
        KUZREC.KUZTYPE = "C";
        KUZREC.KUZBFCD = "A";
        ;
        NB0B735(); /* create after audit rec.*/
        ;
      end
      ;
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* everything worked.*/
                               /* ; continue processing*/
  else
    NB0BM001.XXXERRID = "NB0B755"; /* error process*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "NB0B";
    TA1REC.TA1LOCAT[2] = "NB0B755";
    TA1REC.TA1LOCAT[3] = "IO0170 ";
    TA1REC.TA1LOCAT[4] = "NB0BM001";
    TA1REC.TA1DBASE = "DCUST. ";
    TA1REC.TA1TBLVU = "VADDR001";
    NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO; /* convert co. display*/
    TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX; /* display key used*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
    NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  ;
end // end NB0B755

// get  bank customer (nb1rec)
Function NB0B760()
  ;
  ;
    /* ----------------------------------------------------*/
            /* bank customer master...(nb1rec)*/
    /* ----------------------------------------------------*/
  ;
  ;
  set NB1REC empty;
  set TA1REC empty;
  ;
  if (NB0BW01.NB0BW1SW == "Y") /* existing bank customer*/
    ;
    NB1REC.NB1CUST = NB0BW01.NB0BWCCO; /* company*/
    NB1REC.KUMSTRID = NB0BW01.NB0BWCST; /* store*/
    NB1REC.XNXCD = NB0BW01.NB0BWCDP; /* dept.*/
    NB1REC.XDVCD = "01"; /* ;      division*/
    NB1REC.XBCCD = NB0BW01.NB0BWBCD; /* BRAND*/
    NB1REC.NB1GRPCD = NB0BW01.NB0BWCGP; /* group*/
    ;
    TA1REC.TA1LOCAT[1] = "S ";
    call "IO2210" ("S ", SQLCA, NB1REC) {isNoRefresh = yes, isExternal = yes};
                                   /* get acct master*/
    ;
    if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
      ;
      NB0B770(); /* load new field values*/
      NB1REC.ZZZCHGDT = NB0BW01.NB0BWHDT; /* last change date*/
      NB1REC.ZZZCHGTM = NB0BW01.NB0BWT2; /* last change time*/
      ;
      TA1REC.TA1LOCAT[1] = "U ";
      call "IO2210" ("U ", SQLCA, NB1REC) {isNoRefresh = yes, isExternal = yes}; /* get acct master*/
    end
  else
    ;
    ;
    NB1REC.NB1CUST = NB0BW01.NB0BWCCO; /* company*/
    NB1REC.KUMSTRID = NB0BW01.NB0BWCST; /* store*/
    NB1REC.XNXCD = NB0BW01.NB0BWCDP; /* dept.*/
    NB1REC.NB1GRPCD = NB0BW01.NB0BWCGP; /* group*/
    NB1REC.XDVCD = "01"; /* division*/
    NB1REC.XBCCD = NB0BW01.NB0BWBCD; /* BRAND*/
    NB1REC.ZZZSDT = NB0BW01.NB0BWHDT; /* set up date*/
    ;
    NB0B770(); /* load new values*/
    ;
    TA1REC.TA1LOCAT[1] = "A ";
    call "IO2210" ("A ", SQLCA, NB1REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    NB0BW01.NB0BW1SW = "Y"; /* an nb1rec exists!!*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit the update*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(16); /* db in use-try later*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[2] = "NB0B110";
      TA1REC.TA1LOCAT[3] = "IO2210 ";
      TA1REC.TA1LOCAT[4] = "NB0BM001";
      TA1REC.TA1DBASE = "DNBANK.";
      TA1REC.TA1TBLVU = "VBCUST01";
      NB0BW01.NB0BWCKX = " ";
                                   /* clear key display area*/
      NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO; /* convert co. to display*/
      NB0BW01.NB0BWCSX = NB0BW01.NB0BWCST; /* convert store -display*/
      NB0BW01.NB0BWCDX = NB0BW01.NB0BWCDP; /* convert dept  -display*/
      NB0BW01.NB0BWCGX = NB0BW01.NB0BWCGP; /* convert group -display*/
      NB0BW01.NB0BWBCX = NB0BW01.NB0BWBCD; /* convert BRAND*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B760

// load nb1rec with data
Function NB0B770()
  ;
  ;
    /* ----------------------------------------------------*/
            /* bank customer master...(nb1rec)*/
    /* ----------------------------------------------------*/
  ;
  ;
  set TA1REC empty;
  ;
  NB1REC.NB1CUST = NB0BW01.NB0BWCCO; /* company*/
  NB1REC.KUMSTRID = NB0BW01.NB0BWCST; /* store*/
  NB1REC.XNXCD = NB0BW01.NB0BWCDP; /* dept.*/
  NB1REC.XDVCD = "01"; /* division*/
  NB1REC.XBCCD = NB0BW01.NB0BWBCD; /* BRAND*/
  NB1REC.NB1GRPCD = NB0BW01.NB0BWCGP; /* group*/
  ;
  ;
  NB1REC.NB1CSTCT = NB0BM001.NB0BMCNM; /* contact name*/
  NB1REC.NB1CTPH = NB0BM001.NB1CTPH; /* contact phone*/
  ;
  NB1REC.NB1FCFL = NB0BM001.NB1FCFL; /* fc flag*/
  NB1REC.NB1PAYFL = NB0BM001.NB1PAYFL; /* pay inv.from bank*/
  ;
  NB1REC.NB1CFREQ = NB0BM001.NB1CFREQ; /* cust stmt freq*/
  NB1REC.NB1SFREQ = NB0BM001.NB1SFREQ; /* srep stmt freq*/
  NB1REC.NB1CPFL = NB0BM001.NB1CPFL; /* cust stmt-print coop*/
  NB1REC.NB1AAFL = NB0BM001.NB1AAFL; /* cust stmt-print aa*/
  NB1REC.NB1TDFL = NB0BM001.NB1TDFL; /* cust stmt-print td*/
  NB1REC.NB1CMBFL = NB0BM001.NB1CMBFL; /* combined fw/ap flag*/
  ;
  NB1REC.NB1CRADR = NB0BW01.NB1CRADR; /* credit address id*/
  NB1REC.NB1STADR = NB0BW01.NB1STADR; /* srep address id*/
  ;
  ;
    /* **** status is only enterable if this is not a group  ****/
    /* **** group name is only displayed if it is a group    ****/
  ;
  if (NB0BW01.NB0BWCGP == " ") /* not a group*/
    if (NB0BM001.NB0BMSTT == "A") /* customer status active*/
      NB1REC.NB1BTYPE = "AA"; /* customer status*/
    else
      NB1REC.NB1BTYPE = "II"; /* customer status*/
    end
  end
  ;
  ;
  ;
end // end NB0B770

// update w/s with changes
Function NB0B800()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* ........  update w/s to reflect changes made to screen.*/
   /* ------------------------------------------------------------*/
  ;
      /* -------------------------------------------------*/
      /* customer combined funds flag for fw/ap.*/
      /* -------------------------------------------------*/
  NB0BW01.NB1CMBFL = NB0BM001.NB1CMBFL; /* combined fw/ap flag*/
  ;
      /* -------------------------------------------------*/
      /* pay pop invoices from nike bank dollars.*/
      /* -------------------------------------------------*/
  NB0BW01.NB1PAYFL = NB0BM001.NB1PAYFL; /* pay inv.from bank*/
  ;
      /* -------------------------------------------------*/
      /* customer status - changed only if not a group*/
      /* -------------------------------------------------*/
  NB0BW01.NB0BMSTT = NB0BM001.NB0BMSTT; /* customer status*/
  ;
      /* -------------------------------------------------*/
      /* stat./credit addresses..w/s is updated in nb0b710.*/
      /* -------------------------------------------------*/
  ;
      /* -------------------------------------------------*/
      /* statement frequency  - sales rep.*/
      /* -------------------------------------------------*/
  NB0BW01.NB1SFREQ = NB0BM001.NB1SFREQ; /* srep statment freq.*/
  ;
      /* -------------------------------------------------*/
      /* statement frequency  - customer*/
      /* -------------------------------------------------*/
  ;
  NB0BW01.NB1CFREQ = NB0BM001.NB1CFREQ; /* cust.statment freq.*/
  ;
      /* -------------------------------------------------*/
      /* customer statement   - print coop,aa,td*/
      /* -------------------------------------------------*/
  ;
  NB0BW01.NB1CPFL = NB0BM001.NB1CPFL; /* cust.statment coop*/
  NB0BW01.NB1AAFL = NB0BM001.NB1AAFL; /* cust.statment aa*/
  NB0BW01.NB1TDFL = NB0BM001.NB1TDFL; /* cust.statment td*/
  ;
      /* -------------------------------------------------*/
      /* program partipation*/
      /* -------------------------------------------------*/
  NB0BW01.NB1FCFL = NB0BM001.NB1FCFL; /* forf.co-op flag*/
  ;
      /* -------------------------------------------------*/
      /* contact person.....*/
      /* -------------------------------------------------*/
  NB0BW01.NB0BMCNM = NB0BM001.NB0BMCNM; /* contact person*/
  ;
  NB0BW01.NB1CTPH = NB0BM001.NB1CTPH; /* contact phone*/
  ;
  ;
  ;
end // end NB0B800

// secondary loop
Function NB0B910()
  ;
  ;
  ;
  if (NB0BW02.NB0BWUFL == "Y") /* update flag....*/
    NB0B920(); /* load cust. inst. to w/s*/
  end
  ;
  ;
  if (NB0BW02.NB0BWUFL == "Y" /* update flag*/
   || NB0BW02.NB0BWSCF == "Y") /* scroll/pa2 flag*/
    NB0B930(); /* load map....*/
  end
  ;
  ;
  NB0B940(); /* converse map nb0bm002*/
  ;
  ;
  NB0BW02.NB0BWUFL = "N"; /* update flag...*/
  NB0BW02.NB0BWMOD = "N"; /* was map modified?*/
  NB0BW02.NB0BWSCF = "N"; /* reset scroll/pa2 flag*/
  ;
  NB0B945(); /* reset mdt's*/
  ;
  if (converseVar.eventKey is pa2)
    ;
    NB0BW02.NB0BWSCF = "Y"; /* reset scroll/pa2 flag*/
    ;
  else
    NB0B950(); /* pf key check*/
    if (converseVar.validationMsgNum == 0)
      NB0B960(); /* edit map/update*/
      ;
      if (converseVar.validationMsgNum == 0)
        if (NB0BW02.NB0BWUFL == "Y") /* map was modified*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          converseLib.validationFailed(19); /* updated database*/
        else
          NB0B970(); /* adjust for paging*/
        end
      end
    end
  end
  ;
  ;
  ;
   /* ------------------- end nb0ba10 -------------------------*/
end // end NB0B910

// get set of nb8rec records
Function NB0B920()
  ;
  ;
    /* ----------------------------------------------------*/
            /* bank customer text  ...(nb8rec)*/
       /* note: there can only be 28 lines - max!*/
    /* ----------------------------------------------------*/
  ;
  NB0BW02.NB0BW2S1 = 1; /* subscript*/
  while (NB0BW02.NB0BW2S1 <= 28)
    ;
    NB0BW02.NB8TEXT[NB0BW2S1] = " "; /* instruction*/
    NB0BW02.NB8TXSEQ[NB0BW2S1] = 0; /* sequence #*/
    NB0BW02.NB0BW2S1 = NB0BW02.NB0BW2S1 + 1;
  end
  ;
  ;
  set NB8REC empty;
  set TA1REC empty;
  ;
  NB8REC.NB1CUST = NB0BW01.NB0BWCCO; /* company*/
  NB8REC.XDVCD = "01"; /* division*/
  NB8REC.XBCCD = NB0BW01.NB0BWBCD; /* BRAND*/
  ;
  TA1REC.TA1LOCAT[1] = "S1";
  call "IO2240" ("S1", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* get acct master*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    ;
    NB0BW02.NB0BW2S1 = 1; /* initialize subscript*/
    while (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
      NB0B922(); /* load w/s with text*/
    end
    ;
    TA1REC.TA1LOCAT[1] = "C1";
    call "IO2240" ("C1", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* get acct master*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* file opened & closed ok*/
    /* .... no problem, continue*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(16); /* db in use-try later*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[2] = "NB0B920";
      TA1REC.TA1LOCAT[3] = "IO2240 ";
      TA1REC.TA1LOCAT[4] = "NB0BM002";
      TA1REC.TA1DBASE = "DNBANK.";
      TA1REC.TA1TBLVU = "VBCTXT01";
      NB0BW01.NB0BWCKX = " "; /* clear key display area*/
      NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO; /* convert co. to display*/
      NB0BW01.NB0BWBCX = NB0BW01.NB0BWBCD; /* BRAND*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B920

// load w/s with text.
Function NB0B922()
  ;
  ;
  ;
  call "IO2240" ("N1", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* next text rec*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    ;
    NB0BW02.NB8TXSEQ[NB0BW2S1] = NB8REC.NB8TXSEQ; /* text sequence*/
    NB0BW02.NB0BW2SQ = NB8REC.NB8TXSEQ; /* hold last seq#*/
    NB0BW02.NB8TEXT[NB0BW2S1] = NB8REC.NB8TEXT; /* text*/
    NB0BW02.NB0BW2S1 = NB0BW02.NB0BW2S1 + 1;
    ;
    ;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* no cust notes*/
      /* .... no problem, continue*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(16); /* db in use-try later*/
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "NB0B";
        TA1REC.TA1LOCAT[1] = "N1";
        TA1REC.TA1LOCAT[2] = "NB0B922";
        TA1REC.TA1LOCAT[3] = "IO2240 ";
        TA1REC.TA1LOCAT[4] = "NB0BM002";
        TA1REC.TA1DBASE = "DNBANK.";
        TA1REC.TA1TBLVU = "VBCTXT01";
        NB0BW01.NB0BWCKX = " ";
                                   /* clear key display area*/
        NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO;
                                   /* convert co. to display*/
        NB0BW01.NB0BWBCX = NB0BW01.NB0BWBCD; /* convert BRAND*/
        TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        NB0BM002.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
    end
  end
  ;
  ;
  ;
end // end NB0B922

// load map 2 -cust instruct.
Function NB0B930()
  ;
  ;
  if (NB0BW02.NB0BWSDF == "1") /* screen display switch*/
    NB0BW02.NB0BW2S1 = 1; /* w/s position*/
  else
    NB0BW02.NB0BW2S1 = 15; /* w/s position*/
  end
  ;
  ;
  ;
  NB0BW02.NB0BW2S2 = 1; /* map position*/
  ;
  while (NB0BW02.NB0BW2S2 <= 14)
    NB0BM002.NB8TXSEQ[NB0BW2S2] = NB0BW02.NB8TXSEQ[NB0BW2S1];
    NB0BM002.NB8TEXT[NB0BW2S2] = NB0BW02.NB8TEXT[NB0BW2S1];
    NB0BW02.NB0BW2S2 = NB0BW02.NB0BW2S2 + 1; /* screen position*/
    NB0BW02.NB0BW2S1 = NB0BW02.NB0BW2S1 + 1; /* w/s position*/
  end
  ;
  ;
  ;
end // end NB0B930

// converse map 2 - instructions
Function NB0B940()
  converse NB0BM002 ;
  ;
  ;
  ;
end // end NB0B940

// reset mdt's - map nb0bm002
Function NB0B945()
  ;
  ;
  ;
  NB0BW02.NB0BW2S2 = 1; /* map position*/
  ;
  while (NB0BW02.NB0BW2S2 <= 14)
    set NB0BM002.NB8TEXT[NB0BW2S2] initialAttributes;
    NB0BW02.NB0BW2S2 = NB0BW02.NB0BW2S2 + 1; /* screen position*/
  end
  ;
  ;
  ;
end // end NB0B945

// validate attention keys...
Function NB0B950()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* this is a very limited screen.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3  /* return*/
   || converseVar.eventKey is pf7  /* previous 14 lines*/
   || converseVar.eventKey is pf8  /* next 14 lines*/
   || converseVar.eventKey is pf16 /* customer screen*/
   || converseVar.eventKey is pa2) /* cancel any changes- refresh*/
    ;
     /* so far, so good*/
    ;
  else
    converseLib.validationFailed(03); /* invalid pk key..*/
  end
  ;
  ;
  ;
end // end NB0B950

// edit map nb0bm002
Function NB0B960()
  ;
  ;
    /* ------------------------------------------------------*/
         /* edit map.... only edit being: was it changed?*/
    /* nb0bw2s1 - working storage location*/
    /* nb0bw2s2 - screen location.....*/
    /* ------------------------------------------------------*/
  ;
  NB0BW02.NB0BW2S2 = 1; /* screen location*/
  ;
  if (NB0BW02.NB0BWSDF == "1") /* screen display flag*/
    NB0BW02.NB0BW2S1 = 1; /* w/s - first 14 lines*/
  else
    NB0BW02.NB0BW2S1 = 15; /* w/s - lines 15 to 28*/
  end
  ;
  ;
  while (NB0BW02.NB0BW2S2 <= 14
   && SQLCA.VAGen_SQLCODE == 0)
    if (NB0BW02.NB8TEXT[NB0BW2S1] != NB0BM002.NB8TEXT[NB0BW2S2])
      NB0BW02.NB0BWUFL = "Y"; /* data modified*/
      if (NB0BM002.NB8TEXT[NB0BW2S2] == " ") /* map line to delete*/
        NB0B962(); /* delete record*/
      else
        if (NB0BW02.NB8TEXT[NB0BW2S1] == " ") /* w/s is blank, map not blank*/
          NB0B964(); /* add new text record*/
        else
          NB0B966(); /* change existing record*/
        end
      end
      if (SQLCA.VAGen_SQLCODE == 0) /* ok*/
        ;
      else
        set NB0BM002.NB8TEXT[NB0BW2S2] cursor, modified, bold;
        converseLib.validationFailed(67); /* can not update the databases. press pa2 to refresh.*/
      end
    end
    ;
    NB0BW02.NB0BW2S1 = NB0BW02.NB0BW2S1 + 1; /* w/s location*/
    NB0BW02.NB0BW2S2 = NB0BW02.NB0BW2S2 + 1; /* screen location*/
  end
  ;
  ;
  ;
end // end NB0B960

// delete(nb8rec)instructions
Function NB0B962()
  ;
  ;
    /* ----------------------------------------------------*/
        /* delete nb8rec.....*/
    /* ----------------------------------------------------*/
  ;
  set NB8REC empty;
  ;
  NB8REC.NB1CUST = NB0BM002.KUCCOID; /* company*/
  NB8REC.XDVCD = "01"; /* division*/
  NB8REC.XBCCD = NB0BM002.XBCCD; /* BRAND*/
  NB8REC.NB8TXSEQ = NB0BM002.NB8TXSEQ[NB0BW2S2]; /* text sequence #*/
  ;
  ;
  TA1REC.TA1LOCAT[1] = "S ";
  call "IO2240" ("S ", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* text rec*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    TA1REC.TA1LOCAT[1] = "D ";
    call "IO2240" ("D ", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* text rec*/
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* everything worked.*/
                               /* ; continue processing*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(16);
    else
      NB0BM002.XXXERRID = "NB0BA62"; /* error process*/
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[2] = "NB0B962";
      TA1REC.TA1LOCAT[3] = "IO2240 ";
      TA1REC.TA1LOCAT[4] = "NB0BM002";
      TA1REC.TA1DBASE = "DCUST. ";
      TA1REC.TA1TBLVU = "VBCTXT01";
      NB0BW01.NB0BWCCX = NB0BM002.KUCCOID; /* convert co. display*/
      NB0BW01.NB0BWBCX = NB0BM002.XBCCD; /* BRAND*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX; /* display key used*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B962

// add new(nb8rec)instructions
Function NB0B964()
  ;
  ;
    /* ----------------------------------------------------*/
        /* add    nb8rec.....*/
    /* ----------------------------------------------------*/
  ;
  set NB8REC empty;
  ;
  NB8REC.NB1CUST = NB0BM002.KUCCOID; /* company*/
  NB8REC.XDVCD = "01"; /* division*/
  NB8REC.XBCCD = NB0BM002.XBCCD; /* BRAND*/
  ;
  NB8REC.NB8TXSEQ = NB0BW02.NB0BW2SQ + 1; /* last used text sequence #*/
  NB0BW02.NB0BW2SQ = NB0BW02.NB0BW2SQ + 1; /* last used text sequence #*/
  ;
  ;
  TA1REC.TA1LOCAT[1] = "S ";
  call "IO2240" ("S ", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* text rec*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* one doesn't currently exist*/
    set NB8REC empty;
    NB8REC.NB1CUST = NB0BM002.KUCCOID; /* company*/
    NB8REC.XDVCD = "01"; /* division*/
    NB8REC.XBCCD = NB0BM002.XBCCD; /* BRAND*/
    ;
    NB8REC.NB8TXSEQ = NB0BW02.NB0BW2SQ; /* last used text sequence #*/
    NB8REC.NB8TEXT = NB0BM002.NB8TEXT[NB0BW2S2]; /* text*/
    NB0BW01.NB0BWT1 = VGVar.currentFormattedTime;
    NB0BW01.NB0BWTHH = NB0BW01.NB0BWTHR;
    NB0BW01.NB0BWTMN = NB0BW01.NB0BWTMI;
    NB8REC.ZZZSDT = NB0BW01.NB0BWHDT; /* set up date*/
    NB8REC.ZZZCHGDT = 0; /* change date*/
    TA1REC.TA1LOCAT[1] = "A ";
    call "IO2240" ("A ", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* text rec*/
  end
  ;
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* everything worked.*/
                                 /* ; continue processing*/
    NB0BM001.NB0BMNOT = "YES"; /* set cust note to 'yes'*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(16);
    else
      NB0BM002.XXXERRID = "NB0BA62"; /* error process*/
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[2] = "NB0B964";
      TA1REC.TA1LOCAT[3] = "IO2240 ";
      TA1REC.TA1LOCAT[4] = "NB0BM002";
      TA1REC.TA1DBASE = "DCUST. ";
      TA1REC.TA1TBLVU = "VBCTXT01";
      NB0BW01.NB0BWCCX = NB0BM002.KUCCOID; /* convert co. display*/
      NB0BW01.NB0BWBCX = NB0BM002.XBCCD; /* BRAND*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX; /* display key used*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B964

// update(nb8rec)- instructions
Function NB0B966()
  ;
  ;
    /* ----------------------------------------------------*/
        /* update nb8rec instruction line.*/
    /* ----------------------------------------------------*/
  ;
  set NB8REC empty;
  NB0BW01.NB0BWT1 = VGVar.currentFormattedTime;
  NB0BW01.NB0BWTHH = NB0BW01.NB0BWTHR;
  NB0BW01.NB0BWTMN = NB0BW01.NB0BWTMI;
  ;
  NB8REC.NB1CUST = NB0BM002.KUCCOID; /* company*/
  NB8REC.XDVCD = "01"; /* division*/
  NB8REC.XBCCD = NB0BM002.XBCCD; /* BRAND*/
  NB8REC.NB8TXSEQ = NB0BM002.NB8TXSEQ[NB0BW2S2]; /* sequence #*/
  ;
  ;
  TA1REC.TA1LOCAT[1] = "S ";
  call "IO2240" ("S ", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* address.*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* good return....*/
    NB8REC.NB8TEXT = NB0BM002.NB8TEXT[NB0BW2S2];
    NB8REC.ZZZCHGDT = NB0BW01.NB0BWHDT; /* change date*/
    NB8REC.ZZZCHGTM = NB0BW01.NB0BWT2; /* change time*/
    ;
    TA1REC.TA1LOCAT[1] = "U ";
    call "IO2240" ("U ", SQLCA, NB8REC) {isNoRefresh = yes, isExternal = yes}; /* address.*/
    ;
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* everything worked.*/
                               /* ; continue processing*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(16);
    else
      NB0BM002.XXXERRID = "NB0BA66"; /* error process*/
      NB0BM002.XXXERRID = "NB0BA66"; /* error process*/
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "NB0B";
      TA1REC.TA1LOCAT[2] = "NB0B966";
      TA1REC.TA1LOCAT[3] = "IO2240 ";
      TA1REC.TA1LOCAT[4] = "NB0BM002";
      TA1REC.TA1DBASE = "DCUST. ";
      TA1REC.TA1TBLVU = "VBCTXT01";
      NB0BW01.NB0BWCCX = NB0BW01.NB0BWCCO; /* convert co. display*/
      NB0BW01.NB0BWBCX = NB0BW01.NB0BWBCD; /* convert BRAND*/
      TA1REC.TA1TBLKE = NB0BW01.NB0BWCKX; /* display key used*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      NB0BM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  ;
  ;
end // end NB0B966

// adjust for paging...
Function NB0B970()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* set paging*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf8)
    if (NB0BW02.NB0BWSDF == "2") /* screen display second set*/
      converseLib.validationFailed(21); /* no more forward scroll*/
    else
      NB0BW02.NB0BWSDF = "2"; /* display lines 15 to 28*/
      NB0BW02.NB0BWSCF = "Y"; /* change display window*/
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf7)
    if (NB0BW02.NB0BWSDF == "1") /* screen display set*/
      converseLib.validationFailed(20); /* no more backward scroll*/
    else
      NB0BW02.NB0BWSDF = "1"; /* display first 14 lines*/
      NB0BW02.NB0BWSCF = "Y"; /* change display window*/
    end
  end
  ;
  ;
  ;
end // end NB0B970

//*** RECORD=NB0BW01 ****
// ;********************** NB0BW01 ****************************
// ;
// ;         work record for NB0B: NIKE BANK CUSTOMER
// ;
// : 10/27/93 lgross added fields NB0BWCC, NB0BWCSC, NB0BWCDC
// ;          Reduced size of NB0BWCO to 7 and NB0BWCDP  to 2
// ;***********************************************************
// ***********************
Record NB0BW01 type basicRecord
  5 NB0BW1GP NB0BW1GP ; 
    10 NB0BWDT1 NB0BWDT1 ; 
      15 NB0BWD1Y NB0BWD1Y ; 
      15 NB0BWD1M NB0BWD1M ; 
      15 NB0BWD1D NB0BWD1D ; 
    10 NB0BWHDT NB0BWHDT ; 
      15 NB0BWHCC NB0BWHCC ; 
      15 NB0BWHYY NB0BWHYY ; 
      15 NB0BWHMM NB0BWHMM ; 
      15 NB0BWHDD NB0BWHDD ; 
    10 NB0BWT1 NB0BWT1 ; 
      15 NB0BWTHR NB0BWTHR ; 
      15 NB0BWTC1 NB0BWTC1 ; 
      15 NB0BWTMI NB0BWTMI ; 
      15 NB0BWTC2 NB0BWTC2 ; 
      15 NB0BWTSC NB0BWTSC ; 
    10 NB0BWT2 NB0BWT2 ; 
      15 NB0BWTHH NB0BWTHH ; 
      15 NB0BWTMN NB0BWTMN ; 
    10 NB0BWT3 NB0BWT3 ; 
      15 NB0BWT3H NB0BWT3H ; 
      15 NB0BWT3M NB0BWT3M ; 
      15 NB0BWT3S NB0BWT3S ; 
    10 NB0BMUAN NB0BMUAN ; 
    10 NB0BMUAD NB0BMUAD ; 
    10 NB0BW1SW NB0BW1SW ; 
    10 NB0BW2SW NB0BW2SW ; 
    10 NB0BW3SW NB0BW3SW ; 
    10 NB0BWNOT NB0BWNOT ; 
    10 NB0BWKSW NB0BWKSW ; 
    10 NB0BWNEW NB0BWNEW ; 
    10 NB0BWBIN NB0BWBIN ; 
    10 NB0BWKEY NB0BWKEY ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 NB1GRPCD NB1GRPCD ; 
      15 XBCCD XBCCD ; 
    10 * char(1) ; 
    10 NB0BWCAI NB0BWCAI ; 
      15 NB0BWCCC NB0BWCCC ; 
        20 NB0BWCCO NB0BWCCO ; 
      15 NB0BWCSC NB0BWCSC ; 
        20 NB0BWCST NB0BWCST ; 
      15 NB0BWCDC NB0BWCDC ; 
        20 NB0BWCDP NB0BWCDP ; 
      15 NB0BWCGP NB0BWCGP ; 
      15 NB0BWBCD NB0BWBCD ; 
    10 NB0BWCKX NB0BWCKX ; 
      15 NB0BWCCX NB0BWCCX ; 
      15 NB0BWCSX NB0BWCSX ; 
      15 NB0BWCDX NB0BWCDX ; 
      15 NB0BWCGX NB0BWCGX ; 
      15 NB0BWBCX NB0BWBCX ; 
    10 NB0BWFRP NB0BWFRP ; 
    10 NB0BWARP NB0BWARP ; 
    10 NB0BWAD1 NB0BWAD1 ; 
    10 NB0BWAD2 NB0BWAD2 ; 
    10 NB0BWAD3 NB0BWAD3 ; 
    10 NB0BWAD4 NB0BWAD4 ; 
      15 NB0BWADC NB0BWADC ; 
      15 NB0BWADS NB0BWADS ; 
      15 NB0BWAX1 NB0BWAX1 ; 
      15 NB0BWADZ NB0BWADZ ; 
    10 NB0BWADT NB0BWADT ; 
    10 * char(2) ; 
    10 * char(3) ; 
    10 NB0BWMOD NB0BWMOD ; 
    10 NB0BMCNM NB0BMCNM ; 
    10 NB1CTPH NB1CTPH ; 
    10 NB1CPFL NB1CPFL ; 
    10 NB1AAFL NB1AAFL ; 
    10 NB1TDFL NB1TDFL ; 
    10 NB1DAFL NB1DAFL ; 
    10 NB1FCFL NB1FCFL ; 
    10 NB1CFREQ NB1CFREQ ; 
    10 NB1SFREQ NB1SFREQ ; 
    10 NB1CRADR NB1CRADR ; 
    10 NB0BMCAD NB0BMCAD [2] ; 
    10 NB0BMCCY NB0BMCCY ; 
    10 NB0BMCST NB0BMCST ; 
    10 NB0BMCZP NB0BMCZP ; 
    10 NB0BMCCT NB0BMCCT ; 
    10 NB1STADR NB1STADR ; 
    10 NB0BMSAD NB0BMSAD [2] ; 
    10 NB0BMSCY NB0BMSCY ; 
    10 NB0BMSST NB0BMSST ; 
    10 NB0BMSZP NB0BMSZP ; 
    10 NB0BMSCT NB0BMSCT ; 
    10 NB0BMSTT NB0BMSTT ; 
    10 NB1CMBFL NB1CMBFL ; 
    10 NB1PAYFL NB1PAYFL ; 
    10 NB0BWCFL NB0BWCFL ; 
    10 NB0BWSFL NB0BWSFL ; 
    10 NB0BWADR NB0BWADR [3] ; 
      15 NB0BWADL NB0BWADL ; 
      15 NB0BWADX NB0BWADX ; 
    10 NB0BWAFC NB0BWAFC ; 
    10 NB0BWAFS NB0BWAFS ; 
    10 NB0BWAFZ NB0BWAFZ ; 
    10 NB0BWAFT NB0BWAFT ; 
    10 NB0BWAID NB0BWAID ; 
    10 NB0BWHRP NB0BWHRP ; 
    10 NB0BWHI NB0BWHI ; 
    10 NB0BWLO NB0BWLO ; 
end // end NB0BW01

//*** RECORD=NB0BW02 ****
// ;********************** nb0bw02 ****************************
// ;
// ;         work record for nb0b: customer notes (nb8rec)
// ;
// ;***********************************************************
// ***********************
Record NB0BW02 type basicRecord
  5 NB0BWGRP NB0BWGRP ; 
    10 NB0BW2S1 NB0BW2S1 ; 
    10 NB0BW2S2 NB0BW2S2 ; 
    10 NB0BW2SQ NB0BW2SQ ; 
    10 NB0BWSDF NB0BWSDF ; 
    10 NB0BWSCF NB0BWSCF ; 
    10 NB0BWMOD NB0BWMOD ; 
    10 NB0BWUFL NB0BWUFL ; 
    10 NB0BW2TX NB0BW2TX [28] ; 
      15 NB8TXSEQ NB8TXSEQ ; 
      15 NB8TEXT NB8TEXT ; 
end // end NB0BW02

// credit address
DataItem NB0BMCAD char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NB0BMCCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit city
DataItem NB0BMCCY char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// contact name
DataItem NB0BMCNM char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit state
DataItem NB0BMCST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit zip
DataItem NB0BMCZP num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// statement address
DataItem NB0BMSAD char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NB0BMSCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// statement city
DataItem NB0BMSCY char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// statement state
DataItem NB0BMSST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer status
DataItem NB0BMSTT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// statement zip
DataItem NB0BMSZP num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total $ in unassigned claims
DataItem NB0BMUAD num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// number of unassigned claims
DataItem NB0BMUAN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem NB0BW1GP char(623)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found nb1rec (cust)
DataItem NB0BW1SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript-w.s. location
DataItem NB0BW2S1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript-screen location
DataItem NB0BW2S2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// last found seq number
DataItem NB0BW2SQ smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// found company record (kucrec)
DataItem NB0BW2SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NB0BW2TX char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found store record .....
DataItem NB0BW3SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address line 1
DataItem NB0BWAD1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address line 2
DataItem NB0BWAD2 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address line 3
DataItem NB0BWAD3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address line 4
DataItem NB0BWAD4 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// city
DataItem NB0BWADC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address line
DataItem NB0BWADL char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformat address
DataItem NB0BWADR char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// state
DataItem NB0BWADS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country
DataItem NB0BWADT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// splat for place holder
DataItem NB0BWADX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zip
DataItem NB0BWADZ char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// city for updating
DataItem NB0BWAFC char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// state for updating
DataItem NB0BWAFS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country for updating
DataItem NB0BWAFT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zip for updating
DataItem NB0BWAFZ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// address id for updating
DataItem NB0BWAID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// app. srep id
DataItem NB0BWARP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler
DataItem NB0BWAX1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// caitem BRAND code
DataItem NB0BWBCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error  BRAND
DataItem NB0BWBCX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// used for formatting binary
DataItem NB0BWBIN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key on entry or change
DataItem NB0BWCAI char(17)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

DataItem NB0BWCCC char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// caitem company id
DataItem NB0BWCCO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// error  company id
DataItem NB0BWCCX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem NB0BWCDC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// caitem dept code
DataItem NB0BWCDP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// error  dept code
DataItem NB0BWCDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// change to credit addr
DataItem NB0BWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// caitem group code
DataItem NB0BWCGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error  group code
DataItem NB0BWCGX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new key-error display only
DataItem NB0BWCKX char(21)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

DataItem NB0BWCSC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// caitem store id
DataItem NB0BWCST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// error  store id
DataItem NB0BWCSX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//   - day
DataItem NB0BWD1D char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   - month
DataItem NB0BWD1M char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   - year
DataItem NB0BWD1Y char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ezedte
DataItem NB0BWDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ftwr srep id
DataItem NB0BWFRP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem NB0BWGRP char(1748)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    - century
DataItem NB0BWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//    - day
DataItem NB0BWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reformatted date
DataItem NB0BWHDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// highest srep responsibility cd
DataItem NB0BWHI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    - month
DataItem NB0BWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold sales rep id
DataItem NB0BWHRP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//    - year
DataItem NB0BWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous valid key...
DataItem NB0BWKEY char(12)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// change in key switch
DataItem NB0BWKSW char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// lowest srep responsibility cd
DataItem NB0BWLO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data updated? y/n
DataItem NB0BWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// this record - add new
DataItem NB0BWNEW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer notes exist
DataItem NB0BWNOT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change display window
DataItem NB0BWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen display switch
DataItem NB0BWSDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change to srep addr
DataItem NB0BWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hh:mm:ss
DataItem NB0BWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hhmm
DataItem NB0BWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hhmmss
DataItem NB0BWT3 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     hours
DataItem NB0BWT3H num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     minutes
DataItem NB0BWT3M num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     seconds
DataItem NB0BWT3S num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     :
DataItem NB0BWTC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     :
DataItem NB0BWTC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     hours
DataItem NB0BWTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     hours
DataItem NB0BWTHR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     minutes
DataItem NB0BWTMI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     minutes
DataItem NB0BWTMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     seconds
DataItem NB0BWTSC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update flag.
DataItem NB0BWUFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// defective allow. partipation.
DataItem NB1DAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

