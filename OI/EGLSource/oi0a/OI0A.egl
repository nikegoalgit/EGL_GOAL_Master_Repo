package oi0a;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ku.common.*;
import oi.common.*;
import op.common.*;
import sm.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=OI0A ****
//                  maintaince log
// 
//   2/08/88 - smc               when sales rep not found the
//                               appl no longer abends. give
//                               a not found msg. proc-oi0a140
// 
//   2/08/88 - smc               problems with protect and
//                               clear screen logic.  changed
//                               code so it cleared out screen
//                               every time for diff parms.
//                               proc-oi0a001,oi0a200,oi0a210.
//   12/12/88  obecke            fixed paging, selection and
//                               subscripting. 200,450,500. #96
//   12/13/88  jwood             noncsp option added to calls
//   02/20/89  jwood             added xssegtr logic
//   08/07/90  jwood             changed oi0am015 - xcscd to a
//                               2 digit "character" fld
//   02/15/91  dmeier            regen for database changes
//   04/14/92  bbake2            database changes, sm5stat
//                               renamed to xxxstat - oi0a150
//   04/06/94  schase            Changed oi0am005 and oi0a110
//                               to interface with OP0X Appl.
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
// Y2KFIX  11/03/97 WSQUIR Y2K MODIFICATIONS MADE TO OI0A160
//                         AND OI0A165 PROCESSES.
// *********************
Program OI0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KUYREC KUYREC; // record
  OI0AW01 OI0AW01; // record
  OI0AW02 OI0AW02; // record
  OI0AW03 OI0AW03; // record
  OI0AW04 OI0AW04; // record
  OIAREC OIAREC; // record
  OIWREC OIWREC; // record
  SM1REC SM1REC; // record
  SM5REC SM5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OI0AM.OI0AM005,  // forms
      OI0AM.OI0AM010, 
      OI0AM.OI0AM015
   {
    pfKeyEquate = yes
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OI0A000: OI0A000();


    goto OI0A001; /* mainline process*/



    OI0A001: OI0A001();
    goto OI0A001; /* main process loop*/
  end // end main
end // end OI0A

// program initialization
Function OI0A000()


  XSENTRY(); /* application entry validation*/

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  CAEZSAP = sysVar.transactionID;
  CAEZSG12 = "OI";
  CAEZSG4 = "A";
  sysVar.transactionID = CAEZSAP;

   /* *************************************************************/

  set OI0AW01 empty; /* initialize working storage*/
  set OI0AW02 empty; /* initialize display storage*/
  set OI0AW03 empty; /* initialize temporary storage*/
  set OIAREC empty; /* initialize temporary storage*/
  set OIWREC empty; /* initialize temporary storage*/


  OI0AW01.OI0AWFTF = "Y"; /* first time flag*/
  OI0AW01.OI0AWLEF = "Y"; /* display left screen flag*/
  OI0AW01.OI0AWERR = "Y"; /* error flag auto on first time*/




  OI0AM005.OI0AMCDT = VGVar.currentShortGregorianDate; /* todays date to map*/
  OI0AM010.OI0AMCDT = VGVar.currentShortGregorianDate; /* todays date to map*/
  OI0AM015.OI0AMCDT = VGVar.currentShortGregorianDate; /* todays date to map*/


  OI0AW01.OI0AWCDT = VGVar.currentShortGregorianDate; /* add century*/


  if (OI0AW01.OI0AWCYY > 56) /* determine century*/
    OI0AW01.OI0AWCEN = 19; /* work date*/
  else
    OI0AW01.OI0AWCEN = 20; /* work date*/
  end


   /* *************************************************************/
end // end OI0A000

// main process loop
Function OI0A001()



  while (OI0AW01.OI0AWERR == "Y" /* error flag*/
   && OI0AW01.OI0AWFTF == "Y") /* first time flag is on*/
    OI0A100(); /* parameter screen*/
    OI0A110(); /* check pf keys*/
    OI0A120(); /* edit keys*/
  end

  if (OI0AW01.OI0AWERR == "N" /* no errors*/
   && OI0AW01.OI0AWFTF == "Y") /* first time flag is on*/
    OI0A200(); /* select callout orders*/
  end


  OI0AW01.OI0AWLEF = "Y";

  while (OI0AW01.OI0AWLEF == "Y") /* left side of map flag*/
    OI0A300(); /* converse oi0am010*/
    OI0A350(); /* check pf keys for left*/
  end

  while (OI0AW01.OI0AWRIG == "Y") /* rignt side of map flag*/
    OI0A400(); /* converse oi0am015*/
    OI0A450(); /* check pf keys for right*/
  end


  OI0AW03.OI0AWSEL = OI0AW01.OI0AWCLS;
  call "IO2030" (OI0AW03, SQLCA, OIAREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/


end // end OI0A001

// parameter screen
Function OI0A100()



  converse OI0AM005 ;


       /* converse with oi0am005 / parameter screen*/


end // end OI0A100

// check pf keys
Function OI0A110()



   /* *************************************************************/
    /* checking pf keys*/
   /* *************************************************************/


  if (converseVar.validationMsgNum == 209) /* over 85 record selected msg*/
    OI0AW01.OI0AWFTF = "N"; /* turn off first time flag*/
  end


  if (converseVar.eventKey is enter)
    /* next sentence*/
  else
    if (converseVar.eventKey is pf3) /* exit to op menu*/
      COMMAREA.CATOAP = "OP0X"; /* op main menu*/
      XSEXIT(); /* pass control to exit routine*/
      COMMAREA.CAUSERA = " "; /* clear user commarea*/
      OI0AM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* move error msg*/
      COMMAREA.CATOAP = " "; /* clear application*/
    else
      if (converseVar.eventKey is pf4) /* exit to master menu*/
        COMMAREA.CAUSERA = " "; /* clear user commarea*/
        XSPF4(); /* invoke master menu request*/
        OI0AM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* move error msg*/
        COMMAREA.CATOAP = " "; /* clear application*/
      else
        converseLib.validationFailed(008); /* invalid pf key*/
      end
    end
  end

  if (converseVar.eventKey is pf24)
    exit program;
  end



   /* *************************************************************/
    /* save fast path data*/
   /* *************************************************************/

  if (OI0AM005.CATOAP is modified) /* to application has changed*/
    COMMAREA.CATOAP = OI0AM005.CATOAP; /* move toap to commarea*/
  end

  set OI0AM005.CATOAP initialAttributes;


  if (OI0AM005.CAITEM is modified) /* item key has changed*/
    COMMAREA.CAITEM = OI0AM005.CAITEM; /* move item to commarea*/
  end

  set OI0AM005.CAITEM initialAttributes;


  if (converseVar.eventKey is enter /* transfer on enter key*/
   && COMMAREA.CATOAP > " ")        /* transfer to app*/
    COMMAREA.CAUSERA = " "; /* clear user commarea*/
    XSEXIT(); /* transfer to exit routine*/
  end


   /* *************************************************************/
    /* check for fast path entry*/
   /* *************************************************************/

  if (COMMAREA.CAITEM > " ") /* entered app with key*/
    OI0AW01.OI0AWKEY = COMMAREA.CAITEM; /* move key to ws*/
    COMMAREA.CAITEM = " "; /* clear commarea*/
  end
end // end OI0A110

// edit key
Function OI0A120()


  set OI0AM005.SM1AGYID initialAttributes;
  set OI0AM005.XXXUSRID initialAttributes;
  set OI0AM005.SM4REPID initialAttributes;
  set OI0AM005.OI0AMDHI initialAttributes;
  set OI0AM005.OI0AMDLO initialAttributes;

  OI0AW01.OI0AWERR = "N"; /* reset error flag*/

           /* edit callout dates*/

  OI0AW01.OI0AWEDT = OI0AM005.OI0AMDHI; /* Beg end date*/
  OI0AW01.OI0AWSDT = OI0AM005.OI0AMDLO; /* start date*/
  OI0A160(); /* validate callout date*/

           /* edit taken by*/

  OI0A140(); /* validate taken by*/

           /* edit sales rep id*/

  if (OI0AM005.SM4REPID != 0)
    SM5REC.SM1AGYID = OI0AM005.SM1AGYID;
    SM5REC.SM4REPID = OI0AM005.SM4REPID;
    OI0A150(); /* validate sales rep*/
  else
    SM5REC.SM4REPID = 0000; /* low range sales rep*/
    OI0AW03.OI0AWRHI = 9999; /* high range sales rep*/
  end

           /* edit agency id*/

  SM1REC.SM1AGYID = OI0AM005.SM1AGYID;
  OI0A130(); /* validate agency*/


  if (OI0AM005.XXXUSRID == " "
   && OI0AM005.SM1AGYID == " ")
    converseLib.validationFailed(205);
    OI0AW01.OI0AWERR = "Y";
    set OI0AM005.SM1AGYID cursor, bold;
  end

  if (OI0AM005.XXXUSRID != " "
   && OI0AM005.SM1AGYID != " ")
    converseLib.validationFailed(205);
    OI0AW01.OI0AWERR = "Y";
    set OI0AM005.SM1AGYID cursor, bold;
  end

       /* build select key for the callout data base call*/


  if (OI0AW01.OI0AWERR == "N")
    if (OI0AW01.OI0AWPTH == "1") /* key agency/sales rep/callout dates*/
      OIAREC.SM1AGYID = OI0AM005.SM1AGYID;
      OIAREC.SM4REPID = OI0AM005.SM4REPID;
      OIAREC.OP1CALDT = OI0AW01.OI0AWBSD; /* begin start date*/
      OI0AW03.OI0AWDHI = OI0AW01.OI0AWBED; /* begin end date*/
      OI0AW01.OI0AWSEL = "S2";
      OI0AW01.OI0AWNXT = "N2";
      OI0AW01.OI0AWCLS = "C2";
    else
      if (OI0AW01.OI0AWPTH == "2") /* key taken by/sales rep/callout dates*/
        OIAREC.SM4REPID = OI0AW01.SM4REPID;
        OIAREC.OP1CALDT = OI0AW01.OI0AWBSD; /* begin start date*/
        OI0AW03.OI0AWDHI = OI0AW01.OI0AWBED; /* begin end date*/
        OI0AW01.OI0AWSEL = "S1";
        OI0AW01.OI0AWNXT = "N1";
        OI0AW01.OI0AWCLS = "C1";
      end
    end
  end
end // end OI0A120

// validate agency
Function OI0A130()



  set SQLCA empty; /* initialize error storage*/

  if (OI0AW01.OI0AWERR == "N"
   && OI0AM005.SM1AGYID != " ")
    call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* validate agency id*/
    if (SQLCA.VAGen_SQLCODE == 0) /* agency found*/
      set OI0AM005.SM1AGYID initialAttributes; /* set to default attributes*/
      OI0AW01.OI0AWERR = "N"; /* reset error flag*/
      OI0AW01.OI0AWPTH = "1"; /* agency path taken*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* agency not found*/
        OI0AW01.OI0AWERR = "Y"; /* error flag*/
        converseLib.validationFailed(205);
        set OI0AM005.SM1AGYID cursor, modified, bold;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OI0A    ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "OI0A256 ";
        TA1REC.TA1LOCAT[3] = "IO0050  ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1MAP = "OI0AM005";
        TA1REC.TA1DBASE = "DSLSMN  ";
        TA1REC.TA1TBLVU = "VSAGCY01";
        TA1REC.TA1TBLKE = OI0AM005.SM1AGYID;
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " "; /* on error clear ws*/
        XSPF4();
      end
    end
  end
end // end OI0A130

// validate agency
Function OI0A140()
   /* *************************************************************/
        /* this process edits the taken by service rep*/
        /* logon id.*/
   /* *************************************************************/

        /* check for null service rep logon id*/

  set KUYREC empty;

  if (OI0AM005.XXXUSRID != " ")
    KUYREC.XXXUSRID = OI0AM005.XXXUSRID; /* load key*/
    call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* call io mod for query*/
    if (SQLCA.VAGen_SQLCODE == 0 /* check for found*/
     && KUYREC.XXXSTAT == "A")   /* check for active*/
      OIAREC.OP1TBREP = KUYREC.KUYSVRID;
      OI0AW01.OI0AWPTH = "2"; /* taken by path*/
      OI0AW01.OI0AWERR = "N";
      set OI0AM005.XXXUSRID initialAttributes;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* check for found*/
        OI0AW01.OI0AWERR = "Y";
        converseLib.validationFailed(040);
        set OI0AM005.XXXUSRID cursor, modified, bold;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OI0A    ";
        TA1REC.TA1LOCAT[1] = "SA      ";
        TA1REC.TA1LOCAT[2] = "OI0A140 ";
        TA1REC.TA1LOCAT[3] = "IO0550  ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1MAP = "OI0AM005";
        TA1REC.TA1DBASE = "DCUST   ";
        TA1REC.TA1TBLVU = "VSVREP01";
        TA1REC.TA1TBLKE = OI0AM005.XXXUSRID;
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " "; /* on error clear ws*/
        XSPF4();
      end
    end
  end

       /* if not found or not active then error*/




end // end OI0A140

// validate agency
Function OI0A150()



  set SQLCA empty; /* initialize error storage*/

  SM5REC.XXXSTAT = "A"; /* check for active sales rep*/

  call "IO0160" ("S ", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes}; /* validate sales rep*/

  if (SQLCA.VAGen_SQLCODE == 0) /* sales rep found*/
    set OI0AM005.SM4REPID initialAttributes; /* set to default attributes*/
    OI0AW03.OI0AWRHI = OI0AM005.SM4REPID; /* sales rep high range*/
    OI0AW01.OI0AWERR = "N"; /* reset error flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* sales rep not found*/
      SM5REC.XXXSTAT = "I"; /* check for inactive sales rep*/
      call "IO0160" ("S ", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes}; /* validate sales rep*/
      if (SQLCA.VAGen_SQLCODE == 0 /* sales rep found*/
       || SQLCA.VAGen_SQLCODE == -811) /* more than one found*/
        OI0AW03.OI0AWRHI = OI0AM005.SM4REPID; /* high rep range*/
        set OI0AM005.SM4REPID initialAttributes; /* set to default attributes*/
        OI0AW01.OI0AWERR = "N"; /* reset error flag*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* sales rep not found*/
          OI0AW01.OI0AWERR = "Y"; /* error flag*/
          converseLib.validationFailed(066);
          set OI0AM005.SM4REPID cursor, modified, bold;
        else
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OI0A    ";
          TA1REC.TA1LOCAT[1] = "S       ";
          TA1REC.TA1LOCAT[2] = "OI0A150 ";
          TA1REC.TA1LOCAT[3] = "IO0160  ";
          TA1REC.TA1LOCAT[4] = "        ";
          TA1REC.TA1MAP = "OI0AM005";
          TA1REC.TA1DBASE = "DSLSMN  ";
          TA1REC.TA1TBLVU = "VRAGCY01";
          TA1REC.TA1TBLKE = OI0AM005.SM4REPID;
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
          COMMAREA.CAUSERA = " "; /* on error clear ws*/
          XSPF4();
        end
      end
    end
  end
end // end OI0A150

// validate callout dates
Function OI0A160()



          /* *****************************************************/
          /* * generic date editing routine for order inquiry   **/
          /* *                                                  **/
          /* *                                                  **/
          /* * this routine checks the following conditions:    **/
          /* *                                                  **/
          /* * 1. whether the dates are in the proper mmddyy    **/
          /* *    format -- uses ta0040                         **/
          /* * 2. if only start date given, move 9's to the     **/
          /* *    end date.                                     **/
          /* * 3. if only end date given, move zeroses to the   **/
          /* *    start date.                                   **/
          /* * 4. start date cannot be greater then end date.   **/
          /* * 5. end date cannot be less then a year from      **/
          /* *    todays date.                                  **/
          /* *****************************************************/


         /* test condition 1*/



  if (OI0AWSDT > 0)
    set TA2REC empty; /* initialize working storage rec 2*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* functional request*/
    TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
    TA2REC.TA2GRGAN = OI0AW01.OI0AWSDT; /* set date arguement*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/
    if (TA2REC.TA2RTNCD != 0) /* check for invalid date*/
      converseLib.validationFailed(107); /* invalid date format*/
      OI0AW01.OI0AWERR = "Y";
      set OI0AM005.OI0AMDLO cursor, bold;
    end
  end
  if (OI0AWEDT > 0)
    set TA2REC empty; /* initialize working storage rec 2*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* functional request*/
    TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
    TA2REC.TA2GRGAN = OI0AW01.OI0AWEDT; /* set date arguement*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/
    if (TA2REC.TA2RTNCD != 0) /* check for invalid date*/
      converseLib.validationFailed(107); /* invalid date format*/
      OI0AW01.OI0AWERR = "Y";
      set OI0AM005.OI0AMDHI cursor, bold;
    end
  end


   /* **********   format dates ***********/

  if (OI0AW01.OI0AWERR == "N") /* no errors detected*/
    OI0A165(); /* format dates*/
  end

   /* **********   test 2   ***********/

  if (OI0AW01.OI0AWERR == "N") /* no errors detected*/
    if (OI0AW01.OI0AWBED == 0) /* no end date present*/
      OI0AW01.OI0AWBED = 999999999; /* move 9's to end date*/
    end
  end

   /* **********   test 3   ***********/

  if (OI0AW01.OI0AWERR == "N") /* no errors detected*/
    if (OI0AW01.OI0AWBSD == 0 /* no start date present*/
     && OI0AW01.OI0AWBED > 0) /* and have a start date*/
      OI0AW01.OI0AWBSD = 0; /* move zeroes to start dt*/
    end
  end

   /* **********   test 4   ***********/

  if (OI0AW01.OI0AWERR == "N" /* no errors detected*/
   && OI0AW01.OI0AWBSD > 0)   /* start date present*/
    if (OI0AW01.OI0AWBSD > OI0AW01.OI0AWBED) /* start date > end date*/
      converseLib.validationFailed(106); /* begin date can't be after end date*/
      OI0AW01.OI0AWERR = "Y"; /* error flag*/
      set OI0AM005.OI0AMDLO cursor, bold;
    end
  end

   /* **********   test 5   ***********/

  if (OI0AW01.OI0AWERR == "N") /* no errors detected*/
    if (OI0AW01.OI0AWBED < 999999999) /* end date not defaulted*/
   /*  */
   /* ************************ Y2K IN BEGIN *********************************/
   /*  */
      if (OI0AW01.OI0AWCYY == 00)
        OI0AW01.OI0AWCYY = 99;
      else
   /*  */
   /* ************************* Y2K IN END **********************************/
   /*  */
        OI0AW01.OI0AWCYY = OI0AW01.OI0AWCYY - 1; /* sub 1 year from todays dt*/
   /*  */
   /* ************************ Y2K IN BEGIN *********************************/
   /*  */
      end
   /*  */
   /* ************************* Y2K IN END **********************************/
   /*  */
      OI0AW01.OI0AWBCD = OI0AW01.OI0AWCUR; /* change num to bin*/
      if (OI0AW01.OI0AWBED < OI0AW01.OI0AWBCD) /* format yyyymmdd*/
        converseLib.validationFailed(22); /* invalid date format*/
        OI0AW01.OI0AWERR = "Y"; /* error flag*/
        set OI0AM005.OI0AMDHI cursor, bold;
      end
    end
  end


end // end OI0A160

// format dates
Function OI0A165()



  OI0AW01.OI0AWHDT = 0;

  if (OI0AW01.OI0AWSDT > 0) /* date present*/
   /*  */
   /* **************************** Y2K OUT BEGIN ****************************/
   /*  */
   /* MOVE OI0AW01.OI0AWCEN TO OI0AW01.OI0AWHCC;/* reformat mmddyy to yymmdd*/
   /*  */
   /* **************************** Y2K OUT END ******************************/
   /*  */
   /*  */
   /* **************************** Y2K IN BEGIN *****************************/
   /*  */
    if (OI0AW01.OI0AWSYY > 60)
      OI0AW01.OI0AWHCC = 19;
    else
      OI0AW01.OI0AWHCC = 20;
    end
   /*  */
   /* **************************** Y2K IN END *******************************/
   /*  */
    OI0AW01.OI0AWHMM = OI0AW01.OI0AWSMM;
    OI0AW01.OI0AWHDD = OI0AW01.OI0AWSDD;
    OI0AW01.OI0AWHYY = OI0AW01.OI0AWSYY;
  end


  OI0AW01.OI0AWBSD = OI0AW01.OI0AWHDT; /* change numeric to binary*/


  if (OI0AW01.OI0AWEDT > 0) /* date present*/
   /*  */
   /* **************************** Y2K OUT BEGIN ****************************/
   /*  */
   /* MOVE OI0AW01.OI0AWCEN TO OI0AW01.OI0AWHCC;/* reformat mmddyy to yymmdd*/
   /*  */
   /* **************************** Y2K OUT END ******************************/
   /*  */
   /*  */
   /* **************************** Y2K IN BEGIN *****************************/
   /*  */
    if (OI0AW01.OI0AWEYY > 60)
      OI0AW01.OI0AWHCC = 19;
    else
      OI0AW01.OI0AWHCC = 20;
    end
   /*  */
   /* **************************** Y2K IN END *******************************/
   /*  */
    OI0AW01.OI0AWHMM = OI0AW01.OI0AWEMM;
    OI0AW01.OI0AWHDD = OI0AW01.OI0AWEDD;
    OI0AW01.OI0AWHYY = OI0AW01.OI0AWEYY;
  end


  OI0AW01.OI0AWBED = OI0AW01.OI0AWHDT; /* change numeric to binary*/


end // end OI0A165

// dbii selected callout orders
Function OI0A200()
   /* *************************************************************/
   /* 1. oi0aw01.oi0awsb1 - screen subscript                    **/
   /* 2. oi0aw01.oi0awsb2 - table  subscript                    **/
   /* 3. oi0aw01.oi0awtop - top of scroll subscript             **/
   /* *************************************************************/

  OI0AW03.OI0AWSEL = OI0AW01.OI0AWSEL; /* select set*/

  call "IO2030" (OI0AW03, SQLCA, OIAREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE != 0) /* bad return code*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OI0A";
    TA1REC.TA1LOCAT[1] = "SS      ";
    TA1REC.TA1LOCAT[2] = "OI0A200 ";
    TA1REC.TA1LOCAT[3] = "IO2030  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "        ";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VCALL001";
    TA1REC.TA1TBLKE = "OIAREC  ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " "; /* on error clear ws*/
    XSPF4();
    exit program;
  end


   /* ***********************************************************/
   /* reset order count and reset the screen subscript and*/
   /* the internal table subscript / select next*/
   /* ***********************************************************/


  OI0AW01.OP1CUOID = 0; /* initialize last order off the 1st 85*/
  OI0AW01.OI0AWOCT = 0; /* initialize order count*/
  OI0AW01.OI0AWSB1 = 1; /* initialize screen subscript*/
  OI0AW01.OI0AWSB2 = 1; /* initialize table subscript*/
  OI0AW01.OI0AWTOP = 1; /* initialize top of page subscript*/


  OI0AW03.OI0AWSEL = OI0AW01.OI0AWNXT; /* select next*/

  call "IO2030" (OI0AW03, SQLCA, OIAREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next order*/

  while (SQLCA.VAGen_SQLCODE != 100
   && OI0AW01.OI0AWOCT <= 85)
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OIAREC.OIARECST == "X")
         /* next sentence*/
      else
        OI0AW01.OI0AWOCT = OI0AW01.OI0AWOCT + 1; /* incr ord count*/
        if (OI0AW01.OI0AWOCT <= 85) /* count le 85*/
          OI0A205(); /* store ord rec in scr and tbl*/
        else
          converseLib.validationFailed(209); /* move than 85 ord sel*/
          OI0AW01.OI0AWERR = "Y";
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* returned set empty*/
        if (OI0AW01.OI0AWOCT <= 0) /* no record count*/
          converseLib.validationFailed(212); /* no orders found - please check parm*/
          OI0AW01.OI0AWERR = "Y"; /* set error flag*/
        end
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OI0A";
        TA1REC.TA1LOCAT[1] = "SN      ";
        TA1REC.TA1LOCAT[2] = "OI0A200 ";
        TA1REC.TA1LOCAT[3] = "IO2030  ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1MAP = "        ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCALLO01";
        TA1REC.TA1TBLKE = "OIAREC  ";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " "; /* on error clear ws*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        XSPF4();
        exit program;
      end
    end
    call "IO2030" (OI0AW03, SQLCA, OIAREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next order*/
  end


  OI0AW03.OI0AWSEL = OI0AW01.OI0AWCLS; /* close cursor*/

  call "IO2030" (OI0AW03, SQLCA, OIAREC) {isNoRefresh = yes, isExternal = yes};

   /* ************************************************************/
   /* move order count to screens*/
   /* ************************************************************/

  if (OI0AW01.OI0AWOCT > 85) /* necessary to avoid subscript error*/
    OI0AW01.OI0AWOCT = OI0AW01.OI0AWOCT - 1;
  end

  OI0AM010.OI0AMORC = OI0AW01.OI0AWOCT; /* ord cnt on the left scr*/
  OI0AM015.OI0AMORC = OI0AW01.OI0AWOCT; /* ord cnt on the right scr*/

  while (OI0AWSB1 <= 17)
    OI0A210(); /* clear and protect screen*/
  end

  OI0AW01.OI0AWFTF = "N"; /* reset first time flag*/

end // end OI0A200

// store ord in screen and table
Function OI0A205()


   /* **********************************************************/
    /* this process loads the first 17 orders to the oi0am010*/
    /* and oi0am015 screen.  store the record of the first*/
    /* 85 orders into the oi0aw04 table*/
   /* **********************************************************/

   /* **********************************************************/
    /* oi0aw01.oi0awsb1 - screen subscript                   **/
    /* oi0aw01.oi0awsb2 - table  subscript                   **/
   /* **********************************************************/

  if (OIAREC.OP1TBREP != OI0AW01.OP1TBREP) /* save taken by id*/
    KUYREC.KUYSVRID = OIAREC.OP1TBREP;
    call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OI0AW01.XXXUSRID = KUYREC.XXXUSRID;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        OI0AW01.XXXUSRID = "UNKNWN";
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OI0A";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "OI0A205 ";
        TA1REC.TA1DBASE = "DCUST   ";
        TA1REC.TA1TBLVU = "VSVREP01";
        TA1REC.TA1TBLKE = "KUYREC  ";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " ";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        XSPF4();
        exit program;
      end
    end
  end
      /* store the first 17 orders into oi0am010 and oi0am015*/
      /* screens*/


  if (OI0AW01.OI0AWSB1 <= 17) /* 17 orders per screen*/
    set OI0AM010.OIARECST[OI0AWSB1] initialAttributes;
    OI0AM010.OIARECST[OI0AWSB1] = OIAREC.OIARECST; /* select code*/
    OI0AW01.OI0AWCID = OIAREC.KUCCOID; /* company id*/
    OI0AW01.OI0AWPT1 = ".";
    OI0AW01.OI0AWSTR = OIAREC.KUMSTRID; /* format store and dept*/
    OI0AW01.OI0AWPT2 = ".";
    OI0AW01.OI0AWDEP = OIAREC.XNXCD;
    OI0AM010.OI0AMCUS[OI0AWSB1] = OI0AW01.OI0AWCUS; /* cust to scr*/
    OI0AW01.OI0AWFCO = OIAREC.OP1CUOID; /* format cust order*/
    OI0AW01.OI0AWPT3 = ".";
    OI0AW01.OI0AWFNO = OIAREC.OP1NORID; /* format nike ord*/
    OI0AM010.OI0AMORD[OI0AWSB1] = OI0AW01.OI0AWFOR; /* ord to screen*/
    OI0AM010.KUMSTSNM[OI0AWSB1] = OIAREC.KUMSTSNM; /* CUST NM*/
    OI0AM010.XOTCD[OI0AWSB1] = OIAREC.XOTCD; /* ord typ cd*/
    OI0AM010.XOSCD[OI0AWSB1] = OIAREC.XOSCD; /* order status cd*/
    OI0AM010.OP1CUNDT[OI0AWSB1] = OIAREC.OP1CUNDT; /* need date*/
    OI0AM010.OP1CALDT[OI0AWSB1] = OIAREC.OP1CALDT;


       /* move data to the right screen (oi0am015)*/


    set OI0AM015.OIARECST[OI0AWSB1] initialAttributes;
    OI0AM015.OI0AMORD[OI0AWSB1] = OI0AW01.OI0AWFOR; /* ord to screen*/
    OI0AM015.XWHCD[OI0AWSB1] = OIAREC.XWHCD; /* cust name*/
    OI0AM015.XCSCD[OI0AWSB1] = OIAREC.XCSCD; /* order code*/
    OI0AM015.XXXUSRID[OI0AWSB1] = OI0AW01.XXXUSRID; /* taken by rep*/
    OI0AM015.OP4TXT[OI0AWSB1] = OIAREC.OP4TXT; /* text*/

    OI0AW01.OI0AWSB1 = OI0AW01.OI0AWSB1 + 1; /* increment scr sub*/

  end


  OI0AW02.OP1PARTN[OI0AWSB2] = OIAREC.OP1PARTN; /* part char*/
  OI0AW02.OIARECST[OI0AWSB2] = OIAREC.OIARECST; /* select code*/
  OI0AW02.OP1CUOID[OI0AWSB2] = OIAREC.OP1CUOID; /* order id*/
  OI0AW02.XNXCD[OI0AWSB2] = OIAREC.XNXCD; /* nike dept code*/
  OI0AW02.OP1NORID[OI0AWSB2] = OIAREC.OP1NORID; /* nike order id*/
  OI0AW02.KUMSTSNM[OI0AWSB2] = OIAREC.KUMSTSNM; /* SHORT store nm*/
  OI0AW02.XOTCD[OI0AWSB2] = OIAREC.XOTCD; /* order code*/
  OI0AW02.XOSCD[OI0AWSB2] = OIAREC.XOSCD; /* order status cd*/
  OI0AW02.OP1CUNDT[OI0AWSB2] = OIAREC.OP1CUNDT; /* need date*/
  OI0AW02.OP1CALDT[OI0AWSB2] = OIAREC.OP1CALDT; /* call date*/
  OI0AW02.XWHCD[OI0AWSB2] = OIAREC.XWHCD; /* wh code*/
  OI0AW02.XCSCD[OI0AWSB2] = OIAREC.XCSCD; /* cr status*/
  OI0AW02.OP1TBREP[OI0AWSB2] = OIAREC.OP1TBREP;
  OI0AW02.XXXUSRID[OI0AWSB2] = OI0AW01.XXXUSRID; /* taken by*/
  OI0AW02.OP4TXT[OI0AWSB2] = OIAREC.OP4TXT; /* text*/
  OI0AW02.ZZZCHGCT[OI0AWSB2] = OIAREC.ZZZCHGCT; /* change count*/
  OI0AW01.OI0AWSB2 = OI0AW01.OI0AWSB2 + 1; /* increment tbl sub*/

  OI0AW01.OP1TBREP = OIAREC.OP1TBREP; /* save taken by id*/



   /* *************************************************************/
end // end OI0A205

// protect and clear screen
Function OI0A210()


   /* **********************************************************/
    /* this process clears the unused lines on the screen    **/
    /* and protects the select field on the blank lines.     **/
    /* user would be looking at the last screen (#5).        **/
   /* **********************************************************/

   /* **********************************************************/
    /* 1. oi0aw01.oi0awsb1 - screen subscript                **/
   /* **********************************************************/

  set OI0AM010.OIARECST[OI0AWSB1] skip, invisible; /* select field*/
  OI0AM010.OI0AMORD[OI0AWSB1] = " "; /* order nmb*/
  OI0AM010.OI0AMCUS[OI0AWSB1] = " "; /* op cust nmb*/
  OI0AM010.KUMSTSNM[OI0AWSB1] = " "; /* customer name*/
  OI0AM010.XOTCD[OI0AWSB1] = " "; /* order type cd*/
  OI0AM010.XOSCD[OI0AWSB1] = " "; /* order status cd*/
  OI0AM010.OP1CUNDT[OI0AWSB1] = " "; /* need date*/
  OI0AM010.OP1CALDT[OI0AWSB1] = " "; /* callout date*/


      /* move data to the right screen (oi0am015)*/


  set OI0AM015.OIARECST[OI0AWSB1] skip, invisible; /* select field*/
  OI0AM015.OI0AMORD[OI0AWSB1] = " "; /* order number*/
  OI0AM015.XWHCD[OI0AWSB1] = " "; /* warehouse cd*/
  OI0AM015.XCSCD[OI0AWSB1] = " "; /* credit status*/
  OI0AM015.XXXUSRID[OI0AWSB1] = " "; /* taken by*/
  OI0AM015.OP4TXT[OI0AWSB1] = " "; /* special instr*/
  OI0AW01.OI0AWSB1 = OI0AW01.OI0AWSB1 + 1; /* increase screen ix*/


   /* **********************************************************/
end // end OI0A210

// left order screen
Function OI0A300()




  converse OI0AM010 ;

       /* converse with oi0am010    /   left side of screen*/

end // end OI0A300

// left screen pf keys
Function OI0A350()


   /* *************************************************************/
   /* this process checks all the pf keys accociated with       **/
   /* the left side of the screen (oi0am010).                   **/
                                                             /* **/
   /* *************************************************************/



  OI0AM010.VAGen_EZEMSG = " ";
  converseLib.validationFailed(0);
  OI0AW01.OI0AWER1 = "N"; /* reset error flag*/

  if (converseVar.eventKey is enter)
    OI0A500(); /* scan screen for 's'*/
    if (OI0AW01.OI0AWER1 == "Y") /* something other than 's' entered*/
       /* next sentence*/
    else
      OI0A550(); /* move selected ord to oiwrec to pass*/
      if (OI0AW01.OI0AWER1 == "Y") /* no orders selected*/
         /* next sentence*/
      else
        OIWREC.OIWINT = "OM0";
        COMMAREA.CAUSERA = OIWREC.OIWSGRP; /* load the passed rec*/
        COMMAREA.CAFROMAP = "OI0A";
        COMMAREA.CATOAP = "OM0M";
        XSEXIT(); /* transfer*/
        COMMAREA.CAUSERA = " "; /* not authorized to pass*/
        COMMAREA.CATOAP = " "; /* clear application*/
      end
    end
  else
    if (converseVar.eventKey is pf3) /* back to parameter screen*/
      OI0AW01.OI0AWERR = "Y";
      OI0AW01.OI0AWFTF = "Y";
      OI0AW01.OI0AWLEF = "N";
      OI0AW01.OI0AWRIG = "N";
    else
      if (converseVar.eventKey is pf4) /* back to master menu*/
        COMMAREA.CAUSERA = " "; /* clear user area*/
        XSPF4();
      else
        if (converseVar.eventKey is pf7) /* page back*/
          OI0A500(); /* scan screen for selected orders*/
          if (OI0AW01.OI0AWER1 != "Y") /* error*/
            OI0A600(); /* page backward*/
          end
        else
          if (converseVar.eventKey is pf8) /* page forward*/
            OI0A500(); /* scan screen for selected orders*/
            if (OI0AW01.OI0AWER1 != "Y") /* error*/
              OI0A650(); /* page forward*/
            end
          else
            if (converseVar.eventKey is pf11) /* page right*/
              OI0A500(); /* scan screen for select orders*/
              OI0AW01.OI0AWRIG = "Y";
              OI0AW01.OI0AWLEF = "N";
              if (OI0AW01.OI0AWER1 != "Y") /* error*/
                OI0AW01.OI0AWSB1 = 1;
                while (OI0AW01.OI0AWSB1 <= 17)
                  OI0A375(); /* store for rigth screen*/
                end
              end
            else
              if (converseVar.eventKey is pf18) /* delete*/
                OI0A525(); /* delete*/
                OI0A200(); /* screen and select orders*/
              else
                converseLib.validationFailed(317); /* invalid key*/
                OI0AW01.OI0AWER1 = "Y"; /* error*/
              end
            end
          end
        end
      end
    end
  end


  while (OI0AW01.OI0AWSB1 <= 17)
    OI0A210(); /* clear and protect screen*/
  end


   /* *************************************************************/
end // end OI0A350

// left screen pf keys
Function OI0A375()


   /* *************************************************************/
   /* this process loads select keys to right of screen         **/
                                                             /* **/
   /* *************************************************************/



  OI0AM015.OIARECST[OI0AWSB1] = OI0AM010.OIARECST[OI0AWSB1];

  OI0AW01.OI0AWSB1 = OI0AW01.OI0AWSB1 + 1;


   /* *************************************************************/
end // end OI0A375

// callout order screen right
Function OI0A400()


  converse OI0AM015 ;


        /* converse oi0am015  /  right side of screen*/

end // end OI0A400

// right screen pf keys
Function OI0A450()



  OI0AM015.VAGen_EZEMSG = " "; /* clear error msg*/
  OI0AW01.OI0AWER1 = "N"; /* reset error flag*/


  if (converseVar.eventKey is enter)
    OI0A500(); /* scan screen form selected orders*/
    if (OI0AW01.OI0AWER1 == "Y") /* something other than 's' entered*/
       /* next sentence*/
    else
      OI0A550(); /* move selected orders to oiwrec to*/
                                   /* pass*/
      if (OI0AW01.OI0AWER1 == "Y") /* no orders selected*/
         /* next sentence*/
      else
        OIWREC.OIWINT = "OM0";
        COMMAREA.CAUSERA = OIWREC.OIWSGRP; /* load the passed rec*/
        COMMAREA.CAFROMAP = "OI0A";
        COMMAREA.CATOAP = "OM0M";
        XSEXIT(); /* transfer*/
        COMMAREA.CAUSERA = " "; /* not authorized to pass*/
        COMMAREA.CATOAP = " "; /* clear application*/
      end
    end
  else
    if (converseVar.eventKey is pf3) /* back to parameter screen*/
      OI0AW01.OI0AWERR = "Y";
      OI0AW01.OI0AWFTF = "Y";
      OI0AW01.OI0AWLEF = "N";
      OI0AW01.OI0AWRIG = "N";
    else
      if (converseVar.eventKey is pf4) /* back to master menu*/
        COMMAREA.CAUSERA = " "; /* clear user area*/
        XSPF4();
      else
        if (converseVar.eventKey is pf7) /* page back*/
          OI0A500(); /* scan screen for selected orders*/
          if (OI0AW01.OI0AWER1 != "Y") /* error*/
            OI0A600(); /* page backward*/
          end
        else
          if (converseVar.eventKey is pf8) /* page forward*/
            OI0A500(); /* scan screen for selected orders*/
            if (OI0AW01.OI0AWER1 != "Y") /* error*/
              OI0A650(); /* page forward*/
            end
          else
            if (converseVar.eventKey is pf10) /* page left*/
              OI0A500(); /* scan select orders*/
              OI0AW01.OI0AWLEF = "Y";
              OI0AW01.OI0AWRIG = "N";
              if (OI0AW01.OI0AWER1 != "Y") /* error*/
                OI0AW01.OI0AWSB1 = 1; /* set sub to 1*/
                while (OI0AW01.OI0AWSB1 <= 17)
                  OI0A475();
                end
              end
            else
              if (converseVar.eventKey is pf18) /* delete*/
                OI0A525(); /* delete*/
                OI0A200(); /* select callout orders*/
              else
                converseLib.validationFailed(316); /* invalid key*/
                OI0AW01.OI0AWER1 = "Y"; /* error*/
              end
            end
          end
        end
      end
    end
  end


  while (OI0AW01.OI0AWSB1 <= 17)
    OI0A210();
  end
end // end OI0A450

// right screen pf keys
Function OI0A475()



  OI0AM010.OIARECST[OI0AWSB1] = OI0AM015.OIARECST[OI0AWSB1];

  OI0AW01.OI0AWSB1 = OI0AW01.OI0AWSB1 + 1;


   /* *************************************************************/
end // end OI0A475

// scan screen for select orders
Function OI0A500()



   /* ************************************************************/
    /* this process checks to see if any orders                **/
    /* were selected to pass to the order maint/inq            **/
    /* program                                                 **/
   /* ************************************************************/

   /* ************************************************************/
    /* 1. oi0aw01.oi0awsb1 - screen subscript                  **/
    /* 2. oi0aw01.oi0awsb2 - table  subscript                  **/
    /* 3. oi0aw01.oi0awtop - top of page index                 **/
   /* ************************************************************/

      /* if an 's' is entered to select an order, store it in*/
      /* THE RIGHT SCREEN (OI0AM015) TO DISPLAY AND ALSO*/
      /* store it int the internal record table*/



  OI0AW01.OI0AWSB1 = 1;
  OI0AW01.OI0AWSB2 = OI0AW01.OI0AWTOP;

  while (OI0AW01.OI0AWSB2 <= OI0AW01.OI0AWOCT
   && OI0AW01.OI0AWSB1 <= 17)
    set OI0AM010.OIARECST[OI0AWSB1] initialAttributes;
    set OI0AM015.OIARECST[OI0AWSB1] initialAttributes;
    if (OI0AM010.OIARECST[OI0AWSB1] == "S" /* select*/
     || OI0AM010.OIARECST[OI0AWSB1] == "V" /* veiwed*/
     || OI0AM010.OIARECST[OI0AWSB1] == "X" /* delete*/
     || OI0AM010.OIARECST[OI0AWSB1] == " ") /* space*/
    else
      set OI0AM010.OIARECST[OI0AWSB1] cursor, modified, bold;
      set OI0AM015.OIARECST[OI0AWSB1] cursor, modified, bold;
      converseLib.validationFailed(10);
    end
    if (OI0AM010.OIARECST[OI0AWSB1] == "S"
     || OI0AM015.OIARECST[OI0AWSB1] == "S")
      OI0AW02.OIARECST[OI0AWSB2] = "S";
      OI0AW01.OI0AWSCT = OI0AW01.OI0AWSCT + 1; /* select counter*/
    end
    if (OI0AM010.OIARECST[OI0AWSB1] == OI0AW02.OIARECST[OI0AWSB2]
     || OI0AM010.OIARECST == "X"
     || OI0AM015.OIARECST[OI0AWSB1] == OI0AW02.OIARECST[OI0AWSB2]
     || OI0AM015.OIARECST == "X")
          /* next sentence*/
    else
      converseLib.validationFailed(272);
      OI0AW01.OI0AWER1 = "Y";
    end
    OI0AW01.OI0AWSB1 = OI0AW01.OI0AWSB1 + 1; /* increment by 1*/
    OI0AW01.OI0AWSB2 = OI0AW01.OI0AWSB2 + 1; /* increment by 1*/
  end



  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

      /* if the enter key was pressed and no orders were*/
      /* selected, display the message and redisplay the*/
      /* same screen*/


  if (OI0AW01.OI0AWER1 == "Y")
      /* next sentence*/
  else
    if (converseVar.eventKey is enter
     && OI0AW01.OI0AWSCT == 0) /* select counter zero*/
      converseLib.validationFailed(214); /* no orders select*/
      OI0AW01.OI0AWER1 = "Y"; /* set error flag*/
    end
  end
   /* ***********************************************************/
end // end OI0A500

// scan screen for select orders
Function OI0A525()



   /* ************************************************************/
    /* this process checks to see if any orders                **/
    /* were selected to pass for delete                        **/
   /* ************************************************************/

   /* ************************************************************/
    /* 1. oi0aw01.oi0awsb1 - screen subscript                  **/
    /* 2. oi0aw01.oi0awsb2 - table  subscript                  **/
    /* 3. oi0aw01.oi0awtop - top of page index                 **/
   /* ************************************************************/

       /* 'x' is entered to delete an order.*/


  OI0AW01.OI0AWSB1 = 1;
  OI0AW01.OI0AWSB2 = OI0AW01.OI0AWTOP;

  while (OI0AW01.OI0AWSB2 <= OI0AW01.OI0AWOCT
   && OI0AW01.OI0AWSB1 <= 17)
    set OI0AM010.OIARECST[OI0AWSB1] initialAttributes;
    set OI0AM015.OIARECST[OI0AWSB1] initialAttributes;
    if (OI0AM010.OIARECST[OI0AWSB1] == OI0AW02.OIARECST[OI0AWSB2])
          /* next sentence*/
    else
      if (OI0AM010.OIARECST[OI0AWSB1] == "X"
       || OI0AM015.OIARECST[OI0AWSB1] == "X")
        OI0AW02.OIARECST[OI0AWSB2] = "X";
        OI0A800(); /* call update*/
      else
        if (OI0AW02.OIARECST[OI0AWSB2] == "X")
          OI0AW02.OIARECST[OI0AWSB2] = " ";
          OI0A800(); /* call update*/
        else
          converseLib.validationFailed(272);
          OI0AW01.OI0AWER1 = "Y";
        end
      end
    end
    OI0AW01.OI0AWSB1 = OI0AW01.OI0AWSB1 + 1; /* increment by 1*/
    OI0AW01.OI0AWSB2 = OI0AW01.OI0AWSB2 + 1; /* increment by 1*/
  end



  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

      /* if the enter key was pressed and no orders were*/
      /* selected, display the message and redisplay the*/
      /* same screen*/


   /* ***********************************************************/
end // end OI0A525

// move select orders to pass
Function OI0A550()



   /* ************************************************************/
    /* this process loads the selected orders from             **/
    /* the oi0aw04 (table to store 85 order records) to        **/
    /* THE OIWREC TO PASS TO THE ORDER INQ/MAINT               **/
    /* program.  useres can select up to 20 orders selected.   **/
    /* this progam only passed the  !! first !! 20             **/
   /* ************************************************************/

   /* ************************************************************/
    /* 1. oi0aw01.oi0awsb1 - screen subscript                  **/
    /* 2. oi0aw01.oi0awsb2 - oi0aw04 subscript                 **/
    /* 2. oi0aw01.oi0awsb3 - oiwrec  subscript                 **/
   /* ************************************************************/


  OI0AW01.OI0AWSB2 = 1; /* initialize oi0aw04 index*/
  OI0AW01.OI0AWSB3 = 1; /* initialize oiwrec  index*/


  while (OI0AW01.OI0AWSB2 <= OI0AW01.OI0AWOCT
   && OI0AW01.OI0AWSB3 <= 20) /* pass only the first 20 orders*/
    if (OI0AW02.OIARECST[OI0AWSB2] == "S") /* orders selected*/
      OIWREC.OP1CUOID[OI0AWSB3] = OI0AW02.OP1CUOID[OI0AWSB2];
      OIWREC.OP1NORID[OI0AWSB3] = OI0AW02.OP1NORID[OI0AWSB2];
      OI0AW01.OI0AWSB3 = OI0AW01.OI0AWSB3 + 1; /* increment oiwrec index*/
      OI0AW02.OIARECST[OI0AWSB2] = "V";
      OI0A800();
    end
    OI0AW01.OI0AWSB2 = OI0AW01.OI0AWSB2 + 1; /* increment oi0aw04 index*/
  end


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


   /* ***********************************************************/
end // end OI0A550

// page backwards
Function OI0A600()



   /* ************************************************************/
    /* this process calculates the index in the internal       **/
    /* table to get the right orders to display                **/
                                                            /* **/
   /* ************************************************************/

   /* ************************************************************/
    /* 1. oi0aw01.oi0awsb1 - screen subscript                  **/
    /* 2. oi0aw01.oi0awsb2 - table  subscript                  **/
    /* 3. oi0aw01.oi0awtop - top of page subscript             **/
                                                            /* **/
   /* ************************************************************/


      /* if it is the top page, display the message and*/
      /* redisplay the same orders.*/


  if (OI0AW01.OI0AWTOP == 1)
    converseLib.validationFailed(192);
    OI0AW01.OI0AWER1 = "Y";
  end

  if (OI0AW01.OI0AWER1 == "Y")
      /* next sentence*/
  else
    OI0AW01.OI0AWTOP = OI0AW01.OI0AWTOP - 17;

    OI0AW01.OI0AWSB1 = 1;
    OI0AW01.OI0AWSB2 = OI0AW01.OI0AWTOP;

    while (OI0AW01.OI0AWSB1 <= 17
     && OI0AW01.OI0AWSB2 <= OI0AWOCT)
      OI0AM010.OIARECST[OI0AWSB1] = OI0AW02.OIARECST[OI0AWSB2];
      OI0AM015.OIARECST[OI0AWSB1] = OI0AW02.OIARECST[OI0AWSB2];
      OI0A700(); /* load records for display*/
      OI0AW01.OI0AWSB1 = OI0AW01.OI0AWSB1 + 1; /* increase screen index*/
      OI0AW01.OI0AWSB2 = OI0AW01.OI0AWSB2 + 1; /* increase table  index*/
    end
  end


   /* ***********************************************************/
end // end OI0A600

// page forward
Function OI0A650()



   /* ************************************************************/
    /* this process calculates the index in the internal*/
    /* table to get the right orders to display*/
   /* ************************************************************/


      /* if it is the top page, display the message and*/
      /* redisplay the same orders.*/

  OI0AW01.OI0AWTOP = OI0AW01.OI0AWTOP + 17;

  if (OI0AW01.OI0AWTOP > OI0AW01.OI0AWOCT)
    OI0AW01.OI0AWTOP = OI0AW01.OI0AWTOP - 17;
    converseLib.validationFailed(191);
    OI0AW01.OI0AWER1 = "Y";
  end

  if (OI0AW01.OI0AWER1 == "N")
    OI0AW01.OI0AWSB1 = 1;
    OI0AW01.OI0AWSB2 = OI0AW01.OI0AWTOP;
    while (OI0AW01.OI0AWSB1 <= 17 /* screen index*/
     && OI0AW01.OI0AWSB2 <= OI0AW01.OI0AWOCT)
      OI0AM010.OIARECST[OI0AWSB1] = OI0AW02.OIARECST[OI0AWSB2];
      OI0AM015.OIARECST[OI0AWSB1] = OI0AW02.OIARECST[OI0AWSB2];
      OI0A700(); /* load records for display*/
      OI0AW01.OI0AWSB1 = OI0AW01.OI0AWSB1 + 1; /* increase screen index*/
      OI0AW01.OI0AWSB2 = OI0AW01.OI0AWSB2 + 1; /* increase table  index*/
    end
  end



   /* ***********************************************************/
end // end OI0A650

// load records for display
Function OI0A700()



   /* *************************************************************/
    /* this process loads one to the screens. the left screen*/
    /* (oi0am010) and the right screen (oi0am015) are loaded*/
    /* at the same time.*/
   /* *************************************************************/

   /* *************************************************************/
    /* 1. oi0aw01.oi0awsb1 - screen subscript*/
    /* 2. oi0aw01.oi0awsb2 - table  subscript*/
   /* *************************************************************/


  set OI0AM010.OIARECST[OI0AWSB1] initialAttributes;
  OI0AW01.OI0AWSTR = OI0AW02.KUMSTRID[OI0AWSB2];
  OI0AW01.OI0AWDEP = OI0AW02.XNXCD[OI0AWSB2];
  OI0AW01.OI0AWPT1 = ".";
  OI0AM010.OI0AMCUS[OI0AWSB1] = OI0AW01.OI0AWCUS;
  OI0AW01.OI0AWFCO = OI0AW02.OP1CUOID[OI0AWSB2]; /* format cust order*/
  OI0AW01.OI0AWPT2 = ".";
  OI0AW01.OI0AWFNO = OI0AW02.OP1NORID[OI0AWSB2]; /* format nike order*/
  OI0AM010.OI0AMORD[OI0AWSB1] = OI0AW01.OI0AWFOR;
  OI0AM010.KUMSTSNM[OI0AWSB1] = OI0AW02.KUMSTSNM[OI0AWSB2];
  OI0AM010.XOTCD[OI0AWSB1] = OI0AW02.XOTCD[OI0AWSB2];
  OI0AM010.XOSCD[OI0AWSB1] = OI0AW02.XOSCD[OI0AWSB2];
  OI0AM010.OP1CUNDT[OI0AWSB1] = OI0AW02.OP1CUNDT[OI0AWSB2];
  OI0AM010.OP1CALDT[OI0AWSB1] = OI0AW02.OP1CALDT[OI0AWSB2];


      /* move data to the right side of screen*/


  set OI0AM015.OIARECST[OI0AWSB1] initialAttributes;
  OI0AM015.OI0AMORD[OI0AWSB1] = OI0AW01.OI0AWFOR;
  OI0AM015.XWHCD[OI0AWSB1] = OI0AW02.XWHCD[OI0AWSB2];
  OI0AM015.XCSCD[OI0AWSB1] = OI0AW02.XCSCD[OI0AWSB2];
  OI0AM015.XXXUSRID[OI0AWSB1] = OI0AW02.XXXUSRID[OI0AWSB2];
  OI0AM015.OP4TXT[OI0AWSB1] = OI0AW02.OP4TXT[OI0AWSB2];



end // end OI0A700

// store ord in screen and table
Function OI0A800()


   /* *************************************************************/
    /* this process loads updates all the selected fields with  **/
    /* a 's' into a 'v'.  oiarec.oiarecst is the field being    **/
    /* updated.                                                 **/
   /* *************************************************************/

   /* ************************************************************/
    /* oi0aw01.oi0awsb1 - screen subscript                     **/
    /* oi0aw01.oi0awsb2 - table  subscript                     **/
   /* ************************************************************/

  OI0AW03.OI0AWSEL = "U ";

  OIAREC.OP1PARTN = OI0AW02.OP1PARTN[OI0AWSB2]; /* ord part character*/
  OIAREC.OIARECST = OI0AW02.OIARECST[OI0AWSB2];
  OIAREC.OP1CUOID = OI0AW02.OP1CUOID[OI0AWSB2];
  OIAREC.XNXCD = OI0AW02.XNXCD[OI0AWSB2];
  OIAREC.OP1NORID = OI0AW02.OP1NORID[OI0AWSB2];
  OIAREC.KUMSTSNM = OI0AW02.KUMSTSNM[OI0AWSB2];
  OIAREC.XOTCD = OI0AW02.XOTCD[OI0AWSB2];
  OIAREC.XOSCD = OI0AW02.XOSCD[OI0AWSB2];
  OIAREC.OP1CUNDT = OI0AW02.OP1CUNDT[OI0AWSB2];
  OIAREC.OP1CALDT = OI0AW02.OP1CALDT[OI0AWSB2];
  OIAREC.XWHCD = OI0AW02.XWHCD[OI0AWSB2];
  OIAREC.XCSCD = OI0AW02.XCSCD[OI0AWSB2];
  OIAREC.OP1TBREP = OI0AW02.OP1TBREP[OI0AWSB2];
  OIAREC.OP4TXT = OI0AW02.OP4TXT[OI0AWSB2];
  OIAREC.ZZZCHGCT = OI0AW02.ZZZCHGCT[OI0AWSB2];

  call "IO2030" (OI0AW03, SQLCA, OIAREC) {isNoRefresh = yes, isExternal = yes}; /* call update*/

  if (SQLCA.VAGen_SQLCODE == 100)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OI0A    ";
    TA1REC.TA1LOCAT[1] = "U       ";
    TA1REC.TA1LOCAT[2] = "OI0A800 ";
    TA1REC.TA1LOCAT[3] = "IO2030  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OI0AM010";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VCALL001";
    TA1REC.TA1TBLKE = "OI0AW03 ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OI0A    ";
      TA1REC.TA1LOCAT[1] = "U       ";
      TA1REC.TA1LOCAT[2] = "OI0A800 ";
      TA1REC.TA1LOCAT[3] = "IO2030  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OI0AM010";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VCALL001";
      TA1REC.TA1TBLKE = "OI0AW03 ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end


  OI0AW02.ZZZCHGCT[OI0AWSB2] = OIAREC.ZZZCHGCT;



   /* *************************************************************/
end // end OI0A800

//*** RECORD=OI0AW01 ****
// customer order inquiry common working storage area. These
// work areas are designated for internal application use only.
// ***********************
Record OI0AW01 type basicRecord
  10 OI0AWSB1 OI0AWSB1 ; 
  10 OI0AWSB2 OI0AWSB2 ; 
  10 OI0AWSB3 OI0AWSB3 ; 
  10 XXXUSRID XXXUSRID ; 
  10 OP1TBREP OP1TBREP ; 
  10 OI0AWTOP OI0AWTOP ; 
  10 OI0AWFTF OI0AWFTF ; 
  10 OI0AWLEF OI0AWLEF ; 
  10 OI0AWRIG OI0AWRIG ; 
  10 OI0AWPTH OI0AWPTH ; 
  10 OI0AWBSD OI0AWBSD ; 
  10 OI0AWBED OI0AWBED ; 
  10 OI0AWBCD OI0AWBCD ; 
  10 OI0AWSDT OI0AWSDT ; 
    15 OI0AWSMM OI0AWSMM ; 
    15 OI0AWSDD OI0AWSDD ; 
    15 OI0AWSYY OI0AWSYY ; 
  10 OI0AWEDT OI0AWEDT ; 
    15 OI0AWEMM OI0AWEMM ; 
    15 OI0AWEDD OI0AWEDD ; 
    15 OI0AWEYY OI0AWEYY ; 
  10 OI0AWHDT OI0AWHDT ; 
    15 OI0AWHCC OI0AWHCC ; 
    15 OI0AWHYY OI0AWHYY ; 
    15 OI0AWHMM OI0AWHMM ; 
    15 OI0AWHDD OI0AWHDD ; 
  10 OI0AWCUR OI0AWCUR ; 
    15 OI0AWCCC OI0AWCCC ; 
    15 OI0AWCDT OI0AWCDT ; 
      20 OI0AWCYY OI0AWCYY ; 
      20 OI0AWCMM OI0AWCMM ; 
      20 OI0AWCDD OI0AWCDD ; 
  10 OI0AWCEN OI0AWCEN ; 
  10 OI0AWERR OI0AWERR ; 
  10 OI0AWER1 OI0AWER1 ; 
  10 OI0AWDTE OI0AWDTE ; 
  10 OI0AWSEL OI0AWSEL ; 
  10 OI0AWNXT OI0AWNXT ; 
  10 OI0AWTSK OI0AWTSK ; 
  10 OI0AWCLS OI0AWCLS ; 
  10 OI0AWOCT OI0AWOCT ; 
  10 OI0AWORC OI0AWORC ; 
  10 OI0AWSCT OI0AWSCT ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 OI0AWORD OI0AWORD ; 
    15 * char(7) ; 
  10 OI0AWMAX OI0AWMAX ; 
  10 OI0AWCUS OI0AWCUS ; 
    15 OI0AWCID OI0AWCID ; 
    15 OI0AWPT1 OI0AWPT1 ; 
    15 OI0AWSTR OI0AWSTR ; 
    15 OI0AWPT2 OI0AWPT2 ; 
    15 OI0AWDEP OI0AWDEP ; 
  10 OI0AWFOR OI0AWFOR ; 
    15 OI0AWFCO OI0AWFCO ; 
    15 OI0AWPT3 OI0AWPT3 ; 
    15 OI0AWFNO OI0AWFNO ; 
  10 OI0AWDAT OI0AWDAT ; 
  10 OI0AWDT1 OI0AWDT1 ; 
    15 OI0AWWCC OI0AWWCC ; 
    15 OI0AWWYY OI0AWWYY ; 
    15 OI0AWWMM OI0AWWMM ; 
    15 OI0AWWDD OI0AWWDD ; 
  10 OI0AWDT2 OI0AWDT2 ; 
    15 OI0AWMMW OI0AWMMW ; 
    15 OI0AWDDW OI0AWDDW ; 
    15 OI0AWYYW OI0AWYYW ; 
  10 SM4REPID SM4REPID ; 
  10 OI0AWKEY OI0AWKEY ; 
end // end OI0AW01

//*** RECORD=OI0AW02 ****
// ************************************************************
// 
// this working storage area is a clown of oiarec.
// it is used as part of the call made to io2020.
// 
// ************************************************************
// ***********************
Record OI0AW02 type basicRecord
  10 OP1PARTN OP1PARTN [85] ; 
  10 OP1CUOID OP1CUOID [85] ; 
  10 OP1NORID OP1NORID [85] ; 
  10 SM1AGYID SM1AGYID [85] ; 
  10 SM4REPID SM4REPID [85] ; 
  10 XXXUSRID XXXUSRID [85] ; 
  10 OP1TBREP OP1TBREP [85] ; 
  10 OP1CALDT OP1CALDT [85] ; 
  10 KUCCOID KUCCOID [85] ; 
  10 KUMSTRID KUMSTRID [85] ; 
  10 XNXCD XNXCD [85] ; 
  10 XGPCD XGPCD [85] ; 
  10 KUMSTSNM KUMSTSNM [85] ; 
  10 OP1CUNDT OP1CUNDT [85] ; 
  10 XOTCD XOTCD [85] ; 
  10 XOSCD XOSCD [85] ; 
  10 XCSCD XCSCD [85] ; 
  10 XWHCD XWHCD [85] ; 
  10 OP4TXT OP4TXT [85] ; 
  10 OIARECST OIARECST [85] ; 
  10 ZZZCHGCT ZZZCHGCT [85] ; 
  10 ZZZCHGDT ZZZCHGDT [85] ; 
  10 ZZZCHGTM ZZZCHGTM [85] ; 
end // end OI0AW02

//*** RECORD=OI0AW03 ****
// ************************************************************
// 
//  this working storage area is used to set up the key
//  areas to pass the io2020.
// 
// ************************************************************
// ***********************
Record OI0AW03 type basicRecord
  10 OI0AWSEL OI0AWSEL ; 
  10 OI0AWRHI OI0AWRHI ; 
  10 OI0AWDHI OI0AWDHI ; 
end // end OI0AW03

Record OI0AW04 type basicRecord
  10 OI0AWTBL OI0AWTBL ; 
    15 OIARECST OIARECST [20] ; 
    15 OP1CUOID OP1CUOID [20] ; 
    15 OP1NORID OP1NORID [20] ; 
end // end OI0AW04

//*** RECORD=OIAREC ****
// **************** order callout inquiry view ****************
// 
//  db2 table:          dorder.vcall001
// 
// copylib member:      dcl00320
// 
// i/o module:          io2020
// 
// key to data base:
// 
// date created:        july 22, 1987.
// 
// maintenance log:
// 
//   date       init       description
// --------  -------     -------------------------------------
// 07/22/87  jvande      record creation
// 01/10/91  CHYDE       Corrrect oiarecst data item desc.
// 
// **********************
Record OIAREC type basicRecord
  5 OIAGROUP OIAGROUP ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 OP1TBREP OP1TBREP ; 
    10 OP1CALDT OP1CALDT ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 KUMSTSNM KUMSTSNM ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 XOTCD XOTCD ; 
    10 XOSCD XOSCD ; 
    10 XCSCD XCSCD ; 
    10 XWHCD XWHCD ; 
    10 OP4TXT OP4TXT ; 
    10 OIARECST OIARECST ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
end // end OIAREC

// binary current date ccyymmdd
DataItem OI0AWBCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// binary end date ccyymmdd
DataItem OI0AWBED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// binary start date ccyymmdd
DataItem OI0AWBSD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current century
DataItem OI0AWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current days
DataItem OI0AWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date system format
DataItem OI0AWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// generic century
DataItem OI0AWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem OI0AWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// io2020 close scan
DataItem OI0AWCLS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current month
DataItem OI0AWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date db2 format
DataItem OI0AWCUR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted cust #
DataItem OI0AWCUS char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current year
DataItem OI0AWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric date
DataItem OI0AWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem OI0AWDDW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// department id
DataItem OI0AWDEP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high date range
DataItem OI0AWDHI int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ccyymmdd group
DataItem OI0AWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmddyy group
DataItem OI0AWDT2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date edit error flag
DataItem OI0AWDTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end day
DataItem OI0AWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end date for edits
DataItem OI0AWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end month
DataItem OI0AWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// internal error flag
DataItem OI0AWER1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parameter error flag
DataItem OI0AWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year
DataItem OI0AWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust order id
DataItem OI0AWFCO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nike order id
DataItem OI0AWFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted order number
DataItem OI0AWFOR char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem OI0AWFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work century
DataItem OI0AWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work days
DataItem OI0AWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem OI0AWHDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem OI0AWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem OI0AWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold commarea item
DataItem OI0AWKEY char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// left screen flag
DataItem OI0AWLEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max orders returned flag
DataItem OI0AWMAX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem OI0AWMMW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// io2020 select next
DataItem OI0AWNXT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order count-- for select set
DataItem OI0AWOCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order count -- to pass
DataItem OI0AWORC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order number
DataItem OI0AWORD num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// decimal point #1
DataItem OI0AWPT1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// decimal point #2
DataItem OI0AWPT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// decimal point #3
DataItem OI0AWPT3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// database key path flag
DataItem OI0AWPTH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep id high range
DataItem OI0AWRHI smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// right screen flag
DataItem OI0AWRIG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subcript 1
DataItem OI0AWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subcript 2
DataItem OI0AWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subcript 3
DataItem OI0AWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select ord counter
DataItem OI0AWSCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start day
DataItem OI0AWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start date for edits
DataItem OI0AWSDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// io2020 select set
DataItem OI0AWSEL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start month
DataItem OI0AWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust store
DataItem OI0AWSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start year
DataItem OI0AWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table to hold order keys
DataItem OI0AWTBL char(140)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// top of page index
DataItem OI0AWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subrtn io2020 task path
DataItem OI0AWTSK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OI0AWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem OI0AWWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem OI0AWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem OI0AWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem OI0AWYYW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// oi0a record group
DataItem OIAGROUP char(120)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

