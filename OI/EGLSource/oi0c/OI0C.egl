package oi0c;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import oi.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import ww.common.*;
//*** PROGRAM=OI0C ****
//               order inquiry by customer number
// 
// 
//     order inquiry by customer allows the selection of all
//     orders for a customer based on a set of parameters. the
//     only required parameter is the customer company id. all
//     other parameters are optional and will narrow the number
//     of orders presented on the browse screens.
// 
// 
//     the selection screen is accessed either thru the order
//     processing menu or thru the option/item "fast path" by
//     anyone authorized in the menu security file.
// 
// 
//     after all desired parameters are entered, pressing the
//     enter key will cause edits on the fields entered and if
//     everything is valid the selection process will be done
//     and the first browse screen will be presented.
// 
//        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//            note!!!  if any additional exits
//        from the application are coded (this
//        includes abends etc) be sure to purge
//        temp storage first before executing
//        the actual exit.  use oi0csxa.
//        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// 
//     maintenance log
//     ---------------
//     02/06/87   tmai   limit returned orders to 100 and save
//                       the last order of the first 100 to
//                       use as key for to next 100
// 
// 
//     02/17/87   tmai   reset customer store and department
//                       modified data tags
// 
//     02/20/87   tmai   major modifications:
//                       1. took out the browsers (ta0050 and
//                       ta0080).  paging forward and backward
//                       are done by using an internal table
//                       (oi0cw04) to retain the keys of the
//                       orders. up to 100 keys are retain in
//                       this table. if there are more than 100
//                       orders for the selected customer
//                       found, the program will display the
//                       first 100 and use the last order as
//                       key for the next 100.
// 
//                       2. implemented the interface between
//                       oi0c and the order maintenance (om0m).
//                       users can select up to 20 orders to
//                       pass to om0m.  if there are more than
//                       20 orders were selected, the program
//                       will pass the first 20. passed orders
//                       keys are stored in the oiwrec record.
// 
//                       3. write out a record(oi0cw05) to the
//                       temp storage queue every time a set
//                       which has more than 100 orders was
//                       selected (process oi0c012). this will
//                       tell us how often oic0 is used to
//                       inquiry on big customers.
// 
//                       4. corrected some known problems:
//                          - modified prgm to bring back the
//                            right orders if total units range
//                            or total value range were used to
//                            select
//                          - modified prgm to bring back the
//                            right orders if gpc was used to
//                            select
//                          - redefined date fields on oic0m005
//                            map to numeric
//                          - highlight fields which are in
//                            error
//                          - clear parameters if they were
//                            deleted from the screen
//                          - modified program to ask for the
//                            gpc code if the customer style id
//                            was entered
//                          - modified program to display
//                            the number of draws if it is a
//                            bulk order.
//     7-8-87     oab   -rearranged fields on oi0cm005 map
//                       (nike style, cust style#, etc).
//                      -changed date format display on map
//                       from yymmdd to mmddyy.
//     5-4-88     obecke store 0 is a valid value. adjust logic
//                       so the call gets only '0' stores if
//                       asked, and all stores if left blank.
//                       adj:sbs,saa,sab,w01
//    5-18-88     obecke put in temp storage to hold array.
//                       100 order limit is no longer valid.
//    8-16-88     craine rewrote oi0cslo deadlock code
//   12-12-88     obecke fixed oi0cslo deadlock code to not
//                       continue executing code after deadlock
//                       instead, return to map with busy msg.
//   12-13-88     jwood  added noncsp option to calls
//   01-09-89     dwalke add segmented transaction id to appl.
//   04-07-89     obecke added xobcd,xdvcd,xdmcd to appl. took
//                       out xotcd.
//   05-11-89     scantr bug fix #180.  changed some map fields
//                       to numeric so leading zeros will be
//                       suppressed.  fixed the po# search
//                       so it works with blanks in the num.
//                       fixed reselect to redisplay order nbr.
//                       changed oi0cs05, oi0csbq & oi0csba.
//   12-14-89     schase added po date & paymt term cd fields
//                       as inq parameters. also added cntry
//                       abrev. for customer. only show po date
//                       to nil users. oi0cm005, m010, m015,
//                       saa, sba, sbt, sbu, sso, sxb, sxc, s31
//                       w02, w03, w04, 005.
//   12-15-89     ischmi added error diag key in oi0cslo for
//                       customer number. added new cust num
//                       item to oi0cw01. (oi0cwkid).
//   04-04-90     schase database changes. op1blkcd to xbdcd
//                       in saa, sba, sbj, sso, s31, w02, w03,
//                       w04, and oi0cm005
//   04-20-90     oricha sxd: increase temp stg length for
//                       update to 2567. bug #331
//   08-07-90     jwood  oi0csba,sbk changed to use xcscd as a
//                       character field
//    08-30-90    jloyer  oi0cwear(1) was used by both xdvcd
//                        and xobcd. chgd xdvcd to use unused
//                        subscript 21 so xobcd not overlaid.
//                        oi0cwear is the sublevel to oi0cwcoo,
//                        which determines path of the call.
//                        sdv.  bug #377.
//    02-15-91    dmeier  regen for database changes
//    03/17/91    oricha  allow translation of style/color/dim
//                        to short version via dcust.vcusku01.
//                        sbc.
//    05/21/91    schen   data base changes
//                        changed oi0csbc  - use io5790 instead
//                        of io0270 when access vcusku01 using
//                        kuirec, also move dept code to key.
//    08/13/91    dharri  log #673 - add new product XREF ind
//                        value of 'R'. sbc.
//    10/08/91    dmeier  data base changes - removed op1owrdt
//                        and oi0cwear(10); renumbered oi0cwear
//                        (11) thru (21) to be (10) thru (20)
//                        changed oi0cm005, oi0cm010,
//                        oi0csaa, oi0csba, oi0csbb, oi0csbd,
//                        oi0csbf, oi0csbh, oi0csbj, oi0csbt,
//                        oi0csdv, oi0csso, oi0cs05, oi0cs31,
//                        oi0cw02, oi0cw03, oi0cw04
//    12/23/91    jjohn2  Commented out move of op1cuoid from
//                        OI0CW01 to screen as it contains only
//                        garbage at that point.  OI0C001.
//    12/31/91    jjohn2  Removed clear screen for M001 so data
//                        entered by the user will remain.
//    03/13/92    scantr  db changes & clean up records list
//    08/31/92    dlegg   Log #885. Changes for Cust Prod Xref.
//                        Changes to OI0CSBC.
//    02/28/94    scantr  db changes: resize op1ovalu so incr
//                        max value of field sbd
//    08/10/95    dliddl  Modified to incorporate Nike Canada.
//                        For all Canadian customers, the
//                        currency code will display on
//                        OI0CM015.
//    08/30/96    dlegg   Put in a trap to only allow a certain
//                        number of temp storage records to
//                        be written. When this maximum is
//                        exceeded, message is posted and
//                        screen reconversed. This change made
//                        in hope of trapping an error that
//                        caused temp storage to be filled up
//                        resulting in bringing down CICS.
//    12/20/96    CBRINE  Access new xref table (VCUCPX01 via
//                        CU1710, rather than VCUSKU01 (OI0CSBC
//    06/10/97    wleong  changed to display error message
//                        instead of abending if temp storage
//                        is full
// y2kfix 11/03/97 pharwo changes to oi0csbm, oi0csfd, oi0cw01,
//                        oi0csdt for year 2000 compliance.
//    05/12/98    LRAO    Changed code to make to access all
//                        the records by sending a max number
//                        for date. OI0CSBC Look for TCS.
//    07/2/98     LRAO    Added the code in sba,sbc,stk to
//                        fetch orders using cu-co-id and
//                        cu-prod-id.
//    10/09/98    JFLOR1  recompiled to get correct length of
//                        KUMREC, KUMGRP, KUMSTRNM.
//    03/03/00    NKATHI  Changes done in SRGP OI0CSBS.The code
//    TT#4547             for selecting unique row is commented
//                        (Call IO module IO0280 with IO-TASK
//                        'S ') and cursor-fetch logic (Call
//                        IO module IO0280 with IO-TASK 'SS')
//                        is introduced to validate customer.
//                        The SRGP OI0CS-CUST-CURS declares
//                        CUST cursor and OI0CS-CUST-FETCH
//                        fetches row from the cursor are added
//                        newly.
// ************************************************************
// *********************
Program OI0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  OI0CW01 OI0CW01; // record
  OI0CW02 OI0CW02; // record
  OI0CW03 OI0CW03; // record
  OI0CW04 OI0CW04; // record
  OI0CW05 OI0CW05; // record
  OIWREC OIWREC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  WCU1710 WCU1710; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XCSTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use ZCCTBL {deleteAfterUse = yes}; // table
  use OI0CM.OI0CM005,  // forms
      OI0CM.OI0CM010, 
      OI0CM.OI0CM015
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OI0C001: OI0C001();



    goto OI0C005; /* branch to converse*/



    OI0C005: OI0C005();


                /* if an error occured*/
                   /* reconverse the map*/
                /* else*/
                   /* do field edits.*/



    if (OI0CW01.OI0CWERR == "Y" /* if error flag on or*/
     || OI0CM005.VAGen_EZEMSG > " ") /* message field used*/
      goto OI0C005; /* reconverse map*/
    else
      goto OI0C010; /* continue to data base selects*/
    end


    OI0C010: OI0C010();




    if (OI0CW01.OI0CWERR == "Y" /* error flag is on*/
     || OI0CW01.OI0CWMAX == "Y") /* more than max orders returned*/
      goto OI0C005;
    else
      if (OI0CW01.OI0CWTRS == "Y") /* write transient record*/
        OI0CW01.OI0CWTRS = "N"; /* reset flag*/
        goto OI0C012;
      else
        goto OI0C015; /* display the browse screens*/
      end
    end



     /* ************************************************************/
    OI0C012: OI0C012();


    goto OI0C015; /* to display orders*/



    OI0C015: OI0C015();


    if (OI0CW01.OI0CWERR == "Y" 
     || OI0CW01.OI0CWERR == "X" /* trigger to return, no errors*/
     || converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto OI0C015; /* reconverse the screen*/
    else
      if (converseVar.eventKey is pf3)
        goto OI0C001; /* back to parameters screen*/
      else
        if (converseVar.eventKey is pf11)
          goto OI0C020; /* to the right screen*/
        end
      end
    end



     /* *************************************************************/
    OI0C020: OI0C020();



    if (OI0CW01.OI0CWERR == "Y"
     || converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto OI0C020; /* reconverse the screen*/
    else
      if (converseVar.eventKey is pf3)
        goto OI0C001; /* back to the parameters screen*/
      else
        if (converseVar.eventKey is pf10)
          goto OI0C015; /* go to the left screen*/
        end
      end
    end



     /* ***********************************************************/
  end // end main
end // end OI0C

// program init
Function OI0C001()



      /* ***********************************************/
      /* *   this process initiliazes the map areas   **/
      /* ***********************************************/



          /* check security*/

  XSENTRY();


   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OI";
  COMMAREA.CAEZSG4 = "C";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/
          /* initialize working storage and map*/


  if (COMMAREA.CAFROMAP == "OI0C")
    OI0CM005.OI0CMFCO = OI0CW01.OP1CUOID;
  end

  set OI0CM010 initial;
  set OI0CM015 initial;
  set OIWREC empty;
  set OI0CW01 empty;
  set OI0CW02 empty;
  set OI0CW03 empty;
  set OI0CW04 empty;


  OI0CSDT(); /* initialize dates*/


   /* ************************************************************/
end // end OI0C001

// enter selection parms
Function OI0C005()



          /* ***************************************************/
          /* * this process converses the map, processing aid **/
          /* * key requests, and fast path requests. enter    **/
          /* * with no fast path will proceed to the next pro-**/
          /* * cess to perform edits.                         **/
          /* ***************************************************/


  if (COMMAREA.XDVCD != "02")
    set OI0CM005.OI0CMPO1 protect, invisible; /* po date literal*/
    set OI0CM005.OP1CPODT[1] protect, invisible;
    set OI0CM005.OI0CMPO2 protect, invisible; /* to literal*/
    set OI0CM005.OP1CPODT[2] protect, invisible;
  end


  OI0CM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/

   /* ***********************************************************/
  converse OI0CM005 ;
   /* ***********************************************************/


            /* clear message fields*/


  OI0CM005.VAGen_EZEMSG = " ";
  OI0CW01.OI0CWERR = "N"; /* clear error flag*/

  OI0CSAA(); /* reset modified data tags*/

               /* check and process valid pf keys*/

      /* enter - continue processing*/
        /* pf3 - transfer to order processing menu application*/
        /* pf4 - transfer to master menu application*/

  if (converseVar.eventKey is enter)
     /* next sentence -- continue processing*/
  else
    if (converseVar.eventKey is pf3) /* flow to op menu*/
      OI0CSXA(); /* purge temp storage*/
      COMMAREA.CATOAP = "OP0M";
      XSEXIT(); /* pass control to exit routine*/
      COMMAREA.CAUSERA = " "; /* clear user commarea*/
      OI0CM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
      COMMAREA.CATOAP = " "; /* clear appl*/
      OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    else
      if (converseVar.eventKey is pf4) /* flow to master appl menu*/
        OI0CSXA(); /* purge temp storage*/
        COMMAREA.CAUSERA = " "; /* clear user commarea*/
        XSPF4(); /* invoke master menu request*/
        OI0CM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
        COMMAREA.CATOAP = " "; /* clear appl*/
        OI0CW01.OI0CWERR = "Y"; /* set error flag*/
      else
        converseLib.validationFailed(008); /* invalid key pressed*/
        OI0CW01.OI0CWERR = "Y"; /* set error flag*/
      end
    end
  end




            /* save fast path data*/


  if (OI0CM005.CATOAP is modified)
    COMMAREA.CATOAP = OI0CM005.CATOAP;
  end
  set OI0CM005.CATOAP initialAttributes;


  if (OI0CM005.CAITEM is modified)
    COMMAREA.CAITEM = OI0CM005.CAITEM;
  end
  set OI0CM005.CAITEM initialAttributes;


            /* a transfer overrides all other screen requests*/


  if (converseVar.eventKey is enter /* transfer only on enter key*/
   && COMMAREA.CATOAP > " ")        /* transfer to appl?*/
    OI0CSXA(); /* purge temp storage*/
    COMMAREA.CAUSERA = " "; /* clear user comm area*/
    XSEXIT(); /* pass control to exit routine*/
    OI0CM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
    set OI0CM005.CATOAP cursor, modified, bold;
    exit stack;
  end


    /* perform field edits*/

  if (converseVar.eventKey is enter)
    if (OI0CW01.OI0CWMAX == "Y") /* orders already selected*/
      exit stack; /* go to flow*/
    else /* if user enter new parms to select*/
      OI0CSBA(); /* field edit control routine*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* release data base resources*/
    end
  end



   /* ************************************************************/
end // end OI0C005

// do data base selects
Function OI0C010()



  if (OI0CW01.OI0CWMAX == "Y") /* orders already selected*/
    OI0CW01.OI0CWMAX = "N"; /* reset the max orders flag*/
    exit stack;
  else
    OI0CSTK(); /* determine the task path to be used in op1080*/
    OI0CSLO(); /* select orders from data base*/
    if (OI0CW01.OI0CWERR == "N") /* if orders found, continue*/
      OI0CS31(); /* load screen*/
    end
  end


   /* ***********************************************************/
end // end OI0C010

// write transient record
Function OI0C012()



       /* ******************************************************/
       /* * this process writes the transient record to the   **/
       /* * temp storage csmt. this will tell us how often    **/
       /* * a set which has more than 100 orders is selected  **/
       /* ******************************************************/


  set OI0CW05 empty;
  OI0CW05.OI0CWPRG = "OI0C"; /* program id*/
  OI0CW05.OI0CWRDT = VGVar.currentShortGregorianDate; /* the current run date*/
  OI0CW05.OI0CWRTM = VGVar.currentFormattedTime; /* current run time*/
  OI0CW05.OI0CWUSR = COMMAREA.CAUSERID; /* user id*/
  OI0CW05.OI0CWMSG = "MORE THAN 100 ORDERS SELECTED ";



  add OI0CW05 ;



   /* ************************************************************/
end // end OI0C012

// display the left screen
Function OI0C015()



       /* *******************************************************/
       /* * this process display the left side of the first 100**/
       /* * orders for the selected customer. from this screen,**/
       /* * the user can:                                      **/
       /* *   - pf11 to go to oi0c015 screen to see the right  **/
       /* *     part of orders                                 **/
       /* *   - pf7 to go backward                             **/
       /* *   - pf8 to go forward                              **/
       /* *   - select up to 20 orders and press the enter     **/
       /* *     key to go to the order maintenance/inquiry     **/
       /* *     program                                        **/
       /* *   - pf3 to go back to the parameters screen        **/
       /* *   - pf4 to go back to the master menu              **/
       /* *******************************************************/

  OI0CM010.OI0CMPRC = "OI0C015"; /* proc name*/
  OI0CM010.OI0CMMAP = "OI0CM010"; /* map name*/

  if (OI0CW01.OI0CWERR != "Y")
    set OI0CM010.OI0CMSEL[1] cursor;
  end


  converse OI0CM010 ;


  OI0CW01.OI0CWERR = "N"; /* clear error flag*/
  OI0CM010.VAGen_EZEMSG = " "; /* clear error message*/


       /* check and process valid pf keys*/

       /* pf3:  back to the parameters screen*/
       /* pf4:  to master menu screen*/
       /* pf7:  page backward*/
       /* pf8:  page forward*/
       /* pf11: page right*/
       /* select and enter: go to order maintenance/inquiry*/




  if (converseVar.eventKey is enter)
    OI0CS10(); /* scan screen for selected orders*/
    OI0CS9(); /* edit page request field*/
    OI0CS15();
                                   /* move selected order to oiwrec to pass*/
    if (OI0CW01.OI0CWERR == "Y") /* no orders selected*/
      exit stack; /* reconverse*/
    else
      OI0CSXA(); /* purge temp storage*/
      OIWREC.OIWINT = "OM0";
      COMMAREA.CAUSERA = OIWREC.OIWSGRP; /* load the passed record*/
      COMMAREA.CACURRAP = "OI0C";
      COMMAREA.CATOAP = "OM0M";
      XSEXIT(); /* transfer*/
      COMMAREA.CAUSERA = " "; /* it's not authorized to pass*/
      COMMAREA.CATOAP = " "; /* clear application*/
      OI0CM010.VAGen_EZEMSG = COMMAREA.CAMSG;
      OI0CW01.OI0CWERR = "Y";
    end
  else
    if (converseVar.eventKey is pf3)
      exit stack; /* back to parameters screen*/
    else
      if (converseVar.eventKey is pf4)
        OI0CSXA(); /* purge temp storage*/
        COMMAREA.CAUSERA = " "; /* clear user area*/
        XSPF4();
        OI0CM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* error message*/
        COMMAREA.CATOAP = " ";
        OI0CW01.OI0CWERR = "Y"; /* set error flag*/
      else
        if (converseVar.eventKey is pf7) /* page back*/
          OI0CS10(); /* scan screen for selected orders*/
          if (OI0CW01.OI0CWERR == "Y")
            exit stack;
          else
            OI0CS20(); /* go backward*/
          end
        else
          if (converseVar.eventKey is pf8) /* page forward*/
            OI0CS10(); /* scan screen for selected orders*/
            if (OI0CW01.OI0CWERR == "Y")
              exit stack;
            else
              OI0CS30(); /* go forward*/
            end
          else
            if (converseVar.eventKey is pf11) /* page right*/
              OI0CS10(); /* scan screen for selected orders*/
            else
              converseLib.validationFailed(008); /* invalid key pressed*/
              OI0CW01.OI0CWERR = "Y"; /* set error flag*/
            end
          end
        end
      end
    end
  end


   /* ***********************************************************/
end // end OI0C015

// display the right screen
Function OI0C020()


       /* *******************************************************/
       /* * this process displays the right side of the first  **/
       /* * 100 orders for the selected customer. from this    **/
       /* * screen, the user can:                              **/
       /* *   - pf10 to go to oi0c010 screen to see the left   **/
       /* *     part of orders                                 **/
       /* *   - pf7 to go backward                             **/
       /* *   - pf8 to go forward                              **/
       /* *   - select up to 20 orders and press the enter     **/
       /* *     key to go to the order maintenance/inquiry     **/
       /* *     program                                        **/
       /* *   - pf3 to go back to the parameters screen        **/
       /* *   - pf4 to go back to the master menu              **/
       /* *******************************************************/


  OI0CM015.OI0CMPRC = "OI0C020"; /* proc name*/
  OI0CM015.OI0CMMAP = "OI0CM015"; /* map name*/

  if (OI0CW01.OI0CWERR == "N")
    set OI0CM015.OI0CMSEL[1] cursor;
  end


  converse OI0CM015 ;



  OI0CW01.OI0CWERR = "N"; /* clear error flag*/
  OI0CM010.VAGen_EZEMSG = " "; /* clear error message*/


       /* check and process valid pf keys*/

       /* pf3:  back to the parameters screen*/
       /* pf4:  to master menu screen*/
       /* pf7:  page backward*/
       /* pf8:  page forward*/
       /* pf10: page left*/
       /* select and enter: go to order maintenance/inquiry*/



  if (converseVar.eventKey is enter)
    OI0CS35(); /* scan screen for selected orders*/
    if (OI0CW01.OI0CWERR == "Y") /* if something other than 's' entered*/
      exit stack; /* reconverse*/
    else
      OI0CS15();
                                   /* move selected order to oiwrec to pass*/
      if (OI0CW01.OI0CWERR == "Y") /* no orders selected*/
        exit stack; /* reconverse*/
      else
        OI0CSXA(); /* purge temp storage*/
        OIWREC.OIWINT = "OM0";
        COMMAREA.CAUSERA = OIWREC.OIWSGRP; /* load the passed record*/
        COMMAREA.CACURRAP = "OI0C";
        COMMAREA.CATOAP = "OM0M";
        XSEXIT();
        COMMAREA.CAUSERA = " "; /* it's not authorized to pass*/
        COMMAREA.CATOAP = " "; /* clear application*/
        OI0CM015.VAGen_EZEMSG = COMMAREA.CAMSG;
        OI0CW01.OI0CWERR = "Y";
      end
    end
  else
    if (converseVar.eventKey is pf3)
      exit stack; /* back to parameters screen*/
    else
      if (converseVar.eventKey is pf4)
        OI0CSXA(); /* purge temp storage*/
        COMMAREA.CAUSERA = " "; /* clear user area*/
        XSPF4();
        OI0CM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* error message*/
        COMMAREA.CATOAP = " ";
        OI0CW01.OI0CWERR = "Y"; /* set error flag*/
      else
        if (converseVar.eventKey is pf7) /* page back*/
          OI0CS35(); /* scan screen for selected orders*/
          if (OI0CW01.OI0CWERR == "Y")
            exit stack;
          else
            OI0CS20(); /* go backward*/
          end
        else
          if (converseVar.eventKey is pf8) /* page forward*/
            OI0CS35(); /* scan screen for selected orders*/
            if (OI0CW01.OI0CWERR == "Y")
              exit stack;
            else
              OI0CS30(); /* go forward*/
            end
          else
            if (converseVar.eventKey is pf10) /* page left*/
              OI0CS35(); /* scan screen for selected orders*/
            else
              converseLib.validationFailed(008); /* invalid key pressed*/
              OI0CW01.OI0CWERR = "Y"; /* set error flag*/
            end
          end
        end
      end
    end
  end



   /* ***********************************************************/
end // end OI0C020

// DECLARE CURSOR FOR CUS
Function OI0CS-CUST-CURS()
   /* TT#4547       03/03/00      NKATHI*/
   /* This SRGP is to validate the customer when customer number,*/
   /* Store Id and Dept Code are entered.It uses the IO module IO0280*/
   /* for declaring and fetching a row from the cursor.*/


     /* SELECT CURSOR SET*/

  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    OI0CS-CUST-FETCH(); /* fetch first record*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OI0C    ";
    TA1REC.TA1LOCAT[1] = "SS      ";
    TA1REC.TA1LOCAT[2] = "OI0CSBS ";
    TA1REC.TA1LOCAT[3] = "IO0280  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OI0CM005";
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1TBLKE = OI0CM005.XNXCD;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " "; /* on error clear ws*/
    XSPF4();
    exit program;
  end

     /* CLOSE CURSOR*/

  call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
      /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OI0C    ";
    TA1REC.TA1LOCAT[1] = "CS      ";
    TA1REC.TA1LOCAT[2] = "OI0CSB1 ";
    TA1REC.TA1LOCAT[3] = "IO0280  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OI0CM005";
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1TBLKE = OI0CM005.XNXCD;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CAUSERA = " "; /* on error clear ws*/
    XSPF4();
    exit program;
  end
end // end OI0CS-CUST-CURS

// FETCH CUSTOMER RECORD
Function OI0CS-CUST-FETCH()
   /* TT#4547       03/03/00      NKATHI*/
   /* fetches row from the cursor*/

  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(33);
      OI0CW01.OI0CWERR = "Y";
      set OI0CM005.KUCCOID modified, bold;
      set OI0CM005.OI0CMSTR cursor, modified, bold;
      set OI0CM005.XNXCD cursor, modified, bold;
      return;
    end
  end

  set OI0CM005.KUCCOID initialAttributes;
  set OI0CM005.OI0CMSTR initialAttributes;
  set OI0CM005.XNXCD initialAttributes;
  OI0CW02.KUCCOID = KUNREC.KUCCOID;
  OI0CW02.KUMSTRID[1] = KUNREC.KUMSTRID;
  OI0CW02.KUMSTRID[2] = KUNREC.KUMSTRID;
  OI0CW02.XNXCD[1] = KUNREC.XNXCD;
  OI0CW02.XNXCD[2] = KUNREC.XNXCD;

end // end OI0CS-CUST-FETCH

Function OI0CS-ORD-XREF()


               /* Validate the order xref number.*/
               /* Occurence 21 of oi0cw01.oi0cwear indicates*/
               /* that this field is used as part of the lookup key.*/

  if (OI0CM005.OB-ORD-XREF-NBR > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[21] = " "; /* order xref not used in key*/
    OI0CW02.OB-ORD-XREF-NBR[1] = " ";
    OI0CW02.OB-ORD-XREF-NBR[2] = "9999999999";
    set OI0CM005.OB-ORD-XREF-NBR initialAttributes;
    return;
  end


    /* Set up key to select for single order xref nbr.*/
    /* To/From keys are equal.*/

  OI0CW02.OB-ORD-XREF-NBR[1] = OI0CM005.OB-ORD-XREF-NBR;
  OI0CW02.OB-ORD-XREF-NBR[2] = OI0CM005.OB-ORD-XREF-NBR;
  OI0CW01.OI0CWEAR[21] = "Y";
                                   /* set flag to show field is used in key*/
  set OI0CM005.OB-ORD-XREF-NBR initialAttributes;



   /* ***********************************************************/
end // end OI0CS-ORD-XREF

// clear and protect screen
Function OI0CS05()



       /* ********************************************************/
       /* * this statement group clears the unuse lines on the  **/
       /* * screen and protect the select field on the blank    **/
       /* * lines                                               **/
       /* ********************************************************/


  set OI0CM010.OI0CMSEL[OI0CWSB1] skip, invisible;
  OI0CM010.OI0CMSTR[OI0CWSB1] = " "; /* cust to screen*/
  OI0CM010.OI0CMORD[OI0CWSB1] = " "; /* ord to screen1*/
  OI0CM010.OI0CMPO[OI0CWSB1] = " "; /* po nbr*/
  OI0CM010.XOBCD[OI0CWSB1] = " "; /* base order type*/
  OI0CM010.XOCCD[OI0CWSB1] = " "; /* order class*/
  OI0CM010.SP1ID[OI0CWSB1] = " "; /* sales pgm*/
  OI0CM010.XDSCD[OI0CWSB1] = " "; /* direct shp code*/
  OI0CM010.XWHCD[OI0CWSB1] = " "; /* warehouse*/
  OI0CM010.OI0CMNDT[OI0CWSB1] = " "; /* need date*/
  OI0CM010.XCSCD[OI0CWSB1] = " "; /* credit status*/
  OI0CM010.XOSCD[OI0CWSB1] = " "; /* ord status*/


     /* move data to the right screen (oi0cm015)*/

  set OI0CM015.OI0CMSEL[OI0CWSB1] skip, invisible;
  OI0CM015.OI0CMSTR[OI0CWSB1] = " "; /* cust to screen*/
  OI0CM015.OI0CMORD[OI0CWSB1] = " "; /* ord to screen2*/
  OI0CM015.XSOCD[OI0CWSB1] = " "; /* ord status*/
  OI0CM015.OI0CMUNT[OI0CWSB1] = "0"; /* tot units*/
  OI0CM015.OI0CMVAL[OI0CWSB1] = "0"; /* tot value*/
  OI0CM015.OI0CMDSB[OI0CWSB1] = "0"; /* ds before*/
  OI0CM015.OI0CMDSA[OI0CWSB1] = "0"; /* ds after*/
  OI0CM015.OI0CM1TS[OI0CWSB1] = " "; /* 1time shp*/
  OI0CM015.OI0CMBDC[OI0CWSB1] = " "; /* bd code*/
  OI0CM015.OI0CMBLK[OI0CWSB1] = "0"; /* bulk id*/


   /* ************************************************************/
end // end OI0CS05

// select orders to pass
Function OI0CS10()


       /* *******************************************************/
       /* * this statement group checks to see if any orders   **/
       /* * were selected to pass to the order maint/inq       **/
       /* * program.                                           **/
       /* *******************************************************/

  OI0CW01.OI0CWXUP = "N"; /* update flag for temp storage*/

  OI0CW01.OI0CWSB1 = 1;

  while (OI0CW01.OI0CWSB1 <= 17
   && OI0CM010.OI0CMORD[OI0CWSB1] > "0")
    if (OI0CM010.OI0CMSEL[OI0CWSB1] == " " /* nothing was entered*/
     || OI0CM010.OI0CMSEL[OI0CWSB1] == "S") /* order was selected*/
      OI0CW04.OI0CWSLC[OI0CWSB1] = OI0CM010.OI0CMSEL[OI0CWSB1];
      OI0CM015.OI0CMSEL[OI0CWSB1] = OI0CM010.OI0CMSEL[OI0CWSB1];
      set OI0CM010.OI0CMSEL[OI0CWSB1] initialAttributes;
      OI0CW01.OI0CWXUP = "Y"; /* turn on update flag*/
    else
      converseLib.validationFailed(007); /* select code is not valid-enter 's' to select*/
      OI0CW01.OI0CWERR = "Y"; /* set error flag*/
      set OI0CM010.OI0CMSEL[OI0CWSB1] cursor, modified, bold;
    end
    OI0CW01.OI0CWSB1 = OI0CW01.OI0CWSB1 + 1;
  end

  if (OI0CW01.OI0CWERR == "Y")
    exit stack;
  end

  if (OI0CW01.OI0CWXUP == "Y")
    OI0CSXD(); /* update temp storage*/
  end

   /* ************************************************************/
end // end OI0CS10

// load orders to pass
Function OI0CS15()



       /* ********************************************************/
       /* * this statement group loads the selected orders from **/
       /* * the oi0cw04 to the oiwrec to pass to the order      **/
       /* * inquiry/maintenance program.  users can select up to**/
       /* * 20 orders to pass.  if there are more than 20 orders**/
       /* * selected, this program only passes the first 20     **/
       /* ********************************************************/

  OI0CW01.OI0CWSSP = OI0CW01.OI0CWTSP; /* saved temp storage page*/

  OI0CW01.OI0CWSB1 = 1; /* int oi0cw04 index*/
  OI0CW01.OI0CWSB2 = 1; /* int oiwrec  index*/
  OI0CW01.OI0CWORC = 0; /* int order count*/
  OI0CW01.OI0CWTSP = 1; /* start at beginning*/

  while (OI0CW01.OI0CWTSP <= OI0CW01.TA5TSQIX)
    OI0CSXC(); /* read temp storage page*/

    while (OI0CW01.OI0CWSB1 <= 17
     && OI0CW01.OI0CWSB2 < 21) /* pass only the first 20*/
      if (OI0CW04.OI0CWSLC[OI0CWSB1] == "S") /* order selected*/
        OIWREC.OP1CUOID[OI0CWSB2] = OI0CW04.OI0CWOID[OI0CWSB1];
        OIWREC.OP1NORID[OI0CWSB2] = OI0CW04.OI0CWNID[OI0CWSB1];
        OI0CW01.OI0CWORC = OI0CW01.OI0CWORC + 1; /* increment order count*/
        OI0CW01.OI0CWSB2 = OI0CW01.OI0CWSB2 + 1; /* increment oiwrec count*/
      end
      OI0CW01.OI0CWSB1 = OI0CW01.OI0CWSB1 + 1; /* increment oi0cw04 index*/
    end

    OI0CW01.OI0CWTSP = OI0CW01.OI0CWTSP + 1;
    OI0CW01.OI0CWSB1 = 1;
  end


  OI0CW01.OI0CWTSP = OI0CW01.OI0CWSSP; /* move saved page back*/
  OI0CSXC(); /* read page back into ws*/

       /* if the enter key was pressed and no orders*/
       /* were selected, display the message and redisplay*/
       /* the same screen*/

  if (OI0CW01.OI0CWORC == 0)
    converseLib.validationFailed(214); /* no orders were selected*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
  end



   /* *********************************************************/
end // end OI0CS15

// page backward
Function OI0CS20()



  if (OI0CW01.OI0CWTSP < 2)
    converseLib.validationFailed(192); /* end of page backward*/
    OI0CW01.OI0CWERR = "Y";
  else
    OI0CW01.OI0CWTSP = OI0CW01.OI0CWTSP - 1; /* decrement page nbr*/
    OI0CS31();
  end


   /* ************************************************************/
end // end OI0CS20

// page forward
Function OI0CS30()



  if (OI0CW01.OI0CWTSP >= OI0CW01.TA5TSQIX) /* no more pages*/
    converseLib.validationFailed(215); /* end of page backward*/
    OI0CW01.OI0CWERR = "Y";
  else
    OI0CW01.OI0CWTSP = OI0CW01.OI0CWTSP + 1; /* increment page nbr*/
    OI0CS31(); /* load records to screen*/
  end


   /* ************************************************************/
end // end OI0CS30

// load order to screen
Function OI0CS31()

   /* ******************************************************/
   /* 1.  first time thru, get page 1*/
   /* 2.  check if map page is same as storage*/
   /* 3.  paging used instead of page request*/
   /* ******************************************************/

  if (OI0CM010.OI0CMTSP == 0) /* 1.  first time thru*/
    OI0CW01.OI0CWTSP = 1;
    OI0CM010.OI0CMTSP = OI0CW01.OI0CWTSP; /* current page*/
    OI0CSXC(); /* get temp storage page wanted*/
  end

  if (converseVar.eventKey is enter /* 2.  specific page was requested*/
   && OI0CM010.OI0CMTSP != OI0CW01.OI0CWTSP)
    OI0CW01.OI0CWTSP = OI0CM010.OI0CMTSP;
    OI0CSXC(); /* get temp storage page wanted*/
  end

  if (converseVar.eventKey is pf7 /* 3.  oi0cmtsp was adjusted in oi0cs20*/
   || converseVar.eventKey is pf8) /* oi0cmtsp was adjusted in oi0cs30*/
    OI0CSXC(); /* get temp storage page wanted*/
  end


  OI0CM010.OI0CMTSP = OI0CW01.OI0CWTSP; /* current page*/
  OI0CM010.TA5TSQIX = OI0CW01.TA5TSQIX; /* highest page*/
  OI0CSBU(); /* get country abrev*/


  OI0CW01.OI0CWSB1 = 1;

  while (OI0CW01.OI0CWSB1 <= 17 /* total possible for map*/
   && OI0CW04.OI0CWCID[OI0CWSB1] > 0)

    set OI0CM010.OI0CMSEL[OI0CWSB1] initialAttributes;
    OI0CM010.OI0CMSEL[OI0CWSB1] = OI0CW04.OI0CWSLC[OI0CWSB1];
    OI0CW01.OI0CWSTR = OI0CW04.OI0CWCST[OI0CWSB1];
    OI0CW01.OI0CWDEP = OI0CW04.OI0CWXNX[OI0CWSB1];
    OI0CW01.OI0CWPT1 = ".";
    OI0CM010.OI0CMSTR[OI0CWSB1] = OI0CW01.OI0CWCUS; /* cust to screen*/

    OI0CW01.OI0CWFCO = OI0CW04.OI0CWOID[OI0CWSB1]; /* format cust order*/
    OI0CW01.OI0CWPT2 = ".";
    OI0CW01.OI0CWFNO = OI0CW04.OI0CWNID[OI0CWSB1]; /* format nike ord*/
    OI0CM010.OI0CMORD[OI0CWSB1] = OI0CW01.OI0CWFOR; /* ord to screen1*/
    OI0CM010.OI0CMPO[OI0CWSB1] = OI0CW04.OP1CUPO[OI0CWSB1]; /* po nbr*/
    OI0CM010.XOBCD[OI0CWSB1] = OI0CW04.XOBCD[OI0CWSB1]; /* order type*/
    OI0CM010.XOCCD[OI0CWSB1] = OI0CW04.XOCCD[OI0CWSB1];
                                   /* order class*/
    OI0CM010.SP1ID[OI0CWSB1] = OI0CW04.SP1ID[OI0CWSB1]; /* sales pgm*/
    OI0CM010.XDSCD[OI0CWSB1] = OI0CW04.XDSCD[OI0CWSB1]; /* direct shp*/
    OI0CM010.XWHCD[OI0CWSB1] = OI0CW04.XWHCD[OI0CWSB1]; /* warehouse*/
    OI0CW01.OI0CWDAT = OI0CW04.OI0CWNDT[OI0CWSB1]; /* format date*/
    OI0CW01.OI0CWDT1 = OI0CW04.OI0CWNDT[OI0CWSB1];
    OI0CSSP(); /* reformat date for screen 7-8-87*/
    OI0CM010.OI0CMNDT[OI0CWSB1] = OI0CW01.OI0CWDT2; /* need date*/
    OI0CM010.XCSCD[OI0CWSB1] = OI0CW04.XCSCD[OI0CWSB1]; /* credit status*/
    OI0CM010.XOSCD[OI0CWSB1] = OI0CW04.XOSCD[OI0CWSB1]; /* ord status*/


       /* move data to the right screen (oi0cm015)*/

    set OI0CM015.OI0CMSEL[OI0CWSB1] initialAttributes;
    OI0CM015.OI0CMSEL[OI0CWSB1] = OI0CW04.OI0CWSLC[OI0CWSB1];
    OI0CM015.OI0CMSTR[OI0CWSB1] = OI0CW01.OI0CWCUS; /* cust to screen*/
    OI0CM015.OI0CMORD[OI0CWSB1] = OI0CW01.OI0CWFOR; /* ord to screen2*/
    OI0CM015.XSOCD[OI0CWSB1] = OI0CW04.XSOCD[OI0CWSB1]; /* ord status*/
    OI0CM015.OI0CMUNT[OI0CWSB1] = OI0CW04.OI0CWTUN[OI0CWSB1]; /* tot un*/
    OI0CM015.OI0CMVAL[OI0CWSB1] = OI0CW04.OI0CWVAL[OI0CWSB1]; /* tot va*/
    OI0CW01.OI0CWDAT = OI0CW04.OI0CWBDT[OI0CWSB1]; /* format date*/
    OI0CW01.OI0CWDT1 = OI0CW04.OI0CWBDT[OI0CWSB1]; /* 7-8-87*/
    OI0CSSP(); /* reformat date for screen 7-8-87*/
    OI0CM015.OI0CMDSB[OI0CWSB1] = OI0CW01.OI0CWDT2; /* ds before*/
    OI0CW01.OI0CWDAT = OI0CW04.OI0CWADT[OI0CWSB1]; /* format date*/
    OI0CW01.OI0CWDT1 = OI0CW04.OI0CWADT[OI0CWSB1];
    OI0CSSP(); /* reformat date for screen 7-8-87*/
    OI0CM015.OI0CMDSA[OI0CWSB1] = OI0CW01.OI0CWDT2; /* ds after*/
    if (COMMAREA.XDVCD != "02") /* not nil division*/
      set OI0CM015.OI0CMPO1 skip, invisible; /* po*/
      set OI0CM015.OI0CMPO2 skip, invisible; /* date*/
      set OI0CM015.OI0CMPOD[OI0CWSB1] skip, invisible; /* actual date*/
    else
      OI0CW01.OI0CWDAT = OI0CW04.OI0CWPOD[OI0CWSB1]; /* format date*/
      OI0CW01.OI0CWDT1 = OI0CW04.OI0CWPOD[OI0CWSB1]; /* 12-11-89*/
      OI0CSSP(); /* reformat date for screen 12-11-89*/
      OI0CM015.OI0CMPOD[OI0CWSB1] = OI0CW01.OI0CWDT2; /* po date*/
    end
    OI0CM015.OI0CM1TS[OI0CWSB1] = OI0CW04.OP11TMSF[OI0CWSB1];
                                   /* 1time*/
    OI0CM015.OI0CMBDC[OI0CWSB1] = OI0CW04.XBDCD[OI0CWSB1]; /* bd code*/
    if (OI0CW04.OI0CWBID[OI0CWSB1] == 0) /* bulk or regular order*/
      OI0CM015.OI0CMBLK[OI0CWSB1] = OI0CW04.OI0CWDRW[OI0CWSB1];
    else /* it is draw order*/
      OI0CM015.OI0CMBLK[OI0CWSB1] = OI0CW04.OI0CWBID[OI0CWSB1]; /* b id*/
    end


    OI0CW01.OI0CWSB1 = OI0CW01.OI0CWSB1 + 1; /* increment counter*/

  end

  if (OI0CW01.OI0CWSB1 < 17)
    while (OI0CW01.OI0CWSB1 <= 17)
      OI0CS05();
      OI0CW01.OI0CWSB1 = OI0CW01.OI0CWSB1 + 1;
    end
  end

   /* ************************************************************/
end // end OI0CS31

// scan screen for selected order
Function OI0CS35()

       /* *******************************************************/
       /* this statement group scan the screen oi0cm015.*/
       /* if an 's' was entered to select an order to pass,*/
       /* store it in the right screen to display and also store*/
       /* it in the internal keys table*/
       /* *******************************************************/

  OI0CW01.OI0CWXUP = "N"; /* update flag for temp storage*/

  OI0CW01.OI0CWSB1 = 1;

  while (OI0CW01.OI0CWSB1 <= 17
   && OI0CM015.OI0CMORD > "0")
    if (OI0CM015.OI0CMSEL[OI0CWSB1] == " " /* nothing was entered*/
     || OI0CM015.OI0CMSEL[OI0CWSB1] == "S") /* order was selected*/
      OI0CW04.OI0CWSLC[OI0CWSB1] = OI0CM015.OI0CMSEL[OI0CWSB1];
      OI0CM010.OI0CMSEL[OI0CWSB1] = OI0CM015.OI0CMSEL[OI0CWSB1];
      set OI0CM015.OI0CMSEL[OI0CWSB1] initialAttributes;
      OI0CW01.OI0CWXUP = "Y"; /* turn on update flag*/
    else
      converseLib.validationFailed(007); /* select code is not valid-enter 's' to select*/
      OI0CW01.OI0CWERR = "Y"; /* set error flag*/
      set OI0CM015.OI0CMSEL[OI0CWSB1] cursor, modified, bold;
    end
    OI0CW01.OI0CWSB1 = OI0CW01.OI0CWSB1 + 1;
  end

  if (OI0CW01.OI0CWXUP == "Y")
    OI0CSXD();
  end


   /* ************************************************************/
end // end OI0CS35

// edit page request field
Function OI0CS9()



   /* ********************************************************/
   /* if specific page requested, check that it doesn't*/
   /* exceed the maximum available; if it does, bypass rest*/
   /* of edits*/
   /* ********************************************************/

  if (OI0CM010.OI0CMTSP > OI0CW01.TA5TSQIX) /* highest page existing*/
    OI0CW01.OI0CWERR = "Y";
    converseLib.validationFailed(03); /* page requested exceeds total pages*/
    set OI0CM010.OI0CMTSP cursor, bold;
    exit stack;
  else
    set OI0CM010.OI0CMTSP initialAttributes;
  end

   /* ***********************************************************/
   /* if specific page requested, prepare the temp storage read*/
   /* -- if errors in the selection field, bypass this for now*/
   /* ***********************************************************/

  if (OI0CW01.OI0CWERR == "N"
   && OI0CM010.OI0CMTSP != OI0CW01.OI0CWTSP)
    OI0CS31(); /* read temp storage and load map*/
    OI0CW01.OI0CWERR = "X"; /* trigger to kick out to m010*/
    exit stack;
  end



end // end OI0CS9

// set mdt's on aid key error
Function OI0CSAA()



          /* set mdt's in fields for the case of invalid aid key*/
          /* this allows the user to press the correct aid key*/
          /* without having to re-enter the data.*/

          /* if any parameter on the map was entered, reset the*/
          /* maximum orders selected flag and reselect*/

          /* note: if any field on the screen is modified, the*/
                /* program will redo the select set*/


  if (OI0CM005.KUCCOID is modified) /* company id*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.KUCCOID modified;
  end


  if (OI0CM005.OI0CMSTR is modified) /* store id*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OI0CMSTR modified;
  end


  if (OI0CM005.XNXCD is modified) /* department id*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XNXCD modified;
  end


  if (OI0CM005.OI0CMFCO is modified) /* 'from' order number*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OI0CMFCO modified;
  end



  if (OI0CM005.OI0CMTCO is modified) /* 'to' order number*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OI0CMTCO modified;
  end



  if (OI0CM005.XGPCD is modified) /* general product class*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XGPCD modified;
  end


  if (OI0CM005.OP1CUPO is modified) /* customer po number*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1CUPO modified;
  end

  if (OI0CM005.OP1CPODT[1] is modified) /* beginning po date*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1CPODT[1] modified;
  end


  if (OI0CM005.OP1CPODT[2] is modified) /* ending po date*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1CPODT[2] modified;
  end


  if (OI0CM005.XOBCD is modified) /* base order type*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XOBCD modified;
  end


  if (OI0CM005.OP1CUNDT[1] is modified) /* beginning need date*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1CUNDT[1] modified;
  end

  if (OI0CM005.XDVCD is modified) /* division code*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XDVCD modified;
  end


  if (OI0CM005.OP1CUNDT[2] is modified) /* ending need date*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1CUNDT[2] modified;
  end


  if (OI0CM005.XOCCD is modified) /* order class code*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XOCCD modified;
  end


  if (OI0CM005.SP1ID is modified) /* sales program id*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.SP1ID modified;
  end


  if (OI0CM005.XPTCD is modified) /* payment terms code*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XPTCD modified;
  end


  if (OI0CM005.OP1DSBDT[1] is modified) /* beginning dnsb date*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1DSBDT[1] modified;
  end


  if (OI0CM005.OP1DSBDT[2] is modified) /* ending dnsb date*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1DSBDT[2] modified;
  end


  if (OI0CM005.OP1DSADT[1] is modified) /* beginning dsa date*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1DSADT[1] modified;
  end


  if (OI0CM005.OP1DSADT[2] is modified) /* ending ds after date*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1DSADT[2] modified;
  end


  if (OI0CM005.XOSCD is modified) /* order status*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XOSCD modified;
  end


  if (OI0CM005.OP1CALDT[1] is modified) /* beginning call date*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1CALDT[1] modified;
  end


  if (OI0CM005.OP1CALDT[2] is modified) /* ending call date*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1CALDT[2] modified;
  end


  if (OI0CM005.XCSCD is modified) /* credit status*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XCSCD modified;
  end


  if (OI0CM005.XBDCD is modified) /* bulk order flag*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XBDCD modified;
  end


  if (OI0CM005.OB-ORD-XREF-NBR is modified) /* order xref nbr*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OB-ORD-XREF-NBR modified;
  end


  if (OI0CM005.XSOCD is modified) /* sales office code*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XSOCD modified;
  end


  if (OI0CM005.OP1BLKID is modified) /* bulk order number*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1BLKID modified;
  end


  if (OI0CM005.XWHCD is modified) /* warehouse code*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XWHCD modified;
  end


  if (OI0CM005.OP1SWORD is modified) /* ship with order number*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1SWORD modified;
  end


  if (OI0CM005.SY1STNBR is modified) /* nike style number*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.SY1STNBR modified;
  end


  if (OI0CM005.SY2CLRID is modified) /* nike color id*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.SY2CLRID modified;
  end

  if (OI0CM005.XDMCD is modified) /* dementia code*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.XDMCD modified;
  end


  if (OI0CM005.OP1OVALU[1] is modified) /* from ord value*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1OVALU[1] modified;
  end


  if (OI0CM005.OP1OVALU[2] is modified) /* to order value*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1OVALU[2] modified;
  end


  if (OI0CM005.KUIPRDID is modified) /* customer style id*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.KUIPRDID modified;
  end


  if (OI0CM005.OP1OTUNT[1] is modified) /* from order units*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1OTUNT[1] modified;
  end


  if (OI0CM005.OP1OTUNT[2] is modified) /* to order units*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.OP1OTUNT[2] modified;
  end


  if (OI0CM005.CATOAP is modified) /* fast path to appl*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.CATOAP modified;
  end


  if (OI0CM005.CAITEM is modified) /* fast path item*/
    OI0CW01.OI0CWMAX = "N"; /* reset orders selected flag*/
    set OI0CM005.CAITEM modified;
  end





end // end OI0CSAA

// read vstyle01 record
Function OI0CSB1()


               /* this routine reads the style record vstyle01*/


  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OI0CW02.SY1STNBR = SY1REC.SY1STNBR;
    OI0CW02.SY2CLRID[1] = " ";
    OI0CW02.SY2CLRID[2] = "999";
    OI0CW02.XDMCD[1] = " ";
    OI0CW02.XDMCD[2] = "99";
    set OI0CM005.SY1STNBR initialAttributes;
    set OI0CM005.XGPCD initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(149); /* invalid nike style code*/
      OI0CW01.OI0CWERR = "Y"; /* set error flag*/
      set OI0CM005.SY1STNBR cursor, modified, bold;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OI0C    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OI0CSB1 ";
      TA1REC.TA1LOCAT[3] = "IO0120  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OI0CM005";
      TA1REC.TA1DBASE = "SY1REC  ";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1REC.TA1TBLKE = SY1REC.SY1KEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end


end // end OI0CSB1

// read vcolor02 record
Function OI0CSB2()


               /* this routine reads the style record vcolor02*/



  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OI0CW02.SY1STNBR = SYCREC.SY1STNBR;
    OI0CW02.SY2CLRID[1] = SYCREC.SY2CLRID;
    OI0CW02.SY2CLRID[2] = SYCREC.SY2CLRID;
    OI0CW02.XDMCD[1] = SYCREC.XDMCD;
    OI0CW02.XDMCD[2] = SYCREC.XDMCD;
    set OI0CM005.SY1STNBR initialAttributes;
    set OI0CM005.SY2CLRID initialAttributes;
    set OI0CM005.XDMCD initialAttributes;
    set OI0CM005.XGPCD initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(131); /* invalid nike style/color*/
      OI0CW01.OI0CWERR = "Y"; /* set error flag*/
      set OI0CM005.SY1STNBR cursor, modified, bold;
      set OI0CM005.SY2CLRID modified, bold;
      set OI0CM005.XDMCD modified, bold;
      set OI0CM005.XGPCD modified, bold;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OI0C    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OI0CSBE ";
      TA1REC.TA1LOCAT[3] = "IO0560  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OI0CM005";
      TA1REC.TA1DBASE = "SYCREC  ";
      TA1REC.TA1TBLVU = "VCOLOR02";
      TA1REC.TA1TBLKE = SYCREC.SYCKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end


end // end OI0CSB2

// field edit control routine
Function OI0CSBA()



       /* ******************************************************/
       /* *  this statement group controls the field editing  **/
       /* *                                                   **/
       /* *    This routine edits the fields backward so that **/
       /* *  the last message displayed is for the top most   **/
       /* *  error on the map. All bad fields will be high-   **/
       /* *  lighted.                                         **/
       /* *                                                   **/
       /* * note: to keep from reediting already edited fields**/
       /* *       the logic goes as folows:                   **/
       /* *                                                   **/
       /* *  if field is modified                             **/
       /* *    edit field                                     **/
       /* *  else                                             **/
       /* *    if field already has values in select record   **/
       /* *      skip edit, go on                             **/
       /* *    else                                           **/
       /* *      edit field.                                  **/
       /* *                                                   **/
       /* ******************************************************/




   /* *****TCS INCLUDE 07/29/98 BEGIN***********************/
  if (OI0CM005.KUIPRDID > " "
   && OI0CM005.SY1STNBR > " ")
    OI0CW01.OI0CWERR = "Y";
    converseLib.validationFailed(971);
    set OI0CM005.SY1STNBR cursor;
    exit stack;
  end
   /* *****TCS INCLUDE 07/29/98 END*************************/

       /* first edit the customer number. if bad reset all mdt's*/
       /* and reconverse map.*/
  if (OI0CM005.KUCCOID > 0)
    OI0CSBS(); /* edit customer number*/
    if (OI0CW01.OI0CWERR == "Y") /* if error*/
      return;
    else
      set OI0CM005.KUCCOID initialAttributes;
      set OI0CM005.OI0CMSTR initialAttributes;
      set OI0CM005.XNXCD initialAttributes;
    end
  else
    converseLib.validationFailed(33);
    OI0CW01.OI0CWERR = "Y";
    set OI0CM005.KUCCOID cursor, modified, bold;
    return;
  end



       /* edit order total units*/

  if (OI0CM005.OP1OTUNT[1] is modified
   || OI0CM005.OP1OTUNT[2] is modified)
    OI0CSBB(); /* edit total units*/
  else
    if (OI0CW02.OP1OTUNT[2] > 0) /* already edited once*/
       /* next sentence*/
    else
      OI0CSBB(); /* edit total units*/
    end
  end




       /* edit order value*/

  if (OI0CM005.OP1OVALU[1] is modified
   || OI0CM005.OP1OVALU[2] is modified)
    OI0CSBD(); /* edit order value*/
  else
    if (OI0CW02.OP1OVALU[2] > 0)
       /* next sentence*/
    else
      OI0CSBD(); /* edit order value*/
    end
  end



       /* edit nike style/color*/

  if (OI0CM005.SY1STNBR is modified
   || OI0CM005.SY2CLRID is modified
   || OI0CM005.XDMCD is modified)
    OI0CSBE(); /* edit nike style/color/dim*/
  else
    if (OI0CW02.SY2CLRID[2] > " ") /* style/color/dim already edited*/
       /* next sentence*/
    else
      OI0CSBE(); /* edit nike style/color/dim*/
    end
  end

       /* edit customer style id*/

  if (OI0CM005.KUIPRDID is modified)
    /* *********TCS INCLUDE BEGIN  07-2-98  ******/
    OI0CSBC(); /* edit customer product id*/
  else
    if (OI0CW02.KUIPRDID[2] > " ")
       /* next sentence*/
    else
      OI0CSBC();
      /* *********TCS INCLUDE END    07-2-98 *************/
    end
  end

       /* edit ship with order number*/

  if (OI0CM005.OP1SWORD is modified)
    OI0CSBF(); /* edit ship with order number*/
  else
    if (OI0CW02.OP1SWORD[2] > 0)
       /* next sentence*/
    else
      OI0CSBF(); /* edit ship with order number*/
    end
  end


       /* edit warehouse code*/

  if (OI0CM005.XWHCD is modified)
    OI0CSBG(); /* edit warehouse code*/
  else
    if (OI0CW02.XWHCD[2] > " ")
       /* next sentence*/
    else
      OI0CSBG(); /* edit warehouse code*/
    end
  end



       /* edit bulk order id*/

  if (OI0CM005.OP1BLKID is modified)
    OI0CSBH(); /* edit bulk order number*/
  else
    if (OI0CW02.OP1BLKID[2] > 0)
       /* next sentence*/
    else
      OI0CSBH(); /* edit bulk order number*/
    end
  end



       /* edit sales office code*/

  if (OI0CM005.XSOCD is modified)
    OI0CSBI(); /* edit sales office code*/
  else
    if (OI0CW02.XSOCD[2] > " ")
       /* next sentence*/
    else
      OI0CSBI(); /* edit sales office code*/
    end
  end



       /* edit bulk order code*/

  if (OI0CM005.XBDCD is modified)
    OI0CSBJ(); /* edit bulk order code*/
  else
    if (OI0CW02.XBDCD[2] > " ")
       /* next sentence*/
    else
      OI0CSBJ(); /* edit bulk order code*/
    end
  end


       /* edit order xref number*/

  if (OI0CM005.OB-ORD-XREF-NBR is modified)
    OI0CS-ORD-XREF(); /* edit order xref number*/
  else
    if (OI0CW02.OB-ORD-XREF-NBR[2] > " ")
       /* next sentence*/
    else
      OI0CS-ORD-XREF(); /* edit order xref number*/
    end
  end



       /* edit credit status code*/

  if (OI0CM005.XCSCD is modified)
    OI0CSBK(); /* edit credit status*/
  else
    if (OI0CW02.XCSCD[2] > "00")
       /* next sentence*/
    else
      OI0CSBK(); /* edit credit status*/
    end
  end


       /* edit order status code*/

  if (OI0CM005.XOSCD is modified)
    OI0CSBL(); /* edit order status code*/
  else
    if (OI0CW02.XOSCD[2] > " ")
       /* next sentence*/
    else
      OI0CSBL(); /* edit order status code*/
    end
  end



       /* edit payment term code*/

  if (OI0CM005.XPTCD is modified)
    OI0CSBT(); /* edit payment term code*/
  else
    if (OI0CW02.XPTCD[2] > " ")
       /* next sentence*/
    else
      OI0CSBT(); /* edit payment term code*/
    end
  end



     /* edit callout date*/


  OI0CW01.OI0CWSDT = OI0CM005.OP1CALDT[1];
  OI0CW01.OI0CWEDT = OI0CM005.OP1CALDT[2];
  OI0CW01.OI0CWDTE = "N";
  OI0CSBM(); /* edit dates*/
  if (OI0CW01.OI0CWDTE == "Y")
    OI0CW01.OI0CWERR = "Y";
    OI0CW01.OI0CWEAR[12] = " ";
    set OI0CM005.OP1CALDT[1] cursor, modified, bold;
    set OI0CM005.OP1CALDT[2] cursor, modified, bold;
  else
    OI0CW02.OP1CALDT[1] = OI0CW01.OI0CWBSD;
    OI0CW02.OP1CALDT[2] = OI0CW01.OI0CWBED;
    set OI0CM005.OP1CALDT[1] initialAttributes;
    set OI0CM005.OP1CALDT[2] initialAttributes;
    if (OI0CW01.OI0CWBSD == 0
     && OI0CW01.OI0CWBED == 999999999)
      OI0CW01.OI0CWEAR[12] = " ";
    else
      OI0CW01.OI0CWEAR[12] = "Y";
    end
  end




     /* edit don't ship after date*/


  OI0CW01.OI0CWSDT = OI0CM005.OP1DSADT[1];
  OI0CW01.OI0CWEDT = OI0CM005.OP1DSADT[2];
  OI0CW01.OI0CWDTE = "N";
  OI0CSBM(); /* edit dates*/
  if (OI0CW01.OI0CWDTE == "Y")
    OI0CW01.OI0CWERR = "Y";
    OI0CW01.OI0CWEAR[11] = " ";
    set OI0CM005.OP1DSADT[1] cursor, modified, bold;
    set OI0CM005.OP1DSADT[2] cursor, modified, bold;
  else
    OI0CW02.OP1DSADT[1] = OI0CW01.OI0CWBSD;
    OI0CW02.OP1DSADT[2] = OI0CW01.OI0CWBED;
    set OI0CM005.OP1DSADT[1] initialAttributes;
    set OI0CM005.OP1DSADT[2] initialAttributes;
    if (OI0CW01.OI0CWBSD == 0
     && OI0CW01.OI0CWBED == 999999999)
      OI0CW01.OI0CWEAR[11] = " ";
    else
      OI0CW01.OI0CWEAR[11] = "Y";
    end
  end




     /* edit don't ship before date*/


  OI0CW01.OI0CWSDT = OI0CM005.OP1DSBDT[1];
  OI0CW01.OI0CWEDT = OI0CM005.OP1DSBDT[2];
  OI0CW01.OI0CWDTE = "N"; /* init error flag*/
  OI0CSBM(); /* edit dates*/
  if (OI0CW01.OI0CWDTE == "Y")
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    OI0CW01.OI0CWEAR[10] = " ";
    set OI0CM005.OP1DSBDT[1] cursor, modified, bold;
    set OI0CM005.OP1DSBDT[2] cursor, modified, bold;
  else
    OI0CW02.OP1DSBDT[1] = OI0CW01.OI0CWBSD;
    OI0CW02.OP1DSBDT[2] = OI0CW01.OI0CWBED;
    set OI0CM005.OP1DSBDT[1] initialAttributes;
    set OI0CM005.OP1DSBDT[2] initialAttributes;
    if (OI0CW01.OI0CWBSD == 0
     && OI0CW01.OI0CWBED == 999999999)
      OI0CW01.OI0CWEAR[10] = " ";
    else
      OI0CW01.OI0CWEAR[10] = "Y";
    end
  end




    /* edit customer need date*/


  OI0CW01.OI0CWSDT = OI0CM005.OP1CUNDT[1];
  OI0CW01.OI0CWEDT = OI0CM005.OP1CUNDT[2];
  OI0CW01.OI0CWDTE = "N"; /* init error flag*/
  OI0CSBM(); /* edit dates*/
  if (OI0CW01.OI0CWDTE == "Y")
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    OI0CW01.OI0CWEAR[9] = " ";
    set OI0CM005.OP1CUNDT[1] cursor, modified, bold;
    set OI0CM005.OP1CUNDT[2] cursor, modified, bold;
  else
    OI0CW02.OP1CUNDT[1] = OI0CW01.OI0CWBSD;
    OI0CW02.OP1CUNDT[2] = OI0CW01.OI0CWBED;
    set OI0CM005.OP1CUNDT[1] initialAttributes;
    set OI0CM005.OP1CUNDT[2] initialAttributes;
    if (OI0CW01.OI0CWBSD == 0
     && OI0CW01.OI0CWBED == 999999999)
      OI0CW01.OI0CWEAR[9] = " ";
    else
      OI0CW01.OI0CWEAR[9] = "Y";
    end
  end



       /* edit sales program id*/

  if (OI0CM005.SP1ID is modified)
    OI0CSBN(); /* edit sales program id*/
  else
    if (OI0CW02.SP1ID[2] > " ")
       /* next sentence*/
    else
      OI0CSBN(); /* edit sales program id*/
    end
  end



       /* edit order class code*/

  if (OI0CM005.XOCCD is modified)
    OI0CSBO(); /* edit order class code*/
  else
    if (OI0CW02.XOCCD[2] > " ")
       /* next sentence*/
    else
      OI0CSBO(); /* edit order class code*/
    end
  end



      /* edit order type*/

  if (OI0CM005.XOBCD is modified)
    OI0CSBP(); /* edit base order type code*/
  else
    if (OI0CW02.XOBCD[2] > " ")
       /* next sentence*/
    else
      OI0CSBP(); /* edit base order type code*/
    end
  end



       /* edit customer po number*/

  if (OI0CM005.OP1CUPO is modified)
    OI0CSBQ(); /* edit customer po number*/
  else
    if (OI0CW02.OP1CUPO[2] > " ")
       /* next sentence*/
    else
      OI0CSBQ(); /* edit customer po number*/
    end
  end

       /* edit division code*/

  if (OI0CM005.XDVCD is modified)
    OI0CSDV(); /* edit division code*/
  else
    if (OI0CW02.XDVCD[2] > " ")
       /* next sentence*/
    else
      OI0CSDV(); /* edit division code*/
    end
  end



       /* edit order gpc code*/

  if (OI0CM005.XGPCD is modified)
    OI0CSBR(); /* edit general product class*/
  else
    if (OI0CW02.XGPCD[2] > " ")
       /* next sentence*/
    else
      OI0CSBR(); /* edit general product class*/
    end
  end


     /* edit po date*/

  OI0CW01.OI0CWSDT = OI0CM005.OP1CPODT[1];
  OI0CW01.OI0CWEDT = OI0CM005.OP1CPODT[2];
  OI0CW01.OI0CWDTE = "N";
  OI0CSBM(); /* edit dates*/
  if (OI0CW01.OI0CWDTE == "Y")
    OI0CW01.OI0CWERR = "Y";
    OI0CW01.OI0CWEAR[19] = " ";
    set OI0CM005.OP1CPODT[1] cursor, modified, bold;
    set OI0CM005.OP1CPODT[2] cursor, modified, bold;
  else
    OI0CW02.OP1CPODT[1] = OI0CW01.OI0CWBSD;
    OI0CW02.OP1CPODT[2] = OI0CW01.OI0CWBED;
    set OI0CM005.OP1CPODT[1] initialAttributes;
    set OI0CM005.OP1CPODT[2] initialAttributes;
    if (OI0CW01.OI0CWBSD == 0
     && OI0CW01.OI0CWBED == 999999999)
      OI0CW01.OI0CWEAR[19] = " ";
    else
      OI0CW01.OI0CWEAR[19] = "Y";
    end
  end




         /* move the 'from' order number and the 'to' order*/
         /* number to the passed record*/

  if (OI0CM005.OI0CMFCO > 0) /* if cust order nbr entered*/
    OI0CW02.OP1CUOID[1] = OI0CM005.OI0CMFCO;
    OI0CW01.OP1CUOID = OI0CM005.OI0CMFCO;
  else
    OI0CW02.OP1CUOID[1] = 0;
  end

  OI0CW02.OP1NORID[1] = 0;
  set OI0CM005.OI0CMFCO initialAttributes;

  if (OI0CM005.OI0CMTCO > 0) /* if 'to' cust order id entered*/
    OI0CW02.OP1CUOID[2] = OI0CM005.OI0CMTCO;
  else
    OI0CW02.OP1CUOID[2] = 99999999;
  end

  OI0CW02.OP1NORID[2] = 99;
  set OI0CM005.OI0CMTCO initialAttributes;



   /* ************************************************************/
end // end OI0CSBA

// edit total units range
Function OI0CSBB()



         /* *****************************************************/
         /* * this statement group edits                       **/
         /* * the total units range select parameter           **/
         /* *****************************************************/


       /* check the 'from' total units*/

  if (OI0CM005.OP1OTUNT[1] is modified
   || OI0CM005.OP1OTUNT[1] > 0) /* tot units was entered*/
    set OI0CM005.OP1OTUNT[1] initialAttributes;
    OI0CW02.OP1OTUNT[1] = OI0CM005.OP1OTUNT[1]; /* move units*/
  else
    OI0CW02.OP1OTUNT[1] = 0; /* clear the field*/
  end


       /* check the 'to' total units*/

  if (OI0CM005.OP1OTUNT[2] is modified)
    set OI0CM005.OP1OTUNT[2] initialAttributes;
    if (OI0CM005.OP1OTUNT[2] > 0) /* tot units was entered*/
      OI0CW02.OP1OTUNT[2] = OI0CM005.OP1OTUNT[2];
    else
      OI0CW02.OP1OTUNT[2] = 999999999; /* move nines to end field*/
    end
  else
    OI0CW02.OP1OTUNT[2] = 999999999; /* move nines to end field*/
  end


       /* set the parameters indicator -- this indicator will*/
       /* decide how the select set to the order data base is*/
       /* going to be done*/

  if (OI0CW02.OP1OTUNT[1] == 0 /* if defaulted*/
   && OI0CW02.OP1OTUNT[2] == 999999999) /* if defaulted*/
    OI0CW01.OI0CWEAR[17] = " ";
  else
    OI0CW01.OI0CWEAR[17] = "Y";
  end



   /* ************************************************************/
end // end OI0CSBB

// edit cust style
Function OI0CSBC()


  if (OI0CM005.KUIPRDID == " ")
   /* **********TCS INCLUDE BEGIN 07-22-98*************/
    OI0CW02.KUIPRDID[1] = "               ";
    OI0CW02.KUIPRDID[2] = "999999999999999";
   /* **********TCS INCLUDE END   07-22-98*************/
    set OI0CM005.KUIPRDID initialAttributes;
    if (OI0CM005.SY1STNBR == " ")
      OI0CW02.SY1STNBR = " ";
    end
    return;
  end


    /* read customer style record with call to CU1710*/

  set WCU1710 empty;
  WCU1710.WCU1710-IN-CU-CUST-PROD-ID = OI0CM005.KUIPRDID;
  WCU1710.WCU1710-IN-CU-PROD-SZ-ID = " ";

   /* move dept code to key field*/

  if (OI0CM005.XNXCD > 0)
    WCU1710-XNX-DEPT-ID-XREF = OI0CM005.XNXCD;
  else
    WCU1710-XNX-DEPT-ID-XREF = 0;
  end
   /* *******tcs chnage *********************/

  WCU1710.WCU1710-INQUIRY-OPTION = 2; /* xref info w/ovrds*/
  WCU1710-IN-CU-CO-ID = OI0CM005.KUCCOID;
   /* *******TCS INCLUDE BEGIN 05/12/98******/
  WCU1710-CU-PROD-XREF-EDT = 99999999;
   /* *******TCS INCLUDE END   05/12/98******/

  WCU1710-RETURN-CODE = 99;

   /* get all the xref info for the item or size*/


  call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/

   /* check db2 return code*/

  if (WCU1710.WCU1710-RETURN-CODE == 0) /* check for good return code*/
   /* **********TCS INCLUDE BEGIN 07-22-98*************/
    OI0CW02.KUIPRDID[1] = OI0CM005.KUIPRDID;
    OI0CW02.KUIPRDID[2] = OI0CM005.KUIPRDID;
   /* **********TCS INCLUDE END    07-22-98*************/
    set OI0CM005.KUIPRDID initialAttributes;
  else
    if (WCU1710.WCU1710-RETURN-CODE == 1) /* check for not found*/
      converseLib.validationFailed(133);
      OI0CW01.OI0CWERR = "Y";
      set OI0CM005.KUIPRDID cursor, modified, bold;
      return;
    else
      TA1REC.TA1LOCAT[1] = "CU1710  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[2] = "OI0CSBC "; /* statement group*/
      TA1REC.TA1LOCAT[3] = "        ";
      TA1REC.TA1LOCAT[4] = "        ";
      TAEREC.TAEDESC1 = "BAD RETURN FROM CU1710 - RETURN CODE=";
      TAEREC.TAEDESC2 = WCU1710.WCU1710-RETURN-CODE;
      TA1REC.TA1TYPE = "APPL"; /* abend type*/
      TA1REC.TA1FUNC = "RETN"; /* abend func*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* synpoint rollback*/
      try
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      end /* abend module*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
    end
  end

    /* move the first occurance with style information*/

  SYCREC.SY1STNBR = WCU1710.SY-STY-NBR[1];
  SYCREC.SY2CLRID = WCU1710.SY-COLR-CD-ID[1];
  SYCREC.XGPCD = WCU1710.XGP-GPC-CD[1];
  SYCREC.XDMCD = WCU1710.XDM-DIM-CD[1];

  OI0CSB2(); /* read nike style/color record*/


end // end OI0CSBC

// edit order value range
Function OI0CSBD()



       /* *******************************************************/
       /* * this statement group edits the order value range   **/
       /* * select fields                                      **/
       /* *******************************************************/


       /* check the 'from' order value*/

  if (OI0CM005.OP1OVALU[1] is modified /* if something entered*/
   || OI0CM005.OP1OVALU[1] > 0)        /* value was entered*/
    set OI0CM005.OP1OVALU[1] initialAttributes;
    OI0CW02.OP1OVALU[1] = OI0CM005.OP1OVALU[1];
  else
    OI0CW02.OP1OVALU[1] = 0; /* if not zero the field*/
  end


       /* check the 'to' order value*/

  if (OI0CM005.OP1OVALU[2] is modified)
    set OI0CM005.OP1OVALU[2] initialAttributes;
    if (OI0CM005.OP1OVALU[2] > 0) /* value was entered*/
      OI0CW02.OP1OVALU[2] = OI0CM005.OP1OVALU[2]; /* move value*/
    else
      OI0CW02.OP1OVALU[2] = 9999999999999.99; /* set field to highest value*/
    end
  else
    OI0CW02.OP1OVALU[2] = 9999999999999.99; /* set field to highest val*/
  end


       /* set the parameters indicator*/

  if (OI0CW02.OP1OVALU[1] == 0 /* if defaulted*/
   && OI0CW02.OP1OVALU[2] == 9999999999999.99) /* if defaulted*/
    OI0CW01.OI0CWEAR[16] = " ";
  else
    OI0CW01.OI0CWEAR[16] = "Y";
  end



   /* ************************************************************/
end // end OI0CSBD

// validate nike style and color
Function OI0CSBE()


               /* this routine validates the nike style number*/
                                 /* and color*/

  set OI0CM005.SY1STNBR initialAttributes;
  set OI0CM005.SY2CLRID initialAttributes;
  set OI0CM005.XDMCD initialAttributes;
  set OI0CM005.XGPCD initialAttributes;


  if (OI0CM005.XDMCD == " ")
    OI0CM005.XDMCD = "00";
  else
    if (OI0CM005.XDMCD in XDMTBL.XDMCD)
       /* next sentence*/
    else
      converseLib.validationFailed(234); /* dimension not valid*/
      OI0CW01.OI0CWERR = "Y"; /* set error flag*/
      set OI0CM005.XDMCD cursor, modified, bold;
      return;
    end
  end

   /* if entered a dimension, also need style*/

  if (OI0CM005.XDMCD != "00" /* if got a dimension*/
   && OI0CM005.SY1STNBR == " ") /* and no style*/
    converseLib.validationFailed(131); /* need a sytle/color*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.SY1STNBR cursor, modified, bold;
    return;
  end

    /* if entered a color must enter a style*/

  if (OI0CM005.SY2CLRID > " " /* if got a color*/
   && OI0CM005.SY1STNBR == " ") /* and not a product number*/
    converseLib.validationFailed(136); /* cannot enter color alone*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.SY1STNBR cursor, modified, bold;
    return;
  end

   /* if entered style and dim but no color, default color 00*/

  if (OI0CM005.XDMCD != "00"   /* if got a dimension*/
   && OI0CM005.SY2CLRID == " " /* and no color*/
   && OI0CM005.SY1STNBR > " ") /* but have style*/
    OI0CM005.SY2CLRID = "00"; /* move in default color*/
  end



    /* read the appropriate style record for data present*/

  if (OI0CM005.SY1STNBR > " ") /* NIKE STYLE FIELD IS ENTERED*/
    if (OI0CM005.SY2CLRID > " ")
      SYCREC.SY1STNBR = OI0CM005.SY1STNBR;
      SYCREC.SY2CLRID = OI0CM005.SY2CLRID;
      SYCREC.XDMCD = OI0CM005.XDMCD;
      SYCREC.XGPCD = OI0CM005.XGPCD;
      OI0CSB2(); /* read nike style/color record*/
    else
      SY1REC.SY1STNBR = OI0CM005.SY1STNBR;
      SY1REC.XGPCD = OI0CM005.XGPCD;
      OI0CSB1(); /* read nike style record*/
    end
  else
    if (OI0CM005.KUIPRDID == " ")
      OI0CW02.SY1STNBR = " "; /* clear style number*/
    end
  end



   /* ************************************************************/
end // end OI0CSBE

// edit ship with order number
Function OI0CSBF()


        /* validate ship with order number*/


  if (OI0CM005.OP1SWORD > 0)
    OI0CW01.OI0CWEAR[15] = "Y";
                                   /* set flag to show field is used in key*/
    OI0CW02.OP1SWORD[1] = OI0CM005.OP1SWORD;
    OI0CW02.OP1SWORD[2] = OI0CM005.OP1SWORD;
  else
    OI0CW01.OI0CWEAR[15] = " ";
    OI0CW02.OP1SWORD[1] = 0;
    OI0CW02.OP1SWORD[2] = 999999999;
  end

  set OI0CM005.OP1SWORD initialAttributes;



   /* *************************************************************/
end // end OI0CSBF

// edit warehouse code
Function OI0CSBG()


      /* *********************************************************/
      /* * this statement group edits the warehouse field.      **/
      /* *********************************************************/


  if (OI0CM005.XWHCD > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[7] = " ";
    OI0CW02.XWHCD[1] = " ";
    OI0CW02.XWHCD[2] = "99";
    set OI0CM005.XWHCD initialAttributes;
    return;
  end



  if (OI0CM005.XWHCD in XWHTBL.XWHCD) /* valid code?*/
    OI0CW01.OI0CWEAR[7] = "Y";
                                   /* set flag to show field is used in key*/
    OI0CW02.XWHCD[1] = OI0CM005.XWHCD;
    OI0CW02.XWHCD[2] = OI0CM005.XWHCD;
    set OI0CM005.XWHCD initialAttributes;
  else
    converseLib.validationFailed(78); /* invalid warehouse*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.XWHCD cursor, modified, bold;
  end


end // end OI0CSBG

// edit bulk order number
Function OI0CSBH()


      /* *********************************************************/
      /* * this statement group edits the bulk order number field*/
      /* *********************************************************/



  if (OI0CM005.OP1BLKID > 0)
    OI0CW01.OI0CWEAR[14] = "Y";
                                   /* set flag to show field is used in key*/
    OI0CW02.OP1BLKID[1] = OI0CM005.OP1BLKID;
    OI0CW02.OP1BLKID[2] = OI0CM005.OP1BLKID;
  else
    OI0CW01.OI0CWEAR[14] = " ";
    OI0CW02.OP1BLKID[1] = 0;
    OI0CW02.OP1BLKID[2] = 999999999;
  end

  set OI0CM005.OP1BLKID initialAttributes;


   /* ************************************************************/
end // end OI0CSBH

// edit sales office code
Function OI0CSBI()


      /* *********************************************************/
      /* * this statement group edits the sales office code field*/
      /* *********************************************************/


  if (OI0CM005.XSOCD > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[6] = " ";
    OI0CW02.XSOCD[1] = " ";
    OI0CW02.XSOCD[2] = "99";
    set OI0CM005.XSOCD initialAttributes;
    return;
  end



  if (OI0CM005.XSOCD in XSOTBL.XSOCD) /* valid code?*/
    OI0CW02.XSOCD[1] = OI0CM005.XSOCD;
    OI0CW02.XSOCD[2] = OI0CM005.XSOCD;
    OI0CW01.OI0CWEAR[6] = "Y";
                                   /* set flag to show field is used in key*/
    set OI0CM005.XSOCD initialAttributes;
  else
    converseLib.validationFailed(109); /* sales office invalid*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.XSOCD cursor, modified, bold;
  end


end // end OI0CSBI

// edit bulk order code
Function OI0CSBJ()



      /* *********************************************************/
      /* * this statement group edits the bulk order flag field **/
      /* *********************************************************/



  if (OI0CM005.XBDCD > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[13] = " ";
                                   /* set flag to show field is used in key*/
    OI0CW02.XBDCD[1] = " ";
    OI0CW02.XBDCD[2] = "9";
    set OI0CM005.XBDCD initialAttributes;
    return;
  end



  if (OI0CM005.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OI0CW02.XBDCD[1] = OI0CM005.XBDCD;
    OI0CW02.XBDCD[2] = OI0CM005.XBDCD;
    OI0CW01.OI0CWEAR[13] = "Y";
    set OI0CM005.XBDCD initialAttributes;
  else
    converseLib.validationFailed(381); /* bulk draw code invalid*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.XBDCD cursor, modified, bold;
  end


end // end OI0CSBJ

// edit credit status
Function OI0CSBK()


      /* *********************************************************/
      /* * this statement group edits the credit status field.  **/
      /* *********************************************************/



  if (OI0CM005.XCSCD > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[5] = " ";
    OI0CW02.XCSCD[1] = "00";
    OI0CW02.XCSCD[2] = "99";
    set OI0CM005.XCSCD initialAttributes;
    return;
  end



  if (OI0CM005.XCSCD in XCSTBL.XCSCD) /* valid code?*/
    OI0CW02.XCSCD[1] = OI0CM005.XCSCD;
    OI0CW02.XCSCD[2] = OI0CM005.XCSCD;
    OI0CW01.OI0CWEAR[5] = "Y";
                                   /* set flag to show field is used in key*/
    set OI0CM005.XCSCD initialAttributes;
  else
    converseLib.validationFailed(108);
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.XCSCD cursor, modified, bold;
  end


end // end OI0CSBK

// edit order status
Function OI0CSBL()


      /* *********************************************************/
      /* * this statement group edits the order status field.   **/
      /* *********************************************************/


  if (OI0CM005.XOSCD > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[4] = " ";
    OI0CW02.XOSCD[1] = " ";
    OI0CW02.XOSCD[2] = "99";
    set OI0CM005.XOSCD initialAttributes;
    return;
  end



  if (OI0CM005.XOSCD in XOSTBL.XOSCD) /* valid code?*/
    OI0CW02.XOSCD[1] = OI0CM005.XOSCD;
    OI0CW02.XOSCD[2] = OI0CM005.XOSCD;
    OI0CW01.OI0CWEAR[4] = "Y";
                                   /* set flag to show field is used in key*/
    set OI0CM005.XOSCD initialAttributes;
  else
    converseLib.validationFailed(100); /* invalid order status*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.XOSCD cursor, modified, bold;
  end


end // end OI0CSBL

// generic date editing routine
Function OI0CSBM()



            /* ***************************************************/
            /* * generic date editing routine for order inquiry **/
            /* *                                                **/
            /* *                                                **/
            /* * this routine checks the following conditions:  **/
            /* *                                                **/
            /* * 1. whether the dates are in the proper mmddyy  **/
            /* *    format -- uses ta0040                       **/
            /* * 2. if only start date given, move 9's to the   **/
            /* *    end date.                                   **/
            /* * 3. if only end date given, move zeroes to the  **/
            /* *    start date.                                 **/
            /* * 4. start date cannot be greater then end date. **/
            /* * 5. end date cannot be less then a year from    **/
            /* *    todays date.                                **/
            /* ***************************************************/
            /* *  note: when a date is defaulted, items 2 and 3 **/
            /* *        the newly created date is displayed on  **/
            /* *        the map.                                **/
            /* ***************************************************/




            /* test condition 1*/



  if (OI0CWSDT > 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG"; /* functional request*/
    TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
    TA2REC.TA2GRGAN = OI0CW01.OI0CWSDT; /* set date arguement*/
    call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
    if (TA2REC.TA2RTNCD != 0) /* check for invalid date*/
      converseLib.validationFailed(107); /* invalid date format*/
      OI0CW01.OI0CWDTE = "Y";
      return;
    end
  end



  if (OI0CWEDT > 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG"; /* functional request*/
    TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
    TA2REC.TA2GRGAN = OI0CW01.OI0CWEDT; /* set date arguement*/
    call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
    if (TA2REC.TA2RTNCD != 0) /* check for invalid date*/
      converseLib.validationFailed(107); /* invalid date format*/
      OI0CW01.OI0CWDTE = "Y"; /* set error flag*/
      return;
    end
  end



  OI0CSFD(); /* format dates*/


           /* test condition 2*/



  if (OI0CW01.OI0CWBED == 0) /* if dont have end date*/
    OI0CW01.OI0CWBED = 999999999; /* move nines to end*/
  end







           /* test condition 3*/



  if (OI0CW01.OI0CWBSD == 0 /* if dont have a start date*/
   && OI0CW01.OI0CWBED > 0) /* and have end date*/
    OI0CW01.OI0CWBSD = 0; /* move zeroes to start date*/
  end








           /* test condition 4*/





  if (OI0CW01.OI0CWBSD > 0 /* if have a start date*/
   && OI0CW01.OI0CWBED > 0) /* and have end date*/
    if (OI0CW01.OI0CWBSD > OI0CW01.OI0CWBED) /* start gt end*/
      converseLib.validationFailed(106); /* begin date can't be after end date*/
      OI0CW01.OI0CWDTE = "Y"; /* set error flag*/
      return;
    end
  end







           /* test condition 5*/



   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF OI0CW01.OI0CWBED LT 999999999;/* if end date not defaulted*/
   /* OI0CW01.OI0CWCYY = OI0CW01.OI0CWCYY - 1;/* sub 1 year from todays date*/
   /* MOVE OI0CW01.OI0CWCUR TO OI0CW01.OI0CWBCD;/* change numeric to binary*/
   /* IF OI0CW01.OI0CWBED < OI0CW01.OI0CWBCD;/* formay is yyyymmdd*/
   /* MOVE 22 TO EZEMNO;           /* invalid date format*/
   /* MOVE 'Y' TO OI0CW01.OI0CWDTE;/* set error flag*/
   /* END;*/
   /* END;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/

   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (OI0CW01.OI0CWBED < 999999999) /* if end date not defaulted*/
    OI0CW01.OI0CWCCY = OI0CW01.OI0CWCCY - 1; /* sub 1 year from todays date*/
    OI0CW01.OI0CWBCD = OI0CW01.OI0CWCUR; /* change numeric to binary*/
    if (OI0CW01.OI0CWBED < OI0CW01.OI0CWBCD) /* formay is yyyymmdd*/
      converseLib.validationFailed(22); /* invalid date format*/
      OI0CW01.OI0CWDTE = "Y"; /* set error flag*/
    end
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/







end // end OI0CSBM

// edit sales program
Function OI0CSBN()


      /* *********************************************************/
      /* * this statement group edits the sales program field.  **/
      /* *********************************************************/


  if (OI0CM005.SP1ID > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[3] = " ";
    OI0CW02.SP1ID[1] = " ";
    OI0CW02.SP1ID[2] = "9999";
    set OI0CM005.SP1ID initialAttributes;
    return;
  end


  SP1REC.SP1ID = OI0CM005.SP1ID; /* load key*/

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/



      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 "; /* abend type*/
    TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
    TA1REC.TA1PGMNM = "OI0C    "; /* pgm name*/
    TA1REC.TA1MAP = "OI0CM005"; /* current map name*/
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSPGM001"; /* table view*/
    TA1REC.TA1TBLKE = SP1REC.SP1KEY; /* key value*/
    TA1REC.TA1LOCAT[1] = "OI0C005 "; /* process name*/
    TA1REC.TA1LOCAT[2] = "OI0CSDK "; /* statement group*/
    TA1REC.TA1LOCAT[3] = "        "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0070  "; /* i/o mod name*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call abend formatter*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end



      /* if not found or not active or not sales then error*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(24); /* invalid sales program id*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.SP1ID cursor, modified, bold;
  else
    OI0CW02.SP1ID[1] = OI0CM005.SP1ID;
    OI0CW02.SP1ID[2] = OI0CM005.SP1ID;
    OI0CW01.OI0CWEAR[3] = "Y";
                                   /* set flag to show field is used in key*/
    set OI0CM005.SP1ID initialAttributes;
  end




end // end OI0CSBN

// edit order class
Function OI0CSBO()


      /* *********************************************************/
      /* * this statement group edits the order class field.    **/
      /* *********************************************************/


  if (OI0CM005.XOCCD > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[2] = " ";
    OI0CW02.XOCCD[1] = " ";
    OI0CW02.XOCCD[2] = "99";
    set OI0CM005.XOCCD initialAttributes;
    return;
  end



  if (OI0CM005.XOCCD in XOCTBL.XOCCD) /* valid code?*/
    set OI0CM005.XOCCD initialAttributes;
    OI0CW02.XOCCD[1] = OI0CM005.XOCCD;
    OI0CW02.XOCCD[2] = OI0CM005.XOCCD;
    OI0CW01.OI0CWEAR[2] = "Y";
                                   /* set flag to show field is used in key*/
  else
    converseLib.validationFailed(20); /* invalid order class*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.XOCCD cursor, modified, bold;
  end


end // end OI0CSBO

// edit base order type
Function OI0CSBP()


      /* *********************************************************/
      /* * this statement group edits the base order type field **/
      /* *********************************************************/


  if (OI0CM005.XOBCD > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[1] = " ";
    OI0CW02.XOBCD[1] = " ";
    OI0CW02.XOBCD[2] = "99";
    set OI0CM005.XOBCD initialAttributes;
    return;
  end



  if (OI0CM005.XOBCD in XOBTBL.XOBCD) /* valid code?*/
    set OI0CM005.XOBCD initialAttributes;
    OI0CW02.XOBCD[1] = OI0CM005.XOBCD;
    OI0CW02.XOBCD[2] = OI0CM005.XOBCD;
    OI0CW01.OI0CWEAR[1] = "Y";
                                   /* set flag to show field is used in key*/
  else
    converseLib.validationFailed(17); /* invalid order type code*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.XOBCD cursor, modified, bold;
  end


end // end OI0CSBP

// edit purchase order number
Function OI0CSBQ()


               /* validate the purchase order number field*/

  if (OI0CM005.OP1CUPO > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[8] = " ";
    OI0CW02.OP1CUPO[1] = " ";
    OI0CW02.OP1CUPO[2] = "9999999999999999999999999";
    set OI0CM005.OP1CUPO initialAttributes;
    return;
  end


  OI0CW02.OP1CUPO[1] = OI0CM005.OP1CUPO;


      /* need to fill unused part of po number with 9's*/

  OI0CW01.OI0CWSB3 = 25;

  OI0CW01.OI0CWCPO = OI0CM005.OP1CUPO;

  while (OI0CW01.OI0CWSB3 >= 1
   && OI0CW01.OI0CWPOE[OI0CWSB3] == " ")
    OI0CW01.OI0CWPOE[OI0CWSB3] = "9";
    OI0CW01.OI0CWSB3 = OI0CW01.OI0CWSB3 - 1;
  end

  OI0CW02.OP1CUPO[2] = OI0CW01.OI0CWCPO;
  OI0CW01.OI0CWEAR[8] = "Y";
                                   /* set flag to show field is used in key*/
  set OI0CM005.OP1CUPO initialAttributes;



   /* ***********************************************************/
end // end OI0CSBQ

// edit gpc code
Function OI0CSBR()



      /* *********************************************************/
      /* * this statement group edits the gpc code field.       **/
      /* *********************************************************/


       /* if the nike style was entered, the gpc code is required*/


  if (OI0CM005.SY1STNBR > " " /* style was entered*/
   || OI0CM005.KUIPRDID > " ") /* or cust style was entered*/
    if (OI0CM005.XGPCD == " ") /* gpc code was not entered*/
      converseLib.validationFailed(137); /* need gpc to select by style*/
      OI0CW01.OI0CWERR = "Y"; /* set error flag*/
      set OI0CM005.XGPCD cursor, modified, bold;
      return;
    end
  end



  if (OI0CM005.XGPCD > " ")
     /* next sentence*/
  else
    OI0CW02.XGPCD[1] = " ";
    OI0CW02.XGPCD[2] = "99";
    set OI0CM005.XGPCD initialAttributes;
    return;
  end


  if (OI0CM005.XGPCD in XGPTBL.XGPCD) /* valid code?*/
    set OI0CM005.XGPCD initialAttributes;
    OI0CW02.XGPCD[1] = OI0CM005.XGPCD;
    OI0CW02.XGPCD[2] = OI0CM005.XGPCD;
  else
    converseLib.validationFailed(138); /* invalid gpc code*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.XGPCD cursor, modified, bold;
  end



   /* ***********************************************************/
end // end OI0CSBR

// edit customer number
Function OI0CSBS()
   /* TT#4547        03/03/00     NKATHI*/
   /* The code for unique row select(Call IO module IO0280 with IO-TASK*/
   /* 'S ') is changed to cursor logic(Call IO module with IO-TASK 'SS')*/
   /* for avoiding the error message 'CUSTOMER IS NOT VALID'.*/


             /* validate the customer company/store/dept*/


  set KUCREC empty;
  set SQLCA empty;
  KUCREC.KUCCOID = OI0CM005.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    set OI0CM005.KUCCOID initialAttributes;
    OI0CW02.KUCCOID = KUCREC.KUCCOID;
    OI0CM010.OI0CMCUS = KUCREC.KUCCONM; /* move cust name to screen*/
    OI0CM015.OI0CMCUS = KUCREC.KUCCONM; /* move cust name to screen*/
    OI0CW02.KUMSTRID[1] = 0;
    OI0CW02.KUMSTRID[2] = 9999;
    OI0CW02.XNXCD[1] = 0;
    OI0CW02.XNXCD[2] = 9999;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(33);
      OI0CW01.OI0CWERR = "Y";
      set OI0CM005.KUCCOID cursor, modified, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OI0C    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OI0CSBS ";
      TA1REC.TA1LOCAT[3] = "IO0240  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OI0CM005";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1TBLKE = OI0CM005.KUCCOID;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " "; /* on error clear ws*/
      XSPF4();
      exit program;
    end
  end



  if (OI0CM005.OI0CMSTR > " "
   && OI0CM005.XNXCD == 0)
    set KUMREC empty;
    set SQLCA empty;
    KUMREC.KUCCOID = OI0CM005.KUCCOID;
    OI0CW01.OI0CWST1 = OI0CM005.OI0CMSTR;
    KUMREC.KUMSTRID = OI0CW01.OI0CWSTN;

    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      set OI0CM005.KUCCOID initialAttributes;
      set OI0CM005.OI0CMSTR initialAttributes;
      OI0CW02.KUCCOID = KUMREC.KUCCOID;
      OI0CW02.KUMSTRID[1] = KUMREC.KUMSTRID;
      OI0CW02.KUMSTRID[2] = KUMREC.KUMSTRID;
      OI0CW02.XNXCD[1] = 0;
      OI0CW02.XNXCD[2] = 9999;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(33);
        OI0CW01.OI0CWERR = "Y";
        set OI0CM005.KUCCOID modified, bold;
        set OI0CM005.OI0CMSTR cursor, modified, bold;
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OI0C    ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "OI0CSBS ";
        TA1REC.TA1LOCAT[3] = "IO0340  ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1MAP = "OI0CM005";
        TA1REC.TA1DBASE = "DCUST   ";
        TA1REC.TA1TBLVU = "VSTORE01";
        TA1REC.TA1TBLKE = OI0CM005.OI0CMSTR;
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        COMMAREA.CAUSERA = " "; /* on error clear ws*/
        XSPF4();
        exit program;
      end
    end
  end



  if (OI0CM005.OI0CMSTR == " "
   && OI0CM005.XNXCD > 0)
    if (OI0CM005.XNXCD in XNXTBL.XNXCD)
      set OI0CM005.KUCCOID initialAttributes;
      set OI0CM005.OI0CMSTR initialAttributes;
      set OI0CM005.XNXCD initialAttributes;
      OI0CW02.KUCCOID = OI0CM005.KUCCOID;
      OI0CW02.KUMSTRID[1] = 0;
      OI0CW02.KUMSTRID[2] = 9999;
      OI0CW02.XNXCD[1] = OI0CM005.XNXCD;
      OI0CW02.XNXCD[2] = OI0CM005.XNXCD;
    else
      converseLib.validationFailed(33);
      OI0CW01.OI0CWERR = "Y";
      set OI0CM005.KUCCOID modified, bold;
      set OI0CM005.OI0CMSTR cursor, modified, bold;
      set OI0CM005.XNXCD cursor, modified, bold;
    end
  end



  if (OI0CM005.OI0CMSTR > " "
   && OI0CM005.XNXCD > 0)
    set KUNREC empty;
    set SQLCA empty;
    KUNREC.KUCCOID = OI0CM005.KUCCOID;
    OI0CW01.OI0CWST1 = OI0CM005.OI0CMSTR;
    KUNREC.KUMSTRID = OI0CW01.OI0CWSTN;
    KUNREC.XNXCD = OI0CM005.XNXCD;
    /* ***** TT#4547 WIPRO CHANGE BEGIN ******/

    /* CALL IO0280 'S ',SQLCA,KUNREC (NOMAPS,NONCSP;*/
    /*  */
    KUNREC.XGPCD = "**";

    OI0CS-CUST-CURS(); /* For declare/fetch/close CUST cursor*/

    /* IF SQLCA.SQLCODE EQ 0;*/
    /* SET OI0CM005.KUCCOID DEFINED;*/
    /* SET OI0CM005.OI0CMSTR DEFINED;*/
    /* SET OI0CM005.XNXCD DEFINED;*/
    /* MOVE KUNREC.KUCCOID TO OI0CW02.KUCCOID;*/
    /* MOVE KUNREC.KUMSTRID TO OI0CW02.KUMSTRID(1);*/
    /* MOVE KUNREC.KUMSTRID TO OI0CW02.KUMSTRID(2);*/
    /* MOVE KUNREC.XNXCD TO OI0CW02.XNXCD(1);*/
    /* MOVE KUNREC.XNXCD TO OI0CW02.XNXCD(2);*/
    /* ELSE;*/
    /* IF SQLCA.SQLCODE EQ 100;*/
    /* MOVE 33 TO EZEMNO;*/
    /* MOVE 'Y' TO OI0CW01.OI0CWERR;*/
    /* SET OI0CM005.KUCCOID MODIFIED,BRIGHT;*/
    /* SET OI0CM005.OI0CMSTR CURSOR,MODIFIED,BRIGHT;*/
    /* SET OI0CM005.XNXCD CURSOR,MODIFIED,BRIGHT;*/
    /* EZERTN;*/
    /* ELSE;*/
    /* MOVE 'DB2 ' TO TA1REC.TA1TYPE;*/
    /* MOVE 'RETN' TO TA1REC.TA1FUNC;*/
    /* MOVE 'OI0C    ' TO TA1REC.TA1PGMNM;*/
    /* MOVE 'S       ' TO TA1REC.TA1LOCAT(1);*/
    /* MOVE 'OI0CSBS ' TO TA1REC.TA1LOCAT(2);*/
    /* MOVE 'IO0280  ' TO TA1REC.TA1LOCAT(3);*/
    /* MOVE '        ' TO TA1REC.TA1LOCAT(4);*/
    /* MOVE 'OI0CM005' TO TA1REC.TA1MAP;*/
    /* MOVE 'DCUST   ' TO TA1REC.TA1DBASE;*/
    /* MOVE 'VCUST001' TO TA1REC.TA1TBLVU;*/
    /* MOVE OI0CM005.XNXCD TO TA1REC.TA1TBLKE;*/
    /* CALL TA0020 TA1REC,SQLCA (NONCSP;*/
    /* MOVE ' ' TO COMMAREA.CAUSERA;/* on error clear ws*/
    /* XSPF4;*/
    /* EZECLOS;*/
    /* END;*/
    /* END;*/
    /* ***** TT#4547 WIPRO CHANGE END   ******/
  end


end // end OI0CSBS

// edit payment term
Function OI0CSBT()


      /* *********************************************************/
      /* * this statement group edits the payment term field.   **/
      /* *********************************************************/


  if (OI0CM005.XPTCD > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[18] = " ";
    OI0CW02.XPTCD[1] = " ";
    OI0CW02.XPTCD[2] = "99";
    set OI0CM005.XPTCD initialAttributes;
    return;
  end


  sysVar.arrayIndex = 1;

  if (OI0CM005.XPTCD in XPTTBL.XPTCD) /* valid code?*/
    OI0CW02.XPTCD[1] = OI0CM005.XPTCD;
    OI0CW02.XPTCD[2] = OI0CM005.XPTCD;
    OI0CW01.OI0CWEAR[18] = "Y";
                                   /* set flag to show field is used in key*/
    set OI0CM005.XPTCD initialAttributes;
  else
    converseLib.validationFailed(549); /* invalid payment term code*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.XPTCD cursor, modified, bold;
  end


end // end OI0CSBT

// get country code abrev
Function OI0CSBU()


      /* *********************************************************/
      /* * this statement group gets the country code abrev.    **/
      /* *********************************************************/

   /* CANADA 08/10/95*/

  sysVar.arrayIndex = 1;

  if (KUCREC.XCTCD in XCTTBL.XCTCD /* in country table*/
   && XCTTBL.XXXSTAT == "A")       /* and active status*/
    OI0CM010.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex]; /* format cntry abrev*/
    if (KUCREC.XCTCD == "CANA") /* / * CANA*/
      if (XCTTBL.XCT-ISO-CTRY-CD[sysVar.arrayIndex] in ZCCTBL.XCT-ISO-CTRY-CD) /* CANA*/
        OI0CM015.ZFC-CRCY-CD = ZCCTBL.ZFC-CRCY-CD[sysVar.arrayIndex]; /* CANA*/
      end /* l*/
    end /* l*/
  else
    OI0CM010.XCTABRV = " "; /* format cntry abrev*/
  end


end // end OI0CSBU

// date routine
Function OI0CSDT()


          /* move today's date to the screen*/

  OI0CM005.OI0CMRVN = "03"; /* rearranged fields on map 7-8-87*/
  OI0CM010.OI0CMRVN = "02"; /* oi0c rewrite - limit orders to 100*/
  OI0CM015.OI0CMRVN = "02"; /* oi0c rewrite - limit orders to 100*/
  OI0CM005.OI0CMDTE = VGVar.currentShortGregorianDate; /* put todays date in map field*/
  OI0CM010.OI0CMDTE = VGVar.currentShortGregorianDate; /* put todays date in map field*/
  OI0CM015.OI0CMDTE = VGVar.currentShortGregorianDate; /* put todays date in map field*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE EZEDTE TO OI0CW01.OI0CWCDT;  /* save todays date in work storage*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/

   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  OI0CW01.OI0CWCDT = VGVar.currentGregorianDate; /* save todays date in work storage*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/



  if (OI0CW01.OI0CWCYY > 56) /* determine century*/
    OI0CW01.OI0CWCCC = 19; /* set current date century*/
    OI0CW01.OI0CWCEN = 19; /* set hold date century*/
  else
    OI0CW01.OI0CWCCC = 20;
    OI0CW01.OI0CWCEN = 20;
  end


end // end OI0CSDT

// edit division code
Function OI0CSDV()



  if (OI0CM005.XDVCD > " ")
     /* next sentence*/
  else
    OI0CW01.OI0CWEAR[20] = " ";
    OI0CW02.XDVCD[1] = " ";
    OI0CW02.XDVCD[2] = "99";
    set OI0CM005.XDVCD initialAttributes;
    return;
  end



  if (OI0CM005.XDVCD in XDVTBL.XDVCD) /* valid code?*/
    set OI0CM005.XDVCD initialAttributes;
    OI0CW02.XDVCD[1] = OI0CM005.XDVCD;
    OI0CW02.XDVCD[2] = OI0CM005.XDVCD;
    OI0CW01.OI0CWEAR[20] = "Y";
                                   /* set flag to show field is used in key*/
  else
    converseLib.validationFailed(490); /* invalid division code*/
    OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    set OI0CM005.XDVCD cursor, modified, bold;
  end


end // end OI0CSDV

// format date to include century
Function OI0CSFD()


  OI0CW01.OI0CWHDT = 0;

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF OI0CW01.OI0CWSDT GT 0;*/
   /* MOVE OI0CW01.OI0CWCEN TO OI0CW01.OI0CWHCC;/* reformat mmddyy to*/
   /* mOVE OI0CW01.OI0CWSMM TO OI0CW01.OI0CWHMM;*/
   /* MOVE OI0CW01.OI0CWSDD TO OI0CW01.OI0CWHDD;*/
   /* MOVE OI0CW01.OI0CWSYY TO OI0CW01.OI0CWHYY;*/
   /* END;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/

   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (OI0CW01.OI0CWSDT > 0)
    if (OI0CW01.OI0CWSYY > 60)
      OI0CW01.OI0CWHCC = 19; /**/
    else
      OI0CW01.OI0CWHCC = 20;
    end
    OI0CW01.OI0CWHMM = OI0CW01.OI0CWSMM;
    OI0CW01.OI0CWHDD = OI0CW01.OI0CWSDD;
    OI0CW01.OI0CWHYY = OI0CW01.OI0CWSYY;
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

  OI0CW01.OI0CWBSD = OI0CW01.OI0CWHDT; /* change numeric to binary*/


  OI0CW01.OI0CWHDT = 0;

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF OI0CW01.OI0CWEDT GT 0;*/
   /* MOVE OI0CW01.OI0CWCEN TO OI0CW01.OI0CWHCC;/* reformat mmddyy to*/
   /* mOVE OI0CW01.OI0CWEMM TO OI0CW01.OI0CWHMM;*/
   /* MOVE OI0CW01.OI0CWEDD TO OI0CW01.OI0CWHDD;*/
   /* MOVE OI0CW01.OI0CWEYY TO OI0CW01.OI0CWHYY;*/
   /* END;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/

   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (OI0CW01.OI0CWEDT > 0)
    if (OI0CW01.OI0CWEYY > 60)
      OI0CW01.OI0CWHCC = 19; /**/
    else
      OI0CW01.OI0CWHCC = 20;
    end
    OI0CW01.OI0CWHMM = OI0CW01.OI0CWEMM;
    OI0CW01.OI0CWHDD = OI0CW01.OI0CWEDD;
    OI0CW01.OI0CWHYY = OI0CW01.OI0CWEYY;
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

  OI0CW01.OI0CWBED = OI0CW01.OI0CWHDT; /* change numeric to binary*/


end // end OI0CSFD

// list orders selected in call
Function OI0CSLO()


  OI0CSXA(); /* purge temporary storage before loading called data*/


       /* ******************************************************/
       /* * this statement groups calls op1080.  it keeps track*/
       /* * if requests are made for more than 100 orders and*/
       /* * reports this later via the transient record*/
       /* ******************************************************/


  OI0CW02.OI0CWTSK = OI0CW01.OI0CWSEL; /* select set*/

  call "OP1080" (OI0CW02, SQLCA, OI0CW03) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* database busy, try again*/
    OI0CSXA(); /* purge TS*/
    converseLib.validationFailed(10);
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "OI0C    ";
    TA1REC.TA1LOCAT[1] = OI0CW02.OI0CWTSK;
    TA1REC.TA1LOCAT[2] = "OI0CSLO ";
    TA1REC.TA1LOCAT[3] = "OP1080  ";
    TA1REC.TA1LOCAT[4] = "-911    ";
    TA1REC.TA1MAP = "OI0CM005";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VORHDR01";
    OI0CW01.OI0CWKID = OI0CM005.KUCCOID;
    TA1REC.TA1TBLKE = OI0CW01.OI0CWKID;
    OI0CW01.OI0CWERR = "Y";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      OI0CSXA(); /* purge TS*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OI0C    ";
      TA1REC.TA1LOCAT[1] = OI0CW02.OI0CWTSK;
      TA1REC.TA1LOCAT[2] = "OI0CSLO ";
      TA1REC.TA1LOCAT[3] = "OP1080  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VORHDR01";
      OI0CW01.OI0CWKID = OI0CM005.KUCCOID;
      TA1REC.TA1TBLKE = OI0CW01.OI0CWKID;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " "; /* on error clear ws*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* close cursor & release database resources*/
      XSPF4();
      exit program;
    end
  end


       /* reset order count and reset the screen subscript and*/
       /* the internal table subscript*/

  set OI0CW04 empty; /* clear internal table*/
  set OI0CW03 empty;
  OI0CW01.OI0CWOCT = 0; /* init order count*/
  OI0CW01.OI0CWSB1 = 1; /* init screen subscript*/
  OI0CW01.OI0CWSB2 = 1; /* init table subscript*/
  OI0CW01.OI0CWTRS = "N"; /* reset the transient record flag*/


  OI0CW02.OI0CWTSK = OI0CW01.OI0CWNXT; /* select next*/

  while (SQLCA.VAGen_SQLCODE == 0)
    set SQLCA empty;
    call "OP1080" (OI0CW02, SQLCA, OI0CW03) {isNoRefresh = yes, isExternal = yes}; /* fetch next order*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (OI0CW03.XOSCD != "IP") /* skip 'in process' orders*/
        OI0CW01.OI0CWOCT = OI0CW01.OI0CWOCT + 1; /* increment ord count*/
        OI0CSSO(); /* store ord in screen and table*/
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    if (OI0CW01.OI0CWOCT <= 0) /* returned set is empty*/
      converseLib.validationFailed(212); /* no orders found - please check parameters*/
      OI0CW01.OI0CWERR = "Y"; /* set error flag*/
    else /* add any partially formatted last page to the queue*/
      if (OI0CW01.OI0CWSB1 > 1)
        OI0CSXB(); /* add page to temp storage*/
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database busy, try again*/
      OI0CSXA(); /* purge t.s.*/
      converseLib.validationFailed(10);
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "OI0C    ";
      TA1REC.TA1LOCAT[1] = OI0CW02.OI0CWTSK;
      TA1REC.TA1LOCAT[2] = "OI0CSLO ";
      TA1REC.TA1LOCAT[3] = "OP1080  ";
      TA1REC.TA1LOCAT[4] = "-911    ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VORHDR01";
      OI0CW01.OI0CWKID = OI0CM005.KUCCOID;
      TA1REC.TA1TBLKE = OI0CW01.OI0CWKID;
      OI0CW01.OI0CWERR = "Y";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    else
      OI0CSXA(); /* purge t.s.*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OI0C    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OI0CSLO ";
      TA1REC.TA1LOCAT[3] = "OP1080 C";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VORHDR01";
      OI0CW01.OI0CWKID = OI0CM005.KUCCOID;
      TA1REC.TA1TBLKE = OI0CW01.OI0CWKID;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " "; /* on error clear ws*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* close cursor & release database resources*/
      XSPF4();
      exit program;
    end
  end

  OI0CW02.OI0CWTSK = OI0CW01.OI0CWCLS; /* close set*/
  call "OP1080" (OI0CW02, SQLCA, OI0CW03) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* release database resources*/

  if (OI0CW01.OI0CWOCT <= 100)
     /* next sentence*/
  else
    OI0CW01.OI0CWMAX = "Y"; /* maximum limit*/
    converseLib.validationFailed(211); /* more than 100 order selected--*/
                        /* reselect or press enter to view orders*/
    OI0CW01.OI0CWTRS = "Y"; /* write transient record*/
  end

       /* move order count to screens*/

  OI0CM010.OI0CMORC = OI0CW01.OI0CWOCT; /* ord count on the left scr*/
  OI0CM015.OI0CMORC = OI0CW01.OI0CWOCT; /* ord count on the right scr*/



   /* ************************************************************/
end // end OI0CSLO

// move oi0cw03 to working storag
Function OI0CSSO()


   /* *************************************************************/
   /* *   move the returned data from op1080 pgm using oi0cw03   **/
   /* *   to temp storage using oi0cw04 record.                  **/
   /* *************************************************************/


  OI0CW04.OI0CWOID[OI0CWSB1] = OI0CW03.OP1CUOID;
  OI0CW04.OI0CWNID[OI0CWSB1] = OI0CW03.OP1NORID;
  OI0CW04.XSOCD[OI0CWSB1] = OI0CW03.XSOCD;
  OI0CW04.OI0CWCID[OI0CWSB1] = OI0CW03.KUCCOID;
  OI0CW04.OI0CWCST[OI0CWSB1] = OI0CW03.KUMSTRID;
  OI0CW04.OI0CWXNX[OI0CWSB1] = OI0CW03.XNXCD;
  OI0CW04.OP1CUPO[OI0CWSB1] = OI0CW03.OP1CUPO;
  OI0CW04.XOBCD[OI0CWSB1] = OI0CW03.XOBCD;
  OI0CW04.XOCCD[OI0CWSB1] = OI0CW03.XOCCD;
  OI0CW04.SP1ID[OI0CWSB1] = OI0CW03.SP1ID;
  OI0CW04.XWHCD[OI0CWSB1] = OI0CW03.XWHCD;
  OI0CW04.OI0CWNDT[OI0CWSB1] = OI0CW03.OP1CUNDT;
  OI0CW04.XOSCD[OI0CWSB1] = OI0CW03.XOSCD;
  OI0CW04.XDSCD[OI0CWSB1] = OI0CW03.XDSCD;
  OI0CW04.XBDCD[OI0CWSB1] = OI0CW03.XBDCD;
  OI0CW04.OI0CWDRW[OI0CWSB1] = OI0CW03.OP1NDRAW;
  OI0CW04.OI0CWBDT[OI0CWSB1] = OI0CW03.OP1DSBDT;
  OI0CW04.OI0CWADT[OI0CWSB1] = OI0CW03.OP1DSADT;
  OI0CW04.XCSCD[OI0CWSB1] = OI0CW03.XCSCD;
  OI0CW04.OI0CWVAL[OI0CWSB1] = OI0CW03.OP1OVALU;
  OI0CW04.OI0CWTUN[OI0CWSB1] = OI0CW03.OP1OTUNT;
  OI0CW04.OP11TMSF[OI0CWSB1] = OI0CW03.OP11TMSF;
  OI0CW04.OI0CWPOD[OI0CWSB1] = OI0CW03.OP1CPODT;

  OI0CW01.OI0CWSB1 = OI0CW01.OI0CWSB1 + 1; /* increment table subscript*/

  if (OI0CW01.OI0CWSB1 > 17) /* page is full*/
    OI0CSXB(); /* add page to temporary storage*/
  end


   /* ************************************************************/
end // end OI0CSSO

// reformat date to mmddyy
Function OI0CSSP()



  OI0CW01.OI0CWYYW = OI0CW01.OI0CWWYY;
  OI0CW01.OI0CWMMW = OI0CW01.OI0CWWMM;
  OI0CW01.OI0CWDDW = OI0CW01.OI0CWWDD;



end // end OI0CSSP

// determine op1080 task path
Function OI0CSTK()


       /* ********************************************************/
       /* * this statement checks the style id, the parameters  **/
       /* * indicator array and the customer id to select the   **/
       /* * right codes to pass to op1080 to read the data base **/
       /* ********************************************************/


       /* if only customer company/store/dept were entered*/
          /* select path #1*/

       /* if customer company/store/dept + gpc code entered*/
       /* or customer company/store/dept + any parameters*/
           /* select path #2*/

       /* if customer comp/store/dept + gpc code + style entered*/
           /* select path #3*/

       /* if cust comp/store/dept + gpc code + style + any parms*/
           /* select path #4*/

    /* **************TCS INCLUDE BEGIN 7-22-98 ************************/
       /* if customer comp/store/dept + gpc + style + cu-prod-id entered*/
           /* select path #5*/

       /* if cust comp/store/dept + gpc + style + cu-prod-id + any parms*/
           /* select path #6*/


  if (OI0CW02.KUIPRDID[1] != OI0CW02.KUIPRDID[2])
    /* **************TCS INCLUDE END   7-22-98 ************************/
    if (OI0CW02.SY1STNBR == " ") /* style was not entered*/
      if (OI0CW01.OI0CWCOO == " ") /* no other parametes are known*/
        if (OI0CW02.XGPCD[1] != OI0CW02.XGPCD[2]) /* and gpc was not entered*/
          OI0CW01.OI0CWSEL = "S1"; /* path 1 - only cust is known*/
          OI0CW01.OI0CWNXT = "N1"; /* path 1*/
          OI0CW01.OI0CWCLS = "C1"; /* path 1*/
        else /* gpc code entered- path 2*/
          OI0CW01.OI0CWSEL = "S2"; /* path 2 - cust + gpc code*/
          OI0CW01.OI0CWNXT = "N2"; /* path 2*/
          OI0CW01.OI0CWCLS = "C2"; /* path 2*/
        end
      else /* parameters + cust nbr + no style*/
        OI0CW01.OI0CWSEL = "S2"; /* path 2 - cust + parameters*/
        OI0CW01.OI0CWNXT = "N2"; /* path 2 - cust + parameters*/
        OI0CW01.OI0CWCLS = "C2"; /* path 2 - cust + parameters*/
      end
    else /* cust + style + gpc entered*/
      if (OI0CW01.OI0CWCOO == " ") /* no other parameters*/
        OI0CW01.OI0CWSEL = "S3"; /* path 3*/
        OI0CW01.OI0CWNXT = "N3"; /* path 3*/
        OI0CW01.OI0CWCLS = "C3"; /* path 3*/
      else /* cust + style + gpc + parameters*/
        OI0CW01.OI0CWSEL = "S4"; /* path 4*/
        OI0CW01.OI0CWNXT = "N4"; /* path 4*/
        OI0CW01.OI0CWCLS = "C4"; /* path 4*/
      end
    end
  else
     /* **********TCS INCLUDE END 07-22-98 ***********/
    if (OI0CW02.SY1STNBR != " "
     && OI0CW02.XGPCD[1] == OI0CW02.XGPCD[2]) /* and gpc was not entered*/
      if (OI0CW01.OI0CWCOO == " ") /* no other parametes are known*/
        OI0CW01.OI0CWSEL = "S5"; /* path 5*/
        OI0CW01.OI0CWNXT = "N5"; /* path 5*/
        OI0CW01.OI0CWCLS = "C5"; /* path 5*/
      else
        OI0CW01.OI0CWSEL = "S6"; /* path 6*/
        OI0CW01.OI0CWNXT = "N6"; /* path 6*/
        OI0CW01.OI0CWCLS = "C6"; /* path 6*/
      end
    end
  end
     /* **********TCS INCLUDE END 07-22-98 ***********/

   /* ************************************************************/
end // end OI0CSTK

// purge temporary storage
Function OI0CSXA()



  OI0CW01.OI0CWTSP = 0; /* reset current page nbr*/
  OI0CW01.TA5TSQIX = 0; /* reset highest page nbr*/
  OI0CW01.OI0CW-TSREC-CNT = 0; /* reset TS rec count*/

  TA5REC.TA5APPID = "OI0C"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  call "TA0050" (OI0CW04, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0)
    /* next sentence*/
  else
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = "OI0CSXA";
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "OI0CM005"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end
end // end OI0CSXA

// add page to temporary storage
Function OI0CSXB()



  OI0CW04.OI0CWLEN = 2414; /* temp storage length*/
  TA5REC.TA5APPID = "OI0C"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/

  call "TA0050" (OI0CW04, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0)
    OI0CW01.TA5TSQIX = TA5REC.TA5TSQIX; /* highest page number*/
    OI0CW01.OI0CWSB1 = 1; /* reset display line number*/
    OI0CW01.OI0CW-TSREC-CNT = OI0CW01.OI0CW-TSREC-CNT + 1;
    set OI0CW04 empty; /* clear temp storage record*/
  else
    converseLib.validationFailed(10); /* database busy, please try again*/
    OI0CW01.OI0CWERR = "Y"; /* turn on error flag*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    TA1REC.TA1PGMNM = "OI0CSXB";
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "OI0CM005"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end

   /* Check to see if we've written too many TS records*/

  if (OI0CW01.OI0CW-TSREC-CNT > 1100)
    OI0CSXA(); /* purge TS*/
   /* replace abend routine with warning message  06/02/97*/
    COMMAREA.CAMSG = "TEMP STORAGE OVERFLOW, LIMIT YOUR SELECT CRITERIA";
    sysVar.transferName = COMMAREA.CACURRAP;
    transfer to program sysVar.transferName passing COMMAREA;
      /* MOVE 'APPL' TO TA1REC.TA1TYPE;*/
      /* MOVE 'RTRN' TO TA1REC.TA1FUNC;*/
      /* MOVE 'OI0CSXB' TO TA1REC.TA1PGMNM;*/
      /* MOVE 'TOO MANY TS RECS WRITTEN' TO TA1REC.TA1LOC;*/
      /* MOVE 'OI0CM005' TO TA1REC.TA1MAP;*/
      /* MOVE TA5REC.TA5DATA TO SQLCA.SQLCAREC;*/
      /* ;*/
      /* CALL TA0020 TA1REC,SQLCA (NOMAPS,NONCSP;  /* error diag routine*/
      /* XSPF4;*/
      /* EZECLOS;*/
  end

end // end OI0CSXB

// read temporary storage page
Function OI0CSXC()

  set OI0CW04 empty;

  OI0CW04.OI0CWLEN = 2414; /* temp storage length*/
  TA5REC.TA5APPID = "OI0C"; /* appl identification*/
  TA5REC.TA5TSQIX = OI0CW01.OI0CWTSP; /* page number*/
  TA5REC.TA5FNCCD = "R"; /* function code*/

  call "TA0050" (OI0CW04, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0)
     /* next sentence*/
  else
    converseLib.validationFailed(10); /* database busy, please try again*/
    OI0CW01.OI0CWERR = "Y"; /* turn on error flag*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1PGMNM = "OI0CSXC";
    TA1REC.TA1LOC = "READ PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "OI0CM010"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end
end // end OI0CSXC

// update temp storage
Function OI0CSXD()



  OI0CW04.OI0CWLEN = 2414; /* temp storage length*/
  TA5REC.TA5APPID = "OI0C"; /* appl identification*/
  TA5REC.TA5TSQIX = OI0CW01.OI0CWTSP; /* page number*/
  TA5REC.TA5FNCCD = "U"; /* function code*/

  call "TA0050" (OI0CW04, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0)
    /* next sentence*/
  else
    converseLib.validationFailed(10);
    OI0CW01.OI0CWERR = "Y"; /* turn on error flag*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1PGMNM = "OI0CSXD";
    TA1REC.TA1LOC = "UPDATE TEMP STORAGE VIEWED LINE";
    TA1REC.TA1MAP = "OI0CM010"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end
end // end OI0CSXD

//*** RECORD=OI0CW01 ****
// customer order inquiry common working storage area. These
// work areas are designated for internal application use only.
// *
// *   8/30/96   dlegg     Add oi0cw-tsrec-cnt. Use this field
// *                       to control maximum number of TS recs
// *                       to be written to try to prevent TS
// *                       shortages.
// ***********************
Record OI0CW01 type basicRecord
  10 OI0CWTSP OI0CWTSP ; 
  10 OI0CWSSP OI0CWSSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 OI0CWXUP OI0CWXUP ; 
  10 OI0CWSB1 OI0CWSB1 ; 
  10 OI0CWSB2 OI0CWSB2 ; 
  10 OI0CWSB3 OI0CWSB3 ; 
  10 OI0CWSB4 OI0CWSB4 ; 
  10 OI0CWFIX OI0CWFIX ; 
  10 OI0CWBIX OI0CWBIX ; 
  10 OI0CWINX OI0CWINX ; 
  10 OI0CWBLK OI0CWBLK ; 
  10 OI0CWQTY OI0CWQTY ; 
  10 OI0CWVAL OI0CWVAL ; 
  10 OI0CWBSD OI0CWBSD ; 
  10 OI0CWBED OI0CWBED ; 
  10 OI0CWBCD OI0CWBCD ; 
  10 OI0CWSDT OI0CWSDT ; 
    15 OI0CWSMM OI0CWSMM ; 
    15 OI0CWSDD OI0CWSDD ; 
    15 OI0CWSYY OI0CWSYY ; 
  10 OI0CWEDT OI0CWEDT ; 
    15 OI0CWEMM OI0CWEMM ; 
    15 OI0CWEDD OI0CWEDD ; 
    15 OI0CWEYY OI0CWEYY ; 
  10 OI0CWHDT OI0CWHDT ; 
    15 OI0CWHCC OI0CWHCC ; 
    15 OI0CWHYY OI0CWHYY ; 
    15 OI0CWHMM OI0CWHMM ; 
    15 OI0CWHDD OI0CWHDD ; 
  10 OI0CWCUR OI0CWCUR ; 
    15 OI0CWCDT OI0CWCDT ; 
      20 OI0CWCCY OI0CWCCY ; 
        25 OI0CWCCC OI0CWCCC ; 
        25 OI0CWCYY OI0CWCYY ; 
      20 OI0CWCMM OI0CWCMM ; 
      20 OI0CWCDD OI0CWCDD ; 
  10 OI0CWCEN OI0CWCEN ; 
  10 OI0CWERR OI0CWERR ; 
  10 OI0CWDTE OI0CWDTE ; 
  10 OI0CWSEL OI0CWSEL ; 
  10 OI0CWNXT OI0CWNXT ; 
  10 OI0CWCLS OI0CWCLS ; 
  10 OI0CWCPO OI0CWCPO ; 
    15 OI0CWPOE OI0CWPOE [25] ; 
  10 OI0CWCOO OI0CWCOO ; 
    15 OI0CWEAR OI0CWEAR [26] ; 
  10 OI0CWOCT OI0CWOCT ; 
  10 OI0CW-TSREC-CNT OI0CW-TSREC-CNT ; 
  10 OI0CWORC OI0CWORC ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 OI0CWORD OI0CWORD ; 
    15 * char(7) ; 
    15 OP1PARTN OP1PARTN ; 
  10 OI0CWMAX OI0CWMAX ; 
  10 OI0CWCUS OI0CWCUS ; 
    15 OI0CWSTR OI0CWSTR ; 
    15 OI0CWPT1 OI0CWPT1 ; 
    15 OI0CWDEP OI0CWDEP ; 
  10 OI0CWFOR OI0CWFOR ; 
    15 OI0CWFCO OI0CWFCO ; 
    15 OI0CWPT2 OI0CWPT2 ; 
    15 OI0CWFNO OI0CWFNO ; 
  10 OI0CWDAT OI0CWDAT ; 
  10 OI0CWTRS OI0CWTRS ; 
  10 OI0CWDT1 OI0CWDT1 ; 
    15 OI0CWWCC OI0CWWCC ; 
    15 OI0CWWYY OI0CWWYY ; 
    15 OI0CWWMM OI0CWWMM ; 
    15 OI0CWWDD OI0CWWDD ; 
  10 OI0CWDT2 OI0CWDT2 ; 
    15 OI0CWMMW OI0CWMMW ; 
    15 OI0CWDDW OI0CWDDW ; 
    15 OI0CWYYW OI0CWYYW ; 
  10 OI0CWST1 OI0CWST1 ; 
    15 OI0CWSTN OI0CWSTN ; 
  10 OI0CWKID OI0CWKID ; 
end // end OI0CW01

//*** RECORD=OI0CW02 ****
// customer order inquiry common working storage area. These
// work areas are designated pass to the subroutine op1080 as
// keys for the search of the data base.
// 
// CHANGES:
// 
// 02/01/93  dlegg   Log #938. Add 2 occurences of ob-ord-xref-
//                   nbr.
// 02/28/94  scantr  db changes: resize order value
// ***********************
Record OI0CW02 type basicRecord
  15 OI0CWTSK OI0CWTSK ; 
  15 KUCCOID KUCCOID ; 
  15 KUMSTRID KUMSTRID [2] ; 
  15 XNXCD XNXCD [2] ; 
  15 OP1CUOID OP1CUOID [2] ; 
  15 OP1NORID OP1NORID [2] ; 
  15 XGPCD XGPCD [2] ; 
  15 SY1STNBR SY1STNBR ; 
  15 SY2CLRID SY2CLRID [2] ; 
  15 XDMCD XDMCD [2] ; 
  15 KUIPRDID KUIPRDID [2] ; 
  15 XOBCD XOBCD [2] ; 
  15 XOCCD XOCCD [2] ; 
  15 SP1ID SP1ID [2] ; 
  15 XOSCD XOSCD [2] ; 
  15 XCSCD XCSCD [2] ; 
  15 XDVCD XDVCD [2] ; 
  15 XSOCD XSOCD [2] ; 
  15 XWHCD XWHCD [2] ; 
  15 OP1CUPO OP1CUPO [2] ; 
  15 OP1CUNDT OP1CUNDT [2] ; 
  15 OP1DSBDT OP1DSBDT [2] ; 
  15 OP1DSADT OP1DSADT [2] ; 
  15 OP1CALDT OP1CALDT [2] ; 
  15 XBDCD XBDCD [2] ; 
  15 OP1BLKID OP1BLKID [2] ; 
  15 OP1SWORD OP1SWORD [2] ; 
  15 OP1OVALU OP1OVALU [2] ; 
  15 OP1OTUNT OP1OTUNT [2] ; 
  15 XPTCD XPTCD [2] ; 
  15 OP1CPODT OP1CPODT [2] ; 
  15 OB-ORD-XREF-NBR OB-ORD-XREF-NBR [2] ; 
end // end OI0CW02

//*** RECORD=OI0CW03 ****
// customer order inquiry common working storage area. These
// work areas are designated for return data from the call to
// the subroutine op1080.
// 
// CHANGES
// 
// 02/01/93  dlegg  Log #938. Add ob-ord-xref-nbr to bottom of
//                  record.
// 02/28/94  scantr db changes: resize order value
// ***********************
Record OI0CW03 type basicRecord
  15 OP1CUOID OP1CUOID ; 
  15 OP1NORID OP1NORID ; 
  15 XSOCD XSOCD ; 
  15 KUCCOID KUCCOID ; 
  15 KUMSTRID KUMSTRID ; 
  15 XNXCD XNXCD ; 
  15 OP1CUPO OP1CUPO ; 
  15 XOBCD XOBCD ; 
  15 XOCCD XOCCD ; 
  15 SP1ID SP1ID ; 
  15 XWHCD XWHCD ; 
  15 OP1CUNDT OP1CUNDT ; 
  15 XOSCD XOSCD ; 
  15 XDSCD XDSCD ; 
  15 XBDCD XBDCD ; 
  15 OP1BLKID OP1BLKID ; 
  15 OP1NDRAW OP1NDRAW ; 
  15 OP1DSBDT OP1DSBDT ; 
  15 OP1DSADT OP1DSADT ; 
  15 XCSCD XCSCD ; 
  15 OP1OVALU OP1OVALU ; 
  15 OP1OTUNT OP1OTUNT ; 
  15 OP11TMSF OP11TMSF ; 
  15 OP1CPODT OP1CPODT ; 
  15 OB-ORD-XREF-NBR OB-ORD-XREF-NBR ; 
end // end OI0CW03

Record OI0CW04 type basicRecord
  10 OI0CWLEN OI0CWLEN ; 
  10 OI0CWTS OI0CWTS [17] ; 
    15 OI0CWSLC OI0CWSLC ; 
    15 OI0CWOID OI0CWOID ; 
    15 OI0CWNID OI0CWNID ; 
    15 XSOCD XSOCD ; 
    15 OI0CWCID OI0CWCID ; 
    15 OI0CWCST OI0CWCST ; 
    15 OI0CWXNX OI0CWXNX ; 
    15 OP1CUPO OP1CUPO ; 
    15 XOBCD XOBCD ; 
    15 XOCCD XOCCD ; 
    15 SP1ID SP1ID ; 
    15 XWHCD XWHCD ; 
    15 OI0CWNDT OI0CWNDT ; 
    15 XOSCD XOSCD ; 
    15 XDSCD XDSCD ; 
    15 XBDCD XBDCD ; 
    15 OI0CWBID OI0CWBID ; 
    15 OI0CWDRW OI0CWDRW ; 
    15 OI0CWBDT OI0CWBDT ; 
    15 OI0CWADT OI0CWADT ; 
    15 XCSCD XCSCD ; 
    15 OI0CWVAL OI0CWVAL ; 
    15 OI0CWTUN OI0CWTUN ; 
    15 OP11TMSF OP11TMSF ; 
    15 OI0CWPOD OI0CWPOD ; 
end // end OI0CW04

//*** RECORD=OI0CW05 ****
//  this is a transient data queue record. this record will be
// written to a file in the transient queue when a selected
//  customer has more than 100 orders.
// ***********************
Record OI0CW05 type serialRecord  {
  fileName = "CSMT"
  }
  5 OI0CWGRP OI0CWGRP ; 
    10 OI0CWPRG OI0CWPRG ; 
    10 * char(3) ; 
    10 OI0CWRDT OI0CWRDT ; 
    10 * char(3) ; 
    10 OI0CWRTM OI0CWRTM ; 
    10 * char(3) ; 
    10 OI0CWUSR OI0CWUSR ; 
    10 * char(3) ; 
    10 OI0CWMSG OI0CWMSG ; 
end // end OI0CW05

// ob-ord-xref-nbr
DataItem OB-ORD-XREF-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage rec count
DataItem OI0CW-TSREC-CNT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-dnt-ship-aft-dt
DataItem OI0CWADT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// binary current date yyyymmdd
DataItem OI0CWBCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-dnt-ship-bfr-dt
DataItem OI0CWBDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// binary end date yyyymmdd
DataItem OI0CWBED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-bulk-ord-id
DataItem OI0CWBID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page backward index
DataItem OI0CWBIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk order id number
DataItem OI0CWBLK num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// binary start date yyyymmdd
DataItem OI0CWBSD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current century
DataItem OI0CWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current century
DataItem OI0CWCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current days
DataItem OI0CWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date system format
DataItem OI0CWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// generic century
DataItem OI0CWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem OI0CWCID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// op1080 close scan
DataItem OI0CWCLS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current month
DataItem OI0CWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company only in key indicator
DataItem OI0CWCOO char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws customer po #, for edits
DataItem OI0CWCPO char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust store
DataItem OI0CWCST num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date db2 format
DataItem OI0CWCUR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted cust #
DataItem OI0CWCUS char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current year
DataItem OI0CWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric date
DataItem OI0CWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem OI0CWDDW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// department id
DataItem OI0CWDEP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nbr-draw-ord
DataItem OI0CWDRW num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyymmdd group
DataItem OI0CWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmddyy group
DataItem OI0CWDT2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date edit error flag
DataItem OI0CWDTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit array senses other keys
DataItem OI0CWEAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end day
DataItem OI0CWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end date for edits
DataItem OI0CWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end month
DataItem OI0CWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// internal error flag
DataItem OI0CWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year
DataItem OI0CWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust order id
DataItem OI0CWFCO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page forward index
DataItem OI0CWFIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nike order id
DataItem OI0CWFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted order number
DataItem OI0CWFOR char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OI0CWGRP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work century
DataItem OI0CWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work days
DataItem OI0CWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem OI0CWHDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem OI0CWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem OI0CWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of lines displayed
DataItem OI0CWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted cust company
DataItem OI0CWKID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage length
DataItem OI0CWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max orders returned flag
DataItem OI0CWMAX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem OI0CWMMW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max orders returned warning
DataItem OI0CWMSG char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-need-dt
DataItem OI0CWNDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem OI0CWNID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op1080 select next
DataItem OI0CWNXT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order count-- for select set
DataItem OI0CWOCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem OI0CWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order count -- to pass
DataItem OI0CWORC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order number
DataItem OI0CWORD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-pur-ord-dt
DataItem OI0CWPOD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer po elements
DataItem OI0CWPOE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// program id -- 'oi0c'
DataItem OI0CWPRG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// decimal point #1
DataItem OI0CWPT1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// decimal point #2
DataItem OI0CWPT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ord total units - numeric
DataItem OI0CWQTY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current run date
DataItem OI0CWRDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current run time
DataItem OI0CWRTM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subcript 1
DataItem OI0CWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subcript 2
DataItem OI0CWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subcript 3
DataItem OI0CWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subcript 4
DataItem OI0CWSB4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start day
DataItem OI0CWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start date for edits
DataItem OI0CWSDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op1080 select set
DataItem OI0CWSEL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 's' to select order
DataItem OI0CWSLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start month
DataItem OI0CWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved storage page
DataItem OI0CWSSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OI0CWST1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OI0CWSTN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust store
DataItem OI0CWSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start year
DataItem OI0CWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// transient data flag
DataItem OI0CWTRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array group level
DataItem OI0CWTS char(142)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subrtn op1080 task path
DataItem OI0CWTSK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage page
DataItem OI0CWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-ord-tot-units
DataItem OI0CWTUN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user id
DataItem OI0CWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total value of order
DataItem OI0CWVAL num(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OI0CWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem OI0CWWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem OI0CWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem OI0CWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nike dept code
DataItem OI0CWXNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temp storage update flag
DataItem OI0CWXUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yy
DataItem OI0CWYYW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

