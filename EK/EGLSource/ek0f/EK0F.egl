package ek0f;
import as1.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ek.common.*;
import iv.common.*;
import ku.common.*;
import op.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=EK0F ****
// ************************************************************
// 
//       EK0F - Claims Resolver Information Screen
//       -----------------------------------------
// 
// General program explanation and notes:
// 
// This program allows the user to perform add, change and
// delete rows in selected Claims Table.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//    Date     Userid    Description
// ----------  ------  ----------------------------------------
// 04-23-1998  HMACAL  Application creation
// 06-16-1998  HMACAL  Regenerated to pick up changes to
//                     EK0EW00
// *********************
Program EK0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CLAREC CLAREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  EK0EW00 EK0EW00; // record
  EK0FW00 EK0FW00; // record
  EK0FW01 EK0FW01; // record
  EK0FW02 EK0FW02; // record
  EKWREC EKWREC; // record
  ERRSQLCA ERRSQLCA; // record
  KUYREC KUYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCLESC01 VCLESC01; // record
  VCLESX01 VCLESX01; // record
  VCLRES01 VCLRES01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use CL00ENU {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use EK0FM.EK0FM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    EK0F-0000: EK0F-0000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set EK0FM001 initial; /* M001 input/output*/
    EK0FW00.EK0FW-SCR-LINES = 10;
    EK0FW00.EK0FW-MODE-IND = "I"; /* Default to Inquiry*/
    set EK0FW01 empty; /* Working storage*/
    set EK0FW02 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EK0F0000; /* Converse the main process*/
    EK0F0000: EK0F0000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EK0F0000; /* Converse the main process*/


  end // end main
end // end EK0F

// Application initialization
Function EK0F-0000()
   /* -------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* -------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* -------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* -------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* -------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* -------------------------------------------------------------*/

  set EKWREC empty;
  set EK0EW00 empty;
  set EK0FW00 empty;

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS ||  /* EK system*/
  COMMAREA.CAFRMSYS == "KL")                     /* Claims System*/

    CLWREC.CLWGROUP = COMMAREA.CAUSERA; /* Restore work record*/
    EKWREC.EKWREC-GROUP = COMMAREA.CA-USER-WORKAREA-2K-B;
    EK0EW00.EK0EW-GROUP = EKWREC.EKW-EK0E-AREA;

    if (EKWREC.EKWREC-GROUP == " ") /* If no data passed*/
      set EKWREC empty;
    end

  else
    set EKWREC empty; /* Initialize work record*/

  end

  if (EKWREC.EKWREC-GROUP == " ") /* If no data passed*/
    EK0FW00.EK0FW-S-CL-CLM-NBR = 0;
  else
    EK0FW00.EK0FW-S-CL-CLM-NBR = EK0EW00.EK0EW-SV-CL-CLM-NBR;
  end

   /* -------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* -------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end EK0F-0000

// Main process of Application
Function EK0F0000()
  EK0FS-PURGE-QUEUE(); /* Purge temp storage queue*/

  EK0FS-CHECK-ACCESS(); /* Purge temp storage queue*/

  EK0F1000(); /* Obtain the data to display*/

  EK0F2000(); /* Load temp storage with data*/

  EK0F3000(); /* Display data to screen*/
                                  /* Process adds/changes*/


   /* **************************************************************/
                     /* END  EK0F0000*/
   /* **************************************************************/
end // end EK0F0000

// Main process to display a map
Function EK0F1000()
   /* **************************************************************/
   /* This process controls the map field attributes depending on*/
   /* the screen access mode (inquire, update or insert).*/
   /* **************************************************************/

  set EK0FM001 initial; /* Clear out map*/

  EK0FM001.EK0FM-CURRENT-DATE = VGVar.currentShortGregorianDate;

  set EK0FM001.EK0FM-S-CL-CLM-NBR initialAttributes;
  set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 initialAttributes;
  set EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 initialAttributes;
  set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 initialAttributes;
  set EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 initialAttributes;

  EK0FW00.EK0FW-SCR-IDX = 1; /* Init screen index*/

  while (EK0FW00.EK0FW-SCR-IDX <= EK0FW00.EK0FW-SCR-LINES)

    set EK0FM001.EK0FM-CL-RSLV-USER-ID[EK0FW-SCR-IDX] initialAttributes;
    set EK0FM001.EK0FM-CL-RSLV-USER-NAME[EK0FW-SCR-IDX] initialAttributes;
    set EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] initialAttributes;
    set EK0FM001.EK0FM-CL-RSLV-BDT[EK0FW-SCR-IDX] initialAttributes;
    set EK0FM001.EK0FM-CL-RSLV-TDT[EK0FW-SCR-IDX] initialAttributes;
    set EK0FM001.EK0FM-CL-COMP-FL[EK0FW-SCR-IDX] initialAttributes;

    EK0FW00.EK0FW-SCR-IDX = EK0FW00.EK0FW-SCR-IDX + 1;

  end

   /* **************************************************************/
                     /* END  EK0F1000*/
   /* **************************************************************/
end // end EK0F1000

// Load Temp storage
Function EK0F2000()
  EK0FW00.EK0FW-MAX-PAGE = 0;
  EK0FW00.EK0FW-MAX-RCD = 0;

  set EK0FW02 empty;
  set TA5REC empty;

  TA5REC.TA5APPID = "EK0F"; /* Application*/

  EK0FS-PURGE-QUEUE(); /* Purge temp storage*/

  EK0FM001.EK0FM-S-CL-CLM-NBR = EK0FW00.EK0FW-S-CL-CLM-NBR;

  EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 = EK0FW00.EK0FW-S-CL-RSLV-USER-ID-1;

  if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")
    set KUYREC empty;

    KUYREC.XXXUSRID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1;

    EK0FS-VSVREP01-SA();

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = KUYREC.KUYREPNM;
    else
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
    end
  end

  EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 = EK0FW00.EK0FW-S-CL-RSLV-USER-ID-2;

  if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 > " ")
    set KUYREC empty;

    KUYREC.XXXUSRID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2;

    EK0FS-VSVREP01-SA();

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = KUYREC.KUYREPNM;
    else
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";
    end
  end


  EK0FW02.EK0FW-W02-IDX = 1;

  set VCLESX01 empty;

  VCLESX01.CL-CLM-NBR = EK0FW00.EK0FW-S-CL-CLM-NBR;

  EK0FS-VCLESX01-S1(); /* Declare/Open VCLESX01 cursor*/

  while (SQLCA.VAGen_SQLCODE == 0)

    EK0FS-VCLESX01-N1(); /* Fetch Next VCLESX01*/

    EK0FW00.EK0FW-BYPASS-FL = "N";

    if (SQLCA.VAGen_SQLCODE == 0)

      if (EK0FW00.EK0FW-BYPASS-FL == "N")

        if (EK0FW02.EK0FW-W02-IDX > EK0FW00.EK0FW-SCR-LINES)
          EK0FW01.EK0FW-TEMP-ITEM = EK0FW02.EK0FW-TEMP-ITEM;
          TA5REC.TA5FNCCD = "A";

          EK0FS-CALL-TA0050(); /* Write previous to queue*/

          set EK0FW02 empty; /* Clear record*/

          EK0FW02.EK0FW-W02-IDX = 1;

          EK0FW00.EK0FW-MAX-PAGE = EK0FW00.EK0FW-MAX-PAGE + 1;
        end

        EK0FW02.EK0FW-ROW-EXISTS[EK0FW-W02-IDX] = "Y";
        EK0FW02.EK0FW-ROW-CHNGD[EK0FW-W02-IDX] = "N";
        EK0FW02.EK0FW-ROW-ADDED[EK0FW-W02-IDX] = "N";
        EK0FW02.EK0FW-ROW-DELTD[EK0FW-W02-IDX] = "N";

        EK0FW02.CL-CLM-NBR[EK0FW-W02-IDX] = VCLESX01.CL-CLM-NBR;
        EK0FW02.CL-RSLV-USER-ID[EK0FW-W02-IDX] = VCLESX01.CL-RSLV-USER-ID;
        EK0FW02.CL-RSLV-BDT[EK0FW-W02-IDX] = VCLESX01.CL-RSLV-BDT;
        EK0FW02.CL-RSLV-TDT[EK0FW-W02-IDX] = VCLESX01.CL-RSLV-TDT;
        EK0FW02.CL-COMP-FL[EK0FW-W02-IDX] = VCLESX01.CL-COMP-FL;
        EK0FW02.CL-ESC-ACT-CD[EK0FW-W02-IDX] = VCLESX01.CL-ESC-ACT-CD;
        EK0FW02.CL-RSLV-CD[EK0FW-W02-IDX] = VCLESX01.CL-RSLV-CD;

        EK0FW02.ZZ-SDT[EK0FW-W02-IDX] = VCLESX01.ZZ-SDT;
        EK0FW02.ZZ-CHNG-DT[EK0FW-W02-IDX] = VCLESX01.ZZ-CHNG-DT;
        EK0FW02.ZZ-CHNG-CNT[EK0FW-W02-IDX] = VCLESX01.ZZ-CHNG-CNT;

        EK0FW02.EK0FW-W02-IDX = EK0FW02.EK0FW-W02-IDX + 1;
        EK0FW00.EK0FW-MAX-RCD = EK0FW00.EK0FW-MAX-RCD + 1;

      end

    else
      if (EK0FW02.EK0FW-ROW-EXISTS[1] > " ") /* queue not empty?*/
        EK0FW01.EK0FW-TEMP-ITEM = EK0FW02.EK0FW-TEMP-ITEM;
        TA5REC.TA5FNCCD = "A";

        EK0FS-CALL-TA0050(); /* Write previous to queue*/

        set EK0FW02 empty; /* Clear record*/

        EK0FW00.EK0FW-MAX-PAGE = EK0FW00.EK0FW-MAX-PAGE + 1;
      end
    end
  end

   /* Close cursor*/

  EK0FS-VCLESX01-C1(); /* Close VCLESX01 cursor*/

   /* If max page is zero, no data was returned*/

  if (EK0FW00.EK0FW-MAX-PAGE == 0)
    EK0FW00.EK0FW-CURR-PAGE = 0;
    set EK0FM001.EK0FM-PF12-CONFIRM invisible, skip;
    converseLib.validationFailed(350); /* No data found*/
  end


  EK0FW00.EK0FW-CURR-PAGE = 001;
  EK0FW00.EK0FW-CURR-RCD = 001;

  set EK0FW02 empty;

   /* **************************************************************/
                     /* END  EK0F2000*/
   /* **************************************************************/
end // end EK0F2000

// Display Table to Screen
Function EK0F3000()
   /* **************************************************************/
   /* This process controls the display for the top half of the*/
   /* EK0FM001 map. The application will remain in this process*/
   /* until the user requests exit, or valid updates have*/
   /* been entered.*/
   /* **************************************************************/

   /* Display the retrieved data (May exit appl)*/

  EK0FW00.EK0FW-END-SCREEN = "N";

  while (EK0FW00.EK0FW-END-SCREEN == "N") /* If not end*/

    EK0F3100(); /* display map*/

  end

   /* **************************************************************/
                     /* END  EK0F3000*/
   /* **************************************************************/
end // end EK0F3000

// Converse EK0FM001
Function EK0F3100()
  if (EK0FW00.EK0FW-CURR-PAGE != EK0FM001.EK0FM-CURR-PAGE)
    if (converseVar.validationMsgNum == 350 ||  /* No data found*/
    EK0FW00.EK0FW-MAX-PAGE == 0)               
      EK0FW00.EK0FW-CURR-PAGE = 1;
      EK0FW00.EK0FW-MAX-PAGE = 1;
      EK0FM001.EK0FM-CURR-PAGE = 1;
      EK0FM001.EK0FM-MAX-PAGE = 1;
        /* continue      /* Nothing to load/reload*/
    else
      EK0F3200(); /* Reload screen data*/
      EK0FM001.EK0FM-CURR-PAGE = EK0FW00.EK0FW-CURR-PAGE;
      EK0FM001.EK0FM-MAX-PAGE = EK0FW00.EK0FW-MAX-PAGE;
    end
  end

   /* Now set field attributes*/

  EK0FW00.EK0FW-SCR-IDX = 1;

  while (EK0FW00.EK0FW-SCR-IDX <= EK0FW00.EK0FW-SCR-LINES)

    set EK0FM001.EK0FM-CL-RSLV-USER-ID[EK0FW-SCR-IDX] initialAttributes;
    set EK0FM001.EK0FM-CL-RSLV-USER-NAME[EK0FW-SCR-IDX] initialAttributes;
    set EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] initialAttributes;
    set EK0FM001.EK0FM-CL-RSLV-BDT[EK0FW-SCR-IDX] initialAttributes;
    set EK0FM001.EK0FM-CL-RSLV-TDT[EK0FW-SCR-IDX] initialAttributes;
    set EK0FM001.EK0FM-CL-COMP-FL[EK0FW-SCR-IDX] initialAttributes;

    EK0FW00.EK0FW-SCR-IDX = EK0FW00.EK0FW-SCR-IDX + 1;

  end

  if (converseVar.validationMsgNum == 0)
    set EK0FM001.EK0FM-S-CL-CLM-NBR initialAttributes;
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 initialAttributes;
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 initialAttributes;
  end

  if (EK0FW00.EK0FW-MAX-PAGE == 0 || 
  (EK0FW00.EK0FW-MAX-PAGE == 1 && 
  EK0FW00.EK0FW-MAX-RCD == 0)) /* If no Data to display*/
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 skip, noHighLight;
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 skip, noHighLight;
    set EK0FM001.EK0FM-PF12-CONFIRM invisible, skip;
  else
    set EK0FM001.EK0FM-PF12-CONFIRM initialAttributes;
  end

  if (converseVar.validationMsgNum != 0)
    set EK0FM001 alarm;
  end

  converse EK0FM001 ;

  EK0FW00.EK0FW-POPUP-FL = "N";
  EK0FW02.EK0FW-SCREEN-CHNGD = "N";

  if (EK0FW00.EK0FW-MODE-IND == "I") /* Inquire Mode*/
    if (EK0FM001.EK0FM-S-CL-CLM-NBR != EK0FW00.EK0FW-S-CL-CLM-NBR)
     /* MOVE 'Y' TO EK0FW02.EK0FW-SCREEN-CHNGD;*/
      EK0FW00.EK0FW-END-SCREEN = "Y";

      EK0F3300(); /* Process Search Criteria*/

      return;
    else

      EK0FS-VAL-SEARCH(); /* Still, validate Claim Number*/

      if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 != 
      EK0FW00.EK0FW-S-CL-RSLV-USER-ID-1 || 
      EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 != 
      EK0FW00.EK0FW-S-CL-RSLV-USER-ID-2)

        if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 == " " && 
        EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 == " ")
          set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 normal;
          set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 normal;
          EK0FW00.EK0FW-S-CL-RSLV-USER-ID-1 = " ";
          EK0FW00.EK0FW-S-CL-RSLV-USER-ID-2 = " ";
          EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
          EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";
        else
          EK0FW02.EK0FW-SCREEN-CHNGD = "Y";
        end
      else
        if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 == " ")
          EK0FW00.EK0FW-S-CL-RSLV-USER-ID-1 = " ";
          EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
          set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 normal;
        end
        if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 == " ")
          EK0FW00.EK0FW-S-CL-RSLV-USER-ID-2 = " ";
          EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";
          set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 normal;
        end
        if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " " || 
        EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 > " ")
          EK0FW02.EK0FW-SCREEN-CHNGD = "Y";
        end
      end
    end
  end


   /* Check function keys (May exit application)*/

  EK0FS-CHECK-PFKEYS();

  if (converseVar.eventKey is pa2 /* Refresh*/
   || converseVar.eventKey is pf3 /* or Exit*/
   || converseVar.validationMsgNum != 0) /* or errors*/
    return;
  end

   /* Now if there are no errors, user pressed ENTER or PF12*/
   /* and they entered some changes, go process them!*/

  if (converseVar.validationMsgNum == 0 && 
  (converseVar.eventKey is enter || 
  converseVar.eventKey is pf12) && 
  EK0FW02.EK0FW-SCREEN-CHNGD == "Y")

    EK0F4000(); /* Validate & Update*/

  end

end // end EK0F3100

// Load screen array
Function EK0F3200()
   /* **************************************************************/
   /* Load screen array and internal working storage array*/
   /* from temp storage.*/
   /* **************************************************************/

  set EK0FW02 empty; /* Clear record*/

  EK0FW00.EK0FW-SCR-IDX = 1; /* Init screen index*/
  EK0FW02.EK0FW-W02-IDX = 1; /* and W02 index*/
  EK0FW02.EK0FW-CURR-RCD = EK0FW00.EK0FW-CURR-RCD;

  TA5REC.TA5TSQIX = EK0FW00.EK0FW-CURR-PAGE;
  TA5REC.TA5FNCCD = "R";

  EK0FS-CALL-TA0050(); /* Read queue*/

  EK0FW02.EK0FW-TEMP-ITEM = EK0FW01.EK0FW-TEMP-ITEM;

  EK0FM001.EK0FM-S-CL-CLM-NBR = EK0FW00.EK0FW-S-CL-CLM-NBR;

  EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 = EK0FW00.EK0FW-S-CL-RSLV-USER-ID-1;

  if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")
    set KUYREC empty;

    KUYREC.XXXUSRID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1;

    EK0FS-VSVREP01-SA();

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = KUYREC.KUYREPNM;
    else
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
    end
  end

  EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 = EK0FW00.EK0FW-S-CL-RSLV-USER-ID-2;

  if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 > " ")
    set KUYREC empty;

    KUYREC.XXXUSRID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2;

    EK0FS-VSVREP01-SA();

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = KUYREC.KUYREPNM;
    else
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";
    end
  end

   /* Now get the data from temp storage*/

  while (EK0FW-SCR-IDX <= EK0FW00.EK0FW-SCR-LINES)

    if (EK0FW02.EK0FW-CURR-RCD <= EK0FW00.EK0FW-MAX-RCD)

      EK0FM001.EK0FM-CL-RSLV-USER-ID[EK0FW-SCR-IDX] = EK0FW02.CL-RSLV-USER-ID[EK0FW-W02-IDX];

      if (EK0FM001.EK0FM-CL-RSLV-USER-ID[EK0FW-SCR-IDX] > " ")

        set KUYREC empty;

        KUYREC.XXXUSRID = EK0FM001.EK0FM-CL-RSLV-USER-ID[EK0FW-SCR-IDX];

        EK0FS-VSVREP01-SA();

        if (SQLCA.VAGen_SQLCODE == 0)
          EK0FM001.EK0FM-CL-RSLV-USER-NAME[EK0FW-SCR-IDX] = KUYREC.KUYREPNM;
        else
          EK0FM001.EK0FM-CL-RSLV-USER-NAME[EK0FW-SCR-IDX] = " ";
        end
      else
        EK0FM001.EK0FM-CL-RSLV-USER-NAME[EK0FW-SCR-IDX] = " ";
      end

      if (EK0FW02.CL-RSLV-CD[EK0FW-W02-IDX] > " ")
        if (EK0FW02.CL-RSLV-CD[EK0FW-W02-IDX] == "O")
          EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] = "ORIGINAL RESOLVER";
        end
        if (EK0FW02.CL-RSLV-CD[EK0FW-W02-IDX] == "1")
          EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] = "1ST ESCALATION";
        end
        if (EK0FW02.CL-RSLV-CD[EK0FW-W02-IDX] == "2")
          EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] = "2ND ESCALATION";
        end
        if (EK0FW02.CL-RSLV-CD[EK0FW-W02-IDX] == "M")
          EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] = "MANUAL OVERRIDE";
        end
        if (EK0FW02.CL-RSLV-CD[EK0FW-W02-IDX] == "S")
          EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] = "SYSTEM OVERRIDE";
        end
        if (EK0FW02.CL-RSLV-CD[EK0FW-W02-IDX] == "A")
          EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] = "AUTHORIZE RESOLVER";
        end
      else
        EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] = " ";
      end

      EK0FM001.EK0FM-CL-RSLV-BDT[EK0FW-SCR-IDX] = EK0FW02.CL-RSLV-BDT[EK0FW-W02-IDX];
      EK0FM001.EK0FM-CL-RSLV-TDT[EK0FW-SCR-IDX] = EK0FW02.CL-RSLV-TDT[EK0FW-W02-IDX];
      EK0FM001.EK0FM-CL-COMP-FL[EK0FW-SCR-IDX] = EK0FW02.CL-COMP-FL[EK0FW-W02-IDX];

    else

      EK0FM001.EK0FM-CL-RSLV-USER-ID[EK0FW-SCR-IDX] = " ";
      EK0FM001.EK0FM-CL-RSLV-USER-NAME[EK0FW-SCR-IDX] = " ";
      EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] = " ";
      EK0FM001.EK0FM-CL-RSLV-BDT[EK0FW-SCR-IDX] = 0;
      EK0FM001.EK0FM-CL-RSLV-TDT[EK0FW-SCR-IDX] = 0;
      EK0FM001.EK0FM-CL-COMP-FL[EK0FW-SCR-IDX] = " ";

    end

    EK0FW02.EK0FW-CURR-RCD = EK0FW02.EK0FW-CURR-RCD + 1;
    EK0FW02.EK0FW-W02-IDX = EK0FW02.EK0FW-W02-IDX + 1;
    EK0FW00.EK0FW-SCR-IDX = EK0FW00.EK0FW-SCR-IDX + 1;

  end

  EK0FW02.EK0FW-CURR-RCD = EK0FW00.EK0FW-CURR-RCD;

   /* **************************************************************/
                     /* END  EK0F3200*/
   /* **************************************************************/
end // end EK0F3200

// Process Search criteria
Function EK0F3300()

   /* Process Search criteria using Claim Number*/

  EK0FS-PURGE-QUEUE();

  EK0FS-VAL-SEARCH(); /* Validate Search criteria*/

  if (converseVar.validationMsgNum == 0)

    EK0FW00.EK0FW-END-SCREEN = "Y";

  else /* Blank out screen*/

    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 normal;
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 normal;
    EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 = " ";
    EK0FW00.EK0FW-S-CL-RSLV-USER-ID-1 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 = " ";
    EK0FW00.EK0FW-S-CL-RSLV-USER-ID-2 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";

    EK0FW00.EK0FW-SCR-IDX = 1;

    while (EK0FW00.EK0FW-SCR-IDX <= EK0FW00.EK0FW-SCR-LINES)

      EK0FM001.EK0FM-CL-RSLV-USER-ID[EK0FW-SCR-IDX] = " ";
      EK0FM001.EK0FM-CL-RSLV-USER-NAME[EK0FW-SCR-IDX] = " ";
      EK0FM001.EK0FM-CL-RSLV-CD-DESC[EK0FW-SCR-IDX] = " ";
      EK0FM001.EK0FM-CL-RSLV-BDT[EK0FW-SCR-IDX] = 0;
      EK0FM001.EK0FM-CL-RSLV-TDT[EK0FW-SCR-IDX] = 0;
      EK0FM001.EK0FM-CL-COMP-FL[EK0FW-SCR-IDX] = " ";

      EK0FW00.EK0FW-SCR-IDX = EK0FW00.EK0FW-SCR-IDX + 1;
    end

    EK0FW00.EK0FW-CURR-PAGE = 1;
    EK0FW00.EK0FW-MAX-PAGE = 1;
    EK0FM001.EK0FM-CURR-PAGE = 1;
    EK0FM001.EK0FM-MAX-PAGE = 1;
  end
   /* **************************************************************/
                     /* END  EK0F3300*/
   /* **************************************************************/
end // end EK0F3300

// Process Adds/Changes
Function EK0F4000()

  EK0FW00.EK0FW-POPUP-FL = "N";

   /*  */
   /* Main Validation*/
   /*  */

  EK0F4100(); /* Edit Validation*/

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

  if (converseVar.eventKey is enter) /* No Errors, but not PF12*/
    converseLib.validationFailed(828); /* Press PF12 to confirm updates*/
    return;
  end

   /* Now, if we get here we have valid data to ADD or UPDATE or DELETE*/
   /* as long as PF12 key (Confirm) was pressed*/

  EK0F4500(); /* Add/Update/Delete*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    EK0FW00.EK0FW-S-CL-CLM-NBR = EK0FM001.EK0FM-S-CL-CLM-NBR;
    EK0FW00.EK0FW-S-CL-RSLV-USER-ID-1 = " ";
    EK0FW00.EK0FW-S-CL-RSLV-USER-ID-2 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";
    EK0FW00.EK0FW-MODE-IND = "I"; /* Set to INQUIRE Mode*/
    converseLib.validationFailed(774); /* Updates successful*/
    EK0FW00.EK0FW-END-SCREEN = "Y";
  end

   /* **************************************************************/
                     /* END  EK0F4000*/
   /* **************************************************************/
end // end EK0F4000

// EDIT Validation process
Function EK0F4100()
   /* ------------------------------------------------------------------*/
   /* Edit Validation Process*/
   /* ------------------------------------------------------------------*/
   /*  */
   /* 1) Validate Claim Number, Override UserId and Authorize UserId*/
   /*  */
   /* 2) Validate if the key combination above already exists on the*/
   /* database*/
   /*  */
   /* 3) Validate if Override or Authorize UserId being added has already*/
   /* been assigned with an "open" (0) Termination Date*/
   /*  */
   /* ------------------------------------------------------------------*/

  set EK0FM001.EK0FM-S-CL-CLM-NBR normal;
  set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 normal;
  set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 normal;
  EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
  EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";

  if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " " && 
  EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 > " ")
    converseLib.validationFailed(849); /* Enter only one Userid*/
    EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 cursor, bold;
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 bold;
  else
    if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 == " " && 
    EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 == " ")
      converseLib.validationFailed(850); /* Enter at least one UserId*/
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";
      set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 cursor, bold;
      set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 bold;
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* Validate that the Override or Authorize UserId entered exists as*/
   /* a valid Representative Userid on DCUST.VREPS001 database*/
   /* (Service Rep Table)*/

  set KUYREC empty;

  if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")
    KUYREC.XXXUSRID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1;
  else
    KUYREC.XXXUSRID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2;
  end

  EK0FS-VSVREP01-SA(); /* Select Alt VSVREP01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = KUYREC.KUYREPNM;
    else
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = KUYREC.KUYREPNM;
    end
  else
    converseLib.validationFailed(840); /* UserId entered not in Serv Rep table*/
    if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")
      set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 cursor, bold;
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = "???";
    else
      set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 cursor, bold;
      EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = "???";
    end
  end


  if (converseVar.validationMsgNum != 0)
    return;
  end


   /* Get current date and time for ZZ fields*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  EK0FW00.ZZ-SDT = TA2REC.TA2GRGGN;
  EK0FW00.ZZ-SETUP-HHMM = TA2REC.TA2TIMHM;
  EK0FW00.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
  EK0FW00.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;

   /*  */
   /* Validate the Key Combination (Claim Number, Resolver Id and*/
   /* Begin Date) does not already exist on DCLAIM.VCLESX01 table;*/
   /* Note: The key to the table is the combination of Claim Number +*/
   /* Resolver UserId + Resolver Begin Date*/
   /*  */

  set VCLESX01 empty;

  VCLESX01.CL-CLM-NBR = EK0FM001.EK0FM-S-CL-CLM-NBR;

  if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")
    VCLESX01.CL-RSLV-USER-ID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1;
  else
    VCLESX01.CL-RSLV-USER-ID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2;
  end

  VCLESX01.CL-RSLV-BDT = TA2REC.TA2GRGGN;

  EK0FS-VCLESX01-S(); /* Select Unique VCLESX01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(778); /* Row to Insert already exists*/
    set EK0FM001.EK0FM-S-CL-CLM-NBR bold, cursor;
    if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")
      set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 bold;
    else
      set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 bold;
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /*  */
   /* Validate that the Override or Authorize UserId being entered*/
   /* does not already exist with an "open" (0) Termination Date*/
   /* Reason: a same Override/Authorize Userid cannot be entered again,*/
   /* even on a different day, when the Override/Authorize UserId*/
   /* has been assigned previously and is still "open" or active*/
   /*  */

  set VCLESX01 empty;

  VCLESX01.CL-CLM-NBR = EK0FM001.EK0FM-S-CL-CLM-NBR;

  EK0FS-VCLESX01-S1(); /* Decl/Open VCLESX01 cursor*/

  while (SQLCA.VAGen_SQLCODE == 0)

    EK0FS-VCLESX01-N1(); /* Fetch VCLESX01 cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)

      if (VCLESX01.CL-RSLV-TDT == 0) /* Open Termination Date*/
        if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")
          if (VCLESX01.CL-RSLV-USER-ID == 
          EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1) /* same Override User*/
            converseLib.validationFailed(851); /* Claim already reassigned*/
            set EK0FM001.EK0FM-S-CL-CLM-NBR bold;
            set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 bold, cursor;
          end
        else
          if (VCLESX01.CL-RSLV-USER-ID == 
          EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2) /* same Authorize User*/
            converseLib.validationFailed(852); /* Claim already authorized*/
            set EK0FM001.EK0FM-S-CL-CLM-NBR bold;
            set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 bold, cursor;
          end
        end
      end
    end
  end

  EK0FS-VCLESX01-C1(); /* Close VCLESX01 cursor*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* Save data fields*/

  EK0FW00.EK0FW-S-CL-RSLV-USER-ID-1 = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1;
  EK0FW00.EK0FW-S-CL-RSLV-USER-ID-2 = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2;

   /*  */
   /* For DELETE Mode only*/
   /* Validate the Userid Id entered: if userid = 'DELETE', application*/
   /* will delete the "open" row*/
   /* (to be added later)*/

  EK0FW00.EK0FW-SCR-IDX = EK0FW00.EK0FW-SCR-LINES;

  while (EK0FW00.EK0FW-SCR-IDX > 0 && 
  EK0FW00.EK0FW-MODE-IND == "D")

     /* Validate if there is data on detail line*/


    EK0FW-SCR-IDX = EK0FW-SCR-IDX - 1;

  end


   /* **************************************************************/
                     /* END  EK0F4100*/
   /* **************************************************************/
end // end EK0F4100

// Insert/Update Process
Function EK0F4500()
   /* ------------------------------------------------------------------- **/
   /*  */
   /* Insert/Update Process*/
   /* ---------------------*/
   /*  */
   /* Update Process.*/
   /*  */
   /* Rows existing in the table for the claim needed to be updated as*/
   /* follows:*/
   /* 1) The CL-RSLV-TDT field on the last row (ie. the row with*/
   /* CL-COMP-FL = 'R') is populated with the Current Date termination*/
   /* date;*/
   /* 2) The CL-COMP-FL is changed as follows:*/
   /* a. If the CL-RSLV-CD for the new row will be set to 'M', then*/
   /* the CL-COMP-FL on ANY EXISTING ROW where the code is either*/
   /* 'Y' or 'R' is set to 'N';*/
   /* b. If the CL-RSLV-CD for the new row will be set to 'A', then*/
   /* the CL-COMP-FL on THE EXISTING row where the code is 'R'*/
   /* is set to 'Y';*/
   /*  */
   /* Insert Process.*/
   /*  */
   /* A new row is added when EITHER the Override ID or Authorize ID is*/
   /* updated. For this new row, the following values are set:*/
   /* 1) The CL-RSLV-USER-ID is the UserId that was entered in either*/
   /* update field;*/
   /* 2) The CL-RSLV-BDT is set to the Current Date;*/
   /* 3) The CL-RSLV-TDT is set to zeroes (open-ended Date);*/
   /* 4) The CL-RSLV-CD is set as either:*/
   /* a. 'M' if the user id entered is an Override UserId;*/
   /* b. 'A' if the user id entered is an Authorize UserId;*/
   /* 5) The CL-COMP-FL is set to 'R' (For Research)*/
   /*  */
   /* ------------------------------------------------------------------- **/

  if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")

    EK0F4510(); /* ;/* Update for Override UserId*/

  else

    EK0F4520(); /* ;/* Update for Authorize UserId*/

  end

  if (converseVar.validationMsgNum != 0)
    return;
  end


   /* If you get this far, let's insert the new Override/Authorize*/
   /* UserId row, with an "open" Termination Date*/

  set VCLESX01 empty;

  VCLESX01.CL-CLM-NBR = EK0FM001.EK0FM-S-CL-CLM-NBR;

  if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")
    VCLESX01.CL-RSLV-USER-ID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1;
  else
    VCLESX01.CL-RSLV-USER-ID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2;
  end

  VCLESX01.CL-RSLV-BDT = EK0FW00.ZZ-SDT;

  EK0FS-VCLESX01-S(); /* Select Unique VCLESX01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(778); /* Row to Insert already exists*/
    set EK0FM001.EK0FM-S-CL-CLM-NBR bold, cursor;
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 bold;
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 bold;
  else

    set VCLESX01 empty;

    VCLESX01.CL-CLM-NBR = EK0FM001.EK0FM-S-CL-CLM-NBR;

    if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " ")
      VCLESX01.CL-RSLV-USER-ID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1;
      VCLESX01.CL-RSLV-CD = "M"; /* Manual Override*/
    else
      VCLESX01.CL-RSLV-USER-ID = EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2;
      VCLESX01.CL-RSLV-CD = "A"; /* Authorized Resolver*/
    end

    VCLESX01.CL-COMP-FL = "R";

    VCLESX01.CL-RSLV-BDT = EK0FW00.ZZ-SDT;
    VCLESX01.CL-RSLV-TDT = 0;

    VCLESX01.ZZ-SDT = EK0FW00.ZZ-SDT;
    VCLESX01.ZZ-SETUP-HHMM = EK0FW00.ZZ-SETUP-HHMM;
    VCLESX01.ZZ-CHNG-DT = 0;
    VCLESX01.ZZ-CHNG-HHMM = 0;
    VCLESX01.ZZ-CHNG-CNT = 0;

    EK0FS-VCLESX01-I(); /* Insert VCLESX01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
        /* do nothing*/
    else
      converseLib.validationFailed(339); /* Database updated by another application*/
      set EK0FM001.EK0FM-S-CL-CLM-NBR bold, cursor;
      set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 bold;
      set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 bold;
    end
  end

   /* If no errors commit changes, else roll back and exit.*/

  if (converseVar.validationMsgNum == 000) /* No update errors*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* so commit changes*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* roll back changes*/
    return; /* and exit*/
  end

   /* **************************************************************/
                     /* END  EK0F4500*/
   /* **************************************************************/
end // end EK0F4500

// Update Override UserId
Function EK0F4510()
   /* Update Process.*/
   /*  */
   /* Rows existing in the table for the claim needed to be updated as*/
   /* follows:*/
   /* 1) The CL-RSLV-TDT field on the last row (ie. the row with*/
   /* CL-COMP-FL = 'R') is populated with the Current Date termination*/
   /* date;*/
   /* 2) The CL-COMP-FL is changed as follows:*/
   /* a. If the CL-RSLV-CD for the new row will be set to 'M', then*/
   /* the CL-COMP-FL on ANY EXISTING ROW where the code is either*/
   /* 'Y' or 'R' is set to 'N';*/
   /*  */


  set VCLESX01 empty;

  VCLESX01.CL-CLM-NBR = EK0FM001.EK0FM-S-CL-CLM-NBR;

  EK0FS-VCLESX01-S1(); /* Decl/Open VCLESX01 cursor*/

  while (SQLCA.VAGen_SQLCODE == 0)

    EK0FS-VCLESX01-N1(); /* Fetch VCLESX01 cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)

      if (VCLESX01.CL-RSLV-TDT == 0) /* Open Termination Date*/
        VCLESX01.CL-RSLV-TDT = EK0FW00.ZZ-SDT;
      end

      VCLESX01.CL-COMP-FL = "N";

      VCLESX01.ZZ-CHNG-DT = EK0FW00.ZZ-CHNG-DT;
      VCLESX01.ZZ-CHNG-HHMM = EK0FW00.ZZ-CHNG-HHMM;

      EK0FS-VCLESX01-U(); /* Update VCLESX01 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
           /* do nothing, Update was successful*/
      else
        converseLib.validationFailed(018); /* Data updated by another app*/
        set EK0FM001.EK0FM-S-CL-CLM-NBR bold, cursor;
        set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 bold;
        set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 bold;
      end
    end
  end

  EK0FS-VCLESX01-C1(); /* Close VCLESX01 cursor*/

   /* **************************************************************/
                     /* END  EK0F4510*/
   /* **************************************************************/
end // end EK0F4510

// Update Authorize UserId
Function EK0F4520()
   /* Update Process.*/
   /*  */
   /* Rows existing in the table for the claim needed to be updated as*/
   /* follows:*/
   /* 1) The CL-RSLV-TDT field on the last row (ie. the row with*/
   /* CL-COMP-FL = 'R') is populated with the Current Date termination*/
   /* date;*/
   /* 2) The CL-COMP-FL is changed as follows:*/
   /* a. If the CL-RSLV-CD for the new row will be set to 'A', then*/
   /* the CL-COMP-FL on THE EXISTING row where the code is 'R'*/
   /* is set to 'Y';*/
   /*  */

  set VCLESX01 empty;

  VCLESX01.CL-CLM-NBR = EK0FM001.EK0FM-S-CL-CLM-NBR;

  EK0FS-VCLESX01-S1(); /* Decl/Open VCLESX01 cursor*/

  while (SQLCA.VAGen_SQLCODE == 0)

    EK0FS-VCLESX01-N1(); /* Fetch VCLESX01 cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)

      if (VCLESX01.CL-RSLV-TDT == 0) /* Open Termination Date*/

        VCLESX01.CL-RSLV-TDT = EK0FW00.ZZ-SDT;

        VCLESX01.CL-COMP-FL = "Y";

        VCLESX01.ZZ-CHNG-DT = EK0FW00.ZZ-CHNG-DT;
        VCLESX01.ZZ-CHNG-HHMM = EK0FW00.ZZ-CHNG-HHMM;

        EK0FS-VCLESX01-U(); /* Update VCLESX01 row*/

        if (SQLCA.VAGen_SQLCODE == 0)
          SQLCA.VAGen_SQLCODE = 100; /* End the Fetch loop*/
        else
          converseLib.validationFailed(018); /* Data updated by another app*/
          set EK0FM001.EK0FM-S-CL-CLM-NBR bold, cursor;
          set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 bold;
          set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 bold;
        end
      end
    end
  end

  EK0FS-VCLESX01-C1(); /* Close VCLESX01 cursor*/

   /* **************************************************************/
                     /* END  EK0F4520*/
   /* **************************************************************/
end // end EK0F4520

// Call TA0020
Function EK0FS-CALL-TA0020()

   /* Call TA0020 to report DB2 or application errors*/

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "EK0F";
  TA1REC.TA1MAP = "EK0FM001";
  if (TA1REC.TA1TYPE == "DB2")
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end EK0FS-CALL-TA0020

// Call TA0050 for Temp Storage
Function EK0FS-CALL-TA0050()

   /* Call TA0050 to manage the Temp Storage quere*/
   /* If problems, report to TA0020.*/

  EK0FW01.EK0FW-RCD-SIZE = 0380;
  call "TA0050" (EK0FW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0000) /* Problems*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0FS-CALL-TA0050";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0050";
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    EK0FS-CALL-TA0020();
    converseLib.validationFailed(811); /* Unexpected error*/
    exit stack;
  end

end // end EK0FS-CALL-TA0050

// Check if User allowed Access
Function EK0FS-CHECK-ACCESS()

   /* Only valid Resolvers or Security Users can use this screen*/
   /* Check for User is allowed access to this application*/

  EK0FW00.EK0FW-ALLOW-ACCESS-FL = "N";

  set VCLRES01 empty;

  VCLRES01.CL-CR-ANLS-USER-ID = COMMAREA.CAUSERID;

  EK0FS-VCLRES01-S3();

  if (SQLCA.VAGen_SQLCODE == 0)

    EK0FS-VCLRES01-N3();

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0FW00.EK0FW-ALLOW-ACCESS-FL = "Y";
    else
      EK0FW00.EK0FW-ALLOW-ACCESS-FL = "N";
    end
  else
    EK0FW00.EK0FW-ALLOW-ACCESS-FL = "N";
  end

  EK0FS-VCLRES01-C3();

  if (EK0FW00.EK0FW-ALLOW-ACCESS-FL == "Y")
     /* continue*/
  else
   /* MOVE COMMAREA.CAFROMAP TO COMMAREA.CATOAP;*/
    COMMAREA.CATOAP = "EK0A";

    XSEXIT(); /* Exit to another application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(811); /* Cannot transfer*/
    return;
  end

end // end EK0FS-CHECK-ACCESS

// Check PF Key Pressed
Function EK0FS-CHECK-PFKEYS()

   /* Check for valid PF keys and Transfer Options*/

  if (converseVar.eventKey is pa2) /* Need refresh*/
    set EK0FW02 empty; /* Scrap table*/
    EK0FW00.EK0FW-MODE-IND = "I"; /* Switch to Inquire Mode*/
    EK0FW00.EK0FW-CURR-PAGE = 001;
    EK0FW00.EK0FW-CURR-RCD = 001;
    return;
  end

  if (converseVar.eventKey is enter) /* If ENTER pressed*/
    if (EK0FM001.CATOAP == " ") /* If Opt is blank*/
      if (EK0FM001.CAITEM == " ") /* And Item is blank*/
        return; /* OK, so exit*/
      else /* Cannot have item without option*/
        converseLib.validationFailed(285); /* Tell user*/
        set EK0FM001.CAITEM cursor, bold;
        return;
      end /* OK, so exit*/
    else
      if (EK0FM001.CATOAP == "KL0E")
        COMMAREA.CAFRMSYS = "KL";
      end
      EK0FS-PURGE-QUEUE(); /* Purge temp storage*/
      COMMAREA.CATOAP = EK0FM001.CATOAP;
      COMMAREA.CAITEM = EK0FM001.CAITEM;
      CLWREC.CLACLMNB = EK0FM001.EK0FM-S-CL-CLM-NBR;
      COMMAREA.CAUSERA = CLWREC.CLWGROUP;
      XSEXIT(); /* Try to get there*/
      converseLib.validationFailed(006); /* Cannot transfer*/
      set EK0FM001.CATOAP cursor, bold;
      return;
    end
  else
    if (EK0FM001.CATOAP != " " ||  /* If Opt entered*/
    EK0FM001.CAITEM != " ")        /* or item entered*/
      converseLib.validationFailed(812); /* Can't use option and PFkey*/
      set EK0FM001.CATOAP cursor, bold;
      set EK0FM001.CAITEM bold;
      return;
    end
  end

  if (converseVar.eventKey is pf1) /* Help System*/
    EK0FS-PURGE-QUEUE(); /* Purge temp storage*/
    XSPF1(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf3) /* EF0I Menu*/

    EK0FS-PURGE-QUEUE(); /* Purge temp storage*/

    EK0FW00.EK0FW-END-SCREEN = "Y";

    if (EK0FW00.EK0FW-MODE-IND == "I") /* Inquire*/

      if (COMMAREA.CAFROMAP == "KL0E")
        if (EKWREC.EKW-CAFROMAP == "EK0E")
          COMMAREA.CATOAP = "EK0E";
        else
          COMMAREA.CATOAP = "EK0A";
        end
      else
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      end

      XSEXIT(); /* Exit to another application*/

      XSPF4(); /* Try to get there*/
      converseLib.validationFailed(811); /* Cannot transfer*/
      return;
    else /* PF3 from CHANGE or ADD mode*/
      EK0FW00.EK0FW-MODE-IND = "I"; /* Switch to Inquire Mode*/
      EK0FW00.EK0FW-CURR-PAGE = 001;
      EK0FW00.EK0FW-CURR-RCD = 001;
      return;
    end
  end

  if (converseVar.eventKey is pf4) /* Master Menu*/
    EK0FS-PURGE-QUEUE(); /* Purge temp storage*/
    COMMAREA.CATOAP = "KL0A";

    XSEXIT(); /* Exit to another application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf5) /* KL0E - Claim Header screen (via KL0A)*/
    EK0FS-PURGE-QUEUE(); /* Purge temp storage*/
    EKWREC.EKW-CAFROMAP = "EK0F";
    COMMAREA.CATOAP = "KL0A";
    EK0FW00.EK0FW-NUM-7 = EK0FM001.EK0FM-S-CL-CLM-NBR;
    COMMAREA.CAITEM = EK0FW00.EK0FW-CHA-7;
    COMMAREA.CAUSERA = CLWREC.CLWGROUP;

    EK0EW00.EK0EW-SV-CL-CLM-NBR = EK0FM001.EK0FM-S-CL-CLM-NBR;
    EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
    COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

    XSEXIT(); /* Exit to another application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf7) /* scroll up*/
    if (EK0FW02.EK0FW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0FW00.EK0FW-END-SCREEN = "N";
      return;
    end
    if (EK0FW00.EK0FW-CURR-PAGE == 1)
      converseLib.validationFailed(813); /* at the first page*/
      return;
    else
      EK0FW00.EK0FW-CURR-PAGE = EK0FW00.EK0FW-CURR-PAGE - 1;
      return;
    end
  end

  if (converseVar.eventKey is pf8) /* scroll down*/
    if (EK0FW02.EK0FW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0FW00.EK0FW-END-SCREEN = "N";
      return;
    end
    if (EK0FW00.EK0FW-CURR-PAGE == EK0FW00.EK0FW-MAX-PAGE)
      converseLib.validationFailed(814); /* at the last page*/
      return;
    else
      EK0FW00.EK0FW-CURR-PAGE = EK0FW00.EK0FW-CURR-PAGE + 1;
      return;
    end
  end

  if (converseVar.eventKey is pf12) /* User has confirmed*/
    if (EK0FM001.EK0FM-S-CL-CLM-NBR > 0)
      if (EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 > " " || 
      EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 > " ")
        return;
      else
        converseLib.validationFailed(850); /* Update Userid required*/
        set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 cursor, bold;
        set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 bold;
        return;
      end
    else
      converseLib.validationFailed(855); /* Claim Number required*/
      set EK0FM001.EK0FM-S-CL-CLM-NBR cursor, bold;
      return;
    end
  end


  converseLib.validationFailed(002); /* Invalid PF key*/

end // end EK0FS-CHECK-PFKEYS

// Purge temp storage queue
Function EK0FS-PURGE-QUEUE()

   /* Call TA0050 to manage the Temp Storage quere*/
   /* If problems, report to TA0020.*/

  TA5REC.TA5APPID = "EK0F";
  TA5REC.TA5FNCCD = "P";
  EK0FW01.EK0FW-RCD-SIZE = 0380;
  call "TA0050" (EK0FW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0000) /* Problems*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0FS-PURGE-QUEUE";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0050";
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    EK0FS-CALL-TA0020();
    converseLib.validationFailed(001); /* Unexpected error*/
    exit stack;
  end

end // end EK0FS-PURGE-QUEUE

// Validate Search criteria
Function EK0FS-VAL-SEARCH()

   /* Validate Claim Number against the Claim Header table*/

  EK0FW00.EK0FW-S-CL-CLM-NBR = EK0FM001.EK0FM-S-CL-CLM-NBR;

  if (EK0FM001.EK0FM-S-CL-CLM-NBR == 0)
    converseLib.validationFailed(855); /* Claim Number is required*/
    set EK0FM001.EK0FM-S-CL-CLM-NBR cursor, bold;
    EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 = " ";
    EK0FW00.EK0FW-S-CL-RSLV-USER-ID-1 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 = " ";
    EK0FW00.EK0FW-S-CL-RSLV-USER-ID-2 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 normal;
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 normal;
    return;
  end

  set CLAREC empty;

  CLAREC.CLACLMNB = EK0FM001.EK0FM-S-CL-CLM-NBR;

  EK0FS-VCLHDR01-S(); /* Select Unique VCLHDR01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    set EK0FM001.EK0FM-S-CL-CLM-NBR normal;
  else
    converseLib.validationFailed(793); /* Claim Number entered is invalid*/
    set EK0FM001.EK0FM-S-CL-CLM-NBR cursor, bold;
    EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-1 = " ";
    EK0FM001.EK0FM-S-CL-RSLV-USER-NAME-2 = " ";
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-1 normal;
    set EK0FM001.EK0FM-S-CL-RSLV-USER-ID-2 normal;
  end
end // end EK0FS-VAL-SEARCH

// Close VCLESX01 row
Function EK0FS-VCLESX01-C1()
  CLXREC.CLXCPROC = "EK0FS-VCLESX01-C1";

  try
    call "VCLESX01" ("C1", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C1 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0FS-VCLESX01-C1

// Insert VCLESX01 row
Function EK0FS-VCLESX01-I()
  try
    call "VCLESX01" ("A ", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Insert*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "A      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01"; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "A 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01"; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0FS-VCLESX01-I

// Fetch VCLESX01 row
Function EK0FS-VCLESX01-N1()
  CLXREC.CLXCPROC = "EK0FS-VCLESX01-N1";

  try
    call "VCLESX01" ("N1", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N1 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0FS-VCLESX01-N1

// Select VCLESX01 row
Function EK0FS-VCLESX01-S()
  CLXREC.CLXCPROC = "EK0FS-VCLESX01-S";

  try
    call "VCLESX01" ("S ", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0FS-VCLESX01-S

// Open VCLESX01 row
Function EK0FS-VCLESX01-S1()
  CLXREC.CLXCPROC = "EK0FS-VCLESX01-S1";

  try
    call "VCLESX01" ("S1", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S1 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0FS-VCLESX01-S1

// Update VCLESX01 row
Function EK0FS-VCLESX01-U()
  CLXREC.CLXCPROC = "EK0CS-VCLESX01-U";

  try
    call "VCLESX01" ("U ", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "U      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "U 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0FS-VCLESX01-U

// Select VCLHDR01 row
Function EK0FS-VCLHDR01-S()
  CLXREC.CLXCPROC = "EK0FS-VCLHDR01-S";

  try
    call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO1160 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO1160 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLHDR01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0FS-VCLHDR01-S

// Close VCLRES01 row
Function EK0FS-VCLRES01-C3()
  CLXREC.CLXCPROC = "EK0FS-VCLRES01-C3";

  try
    call "VCLRES01" ("C3", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C3     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C3 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0FS-VCLRES01-C3

// Fetch VCLRES01 row
Function EK0FS-VCLRES01-N3()
  CLXREC.CLXCPROC = "EK0FS-VCLRES01-N3";

  try
    call "VCLRES01" ("N3", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N3     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N3     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0FS-VCLRES01-N3

// Open VCLRES01 row
Function EK0FS-VCLRES01-S3()
  CLXREC.CLXCPROC = "EK0FS-VCLRES01-S3";

  try
    call "VCLRES01" ("S3", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S3     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S3 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0FS-VCLRES01-S3

// Select VSVREP01 row
Function EK0FS-VSVREP01-SA()
  CLXREC.CLXCPROC = "EK0FS-VSVREP01-SA";

  try
    call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "SA     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VSVREP01 "; /* io module*/
        TA1REC.TA1DBASE = "DCUST"; /* data base*/
        TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "SA 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VSVREP01 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* data base*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0FS-VSVREP01-SA

//*** RECORD=EK0FW00 ****
// This is the main working storage record for EK0C.
// ***********************
Record EK0FW00 type basicRecord
  10 EK0FW-SCR-LINES EK0FW-SCR-LINES ; 
  10 EK0FW-SCR-IDX EK0FW-SCR-IDX ; 
  10 EK0FW-LINE-IDX EK0FW-LINE-IDX ; 
  10 EK0FW-END-SCREEN EK0FW-END-SCREEN ; 
  10 EK0FW-WRK-IDX EK0FW-WRK-IDX ; 
  10 EK0FW-COL-IDX EK0FW-COL-IDX ; 
  10 EK0FW-LINE-COUNT EK0FW-LINE-COUNT ; 
  10 EK0FW-MODE-IND EK0FW-MODE-IND ; 
  10 EK0FW-POPUP-FL EK0FW-POPUP-FL ; 
  10 EK0FW-POPUP-IND EK0FW-POPUP-IND ; 
  10 EK0FW-END-SCAN EK0FW-END-SCAN ; 
  10 EK0FW-VALID-KEY-FL EK0FW-VALID-KEY-FL ; 
  10 EK0FW-BYPASS-FL EK0FW-BYPASS-FL ; 
  10 EK0FW-ALLOW-ACCESS-FL EK0FW-ALLOW-ACCESS-FL ; 
  10 * char(1) ; 
  10 EK0FW-VCLESX01-ROW EK0FW-VCLESX01-ROW ; 
    15 EK0FW-CL-CLM-NBR EK0FW-CL-CLM-NBR ; 
    15 EK0FW-CL-RSLV-USER-ID EK0FW-CL-RSLV-USER-ID ; 
    15 EK0FW-CL-RSLV-BDT EK0FW-CL-RSLV-BDT ; 
    15 EK0FW-CL-RSLV-TDT EK0FW-CL-RSLV-TDT ; 
    15 EK0FW-CL-COMP-FL EK0FW-CL-COMP-FL ; 
    15 EK0FW-CL-ESC-ACT-CD EK0FW-CL-ESC-ACT-CD ; 
    15 EK0FW-CL-RSLV-CD EK0FW-CL-RSLV-CD ; 
    15 EK0FW-ZZ-SDT EK0FW-ZZ-SDT ; 
    15 EK0FW-ZZ-CHNG-DT EK0FW-ZZ-CHNG-DT ; 
  10 * char(1) ; 
  10 EK0FW-CAITEM EK0FW-CAITEM ; 
    15 EK0FW-CA-CL-CLM-NBR EK0FW-CA-CL-CLM-NBR ; 
  10 * char(1) ; 
  10 EK0FW-S-CL-CLM-NBR EK0FW-S-CL-CLM-NBR ; 
  10 EK0FW-S-CL-RSLV-USER-ID-1 EK0FW-S-CL-RSLV-USER-ID-1 ; 
  10 EK0FW-S-CL-RSLV-USER-ID-2 EK0FW-S-CL-RSLV-USER-ID-2 ; 
  10 * char(1) ; 
  10 EK0FW-VCLESX01-UPD-ROW EK0FW-VCLESX01-UPD-ROW ; 
    15 EK0FW-U-CL-CLM-NBR EK0FW-U-CL-CLM-NBR ; 
    15 EK0FW-U-CL-RSLV-USER-ID EK0FW-U-CL-RSLV-USER-ID ; 
    15 EK0FW-U-CL-RSLV-BDT EK0FW-U-CL-RSLV-BDT ; 
  10 * char(1) ; 
  10 EK0FW-TEMP-STG-DATA EK0FW-TEMP-STG-DATA ; 
    15 EK0FW-CURR-PAGE EK0FW-CURR-PAGE ; 
    15 EK0FW-MAX-PAGE EK0FW-MAX-PAGE ; 
    15 EK0FW-CURR-RCD EK0FW-CURR-RCD ; 
    15 EK0FW-MAX-RCD EK0FW-MAX-RCD ; 
  10 * char(1) ; 
  10 EK0FW-DATE-CCYYMMDD-BIN EK0FW-DATE-CCYYMMDD-BIN ; 
  10 * char(1) ; 
  10 EK0FW-DATE-CCYYMMDD EK0FW-DATE-CCYYMMDD ; 
    15 EK0FW-DATE-CC EK0FW-DATE-CC ; 
    15 EK0FW-DATE-YY EK0FW-DATE-YY ; 
    15 EK0FW-DATE-MM EK0FW-DATE-MM ; 
    15 EK0FW-DATE-DD EK0FW-DATE-DD ; 
  10 * char(1) ; 
  10 EK0FW-3-CHAR EK0FW-3-CHAR ; 
    15 EK0FW-1ST-CHAR EK0FW-1ST-CHAR ; 
    15 EK0FW-2ND-CHAR EK0FW-2ND-CHAR ; 
    15 EK0FW-3RD-CHAR EK0FW-3RD-CHAR ; 
  10 * char(1) ; 
  10 EK0FW-NUM-7 EK0FW-NUM-7 ; 
    15 EK0FW-CHA-7 EK0FW-CHA-7 ; 
  10 * char(1) ; 
  10 EK0FW-ZZ-FAMILY EK0FW-ZZ-FAMILY ; 
    15 ZZ-SDT ZZ-SDT ; 
    15 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    15 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    15 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    15 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end EK0FW00

//*** RECORD=EK0FW01 ****
// This is the main working storage record for EK0C.
// ***********************
Record EK0FW01 type basicRecord
  5 EK0FW-RCD-SIZE EK0FW-RCD-SIZE ; 
  5 EK0FW-TEMP-ITEM EK0FW-TEMP-ITEM ; 
    10 CL-CLM-NBR CL-CLM-NBR [10] ; 
    10 CL-RSLV-USER-ID CL-RSLV-USER-ID [10] ; 
    10 CL-RSLV-BDT CL-RSLV-BDT [10] ; 
    10 CL-RSLV-TDT CL-RSLV-TDT [10] ; 
    10 CL-COMP-FL CL-COMP-FL [10] ; 
    10 CL-ESC-ACT-CD CL-ESC-ACT-CD [10] ; 
    10 CL-RSLV-CD CL-RSLV-CD [10] ; 
    10 ZZ-SDT ZZ-SDT [10] ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT [10] ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT [10] ; 
    10 EK0FW-ROW-EXISTS EK0FW-ROW-EXISTS [10] ; 
    10 EK0FW-ROW-CHNGD EK0FW-ROW-CHNGD [10] ; 
    10 EK0FW-ROW-ADDED EK0FW-ROW-ADDED [10] ; 
    10 EK0FW-ROW-DELTD EK0FW-ROW-DELTD [10] ; 
end // end EK0FW01

//*** RECORD=EK0FW02 ****
// ************************************************************
// Working Storage for EK0C
// 
// This table holds information about the section of temp
// storage currently being displayed on the screen.
// ************************************************************
// ***********************
Record EK0FW02 type basicRecord
  5 EK0FW-CURR-RCD EK0FW-CURR-RCD ; 
  5 EK0FW-W02-IDX EK0FW-W02-IDX ; 
  5 EK0FW-SCREEN-CHNGD EK0FW-SCREEN-CHNGD ; 
  5 EK0FW-UPD-STG EK0FW-UPD-STG ; 
  5 EK0FW-TEMP-ITEM EK0FW-TEMP-ITEM ; 
    10 CL-CLM-NBR CL-CLM-NBR [10] ; 
    10 CL-RSLV-USER-ID CL-RSLV-USER-ID [10] ; 
    10 CL-RSLV-BDT CL-RSLV-BDT [10] ; 
    10 CL-RSLV-TDT CL-RSLV-TDT [10] ; 
    10 CL-COMP-FL CL-COMP-FL [10] ; 
    10 CL-ESC-ACT-CD CL-ESC-ACT-CD [10] ; 
    10 CL-RSLV-CD CL-RSLV-CD [10] ; 
    10 ZZ-SDT ZZ-SDT [10] ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT [10] ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT [10] ; 
    10 EK0FW-ROW-EXISTS EK0FW-ROW-EXISTS [10] ; 
    10 EK0FW-ROW-CHNGD EK0FW-ROW-CHNGD [10] ; 
    10 EK0FW-ROW-ADDED EK0FW-ROW-ADDED [10] ; 
    10 EK0FW-ROW-DELTD EK0FW-ROW-DELTD [10] ; 
end // end EK0FW02

// 1st of 3
DataItem EK0FW-1ST-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd of 3
DataItem EK0FW-2ND-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3-CHAR Work Area
DataItem EK0FW-3-CHAR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd of 3
DataItem EK0FW-3RD-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// allow user to use screen?
DataItem EK0FW-ALLOW-ACCESS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0FW-BYPASS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work area CL-CLM-NBR
DataItem EK0FW-CA-CL-CLM-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area CAITEM
DataItem EK0FW-CAITEM char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 7 BYTE Character field
DataItem EK0FW-CHA-7 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-CLM-NBR
DataItem EK0FW-CL-CLM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-COMP-FL
DataItem EK0FW-CL-COMP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-ESC-ACT-CD
DataItem EK0FW-CL-ESC-ACT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-RSLV-BDT
DataItem EK0FW-CL-RSLV-BDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-RSLV-CD
DataItem EK0FW-CL-RSLV-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-RSLV-TDT
DataItem EK0FW-CL-RSLV-TDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-RSLV-USER-ID
DataItem EK0FW-CL-RSLV-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// column index
DataItem EK0FW-COL-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page on screen
DataItem EK0FW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current temp storage records
DataItem EK0FW-CURR-RCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date century
DataItem EK0FW-DATE-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 Date Format Numeric
DataItem EK0FW-DATE-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 Date Format Binary
DataItem EK0FW-DATE-CCYYMMDD-BIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date day
DataItem EK0FW-DATE-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date month
DataItem EK0FW-DATE-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date year
DataItem EK0FW-DATE-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of scan flag
DataItem EK0FW-END-SCAN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of screen flag
DataItem EK0FW-END-SCREEN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of entered detail lines
DataItem EK0FW-LINE-COUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line index
DataItem EK0FW-LINE-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum pages
DataItem EK0FW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum temp storage records
DataItem EK0FW-MAX-RCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// program mode (a,c,i)
DataItem EK0FW-MODE-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 7 DIGIT Numeric field
DataItem EK0FW-NUM-7 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// was a popup displayed? Y/N
DataItem EK0FW-POPUP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tells what to PopUp
DataItem EK0FW-POPUP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Modified Switch
DataItem EK0FW-RCD-SIZE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0FW-ROW-ADDED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0FW-ROW-CHNGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0FW-ROW-DELTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0FW-ROW-EXISTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search CL-CLM-NBR
DataItem EK0FW-S-CL-CLM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OVERRIDE CL-RSLV-USER-ID
DataItem EK0FW-S-CL-RSLV-USER-ID-1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AUTHORIZE CL-RSLV-USER-ID
DataItem EK0FW-S-CL-RSLV-USER-ID-2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen index
DataItem EK0FW-SCR-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size of screen table
DataItem EK0FW-SCR-LINES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0FW-SCREEN-CHNGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0FW-TEMP-ITEM char(380)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage control data
DataItem EK0FW-TEMP-STG-DATA char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-CLM-NBR
DataItem EK0FW-U-CL-CLM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-RSLV-BDT
DataItem EK0FW-U-CL-RSLV-BDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-RSLV-USER-ID
DataItem EK0FW-U-CL-RSLV-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0FW-UPD-STG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0FW-VALID-KEY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0FW-VCLESX01-ROW char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0FW-VCLESX01-UPD-ROW char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0FW-W02-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem EK0FW-WRK-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ZZ-CHNG-DT
DataItem EK0FW-ZZ-CHNG-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0FW-ZZ-FAMILY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZZ-SDT
DataItem EK0FW-ZZ-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

