package ek0a;
import as1.common.*;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ek.common.*;
import iv.common.*;
import ku.common.*;
import op.common.*;
import sm.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=EK0A ****
// ************************************************************
// *        Maintenance History                               *
// ************************************************************
// *    Date     Userid    Description                        *
// * ----------  ------  ------------------------------------ *
// * 03-23-1998  HMACAL  Added for Claims Escalation function *
// * 06-16-1998  HMACAL  Regenerated to pick up new EK0EW00   *
// * 06-18-1998  HMACAL  Changed Options 4 and 5 to check     *
// *                     Inquire access only                  *
// ************************************************************
// *********************
Program EK0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0AW01 CL0AW01; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  EK0EW00 EK0EW00; // record
  EKWREC EKWREC; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCLRES01 VCLRES01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YUATBL {deleteAfterUse = yes}; // table
  use EK0AM.EK0AM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    EK0A001: EK0A001();

     /* ------------------- begin flow cl0a001 --------------*/

    goto EK0A005; /* to converse claim menu map*/

     /* ------------------- end flow cl0a001 ---------------*/

    EK0A005: EK0A005();

     /* --------------begin flow stage EK0A005--------------*/

    if (EK0AM001.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto EK0A005; /* errors/msg's - display menu*/
    else
      COMMAREA.CAUSERA = CLWREC.CLAGROUP;
      COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;
    end

     /* --------------end flow stage EK0A005-----------------*/

  end // end main
end // end EK0A

// init claims menu processing
Function EK0A001()
   /*  */
   /*  */
   /*  */

  set TA1REC empty;
  if (COMMAREA.CASYSINT != "CSP")
    set COMMAREA empty;
    COMMAREA.CASYSINT = "CSP";
    COMMAREA.CAUSERID = "DEMO  ";
    COMMAREA.CAFROMAP = "EK0A";
    COMMAREA.CACURRAP = "EK0A";
    COMMAREA.CAADD = "YYYYYYYYYYY";
    COMMAREA.CACHG = "YYYYYYYYYYY";
    COMMAREA.CADEL = "YYYYYYYYYYY";
    COMMAREA.CAINQ = "YYYYYYYYYYY";
  end

  XSENTRY(); /* appl entry security*/

  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/

  converseVar.commitOnConverse = 1;
  VGVar.handleHardIOErrors = 1;

  set EK0AM001 initial;
  set EK0EW00 empty;
  set EKWREC empty;

  CLWREC.CLWGROUP = COMMAREA.CAUSERA;
   /* IF COMMAREA.CAFRMSYS EQ 'KL';*/
   /* MOVE CLWREC.CLWEZMNO TO EZEMNO;*/
   /* END;*/

   /* MOVE 'M' TO CLWREC.CLWSETBY;      /* init set-by flag to memu*/

  EK0AM001.XXXRVNBR = "1";
  EK0AM001.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
end // end EK0A001

// Converse Escalation Menu
Function EK0A005()
   /*  */
   /*  */
   /*  */

  converse EK0AM001 ;

  set CLWREC empty;
  set EK0EW00 empty;
  set EKWREC empty;
  EK0EW00.EK0EW-WRK-IDX = 0;
  EK0EW00.EK0EW-COL-IDX = 0;
  EK0EW00.EK0EW-SV-CL-CLM-NBR = 0;
  EK0EW00.EK0EW-SV-IV-IVC-ID = 0;
  EK0EW00.EK0EW-SV-OP-CUST-ORD-ID = 0;
  EK0EW00.EK0EW-SV-OP-NIKE-ORD-ID = 0;
  EK0EW00.EK0EW-CU-CO-ID = 0;
  EK0EW00.EK0EW-CU-STOR-ID = 0;
  EK0EW00.EK0EW-XNX-DEPT-ID-XREF = 0;
  EK0EW00.EK0EW-CL-CLM-NBR = 0;
  EK0EW00.EK0EW-CL-EST-CLM-VAL = 0;
  EK0EW00.EK0EW-SM-SREP-ID = 0;
  EK0EW00.EK0EW-IV-IVC-ID = 0;
  EK0EW00.EK0EW-CL-TOT-CLM-QTY = 0;
  EK0EW00.EK0EW-S-CU-CO-ID = 0;
  EK0EW00.EK0EW-S-CU-STOR-ID = 0;
  EK0EW00.EK0EW-S-XNX-DEPT-ID-XREF = 0;
  EK0EW00.EK0EW-S-TOT-CLAIM-AMT = 0;
  EK0EW00.EK0EW-S-CL-CLM-NBR = 0;
  EK0EW00.EK0EW-S-SM-SREP-ID = 0;
  EK0EW00.EK0EW-S-IV-IVC-ID = 0;
  EK0EW00.EK0EW-S-CL-EST-CLM-VAL = 0;
  EK0EW00.EK0EW-DATE-CCYYMMDD-BIN = 0;

  EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
  EKWREC.EKW-CAFROMAP = "EK0A";
  COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

  EK0AM001.VAGen_EZEMSG = " ";
  set EK0AM001.CLWMNOPT normal;

   /* --------------- check aid byte ---------------------*/

  EK0AS01(); /* check standard pf keys*/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    EK0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

  if (EK0AM001.VAGen_EZEMSG != " " || 
  converseVar.validationMsgNum != 0)
    exit stack;
  end


   /* --------   check for fastpath  --------------*/

  if (converseVar.eventKey is enter) /* normal 'enter'*/
    if (EK0AM001.CATOAP != " ")
      COMMAREA.CATOAP = EK0AM001.CATOAP;
      COMMAREA.CAITEM = EK0AM001.CAITEM;
      XPCL006(); /* check item for length and type*/
      if (CLXREC.CLXVITMF == "N") /* ITEM FIELD NOT VALID*/
        set EK0AM001.CATOAP cursor, modified, bold;
        set EK0AM001.CAITEM modified, bold;
        converseLib.validationFailed(285); /* ITEM FIELD or OPTION field invalid*/
        CLXREC.CLXERRF = "Y";
        exit stack;
     /* ELSE;*/
     /* IF COMMAREA.CAITEM NE ' ';*/
     /* SET CLAREC EMPTY;*/
     /* MOVE CLWREC.CLWITM1N TO CLAREC.CLACLMNB;*/
     /* CALL IO1160 'S ',SQLCA,CLAREC (NOMAPS,NONCSP;/* get claim*/
     /* END;*/
      end
      CLWREC.CLWMNOPT = 4;
      CLWREC.CLWACTIV = "I";
      COMMAREA.CAUSERA = CLWREC.CLAGROUP;
     /* PERFORM XPCL002;             /* check security/xfer*/
      XSEXIT();
      exit stack; /* transfer failed*/
    else
      if (EK0AM001.CAITEM != " ") /* fastpath request*/
        set EK0AM001.CATOAP cursor, modified, bold;
        converseLib.validationFailed(1); /* ITEM FIELD NOT VALID UNLESS OPTION IS*/
                                   /* ENTERED*/
        CLXREC.CLXERRF = "Y";
        CLXREC.CLXEDITF = "Y";
        exit stack;
      end
    end
  end

    /* validate map selection number*/

  if (EK0AM001.CLWMNOPT > 5 ||  /* Number of available options*/
  EK0AM001.CLWMNOPT < 1)       
    set EK0AM001.CLWMNOPT cursor, bold;
    converseLib.validationFailed(8); /* INVALID SELECTION*/
    exit stack;
  end

   /* Check options restricted to Security Users only*/

  if (EK0AM001.CLWMNOPT == 1 ||  /* Claim Distribution Tbl Maint.*/
  EK0AM001.CLWMNOPT == 2 ||      /* Claim Rsn Esc Tbl Maint.*/
  EK0AM001.CLWMNOPT == 3)        /* Resolver Escalation Tbl Maint*/

    set VCLRES01 empty; /* ;*/

    VCLRES01.XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;
    VCLRES01.CL-CR-ANLS-USER-ID = " ";

    EK0AS-VCLRES01-S(); /* Verify if Security User*/

    if (SQLCA.VAGen_SQLCODE == 0)
        /* continue*/
    else
      set EK0AM001.CLWMNOPT cursor, bold;
      converseLib.validationFailed(15); /* User is not allowed to use this option*/
      exit stack;
    end
  end

   /* *********************************************************/
   /* Validate option 1*/
   /* *********************************************************/

  if (EK0AM001.CLWMNOPT == 1)
    if (CAALVL[1] == "Y") /* Add Claims Distribution*/

    else
      set EK0AM001.CLWMNOPT cursor, bold;
      converseLib.validationFailed(15);
      exit stack;
    end
  end

   /* *********************************************************/
      /* validate option 2*/
   /* *********************************************************/

  if (EK0AM001.CLWMNOPT == 2)
    if (CAALVL[1] == "Y") /* Add Reason Escalation*/
        /* next sentence*/
    else
      converseLib.validationFailed(15); /* selection is not valid for user ID*/
      set EK0AM001.CLWMNOPT cursor, bold;
      exit stack;
    end
  end

   /* *********************************************************/
   /* Validate option 3*/
   /* *********************************************************/

  if (EK0AM001.CLWMNOPT == 3) /* Add Resolver Escalation*/
    if (CAALVL[1] == "Y")
        /* next sentence*/
    else
      set EK0AM001.CLWMNOPT cursor, bold;
      converseLib.validationFailed(15);
      exit stack;
    end
  end

   /* *********************************************************/
   /* Validate option 4*/
   /* *********************************************************/

  if (EK0AM001.CLWMNOPT == 4) /* Inquire/Escalate claims*/
    if (COMMAREA.CAINQFL == "Y")
        /* next sentence*/
    else
      set EK0AM001.CLWMNOPT cursor, bold;
      converseLib.validationFailed(15);
      exit stack;
    end
  end

   /* *********************************************************/
   /* Validate option 5*/
   /* *********************************************************/

  if (EK0AM001.CLWMNOPT == 5) /* Claims Resolver Information*/
    if (COMMAREA.CAINQFL == "Y")
        /* next sentence*/
    else
      set EK0AM001.CLWMNOPT cursor, bold;
      converseLib.validationFailed(15);
      exit stack;
    end
  end

   /* Transfer to selected option*/

  if (converseVar.eventKey is enter)
    COMMAREA.CAFROMAP = "EK0A";
    CLWREC.CLWMNOPT = EK0AM001.CLWMNOPT;
    if (EK0AM001.CLWMNOPT == 1 || 
    EK0AM001.CLWMNOPT == 2 || 
    EK0AM001.CLWMNOPT == 3 || 
    EK0AM001.CLWMNOPT == 5)
      CLWREC.CLWACTIV = "A";
    else
      CLWREC.CLWACTIV = "C";
    end
    if (EK0AM001.CLWMNOPT == 1)
      COMMAREA.CATOAP = "EK0B";
    else
      if (EK0AM001.CLWMNOPT == 2)
        COMMAREA.CATOAP = "EK0C";
      else
        if (EK0AM001.CLWMNOPT == 3)
          COMMAREA.CATOAP = "EK0D";
        else
          if (EK0AM001.CLWMNOPT == 4)
            COMMAREA.CATOAP = "EK0E";
          else
            if (EK0AM001.CLWMNOPT == 5)
              COMMAREA.CATOAP = "EK0F";
            else
              set EK0AM001.CLWMNOPT cursor, bold;
              converseLib.validationFailed(19); /* INVALID OPTION*/
            end
          end
        end
      end
    end
    if (EK0AM001.VAGen_EZEMSG == " " && 
    converseVar.validationMsgNum == 0)

      XSEXIT();
    end

    converseLib.validationFailed(234); /* OPTION not available*/

    exit stack;
  end

end // end EK0A005

// Select VCLRES01 row
Function EK0AS-VCLRES01-S()
  CLXREC.CLXCPROC = "EK0AS-VCLRES01-S";

  try
    call "VCLRES01" ("S ", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
  end

end // end EK0AS-VCLRES01-S

// check standard entry keys
Function EK0AS01()
   /* Check PF Key pressed*/
   /*  */
   /*  */

  if (converseVar.eventKey is enter) /* ENTER - return to process*/
    return;
  else
    if (converseVar.eventKey is pa2) /* PA2 - exit application*/
      exit stack;
    else
      if (converseVar.eventKey is pf1) /* PF1 - help*/
        XSPF1();
        exit stack;
      else
        if (converseVar.eventKey is pf3) /* PF3 - return to prior menu*/
          COMMAREA.CATOAP = "KL0A";
          XSEXIT();
        else
          if (converseVar.eventKey is pf2) /* PF2 - go to 'IV0A'*/
            COMMAREA.CATOAP = "IV0A";
              /* PERFORM XPCL002;*/
            XSEXIT();
          else
            converseLib.validationFailed(2); /* invalid PF key*/
          end
        end
      end
    end
  end
end // end EK0AS01

