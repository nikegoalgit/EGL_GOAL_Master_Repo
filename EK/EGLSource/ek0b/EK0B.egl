package ek0b;
import as1.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import iv.common.*;
import ku.common.*;
import op.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=EK0B ****
// ************************************************************
// 
//       EK0B - Claim Distribution Table Maintenance
//       -------------------------------------------
// 
// General program explanation and notes:
// 
// This program allows the user to perform add, change and
// delete rows in selected Claims Table.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//    Date     Userid    Description
// ----------  ------  ----------------------------------------
// 04-14-1998  HMACAL  Application creation
// 06-22-1998  HMACAL  Modified to allow any Security User to
//                     be able to add, change, delete and
//                     inquire on another Security User's
//                     resolver information (per SKELL1)
// 09-24-1998  HMACAL  Modified to allow Warehouse Code 99 to
//                     be entered as valid code for this table.
// *********************
Program EK0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CLAREC CLAREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  EK0BW00 EK0BW00; // record
  EK0BW01 EK0BW01; // record
  EK0BW02 EK0BW02; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUYREC KUYREC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  VCLDIS01 VCLDIS01; // record
  VCLRES01 VCLRES01; // record
  VSTORE02 VSTORE02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use CL00ENU {deleteAfterUse = yes}; // table
  use XCETBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use EK0BM.EK0BM001,  // forms
      EK0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    EK0B-00000: EK0B-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set EK0BM001 initial; /* M001 input/output*/
    set EK0BW00 empty; /* Working storage*/
    EK0BW00.EK0BW-SCR-LINES = 10;
    EK0BW00.EK0BW-MODE-IND = "I"; /* Default to Inquiry*/
    set EK0BW01 empty; /* Working storage*/
    set EK0BW02 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EK0B0000; /* Converse the main process*/
    EK0B0000: EK0B0000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EK0B0000; /* Converse the main process*/


  end // end main
end // end EK0B

// Application initialization
Function EK0B-00000()
   /* -------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* -------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* -------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* -------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* -------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* -------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    CLWREC.CLWGROUP = COMMAREA.CAUSERA; /* Restore work record*/

    if (CLWREC.CLWGROUP == " ") /* If no data passed*/
      set CLWREC empty;
    end

  else
    set CLWREC empty; /* Initialize work record*/

  end

   /* -------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* -------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end EK0B-00000

// Main process of Application
Function EK0B0000()
  EK0BS-PURGE-QUEUE(); /* Purge temp storage queue*/

  EK0B1000(); /* Obtain the data to display*/

  EK0B2000(); /* Load temp storage with data*/

  EK0B3000(); /* Display data to screen*/
                                  /* Process adds/changes*/


   /* **************************************************************/
                     /* END  EK0B0000*/
   /* **************************************************************/
end // end EK0B0000

// Main process to display a map
Function EK0B1000()
   /*  */
   /* This process set the initial screen-defined field attributes*/
   /*  */

  set EK0BM001 initial; /* Clear out map*/

  EK0BM001.EK0BM-CURRENT-DATE = VGVar.currentShortGregorianDate;

  EK0BW00.EK0BW-SUPER-USER-FL = "N";
  EK0BW00.EK0BW-ALLOW-ACCESS-FL = "Y";

   /* Determine if the current screen user is a Security User*/

  set VCLRES01 empty;

  VCLRES01.XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;
  VCLRES01.CL-CR-ANLS-USER-ID = " ";

  EK0BS-VCLRES01-S(); /* Select Unique VCLRES01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VCLRES01.CL-SPR-USER-FL == "S") /* Super Security User*/
      EK0BW00.EK0BW-SUPER-USER-FL = "S";
    else /* Regular Security User*/
      EK0BW00.EK0BW-SUPER-USER-FL = "Y";
    end
  else /* current screen user is not a security User at all*/
    EK0BW00.EK0BW-ALLOW-ACCESS-FL = "N";
    converseLib.validationFailed(784); /* User not allowed to use this function*/
    set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID bold, skip;

    EK0BS-PURGE-QUEUE(); /* Purge temp storage*/

    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT(); /* Exit to previous application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;

  end

   /* Set default screen values*/

  if (EK0BW00.EK0BW-S-XXX-SCRTY-USER-ID == " ")
    EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;
    EK0BW00.EK0BW-S-XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;
  else
    EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID = EK0BW00.EK0BW-S-XXX-SCRTY-USER-ID;
  end

  EK0BM001.EK0BM-S-ALL = " ";
  EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID = " ";
  EK0BM001.EK0BM-S-ANLS-USER-NAME = " ";
  EK0BM001.EK0BM-S-CU-CO-ID = 0;
  EK0BM001.EK0BM-S-CU-STOR-ID = 0;
  EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF = 0;
  EK0BM001.EK0BM-S-XGP-GPC-CD = " ";
  EK0BM001.EK0BM-S-YCR-CLM-RSN-CD = " ";
  EK0BM001.EK0BM-S-XCE-CR-ANLS-CD = " ";
  EK0BM001.EK0BM-S-XSO-SLS-OFC-ID = " ";
  EK0BM001.EK0BM-S-SM-SREP-ID = 0;
  EK0BM001.EK0BM-S-SM-SAGCY-ID = " ";
  EK0BM001.EK0BM-S-XWH-WHSE-CD = " ";
  EK0BM001.EK0BM-S-TF-CARR-CD = " ";
  EK0BM001.EK0BM-S-XPC-PROD-CAT-CD = " ";
  EK0BM001.EK0BM-S-CL-XCEP-FL = " ";
  EK0BM001.EK0BM-S-CL-RTN-FL = " ";
  EK0BM001.EK0BM-S-YCT-CLM-TYP-CD = " ";
  EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 = " ";
  EK0BM001.EK0BM-S-CL-INSP-FL = " ";

  if (EK0BW00.EK0BW-SUPER-USER-FL == "S") /* Super Security User*/
    set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID normal;
    set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID underline;
  else /* 'Y'      /* Regular Security User*/
    set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID initialAttributes;
  end

  if (EK0BW00.EK0BW-ALLOW-ACCESS-FL == "Y")
    set EK0BM001.EK0BM-S-ALL initialAttributes;
    set EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID initialAttributes;
    set EK0BM001.EK0BM-S-ANLS-USER-NAME initialAttributes;
    set EK0BM001.EK0BM-S-CU-CO-ID initialAttributes;
    set EK0BM001.EK0BM-S-CU-STOR-ID initialAttributes;
    set EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF initialAttributes;
    set EK0BM001.EK0BM-S-XGP-GPC-CD initialAttributes;
    set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD initialAttributes;
    set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD initialAttributes;
    set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID initialAttributes;
    set EK0BM001.EK0BM-S-SM-SREP-ID initialAttributes;
    set EK0BM001.EK0BM-S-SM-SAGCY-ID initialAttributes;
    set EK0BM001.EK0BM-S-XWH-WHSE-CD initialAttributes;
    set EK0BM001.EK0BM-S-TF-CARR-CD initialAttributes;
    set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD initialAttributes;
    set EK0BM001.EK0BM-S-CL-XCEP-FL initialAttributes;
    set EK0BM001.EK0BM-S-CL-RTN-FL initialAttributes;
    set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD initialAttributes;
    set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 initialAttributes;
    set EK0BM001.EK0BM-S-CL-INSP-FL initialAttributes;
  else
    set EK0BM001.EK0BM-S-ALL skip, noHighLight;
    set EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID skip, noHighLight;
    set EK0BM001.EK0BM-S-ANLS-USER-NAME skip, noHighLight;
    set EK0BM001.EK0BM-S-CU-CO-ID skip, noHighLight;
    set EK0BM001.EK0BM-S-CU-STOR-ID skip, noHighLight;
    set EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF skip, noHighLight;
    set EK0BM001.EK0BM-S-XGP-GPC-CD skip, noHighLight;
    set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD skip, noHighLight;
    set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD skip, noHighLight;
    set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID skip, noHighLight;
    set EK0BM001.EK0BM-S-SM-SREP-ID skip, noHighLight;
    set EK0BM001.EK0BM-S-SM-SAGCY-ID skip, noHighLight;
    set EK0BM001.EK0BM-S-XWH-WHSE-CD skip, noHighLight;
    set EK0BM001.EK0BM-S-TF-CARR-CD skip, noHighLight;
    set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD skip, noHighLight;
    set EK0BM001.EK0BM-S-CL-XCEP-FL skip, noHighLight;
    set EK0BM001.EK0BM-S-CL-RTN-FL skip, noHighLight;
    set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD skip, noHighLight;
    set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 skip, noHighLight;
    set EK0BM001.EK0BM-S-CL-INSP-FL skip, noHighLight;
  end

  EK0BW00.EK0BW-SCR-IDX = 1; /* Init screen index*/

  while (EK0BW00.EK0BW-SCR-IDX <= EK0BW00.EK0BW-SCR-LINES)

    set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] initialAttributes;
    set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] initialAttributes;

    EK0BW00.EK0BW-SCR-IDX = EK0BW00.EK0BW-SCR-IDX + 1;
  end

   /* **************************************************************/
                     /* END  EK0B1000*/
   /* **************************************************************/
end // end EK0B1000

// Load Temp storage
Function EK0B2000()
  if (EK0BW00.EK0BW-SUPER-USER-FL == "N")
    EK0BW00.EK0BW-CURR-PAGE = 1;
    EK0BW00.EK0BW-MAX-PAGE = 1;
    EK0BM001.EK0BM-CURR-PAGE = 1;
    EK0BM001.EK0BM-MAX-PAGE = 1;
    return;
  end

   /*  */
   /* Load all the resolver information associated with the Security User*/
   /*  */
  EK0BW00.EK0BW-MAX-PAGE = 0;
  EK0BW00.EK0BW-MAX-RCD = 0;

  set EK0BW02 empty;
  set TA5REC empty;

  TA5REC.TA5APPID = "EK0B"; /* Application*/

  EK0BS-PURGE-QUEUE(); /* Purge temp storage*/

   /* If No Search criteria is entered, no detail lines will be displayed*/

  if (EK0BW00.EK0BW-S-ALL == " " && 
  EK0BW00.EK0BW-S-CL-CR-ANLS-USER-ID == " " && 
  EK0BW00.EK0BW-S-CU-CO-ID == 0 && 
  EK0BW00.EK0BW-S-CU-STOR-ID == 0 && 
  EK0BW00.EK0BW-S-XNX-DEPT-ID-XREF == 0 && 
  EK0BW00.EK0BW-S-XGP-GPC-CD == " " && 
  EK0BW00.EK0BW-S-YCR-CLM-RSN-CD == " " && 
  EK0BW00.EK0BW-S-XCE-CR-ANLS-CD == " " && 
  EK0BW00.EK0BW-S-XSO-SLS-OFC-ID == " " && 
  EK0BW00.EK0BW-S-SM-SREP-ID == 0 && 
  EK0BW00.EK0BW-S-SM-SAGCY-ID == " " && 
  EK0BW00.EK0BW-S-XWH-WHSE-CD == " " && 
  EK0BW00.EK0BW-S-TF-CARR-CD == " " && 
  EK0BW00.EK0BW-S-XPC-PROD-CAT-CD == " " && 
  EK0BW00.EK0BW-S-CL-XCEP-FL == " " && 
  EK0BW00.EK0BW-S-CL-RTN-FL == " " && 
  EK0BW00.EK0BW-S-YCT-CLM-TYP-CD == " " && 
  EK0BW00.EK0BW-S-YCS-CLM-STAT-CD1 == " " && 
  EK0BW00.EK0BW-S-CL-INSP-FL == " ")

    EK0BM001.EK0BM-S-ANLS-USER-NAME = " ";

    return;

  end

   /* Load Search Criteria*/

  EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID = EK0BW00.EK0BW-S-XXX-SCRTY-USER-ID;
  EK0BM001.EK0BM-S-ALL = EK0BW00.EK0BW-S-ALL;
  EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID = EK0BW00.EK0BW-S-CL-CR-ANLS-USER-ID;

  if (EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID > " ")
    set KUYREC empty;

    KUYREC.XXXUSRID = EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID;

    EK0BS-VSVREP01-SA(); /* Select Unique VSVREP01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0BM001.EK0BM-S-ANLS-USER-NAME = KUYREC.KUYREPNM;
    else
      EK0BM001.EK0BM-S-ANLS-USER-NAME = " ";
    end
  else
    EK0BM001.EK0BM-S-ANLS-USER-NAME = " ";
  end

  EK0BM001.EK0BM-S-CU-CO-ID = EK0BW00.EK0BW-S-CU-CO-ID;
  EK0BM001.EK0BM-S-CU-STOR-ID = EK0BW00.EK0BW-S-CU-STOR-ID;
  EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF = EK0BW00.EK0BW-S-XNX-DEPT-ID-XREF;
  EK0BM001.EK0BM-S-XGP-GPC-CD = EK0BW00.EK0BW-S-XGP-GPC-CD;
  EK0BM001.EK0BM-S-YCR-CLM-RSN-CD = EK0BW00.EK0BW-S-YCR-CLM-RSN-CD;
  EK0BM001.EK0BM-S-XCE-CR-ANLS-CD = EK0BW00.EK0BW-S-XCE-CR-ANLS-CD;
  EK0BM001.EK0BM-S-XSO-SLS-OFC-ID = EK0BW00.EK0BW-S-XSO-SLS-OFC-ID;
  EK0BM001.EK0BM-S-SM-SREP-ID = EK0BW00.EK0BW-S-SM-SREP-ID;
  EK0BM001.EK0BM-S-SM-SAGCY-ID = EK0BW00.EK0BW-S-SM-SAGCY-ID;
  EK0BM001.EK0BM-S-XWH-WHSE-CD = EK0BW00.EK0BW-S-XWH-WHSE-CD;
  EK0BM001.EK0BM-S-TF-CARR-CD = EK0BW00.EK0BW-S-TF-CARR-CD;
  EK0BM001.EK0BM-S-XPC-PROD-CAT-CD = EK0BW00.EK0BW-S-XPC-PROD-CAT-CD;
  EK0BM001.EK0BM-S-CL-XCEP-FL = EK0BW00.EK0BW-S-CL-XCEP-FL;
  EK0BM001.EK0BM-S-CL-RTN-FL = EK0BW00.EK0BW-S-CL-RTN-FL;
  EK0BM001.EK0BM-S-YCT-CLM-TYP-CD = EK0BW00.EK0BW-S-YCT-CLM-TYP-CD;
  EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 = EK0BW00.EK0BW-S-YCS-CLM-STAT-CD1;
  EK0BM001.EK0BM-S-CL-INSP-FL = EK0BW00.EK0BW-S-CL-INSP-FL;

   /* Get all Resolvers assigned to Security User Id and Load into table*/

  EK0BW00.EK0BW-SCRTY-RSLVR-TBL = " ";
  EK0BW00.EK0BW-WRK-IDX = 1;

  set VCLRES01 empty;

  VCLRES01.XXX-SCRTY-USER-ID = EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID;

  EK0BS-VCLRES01-S2(); /* Declare/Open VCLRES01 cursor 2*/

  while (SQLCA.VAGen_SQLCODE == 0)

    EK0BS-VCLRES01-N2(); /* Fetch VCLRES01 cursor 2*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (VCLRES01.CL-CR-ANLS-USER-ID > " ")
        EK0BW00.EK0BW-RESOLVER-ID[EK0BW-WRK-IDX] = VCLRES01.CL-CR-ANLS-USER-ID;

        EK0BW00.EK0BW-WRK-IDX = EK0BW00.EK0BW-WRK-IDX + 1;
        if (EK0BW00.EK0BW-WRK-IDX == 200)
          SQLCA.VAGen_SQLCODE = 100;
        end

      end
    end

  end

  EK0BS-VCLRES01-C2(); /* Close VCLRES01 cursor 2*/


  EK0BW02.EK0BW-W02-IDX = 1;

  EK0B2100(); /* Get associated VCLDIS01 rows*/

  if (EK0BW02.EK0BW-ROW-EXISTS[1] > " ") /* TSQ not empty*/
    EK0BW01.EK0BW-TEMP-ITEM = EK0BW02.EK0BW-TEMP-ITEM;
    TA5REC.TA5FNCCD = "A";

    EK0BS-CALL-TA0050(); /* Write previous to queue*/

    set EK0BW02 empty; /* Clear record*/

    EK0BW00.EK0BW-MAX-PAGE = EK0BW00.EK0BW-MAX-PAGE + 1;
  end

   /* If max page is zero, no data was returned*/

  if (EK0BW00.EK0BW-MAX-PAGE == 0)
    EK0BW00.EK0BW-CURR-PAGE = 0;
    set EK0BM001.EK0BM-PF12-CONFIRM invisible, skip;
    set EK0BM001.EK0BM-PF10-CHG invisible, skip;
    set EK0BM001.EK0BM-PF11-DEL invisible, skip;
    set EK0BM001.EK0BM-PF9-ADD skip, noHighLight;
    converseLib.validationFailed(350); /* No data found*/
  end


  EK0BW00.EK0BW-CURR-PAGE = 001;
  EK0BW00.EK0BW-CURR-RCD = 001;

  set EK0BW02 empty;

   /* **************************************************************/
                     /* END  EK0B2000*/
   /* **************************************************************/
end // end EK0B2000

// Get associated VCLDIS01
Function EK0B2100()
   /* Display associated Distribution rows*/
   /* Note:  Depending on whether a valid Reason Code was entered, or,*/
   /* a generic Reason Code was entered, or, no Reason Code was*/
   /* entered, on the Select Criteria, use the appropriate SCAN*/
   /* function to display the corresponding sort listing*/

  set VCLDIS01 empty;

  if (EK0BW00.EK0BW-RSN-PREFIX == " ")
    EK0BS-VCLDIS01-S2(); /* Declare/Open VCLDIS01 cursor 2*/
  else
    if (EK0BW00.EK0BW-RSN-PREFIX == "C")
      EK0BS-VCLDIS01-S3(); /* Declare/Open VCLDIS01 cursor 3*/
    else
      if (EK0BW00.EK0BW-RSN-PREFIX == "F")
        EK0BS-VCLDIS01-S4(); /* Declare/Open VCLDIS01 cursor 4*/
      else /* Prefix EQ 'T'*/
        EK0BS-VCLDIS01-S5(); /* Declare/Open VCLDIS01 cursor 5*/
      end
    end
  end

  while (SQLCA.VAGen_SQLCODE == 0)

    if (EK0BW00.EK0BW-RSN-PREFIX == " ")
      EK0BS-VCLDIS01-N2(); /* Fetch Next cursor 2*/
    else
      if (EK0BW00.EK0BW-RSN-PREFIX == "C")
        EK0BS-VCLDIS01-N3(); /* Fetch Next cursor 3*/
      else
        if (EK0BW00.EK0BW-RSN-PREFIX == "F")
          EK0BS-VCLDIS01-N4(); /* Fetch Next cursor 4*/
        else /* Prefix EQ 'T'*/
          EK0BS-VCLDIS01-N5(); /* Fetch Next cursor 5*/
        end
      end
    end

    EK0BW00.EK0BW-BYPASS-FL = "N";

    if (SQLCA.VAGen_SQLCODE == 0)

      EK0B2200(); /* Determine if recd to be accepted*/

      if (EK0BW00.EK0BW-BYPASS-FL == "N")

        if (EK0BW02.EK0BW-W02-IDX > EK0BW00.EK0BW-SCR-LINES)
          EK0BW01.EK0BW-TEMP-ITEM = EK0BW02.EK0BW-TEMP-ITEM;
          TA5REC.TA5FNCCD = "A";

          EK0BS-CALL-TA0050(); /* Write previous to queue*/

          set EK0BW02 empty; /* Clear record*/

          EK0BW02.EK0BW-W02-IDX = 1;

          EK0BW00.EK0BW-MAX-PAGE = EK0BW00.EK0BW-MAX-PAGE + 1;
        end

        EK0BW02.EK0BW-ROW-EXISTS[EK0BW-W02-IDX] = "Y";
        EK0BW02.EK0BW-ROW-CHNGD[EK0BW-W02-IDX] = "N";
        EK0BW02.EK0BW-ROW-ADDED[EK0BW-W02-IDX] = "N";
        EK0BW02.EK0BW-ROW-DELTD[EK0BW-W02-IDX] = "N";

        EK0BW02.CL-CR-ANLS-USER-ID[EK0BW-W02-IDX] = VCLDIS01.CL-CR-ANLS-USER-ID;
        EK0BW02.XSO-SLS-OFC-ID[EK0BW-W02-IDX] = VCLDIS01.XSO-SLS-OFC-ID;
        EK0BW02.XWH-WHSE-CD[EK0BW-W02-IDX] = VCLDIS01.XWH-WHSE-CD;
        EK0BW02.CU-CO-ID[EK0BW-W02-IDX] = VCLDIS01.CU-CO-ID;
        EK0BW02.CU-STOR-ID[EK0BW-W02-IDX] = VCLDIS01.CU-STOR-ID;
        EK0BW02.XNX-DEPT-ID-XREF[EK0BW-W02-IDX] = VCLDIS01.XNX-DEPT-ID-XREF;
        EK0BW02.XGP-GPC-CD[EK0BW-W02-IDX] = VCLDIS01.XGP-GPC-CD;
        EK0BW02.YCR-CLM-RSN-CD[EK0BW-W02-IDX] = VCLDIS01.YCR-CLM-RSN-CD;
        EK0BW02.YCT-CLM-TYP-CD[EK0BW-W02-IDX] = VCLDIS01.YCT-CLM-TYP-CD;
        EK0BW02.YCS-CLM-STAT-CD1[EK0BW-W02-IDX] = VCLDIS01.YCS-CLM-STAT-CD1;
        EK0BW02.SM-SREP-ID[EK0BW-W02-IDX] = VCLDIS01.SM-SREP-ID;
        EK0BW02.SM-SAGCY-ID[EK0BW-W02-IDX] = VCLDIS01.SM-SAGCY-ID;
        EK0BW02.TF-CARR-CD[EK0BW-W02-IDX] = VCLDIS01.TF-CARR-CD;
        EK0BW02.XCE-CR-ANLS-CD[EK0BW-W02-IDX] = VCLDIS01.XCE-CR-ANLS-CD;
        EK0BW02.XPC-PROD-CAT-CD[EK0BW-W02-IDX] = VCLDIS01.XPC-PROD-CAT-CD;
        EK0BW02.CL-TF-CLM-FL[EK0BW-W02-IDX] = VCLDIS01.CL-TF-CLM-FL;
        EK0BW02.CL-XCEP-FL[EK0BW-W02-IDX] = VCLDIS01.CL-XCEP-FL;
        EK0BW02.CL-INSP-FL[EK0BW-W02-IDX] = VCLDIS01.CL-INSP-FL;
        EK0BW02.CL-RTN-FL[EK0BW-W02-IDX] = VCLDIS01.CL-RTN-FL;

        EK0BW02.ZZ-SDT[EK0BW-W02-IDX] = VCLDIS01.ZZ-SDT;
        EK0BW02.ZZ-CHNG-DT[EK0BW-W02-IDX] = VCLDIS01.ZZ-CHNG-DT;
        EK0BW02.ZZ-CHNG-CNT[EK0BW-W02-IDX] = VCLDIS01.ZZ-CHNG-CNT;

        EK0BW02.EK0BW-W02-IDX = EK0BW02.EK0BW-W02-IDX + 1;
        EK0BW00.EK0BW-MAX-RCD = EK0BW00.EK0BW-MAX-RCD + 1;

      end
    end
  end

   /* Close cursor*/

  if (EK0BW00.EK0BW-RSN-PREFIX == " ")
    EK0BS-VCLDIS01-C2(); /* Close VCLDIS01 cursor 2*/
  else
    if (EK0BW00.EK0BW-RSN-PREFIX == "C")
      EK0BS-VCLDIS01-C3(); /* Close VCLDIS01 cursor 3*/
    else
      if (EK0BW00.EK0BW-RSN-PREFIX == "F")
        EK0BS-VCLDIS01-C4(); /* Close VCLDIS01 cursor 4*/
      else /* Prefix EQ 'T'*/
        EK0BS-VCLDIS01-C5(); /* Close VCLDIS01 cursor 5*/
      end
    end
  end
end // end EK0B2100

// Verify Fetched row
Function EK0B2200()

   /* Determine if the record fetched will be accepted based on any*/
   /* criteria entered*/

  if (EK0BM001.EK0BM-S-ALL == "A") /* Accept this row, as long as Resolver*/
                                   /* is assigned to Security User*/

     /* Verify if Resolver is assigned to Security User by searching*/
     /* against the table loaded with all Rslvrs for Security User*/

    EK0BW00.EK0BW-RSLVR-FOUND-FL = "N";
    EK0BW00.EK0BW-WRK-IDX = 1;

    while (EK0BW00.EK0BW-RSLVR-FOUND-FL == "N"
     && EK0BW00.EK0BW-RESOLVER-ID[EK0BW-WRK-IDX] > " "
     && EK0BW00.EK0BW-WRK-IDX <= 200)

      if (VCLDIS01.CL-CR-ANLS-USER-ID == 
      EK0BW00.EK0BW-RESOLVER-ID[EK0BW-WRK-IDX])
        EK0BW00.EK0BW-RSLVR-FOUND-FL = "Y";
      else
        EK0BW00.EK0BW-WRK-IDX = EK0BW00.EK0BW-WRK-IDX + 1;
      end

    end

    if (EK0BW00.EK0BW-RSLVR-FOUND-FL == "Y")
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end

    return; /* then exit*/

  else
    EK0BM001.EK0BM-S-ALL = " ";
  end

  if (EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID > " ")
    if (VCLDIS01.CL-CR-ANLS-USER-ID == EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID)
      set KUYREC empty;

      KUYREC.XXXUSRID = EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID;

      EK0BS-VSVREP01-SA(); /* Select Unique VSVREP01 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        EK0BM001.EK0BM-S-ANLS-USER-NAME = KUYREC.KUYREPNM;
      else
        EK0BM001.EK0BM-S-ANLS-USER-NAME = " ";
      end
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  else
    EK0BM001.EK0BM-S-ANLS-USER-NAME = " ";

     /* Verify if Resolver is assigned to Security User by searching*/
     /* against the table loaded with all Rslvrs for Security User*/

    EK0BW00.EK0BW-RSLVR-FOUND-FL = "N";
    EK0BW00.EK0BW-WRK-IDX = 1;

    while (EK0BW00.EK0BW-RSLVR-FOUND-FL == "N"
     && EK0BW00.EK0BW-RESOLVER-ID[EK0BW-WRK-IDX] > " "
     && EK0BW00.EK0BW-WRK-IDX <= 200)

      if (VCLDIS01.CL-CR-ANLS-USER-ID == 
      EK0BW00.EK0BW-RESOLVER-ID[EK0BW-WRK-IDX])
        EK0BW00.EK0BW-RSLVR-FOUND-FL = "Y";
      else
        EK0BW00.EK0BW-WRK-IDX = EK0BW00.EK0BW-WRK-IDX + 1;
      end

    end

    if (EK0BW00.EK0BW-RSLVR-FOUND-FL == "Y")
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-CU-CO-ID > 0)
    if (VCLDIS01.CU-CO-ID == EK0BM001.EK0BM-S-CU-CO-ID)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-CU-STOR-ID > 0)
    if (VCLDIS01.CU-STOR-ID == EK0BM001.EK0BM-S-CU-STOR-ID)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF > 0)
    if (VCLDIS01.XNX-DEPT-ID-XREF == EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-XGP-GPC-CD > " ")
    if (VCLDIS01.XGP-GPC-CD == EK0BM001.EK0BM-S-XGP-GPC-CD)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-YCR-CLM-RSN-CD > " ")
    if ((EK0BM001.EK0BM-S-YCR-CLM-RSN-CD == "C* " || 
    EK0BM001.EK0BM-S-YCR-CLM-RSN-CD == "C**") || 
    (EK0BM001.EK0BM-S-YCR-CLM-RSN-CD == "F* " || 
    EK0BM001.EK0BM-S-YCR-CLM-RSN-CD == "F**") || 
    (EK0BM001.EK0BM-S-YCR-CLM-RSN-CD == "T* " || 
    EK0BM001.EK0BM-S-YCR-CLM-RSN-CD == "T**"))
        /* continue*/
    else
      if (VCLDIS01.YCR-CLM-RSN-CD == EK0BM001.EK0BM-S-YCR-CLM-RSN-CD)
           /* continue*/
      else
        EK0BW00.EK0BW-BYPASS-FL = "Y";
      end
    end
  end

  if (EK0BM001.EK0BM-S-XCE-CR-ANLS-CD > " ")
    if (VCLDIS01.XCE-CR-ANLS-CD == EK0BM001.EK0BM-S-XCE-CR-ANLS-CD)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-XSO-SLS-OFC-ID > " ")
    if (VCLDIS01.XSO-SLS-OFC-ID == EK0BM001.EK0BM-S-XSO-SLS-OFC-ID)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-SM-SREP-ID > 0)
    if (VCLDIS01.SM-SREP-ID == EK0BM001.EK0BM-S-SM-SREP-ID)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-SM-SAGCY-ID > " ")
    if (VCLDIS01.SM-SAGCY-ID == EK0BM001.EK0BM-S-SM-SAGCY-ID)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-XWH-WHSE-CD > " ")
    if (VCLDIS01.XWH-WHSE-CD == EK0BM001.EK0BM-S-XWH-WHSE-CD)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-TF-CARR-CD > " ")
    if (VCLDIS01.TF-CARR-CD == EK0BM001.EK0BM-S-TF-CARR-CD)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-XPC-PROD-CAT-CD > " ")
    if (VCLDIS01.XPC-PROD-CAT-CD == EK0BM001.EK0BM-S-XPC-PROD-CAT-CD)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-CL-XCEP-FL > " ")
    if (VCLDIS01.CL-XCEP-FL == EK0BM001.EK0BM-S-CL-XCEP-FL)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-CL-RTN-FL > " ")
    if (VCLDIS01.CL-RTN-FL == EK0BM001.EK0BM-S-CL-RTN-FL)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-YCT-CLM-TYP-CD > " ")
    if (VCLDIS01.YCT-CLM-TYP-CD == EK0BM001.EK0BM-S-YCT-CLM-TYP-CD)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 > " ")
    if (VCLDIS01.YCS-CLM-STAT-CD1 == EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

  if (EK0BM001.EK0BM-S-CL-INSP-FL > " ")
    if (VCLDIS01.CL-INSP-FL == EK0BM001.EK0BM-S-CL-INSP-FL)
        /* continue*/
    else
      EK0BW00.EK0BW-BYPASS-FL = "Y";
    end
  end

   /* **************************************************************/
                     /* END  EK0B2200*/
   /* **************************************************************/
end // end EK0B2200

// Display Table to Screen
Function EK0B3000()
   /* **************************************************************/
   /* This process controls the display for the EK0BM001 map.*/
   /* **************************************************************/

  if (EK0BW00.EK0BW-MODE-IND == "A")
    EK0BM001.EK0BM-MODE = "  ADD";
    set EK0BM001.EK0BM-MODE skip, reverse;
  else
    if (EK0BW00.EK0BW-MODE-IND == "C")
      EK0BM001.EK0BM-MODE = "UPDATE";
      set EK0BM001.EK0BM-MODE skip, reverse;
    else
      if (EK0BW00.EK0BW-MODE-IND == "I")
        EK0BM001.EK0BM-MODE = "INQUIRY";
        set EK0BM001.EK0BM-MODE initialAttributes;
      else /* It's DELETE*/
        EK0BM001.EK0BM-MODE = "DELETE";
        set EK0BM001.EK0BM-MODE reverse;
      end
    end
  end

   /* Display the retrieved data (May exit appl)*/

  EK0BW00.EK0BW-END-SCREEN = "N";

  while (EK0BW00.EK0BW-END-SCREEN == "N") /* If not end*/
    EK0B3100(); /* display map*/
  end

   /* **************************************************************/
                     /* END  EK0B3000*/
   /* **************************************************************/
end // end EK0B3000

// Converse EK0BM001
Function EK0B3100()
  if (EK0BW00.EK0BW-CURR-PAGE != EK0BM001.EK0BM-CURR-PAGE)
    if (converseVar.validationMsgNum == 350 ||  /* No data found*/
    EK0BW00.EK0BW-MAX-PAGE == 0)               
      EK0BW00.EK0BW-CURR-PAGE = 1;
      EK0BW00.EK0BW-MAX-PAGE = 1;
      EK0BM001.EK0BM-CURR-PAGE = 1;
      EK0BM001.EK0BM-MAX-PAGE = 1;
         /* continue      /* Nothing to load/reload*/
    else
      EK0B3200(); /* Reload screen data*/
      EK0BM001.EK0BM-CURR-PAGE = EK0BW00.EK0BW-CURR-PAGE;
      EK0BM001.EK0BM-MAX-PAGE = EK0BW00.EK0BW-MAX-PAGE;
    end
  end

   /* Now set field attributes*/

  EK0B3400(); /* Set Field Attributes*/

  if (converseVar.validationMsgNum != 0)
    set EK0BM001 alarm;
  end

  converse EK0BM001 ;

  EK0BW00.EK0BW-POPUP-FL = "N";
  EK0BW02.EK0BW-SCREEN-CHNGD = "N";

  if (EK0BW00.EK0BW-MODE-IND == "I") /* Inquire Mode*/

    if (EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID != 
    EK0BW00.EK0BW-S-XXX-SCRTY-USER-ID || 
    EK0BM001.EK0BM-S-ALL != EK0BW00.EK0BW-S-ALL || 
    EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID != 
    EK0BW00.EK0BW-S-CL-CR-ANLS-USER-ID || 
    EK0BM001.EK0BM-S-CU-CO-ID != EK0BW00.EK0BW-S-CU-CO-ID || 
    EK0BM001.EK0BM-S-CU-STOR-ID != EK0BW00.EK0BW-S-CU-STOR-ID || 
    EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF != 
    EK0BW00.EK0BW-S-XNX-DEPT-ID-XREF || 
    EK0BM001.EK0BM-S-XGP-GPC-CD != EK0BW00.EK0BW-S-XGP-GPC-CD || 
    EK0BM001.EK0BM-S-YCR-CLM-RSN-CD != 
    EK0BW00.EK0BW-S-YCR-CLM-RSN-CD || 
    EK0BM001.EK0BM-S-XCE-CR-ANLS-CD != 
    EK0BW00.EK0BW-S-XCE-CR-ANLS-CD || 
    EK0BM001.EK0BM-S-XSO-SLS-OFC-ID != 
    EK0BW00.EK0BW-S-XSO-SLS-OFC-ID || 
    EK0BM001.EK0BM-S-SM-SREP-ID != EK0BW00.EK0BW-S-SM-SREP-ID || 
    EK0BM001.EK0BM-S-SM-SAGCY-ID != EK0BW00.EK0BW-S-SM-SAGCY-ID || 
    EK0BM001.EK0BM-S-XWH-WHSE-CD != EK0BW00.EK0BW-S-XWH-WHSE-CD || 
    EK0BM001.EK0BM-S-TF-CARR-CD != EK0BW00.EK0BW-S-TF-CARR-CD || 
    EK0BM001.EK0BM-S-XPC-PROD-CAT-CD != 
    EK0BW00.EK0BW-S-XPC-PROD-CAT-CD || 
    EK0BM001.EK0BM-S-CL-XCEP-FL != EK0BW00.EK0BW-S-CL-XCEP-FL || 
    EK0BM001.EK0BM-S-CL-RTN-FL != EK0BW00.EK0BW-S-CL-RTN-FL || 
    EK0BM001.EK0BM-S-YCT-CLM-TYP-CD != 
    EK0BW00.EK0BW-S-YCT-CLM-TYP-CD || 
    EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 != 
    EK0BW00.EK0BW-S-YCS-CLM-STAT-CD1 || 
    EK0BM001.EK0BM-S-CL-INSP-FL != EK0BW00.EK0BW-S-CL-INSP-FL)

      EK0BW02.EK0BW-SCREEN-CHNGD = "Y";

      EK0B3300(); /* Process Search Criteria*/

    else

      EK0BS-VAL-SEARCH(); /* Validate Search Criteria*/

      if (EK0BW00.EK0BW-POPUP-FL == "Y")
        return;
      end
    end
  else

      /* If Add or Change or Delete Mode, check for changes*/

    EK0BW00.EK0BW-SCR-IDX = 1;

    while (EK0BW00.EK0BW-SCR-IDX <= EK0BW00.EK0BW-SCR-LINES)

      if (EK0BW00.EK0BW-MODE-IND == "A" ||  /* Add Mode*/
      EK0BW00.EK0BW-MODE-IND == "C")        /* Change Mode*/

        if (EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] != 
        EK0BW02.CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] != 
        EK0BW02.CU-CO-ID[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] != 
        EK0BW02.CU-STOR-ID[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] != 
        EK0BW02.XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] != 
        EK0BW02.XGP-GPC-CD[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] != 
        EK0BW02.YCR-CLM-RSN-CD[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] != 
        EK0BW02.XCE-CR-ANLS-CD[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] != 
        EK0BW02.XSO-SLS-OFC-ID[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] != 
        EK0BW02.SM-SREP-ID[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] != 
        EK0BW02.SM-SAGCY-ID[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] != 
        EK0BW02.XWH-WHSE-CD[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] != 
        EK0BW02.TF-CARR-CD[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] != 
        EK0BW02.XPC-PROD-CAT-CD[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] != 
        EK0BW02.CL-XCEP-FL[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] != 
        EK0BW02.CL-RTN-FL[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] != 
        EK0BW02.YCT-CLM-TYP-CD[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] != 
        EK0BW02.YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] || 
        EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] != 
        EK0BW02.CL-INSP-FL[EK0BW-SCR-IDX])

          EK0BW02.EK0BW-SCREEN-CHNGD = "Y";

        end

      else /* Delete Mode*/

        if (EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] != 
        EK0BW02.EK0BW-COL-FUNC[EK0BW-SCR-IDX])

          EK0BW02.EK0BW-SCREEN-CHNGD = "Y";

        end
      end

      EK0BW-SCR-IDX = EK0BW-SCR-IDX + 1;

    end
  end


   /* Check function keys (May exit application)*/

  EK0BS-CHECK-PFKEYS();

  if (converseVar.eventKey is pa2 ||  /* Refresh*/
  converseVar.eventKey is pf3 ||      /* or Exit*/
  converseVar.validationMsgNum != 0)  /* or errors*/
    return;
  end

   /* Now if there are no errors, we're not inquiry, user pressed*/
   /* ENTER or PF12, and they entered some changes, go process them!*/

  if (converseVar.validationMsgNum == 0 && 
  EK0BW00.EK0BW-MODE-IND != "I" &&  /* Not inquiry*/
  (converseVar.eventKey is enter || 
  converseVar.eventKey is pf12) &&  
  EK0BW02.EK0BW-SCREEN-CHNGD == "Y")

    EK0B4000(); /* Validate & Update*/

  end

end // end EK0B3100

// Load screen array
Function EK0B3200()
   /* **************************************************************/
   /* Load screen array and internal working storage array*/
   /* from temp storage.*/
   /* **************************************************************/

  set EK0BW02 empty; /* Clear record*/

  EK0BW00.EK0BW-SCR-IDX = 1; /* Init screen index*/
  EK0BW02.EK0BW-W02-IDX = 1; /* and W02 index*/
  EK0BW02.EK0BW-CURR-RCD = EK0BW00.EK0BW-CURR-RCD;

  TA5REC.TA5TSQIX = EK0BW00.EK0BW-CURR-PAGE;
  TA5REC.TA5FNCCD = "R";

  EK0BS-CALL-TA0050(); /* Read queue*/

  EK0BW02.EK0BW-TEMP-ITEM = EK0BW01.EK0BW-TEMP-ITEM;

  EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID = EK0BW00.EK0BW-S-CL-CR-ANLS-USER-ID;

  if (EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID > " ")

    set EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID normal;

    set KUYREC empty;

    KUYREC.XXXUSRID = EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID;

    EK0BS-VSVREP01-SA();

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0BM001.EK0BM-S-ANLS-USER-NAME = KUYREC.KUYREPNM;
    else
      EK0BM001.EK0BM-S-ANLS-USER-NAME = " ";
    end
  end


   /* Now get the data from temp storage*/

  while (EK0BW-SCR-IDX <= EK0BW00.EK0BW-SCR-LINES)

    if (EK0BW02.EK0BW-CURR-RCD <= EK0BW00.EK0BW-MAX-RCD)

      EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] = EK0BW02.EK0BW-COL-FUNC[EK0BW-W02-IDX];
      EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] = EK0BW02.CL-CR-ANLS-USER-ID[EK0BW-W02-IDX];
      EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] = EK0BW02.XSO-SLS-OFC-ID[EK0BW-W02-IDX];
      EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] = EK0BW02.XWH-WHSE-CD[EK0BW-W02-IDX];
      EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] = EK0BW02.CU-CO-ID[EK0BW-W02-IDX];
      EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] = EK0BW02.CU-STOR-ID[EK0BW-W02-IDX];
      EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] = EK0BW02.XNX-DEPT-ID-XREF[EK0BW-W02-IDX];
      EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] = EK0BW02.XGP-GPC-CD[EK0BW-W02-IDX];
      EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] = EK0BW02.YCR-CLM-RSN-CD[EK0BW-W02-IDX];
      EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] = EK0BW02.YCT-CLM-TYP-CD[EK0BW-W02-IDX];
      EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] = EK0BW02.YCS-CLM-STAT-CD1[EK0BW-W02-IDX];
      EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] = EK0BW02.SM-SREP-ID[EK0BW-W02-IDX];
      EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] = EK0BW02.SM-SAGCY-ID[EK0BW-W02-IDX];
      EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] = EK0BW02.SM-SREP-ID[EK0BW-W02-IDX];
      EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] = EK0BW02.TF-CARR-CD[EK0BW-W02-IDX];
      EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] = EK0BW02.XCE-CR-ANLS-CD[EK0BW-W02-IDX];
      EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] = EK0BW02.XPC-PROD-CAT-CD[EK0BW-W02-IDX];
      EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] = EK0BW02.CL-XCEP-FL[EK0BW-W02-IDX];
      EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] = EK0BW02.CL-INSP-FL[EK0BW-W02-IDX];
      EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] = EK0BW02.CL-RTN-FL[EK0BW-W02-IDX];
    else
      EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] = 0;
      EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] = 0;
      EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] = 0;
      EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] = 0;
      EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] = " ";

    end

    EK0BW02.EK0BW-CURR-RCD = EK0BW02.EK0BW-CURR-RCD + 1;
    EK0BW02.EK0BW-W02-IDX = EK0BW02.EK0BW-W02-IDX + 1;
    EK0BW00.EK0BW-SCR-IDX = EK0BW00.EK0BW-SCR-IDX + 1;
  end

  EK0BW02.EK0BW-CURR-RCD = EK0BW00.EK0BW-CURR-RCD;

   /* **************************************************************/
                     /* END  EK0B3200*/
   /* **************************************************************/
end // end EK0B3200

// Process Search criteria
Function EK0B3300()

   /* Process Search criteria using Claim Type AND Claim Reason Codes*/

  EK0BS-PURGE-QUEUE();

  EK0BS-VAL-SEARCH(); /* Validate Search criteria*/

  if (converseVar.validationMsgNum == 0 ||  /* Search criteria is valid*/
  converseVar.validationMsgNum == 810)      /* Search criteria was selected from Popup*/

    EK0BW00.EK0BW-END-SCREEN = "Y";

  else /* Blank out screen*/
    EK0BW00.EK0BW-SCR-IDX = 1;

    while (EK0BW00.EK0BW-SCR-IDX <= EK0BW00.EK0BW-SCR-LINES)

      EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] = " ";
      set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] initialAttributes;
      EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] = 0;
      EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] = 0;
      EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] = 0;
      EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] = 0;
      EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] = " ";
      EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] = " ";

      EK0BW00.EK0BW-SCR-IDX = EK0BW00.EK0BW-SCR-IDX + 1;
    end

    EK0BW00.EK0BW-CURR-PAGE = 1;
    EK0BW00.EK0BW-MAX-PAGE = 1;
    EK0BM001.EK0BM-CURR-PAGE = 1;
    EK0BM001.EK0BM-MAX-PAGE = 1;
  end
   /* **************************************************************/
                     /* END  EK0B3300*/
   /* **************************************************************/
end // end EK0B3300

// Set Field Attributes
Function EK0B3400()
  EK0BW00.EK0BW-SCR-IDX = EK0BW00.EK0BW-SCR-LINES;

  while (EK0BW00.EK0BW-SCR-IDX > 0)

    if (EK0BW00.EK0BW-MODE-IND == "I") /* Inquire Mode -*/
                                     /* DEFINED is ASKIP,NOHILITE*/

      if (EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] > " ")
        set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] normal;
        set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] underline;
      else
        set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] initialAttributes;
      end

      set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] initialAttributes;
      set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] initialAttributes;

    end

    if (converseVar.validationMsgNum == 0)

      if (EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] != " ")

        if (EK0BW00.EK0BW-MODE-IND == "C" ||  /* Change Mode*/
        EK0BW00.EK0BW-MODE-IND == "A")        /* Add Mode*/

          EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] = " ";
          set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] initialAttributes;
          set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] cursor;
          set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] underline;
        else
          if (EK0BW00.EK0BW-MODE-IND == "D") /* Delete Mode*/
            set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] cursor;
            set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] normal;
            set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] underline;
          end
        end
      else

        if (EK0BW00.EK0BW-MODE-IND == "A") /* Add Mode*/

          EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] = " ";
          set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] initialAttributes;
          set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] cursor;
          set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] underline;
          set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] underline;
        else

          if (EK0BW00.EK0BW-MODE-IND == "C") /* Change Mode*/

            EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] = " ";
            set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] initialAttributes;
            set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] initialAttributes;
          else

            if (EK0BW00.EK0BW-MODE-IND == "D") /* Delete Mode*/

              if (EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX]
               > " ")
                set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] cursor;
                set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] normal;
                set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] underline;
              else
                EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] = " ";
                set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] initialAttributes;
              end
            end
          end
        end
      end
    else

      if (EK0BW00.EK0BW-MODE-IND == "D") /* Delete Mode*/

        if (EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] == " ")
          EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] = " ";
          set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] initialAttributes;
        else
          set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] cursor;
          set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] underline;
        end
      end
    end

    EK0BW-SCR-IDX = EK0BW-SCR-IDX - 1;

  end

   /* Set the field attributes for Search Fields*/
   /* and the rest of the screen fields*/

  if (EK0BW00.EK0BW-MODE-IND == "I") /* Inquiry*/

    EK0BM001.EK0BM-MODE = "INQUIRY";
    set EK0BM001.EK0BM-MODE skip, noHighLight;

    if (converseVar.validationMsgNum == 0)
      if (EK0BW00.EK0BW-SUPER-USER-FL == "S")
        set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID normal;
        set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID underline;
      else
        set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID initialAttributes;
      end
      set EK0BM001.EK0BM-S-ALL initialAttributes;
      set EK0BM001.EK0BM-S-ALL cursor;
      set EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID initialAttributes;
      set EK0BM001.EK0BM-S-ANLS-USER-NAME initialAttributes;
      set EK0BM001.EK0BM-S-CU-CO-ID initialAttributes;
      set EK0BM001.EK0BM-S-CU-STOR-ID initialAttributes;
      set EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF initialAttributes;
      set EK0BM001.EK0BM-S-XGP-GPC-CD initialAttributes;
      set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD initialAttributes;
      set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD initialAttributes;
      set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID initialAttributes;
      set EK0BM001.EK0BM-S-SM-SREP-ID initialAttributes;
      set EK0BM001.EK0BM-S-SM-SAGCY-ID initialAttributes;
      set EK0BM001.EK0BM-S-XWH-WHSE-CD initialAttributes;
      set EK0BM001.EK0BM-S-TF-CARR-CD initialAttributes;
      set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD initialAttributes;
      set EK0BM001.EK0BM-S-CL-XCEP-FL initialAttributes;
      set EK0BM001.EK0BM-S-CL-RTN-FL initialAttributes;
      set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD initialAttributes;
      set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 initialAttributes;
      set EK0BM001.EK0BM-S-CL-INSP-FL initialAttributes;
    end

    if (EK0BW00.EK0BW-MAX-PAGE == 0 || 
    (EK0BW00.EK0BW-MAX-PAGE == 1 && 
    EK0BW00.EK0BW-MAX-RCD == 0)) /* If no Data to display*/
      set EK0BM001.EK0BM-PF10-CHG invisible, skip;
      set EK0BM001.EK0BM-PF11-DEL invisible, skip;
      set EK0BM001.EK0BM-PF12-CONFIRM invisible, skip;
      if (converseVar.validationMsgNum == 0)
        set EK0BM001.EK0BM-PF9-ADD skip, noHighLight;
        converseLib.validationFailed(350);
      else
        set EK0BM001.EK0BM-PF9-ADD invisible, skip;
      end
    else
      set EK0BM001.EK0BM-PF9-ADD skip, noHighLight;
      set EK0BM001.EK0BM-PF10-CHG skip, noHighLight;
      set EK0BM001.EK0BM-PF11-DEL skip, noHighLight;
      set EK0BM001.EK0BM-PF12-CONFIRM invisible, skip;
    end
  else

    if (EK0BW00.EK0BW-MODE-IND == "C") /* Change*/

      EK0BM001.EK0BM-MODE = "CHANGE";
      set EK0BM001.EK0BM-MODE skip, reverse;

      set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID skip, noHighLight;
      set EK0BM001.EK0BM-S-ALL skip, noHighLight;
      set EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID skip, noHighLight;
      set EK0BM001.EK0BM-S-ANLS-USER-NAME skip, noHighLight;
      set EK0BM001.EK0BM-S-CU-CO-ID skip, noHighLight;
      set EK0BM001.EK0BM-S-CU-STOR-ID skip, noHighLight;
      set EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF skip, noHighLight;
      set EK0BM001.EK0BM-S-XGP-GPC-CD skip, noHighLight;
      set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD skip, noHighLight;
      set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD skip, noHighLight;
      set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID skip, noHighLight;
      set EK0BM001.EK0BM-S-SM-SREP-ID skip, noHighLight;
      set EK0BM001.EK0BM-S-SM-SAGCY-ID skip, noHighLight;
      set EK0BM001.EK0BM-S-XWH-WHSE-CD skip, noHighLight;
      set EK0BM001.EK0BM-S-TF-CARR-CD skip, noHighLight;
      set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD skip, noHighLight;
      set EK0BM001.EK0BM-S-CL-XCEP-FL skip, noHighLight;
      set EK0BM001.EK0BM-S-CL-RTN-FL skip, noHighLight;
      set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD skip, noHighLight;
      set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 skip, noHighLight;
      set EK0BM001.EK0BM-S-CL-INSP-FL skip, noHighLight;

      set EK0BM001.EK0BM-PF9-ADD skip, invisible;
      set EK0BM001.EK0BM-PF10-CHG skip, invisible;
      set EK0BM001.EK0BM-PF11-DEL skip, invisible;
      set EK0BM001.EK0BM-PF12-CONFIRM initialAttributes;
    else

      if (EK0BW00.EK0BW-MODE-IND == "A") /* Add*/

        EK0BM001.EK0BM-MODE = " A D D";
        set EK0BM001.EK0BM-MODE skip, reverse;

        set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID skip, noHighLight;
        set EK0BM001.EK0BM-S-ALL skip, noHighLight;
        set EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID skip, noHighLight;
        set EK0BM001.EK0BM-S-ANLS-USER-NAME skip, noHighLight;
        set EK0BM001.EK0BM-S-CU-CO-ID skip, noHighLight;
        set EK0BM001.EK0BM-S-CU-STOR-ID skip, noHighLight;
        set EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF skip, noHighLight;
        set EK0BM001.EK0BM-S-XGP-GPC-CD skip, noHighLight;
        set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD skip, noHighLight;
        set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD skip, noHighLight;
        set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID skip, noHighLight;
        set EK0BM001.EK0BM-S-SM-SREP-ID skip, noHighLight;
        set EK0BM001.EK0BM-S-SM-SAGCY-ID skip, noHighLight;
        set EK0BM001.EK0BM-S-XWH-WHSE-CD skip, noHighLight;
        set EK0BM001.EK0BM-S-TF-CARR-CD skip, noHighLight;
        set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD skip, noHighLight;
        set EK0BM001.EK0BM-S-CL-XCEP-FL skip, noHighLight;
        set EK0BM001.EK0BM-S-CL-RTN-FL skip, noHighLight;
        set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD skip, noHighLight;
        set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 skip, noHighLight;
        set EK0BM001.EK0BM-S-CL-INSP-FL skip, noHighLight;

        set EK0BM001.EK0BM-PF9-ADD skip, invisible;
        set EK0BM001.EK0BM-PF10-CHG skip, invisible;
        set EK0BM001.EK0BM-PF11-DEL skip, invisible;
        set EK0BM001.EK0BM-PF12-CONFIRM initialAttributes;
      else

        if (EK0BW00.EK0BW-MODE-IND == "D") /* Delete*/

          EK0BM001.EK0BM-MODE = "DELETE";
          set EK0BM001.EK0BM-MODE skip, reverse;

          set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID skip, noHighLight;
          set EK0BM001.EK0BM-S-ALL skip, noHighLight;
          set EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID skip, noHighLight;
          set EK0BM001.EK0BM-S-ANLS-USER-NAME skip, noHighLight;
          set EK0BM001.EK0BM-S-CU-CO-ID skip, noHighLight;
          set EK0BM001.EK0BM-S-CU-STOR-ID skip, noHighLight;
          set EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF skip, noHighLight;
          set EK0BM001.EK0BM-S-XGP-GPC-CD skip, noHighLight;
          set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD skip, noHighLight;
          set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD skip, noHighLight;
          set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID skip, noHighLight;
          set EK0BM001.EK0BM-S-SM-SREP-ID skip, noHighLight;
          set EK0BM001.EK0BM-S-SM-SAGCY-ID skip, noHighLight;
          set EK0BM001.EK0BM-S-XWH-WHSE-CD skip, noHighLight;
          set EK0BM001.EK0BM-S-TF-CARR-CD skip, noHighLight;
          set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD skip, noHighLight;
          set EK0BM001.EK0BM-S-CL-XCEP-FL skip, noHighLight;
          set EK0BM001.EK0BM-S-CL-RTN-FL skip, noHighLight;
          set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD skip, noHighLight;
          set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 skip, noHighLight;
          set EK0BM001.EK0BM-S-CL-INSP-FL skip, noHighLight;

          set EK0BM001.EK0BM-PF9-ADD skip, invisible;
          set EK0BM001.EK0BM-PF10-CHG skip, invisible;
          set EK0BM001.EK0BM-PF11-DEL skip, invisible;
          set EK0BM001.EK0BM-PF12-CONFIRM initialAttributes;
        end
      end
    end
  end

end // end EK0B3400

// Process Adds/Changes
Function EK0B4000()

  EK0BW00.EK0BW-POPUP-FL = "N";

   /*  */
   /* Main Validation*/
   /*  */

  EK0B4100(); /* Edit Validation*/

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

  if (converseVar.eventKey is enter) /* No Errors, but not PF12*/
    converseLib.validationFailed(828); /* Press PF12 to confirm updates*/
    return;
  end

   /* Now, if we get here we have valid data to ADD or UPDATE or DELETE*/
   /* as long as PF12 key (Confirm) was pressed*/

  EK0B4500(); /* Add/Update/Delete*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
   /* OVE EK0BM001.EK0BM-SEARCH-CLM-TYP TO CLWREC.YCTCD;*/
   /* OVE EK0BM001.EK0BM-SEARCH-CLM-RSN TO CLWREC.YCRCD;*/
    EK0BW00.EK0BW-MODE-IND = "I"; /* Set to INQUIRE Mode*/
    converseLib.validationFailed(774); /* Updates successful*/
    EK0BW00.EK0BW-END-SCREEN = "Y";
  end

   /* **************************************************************/
                     /* END  EK0B4000*/
   /* **************************************************************/
end // end EK0B4000

// EDIT Validation process
Function EK0B4100()
   /* *********************************************************************/
   /* Modification History                                       **/
   /* Date     Userid     Description                                **/
   /* ----------  ------  --------------------------------------------- **/
   /* 09-24-1998  HMACAL  Modified to allow Warehouse Code of '99' to   **/
   /* treated as valid for this application; This   **/
   /* would allow Security Users to assign this     **/
   /* Warehouse Code 99 for users that will be      **/
   /* tasked to work on Claims associated with      **/
   /* Direct Shipments where no warehouse code is   **/
   /* assigned on the claim header.                 **/
   /* *********************************************************************/
   /* ------------------------------------------------------------------*/
   /* Edit Validation Process*/
   /* ------------------------------------------------------------------*/
   /*  */
   /* For ADD Mode:*/
   /* 1) Validate all fields on the detail line*/
   /* Wildcards are accepted for all fields except the Resolver Id,*/
   /* Exception Flag, Return Flag and Inspection Flag;*/
   /* Only generic-wildcard (F**) can be accepted for Reason Code;*/
   /*  */
   /* 2) Validate if the key combination above exists:*/
   /* a. On another detail line on the screen*/
   /* b. On the table*/
   /*  */
   /* For CHANGE Mode:*/
   /* 1) Validate the same way as in ADD mode, since, any change to the*/
   /* record would result to the old record being deleted, and the*/
   /* modified record being added;*/
   /*  */
   /* For DELETE Mode:*/
   /* 1) Validate the column function entered*/
   /* ------------------------------------------------------------------*/

   /*  */
   /* For ADD Mode only*/
   /* Validate the Key Combination (Claim Type, Claim Reason, Claim*/
   /* Status and Exception Flag) from bottom to top, right to left;*/
   /*  */

  EK0BW00.EK0BW-POPUP-FL = "N";

  EK0BW00.EK0BW-SCR-IDX = EK0BW00.EK0BW-SCR-LINES;

  while (EK0BW00.EK0BW-SCR-IDX > 0 && 
  (EK0BW00.EK0BW-MODE-IND == "A" || 
  EK0BW00.EK0BW-MODE-IND == "C"))

    /* Validate if data was entered on detail line, for ADD, or,*/
    /* Validate if data was changed on detail line, for CHANGE*/

    if (EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] != 
    EK0BW02.CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] != 
    EK0BW02.CU-CO-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] != 
    EK0BW02.CU-STOR-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] != 
    EK0BW02.XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XGP-GPC-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] != 
    EK0BW02.YCR-CLM-RSN-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XCE-CR-ANLS-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] != 
    EK0BW02.XSO-SLS-OFC-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] != 
    EK0BW02.SM-SREP-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] != 
    EK0BW02.SM-SAGCY-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XWH-WHSE-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] != 
    EK0BW02.TF-CARR-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XPC-PROD-CAT-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] != 
    EK0BW02.CL-XCEP-FL[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] != 
    EK0BW02.CL-RTN-FL[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] != 
    EK0BW02.YCT-CLM-TYP-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] != 
    EK0BW02.YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] != 
    EK0BW02.CL-INSP-FL[EK0BW-SCR-IDX])

      EK0BW02.EK0BW-ROW-ADDED[EK0BW-SCR-IDX] = "Y";

       /* Validate Claim Inspection Flag*/

      if (EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] == " ")
        EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] = "N";
        set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] normal;
      else
        if (EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] == "Y" || 
        EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] == "N")
          set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(841); /* Invalid Value, must be Y or N*/
          set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] bold, cursor;
        end
      end

       /* Validate Claim Status*/
       /* When specified, must be valid code in YCSTBL;*/
       /* Full Wildcard can be entered, but no generic-wildcard;*/
       /* PopUp window is also available*/

      if (EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] == " " || 
      EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] == "***")
        EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] = "***";
        set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] normal;
      else
        EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX];
        if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
        EK0BW00.EK0BW-2ND-CHAR == "?" || 
        EK0BW00.EK0BW-3RD-CHAR == "?")

          EK0BW00.EK0BW-POPUP-FL = "Y";
          EK0BW00.EK0BW-POPUP-IND = "6"; /* Claim Rsn PopUp*/

          EK0BS-POPUP-WINDOW();

          return;
        end

        if (EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] != "999" && 
        (EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX]
         in YCSTBL.YCSCD && 
        YCSTBL.XXXSTAT[sysVar.arrayIndex] == "A")) /* Active and valid on table*/
          set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(816); /* Claim Status is invalid*/
          set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] cursor, bold;
        end
      end

       /* Validate Claim Type Code and Claim Reason Code combination*/
       /* with Claim Status Code specified*/
       /* Full wildcard (***) on both these fields are allowed only*/
       /* when the Claim Status Code is OIP*/

      if ((EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] == "***" || 
      EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] == " ") && 
      (EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] == "***" || 
      EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] == " "))
        if (EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] == "OIP")
             /* continue*/
        else
          set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] bold, cursor;
          converseLib.validationFailed(820); /* Claim Status must be OIP*/
        end
      end

       /* Validate Claim Type Code*/
       /* When fully specified, must be valid code in YCTTBL;*/
       /* Only full wildcard(***) is accepted; no generic wildcard(R**)*/
       /* If nothing is entered, it will be replaced with ****/

      if (EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] == " " || 
      EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] == "***")
        EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] = "***";
        set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] normal;
      else
        EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX];
        if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
        EK0BW00.EK0BW-2ND-CHAR == "?" || 
        EK0BW00.EK0BW-3RD-CHAR == "?")

          EK0BW00.EK0BW-POPUP-FL = "Y";
          EK0BW00.EK0BW-POPUP-IND = "3"; /* Claim Type PopUp*/

          EK0BS-POPUP-WINDOW();

          return; /* Redisplay map*/
        end

        if (EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] != "999" && 
        (EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX]
         in YCTTBL.YCTCD && 
        YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")) /* Active and valid on table*/
          set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(087); /* Claim Type is invalid*/
          set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] cursor, bold;
        end
      end

       /* Validate Claim Return/Receipt Flag*/

      if (EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] == " ")
        EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] = "N";
        set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] normal;
      else
        if (EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] == "Y" || 
        EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] == "N")
          set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(842); /* Invalid Value, must be Y or N*/
          set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] bold, cursor;
        end
      end

       /* Validate Claim Exception Flag*/

      if (EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] == " ")
        EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] = "N";
        set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] normal;
      else
        if (EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] == "Y" || 
        EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] == "N")
          set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(815); /* Invalid Value, must be Y or N*/
          set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] bold, cursor;
        end
      end


       /* Validate Product Category Code*/
       /* Wildcard can be entered for this field*/

      if (EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] == " " || 
      EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] == "**")
        EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] = "**";
        set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] normal;
      else
        EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX];
        if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
        EK0BW00.EK0BW-2ND-CHAR == "?")

          EK0BW00.EK0BW-POPUP-FL = "Y";
          EK0BW00.EK0BW-POPUP-IND = "8"; /* Prod Ctgy PopUp*/

          EK0BS-POPUP-WINDOW();

          return; /* Redisplay map*/
        end

        if (EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] != "99" && 
        (EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX]
         in XPCTBL.XPCCD && 
        XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")) /* Active and valid on table*/
          set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(843); /* Product Ctgy Code is invalid*/
          set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] cursor, bold;
        end
      end

       /* Validate Traffic Carrier Code*/
       /* Wildcard can be entered for this field*/

      if (EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] == " " || 
      EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] == "****")
        EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] = "****";
        set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] normal;
      else
        set TF1REC empty;

        TF1REC.TF1CARCD = EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX];

        EK0BS-VCARR001-S(); /* Select VCARR001 unique row*/

        if (SQLCA.VAGen_SQLCODE == 0)
          set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(403); /* Carrier Code is invalid*/
          set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] cursor, bold;
        end
      end

       /* Validate Warehouse Code*/
       /* Wildcard can be entered for this field*/

      if (EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] == " " || 
      EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] == "**")
        EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] = "**";
        set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] normal;
      else
        EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX];
        if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
        EK0BW00.EK0BW-2ND-CHAR == "?")

          EK0BW00.EK0BW-POPUP-FL = "Y";
          EK0BW00.EK0BW-POPUP-IND = "10"; /* Warehouse Code Pop*/

          EK0BS-POPUP-WINDOW();

          return; /* Redisplay map*/
        end

        if (EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] == "99" || 
        (EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX]
         in XWHTBL.XWHCD && 
        XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")) /* Active and valid on table*/
          set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(258); /* Warehouse Code is invalid*/
          set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] cursor, bold;
        end
      end

       /* Validate Sales Agency Id*/
       /* Validate Sales Agency with Sales Rep Id and Status Code;*/
       /* Wildcard can be entered for this field, however, if*/
       /* Sales Rep Id is entered (not wildcarded -1), Sales Agency*/
       /* Id is required (wildcard will not be accepted)*/

      if (EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] == " " || 
      EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] == "****")
        if (EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] > 0)
          converseLib.validationFailed(246); /* Sls Agcy rqrd when RepId is specified*/
          set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] cursor, bold;
        else
          EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] = "****";
          set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] normal;
        end
      else
        set SM5REC empty;

        SM5REC.SM1AGYID = EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX];

        EK0BS-VRAGCY01-S2(); /* Select Scan 2 VRAGCY01 row*/

        if (SQLCA.VAGen_SQLCODE == 0)

          EK0BS-VRAGCY01-N2(); /* Fetch 2 VRAGCY01 row*/

          if (SQLCA.VAGen_SQLCODE == 0)
            set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] normal;
          else
            converseLib.validationFailed(247); /* Agency Id is invalid*/
            set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] cursor, bold;
          end
        else
          converseLib.validationFailed(247); /* Agency Id is invalid*/
          set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] cursor, bold;
        end

        EK0BS-VRAGCY01-C2(); /* Close 2 VRAGCY01 row*/

      end


       /* Validate Sales Representative Id*/
       /* Wildcard (-1) can be entered for this field*/

      if (EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] == 0 || 
      EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] == -1)
        EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] = -1;
        set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] normal;
      else
        set SM4REC empty;

        SM4REC.SM4REPID = EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX];

        EK0BS-VREPS001-S(); /* Select Unique VREPS001 row*/

        if (SQLCA.VAGen_SQLCODE == 0)
          set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(135); /* Serv Rep Id is invalid*/
          set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] cursor, bold;
        end
      end


       /* Validate Sales Representative Id and Agency Id combination*/

      if (EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] > 0 && 
      (EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] > " " && 
      EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] != "****"))

        set SM5REC empty;

        SM5REC.SM4REPID = EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX];
        SM5REC.SM1AGYID = EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX];
        SM5REC.XXXSTAT = "A";

        EK0BS-VRAGCY01-S();

        if (SQLCA.VAGen_SQLCODE == 0)
          set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] normal;
          set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] normal;
        else
          set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] cursor, bold;
          set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] bold;
          converseLib.validationFailed(247); /* Sales Rep/Agcy combo is invalid*/
        end
      end


       /* Validate Sales Office Id*/
       /* Wildcard can be entered for this field*/

      if (EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] == " " || 
      EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] == "**")
        EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] = "**";
        set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] normal;
      else
        EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX];
        if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
        EK0BW00.EK0BW-2ND-CHAR == "?")

          EK0BW00.EK0BW-POPUP-FL = "Y";
          EK0BW00.EK0BW-POPUP-IND = "12"; /* Sales Office Popup*/

          EK0BS-POPUP-WINDOW();

          return; /* Redisplay map*/
        end

        if (EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] != "99" && 
        (EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX]
         in XSOTBL.XSOCD && 
        XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A")) /* Active and valid on table*/
          set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(257); /* Sales Office is invalid*/
          set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] cursor, bold;
        end
      end


       /* Validate Credit Analyst Code*/
       /* Wildcard can be entered for this field*/

      if (EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] == " " || 
      EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] == "**")
        EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] = "**";
        set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] normal;
      else
        EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX];
        if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
        EK0BW00.EK0BW-2ND-CHAR == "?")

          EK0BW00.EK0BW-POPUP-FL = "Y";
          EK0BW00.EK0BW-POPUP-IND = "14"; /* CR Anls Code Popup*/

          EK0BS-POPUP-WINDOW();

          return; /* Redisplay map*/
        end

        if (EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] != "99" && 
        (EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX]
         in XCETBL.XCECD && 
        XCETBL.XXXSTAT[sysVar.arrayIndex] == "A")) /* Active and valid on table*/
          set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(844); /* Credit Analyst code is invalid*/
          set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] cursor, bold;
        end
      end


       /* Validate Claim Reason Code*/
       /* When fully specified, must be valid code in YCRTBL;*/
       /* If wildcard is entered, only generic wildcard is accepted;*/
       /* For generic wildcard, at least the first character must be*/
       /* specified, ie., (F** or F0*);*/
       /* PopUp window is also available*/

      if (EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] == " " || 
      EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] == "***")
        EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] = "***";
        set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] normal;
      else
        EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX];
        if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
        EK0BW00.EK0BW-2ND-CHAR == "?" || 
        EK0BW00.EK0BW-3RD-CHAR == "?")

          EK0BW00.EK0BW-POPUP-FL = "Y";
          EK0BW00.EK0BW-POPUP-IND = "4"; /* Claim Rsn PopUp*/

          EK0BS-POPUP-WINDOW();

          return; /* Redisplay map*/
        end

        if (EK0BW00.EK0BW-1ST-CHAR == "*")
          converseLib.validationFailed(824); /* First character required for*/
                                      /* generic-wildcard*/
          set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] cursor, bold;
        else
          if (EK0BW00.EK0BW-2ND-CHAR == " ")
            EK0BW00.EK0BW-2ND-CHAR = "*";
          end
          if (EK0BW00.EK0BW-3RD-CHAR == " ")
            EK0BW00.EK0BW-3RD-CHAR = "*";
          end

          EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] = EK0BW00.EK0BW-3-CHAR;

          if (EK0BW00.EK0BW-2ND-CHAR == "*" || 
          EK0BW00.EK0BW-3RD-CHAR == "*")
            set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] normal;
          else
            if (EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] != "999"
             && 
            (EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX]
             in YCRTBL.YCRCD && 
            YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")) /* Active and valid*/
              set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] normal;
            else
              converseLib.validationFailed(817); /* Claim Reason is invalid*/
              set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] cursor, bold;
            end
          end
        end
      end


       /* Validate GPC*/
       /* Wildcard can be entered for this field*/

      if (EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] == " " || 
      EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] == "**")
        EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] = "**";
        set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] normal;
      else
        EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX];
        if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
        EK0BW00.EK0BW-2ND-CHAR == "?")

          EK0BW00.EK0BW-POPUP-FL = "Y";
          EK0BW00.EK0BW-POPUP-IND = "16"; /* GPC Popup*/

          EK0BS-POPUP-WINDOW();

          return; /* Redisplay map*/
        end

        if (EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] != "00" && 
        EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] != "99" && 
        (EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX]
         in XGPTBL.XGPCD && 
        XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")) /* Active and valid on table*/
          set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(086); /* GPC is invalid*/
          set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] cursor, bold;
        end
      end


       /* Validate Department Id*/
       /* Wildcard can be entered for this field, however,*/
       /* if specified, must be valid for Customer Id (required)*/

      if (EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] == 0 || 
      EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] == -1)
        EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] = -1;
        set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] normal;
      else
        if (EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] > 0)

          set KUJREC empty;

          KUJREC.KUCCOID = EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX];
          KUJREC.XNXCD = EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX];

          EK0BS-VDEPT001-S(); /* Select Unique VDEPT001 row*/

          if (SQLCA.VAGen_SQLCODE == 0)
            set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] normal;
          else
            converseLib.validationFailed(693); /* Dept Id is invalid*/
            set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] cursor, bold;
          end
        else
          converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] cursor, bold;
          set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] cursor, bold;
        end
      end

       /* Validate Customer Store Id*/
       /* Wildcard (-1) can be entered for this field, however,*/
       /* if specified, must be valid Store for Customer (required)*/

      if (EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] == 0 || 
      EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] == -1)
        EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] = -1;
        set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] normal;
      else
        if (EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] > 0)

          set VSTORE02 empty;

          VSTORE02.CU-CO-ID = EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX];
          VSTORE02.CU-STOR-ID = EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX];

          EK0BS-VSTORE02-S(); /* Select Unique VSTORE02 row*/

          if (SQLCA.VAGen_SQLCODE == 0)
            set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] normal;
          else
            converseLib.validationFailed(082); /* Store Id is invalid*/
            set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] cursor, bold;
          end
        else
          converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] cursor, bold;
          set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] cursor, bold;
        end
      end


       /* Validate Customer Company Id*/
       /* Wildcard (-1) can be entered for this field, however,*/
       /* valid customer number is required when Store Id or Dept Id*/
       /* is specified*/

      if (EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] == 0 || 
      EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] == -1)
        if (EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] > 0 || 
        EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] > 0)
          converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] cursor, bold;
        else
          EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] = -1;
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] normal;
        end
      else
        set KUCREC empty;

        KUCREC.KUCCOID = EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX];

        EK0BS-VCMPNY01-S(); /* Select Unique VCMPNY01 row*/

        if (SQLCA.VAGen_SQLCODE == 0)
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(083); /* Customer Number is invalid*/
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] cursor, bold;
        end
      end


       /* Validate Resolver/Credit Analyst Userid*/
       /* This is a required field; Userid must be a valid resolver*/
       /* for the Security User*/

      if (EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] == " ")
        converseLib.validationFailed(832); /* Resolver UserId is required*/
        set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] cursor, bold;
      else
        set VCLRES01 empty;

        VCLRES01.CL-CR-ANLS-USER-ID = EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX];
        VCLRES01.XXX-SCRTY-USER-ID = EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID;

        EK0BS-VCLRES01-S(); /* Select Unique VCLRES01 row*/

        if (SQLCA.VAGen_SQLCODE == 0)
          set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] normal;
        else
          converseLib.validationFailed(845); /* Resolver not assigned to Scrty User*/
          set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] cursor, bold;
        end
      end


    else

      EK0BW02.EK0BW-ROW-ADDED[EK0BW-SCR-IDX] = "N";

    end

    EK0BW-SCR-IDX = EK0BW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

   /*  */
   /* For ADD and CHANGE Modes only*/
   /* Compare the key combination against the other*/
   /* key combinations on each detail line on the screen*/
   /*  */

  EK0BW00.EK0BW-SCR-IDX = EK0BW00.EK0BW-SCR-LINES;

  while (EK0BW00.EK0BW-SCR-IDX > 0 && 
  (EK0BW00.EK0BW-MODE-IND == "A" || 
  EK0BW00.EK0BW-MODE-IND == "C"))

    /* Validate if data was entered on detail line, for ADD, or,*/
    /* Validate if data was changed on detail line, for CHANGE*/

    if (EK0BW02.EK0BW-ROW-ADDED[EK0BW-SCR-IDX] == "Y") /* new row*/

      EK0BW00.EK0BW-CL-CR-ANLS-USER-ID = EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-CU-CO-ID = EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-CU-STOR-ID = EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-XNX-DEPT-ID-XREF = EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-XGP-GPC-CD = EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-YCR-CLM-RSN-CD = EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-XCE-CR-ANLS-CD = EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-XSO-SLS-OFC-ID = EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-SM-SREP-ID = EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-SM-SAGCY-ID = EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-XWH-WHSE-CD = EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-TF-CARR-CD = EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-XPC-PROD-CAT-CD = EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-CL-XCEP-FL = EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-CL-RTN-FL = EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-YCT-CLM-TYP-CD = EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-YCS-CLM-STAT-CD1 = EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX];
      EK0BW00.EK0BW-CL-INSP-FL = EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX];

      EK0BW00.EK0BW-LINE-IDX = EK0BW00.EK0BW-SCR-LINES;
      EK0BW00.EK0BW-LINE-COUNT = 0;

      while (EK0BW00.EK0BW-LINE-IDX > 0)

        if (EK0BW00.EK0BW-CL-CR-ANLS-USER-ID == 
        EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-CU-CO-ID == 
        EK0BM001.EK0BM-CU-CO-ID[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-CU-STOR-ID == 
        EK0BM001.EK0BM-CU-STOR-ID[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-XNX-DEPT-ID-XREF == 
        EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-XGP-GPC-CD == 
        EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-YCR-CLM-RSN-CD == 
        EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-XCE-CR-ANLS-CD == 
        EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-XSO-SLS-OFC-ID == 
        EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-SM-SREP-ID == 
        EK0BM001.EK0BM-SM-SREP-ID[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-SM-SAGCY-ID == 
        EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-XWH-WHSE-CD == 
        EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-TF-CARR-CD == 
        EK0BM001.EK0BM-TF-CARR-CD[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-XPC-PROD-CAT-CD == 
        EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-CL-XCEP-FL == 
        EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-CL-RTN-FL == 
        EK0BM001.EK0BM-CL-RTN-FL[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-YCT-CLM-TYP-CD == 
        EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-YCS-CLM-STAT-CD1 == 
        EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-LINE-IDX] && 
        EK0BW00.EK0BW-CL-INSP-FL == 
        EK0BM001.EK0BM-CL-INSP-FL[EK0BW-LINE-IDX])

          EK0BW00.EK0BW-LINE-COUNT = EK0BW00.EK0BW-LINE-COUNT + 1;

        end

        EK0BW00.EK0BW-LINE-IDX = EK0BW-LINE-IDX - 1;

      end

      if (EK0BW00.EK0BW-LINE-COUNT > 1) /* More than one found incl self*/
        converseLib.validationFailed(821); /* same Combo exists on another line*/

        set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] bold;
        set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] bold;

      else

          /* Check to make sure that the Key Combination doesn't already*/
          /* exist on the database*/

        set VCLDIS01 empty;

        VCLDIS01.CL-CR-ANLS-USER-ID = EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX];
        VCLDIS01.XSO-SLS-OFC-ID = EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX];
        VCLDIS01.XWH-WHSE-CD = EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX];
        VCLDIS01.CU-CO-ID = EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX];
        VCLDIS01.CU-STOR-ID = EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX];
        VCLDIS01.XNX-DEPT-ID-XREF = EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX];
        VCLDIS01.XGP-GPC-CD = EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX];
        VCLDIS01.YCR-CLM-RSN-CD = EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX];
        VCLDIS01.YCT-CLM-TYP-CD = EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX];
        VCLDIS01.YCS-CLM-STAT-CD1 = EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX];
        VCLDIS01.SM-SREP-ID = EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX];
        VCLDIS01.SM-SAGCY-ID = EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX];
        VCLDIS01.TF-CARR-CD = EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX];
        VCLDIS01.XCE-CR-ANLS-CD = EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX];
        VCLDIS01.XPC-PROD-CAT-CD = EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX];
        VCLDIS01.CL-XCEP-FL = EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX];
        VCLDIS01.CL-INSP-FL = EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX];
        VCLDIS01.CL-RTN-FL = EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX];

        EK0BS-VCLDIS01-S(); /* Select VCLDIS01 row*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Record was found*/
          converseLib.validationFailed(822); /* same Combo already exist on table*/

          set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] cursor;
          set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] bold;
          set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] bold;
        end

      end

    end

    EK0BW-SCR-IDX = EK0BW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

   /*  */
   /* For DELETE Mode only*/
   /* Validate the column function value entered, bottom to top*/
   /*  */

  EK0BW00.EK0BW-SCR-IDX = EK0BW00.EK0BW-SCR-LINES;

  while (EK0BW00.EK0BW-SCR-IDX > 0 && 
  EK0BW00.EK0BW-MODE-IND == "D")

     /* Validate if there is data on detail line*/

    if (EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] > " ")

        /* Validate Column Function*/

      if (EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] == " ")
        set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] normal;
        EK0BW02.EK0BW-ROW-DELTD[EK0BW-SCR-IDX] = "N";
      else
        if (EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] == "S")
          set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] normal;
          EK0BW02.EK0BW-ROW-DELTD[EK0BW-SCR-IDX] = "Y";
        else
          converseLib.validationFailed(823); /* Invalid Value, must be S*/
          set EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] bold, cursor;
        end
      end
    else
      EK0BW02.EK0BW-ROW-DELTD[EK0BW-SCR-IDX] = "N";
    end

    EK0BW-SCR-IDX = EK0BW-SCR-IDX - 1;

  end


   /* **************************************************************/
                     /* END  EK0B4100*/
   /* **************************************************************/
end // end EK0B4100

// ADD/UPD/DEL Process
Function EK0B4500()
   /*  */
   /* Insert/Update/Delete Process*/
   /*  */

   /* Get current date and time for ZZ fields*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  EK0BW00.ZZ-SDT = TA2REC.TA2GRGGN;
  EK0BW00.ZZ-SETUP-HHMM = TA2REC.TA2TIMHM;
  EK0BW00.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
  EK0BW00.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;

   /* Now, check for changes and perform add or change routine*/

  EK0BW00.EK0BW-SCR-IDX = 1;

  while (EK0BW-SCR-IDX <= EK0BW00.EK0BW-SCR-LINES
   && converseVar.validationMsgNum == 000)

    if (EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] != 
    EK0BW02.EK0BW-COL-FUNC[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] != 
    EK0BW02.CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] != 
    EK0BW02.CU-CO-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] != 
    EK0BW02.CU-STOR-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] != 
    EK0BW02.XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XGP-GPC-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] != 
    EK0BW02.YCR-CLM-RSN-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XCE-CR-ANLS-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] != 
    EK0BW02.XSO-SLS-OFC-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] != 
    EK0BW02.SM-SREP-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] != 
    EK0BW02.SM-SAGCY-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XWH-WHSE-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] != 
    EK0BW02.TF-CARR-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XPC-PROD-CAT-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] != 
    EK0BW02.CL-XCEP-FL[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] != 
    EK0BW02.CL-RTN-FL[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] != 
    EK0BW02.YCT-CLM-TYP-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] != 
    EK0BW02.YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] != 
    EK0BW02.CL-INSP-FL[EK0BW-SCR-IDX])

      if (EK0BW00.EK0BW-MODE-IND == "A") /* ADD Mode*/

        EK0B4600(); /* Insert VCLDIS01 row*/

      else
        if (EK0BW00.EK0BW-MODE-IND == "C") /* CHANGE Mode*/

              /* CHANGE Mode requires Delete and Insert processing*/

          EK0B4800(); /* Delete VCLDIS01 row*/

          EK0B4600(); /* Insert VCLDIS01 row*/

        else /* DELETE Mode*/

          if (EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] == "S")

            EK0B4800(); /* Delete VCLDIS01 row*/

          end

        end
      end
    end

    EK0BW-SCR-IDX = EK0BW-SCR-IDX + 1;

  end

   /* If no errors commit changes, else roll back and exit.*/

  if (converseVar.validationMsgNum == 000) /* No update errors*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* so commit changes*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* roll back changes*/
    return; /* and exit*/
  end

   /* Write updates back to temp storage queue*/

  EK0BW00.EK0BW-SCR-IDX = 1;
  EK0BW02.EK0BW-UPD-STG = "N";

  while (EK0BW-SCR-IDX <= EK0BW00.EK0BW-SCR-LINES)

    if (EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] != 
    EK0BW02.CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] != 
    EK0BW02.CU-CO-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] != 
    EK0BW02.CU-STOR-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] != 
    EK0BW02.XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XGP-GPC-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] != 
    EK0BW02.YCR-CLM-RSN-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XCE-CR-ANLS-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] != 
    EK0BW02.XSO-SLS-OFC-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] != 
    EK0BW02.SM-SREP-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] != 
    EK0BW02.SM-SAGCY-ID[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XWH-WHSE-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] != 
    EK0BW02.TF-CARR-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] != 
    EK0BW02.XPC-PROD-CAT-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] != 
    EK0BW02.CL-XCEP-FL[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] != 
    EK0BW02.CL-RTN-FL[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] != 
    EK0BW02.YCT-CLM-TYP-CD[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] != 
    EK0BW02.YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] || 
    EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] != 
    EK0BW02.CL-INSP-FL[EK0BW-SCR-IDX])

      EK0BW02.EK0BW-UPD-STG = "Y";

      EK0BW02.CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] = EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX];
      EK0BW02.XSO-SLS-OFC-ID[EK0BW-SCR-IDX] = EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX];
      EK0BW02.XWH-WHSE-CD[EK0BW-SCR-IDX] = EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX];
      EK0BW02.CU-CO-ID[EK0BW-SCR-IDX] = EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX];
      EK0BW02.CU-STOR-ID[EK0BW-SCR-IDX] = EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX];
      EK0BW02.XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] = EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX];
      EK0BW02.XGP-GPC-CD[EK0BW-SCR-IDX] = EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX];
      EK0BW02.YCR-CLM-RSN-CD[EK0BW-SCR-IDX] = EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX];
      EK0BW02.YCT-CLM-TYP-CD[EK0BW-SCR-IDX] = EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX];
      EK0BW02.YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] = EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX];
      EK0BW02.SM-SREP-ID[EK0BW-SCR-IDX] = EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX];
      EK0BW02.SM-SAGCY-ID[EK0BW-SCR-IDX] = EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX];
      EK0BW02.TF-CARR-CD[EK0BW-SCR-IDX] = EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX];
      EK0BW02.XCE-CR-ANLS-CD[EK0BW-SCR-IDX] = EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX];
      EK0BW02.XPC-PROD-CAT-CD[EK0BW-SCR-IDX] = EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX];
      EK0BW02.CL-XCEP-FL[EK0BW-SCR-IDX] = EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX];
      EK0BW02.CL-INSP-FL[EK0BW-SCR-IDX] = EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX];
      EK0BW02.CL-RTN-FL[EK0BW-SCR-IDX] = EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX];
    end

    EK0BW-SCR-IDX = EK0BW-SCR-IDX + 1;

  end

  if (EK0BW02.EK0BW-UPD-STG == "Y") /* Need to update TSQ*/

    EK0BW01.EK0BW-TEMP-ITEM = EK0BW02.EK0BW-TEMP-ITEM;

    TA5REC.TA5FNCCD = "U";

    TA5REC.TA5TSQIX = EK0BW00.EK0BW-CURR-PAGE;

    EK0BS-CALL-TA0050();

  end

   /* **************************************************************/
                     /* END  EK0B4500*/
   /* **************************************************************/
end // end EK0B4500

// Insert VCLDIS01 row
Function EK0B4600()

   /* Insert VCLDIS01 Process*/

  set VCLDIS01 empty;

  VCLDIS01.CL-CR-ANLS-USER-ID = EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX];
  VCLDIS01.XSO-SLS-OFC-ID = EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX];
  VCLDIS01.XWH-WHSE-CD = EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX];
  VCLDIS01.CU-CO-ID = EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX];
  VCLDIS01.CU-STOR-ID = EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX];
  VCLDIS01.XNX-DEPT-ID-XREF = EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX];
  VCLDIS01.XGP-GPC-CD = EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX];
  VCLDIS01.YCR-CLM-RSN-CD = EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX];
  VCLDIS01.YCT-CLM-TYP-CD = EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX];
  VCLDIS01.YCS-CLM-STAT-CD1 = EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX];
  VCLDIS01.SM-SREP-ID = EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX];
  VCLDIS01.SM-SAGCY-ID = EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX];
  VCLDIS01.TF-CARR-CD = EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX];
  VCLDIS01.XCE-CR-ANLS-CD = EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX];
  VCLDIS01.XPC-PROD-CAT-CD = EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX];
  VCLDIS01.CL-XCEP-FL = EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX];
  VCLDIS01.CL-INSP-FL = EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX];
  VCLDIS01.CL-RTN-FL = EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX];

  EK0BS-VCLDIS01-S(); /* Select VCLDIS01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(778); /* Record for Insert already exists*/

    set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] cursor;
    set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] bold;

  else

    VCLDIS01.CL-CR-ANLS-USER-ID = EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX];
    VCLDIS01.XSO-SLS-OFC-ID = EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX];
    VCLDIS01.XWH-WHSE-CD = EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX];
    VCLDIS01.CU-CO-ID = EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX];
    VCLDIS01.CU-STOR-ID = EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX];
    VCLDIS01.XNX-DEPT-ID-XREF = EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX];
    VCLDIS01.XGP-GPC-CD = EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX];
    VCLDIS01.YCR-CLM-RSN-CD = EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX];
    VCLDIS01.YCT-CLM-TYP-CD = EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX];
    VCLDIS01.YCS-CLM-STAT-CD1 = EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX];
    VCLDIS01.SM-SREP-ID = EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX];
    VCLDIS01.SM-SAGCY-ID = EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX];
    VCLDIS01.TF-CARR-CD = EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX];
    VCLDIS01.XCE-CR-ANLS-CD = EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX];
    VCLDIS01.XPC-PROD-CAT-CD = EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX];
    VCLDIS01.CL-XCEP-FL = EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX];
    VCLDIS01.CL-INSP-FL = EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX];
    VCLDIS01.CL-RTN-FL = EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX];

    VCLDIS01.ZZ-SDT = EK0BW00.ZZ-SDT;
    VCLDIS01.ZZ-SETUP-HHMM = EK0BW00.ZZ-SETUP-HHMM;
    VCLDIS01.ZZ-CHNG-DT = 0;
    VCLDIS01.ZZ-CHNG-HHMM = 0;
    VCLDIS01.ZZ-CHNG-CNT = 0;

    EK0BS-VCLDIS01-I(); /* Insert VCLDIS01 row*/

    if (SQLCA.VAGen_SQLCODE == 000)
      EK0BW02.EK0BW-ROW-DELTD[EK0BW-SCR-IDX] = "N";
      EK0BW02.EK0BW-ROW-CHNGD[EK0BW-SCR-IDX] = "N";
      EK0BW02.EK0BW-ROW-ADDED[EK0BW-SCR-IDX] = "Y";
      EK0BW02.EK0BW-ROW-EXISTS[EK0BW-SCR-IDX] = "N";
    else
      converseLib.validationFailed(339); /* Data updated by another appl*/

      set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] cursor;
      set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] bold;

    end
  end

end // end EK0B4600

// Delete VCLDIS01 row
Function EK0B4800()

   /* Delete VCLDIS01 Process*/

  set VCLDIS01 empty;

  VCLDIS01.CL-CR-ANLS-USER-ID = EK0BW02.CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX];
  VCLDIS01.XSO-SLS-OFC-ID = EK0BW02.XSO-SLS-OFC-ID[EK0BW-SCR-IDX];
  VCLDIS01.XWH-WHSE-CD = EK0BW02.XWH-WHSE-CD[EK0BW-SCR-IDX];
  VCLDIS01.CU-CO-ID = EK0BW02.CU-CO-ID[EK0BW-SCR-IDX];
  VCLDIS01.CU-STOR-ID = EK0BW02.CU-STOR-ID[EK0BW-SCR-IDX];
  VCLDIS01.XNX-DEPT-ID-XREF = EK0BW02.XNX-DEPT-ID-XREF[EK0BW-SCR-IDX];
  VCLDIS01.XGP-GPC-CD = EK0BW02.XGP-GPC-CD[EK0BW-SCR-IDX];
  VCLDIS01.YCR-CLM-RSN-CD = EK0BW02.YCR-CLM-RSN-CD[EK0BW-SCR-IDX];
  VCLDIS01.YCT-CLM-TYP-CD = EK0BW02.YCT-CLM-TYP-CD[EK0BW-SCR-IDX];
  VCLDIS01.YCS-CLM-STAT-CD1 = EK0BW02.YCS-CLM-STAT-CD1[EK0BW-SCR-IDX];
  VCLDIS01.SM-SREP-ID = EK0BW02.SM-SREP-ID[EK0BW-SCR-IDX];
  VCLDIS01.SM-SAGCY-ID = EK0BW02.SM-SAGCY-ID[EK0BW-SCR-IDX];
  VCLDIS01.TF-CARR-CD = EK0BW02.TF-CARR-CD[EK0BW-SCR-IDX];
  VCLDIS01.XCE-CR-ANLS-CD = EK0BW02.XCE-CR-ANLS-CD[EK0BW-SCR-IDX];
  VCLDIS01.XPC-PROD-CAT-CD = EK0BW02.XPC-PROD-CAT-CD[EK0BW-SCR-IDX];
  VCLDIS01.CL-TF-CLM-FL = EK0BW02.CL-TF-CLM-FL[EK0BW-SCR-IDX];
  VCLDIS01.CL-XCEP-FL = EK0BW02.CL-XCEP-FL[EK0BW-SCR-IDX];
  VCLDIS01.CL-INSP-FL = EK0BW02.CL-INSP-FL[EK0BW-SCR-IDX];
  VCLDIS01.CL-RTN-FL = EK0BW02.CL-RTN-FL[EK0BW-SCR-IDX];

  EK0BS-VCLDIS01-S(); /* Select VCLDIS01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)

    EK0BS-VCLDIS01-D(); /* Delete VCLDIS01 row*/

    if (SQLCA.VAGen_SQLCODE == 000)
      EK0BW02.EK0BW-ROW-DELTD[EK0BW-SCR-IDX] = "Y";
      EK0BW02.EK0BW-ROW-CHNGD[EK0BW-SCR-IDX] = "N";
      EK0BW02.EK0BW-ROW-ADDED[EK0BW-SCR-IDX] = "N";
      EK0BW02.EK0BW-ROW-EXISTS[EK0BW-SCR-IDX] = "N";
    else
      converseLib.validationFailed(339); /* Data updated by another appl*/

      set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] cursor;
      set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] bold;
      set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] bold;

    end
  else
    converseLib.validationFailed(779); /* Record for Delete not found*/

    set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] cursor;
    set EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] bold;
    set EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] bold;

  end
end // end EK0B4800

// Converse CLM TYP Popup
Function EK0B5100()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for YCT-CLM-TYP-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "CLAIM TYPE CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCTTBL.YCTCD[XX0XWCT1] != "999") /* or End of Data*/
        if (YCTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCTTBL.YCTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCTTBL.YCTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && YCTTBL.YCTCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YCTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCTTBL.YCTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCTTBL.YCTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCTTBL.YCTCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0B5100

// Converse CLM RSN Popup
Function EK0B5200()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for YCR-CLM-RSN-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "CLAIM REASON CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCRTBL.YCRCD[XX0XWCT1] != "999") /* or End of Data*/
        if (YCRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCRTBL.YCRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCRTBL.YCRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && YCRTBL.YCRCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YCRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCRTBL.YCRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCRTBL.YCRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCRTBL.YCRCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0B5200

// Converse CLM STAT Popup
Function EK0B5300()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for YCS-CLM-STAT-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "CLAIM STATUS CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCSTBL.YCSCD[XX0XWCT1] != "999") /* or End of Data*/
        if (YCSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCSTBL.YCSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCSTBL.YCSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && YCSTBL.YCSCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YCSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCSTBL.YCSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCSTBL.YCSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCSTBL.YCSCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0B5300

// Converse PROD CAT Popup
Function EK0B5400()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for XPC-PROD-CAT-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "PRODUCT CATEGORY CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XPCTBL.XPCCD[XX0XWCT1] != "999") /* or End of Data*/
        if (XPCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XPCTBL.XPCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XPCTBL.XPCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && XPCTBL.XPCCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XPCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XPCTBL.XPCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XPCTBL.XPCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XPCTBL.XPCCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0B5400

// Converse WAREHOUSE Popup
Function EK0B5500()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for XWH-WHSE-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "WAREHOUSE CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XWHTBL.XWHCD[XX0XWCT1] != "999") /* or End of Data*/
        if (XWHTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XWHTBL.XWHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XWHTBL.XWHNM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && XWHTBL.XWHCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XWHTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XWHTBL.XWHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XWHTBL.XWHNM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XWHTBL.XWHCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0B5500

// Converse SALES OFC Popup
Function EK0B5600()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for XSO-SLS-OFC-ID*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "SALES OFFICE ID DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XSOTBL.XSOCD[XX0XWCT1] != "999") /* or End of Data*/
        if (XSOTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSOTBL.XSOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSOTBL.XSONM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && XSOTBL.XSOCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XSOTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSOTBL.XSOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSOTBL.XSONM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XSOTBL.XSOCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0B5600

// Converse CR ANLS CD Popup
Function EK0B5700()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for XCE-CR-ANLS-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "CREDIT ANALYST CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XCETBL.XCECD[XX0XWCT1] != "999") /* or End of Data*/
        if (XCETBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCETBL.XCECD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCETBL.XCEDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && XCETBL.XCECD[XX0XWCT1] != "999") /* Or end of data*/
        if (XCETBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCETBL.XCECD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCETBL.XCEDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XCETBL.XCECD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0B5700

// Call TA0020
Function EK0BS-CALL-TA0020()

   /* Call TA0020 to report DB2 or application errors*/

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "EK0B";
  TA1REC.TA1MAP = "EK0BM001";
  if (TA1REC.TA1TYPE == "DB2")
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end EK0BS-CALL-TA0020

// Call TA0050 for Temp Storage
Function EK0BS-CALL-TA0050()

   /* Call TA0050 to manage the Temp Storage quere*/
   /* If problems, report to TA0020.*/

  EK0BW01.EK0BW-RCD-SIZE = 0640;
  call "TA0050" (EK0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0000) /* Problems*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0BS-CALL-TA0050";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0050";
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    EK0BS-CALL-TA0020();
    converseLib.validationFailed(811); /* Unexpected error*/
    exit stack;
  end

end // end EK0BS-CALL-TA0050

// Check PF Key Pressed
Function EK0BS-CHECK-PFKEYS()
   /* **********************************************************************/
   /* Modification History                              **/
   /* Date     Userid     Description                                 **/
   /* ----------  ------  ---------------------------------------------- **/
   /* 06-22-1998  HMACAL  Modified to allow other Security Users to be   **/
   /* able to add, change, delete and inquire on     **/
   /* another Security User's Claims Distribution    **/
   /* information.                                   **/
   /* **/
   /* **********************************************************************/

   /* Check for valid PF keys and Transfer Options*/

  if (converseVar.eventKey is pa2) /* Need refresh*/
    set EK0BW02 empty; /* Scrap table*/
    EK0BW00.EK0BW-MODE-IND = "I"; /* Switch to Inquire Mode*/
    EK0BW00.EK0BW-CURR-PAGE = 001;
    EK0BW00.EK0BW-CURR-RCD = 001;
    return;
  end

  if (converseVar.eventKey is enter) /* If ENTER pressed*/
    if (EK0BM001.CATOAP == " ") /* If Opt is blank*/
      if (EK0BM001.CAITEM == " ") /* And Item is blank*/
        return; /* OK, so exit*/
      else /* Cannot have item without option*/
        converseLib.validationFailed(285); /* Tell user*/
        set EK0BM001.CAITEM cursor, bold;
        return;
      end /* OK, so exit*/
    else
      EK0BS-PURGE-QUEUE(); /* Purge temp storage*/
      COMMAREA.CATOAP = EK0BM001.CATOAP;
      COMMAREA.CAITEM = EK0BM001.CAITEM;
      XSEXIT(); /* Try to get there*/
      converseLib.validationFailed(006); /* Cannot transfer*/
      set EK0BM001.CATOAP cursor, bold;
      return;
    end
  else
    if (EK0BM001.CATOAP != " " /* If Opt entered*/
     || EK0BM001.CAITEM != " ") /* or item entered*/
      converseLib.validationFailed(812); /* Can't use option and PFkey*/
      set EK0BM001.CATOAP cursor, bold;
      set EK0BM001.CAITEM bold;
      return;
    end
  end

  if (converseVar.eventKey is pf1) /* Help System*/
    EK0BS-PURGE-QUEUE(); /* Purge temp storage*/
    XSPF1(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf3) /* EK0A Menu*/

    EK0BS-PURGE-QUEUE(); /* Purge temp storage*/

    EK0BW00.EK0BW-END-SCREEN = "Y";

    if (EK0BW00.EK0BW-MODE-IND == "I") /* Inquire*/

      COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      XSEXIT(); /* Exit to another application*/

      XSPF4(); /* Try to get there*/
      converseLib.validationFailed(811); /* Cannot transfer*/
      return;
    else /* PF3 from CHANGE or ADD or DELETE mode*/
      EK0BW00.EK0BW-MODE-IND = "I"; /* Switch to Inquire Mode*/
      EK0BW00.EK0BW-CURR-PAGE = 001;
      EK0BW00.EK0BW-CURR-RCD = 001;
      return;
    end
  end

  if (converseVar.eventKey is pf4) /* Master Menu*/
    EK0BS-PURGE-QUEUE(); /* Purge temp storage*/
    COMMAREA.CATOAP = "KL0A";
    XSEXIT(); /* Exit to another application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf7) /* scroll up*/
    if (EK0BW02.EK0BW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0BW00.EK0BW-END-SCREEN = "N";
      return;
    end
    if (EK0BW00.EK0BW-CURR-PAGE == 1)
      converseLib.validationFailed(813); /* at the first page*/
      return;
    else
      EK0BW00.EK0BW-CURR-PAGE = EK0BW00.EK0BW-CURR-PAGE - 1;
      return;
    end
  end

  if (converseVar.eventKey is pf8) /* scroll down*/
    if (EK0BW02.EK0BW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0BW00.EK0BW-END-SCREEN = "N";
      return;
    end
    if (EK0BW00.EK0BW-CURR-PAGE == EK0BW00.EK0BW-MAX-PAGE)
      converseLib.validationFailed(814); /* at the last page*/
      return;
    else
      EK0BW00.EK0BW-CURR-PAGE = EK0BW00.EK0BW-CURR-PAGE + 1;
      return;
    end
  end

  if (converseVar.eventKey is pf9) /* go to ADD mode*/
    if (EK0BW00.EK0BW-MODE-IND == "A" ||  /* If already in ADD or*/
    EK0BW00.EK0BW-MODE-IND == "C" ||      /* CHANGE mode or*/
    EK0BW00.EK0BW-MODE-IND == "D")        /* DELETE mode*/
        /* continue down to INVALID PF Key*/
    else
      if (EK0BW00.EK0BW-ALLOW-ACCESS-FL == "N" || 
      EK0BW00.EK0BW-SUPER-USER-FL == "N")
           /* or EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID NE COMMAREA.CAUSERID;*/
        converseLib.validationFailed(784);
        set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID cursor, bold;
        EK0BW00.EK0BW-END-SCREEN = "N";
        EK0BW00.EK0BW-MODE-IND = "I"; /* Switch to Inquire Mode*/
        EK0BW00.EK0BW-CURR-PAGE = 001;
        EK0BW00.EK0BW-CURR-RCD = 001;
        return;
      end
      if (EK0BW02.EK0BW-SCREEN-CHNGD == "Y") /* User entered changes*/
        converseLib.validationFailed(812); /* Can't change & scroll*/
        EK0BW00.EK0BW-END-SCREEN = "Y";
        EK0BW00.EK0BW-MODE-IND = "I"; /* Switch to Inquire Mode*/
        EK0BW00.EK0BW-CURR-PAGE = 001;
        EK0BW00.EK0BW-CURR-RCD = 001;
        return;
      else
        if (COMMAREA.CAADDFL == "Y") /* User can add*/
          EK0BS-PURGE-QUEUE(); /* Purge temp storage*/

          set EK0BW01 empty;
          set EK0BW02 empty;
          EK0BW00.EK0BW-CURR-PAGE = 1;
          EK0BW00.EK0BW-CURR-RCD = 1;
          EK0BW00.EK0BW-MAX-PAGE = 1;
          EK0BM001.EK0BM-CURR-PAGE = EK0BW00.EK0BW-CURR-PAGE;
          EK0BM001.EK0BM-MAX-PAGE = EK0BW00.EK0BW-MAX-PAGE;
          EK0BW00.EK0BW-MODE-IND = "A";

          EK0BS-SET-ADD-SCR(); /* Setup ADD screen*/

          return;
        else
          converseLib.validationFailed(562); /* Don't have authority*/
          return;
        end
      end
    end
  end

  if (converseVar.eventKey is pf10) /* go to CHANGE mode*/
    if (EK0BW00.EK0BW-MODE-IND == "C" ||  /* If already in CHANGE or*/
    EK0BW00.EK0BW-MODE-IND == "A" ||      /* ADD mode or*/
    EK0BW00.EK0BW-MODE-IND == "D" ||      /* DELETE mode or*/
    EK0BM001.EK0BM-YCT-CLM-TYP-CD[1] == " ") /* No entries on screen*/
        /* continue down to INVALID PF Key*/
    else
      if (EK0BW00.EK0BW-ALLOW-ACCESS-FL == "N" || 
      EK0BW00.EK0BW-SUPER-USER-FL == "N")
           /* or EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID NE COMMAREA.CAUSERID;*/
        converseLib.validationFailed(784);
        set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID cursor, bold;
        EK0BW00.EK0BW-END-SCREEN = "N";
        EK0BW00.EK0BW-MODE-IND = "I"; /* Switch to Inquire Mode*/
        EK0BW00.EK0BW-CURR-PAGE = 001;
        EK0BW00.EK0BW-CURR-RCD = 001;
        return;
      end
      if (EK0BW02.EK0BW-SCREEN-CHNGD == "Y") /* User entered changes*/
        converseLib.validationFailed(812); /* Can't change & scroll*/
        EK0BW00.EK0BW-END-SCREEN = "Y";
        EK0BW00.EK0BW-MODE-IND = "I"; /* Switch to Inquire Mode*/
        EK0BW00.EK0BW-CURR-PAGE = 001;
        EK0BW00.EK0BW-CURR-RCD = 001;
        return;
      else
        if (COMMAREA.CACHGFL == "Y") /* User can Change*/
          EK0BW00.EK0BW-MODE-IND = "C";
          return;
        else
          converseLib.validationFailed(562); /* Don't have authority*/
          return;
        end
      end
    end
  end

  if (converseVar.eventKey is pf11) /* go to DELETE mode*/
    if (EK0BW00.EK0BW-MODE-IND == "D" ||  /* If already in DELETE or*/
    EK0BW00.EK0BW-MODE-IND == "A" ||      /* ADD mode or*/
    EK0BW00.EK0BW-MODE-IND == "C" ||      /* CHANGE mode or*/
    EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[1] == " ") /* No entries on screen*/
        /* continue down to INVALID PF Key*/
    else
      if (EK0BW00.EK0BW-ALLOW-ACCESS-FL == "N" || 
      EK0BW00.EK0BW-SUPER-USER-FL == "N")
           /* or EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID NE COMMAREA.CAUSERID;*/
        converseLib.validationFailed(784);
        set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID cursor, bold;
        EK0BW00.EK0BW-END-SCREEN = "N";
        EK0BW00.EK0BW-MODE-IND = "I"; /* Switch to Inquire Mode*/
        EK0BW00.EK0BW-CURR-PAGE = 001;
        EK0BW00.EK0BW-CURR-RCD = 001;
        return;
      end
      if (EK0BW02.EK0BW-SCREEN-CHNGD == "Y") /* User entered changes*/
        converseLib.validationFailed(812); /* Can't change & scroll*/
        EK0BW00.EK0BW-END-SCREEN = "Y";
        EK0BW00.EK0BW-MODE-IND = "I"; /* Switch to Inquire Mode*/
        EK0BW00.EK0BW-CURR-PAGE = 001;
        EK0BW00.EK0BW-CURR-RCD = 001;
        return;
      else
        if (COMMAREA.CADELFL == "Y") /* User can Delete*/
          EK0BW00.EK0BW-MODE-IND = "D";
          converseLib.validationFailed(827); /* Mode changed; Select line to delete*/
          return;
        else
          converseLib.validationFailed(562); /* Don't have authority*/
          return;
        end
      end
    end
  end

  if (converseVar.eventKey is pf12) /* User has confirmed*/
    if (EK0BW00.EK0BW-MODE-IND == "I")
        /* continue as invalid PF Key*/
    else /* User has confirmed ADD, CHANGE or DELETE*/
      return;
    end
  end

  if (converseVar.eventKey is pf19) /* Clear all Criteria, redisplay ALL*/
    if (EK0BW00.EK0BW-ALLOW-ACCESS-FL == "N" || 
    EK0BW00.EK0BW-SUPER-USER-FL == "N")
        /* or EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID NE COMMAREA.CAUSERID;*/
      converseLib.validationFailed(784);
      set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID cursor, bold;
      EK0BW00.EK0BW-END-SCREEN = "N";
      EK0BW00.EK0BW-MODE-IND = "I"; /* Switch to Inquire Mode*/
      EK0BW00.EK0BW-CURR-PAGE = 001;
      EK0BW00.EK0BW-CURR-RCD = 001;
      return;
    end
    EK0BW00.EK0BW-SEARCH-CRITERIA = " ";
    EK0BW00.EK0BW-S-CU-CO-ID = 0;
    EK0BW00.EK0BW-S-CU-STOR-ID = 0;
    EK0BW00.EK0BW-S-XNX-DEPT-ID-XREF = 0;
    EK0BW00.EK0BW-S-SM-SREP-ID = 0;
    EK0BW00.EK0BW-S-ALL = "A";

    EK0BS-PURGE-QUEUE(); /* Purge temp storage*/

    EK0BW00.EK0BW-END-SCREEN = "Y";
    EK0BW00.EK0BW-MODE-IND = "I"; /* Switch to Inquire Mode*/
    EK0BW00.EK0BW-CURR-PAGE = 001;
    EK0BW00.EK0BW-CURR-RCD = 001;
    return;
  end


  converseLib.validationFailed(002); /* Invalid PF key*/

end // end EK0BS-CHECK-PFKEYS

// Display Popup Window(s)
Function EK0BS-POPUP-WINDOW()
   /* ------------------------------------------------------------*/
   /* PopUp Window processing for Data Distribution Code and GPC*/
   /* ------------------------------------------------------------*/

  EK0BW00.EK0BW-POPUP-FL = "Y";

  XPXX001(); /* Initialize popup window*/


  if (EK0BW00.EK0BW-POPUP-IND == "1" ||  /* Claim Type Code Popup (Search)*/
  EK0BW00.EK0BW-POPUP-IND == "3")        /* Claim Type Code Popup (Detail)*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0B5100(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0BW00.EK0BW-POPUP-IND == "1") /* Claim Type Popup on Search*/
        EK0BM001.EK0BM-S-YCT-CLM-TYP-CD = YCTTBL.YCTCD[XX0XWPIX];
        EK0BW00.EK0BW-S-YCT-CLM-TYP-CD = YCTTBL.YCTCD[XX0XWPIX];
        set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD cursor;
        set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD normal;
      else /* 3  /* Claim Type Popup on Detail*/
        EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] = YCTTBL.YCTCD[XX0XWPIX];
        set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] normal;
      end
    else
      if (EK0BW00.EK0BW-POPUP-IND == "1") /* Claim Type Popup on Search*/
        EK0BM001.EK0BM-S-YCT-CLM-TYP-CD = " ";
        set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD cursor;
        set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD normal;
      else /* Claim Type Popup on Detail*/
        EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] = " ";
        set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] normal;
      end
    end

  end


  if (EK0BW00.EK0BW-POPUP-IND == "2" ||  /* Claim Reason Code Popup (Search)*/
  EK0BW00.EK0BW-POPUP-IND == "4")        /* Claim Reason Code Popup (Detail)*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0B5200(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0BW00.EK0BW-POPUP-IND == "2") /* Claim Rsn Popup on Search*/
        EK0BM001.EK0BM-S-YCR-CLM-RSN-CD = YCRTBL.YCRCD[XX0XWPIX];
        EK0BW00.EK0BW-S-YCR-CLM-RSN-CD = YCRTBL.YCRCD[XX0XWPIX];
        set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD cursor;
        set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD normal;
      else /* 4   /* Claim Rsn Popup on Detail*/
        EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] = YCRTBL.YCRCD[XX0XWPIX];
        set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] normal;
      end
    else
      if (EK0BW00.EK0BW-POPUP-IND == "2") /* Claim Type Popup on Search*/
        EK0BM001.EK0BM-S-YCR-CLM-RSN-CD = " ";
        set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD cursor;
        set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD normal;
      else /* 4   /* Claim Type Popup on Detail*/
        EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] = " ";
        set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] normal;
      end
    end

  end


  if (EK0BW00.EK0BW-POPUP-IND == "5" ||  /* Clm Stat Cd Popup on Search*/
  EK0BW00.EK0BW-POPUP-IND == "6")        /* Clm Stat Cd Popup on Detail*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0B5300(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0BW00.EK0BW-POPUP-IND == "5") /* Clm Stat Popup on Search*/
        EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 = YCSTBL.YCSCD[XX0XWPIX];
        EK0BW00.EK0BW-S-YCS-CLM-STAT-CD1 = YCSTBL.YCSCD[XX0XWPIX];
        set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 cursor;
        set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 normal;
      else /* 6   /* Clm Stat Popup on Detail*/
        EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] = YCSTBL.YCSCD[XX0XWPIX];
        set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] normal;
      end
    else
      if (EK0BW00.EK0BW-POPUP-IND == "5") /* Clm Stat Popup on Search*/
        EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 = " ";
        set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 cursor;
        set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 normal;
      else /* 6   /* Clm Stat Popup on Detail*/
        EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] = " ";
        set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] normal;
      end
    end

  end


  if (EK0BW00.EK0BW-POPUP-IND == "7" ||  /* Prod Cat Cd Popup on Search*/
  EK0BW00.EK0BW-POPUP-IND == "8")        /* Prod Cat Cd Popup on Detail*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0B5400(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0BW00.EK0BW-POPUP-IND == "7") /* Prod Cat Popup on Search*/
        EK0BM001.EK0BM-S-XPC-PROD-CAT-CD = XPCTBL.XPCCD[XX0XWPIX];
        EK0BW00.EK0BW-S-XPC-PROD-CAT-CD = XPCTBL.XPCCD[XX0XWPIX];
        set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD cursor;
        set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD normal;
      else /* 8   /* Prod Cat Popup on Detail*/
        EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] = XPCTBL.XPCCD[XX0XWPIX];
        set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] normal;
      end
    else
      if (EK0BW00.EK0BW-POPUP-IND == "7") /* Prod Cat Popup on Search*/
        EK0BM001.EK0BM-S-XPC-PROD-CAT-CD = " ";
        set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD cursor;
        set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD normal;
      else /* 8   /* Prod Cat Popup on Detail*/
        EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] = " ";
        set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] normal;
      end
    end

  end


  if (EK0BW00.EK0BW-POPUP-IND == "9" ||  /* Warehouse Cd Popup on Search*/
  EK0BW00.EK0BW-POPUP-IND == "10")       /* Warehouse Cd Popup on Detail*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0B5500(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0BW00.EK0BW-POPUP-IND == "9") /* Warehouse Popup on Search*/
        EK0BM001.EK0BM-S-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];
        EK0BW00.EK0BW-S-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];
        set EK0BM001.EK0BM-S-XWH-WHSE-CD cursor;
        set EK0BM001.EK0BM-S-XWH-WHSE-CD normal;
      else /* 10  /* Warehouse Popup on Detail*/
        EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] = XWHTBL.XWHCD[XX0XWPIX];
        set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] normal;
      end
    else
      if (EK0BW00.EK0BW-POPUP-IND == "9") /* Warehouse Popup on Search*/
        EK0BM001.EK0BM-S-XWH-WHSE-CD = " ";
        set EK0BM001.EK0BM-S-XWH-WHSE-CD cursor;
        set EK0BM001.EK0BM-S-XWH-WHSE-CD normal;
      else /* 10  /* Warehouse Popup on Detail*/
        EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] = " ";
        set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] normal;
      end
    end

  end


  if (EK0BW00.EK0BW-POPUP-IND == "11" ||  /* Sales Office Popup on Search*/
  EK0BW00.EK0BW-POPUP-IND == "12")        /* Sales Office Popup on Detail*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0B5600(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0BW00.EK0BW-POPUP-IND == "11") /* Sales Ofc Popup on Search*/
        EK0BM001.EK0BM-S-XSO-SLS-OFC-ID = XSOTBL.XSOCD[XX0XWPIX];
        EK0BW00.EK0BW-S-XSO-SLS-OFC-ID = XSOTBL.XSOCD[XX0XWPIX];
        set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID cursor;
        set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID normal;
      else /* 12  /* Sales Ofc Popup on Detail*/
        EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] = XSOTBL.XSOCD[XX0XWPIX];
        set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] normal;
      end
    else
      if (EK0BW00.EK0BW-POPUP-IND == "11") /* Sales Ofc Popup on Search*/
        EK0BM001.EK0BM-S-XSO-SLS-OFC-ID = " ";
        set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID cursor;
        set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID normal;
      else /* 12   /* Sales Ofc Popup on Detail*/
        EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] = " ";
        set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] normal;
      end
    end

  end


  if (EK0BW00.EK0BW-POPUP-IND == "13" ||  /* CR Anls Code Popup on Search*/
  EK0BW00.EK0BW-POPUP-IND == "14")        /* CR Anls Code Popup on Detail*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0B5700(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0BW00.EK0BW-POPUP-IND == "13") /* CR Anls Cd Popup on Search*/
        EK0BM001.EK0BM-S-XCE-CR-ANLS-CD = XCETBL.XCECD[XX0XWPIX];
        EK0BW00.EK0BW-S-XCE-CR-ANLS-CD = XCETBL.XCECD[XX0XWPIX];
        set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD cursor;
        set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD normal;
      else /* 14   /* CR Anls Cd Popup on Detail*/
        EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] = XCETBL.XCECD[XX0XWPIX];
        set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] normal;
      end
    else
      if (EK0BW00.EK0BW-POPUP-IND == "13") /* CR Anls Cd Popup on Search*/
        EK0BM001.EK0BM-S-XCE-CR-ANLS-CD = " ";
        set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD cursor;
        set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD normal;
      else /* 14   /* CR Anls Cd Popup on Detail*/
        EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] = " ";
        set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] normal;
      end
    end

  end


  if (EK0BW00.EK0BW-POPUP-IND == "15" ||  /* GPC Popup on Search*/
  EK0BW00.EK0BW-POPUP-IND == "16")        /* GPC Popup on Detail*/

    XX0XW02.XX0XWHDR = "GENERAL PRODUCT CLASS CODE DESCRIPTION";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0BW00.EK0BW-POPUP-IND == "15") /* CR Anls Cd Popup on Search*/
        EK0BM001.EK0BM-S-XGP-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        EK0BW00.EK0BW-S-XGP-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        set EK0BM001.EK0BM-S-XGP-GPC-CD cursor;
        set EK0BM001.EK0BM-S-XGP-GPC-CD normal;
      else /* 16   /* CR Anls Cd Popup on Detail*/
        EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] = XGPTBL.XGPCD[XX0XWPIX];
        set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] normal;
      end
    else
      if (EK0BW00.EK0BW-POPUP-IND == "15") /* CR Anls Cd Popup on Search*/
        EK0BM001.EK0BM-S-XGP-GPC-CD = " ";
        set EK0BM001.EK0BM-S-XGP-GPC-CD cursor;
        set EK0BM001.EK0BM-S-XGP-GPC-CD normal;
      else /* 16   /* CR Anls Cd Popup on Detail*/
        EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] = " ";
        set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] cursor;
        set EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] normal;
      end
    end

  end


  converseLib.clearScreen();
   /* Clear screen before display*/

  converseLib.validationFailed(810); /* Requested list(s) displayed*/

   /* ------------------------------------------------------------*/
   /* End EK0BS-POPUP-WINDOW*/
   /* ------------------------------------------------------------*/
end // end EK0BS-POPUP-WINDOW

// Purge temp storage queue
Function EK0BS-PURGE-QUEUE()

   /* Call TA0050 to manage the Temp Storage quere*/
   /* If problems, report to TA0020.*/

  TA5REC.TA5APPID = "EK0B";
  TA5REC.TA5FNCCD = "P";
  EK0BW01.EK0BW-RCD-SIZE = 0640;
  call "TA0050" (EK0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0000) /* Problems*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0BS-PURGE-QUEUE";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0050";
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    EK0BS-CALL-TA0020();
    converseLib.validationFailed(001); /* Unexpected error*/
    exit stack;
  end

end // end EK0BS-PURGE-QUEUE

// Setup ADD screen
Function EK0BS-SET-ADD-SCR()
  EK0BW00.EK0BW-SCR-IDX = 1;
  EK0BW00.EK0BW-LINE-IDX = 1;

  while (EK0BW00.EK0BW-SCR-IDX <= EK0BW00.EK0BW-SCR-LINES)

    if (EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] == "S")

      EK0BM001.EK0BM-COL-FUNC[EK0BW-LINE-IDX] = " ";
      EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-LINE-IDX] = EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-CU-CO-ID[EK0BW-LINE-IDX] = EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-CU-STOR-ID[EK0BW-LINE-IDX] = EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-LINE-IDX] = EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-LINE-IDX] = EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-LINE-IDX] = EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-LINE-IDX] = EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-LINE-IDX] = EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-LINE-IDX] = EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-SM-SREP-ID[EK0BW-LINE-IDX] = EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-LINE-IDX] = EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-TF-CARR-CD[EK0BW-LINE-IDX] = EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-LINE-IDX] = EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-LINE-IDX] = EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-CL-RTN-FL[EK0BW-LINE-IDX] = EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-LINE-IDX] = EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-LINE-IDX] = EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX];
      EK0BM001.EK0BM-CL-INSP-FL[EK0BW-LINE-IDX] = EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX];

      EK0BW02.EK0BW-ROW-DELTD[EK0BW-LINE-IDX] = "N";
      EK0BW02.EK0BW-ROW-CHNGD[EK0BW-LINE-IDX] = "N";
      EK0BW02.EK0BW-ROW-EXISTS[EK0BW-LINE-IDX] = "N";
      EK0BW02.EK0BW-ROW-ADDED[EK0BW-LINE-IDX] = "Y";

      EK0BW00.EK0BW-LINE-IDX = EK0BW-LINE-IDX + 1;

    end

    EK0BW00.EK0BW-SCR-IDX = EK0BW-SCR-IDX + 1;

  end

  EK0BW00.EK0BW-SCR-IDX = EK0BW00.EK0BW-LINE-IDX;

  while (EK0BW00.EK0BW-SCR-IDX <= EK0BW00.EK0BW-SCR-LINES)

    EK0BM001.EK0BM-COL-FUNC[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-CL-CR-ANLS-USER-ID[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-CU-CO-ID[EK0BW-SCR-IDX] = 0;
    EK0BM001.EK0BM-CU-STOR-ID[EK0BW-SCR-IDX] = 0;
    EK0BM001.EK0BM-XNX-DEPT-ID-XREF[EK0BW-SCR-IDX] = 0;
    EK0BM001.EK0BM-XGP-GPC-CD[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-YCR-CLM-RSN-CD[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-XCE-CR-ANLS-CD[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-XSO-SLS-OFC-ID[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-XWH-WHSE-CD[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-SM-SREP-ID[EK0BW-SCR-IDX] = 0;
    EK0BM001.EK0BM-SM-SAGCY-ID[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-TF-CARR-CD[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-XPC-PROD-CAT-CD[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-CL-XCEP-FL[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-CL-RTN-FL[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-YCS-CLM-STAT-CD1[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-YCT-CLM-TYP-CD[EK0BW-SCR-IDX] = " ";
    EK0BM001.EK0BM-CL-INSP-FL[EK0BW-SCR-IDX] = " ";

    EK0BW02.EK0BW-ROW-DELTD[EK0BW-SCR-IDX] = "N";
    EK0BW02.EK0BW-ROW-CHNGD[EK0BW-SCR-IDX] = "N";
    EK0BW02.EK0BW-ROW-EXISTS[EK0BW-SCR-IDX] = "N";
    EK0BW02.EK0BW-ROW-ADDED[EK0BW-SCR-IDX] = "Y";

    EK0BW00.EK0BW-SCR-IDX = EK0BW-SCR-IDX + 1;

  end

  EK0BW01.EK0BW-TEMP-ITEM = EK0BW02.EK0BW-TEMP-ITEM;

  TA5REC.TA5FNCCD = "A";

  EK0BS-CALL-TA0050(); /* Write TS Queue record*/

end // end EK0BS-SET-ADD-SCR

// Validate Search criteria
Function EK0BS-VAL-SEARCH()
   /* *********************************************************************/
   /* Modification History                                       **/
   /* Date     Userid     Description                                **/
   /* ----------  ------  --------------------------------------------- **/
   /* 09-24-1998  HMACAL  Modified to not check if specific codes on    **/
   /* the Corporate table are Active or Inactive;   **/
   /* Also, allowed search value of '99' for        **/
   /* Warehouse Code.                               **/
   /* **/
   /* *********************************************************************/
   /*  */
   /* Validate the search criteria entered. If an 'A' is entered on the*/
   /* All field, initialize all the other Search fields to spaces or zeroes*/
   /*  */

   /* Validate ALL field*/

  EK0BW00.EK0BW-S-ALL = EK0BM001.EK0BM-S-ALL;

  if (EK0BM001.EK0BM-S-ALL == "A")

    EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID = " ";
    EK0BM001.EK0BM-S-ANLS-USER-NAME = " ";
    EK0BM001.EK0BM-S-CU-CO-ID = 0;
    EK0BM001.EK0BM-S-CU-STOR-ID = 0;
    EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF = 0;
    EK0BM001.EK0BM-S-XGP-GPC-CD = " ";
    EK0BM001.EK0BM-S-YCR-CLM-RSN-CD = " ";
    EK0BM001.EK0BM-S-XCE-CR-ANLS-CD = " ";
    EK0BM001.EK0BM-S-XSO-SLS-OFC-ID = " ";
    EK0BM001.EK0BM-S-SM-SREP-ID = 0;
    EK0BM001.EK0BM-S-SM-SAGCY-ID = " ";
    EK0BM001.EK0BM-S-XWH-WHSE-CD = " ";
    EK0BM001.EK0BM-S-TF-CARR-CD = " ";
    EK0BM001.EK0BM-S-XPC-PROD-CAT-CD = " ";
    EK0BM001.EK0BM-S-CL-XCEP-FL = " ";
    EK0BM001.EK0BM-S-CL-RTN-FL = " ";
    EK0BM001.EK0BM-S-YCT-CLM-TYP-CD = " ";
    EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 = " ";
    EK0BM001.EK0BM-S-CL-INSP-FL = " ";
  else
    EK0BW00.EK0BW-S-XXX-SCRTY-USER-ID = EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID;
    EK0BW00.EK0BW-S-CL-CR-ANLS-USER-ID = EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID;
    EK0BW00.EK0BW-S-CU-CO-ID = EK0BM001.EK0BM-S-CU-CO-ID;
    EK0BW00.EK0BW-S-CU-STOR-ID = EK0BM001.EK0BM-S-CU-STOR-ID;
    EK0BW00.EK0BW-S-XNX-DEPT-ID-XREF = EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF;
    EK0BW00.EK0BW-S-XGP-GPC-CD = EK0BM001.EK0BM-S-XGP-GPC-CD;
    EK0BW00.EK0BW-S-YCR-CLM-RSN-CD = EK0BM001.EK0BM-S-YCR-CLM-RSN-CD;
    EK0BW00.EK0BW-S-XCE-CR-ANLS-CD = EK0BM001.EK0BM-S-XCE-CR-ANLS-CD;
    EK0BW00.EK0BW-S-XSO-SLS-OFC-ID = EK0BM001.EK0BM-S-XSO-SLS-OFC-ID;
    EK0BW00.EK0BW-S-SM-SREP-ID = EK0BM001.EK0BM-S-SM-SREP-ID;
    EK0BW00.EK0BW-S-SM-SAGCY-ID = EK0BM001.EK0BM-S-SM-SAGCY-ID;
    EK0BW00.EK0BW-S-XWH-WHSE-CD = EK0BM001.EK0BM-S-XWH-WHSE-CD;
    EK0BW00.EK0BW-S-TF-CARR-CD = EK0BM001.EK0BM-S-TF-CARR-CD;
    EK0BW00.EK0BW-S-XPC-PROD-CAT-CD = EK0BM001.EK0BM-S-XPC-PROD-CAT-CD;
    EK0BW00.EK0BW-S-CL-XCEP-FL = EK0BM001.EK0BM-S-CL-XCEP-FL;
    EK0BW00.EK0BW-S-CL-RTN-FL = EK0BM001.EK0BM-S-CL-RTN-FL;
    EK0BW00.EK0BW-S-YCT-CLM-TYP-CD = EK0BM001.EK0BM-S-YCT-CLM-TYP-CD;
    EK0BW00.EK0BW-S-YCS-CLM-STAT-CD1 = EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1;
    EK0BW00.EK0BW-S-CL-INSP-FL = EK0BM001.EK0BM-S-CL-INSP-FL;
  end

   /* Validate Inspection Flag*/

  EK0BW00.EK0BW-S-CL-INSP-FL = EK0BM001.EK0BM-S-CL-INSP-FL;

  if (EK0BM001.EK0BM-S-CL-INSP-FL > " ")
    if (EK0BM001.EK0BM-S-CL-INSP-FL == "Y" || 
    EK0BM001.EK0BM-S-CL-INSP-FL == "N")
      set EK0BM001.EK0BM-S-CL-INSP-FL normal;
    else
      converseLib.validationFailed(840);
      set EK0BM001.EK0BM-S-CL-INSP-FL bold, cursor;
    end
  else
    set EK0BM001.EK0BM-S-CL-INSP-FL normal;
  end


   /* Validate Claim Status Code*/

  EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1;

  if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
  EK0BW00.EK0BW-2ND-CHAR == "?" || 
  EK0BW00.EK0BW-3RD-CHAR == "?")

    EK0BW00.EK0BW-POPUP-FL = "Y";
    EK0BW00.EK0BW-POPUP-IND = "5"; /* Claim Rsn PopUp*/

    EK0BS-POPUP-WINDOW();

    return;
  end

  EK0BW00.EK0BW-S-YCS-CLM-STAT-CD1 = EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1;

  if (EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 == " ")
    set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 normal;
  else
    if (EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 != "999" && 
    (EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 in YCSTBL.YCSCD)) /* AND*/
     /* YCSTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 normal;
    else
      converseLib.validationFailed(816); /* Claim Status is invalid*/
      set EK0BM001.EK0BM-S-YCS-CLM-STAT-CD1 cursor, bold;
    end
  end


   /* Validate Claim Type Code*/

  EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-S-YCT-CLM-TYP-CD;

  if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
  EK0BW00.EK0BW-2ND-CHAR == "?" || 
  EK0BW00.EK0BW-3RD-CHAR == "?")

    EK0BW00.EK0BW-POPUP-IND = "1";

    EK0BS-POPUP-WINDOW(); /* Display PopUp Window*/

    return;
  end

  EK0BW00.EK0BW-S-YCT-CLM-TYP-CD = EK0BM001.EK0BM-S-YCT-CLM-TYP-CD;

  if (EK0BM001.EK0BM-S-YCT-CLM-TYP-CD == "  ")
    EK0BW00.EK0BW-S-YCT-CLM-TYP-CD = " ";
    set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD normal;
  else
    if (EK0BM001.EK0BM-S-YCT-CLM-TYP-CD == "999") /* End of data*/
      converseLib.validationFailed(087); /* Claim Type is invalid*/
      set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD cursor, bold;
    else
      if (EK0BM001.EK0BM-S-YCT-CLM-TYP-CD in YCTTBL.YCTCD) /* AND*/
        /* YCTTBL.XXXSTAT(EZETST) EQ 'A'; /* Active*/
        set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD normal;
           /* continue*/
      else
        converseLib.validationFailed(087); /* Claim Type is invalid*/
        set EK0BM001.EK0BM-S-YCT-CLM-TYP-CD cursor, bold;
      end
    end
  end



   /* Validate Claim Return/receipt Flag*/

  EK0BW00.EK0BW-S-CL-RTN-FL = EK0BM001.EK0BM-S-CL-RTN-FL;

  if (EK0BM001.EK0BM-S-CL-RTN-FL == " ")
    set EK0BM001.EK0BM-S-CL-RTN-FL normal;
  else
    if (EK0BM001.EK0BM-S-CL-RTN-FL == "Y" || 
    EK0BM001.EK0BM-S-CL-RTN-FL == "N")
      set EK0BM001.EK0BM-S-CL-RTN-FL normal;
    else
      converseLib.validationFailed(842); /* Invalid Value, must be Y or N*/
      set EK0BM001.EK0BM-S-CL-RTN-FL bold, cursor;
    end
  end


   /* Validate Claim Exception Flag*/

  EK0BW00.EK0BW-S-CL-XCEP-FL = EK0BM001.EK0BM-S-CL-XCEP-FL;

  if (EK0BM001.EK0BM-S-CL-XCEP-FL == " ")
    set EK0BM001.EK0BM-S-CL-XCEP-FL normal;
  else
    if (EK0BM001.EK0BM-S-CL-XCEP-FL == "Y" || 
    EK0BM001.EK0BM-S-CL-XCEP-FL == "N")
      set EK0BM001.EK0BM-S-CL-XCEP-FL normal;
    else
      converseLib.validationFailed(842); /* Invalid Value, must be Y or N*/
      set EK0BM001.EK0BM-S-CL-XCEP-FL bold, cursor;
    end
  end


   /* Validate Product Category Code*/

  EK0BW00.EK0BW-S-XPC-PROD-CAT-CD = EK0BM001.EK0BM-S-XPC-PROD-CAT-CD;

  if (EK0BM001.EK0BM-S-XPC-PROD-CAT-CD == " ")
    set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD normal;
  else
    EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-S-XPC-PROD-CAT-CD;
    if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
    EK0BW00.EK0BW-2ND-CHAR == "?")

      EK0BW00.EK0BW-POPUP-FL = "Y";
      EK0BW00.EK0BW-POPUP-IND = "7"; /* Prod Ctgy PopUp*/

      EK0BS-POPUP-WINDOW();

      return; /* Redisplay map*/
    end

    if (EK0BM001.EK0BM-S-XPC-PROD-CAT-CD != "99" && 
    (EK0BM001.EK0BM-S-XPC-PROD-CAT-CD in XPCTBL.XPCCD)) /* AND*/
     /* XPCTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD normal;
    else
      converseLib.validationFailed(843); /* Product Ctgy Code is invalid*/
      set EK0BM001.EK0BM-S-XPC-PROD-CAT-CD cursor, bold;
    end
  end


   /* Validate Carrier Code*/

  EK0BW00.EK0BW-S-TF-CARR-CD = EK0BM001.EK0BM-S-TF-CARR-CD;

  if (EK0BM001.EK0BM-S-TF-CARR-CD == " ")
    set EK0BM001.EK0BM-S-TF-CARR-CD normal;
  else
    set TF1REC empty;

    TF1REC.TF1CARCD = EK0BM001.EK0BM-S-TF-CARR-CD;

    EK0BS-VCARR001-S(); /* Select VCARR001 unique row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0BM001.EK0BM-S-TF-CARR-CD normal;
    else
      converseLib.validationFailed(403); /* Carrier Code is invalid*/
      set EK0BM001.EK0BM-S-TF-CARR-CD cursor, bold;
    end
  end



   /* Validate Warehouse Code*/

  if (EK0BM001.EK0BM-S-XWH-WHSE-CD == " ")
    EK0BW00.EK0BW-S-XWH-WHSE-CD = EK0BM001.EK0BM-S-XWH-WHSE-CD;

    set EK0BM001.EK0BM-S-XWH-WHSE-CD normal;
  else
    EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-S-XWH-WHSE-CD;
    if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
    EK0BW00.EK0BW-2ND-CHAR == "?")

      EK0BW00.EK0BW-POPUP-FL = "Y";
      EK0BW00.EK0BW-POPUP-IND = "9"; /* Warehouse Code Popup*/

      EK0BS-POPUP-WINDOW();

      return; /* Redisplay map*/
    end

    EK0BW00.EK0BW-S-XWH-WHSE-CD = EK0BM001.EK0BM-S-XWH-WHSE-CD;

   /* IF EK0BM001.EK0BM-S-XWH-WHSE-CD NE '99' AND*/
    if (EK0BM001.EK0BM-S-XWH-WHSE-CD in XWHTBL.XWHCD) /* AND*/
     /* XWHTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0BM001.EK0BM-S-XWH-WHSE-CD normal;
    else
      converseLib.validationFailed(258); /* Warehouse Code is invalid*/
      set EK0BM001.EK0BM-S-XWH-WHSE-CD cursor, bold;
    end
  end


   /* Validate Sales Agency Id*/

  EK0BW00.EK0BW-S-SM-SAGCY-ID = EK0BM001.EK0BM-S-SM-SAGCY-ID;

  if (EK0BM001.EK0BM-S-SM-SAGCY-ID == " ")
    set EK0BM001.EK0BM-S-SM-SAGCY-ID normal;
  else
    set SM5REC empty;

    SM5REC.SM1AGYID = EK0BM001.EK0BM-S-SM-SAGCY-ID;

    EK0BS-VRAGCY01-S2(); /* Select Scan 2 VRAGCY01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)

      EK0BS-VRAGCY01-N2(); /* Fetch 2 VRAGCY01 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        set EK0BM001.EK0BM-S-SM-SAGCY-ID normal;
      else
        converseLib.validationFailed(247); /* Agency Id is invalid*/
        set EK0BM001.EK0BM-S-SM-SAGCY-ID cursor, bold;
      end
    else
      converseLib.validationFailed(247); /* Agency Id is invalid*/
      set EK0BM001.EK0BM-S-SM-SAGCY-ID cursor, bold;
    end

    EK0BS-VRAGCY01-C2(); /* Close 2 VRAGCY01 row*/

  end


   /* Validate Sales Representative Id*/

  EK0BW00.EK0BW-S-SM-SREP-ID = EK0BM001.EK0BM-S-SM-SREP-ID;

  if (EK0BM001.EK0BM-S-SM-SREP-ID == 0)
    set EK0BM001.EK0BM-S-SM-SREP-ID normal;
  else
    set SM4REC empty;

    SM4REC.SM4REPID = EK0BM001.EK0BM-S-SM-SREP-ID;

    EK0BS-VREPS001-S(); /* Select Unique VREPS001 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0BM001.EK0BM-S-SM-SREP-ID normal;
    else
      converseLib.validationFailed(135); /* Serv Rep Id is invalid*/
      set EK0BM001.EK0BM-S-SM-SREP-ID cursor, bold;
    end
  end


   /* Validate Sales Office Id*/

  if (EK0BM001.EK0BM-S-XSO-SLS-OFC-ID == " ")
    EK0BW00.EK0BW-S-XSO-SLS-OFC-ID = EK0BM001.EK0BM-S-XSO-SLS-OFC-ID;

    set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID normal;
  else
    EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-S-XSO-SLS-OFC-ID;
    if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
    EK0BW00.EK0BW-2ND-CHAR == "?")

      EK0BW00.EK0BW-POPUP-FL = "Y";
      EK0BW00.EK0BW-POPUP-IND = "11"; /* Sales Office Popup*/

      EK0BS-POPUP-WINDOW();

      return; /* Redisplay map*/
    end

    EK0BW00.EK0BW-S-XSO-SLS-OFC-ID = EK0BM001.EK0BM-S-XSO-SLS-OFC-ID;

    if (EK0BM001.EK0BM-S-XSO-SLS-OFC-ID != "99" && 
    (EK0BM001.EK0BM-S-XSO-SLS-OFC-ID in XSOTBL.XSOCD)) /* AND*/
     /* XSOTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID normal;
    else
      converseLib.validationFailed(257); /* Sales Office is invalid*/
      set EK0BM001.EK0BM-S-XSO-SLS-OFC-ID cursor, bold;
    end
  end


   /* Validate Credit Analyst Code*/

  if (EK0BM001.EK0BM-S-XCE-CR-ANLS-CD == " ")
    EK0BW00.EK0BW-S-XCE-CR-ANLS-CD = EK0BM001.EK0BM-S-XCE-CR-ANLS-CD;

    set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD normal;
  else
    EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-S-XCE-CR-ANLS-CD;
    if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
    EK0BW00.EK0BW-2ND-CHAR == "?")

      EK0BW00.EK0BW-POPUP-FL = "Y";
      EK0BW00.EK0BW-POPUP-IND = "13"; /* CR Anls Code Popup*/

      EK0BS-POPUP-WINDOW();

      return; /* Redisplay map*/
    end

    EK0BW00.EK0BW-S-XCE-CR-ANLS-CD = EK0BM001.EK0BM-S-XCE-CR-ANLS-CD;

    if (EK0BM001.EK0BM-S-XCE-CR-ANLS-CD != "99" && 
    (EK0BM001.EK0BM-S-XCE-CR-ANLS-CD in XCETBL.XCECD)) /* AND*/
     /* XCETBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD normal;
    else
      converseLib.validationFailed(844); /* Credit Analyst code is invalid*/
      set EK0BM001.EK0BM-S-XCE-CR-ANLS-CD cursor, bold;
    end
  end


   /* Validate Claim Reason Code*/
   /* Claim Reason code can be entered with generic wildcard such as*/
   /* C** or F** or T**;*/

  EK0BW00.EK0BW-RSN-PREFIX = " ";
  EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-S-YCR-CLM-RSN-CD;

  if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
  EK0BW00.EK0BW-2ND-CHAR == "?" || 
  EK0BW00.EK0BW-3RD-CHAR == "?")

    EK0BW00.EK0BW-POPUP-IND = "2";

    EK0BS-POPUP-WINDOW(); /* Display PopUp Window*/

    return;
  end

  EK0BW00.EK0BW-S-YCR-CLM-RSN-CD = EK0BM001.EK0BM-S-YCR-CLM-RSN-CD;

  if ((EK0BM001.EK0BM-S-YCR-CLM-RSN-CD == " ") || 
  (EK0BW00.EK0BW-1ST-CHAR == "C" && 
  EK0BW00.EK0BW-2ND-CHAR == "*") || 
  (EK0BW00.EK0BW-1ST-CHAR == "F" && 
  EK0BW00.EK0BW-2ND-CHAR == "*") || 
  (EK0BW00.EK0BW-1ST-CHAR == "T" && 
  EK0BW00.EK0BW-2ND-CHAR == "*"))
    set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD normal;
    if (EK0BW00.EK0BW-1ST-CHAR == "C" && 
    EK0BW00.EK0BW-2ND-CHAR == "*")
      EK0BW00.EK0BW-RSN-PREFIX = "C";
    else
      if (EK0BW00.EK0BW-1ST-CHAR == "F" && 
      EK0BW00.EK0BW-2ND-CHAR == "*")
        EK0BW00.EK0BW-RSN-PREFIX = "F";
      else
        if (EK0BW00.EK0BW-1ST-CHAR == "T" && 
        EK0BW00.EK0BW-2ND-CHAR == "*")
          EK0BW00.EK0BW-RSN-PREFIX = "T";
        else
          EK0BW00.EK0BW-RSN-PREFIX = " ";
        end
      end
    end
  else
    if (EK0BM001.EK0BM-S-YCR-CLM-RSN-CD == "999") /* End of data*/
      converseLib.validationFailed(817); /* Claim Reason is invalid*/
      set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD cursor, bold;
    else
      if (EK0BM001.EK0BM-S-YCR-CLM-RSN-CD in YCRTBL.YCRCD) /* AND*/
        /* YCRTBL.XXXSTAT(EZETST) = 'A'; /* Active*/
        set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD normal;
      else
        converseLib.validationFailed(817); /* Claim Reason is invalid*/
        set EK0BM001.EK0BM-S-YCR-CLM-RSN-CD cursor, bold;
      end
    end
  end


   /* Validate GPC*/

  if (EK0BM001.EK0BM-S-XGP-GPC-CD == " ")
    EK0BW00.EK0BW-S-XGP-GPC-CD = EK0BM001.EK0BM-S-XGP-GPC-CD;

    set EK0BM001.EK0BM-S-XGP-GPC-CD normal;
  else
    EK0BW00.EK0BW-3-CHAR = EK0BM001.EK0BM-S-XGP-GPC-CD;
    if (EK0BW00.EK0BW-1ST-CHAR == "?" || 
    EK0BW00.EK0BW-2ND-CHAR == "?")

      EK0BW00.EK0BW-POPUP-FL = "Y";
      EK0BW00.EK0BW-POPUP-IND = "15"; /* GPC Popup*/

      EK0BS-POPUP-WINDOW();

      return; /* Redisplay map*/
    end

    EK0BW00.EK0BW-S-XGP-GPC-CD = EK0BM001.EK0BM-S-XGP-GPC-CD;

    if (EK0BM001.EK0BM-S-XGP-GPC-CD != "00" && 
    EK0BM001.EK0BM-S-XGP-GPC-CD != "99" && 
    (EK0BM001.EK0BM-S-XGP-GPC-CD in XGPTBL.XGPCD)) /* AND*/
     /* XGPTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0BM001.EK0BM-S-XGP-GPC-CD normal;
    else
      converseLib.validationFailed(086); /* GPC is invalid*/
      set EK0BM001.EK0BM-S-XGP-GPC-CD cursor, bold;
    end
  end


   /* Validate Department Id*/

  EK0BW00.EK0BW-S-XNX-DEPT-ID-XREF = EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF;

  if (EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF == 0)
    set EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF normal;
  else
    if (EK0BM001.EK0BM-S-CU-CO-ID > 0)

      set KUJREC empty;

      KUJREC.KUCCOID = EK0BM001.EK0BM-S-CU-CO-ID;
      KUJREC.XNXCD = EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF;

      EK0BS-VDEPT001-S(); /* Select Unique VDEPT001 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        set EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF normal;
      else
        converseLib.validationFailed(693); /* Dept Id is invalid*/
        set EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF cursor, bold;
      end
    else
      converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
      set EK0BM001.EK0BM-S-CU-CO-ID cursor, bold;
      set EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF bold;
    end
  end


   /* Validate Company Store Id*/

  EK0BW00.EK0BW-S-CU-STOR-ID = EK0BM001.EK0BM-S-CU-STOR-ID;

  if (EK0BM001.EK0BM-S-CU-STOR-ID == 0)
    set EK0BM001.EK0BM-S-CU-STOR-ID normal;
  else
    if (EK0BM001.EK0BM-S-CU-CO-ID > 0)

      set VSTORE02 empty;

      VSTORE02.CU-CO-ID = EK0BM001.EK0BM-S-CU-CO-ID;
      VSTORE02.CU-STOR-ID = EK0BM001.EK0BM-S-CU-STOR-ID;

      EK0BS-VSTORE02-S(); /* Select Unique VSTORE02 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        set EK0BM001.EK0BM-S-CU-STOR-ID normal;
      else
        converseLib.validationFailed(082); /* Store Id is invalid*/
        set EK0BM001.EK0BM-S-CU-STOR-ID cursor, bold;
      end
    else
      converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
      set EK0BM001.EK0BM-S-CU-CO-ID cursor, bold;
      set EK0BM001.EK0BM-S-CU-STOR-ID bold;
    end
  end


   /* Validate Customer Company Id*/

  EK0BW00.EK0BW-S-CU-CO-ID = EK0BM001.EK0BM-S-CU-CO-ID;

  if (EK0BM001.EK0BM-S-CU-CO-ID == 0)
    if (EK0BM001.EK0BM-S-CU-STOR-ID > 0 || 
    EK0BM001.EK0BM-S-XNX-DEPT-ID-XREF > 0)
      converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
      set EK0BM001.EK0BM-S-CU-CO-ID cursor, bold;
    else
      set EK0BM001.EK0BM-S-CU-CO-ID normal;
    end
  else
    set KUCREC empty;

    KUCREC.KUCCOID = EK0BM001.EK0BM-S-CU-CO-ID;

    EK0BS-VCMPNY01-S(); /* Select Unique VCMPNY01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0BM001.EK0BM-S-CU-CO-ID normal;
    else
      converseLib.validationFailed(083); /* Customer Number is invalid*/
      set EK0BM001.EK0BM-S-CU-CO-ID cursor, bold;
    end
  end


   /* Validate Resolver/CR Analyst User Id*/

  EK0BW00.EK0BW-S-CL-CR-ANLS-USER-ID = EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID;

  if (EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID == " ")
    set EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID normal;
  else
    set VCLRES01 empty;

    VCLRES01.CL-CR-ANLS-USER-ID = EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID;
    VCLRES01.XXX-SCRTY-USER-ID = EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID;

    EK0BS-VCLRES01-S(); /* Select Unique VCLRES01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID normal;
    else
      converseLib.validationFailed(845); /* Resolver not assigned to Scrty User*/
      set EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID cursor, bold;
    end
  end

  if (EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID > " ")
    set KUYREC empty;

    KUYREC.XXXUSRID = EK0BM001.EK0BM-S-CL-CR-ANLS-USER-ID;

    EK0BS-VSVREP01-SA(); /* Select Unique VSVREP01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0BM001.EK0BM-S-ANLS-USER-NAME = KUYREC.KUYREPNM;
    else
      EK0BM001.EK0BM-S-ANLS-USER-NAME = " ";
    end
  else
    EK0BM001.EK0BM-S-ANLS-USER-NAME = " ";
  end


   /* Validate Security User Id*/

  EK0BW00.EK0BW-S-XXX-SCRTY-USER-ID = EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID;

  if (EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID == " ")
    EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;
    EK0BW00.EK0BW-S-XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;
    set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID normal;
  else
    set VCLRES01 empty;

    VCLRES01.CL-CR-ANLS-USER-ID = " ";
    VCLRES01.XXX-SCRTY-USER-ID = EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID;

    EK0BS-VCLRES01-S(); /* Select Unique VCLRES01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID normal;
    else
      converseLib.validationFailed(854); /* UserId entered is not a Scrty User*/
      set EK0BM001.EK0BM-S-XXX-SCRTY-USER-ID cursor, bold;
    end
  end

end // end EK0BS-VAL-SEARCH

// Select VCARR001 row
Function EK0BS-VCARR001-S()
  CLXREC.CLXCPROC = "EK0BS-VCARR001-S";

  try
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0860"; /* io module*/
        TA1REC.TA1DBASE = "DPICK"; /* data base*/
        TA1REC.TA1TBLVU = "VCARR001"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0860"; /* io module*/
    TA1REC.TA1DBASE = "DPICK"; /* data base*/
    TA1REC.TA1TBLVU = "VCARR001"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCARR001-S

// Close VCLDIS01 cursor 2
Function EK0BS-VCLDIS01-C2()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-C2";

  try
    call "VCLDIS01" ("C2", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C2 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLDIS01-C2

// Close VCLDIS01 cursor 3
Function EK0BS-VCLDIS01-C3()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-C3";

  try
    call "VCLDIS01" ("C3", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C3     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C3 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLDIS01-C3

// Close VCLDIS01 cursor 4
Function EK0BS-VCLDIS01-C4()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-C4";

  try
    call "VCLDIS01" ("C4", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C4     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C4 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLDIS01-C4

// Close VCLDIS01 cursor 5
Function EK0BS-VCLDIS01-C5()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-C5";

  try
    call "VCLDIS01" ("C5", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C5     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C5 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLDIS01-C5

// Delete VCLDIS01 row
Function EK0BS-VCLDIS01-D()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-D";

  try
    call "VCLDIS01" ("D ", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Delete*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "D      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01"; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "D      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01"; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLDIS01-D

// Insert VCLDIS01 row
Function EK0BS-VCLDIS01-I()
  try
    call "VCLDIS01" ("A ", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Insert*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "A      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01"; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "A 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01"; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VCLDIS01-I

// Fetch VCLDIS01 cursor 2
Function EK0BS-VCLDIS01-N2()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-N2";

  try
    call "VCLDIS01" ("N2", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N2 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLDIS01-N2

// Fetch VCLDIS01 cursor 3
Function EK0BS-VCLDIS01-N3()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-N3";

  try
    call "VCLDIS01" ("N3", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N3     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N3 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLDIS01-N3

// Fetch VCLDIS01 cursor 4
Function EK0BS-VCLDIS01-N4()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-N4";

  try
    call "VCLDIS01" ("N4", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N4     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N4 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLDIS01-N4

// Fetch VCLDIS01 Cursor 5
Function EK0BS-VCLDIS01-N5()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-N5";

  try
    call "VCLDIS01" ("N5", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N5     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N5 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLDIS01-N5

// Select VCLDIS01 row
Function EK0BS-VCLDIS01-S()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-S";

  try
    call "VCLDIS01" ("S ", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VCLDIS01-S

// Decl/Open VCLDIS01 cursor 2
Function EK0BS-VCLDIS01-S2()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-S2";

  set VCLDIS01 empty;

  try
    call "VCLDIS01" ("S2", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S2 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VCLDIS01-S2

// Decl/Open VCLDIS01 cursor 2
Function EK0BS-VCLDIS01-S3()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-S3";

  set VCLDIS01 empty;

  try
    call "VCLDIS01" ("S3", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S3     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S3 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VCLDIS01-S3

// Decl/Open VCLDIS01 cursor 4
Function EK0BS-VCLDIS01-S4()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-S4";

  set VCLDIS01 empty;

  try
    call "VCLDIS01" ("S4", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S4     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S4 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VCLDIS01-S4

// Decl/Open VCLDIS01 cursor 5
Function EK0BS-VCLDIS01-S5()
  CLXREC.CLXCPROC = "EK0BS-VCLDIS01-S5";

  set VCLDIS01 empty;

  try
    call "VCLDIS01" ("S5", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S5     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S5 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VCLDIS01-S5

// Close VCLRES01 cursor 2
Function EK0BS-VCLRES01-C2()
  CLXREC.CLXCPROC = "EK0BS-VCLRES01-C2";

  try
    call "VCLRES01" ("C2", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C2 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLRES01-C2

// Fetch VCLRES01 cursor 2
Function EK0BS-VCLRES01-N2()
  CLXREC.CLXCPROC = "EK0BS-VCLRES01-N2";

  try
    call "VCLRES01" ("N2", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N2 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLRES01-N2

// Select VCLRES01 row
Function EK0BS-VCLRES01-S()
  CLXREC.CLXCPROC = "EK0BS-VCLRES01-S";

  try
    call "VCLRES01" ("S ", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCLRES01-S

// Decl/Open VCLRES01 cursor 2
Function EK0BS-VCLRES01-S2()
  CLXREC.CLXCPROC = "EK0BS-VCLRES01-S2";

  try
    call "VCLRES01" ("S2", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VCLRES01-S2

// Select VCMPNY01 row
Function EK0BS-VCMPNY01-S()
  CLXREC.CLXCPROC = "EK0BS-VCMPNY01-S";

  try
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0240"; /* io module*/
        TA1REC.TA1DBASE = "DCUST"; /* data base*/
        TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0240"; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* data base*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VCMPNY01-S

// Select VDEPT001 row
Function EK0BS-VDEPT001-S()
  CLXREC.CLXCPROC = "EK0BS-VDEPT001-S";

  try
    call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0290"; /* io module*/
        TA1REC.TA1DBASE = "DCUST"; /* data base*/
        TA1REC.TA1TBLVU = "VDEPT001"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0290"; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* data base*/
    TA1REC.TA1TBLVU = "VDEPT001"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VDEPT001-S

// Close VRAGCY01 cursor 2
Function EK0BS-VRAGCY01-C2()
  CLXREC.CLXCPROC = "EK0BS-VRAGCY01-C2";

  try
    call "IO0160" ("C2", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
        TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
        TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C2 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VRAGCY01-C2

// Fetch VRAGCY01 cursor 2
Function EK0BS-VRAGCY01-N2()
  CLXREC.CLXCPROC = "EK0BS-VRAGCY01-N2";

  try
    call "IO0160" ("N2", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
        TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
        TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N2 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VRAGCY01-N2

// Select VRAGCY01 row
Function EK0BS-VRAGCY01-S()
  CLXREC.CLXCPROC = "EK0BS-VRAGCY01-S";

  try
    call "IO0160" ("S ", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0160"; /* io module*/
        TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
        TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0160"; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VRAGCY01-S

// Decl/Open VRAGCY01 cursor 2
Function EK0BS-VRAGCY01-S2()
  CLXREC.CLXCPROC = "EK0BS-VRAGCY01-S2";

  try
    call "IO0160" ("S2", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
        TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
        TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S2 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VRAGCY01-S2

// Select VREPS001 row
Function EK0BS-VREPS001-S()
  CLXREC.CLXCPROC = "EK0BS-VREPS001-S";

  try
    call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0020"; /* io module*/
        TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
        TA1REC.TA1TBLVU = "VREPS001"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0020"; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
    TA1REC.TA1TBLVU = "VREPS001"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VREPS001-S

// Select VSTORE02 row
Function EK0BS-VSTORE02-S()
  CLXREC.CLXCPROC = "EK0BS-VSTORE02-S";

  try
    call "VSTORE02" ("S ", SQLCA, VSTORE02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VSTORE02"; /* io module*/
        TA1REC.TA1DBASE = "DCUST"; /* data base*/
        TA1REC.TA1TBLVU = "VSTORE02"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VSTORE02"; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* data base*/
    TA1REC.TA1TBLVU = "VSTORE02"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0BS-VSTORE02-S

// Select VSVREP01 row
Function EK0BS-VSVREP01-SA()
  CLXREC.CLXCPROC = "EK0BS-VSVREP01-SA";

  try
    call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "SA     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VSVREP01 "; /* io module*/
        TA1REC.TA1DBASE = "DCUST"; /* data base*/
        TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "SA 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VSVREP01 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* data base*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0BS-VSVREP01-SA

//*** RECORD=EK0BW00 ****
// This is the main working storage record for EK0B.
// ***********************
Record EK0BW00 type basicRecord
  10 EK0BW-SCR-LINES EK0BW-SCR-LINES ; 
  10 EK0BW-SCR-IDX EK0BW-SCR-IDX ; 
  10 EK0BW-LINE-IDX EK0BW-LINE-IDX ; 
  10 EK0BW-END-SCREEN EK0BW-END-SCREEN ; 
  10 EK0BW-WRK-IDX EK0BW-WRK-IDX ; 
  10 EK0BW-COL-IDX EK0BW-COL-IDX ; 
  10 EK0BW-LINE-COUNT EK0BW-LINE-COUNT ; 
  10 EK0BW-MODE-IND EK0BW-MODE-IND ; 
  10 EK0BW-POPUP-FL EK0BW-POPUP-FL ; 
  10 EK0BW-POPUP-IND EK0BW-POPUP-IND ; 
  10 EK0BW-END-SCAN EK0BW-END-SCAN ; 
  10 EK0BW-USER-ID-ERR-FL EK0BW-USER-ID-ERR-FL ; 
  10 EK0BW-BYPASS-FL EK0BW-BYPASS-FL ; 
  10 EK0BW-SUPER-USER-FL EK0BW-SUPER-USER-FL ; 
  10 EK0BW-ALLOW-ACCESS-FL EK0BW-ALLOW-ACCESS-FL ; 
  10 EK0BW-RSN-PREFIX EK0BW-RSN-PREFIX ; 
  10 EK0BW-RSLVR-FOUND-FL EK0BW-RSLVR-FOUND-FL ; 
  10 * char(1) ; 
  10 EK0BW-SCRTY-RSLVR-TBL EK0BW-SCRTY-RSLVR-TBL ; 
    15 EK0BW-RESOLVER-ID EK0BW-RESOLVER-ID [200] ; 
  10 * char(1) ; 
  10 EK0BW-VCLDIS01-ROW EK0BW-VCLDIS01-ROW ; 
    15 EK0BW-CL-CR-ANLS-USER-ID EK0BW-CL-CR-ANLS-USER-ID ; 
    15 EK0BW-XSO-SLS-OFC-ID EK0BW-XSO-SLS-OFC-ID ; 
    15 EK0BW-XWH-WHSE-CD EK0BW-XWH-WHSE-CD ; 
    15 EK0BW-CU-CO-ID EK0BW-CU-CO-ID ; 
    15 EK0BW-CU-STOR-ID EK0BW-CU-STOR-ID ; 
    15 EK0BW-XNX-DEPT-ID-XREF EK0BW-XNX-DEPT-ID-XREF ; 
    15 EK0BW-XGP-GPC-CD EK0BW-XGP-GPC-CD ; 
    15 EK0BW-YCR-CLM-RSN-CD EK0BW-YCR-CLM-RSN-CD ; 
    15 EK0BW-YCT-CLM-TYP-CD EK0BW-YCT-CLM-TYP-CD ; 
    15 EK0BW-YCS-CLM-STAT-CD1 EK0BW-YCS-CLM-STAT-CD1 ; 
    15 EK0BW-SM-SREP-ID EK0BW-SM-SREP-ID ; 
    15 EK0BW-SM-SAGCY-ID EK0BW-SM-SAGCY-ID ; 
    15 EK0BW-TF-CARR-CD EK0BW-TF-CARR-CD ; 
    15 EK0BW-XCE-CR-ANLS-CD EK0BW-XCE-CR-ANLS-CD ; 
    15 EK0BW-XPC-PROD-CAT-CD EK0BW-XPC-PROD-CAT-CD ; 
    15 EK0BW-CL-TF-CLM-FL EK0BW-CL-TF-CLM-FL ; 
    15 EK0BW-CL-XCEP-FL EK0BW-CL-XCEP-FL ; 
    15 EK0BW-CL-INSP-FL EK0BW-CL-INSP-FL ; 
    15 EK0BW-CL-RTN-FL EK0BW-CL-RTN-FL ; 
    15 EK0BW-ZZ-SDT EK0BW-ZZ-SDT ; 
    15 EK0BW-ZZ-CHNG-DT EK0BW-ZZ-CHNG-DT ; 
  10 * char(1) ; 
  10 EK0BW-SEARCH-CRITERIA EK0BW-SEARCH-CRITERIA ; 
    15 EK0BW-S-XXX-SCRTY-USER-ID EK0BW-S-XXX-SCRTY-USER-ID ; 
    15 EK0BW-S-ALL EK0BW-S-ALL ; 
    15 EK0BW-S-CL-CR-ANLS-USER-ID EK0BW-S-CL-CR-ANLS-USER-ID ; 
    15 EK0BW-S-XSO-SLS-OFC-ID EK0BW-S-XSO-SLS-OFC-ID ; 
    15 EK0BW-S-XWH-WHSE-CD EK0BW-S-XWH-WHSE-CD ; 
    15 EK0BW-S-CU-CO-ID EK0BW-S-CU-CO-ID ; 
    15 EK0BW-S-CU-STOR-ID EK0BW-S-CU-STOR-ID ; 
    15 EK0BW-S-XNX-DEPT-ID-XREF EK0BW-S-XNX-DEPT-ID-XREF ; 
    15 EK0BW-S-XGP-GPC-CD EK0BW-S-XGP-GPC-CD ; 
    15 EK0BW-S-YCR-CLM-RSN-CD EK0BW-S-YCR-CLM-RSN-CD ; 
    15 EK0BW-S-YCT-CLM-TYP-CD EK0BW-S-YCT-CLM-TYP-CD ; 
    15 EK0BW-S-YCS-CLM-STAT-CD1 EK0BW-S-YCS-CLM-STAT-CD1 ; 
    15 EK0BW-S-SM-SREP-ID EK0BW-S-SM-SREP-ID ; 
    15 EK0BW-S-SM-SAGCY-ID EK0BW-S-SM-SAGCY-ID ; 
    15 EK0BW-S-TF-CARR-CD EK0BW-S-TF-CARR-CD ; 
    15 EK0BW-S-XCE-CR-ANLS-CD EK0BW-S-XCE-CR-ANLS-CD ; 
    15 EK0BW-S-XPC-PROD-CAT-CD EK0BW-S-XPC-PROD-CAT-CD ; 
    15 EK0BW-S-CL-TF-CLM-FL EK0BW-S-CL-TF-CLM-FL ; 
    15 EK0BW-S-CL-XCEP-FL EK0BW-S-CL-XCEP-FL ; 
    15 EK0BW-S-CL-INSP-FL EK0BW-S-CL-INSP-FL ; 
    15 EK0BW-S-CL-RTN-FL EK0BW-S-CL-RTN-FL ; 
  10 * char(1) ; 
  10 EK0BW-TEMP-STG-DATA EK0BW-TEMP-STG-DATA ; 
    15 EK0BW-CURR-PAGE EK0BW-CURR-PAGE ; 
    15 EK0BW-MAX-PAGE EK0BW-MAX-PAGE ; 
    15 EK0BW-CURR-RCD EK0BW-CURR-RCD ; 
    15 EK0BW-MAX-RCD EK0BW-MAX-RCD ; 
  10 * char(1) ; 
  10 EK0BW-DATE-CCYYMMDD-BIN EK0BW-DATE-CCYYMMDD-BIN ; 
  10 * char(1) ; 
  10 EK0BW-DATE-CCYYMMDD EK0BW-DATE-CCYYMMDD ; 
    15 EK0BW-DATE-CC EK0BW-DATE-CC ; 
    15 EK0BW-DATE-YY EK0BW-DATE-YY ; 
    15 EK0BW-DATE-MM EK0BW-DATE-MM ; 
    15 EK0BW-DATE-DD EK0BW-DATE-DD ; 
  10 * char(1) ; 
  10 EK0BW-3-CHAR EK0BW-3-CHAR ; 
    15 EK0BW-1ST-CHAR EK0BW-1ST-CHAR ; 
    15 EK0BW-2ND-CHAR EK0BW-2ND-CHAR ; 
    15 EK0BW-3RD-CHAR EK0BW-3RD-CHAR ; 
  10 * char(1) ; 
  10 EK0BW-ZZ-FAMILY EK0BW-ZZ-FAMILY ; 
    15 ZZ-SDT ZZ-SDT ; 
    15 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    15 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    15 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    15 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end EK0BW00

//*** RECORD=EK0BW01 ****
// This is the main working storage record for EK0C.
// ***********************
Record EK0BW01 type basicRecord
  5 EK0BW-RCD-SIZE EK0BW-RCD-SIZE ; 
  5 EK0BW-TEMP-ITEM EK0BW-TEMP-ITEM ; 
    10 EK0BW-COL-FUNC EK0BW-COL-FUNC [10] ; 
    10 CL-CR-ANLS-USER-ID CL-CR-ANLS-USER-ID [10] ; 
    10 XSO-SLS-OFC-ID XSO-SLS-OFC-ID [10] ; 
    10 XWH-WHSE-CD XWH-WHSE-CD [10] ; 
    10 CU-CO-ID CU-CO-ID [10] ; 
    10 CU-STOR-ID CU-STOR-ID [10] ; 
    10 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF [10] ; 
    10 XGP-GPC-CD XGP-GPC-CD [10] ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD [10] ; 
    10 YCT-CLM-TYP-CD YCT-CLM-TYP-CD [10] ; 
    10 YCS-CLM-STAT-CD1 YCS-CLM-STAT-CD1 [10] ; 
    10 SM-SREP-ID SM-SREP-ID [10] ; 
    10 SM-SAGCY-ID SM-SAGCY-ID [10] ; 
    10 TF-CARR-CD TF-CARR-CD [10] ; 
    10 XCE-CR-ANLS-CD XCE-CR-ANLS-CD [10] ; 
    10 XPC-PROD-CAT-CD XPC-PROD-CAT-CD [10] ; 
    10 CL-TF-CLM-FL CL-TF-CLM-FL [10] ; 
    10 CL-XCEP-FL CL-XCEP-FL [10] ; 
    10 CL-INSP-FL CL-INSP-FL [10] ; 
    10 CL-RTN-FL CL-RTN-FL [10] ; 
    10 ZZ-SDT ZZ-SDT [10] ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT [10] ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT [10] ; 
    10 EK0BW-ROW-EXISTS EK0BW-ROW-EXISTS [10] ; 
    10 EK0BW-ROW-CHNGD EK0BW-ROW-CHNGD [10] ; 
    10 EK0BW-ROW-ADDED EK0BW-ROW-ADDED [10] ; 
    10 EK0BW-ROW-DELTD EK0BW-ROW-DELTD [10] ; 
end // end EK0BW01

//*** RECORD=EK0BW02 ****
// ************************************************************
// Working Storage for EK0B
// 
// This table holds information about the section of temp
// storage currently being displayed on the screen.
// ************************************************************
// ***********************
Record EK0BW02 type basicRecord
  5 EK0BW-CURR-RCD EK0BW-CURR-RCD ; 
  5 EK0BW-W02-IDX EK0BW-W02-IDX ; 
  5 EK0BW-SCREEN-CHNGD EK0BW-SCREEN-CHNGD ; 
  5 EK0BW-UPD-STG EK0BW-UPD-STG ; 
  5 EK0BW-TEMP-ITEM EK0BW-TEMP-ITEM ; 
    10 EK0BW-COL-FUNC EK0BW-COL-FUNC [10] ; 
    10 CL-CR-ANLS-USER-ID CL-CR-ANLS-USER-ID [10] ; 
    10 XSO-SLS-OFC-ID XSO-SLS-OFC-ID [10] ; 
    10 XWH-WHSE-CD XWH-WHSE-CD [10] ; 
    10 CU-CO-ID CU-CO-ID [10] ; 
    10 CU-STOR-ID CU-STOR-ID [10] ; 
    10 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF [10] ; 
    10 XGP-GPC-CD XGP-GPC-CD [10] ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD [10] ; 
    10 YCT-CLM-TYP-CD YCT-CLM-TYP-CD [10] ; 
    10 YCS-CLM-STAT-CD1 YCS-CLM-STAT-CD1 [10] ; 
    10 SM-SREP-ID SM-SREP-ID [10] ; 
    10 SM-SAGCY-ID SM-SAGCY-ID [10] ; 
    10 TF-CARR-CD TF-CARR-CD [10] ; 
    10 XCE-CR-ANLS-CD XCE-CR-ANLS-CD [10] ; 
    10 XPC-PROD-CAT-CD XPC-PROD-CAT-CD [10] ; 
    10 CL-TF-CLM-FL CL-TF-CLM-FL [10] ; 
    10 CL-XCEP-FL CL-XCEP-FL [10] ; 
    10 CL-INSP-FL CL-INSP-FL [10] ; 
    10 CL-RTN-FL CL-RTN-FL [10] ; 
    10 ZZ-SDT ZZ-SDT [10] ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT [10] ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT [10] ; 
    10 EK0BW-ROW-EXISTS EK0BW-ROW-EXISTS [10] ; 
    10 EK0BW-ROW-CHNGD EK0BW-ROW-CHNGD [10] ; 
    10 EK0BW-ROW-ADDED EK0BW-ROW-ADDED [10] ; 
    10 EK0BW-ROW-DELTD EK0BW-ROW-DELTD [10] ; 
end // end EK0BW02

// 1st of 3
DataItem EK0BW-1ST-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd of 3
DataItem EK0BW-2ND-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3-CHAR Work Area
DataItem EK0BW-3-CHAR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd of 3
DataItem EK0BW-3RD-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Y allows use of this screen
DataItem EK0BW-ALLOW-ACCESS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-BYPASS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-CR-ANLS-USER-ID
DataItem EK0BW-CL-CR-ANLS-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-INSP-FL
DataItem EK0BW-CL-INSP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-RTN-FL
DataItem EK0BW-CL-RTN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-TF-CLM-FL
DataItem EK0BW-CL-TF-CLM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-XCEP-FL
DataItem EK0BW-CL-XCEP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// column function
DataItem EK0BW-COL-FUNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// column index
DataItem EK0BW-COL-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU-CO-ID
DataItem EK0BW-CU-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU-STOR-ID
DataItem EK0BW-CU-STOR-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page on screen
DataItem EK0BW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current temp storage records
DataItem EK0BW-CURR-RCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date century
DataItem EK0BW-DATE-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 Date Format Numeric
DataItem EK0BW-DATE-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 Date Format Binary
DataItem EK0BW-DATE-CCYYMMDD-BIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date day
DataItem EK0BW-DATE-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date month
DataItem EK0BW-DATE-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date year
DataItem EK0BW-DATE-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of scan flag
DataItem EK0BW-END-SCAN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of screen flag
DataItem EK0BW-END-SCREEN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of entered detail lines
DataItem EK0BW-LINE-COUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line index
DataItem EK0BW-LINE-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum pages
DataItem EK0BW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum temp storage records
DataItem EK0BW-MAX-RCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// program mode (a,c,i)
DataItem EK0BW-MODE-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// was a popup displayed? Y/N
DataItem EK0BW-POPUP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1=CLM TYP 2=CLM RSN 3=CLM ST
DataItem EK0BW-POPUP-IND char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Modified Switch
DataItem EK0BW-RCD-SIZE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Resolver User Id
DataItem EK0BW-RESOLVER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-ROW-ADDED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-ROW-CHNGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-ROW-DELTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-ROW-EXISTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Resolver found on Scrty Tbl
DataItem EK0BW-RSLVR-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claim Reason Code prefix value
DataItem EK0BW-RSN-PREFIX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select all flag
DataItem EK0BW-S-ALL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-CR-ANLS-USER-ID
DataItem EK0BW-S-CL-CR-ANLS-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-INSP-FL
DataItem EK0BW-S-CL-INSP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-RTN-FL
DataItem EK0BW-S-CL-RTN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-TF-CLM-FL
DataItem EK0BW-S-CL-TF-CLM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-XCEP-FL
DataItem EK0BW-S-CL-XCEP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU-CO-ID
DataItem EK0BW-S-CU-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU-STOR-ID
DataItem EK0BW-S-CU-STOR-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SM-SAGCY-ID
DataItem EK0BW-S-SM-SAGCY-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SM-SREP-ID
DataItem EK0BW-S-SM-SREP-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TF-CARR-CD
DataItem EK0BW-S-TF-CARR-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XCE-CR-ANLS-CD
DataItem EK0BW-S-XCE-CR-ANLS-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP-GPC-CD
DataItem EK0BW-S-XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XNX-DEPT-ID-XREF
DataItem EK0BW-S-XNX-DEPT-ID-XREF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XPC-PROD-CAT-CD
DataItem EK0BW-S-XPC-PROD-CAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSO-SLS-OFC-ID
DataItem EK0BW-S-XSO-SLS-OFC-ID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH-WHSE-CD
DataItem EK0BW-S-XWH-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-CR-ANLS-USER-ID
DataItem EK0BW-S-XXX-SCRTY-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YCR-CLM-RSN-CD
DataItem EK0BW-S-YCR-CLM-RSN-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YCS-CLM-STAT-CD1
DataItem EK0BW-S-YCS-CLM-STAT-CD1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YCT-CLM-TYP-CD
DataItem EK0BW-S-YCT-CLM-TYP-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen index
DataItem EK0BW-SCR-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size of screen table
DataItem EK0BW-SCR-LINES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0BW-SCREEN-CHNGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Security/Resolver Table
DataItem EK0BW-SCRTY-RSLVR-TBL char(1600)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-SEARCH-CRITERIA char(58)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SM-SAGCY-ID
DataItem EK0BW-SM-SAGCY-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SM-SREP-ID
DataItem EK0BW-SM-SREP-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Y indentifies Super User
DataItem EK0BW-SUPER-USER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-TEMP-ITEM char(640)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage control data
DataItem EK0BW-TEMP-STG-DATA char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TF-CARR-CD
DataItem EK0BW-TF-CARR-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-UPD-STG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-USER-ID-ERR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-VCLDIS01-ROW char(57)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0BW-W02-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem EK0BW-WRK-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XCE-CR-ANLS-CD
DataItem EK0BW-XCE-CR-ANLS-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP-GPC-CD
DataItem EK0BW-XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XNX-DEPT-ID-XREF
DataItem EK0BW-XNX-DEPT-ID-XREF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XPC-PROD-CAT-CD
DataItem EK0BW-XPC-PROD-CAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSO-SLS-OFC-ID
DataItem EK0BW-XSO-SLS-OFC-ID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH-WHSE-CD
DataItem EK0BW-XWH-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YCR-CLM-RSN-CD
DataItem EK0BW-YCR-CLM-RSN-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YCS-CLM-STAT-CD1
DataItem EK0BW-YCS-CLM-STAT-CD1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YCT-CLM-TYP-CD
DataItem EK0BW-YCT-CLM-TYP-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZZ-CHNG-DT
DataItem EK0BW-ZZ-CHNG-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0BW-ZZ-FAMILY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZZ-SDT
DataItem EK0BW-ZZ-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

