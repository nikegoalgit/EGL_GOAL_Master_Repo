package ek0d;
import as1.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import iv.common.*;
import ku.common.*;
import op.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=EK0D ****
// ************************************************************
// 
//       EK0D - Resolver Escalation Table Maintenance
//       --------------------------------------------
// 
// General program explanation and notes:
// 
// This program allows the user to perform add, change and
// delete rows in selected Claims Table.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//    Date     Userid    Description
// ----------  ------  ----------------------------------------
// 04-07-1998  HMACAL  Application creation
// *********************
Program EK0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CLAREC CLAREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  EK0DW00 EK0DW00; // record
  EK0DW01 EK0DW01; // record
  EK0DW02 EK0DW02; // record
  EK0DW03 EK0DW03; // record
  ERRSQLCA ERRSQLCA; // record
  KUYREC KUYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCLRES01 VCLRES01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use CL00ENU {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use EK0DM.EK0DM001,  // forms
      EK0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    EK0D-00000: EK0D-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set EK0DM001 initial; /* M001 input/output*/
    set EK0DW00 empty; /* Working storage*/
    EK0DW00.EK0DW-SCR-LINES = 10;
    EK0DW00.EK0DW-MODE-IND = "I"; /* Default to Inquiry*/
    EK0DW00.EK0DW-SEARCH-SCRTY-USER = COMMAREA.CAUSERID; /* Dflt Scrty*/
    set EK0DW01 empty; /* Working storage*/
    set EK0DW02 empty; /* Working storage*/
    set EK0DW03 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EK0D0000; /* Converse the main process*/
    EK0D0000: EK0D0000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EK0D0000; /* Converse the main process*/


  end // end main
end // end EK0D

// Application initialization
Function EK0D-00000()
   /* -------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* -------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* -------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* -------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* -------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* -------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    CLWREC.CLWGROUP = COMMAREA.CAUSERA; /* Restore work record*/

    if (CLWREC.CLWGROUP == " ") /* If no data passed*/
      set CLWREC empty;
    end

  else
    set CLWREC empty; /* Initialize work record*/

  end

   /* -------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* -------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end EK0D-00000

// Main process of Application
Function EK0D0000()
  EK0DS-PURGE-QUEUE(); /* Purge temp storage queue*/

  EK0DS-CHECK-ACCESS(); /* Check if User has access*/

  EK0D1000(); /* Obtain the data to display*/

  EK0D2000(); /* Load temp storage with data*/

  EK0D3000(); /* Display data to screen*/
                                  /* Process adds/changes*/


   /* **************************************************************/
                     /* END  EK0D0000*/
   /* **************************************************************/
end // end EK0D0000

// Main process to display a map
Function EK0D1000()
   /* **************************************************************/
   /* This process controls the map field attributes depending on*/
   /* the screen access mode (inquire, update or insert).*/
   /* **************************************************************/

  set EK0DM001 initial; /* Clear out map*/

  EK0DM001.EK0DM-CURRENT-DATE = VGVar.currentShortGregorianDate;

  EK0DW00.EK0DW-SCR-IDX = 1; /* Init screen index*/

  while (EK0DW00.EK0DW-SCR-IDX <= EK0DW00.EK0DW-SCR-LINES)
    set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] initialAttributes;
    set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] initialAttributes;
    set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] initialAttributes;
    set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] initialAttributes;
    set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] initialAttributes;
    set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] initialAttributes;
    set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] initialAttributes;

    EK0DW00.EK0DW-SCR-IDX = EK0DW00.EK0DW-SCR-IDX + 1;
  end

   /* Determine current user's security profile*/

  set VCLRES01 empty;

  VCLRES01.XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;
  VCLRES01.CL-CR-ANLS-USER-ID = " ";

  EK0DS-VCLRES01-S(); /* Select Unique VCLRES01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    EK0DW00.EK0DW-SUPER-USER-FL = VCLRES01.CL-SPR-USER-FL;
  else
    EK0DW00.EK0DW-SUPER-USER-FL = "N";
  end

   /* **************************************************************/
                     /* END  EK0D1000*/
   /* **************************************************************/
end // end EK0D1000

// Load Temp storage
Function EK0D2000()
  EK0DW00.EK0DW-MAX-PAGE = 0;
  EK0DW00.EK0DW-MAX-RCD = 0;

  set EK0DW02 empty;
  set TA5REC empty;

  TA5REC.TA5APPID = "EK0D"; /* Application*/

  EK0DS-PURGE-QUEUE(); /* Purge temp storage*/

  EK0DM001.EK0DM-SEARCH-SCRTY-USER = EK0DW00.EK0DW-SEARCH-SCRTY-USER;

  if (EK0DM001.EK0DM-SEARCH-SCRTY-USER > " ")

    set KUYREC empty;

    KUYREC.XXXUSRID = EK0DM001.EK0DM-SEARCH-SCRTY-USER;

    EK0DS-VSVREP01-SA(); /* Alt Select Unique VSVREP01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0DM001.EK0DM-SCRTY-USER-NAME = KUYREC.KUYREPNM;
    else
      EK0DM001.EK0DM-SCRTY-USER-NAME = "USER NOT ON VSVREP01";
    end
  end

  EK0DM001.EK0DM-SEARCH-ANLS-USER = EK0DW00.EK0DW-SEARCH-ANLS-USER;

  if (EK0DM001.EK0DM-SEARCH-ANLS-USER > " ")

    set KUYREC empty;

    KUYREC.XXXUSRID = EK0DM001.EK0DM-SEARCH-ANLS-USER;

    EK0DS-VSVREP01-SA(); /* Alt Select Unique VSVREP01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0DM001.EK0DM-ANLS-USER-NAME = KUYREC.KUYREPNM;
    else
      EK0DM001.EK0DM-ANLS-USER-NAME = "USER NOT ON VSVREP01";
    end
  end

  EK0DM001.EK0DM-SEARCH-SCRTY-FLAG = EK0DW00.EK0DW-SEARCH-SCRTY-FLAG;

  EK0DW02.EK0DW-W02-IDX = 1;

  set VCLRES01 empty;

  EK0DS-VCLRES01-S1(); /* Declare/Open VCLRES01 cursor*/

  while (SQLCA.VAGen_SQLCODE == 0)

    EK0DS-VCLRES01-N1(); /* Fetch Next VCLRES01*/

    EK0DW00.EK0DW-BYPASS-FL = "N";

    if (SQLCA.VAGen_SQLCODE == 0)

      if (EK0DM001.EK0DM-SEARCH-SCRTY-USER > " ")
        if (VCLRES01.XXX-SCRTY-USER-ID == 
        EK0DM001.EK0DM-SEARCH-SCRTY-USER)
              /* continue*/
        else
          EK0DW00.EK0DW-BYPASS-FL = "Y";
        end
      end

      if (EK0DM001.EK0DM-SEARCH-ANLS-USER > " ")
        if (VCLRES01.CL-CR-ANLS-USER-ID == 
        EK0DM001.EK0DM-SEARCH-ANLS-USER)
              /* continue*/
        else
          EK0DW00.EK0DW-BYPASS-FL = "Y";
        end
      end

      if (EK0DM001.EK0DM-SEARCH-SCRTY-FLAG > " ")
        if (VCLRES01.CL-SPR-USER-FL == 
        EK0DM001.EK0DM-SEARCH-SCRTY-FLAG)
              /* continue*/
        else
          EK0DW00.EK0DW-BYPASS-FL = "Y";
        end
      end

      if (EK0DW00.EK0DW-MODE-IND == "C" ||  /* Change Mode*/
      EK0DW00.EK0DW-MODE-IND == "D")        /* Delete Mode*/
        if (COMMAREA.CAUSERID == VCLRES01.XXX-SCRTY-USER-ID)
          if (VCLRES01.CL-SPR-USER-FL == "S" || 
          VCLRES01.CL-SPR-USER-FL == "Y") /* Secrty User record*/
            EK0DW00.EK0DW-BYPASS-FL = "Y";
          end
        else
          if (EK0DW00.EK0DW-SUPER-USER-FL == "S") /* Super Scrty User*/
                 /* continue*/
          else
            EK0DW00.EK0DW-BYPASS-FL = "Y";
          end
        end
      end

      if (EK0DW00.EK0DW-BYPASS-FL == "N")

        if (EK0DW02.EK0DW-W02-IDX > EK0DW00.EK0DW-SCR-LINES)
          EK0DW01.EK0DW-TEMP-ITEM = EK0DW02.EK0DW-TEMP-ITEM;
          TA5REC.TA5FNCCD = "A";

          EK0DS-CALL-TA0050(); /* Write previous to queue*/

          set EK0DW02 empty; /* Clear record*/

          EK0DW02.EK0DW-W02-IDX = 1;

          EK0DW00.EK0DW-MAX-PAGE = EK0DW00.EK0DW-MAX-PAGE + 1;
        end

        EK0DW02.EK0DW-ROW-EXISTS[EK0DW-W02-IDX] = "Y";
        EK0DW02.EK0DW-ROW-CHNGD[EK0DW-W02-IDX] = "N";
        EK0DW02.EK0DW-ROW-ADDED[EK0DW-W02-IDX] = "N";
        EK0DW02.EK0DW-ROW-DELTD[EK0DW-W02-IDX] = "N";

        EK0DW02.XXX-SCRTY-USER-ID[EK0DW-W02-IDX] = VCLRES01.XXX-SCRTY-USER-ID;
        EK0DW02.CL-CR-ANLS-USER-ID[EK0DW-W02-IDX] = VCLRES01.CL-CR-ANLS-USER-ID;
        EK0DW02.CL-SPR-USER-FL[EK0DW-W02-IDX] = VCLRES01.CL-SPR-USER-FL;
        EK0DW02.CL-ESC-USER-ID1[EK0DW-W02-IDX] = VCLRES01.CL-ESC-USER-ID1;
        EK0DW02.CL-ESC-USER-ID2[EK0DW-W02-IDX] = VCLRES01.CL-ESC-USER-ID2;
        EK0DW02.XND-NIKE-DEPT-ID[EK0DW-W02-IDX] = VCLRES01.XND-NIKE-DEPT-ID;

        EK0DW02.ZZ-SDT[EK0DW-W02-IDX] = VCLRES01.ZZ-SDT;
        EK0DW02.ZZ-CHNG-DT[EK0DW-W02-IDX] = VCLRES01.ZZ-CHNG-DT;
        EK0DW02.ZZ-CHNG-CNT[EK0DW-W02-IDX] = VCLRES01.ZZ-CHNG-CNT;

        EK0DW02.EK0DW-W02-IDX = EK0DW02.EK0DW-W02-IDX + 1;
        EK0DW00.EK0DW-MAX-RCD = EK0DW00.EK0DW-MAX-RCD + 1;

      end

    else
      if (EK0DW02.EK0DW-ROW-EXISTS[1] > " ") /* queue not empty?*/
        EK0DW01.EK0DW-TEMP-ITEM = EK0DW02.EK0DW-TEMP-ITEM;
        TA5REC.TA5FNCCD = "A";

        EK0DS-CALL-TA0050(); /* Write previous to queue*/

        set EK0DW02 empty; /* Clear record*/

        EK0DW00.EK0DW-MAX-PAGE = EK0DW00.EK0DW-MAX-PAGE + 1;
      end
    end
  end

   /* Close cursor*/

  EK0DS-VCLRES01-C1(); /* Close VCLRES01 cursor*/

   /* If max page is zero, no data was returned*/

  if (EK0DW00.EK0DW-MAX-PAGE == 0)
    EK0DW00.EK0DW-CURR-PAGE = 0;
    set EK0DM001.EK0DM-PF12-CONFIRM invisible, skip;
    set EK0DM001.EK0DM-PF10-CHG invisible, skip;
    set EK0DM001.EK0DM-PF11-DEL invisible, skip;
    set EK0DM001.EK0DM-PF9-ADD skip, noHighLight;
    converseLib.validationFailed(350); /* No data found*/
  end


  EK0DW00.EK0DW-CURR-PAGE = 001;
  EK0DW00.EK0DW-CURR-RCD = 001;

  set EK0DW02 empty;

   /* **************************************************************/
                     /* END  EK0D2000*/
   /* **************************************************************/
end // end EK0D2000

// Display Table to Screen
Function EK0D3000()
   /* **************************************************************/
   /* This process controls the display for the top half of the*/
   /* EK0DM001 map. The application will remain in this process*/
   /* until the user requests exit, or valid updates have*/
   /* been entered.*/
   /* **************************************************************/

  if (EK0DW00.EK0DW-MODE-IND == "A")
    EK0DM001.EK0DM-MODE = "A D D";
    set EK0DM001.EK0DM-MODE skip, reverse;
    set EK0DM001.EK0DM-SEARCH-SCRTY-USER skip, noHighLight;
    set EK0DM001.EK0DM-SEARCH-ANLS-USER skip, noHighLight;
    set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG skip, noHighLight;
  else
    if (EK0DW00.EK0DW-MODE-IND == "C")
      EK0DM001.EK0DM-MODE = "UPDATE";
      set EK0DM001.EK0DM-MODE skip, reverse;
      set EK0DM001.EK0DM-SEARCH-SCRTY-USER skip, noHighLight;
      set EK0DM001.EK0DM-SEARCH-ANLS-USER skip, noHighLight;
      set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG skip, noHighLight;
    else
      if (EK0DW00.EK0DW-MODE-IND == "I")
        EK0DM001.EK0DM-MODE = "INQUIRY";
        set EK0DM001.EK0DM-MODE initialAttributes;
        set EK0DM001.EK0DM-SEARCH-SCRTY-USER initialAttributes;
        set EK0DM001.EK0DM-SEARCH-ANLS-USER initialAttributes;
        set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG initialAttributes;
      else /* It's DELETE*/
        EK0DM001.EK0DM-MODE = "DELETE";
        set EK0DM001.EK0DM-MODE initialAttributes;
        set EK0DM001.EK0DM-SEARCH-SCRTY-USER initialAttributes;
        set EK0DM001.EK0DM-SEARCH-ANLS-USER initialAttributes;
        set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG initialAttributes;
      end
    end
  end

   /* Display the retrieved data (May exit appl)*/
  EK0DW00.EK0DW-END-SCREEN = "N";

  while (EK0DW00.EK0DW-END-SCREEN == "N") /* If not end*/
    EK0D3100(); /* display map*/
  end

   /* **************************************************************/
                     /* END  EK0D3000*/
   /* **************************************************************/
end // end EK0D3000

// Converse EK0DM001
Function EK0D3100()
  if (EK0DW00.EK0DW-CURR-PAGE != EK0DM001.EK0DM-CURR-PAGE)
    if (converseVar.validationMsgNum == 350 ||  /* No data found*/
    EK0DW00.EK0DW-MAX-PAGE == 0)               
      EK0DW00.EK0DW-CURR-PAGE = 1;
      EK0DW00.EK0DW-MAX-PAGE = 1;
      EK0DM001.EK0DM-CURR-PAGE = 1;
      EK0DM001.EK0DM-MAX-PAGE = 1;
       /* continue      /* Nothing to load/reload*/
    else
      EK0D3200(); /* Reload screen data*/
      EK0DM001.EK0DM-CURR-PAGE = EK0DW00.EK0DW-CURR-PAGE;
      EK0DM001.EK0DM-MAX-PAGE = EK0DW00.EK0DW-MAX-PAGE;
    end
  end

   /* Now set field attributes*/
   /* bottom to top*/

  EK0DW00.EK0DW-SCR-IDX = EK0DW00.EK0DW-SCR-LINES;

  while (EK0DW00.EK0DW-SCR-IDX > 0
  )
    if (EK0DW00.EK0DW-MODE-IND == "I") /* Inquire Mode - ASKIP,NOHILITE*/

      EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";

      if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] > " ")
        set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] normal;
        set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] underline;
      else
        set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] initialAttributes;
      end

      set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] initialAttributes;
      set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] initialAttributes;
      set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] initialAttributes;
      set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] initialAttributes;
      set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] initialAttributes;
      set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] initialAttributes;

    end

    if (converseVar.validationMsgNum == 0)

      if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] != " ")

        if (EK0DW00.EK0DW-MODE-IND == "C") /* Change Mode*/

          if (EK0DW00.EK0DW-SUPER-USER-FL == "S" ||  /* User is Spr Scrty*/
          EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] == 
          COMMAREA.CAUSERID)                        

            EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
            set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] initialAttributes;

            if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "S" || 
            EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "Y")
              set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] initialAttributes;
              set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] initialAttributes;
              set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] initialAttributes;
              if (EK0DW00.EK0DW-SUPER-USER-FL == "S")
                set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] cursor;
                set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] normal;
                set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] underline;
              else
                set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] initialAttributes;
              end
            else /* Row is Resolver record*/
              set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] cursor;
              set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] normal;
              set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] underline;
              set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] normal;
              set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] underline;
              set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] normal;
              set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] underline;
              set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] initialAttributes;
            end

          else /* Regular Security User*/
            EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
            set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] initialAttributes;
          end

        else

          if (EK0DW00.EK0DW-MODE-IND == "A") /* Add Mode*/

            EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
            set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] initialAttributes;

            if (EK0DW00.EK0DW-SUPER-USER-FL == "S") /* Super Scrty Usr*/
              set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] normal;
              set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] underline;
              set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[1] cursor;
            else
              set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] initialAttributes;
              set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[1] cursor;
            end
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] normal;
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] underline;
            set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] normal;
            set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] underline;
            set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] normal;
            set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] underline;
            set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] normal;
            set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] underline;

            if (EK0DW00.EK0DW-SUPER-USER-FL == "S") /* Super Scrty User*/
              set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] normal;
              set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] underline;
            else /* User is Regular Scrty User*/
              EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] = "N";
              set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] initialAttributes;
            end

          else /* Delete Mode*/

            if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] > " ")
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] cursor;
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] normal;
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] underline;
            else
              if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX]
               > " ")
                if (EK0DW00.EK0DW-SUPER-USER-FL == "S") /* SprScrty*/
                  set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] cursor;
                  set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] normal;
                  set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] underline;
                else
                  EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
                  set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] skip, noHighLight;
                end
              else
                EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
                set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] skip, noHighLight;
              end
            end
          end
        end
      else

        if (EK0DW00.EK0DW-MODE-IND == "A") /* Add Mode*/

          EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
          set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] skip, noHighLight;

          if (EK0DW00.EK0DW-SUPER-USER-FL == "S") /* User is Super Scrty*/
            set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] normal;
            set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] underline;
            set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] cursor;
          else
            EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] = COMMAREA.CAUSERID;
            set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] cursor;
          end

          set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] normal;
          set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] underline;
          set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] normal;
          set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] underline;
          set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] normal;
          set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] underline;
          set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] normal;
          set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] underline;

          if (EK0DW00.EK0DW-SUPER-USER-FL == "S") /* User is Super Scrty*/
            set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] normal;
            set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] underline;
          else /* User is Regular Scrty User*/
            EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] = "N";
            set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] initialAttributes;
          end

        else

          if (EK0DW00.EK0DW-MODE-IND == "C") /* Change Mode*/

            EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
            set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] initialAttributes;
            set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] initialAttributes;
          else

            if (EK0DW00.EK0DW-MODE-IND == "D") /* Delete Mode*/

              EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] initialAttributes;

            end
          end
        end
      end
    else
      if (EK0DW00.EK0DW-MODE-IND == "D") /* Delete Mode*/
        if (converseVar.validationMsgNum == 827) /* Initial Delete Mode message*/
          if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "S" || 
          EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "Y")
            if (EK0DW00.EK0DW-SUPER-USER-FL == "S") /* SprScrty User*/
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] normal;
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] underline;
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] cursor;
            else
              EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] skip, noHighLight;
            end
          else
            if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] > " ")
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] normal;
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] underline;
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] cursor;
            else
              EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
              set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] skip, noHighLight;
            end
          end
        else
          if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] == " ")
            EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
            set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] skip, noHighLight;
          end
        end
      end
    end

    EK0DW-SCR-IDX = EK0DW-SCR-IDX - 1;

  end

  if (EK0DW00.EK0DW-MODE-IND == "I") /* Inquiry*/
    EK0DM001.EK0DM-MODE = "INQUIRY";
    set EK0DM001.EK0DM-MODE skip, noHighLight;
    if (converseVar.validationMsgNum == 0)
      set EK0DM001.EK0DM-SEARCH-SCRTY-USER initialAttributes;
      set EK0DM001.EK0DM-SEARCH-SCRTY-USER cursor;
      set EK0DM001.EK0DM-SEARCH-ANLS-USER initialAttributes;
      set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG initialAttributes;
    end
    if (EK0DW00.EK0DW-MAX-PAGE == 0 || 
    (EK0DW00.EK0DW-MAX-PAGE == 1 && 
    EK0DW00.EK0DW-MAX-RCD == 0)) /* If no Data to display*/
      set EK0DM001.EK0DM-PF9-ADD skip, noHighLight;
      set EK0DM001.EK0DM-PF10-CHG invisible, skip;
      set EK0DM001.EK0DM-PF11-DEL invisible, skip;
      set EK0DM001.EK0DM-PF12-CONFIRM invisible, skip;
    else
      set EK0DM001.EK0DM-PF9-ADD skip, noHighLight;
      set EK0DM001.EK0DM-PF10-CHG skip, noHighLight;
      set EK0DM001.EK0DM-PF11-DEL skip, noHighLight;
      set EK0DM001.EK0DM-PF12-CONFIRM invisible, skip;
    end
  else
    if (EK0DW00.EK0DW-MODE-IND == "C") /* Change*/
      EK0DM001.EK0DM-MODE = "CHANGE";
      set EK0DM001.EK0DM-MODE skip, reverse;
      set EK0DM001.EK0DM-SEARCH-SCRTY-USER skip, noHighLight;
      set EK0DM001.EK0DM-SEARCH-ANLS-USER skip, noHighLight;
      set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG skip, noHighLight;
      set EK0DM001.EK0DM-PF9-ADD skip, invisible;
      set EK0DM001.EK0DM-PF10-CHG skip, invisible;
      set EK0DM001.EK0DM-PF11-DEL skip, invisible;
      set EK0DM001.EK0DM-PF12-CONFIRM initialAttributes;
    else
      if (EK0DW00.EK0DW-MODE-IND == "A") /* Add*/
        EK0DM001.EK0DM-MODE = " A D D";
        set EK0DM001.EK0DM-MODE skip, reverse;
        set EK0DM001.EK0DM-SEARCH-SCRTY-USER skip, noHighLight;
        set EK0DM001.EK0DM-SEARCH-ANLS-USER skip, noHighLight;
        set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG skip, noHighLight;
        set EK0DM001.EK0DM-PF9-ADD skip, invisible;
        set EK0DM001.EK0DM-PF10-CHG skip, invisible;
        set EK0DM001.EK0DM-PF11-DEL skip, invisible;
        set EK0DM001.EK0DM-PF12-CONFIRM initialAttributes;
      else
        if (EK0DW00.EK0DW-MODE-IND == "D") /* Delete*/
          EK0DM001.EK0DM-MODE = "DELETE";
          set EK0DM001.EK0DM-MODE skip, reverse;
          set EK0DM001.EK0DM-SEARCH-SCRTY-USER skip, noHighLight;
          set EK0DM001.EK0DM-SEARCH-ANLS-USER skip, noHighLight;
          set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG skip, noHighLight;
          set EK0DM001.EK0DM-PF9-ADD skip, invisible;
          set EK0DM001.EK0DM-PF10-CHG skip, invisible;
          set EK0DM001.EK0DM-PF11-DEL skip, invisible;
          set EK0DM001.EK0DM-PF12-CONFIRM initialAttributes;
        end
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    set EK0DM001 alarm; /* Beep if there is an error*/
  end

  converse EK0DM001 ;

  EK0DW02.EK0DW-SCREEN-CHNGD = "N";

  if (EK0DW00.EK0DW-MODE-IND == "I") /* Inquire Mode*/
    if (EK0DM001.EK0DM-SEARCH-SCRTY-USER != 
    EK0DW00.EK0DW-SEARCH-SCRTY-USER || 
    EK0DM001.EK0DM-SEARCH-ANLS-USER != 
    EK0DW00.EK0DW-SEARCH-ANLS-USER || 
    EK0DM001.EK0DM-SEARCH-SCRTY-FLAG != 
    EK0DW00.EK0DW-SEARCH-SCRTY-FLAG)

      EK0DW02.EK0DW-SCREEN-CHNGD = "Y";

      EK0D3300(); /* Process Search Criteria*/

    else

      EK0DS-VAL-SEARCH(); /* Validate Search Scrty, Anlyst, Flag*/

    end
  else

     /* If Add or Change or Delete Mode, check for changes*/

    EK0DW00.EK0DW-SCR-IDX = 1;

    while (EK0DW00.EK0DW-SCR-IDX <= EK0DW00.EK0DW-SCR-LINES)

      if (EK0DW00.EK0DW-MODE-IND == "A") /* Add Mode*/

        if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] != 
        EK0DW02.XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] || 
        EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] != 
        EK0DW02.CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] || 
        EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] != 
        EK0DW02.XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] || 
        EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] != 
        EK0DW02.CL-ESC-USER-ID1[EK0DW-SCR-IDX] || 
        EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] != 
        EK0DW02.CL-ESC-USER-ID2[EK0DW-SCR-IDX] || 
        EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] != 
        EK0DW02.CL-SPR-USER-FL[EK0DW-SCR-IDX])

          EK0DW02.EK0DW-SCREEN-CHNGD = "Y";
        end
      else
        if (EK0DW00.EK0DW-MODE-IND == "C") /* Change Mode*/

          if (EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] != 
          EK0DW02.XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] || 
          EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] != 
          EK0DW02.CL-ESC-USER-ID1[EK0DW-SCR-IDX] || 
          EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] != 
          EK0DW02.CL-ESC-USER-ID2[EK0DW-SCR-IDX] || 
          EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] != 
          EK0DW02.CL-SPR-USER-FL[EK0DW-SCR-IDX])

            EK0DW02.EK0DW-SCREEN-CHNGD = "Y";
          end
        else /* Delete Mode*/

          if (EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] != 
          EK0DW02.EK0DW-COL-FUNC[EK0DW-SCR-IDX])

            EK0DW02.EK0DW-SCREEN-CHNGD = "Y";
          end
        end
      end

      EK0DW-SCR-IDX = EK0DW-SCR-IDX + 1;

    end
  end


   /* Check function keys (May exit application)*/

  EK0DS-CHECK-PFKEYS();

  if (converseVar.eventKey is pa2 /* Refresh*/
   || converseVar.eventKey is pf3 /* or Exit*/
   || converseVar.validationMsgNum != 0) /* or errors*/
    return;
  end

   /* Now if there are no errors, we're not inquiry, user pressed*/
   /* ENTER or PF12, and they entered some changes, go process them!*/

  if (converseVar.validationMsgNum == 0
   && EK0DW00.EK0DW-MODE-IND != "I" /* Not inquiry*/
   && (converseVar.eventKey is enter
   || converseVar.eventKey is pf12) 
   && EK0DW02.EK0DW-SCREEN-CHNGD == "Y")
    EK0D4000(); /* Validate & Update*/
  end

end // end EK0D3100

// Load screen array
Function EK0D3200()
   /* **************************************************************/
   /* Load screen array and internal working storage array*/
   /* from temp storage.*/
   /* **************************************************************/

  set EK0DW02 empty; /* Clear record*/

  EK0DW00.EK0DW-SCR-IDX = 1; /* Init screen index*/
  EK0DW02.EK0DW-W02-IDX = 1; /* and W02 index*/
  EK0DW02.EK0DW-CURR-RCD = EK0DW00.EK0DW-CURR-RCD;

  TA5REC.TA5TSQIX = EK0DW00.EK0DW-CURR-PAGE;
  TA5REC.TA5FNCCD = "R";

  EK0DS-CALL-TA0050(); /* Read queue*/

  EK0DW02.EK0DW-TEMP-ITEM = EK0DW01.EK0DW-TEMP-ITEM;

  EK0DM001.EK0DM-SEARCH-SCRTY-USER = EK0DW00.EK0DW-SEARCH-SCRTY-USER;

  EK0DM001.EK0DM-SEARCH-ANLS-USER = EK0DW00.EK0DW-SEARCH-ANLS-USER;

  EK0DM001.EK0DM-SEARCH-SCRTY-FLAG = EK0DW00.EK0DW-SEARCH-SCRTY-FLAG;


   /* Now get the data from temp storage*/

  while (EK0DW-SCR-IDX <= EK0DW00.EK0DW-SCR-LINES)

    if (EK0DW02.EK0DW-CURR-RCD <= EK0DW00.EK0DW-MAX-RCD)

      EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = EK0DW02.EK0DW-COL-FUNC[EK0DW-W02-IDX];
      EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] = EK0DW02.XXX-SCRTY-USER-ID[EK0DW-W02-IDX];
      EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] = EK0DW02.CL-CR-ANLS-USER-ID[EK0DW-W02-IDX];
      EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] = EK0DW02.XND-NIKE-DEPT-ID[EK0DW-W02-IDX];
      EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] = EK0DW02.CL-SPR-USER-FL[EK0DW-W02-IDX];
      EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] = EK0DW02.CL-ESC-USER-ID1[EK0DW-W02-IDX];
      EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] = EK0DW02.CL-ESC-USER-ID2[EK0DW-W02-IDX];
      EK0DM001.EK0DM-ZZ-SDT[EK0DW-SCR-IDX] = EK0DW02.ZZ-SDT[EK0DW-W02-IDX];
      EK0DM001.EK0DM-ZZ-CHNG-DT[EK0DW-SCR-IDX] = EK0DW02.ZZ-CHNG-DT[EK0DW-W02-IDX];
    else
      EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-ZZ-SDT[EK0DW-SCR-IDX] = 0;
      EK0DM001.EK0DM-ZZ-CHNG-DT[EK0DW-SCR-IDX] = 0;
    end
    EK0DW02.EK0DW-CURR-RCD = EK0DW02.EK0DW-CURR-RCD + 1;
    EK0DW02.EK0DW-W02-IDX = EK0DW02.EK0DW-W02-IDX + 1;
    EK0DW00.EK0DW-SCR-IDX = EK0DW00.EK0DW-SCR-IDX + 1;
  end

  EK0DW02.EK0DW-CURR-RCD = EK0DW00.EK0DW-CURR-RCD;

   /* **************************************************************/
                     /* END  EK0D3200*/
   /* **************************************************************/
end // end EK0D3200

// Process Search criteria
Function EK0D3300()

   /* Process Search criteria*/

  EK0DS-PURGE-QUEUE();

  EK0DS-VAL-SEARCH(); /* Validate Search criteria*/

  EK0DW00.EK0DW-SEARCH-SCRTY-USER = EK0DM001.EK0DM-SEARCH-SCRTY-USER;
  EK0DW00.EK0DW-SEARCH-ANLS-USER = EK0DM001.EK0DM-SEARCH-ANLS-USER;
  EK0DW00.EK0DW-SEARCH-SCRTY-FLAG = EK0DM001.EK0DM-SEARCH-SCRTY-FLAG;

  if (converseVar.validationMsgNum == 0) /* Search criteria is valid*/

    EK0DW00.EK0DW-END-SCREEN = "Y";

  else /* Blank out screen*/
    EK0DW00.EK0DW-SCR-IDX = 1;

    while (EK0DW00.EK0DW-SCR-IDX <= EK0DW00.EK0DW-SCR-LINES)

      set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] skip, noHighLight;
      EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] = " ";
      EK0DM001.EK0DM-ZZ-SDT[EK0DW-SCR-IDX] = 0;
      EK0DM001.EK0DM-ZZ-CHNG-DT[EK0DW-SCR-IDX] = 0;

      EK0DW00.EK0DW-SCR-IDX = EK0DW00.EK0DW-SCR-IDX + 1;
    end

    EK0DW00.EK0DW-CURR-PAGE = 1;
    EK0DW00.EK0DW-MAX-PAGE = 1;
    EK0DM001.EK0DM-CURR-PAGE = 1;
    EK0DM001.EK0DM-MAX-PAGE = 1;
  end
   /* **************************************************************/
                     /* END  EK0D3300*/
   /* **************************************************************/
end // end EK0D3300

// Process Adds/Chgs/Dels
Function EK0D4000()
   /*  */
   /* Main Validation*/
   /*  */

  EK0D4100(); /* Edit Validation*/

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

  if (converseVar.eventKey is enter) /* No Errors, but not PF12*/
    converseLib.validationFailed(828); /* Press PF12 to confirm updates*/
    return;
  end

   /* Now, if we get here we have valid data to ADD or UPDATE or DELETE*/
   /* as long as PF12 key (Confirm) was pressed*/

  EK0D4500(); /* Add/Update/Delete*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    EK0DW00.EK0DW-SEARCH-SCRTY-USER = EK0DM001.EK0DM-SEARCH-SCRTY-USER;
    EK0DW00.EK0DW-SEARCH-ANLS-USER = EK0DM001.EK0DM-SEARCH-ANLS-USER;
    EK0DW00.EK0DW-SEARCH-SCRTY-FLAG = EK0DM001.EK0DM-SEARCH-SCRTY-FLAG;
    EK0DW00.EK0DW-MODE-IND = "I"; /* Set to INQUIRE Mode*/
    converseLib.validationFailed(774); /* Updates successful*/
    EK0DW00.EK0DW-END-SCREEN = "Y";
  end

   /* **************************************************************/
                     /* END  EK0D4000*/
   /* **************************************************************/
end // end EK0D4000

// EDIT Validation process
Function EK0D4100()
   /* --------------------------------------------------------------------*/
   /* Edit Validation Process*/
   /* --------------------------------------------------------------------*/
   /* Depending on whether the current Security User of this screen has*/
   /* the "super" Security Flag set or not, not all fields may be*/
   /* modifiable.*/
   /*  */
   /* For ADD Mode:*/
   /* 1) Super Security Users can ADD other security users' records,*/
   /* apart from their own records; They can add another Super Security*/
   /* record;*/
   /* 2) Regular Security Users can only ADD their own records;*/
   /* They CAN NOT add another Regular nor Super Security record;*/
   /* 3) Validate Security User, Resolver (Analyst), 1st Escalation User,*/
   /* 2nd Escalation User and Security User Flag individually on*/
   /* each detail line;*/
   /* 4) Validate if the key combination above exists:*/
   /* a. On another detail line on the screen*/
   /* b. On the table*/
   /*  */
   /* For CHANGE Mode:*/
   /* 1) Super Security Users can UPDATE other security users' records,*/
   /* apart from their own records;*/
   /* 2) Regular Security Users can only UPDATE their own records;*/
   /* 3) Validate Resolver (Analyst), 1st and 2nd Escalation User*/
   /* and Security User Flag (only for Super Security User)*/
   /*  */
   /* For DELETE Mode:*/
   /* 1) Super Security Users can DELETE other security users' records,*/
   /* apart from their own records;*/
   /* 2) Regular Security Users can only DELETE their own records;*/
   /* 3) Validate the column function entered*/
   /*  */
   /* NOTE: Delete function only works for the row that was requested to*/
   /* be deleted; If the Security User row is deleted, only that row*/
   /* is deleted. All Resolver rows assigned to the deleted Security*/
   /* User would not be deleted. They have to be deleted individually*/
   /* and, at this point, can only be done by a Super Security User.*/
   /* ---------------------------------------------------------------------*/

   /*  */
   /* For ADD Mode only*/
   /* Validate the Key Combination (Security Userid and Resolver UserId)*/
   /* from bottom to top, right to left;*/
   /*  */

  EK0DW00.EK0DW-VALID-KEY-FL = "Y";
  EK0DW00.EK0DW-POPUP-FL = "N";

  EK0DW00.EK0DW-SCR-IDX = EK0DW00.EK0DW-SCR-LINES;

  while (EK0DW00.EK0DW-SCR-IDX > 0 && 
  EK0DW00.EK0DW-MODE-IND == "A")

    set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] normal;
    set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] normal;
    set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] normal;
    set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] normal;
    set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] normal;
    set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] normal;

     /* Validate if data was entered on detail line*/
     /* apart from any default values*/

    if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] > " " && 
    EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] > " ")

      if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] > " " || 
      EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] > " " || 
      EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] > " " || 
      EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] > " ")

           /* Validate Resolver (Credit Analyst) User ID*/

        if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] == " ")
          if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "S" || 
          EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "Y")
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] normal;
          else /* Row to add is Resolver row*/
            if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "N")
              converseLib.validationFailed(832); /* Resolver UserId is required*/
              set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] cursor, bold;
            else
              converseLib.validationFailed(829); /* Super User Flag is invalid*/
              set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] cursor, bold;
            end
          end
        else /* Resolver Id was entered*/
          if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "S" || 
          EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "Y")
            converseLib.validationFailed(837); /* Resolver UserId must be blank*/
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] cursor, bold;
          else
            if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "N")

              set KUYREC empty;

              KUYREC.XXXUSRID = EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX];

              EK0DS-VSVREP01-SA(); /* Alt Select Unique VSVREP01*/

              if (SQLCA.VAGen_SQLCODE == 0)
                set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] normal;
              else
                converseLib.validationFailed(840); /* UserId is not valid Rep Id*/
                set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] cursor, bold;
              end
            else
              converseLib.validationFailed(829); /* Super User Flag is invalid*/
              set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] cursor, bold;
            end
          end
        end
      else /* No other fields entered apart from Scrty User and Flag*/
        if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "S" || 
        EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "Y")
                /* Record to add is a Security User row*/
          set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] normal;
        else /* Record to add is a Resolver User row*/
          if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "N")
            converseLib.validationFailed(832); /* Resolver UserId is required*/
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] cursor, bold;
          else
            converseLib.validationFailed(829); /* Super User Flag is invalid*/
            set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] cursor, bold;
          end
        end
      end
    else /* Check if Scrty User + any other field entered*/
      if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] == " ")
        if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] > " ")
          converseLib.validationFailed(831); /* Scrty UserId is required*/
          set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] cursor, bold;
        end
      else /* Security User Id was specified, but no Scrty Flag*/
        if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] > " ")
          EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] = "N";
        else /* Default to Regular Security*/
          EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] = "Y";
        end
      end
    end

    if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] > " ")

      set KUYREC empty;

      KUYREC.XXXUSRID = EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX];

      EK0DS-VSVREP01-SA(); /* Alt Select Unique VSVREP01*/

      if (SQLCA.VAGen_SQLCODE == 0)
        set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] normal;
      else
        converseLib.validationFailed(840); /* UserId is not valid Rep Id*/
        set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] cursor, bold;
      end

    end

    EK0DW-SCR-IDX = EK0DW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

   /*  */
   /* For ADD and UPDATE Modes only*/
   /* Validate 1st and 2nd Escalation Users and Super User Flags*/
   /* bottom to top, right to left*/
   /*  */

  EK0DW00.EK0DW-SCR-IDX = EK0DW00.EK0DW-SCR-LINES;

  while (EK0DW00.EK0DW-SCR-IDX > 0 && 
  (EK0DW00.EK0DW-MODE-IND == "A" || 
  EK0DW00.EK0DW-MODE-IND == "C"))

    if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] > " " && 
    EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] > " ")

      if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] > " " || 
      EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] > " " || 
      EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] > " " || 
      EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] > " ")

           /* Validate Super User Flag*/
           /* Valid values are 'S' for Super Security User,*/
           /* 'Y' for Regular Security User,*/
           /* 'N' for Resolver (non-Security) User*/

        if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "S" || 
        EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "Y")
          if (EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] > " " || 
          EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] > " ")
            converseLib.validationFailed(838); /* Flag cannot be 'S' or 'Y'*/
            set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] cursor, bold;
          else
            set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] normal;
          end
        else
          if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "N")
            if (EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] > " " || 
            EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] > " " || 
            EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX]
             > " ")
              set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] normal;
            else
              converseLib.validationFailed(839); /* Flag cannot be 'N'*/
              set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] cursor, bold;
            end
          else
            if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == " ")
              converseLib.validationFailed(831); /* Super User Flag is required*/
              set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] cursor, bold;
            else
              converseLib.validationFailed(829); /* Super User Flag is invalid*/
              set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] cursor, bold;
            end
          end
        end


           /* Validate 2nd Escalation User ID*/

        if (EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] > " ")
          if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "S" || 
          EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "Y")
            converseLib.validationFailed(837); /* This UserId field must be blank*/
            set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] cursor, bold;
          else
            if (EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] > " ")

              set KUYREC empty;

              KUYREC.XXXUSRID = EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX];

              EK0DS-VSVREP01-SA(); /* Alt Select Unique VSVREP01*/

              if (SQLCA.VAGen_SQLCODE == 0)
                set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] normal;
              else
                converseLib.validationFailed(840); /* UserId is not valid Rep Id*/
                set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] cursor, bold;
              end
            else
              converseLib.validationFailed(833); /* 1st Esc UserId is required*/
              set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] cursor, bold;
            end
          end
        else
          set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] normal;
        end

           /* Validate 1st Escalation User ID*/

        if (EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] > " ")
          if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "S" || 
          EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "Y")
            converseLib.validationFailed(837); /* This UserId field must be blank*/
            set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] cursor, bold;
          else
            if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX]
             > " ")

              set KUYREC empty;

              KUYREC.XXXUSRID = EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX];

              EK0DS-VSVREP01-SA(); /* Alt Select Unique VSVREP01*/

              if (SQLCA.VAGen_SQLCODE == 0)
                set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] normal;
              else
                converseLib.validationFailed(840); /* UserId is not valid Rep Id*/
                set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] cursor, bold;
              end
            else
              converseLib.validationFailed(832); /* Rslvr/CR Anls is required*/
              set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] cursor, bold;
            end
          end
        else
          set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] normal;
        end

           /* Validate Nike Department ID*/
           /* Required when Resolver Id row is created/updated;*/
           /* Must be blanked out for Security User rows;*/
           /* Must be a valid dept id in XNDTBL*/
           /* Popup is avaliable for this field*/

        if (EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] > " ")
          if (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "S" || 
          EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "Y")
            converseLib.validationFailed(847); /* This field must be blank*/
            set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] cursor, bold;
          else
            if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX]
             > " ")
              EK0DW00.EK0DW-4-CHAR = EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX];
              if (EK0DW00.EK0DW-1ST-CHAR == "?" || 
              EK0DW00.EK0DW-2ND-CHAR == "?" || 
              EK0DW00.EK0DW-3RD-CHAR == "?" || 
              EK0DW00.EK0DW-4TH-CHAR == "?")

                EK0DW00.EK0DW-POPUP-FL = "Y";
                EK0DW00.EK0DW-POPUP-IND = "1"; /* XNDCD Popup*/

                EK0DS-POPUP-WINDOW();

                return; /* Redisplay map*/
              end

              if (EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX]
               != "99" && 
              (EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX]
               in XNDTBL.XNDCD && 
              XNDTBL.XXXSTAT[sysVar.arrayIndex] == "A")) /* Active and valid*/
                set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] normal;
              else
                converseLib.validationFailed(846); /* Nike Dept Id is invalid*/
                set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] cursor, bold;
              end

            else
              converseLib.validationFailed(832); /* Rslvr/CR Anls is required*/
              set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] cursor, bold;
            end
          end
        else
          if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] > " ")
            converseLib.validationFailed(848); /* Nike Dept Id is required*/
            set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] cursor, bold;
          else
            set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] normal;
          end
        end
      end

    end

    EK0DW-SCR-IDX = EK0DW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

   /*  */
   /* For ADD Mode only*/
   /* Compare the key combination against the other*/
   /* key combinations on each detail line on the screen,*/
   /* and against the database*/
   /*  */

  EK0DW00.EK0DW-SCR-IDX = EK0DW00.EK0DW-SCR-LINES;

  while (EK0DW00.EK0DW-SCR-IDX > 0 && 
  EK0DW00.EK0DW-MODE-IND == "A")

    if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] > " " && 
    EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] > " ")

      if ((EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] > " " || 
      EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] > " " || 
      EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] > " " || 
      EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] > " ") || 
      (EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "Y" || 
      EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] == "S"))

        EK0DW00.EK0DW-XXX-SCRTY-USER-ID = EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX];
        EK0DW00.EK0DW-CL-CR-ANLS-USER-ID = EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX];

        EK0DW00.EK0DW-LINE-IDX = EK0DW00.EK0DW-SCR-LINES;
        EK0DW00.EK0DW-LINE-COUNT = 0;

        while (EK0DW00.EK0DW-LINE-IDX > 0)

          if (EK0DW00.EK0DW-XXX-SCRTY-USER-ID == 
          EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-LINE-IDX] && 
          EK0DW00.EK0DW-CL-CR-ANLS-USER-ID == 
          EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-LINE-IDX])

            EK0DW00.EK0DW-LINE-COUNT = EK0DW00.EK0DW-LINE-COUNT + 1;

          end

          EK0DW00.EK0DW-LINE-IDX = EK0DW-LINE-IDX - 1;

        end

        if (EK0DW00.EK0DW-LINE-COUNT > 1)
              /* More than one found including itself*/
          converseLib.validationFailed(821); /* same Combo exists on another line*/
          set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] bold, cursor;
          set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] bold;
        else

              /* Check to make sure that the Key Combination doesn't*/
              /* already exist on the database*/

          set VCLRES01 empty;

          VCLRES01.XXX-SCRTY-USER-ID = EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX];
          VCLRES01.CL-CR-ANLS-USER-ID = EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX];

          EK0DS-VCLRES01-S(); /* Select Unique VCLRES01 row*/

          if (SQLCA.VAGen_SQLCODE == 0) /* Record was found*/
                 /* same Combo already exist on table*/
            converseLib.validationFailed(822);
            set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] bold, cursor;
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] bold;
          else
            set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] normal;
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] normal;
          end
        end
      end
    end

    EK0DW-SCR-IDX = EK0DW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

   /*  */
   /* For ADD Mode only*/
   /* Validate that if Resolver row is to be added, make sure the*/
   /* Resolver Id does not already exist for any other Security User;*/
   /* Also, make sure that Security User has already been created for*/
   /* this resolver.*/
   /* NOTE: The program currently cannot handle if the Security User's*/
   /* row is being created at the same time the Resolver rows*/
   /* that will be assigned to the Security User are created.*/
   /*  */

  EK0DW00.EK0DW-SCR-IDX = EK0DW00.EK0DW-SCR-LINES;

  while (EK0DW00.EK0DW-SCR-IDX > 0 && 
  EK0DW00.EK0DW-MODE-IND == "A")

     /* Validate if there is data on detail line*/

    if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] > " ")

      if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] == " ")
        set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] normal;
      else
        set VCLRES01 empty;

        EK0DS-VCLRES01-S1(); /* Decl/Open VCLRES01 cursor 1*/

        while (SQLCA.VAGen_SQLCODE == 0)

          EK0DS-VCLRES01-N1(); /* Fetch VCLRES01 row*/

          if (VCLRES01.CL-CR-ANLS-USER-ID == 
          EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX])
            converseLib.validationFailed(856); /* Resolver already been assigned*/
            set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] cursor, bold;
          end
        end

        EK0DS-VCLRES01-C1(); /* Close VCLRES01 cursor 1*/

      end

        /* Verify if the Scrty User Id for Resolver already exists*/

      if (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] > " ")
        set VCLRES01 empty;

        VCLRES01.XXX-SCRTY-USER-ID = EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX];
        VCLRES01.CL-CR-ANLS-USER-ID = " ";

        EK0DS-VCLRES01-S(); /* Select Unique VCLRES01*/

        if (SQLCA.VAGen_SQLCODE == 0)
          set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] normal;
        else
          converseLib.validationFailed(857); /* Scrty User not yet created*/
          set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] bold, cursor;
        end
      else
        set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] normal;
      end
    end

    EK0DW-SCR-IDX = EK0DW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

   /*  */
   /* For DELETE Mode only*/
   /* Validate the column function value entered, bottom to top*/
   /*  */

  EK0DW00.EK0DW-SCR-IDX = EK0DW00.EK0DW-SCR-LINES;

  while (EK0DW00.EK0DW-SCR-IDX > 0 && 
  EK0DW00.EK0DW-MODE-IND == "D")

     /* Validate if there is data on detail line*/

    if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] > " ")

        /* Validate Column Function*/

      if (EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] == " ")
        set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] normal;
      else
        if (EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] == "S")
          if (EK0DW00.EK0DW-SUPER-USER-FL == "S" ||  /* SprUser Scrty*/
          EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] == 
          COMMAREA.CAUSERID)                         /* Reg Scrty deleting own recd*/
            set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] normal;
          else
            converseLib.validationFailed(836); /* Scrty Usr not authorized to DEL*/
            set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] bold, cursor;
          end
        else
          converseLib.validationFailed(823); /* Invalid Value, must be S*/
          set EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] bold, cursor;
        end
      end
    end

    EK0DW-SCR-IDX = EK0DW-SCR-IDX - 1;

  end


   /* **************************************************************/
                     /* END  EK0D4100*/
   /* **************************************************************/
end // end EK0D4100

// ADD/UPD/DEL Process
Function EK0D4500()
   /*  */
   /* Insert/Update/Delete Process*/
   /*  */

   /* Get current date and time for ZZ fields*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  EK0DW00.ZZ-SDT = TA2REC.TA2GRGGN;
  EK0DW00.ZZ-SETUP-HHMM = TA2REC.TA2TIMHM;
  EK0DW00.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
  EK0DW00.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;

   /* Now, check for changes and perform add or change routine*/

  EK0DW00.EK0DW-SCR-IDX = 1;
  EK0DW02.EK0DW-UPD-STG = "N";

  while (EK0DW-SCR-IDX <= EK0DW00.EK0DW-SCR-LINES
   && converseVar.validationMsgNum == 000)

    if (EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] != 
    EK0DW02.EK0DW-COL-FUNC[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] != 
    EK0DW02.XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] != 
    EK0DW02.CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] != 
    EK0DW02.XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] != 
    EK0DW02.CL-SPR-USER-FL[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] != 
    EK0DW02.CL-ESC-USER-ID1[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] != 
    EK0DW02.CL-ESC-USER-ID2[EK0DW-SCR-IDX])

      if (EK0DW00.EK0DW-MODE-IND == "A") /* ADD Mode*/
        if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] > " " && 
        (EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] > " " || 
        EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] > " "))

          EK0D4600(); /* Insert VCLRES01 row*/

        end
      else
        if (EK0DW00.EK0DW-MODE-IND == "C") /* CHANGE Mode*/

          EK0D4700(); /* Update VCLRES01 row*/

        else /* DELETE Mode*/

          if (EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] == "S")

            EK0D4800(); /* Delete VCLRES01 row*/

          end

        end
      end
    end

    EK0DW-SCR-IDX = EK0DW-SCR-IDX + 1;

  end

   /* If no errors commit changes, else roll back and exit.*/

  if (converseVar.validationMsgNum == 000) /* No update errors*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* so commit changes*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* roll back changes*/
    return; /* and exit*/
  end

   /* Write updates back to temp storage queue*/

  EK0DW00.EK0DW-SCR-IDX = 1;
  EK0DW02.EK0DW-UPD-STG = "N";

  while (EK0DW-SCR-IDX <= EK0DW00.EK0DW-SCR-LINES)

    if (EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] != 
    EK0DW02.XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] != 
    EK0DW02.CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] != 
    EK0DW02.XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] != 
    EK0DW02.CL-SPR-USER-FL[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] != 
    EK0DW02.CL-ESC-USER-ID1[EK0DW-SCR-IDX] || 
    EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] != 
    EK0DW02.CL-ESC-USER-ID2[EK0DW-SCR-IDX])

      EK0DW02.EK0DW-UPD-STG = "Y";

      EK0DW02.XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] = EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX];
      EK0DW02.CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] = EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX];
      EK0DW02.XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] = EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX];
      EK0DW02.CL-SPR-USER-FL[EK0DW-SCR-IDX] = EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX];
      EK0DW02.CL-ESC-USER-ID1[EK0DW-SCR-IDX] = EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX];
      EK0DW02.CL-ESC-USER-ID2[EK0DW-SCR-IDX] = EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX];
      EK0DW02.ZZ-SDT[EK0DW-SCR-IDX] = EK0DM001.EK0DM-ZZ-SDT[EK0DW-SCR-IDX];
      EK0DW02.ZZ-CHNG-DT[EK0DW-SCR-IDX] = EK0DM001.EK0DM-ZZ-CHNG-DT[EK0DW-SCR-IDX];
    end

    EK0DW-SCR-IDX = EK0DW-SCR-IDX + 1;

  end

  if (EK0DW02.EK0DW-UPD-STG == "Y") /* Need to update*/
    EK0DW01.EK0DW-TEMP-ITEM = EK0DW02.EK0DW-TEMP-ITEM;

    TA5REC.TA5FNCCD = "U";

    TA5REC.TA5TSQIX = EK0DW00.EK0DW-CURR-PAGE;

    EK0DS-CALL-TA0050();

  end

   /* **************************************************************/
                     /* END  EK0D4500*/
   /* **************************************************************/
end // end EK0D4500

// Insert VCLRES01 row
Function EK0D4600()

   /* Insert VCLRES01 Process*/

  set VCLRES01 empty;

  VCLRES01.XXX-SCRTY-USER-ID = EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX];
  VCLRES01.CL-CR-ANLS-USER-ID = EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX];

  EK0DS-VCLRES01-S(); /* Select VCLRES01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(778); /* Record for Insert already exists*/
    set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] bold, cursor;
    set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] bold;
  else
    VCLRES01.XXX-SCRTY-USER-ID = EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX];
    VCLRES01.CL-CR-ANLS-USER-ID = EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX];
    VCLRES01.XND-NIKE-DEPT-ID = EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX];
    VCLRES01.CL-SPR-USER-FL = EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX];
    VCLRES01.CL-ESC-USER-ID1 = EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX];
    VCLRES01.CL-ESC-USER-ID2 = EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX];

    EK0DM001.EK0DM-ZZ-SDT[EK0DW-SCR-IDX] = EK0DW00.ZZ-SDT;
    VCLRES01.ZZ-SDT = EK0DW00.ZZ-SDT;
    VCLRES01.ZZ-SETUP-HHMM = EK0DW00.ZZ-SETUP-HHMM;
    VCLRES01.ZZ-CHNG-DT = 0;
    VCLRES01.ZZ-CHNG-HHMM = 0;
    VCLRES01.ZZ-CHNG-CNT = 0;

    EK0DS-VCLRES01-I(); /* Insert VCLRES01 row*/

    if (SQLCA.VAGen_SQLCODE == 000)
      EK0DW02.EK0DW-ROW-DELTD[EK0DW-SCR-IDX] = "N";
      EK0DW02.EK0DW-ROW-CHNGD[EK0DW-SCR-IDX] = "N";
      EK0DW02.EK0DW-ROW-ADDED[EK0DW-SCR-IDX] = "Y";
      EK0DW02.EK0DW-ROW-EXISTS[EK0DW-SCR-IDX] = "N";
      EK0DW02.EK0DW-UPD-STG = "Y";
    else
      converseLib.validationFailed(339); /* Data updated by another appl*/
      set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] bold, cursor;
      set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] bold;
    end
  end

end // end EK0D4600

// Update VCLRES01 row
Function EK0D4700()

   /* Update VCLRES01 Process*/

  set VCLRES01 empty;

  VCLRES01.XXX-SCRTY-USER-ID = EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX];
  VCLRES01.CL-CR-ANLS-USER-ID = EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX];

  EK0DS-VCLRES01-S(); /* Select VCLRES01 row*/

  if (SQLCA.VAGen_SQLCODE == 000)
    VCLRES01.XND-NIKE-DEPT-ID = EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX];
    VCLRES01.CL-SPR-USER-FL = EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX];
    VCLRES01.CL-ESC-USER-ID1 = EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX];
    VCLRES01.CL-ESC-USER-ID2 = EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX];

    VCLRES01.ZZ-CHNG-DT = EK0DW00.ZZ-CHNG-DT;
    EK0DM001.EK0DM-ZZ-CHNG-DT[EK0DW-SCR-IDX] = EK0DW00.ZZ-CHNG-DT;
    VCLRES01.ZZ-CHNG-HHMM = EK0DW00.ZZ-CHNG-HHMM;

    EK0DS-VCLRES01-U(); /* Update VCLRES01 row*/

    if (SQLCA.VAGen_SQLCODE == 000)
      EK0DW02.EK0DW-ROW-DELTD[EK0DW-SCR-IDX] = "N";
      EK0DW02.EK0DW-ROW-CHNGD[EK0DW-SCR-IDX] = "Y";
      EK0DW02.EK0DW-ROW-ADDED[EK0DW-SCR-IDX] = "N";
      EK0DW02.EK0DW-ROW-EXISTS[EK0DW-SCR-IDX] = "N";
      EK0DW02.EK0DW-UPD-STG = "Y";
    else
      converseLib.validationFailed(018); /* Data updated by another appl*/
      set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] bold, cursor;
      set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] bold;
    end
  else
    converseLib.validationFailed(777); /* Record for Update not found*/
    set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] bold, cursor;
    set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] bold;
  end
end // end EK0D4700

// Delete VCLRES01 row
Function EK0D4800()

   /* Delete VCLRES01 Process*/

  set VCLRES01 empty;
   /*  */
  VCLRES01.XXX-SCRTY-USER-ID = EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX];
  VCLRES01.CL-CR-ANLS-USER-ID = EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX];

  EK0DS-VCLRES01-S(); /* Select VCLRES01 row*/

  if (SQLCA.VAGen_SQLCODE == 000)

    EK0DS-VCLRES01-D(); /* Delete VCLRES01 row*/

    if (SQLCA.VAGen_SQLCODE == 000)
      EK0DW02.EK0DW-ROW-DELTD[EK0DW-SCR-IDX] = "N";
      EK0DW02.EK0DW-ROW-CHNGD[EK0DW-SCR-IDX] = "N";
      EK0DW02.EK0DW-ROW-ADDED[EK0DW-SCR-IDX] = "N";
      EK0DW02.EK0DW-ROW-EXISTS[EK0DW-SCR-IDX] = "Y";
      EK0DW02.EK0DW-UPD-STG = "Y";
    else
      converseLib.validationFailed(018); /* Data updated by another appl*/
      set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] bold, cursor;
      set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] bold;
      set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] bold;
    end
  else
    converseLib.validationFailed(779); /* Record for Delete not found*/
    set EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] bold, cursor;
    set EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] bold;
    set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] bold;
    set EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] bold;
    set EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] bold;
    set EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] bold;
  end
end // end EK0D4800

// Converse NIKE DEPT ID Popup
Function EK0D5100()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for XND-NIKE-DEPT-ID*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "NIKE DEPARTMENT ID DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XNDTBL.XNDCD[XX0XWCT1] != "999") /* or End of Data*/
        if (XNDTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XNDTBL.XNDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XNDTBL.XNDDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && XNDTBL.XNDCD[XX0XWCT1] != "99  ") /* Or end of data*/
        if (XNDTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XNDTBL.XNDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XNDTBL.XNDDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XNDTBL.XNDCD[XX0XWCT1] == "99  ") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0D5100

// Call TA0020
Function EK0DS-CALL-TA0020()

   /* Call TA0020 to report DB2 or application errors*/

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "EK0D";
  TA1REC.TA1MAP = "EK0DM001";
  if (TA1REC.TA1TYPE == "DB2")
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end EK0DS-CALL-TA0020

// Call TA0050 for Temp Storage
Function EK0DS-CALL-TA0050()

   /* Call TA0050 to manage the Temp Storage quere*/
   /* If problems, report to TA0020.*/

  EK0DW01.EK0DW-RCD-SIZE = 0520;
  call "TA0050" (EK0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0000) /* Problems*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0DS-CALL-TA0050";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0050";
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    EK0DS-CALL-TA0020();
    converseLib.validationFailed(811); /* Unexpected error*/
    exit stack;
  end

end // end EK0DS-CALL-TA0050

// Check if User allowed Access
Function EK0DS-CHECK-ACCESS()

   /* Only valid Security Users can use this screen*/
   /* Check IF User is allowed access to this application*/

  EK0DW00.EK0DW-ALLOW-ACCESS-FL = "N";

  set VCLRES01 empty;

  VCLRES01.XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;
  VCLRES01.CL-CR-ANLS-USER-ID = " ";

  EK0DS-VCLRES01-S();

  if (SQLCA.VAGen_SQLCODE == 0)
    EK0DW00.EK0DW-ALLOW-ACCESS-FL = "Y";
  else
    EK0DW00.EK0DW-ALLOW-ACCESS-FL = "N";
  end

  if (EK0DW00.EK0DW-ALLOW-ACCESS-FL == "Y")
     /* continue*/
  else
   /* MOVE COMMAREA.CAFROMAP TO COMMAREA.CATOAP;*/
    COMMAREA.CATOAP = "EK0A";

    XSEXIT(); /* Exit to another application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(811); /* Cannot transfer*/
    return;
  end

end // end EK0DS-CHECK-ACCESS

// Check PF Key Pressed
Function EK0DS-CHECK-PFKEYS()

   /* Check for valid PF keys and Transfer Options*/

  if (converseVar.eventKey is pa2) /* Need refresh*/
    set EK0DW02 empty; /* Scrap table*/
    EK0DW00.EK0DW-MODE-IND = "I"; /* Switch to Inquire Mode*/
    EK0DW00.EK0DW-CURR-PAGE = 001;
    EK0DW00.EK0DW-CURR-RCD = 001;
    return;
  end

  if (converseVar.eventKey is enter) /* If ENTER pressed*/
    if (EK0DM001.CATOAP == " ") /* If Opt is blank*/
      if (EK0DM001.CAITEM == " ") /* And Item is blank*/
        return; /* OK, so exit*/
      else /* Cannot have item without option*/
        converseLib.validationFailed(285); /* Tell user*/
        set EK0DM001.CAITEM cursor, bold;
        return;
      end /* OK, so exit*/
    else
      EK0DS-PURGE-QUEUE(); /* Purge temp storage*/
      COMMAREA.CATOAP = EK0DM001.CATOAP;
      COMMAREA.CAITEM = EK0DM001.CAITEM;
      XSEXIT(); /* Try to get there*/
      converseLib.validationFailed(006); /* Cannot transfer*/
      set EK0DM001.CATOAP cursor, bold;
      return;
    end
  else
    if (EK0DM001.CATOAP != " " ||  /* If Opt entered*/
    EK0DM001.CAITEM != " ")        /* or item entered*/
      converseLib.validationFailed(812); /* Can't use option and PFkey*/
      set EK0DM001.CATOAP cursor, bold;
      set EK0DM001.CAITEM bold;
      return;
    end
  end

  if (converseVar.eventKey is pf1) /* Help System*/
    EK0DS-PURGE-QUEUE(); /* Purge temp storage*/
    XSPF1(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf3) /* EF0I Menu*/

    EK0DS-PURGE-QUEUE(); /* Purge temp storage*/

    EK0DW00.EK0DW-END-SCREEN = "Y";

    if (EK0DW00.EK0DW-MODE-IND == "I") /* Inquire*/

      COMMAREA.CATOAP = COMMAREA.CAFROMAP;

      XSEXIT(); /* Exit to another application*/

      XSPF4(); /* Try to get there*/
      converseLib.validationFailed(811); /* Cannot transfer*/
      return;
    else /* PF3 from CHANGE or ADD mode*/
      EK0DW00.EK0DW-MODE-IND = "I"; /* Switch to Inquire Mode*/
      EK0DW00.EK0DW-CURR-PAGE = 001;
      EK0DW00.EK0DW-CURR-RCD = 001;
      return;
    end
  end

  if (converseVar.eventKey is pf4) /* Master Menu*/
    EK0DS-PURGE-QUEUE(); /* Purge temp storage*/
    COMMAREA.CATOAP = "KL0A";
    XSEXIT(); /* Exit to another application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf7) /* scroll up*/
    if (EK0DW02.EK0DW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0DW00.EK0DW-END-SCREEN = "N";
      return;
    end
    if (EK0DW00.EK0DW-CURR-PAGE == 1)
      converseLib.validationFailed(813); /* at the first page*/
      return;
    else
      EK0DW00.EK0DW-CURR-PAGE = EK0DW00.EK0DW-CURR-PAGE - 1;
      return;
    end
  end

  if (converseVar.eventKey is pf8) /* scroll down*/
    if (EK0DW02.EK0DW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0DW00.EK0DW-END-SCREEN = "N";
      return;
    end
    if (EK0DW00.EK0DW-CURR-PAGE == EK0DW00.EK0DW-MAX-PAGE)
      converseLib.validationFailed(814); /* at the last page*/
      return;
    else
      EK0DW00.EK0DW-CURR-PAGE = EK0DW00.EK0DW-CURR-PAGE + 1;
      return;
    end
  end

  if (converseVar.eventKey is pf9) /* go to ADD mode*/
    if (EK0DW00.EK0DW-MODE-IND == "A" ||  /* If already in ADD or*/
    EK0DW00.EK0DW-MODE-IND == "C" ||      /* CHANGE mode or*/
    EK0DW00.EK0DW-MODE-IND == "D")        /* DELETE mode*/
        /* continue down to INVALID PF Key*/
    else
      if (EK0DM001.EK0DM-SEARCH-SCRTY-USER == 
      EK0DW00.EK0DW-SEARCH-SCRTY-USER && 
      EK0DM001.EK0DM-SEARCH-ANLS-USER == 
      EK0DW00.EK0DW-SEARCH-ANLS-USER && 
      EK0DM001.EK0DM-SEARCH-SCRTY-FLAG == 
      EK0DW00.EK0DW-SEARCH-SCRTY-FLAG)
        if (COMMAREA.CAADDFL == "Y") /* User can add*/
          EK0DS-PURGE-QUEUE(); /* Purge temp storage*/

          set EK0DW01 empty;
          set EK0DW02 empty;
          EK0DW00.EK0DW-CURR-PAGE = 1;
          EK0DW00.EK0DW-CURR-RCD = 1;
          EK0DW00.EK0DW-MAX-PAGE = 1;
          EK0DM001.EK0DM-CURR-PAGE = EK0DW00.EK0DW-CURR-PAGE;
          EK0DM001.EK0DM-MAX-PAGE = EK0DW00.EK0DW-MAX-PAGE;
          EK0DW00.EK0DW-MODE-IND = "A";

          EK0DM001.EK0DM-SEARCH-SCRTY-USER = " ";
          EK0DM001.EK0DM-SCRTY-USER-NAME = " ";
          EK0DM001.EK0DM-SEARCH-ANLS-USER = " ";
          EK0DM001.EK0DM-ANLS-USER-NAME = " ";
          EK0DM001.EK0DM-SEARCH-SCRTY-FLAG = " ";
          EK0DW00.EK0DW-SEARCH-SCRTY-USER = " ";
          EK0DW00.EK0DW-SEARCH-ANLS-USER = " ";
          EK0DW00.EK0DW-SEARCH-SCRTY-FLAG = " ";

          EK0DS-SET-ADD-SCR(); /* Setup ADD screen*/

          return;
        else
          converseLib.validationFailed(562); /* Don't have authority*/
          return;
        end
      else
        converseLib.validationFailed(001); /* PFkey not allowed when criteria changed*/
        return;
      end
    end
  end

  if (converseVar.eventKey is pf10) /* go to CHANGE mode*/
    if (EK0DW00.EK0DW-MODE-IND == "C" ||  /* If already in CHANGE or*/
    EK0DW00.EK0DW-MODE-IND == "A" ||      /* ADD mode or*/
    EK0DW00.EK0DW-MODE-IND == "D" ||      /* DELETE mode or*/
    EK0DM001.EK0DM-XXX-SCRTY-USER-ID[1] == " ") /* No entries on screen*/
        /* continue down to INVALID PF Key*/
    else
      if (EK0DW00.EK0DW-SUPER-USER-FL == "S") /* Super Security User*/
        if (COMMAREA.CACHGFL == "Y") /* User can Change*/
          EK0DW00.EK0DW-MODE-IND = "C";
          return;
        else
          converseLib.validationFailed(562); /* Don't have authority*/
          return;
        end
      else /* Regular Security User*/
        if (EK0DM001.EK0DM-SEARCH-SCRTY-USER == COMMAREA.CAUSERID)
          if (COMMAREA.CACHGFL == "Y") /* User can Change*/
            EK0DW00.EK0DW-MODE-IND = "C";
            return;
          else
            converseLib.validationFailed(562); /* Don't have authority*/
            return;
          end
        else /* Change to own Security Id*/
          EK0DM001.EK0DM-SEARCH-SCRTY-USER = COMMAREA.CAUSERID;
          EK0D3300();
          if (COMMAREA.CACHGFL == "Y") /* User can Change*/
            EK0DW00.EK0DW-MODE-IND = "C";
            return;
          else
            converseLib.validationFailed(562); /* Don't have authority*/
            return;
          end
        end
      end
    end
  end

  if (converseVar.eventKey is pf11) /* go to DELETE mode*/
    if (EK0DW00.EK0DW-MODE-IND == "D" ||  /* If already in DELETE or*/
    EK0DW00.EK0DW-MODE-IND == "A" ||      /* ADD mode or*/
    EK0DW00.EK0DW-MODE-IND == "C" ||      /* CHANGE mode or*/
    EK0DM001.EK0DM-XXX-SCRTY-USER-ID[1] == " ") /* No entries on screen*/
        /* continue down to INVALID PF Key*/
    else
      if (EK0DW00.EK0DW-SUPER-USER-FL == "S") /* Super Security User*/
        if (COMMAREA.CADELFL == "Y") /* User can Delete*/
          EK0DW00.EK0DW-MODE-IND = "D";
          converseLib.validationFailed(827); /* Mode changed; Select line to delete*/
          return;
        else
          converseLib.validationFailed(562); /* Don't have authority*/
          return;
        end
      else /* Regular Security User*/
        if (EK0DM001.EK0DM-SEARCH-SCRTY-USER == COMMAREA.CAUSERID)
          if (COMMAREA.CADELFL == "Y") /* User can Delete*/
            EK0DW00.EK0DW-MODE-IND = "D";
            converseLib.validationFailed(827); /* Mode changed; Select line to delete*/
            return;
          else
            converseLib.validationFailed(562); /* Don't have authority*/
            return;
          end
        else /* Change to own Security Id*/
          EK0DM001.EK0DM-SEARCH-SCRTY-USER = COMMAREA.CAUSERID;
          EK0D3300();
          if (COMMAREA.CADELFL == "Y") /* User can Delete*/
            EK0DW00.EK0DW-MODE-IND = "D";
            return;
          else
            converseLib.validationFailed(562); /* Don't have authority*/
            return;
          end
        end
      end
    end
  end

  if (converseVar.eventKey is pf12) /* User has confirmed*/
    if (EK0DW00.EK0DW-MODE-IND == "I"
    ) /* continue as invalid PF Key*/
    else /* User has confirmed ADD, CHANGE or DELETE*/
      return;
    end
  end

  converseLib.validationFailed(002); /* Invalid PF key*/

end // end EK0DS-CHECK-PFKEYS

// Display Popup Window(s)
Function EK0DS-POPUP-WINDOW()
   /* ------------------------------------------------------------*/
   /* PopUp Window processing for Data Distribution Code and GPC*/
   /* ------------------------------------------------------------*/

  EK0DW00.EK0DW-POPUP-FL = "Y";

  XPXX001(); /* Initialize popup window*/

  if (EK0DW00.EK0DW-POPUP-IND == "1") /* XNDCD Popup*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0D5100(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] = XNDTBL.XNDCD[XX0XWPIX];
      set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] cursor;
      set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] normal;
    else
      EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] = " ";
      set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] cursor;
      set EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] normal;
    end

  end


  converseLib.clearScreen();
   /* Clear screen before display*/

  converseLib.validationFailed(810); /* Requested list(s) displayed*/

   /* ------------------------------------------------------------*/
   /* End EK0DS-POPUP-WINDOW*/
   /* ------------------------------------------------------------*/
end // end EK0DS-POPUP-WINDOW

// Purge temp storage queue
Function EK0DS-PURGE-QUEUE()

   /* Call TA0050 to manage the Temp Storage quere*/
   /* If problems, report to TA0020.*/

  TA5REC.TA5APPID = "EK0D";
  TA5REC.TA5FNCCD = "P";
  EK0DW01.EK0DW-RCD-SIZE = 0520;
  call "TA0050" (EK0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0000) /* Problems*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0DS-PURGE-QUEUE";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0050";
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    EK0DS-CALL-TA0020();
    converseLib.validationFailed(001); /* Unexpected error*/
    exit stack;
  end

end // end EK0DS-PURGE-QUEUE

// Setup ADD screen
Function EK0DS-SET-ADD-SCR()
   /* Setup Add screen*/
   /* If user has tagged any line(s) to use as pattern, display each line*/
   /* consecutively; the rest of the details, if any left, will be set*/
   /* to blanks;*/
   /* For regular (non-super) security user, if line to be patterned from*/
   /* does not equal his/her security id, the regular security id will*/
   /* be defaulted;*/

  EK0DW00.EK0DW-SCR-IDX = 1;
  EK0DW00.EK0DW-LINE-IDX = 1;

  while (EK0DW00.EK0DW-SCR-IDX <= EK0DW00.EK0DW-SCR-LINES)

    if (EK0DM001.EK0DM-COL-FUNC[EK0DW-SCR-IDX] == "S") /* line selected*/

      EK0DM001.EK0DM-COL-FUNC[EK0DW-LINE-IDX] = " ";

      if (EK0DW00.EK0DW-SUPER-USER-FL == "S") /* User is Super Scrty user*/
        EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-LINE-IDX] = EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX];
      else /**/
        EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-LINE-IDX] = COMMAREA.CAUSERID;
      end

      EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-LINE-IDX] = EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX];
      EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-LINE-IDX] = EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX];
      EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-LINE-IDX] = EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX];
      EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-LINE-IDX] = EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX];
      EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-LINE-IDX] = EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX];
      EK0DM001.EK0DM-ZZ-SDT[EK0DW-LINE-IDX] = 0;
      EK0DM001.EK0DM-ZZ-CHNG-DT[EK0DW-LINE-IDX] = 0;

      EK0DW02.EK0DW-ROW-DELTD[EK0DW-LINE-IDX] = "N";
      EK0DW02.EK0DW-ROW-CHNGD[EK0DW-LINE-IDX] = "N";
      EK0DW02.EK0DW-ROW-EXISTS[EK0DW-LINE-IDX] = "N";
      EK0DW02.EK0DW-ROW-ADDED[EK0DW-LINE-IDX] = "Y";

      EK0DW00.EK0DW-LINE-IDX = EK0DW-LINE-IDX + 1;

    end

    EK0DW00.EK0DW-SCR-IDX = EK0DW-SCR-IDX + 1;

  end

  EK0DW00.EK0DW-SCR-IDX = EK0DW00.EK0DW-LINE-IDX;

  while (EK0DW00.EK0DW-SCR-IDX <= EK0DW00.EK0DW-SCR-LINES)

    EK0DM001.EK0DM-XXX-SCRTY-USER-ID[EK0DW-SCR-IDX] = " ";
    EK0DM001.EK0DM-CL-CR-ANLS-USER-ID[EK0DW-SCR-IDX] = " ";
    EK0DM001.EK0DM-XND-NIKE-DEPT-ID[EK0DW-SCR-IDX] = " ";
    EK0DM001.EK0DM-CL-ESC-USER-ID1[EK0DW-SCR-IDX] = " ";
    EK0DM001.EK0DM-CL-ESC-USER-ID2[EK0DW-SCR-IDX] = " ";
    EK0DM001.EK0DM-CL-SPR-USER-FL[EK0DW-SCR-IDX] = " ";
    EK0DM001.EK0DM-ZZ-SDT[EK0DW-SCR-IDX] = 0;
    EK0DM001.EK0DM-ZZ-CHNG-DT[EK0DW-SCR-IDX] = 0;

    EK0DW02.EK0DW-ROW-DELTD[EK0DW-SCR-IDX] = "N";
    EK0DW02.EK0DW-ROW-CHNGD[EK0DW-SCR-IDX] = "N";
    EK0DW02.EK0DW-ROW-EXISTS[EK0DW-SCR-IDX] = "N";
    EK0DW02.EK0DW-ROW-ADDED[EK0DW-SCR-IDX] = "Y";

    EK0DW00.EK0DW-SCR-IDX = EK0DW-SCR-IDX + 1;

  end

  EK0DW01.EK0DW-TEMP-ITEM = EK0DW02.EK0DW-TEMP-ITEM;

  TA5REC.TA5FNCCD = "A";

  EK0DS-CALL-TA0050(); /* Write TS Queue record*/

end // end EK0DS-SET-ADD-SCR

// Validate Search criteria
Function EK0DS-VAL-SEARCH()

   /* Validate SEARCH Claim Security Flag*/

  EK0DW00.EK0DW-SEARCH-SCRTY-FLAG = EK0DM001.EK0DM-SEARCH-SCRTY-FLAG;

  if (EK0DM001.EK0DM-SEARCH-SCRTY-FLAG == " ") /* All security flags*/
    set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG normal;
  else
    if (EK0DM001.EK0DM-SEARCH-SCRTY-FLAG == "S" ||  /* Super Security*/
    EK0DM001.EK0DM-SEARCH-SCRTY-FLAG == "Y" ||      /* Regular Security*/
    EK0DM001.EK0DM-SEARCH-SCRTY-FLAG == "N")        /* Regular Resolver*/
      set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG normal;
    else
      converseLib.validationFailed(829); /* Claim Security User Flag is invalid*/
      set EK0DM001.EK0DM-SEARCH-SCRTY-FLAG cursor, bold;
    end
  end


   /* Validate SEARCH Claim Resolver User Id*/

  EK0DW00.EK0DW-SEARCH-ANLS-USER = EK0DM001.EK0DM-SEARCH-ANLS-USER;

  if (EK0DM001.EK0DM-SEARCH-ANLS-USER == " ")
    EK0DM001.EK0DM-ANLS-USER-NAME = " ";
    set EK0DM001.EK0DM-SEARCH-ANLS-USER normal;
  else

    set KUYREC empty;

    KUYREC.XXXUSRID = EK0DM001.EK0DM-SEARCH-ANLS-USER;

    EK0DS-VSVREP01-SA(); /* Alt Select Unique VSVREP01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0DM001.EK0DM-ANLS-USER-NAME = KUYREC.KUYREPNM;
    else
      EK0DM001.EK0DM-ANLS-USER-NAME = " ";
      converseLib.validationFailed(840); /* UserId entered not valid Rep Id*/
      set EK0DM001.EK0DM-SEARCH-ANLS-USER cursor, bold;
    end
  end

   /* Validate SEARCH Claim Security User Id*/

  EK0DW00.EK0DW-SEARCH-SCRTY-USER = EK0DM001.EK0DM-SEARCH-SCRTY-USER;

  if (EK0DM001.EK0DM-SEARCH-SCRTY-USER == " ")
    EK0DM001.EK0DM-SCRTY-USER-NAME = " ";
    set EK0DM001.EK0DM-SEARCH-SCRTY-USER normal;
  else
    set KUYREC empty;

    KUYREC.XXXUSRID = EK0DM001.EK0DM-SEARCH-SCRTY-USER;

    EK0DS-VSVREP01-SA(); /* Alt Select Unique VSVREP01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0DM001.EK0DM-SCRTY-USER-NAME = KUYREC.KUYREPNM;
    else
      EK0DM001.EK0DM-SCRTY-USER-NAME = " ";
      converseLib.validationFailed(840); /* UserId entered not valid Rep Id*/
      set EK0DM001.EK0DM-SEARCH-SCRTY-USER cursor, bold;
    end
  end

end // end EK0DS-VAL-SEARCH

// Close VCLRES01 row
Function EK0DS-VCLRES01-C1()
  CLXREC.CLXCPROC = "EK0DS-VCLRES01-C1";

  try
    call "VCLRES01" ("C1", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C1 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0DS-VCLRES01-C1

// Delete VCLRES01 row
Function EK0DS-VCLRES01-D()
  CLXREC.CLXCPROC = "EK0DS-VCLRES01-D";

  try
    call "VCLRES01" ("D ", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Delete*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "D      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01"; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "D 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01"; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0DS-VCLRES01-D

// Insert VCLRES01 row
Function EK0DS-VCLRES01-I()
  try
    call "VCLRES01" ("A ", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Insert*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "A      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01"; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "A 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01"; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0DS-VCLRES01-I

// Fetch VCLRES01 row
Function EK0DS-VCLRES01-N1()
  CLXREC.CLXCPROC = "EK0DS-VCLRES01-N1";

  try
    call "VCLRES01" ("N1", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N1 8     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0DS-VCLRES01-N1

// Select VCLRES01 row
Function EK0DS-VCLRES01-S()
  CLXREC.CLXCPROC = "EK0DS-VCLRES01-S";

  try
    call "VCLRES01" ("S ", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0DS-VCLRES01-S

// Open VCLRES01 row
Function EK0DS-VCLRES01-S1()
  CLXREC.CLXCPROC = "EK0DS-VCLRES01-S1";

  try
    call "VCLRES01" ("S1", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S1 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0DS-VCLRES01-S1

// Update VCLRES01 row
Function EK0DS-VCLRES01-U()
  CLXREC.CLXCPROC = "EK0DS-VCLRES01-U";

  XX0XS01(); /* get current system time and date*/

  VCLRES01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VCLRES01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

  try
    call "VCLRES01" ("U ", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "U      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "U 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0DS-VCLRES01-U

// Select VSVREP01 row
Function EK0DS-VSVREP01-SA()
  CLXREC.CLXCPROC = "EK0DS-VSVREP01-SA";

  try
    call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "SA     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VSVREP01 "; /* io module*/
        TA1REC.TA1DBASE = "DCUST"; /* data base*/
        TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "SA 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VSVREP01 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* data base*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0DS-VSVREP01-SA

//*** RECORD=EK0DW00 ****
// This is the main working storage record for EK0D.
// ***********************
Record EK0DW00 type basicRecord
  10 EK0DW-SCR-LINES EK0DW-SCR-LINES ; 
  10 EK0DW-SCR-IDX EK0DW-SCR-IDX ; 
  10 EK0DW-LINE-IDX EK0DW-LINE-IDX ; 
  10 EK0DW-END-SCREEN EK0DW-END-SCREEN ; 
  10 EK0DW-WRK-IDX EK0DW-WRK-IDX ; 
  10 EK0DW-COL-IDX EK0DW-COL-IDX ; 
  10 EK0DW-LINE-COUNT EK0DW-LINE-COUNT ; 
  10 EK0DW-MODE-IND EK0DW-MODE-IND ; 
  10 EK0DW-POPUP-FL EK0DW-POPUP-FL ; 
  10 EK0DW-POPUP-IND EK0DW-POPUP-IND ; 
  10 EK0DW-END-SCAN EK0DW-END-SCAN ; 
  10 EK0DW-VALID-KEY-FL EK0DW-VALID-KEY-FL ; 
  10 EK0DW-USER-ID-ERR-FL EK0DW-USER-ID-ERR-FL ; 
  10 EK0DW-SUPER-USER-FL EK0DW-SUPER-USER-FL ; 
  10 EK0DW-BYPASS-FL EK0DW-BYPASS-FL ; 
  10 EK0DW-ALLOW-ACCESS-FL EK0DW-ALLOW-ACCESS-FL ; 
  10 * char(1) ; 
  10 EK0DW-USER-ID EK0DW-USER-ID ; 
  10 * char(1) ; 
  10 EK0DW-VCLRES01-ROW EK0DW-VCLRES01-ROW ; 
    15 EK0DW-CL-CR-ANLS-USER-ID EK0DW-CL-CR-ANLS-USER-ID ; 
    15 EK0DW-XXX-SCRTY-USER-ID EK0DW-XXX-SCRTY-USER-ID ; 
    15 EK0DW-CL-SPR-USER-FL EK0DW-CL-SPR-USER-FL ; 
    15 EK0DW-CL-ESC-USER-ID1 EK0DW-CL-ESC-USER-ID1 ; 
    15 EK0DW-CL-ESC-USER-ID2 EK0DW-CL-ESC-USER-ID2 ; 
    15 EK0DW-XND-DEPT-ID-XREF EK0DW-XND-DEPT-ID-XREF ; 
    15 EK0DW-ZZ-SDT EK0DW-ZZ-SDT ; 
    15 EK0DW-ZZ-CHNG-DT EK0DW-ZZ-CHNG-DT ; 
  10 * char(1) ; 
  10 EK0DW-SEARCH-SCRTY-USER EK0DW-SEARCH-SCRTY-USER ; 
  10 EK0DW-SEARCH-ANLS-USER EK0DW-SEARCH-ANLS-USER ; 
  10 EK0DW-SEARCH-SCRTY-FLAG EK0DW-SEARCH-SCRTY-FLAG ; 
  10 * char(1) ; 
  10 EK0DW-4-CHAR EK0DW-4-CHAR ; 
    15 EK0DW-1ST-CHAR EK0DW-1ST-CHAR ; 
    15 EK0DW-2ND-CHAR EK0DW-2ND-CHAR ; 
    15 EK0DW-3RD-CHAR EK0DW-3RD-CHAR ; 
    15 EK0DW-4TH-CHAR EK0DW-4TH-CHAR ; 
  10 * char(1) ; 
  10 EK0DW-TEMP-STG-DATA EK0DW-TEMP-STG-DATA ; 
    15 EK0DW-CURR-PAGE EK0DW-CURR-PAGE ; 
    15 EK0DW-MAX-PAGE EK0DW-MAX-PAGE ; 
    15 EK0DW-CURR-RCD EK0DW-CURR-RCD ; 
    15 EK0DW-MAX-RCD EK0DW-MAX-RCD ; 
  10 * char(1) ; 
  10 EK0DW-ZZ-FAMILY EK0DW-ZZ-FAMILY ; 
    15 ZZ-SDT ZZ-SDT ; 
    15 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    15 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    15 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    15 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end EK0DW00

//*** RECORD=EK0DW01 ****
// This is the main working storage record for EK0D.
// ***********************
Record EK0DW01 type basicRecord
  5 EK0DW-RCD-SIZE EK0DW-RCD-SIZE ; 
  5 EK0DW-TEMP-ITEM EK0DW-TEMP-ITEM ; 
    10 EK0DW-COL-FUNC EK0DW-COL-FUNC [10] ; 
    10 CL-CR-ANLS-USER-ID CL-CR-ANLS-USER-ID [10] ; 
    10 XXX-SCRTY-USER-ID XXX-SCRTY-USER-ID [10] ; 
    10 CL-SPR-USER-FL CL-SPR-USER-FL [10] ; 
    10 CL-ESC-USER-ID1 CL-ESC-USER-ID1 [10] ; 
    10 CL-ESC-USER-ID2 CL-ESC-USER-ID2 [10] ; 
    10 XND-NIKE-DEPT-ID XND-NIKE-DEPT-ID [10] ; 
    10 ZZ-SDT ZZ-SDT [10] ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT [10] ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT [10] ; 
    10 EK0DW-ROW-EXISTS EK0DW-ROW-EXISTS [10] ; 
    10 EK0DW-ROW-CHNGD EK0DW-ROW-CHNGD [10] ; 
    10 EK0DW-ROW-ADDED EK0DW-ROW-ADDED [10] ; 
    10 EK0DW-ROW-DELTD EK0DW-ROW-DELTD [10] ; 
end // end EK0DW01

//*** RECORD=EK0DW02 ****
// ************************************************************
// Working Storage for EK0D
// 
// This table holds information about the section of temp
// storage currently being displayed on the screen.
// ************************************************************
// ***********************
Record EK0DW02 type basicRecord
  5 EK0DW-CURR-RCD EK0DW-CURR-RCD ; 
  5 EK0DW-W02-IDX EK0DW-W02-IDX ; 
  5 EK0DW-SCREEN-CHNGD EK0DW-SCREEN-CHNGD ; 
  5 EK0DW-UPD-STG EK0DW-UPD-STG ; 
  5 EK0DW-TEMP-ITEM EK0DW-TEMP-ITEM ; 
    10 EK0DW-COL-FUNC EK0DW-COL-FUNC [10] ; 
    10 CL-CR-ANLS-USER-ID CL-CR-ANLS-USER-ID [10] ; 
    10 XXX-SCRTY-USER-ID XXX-SCRTY-USER-ID [10] ; 
    10 CL-SPR-USER-FL CL-SPR-USER-FL [10] ; 
    10 CL-ESC-USER-ID1 CL-ESC-USER-ID1 [10] ; 
    10 CL-ESC-USER-ID2 CL-ESC-USER-ID2 [10] ; 
    10 XND-NIKE-DEPT-ID XND-NIKE-DEPT-ID [10] ; 
    10 ZZ-SDT ZZ-SDT [10] ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT [10] ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT [10] ; 
    10 EK0DW-ROW-EXISTS EK0DW-ROW-EXISTS [10] ; 
    10 EK0DW-ROW-CHNGD EK0DW-ROW-CHNGD [10] ; 
    10 EK0DW-ROW-ADDED EK0DW-ROW-ADDED [10] ; 
    10 EK0DW-ROW-DELTD EK0DW-ROW-DELTD [10] ; 
end // end EK0DW02

//*** RECORD=EK0DW03 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - xpxx001
//            and xp???01. ( Where ??? is the table name
//            associated with the pop-up window process.)
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04/06/98  HMACAL  CREATED
// ************************************************************
// ***********************
Record EK0DW03 type basicRecord
  10 EK0DWCT1 EK0DWCT1 ; 
  10 EK0DWCT2 EK0DWCT2 ; 
  10 EK0DWSIX EK0DWSIX ; 
  10 EK0DWPIX EK0DWPIX ; 
  10 EK0DWINX EK0DWINX [20] ; 
  10 EK0DWEND EK0DWEND ; 
  10 EK0DWFFL EK0DWFFL ; 
  10 EK0DWERR EK0DWERR ; 
  10 EK0DWHDR EK0DWHDR ; 
  10 EK0DWNUM EK0DWNUM ; 
    15 EK0DWCHA EK0DWCHA ; 
end // end EK0DW03

DataItem EK0DW-1ST-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-2ND-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-3RD-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-4-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-4TH-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-ALLOW-ACCESS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-BYPASS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-CR-ANLS-USER-ID
DataItem EK0DW-CL-CR-ANLS-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-ESC-USER-ID1
DataItem EK0DW-CL-ESC-USER-ID1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-ESC-USER-ID2
DataItem EK0DW-CL-ESC-USER-ID2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-SPR-SPR-FL
DataItem EK0DW-CL-SPR-USER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// column function
DataItem EK0DW-COL-FUNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// column index
DataItem EK0DW-COL-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page on screen
DataItem EK0DW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current temp storage records
DataItem EK0DW-CURR-RCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of scan flag
DataItem EK0DW-END-SCAN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of screen flag
DataItem EK0DW-END-SCREEN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of entered detail lines
DataItem EK0DW-LINE-COUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line index
DataItem EK0DW-LINE-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum pages
DataItem EK0DW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum temp storage records
DataItem EK0DW-MAX-RCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// program mode (a,c,i)
DataItem EK0DW-MODE-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// was a popup displayed? Y/N
DataItem EK0DW-POPUP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1=CLM TYP 2=CLM RSN 3=CLM ST
DataItem EK0DW-POPUP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Modified Switch
DataItem EK0DW-RCD-SIZE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0DW-ROW-ADDED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-ROW-CHNGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-ROW-DELTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-ROW-EXISTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen index
DataItem EK0DW-SCR-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size of screen table
DataItem EK0DW-SCR-LINES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0DW-SCREEN-CHNGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search CL-CR-ANLS-USER-ID
DataItem EK0DW-SEARCH-ANLS-USER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search CL-SPR-USER-FL
DataItem EK0DW-SEARCH-SCRTY-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search XXX-SCRTY-USER-ID
DataItem EK0DW-SEARCH-SCRTY-USER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Super User flag
DataItem EK0DW-SUPER-USER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-TEMP-ITEM char(520)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage control data
DataItem EK0DW-TEMP-STG-DATA char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-UPD-STG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work area for UserId
DataItem EK0DW-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// UserId error flag
DataItem EK0DW-USER-ID-ERR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-VALID-KEY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCLRES01 row
DataItem EK0DW-VCLRES01-ROW char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DW-W02-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem EK0DW-WRK-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XND-DEPT-ID-XREF
DataItem EK0DW-XND-DEPT-ID-XREF char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XXX-SCRTY-USER-ID
DataItem EK0DW-XXX-SCRTY-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZZ-CHNG-DT
DataItem EK0DW-ZZ-CHNG-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0DW-ZZ-FAMILY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZZ-SDT
DataItem EK0DW-ZZ-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0DWCHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0DWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0DWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DWHDR char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0DWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0DWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0DWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0DWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

