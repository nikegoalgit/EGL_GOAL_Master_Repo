package ek0e;
import as1.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ek.common.*;
import fy.common.*;
import in1.common.*;
import iv.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=EK0E ****
// ************************************************************
// 
//       EK0E - Claims Work Screen
//       -------------------------
// 
// General program explanation and notes:
// 
// This program allows the user to perform Inquiry and Update
// of selected rows
// ------------------------------------------------------------
//      Maintenance History:
//      --------------------
//    Date     Userid    Description
// ----------  ------  ----------------------------------------
// 05-12-1998  HMACAL  Application creation
// 
// 06-12-1998  HMACAL  Changed AMOUNT field on criteria to
//                     accept only positive value; Also
//                     changed logic to compare this amount
//                     to the absolute value of CL-CLM-EST-VAL;
//                     Also added EK0EW-SIGN-DROPPED-FL on
//                     EK0EW00 work record.
//                     Reminder: Everytime EK0EW00 is modified,
//                               EK0A and EK0F, which also use
//                               this work record, need to be
//                               re-generated. See EK0EW00
//                               prologue.
// 
// 06-17-1998  HMACAL  Increased record length of EK0EW01 and
//                     EK0EW02 length from 1521 to 1625, due
//                     to correction to lengths of fields
//                     OP-CUST-PO and SR-SHP-DT. This also
//                     affects the size of TSQ record.
// 
// 06-19-1998  HMACAL  Modified EK0E2100 to move MOVE stmt
//                     for CL-CLXCP-IND before performing
//                     EK0EW-CLC-ESC-DAYS.
// 
// 06-23-1998  HMACAL  Modified EK0ES-CLC-ESC-DAYS and
//                     EK0ES-CLC-DAYS-RNG logic on calculating
//                     escalation days for Authorized claims:
//                     Calculate Authorized User to be the same
//                     as 1st Escalation User's calculation.
// 
// 06-25-1998  HMACAL  Modified EK0ES-CLC-ESC-DAYS and
//                     EK0ES-CLC-DAYS-RNG logic on calculating
//                     escalation days for Authorized claims:
//                     Calculate Authorized User to be the same
//                     as Original Resolver's calculation.
// 
// 06-29-1998  HMACAL  Modified EK0E3200 to display CL-ESC-ACT-
//                     CD, when available, under the 'F' column
//                     otherwise, display CL-RSLV-CD of the
//                     current resolver of the claim. This will
//                     require additional lookups on VCLESX01
//                     to get the current level of the claim;
//                     Also modified Activity criteria to only
//                     display current claims being Researched
//                     on when an 'R' is entered as criteria.
// 
// 07-23-1998  kclar1  cng rep and agency with call to ku1350
// 
// 09-03-1998  HMACAL  Modified EK0E3100 to be able to process
//                     13th detail line.
// 
// 09-10-1998  HMACAL  Modified EK0E2000 to check if the value
//                     stored in EK0EW00.EK0EW-SV-CURR-PAGE
//                     will exceed the maximum number of pages
//                     built on Temporary Storage. This is to
//                     fix the problem when rebuilding the
//                     last page that had only one detail line
//                     before the transfer to EK0F which
//                     resulted in not including the claim
//                     detail when returning back and rebuil-
//                     ding the work screen. Instead it would
//                     display the newly calculated last page.
// 
// 09-16-1998  HMACAL  Modified EK0ES-VAL-SEARCH-1 and EK0ES-
//                     VAL-SEARCH-2 to remove validation
//                     checking for 'Inactive' or 'Active'
//                     status for the following codes, per
//                     SKELL1: Claim Type, Claim Reason, Claim
//                     Status, Sales Office, GPC and Warehouse.
// 
// 03-16-1999  GDECKE  ALLOW SALES OFFICE 21 (CONSUMERS) SUPER
//                     USER TO DELETE ESCALATION ON CLAIM IN
//                     OPEN STATUS.
// 04-12-2000  RRAJAG  Modified EK0E-00000 and EK0E2000 to fix
//                     ASRA abend.
// *********************
Program EK0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL2REC CL2REC; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLEREC CLEREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  EK0EW00 EK0EW00; // record
  EK0EW01 EK0EW01; // record
  EK0EW02 EK0EW02; // record
  EK0EW03 EK0EW03; // record
  EKWREC EKWREC; // record
  ERRSQLCA ERRSQLCA; // record
  KU5REC KU5REC; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUYREC KUYREC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  VCLDIS01 VCLDIS01; // record
  VCLESC01 VCLESC01; // record
  VCLESX01 VCLESX01; // record
  VCLHDR02 VCLHDR02; // record
  VCLRES01 VCLRES01; // record
  VIVHDR04 VIVHDR04; // record
  VIVITM02 VIVITM02; // record
  VSTORE02 VSTORE02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use CL00ENU {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCITBL {deleteAfterUse = yes}; // table
  use YPSTBL {deleteAfterUse = yes}; // table
  use EK0EM.EK0EM001,  // forms
      EK0EM.EK0EM002, 
      EK0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    EK0E-00000: EK0E-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set EK0EM001 initial; /* M001 input/output*/
    set EK0EW01 empty; /* Working storage*/
    set EK0EW02 empty; /* Working storage*/
    set EK0EW03 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EK0E0000; /* Converse the main process*/
    EK0E0000: EK0E0000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EK0E0000; /* Converse the main process*/


  end // end main
end // end EK0E

// Application initialization
Function EK0E-00000()
   /* **********************************************************************/
   /* Modification History                                  **/
   /* Date     Userid    Description                                  **/
   /* ----------  ------  ---------------------------------------------- **/
   /* 04-12-2000  RRAJAG  Initialized EK0EW-SV-CURR-PAGE to 0 when       **/
   /* no value has been passed by the calling        **/
   /* applications.(Done to fix ASRA abend).         **/
   /* **********************************************************************/
   /* -------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* -------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* -------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* -------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* -------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* -------------------------------------------------------------*/

  set EKWREC empty;
  set EK0EW00 empty;

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    CLWREC.CLWGROUP = COMMAREA.CAUSERA; /* Restore Claims Wrk Rcd*/
    EKWREC.EKWREC-GROUP = COMMAREA.CA-USER-WORKAREA-2K-B; /* Restore Claims Escalation Work Record*/
    EK0EW00.EK0EW-GROUP = EKWREC.EKW-EK0E-AREA;

    if (EKWREC.EKWREC-GROUP == " ") /* If no data passed*/
      set EKWREC empty;
    end

  else
    if (COMMAREA.CAFRMSYS == "KL" ||  /* Claims System*/
    COMMAREA.CAFRMSYS == "IV")        /* Invoice System*/
      CLWREC.CLWGROUP = COMMAREA.CAUSERA; /* Restore Claims Wrk Rcd*/
      EKWREC.EKWREC-GROUP = COMMAREA.CA-USER-WORKAREA-2K-B; /* Restore Claims Escalation Wrok Record*/
      EK0EW00.EK0EW-GROUP = EKWREC.EKW-EK0E-AREA;

      if (EKWREC.EKWREC-GROUP == " ") /* If no data passed*/
        set EKWREC empty;
      end

    else
      set EKWREC empty; /* Initialize work record*/
    end
  end

   /* -------------------------------------------------------------*/
   /* Initialize BINARY fields when EKWREC is empty*/
   /* -------------------------------------------------------------*/
   /* TCS Change - 04/12/2000 - Included EK0EW-SV-CURR-PAGE in the*/
   /* following 'IF' statement.*/
   /*  */
  if (EKWREC.EKWREC-GROUP == " ")
    EK0EW00.EK0EW-WRK-IDX = 0;
    EK0EW00.EK0EW-COL-IDX = 0;
    EK0EW00.EK0EW-SV-CL-CLM-NBR = 0;
    EK0EW00.EK0EW-SV-IV-IVC-ID = 0;
    EK0EW00.EK0EW-SV-OP-CUST-ORD-ID = 0;
    EK0EW00.EK0EW-SV-OP-NIKE-ORD-ID = 0;
    EK0EW00.EK0EW-CU-CO-ID = 0;
    EK0EW00.EK0EW-CU-STOR-ID = 0;
    EK0EW00.EK0EW-XNX-DEPT-ID-XREF = 0;
    EK0EW00.EK0EW-CL-CLM-NBR = 0;
    EK0EW00.EK0EW-CL-EST-CLM-VAL = 0;
    EK0EW00.EK0EW-SM-SREP-ID = 0;
    EK0EW00.EK0EW-IV-IVC-ID = 0;
    EK0EW00.EK0EW-CL-TOT-CLM-QTY = 0;
    EK0EW00.EK0EW-S-CU-CO-ID = 0;
    EK0EW00.EK0EW-S-CU-STOR-ID = 0;
    EK0EW00.EK0EW-S-XNX-DEPT-ID-XREF = 0;
    EK0EW00.EK0EW-S-TOT-CLAIM-AMT = 0;
    EK0EW00.EK0EW-S-CL-CLM-NBR = 0;
    EK0EW00.EK0EW-S-SM-SREP-ID = 0;
    EK0EW00.EK0EW-S-IV-IVC-ID = 0;
    EK0EW00.EK0EW-S-CL-EST-CLM-VAL = 0;
    EK0EW00.EK0EW-DATE-CCYYMMDD-BIN = 0;
    EK0EW00.EK0EW-SV-CURR-PAGE = 0;
  end
   /* -------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* -------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end EK0E-00000

// Main process of Application
Function EK0E0000()
  EK0ES-PURGE-QUEUE(); /* Purge temp storage queue*/

  EK0E1000(); /* Obtain the data to display*/

  EK0E2000(); /* Load temp storage with data*/

  EK0E3000(); /* Display data to screen*/
                                  /* Process adds/changes*/


   /* **************************************************************/
                     /* END  EK0E0000*/
   /* **************************************************************/
end // end EK0E0000

// Main process to display a map
Function EK0E1000()
   /*  */
   /* This process set the initial screen-defined field attributes*/
   /*  */

  set EK0EM001 initial; /* Clear out EK0EM001*/
  set EK0EM002 initial; /* Clear out EK0EM002*/

  EK0EM001.EK0EM-S1-CURRENT-DATE = VGVar.currentShortGregorianDate;
  EK0EM002.EK0EM-S2-CURRENT-DATE = VGVar.currentShortGregorianDate;

   /* Set default screen values*/

  if (EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID == " ")

    EK0E1100(); /* Initialize Work Record*/

  else
    EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID = EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID;
    EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID = EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID;
  end

   /* Initialize EK0EM001 map criteria*/

  EK0EM001.EK0EM-S1-CU-CO-ID = 0;
  EK0EM001.EK0EM-S1-CU-STOR-ID = 0;
  EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF = 0;
  EK0EM001.EK0EM-S1-XGP-GPC-CD = " ";
  EK0EM001.EK0EM-S1-CL-ESC-ACT-CD = " ";
  EK0EM001.EK0EM-S1-CL-CLXCP-IND = " ";
  EK0EM001.EK0EM-S1-TOT-CLAIM-AMT = 0;
  EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD = " ";
  EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 = " ";
  EK0EM001.EK0EM-S1-DAYS-FROM = 0;
  EK0EM001.EK0EM-S1-DAYS-TO = 0;
  EK0EM001.EK0EM-S1-ESC-DAYS-FL = " ";
  EK0EM001.EK0EM-S1-STAT-DAYS-FL = " ";
  EK0EM001.EK0EM-S1-CL-CLM-NBR = 0;
  EK0EM001.EK0EM-S1-LINE-COUNT = 0;
  EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD = " ";
  EK0EM001.EK0EM-S1-YRC-RT-CSE-CD = " ";
  EK0EM001.EK0EM-S1-SM-SREP-ID = 0;
  EK0EM001.EK0EM-S1-SM-SAGCY-ID = " ";
  EK0EM001.EK0EM-S1-IV-IVC-ID = 0;
  EK0EM001.EK0EM-S1-OP-CUST-PO = " ";
  EK0EM001.EK0EM-S1-YPS-PODPOS-STAT-CD = " ";
  EK0EM001.EK0EM-S1-CL-EST-CLM-VAL = 0;
  EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID = " ";
  EK0EM001.EK0EM-S1-XWH-WHSE-CD = " ";
  EK0EM001.EK0EM-S1-TF-CARR-CD = " ";
  EK0EM001.EK0EM-S1-TF-PRO-NBR = " ";

  set EK0EM001.EK0EM-S1-CU-CO-ID initialAttributes;
  set EK0EM001.EK0EM-S1-CU-STOR-ID initialAttributes;
  set EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF initialAttributes;
  set EK0EM001.EK0EM-S1-XGP-GPC-CD initialAttributes;
  set EK0EM001.EK0EM-S1-CL-ESC-ACT-CD initialAttributes;
  set EK0EM001.EK0EM-S1-CL-CLXCP-IND initialAttributes;
  set EK0EM001.EK0EM-S1-TOT-CLAIM-AMT initialAttributes;
  set EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD initialAttributes;
  set EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 initialAttributes;
  set EK0EM001.EK0EM-S1-DAYS-FROM initialAttributes;
  set EK0EM001.EK0EM-S1-DAYS-TO initialAttributes;
  set EK0EM001.EK0EM-S1-ESC-DAYS-FL initialAttributes;
  set EK0EM001.EK0EM-S1-STAT-DAYS-FL initialAttributes;
  set EK0EM001.EK0EM-S1-CL-CLM-NBR initialAttributes;
  set EK0EM001.EK0EM-S1-LINE-COUNT initialAttributes;
  set EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD initialAttributes;
  set EK0EM001.EK0EM-S1-YRC-RT-CSE-CD initialAttributes;
  set EK0EM001.EK0EM-S1-SM-SREP-ID initialAttributes;
  set EK0EM001.EK0EM-S1-SM-SAGCY-ID initialAttributes;
  set EK0EM001.EK0EM-S1-IV-IVC-ID initialAttributes;
  set EK0EM001.EK0EM-S1-OP-CUST-PO initialAttributes;
  set EK0EM001.EK0EM-S1-YPS-PODPOS-STAT-CD initialAttributes;
  set EK0EM001.EK0EM-S1-CL-EST-CLM-VAL initialAttributes;
  set EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID initialAttributes;
  set EK0EM001.EK0EM-S1-XWH-WHSE-CD initialAttributes;
  set EK0EM001.EK0EM-S1-TF-CARR-CD initialAttributes;
  set EK0EM001.EK0EM-S1-TF-PRO-NBR initialAttributes;


   /* Initialize EK0EM002 map criteria*/

  EK0EM002.EK0EM-S2-CU-CO-ID = 0;
  EK0EM002.EK0EM-S2-CU-STOR-ID = 0;
  EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF = 0;
  EK0EM002.EK0EM-S2-XGP-GPC-CD = " ";
  EK0EM002.EK0EM-S2-CL-ESC-ACT-CD = " ";
  EK0EM002.EK0EM-S2-CL-CLXCP-IND = " ";
  EK0EM002.EK0EM-S2-TOT-CLAIM-AMT = 0;
  EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD = " ";
  EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 = " ";
  EK0EM002.EK0EM-S2-DAYS-FROM = 0;
  EK0EM002.EK0EM-S2-DAYS-TO = 0;
  EK0EM002.EK0EM-S2-ESC-DAYS-FL = " ";
  EK0EM002.EK0EM-S2-STAT-DAYS-FL = " ";
  EK0EM002.EK0EM-S2-CL-CLM-NBR = 0;
  EK0EM002.EK0EM-S2-LINE-COUNT = 0;
  EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD = " ";
  EK0EM002.EK0EM-S2-YRC-RT-CSE-CD = " ";
  EK0EM002.EK0EM-S2-SM-SREP-ID = 0;
  EK0EM002.EK0EM-S2-SM-SAGCY-ID = " ";
  EK0EM002.EK0EM-S2-IV-IVC-ID = 0;
  EK0EM002.EK0EM-S2-OP-CUST-PO = " ";
  EK0EM002.EK0EM-S2-YPS-PODPOS-STAT-CD = " ";
  EK0EM002.EK0EM-S2-CL-EST-CLM-VAL = 0;
  EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID = " ";
  EK0EM002.EK0EM-S2-XWH-WHSE-CD = " ";
  EK0EM002.EK0EM-S2-TF-CARR-CD = " ";
  EK0EM002.EK0EM-S2-TF-PRO-NBR = " ";

  set EK0EM002.EK0EM-S2-CU-CO-ID initialAttributes;
  set EK0EM002.EK0EM-S2-CU-STOR-ID initialAttributes;
  set EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF initialAttributes;
  set EK0EM002.EK0EM-S2-XGP-GPC-CD initialAttributes;
  set EK0EM002.EK0EM-S2-CL-ESC-ACT-CD initialAttributes;
  set EK0EM002.EK0EM-S2-CL-CLXCP-IND initialAttributes;
  set EK0EM002.EK0EM-S2-TOT-CLAIM-AMT initialAttributes;
  set EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD initialAttributes;
  set EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 initialAttributes;
  set EK0EM002.EK0EM-S2-DAYS-FROM initialAttributes;
  set EK0EM002.EK0EM-S2-DAYS-TO initialAttributes;
  set EK0EM002.EK0EM-S2-ESC-DAYS-FL initialAttributes;
  set EK0EM002.EK0EM-S2-STAT-DAYS-FL initialAttributes;
  set EK0EM002.EK0EM-S2-CL-CLM-NBR initialAttributes;
  set EK0EM002.EK0EM-S2-LINE-COUNT initialAttributes;
  set EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD initialAttributes;
  set EK0EM002.EK0EM-S2-YRC-RT-CSE-CD initialAttributes;
  set EK0EM002.EK0EM-S2-SM-SREP-ID initialAttributes;
  set EK0EM002.EK0EM-S2-SM-SAGCY-ID initialAttributes;
  set EK0EM002.EK0EM-S2-IV-IVC-ID initialAttributes;
  set EK0EM002.EK0EM-S2-OP-CUST-PO initialAttributes;
  set EK0EM002.EK0EM-S2-YPS-PODPOS-STAT-CD initialAttributes;
  set EK0EM002.EK0EM-S2-CL-EST-CLM-VAL initialAttributes;
  set EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID initialAttributes;
  set EK0EM002.EK0EM-S2-XWH-WHSE-CD initialAttributes;
  set EK0EM002.EK0EM-S2-TF-CARR-CD initialAttributes;
  set EK0EM002.EK0EM-S2-TF-PRO-NBR initialAttributes;

   /* Initialize EK0EM001 detail fields*/

  EK0EW00.EK0EW-SCR-IDX = 1; /* Init screen index*/

  while (EK0EW00.EK0EW-SCR-IDX <= EK0EW00.EK0EW-SCR-LINES)

    EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] = " ";
    EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] = " ";
    EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] = 0;
    EK0EM001.EK0EM-CU-STOR-ID[EK0EW-SCR-IDX] = 0;
    EK0EM001.EK0EM-XNX-DEPT-ID-XREF[EK0EW-SCR-IDX] = 0;
    EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] = " ";
    EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] = 0;
    EK0EM001.EK0EM-CL-EST-CLM-VAL[EK0EW-SCR-IDX] = 0;
    EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] = " ";
    EK0EM001.EK0EM-CL-CLM-STAT-DT[EK0EW-SCR-IDX] = 0;
    EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] = " ";
    EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] = " ";
    EK0EM001.EK0EM-YRC-RT-CSE-CD[EK0EW-SCR-IDX] = " ";
    EK0EM001.EK0EM-SM-SAGCY-ID[EK0EW-SCR-IDX] = " ";
    EK0EM001.EK0EM-SM-SREP-ID[EK0EW-SCR-IDX] = 0;
    EK0EM001.EK0EM-CALC-ESC-STAT-DAYS[EK0EW-SCR-IDX] = 0;

    set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CU-STOR-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-XNX-DEPT-ID-XREF[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CL-EST-CLM-VAL[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CL-CLM-STAT-DT[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-YRC-RT-CSE-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-SM-SAGCY-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-SM-SREP-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CALC-ESC-STAT-DAYS[EK0EW-SCR-IDX] initialAttributes;

    EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-IDX + 1;
  end


   /* Initialize EK0EM002 detail fields*/

  EK0EW00.EK0EW-SCR-IDX = 1; /* Init screen index*/

  while (EK0EW00.EK0EW-SCR-IDX <= EK0EW00.EK0EW-SCR-LINES)

    EK0EM002.EK0EM-OP-CUST-PO[EK0EW-SCR-IDX] = " ";
    EK0EM002.EK0EM-IV-IVC-ID[EK0EW-SCR-IDX] = 0;
    EK0EM002.EK0EM-ADDL-IVC-FLAG[EK0EW-SCR-IDX] = " ";
    EK0EM002.EK0EM-SR-SHP-DT[EK0EW-SCR-IDX] = 0;
    EK0EM002.EK0EM-TF-CARR-CD[EK0EW-SCR-IDX] = " ";
    EK0EM002.EK0EM-XWH-WHSE-CD[EK0EW-SCR-IDX] = " ";
    EK0EM002.EK0EM-XSO-SLS-OFC-ID[EK0EW-SCR-IDX] = " ";
    EK0EM002.EK0EM-CL-CLXCP-IND[EK0EW-SCR-IDX] = " ";
    EK0EM002.EK0EM-CL-RTN-FL[EK0EW-SCR-IDX] = " ";
    EK0EM002.EK0EM-YCI-INSP-STAT-CD[EK0EW-SCR-IDX] = " ";
    EK0EM002.EK0EM-CL-TOT-CLM-QTY[EK0EW-SCR-IDX] = 0;
    EK0EM002.EK0EM-TF-PRO-NBR[EK0EW-SCR-IDX] = " ";
    EK0EM002.EK0EM-CALC-RSLV-DAYS[EK0EW-SCR-IDX] = 0;

    set EK0EM002.EK0EM-OP-CUST-PO[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-IV-IVC-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-ADDL-IVC-FLAG[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-SR-SHP-DT[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-TF-CARR-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-XWH-WHSE-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-XSO-SLS-OFC-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-CL-CLXCP-IND[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-CL-RTN-FL[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-YCI-INSP-STAT-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-CL-TOT-CLM-QTY[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-TF-PRO-NBR[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-CALC-RSLV-DAYS[EK0EW-SCR-IDX] initialAttributes;

    EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-IDX + 1;
  end

   /* **************************************************************/
                     /* END  EK0E1000*/
   /* **************************************************************/
end // end EK0E1000

// Main process to display a map
Function EK0E1100()
   /* ******************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G            **/
   /* ******************************************************************/
   /* DATE    PGMR    DESCRIPTION                                  **/
   /* ******************************************************************/
   /* 03-16-99  GDECKE  ALLOW CONSUMERS SUPER USER TO DO DELETES     **/
   /* OF ESCALATIONS ON CLAIMS WITH 'OPEN' STATUS. **/
   /* ******************************************************************/
   /*  */
   /* This process will initialize the work record EK0EW00*/
   /*  */

  EK0EW00.EK0EW-SCR-LINES = 13;
  EK0EW00.EK0EW-SCREEN-NAME = "EK0EM001";
  EK0EW00.EK0EW-ALLOW-ACCESS-FL = "Y";


  EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID = COMMAREA.CAUSERID;
   /* ****************************************************************/
   /* ****************************************************************/
   /* Get Resolver's SUPER USER ROW, IF ONE EXISTS, SAVE SUPER-USER*/
   /* FLAG FOR USE LATER TO ALLOW DELETE OF ESCALATION ON OPEN CLAIM.*/
   /* THIS DELETE ABILITY WILL BE ALLOWED ONLY FOR SALES OFFICE 21*/
   /* SUPER USER.*/

  set VCLRES01 empty;

  VCLRES01.XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;

  EK0EW00.EK0EW-T-CL-SPR-USER-FL = " ";
  EK0ES-VCLRES01-S2(); /* Decl/Open VCLRES01 cursor 2*/

  if (SQLCA.VAGen_SQLCODE == 0)

    while (SQLCA.VAGen_SQLCODE == 0
     && EK0EW00.EK0EW-T-CL-SPR-USER-FL == " ")
      EK0ES-VCLRES01-N2(); /* Fetch VCLRES01 cursor 2*/
      if (SQLCA.VAGen_SQLCODE == 0
       && VCLRES01.CL-SPR-USER-FL == "S")
        EK0EW00.EK0EW-T-CL-SPR-USER-FL = VCLRES01.CL-SPR-USER-FL;
      end
    end

  end

  EK0ES-VCLRES01-C2(); /* Close VCLRES01 cursor 2*/

   /* ****************************************************************/
   /* ****************************************************************/
   /* Get Resolver's DISTRIBUTION ROW HAVING SALES OFFICE ID = 21*/
   /* IF ONE EXISTS. SAVE SALES OFFICE ID. ONLY DO THIS IF SUPER*/
   /* USER FLAG FROM ABOVE SEARCH WAS 'S'.*/

  set VCLDIS01 empty;


  EK0EW00.EK0EW-T-XSO-SLS-OFC-ID = "  ";
  if (EK0EW00.EK0EW-T-CL-SPR-USER-FL == "S")
    EK0ES-VCLDIS01-S1(); /* Decl/Open VCLRES01 cursor 2*/

    if (SQLCA.VAGen_SQLCODE == 0)

      while (SQLCA.VAGen_SQLCODE == 0
       && EK0EW00.EK0EW-T-XSO-SLS-OFC-ID == "  ")
        EK0ES-VCLDIS01-N1(); /* Fetch VCLRES01 cursor 2*/
        if (SQLCA.VAGen_SQLCODE == 0
         && VCLDIS01.XSO-SLS-OFC-ID == "21"
         && VCLDIS01.CL-CR-ANLS-USER-ID == COMMAREA.CAUSERID)
          EK0EW00.EK0EW-T-XSO-SLS-OFC-ID = VCLDIS01.XSO-SLS-OFC-ID;
        end
      end

    end

    EK0ES-VCLDIS01-C1(); /* Close VCLRES01 cursor 2*/

  end

   /* ****************************************************************/
   /* ****************************************************************/
   /* Get Resolver's profile*/

  set VCLRES01 empty;

  VCLRES01.CL-CR-ANLS-USER-ID = COMMAREA.CAUSERID;

  EK0ES-VCLRES01-S3(); /* Decl/Open VCLRES01 cursor 3*/

  if (SQLCA.VAGen_SQLCODE == 0)

    EK0ES-VCLRES01-N3(); /* Fetch VCLRES01 cursor 3*/

    if (SQLCA.VAGen_SQLCODE == 0)
      EK0EW00.EK0EW-U-XXX-SCRTY-USER-ID = VCLRES01.XXX-SCRTY-USER-ID;
      EK0EW00.EK0EW-U-CL-ESC-USER-ID1 = VCLRES01.CL-ESC-USER-ID1;
      EK0EW00.EK0EW-U-CL-ESC-USER-ID2 = VCLRES01.CL-ESC-USER-ID2;
      EK0EW00.EK0EW-U-XND-NIKE-DEPT-ID = VCLRES01.XND-NIKE-DEPT-ID;
      EK0EW00.EK0EW-ALLOW-ACCESS-FL = "Y";
    else
      EK0EW00.EK0EW-ALLOW-ACCESS-FL = "N";
    end
  end

  EK0ES-VCLRES01-C3(); /* Close VCLRES01 cursor 3*/


   /* Initialize EK0EM001 map criteria*/

  EK0EW00.EK0EW-S-CU-CO-ID = 0;
  EK0EW00.EK0EW-S-CU-STOR-ID = 0;
  EK0EW00.EK0EW-S-XNX-DEPT-ID-XREF = 0;
  EK0EW00.EK0EW-S-XGP-GPC-CD = " ";
  EK0EW00.EK0EW-S-CL-ESC-ACT-CD = " ";
  EK0EW00.EK0EW-S-CL-CLXCP-IND = " ";
  EK0EW00.EK0EW-S-TOT-CLAIM-AMT = 0;
  EK0EW00.EK0EW-S-YCT-CLM-TYP-CD = " ";
  EK0EW00.EK0EW-S-YCS-CLM-STAT-CD1 = " ";
  EK0EW00.EK0EW-S-DAYS-FROM = 0;
  EK0EW00.EK0EW-S-DAYS-TO = 0;
  EK0EW00.EK0EW-S-ESC-DAYS-FL = " ";
  EK0EW00.EK0EW-S-STAT-DAYS-FL = " ";
  EK0EW00.EK0EW-S-CL-CLM-NBR = 0;
  EK0EW00.EK0EW-S-LINE-COUNT = 0;
  EK0EW00.EK0EW-S-YCR-CLM-RSN-CD = " ";
  EK0EW00.EK0EW-S-YRC-RT-CSE-CD = " ";
  EK0EW00.EK0EW-S-SM-SREP-ID = 0;
  EK0EW00.EK0EW-S-SM-SAGCY-ID = " ";
  EK0EW00.EK0EW-S-IV-IVC-ID = 0;
  EK0EW00.EK0EW-S-OP-CUST-PO = " ";
  EK0EW00.EK0EW-S-YPS-PODPOS-STAT-CD = " ";
  EK0EW00.EK0EW-S-CL-EST-CLM-VAL = 0;
  EK0EW00.EK0EW-S-XSO-SLS-OFC-ID = " ";
  EK0EW00.EK0EW-S-XWH-WHSE-CD = " ";
  EK0EW00.EK0EW-S-TF-CARR-CD = " ";
  EK0EW00.EK0EW-S-TF-PRO-NBR = " ";

  EK0EW00.EK0EW-SCR-IDX = 1; /* Init screen index*/

  EK0EW00.EK0EW-COL-FUNC = " ";
  EK0EW00.EK0EW-CL-ESC-ACT-CD = " ";
  EK0EW00.EK0EW-CU-CO-ID = 0;
  EK0EW00.EK0EW-CU-STOR-ID = 0;
  EK0EW00.EK0EW-XNX-DEPT-ID-XREF = 0;
  EK0EW00.EK0EW-XGP-GPC-CD = " ";
  EK0EW00.EK0EW-CL-CLM-NBR = 0;
  EK0EW00.EK0EW-CL-EST-CLM-VAL = 0;
  EK0EW00.EK0EW-YCS-CLM-STAT-CD1 = " ";
  EK0EW00.EK0EW-CL-CLM-STAT-DT = 0;
  EK0EW00.EK0EW-YCT-CLM-TYP-CD = " ";
  EK0EW00.EK0EW-YCR-CLM-RSN-CD = " ";
  EK0EW00.EK0EW-YRC-RT-CSE-CD = " ";
  EK0EW00.EK0EW-SM-SAGCY-ID = " ";
  EK0EW00.EK0EW-SM-SREP-ID = 0;
  EK0EW00.EK0EW-CALC-ESC-STAT-DAYS = 0;

   /* **************************************************************/
                     /* END  EK0E1100*/
   /* **************************************************************/
end // end EK0E1100

// Load Temp storage
Function EK0E2000()
   /* **********************************************************************/
   /* Modification History                                  **/
   /* Date     Userid    Description                                  **/
   /* ----------  ------  ---------------------------------------------- **/
   /* 09-10-1998  HMACAL  Checked if EK0EW-SV-CURR-PAGE would be greater **/
   /* than the "real" maximum number of pages, and   **/
   /* if so, set the value to equal EK0EW-MAX-PAGE.  **/
   /* This will prevent the abend when the last page **/
   /* prior to returing to this screen would no      **/
   /* longer be part of the updated selection list.  **/
   /* 04-12-2000  RRAJAG  Initialized EK0EW-SV-CURR-PAGE to 0 when       **/
   /* no value has been passed by the calling        **/
   /* applications.(Done to fix ASRA abend).         **/
   /* **********************************************************************/
   /*  */
   /* Load all the claims to be processed by the Resolver Id entered*/
   /*  */
  EK0EW00.EK0EW-MAX-PAGE = 0;
  EK0EW00.EK0EW-MAX-RCD = 0;
  EK0EW00.EK0EW-S-TOT-CLAIM-AMT = 0;
  EK0EW00.EK0EW-S-LINE-COUNT = 0;

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE";

  EK0ES-CALL-TA0040(); /* Date Routine*/

  if (TA2REC.TA2RTNCD == 0)
    EK0EW00.ZZ-SDT = TA2REC.TA2GRGGN;
    EK0EW00.ZZ-SETUP-HHMM = TA2REC.TA2TIMHM;
    EK0EW00.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
    EK0EW00.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;
  end

  set EK0EW02 empty;
  set TA5REC empty;

  TA5REC.TA5APPID = "EK0E"; /* Application*/

  EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

   /* If No Search criteria is entered, no detail lines will be displayed*/

  if (EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID == " " && 
  EK0EW00.EK0EW-S-CU-CO-ID == 0 && 
  EK0EW00.EK0EW-S-CU-STOR-ID == 0 && 
  EK0EW00.EK0EW-S-XNX-DEPT-ID-XREF == 0 && 
  EK0EW00.EK0EW-S-XGP-GPC-CD == " " && 
  EK0EW00.EK0EW-S-CL-ESC-ACT-CD == " " && 
  EK0EW00.EK0EW-S-CL-CLXCP-IND == " " && 
  EK0EW00.EK0EW-S-TOT-CLAIM-AMT == 0 && 
  EK0EW00.EK0EW-S-XGP-GPC-CD == " " && 
  EK0EW00.EK0EW-S-YCT-CLM-TYP-CD == " " && 
  EK0EW00.EK0EW-S-YCS-CLM-STAT-CD1 == " " && 
  EK0EW00.EK0EW-S-DAYS-FROM == 0 && 
  EK0EW00.EK0EW-S-DAYS-TO == 0 && 
  EK0EW00.EK0EW-S-ESC-DAYS-FL == " " && 
  EK0EW00.EK0EW-S-STAT-DAYS-FL == " " && 
  EK0EW00.EK0EW-S-CL-CLM-NBR == 0 && 
  EK0EW00.EK0EW-S-LINE-COUNT == 0 && 
  EK0EW00.EK0EW-S-YCR-CLM-RSN-CD == " " && 
  EK0EW00.EK0EW-S-YRC-RT-CSE-CD == " " && 
  EK0EW00.EK0EW-S-SM-SREP-ID == 0 && 
  EK0EW00.EK0EW-S-SM-SAGCY-ID == " " && 
  EK0EW00.EK0EW-S-IV-IVC-ID == 0 && 
  EK0EW00.EK0EW-S-OP-CUST-PO == " " && 
  EK0EW00.EK0EW-S-YPS-PODPOS-STAT-CD == " " && 
  EK0EW00.EK0EW-S-CL-EST-CLM-VAL == 0 && 
  EK0EW00.EK0EW-S-XSO-SLS-OFC-ID == " " && 
  EK0EW00.EK0EW-S-XWH-WHSE-CD == " " && 
  EK0EW00.EK0EW-S-TF-CARR-CD == " " && 
  EK0EW00.EK0EW-S-TF-PRO-NBR == " ")

    return;

  end

   /* Load Search Criteria to EK0EM001 criteria fields*/

  EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID = EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID;
  EK0EM001.EK0EM-S1-CU-CO-ID = EK0EW00.EK0EW-S-CU-CO-ID;
  EK0EM001.EK0EM-S1-CU-STOR-ID = EK0EW00.EK0EW-S-CU-STOR-ID;
  EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF = EK0EW00.EK0EW-S-XNX-DEPT-ID-XREF;
  EK0EM001.EK0EM-S1-XGP-GPC-CD = EK0EW00.EK0EW-S-XGP-GPC-CD;
  EK0EM001.EK0EM-S1-CL-ESC-ACT-CD = EK0EW00.EK0EW-S-CL-ESC-ACT-CD;
  EK0EM001.EK0EM-S1-CL-CLXCP-IND = EK0EW00.EK0EW-S-CL-CLXCP-IND;
  EK0EM001.EK0EM-S1-TOT-CLAIM-AMT = EK0EW00.EK0EW-S-TOT-CLAIM-AMT;
  EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD = EK0EW00.EK0EW-S-YCT-CLM-TYP-CD;
  EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 = EK0EW00.EK0EW-S-YCS-CLM-STAT-CD1;
  EK0EM001.EK0EM-S1-DAYS-FROM = EK0EW00.EK0EW-S-DAYS-FROM;
  EK0EM001.EK0EM-S1-DAYS-TO = EK0EW00.EK0EW-S-DAYS-TO;
  EK0EM001.EK0EM-S1-ESC-DAYS-FL = EK0EW00.EK0EW-S-ESC-DAYS-FL;
  EK0EM001.EK0EM-S1-STAT-DAYS-FL = EK0EW00.EK0EW-S-STAT-DAYS-FL;
  EK0EM001.EK0EM-S1-CL-CLM-NBR = EK0EW00.EK0EW-S-CL-CLM-NBR;
  EK0EM001.EK0EM-S1-LINE-COUNT = EK0EW00.EK0EW-S-LINE-COUNT;
  EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD = EK0EW00.EK0EW-S-YCR-CLM-RSN-CD;
  EK0EM001.EK0EM-S1-YRC-RT-CSE-CD = EK0EW00.EK0EW-S-YRC-RT-CSE-CD;
  EK0EM001.EK0EM-S1-SM-SREP-ID = EK0EW00.EK0EW-S-SM-SREP-ID;
  EK0EM001.EK0EM-S1-SM-SAGCY-ID = EK0EW00.EK0EW-S-SM-SAGCY-ID;
  EK0EM001.EK0EM-S1-IV-IVC-ID = EK0EW00.EK0EW-S-IV-IVC-ID;
  EK0EM001.EK0EM-S1-OP-CUST-PO = EK0EW00.EK0EW-S-OP-CUST-PO;
  EK0EM001.EK0EM-S1-YPS-PODPOS-STAT-CD = EK0EW00.EK0EW-S-YPS-PODPOS-STAT-CD;
  EK0EM001.EK0EM-S1-CL-EST-CLM-VAL = EK0EW00.EK0EW-S-CL-EST-CLM-VAL;
  EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID = EK0EW00.EK0EW-S-XSO-SLS-OFC-ID;
  EK0EM001.EK0EM-S1-XWH-WHSE-CD = EK0EW00.EK0EW-S-XWH-WHSE-CD;
  EK0EM001.EK0EM-S1-TF-CARR-CD = EK0EW00.EK0EW-S-TF-CARR-CD;
  EK0EM001.EK0EM-S1-TF-PRO-NBR = EK0EW00.EK0EW-S-TF-PRO-NBR;

   /* Load Search Criteria to EK0EM002 criteria fields*/

  EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID = EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID;
  EK0EM002.EK0EM-S2-CU-CO-ID = EK0EW00.EK0EW-S-CU-CO-ID;
  EK0EM002.EK0EM-S2-CU-STOR-ID = EK0EW00.EK0EW-S-CU-STOR-ID;
  EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF = EK0EW00.EK0EW-S-XNX-DEPT-ID-XREF;
  EK0EM002.EK0EM-S2-XGP-GPC-CD = EK0EW00.EK0EW-S-XGP-GPC-CD;
  EK0EM002.EK0EM-S2-CL-ESC-ACT-CD = EK0EW00.EK0EW-S-CL-ESC-ACT-CD;
  EK0EM002.EK0EM-S2-CL-CLXCP-IND = EK0EW00.EK0EW-S-CL-CLXCP-IND;
  EK0EM002.EK0EM-S2-TOT-CLAIM-AMT = EK0EW00.EK0EW-S-TOT-CLAIM-AMT;
  EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD = EK0EW00.EK0EW-S-YCT-CLM-TYP-CD;
  EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 = EK0EW00.EK0EW-S-YCS-CLM-STAT-CD1;
  EK0EM002.EK0EM-S2-DAYS-FROM = EK0EW00.EK0EW-S-DAYS-FROM;
  EK0EM002.EK0EM-S2-DAYS-TO = EK0EW00.EK0EW-S-DAYS-TO;
  EK0EM002.EK0EM-S2-ESC-DAYS-FL = EK0EW00.EK0EW-S-ESC-DAYS-FL;
  EK0EM002.EK0EM-S2-STAT-DAYS-FL = EK0EW00.EK0EW-S-STAT-DAYS-FL;
  EK0EM002.EK0EM-S2-CL-CLM-NBR = EK0EW00.EK0EW-S-CL-CLM-NBR;
  EK0EM002.EK0EM-S2-LINE-COUNT = EK0EW00.EK0EW-S-LINE-COUNT;
  EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD = EK0EW00.EK0EW-S-YCR-CLM-RSN-CD;
  EK0EM002.EK0EM-S2-YRC-RT-CSE-CD = EK0EW00.EK0EW-S-YRC-RT-CSE-CD;
  EK0EM002.EK0EM-S2-SM-SREP-ID = EK0EW00.EK0EW-S-SM-SREP-ID;
  EK0EM002.EK0EM-S2-SM-SAGCY-ID = EK0EW00.EK0EW-S-SM-SAGCY-ID;
  EK0EM002.EK0EM-S2-IV-IVC-ID = EK0EW00.EK0EW-S-IV-IVC-ID;
  EK0EM002.EK0EM-S2-OP-CUST-PO = EK0EW00.EK0EW-S-OP-CUST-PO;
  EK0EM002.EK0EM-S2-YPS-PODPOS-STAT-CD = EK0EW00.EK0EW-S-YPS-PODPOS-STAT-CD;
  EK0EM002.EK0EM-S2-CL-EST-CLM-VAL = EK0EW00.EK0EW-S-CL-EST-CLM-VAL;
  EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID = EK0EW00.EK0EW-S-XSO-SLS-OFC-ID;
  EK0EM002.EK0EM-S2-XWH-WHSE-CD = EK0EW00.EK0EW-S-XWH-WHSE-CD;
  EK0EM002.EK0EM-S2-TF-CARR-CD = EK0EW00.EK0EW-S-TF-CARR-CD;
  EK0EM002.EK0EM-S2-TF-PRO-NBR = EK0EW00.EK0EW-S-TF-PRO-NBR;


   /* Get all claims assigned to Resolver Id*/
   /* Note: At this point, using EK0EM001 criteria will work the same*/
   /* : as for EK0EM002*/


  EK0EW02.EK0EW-W02-IDX = 1;

  set VCLESX01 empty;

  VCLESX01.CL-RSLV-USER-ID = EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID;

  EK0ES-VCLESX01-S2(); /* Declare/Open VCLESX01 cursor 2*/

  while (SQLCA.VAGen_SQLCODE == 0)

    EK0ES-VCLESX01-N2(); /* Fetch Next VCLESX01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)

      EK0E2050(); /* Screen VCLESX01 row*/

      if (EK0EW00.EK0EW-PRE-SELECT-FL == "Y") /* Passed initial screen*/

        EK0E2100(); /* Get associated Claim Info*/
                                  /* and continue with verification*/
        SQLCA.VAGen_SQLCODE = 0;

      end

    else /* End of the loop*/
      if (EK0EW02.CU-CO-ID[1] > 0) /* TSQ not empty*/

        EK0EW01.EK0EW-TEMP-ITEM = EK0EW02.EK0EW-TEMP-ITEM;
        TA5REC.TA5FNCCD = "A";

        EK0ES-CALL-TA0050(); /* Write previous to queue*/

        set EK0EW02 empty; /* Clear record*/

        EK0EW00.EK0EW-MAX-PAGE = EK0EW00.EK0EW-MAX-PAGE + 1;
      end
    end
  end

  EK0ES-VCLESX01-C2(); /* Close VCLESX01 cursor 2*/


   /* If max page is zero, no data was returned*/

  if (EK0EW00.EK0EW-MAX-PAGE == 0)
    EK0EW00.EK0EW-CURR-PAGE = 0;
    converseLib.validationFailed(350); /* No data found*/
  end

   /* TCS Change Begin - 04/12/2000*/
  if (EKWREC.EKWREC-GROUP == " ")
    EK0EW00.EK0EW-SV-CURR-PAGE = 0;
  end
   /* TCS Change End   - 04/12/2000*/

  if (EK0EW00.EK0EW-SV-CURR-PAGE > 0)
     /*  */
     /* 09-10-1998 - HMACAL - added check to prevent abend on rebuilding*/
     /* the last known page before the transfer*/
     /*  */
    if (EK0EW00.EK0EW-SV-CURR-PAGE > EK0EW00.EK0EW-MAX-PAGE)
      EK0EW00.EK0EW-CURR-PAGE = EK0EW00.EK0EW-MAX-PAGE;
    else
      EK0EW00.EK0EW-CURR-PAGE = EK0EW00.EK0EW-SV-CURR-PAGE;
    end
  else

    EK0EW00.EK0EW-CURR-PAGE = 001;
  end

  EK0EW00.EK0EW-CURR-RCD = 001;

  set EK0EW02 empty;

   /* **************************************************************/
                     /* END  EK0E2000*/
   /* **************************************************************/
end // end EK0E2000

// Screen VCLESX01 row
Function EK0E2050()
   /* **********************************************************************/
   /* Modification History                                         **/
   /* Date     Userid      Description                                **/
   /* ----------  ------  ---------------------------------------------- **/
   /* 06-30-1998  HMACAL  Modified to only display claims that are       **/
   /* currently being researched on by the current   **/
   /* resolver, when 'R' is specified on the 'F'     **/
   /* search criteria .                              **/
   /* **********************************************************************/
   /*  */
   /* Initial verification of VCLESX01 row before further processing;*/
   /* This process group will compare the values on certain fields*/
   /* against any entered criteria*/
   /*  */

  EK0EW00.EK0EW-PRE-SELECT-FL = "Y";

   /*  */
   /* Select ONLY claims that are currently or were previously*/
   /* assigned to the Resolver, that are yet completed*/
   /*  */
  if (VCLESX01.CL-COMP-FL != "R" && 
  VCLESX01.CL-COMP-FL != "Y")
    EK0EW00.EK0EW-PRE-SELECT-FL = "N";
    return;
  end

   /*  */
   /* Select ONLY claims that have Activity Code as in the criteria*/
   /* If criteria activity code is 'R', select only current claims*/
   /* (CL-COMP-FL = 'R')*/
   /*  */
  if (EK0EM001.EK0EM-S1-CL-ESC-ACT-CD > " ")
    if (EK0EM001.EK0EM-S1-CL-ESC-ACT-CD == "R")
      if (VCLESX01.CL-COMP-FL == "Y")
        EK0EW00.EK0EW-PRE-SELECT-FL = "N";
        return;
      end
    end
    if (VCLESX01.CL-ESC-ACT-CD != EK0EM001.EK0EM-S1-CL-ESC-ACT-CD)
      EK0EW00.EK0EW-PRE-SELECT-FL = "N";
      return;
    end
  end

   /*  */
   /* Select ONLY claims that were specified on the criteria, if any*/
   /*  */
  if (EK0EM001.EK0EM-S1-CL-CLM-NBR > 0)
    if (VCLESX01.CL-CLM-NBR != EK0EM001.EK0EM-S1-CL-CLM-NBR)
      EK0EW00.EK0EW-PRE-SELECT-FL = "N";
      return;
    end
  end

   /*  */
   /* Do not select claims that have been reassigned when Escalation*/
   /* Days range criteria are specified*/
   /*  */
  if (EK0EM001.EK0EM-S1-ESC-DAYS-FL == "Y" && 
  (EK0EM001.EK0EM-S1-DAYS-FROM > 0 || 
  EK0EM001.EK0EM-S1-DAYS-TO > 0))
    if (VCLESX01.CL-COMP-FL == "Y")
      EK0EW00.EK0EW-PRE-SELECT-FL = "N";
      return;
    end
  end
end // end EK0E2050

// Get related Claim Information
Function EK0E2100()
   /*  */
   /* Retrieve the related Claim information;*/
   /* Perform process to select only rows satisfying the Search Criteria;*/
   /* Load into work record in temporary storage*/
   /*  */

  EK0EW00.EK0EW-IO-ERROR-FL = "N";

   /* Get Claim Header Information*/

  set VCLHDR02 empty; /* DCLAIM.VCLHDR02 record*/

  VCLHDR02.CLACLMNB = VCLESX01.CL-CLM-NBR;

  EK0ES-VCLHDR02-S(); /* Select Unique VCLHDR02 row*/

  if (SQLCA.VAGen_SQLCODE != 0)
    EK0EW00.EK0EW-IO-ERROR-FL = "Y";
    return;
  end

   /* Get Invoice Header Information*/

  set VIVHDR04 empty; /* DINVC.VIVHDR04 record*/

  VIVHDR04.IV0IVCID = VCLHDR02.IV0IVCID;

  EK0ES-VIVHDR04-S(); /* Select Unique VIVHDR04 row*/


   /* Get Claim Traffic Information*/

  set CLEREC empty; /* DCLAIM.VCLTRF01 record*/

  CLEREC.CLACLMNB = VCLESX01.CL-CLM-NBR;

  EK0ES-VCLTRF01-S(); /* Select Unique VCLTRF01 row*/


   /* Get Claim Returns Inspection Information*/

  set CL2REC empty; /* DCLAIM.VRINSP01 record*/

  CL2REC.CLACLMNB = VCLHDR02.CLACLMNB; /* Claim Number*/
  CL2REC.CL2ISNBR = VCLHDR02.CLACISNB; /* Claim Inspection Nbr*/

  EK0ES-VRINSP01-S(); /* Select Unique VRINSP01 row*/

   /*  */
   /* Verify that the claim row meets the selection criteria, if any.*/
   /*  */

  EK0E2200(); /* Determine if row is to be accepted*/

   /*  */
   /* Load Claim information into work record and temporary storage*/
   /*  */
  if (EK0EW00.EK0EW-BYPASS-FL == "N")

    if (EK0EW02.EK0EW-W02-IDX > EK0EW00.EK0EW-SCR-LINES)
      EK0EW01.EK0EW-TEMP-ITEM = EK0EW02.EK0EW-TEMP-ITEM;
      TA5REC.TA5FNCCD = "A";

      EK0ES-CALL-TA0050(); /* Write previous to queue*/

      set EK0EW02 empty; /* Clear record*/

      EK0EW02.EK0EW-W02-IDX = 1;

      EK0EW00.EK0EW-MAX-PAGE = EK0EW00.EK0EW-MAX-PAGE + 1;
    end

    EK0EW02.CL-ESC-ACT-CD[EK0EW-W02-IDX] = VCLESX01.CL-ESC-ACT-CD;
    EK0EW02.CL-RSLV-BDT[EK0EW-W02-IDX] = VCLESX01.CL-RSLV-BDT;
    EK0EW02.CL-RSLV-TDT[EK0EW-W02-IDX] = VCLESX01.CL-RSLV-TDT;
    EK0EW02.CL-COMP-FL[EK0EW-W02-IDX] = VCLESX01.CL-COMP-FL;
    EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] = VCLESX01.CL-RSLV-CD;
    EK0EW02.CU-CO-ID[EK0EW-W02-IDX] = VCLHDR02.KUCCOID;
    EK0EW02.CU-STOR-ID[EK0EW-W02-IDX] = VCLHDR02.KUMSTRID;
    EK0EW02.XNX-DEPT-ID-XREF[EK0EW-W02-IDX] = VCLHDR02.XNXCD;
    EK0EW02.XGP-GPC-CD[EK0EW-W02-IDX] = VCLHDR02.XGPCD;
    EK0EW02.CL-CLM-NBR[EK0EW-W02-IDX] = VCLHDR02.CLACLMNB;
    EK0EW02.CL-EST-CLM-VAL[EK0EW-W02-IDX] = VCLHDR02.CLAESTVL;

    EK0EW02.SM-SREP-ID[EK0EW-W02-IDX] = VCLHDR02.SM4REPID;
    EK0EW02.SM-SAGCY-ID[EK0EW-W02-IDX] = VCLHDR02.SM1AGYID;

    if (VCLHDR02.IV0IVCID > 0)
      EK0ES-CALL-KU1350();
    end

    if (VCLHDR02.YCSCD1 == "POD")
      if (CLEREC.YPSCD > " ") /* Use PODPOS Status Code*/
        EK0EW02.YCS-CLM-STAT-CD1[EK0EW-W02-IDX] = CLEREC.YPSCD;
      else /* Display POD Claim Status*/
        EK0EW02.YCS-CLM-STAT-CD1[EK0EW-W02-IDX] = VCLHDR02.YCSCD1;
      end
    else
      EK0EW02.YCS-CLM-STAT-CD1[EK0EW-W02-IDX] = VCLHDR02.YCSCD1;
    end

    EK0EW02.CL-CLM-STAT-DT[EK0EW-W02-IDX] = VCLHDR02.CLASTTDT;
    EK0EW02.YCT-CLM-TYP-CD[EK0EW-W02-IDX] = VCLHDR02.YCTCD;
    EK0EW02.YCR-CLM-RSN-CD[EK0EW-W02-IDX] = VCLHDR02.YCRCD;
    EK0EW02.YRC-RT-CSE-CD[EK0EW-W02-IDX] = VCLHDR02.YRC-RT-CSE-CD;

    EK0EW02.CL-CLXCP-IND[EK0EW-W02-IDX] = VCLHDR02.CLAXCIND;

    EK0ES-CLC-ESC-DAYS();

    if (EK0EW00.EK0EW-CALC-RANGE-DAYS > 99)
      EK0EW02.EK0EW-CALC-ESC-STAT-DAYS[EK0EW-W02-IDX] = 99;
    else
      EK0EW02.EK0EW-CALC-ESC-STAT-DAYS[EK0EW-W02-IDX] = EK0EW00.EK0EW-CALC-RANGE-DAYS;
    end

    EK0EW02.OP-CUST-PO[EK0EW-W02-IDX] = VCLHDR02.OP1CUPO;
    EK0EW02.IV-IVC-ID[EK0EW-W02-IDX] = VCLHDR02.IV0IVCID;

    EK0ES-COUNT-IVC(); /* Count Invoices*/

    EK0EW02.EK0EW-ADDL-IVC-FLAG[EK0EW-W02-IDX] = EK0EW00.EK0EW-ADDL-IVC-FLAG;

    EK0EW02.SR-SHP-DT[EK0EW-W02-IDX] = VIVHDR04.SR1SHPDT;
    EK0EW02.TF-CARR-CD[EK0EW-W02-IDX] = VIVHDR04.TF1CARCD;
    EK0EW02.XWH-WHSE-CD[EK0EW-W02-IDX] = VCLHDR02.XWHCD;
    EK0EW02.XSO-SLS-OFC-ID[EK0EW-W02-IDX] = VCLHDR02.XSOCD;

    if (VCLHDR02.CLACRTNB > 0)
      EK0EW02.CL-RTN-FL[EK0EW-W02-IDX] = "Y";
    else
      EK0EW02.CL-RTN-FL[EK0EW-W02-IDX] = "N";
    end

    EK0EW02.YCI-INSP-STAT-CD[EK0EW-W02-IDX] = CL2REC.YCICD;

    if (VCLHDR02.CLATQTY > 9999 || 
    VCLHDR02.CLATQTY < -9999)
      EK0EW02.CL-TOT-CLM-QTY[EK0EW-W02-IDX] = 9999;
    else
      EK0EW02.CL-TOT-CLM-QTY[EK0EW-W02-IDX] = VCLHDR02.CLATQTY;
    end

    EK0EW02.TF-PRO-NBR[EK0EW-W02-IDX] = VIVHDR04.TF2PRONO;

    EK0ES-CLC-RSL-DAYS(); /* Calc Days since Orig Rslvr assigned*/

    EK0EW02.EK0EW-CALC-RSLV-DAYS[EK0EW-W02-IDX] = EK0EW00.EK0EW-CALC-RSLV-DAYS;

    EK0EW00.EK0EW-S-TOT-CLAIM-AMT = EK0EW00.EK0EW-S-TOT-CLAIM-AMT     + EK0EW02.CL-EST-CLM-VAL[EK0EW-W02-IDX];

    EK0EW00.EK0EW-S-LINE-COUNT = EK0EW00.EK0EW-S-LINE-COUNT + 1;

    EK0EW02.EK0EW-W02-IDX = EK0EW02.EK0EW-W02-IDX + 1;
    EK0EW00.EK0EW-MAX-RCD = EK0EW00.EK0EW-MAX-RCD + 1;

  end

end // end EK0E2100

// Verify Fetched row
Function EK0E2200()

   /* Determine if the record fetched will be accepted based on any*/
   /* criteria entered*/

  EK0EW00.EK0EW-BYPASS-FL = "N";


   /* Compare Customer Id*/

  if (EK0EM001.EK0EM-S1-CU-CO-ID > 0)
    if (VCLHDR02.KUCCOID == EK0EM001.EK0EM-S1-CU-CO-ID)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Store Id*/

  if (EK0EM001.EK0EM-S1-CU-STOR-ID > 0)
    if (VCLHDR02.KUMSTRID == EK0EM001.EK0EM-S1-CU-STOR-ID)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Dept Id*/

  if (EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF > 0)
    if (VCLHDR02.XNXCD == EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare GPC Code*/

  if (EK0EM001.EK0EM-S1-XGP-GPC-CD > " ")
    if (VCLHDR02.XGPCD == EK0EM001.EK0EM-S1-XGP-GPC-CD)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Claim Exception Flag*/

  if (EK0EM001.EK0EM-S1-CL-CLXCP-IND > " ")
    if (VCLHDR02.CLAXCIND == EK0EM001.EK0EM-S1-CL-CLXCP-IND)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Claim Type Code*/

  if (EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD > " ")
    if (VCLHDR02.YCTCD == EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Claim Status Code 1*/

  if (EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 > " ")
    if (VCLHDR02.YCSCD1 == EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Claim Status Days range, OR,*/
   /* Compare Claim Escalation Days range*/
   /*  */
   /* Rules: If only DAYS FROM entered, calculated days must be equal to*/
   /* OR greater than DAYS FROM value entered;*/
   /* : If only DAYS TO entered, calculated days must be equal to*/
   /* OR lesser than DAYS TO value entered;*/
   /* : If both DAYS FROM and DAYS TO entered, calculated days must*/
   /* be within the range of both DAYS FROM and DAYS TO values.*/

  if (EK0EM001.EK0EM-S1-ESC-DAYS-FL == "Y" || 
  EK0EM001.EK0EM-S1-STAT-DAYS-FL == "Y")

    EK0ES-CLC-DAYS-RNG(); /* Calculate Esc/Status Days*/

    if (EK0EM001.EK0EM-S1-DAYS-FROM > 0)
      if (EK0EW00.EK0EW-CALC-RANGE-DAYS == 
      EK0EM001.EK0EM-S1-DAYS-FROM || 
      EK0EW00.EK0EW-CALC-RANGE-DAYS > 
      EK0EM001.EK0EM-S1-DAYS-FROM)
           /* continue*/
      else
        EK0EW00.EK0EW-BYPASS-FL = "Y";
        return;
      end
    end

    if (EK0EM001.EK0EM-S1-DAYS-TO > 0)
      if (EK0EW00.EK0EW-CALC-RANGE-DAYS == 
      EK0EM001.EK0EM-S1-DAYS-TO || 
      EK0EW00.EK0EW-CALC-RANGE-DAYS < 
      EK0EM001.EK0EM-S1-DAYS-TO)
           /* continue*/
      else
        EK0EW00.EK0EW-BYPASS-FL = "Y";
        return;
      end
    end
  end

   /* Compare Claim Number*/

  if (EK0EM001.EK0EM-S1-CL-CLM-NBR > 0)
    if (VCLHDR02.CLACLMNB == EK0EM001.EK0EM-S1-CL-CLM-NBR)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Claim Reason Code*/

  if (EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD > " ")
    if (VCLHDR02.YCRCD == EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Root Cause Code*/

  if (EK0EM001.EK0EM-S1-YRC-RT-CSE-CD > " ")
    if (VCLHDR02.YRC-RT-CSE-CD == EK0EM001.EK0EM-S1-YRC-RT-CSE-CD)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Sales Rep Id*/

  if (EK0EM001.EK0EM-S1-SM-SREP-ID > 0)
    if (VCLHDR02.SM4REPID == EK0EM001.EK0EM-S1-SM-SREP-ID)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Sales Agency Id*/

  if (EK0EM001.EK0EM-S1-SM-SAGCY-ID > " ")
    if (VCLHDR02.SM1AGYID == EK0EM001.EK0EM-S1-SM-SAGCY-ID)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Invoice Number*/

  if (EK0EM001.EK0EM-S1-IV-IVC-ID > 0)
    if (VCLHDR02.IV0IVCID == EK0EM001.EK0EM-S1-IV-IVC-ID)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Customer PO Number*/
   /* PO Number can accept a wildcard with at least one character*/
   /* specified and can be followed by a '*';*/

  if (EK0EM001.EK0EM-S1-OP-CUST-PO > " ")
    if (VCLHDR02.OP1CUPO == EK0EM001.EK0EM-S1-OP-CUST-PO)
        /* continue*/
    else

      EK0EW00.EK0EW-OP-CUST-PO-15 = VCLHDR02.OP1CUPO;

      EK0EW00.EK0EW-PO-MATCH = "Y";

      EK0EW00.EK0EW-WRK-IDX = 1;

      while (EK0EW00.EK0EW-WRK-IDX <= 15
       && EK0EW00.EK0EW-PO-MATCH == "Y"
       && (EK0EW00.EK0EW-S-OP-CUST-PO-CHAR[EK0EW-WRK-IDX] != "*" && 
      EK0EW00.EK0EW-S-OP-CUST-PO-CHAR[EK0EW-WRK-IDX] != " "))

        if (EK0EW00.EK0EW-S-OP-CUST-PO-CHAR[EK0EW-WRK-IDX] == 
        EK0EW00.EK0EW-OP-CUST-PO-CHAR[EK0EW-WRK-IDX])
             /* continue*/
        else
          EK0EW00.EK0EW-PO-MATCH = "N";
        end

        EK0EW00.EK0EW-WRK-IDX = EK0EW00.EK0EW-WRK-IDX + 1;

      end

      if (EK0EW00.EK0EW-PO-MATCH == "Y")
           /* continue*/
      else
        EK0EW00.EK0EW-BYPASS-FL = "Y";
        return;
      end
    end
  end

   /* Compare PODPOS Status Code*/

  if (EK0EM001.EK0EM-S1-YPS-PODPOS-STAT-CD > " ")
    if (CLEREC.YPSCD == EK0EM001.EK0EM-S1-YPS-PODPOS-STAT-CD)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Claim Estimated Value*/

  EK0EW00.EK0EW-SIGN-DROPPED-FL = "N";

  if (EK0EM001.EK0EM-S1-CL-EST-CLM-VAL > 0)
    if (VCLHDR02.CLAESTVL < 0)

        /* drop the sign if negative amount*/

      VCLHDR02.CLAESTVL = VCLHDR02.CLAESTVL * -1;

      EK0EW00.EK0EW-SIGN-DROPPED-FL = "Y";

    end

     /* Check if equal to criteria Amount entered*/

    if (VCLHDR02.CLAESTVL == EK0EM001.EK0EM-S1-CL-EST-CLM-VAL)
        /* continue*/
    else

        /* Check if greater than criteria Amount entered*/

      if (VCLHDR02.CLAESTVL > EK0EM001.EK0EM-S1-CL-EST-CLM-VAL)
           /* continue*/
      else
        EK0EW00.EK0EW-BYPASS-FL = "Y";
        return;
      end
    end

    if (EK0EW00.EK0EW-SIGN-DROPPED-FL == "Y")

        /* Restore original negative amount*/

      VCLHDR02.CLAESTVL = VCLHDR02.CLAESTVL * -1;

    end
  end

   /* Compare Sales Office Id*/

  if (EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID > " ")
    if (VCLHDR02.XSOCD == EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Warehouse Code*/

  if (EK0EM001.EK0EM-S1-XWH-WHSE-CD > " ")
    if (VCLHDR02.XWHCD == EK0EM001.EK0EM-S1-XWH-WHSE-CD)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Traffic Carrier Code*/

  if (EK0EM001.EK0EM-S1-TF-CARR-CD > " ")
    if (VIVHDR04.TF1CARCD == EK0EM001.EK0EM-S1-TF-CARR-CD)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* Compare Traffic PRO Number*/

  if (EK0EM001.EK0EM-S1-TF-PRO-NBR > " ")
    if (VIVHDR04.TF2PRONO == EK0EM001.EK0EM-S1-TF-PRO-NBR)
        /* continue*/
    else
      EK0EW00.EK0EW-BYPASS-FL = "Y";
      return;
    end
  end

   /* **************************************************************/
                     /* END  EK0E2200*/
   /* **************************************************************/
end // end EK0E2200

// Display Table to Screen
Function EK0E3000()
   /* **************************************************************/
   /* This process controls the display for EK0EM001/EK00M002 Maps*/
   /* **************************************************************/

  EK0EW00.EK0EW-END-SCREEN-1 = "N";
  EK0EW00.EK0EW-END-SCREEN-2 = "N";

  if (EK0EW00.EK0EW-SCREEN-NAME == "EK0EM001")

    while (EK0EW00.EK0EW-END-SCREEN-1 == "N") /* If not end*/

      EK0E3100(); /* Display EK0EM001*/

      if (converseVar.eventKey is pf11 &&  /* Shift Right to EK0EM002*/
      converseVar.validationMsgNum == 0)   /* and no error found*/

        EK0EW02.EK0EW-SCREEN-CHNGD = "N";
        EK0EW00.EK0EW-END-SCREEN-2 = "N";

        while (EK0EW00.EK0EW-END-SCREEN-2 == "N") /* If not end*/

          EK0E8100(); /* display EK0EM002*/

        end

      end
    end

  else /* Screen Name is EK0EM002*/

    if (EK0EW00.EK0EW-SCREEN-NAME == "EK0EM002")

      while (EK0EW00.EK0EW-END-SCREEN-2 == "N") /* If not end*/

        EK0E8100(); /* display EK0EM002*/

        if (converseVar.eventKey is pf11 &&  /* Shift Left to EK0EM001*/
        converseVar.validationMsgNum == 0)   /* and no error found*/

          EK0EW00.EK0EW-SCREEN-SHIFT = "N";

          while (EK0EW00.EK0EW-END-SCREEN-1 == "N" /* If not end*/
           && EK0EW00.EK0EW-SCREEN-SHIFT == "N")

            EK0E3100(); /* display EK0EM001*/

            if (converseVar.eventKey is pf11 &&  /* Shift Right to EK0EM002*/
            converseVar.validationMsgNum == 0)   /* and no error found*/
              EK0EW00.EK0EW-SCREEN-SHIFT = "Y";
              EK0EW00.EK0EW-END-SCREEN-2 = "N";
            end
          end

        end
      end

    end
  end

   /* **************************************************************/
                     /* END  EK0E3000*/
   /* **************************************************************/
end // end EK0E3000

// Converse EK0EM001
Function EK0E3100()
   /* **********************************************************************/
   /* Modification History                                  **/
   /* Date     Userid    Description                                  **/
   /* ----------  ------  ---------------------------------------------- **/
   /* 09-03-1998  HMACAL  Corrected WHILE Stmt to use LE instead of LT   **/
   /* when comparing EK0EW-SCR-IDX and EK0EW-SCR-    **/
   /* LINES. This will now process the 13th detail   **/
   /* screen line.                                   **/
   /* **********************************************************************/
   /* **/
   /* * Display EK0EM001*/
   /* **/
  if (EK0EW00.EK0EW-CURR-PAGE != EK0EM001.EK0EM-S1-CURR-PAGE)
    if (converseVar.validationMsgNum == 350 ||  /* No data found*/
    EK0EW00.EK0EW-MAX-PAGE == 0)               
      EK0EW00.EK0EW-CURR-PAGE = 1;
      EK0EW00.EK0EW-MAX-PAGE = 1;
      EK0EM001.EK0EM-S1-CURR-PAGE = 1;
      EK0EM001.EK0EM-S1-MAX-PAGE = 1;
         /* continue      /* Nothing to load/reload*/
    else
      EK0E3200(); /* Reload screen data*/
      EK0EM001.EK0EM-S1-CURR-PAGE = EK0EW00.EK0EW-CURR-PAGE;
      EK0EM001.EK0EM-S1-MAX-PAGE = EK0EW00.EK0EW-MAX-PAGE;
    end
  end

   /* Now set field attributes*/

  EK0E3400(); /* Set Field Attributes*/

  if (converseVar.validationMsgNum != 0)
    set EK0EM001 alarm;
  end

  converse EK0EM001 ;

  EK0EW00.EK0EW-POPUP-FL = "N";
  EK0EW02.EK0EW-SCREEN-CHNGD = "N";
  EK0EW02.EK0EW-SCREEN-TAGGED = "N";
  EK0EW00.EK0EW-SAVED-INFO = " ";
  EK0EW00.EK0EW-SV-CL-CLM-NBR = 0;
  EK0EW00.EK0EW-SV-IV-IVC-ID = 0;
  EK0EW00.EK0EW-SV-OP-CUST-ORD-ID = 0;
  EK0EW00.EK0EW-SV-OP-NIKE-ORD-ID = 0;
  EK0EW00.EK0EW-SV-CURR-PAGE = 0;

   /* Verify if Search Criteria was modified*/

  if (EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID != 
  EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID || 
  EK0EM001.EK0EM-S1-CU-CO-ID != EK0EW00.EK0EW-S-CU-CO-ID || 
  EK0EM001.EK0EM-S1-CU-STOR-ID != EK0EW00.EK0EW-S-CU-STOR-ID || 
  EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF != 
  EK0EW00.EK0EW-S-XNX-DEPT-ID-XREF || 
  EK0EM001.EK0EM-S1-XGP-GPC-CD != EK0EW00.EK0EW-S-XGP-GPC-CD || 
  EK0EM001.EK0EM-S1-CL-ESC-ACT-CD != 
  EK0EW00.EK0EW-S-CL-ESC-ACT-CD || 
  EK0EM001.EK0EM-S1-CL-CLXCP-IND != EK0EW00.EK0EW-S-CL-CLXCP-IND || 
  EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD != 
  EK0EW00.EK0EW-S-YCT-CLM-TYP-CD || 
  EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 != 
  EK0EW00.EK0EW-S-YCS-CLM-STAT-CD1 || 
  EK0EM001.EK0EM-S1-DAYS-FROM != EK0EW00.EK0EW-S-DAYS-FROM || 
  EK0EM001.EK0EM-S1-DAYS-TO != EK0EW00.EK0EW-S-DAYS-TO || 
  EK0EM001.EK0EM-S1-ESC-DAYS-FL != 
  EK0EW00.EK0EW-S-ESC-DAYS-FL || 
  EK0EM001.EK0EM-S1-STAT-DAYS-FL != 
  EK0EW00.EK0EW-S-STAT-DAYS-FL || 
  EK0EM001.EK0EM-S1-CL-CLM-NBR != EK0EW00.EK0EW-S-CL-CLM-NBR || 
  EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD != 
  EK0EW00.EK0EW-S-YCR-CLM-RSN-CD || 
  EK0EM001.EK0EM-S1-YRC-RT-CSE-CD != 
  EK0EW00.EK0EW-S-YRC-RT-CSE-CD || 
  EK0EM001.EK0EM-S1-SM-SREP-ID != EK0EW00.EK0EW-S-SM-SREP-ID || 
  EK0EM001.EK0EM-S1-SM-SAGCY-ID != EK0EW00.EK0EW-S-SM-SAGCY-ID || 
  EK0EM001.EK0EM-S1-IV-IVC-ID != EK0EW00.EK0EW-S-IV-IVC-ID || 
  EK0EM001.EK0EM-S1-OP-CUST-PO != EK0EW00.EK0EW-S-OP-CUST-PO || 
  EK0EM001.EK0EM-S1-YPS-PODPOS-STAT-CD != 
  EK0EW00.EK0EW-S-YPS-PODPOS-STAT-CD || 
  EK0EM001.EK0EM-S1-CL-EST-CLM-VAL != 
  EK0EW00.EK0EW-S-CL-EST-CLM-VAL || 
  EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID != 
  EK0EW00.EK0EW-S-XSO-SLS-OFC-ID || 
  EK0EM001.EK0EM-S1-XWH-WHSE-CD != EK0EW00.EK0EW-S-XWH-WHSE-CD || 
  EK0EM001.EK0EM-S1-TF-CARR-CD != EK0EW00.EK0EW-S-TF-CARR-CD || 
  EK0EM001.EK0EM-S1-TF-PRO-NBR != EK0EW00.EK0EW-S-TF-PRO-NBR)

    EK0EW02.EK0EW-SCREEN-CHNGD = "Y";

    if (converseVar.eventKey is enter)

      EK0E3300(); /* Process Search Criteria*/
    end
  else

    EK0ES-VAL-SEARCH-1(); /* Validate Search Criteria*/

    if (EK0EW00.EK0EW-POPUP-FL == "Y")
      return;
    end

  end

   /* Verify if any detail line was tagged*/

  EK0EW00.EK0EW-SCR-IDX = 1;

  while (EK0EW00.EK0EW-SCR-IDX <= EK0EW00.EK0EW-SCR-LINES)

    if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] != 
    EK0EW02.EK0EW-COL-FUNC[EK0EW-SCR-IDX])

      EK0EW02.EK0EW-SCREEN-TAGGED = "Y";

    end

    EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-IDX + 1;

  end


   /* Check function keys (May exit application)*/

  EK0ES-CHECK-PFKEYS();


  if (converseVar.eventKey is pa2 ||  /* Refresh*/
  converseVar.eventKey is pf3 ||      /* or Exit*/
  converseVar.validationMsgNum != 0)  /* or errors*/
    return;
  end

   /* Now if there are no errors, user pressed ENTER or PF12 key*/
   /* and at least one line was tagged, go process them!*/

  if (converseVar.validationMsgNum == 0 && 
  (converseVar.eventKey is enter || 
  converseVar.eventKey is pf12) && 
  EK0EW02.EK0EW-SCREEN-TAGGED == "Y")

    EK0E4000(); /* Validate & Update*/

  end

end // end EK0E3100

// Load screen array
Function EK0E3200()
   /* **********************************************************************/
   /* Modification History                                         **/
   /* Date     Userid      Description                                **/
   /* ----------  ------  ---------------------------------------------- **/
   /* 06-29-1998  HMACAL  Modified to display CL-RSLV-CD (Resolver Code) **/
   /* of the current level where the claim is at,    **/
   /* under the 'F' detail column when CL-ESC-ACT-CD **/
   /* (Escalation Activity Code) is not given.       **/
   /* However, when the Esc Act Code is present, it  **/
   /* will take precedence and will be displayed.    **/
   /* (NOTE: since CL-RSLV-CD is two-char in length, **/
   /* only the first character will be moved  **/
   /* and displayed)                          **/
   /* **********************************************************************/
   /* **************************************************************/
   /* Load screen array and internal working storage array*/
   /* from temp storage.*/
   /* **************************************************************/

  set EK0EW02 empty; /* Clear record*/

  EK0EW00.EK0EW-SCR-IDX = 1; /* Init screen index*/
  EK0EW02.EK0EW-W02-IDX = 1; /* and W02 index*/
  EK0EW02.EK0EW-CURR-RCD = EK0EW00.EK0EW-CURR-RCD;

  TA5REC.TA5TSQIX = EK0EW00.EK0EW-CURR-PAGE;
  TA5REC.TA5FNCCD = "R";

  EK0ES-CALL-TA0050(); /* Read queue*/

  EK0EW02.EK0EW-TEMP-ITEM = EK0EW01.EK0EW-TEMP-ITEM;

  EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID = EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID;
  EK0EM001.EK0EM-S1-TOT-CLAIM-AMT = EK0EW00.EK0EW-S-TOT-CLAIM-AMT;
  EK0EM001.EK0EM-S1-LINE-COUNT = EK0EW00.EK0EW-S-LINE-COUNT;

   /* Now get the data from temp storage*/

  while (EK0EW-SCR-IDX <= EK0EW00.EK0EW-SCR-LINES)

    if (EK0EW02.EK0EW-CURR-RCD <= EK0EW00.EK0EW-MAX-RCD)

      EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] = EK0EW02.EK0EW-COL-FUNC[EK0EW-W02-IDX];

      if (EK0EW02.CL-COMP-FL[EK0EW-W02-IDX] == "R") /* Curr Rslvr*/
        if (EK0EW02.CL-ESC-ACT-CD[EK0EW-W02-IDX] == " ")
          EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] = EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX];
        else
          EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] = EK0EW02.CL-ESC-ACT-CD[EK0EW-W02-IDX];
        end
      else /* CL-COMP-FL is 'Y'  (Prev Rslvr)*/
        if (EK0EW02.CL-COMP-FL[EK0EW-W02-IDX] == " ") /* Curr Rslvr*/
          EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] = " ";
        else

              /* Display current level where claim is at*/
              /* Find VCLESX01 row using Claim Nbr where CL-COMP-FL = 'R'*/

          set VCLESX01 empty;

          VCLESX01.CL-CLM-NBR = EK0EW02.CL-CLM-NBR[EK0EW-W02-IDX];

          EK0ES-VCLESX01-S1();

          while (SQLCA.VAGen_SQLCODE == 0)

            EK0ES-VCLESX01-N1();

            if (SQLCA.VAGen_SQLCODE == 0)
              if (VCLESX01.CL-COMP-FL == "R")
                EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] = VCLESX01.CL-RSLV-CD;
                SQLCA.VAGen_SQLCODE = 100; /* End Loop*/
              end
            else
              EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] = " ";
            end
          end

          EK0ES-VCLESX01-C1();
        end
      end

      EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] = EK0EW02.CU-CO-ID[EK0EW-W02-IDX];
      EK0EM001.EK0EM-CU-STOR-ID[EK0EW-SCR-IDX] = EK0EW02.CU-STOR-ID[EK0EW-W02-IDX];
      EK0EM001.EK0EM-XNX-DEPT-ID-XREF[EK0EW-SCR-IDX] = EK0EW02.XNX-DEPT-ID-XREF[EK0EW-W02-IDX];
      EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] = EK0EW02.XGP-GPC-CD[EK0EW-W02-IDX];
      EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] = EK0EW02.CL-CLM-NBR[EK0EW-W02-IDX];
      EK0EM001.EK0EM-CL-EST-CLM-VAL[EK0EW-SCR-IDX] = EK0EW02.CL-EST-CLM-VAL[EK0EW-W02-IDX];
      EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] = EK0EW02.YCS-CLM-STAT-CD1[EK0EW-W02-IDX];

      EK0EW00.EK0EW-DATE-CCYYMMDD = EK0EW02.CL-CLM-STAT-DT[EK0EW-W02-IDX];
      EK0EW00.EK0EW-DATE-YR = EK0EW00.EK0EW-DATE-YY;
      EK0EW00.EK0EW-DATE-MO = EK0EW00.EK0EW-DATE-MM;
      EK0EW00.EK0EW-DATE-DY = EK0EW00.EK0EW-DATE-DD;
      EK0EM001.EK0EM-CL-CLM-STAT-DT[EK0EW-SCR-IDX] = EK0EW00.EK0EW-DATE-MMDDYY;

      EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] = EK0EW02.YCT-CLM-TYP-CD[EK0EW-W02-IDX];
      EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] = EK0EW02.YCR-CLM-RSN-CD[EK0EW-W02-IDX];
      EK0EM001.EK0EM-YRC-RT-CSE-CD[EK0EW-SCR-IDX] = EK0EW02.YRC-RT-CSE-CD[EK0EW-W02-IDX];
      EK0EM001.EK0EM-SM-SAGCY-ID[EK0EW-SCR-IDX] = EK0EW02.SM-SAGCY-ID[EK0EW-W02-IDX];
      EK0EM001.EK0EM-SM-SREP-ID[EK0EW-SCR-IDX] = EK0EW02.SM-SREP-ID[EK0EW-W02-IDX];
      EK0EM001.EK0EM-CALC-ESC-STAT-DAYS[EK0EW-SCR-IDX] = EK0EW02.EK0EW-CALC-ESC-STAT-DAYS[EK0EW-W02-IDX];
    else
      EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-CU-STOR-ID[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-XNX-DEPT-ID-XREF[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-CL-EST-CLM-VAL[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-CL-CLM-STAT-DT[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-YRC-RT-CSE-CD[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-SM-SAGCY-ID[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-SM-SREP-ID[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-CALC-ESC-STAT-DAYS[EK0EW-SCR-IDX] = 0;

    end

    EK0EW02.EK0EW-CURR-RCD = EK0EW02.EK0EW-CURR-RCD + 1;
    EK0EW02.EK0EW-W02-IDX = EK0EW02.EK0EW-W02-IDX + 1;
    EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-IDX + 1;
  end

  EK0EW02.EK0EW-CURR-RCD = EK0EW00.EK0EW-CURR-RCD;

   /* **************************************************************/
                     /* END  EK0E3200*/
   /* **************************************************************/
end // end EK0E3200

// Process Search criteria
Function EK0E3300()

   /* Process Search criteria using Claim Type AND Claim Reason Codes*/

  EK0ES-PURGE-QUEUE();

  EK0ES-VAL-SEARCH-1(); /* Validate Search criteria*/

  if (converseVar.validationMsgNum == 0 ||  /* Search criteria is valid*/
  converseVar.validationMsgNum == 810)      /* Search criteria was selected from Popup*/

    EK0EW00.EK0EW-END-SCREEN-1 = "Y";
    EK0EW00.EK0EW-END-SCREEN-2 = "Y";

  else /* Blank out screen*/
    EK0EW00.EK0EW-SCR-IDX = 1;

    while (EK0EW00.EK0EW-SCR-IDX <= EK0EW00.EK0EW-SCR-LINES)

      EK0EM001.EK0EM-S1-TOT-CLAIM-AMT = 0;
      EK0EM001.EK0EM-S1-LINE-COUNT = 0;

      EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] = " ";
      set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] initialAttributes;
      EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-CU-STOR-ID[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-XNX-DEPT-ID-XREF[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-CL-EST-CLM-VAL[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-CL-CLM-STAT-DT[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-YRC-RT-CSE-CD[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-SM-SAGCY-ID[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-SM-SREP-ID[EK0EW-SCR-IDX] = 0;
      EK0EM001.EK0EM-CALC-ESC-STAT-DAYS[EK0EW-SCR-IDX] = 0;

      EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-IDX + 1;
    end

    EK0EW00.EK0EW-CURR-PAGE = 1;
    EK0EW00.EK0EW-MAX-PAGE = 1;
    EK0EM001.EK0EM-S1-CURR-PAGE = 1;
    EK0EM001.EK0EM-S1-MAX-PAGE = 1;
  end
   /* **************************************************************/
                     /* END  EK0E3300*/
   /* **************************************************************/
end // end EK0E3300

// Set Field Attributes
Function EK0E3400()
  EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-LINES;

  while (EK0EW00.EK0EW-SCR-IDX > 0)

    if (converseVar.validationMsgNum == 0)
      if (EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] > 0)
        if (EK0EW00.EK0EW-ALLOW-ACCESS-FL == "Y")
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] underline;
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] cursor;
        else /* Resolver entered not same Dept as User*/
          converseLib.validationFailed(872); /* Inquiry only allowed*/
          set EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID cursor, bold;
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] initialAttributes;
        end
      else
        set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] initialAttributes;
      end
    else
      if (converseVar.validationMsgNum == 774 ||  /* a successful update just took place, or*/
      converseVar.validationMsgNum == 828)        /* a PF12 confirm message was prompted*/
        if (EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] > 0)
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] underline;
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] cursor;
        else
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] initialAttributes;
        end
      end
    end

    set EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CU-STOR-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-XNX-DEPT-ID-XREF[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CL-EST-CLM-VAL[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CL-CLM-STAT-DT[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-YRC-RT-CSE-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-SM-SAGCY-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-SM-SREP-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM001.EK0EM-CALC-ESC-STAT-DAYS[EK0EW-SCR-IDX] initialAttributes;

     /* Set to YELLOW if claim has been re-assigned*/

    if (EK0EW02.CL-COMP-FL[EK0EW-SCR-IDX] == "Y")
      set EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-CU-STOR-ID[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-XNX-DEPT-ID-XREF[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-CL-EST-CLM-VAL[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-CL-CLM-STAT-DT[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-YRC-RT-CSE-CD[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-SM-SAGCY-ID[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-SM-SREP-ID[EK0EW-SCR-IDX] yellow;
      set EK0EM001.EK0EM-CALC-ESC-STAT-DAYS[EK0EW-SCR-IDX] yellow;
    end

    EK0EW-SCR-IDX = EK0EW-SCR-IDX - 1;

  end

   /* Set the field attributes for Search Fields*/
   /* and the rest of the screen fields*/

  if (converseVar.validationMsgNum == 0)

    if (EK0EM001.EK0EM-CU-CO-ID[1] == 0)
      set EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID cursor;
    end
    set EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID initialAttributes;
    set EK0EM001.EK0EM-S1-CU-CO-ID initialAttributes;
    set EK0EM001.EK0EM-S1-CU-STOR-ID initialAttributes;
    set EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF initialAttributes;
    set EK0EM001.EK0EM-S1-XGP-GPC-CD initialAttributes;
    set EK0EM001.EK0EM-S1-CL-ESC-ACT-CD initialAttributes;
    set EK0EM001.EK0EM-S1-CL-CLXCP-IND initialAttributes;
    set EK0EM001.EK0EM-S1-TOT-CLAIM-AMT initialAttributes;
    set EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD initialAttributes;
    set EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 initialAttributes;
    set EK0EM001.EK0EM-S1-DAYS-FROM initialAttributes;
    set EK0EM001.EK0EM-S1-DAYS-TO initialAttributes;
    set EK0EM001.EK0EM-S1-ESC-DAYS-FL initialAttributes;
    set EK0EM001.EK0EM-S1-STAT-DAYS-FL initialAttributes;
    set EK0EM001.EK0EM-S1-CL-CLM-NBR initialAttributes;
    set EK0EM001.EK0EM-S1-LINE-COUNT initialAttributes;
    set EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD initialAttributes;
    set EK0EM001.EK0EM-S1-YRC-RT-CSE-CD initialAttributes;
    set EK0EM001.EK0EM-S1-SM-SREP-ID initialAttributes;
    set EK0EM001.EK0EM-S1-SM-SAGCY-ID initialAttributes;
    set EK0EM001.EK0EM-S1-IV-IVC-ID initialAttributes;
    set EK0EM001.EK0EM-S1-OP-CUST-PO initialAttributes;
    set EK0EM001.EK0EM-S1-YPS-PODPOS-STAT-CD initialAttributes;
    set EK0EM001.EK0EM-S1-CL-EST-CLM-VAL initialAttributes;
    set EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID initialAttributes;
    set EK0EM001.EK0EM-S1-XWH-WHSE-CD initialAttributes;
    set EK0EM001.EK0EM-S1-TF-CARR-CD initialAttributes;
    set EK0EM001.EK0EM-S1-TF-PRO-NBR initialAttributes;

  end

  if (EK0EW00.EK0EW-MAX-PAGE == 0 || 
  (EK0EW00.EK0EW-MAX-PAGE == 1 && 
  EK0EW00.EK0EW-MAX-RCD == 0)) /* If no Data to display*/
    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(350);
    end
  end

end // end EK0E3400

// Process Adds/Changes
Function EK0E4000()

  EK0EW00.EK0EW-POPUP-FL = "N";

   /*  */
   /* Main Validation*/
   /*  */

  EK0E4100(); /* Edit Validation*/

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

  if (converseVar.eventKey is enter) /* No Errors, but not PF12*/
    if (EK0EW00.EK0EW-S-COUNT == 1)
      converseLib.validationFailed(870); /* Press PF key to xfer to*/
    else
      if (EK0EW00.EK0EW-E-COUNT > 0 || 
      EK0EW00.EK0EW-X-COUNT > 0 || 
      EK0EW00.EK0EW-D-COUNT > 0 || 
      EK0EW00.EK0EW-R-COUNT > 0)
        converseLib.validationFailed(828); /* Press PF12 to confirm updates*/
      end
    end
    return;
  end

   /* Now, if we get here, we have tagged at least one row to Update*/
   /* as long as PF12 key (Confirm) was pressed*/

  if (converseVar.eventKey is pf12) /* PF12 Confirm*/

    EK0E4500(); /* Update or Escalate Claim tagged*/

    if (converseVar.validationMsgNum == 0) /* No errors*/
      converseLib.validationFailed(774); /* Updates successful*/
      EK0EW00.EK0EW-END-SCREEN-1 = "Y";
      EK0EW00.EK0EW-END-SCREEN-2 = "Y";
    end
  end

   /* **************************************************************/
                     /* END  EK0E4000*/
   /* **************************************************************/
end // end EK0E4000

// EDIT Validation process
Function EK0E4100()
   /* ******************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G            **/
   /* ******************************************************************/
   /* DATE    PGMR    DESCRIPTION                                  **/
   /* ******************************************************************/
   /* 03-16-99  GDECKE  ALLOW CONSUMERS SUPER USER TO DO DELETES     **/
   /* OF ESCALATIONS ON CLAIMS WITH 'OPEN' STATUS. **/
   /* ******************************************************************/
   /*  */
   /* Edit Validation Process*/
   /* ------------------------------------------------------------------*/
   /*  */
   /* Valid function codes to enter are:*/
   /* 'E' to Escalate a Claim (can Escalate more than one claim at a time);*/
   /* 'R' to Research a Claim (can Research more than one claim at a time);*/
   /* 'X' to Cancel previously Researched Claim (can Cancel more than one);*/
   /* 'S' to Select a Claim to use in transfer to another application*/
   /* (MUST only Select ONE detail line)*/
   /* 'D' to Delete a Claim Escalation after it has been completed*/
   /* (can Delete more than one claim at a time);*/
   /*  */
   /* Escalation Edit Validation*/
   /* 1) Verify that the current resolver has an assigned Escalation User*/
   /* defined on the VCLRES01 table;*/
   /* 2) Verify that the claim has not already been escalated;*/
   /*  */
   /* Research Edit Validation, AND*/
   /* Cancel Activity Edit Validation*/
   /* 1) Verify that the claim has not already been escalated;*/
   /*  */
   /* Claim Selection Edit Validation*/
   /* 1) No restriction at the moment. User can select any claim to be*/
   /* used for transferring to another application via PFKeys defined.*/
   /*  */
   /* Delete Edit Validation*/
   /* 1) Verify that the claim status has been set to 'CMP' (Completed) on*/
   /* the Claim Header table (VCLHDR02).*/
   /* ****(Determine if user can delete either Yellow or only Green detail)*/
   /*  */
   /* NOTE: (this may change, though)*/
   /* The application only allows one function code at a time, ie,*/
   /* user can not escalate, research, cancel activity or select for*/
   /* transfer, at the same time.*/
   /* ------------------------------------------------------------------*/

  EK0EW00.EK0EW-SAVED-INFO = " ";
  EK0EW00.EK0EW-SV-CL-CLM-NBR = 0;
  EK0EW00.EK0EW-SV-IV-IVC-ID = 0;
  EK0EW00.EK0EW-SV-OP-CUST-ORD-ID = 0;
  EK0EW00.EK0EW-SV-OP-NIKE-ORD-ID = 0;
  EK0EW00.EK0EW-SV-CURR-PAGE = EK0EW00.EK0EW-CURR-PAGE;

   /*  */
   /* Validate the column function value entered, bottom to top*/
   /* Also, count the number of occurences of columns functions entered*/
   /*  */

  EK0EW00.EK0EW-E-COUNT = 0;
  EK0EW00.EK0EW-R-COUNT = 0;
  EK0EW00.EK0EW-S-COUNT = 0;
  EK0EW00.EK0EW-X-COUNT = 0;
  EK0EW00.EK0EW-D-COUNT = 0;

  EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-LINES;

  while (EK0EW00.EK0EW-SCR-IDX > 0)

     /* Validate if there is data on detail line*/

    if (EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] > 0)

        /* Validate Column Function*/

      if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == " ")
        set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
      else
        if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "E")
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
          EK0EW00.EK0EW-E-COUNT = EK0EW00.EK0EW-E-COUNT + 1;
        else
          if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "R")
            set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
            EK0EW00.EK0EW-R-COUNT = EK0EW00.EK0EW-R-COUNT + 1;
          else
            if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "S")
              set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
              EK0EW00.EK0EW-S-COUNT = EK0EW00.EK0EW-S-COUNT + 1;

              EK0ES-SAVE-INFO(); /* Save info for Xfer and Return*/

            else
              if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "X")
                set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
                EK0EW00.EK0EW-X-COUNT = EK0EW00.EK0EW-X-COUNT + 1;
              else
                if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "D")
                  set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
                  EK0EW00.EK0EW-D-COUNT = EK0EW00.EK0EW-D-COUNT + 1;
                else
                  converseLib.validationFailed(869); /* Invalid: Use E,R,S,X,D*/
                  set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] bold, cursor;
                end
              end
            end
          end
        end
      end
    end

    EK0EW-SCR-IDX = EK0EW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /*  */
   /* Check for combination of Column Functions*/
   /* User can use functions 'R', 'E', 'X' and 'D' in any combination,*/
   /* at more than one line, at the same time, BUT,*/
   /* 'S' can only be used on one detail line at any one time and*/
   /* without any other column functions entered.*/
   /*  */


  if (EK0EW00.EK0EW-S-COUNT > 0)

    if (EK0EW00.EK0EW-R-COUNT > 0 || 
    EK0EW00.EK0EW-E-COUNT > 0 || 
    EK0EW00.EK0EW-D-COUNT > 0 || 
    EK0EW00.EK0EW-X-COUNT > 0)

      converseLib.validationFailed(858); /* Cannot use S and E/R/X/D func same*/
                                   /* time*/

      EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-LINES;

      while (EK0EW00.EK0EW-SCR-IDX > 0)

        if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] > " ")
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] bold, cursor;
        end

        EK0EW-SCR-IDX = EK0EW-SCR-IDX - 1;

      end

    else
      if (EK0EW00.EK0EW-S-COUNT > 1)
        converseLib.validationFailed(859); /* Select only one claim to use for xfer*/

        EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-LINES;

        while (EK0EW00.EK0EW-SCR-IDX > 0)

          if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "S")
            set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] bold, cursor;
          end

          EK0EW-SCR-IDX = EK0EW-SCR-IDX - 1;

        end
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /*  */
   /* Verify that the claim being escalated, researched or cancelled*/
   /* has not already been escalated;*/
   /* AND,*/
   /* Verify that the current Resolver has an assigned Escalation UserId*/
   /* when escalating a claim;*/
   /* OR,*/
   /* Verify that the claim being deleted from Escalation process has*/
   /* a Claim Status of 'CMP' (completed) on the Claim Header*/
   /*  */

  EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-LINES;

  while (EK0EW00.EK0EW-SCR-IDX > 0)

     /* Validate if there is data on detail line*/

    if (EK0EM001.EK0EM-CU-CO-ID[EK0EW-SCR-IDX] > 0)

        /* Validate Column Function*/

      if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "R" || 
      EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "E" || 
      EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "X")

        if (EK0EW02.CL-COMP-FL[EK0EW-SCR-IDX] == "Y")
                                   /* Yellow indicates claim has*/
                                  /* already been escalated*/
          converseLib.validationFailed(871); /* Func Code not allowed when esclted*/
          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] bold, cursor;

        else

          set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;

              /* Check if Resolver has an Escalation User assigned*/

          if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "E")
            set VCLRES01 empty;

            VCLRES01.CL-CR-ANLS-USER-ID = EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID;

            EK0ES-VCLRES01-S3(); /* Select Scan 3 VCLRES01*/

            if (SQLCA.VAGen_SQLCODE == 0)

              EK0ES-VCLRES01-N3(); /* Fetch Cursor 3 VCLRES01*/

              if (SQLCA.VAGen_SQLCODE == 0)
                if ((VCLRES01.CL-ESC-USER-ID1 > " " || 
                VCLRES01.CL-ESC-USER-ID2 > " ") && 
                (VCLRES01.CL-ESC-USER-ID1 != 
                EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID && 
                VCLRES01.CL-ESC-USER-ID2 != 
                EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID))
                  set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
                else
                  converseLib.validationFailed(860); /* No Escltn User found*/
                  set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] bold, cursor;
                end
              else
                converseLib.validationFailed(777); /* Record not found for update*/
                set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] bold, cursor;
              end
            end

            EK0ES-VCLRES01-C3(); /* Close Scan 3 VCLRES01*/

          end
        end
      else
        if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "D")

              /* check if claim already completed*/
              /*  */
          set VCLHDR02 empty;

          VCLHDR02.CLACLMNB = EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX];

          EK0ES-VCLHDR02-S(); /* Select Unique VCLHDR02*/

          if (SQLCA.VAGen_SQLCODE == 0)
            if (VCLHDR02.YCSCD1 == "CMP") /* If completed*/
              set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
              set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] initialAttributes;
            else
              if (EK0EW00.EK0EW-T-XSO-SLS-OFC-ID == "21"
               && EK0EW00.EK0EW-T-CL-SPR-USER-FL == "S")
                set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] normal;
                set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] initialAttributes;
              else
                converseLib.validationFailed(873); /* Claim not yet completed*/
                set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] bold, cursor;
                set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;
              end
            end
          else
            converseLib.validationFailed(005); /* Claim not found*/
            set EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] bold, cursor;
            set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;
          end
        end
      end
    end

    EK0EW-SCR-IDX = EK0EW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* **************************************************************/
                     /* END  EK0E4100*/
   /* **************************************************************/
end // end EK0E4100

// ADD/UPD/DEL Process
Function EK0E4500()
   /*  */
   /* Insert/Update/Delete Process*/
   /*  */

   /* Get current date and time for ZZ fields*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  EK0EW00.ZZ-SDT = TA2REC.TA2GRGGN;
  EK0EW00.ZZ-SETUP-HHMM = TA2REC.TA2TIMHM;
  EK0EW00.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
  EK0EW00.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;

   /* Now, check for changes and perform add or change routine*/

  EK0EW00.EK0EW-SCR-IDX = 1;

  while (EK0EW-SCR-IDX <= EK0EW00.EK0EW-SCR-LINES
   && converseVar.validationMsgNum == 000)

    if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] != 
    EK0EW02.EK0EW-COL-FUNC[EK0EW-SCR-IDX])

      if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "E")

        EK0E4600(); /* Update VCLESX01 row*/

        EK0E4700(); /* Insert VCLESX01 row*/

      else
        if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "R" || 
        EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "X")

          EK0E4600(); /* Update VCLESX01 row*/

        else
          if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "D")

            EK0E4800(); /* Update VCLESX01 row(s)*/

          end
        end
      end
    end

    EK0EW-SCR-IDX = EK0EW-SCR-IDX + 1;

  end

   /* If no errors commit changes, else roll back and exit.*/

  if (converseVar.validationMsgNum == 000) /* No update errors*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* so commit changes*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* roll back changes*/
    return; /* and exit*/
  end

   /* Write updates back to temp storage queue*/

  EK0EW00.EK0EW-SCR-IDX = 1;
  EK0EW02.EK0EW-UPD-STG = "N";

  while (EK0EW-SCR-IDX <= EK0EW00.EK0EW-SCR-LINES)

    if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] != 
    EK0EW02.EK0EW-COL-FUNC[EK0EW-SCR-IDX])

      EK0EW02.EK0EW-UPD-STG = "Y";
      EK0EW02.EK0EW-COL-FUNC[EK0EW-SCR-IDX] = " ";
      EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] = " ";

      if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "E")
        EK0EW02.CL-ESC-ACT-CD[EK0EW-SCR-IDX] = "E";
        EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] = "E";
      else
        if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "R")
          EK0EW02.CL-ESC-ACT-CD[EK0EW-SCR-IDX] = "R";
          EK0EM001.EK0EM-CL-ESC-ACT-CD[EK0EW-SCR-IDX] = "R";
        end
      end

    end

    EK0EW-SCR-IDX = EK0EW-SCR-IDX + 1;

  end

  if (EK0EW02.EK0EW-UPD-STG == "Y") /* Need to update TSQ*/

    EK0EW01.EK0EW-TEMP-ITEM = EK0EW02.EK0EW-TEMP-ITEM;

    TA5REC.TA5FNCCD = "U";

    TA5REC.TA5TSQIX = EK0EW00.EK0EW-CURR-PAGE;

    EK0ES-CALL-TA0050();

  end

   /* **************************************************************/
                     /* END  EK0E4500*/
   /* **************************************************************/
end // end EK0E4500

// Update VCLESX01 row
Function EK0E4600()
   /* UPDATE Process*/
   /*  */
   /* Update the current claim's resolver row as follows:*/
   /*  */
   /* 1) If function is 'E' for Escalation:*/
   /* Set CL-COMP-FL to 'Y';    (to display in YELLOW)*/
   /* CL-ESC-ACT-CD to 'E'; (to indicate claim was escalated)*/
   /* CL-RSLV-TDT to Current Date*/
   /*  */
   /* 2) If function is 'R' for Research:*/
   /* Set CL-ESC-ACT-CD to 'R'; (to indicate claim being researched)*/
   /*  */
   /* 3) If function is 'X' for Cancel Research:*/
   /* Set CL-ESC-ACT-CD to ' '; (to indicate claim research canclld)*/
   /*  */

  set VCLESX01 empty;

  VCLESX01.CL-CLM-NBR = EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX];
  VCLESX01.CL-RSLV-USER-ID = EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID;
  VCLESX01.CL-RSLV-BDT = EK0EW02.CL-RSLV-BDT[EK0EW-SCR-IDX];

  EK0ES-VCLESX01-S(); /* Select VCLESX01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)

    if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "E")
      VCLESX01.CL-ESC-ACT-CD = "E";
      VCLESX01.CL-COMP-FL = "Y";
      VCLESX01.CL-RSLV-TDT = EK0EW00.ZZ-SDT;
    else
      if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "R")
        VCLESX01.CL-ESC-ACT-CD = "R";
      else
        if (EK0EM001.EK0EM-COL-FUNC[EK0EW-SCR-IDX] == "X")
          VCLESX01.CL-ESC-ACT-CD = " ";
        end
      end
    end

    VCLESX01.ZZ-CHNG-DT = EK0EW00.ZZ-SDT;
    VCLESX01.ZZ-CHNG-HHMM = EK0EW00.ZZ-SETUP-HHMM;

    EK0ES-VCLESX01-U(); /* Update VCLESX01 row*/

    if (SQLCA.VAGen_SQLCODE != 0)
      converseLib.validationFailed(339); /* Data updated by another appl*/

      set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;

      return;
    end

  else
    converseLib.validationFailed(777); /* Record for Update not found*/

    set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;
  end
end // end EK0E4600

// Insert VCLESX01 row
Function EK0E4700()

   /* INSERT Process*/
   /*  */
   /* Insert a new row in the VCLESX01 row for the new Resolver Id*/
   /* that the claim is being escalated to.*/
   /*  */
   /* 1) Get the new Resolver Id from the VCLRES01 table using the*/
   /* the current Resolver's 1st or 2nd Escalation UserId;*/
   /*  */
   /* 2) Using the 1st or 2nd Escalation UserId assigned to the*/
   /* current Resolver, insert the new Resolver row in the*/
   /* VCLESX01 table;*/
   /*  */

  EK0EW00.EK0EW-CL-ESC-USER-ID = " ";

   /* Get the Escalation UserId*/

  set VCLRES01 empty;

  VCLRES01.CL-CR-ANLS-USER-ID = EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID;

  EK0ES-VCLRES01-S3(); /* Select Scan 3 VCLRES01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    EK0ES-VCLRES01-N3(); /* Fetch Cursor 3 VCLRES01*/

    if (SQLCA.VAGen_SQLCODE == 0)

      set VCLESX01 empty;

      VCLESX01.CL-CLM-NBR = EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX];
      VCLESX01.CL-RSLV-USER-ID = VCLRES01.CL-ESC-USER-ID1;
      VCLESX01.CL-RSLV-BDT = EK0EW00.ZZ-SDT;

      EK0ES-VCLESX01-S(); /* Select VCLESX01 row*/

      if (SQLCA.VAGen_SQLCODE == 0)

        if (VCLRES01.CL-ESC-USER-ID2 > " ")
          set VCLESX01 empty;

          VCLESX01.CL-CLM-NBR = EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX];
          VCLESX01.CL-RSLV-USER-ID = VCLRES01.CL-ESC-USER-ID2;
          VCLESX01.CL-RSLV-BDT = EK0EW00.ZZ-SDT;

          EK0ES-VCLESX01-S(); /* Select VCLESX01 row*/

          if (SQLCA.VAGen_SQLCODE == 0)
            converseLib.validationFailed(861); /* Claim already escltd up to 2nd*/
            set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;

            EK0ES-VCLRES01-C3(); /* Close Scan 3 VCLRES01*/

            return;
          else
            set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] initialAttributes;
            EK0EW00.EK0EW-CL-ESC-USER-ID = VCLRES01.CL-ESC-USER-ID2;
          end
        else
          converseLib.validationFailed(861); /* Claim already esclated up to 2nd*/
          set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;

          EK0ES-VCLRES01-C3(); /* Close Scan 3 VCLRES01*/

          return;
        end
      else
        set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] initialAttributes;
        EK0EW00.EK0EW-CL-ESC-USER-ID = VCLRES01.CL-ESC-USER-ID1;
      end

        /* Insert new Resolver row into VCLESX01*/

      set VCLESX01 empty;

      VCLESX01.CL-CLM-NBR = EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX];
      VCLESX01.CL-RSLV-USER-ID = EK0EW00.EK0EW-CL-ESC-USER-ID;
      VCLESX01.CL-RSLV-BDT = EK0EW00.ZZ-SDT;
      VCLESX01.CL-RSLV-TDT = 0;
      VCLESX01.CL-ESC-ACT-CD = " ";
      VCLESX01.CL-COMP-FL = "R";
      VCLESX01.CL-RSLV-CD = "A";

      VCLESX01.ZZ-SDT = EK0EW00.ZZ-SDT;
      VCLESX01.ZZ-SETUP-HHMM = EK0EW00.ZZ-SETUP-HHMM;
      VCLESX01.ZZ-CHNG-DT = 0;
      VCLESX01.ZZ-CHNG-HHMM = 0;
      VCLESX01.ZZ-CHNG-CNT = 0;

      EK0ES-VCLESX01-A(); /* Insert VCLESX01 row*/

      if (SQLCA.VAGen_SQLCODE != 0)
        converseLib.validationFailed(339); /* Data updated by another appl*/
        set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;
      end
    else
      converseLib.validationFailed(778); /* Record for Insert already exists*/
      set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;
    end

  else
    converseLib.validationFailed(777); /* Record for Update not found*/
    set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;
  end

  EK0ES-VCLRES01-C3(); /* Close Scan 3 VCLRES01*/

end // end EK0E4700

// Update VCLESX01 row
Function EK0E4800()
   /* ------------------------------------------------------------------- **/
   /* DELETE from Escalation Process*/
   /*  */
   /* Update the current claim's resolver row as follows:*/
   /*  */
   /* 1) Set CL-COMP-FL to 'N';    (to NOT display on EK0E screen)*/
   /* CL-ESC-ACT-CD to 'D'; (to indicate claim was deleted)*/
   /* CL-RSLV-TDT to Current Date*/
   /*  */
   /* Update all the other Resolvers' rows that were assigned this*/
   /* claim as follows:*/
   /*  */
   /* 1) Set CL-COMP-FL to 'N';    (to NOT display on EK0E screen)*/
   /* CL-ESC-ACT-CD to 'D'; (to indicate claim was deleted)*/
   /*  */
   /* ------------------------------------------------------------------- **/

  set VCLESX01 empty;

  VCLESX01.CL-CLM-NBR = EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX];
  VCLESX01.CL-RSLV-USER-ID = EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID;
  VCLESX01.CL-RSLV-BDT = EK0EW02.CL-RSLV-BDT[EK0EW-SCR-IDX];

  EK0ES-VCLESX01-S(); /* Select VCLESX01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)

    VCLESX01.CL-COMP-FL = "N";
    VCLESX01.CL-ESC-ACT-CD = "D";
    VCLESX01.CL-RSLV-TDT = EK0EW00.ZZ-SDT;

    VCLESX01.ZZ-CHNG-DT = EK0EW00.ZZ-SDT;
    VCLESX01.ZZ-CHNG-HHMM = EK0EW00.ZZ-SETUP-HHMM;

    EK0ES-VCLESX01-U(); /* Update VCLESX01 row*/

    if (SQLCA.VAGen_SQLCODE != 0)
      converseLib.validationFailed(339); /* Data updated by another appl*/

      set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;

      return;
    end

  else
    converseLib.validationFailed(777); /* Record for Update not found*/

    set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;
  end

   /* Update all the other Resolver rows that were assigned this claim*/

  set VCLESX01 empty;

  VCLESX01.CL-CLM-NBR = EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX];

  EK0ES-VCLESX01-S1(); /* Select Scan 1 VCLESX01 row*/

  while (SQLCA.VAGen_SQLCODE == 0)

    EK0ES-VCLESX01-N1(); /* Fetch VCLESX01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      VCLESX01.CL-COMP-FL = "N";
      VCLESX01.CL-ESC-ACT-CD = "D";

      VCLESX01.ZZ-CHNG-DT = EK0EW00.ZZ-SDT;
      VCLESX01.ZZ-CHNG-HHMM = EK0EW00.ZZ-SETUP-HHMM;

      EK0ES-VCLESX01-U(); /* Update VCLESX01 row*/

      if (SQLCA.VAGen_SQLCODE != 0)
        converseLib.validationFailed(339); /* Data updated by another appl*/

        set EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX] bold;

        return;
      end
    end
  end

  EK0ES-VCLESX01-C1(); /* Close VCLESX01 cursor*/

   /* ********************************************************************/
   /* End of EK0E4800                               **/
   /* ********************************************************************/
end // end EK0E4800

// Converse CLM TYP Popup
Function EK0E5100()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for YCT-CLM-TYP-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "CLAIM TYPE CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCTTBL.YCTCD[XX0XWCT1] != "999") /* or End of Data*/
        if (YCTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCTTBL.YCTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCTTBL.YCTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && YCTTBL.YCTCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YCTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCTTBL.YCTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCTTBL.YCTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCTTBL.YCTCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0E5100

// Converse CLM RSN Popup
Function EK0E5200()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for YCR-CLM-RSN-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "CLAIM REASON CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCRTBL.YCRCD[XX0XWCT1] != "999") /* or End of Data*/
        if (YCRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCRTBL.YCRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCRTBL.YCRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && YCRTBL.YCRCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YCRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCRTBL.YCRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCRTBL.YCRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCRTBL.YCRCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0E5200

// Converse CLM STAT Popup
Function EK0E5300()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for YCS-CLM-STAT-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "CLAIM STATUS CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCSTBL.YCSCD[XX0XWCT1] != "999") /* or End of Data*/
        if (YCSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCSTBL.YCSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCSTBL.YCSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && YCSTBL.YCSCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YCSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCSTBL.YCSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCSTBL.YCSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCSTBL.YCSCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0E5300

// Converse WAREHOUSE Popup
Function EK0E5500()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for XWH-WHSE-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "WAREHOUSE CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XWHTBL.XWHCD[XX0XWCT1] != "999") /* or End of Data*/
        if (XWHTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XWHTBL.XWHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XWHTBL.XWHNM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && XWHTBL.XWHCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XWHTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XWHTBL.XWHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XWHTBL.XWHNM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XWHTBL.XWHCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0E5500

// Converse SALES OFC Popup
Function EK0E5600()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for XSO-SLS-OFC-ID*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "SALES OFFICE ID DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XSOTBL.XSOCD[XX0XWCT1] != "999") /* or End of Data*/
        if (XSOTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSOTBL.XSOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSOTBL.XSONM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && XSOTBL.XSOCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XSOTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSOTBL.XSOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSOTBL.XSONM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XSOTBL.XSOCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0E5600

// Converse EK0EM002
Function EK0E8100()
   /* **/
   /* * Display EK0EM002*/
   /* **/
  if (EK0EW00.EK0EW-CURR-PAGE != EK0EM002.EK0EM-S2-CURR-PAGE)
    if (converseVar.validationMsgNum == 350 ||  /* No data found*/
    EK0EW00.EK0EW-MAX-PAGE == 0)               
      EK0EW00.EK0EW-CURR-PAGE = 1;
      EK0EW00.EK0EW-MAX-PAGE = 1;
      EK0EM002.EK0EM-S2-CURR-PAGE = 1;
      EK0EM002.EK0EM-S2-MAX-PAGE = 1;
         /* continue      /* Nothing to load/reload*/
    else
      EK0E8200(); /* Reload screen data*/
      EK0EM002.EK0EM-S2-CURR-PAGE = EK0EW00.EK0EW-CURR-PAGE;
      EK0EM002.EK0EM-S2-MAX-PAGE = EK0EW00.EK0EW-MAX-PAGE;
    end
  end

   /* Now set field attributes*/

  EK0E8400(); /* Set Field Attributes*/

  if (converseVar.validationMsgNum != 0)
    set EK0EM002 alarm;
  end

  converse EK0EM002 ;

  EK0EW00.EK0EW-POPUP-FL = "N";
  EK0EW02.EK0EW-SCREEN-CHNGD = "N";
  EK0EW00.EK0EW-SAVED-INFO = " ";
  EK0EW00.EK0EW-SV-CL-CLM-NBR = 0;
  EK0EW00.EK0EW-SV-IV-IVC-ID = 0;
  EK0EW00.EK0EW-SV-OP-CUST-ORD-ID = 0;
  EK0EW00.EK0EW-SV-OP-NIKE-ORD-ID = 0;
  EK0EW00.EK0EW-SV-CURR-PAGE = EK0EW00.EK0EW-CURR-PAGE;


   /* Verify if Search Criteria was modified*/

  if (EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID != 
  EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID || 
  EK0EM002.EK0EM-S2-CU-CO-ID != EK0EW00.EK0EW-S-CU-CO-ID || 
  EK0EM002.EK0EM-S2-CU-STOR-ID != EK0EW00.EK0EW-S-CU-STOR-ID || 
  EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF != 
  EK0EW00.EK0EW-S-XNX-DEPT-ID-XREF || 
  EK0EM002.EK0EM-S2-XGP-GPC-CD != EK0EW00.EK0EW-S-XGP-GPC-CD || 
  EK0EM002.EK0EM-S2-CL-ESC-ACT-CD != 
  EK0EW00.EK0EW-S-CL-ESC-ACT-CD || 
  EK0EM002.EK0EM-S2-CL-CLXCP-IND != EK0EW00.EK0EW-S-CL-CLXCP-IND || 
  EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD != 
  EK0EW00.EK0EW-S-YCT-CLM-TYP-CD || 
  EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 != 
  EK0EW00.EK0EW-S-YCS-CLM-STAT-CD1 || 
  EK0EM002.EK0EM-S2-DAYS-FROM != EK0EW00.EK0EW-S-DAYS-FROM || 
  EK0EM002.EK0EM-S2-DAYS-TO != EK0EW00.EK0EW-S-DAYS-TO || 
  EK0EM002.EK0EM-S2-ESC-DAYS-FL != 
  EK0EW00.EK0EW-S-ESC-DAYS-FL || 
  EK0EM002.EK0EM-S2-STAT-DAYS-FL != 
  EK0EW00.EK0EW-S-STAT-DAYS-FL || 
  EK0EM002.EK0EM-S2-CL-CLM-NBR != EK0EW00.EK0EW-S-CL-CLM-NBR || 
  EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD != 
  EK0EW00.EK0EW-S-YCR-CLM-RSN-CD || 
  EK0EM002.EK0EM-S2-YRC-RT-CSE-CD != 
  EK0EW00.EK0EW-S-YRC-RT-CSE-CD || 
  EK0EM002.EK0EM-S2-SM-SREP-ID != EK0EW00.EK0EW-S-SM-SREP-ID || 
  EK0EM002.EK0EM-S2-SM-SAGCY-ID != EK0EW00.EK0EW-S-SM-SAGCY-ID || 
  EK0EM002.EK0EM-S2-IV-IVC-ID != EK0EW00.EK0EW-S-IV-IVC-ID || 
  EK0EM002.EK0EM-S2-OP-CUST-PO != EK0EW00.EK0EW-S-OP-CUST-PO || 
  EK0EM002.EK0EM-S2-YPS-PODPOS-STAT-CD != 
  EK0EW00.EK0EW-S-YPS-PODPOS-STAT-CD || 
  EK0EM002.EK0EM-S2-CL-EST-CLM-VAL != 
  EK0EW00.EK0EW-S-CL-EST-CLM-VAL || 
  EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID != 
  EK0EW00.EK0EW-S-XSO-SLS-OFC-ID || 
  EK0EM002.EK0EM-S2-XWH-WHSE-CD != EK0EW00.EK0EW-S-XWH-WHSE-CD || 
  EK0EM002.EK0EM-S2-TF-CARR-CD != EK0EW00.EK0EW-S-TF-CARR-CD || 
  EK0EM002.EK0EM-S2-TF-PRO-NBR != EK0EW00.EK0EW-S-TF-PRO-NBR)

    EK0EW02.EK0EW-SCREEN-CHNGD = "Y";
    EK0EW00.EK0EW-SV-CURR-PAGE = 0;

    if (converseVar.eventKey is enter)

      EK0E8300(); /* Process Search Criteria*/

    end
  else

    EK0ES-VAL-SEARCH-2(); /* Validate Search Criteria*/

    if (EK0EW00.EK0EW-POPUP-FL == "Y")
      return;
    end

  end


   /* Check function keys (May exit application)*/

  EK0ES-CHECK-PFKEYS();

  if (converseVar.eventKey is pa2 ||  /* Refresh*/
  converseVar.eventKey is pf3 ||      /* or Exit*/
  converseVar.validationMsgNum != 0)  /* or errors*/
    return;
  end

end // end EK0E8100

// Load screen array
Function EK0E8200()
   /* **************************************************************/
   /* Load screen array and internal working storage array*/
   /* from temp storage.*/
   /* **************************************************************/

  set EK0EW02 empty; /* Clear record*/

  EK0EW00.EK0EW-SCR-IDX = 1; /* Init screen index*/
  EK0EW02.EK0EW-W02-IDX = 1; /* and W02 index*/
  EK0EW02.EK0EW-CURR-RCD = EK0EW00.EK0EW-CURR-RCD;

  TA5REC.TA5TSQIX = EK0EW00.EK0EW-CURR-PAGE;
  TA5REC.TA5FNCCD = "R";

  EK0ES-CALL-TA0050(); /* Read queue*/

  EK0EW02.EK0EW-TEMP-ITEM = EK0EW01.EK0EW-TEMP-ITEM;

  EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID = EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID;
  EK0EM002.EK0EM-S2-TOT-CLAIM-AMT = EK0EW00.EK0EW-S-TOT-CLAIM-AMT;
  EK0EM002.EK0EM-S2-LINE-COUNT = EK0EW00.EK0EW-S-LINE-COUNT;

   /* Now get the data from temp storage*/

  while (EK0EW-SCR-IDX <= EK0EW00.EK0EW-SCR-LINES)

    if (EK0EW02.EK0EW-CURR-RCD <= EK0EW00.EK0EW-MAX-RCD)

      EK0EM002.EK0EM-OP-CUST-PO[EK0EW-SCR-IDX] = EK0EW02.OP-CUST-PO[EK0EW-W02-IDX];
      EK0EM002.EK0EM-IV-IVC-ID[EK0EW-SCR-IDX] = EK0EW02.IV-IVC-ID[EK0EW-W02-IDX];
      EK0EM002.EK0EM-ADDL-IVC-FLAG[EK0EW-SCR-IDX] = EK0EW02.EK0EW-ADDL-IVC-FLAG[EK0EW-W02-IDX];
      EK0EW00.EK0EW-DATE-CCYYMMDD = EK0EW02.SR-SHP-DT[EK0EW-W02-IDX];
      EK0EW00.EK0EW-DATE-YR = EK0EW00.EK0EW-DATE-YY;
      EK0EW00.EK0EW-DATE-MO = EK0EW00.EK0EW-DATE-MM;
      EK0EW00.EK0EW-DATE-DY = EK0EW00.EK0EW-DATE-DD;
      EK0EM002.EK0EM-SR-SHP-DT[EK0EW-SCR-IDX] = EK0EW00.EK0EW-DATE-MMDDYY;

      EK0EM002.EK0EM-TF-CARR-CD[EK0EW-SCR-IDX] = EK0EW02.TF-CARR-CD[EK0EW-W02-IDX];
      EK0EM002.EK0EM-XWH-WHSE-CD[EK0EW-SCR-IDX] = EK0EW02.XWH-WHSE-CD[EK0EW-W02-IDX];
      EK0EM002.EK0EM-XSO-SLS-OFC-ID[EK0EW-SCR-IDX] = EK0EW02.XSO-SLS-OFC-ID[EK0EW-W02-IDX];
      EK0EM002.EK0EM-CL-CLXCP-IND[EK0EW-SCR-IDX] = EK0EW02.CL-CLXCP-IND[EK0EW-W02-IDX];
      EK0EM002.EK0EM-CL-RTN-FL[EK0EW-SCR-IDX] = EK0EW02.CL-RTN-FL[EK0EW-W02-IDX];
      EK0EM002.EK0EM-YCI-INSP-STAT-CD[EK0EW-SCR-IDX] = EK0EW02.YCI-INSP-STAT-CD[EK0EW-W02-IDX];

      if (EK0EW02.CL-TOT-CLM-QTY[EK0EW-W02-IDX] > 9999 || 
      EK0EW02.CL-TOT-CLM-QTY[EK0EW-W02-IDX] < -9999)
        EK0EM002.EK0EM-CL-TOT-CLM-QTY[EK0EW-SCR-IDX] = 9999;
      else
        EK0EM002.EK0EM-CL-TOT-CLM-QTY[EK0EW-SCR-IDX] = EK0EW02.CL-TOT-CLM-QTY[EK0EW-W02-IDX];
      end

      EK0EM002.EK0EM-TF-PRO-NBR[EK0EW-SCR-IDX] = EK0EW02.TF-PRO-NBR[EK0EW-W02-IDX];
      EK0EM002.EK0EM-CALC-RSLV-DAYS[EK0EW-SCR-IDX] = EK0EW02.EK0EW-CALC-RSLV-DAYS[EK0EW-W02-IDX];
    else
      EK0EM002.EK0EM-OP-CUST-PO[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-IV-IVC-ID[EK0EW-SCR-IDX] = 0;
      EK0EM002.EK0EM-ADDL-IVC-FLAG[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-SR-SHP-DT[EK0EW-SCR-IDX] = 0;
      EK0EM002.EK0EM-TF-CARR-CD[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-XWH-WHSE-CD[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-XSO-SLS-OFC-ID[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-CL-CLXCP-IND[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-CL-RTN-FL[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-YCI-INSP-STAT-CD[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-CL-TOT-CLM-QTY[EK0EW-SCR-IDX] = 0;
      EK0EM002.EK0EM-TF-PRO-NBR[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-CALC-RSLV-DAYS[EK0EW-SCR-IDX] = 0;

    end

    EK0EW02.EK0EW-CURR-RCD = EK0EW02.EK0EW-CURR-RCD + 1;
    EK0EW02.EK0EW-W02-IDX = EK0EW02.EK0EW-W02-IDX + 1;
    EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-IDX + 1;
  end

  EK0EW02.EK0EW-CURR-RCD = EK0EW00.EK0EW-CURR-RCD;

   /* **************************************************************/
                     /* END  EK0E3200*/
   /* **************************************************************/
end // end EK0E8200

// Process Search criteria
Function EK0E8300()

   /* Process Search criteria using Claim Type AND Claim Reason Codes*/

  EK0ES-PURGE-QUEUE();

  EK0ES-VAL-SEARCH-2(); /* Validate Search criteria*/

  if (converseVar.validationMsgNum == 0 ||  /* Search criteria is valid*/
  converseVar.validationMsgNum == 810)      /* Search criteria was selected from Popup*/

    EK0EW00.EK0EW-END-SCREEN-1 = "Y";
    EK0EW00.EK0EW-END-SCREEN-2 = "Y";

  else /* Blank out screen*/
    EK0EW00.EK0EW-SCR-IDX = 1;

    while (EK0EW00.EK0EW-SCR-IDX <= EK0EW00.EK0EW-SCR-LINES)

      EK0EM002.EK0EM-S2-TOT-CLAIM-AMT = 0;
      EK0EM002.EK0EM-S2-LINE-COUNT = 0;

      EK0EM002.EK0EM-OP-CUST-PO[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-IV-IVC-ID[EK0EW-SCR-IDX] = 0;
      EK0EM002.EK0EM-ADDL-IVC-FLAG[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-SR-SHP-DT[EK0EW-SCR-IDX] = 0;
      EK0EM002.EK0EM-TF-CARR-CD[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-XWH-WHSE-CD[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-XSO-SLS-OFC-ID[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-CL-CLXCP-IND[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-CL-RTN-FL[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-YCI-INSP-STAT-CD[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-CL-TOT-CLM-QTY[EK0EW-SCR-IDX] = 0;
      EK0EM002.EK0EM-TF-PRO-NBR[EK0EW-SCR-IDX] = " ";
      EK0EM002.EK0EM-CALC-RSLV-DAYS[EK0EW-SCR-IDX] = 0;

      EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-IDX + 1;
    end

    EK0EW00.EK0EW-CURR-PAGE = 1;
    EK0EW00.EK0EW-MAX-PAGE = 1;
    EK0EM002.EK0EM-S2-CURR-PAGE = 1;
    EK0EM002.EK0EM-S2-MAX-PAGE = 1;
  end
   /* **************************************************************/
                     /* END  EK0E8300*/
   /* **************************************************************/
end // end EK0E8300

// Set Field Attributes
Function EK0E8400()
  EK0EW00.EK0EW-SCR-IDX = EK0EW00.EK0EW-SCR-LINES;

  while (EK0EW00.EK0EW-SCR-IDX > 0)

    set EK0EM002.EK0EM-OP-CUST-PO[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-IV-IVC-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-ADDL-IVC-FLAG[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-SR-SHP-DT[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-TF-CARR-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-XWH-WHSE-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-XSO-SLS-OFC-ID[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-CL-CLXCP-IND[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-CL-RTN-FL[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-YCI-INSP-STAT-CD[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-CL-TOT-CLM-QTY[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-TF-PRO-NBR[EK0EW-SCR-IDX] initialAttributes;
    set EK0EM002.EK0EM-CALC-RSLV-DAYS[EK0EW-SCR-IDX] initialAttributes;

     /* Set to YELLOW if claim has been re-assigned*/

    if (EK0EW02.CL-COMP-FL[EK0EW-SCR-IDX] == "Y")
      set EK0EM002.EK0EM-OP-CUST-PO[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-IV-IVC-ID[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-ADDL-IVC-FLAG[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-SR-SHP-DT[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-TF-CARR-CD[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-XWH-WHSE-CD[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-XSO-SLS-OFC-ID[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-CL-CLXCP-IND[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-CL-RTN-FL[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-YCI-INSP-STAT-CD[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-CL-TOT-CLM-QTY[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-TF-PRO-NBR[EK0EW-SCR-IDX] yellow;
      set EK0EM002.EK0EM-CALC-RSLV-DAYS[EK0EW-SCR-IDX] yellow;
    end

    EK0EW-SCR-IDX = EK0EW-SCR-IDX - 1;

  end

   /* Set the field attributes for Search Fields*/
   /* and the rest of the screen fields*/

  if (converseVar.validationMsgNum == 0)

    set EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID initialAttributes;
    set EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID cursor;
    set EK0EM002.EK0EM-S2-CU-CO-ID initialAttributes;
    set EK0EM002.EK0EM-S2-CU-STOR-ID initialAttributes;
    set EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF initialAttributes;
    set EK0EM002.EK0EM-S2-XGP-GPC-CD initialAttributes;
    set EK0EM002.EK0EM-S2-CL-ESC-ACT-CD initialAttributes;
    set EK0EM002.EK0EM-S2-CL-CLXCP-IND initialAttributes;
    set EK0EM002.EK0EM-S2-TOT-CLAIM-AMT initialAttributes;
    set EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD initialAttributes;
    set EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 initialAttributes;
    set EK0EM002.EK0EM-S2-DAYS-FROM initialAttributes;
    set EK0EM002.EK0EM-S2-DAYS-TO initialAttributes;
    set EK0EM002.EK0EM-S2-ESC-DAYS-FL initialAttributes;
    set EK0EM002.EK0EM-S2-STAT-DAYS-FL initialAttributes;
    set EK0EM002.EK0EM-S2-CL-CLM-NBR initialAttributes;
    set EK0EM002.EK0EM-S2-LINE-COUNT initialAttributes;
    set EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD initialAttributes;
    set EK0EM002.EK0EM-S2-YRC-RT-CSE-CD initialAttributes;
    set EK0EM002.EK0EM-S2-SM-SREP-ID initialAttributes;
    set EK0EM002.EK0EM-S2-SM-SAGCY-ID initialAttributes;
    set EK0EM002.EK0EM-S2-IV-IVC-ID initialAttributes;
    set EK0EM002.EK0EM-S2-OP-CUST-PO initialAttributes;
    set EK0EM002.EK0EM-S2-YPS-PODPOS-STAT-CD initialAttributes;
    set EK0EM002.EK0EM-S2-CL-EST-CLM-VAL initialAttributes;
    set EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID initialAttributes;
    set EK0EM002.EK0EM-S2-XWH-WHSE-CD initialAttributes;
    set EK0EM002.EK0EM-S2-TF-CARR-CD initialAttributes;
    set EK0EM002.EK0EM-S2-TF-PRO-NBR initialAttributes;

  end

  if (EK0EW00.EK0EW-MAX-PAGE == 0 || 
  (EK0EW00.EK0EW-MAX-PAGE == 1 && 
  EK0EW00.EK0EW-MAX-RCD == 0)) /* If no Data to display*/
    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(350);
    end
  end

end // end EK0E8400

// get sales rep from vcurep01
Function EK0ES-CALL-KU1350()
                         /* ek0e-call-ku1350*/
      /* ------------------------------------------------------*/
   /* This statement accesses the customer/*/
   /* rep table (vcurep01) via nikeboth pgm ku1350 to get the correct*/
   /* rep and sales agency for the entered customer and product parameters*/


  set SQLCA empty;
  set KU5REC empty;
  set VIVITM02 empty;

  KU5REC.KU5-CALLING-PROGRAM-ID = "EK0E"; /* prepare key for*/
  KU5REC.KU5-CONV-DEPT-FLAG = "N"; /* call to ku1350*/
  KU5REC.KU5-READ-SA-FLAG = "N";
  KU5REC.KUCCOID = VCLHDR02.KUCCOID;
  KU5REC.KUMSTRID = VCLHDR02.KUMSTRID;
  KU5REC.XDVCD = VCLHDR02.XDVCD;
  KU5REC.XNXCD = VCLHDR02.XNXCD;
  KU5REC.XGPCD = VCLHDR02.XGPCD;

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE";

  EK0ES-CALL-TA0040(); /* Date Routine*/

  KU5REC.OP1ORCDT = TA2REC.TA2GRGGN;

  EK0ES-VIVITM02();

  KU5REC.XOBCD = "**";

  if (VIVITM02.SY1STNBR != "      ")
    KU5REC.SY1STNBR = VIVITM02.SY1STNBR;
    KU5REC.SY2CLRID = VIVITM02.SY2CLRID;
    KU5REC.XDMCD = VIVITM02.XDMCD;

    call "KU1350" (KU5REC) {isNoRefresh = yes, isExternal = yes}; /* get best choice rep*/

    if (KU5REC.KU5-READ-STATUS == "00"
     && KU5REC.SM4REPID > 0)
      EK0EW02.SM-SREP-ID[EK0EW-W02-IDX] = KU5REC.SM4REPID;
      EK0EW02.SM-SAGCY-ID[EK0EW-W02-IDX] = KU5REC.SM1AGYID;
    end
  end

end // end EK0ES-CALL-KU1350

// Call TA0020
Function EK0ES-CALL-TA0020()

   /* Call TA0020 to report DB2 or application errors*/

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "EK0E";
  TA1REC.TA1MAP = "EK0EM001";
  if (TA1REC.TA1TYPE == "DB2")
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end EK0ES-CALL-TA0020

// Call TA0040 for Date Rtn
Function EK0ES-CALL-TA0040()

   /* Call TA0040 to verify dates*/
   /* If problems, report to TA0020.*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (TA5REC.TA5RTNCD != 0000) /* Problems*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1LOC = "EK0ES-CALL-TA0050";
      TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0040";
      EK0ES-CALL-TA0020();
      converseLib.validationFailed(811); /* Unexpected error*/
      exit stack;
    end
  else
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0ES-CALL-TA0040";
    TAEREC.TAEDESC1 = "EZERT8 NE ALL 0 FROM TA0040";
    EK0ES-CALL-TA0020();
    converseLib.validationFailed(811); /* Unexpected error*/
    exit stack;
  end

end // end EK0ES-CALL-TA0040

// Call TA0050 for Temp Storage
Function EK0ES-CALL-TA0050()

   /* Call TA0050 to manage the Temp Storage quere*/
   /* If problems, report to TA0020.*/

  EK0EW01.EK0EW-RCD-SIZE = 1625;
  call "TA0050" (EK0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0000) /* Problems*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0ES-CALL-TA0050";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0050";
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    EK0ES-CALL-TA0020();
    converseLib.validationFailed(811); /* Unexpected error*/
    exit stack;
  end

end // end EK0ES-CALL-TA0050

// Check PF Key Pressed
Function EK0ES-CHECK-PFKEYS()

   /* Check for valid PF keys and Transfer Options*/

  if (converseVar.eventKey is pa2) /* Need refresh*/
    set EK0EW02 empty; /* Scrap table*/
    EK0EW00.EK0EW-MODE-IND = "I"; /* Switch to Inquire Mode*/
    EK0EW00.EK0EW-CURR-PAGE = 001;
    EK0EW00.EK0EW-CURR-RCD = 001;
    return;
  end

  if (converseVar.eventKey is enter) /* If ENTER pressed*/
    if ((EK0EM001.CATOAP == " " &&  /* If Opt is blank*/
    EK0EW00.EK0EW-SCREEN-NAME == "EK0EM001") || 
    (EK0EM002.CATOAP == " " &&      
    EK0EW00.EK0EW-SCREEN-NAME == "EK0EM002"))
      if ((EK0EM001.CAITEM == " " &&  /* And Item is blank*/
      EK0EW00.EK0EW-SCREEN-NAME == "EK0EM001") || 
      (EK0EM002.CAITEM == " " &&      
      EK0EW00.EK0EW-SCREEN-NAME == "EK0EM002"))
        return; /* OK, so exit*/
      else /* Cannot have item without option*/
        converseLib.validationFailed(285); /* Tell user*/
        set EK0EM001.CAITEM cursor, bold;
        set EK0EM002.CAITEM cursor, bold;
        return;
      end /* OK, so exit*/
    else
      EK0EW00.EK0EW-END-SCREEN-1 = "Y";
      EK0EW00.EK0EW-END-SCREEN-2 = "Y";

      EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

      COMMAREA.CATOAP = EK0EM001.CATOAP;
      COMMAREA.CAITEM = EK0EM001.CAITEM;

      XSEXIT(); /* Try to get there*/

      converseLib.validationFailed(006); /* Cannot transfer*/
      set EK0EM001.CATOAP cursor, bold;
      return;
    end
  else
    if ((EK0EW00.EK0EW-SCREEN-NAME == "EK0EM001" && 
    (EK0EM001.CATOAP != " " ||                      /* If Opt entered*/
    EK0EM001.CAITEM != " "))                        /* or item entered*/
     || (EK0EW00.EK0EW-SCREEN-NAME == "EK0EM002" && 
    (EK0EM002.CATOAP != " " ||                      
    EK0EM002.CAITEM != " ")))                      
      converseLib.validationFailed(812); /* Can't use option and PFkey*/
      set EK0EM001.CATOAP cursor, bold;
      set EK0EM002.CATOAP cursor, bold;
      set EK0EM001.CAITEM bold;
      set EK0EM002.CAITEM bold;
      return;
    end
  end

  if (converseVar.eventKey is pf1) /* Help System*/
    EK0EW00.EK0EW-END-SCREEN-1 = "Y";
    EK0EW00.EK0EW-END-SCREEN-2 = "Y";

    EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

    XSPF1(); /* Try to get there*/

    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf3) /* EK0A Menu*/

    EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

    EK0EW00.EK0EW-END-SCREEN-1 = "Y";
    EK0EW00.EK0EW-END-SCREEN-2 = "Y";

   /* MOVE COMMAREA.CAFROMAP TO COMMAREA.CATOAP;*/
    COMMAREA.CATOAP = "EK0A";

    XSEXIT(); /* Exit to another application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(811); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf4) /* Master Menu*/

    EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

    EK0EW00.EK0EW-END-SCREEN-1 = "Y";
    EK0EW00.EK0EW-END-SCREEN-2 = "Y";

    COMMAREA.CATOAP = "KL0A";

    XSEXIT(); /* Exit to another application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf5) /* KL0E via KL0A*/

    if (EK0EW02.EK0EW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0EW00.EK0EW-END-SCREEN-1 = "N";
      EK0EW00.EK0EW-END-SCREEN-2 = "N";
      return;
    end

    if (EK0EW02.EK0EW-SCREEN-TAGGED == "Y") /* User entered changes*/

      EK0E4000(); /* Validate column function, if any*/

      if (converseVar.validationMsgNum == 0)

        EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

        EK0EW00.EK0EW-END-SCREEN-1 = "Y";
        EK0EW00.EK0EW-END-SCREEN-2 = "Y";

        EKWREC.EKW-CAFROMAP = "EK0E";
        COMMAREA.CATOAP = "KL0A";

        EK0EW00.EK0EW-NUM-7 = EK0EW00.EK0EW-SV-CL-CLM-NBR;
        COMMAREA.CAITEM = EK0EW00.EK0EW-CHA-7;
        EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
        COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

        XSEXIT(); /* Exit to another application*/

        XSPF4(); /* Try to get there*/

        converseLib.validationFailed(811); /* Cannot transfer*/
        return;
      else
        return;
      end
    else
      EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

      EK0EW00.EK0EW-END-SCREEN-1 = "Y";
      EK0EW00.EK0EW-END-SCREEN-2 = "Y";

      EKWREC.EKW-CAFROMAP = "EK0E";
      COMMAREA.CATOAP = "KL0A";

      EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
      COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

      XSEXIT(); /* Exit to another application*/

      XSPF4(); /* Try to get there*/

      converseLib.validationFailed(811); /* Cannot transfer*/
      return;
    end
  end

  if (converseVar.eventKey is pf6) /* IV0G*/

    if (EK0EW02.EK0EW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0EW00.EK0EW-END-SCREEN-1 = "N";
      EK0EW00.EK0EW-END-SCREEN-2 = "N";
      return;
    end

    if (EK0EW02.EK0EW-SCREEN-TAGGED == "Y") /* User entered changes*/

      EK0E4000(); /* Validate column function, if any*/

      if (converseVar.validationMsgNum == 0)

        EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

        EK0EW00.EK0EW-END-SCREEN-1 = "Y";
        EK0EW00.EK0EW-END-SCREEN-2 = "Y";

        EKWREC.EKW-CAFROMAP = "EK0E";
        COMMAREA.CATOAP = "IV0G";
        EK0EW00.EK0EW-NUM-8 = EK0EW00.EK0EW-SV-IV-IVC-ID;
        COMMAREA.CAITEM = EK0EW00.EK0EW-CHA-8;
        EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
        COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

        XSEXIT(); /* Exit to another application*/

        XSPF4(); /* Try to get there*/
        converseLib.validationFailed(811); /* Cannot transfer*/
        return;
      else
        return;
      end
    else
      EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

      EK0EW00.EK0EW-END-SCREEN-1 = "Y";
      EK0EW00.EK0EW-END-SCREEN-2 = "Y";

      EKWREC.EKW-CAFROMAP = "EK0E";
      COMMAREA.CATOAP = "IV0G";
      EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
      COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

      XSEXIT(); /* Exit to another application*/

      XSPF4(); /* Try to get there*/
      converseLib.validationFailed(811); /* Cannot transfer*/
      return;
    end
  end

  if (converseVar.eventKey is pf7) /* scroll up*/
    if (EK0EW02.EK0EW-SCREEN-CHNGD == "Y" ||  /* User entered changes*/
    EK0EW02.EK0EW-SCREEN-TAGGED == "Y")       /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0EW00.EK0EW-END-SCREEN-1 = "N";
      EK0EW00.EK0EW-END-SCREEN-2 = "N";
      return;
    end
    if (EK0EW00.EK0EW-CURR-PAGE == 1)
      converseLib.validationFailed(813); /* at the first page*/
      return;
    else
      EK0EW00.EK0EW-CURR-PAGE = EK0EW00.EK0EW-CURR-PAGE - 1;
      return;
    end
  end

  if (converseVar.eventKey is pf8) /* scroll down*/
    if (EK0EW02.EK0EW-SCREEN-CHNGD == "Y" ||  /* User entered changes*/
    EK0EW02.EK0EW-SCREEN-TAGGED == "Y")       /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0EW00.EK0EW-END-SCREEN-1 = "N";
      EK0EW00.EK0EW-END-SCREEN-2 = "N";
      return;
    end
    if (EK0EW00.EK0EW-CURR-PAGE == EK0EW00.EK0EW-MAX-PAGE)
      converseLib.validationFailed(814); /* at the last page*/
      return;
    else
      EK0EW00.EK0EW-CURR-PAGE = EK0EW00.EK0EW-CURR-PAGE + 1;
      return;
    end
  end

  if (converseVar.eventKey is pf9) /* go to TOP (Page 1)*/
    if (EK0EW02.EK0EW-SCREEN-CHNGD == "Y" ||  /* User entered changes*/
    EK0EW02.EK0EW-SCREEN-TAGGED == "Y")       /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0EW00.EK0EW-END-SCREEN-1 = "N";
      EK0EW00.EK0EW-END-SCREEN-2 = "N";
      return;
    end
    if (EK0EW00.EK0EW-CURR-PAGE == 1)
      converseLib.validationFailed(813); /* at the first page*/
      return;
    else
      EK0EW00.EK0EW-CURR-PAGE = 1;
      return;
    end
  end

  if (converseVar.eventKey is pf10) /* go to BOTTOM (Last Page)*/
    if (EK0EW02.EK0EW-SCREEN-CHNGD == "Y" ||  /* User entered changes*/
    EK0EW02.EK0EW-SCREEN-TAGGED == "Y")       /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0EW00.EK0EW-END-SCREEN-1 = "N";
      EK0EW00.EK0EW-END-SCREEN-2 = "N";
      return;
    end
    if (EK0EW00.EK0EW-CURR-PAGE == EK0EW00.EK0EW-MAX-PAGE)
      converseLib.validationFailed(814); /* at the last page*/
      return;
    else
      EK0EW00.EK0EW-CURR-PAGE = EK0EW00.EK0EW-MAX-PAGE;
      return;
    end
  end

  if (converseVar.eventKey is pf11) /* Shift Screen*/
    if (EK0EW02.EK0EW-SCREEN-CHNGD == "Y" ||  /* User entered changes*/
    EK0EW02.EK0EW-SCREEN-TAGGED == "Y")       /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0EW00.EK0EW-END-SCREEN-1 = "N";
      EK0EW00.EK0EW-END-SCREEN-2 = "N";
      return;
    end
    if (EK0EW00.EK0EW-S-LINE-COUNT != 0) /* There is data*/
      if (EK0EW00.EK0EW-SCREEN-NAME == "EK0EM001")
        EK0EM002.EK0EM-S2-CURR-PAGE = 0; /* Force reload 2nd page*/
        EK0EW00.EK0EW-SCREEN-NAME = "EK0EM002";
      else
        EK0EW00.EK0EW-SCREEN-NAME = "EK0EM001";
        EK0EM001.EK0EM-S1-CURR-PAGE = 0; /* Force reload 1st page*/
        EK0EW00.EK0EW-END-SCREEN-2 = "Y";
      end
      return;
    end
  end

  if (converseVar.eventKey is pf12) /* User has confirmed*/
    if (EK0EW00.EK0EW-SCREEN-NAME == "EK0EM001" && 
    EK0EW00.EK0EW-MAX-RCD > 0) /* If in Map 1 and there's data*/
      return;
    end
  end

  if (converseVar.eventKey is pf13) /* PK0B*/

    if (EK0EW02.EK0EW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0EW00.EK0EW-END-SCREEN-1 = "N";
      EK0EW00.EK0EW-END-SCREEN-2 = "N";
      return;
    end

    if (EK0EW02.EK0EW-SCREEN-TAGGED == "Y") /* User entered changes*/

      EK0E4000(); /* Validate column function, if any*/

      if (converseVar.validationMsgNum == 0)

        EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

        EK0EW00.EK0EW-END-SCREEN-1 = "Y";
        EK0EW00.EK0EW-END-SCREEN-2 = "Y";

        EKWREC.EKW-CAFROMAP = "EK0E";
        COMMAREA.CATOAP = "PK0B";
        EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
        COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

        XSEXIT(); /* Exit to another application*/

        XSPF4(); /* Try to get there*/
        converseLib.validationFailed(811); /* Cannot transfer*/
        return;
      else
        return;
      end
    else
      EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

      EK0EW00.EK0EW-END-SCREEN-1 = "Y";
      EK0EW00.EK0EW-END-SCREEN-2 = "Y";

      EKWREC.EKW-CAFROMAP = "EK0E";
      COMMAREA.CATOAP = "PK0B";
      EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
      COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

      XSEXIT(); /* Exit to another application*/

      XSPF4(); /* Try to get there*/
      converseLib.validationFailed(811); /* Cannot transfer*/
      return;
    end
  end

  if (converseVar.eventKey is pf14) /* OM0M*/

    if (EK0EW02.EK0EW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0EW00.EK0EW-END-SCREEN-1 = "N";
      EK0EW00.EK0EW-END-SCREEN-2 = "N";
      return;
    end

    if (EK0EW02.EK0EW-SCREEN-TAGGED == "Y") /* User entered changes*/

      EK0E4000(); /* Validate column function, if any*/

      if (converseVar.validationMsgNum == 0)

        EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

        EK0EW00.EK0EW-END-SCREEN-1 = "Y";
        EK0EW00.EK0EW-END-SCREEN-2 = "Y";

        EKWREC.EKW-CAFROMAP = "EK0E";
        COMMAREA.CATOAP = "OM0M";

        EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
        COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

        XSEXIT(); /* Exit to another application*/

        XSPF4(); /* Try to get there*/
        converseLib.validationFailed(811); /* Cannot transfer*/
        return;
      else
        return;
      end
    else
      EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

      EK0EW00.EK0EW-END-SCREEN-1 = "Y";
      EK0EW00.EK0EW-END-SCREEN-2 = "Y";

      EKWREC.EKW-CAFROMAP = "EK0E";
      COMMAREA.CATOAP = "OM0M";

      EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
      COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

      XSEXIT(); /* Exit to another application*/

      XSPF4(); /* Try to get there*/
      converseLib.validationFailed(811); /* Cannot transfer*/
      return;
    end
  end

  if (converseVar.eventKey is pf15) /* EK0F*/

    if (EK0EW02.EK0EW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0EW00.EK0EW-END-SCREEN-1 = "N";
      EK0EW00.EK0EW-END-SCREEN-2 = "N";
      return;
    end

    if (EK0EW02.EK0EW-SCREEN-TAGGED == "Y") /* User entered changes*/

      EK0E4000(); /* Validate column function, if any*/

      if (converseVar.validationMsgNum == 0)

        EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

        EK0EW00.EK0EW-END-SCREEN-1 = "Y";
        EK0EW00.EK0EW-END-SCREEN-2 = "Y";

        EKWREC.EKW-CAFROMAP = "EK0E";
        COMMAREA.CATOAP = "EK0F";

        EK0EW00.EK0EW-NUM-9 = EK0EW00.EK0EW-SV-CL-CLM-NBR;
        COMMAREA.CAITEM = EK0EW00.EK0EW-CHA-9;
        EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
        COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

        XSEXIT(); /* Exit to another application*/

        XSPF4(); /* Try to get there*/
        converseLib.validationFailed(811); /* Cannot transfer*/
        return;
      else /* Error found while validating tagged lines*/
        return;
      end
    else

      EK0ES-PURGE-QUEUE(); /* Purge temp storage*/

      EK0EW00.EK0EW-END-SCREEN-1 = "Y";
      EK0EW00.EK0EW-END-SCREEN-2 = "Y";

      EKWREC.EKW-CAFROMAP = "EK0E";
      COMMAREA.CATOAP = "EK0F";

      EK0EW00.EK0EW-NUM-9 = 0;
      COMMAREA.CAITEM = EK0EW00.EK0EW-CHA-9;
      EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
      COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;

      XSEXIT(); /* Exit to another application*/

      XSPF4(); /* Try to get there*/
      converseLib.validationFailed(811); /* Cannot transfer*/
      return;
    end
  end


  converseLib.validationFailed(002); /* Invalid PF key*/

end // end EK0ES-CHECK-PFKEYS

// Calculate Esc/Stat Days Range
Function EK0ES-CLC-DAYS-RNG()
   /*  */
   /* CALCULATE ESCALATION/STATUS DAYS RANGE*/
   /*  */
   /* At this point, the user has entered a range of days for either*/
   /* Escalation Date or Claim Status Date. Accept the row whose number*/
   /* of days, since the claim was escalated/assigned or since the claim*/
   /* status was changed, fall in the range of days entered by the user.*/
   /*  */
   /* Notes:*/
   /*  */
   /* 1. If a value is entered on the DAYS FROM (1st) field only, the row*/
   /* to be selected must have the number of Escalation Days or Status*/
   /* Days be equal to or greater than the value entered;*/
   /*  */
   /* 2. If a value is entered on the DAYS TO (2nd) field only, the row*/
   /* to be selected must have the number of Escalation Days or Status*/
   /* Days be equal to or lesser than the value entered;*/
   /*  */
   /* 3. If values are entered on both DAYS FROM and DAYS TO fields, the*/
   /* row to be selected must have the number of Escalation Days or*/
   /* Status Days within and including the values entered.*/
   /*  */
   /* Process:*/
   /*  */
   /* First, determine if calculating for Escalation Days or Status Days*/
   /*  */
   /* If calculating for Escalation Days, first, get the Elapsed Days since*/
   /* current resolver was assigned the claim, by using the formula:*/
   /* (Elapsed Days = Current Date - Resolver Begin Date)*/
   /*  */
   /* For Original Resolver, Authorized Resolver, Manual Override User,*/
   /* or System Override User:*/
   /* calculate the number of days left before the claim will be*/
   /* escalated to the 1st Escalation level.*/
   /*  */
   /* If Original Resolver (VCLESX01.CL-RSLV-CD = 'O')*/
   /* or Authorized User (VCLESX01.CL-RSLV-CD = 'A')*/
   /* or Manual Override User (VCLESX01.CL-RSLV-CD = 'M')*/
   /* or System Override User (VCLESX01.CL-RSLV-CD = 'S')*/
   /* Escalation Days = 1st Escalations Days - Elapsed Days*/
   /*  */
   /* For 1st Escalation User, calculate the number of days left before*/
   /* the claim will be escalated to the 2nd Escalation Level.*/
   /*  */
   /* If 1st Escalation User (VCLESX01.CL-RSLV-CD = '1')*/
   /* Escalation Days = (2nd Escltn Days - 1st Escltn Days)*/
   /* -  Elapsed Days*/
   /*  */
   /* For the 2nd Escalation User (VCLESX01.CL-RSLV-CD = '2')*/
   /* Calculate the number of days that the claim has been escalated*/
   /* to 2nd Escalation User*/
   /*  */
   /* (Elapsed Days = Current Date - Resolver Begin Date)*/
   /* Escalation Days = Elapsed Days*/
   /*  */
   /*  */
   /* If calculating for Status Days,*/
   /*  */
   /* If claim status entered on criteria is 'POD', use formula:*/
   /* (Status Days = Current Date - CL-POD-POS-STAT-DT of VCLTRF01)*/
   /*  */
   /* Else, use formula:*/
   /* (Status Days = Current Date - CL-CLM-STAT-DT of VCLHDR02)*/
   /*  */
   /*  */

  EK0EW00.EK0EW-ELAPSED-DAYS = 0;
  EK0EW00.EK0EW-DAYS-BEFORE-ESC = 0;
  EK0EW00.EK0EW-DAYS-AFTER-ESC = 0;
  EK0EW00.EK0EW-CALC-RANGE-DAYS = 0;

  if (EK0EM001.EK0EM-S1-STAT-DAYS-FL == "Y")
     /*  */
     /* Calculate Status Days*/
     /*  */
    set TA2REC empty;

    if (EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 == "POD")

         /* Use POD-POS Status Date of Claim Traffic table*/

      TA2REC.TA2DBDFN = CLEREC.CLEPPSDT; /* From Date*/
    else

         /* Use Claim Status Date of Claim Header table*/

      TA2REC.TA2DBDFN = VCLHDR02.CLASTTDT;
    end

    TA2REC.TA2DBDTN = EK0EW00.ZZ-SDT;

    TA2REC.TA2DTOPT = "DAYSDIFF";

    EK0ES-CALL-TA0040(); /* Date Routine*/

    if (TA2REC.TA2RTNCD == 0)
      EK0EW00.EK0EW-CALC-RANGE-DAYS = TA2REC.TA2DBDDN;
    end

    return; /* then, exit*/

  end

   /* (EK0EM001.EK0EM-S1-ESC-DAYS-FL EQ 'Y')*/
   /*  */
   /* Calculate Escalation Days*/
   /*  */

   /* First, determine Elapsed Days since Resolver was assigned claim*/

  set TA2REC empty;

  TA2REC.TA2DBDFN = VCLESX01.CL-RSLV-BDT;
  TA2REC.TA2DBDTN = EK0EW00.ZZ-SDT;

  TA2REC.TA2DTOPT = "DAYSDIFF";

  EK0ES-CALL-TA0040(); /* Date Routine*/

  if (TA2REC.TA2RTNCD == 0)
    EK0EW00.EK0EW-ELAPSED-DAYS = TA2REC.TA2DBDDN;
  end

   /* Determine 1st or 2nd Escalation Days*/

  if (VCLESX01.CL-RSLV-CD == "O" ||  /* Original Resolver*/
  VCLESX01.CL-RSLV-CD == "1" ||      /* 1st Escalation User*/
  VCLESX01.CL-RSLV-CD == "A" ||      /* Authorized User*/
  VCLESX01.CL-RSLV-CD == "M" ||      /* Manual Override User*/
  VCLESX01.CL-RSLV-CD == "S")        /* System Override User*/

     /* Get VCLRES01 row using the Claim Type, Claim Reason, Claim*/
     /* Status and Exception Flag from the detail line, to determine*/
     /* the number of days before escalation occurs*/

    set VCLESC01 empty;

    VCLESC01.YCT-CLM-TYP-CD = VCLHDR02.YCTCD;
    VCLESC01.YCR-CLM-RSN-CD = VCLHDR02.YCRCD;
    VCLESC01.YCS-CLM-STAT-CD = VCLHDR02.YCSCD1;
    if (VCLHDR02.CLAXCIND > " ")
      VCLESC01.CL-XCEP-FL = VCLHDR02.CLAXCIND;
    else
      VCLESC01.CL-XCEP-FL = "N";
    end

    EK0ES-VCLESC01-S2(); /* Select Scan 2 VCLESC01*/

    if (SQLCA.VAGen_SQLCODE == 0)

      EK0ES-VCLESC01-N2(); /* Fetch Cursor 2 VCLESC01*/

      if (SQLCA.VAGen_SQLCODE == 0)

        if (VCLESX01.CL-RSLV-CD == "O" ||  /* Orig Rslvr*/
        VCLESX01.CL-RSLV-CD == "A" ||      /* Authorized User*/
        VCLESX01.CL-RSLV-CD == "M" ||      /* Man Ovrd User*/
        VCLESX01.CL-RSLV-CD == "S")        /* Sys Ovrd User*/

              /* Calc nbr of days before claim escalates to 1st level*/

          EK0EW00.EK0EW-DAYS-BEFORE-ESC = VCLESC01.CL-ESC-DAYS1;

        end

        if (VCLESX01.CL-RSLV-CD == "1") /* 1st Esc User*/

              /* Calc nbr of days before claim escalates to 2nd level*/

          EK0EW00.EK0EW-DAYS-BEFORE-ESC = VCLESC01.CL-ESC-DAYS2                                           - VCLESC01.CL-ESC-DAYS1;

        end

           /* Calculate Escalation Days*/
           /* 6/15 per SKELL1, set to 0 when Elapsed Days is greater than*/
           /* Days Before Escalation*/
           /* (since detail field not Signed)*/

        if (EK0EW00.EK0EW-ELAPSED-DAYS > EK0EW00.EK0EW-DAYS-BEFORE-ESC)
          EK0EW00.EK0EW-CALC-RANGE-DAYS = 0;
        else
          EK0EW00.EK0EW-CALC-RANGE-DAYS = EK0EW00.EK0EW-DAYS-BEFORE-ESC - EK0EW00.EK0EW-ELAPSED-DAYS;
        end

      end
    end

    EK0ES-VCLESC01-C2(); /* Close Cursor 2 VCLESC01*/

  end

  if (VCLESX01.CL-RSLV-CD == "2") /* 2nd Escltn User*/

     /*  */
     /* Calculate number of days after claim has escalated to them*/
     /* (Use the calculated Elapsed days)*/

    EK0EW00.EK0EW-CALC-RANGE-DAYS = EK0EW00.EK0EW-ELAPSED-DAYS;

  end
end // end EK0ES-CLC-DAYS-RNG

Function EK0ES-CLC-ESC-DAYS()
   /*  */
   /* CALCULATE ESCALATION DAYS*/
   /*  */
   /* This will calculate the number of days since a claim has been*/
   /* assigned to the 'current' resolver. Previous resolver(s) assigned*/
   /* to the claim will not need to calculate for this field.*/
   /*  */
   /* First, determine Elapsed Days as Current Date minus Resolver Begin*/
   /* Date (Elapsed Days = Current Date - Resolver Begin Date)*/
   /*  */
   /* For Original Resolver, Authorized Resolver, Manual Override User*/
   /* or System Override User:*/
   /* calculate the number of days left before the claim will be*/
   /* escalated to the 1st Escalation level.*/
   /*  */
   /* If Original Resolver (VCLESX01.CL-RSLV-CD = 'O')*/
   /* or Authorized User (VCLESX01.CL-RSLV-CD = 'A')*/
   /* or Manual Override User (VCLESX01.CL-RSLV-CD = 'M')*/
   /* or System Override User (VCLESX01.CL-RSLV-CD = 'S')*/
   /* Escalation Days = 1st Escalations Days - Elapsed Days*/
   /*  */
   /* For 1st Escalation User, calculate the number of days left before*/
   /* the claim will be escalated to the 2nd Escalation Level.*/
   /*  */
   /* If 1st Escalation User (VCLESX01.CL-RSLV-CD = '1')*/
   /* Escalation Days = (2nd Escltn Days - 1st Escltn Days)*/
   /* -  Elapsed Days*/
   /*  */
   /*  */
   /* For the 2nd Escalation User (VCLESX01.CL-RSLV-CD = '2')*/
   /* Calculate the number of days that the claim has been escalated*/
   /* to 2nd Escalation User*/
   /*  */
   /* Escalation Days = Elapsed Days*/
   /*  */
   /*  */

  EK0EW00.EK0EW-ELAPSED-DAYS = 0;
  EK0EW00.EK0EW-DAYS-BEFORE-ESC = 0;
  EK0EW00.EK0EW-DAYS-AFTER-ESC = 0;
  EK0EW00.EK0EW-CALC-RANGE-DAYS = 0;

  if (EK0EW02.CL-COMP-FL[EK0EW-W02-IDX] == "Y")
    return;
  end


   /* Determine Elapsed Days*/

  set TA2REC empty;

  TA2REC.TA2DBDFN = EK0EW02.CL-RSLV-BDT[EK0EW-W02-IDX];
  TA2REC.TA2DBDTN = EK0EW00.ZZ-SDT;

  TA2REC.TA2DTOPT = "DAYSDIFF";

  EK0ES-CALL-TA0040(); /* Date Routine*/

  if (TA2REC.TA2RTNCD == 0)
    EK0EW00.EK0EW-ELAPSED-DAYS = TA2REC.TA2DBDDN;
  end

   /* Determine 1st or 2nd Escalation Days*/

  if (EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "O" ||  /* Original Resolver*/
  EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "1" ||      /* 1st Escalation User*/
  EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "A" ||      /* Authorized User*/
  EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "M" ||      /* Manual Override User*/
  EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "S")        /* System Override User*/

     /* Get VCLRES01 row using the Claim Type, Claim Reason, Claim*/
     /* Status and Exception Flag from the detail line, to determine*/
     /* the number of days before escalation occurs*/

    set VCLESC01 empty;

    VCLESC01.YCT-CLM-TYP-CD = EK0EW02.YCT-CLM-TYP-CD[EK0EW-W02-IDX];
    VCLESC01.YCR-CLM-RSN-CD = EK0EW02.YCR-CLM-RSN-CD[EK0EW-W02-IDX];
    VCLESC01.YCS-CLM-STAT-CD = EK0EW02.YCS-CLM-STAT-CD1[EK0EW-W02-IDX];
    if (EK0EW02.CL-CLXCP-IND[EK0EW-W02-IDX] > " ")
      VCLESC01.CL-XCEP-FL = EK0EW02.CL-CLXCP-IND[EK0EW-W02-IDX];
    else
      VCLESC01.CL-XCEP-FL = "N";
    end

    EK0ES-VCLESC01-S2(); /* Select Scan 2 VCLESC01*/

    if (SQLCA.VAGen_SQLCODE == 0)

      EK0ES-VCLESC01-N2(); /* Fetch Cursor 2 VCLESC01*/

      if (SQLCA.VAGen_SQLCODE == 0)

        if (EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "O" ||  /* Orig Rslvr*/
        EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "A" ||      /* Auth User*/
        EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "M" ||      /* Man Ovrd User*/
        EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "S")        /* Sys Ovrd User*/

              /* Calc nbr of days before claim escalates to 1st level*/

          EK0EW00.EK0EW-DAYS-BEFORE-ESC = VCLESC01.CL-ESC-DAYS1;

        end

        if (EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "1") /* 1st Esc User*/

              /* Calc nbr of days before claim escalates to 2nd level*/

          EK0EW00.EK0EW-DAYS-BEFORE-ESC = VCLESC01.CL-ESC-DAYS2                                           - VCLESC01.CL-ESC-DAYS1;

        end

           /* Calculate Escalation Days*/
           /* 6/15 per SKELL1, set to 0 when Elapsed Days is greater than*/
           /* Days Before Escalation*/
           /* (since detail field not Signed)*/

        if (EK0EW00.EK0EW-ELAPSED-DAYS > EK0EW00.EK0EW-DAYS-BEFORE-ESC)
          EK0EW00.EK0EW-CALC-RANGE-DAYS = 0;
        else
          EK0EW00.EK0EW-CALC-RANGE-DAYS = EK0EW00.EK0EW-DAYS-BEFORE-ESC - EK0EW00.EK0EW-ELAPSED-DAYS;
        end

      end
    end

    EK0ES-VCLESC01-C2(); /* Close Cursor 2 VCLESC01*/

  end

  if (EK0EW02.CL-RSLV-CD[EK0EW-W02-IDX] == "2") /* 2nd Escltn User*/

     /*  */
     /* Calculate number of days after claim has escalated to them*/
     /* (Use the calculated Elapsed days)*/

    EK0EW00.EK0EW-CALC-RANGE-DAYS = EK0EW00.EK0EW-ELAPSED-DAYS;

  end
end // end EK0ES-CLC-ESC-DAYS

Function EK0ES-CLC-RSL-DAYS()
   /*  */
   /* Calculate Number of Days since assigned to the Original Resolver;*/
   /* Get the original resolver's row (CL-RSLV-CD = 'O') using the*/
   /* claim number on the detail line, then calculate the number of*/
   /* days between current date and date assigned to original resolver.*/
   /*  */

  EK0EW00.EK0EW-CALC-RSLV-DAYS = 0;

  set VCLESX01 empty;

  VCLESX01.CL-CLM-NBR = EK0EW02.CL-CLM-NBR[EK0EW-W02-IDX];

  EK0ES-VCLESX01-S1(); /* Select Scan-1 VCLESX01*/

  while (SQLCA.VAGen_SQLCODE == 0)

    EK0ES-VCLESX01-N1(); /* Fetch VCLESX01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)

      if (VCLESX01.CL-RSLV-CD == "O") /* row of Original Resolver*/

        set TA2REC empty;
        TA2REC.TA2DBDFN = VCLESX01.CL-RSLV-BDT;
        TA2REC.TA2DBDTN = EK0EW00.ZZ-SDT;

        TA2REC.TA2DTOPT = "DAYSDIFF";

        EK0ES-CALL-TA0040(); /* Date Routine*/

        if (TA2REC.TA2RTNCD == 0)
          EK0EW00.EK0EW-CALC-RSLV-DAYS = TA2REC.TA2DBDDN;
        end
        SQLCA.VAGen_SQLCODE = 100;
      end
    end
  end

  EK0ES-VCLESX01-C1(); /* Close Cursor 1 VCLESX01*/
end // end EK0ES-CLC-RSL-DAYS

// Calculate Addl Invoices
Function EK0ES-COUNT-IVC()
   /*  */
   /* CALCULATE ADDITIONAL INVOICES*/
   /*  */
   /*  */
  set CLBREC empty; /* DCLAIM.VCLIVX01 record*/

  CLBREC.CLACLMNB = VCLESX01.CL-CLM-NBR;

  EK0ES-VCLIVX01-T1(); /* Count 1 VCLIVX01 rows*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (EK0EW03.EK0EW-IO-IND >= 0 && 
    EK0EW03.EK0EW-IO-COUNT > 1)
      EK0EW00.EK0EW-ADDL-IVC-FLAG = "Y";
    else
      EK0EW00.EK0EW-ADDL-IVC-FLAG = "N";
    end
  else
    EK0EW00.EK0EW-ADDL-IVC-FLAG = "N";
  end
end // end EK0ES-COUNT-IVC

// Display Popup Window(s)
Function EK0ES-POP-WINDOW-1()
   /* ------------------------------------------------------------*/
   /* PopUp Window processing for EK0EM001's selected fields*/
   /* ------------------------------------------------------------*/

  EK0EW00.EK0EW-POPUP-FL = "Y";

  XPXX001(); /* Initialize popup window*/


  if (EK0EW00.EK0EW-POPUP-IND == "1" ||  /* Claim Type Code Popup (Search)*/
  EK0EW00.EK0EW-POPUP-IND == "3")        /* Claim Type Code Popup (Detail)*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0E5100(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0EW00.EK0EW-POPUP-IND == "1") /* Claim Type Popup on Search*/
        EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD = YCTTBL.YCTCD[XX0XWPIX];
        EK0EW00.EK0EW-S-YCT-CLM-TYP-CD = YCTTBL.YCTCD[XX0XWPIX];
        set EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD cursor;
        set EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD normal;
      else /* 3  /* Claim Type Popup on Detail*/
        EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] = YCTTBL.YCTCD[XX0XWPIX];
        set EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] cursor;
        set EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] normal;
      end
    else
      if (EK0EW00.EK0EW-POPUP-IND == "1") /* Claim Type Popup on Search*/
        EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD = " ";
        set EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD cursor;
        set EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD normal;
      else /* Claim Type Popup on Detail*/
        EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] = " ";
        set EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] cursor;
        set EK0EM001.EK0EM-YCT-CLM-TYP-CD[EK0EW-SCR-IDX] normal;
      end
    end

  end


  if (EK0EW00.EK0EW-POPUP-IND == "2" ||  /* Claim Reason Code Popup (Search)*/
  EK0EW00.EK0EW-POPUP-IND == "4")        /* Claim Reason Code Popup (Detail)*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0E5200(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0EW00.EK0EW-POPUP-IND == "2") /* Claim Rsn Popup on Search*/
        EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD = YCRTBL.YCRCD[XX0XWPIX];
        EK0EW00.EK0EW-S-YCR-CLM-RSN-CD = YCRTBL.YCRCD[XX0XWPIX];
        set EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD cursor;
        set EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD normal;
      else /* 4   /* Claim Rsn Popup on Detail*/
        EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] = YCRTBL.YCRCD[XX0XWPIX];
        set EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] cursor;
        set EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] normal;
      end
    else
      if (EK0EW00.EK0EW-POPUP-IND == "2") /* Claim Type Popup on Search*/
        EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD = " ";
        set EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD cursor;
        set EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD normal;
      else /* 4   /* Claim Type Popup on Detail*/
        EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] = " ";
        set EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] cursor;
        set EK0EM001.EK0EM-YCR-CLM-RSN-CD[EK0EW-SCR-IDX] normal;
      end
    end

  end


  if (EK0EW00.EK0EW-POPUP-IND == "5" ||  /* Claim Rsn Cd Popup (Search)*/
  EK0EW00.EK0EW-POPUP-IND == "6")        /* Claim Rsn Cd Popup (Detail)*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0E5300(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0EW00.EK0EW-POPUP-IND == "5") /* Clm Stat Popup on Search*/
        EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 = YCSTBL.YCSCD[XX0XWPIX];
        EK0EW00.EK0EW-S-YCS-CLM-STAT-CD1 = YCSTBL.YCSCD[XX0XWPIX];
        set EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 cursor;
        set EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 normal;
      else /* 6   /* Clm Stat Popup on Detail*/
        EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] = YCSTBL.YCSCD[XX0XWPIX];
        set EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] cursor;
        set EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] normal;
      end
    else
      if (EK0EW00.EK0EW-POPUP-IND == "5") /* Clm Stat Popup on Search*/
        EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 = " ";
        set EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 cursor;
        set EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 normal;
      else /* 6   /* Clm Stat Popup on Detail*/
        EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] = " ";
        set EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] cursor;
        set EK0EM001.EK0EM-YCS-CLM-STAT-CD1[EK0EW-SCR-IDX] normal;
      end
    end

  end


  if (EK0EW00.EK0EW-POPUP-IND == "9") /* Warehouse Cd Popup on Search*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0E5500(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      EK0EM001.EK0EM-S1-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];
      EK0EW00.EK0EW-S-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];
      set EK0EM001.EK0EM-S1-XWH-WHSE-CD cursor;
      set EK0EM001.EK0EM-S1-XWH-WHSE-CD normal;
    else
      EK0EM001.EK0EM-S1-XWH-WHSE-CD = " ";
      set EK0EM001.EK0EM-S1-XWH-WHSE-CD cursor;
      set EK0EM001.EK0EM-S1-XWH-WHSE-CD normal;
    end

  end


  if (EK0EW00.EK0EW-POPUP-IND == "11") /* Sales Office Popup on Search*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0E5600(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID = XSOTBL.XSOCD[XX0XWPIX];
      EK0EW00.EK0EW-S-XSO-SLS-OFC-ID = XSOTBL.XSOCD[XX0XWPIX];
      set EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID cursor;
      set EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID normal;
    else
      EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID = " ";
      set EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID cursor;
      set EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID normal;
    end

  end


  if (EK0EW00.EK0EW-POPUP-IND == "15" ||  /* GPC Popup on Search*/
  EK0EW00.EK0EW-POPUP-IND == "16")        /* GPC Popup on Detail*/

    XX0XW02.XX0XWHDR = "GENERAL PRODUCT CLASS CODE DESCRIPTION";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0EW00.EK0EW-POPUP-IND == "15") /* CR Anls Cd Popup on Search*/
        EK0EM001.EK0EM-S1-XGP-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        EK0EW00.EK0EW-S-XGP-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
        set EK0EM001.EK0EM-S1-XGP-GPC-CD cursor;
        set EK0EM001.EK0EM-S1-XGP-GPC-CD normal;
      else /* 16   /* CR Anls Cd Popup on Detail*/
        EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] = XGPTBL.XGPCD[XX0XWPIX];
        set EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] cursor;
        set EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] normal;
      end
    else
      if (EK0EW00.EK0EW-POPUP-IND == "15") /* GPC Cd Popup on Search*/
        EK0EM001.EK0EM-S1-XGP-GPC-CD = " ";
        set EK0EM001.EK0EM-S1-XGP-GPC-CD cursor;
        set EK0EM001.EK0EM-S1-XGP-GPC-CD normal;
      else /* 16   /* GPC Cd Popup on Detail*/
        EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] = " ";
        set EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] cursor;
        set EK0EM001.EK0EM-XGP-GPC-CD[EK0EW-SCR-IDX] normal;
      end
    end

  end


  converseLib.clearScreen();
   /* Clear screen before display*/

  converseLib.validationFailed(810); /* Requested list(s) displayed*/

   /* ------------------------------------------------------------*/
   /* End EK0ES-POP-WINDOW-1*/
   /* ------------------------------------------------------------*/
end // end EK0ES-POP-WINDOW-1

// Purge temp storage queue
Function EK0ES-PURGE-QUEUE()

   /* Call TA0050 to manage the Temp Storage quere*/
   /* If problems, report to TA0020.*/

  TA5REC.TA5APPID = "EK0E";
  TA5REC.TA5FNCCD = "P";
  EK0EW01.EK0EW-RCD-SIZE = 1625;
  call "TA0050" (EK0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0000) /* Problems*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0ES-PURGE-QUEUE";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0050";
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    EK0ES-CALL-TA0020();
    converseLib.validationFailed(001); /* Unexpected error*/
    exit stack;
  end

end // end EK0ES-PURGE-QUEUE

// Save detail information
Function EK0ES-SAVE-INFO()
   /*  */
   /* Save tagged detail line's information to be use to transfer from*/
   /* and return to this application*/
   /*  */

  EK0EW00.EK0EW-SAVED-INFO = " ";
  EK0EW00.EK0EW-SV-CL-CLM-NBR = 0;
  EK0EW00.EK0EW-SV-IV-IVC-ID = 0;
  EK0EW00.EK0EW-SV-OP-CUST-ORD-ID = 0;
  EK0EW00.EK0EW-SV-OP-NIKE-ORD-ID = 0;
  EK0EW00.EK0EW-SV-CURR-PAGE = 0;

  EK0EW00.EK0EW-SV-CURR-PAGE = EK0EM001.EK0EM-S1-CURR-PAGE;

  EK0EW00.EK0EW-SV-CL-CLM-NBR = EK0EM001.EK0EM-CL-CLM-NBR[EK0EW-SCR-IDX];

  EK0EW00.EK0EW-SV-IV-IVC-ID = EK0EW02.IV-IVC-ID[EK0EW-SCR-IDX];

   /* Also save order number information, to be added later*/


end // end EK0ES-SAVE-INFO

// Validate Search criteria
Function EK0ES-VAL-SEARCH-1()
   /* **********************************************************************/
   /* Modification History                                  **/
   /* Date     Userid    Description                                  **/
   /* ----------  ------  ---------------------------------------------- **/
   /* 09-16-1998  HMACAL  As per SKELL1, removed validation checking for **/
   /* the following codes if 'Inactive' or 'Active': **/
   /* Claim Reason, Claim Type, Claim Status, GPC,   **/
   /* Sales Office and Warehouse.                    **/
   /* **********************************************************************/

   /* For EK0EM001*/
   /*  */
   /* Validate the search criteria entered.*/
   /* Note: Not all fields need to be validated*/


  EK0EW00.EK0EW-S-CL-ESC-ACT-CD = EK0EM001.EK0EM-S1-CL-ESC-ACT-CD;
  EK0EW00.EK0EW-S-TOT-CLAIM-AMT = EK0EM001.EK0EM-S1-TOT-CLAIM-AMT;
  EK0EW00.EK0EW-S-CL-CLM-NBR = EK0EM001.EK0EM-S1-CL-CLM-NBR;
  EK0EW00.EK0EW-S-LINE-COUNT = EK0EM001.EK0EM-S1-LINE-COUNT;
  EK0EW00.EK0EW-S-IV-IVC-ID = EK0EM001.EK0EM-S1-IV-IVC-ID;
  EK0EW00.EK0EW-S-OP-CUST-PO = EK0EM001.EK0EM-S1-OP-CUST-PO;
  EK0EW00.EK0EW-S-YPS-PODPOS-STAT-CD = EK0EM001.EK0EM-S1-YPS-PODPOS-STAT-CD;
  EK0EW00.EK0EW-S-YRC-RT-CSE-CD = EK0EM001.EK0EM-S1-YRC-RT-CSE-CD;
  EK0EW00.EK0EW-S-CL-EST-CLM-VAL = EK0EM001.EK0EM-S1-CL-EST-CLM-VAL;
  EK0EW00.EK0EW-S-TF-PRO-NBR = EK0EM001.EK0EM-S1-TF-PRO-NBR;


   /* Validate Carrier Code*/

  EK0EW00.EK0EW-S-TF-CARR-CD = EK0EM001.EK0EM-S1-TF-CARR-CD;

  if (EK0EM001.EK0EM-S1-TF-CARR-CD == " ")
    set EK0EM001.EK0EM-S1-TF-CARR-CD normal;
  else
    set TF1REC empty;

    TF1REC.TF1CARCD = EK0EM001.EK0EM-S1-TF-CARR-CD;

    EK0ES-VCARR001-S(); /* Select VCARR001 unique row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0EM001.EK0EM-S1-TF-CARR-CD normal;
    else
      converseLib.validationFailed(403); /* Carrier Code is invalid*/
      set EK0EM001.EK0EM-S1-TF-CARR-CD cursor, bold;
    end
  end



   /* Validate Warehouse Code*/

  if (EK0EM001.EK0EM-S1-XWH-WHSE-CD == " ")
    EK0EW00.EK0EW-S-XWH-WHSE-CD = EK0EM001.EK0EM-S1-XWH-WHSE-CD;

    set EK0EM001.EK0EM-S1-XWH-WHSE-CD normal;
  else
    EK0EW00.EK0EW-3-CHAR = EK0EM001.EK0EM-S1-XWH-WHSE-CD;
    if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
    EK0EW00.EK0EW-2ND-CHAR == "?")

      EK0EW00.EK0EW-POPUP-FL = "Y";
      EK0EW00.EK0EW-POPUP-IND = "9"; /* Warehouse Code Popup*/

      EK0ES-POP-WINDOW-1();

      return; /* Redisplay map*/
    end

    EK0EW00.EK0EW-S-XWH-WHSE-CD = EK0EM001.EK0EM-S1-XWH-WHSE-CD;

    if (EK0EM001.EK0EM-S1-XWH-WHSE-CD != "99" && 
    (EK0EM001.EK0EM-S1-XWH-WHSE-CD in XWHTBL.XWHCD)) /* AND*/
     /* XWHTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0EM001.EK0EM-S1-XWH-WHSE-CD normal;
    else
      converseLib.validationFailed(258); /* Warehouse Code is invalid*/
      set EK0EM001.EK0EM-S1-XWH-WHSE-CD cursor, bold;
    end
  end


   /* Validate Sales Office Id*/

  if (EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID == " ")
    EK0EW00.EK0EW-S-XSO-SLS-OFC-ID = EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID;

    set EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID normal;
  else
    EK0EW00.EK0EW-3-CHAR = EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID;
    if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
    EK0EW00.EK0EW-2ND-CHAR == "?")

      EK0EW00.EK0EW-POPUP-FL = "Y";
      EK0EW00.EK0EW-POPUP-IND = "11"; /* Sales Office Popup*/

      EK0ES-POP-WINDOW-1();

      return; /* Redisplay map*/
    end

    EK0EW00.EK0EW-S-XSO-SLS-OFC-ID = EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID;

    if (EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID != "99" && 
    (EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID in XSOTBL.XSOCD)) /* AND*/
     /* XSOTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID normal;
    else
      converseLib.validationFailed(257); /* Sales Office is invalid*/
      set EK0EM001.EK0EM-S1-XSO-SLS-OFC-ID cursor, bold;
    end
  end


   /* Validate Sales Agency Id*/

  EK0EW00.EK0EW-S-SM-SAGCY-ID = EK0EM001.EK0EM-S1-SM-SAGCY-ID;

  if (EK0EM001.EK0EM-S1-SM-SAGCY-ID == " ")
    set EK0EM001.EK0EM-S1-SM-SAGCY-ID normal;
  else
    set SM5REC empty;

    SM5REC.SM1AGYID = EK0EM001.EK0EM-S1-SM-SAGCY-ID;

    EK0ES-VRAGCY01-S2(); /* Select Scan 2 VRAGCY01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)

      EK0ES-VRAGCY01-N2(); /* Fetch 2 VRAGCY01 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        set EK0EM001.EK0EM-S1-SM-SAGCY-ID normal;
      else
        converseLib.validationFailed(247); /* Agency Id is invalid*/
        set EK0EM001.EK0EM-S1-SM-SAGCY-ID cursor, bold;
      end
    else
      converseLib.validationFailed(247); /* Agency Id is invalid*/
      set EK0EM001.EK0EM-S1-SM-SAGCY-ID cursor, bold;
    end

    EK0ES-VRAGCY01-C2(); /* Close 2 VRAGCY01 row*/

  end


   /* Validate Sales Representative Id*/

  EK0EW00.EK0EW-S-SM-SREP-ID = EK0EM001.EK0EM-S1-SM-SREP-ID;

  if (EK0EM001.EK0EM-S1-SM-SREP-ID == 0)
    set EK0EM001.EK0EM-S1-SM-SREP-ID normal;
  else
    set SM4REC empty;

    SM4REC.SM4REPID = EK0EM001.EK0EM-S1-SM-SREP-ID;

    EK0ES-VREPS001-S(); /* Select Unique VREPS001 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0EM001.EK0EM-S1-SM-SREP-ID normal;
    else
      converseLib.validationFailed(135); /* Serv Rep Id is invalid*/
      set EK0EM001.EK0EM-S1-SM-SREP-ID cursor, bold;
    end
  end

   /* Validate Claim Reason Code*/

  EK0EW00.EK0EW-3-CHAR = EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD;

  if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
  EK0EW00.EK0EW-2ND-CHAR == "?" || 
  EK0EW00.EK0EW-3RD-CHAR == "?")

    EK0EW00.EK0EW-POPUP-IND = "2";

    EK0ES-POP-WINDOW-1(); /* Display PopUp Window*/

    return;
  end

  EK0EW00.EK0EW-S-YCR-CLM-RSN-CD = EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD;

  if (EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD == " ")
    set EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD normal;
  else
    if (EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD == "999") /* End of data*/
      converseLib.validationFailed(817); /* Claim Reason is invalid*/
      set EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD cursor, bold;
    else
      if (EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD in YCRTBL.YCRCD) /* AND*/
        /* YCRTBL.XXXSTAT(EZETST) = 'A'; /* Active*/
        set EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD normal;
      else
        converseLib.validationFailed(817); /* Claim Reason is invalid*/
        set EK0EM001.EK0EM-S1-YCR-CLM-RSN-CD cursor, bold;
      end
    end
  end


   /* Validate Escalation/Status Days Range/Flag*/

  EK0EW00.EK0EW-S-STAT-DAYS-FL = EK0EM001.EK0EM-S1-STAT-DAYS-FL;

  if (EK0EM001.EK0EM-S1-STAT-DAYS-FL == " " || 
  EK0EM001.EK0EM-S1-STAT-DAYS-FL == "Y")
    set EK0EM001.EK0EM-S1-STAT-DAYS-FL normal;
  else
    converseLib.validationFailed(863); /* Invalid value; Must be 'Y' when specified*/
    set EK0EM001.EK0EM-S1-STAT-DAYS-FL cursor, bold;
  end

  EK0EW00.EK0EW-S-ESC-DAYS-FL = EK0EM001.EK0EM-S1-ESC-DAYS-FL;

  if (EK0EM001.EK0EM-S1-ESC-DAYS-FL == " " || 
  EK0EM001.EK0EM-S1-ESC-DAYS-FL == "Y")
    set EK0EM001.EK0EM-S1-ESC-DAYS-FL normal;
  else
    converseLib.validationFailed(863); /* Invalid value; Must be 'Y' when specified*/
    set EK0EM001.EK0EM-S1-ESC-DAYS-FL cursor, bold;
  end

  if (EK0EM001.EK0EM-S1-ESC-DAYS-FL == "Y" && 
  EK0EM001.EK0EM-S1-STAT-DAYS-FL == "Y")

    converseLib.validationFailed(864); /* Select only one flag*/
    set EK0EM001.EK0EM-S1-ESC-DAYS-FL cursor, bold;
    set EK0EM001.EK0EM-S1-STAT-DAYS-FL bold;

  end
  if ((EK0EM001.EK0EM-S1-DAYS-FROM > 0 || 
  EK0EM001.EK0EM-S1-DAYS-TO > 0) && 
  EK0EM001.EK0EM-S1-ESC-DAYS-FL == " " && 
  EK0EM001.EK0EM-S1-STAT-DAYS-FL == " ")

    converseLib.validationFailed(865); /* Flag required when range is specified*/
    set EK0EM001.EK0EM-S1-ESC-DAYS-FL cursor, bold;
    set EK0EM001.EK0EM-S1-STAT-DAYS-FL bold;
  end

  EK0EW00.EK0EW-S-DAYS-FROM = EK0EM001.EK0EM-S1-DAYS-FROM;
  EK0EW00.EK0EW-S-DAYS-TO = EK0EM001.EK0EM-S1-DAYS-TO;
  set EK0EM001.EK0EM-S1-DAYS-TO normal;
  set EK0EM001.EK0EM-S1-DAYS-FROM normal;

  if ((EK0EM001.EK0EM-S1-DAYS-FROM == 0 && 
  EK0EM001.EK0EM-S1-DAYS-TO == 0) && 
  (EK0EM001.EK0EM-S1-ESC-DAYS-FL == "Y" || 
  EK0EM001.EK0EM-S1-STAT-DAYS-FL == "Y"))
    converseLib.validationFailed(866); /* Days from/to required when flag specified*/
    set EK0EM001.EK0EM-S1-DAYS-TO bold;
    set EK0EM001.EK0EM-S1-DAYS-FROM bold, cursor;
  end

  if (EK0EM001.EK0EM-S1-DAYS-TO > 0)
    if (EK0EM001.EK0EM-S1-DAYS-FROM > EK0EM001.EK0EM-S1-DAYS-TO)
      converseLib.validationFailed(867); /* Days To must be equal or GT Days From*/
      set EK0EM001.EK0EM-S1-DAYS-TO bold;
      set EK0EM001.EK0EM-S1-DAYS-FROM bold, cursor;
    end
  end


   /* Validate Claim Status Code*/

  EK0EW00.EK0EW-3-CHAR = EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1;

  if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
  EK0EW00.EK0EW-2ND-CHAR == "?" || 
  EK0EW00.EK0EW-3RD-CHAR == "?")

    EK0EW00.EK0EW-POPUP-FL = "Y";
    EK0EW00.EK0EW-POPUP-IND = "5"; /* Claim Rsn PopUp*/

    EK0ES-POP-WINDOW-1();

    return;
  end

  EK0EW00.EK0EW-S-YCS-CLM-STAT-CD1 = EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1;

  if (EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 == " ")
    set EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 normal;
  else
    if (EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 != "999" && 
    (EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 in YCSTBL.YCSCD)) /* AND*/
     /* YCSTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 normal;
    else
      converseLib.validationFailed(816); /* Claim Status is invalid*/
      set EK0EM001.EK0EM-S1-YCS-CLM-STAT-CD1 cursor, bold;
    end
  end


   /* Validate Claim Type Code*/

  EK0EW00.EK0EW-3-CHAR = EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD;

  if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
  EK0EW00.EK0EW-2ND-CHAR == "?" || 
  EK0EW00.EK0EW-3RD-CHAR == "?")

    EK0EW00.EK0EW-POPUP-IND = "1";

    EK0ES-POP-WINDOW-1(); /* Display PopUp Window*/

    return;
  end

  EK0EW00.EK0EW-S-YCT-CLM-TYP-CD = EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD;

  if (EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD == "  ")
    EK0EW00.EK0EW-S-YCT-CLM-TYP-CD = " ";
    set EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD normal;
  else
    if (EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD == "999") /* End of data*/
      converseLib.validationFailed(087); /* Claim Type is invalid*/
      set EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD cursor, bold;
    else
      if (EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD in YCTTBL.YCTCD) /* AND*/
        /* YCTTBL.XXXSTAT(EZETST) EQ 'A'; /* Active*/
        set EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD normal;
           /* continue*/
      else
        converseLib.validationFailed(087); /* Claim Type is invalid*/
        set EK0EM001.EK0EM-S1-YCT-CLM-TYP-CD cursor, bold;
      end
    end
  end


   /* Validate Claim Exception Flag*/

  EK0EW00.EK0EW-S-CL-CLXCP-IND = EK0EM001.EK0EM-S1-CL-CLXCP-IND;

  if (EK0EM001.EK0EM-S1-CL-CLXCP-IND == " ")
    set EK0EM001.EK0EM-S1-CL-CLXCP-IND normal;
  else
    if (EK0EM001.EK0EM-S1-CL-CLXCP-IND == "Y" || 
    EK0EM001.EK0EM-S1-CL-CLXCP-IND == "N")
      set EK0EM001.EK0EM-S1-CL-CLXCP-IND normal;
    else
      converseLib.validationFailed(815); /* Invalid Value, must be Y or N*/
      set EK0EM001.EK0EM-S1-CL-CLXCP-IND bold, cursor;
    end
  end


   /* Validate GPC*/

  if (EK0EM001.EK0EM-S1-XGP-GPC-CD == " ")
    EK0EW00.EK0EW-S-XGP-GPC-CD = EK0EM001.EK0EM-S1-XGP-GPC-CD;

    set EK0EM001.EK0EM-S1-XGP-GPC-CD normal;
  else
    EK0EW00.EK0EW-3-CHAR = EK0EM001.EK0EM-S1-XGP-GPC-CD;
    if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
    EK0EW00.EK0EW-2ND-CHAR == "?")

      EK0EW00.EK0EW-POPUP-FL = "Y";
      EK0EW00.EK0EW-POPUP-IND = "15"; /* GPC Popup*/

      EK0ES-POP-WINDOW-1();

      return; /* Redisplay map*/
    end

    EK0EW00.EK0EW-S-XGP-GPC-CD = EK0EM001.EK0EM-S1-XGP-GPC-CD;

    if (EK0EM001.EK0EM-S1-XGP-GPC-CD != "00" && 
    EK0EM001.EK0EM-S1-XGP-GPC-CD != "99" && 
    (EK0EM001.EK0EM-S1-XGP-GPC-CD in XGPTBL.XGPCD)) /* AND*/
     /* XGPTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0EM001.EK0EM-S1-XGP-GPC-CD normal;
    else
      converseLib.validationFailed(086); /* GPC is invalid*/
      set EK0EM001.EK0EM-S1-XGP-GPC-CD cursor, bold;
    end
  end


   /* Validate Department Id*/

  EK0EW00.EK0EW-S-XNX-DEPT-ID-XREF = EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF;

  if (EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF == 0)
    set EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF normal;
  else
    if (EK0EM001.EK0EM-S1-CU-CO-ID > 0)

      set KUJREC empty;

      KUJREC.KUCCOID = EK0EM001.EK0EM-S1-CU-CO-ID;
      KUJREC.XNXCD = EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF;

      EK0ES-VDEPT001-S(); /* Select Unique VDEPT001 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        set EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF normal;
      else
        converseLib.validationFailed(693); /* Dept Id is invalid*/
        set EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF cursor, bold;
      end
    else
      converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
      set EK0EM001.EK0EM-S1-CU-CO-ID cursor, bold;
      set EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF bold;
    end
  end


   /* Validate Company Store Id*/

  EK0EW00.EK0EW-S-CU-STOR-ID = EK0EM001.EK0EM-S1-CU-STOR-ID;

  if (EK0EM001.EK0EM-S1-CU-STOR-ID == 0)
    set EK0EM001.EK0EM-S1-CU-STOR-ID normal;
  else
    if (EK0EM001.EK0EM-S1-CU-CO-ID > 0)

      set VSTORE02 empty;

      VSTORE02.CU-CO-ID = EK0EM001.EK0EM-S1-CU-CO-ID;
      VSTORE02.CU-STOR-ID = EK0EM001.EK0EM-S1-CU-STOR-ID;

      EK0ES-VSTORE02-S(); /* Select Unique VSTORE02 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        set EK0EM001.EK0EM-S1-CU-STOR-ID normal;
      else
        converseLib.validationFailed(082); /* Store Id is invalid*/
        set EK0EM001.EK0EM-S1-CU-STOR-ID cursor, bold;
      end
    else
      converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
      set EK0EM001.EK0EM-S1-CU-CO-ID cursor, bold;
      set EK0EM001.EK0EM-S1-CU-STOR-ID bold;
    end
  end


   /* Validate Customer Company Id*/

  EK0EW00.EK0EW-S-CU-CO-ID = EK0EM001.EK0EM-S1-CU-CO-ID;

  if (EK0EM001.EK0EM-S1-CU-CO-ID == 0)
    if (EK0EM001.EK0EM-S1-CU-STOR-ID > 0 || 
    EK0EM001.EK0EM-S1-XNX-DEPT-ID-XREF > 0)
      converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
      set EK0EM001.EK0EM-S1-CU-CO-ID cursor, bold;
    else
      set EK0EM001.EK0EM-S1-CU-CO-ID normal;
    end
  else
    set KUCREC empty;

    KUCREC.KUCCOID = EK0EM001.EK0EM-S1-CU-CO-ID;

    EK0ES-VCMPNY01-S(); /* Select Unique VCMPNY01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0EM001.EK0EM-S1-CU-CO-ID normal;
    else
      converseLib.validationFailed(083); /* Customer Number is invalid*/
      set EK0EM001.EK0EM-S1-CU-CO-ID cursor, bold;
    end
  end


   /* Validate Resolver/CR Analyst User Id*/
   /* Resolver must exist on VCLRES01; If Resolver Id entered is not*/
   /* the current screen User, escalation would only be allowed if*/
   /* both belong to the same Dept Id, otherwise, only Inquiry*/
   /* access will be allowed.*/

  EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID = EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID;

  if (EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID == " ")
    EK0EW00.EK0EW-ALLOW-ACCESS-FL = "N";
    converseLib.validationFailed(832); /* Resolver is required*/
    set EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID cursor, bold;
  else
    set VCLRES01 empty;

    VCLRES01.CL-CR-ANLS-USER-ID = EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID;

    EK0ES-VCLRES01-S3(); /* Select Scan-3 VCLRES01 row*/

    EK0ES-VCLRES01-N3(); /* Fetch Cursor-3 VCLRES01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID == 
      COMMAREA.CAUSERID)
        set EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID normal;
        EK0EW00.EK0EW-ALLOW-ACCESS-FL = "Y";
        EK0EW00.EK0EW-U-XXX-SCRTY-USER-ID = VCLRES01.XXX-SCRTY-USER-ID;
        EK0EW00.EK0EW-U-CL-ESC-USER-ID1 = VCLRES01.CL-ESC-USER-ID1;
        EK0EW00.EK0EW-U-CL-ESC-USER-ID2 = VCLRES01.CL-ESC-USER-ID2;
        EK0EW00.EK0EW-U-XND-NIKE-DEPT-ID = VCLRES01.XND-NIKE-DEPT-ID;
      else
        if (VCLRES01.XND-NIKE-DEPT-ID == 
        EK0EW00.EK0EW-U-XND-NIKE-DEPT-ID)
          set EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID normal;
          EK0EW00.EK0EW-ALLOW-ACCESS-FL = "Y";
          EK0EW00.EK0EW-U-XXX-SCRTY-USER-ID = VCLRES01.XXX-SCRTY-USER-ID;
          EK0EW00.EK0EW-U-CL-ESC-USER-ID1 = VCLRES01.CL-ESC-USER-ID1;
          EK0EW00.EK0EW-U-CL-ESC-USER-ID2 = VCLRES01.CL-ESC-USER-ID2;
          EK0EW00.EK0EW-U-XND-NIKE-DEPT-ID = VCLRES01.XND-NIKE-DEPT-ID;
        else /* Resolver entered not within same Dept as User*/
          EK0EW00.EK0EW-ALLOW-ACCESS-FL = "N";
        end
      end
    else
      EK0EW00.EK0EW-ALLOW-ACCESS-FL = "N";
      converseLib.validationFailed(868); /* Resolver not on VCLRES01*/
      set EK0EM001.EK0EM-S1-CL-CR-ANLS-USER-ID cursor, bold;
    end

    EK0ES-VCLRES01-C3(); /* Close Cursor-3 VCLRES01 row*/
  end
end // end EK0ES-VAL-SEARCH-1

// Validate Search criteria
Function EK0ES-VAL-SEARCH-2()
   /* **********************************************************************/
   /* Modification History                                  **/
   /* Date     Userid    Description                                  **/
   /* ----------  ------  ---------------------------------------------- **/
   /* 09-16-1998  HMACAL  As per SKELL1, removed validation checking for **/
   /* the following codes if 'Inactive' or 'Active': **/
   /* Claim Reason, Claim Type, Claim Status, GPC,   **/
   /* Sales Office and Warehouse.                    **/
   /* **********************************************************************/

   /* For EK0EM002*/
   /*  */
   /* Validate the search criteria entered.*/
   /* Note: Not all fields need to be validated*/


  EK0EW00.EK0EW-S-CL-ESC-ACT-CD = EK0EM002.EK0EM-S2-CL-ESC-ACT-CD;
  EK0EW00.EK0EW-S-TOT-CLAIM-AMT = EK0EM002.EK0EM-S2-TOT-CLAIM-AMT;
  EK0EW00.EK0EW-S-CL-CLM-NBR = EK0EM002.EK0EM-S2-CL-CLM-NBR;
  EK0EW00.EK0EW-S-LINE-COUNT = EK0EM002.EK0EM-S2-LINE-COUNT;
  EK0EW00.EK0EW-S-IV-IVC-ID = EK0EM002.EK0EM-S2-IV-IVC-ID;
  EK0EW00.EK0EW-S-OP-CUST-PO = EK0EM002.EK0EM-S2-OP-CUST-PO;
  EK0EW00.EK0EW-S-YPS-PODPOS-STAT-CD = EK0EM002.EK0EM-S2-YPS-PODPOS-STAT-CD;
  EK0EW00.EK0EW-S-YRC-RT-CSE-CD = EK0EM002.EK0EM-S2-YRC-RT-CSE-CD;
  EK0EW00.EK0EW-S-CL-EST-CLM-VAL = EK0EM002.EK0EM-S2-CL-EST-CLM-VAL;
  EK0EW00.EK0EW-S-TF-PRO-NBR = EK0EM002.EK0EM-S2-TF-PRO-NBR;


   /* Validate Carrier Code*/

  EK0EW00.EK0EW-S-TF-CARR-CD = EK0EM002.EK0EM-S2-TF-CARR-CD;

  if (EK0EM002.EK0EM-S2-TF-CARR-CD == " ")
    set EK0EM002.EK0EM-S2-TF-CARR-CD normal;
  else
    set TF1REC empty;

    TF1REC.TF1CARCD = EK0EM002.EK0EM-S2-TF-CARR-CD;

    EK0ES-VCARR001-S(); /* Select VCARR001 unique row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0EM002.EK0EM-S2-TF-CARR-CD normal;
    else
      converseLib.validationFailed(403); /* Carrier Code is invalid*/
      set EK0EM002.EK0EM-S2-TF-CARR-CD cursor, bold;
    end
  end



   /* Validate Warehouse Code*/

  if (EK0EM002.EK0EM-S2-XWH-WHSE-CD == " ")
    EK0EW00.EK0EW-S-XWH-WHSE-CD = EK0EM002.EK0EM-S2-XWH-WHSE-CD;

    set EK0EM002.EK0EM-S2-XWH-WHSE-CD normal;
  else
    EK0EW00.EK0EW-3-CHAR = EK0EM002.EK0EM-S2-XWH-WHSE-CD;
    if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
    EK0EW00.EK0EW-2ND-CHAR == "?")

      EK0EW00.EK0EW-POPUP-FL = "Y";
      EK0EW00.EK0EW-POPUP-IND = "9"; /* Warehouse Code Popup*/

      EK0ES-POP-WINDOW-1();

      return; /* Redisplay map*/
    end

    EK0EW00.EK0EW-S-XWH-WHSE-CD = EK0EM002.EK0EM-S2-XWH-WHSE-CD;

    if (EK0EM002.EK0EM-S2-XWH-WHSE-CD != "99" && 
    (EK0EM002.EK0EM-S2-XWH-WHSE-CD in XWHTBL.XWHCD)) /* AND*/
     /* XWHTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0EM002.EK0EM-S2-XWH-WHSE-CD normal;
    else
      converseLib.validationFailed(258); /* Warehouse Code is invalid*/
      set EK0EM002.EK0EM-S2-XWH-WHSE-CD cursor, bold;
    end
  end


   /* Validate Sales Office Id*/

  if (EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID == " ")
    EK0EW00.EK0EW-S-XSO-SLS-OFC-ID = EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID;

    set EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID normal;
  else
    EK0EW00.EK0EW-3-CHAR = EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID;
    if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
    EK0EW00.EK0EW-2ND-CHAR == "?")

      EK0EW00.EK0EW-POPUP-FL = "Y";
      EK0EW00.EK0EW-POPUP-IND = "11"; /* Sales Office Popup*/

      EK0ES-POP-WINDOW-1();

      return; /* Redisplay map*/
    end

    EK0EW00.EK0EW-S-XSO-SLS-OFC-ID = EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID;

    if (EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID != "99" && 
    (EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID in XSOTBL.XSOCD)) /* AND*/
     /* XSOTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID normal;
    else
      converseLib.validationFailed(257); /* Sales Office is invalid*/
      set EK0EM002.EK0EM-S2-XSO-SLS-OFC-ID cursor, bold;
    end
  end


   /* Validate Sales Agency Id*/

  EK0EW00.EK0EW-S-SM-SAGCY-ID = EK0EM002.EK0EM-S2-SM-SAGCY-ID;

  if (EK0EM002.EK0EM-S2-SM-SAGCY-ID == " ")
    set EK0EM002.EK0EM-S2-SM-SAGCY-ID normal;
  else
    set SM5REC empty;

    SM5REC.SM1AGYID = EK0EM002.EK0EM-S2-SM-SAGCY-ID;

    EK0ES-VRAGCY01-S2(); /* Select Scan 2 VRAGCY01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)

      EK0ES-VRAGCY01-N2(); /* Fetch 2 VRAGCY01 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        set EK0EM002.EK0EM-S2-SM-SAGCY-ID normal;
      else
        converseLib.validationFailed(247); /* Agency Id is invalid*/
        set EK0EM002.EK0EM-S2-SM-SAGCY-ID cursor, bold;
      end
    else
      converseLib.validationFailed(247); /* Agency Id is invalid*/
      set EK0EM002.EK0EM-S2-SM-SAGCY-ID cursor, bold;
    end

    EK0ES-VRAGCY01-C2(); /* Close 2 VRAGCY01 row*/

  end


   /* Validate Sales Representative Id*/

  EK0EW00.EK0EW-S-SM-SREP-ID = EK0EM002.EK0EM-S2-SM-SREP-ID;

  if (EK0EM002.EK0EM-S2-SM-SREP-ID == 0)
    set EK0EM002.EK0EM-S2-SM-SREP-ID normal;
  else
    set SM4REC empty;

    SM4REC.SM4REPID = EK0EM002.EK0EM-S2-SM-SREP-ID;

    EK0ES-VREPS001-S(); /* Select Unique VREPS001 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0EM002.EK0EM-S2-SM-SREP-ID normal;
    else
      converseLib.validationFailed(135); /* Serv Rep Id is invalid*/
      set EK0EM002.EK0EM-S2-SM-SREP-ID cursor, bold;
    end
  end

   /* Validate Claim Reason Code*/

  EK0EW00.EK0EW-3-CHAR = EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD;

  if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
  EK0EW00.EK0EW-2ND-CHAR == "?" || 
  EK0EW00.EK0EW-3RD-CHAR == "?")

    EK0EW00.EK0EW-POPUP-IND = "2";

    EK0ES-POP-WINDOW-1(); /* Display PopUp Window*/

    return;
  end

  EK0EW00.EK0EW-S-YCR-CLM-RSN-CD = EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD;

  if (EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD == " ")
    set EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD normal;
  else
    if (EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD == "999") /* End of data*/
      converseLib.validationFailed(817); /* Claim Reason is invalid*/
      set EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD cursor, bold;
    else
      if (EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD in YCRTBL.YCRCD) /* AND*/
        /* YCRTBL.XXXSTAT(EZETST) = 'A'; /* Active*/
        set EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD normal;
      else
        converseLib.validationFailed(817); /* Claim Reason is invalid*/
        set EK0EM002.EK0EM-S2-YCR-CLM-RSN-CD cursor, bold;
      end
    end
  end


   /* Validate Escalation/Status Days Range/Flag*/

  EK0EW00.EK0EW-S-STAT-DAYS-FL = EK0EM002.EK0EM-S2-STAT-DAYS-FL;

  if (EK0EM002.EK0EM-S2-STAT-DAYS-FL == " " || 
  EK0EM002.EK0EM-S2-STAT-DAYS-FL == "Y")
    set EK0EM002.EK0EM-S2-STAT-DAYS-FL normal;
  else
    converseLib.validationFailed(863); /* Invalid value; Must be 'Y' when specified*/
    set EK0EM002.EK0EM-S2-STAT-DAYS-FL cursor, bold;
  end

  EK0EW00.EK0EW-S-ESC-DAYS-FL = EK0EM002.EK0EM-S2-ESC-DAYS-FL;

  if (EK0EM002.EK0EM-S2-ESC-DAYS-FL == " " || 
  EK0EM002.EK0EM-S2-ESC-DAYS-FL == "Y")
    set EK0EM002.EK0EM-S2-ESC-DAYS-FL normal;
  else
    converseLib.validationFailed(863); /* Invalid value; Must be 'Y' when specified*/
    set EK0EM002.EK0EM-S2-ESC-DAYS-FL cursor, bold;
  end

  if (EK0EM002.EK0EM-S2-ESC-DAYS-FL == "Y" && 
  EK0EM002.EK0EM-S2-STAT-DAYS-FL == "Y")

    converseLib.validationFailed(864); /* Select only one flag*/
    set EK0EM002.EK0EM-S2-ESC-DAYS-FL cursor, bold;
    set EK0EM002.EK0EM-S2-STAT-DAYS-FL bold;

  end

  if ((EK0EM002.EK0EM-S2-DAYS-FROM > 0 || 
  EK0EM002.EK0EM-S2-DAYS-TO > 0) && 
  EK0EM002.EK0EM-S2-ESC-DAYS-FL == " " && 
  EK0EM002.EK0EM-S2-STAT-DAYS-FL == " ")

    converseLib.validationFailed(865); /* Flag required when range is specified*/
    set EK0EM002.EK0EM-S2-ESC-DAYS-FL cursor, bold;
    set EK0EM002.EK0EM-S2-STAT-DAYS-FL bold;
  end

  EK0EW00.EK0EW-S-DAYS-FROM = EK0EM002.EK0EM-S2-DAYS-FROM;
  EK0EW00.EK0EW-S-DAYS-TO = EK0EM002.EK0EM-S2-DAYS-TO;
  set EK0EM002.EK0EM-S2-DAYS-TO normal;
  set EK0EM002.EK0EM-S2-DAYS-FROM normal;

  if ((EK0EM002.EK0EM-S2-DAYS-FROM == 0 && 
  EK0EM002.EK0EM-S2-DAYS-TO == 0) && 
  (EK0EM002.EK0EM-S2-ESC-DAYS-FL == "Y" || 
  EK0EM002.EK0EM-S2-STAT-DAYS-FL == "Y"))
    converseLib.validationFailed(866); /* Days from/to required when flag specified*/
    set EK0EM002.EK0EM-S2-DAYS-TO bold;
    set EK0EM002.EK0EM-S2-DAYS-FROM bold, cursor;
  end

  if (EK0EM002.EK0EM-S2-DAYS-TO > 0)
    if (EK0EM002.EK0EM-S2-DAYS-FROM > EK0EM002.EK0EM-S2-DAYS-TO)
      converseLib.validationFailed(867); /* Days To must be equal or GT Days From*/
      set EK0EM002.EK0EM-S2-DAYS-TO bold;
      set EK0EM002.EK0EM-S2-DAYS-FROM bold, cursor;
    end
  end


   /* Validate Claim Status Code*/

  EK0EW00.EK0EW-3-CHAR = EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1;

  if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
  EK0EW00.EK0EW-2ND-CHAR == "?" || 
  EK0EW00.EK0EW-3RD-CHAR == "?")

    EK0EW00.EK0EW-POPUP-FL = "Y";
    EK0EW00.EK0EW-POPUP-IND = "5"; /* Claim Rsn PopUp*/

    EK0ES-POP-WINDOW-1();

    return;
  end

  EK0EW00.EK0EW-S-YCS-CLM-STAT-CD1 = EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1;

  if (EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 == " ")
    set EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 normal;
  else
    if (EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 != "999" && 
    (EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 in YCSTBL.YCSCD)) /* AND*/
     /* YCSTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 normal;
    else
      converseLib.validationFailed(816); /* Claim Status is invalid*/
      set EK0EM002.EK0EM-S2-YCS-CLM-STAT-CD1 cursor, bold;
    end
  end


   /* Validate Claim Type Code*/

  EK0EW00.EK0EW-3-CHAR = EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD;

  if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
  EK0EW00.EK0EW-2ND-CHAR == "?" || 
  EK0EW00.EK0EW-3RD-CHAR == "?")

    EK0EW00.EK0EW-POPUP-IND = "1";

    EK0ES-POP-WINDOW-1(); /* Display PopUp Window*/

    return;
  end

  EK0EW00.EK0EW-S-YCT-CLM-TYP-CD = EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD;

  if (EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD == "  ")
    EK0EW00.EK0EW-S-YCT-CLM-TYP-CD = " ";
    set EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD normal;
  else
    if (EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD == "999") /* End of data*/
      converseLib.validationFailed(087); /* Claim Type is invalid*/
      set EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD cursor, bold;
    else
      if (EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD in YCTTBL.YCTCD) /* AND*/
        /* YCTTBL.XXXSTAT(EZETST) EQ 'A'; /* Active*/
        set EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD normal;
           /* continue*/
      else
        converseLib.validationFailed(087); /* Claim Type is invalid*/
        set EK0EM002.EK0EM-S2-YCT-CLM-TYP-CD cursor, bold;
      end
    end
  end


   /* Validate Claim Exception Flag*/

  EK0EW00.EK0EW-S-CL-CLXCP-IND = EK0EM002.EK0EM-S2-CL-CLXCP-IND;

  if (EK0EM002.EK0EM-S2-CL-CLXCP-IND == " ")
    set EK0EM002.EK0EM-S2-CL-CLXCP-IND normal;
  else
    if (EK0EM002.EK0EM-S2-CL-CLXCP-IND == "Y" || 
    EK0EM002.EK0EM-S2-CL-CLXCP-IND == "N")
      set EK0EM002.EK0EM-S2-CL-CLXCP-IND normal;
    else
      converseLib.validationFailed(815); /* Invalid Value, must be Y or N*/
      set EK0EM002.EK0EM-S2-CL-CLXCP-IND bold, cursor;
    end
  end


   /* Validate GPC*/

  if (EK0EM002.EK0EM-S2-XGP-GPC-CD == " ")
    EK0EW00.EK0EW-S-XGP-GPC-CD = EK0EM002.EK0EM-S2-XGP-GPC-CD;

    set EK0EM002.EK0EM-S2-XGP-GPC-CD normal;
  else
    EK0EW00.EK0EW-3-CHAR = EK0EM002.EK0EM-S2-XGP-GPC-CD;
    if (EK0EW00.EK0EW-1ST-CHAR == "?" || 
    EK0EW00.EK0EW-2ND-CHAR == "?")

      EK0EW00.EK0EW-POPUP-FL = "Y";
      EK0EW00.EK0EW-POPUP-IND = "15"; /* GPC Popup*/

      EK0ES-POP-WINDOW-1();

      return; /* Redisplay map*/
    end

    EK0EW00.EK0EW-S-XGP-GPC-CD = EK0EM002.EK0EM-S2-XGP-GPC-CD;

    if (EK0EM002.EK0EM-S2-XGP-GPC-CD != "00" && 
    EK0EM002.EK0EM-S2-XGP-GPC-CD != "99" && 
    (EK0EM002.EK0EM-S2-XGP-GPC-CD in XGPTBL.XGPCD)) /* AND*/
     /* XGPTBL.XXXSTAT(EZETST) EQ 'A'); /* Active and valid on table*/
      set EK0EM002.EK0EM-S2-XGP-GPC-CD normal;
    else
      converseLib.validationFailed(086); /* GPC is invalid*/
      set EK0EM002.EK0EM-S2-XGP-GPC-CD cursor, bold;
    end
  end


   /* Validate Department Id*/

  EK0EW00.EK0EW-S-XNX-DEPT-ID-XREF = EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF;

  if (EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF == 0)
    set EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF normal;
  else
    if (EK0EM002.EK0EM-S2-CU-CO-ID > 0)

      set KUJREC empty;

      KUJREC.KUCCOID = EK0EM002.EK0EM-S2-CU-CO-ID;
      KUJREC.XNXCD = EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF;

      EK0ES-VDEPT001-S(); /* Select Unique VDEPT001 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        set EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF normal;
      else
        converseLib.validationFailed(693); /* Dept Id is invalid*/
        set EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF cursor, bold;
      end
    else
      converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
      set EK0EM002.EK0EM-S2-CU-CO-ID cursor, bold;
      set EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF bold;
    end
  end


   /* Validate Company Store Id*/

  EK0EW00.EK0EW-S-CU-STOR-ID = EK0EM002.EK0EM-S2-CU-STOR-ID;

  if (EK0EM002.EK0EM-S2-CU-STOR-ID == 0)
    set EK0EM002.EK0EM-S2-CU-STOR-ID normal;
  else
    if (EK0EM002.EK0EM-S2-CU-CO-ID > 0)

      set VSTORE02 empty;

      VSTORE02.CU-CO-ID = EK0EM002.EK0EM-S2-CU-CO-ID;
      VSTORE02.CU-STOR-ID = EK0EM002.EK0EM-S2-CU-STOR-ID;

      EK0ES-VSTORE02-S(); /* Select Unique VSTORE02 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        set EK0EM002.EK0EM-S2-CU-STOR-ID normal;
      else
        converseLib.validationFailed(082); /* Store Id is invalid*/
        set EK0EM002.EK0EM-S2-CU-STOR-ID cursor, bold;
      end
    else
      converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
      set EK0EM002.EK0EM-S2-CU-CO-ID cursor, bold;
      set EK0EM002.EK0EM-S2-CU-STOR-ID bold;
    end
  end


   /* Validate Customer Company Id*/

  EK0EW00.EK0EW-S-CU-CO-ID = EK0EM002.EK0EM-S2-CU-CO-ID;

  if (EK0EM002.EK0EM-S2-CU-CO-ID == 0)
    if (EK0EM002.EK0EM-S2-CU-STOR-ID > 0 || 
    EK0EM002.EK0EM-S2-XNX-DEPT-ID-XREF > 0)
      converseLib.validationFailed(270); /* Cust Nbr required for store/dept*/
      set EK0EM002.EK0EM-S2-CU-CO-ID cursor, bold;
    else
      set EK0EM002.EK0EM-S2-CU-CO-ID normal;
    end
  else
    set KUCREC empty;

    KUCREC.KUCCOID = EK0EM002.EK0EM-S2-CU-CO-ID;

    EK0ES-VCMPNY01-S(); /* Select Unique VCMPNY01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set EK0EM002.EK0EM-S2-CU-CO-ID normal;
    else
      converseLib.validationFailed(083); /* Customer Number is invalid*/
      set EK0EM002.EK0EM-S2-CU-CO-ID cursor, bold;
    end
  end


   /* Validate Resolver/CR Analyst User Id*/
   /* Resolver must exist on VCLRES01; If Resolver Id entered is not*/
   /* the current screen User, escalation would only be allowed if*/
   /* both belong to the same Dept Id, otherwise, only Inquiry*/
   /* access will be allowed.*/

  EK0EW00.EK0EW-S-CL-CR-ANLS-USER-ID = EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID;

  if (EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID == " ")
    EK0EW00.EK0EW-ALLOW-ACCESS-FL = "N";
    converseLib.validationFailed(832); /* Resolver is required*/
    set EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID cursor, bold;
  else
    set VCLRES01 empty;

    VCLRES01.CL-CR-ANLS-USER-ID = EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID;

    EK0ES-VCLRES01-S3(); /* Select Scan-3 VCLRES01 row*/

    EK0ES-VCLRES01-N3(); /* Fetch Cursor-3 VCLRES01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID == 
      COMMAREA.CAUSERID)
        set EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID normal;
        EK0EW00.EK0EW-ALLOW-ACCESS-FL = "Y";
        EK0EW00.EK0EW-U-XXX-SCRTY-USER-ID = VCLRES01.XXX-SCRTY-USER-ID;
        EK0EW00.EK0EW-U-CL-ESC-USER-ID1 = VCLRES01.CL-ESC-USER-ID1;
        EK0EW00.EK0EW-U-CL-ESC-USER-ID2 = VCLRES01.CL-ESC-USER-ID2;
        EK0EW00.EK0EW-U-XND-NIKE-DEPT-ID = VCLRES01.XND-NIKE-DEPT-ID;
      else
        if (VCLRES01.XND-NIKE-DEPT-ID == 
        EK0EW00.EK0EW-U-XND-NIKE-DEPT-ID)
          set EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID normal;
          EK0EW00.EK0EW-ALLOW-ACCESS-FL = "Y";
          EK0EW00.EK0EW-U-XXX-SCRTY-USER-ID = VCLRES01.XXX-SCRTY-USER-ID;
          EK0EW00.EK0EW-U-CL-ESC-USER-ID1 = VCLRES01.CL-ESC-USER-ID1;
          EK0EW00.EK0EW-U-CL-ESC-USER-ID2 = VCLRES01.CL-ESC-USER-ID2;
          EK0EW00.EK0EW-U-XND-NIKE-DEPT-ID = VCLRES01.XND-NIKE-DEPT-ID;
        else /* Resolver entered not within same Dept as User*/
          EK0EW00.EK0EW-ALLOW-ACCESS-FL = "N";
        end
      end
    else
      EK0EW00.EK0EW-ALLOW-ACCESS-FL = "N";
      converseLib.validationFailed(868); /* Resolver not on VCLRES01*/
      set EK0EM002.EK0EM-S2-CL-CR-ANLS-USER-ID cursor, bold;
    end

    EK0ES-VCLRES01-C3(); /* Close Cursor-3 VCLRES01 row*/
  end
end // end EK0ES-VAL-SEARCH-2

// Select VCARR001 row
Function EK0ES-VCARR001-S()
  CLXREC.CLXCPROC = "EK0ES-VCARR001-S";

  try
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0860"; /* io module*/
        TA1REC.TA1DBASE = "DPICK"; /* data base*/
        TA1REC.TA1TBLVU = "VCARR001"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0860"; /* io module*/
    TA1REC.TA1DBASE = "DPICK"; /* data base*/
    TA1REC.TA1TBLVU = "VCARR001"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCARR001-S

// Close VCLRES01 row
Function EK0ES-VCLDIS01-C1()
  CLXREC.CLXCPROC = "EK0ES-VCLDIS01-C1";

  try
    call "VCLDIS01" ("C1", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0ES-VCLDIS01-C1

// Fetch VCLRES01 row
Function EK0ES-VCLDIS01-N1()
  CLXREC.CLXCPROC = "EK0ES-VCLDIS01-N1";

  try
    call "VCLDIS01" ("N1", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLDIS01-N1

// Open VCLRES01 row
Function EK0ES-VCLDIS01-S1()
  CLXREC.CLXCPROC = "EK0ES-VCLDIS01-S1";

  try
    call "VCLDIS01" ("S1", SQLCA, VCLDIS01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLDIS01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLDIS01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0ES-VCLDIS01-S1

// Close VCLESC01 row
Function EK0ES-VCLESC01-C2()
  CLXREC.CLXCPROC = "EK0ES-VCLESC01-C2";

  try
    call "VCLESC01" ("C2", SQLCA, VCLESC01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESC01-C2

// Fetch VCLESC01 row
Function EK0ES-VCLESC01-N2()
  CLXREC.CLXCPROC = "EK0ES-VCLESC01-N2";

  try
    call "VCLESC01" ("N2", SQLCA, VCLESC01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESC01-N2

// Open VCLESC01 row
Function EK0ES-VCLESC01-S2()
  CLXREC.CLXCPROC = "EK0ES-VCLESC01-S2";

  try
    call "VCLESC01" ("S2", SQLCA, VCLESC01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0ES-VCLESC01-S2

// Add VCLESX01 row
Function EK0ES-VCLESX01-A()
  CLXREC.CLXCPROC = "EK0ES-VCLESX01-A";

  try
    call "VCLESX01" ("A ", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "A      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "A      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESX01-A

// Close VCLESX01 row
Function EK0ES-VCLESX01-C1()
  CLXREC.CLXCPROC = "EK0ES-VCLESX01-C1";

  try
    call "VCLESX01" ("C1", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESX01-C1

// Close VCLESX01 row
Function EK0ES-VCLESX01-C2()
  CLXREC.CLXCPROC = "EK0ES-VCLESX01-C2";

  try
    call "VCLESX01" ("C2", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESX01-C2

// Fetch VCLESX01 row
Function EK0ES-VCLESX01-N1()
  CLXREC.CLXCPROC = "EK0ES-VCLESX01-N1";

  try
    call "VCLESX01" ("N1", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESX01-N1

// Fetch VCLESX01 row
Function EK0ES-VCLESX01-N2()
  CLXREC.CLXCPROC = "EK0ES-VCLESX01-N2";

  try
    call "VCLESX01" ("N2", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESX01-N2

// Select VCLESX01 row
Function EK0ES-VCLESX01-S()

  CLXREC.CLXCPROC = "EK0ES-VCLESX01-S";

  try
    call "VCLESX01" ("S ", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESX01-S

// Open VCLESX01 row
Function EK0ES-VCLESX01-S1()
  CLXREC.CLXCPROC = "EK0ES-VCLESX01-S1";

  try
    call "VCLESX01" ("S1", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESX01-S1

// Open VCLESX01 row
Function EK0ES-VCLESX01-S2()
  CLXREC.CLXCPROC = "EK0ES-VCLESX01-S2";

  try
    call "VCLESX01" ("S2", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESX01-S2

// Update VCLESX01 row
Function EK0ES-VCLESX01-U()
  CLXREC.CLXCPROC = "EK0ES-VCLESX01-U";

  try
    call "VCLESX01" ("U ", SQLCA, VCLESX01) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "U      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "U      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLESX01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLESX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLESX01-U

// Select VCLHDR02 row
Function EK0ES-VCLHDR02-S()
  CLXREC.CLXCPROC = "EK0ES-VCLHDR02-S";

  try
    call "VCLHDR02" ("S ", SQLCA, VCLHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLHDR02"; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLHDR02"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLHDR02"; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLHDR02"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLHDR02-S

// Count VCLIVX01 rows T1
Function EK0ES-VCLIVX01-T1()
  CLXREC.CLXCPROC = "EK0ES-VCLIVX01-T1";

  set EK0EW03 empty;

  EK0EW03.EK0EW-IO-TASK = "T1";

  try
    call "IO1180" (EK0EW03, SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Count*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "T1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO1180 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLIVX01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "T1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO1180 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLIVX01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0ES-VCLIVX01-T1

// Close VCLRES01 row
Function EK0ES-VCLRES01-C2()
  CLXREC.CLXCPROC = "EK0ES-VCLRES01-C2";

  try
    call "VCLRES01" ("C2", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0ES-VCLRES01-C2

// Close VCLRES01 row
Function EK0ES-VCLRES01-C3()
  CLXREC.CLXCPROC = "EK0ES-VCLRES01-C3";

  try
    call "VCLRES01" ("C3", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C3     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C3 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0ES-VCLRES01-C3

// Fetch VCLRES01 row
Function EK0ES-VCLRES01-N2()
  CLXREC.CLXCPROC = "EK0ES-VCLRES01-N2";

  try
    call "VCLRES01" ("N2", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLRES01-N2

// Fetch VCLRES01 row
Function EK0ES-VCLRES01-N3()
  CLXREC.CLXCPROC = "EK0ES-VCLRES01-N3";

  try
    call "VCLRES01" ("N3", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N3     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N3     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLRES01-N3

// Open VCLRES01 row
Function EK0ES-VCLRES01-S2()
  CLXREC.CLXCPROC = "EK0ES-VCLRES01-S2";

  try
    call "VCLRES01" ("S2", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0ES-VCLRES01-S2

// Open VCLRES01 row
Function EK0ES-VCLRES01-S3()
  CLXREC.CLXCPROC = "EK0ES-VCLRES01-S3";

  try
    call "VCLRES01" ("S3", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S3     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S3 8   "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0ES-VCLRES01-S3

// Select VCLTRF01 row
Function EK0ES-VCLTRF01-S()
  CLXREC.CLXCPROC = "EK0ES-VCLTRF01-S";

  try
    call "IO1240" ("S ", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO1240"; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLTRF01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO1240"; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLTRF01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCLTRF01-S

// Select VCMPNY01 row
Function EK0ES-VCMPNY01-S()
  CLXREC.CLXCPROC = "EK0ES-VCMPNY01-S";

  try
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0240"; /* io module*/
        TA1REC.TA1DBASE = "DCUST"; /* data base*/
        TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0240"; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* data base*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VCMPNY01-S

// Select VDEPT001 row
Function EK0ES-VDEPT001-S()
  CLXREC.CLXCPROC = "EK0ES-VDEPT001-S";

  try
    call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0290"; /* io module*/
        TA1REC.TA1DBASE = "DCUST"; /* data base*/
        TA1REC.TA1TBLVU = "VDEPT001"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0290"; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* data base*/
    TA1REC.TA1TBLVU = "VDEPT001"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VDEPT001-S

// Select VIVHDR04 row
Function EK0ES-VIVHDR04-S()
  CLXREC.CLXCPROC = "EK0ES-VIVHDR04-S";

  try
    call "IO1140" ("S ", SQLCA, VIVHDR04) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO1140"; /* io module*/
        TA1REC.TA1DBASE = "DINVC"; /* data base*/
        TA1REC.TA1TBLVU = "VIVHDR04"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO1140"; /* io module*/
    TA1REC.TA1DBASE = "DINVC"; /* data base*/
    TA1REC.TA1TBLVU = "VIVHDR04"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0ES-VIVHDR04-S

// Open VCLRES01 row
Function EK0ES-VIVITM02()

  VIVITM02.IV0PARTN = VCLHDR02.IV0PARTN;
  VIVITM02.IV0IVCID = VCLHDR02.IV0IVCID;

  try
    call "VIVITM02" ("S1", SQLCA, VIVITM02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VIVITM02 "; /* io module*/
        TA1REC.TA1DBASE = "DINV"; /* data base*/
        TA1REC.TA1TBLVU = "VIVITM02"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VIVITM02 "; /* io module*/
    TA1REC.TA1DBASE = "DINV"; /* data base*/
    TA1REC.TA1TBLVU = "VIVITM02"; /* table view*/
    XPCL010(); /* abend routine*/
  end

  try
    call "VIVITM02" ("N1", SQLCA, VIVITM02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VIVITM02 "; /* io module*/
        TA1REC.TA1DBASE = "DINV"; /* data base*/
        TA1REC.TA1TBLVU = "VIVITM02"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VIVITM02 "; /* io module*/
    TA1REC.TA1DBASE = "DINV"; /* data base*/
    TA1REC.TA1TBLVU = "VIVITM02"; /* table view*/
    XPCL010(); /* abend routine*/
  end

  try
    call "VIVITM02" ("C1", SQLCA, VIVITM02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VIVITM02 "; /* io module*/
        TA1REC.TA1DBASE = "DINV"; /* data base*/
        TA1REC.TA1TBLVU = "VIVITM02"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VIVITM02 "; /* io module*/
    TA1REC.TA1DBASE = "DINV"; /* data base*/
    TA1REC.TA1TBLVU = "VIVITM02"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VIVITM02

// Close VRAGCY01 cursor 2
Function EK0ES-VRAGCY01-C2()
  CLXREC.CLXCPROC = "EK0ES-VRAGCY01-C2";

  try
    call "IO0160" ("C2", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
        TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
        TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "C2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VRAGCY01-C2

// Fetch VRAGCY01 cursor 2
Function EK0ES-VRAGCY01-N2()
  CLXREC.CLXCPROC = "EK0ES-VRAGCY01-N2";

  call "IO0160" ("N2", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
        TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
        TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "N2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VRAGCY01-N2

// Decl/Open VRAGCY01 cursor 2
Function EK0ES-VRAGCY01-S2()
  CLXREC.CLXCPROC = "EK0ES-VRAGCY01-S2";

  call "IO0160" ("S2", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes}; /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
        TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
        TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S2     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0160 "; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VRAGCY01-S2

// Select VREPS001 row
Function EK0ES-VREPS001-S()
  CLXREC.CLXCPROC = "EK0ES-VREPS001-S";

  try
    call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO0020"; /* io module*/
        TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
        TA1REC.TA1TBLVU = "VREPS001"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO0020"; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* data base*/
    TA1REC.TA1TBLVU = "VREPS001"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VREPS001-S

// Select VRINSP01 row
Function EK0ES-VRINSP01-S()
  CLXREC.CLXCPROC = "EK0ES-VRINSP01-S";

  try
    call "IO2870" ("S ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO2870"; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO2870"; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VRINSP01-S

// Select VSTORE02 row
Function EK0ES-VSTORE02-S()
  CLXREC.CLXCPROC = "EK0ES-VSTORE02-S";

  try
    call "VSTORE02" ("S ", SQLCA, VSTORE02) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VSTORE02"; /* io module*/
        TA1REC.TA1DBASE = "DCUST"; /* data base*/
        TA1REC.TA1TBLVU = "VSTORE02"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VSTORE02"; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* data base*/
    TA1REC.TA1TBLVU = "VSTORE02"; /* table view*/
    XPCL010(); /* abend routine*/
  end

end // end EK0ES-VSTORE02-S

//*** RECORD=EK0EW01 ****
// This is the main working storage record for EK0E.
// 
//         Modification History Log
// 
//    Date     Userid    Description
// ----------  ------  ----------------------------------------
// 06-17-1998  HMACAL  Changed length of OP-CUST-PO from 15 to
//                     25, and, SR-SHP-DT from NUM(6) to BIN(9)
//                     thereby increasing the record length
//                     from 1521 to 1625.
//                     (OP-CUST-PO should have been stored as
//                     25 bytes and SR-SHP-DT as BIN(9)
//                     originally).
// ***********************
Record EK0EW01 type basicRecord
  5 EK0EW-RCD-SIZE EK0EW-RCD-SIZE ; 
  5 EK0EW-TEMP-ITEM EK0EW-TEMP-ITEM ; 
    10 EK0EW-COL-FUNC EK0EW-COL-FUNC [13] ; 
    10 CL-ESC-ACT-CD CL-ESC-ACT-CD [13] ; 
    10 CL-RSLV-BDT CL-RSLV-BDT [13] ; 
    10 CL-RSLV-TDT CL-RSLV-TDT [13] ; 
    10 CL-COMP-FL CL-COMP-FL [13] ; 
    10 CL-RSLV-CD CL-RSLV-CD [13] ; 
    10 CU-CO-ID CU-CO-ID [13] ; 
    10 CU-STOR-ID CU-STOR-ID [13] ; 
    10 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF [13] ; 
    10 XGP-GPC-CD XGP-GPC-CD [13] ; 
    10 CL-CLM-NBR CL-CLM-NBR [13] ; 
    10 CL-EST-CLM-VAL CL-EST-CLM-VAL [13] ; 
    10 YCS-CLM-STAT-CD1 YCS-CLM-STAT-CD1 [13] ; 
    10 CL-CLM-STAT-DT CL-CLM-STAT-DT [13] ; 
    10 YCT-CLM-TYP-CD YCT-CLM-TYP-CD [13] ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD [13] ; 
    10 YRC-RT-CSE-CD YRC-RT-CSE-CD [13] ; 
    10 SM-SAGCY-ID SM-SAGCY-ID [13] ; 
    10 SM-SREP-ID SM-SREP-ID [13] ; 
    10 EK0EW-CALC-ESC-STAT-DAYS EK0EW-CALC-ESC-STAT-DAYS [13] ; 
    10 OP-CUST-PO OP-CUST-PO [13] ; 
    10 IV-IVC-ID IV-IVC-ID [13] ; 
    10 EK0EW-ADDL-IVC-FLAG EK0EW-ADDL-IVC-FLAG [13] ; 
    10 SR-SHP-DT SR-SHP-DT [13] ; 
    10 TF-CARR-CD TF-CARR-CD [13] ; 
    10 XWH-WHSE-CD XWH-WHSE-CD [13] ; 
    10 XSO-SLS-OFC-ID XSO-SLS-OFC-ID [13] ; 
    10 CL-CLXCP-IND CL-CLXCP-IND [13] ; 
    10 CL-RTN-FL CL-RTN-FL [13] ; 
    10 YCI-INSP-STAT-CD YCI-INSP-STAT-CD [13] ; 
    10 CL-TOT-CLM-QTY CL-TOT-CLM-QTY [13] ; 
    10 TF-PRO-NBR TF-PRO-NBR [13] ; 
    10 EK0EW-CALC-RSLV-DAYS EK0EW-CALC-RSLV-DAYS [13] ; 
end // end EK0EW01

//*** RECORD=EK0EW02 ****
// ************************************************************
// Working Storage for EK0E
// 
// This table holds information about the section of temp
// storage currently being displayed on the screen.
// 
//         Modification History Log
// 
//    Date     Userid    Description
// ----------  ------  ----------------------------------------
// 06-17-1998  HMACAL  Changed length of OP-CUST-PO from 15 to
//                     25, and, SR-SHP-DT from NUM(6) to BIN(9)
//                     thereby increasing the record length
//                     from 1521 to 1625.
//                     (OP-CUST-PO should have been stored as
//                     25 bytes and SR-SHP-DT as BIN(9)
//                     originally).
// 
// 
// ************************************************************
// ***********************
Record EK0EW02 type basicRecord
  5 EK0EW-CURR-RCD EK0EW-CURR-RCD ; 
  5 EK0EW-W02-IDX EK0EW-W02-IDX ; 
  5 EK0EW-SCREEN-CHNGD EK0EW-SCREEN-CHNGD ; 
  5 EK0EW-SCREEN-TAGGED EK0EW-SCREEN-TAGGED ; 
  5 EK0EW-UPD-STG EK0EW-UPD-STG ; 
  5 EK0EW-TEMP-ITEM EK0EW-TEMP-ITEM ; 
    10 EK0EW-COL-FUNC EK0EW-COL-FUNC [13] ; 
    10 CL-ESC-ACT-CD CL-ESC-ACT-CD [13] ; 
    10 CL-RSLV-BDT CL-RSLV-BDT [13] ; 
    10 CL-RSLV-TDT CL-RSLV-TDT [13] ; 
    10 CL-COMP-FL CL-COMP-FL [13] ; 
    10 CL-RSLV-CD CL-RSLV-CD [13] ; 
    10 CU-CO-ID CU-CO-ID [13] ; 
    10 CU-STOR-ID CU-STOR-ID [13] ; 
    10 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF [13] ; 
    10 XGP-GPC-CD XGP-GPC-CD [13] ; 
    10 CL-CLM-NBR CL-CLM-NBR [13] ; 
    10 CL-EST-CLM-VAL CL-EST-CLM-VAL [13] ; 
    10 YCS-CLM-STAT-CD1 YCS-CLM-STAT-CD1 [13] ; 
    10 CL-CLM-STAT-DT CL-CLM-STAT-DT [13] ; 
    10 YCT-CLM-TYP-CD YCT-CLM-TYP-CD [13] ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD [13] ; 
    10 YRC-RT-CSE-CD YRC-RT-CSE-CD [13] ; 
    10 SM-SAGCY-ID SM-SAGCY-ID [13] ; 
    10 SM-SREP-ID SM-SREP-ID [13] ; 
    10 EK0EW-CALC-ESC-STAT-DAYS EK0EW-CALC-ESC-STAT-DAYS [13] ; 
    10 OP-CUST-PO OP-CUST-PO [13] ; 
    10 IV-IVC-ID IV-IVC-ID [13] ; 
    10 EK0EW-ADDL-IVC-FLAG EK0EW-ADDL-IVC-FLAG [13] ; 
    10 SR-SHP-DT SR-SHP-DT [13] ; 
    10 TF-CARR-CD TF-CARR-CD [13] ; 
    10 XWH-WHSE-CD XWH-WHSE-CD [13] ; 
    10 XSO-SLS-OFC-ID XSO-SLS-OFC-ID [13] ; 
    10 CL-CLXCP-IND CL-CLXCP-IND [13] ; 
    10 CL-RTN-FL CL-RTN-FL [13] ; 
    10 YCI-INSP-STAT-CD YCI-INSP-STAT-CD [13] ; 
    10 CL-TOT-CLM-QTY CL-TOT-CLM-QTY [13] ; 
    10 TF-PRO-NBR TF-PRO-NBR [13] ; 
    10 EK0EW-CALC-RSLV-DAYS EK0EW-CALC-RSLV-DAYS [13] ; 
end // end EK0EW02

//*** RECORD=EK0EW03 ****
// EK0EW03 - record used to call IO1180 using 'T1' (Count-1)
//           function to count the number of invoices for the
//           passed Claim Number;
//           Indicator field needs to be checked before the
//           the Sum field is interrogated:
//           if the indicator is negative or zero, move zero
//           to the sum field.
// ***********************
Record EK0EW03 type basicRecord
  5 EK0EW-IO-PASS EK0EW-IO-PASS ; 
    10 EK0EW-IO-TASK EK0EW-IO-TASK ; 
    10 EK0EW-IO-COUNT EK0EW-IO-COUNT ; 
    10 EK0EW-IO-IND EK0EW-IO-IND ; 
end // end EK0EW03

// CL-CLM-STAT-DT
DataItem CL-CLM-STAT-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-CLXCP-IND
DataItem CL-CLXCP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-EST-CLM-VAL
DataItem CL-EST-CLM-VAL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-TOT-CLM-QTY
DataItem CL-TOT-CLM-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sum field
DataItem EK0EW-IO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sum field indicator, CHK FIRST
DataItem EK0EW-IO-IND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pass record group level
DataItem EK0EW-IO-PASS char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql task selection
DataItem EK0EW-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Modified Switch
DataItem EK0EW-RCD-SIZE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0EW-SCREEN-CHNGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0EW-SCREEN-TAGGED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0EW-TEMP-ITEM char(1625)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0EW-UPD-STG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0EW-W02-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YCI-INSP-STAT-CD
DataItem YCI-INSP-STAT-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

