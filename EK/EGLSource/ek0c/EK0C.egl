package ek0c;
import as1.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import iv.common.*;
import ku.common.*;
import op.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=EK0C ****
// ************************************************************
// 
//       EK0C - Reason Escalation Days Table Maintenance
//       -----------------------------------------------
// 
// General program explanation and notes:
// 
// This program allows the user to perform add, change and
// delete rows in selected Claims Table.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//    Date     Userid    Description
// ----------  ------  ----------------------------------------
// 03-24-1998  HMACAL  Application creation
// 06-08-1998  HMACAL  Added Security User check to only allow
//                     use of this appl if user is a valid
//                     security user on DCLAIM.VCLRES01
// *********************
Program EK0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CLAREC CLAREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  EK0CW00 EK0CW00; // record
  EK0CW01 EK0CW01; // record
  EK0CW02 EK0CW02; // record
  EK0CW03 EK0CW03; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCLESC01 VCLESC01; // record
  VCLRES01 VCLRES01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use CL00ENU {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use EK0CM.EK0CM001,  // forms
      EK0CM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    EK0C-00000: EK0C-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set EK0CM001 initial; /* M001 input/output*/
    set EK0CW00 empty; /* Working storage*/
    EK0CW00.EK0CW-SCR-LINES = 10;
    EK0CW00.EK0CW-MODE-IND = "I"; /* Default to Inquiry*/
    set EK0CW01 empty; /* Working storage*/
    set EK0CW02 empty; /* Working storage*/
    set EK0CW03 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EK0C0000; /* Converse the main process*/
    EK0C0000: EK0C0000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EK0C0000; /* Converse the main process*/


  end // end main
end // end EK0C

// Application initialization
Function EK0C-00000()
   /* -------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* -------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* -------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* -------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* -------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* -------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    CLWREC.CLWGROUP = COMMAREA.CAUSERA; /* Restore work record*/

    if (CLWREC.CLWGROUP == " ") /* If no data passed*/
      set CLWREC empty;
    end

  else
    set CLWREC empty; /* Initialize work record*/

  end

   /* -------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* -------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end EK0C-00000

// Main process of Application
Function EK0C0000()
  EK0CS-PURGE-QUEUE(); /* Purge temp storage queue*/

  EK0CS-CHECK-ACCESS(); /* Purge temp storage queue*/

  EK0C1000(); /* Obtain the data to display*/

  EK0C2000(); /* Load temp storage with data*/

  EK0C3000(); /* Display data to screen*/
                                  /* Process adds/changes*/


   /* **************************************************************/
                     /* END  EK0C0000*/
   /* **************************************************************/
end // end EK0C0000

// Main process to display a map
Function EK0C1000()
   /* **************************************************************/
   /* This process controls the map field attributes depending on*/
   /* the screen access mode (inquire, update or insert).*/
   /* **************************************************************/

  set EK0CM001 initial; /* Clear out map*/

  EK0CM001.EK0CM-CURRENT-DATE = VGVar.currentShortGregorianDate;

   /* SET EK0CM001.EK0CM-SEARCH-CLM-TYP DEFINED;*/
   /* SET EK0CM001.EK0CM-SEARCH-CLM-RSN DEFINED;*/

  EK0CW00.EK0CW-SCR-IDX = 1; /* Init screen index*/

  while (EK0CW00.EK0CW-SCR-IDX <= EK0CW00.EK0CW-SCR-LINES)
    set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] initialAttributes;
    set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] initialAttributes;
    set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] initialAttributes;
    set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] initialAttributes;
    set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] initialAttributes;
    set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] initialAttributes;
    set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] initialAttributes;

    EK0CW00.EK0CW-SCR-IDX = EK0CW00.EK0CW-SCR-IDX + 1;
  end

   /* **************************************************************/
                     /* END  EK0C1000*/
   /* **************************************************************/
end // end EK0C1000

// Load Temp storage
Function EK0C2000()
  EK0CW00.EK0CW-MAX-PAGE = 0;
  EK0CW00.EK0CW-MAX-RCD = 0;

  set EK0CW02 empty;
  set TA5REC empty;

  TA5REC.TA5APPID = "EK0C"; /* Application*/

  EK0CS-PURGE-QUEUE(); /* Purge temp storage*/

  EK0CM001.EK0CM-SEARCH-CLM-TYP = CLWREC.YCTCD;
  if (EK0CM001.EK0CM-SEARCH-CLM-TYP in YCTTBL.YCTCD && 
  YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active*/
    set EK0CM001.EK0CM-SEARCH-CLM-TYP normal;
    EK0CM001.EK0CM-YCTDESC = YCTTBL.YCTDESC[sysVar.arrayIndex];
  end

  EK0CM001.EK0CM-SEARCH-CLM-RSN = CLWREC.YCRCD;
  if (EK0CM001.EK0CM-SEARCH-CLM-RSN in YCRTBL.YCRCD && 
  YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active*/
    set EK0CM001.EK0CM-SEARCH-CLM-RSN normal;
    EK0CM001.EK0CM-YCRDESC = YCRTBL.YCRDESC[sysVar.arrayIndex];
  end

  set VCLESC01 empty;

  VCLESC01.YCT-CLM-TYP-CD = CLWREC.YCTCD;
  VCLESC01.YCR-CLM-RSN-CD = CLWREC.YCRCD;

  EK0CW02.EK0CW-W02-IDX = 1;

  EK0CS-VCLESC01-S1(); /* Declare/Open VCLESC01 cursor*/

  while (SQLCA.VAGen_SQLCODE == 0)

    EK0CS-VCLESC01-N1(); /* Fetch Next VCLESC01*/

    EK0CW00.EK0CW-BYPASS-FL = "N";

    if (SQLCA.VAGen_SQLCODE == 0)

      if (EK0CM001.EK0CM-SEARCH-CLM-TYP > " ")
        if (VCLESC01.YCT-CLM-TYP-CD == EK0CM001.EK0CM-SEARCH-CLM-TYP)
              /* continue*/
        else
          EK0CW00.EK0CW-BYPASS-FL = "Y";
        end
      end

      if (EK0CM001.EK0CM-SEARCH-CLM-RSN > " ")
        if (VCLESC01.YCR-CLM-RSN-CD == EK0CM001.EK0CM-SEARCH-CLM-RSN)
              /* continue*/
        else
          EK0CW00.EK0CW-BYPASS-FL = "Y";
        end
      end

      if (EK0CW00.EK0CW-BYPASS-FL == "N")

        if (EK0CW02.EK0CW-W02-IDX > EK0CW00.EK0CW-SCR-LINES)
          EK0CW01.EK0CW-TEMP-ITEM = EK0CW02.EK0CW-TEMP-ITEM;
          TA5REC.TA5FNCCD = "A";

          EK0CS-CALL-TA0050(); /* Write previous to queue*/

          set EK0CW02 empty; /* Clear record*/

          EK0CW02.EK0CW-W02-IDX = 1;

          EK0CW00.EK0CW-MAX-PAGE = EK0CW00.EK0CW-MAX-PAGE + 1;
        end

        EK0CW02.EK0CW-ROW-EXISTS[EK0CW-W02-IDX] = "Y";
        EK0CW02.EK0CW-ROW-CHNGD[EK0CW-W02-IDX] = "N";
        EK0CW02.EK0CW-ROW-ADDED[EK0CW-W02-IDX] = "N";
        EK0CW02.EK0CW-ROW-DELTD[EK0CW-W02-IDX] = "N";

        EK0CW02.YCT-CLM-TYP-CD[EK0CW-W02-IDX] = VCLESC01.YCT-CLM-TYP-CD;
        EK0CW02.YCR-CLM-RSN-CD[EK0CW-W02-IDX] = VCLESC01.YCR-CLM-RSN-CD;
        EK0CW02.YCS-CLM-STAT-CD[EK0CW-W02-IDX] = VCLESC01.YCS-CLM-STAT-CD;
        EK0CW02.CL-XCEP-FL[EK0CW-W02-IDX] = VCLESC01.CL-XCEP-FL;
        EK0CW02.CL-ESC-DAYS1[EK0CW-W02-IDX] = VCLESC01.CL-ESC-DAYS1;
        EK0CW02.CL-ESC-DAYS2[EK0CW-W02-IDX] = VCLESC01.CL-ESC-DAYS2;

        EK0CW02.ZZ-SDT[EK0CW-W02-IDX] = VCLESC01.ZZ-SDT;
        EK0CW02.ZZ-CHNG-DT[EK0CW-W02-IDX] = VCLESC01.ZZ-CHNG-DT;
        EK0CW02.ZZ-CHNG-CNT[EK0CW-W02-IDX] = VCLESC01.ZZ-CHNG-CNT;

        /* IF EK0CW00.EK0CW-MAX-PAGE EQ 0;*/
        /* MOVE 1 TO EK0CW00.EK0CW-MAX-PAGE;*/
        /* END;*/

        EK0CW02.EK0CW-W02-IDX = EK0CW02.EK0CW-W02-IDX + 1;
        EK0CW00.EK0CW-MAX-RCD = EK0CW00.EK0CW-MAX-RCD + 1;

      end

    else
      if (EK0CW02.EK0CW-ROW-EXISTS[1] > " ") /* queue not empty?*/
        EK0CW01.EK0CW-TEMP-ITEM = EK0CW02.EK0CW-TEMP-ITEM;
        TA5REC.TA5FNCCD = "A";

        EK0CS-CALL-TA0050(); /* Write previous to queue*/

        set EK0CW02 empty; /* Clear record*/

        EK0CW00.EK0CW-MAX-PAGE = EK0CW00.EK0CW-MAX-PAGE + 1;
      end
    end
  end

   /* Close cursor*/

  EK0CS-VCLESC01-C1(); /* Close VCLESC01 cursor*/

   /* If max page is zero, no data was returned*/

  if (EK0CW00.EK0CW-MAX-PAGE == 0)
    EK0CW00.EK0CW-CURR-PAGE = 0;
    set EK0CM001.EK0CM-PF12-CONFIRM invisible, skip;
    set EK0CM001.EK0CM-PF10-CHG invisible, skip;
    set EK0CM001.EK0CM-PF11-DEL invisible, skip;
    set EK0CM001.EK0CM-PF9-ADD skip, noHighLight;
    converseLib.validationFailed(350); /* No data found*/
  end


  EK0CW00.EK0CW-CURR-PAGE = 001;
  EK0CW00.EK0CW-CURR-RCD = 001;

  set EK0CW02 empty;

   /* **************************************************************/
                     /* END  EK0C2000*/
   /* **************************************************************/
end // end EK0C2000

// Display Table to Screen
Function EK0C3000()
   /* **************************************************************/
   /* This process controls the display for the top half of the*/
   /* EK0CM001 map. The application will remain in this process*/
   /* until the user requests exit, or valid updates have*/
   /* been entered.*/
   /* **************************************************************/

  if (EK0CW00.EK0CW-MODE-IND == "A")
    EK0CM001.EK0CM-MODE = "  ADD";
    set EK0CM001.EK0CM-MODE skip, reverse;
    set EK0CM001.EK0CM-SEARCH-CLM-TYP skip, noHighLight;
    set EK0CM001.EK0CM-SEARCH-CLM-RSN skip, noHighLight;
  else
    if (EK0CW00.EK0CW-MODE-IND == "C")
      EK0CM001.EK0CM-MODE = "UPDATE";
      set EK0CM001.EK0CM-MODE skip, reverse;
      set EK0CM001.EK0CM-SEARCH-CLM-TYP skip, noHighLight;
      set EK0CM001.EK0CM-SEARCH-CLM-RSN skip, noHighLight;
    else
      if (EK0CW00.EK0CW-MODE-IND == "I")
        EK0CM001.EK0CM-MODE = "INQUIRY";
        set EK0CM001.EK0CM-MODE initialAttributes;
        set EK0CM001.EK0CM-SEARCH-CLM-TYP initialAttributes;
        set EK0CM001.EK0CM-SEARCH-CLM-RSN initialAttributes;
      else /* It's DELETE*/
        EK0CM001.EK0CM-MODE = "DELETE";
        set EK0CM001.EK0CM-MODE initialAttributes;
        set EK0CM001.EK0CM-SEARCH-CLM-TYP initialAttributes;
        set EK0CM001.EK0CM-SEARCH-CLM-RSN initialAttributes;
      end
    end
  end

   /* Display the retrieved data (May exit appl)*/
  EK0CW00.EK0CW-END-SCREEN = "N";

  while (EK0CW00.EK0CW-END-SCREEN == "N") /* If not end*/
    EK0C3100(); /* display map*/
  end

   /* **************************************************************/
                     /* END  EK0C3000*/
   /* **************************************************************/
end // end EK0C3000

// Converse EK0CM001
Function EK0C3100()
  if (EK0CW00.EK0CW-CURR-PAGE != EK0CM001.EK0CM-CURR-PAGE)
    if (converseVar.validationMsgNum == 350 ||  /* No data found*/
    EK0CW00.EK0CW-MAX-PAGE == 0)               
      EK0CW00.EK0CW-CURR-PAGE = 1;
      EK0CW00.EK0CW-MAX-PAGE = 1;
      EK0CM001.EK0CM-CURR-PAGE = 1;
      EK0CM001.EK0CM-MAX-PAGE = 1;
       /* continue      /* Nothing to load/reload*/
    else
      EK0C3200(); /* Reload screen data*/
      EK0CM001.EK0CM-CURR-PAGE = EK0CW00.EK0CW-CURR-PAGE;
      EK0CM001.EK0CM-MAX-PAGE = EK0CW00.EK0CW-MAX-PAGE;
    end
  end

   /* Now set field attributes*/

  EK0CW00.EK0CW-SCR-IDX = EK0CW00.EK0CW-SCR-LINES;

  while (EK0CW00.EK0CW-SCR-IDX > 0)

    if (EK0CW00.EK0CW-MODE-IND == "I") /* Inquire Mode - ASKIP,NOHILITE*/

      if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] > " ")
        set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] cursor;
        set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] normal;
        set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] underline;
      else
        set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] skip, noHighLight;
      end

      set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] initialAttributes;
      set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] initialAttributes;
      set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] initialAttributes;
      set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] initialAttributes;
      set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] initialAttributes;
      set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] initialAttributes;

    end

    if (converseVar.validationMsgNum == 0)
      if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] != " ")
        if (EK0CW00.EK0CW-MODE-IND == "C") /* Change Mode*/
          EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] = " ";
          set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] skip, noHighLight;
          set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] initialAttributes;
          set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] initialAttributes;
          set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] initialAttributes;
          set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] initialAttributes;
          set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] cursor;
          set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] normal;
          set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] underline;
          set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] normal;
          set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] underline;
        else
          if (EK0CW00.EK0CW-MODE-IND == "A") /* Add Mode*/
            EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] = " ";
            set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] initialAttributes;
            set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] cursor;
            set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] normal;
            set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] underline;
            set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] normal;
            set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] underline;
            set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] normal;
            set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] underline;
            set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] normal;
            set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] underline;
            set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] normal;
            set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] underline;
            set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] normal;
            set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] underline;
          else
            if (EK0CW00.EK0CW-MODE-IND == "D") /* Delete Mode*/
              set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] cursor;
              set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] normal;
              set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] underline;
            end
          end
        end
      else
        if (EK0CW00.EK0CW-MODE-IND == "A") /* Add Mode*/
          EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] = " ";
          set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] initialAttributes;
          set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] cursor;
          set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] normal;
          set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] underline;
          set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] normal;
          set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] underline;
          set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] normal;
          set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] underline;
          set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] normal;
          set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] underline;
          set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] normal;
          set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] underline;
          set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] normal;
          set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] underline;
        else
          if (EK0CW00.EK0CW-MODE-IND == "C") /* Change Mode*/
            EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] = " ";
            set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] initialAttributes;
            set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] initialAttributes;
            set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] initialAttributes;
          else
            if (EK0CW00.EK0CW-MODE-IND == "D") /* Delete Mode*/
              EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] = " ";
              set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] initialAttributes;
            end
          end
        end
      end
    else
      if (EK0CW00.EK0CW-MODE-IND == "D") /* Delete Mode*/
        if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] == " ")
          EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] = " ";
          set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] initialAttributes;
        else
          if (converseVar.validationMsgNum == 827) /* Initial Delete Mode msg*/
            set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] cursor;
            set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] normal;
            set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] underline;
          end
        end
      end
    end

    EK0CW-SCR-IDX = EK0CW-SCR-IDX - 1;
  end

   /* IF EZEMNO = 0;                            /* If no errors*/
  if (EK0CW00.EK0CW-MODE-IND == "I") /* Inquiry*/
    EK0CM001.EK0CM-MODE = "INQUIRY";
    set EK0CM001.EK0CM-MODE skip, noHighLight;
    if (converseVar.validationMsgNum == 0)
      set EK0CM001.EK0CM-SEARCH-CLM-TYP initialAttributes;
      set EK0CM001.EK0CM-SEARCH-CLM-RSN initialAttributes;
    end
    if (EK0CW00.EK0CW-MAX-PAGE == 0 || 
    (EK0CW00.EK0CW-MAX-PAGE == 1 && 
    EK0CW00.EK0CW-MAX-RCD == 0)) /* If no Data to display*/
      set EK0CM001.EK0CM-PF9-ADD skip, noHighLight;
      set EK0CM001.EK0CM-PF10-CHG invisible, skip;
      set EK0CM001.EK0CM-PF11-DEL invisible, skip;
      set EK0CM001.EK0CM-PF12-CONFIRM invisible, skip;
    else
      set EK0CM001.EK0CM-PF9-ADD skip, noHighLight;
      set EK0CM001.EK0CM-PF10-CHG skip, noHighLight;
      set EK0CM001.EK0CM-PF11-DEL skip, noHighLight;
      set EK0CM001.EK0CM-PF12-CONFIRM invisible, skip;
    end
  else
    if (EK0CW00.EK0CW-MODE-IND == "C") /* Change*/
      EK0CM001.EK0CM-MODE = "CHANGE";
      set EK0CM001.EK0CM-MODE skip, reverse;
      set EK0CM001.EK0CM-SEARCH-CLM-TYP skip, noHighLight;
      set EK0CM001.EK0CM-SEARCH-CLM-RSN skip, noHighLight;
      set EK0CM001.EK0CM-PF9-ADD skip, invisible;
      set EK0CM001.EK0CM-PF10-CHG skip, invisible;
      set EK0CM001.EK0CM-PF11-DEL skip, invisible;
      set EK0CM001.EK0CM-PF12-CONFIRM initialAttributes;
    else
      if (EK0CW00.EK0CW-MODE-IND == "A") /* Add*/
        EK0CM001.EK0CM-MODE = " A D D";
        set EK0CM001.EK0CM-MODE skip, reverse;
        set EK0CM001.EK0CM-SEARCH-CLM-TYP skip, noHighLight;
        set EK0CM001.EK0CM-SEARCH-CLM-RSN skip, noHighLight;
        set EK0CM001.EK0CM-PF9-ADD skip, invisible;
        set EK0CM001.EK0CM-PF10-CHG skip, invisible;
        set EK0CM001.EK0CM-PF11-DEL skip, invisible;
        set EK0CM001.EK0CM-PF12-CONFIRM initialAttributes;
      else
        if (EK0CW00.EK0CW-MODE-IND == "D") /* Delete*/
          EK0CM001.EK0CM-MODE = "DELETE";
          set EK0CM001.EK0CM-MODE skip, reverse;
          set EK0CM001.EK0CM-SEARCH-CLM-TYP skip, noHighLight;
          set EK0CM001.EK0CM-SEARCH-CLM-RSN skip, noHighLight;
          set EK0CM001.EK0CM-PF9-ADD skip, invisible;
          set EK0CM001.EK0CM-PF10-CHG skip, invisible;
          set EK0CM001.EK0CM-PF11-DEL skip, invisible;
          set EK0CM001.EK0CM-PF12-CONFIRM initialAttributes;
        end
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    set EK0CM001 alarm;
  end

  converse EK0CM001 ;

  EK0CW00.EK0CW-POPUP-FL = "N";
  EK0CW02.EK0CW-SCREEN-CHNGD = "N";

  if (EK0CW00.EK0CW-MODE-IND == "I") /* Inquire Mode*/
    if (EK0CM001.EK0CM-SEARCH-CLM-TYP != CLWREC.YCTCD || 
    EK0CM001.EK0CM-SEARCH-CLM-RSN != CLWREC.YCRCD) /* OR*/
      EK0CW02.EK0CW-SCREEN-CHNGD = "Y";
   /* (EK0CM001.EK0CM-SEARCH-CLM-TYP EQ ' ' AND*/
   /* EK0CM001.EK0CM-SEARCH-CLM-RSN EQ ' ');*/

      EK0C3300(); /* Process Search Criteria*/

    else

      EK0CS-VAL-SEARCH(); /* Validate Search CLM type and reason*/

      if (EK0CW00.EK0CW-POPUP-FL == "Y")
        return;
      end

    end
  else

     /* If Add or Change or Delete Mode, check for changes*/

    EK0CW00.EK0CW-SCR-IDX = 1;

    while (EK0CW00.EK0CW-SCR-IDX <= EK0CW00.EK0CW-SCR-LINES)

      if (EK0CW00.EK0CW-MODE-IND == "A") /* Add Mode*/
        if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] != 
        EK0CW02.YCT-CLM-TYP-CD[EK0CW-SCR-IDX] || 
        EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] != 
        EK0CW02.YCR-CLM-RSN-CD[EK0CW-SCR-IDX] || 
        EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] != 
        EK0CW02.YCS-CLM-STAT-CD[EK0CW-SCR-IDX] || 
        EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] != 
        EK0CW02.CL-XCEP-FL[EK0CW-SCR-IDX] || 
        EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] != 
        EK0CW02.CL-ESC-DAYS1[EK0CW-SCR-IDX] || 
        EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] != 
        EK0CW02.CL-ESC-DAYS2[EK0CW-SCR-IDX])

          EK0CW02.EK0CW-SCREEN-CHNGD = "Y";
        end
      else
        if (EK0CW00.EK0CW-MODE-IND == "C") /* Change Mode*/

          if (EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] != 
          EK0CW02.CL-ESC-DAYS1[EK0CW-SCR-IDX] || 
          EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] != 
          EK0CW02.CL-ESC-DAYS2[EK0CW-SCR-IDX])

            EK0CW02.EK0CW-SCREEN-CHNGD = "Y";
          end
        else /* Delete Mode*/
          if (EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] != 
          EK0CW02.EK0CW-COL-FUNC[EK0CW-SCR-IDX])

            EK0CW02.EK0CW-SCREEN-CHNGD = "Y";
          end
        end
      end

      EK0CW-SCR-IDX = EK0CW-SCR-IDX + 1;

    end
  end


   /* Check function keys (May exit application)*/

  EK0CS-CHECK-PFKEYS();

  if (converseVar.eventKey is pa2 /* Refresh*/
   || converseVar.eventKey is pf3 /* or Exit*/
   || converseVar.validationMsgNum != 0) /* or errors*/
    return;
  end

   /* Now if there are no errors, we're not inquiry, user pressed*/
   /* ENTER or PF12, and they entered some changes, go process them!*/

  if (converseVar.validationMsgNum == 0
   && EK0CW00.EK0CW-MODE-IND != "I" /* Not inquiry*/
   && (converseVar.eventKey is enter
   || converseVar.eventKey is pf12) 
   && EK0CW02.EK0CW-SCREEN-CHNGD == "Y")
    EK0C4000(); /* Validate & Update*/
  end

end // end EK0C3100

// Load screen array
Function EK0C3200()
   /* **************************************************************/
   /* Load screen array and internal working storage array*/
   /* from temp storage.*/
   /* **************************************************************/

  set EK0CW02 empty; /* Clear record*/

  EK0CW00.EK0CW-SCR-IDX = 1; /* Init screen index*/
  EK0CW02.EK0CW-W02-IDX = 1; /* and W02 index*/
  EK0CW02.EK0CW-CURR-RCD = EK0CW00.EK0CW-CURR-RCD;

  TA5REC.TA5TSQIX = EK0CW00.EK0CW-CURR-PAGE;
  TA5REC.TA5FNCCD = "R";

  EK0CS-CALL-TA0050(); /* Read queue*/

  EK0CW02.EK0CW-TEMP-ITEM = EK0CW01.EK0CW-TEMP-ITEM;

  EK0CM001.EK0CM-SEARCH-CLM-TYP = CLWREC.YCTCD;
  if (EK0CM001.EK0CM-SEARCH-CLM-TYP in YCTTBL.YCTCD && 
  YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active*/
    set EK0CM001.EK0CM-SEARCH-CLM-TYP normal;
    EK0CM001.EK0CM-YCTDESC = YCTTBL.YCTDESC[sysVar.arrayIndex];
  end

  EK0CM001.EK0CM-SEARCH-CLM-RSN = CLWREC.YCRCD;
  if (EK0CM001.EK0CM-SEARCH-CLM-RSN in YCRTBL.YCRCD && 
  YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active*/
    set EK0CM001.EK0CM-SEARCH-CLM-RSN normal;
    EK0CM001.EK0CM-YCRDESC = YCRTBL.YCRDESC[sysVar.arrayIndex];
  end


   /* Now get the data from temp storage*/

  while (EK0CW-SCR-IDX <= EK0CW00.EK0CW-SCR-LINES)

    if (EK0CW02.EK0CW-CURR-RCD <= EK0CW00.EK0CW-MAX-RCD)

      EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] = EK0CW02.EK0CW-COL-FUNC[EK0CW-W02-IDX];
      EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] = EK0CW02.YCT-CLM-TYP-CD[EK0CW-W02-IDX];
      EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] = EK0CW02.YCR-CLM-RSN-CD[EK0CW-W02-IDX];
      EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] = EK0CW02.YCS-CLM-STAT-CD[EK0CW-W02-IDX];
      EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] = EK0CW02.CL-XCEP-FL[EK0CW-W02-IDX];
      EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] = EK0CW02.CL-ESC-DAYS1[EK0CW-W02-IDX];
      EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] = EK0CW02.CL-ESC-DAYS2[EK0CW-W02-IDX];
      EK0CM001.EK0CM-ZZ-SDT[EK0CW-SCR-IDX] = EK0CW02.ZZ-SDT[EK0CW-W02-IDX];
      EK0CM001.EK0CM-ZZ-CHNG-DT[EK0CW-SCR-IDX] = EK0CW02.ZZ-CHNG-DT[EK0CW-W02-IDX];
    else
      EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] = " ";
      EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] = " ";
      EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] = " ";
      EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] = " ";
      EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] = " ";
      EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] = 0;
      EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] = 0;
      EK0CM001.EK0CM-ZZ-SDT[EK0CW-SCR-IDX] = 0;
      EK0CM001.EK0CM-ZZ-CHNG-DT[EK0CW-SCR-IDX] = 0;
    end
    EK0CW02.EK0CW-CURR-RCD = EK0CW02.EK0CW-CURR-RCD + 1;
    EK0CW02.EK0CW-W02-IDX = EK0CW02.EK0CW-W02-IDX + 1;
    EK0CW00.EK0CW-SCR-IDX = EK0CW00.EK0CW-SCR-IDX + 1;
  end

  EK0CW02.EK0CW-CURR-RCD = EK0CW00.EK0CW-CURR-RCD;

   /* **************************************************************/
                     /* END  EK0C3200*/
   /* **************************************************************/
end // end EK0C3200

// Process Search criteria
Function EK0C3300()

   /* Process Search criteria using Claim Type AND Claim Reason Codes*/

  EK0CS-PURGE-QUEUE();

  EK0CS-VAL-SEARCH(); /* Validate Search criteria*/

  CLWREC.YCTCD = EK0CM001.EK0CM-SEARCH-CLM-TYP;
  CLWREC.YCRCD = EK0CM001.EK0CM-SEARCH-CLM-RSN;

  if (converseVar.validationMsgNum == 0 ||  /* Search criteria is valid*/
  converseVar.validationMsgNum == 810)      /* Search criteria was selected from Popup*/

    EK0CW00.EK0CW-END-SCREEN = "Y";

  else /* Blank out screen*/
    EK0CW00.EK0CW-SCR-IDX = 1;

    while (EK0CW00.EK0CW-SCR-IDX <= EK0CW00.EK0CW-SCR-LINES)

      EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] = " ";
      set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] skip, noHighLight;
      EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] = " ";
      EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] = " ";
      EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] = " ";
      EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] = " ";
      EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] = 0;
      EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] = 0;
      EK0CM001.EK0CM-ZZ-SDT[EK0CW-SCR-IDX] = 0;
      EK0CM001.EK0CM-ZZ-CHNG-DT[EK0CW-SCR-IDX] = 0;

      EK0CW00.EK0CW-SCR-IDX = EK0CW00.EK0CW-SCR-IDX + 1;
    end

    EK0CW00.EK0CW-CURR-PAGE = 1;
    EK0CW00.EK0CW-MAX-PAGE = 1;
    EK0CM001.EK0CM-CURR-PAGE = 1;
    EK0CM001.EK0CM-MAX-PAGE = 1;
  end
   /* **************************************************************/
                     /* END  EK0C3300*/
   /* **************************************************************/
end // end EK0C3300

// Process Adds/Changes
Function EK0C4000()

  EK0CW00.EK0CW-POPUP-FL = "N";

   /*  */
   /* Main Validation*/
   /*  */

  EK0C4100(); /* Edit Validation*/

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

  if (converseVar.eventKey is enter) /* No Errors, but not PF12*/
    converseLib.validationFailed(828); /* Press PF12 to confirm updates*/
    return;
  end

   /* Now, if we get here we have valid data to ADD or UPDATE or DELETE*/
   /* as long as PF12 key (Confirm) was pressed*/

  EK0C4500(); /* Add/Update/Delete*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    CLWREC.YCTCD = EK0CM001.EK0CM-SEARCH-CLM-TYP;
    CLWREC.YCRCD = EK0CM001.EK0CM-SEARCH-CLM-RSN;
    EK0CW00.EK0CW-MODE-IND = "I"; /* Set to INQUIRE Mode*/
    converseLib.validationFailed(774); /* Updates successful*/
    EK0CW00.EK0CW-END-SCREEN = "Y";
  end

   /* **************************************************************/
                     /* END  EK0C4000*/
   /* **************************************************************/
end // end EK0C4000

// EDIT Validation process
Function EK0C4100()
   /* ------------------------------------------------------------------*/
   /* Edit Validation Process*/
   /* ------------------------------------------------------------------*/
   /*  */
   /* For ADD Mode:*/
   /* 1) Validate Claim Type, Claim Reason, Claim Status, Exception Flag,*/
   /* 1st and 2nd Escalation Days (key combination) individually on*/
   /* each detail line;*/
   /* Wildcard are accepted but are limited.*/
   /* 2) Validate if the key combination above exists:*/
   /* a. On another detail line on the screen*/
   /* b. On the table*/
   /*  */
   /* For CHANGE Mode:*/
   /* 1) Validate 1st and 2nd Escalation Days*/
   /*  */
   /* For DELETE Mode:*/
   /* 1) Validate the column function entered*/
   /* ------------------------------------------------------------------*/

   /*  */
   /* For ADD Mode only*/
   /* Validate the Key Combination (Claim Type, Claim Reason, Claim*/
   /* Status and Exception Flag) from bottom to top, right to left;*/
   /*  */

  EK0CW00.EK0CW-VALID-KEY-FL = "Y";
  EK0CW00.EK0CW-POPUP-FL = "N";

  EK0CW00.EK0CW-SCR-IDX = EK0CW00.EK0CW-SCR-LINES;

  while (EK0CW00.EK0CW-SCR-IDX > 0 && 
  EK0CW00.EK0CW-MODE-IND == "A")

    /* Validate if data was entered on detail line*/

    if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] > 0 || 
    EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] > 0)

       /* Validate Claim Exception Flag*/

      if (EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] == " ")
        EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] = "N";
        set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] normal;
      else
        if (EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] == "Y" || 
        EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] == "N")
          set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] normal;
        else
          EK0CW00.EK0CW-VALID-KEY-FL = "N";
          converseLib.validationFailed(815); /* Invalid Value, must be Y or N*/
          set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] bold, cursor;
        end
      end

       /* Validate Claim Status*/
       /* When specified, must be valid code in YCSTBL;*/
       /* Full Wildcard can be entered, but no generic-wildcard;*/
       /* PopUp window is available*/

      if (EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] == " " || 
      EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] == "***")
        EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] = "***";
        set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] normal;
      else
        EK0CW00.EK0CW-3-CHAR = EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX];
        if (EK0CW00.EK0CW-1ST-CHAR == "?" || 
        EK0CW00.EK0CW-2ND-CHAR == "?" || 
        EK0CW00.EK0CW-3RD-CHAR == "?")

          EK0CW00.EK0CW-POPUP-FL = "Y";
          EK0CW00.EK0CW-POPUP-IND = "5"; /* Claim Rsn PopUp*/

          EK0CS-POPUP-WINDOW();

          return;
        end

        if (EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX]
         in YCSTBL.YCSCD && 
        YCSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active and valid on table*/
          set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] normal;
        else
          EK0CW00.EK0CW-VALID-KEY-FL = "N";
          converseLib.validationFailed(816); /* Claim Status is invalid*/
          set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] cursor, bold;
        end
      end

       /* Validate Claim Type Code and Claim Reason Code combination*/
       /* with Claim Status Code specified*/
       /* Full wildcard (***) on both these fields are allowed only*/
       /* when the Claim Status Code is OIP*/

      if ((EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] == "***" || 
      EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] == " ") && 
      (EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] == "***" || 
      EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] == " "))
        if (EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] == "OIP")
             /* continue*/
        else
          EK0CW00.EK0CW-VALID-KEY-FL = "N";
          set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] bold, cursor;
          converseLib.validationFailed(820); /* Claim Status must be OIP*/
        end
      end

       /* Validate Claim Reason*/
       /* When fully specified, must be valid code in YCRTBL;*/
       /* Wildcards are accepted, including generic wildcard(F**)*/
       /* For generic wildcard, at least the first character must be*/
       /* specified, ie., (F** or F0*);*/
       /* PopUp window is available*/

      if (EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] == " " || 
      EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] == "***")
        EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] = "***";
        set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] normal;
      else
        EK0CW00.EK0CW-3-CHAR = EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX];
        if (EK0CW00.EK0CW-1ST-CHAR == "?" || 
        EK0CW00.EK0CW-2ND-CHAR == "?" || 
        EK0CW00.EK0CW-3RD-CHAR == "?")

          EK0CW00.EK0CW-POPUP-FL = "Y";
          EK0CW00.EK0CW-POPUP-IND = "4"; /* Claim Rsn PopUp*/

          EK0CS-POPUP-WINDOW();

          return; /* Redisplay map*/
        end

        if (EK0CW00.EK0CW-1ST-CHAR == "*")
          EK0CW00.EK0CW-VALID-KEY-FL = "N";
          converseLib.validationFailed(824); /* First character required for*/
                                      /* generic-wildcard*/
          set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] cursor, bold;
        else
          if (EK0CW00.EK0CW-2ND-CHAR == " ")
            EK0CW00.EK0CW-2ND-CHAR = "*";
          end
          if (EK0CW00.EK0CW-3RD-CHAR == " ")
            EK0CW00.EK0CW-3RD-CHAR = "*";
          end

          EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] = EK0CW00.EK0CW-3-CHAR;

          if (EK0CW00.EK0CW-2ND-CHAR == "*" || 
          EK0CW00.EK0CW-3RD-CHAR == "*")
            set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] normal;
          else
            if (EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX]
             in YCRTBL.YCRCD && 
            YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active and valid*/
              set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] normal;
            else
              EK0CW00.EK0CW-VALID-KEY-FL = "N";
              converseLib.validationFailed(817); /* Claim Reason is invalid*/
              set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] cursor, bold;
            end
          end
        end
      end

       /* Validate Claim Type Code*/
       /* When fully specified, must be valid code in YCTTBL;*/
       /* Only full wildcard(***) is accepted; no generic wildcard(R**)*/
       /* If nothing is entered, it will be replaced with ****/

      if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] == " " || 
      EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] == "***")
        EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] = "***";
        set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] normal;
      else
        EK0CW00.EK0CW-3-CHAR = EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX];
        if (EK0CW00.EK0CW-1ST-CHAR == "*" || 
        EK0CW00.EK0CW-2ND-CHAR == "*" || 
        EK0CW00.EK0CW-3RD-CHAR == "*")
          EK0CW00.EK0CW-VALID-KEY-FL = "N";
          converseLib.validationFailed(826); /* Wildcard not allowed on this field*/
          set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] cursor, bold;
        else
          if (EK0CW00.EK0CW-1ST-CHAR == "?" || 
          EK0CW00.EK0CW-2ND-CHAR == "?" || 
          EK0CW00.EK0CW-3RD-CHAR == "?")

            EK0CW00.EK0CW-POPUP-FL = "Y";
            EK0CW00.EK0CW-POPUP-IND = "3"; /* Claim Type PopUp*/

            EK0CS-POPUP-WINDOW();

            return; /* Redisplay map*/
          end

          if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX]
           in YCTTBL.YCTCD && 
          YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active and valid on table*/
            set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] normal;
          else
            EK0CW00.EK0CW-VALID-KEY-FL = "N";
            converseLib.validationFailed(087); /* Claim Type is invalid*/
            set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] cursor, bold;
          end
        end
      end

    end

    EK0CW-SCR-IDX = EK0CW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

   /*  */
   /* For ADD and UPDATE Modes only*/
   /* Validate 1st and 2nd Escalation Days, bottom to top, right to left;*/
   /*  */

  EK0CW00.EK0CW-SCR-IDX = EK0CW00.EK0CW-SCR-LINES;

  while (EK0CW00.EK0CW-SCR-IDX > 0 && 
  (EK0CW00.EK0CW-MODE-IND == "A" || 
  EK0CW00.EK0CW-MODE-IND == "C"))

     /* Validate if data was entered on detail line*/

    if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] > 0 || 
    EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] > 0)

        /* First Escalation Days*/
        /* Must be specified and greater than zeroes*/

      if (EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] > 0)
        set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] normal;
      else
        set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] bold, cursor;
        converseLib.validationFailed(818); /* 1st Escalation Days is required*/
      end

        /* Second Escalation Days*/
        /* When specified, must be greater than 1st Escalation Days*/

      if (EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] > 0)
        if (EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] > 
        EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX])
          set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] normal;
        else
          set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] bold, cursor;
          converseLib.validationFailed(819); /* 2st Esc Days must be > 1st Esc Days*/
        end
      else
        set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] normal;
      end

    end

    EK0CW-SCR-IDX = EK0CW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

   /*  */
   /* For ADD Mode only*/
   /* Compare the key combination against the other*/
   /* key combinations on each detail line on the screen*/
   /*  */

  EK0CW00.EK0CW-SCR-IDX = EK0CW00.EK0CW-SCR-LINES;

  while (EK0CW00.EK0CW-SCR-IDX > 0 && 
  EK0CW00.EK0CW-MODE-IND == "A")

    if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] > " ")
      EK0CW00.EK0CW-YCT-CLM-TYP-CD = EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX];
      EK0CW00.EK0CW-YCR-CLM-RSN-CD = EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX];
      EK0CW00.EK0CW-YCS-CLM-STAT-CD = EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX];
      EK0CW00.EK0CW-CL-XCEP-FL = EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX];

      EK0CW00.EK0CW-LINE-IDX = EK0CW00.EK0CW-SCR-LINES;
      EK0CW00.EK0CW-LINE-COUNT = 0;

      while (EK0CW00.EK0CW-LINE-IDX > 0)

        if (EK0CW00.EK0CW-YCT-CLM-TYP-CD == 
        EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-LINE-IDX] && 
        EK0CW00.EK0CW-YCR-CLM-RSN-CD == 
        EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-LINE-IDX] && 
        EK0CW00.EK0CW-YCS-CLM-STAT-CD == 
        EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-LINE-IDX] && 
        EK0CW00.EK0CW-CL-XCEP-FL == 
        EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-LINE-IDX])

          EK0CW00.EK0CW-LINE-COUNT = EK0CW00.EK0CW-LINE-COUNT + 1;

        end

        EK0CW00.EK0CW-LINE-IDX = EK0CW-LINE-IDX - 1;

      end

      if (EK0CW00.EK0CW-LINE-COUNT > 1) /* More than one found incl self*/
        converseLib.validationFailed(821); /* same Combo exists on another line*/
        set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] bold, cursor;
        set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] bold;
        set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] bold;
        set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] bold;
      else

           /* Check to make sure that the Key Combination doesn't already*/
           /* exist on the database*/

        set VCLESC01 empty;

        VCLESC01.YCT-CLM-TYP-CD = EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX];
        VCLESC01.YCR-CLM-RSN-CD = EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX];
        VCLESC01.YCS-CLM-STAT-CD = EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX];
        VCLESC01.CL-XCEP-FL = EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX];

        EK0CS-VCLESC01-S();

        if (SQLCA.VAGen_SQLCODE == 0) /* Record was found*/
          converseLib.validationFailed(822); /* same Combo already exist on table*/
          set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] bold, cursor;
          set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] bold;
          set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] bold;
          set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] bold;
        end

      end

    end

    EK0CW-SCR-IDX = EK0CW-SCR-IDX - 1;

  end

  if (converseVar.validationMsgNum != 0) /* If errors*/
    return; /* Get out*/
  end

   /*  */
   /* For DELETE Mode only*/
   /* Validate the column function value entered, bottom to top*/
   /*  */

  EK0CW00.EK0CW-SCR-IDX = EK0CW00.EK0CW-SCR-LINES;

  while (EK0CW00.EK0CW-SCR-IDX > 0 && 
  EK0CW00.EK0CW-MODE-IND == "D")

     /* Validate if there is data on detail line*/

    if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] > " " || 
    EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] > 0 || 
    EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] > 0)

        /* Validate Column Function*/

      if (EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] == " ")
        set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] normal;
      else
        if (EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] == "S")
          set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] normal;
        else
          converseLib.validationFailed(823); /* Invalid Value, must be S*/
          set EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] bold, cursor;
        end
      end
    end

    EK0CW-SCR-IDX = EK0CW-SCR-IDX - 1;

  end


   /* **************************************************************/
                     /* END  EK0C4100*/
   /* **************************************************************/
end // end EK0C4100

// ADD/UPD/DEL Process
Function EK0C4500()
   /*  */
   /* Insert/Update/Delete Process*/
   /*  */

   /* Get current date and time for ZZ fields*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  EK0CW00.ZZ-SDT = TA2REC.TA2GRGGN;
  EK0CW00.ZZ-SETUP-HHMM = TA2REC.TA2TIMHM;
  EK0CW00.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
  EK0CW00.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;

   /* Now, check for changes and perform add or change routine*/

  EK0CW00.EK0CW-SCR-IDX = 1;

  while (EK0CW-SCR-IDX <= EK0CW00.EK0CW-SCR-LINES
   && converseVar.validationMsgNum == 000)

    if (EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] != 
    EK0CW02.EK0CW-COL-FUNC[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] != 
    EK0CW02.YCT-CLM-TYP-CD[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] != 
    EK0CW02.YCR-CLM-RSN-CD[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] != 
    EK0CW02.YCS-CLM-STAT-CD[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] != 
    EK0CW02.CL-XCEP-FL[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] != 
    EK0CW02.CL-ESC-DAYS1[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] != 
    EK0CW02.CL-ESC-DAYS2[EK0CW-SCR-IDX])

      if (EK0CW00.EK0CW-MODE-IND == "A") /* ADD Mode*/

        EK0C4600(); /* Insert VCLESC01 row*/

      else
        if (EK0CW00.EK0CW-MODE-IND == "C") /* CHANGE Mode*/

          EK0C4700(); /* Update VCLESC01 row*/

        else /* DELETE Mode*/

          if (EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] == "S")

            EK0C4800(); /* Delete VCLESC01 row*/

          end

        end
      end
    end

    EK0CW-SCR-IDX = EK0CW-SCR-IDX + 1;

  end

   /* If no errors commit changes, else roll back and exit.*/
  if (converseVar.validationMsgNum == 000) /* No update errors*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* so commit changes*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* roll back changes*/
    return; /* and exit*/
  end

   /* Write updates back to temp storage queue*/

  EK0CW00.EK0CW-SCR-IDX = 1;
  EK0CW02.EK0CW-UPD-STG = "N";

  while (EK0CW-SCR-IDX <= EK0CW00.EK0CW-SCR-LINES)

    if (EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] != 
    EK0CW02.YCT-CLM-TYP-CD[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] != 
    EK0CW02.YCR-CLM-RSN-CD[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] != 
    EK0CW02.YCS-CLM-STAT-CD[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] != 
    EK0CW02.CL-XCEP-FL[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] != 
    EK0CW02.CL-ESC-DAYS1[EK0CW-SCR-IDX] || 
    EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] != 
    EK0CW02.CL-ESC-DAYS2[EK0CW-SCR-IDX])

      EK0CW02.EK0CW-UPD-STG = "Y";

      EK0CW02.YCT-CLM-TYP-CD[EK0CW-SCR-IDX] = EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX];
      EK0CW02.YCR-CLM-RSN-CD[EK0CW-SCR-IDX] = EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX];
      EK0CW02.YCS-CLM-STAT-CD[EK0CW-SCR-IDX] = EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX];
      EK0CW02.CL-XCEP-FL[EK0CW-SCR-IDX] = EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX];
      EK0CW02.CL-ESC-DAYS1[EK0CW-SCR-IDX] = EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX];
      EK0CW02.CL-ESC-DAYS2[EK0CW-SCR-IDX] = EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX];
      EK0CW02.ZZ-SDT[EK0CW-SCR-IDX] = EK0CM001.EK0CM-ZZ-SDT[EK0CW-SCR-IDX];
      EK0CW02.ZZ-CHNG-DT[EK0CW-SCR-IDX] = EK0CM001.EK0CM-ZZ-CHNG-DT[EK0CW-SCR-IDX];
    end

    EK0CW-SCR-IDX = EK0CW-SCR-IDX + 1;

  end

  if (EK0CW02.EK0CW-UPD-STG == "Y") /* Need to update*/
    EK0CW01.EK0CW-TEMP-ITEM = EK0CW02.EK0CW-TEMP-ITEM;

    TA5REC.TA5FNCCD = "U";

    TA5REC.TA5TSQIX = EK0CW00.EK0CW-CURR-PAGE;

    EK0CS-CALL-TA0050();

  end

   /* **************************************************************/
                     /* END  EK0C4500*/
   /* **************************************************************/
end // end EK0C4500

// Insert VCLESC01 row
Function EK0C4600()

   /* Insert VCLESC01 Process*/

  set VCLESC01 empty;

  VCLESC01.YCT-CLM-TYP-CD = EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX];
  VCLESC01.YCR-CLM-RSN-CD = EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX];
  VCLESC01.YCS-CLM-STAT-CD = EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX];
  VCLESC01.CL-XCEP-FL = EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX];

  EK0CS-VCLESC01-S(); /* Select VCLESC01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(778); /* Record for Insert already exists*/
    set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] bold, cursor;
    set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] bold;
    set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] bold;
    set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] bold;
  else
    VCLESC01.YCT-CLM-TYP-CD = EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX];
    VCLESC01.YCR-CLM-RSN-CD = EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX];
    VCLESC01.YCS-CLM-STAT-CD = EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX];
    VCLESC01.CL-XCEP-FL = EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX];

    VCLESC01.CL-ESC-DAYS1 = EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX];
    VCLESC01.CL-ESC-DAYS2 = EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX];

    EK0CM001.EK0CM-ZZ-SDT[EK0CW-SCR-IDX] = EK0CW00.ZZ-SDT;
    VCLESC01.ZZ-SDT = EK0CW00.ZZ-SDT;
    VCLESC01.ZZ-SETUP-HHMM = EK0CW00.ZZ-SETUP-HHMM;
    VCLESC01.ZZ-CHNG-DT = 0;
    VCLESC01.ZZ-CHNG-HHMM = 0;
    VCLESC01.ZZ-CHNG-CNT = 0;

    EK0CS-VCLESC01-I(); /* Insert VCLESC01 row*/

    if (SQLCA.VAGen_SQLCODE == 000)
      EK0CW02.EK0CW-ROW-DELTD[EK0CW-SCR-IDX] = "N";
      EK0CW02.EK0CW-ROW-CHNGD[EK0CW-SCR-IDX] = "N";
      EK0CW02.EK0CW-ROW-ADDED[EK0CW-SCR-IDX] = "Y";
      EK0CW02.EK0CW-ROW-EXISTS[EK0CW-SCR-IDX] = "N";
    else
      converseLib.validationFailed(339); /* Data updated by another appl*/
      set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] bold, cursor;
      set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] bold;
    end
  end

end // end EK0C4600

// Update VCLESC01 row
Function EK0C4700()

   /* Update VCLESC01 Process*/

  set VCLESC01 empty;

  VCLESC01.YCT-CLM-TYP-CD = EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX];
  VCLESC01.YCR-CLM-RSN-CD = EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX];
  VCLESC01.YCS-CLM-STAT-CD = EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX];
  VCLESC01.CL-XCEP-FL = EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX];

  EK0CS-VCLESC01-S(); /* Select VCLESC01 row*/

  if (SQLCA.VAGen_SQLCODE == 000)
    VCLESC01.CL-ESC-DAYS1 = EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX];
    VCLESC01.CL-ESC-DAYS2 = EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX];

    VCLESC01.ZZ-CHNG-DT = EK0CW00.ZZ-CHNG-DT;
    EK0CM001.EK0CM-ZZ-CHNG-DT[EK0CW-SCR-IDX] = EK0CW00.ZZ-CHNG-DT;
    VCLESC01.ZZ-CHNG-HHMM = EK0CW00.ZZ-CHNG-HHMM;

    EK0CS-VCLESC01-U(); /* Update VCLESC01 row*/

    if (SQLCA.VAGen_SQLCODE == 000)
      EK0CW02.EK0CW-ROW-DELTD[EK0CW-SCR-IDX] = "N";
      EK0CW02.EK0CW-ROW-CHNGD[EK0CW-SCR-IDX] = "Y";
      EK0CW02.EK0CW-ROW-ADDED[EK0CW-SCR-IDX] = "N";
      EK0CW02.EK0CW-ROW-EXISTS[EK0CW-SCR-IDX] = "N";
    else
      converseLib.validationFailed(018); /* Data updated by another appl*/
      set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] bold, cursor;
      set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] bold;
    end
  else
    converseLib.validationFailed(777); /* Record for Update not found*/
    set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] bold, cursor;
    set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] bold;
    set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] bold;
    set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] bold;
  end
end // end EK0C4700

// Delete VCLESC01 row
Function EK0C4800()

   /* Delete VCLESC01 Process*/

  set VCLESC01 empty;
   /*  */
  VCLESC01.YCT-CLM-TYP-CD = EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX];
  VCLESC01.YCR-CLM-RSN-CD = EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX];
  VCLESC01.YCS-CLM-STAT-CD = EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX];
  VCLESC01.CL-XCEP-FL = EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX];

  EK0CS-VCLESC01-S(); /* Select VCLESC01 row*/

  if (SQLCA.VAGen_SQLCODE == 000)

    EK0CS-VCLESC01-D(); /* Delete VCLESC01 row*/

    if (SQLCA.VAGen_SQLCODE == 000)
      EK0CW02.EK0CW-ROW-DELTD[EK0CW-SCR-IDX] = "N";
      EK0CW02.EK0CW-ROW-CHNGD[EK0CW-SCR-IDX] = "N";
      EK0CW02.EK0CW-ROW-ADDED[EK0CW-SCR-IDX] = "N";
      EK0CW02.EK0CW-ROW-EXISTS[EK0CW-SCR-IDX] = "Y";
    else
      converseLib.validationFailed(018); /* Data updated by another appl*/
      set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] bold, cursor;
      set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] bold;
      set EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] bold;
    end
  else
    converseLib.validationFailed(779); /* Record for Delete not found*/
    set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] bold, cursor;
    set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] bold;
    set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] bold;
    set EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] bold;
  end
end // end EK0C4800

// Converse CLM TYP Popup
Function EK0C5100()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for YCT-CLM-TYP-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "CLAIM TYPE CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCTTBL.YCTCD[XX0XWCT1] != "999") /* or End of Data*/
        if (YCTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCTTBL.YCTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCTTBL.YCTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && YCTTBL.YCTCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YCTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCTTBL.YCTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCTTBL.YCTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCTTBL.YCTCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0C5100

// Converse CLM RSN Popup
Function EK0C5200()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for YCR-CLM-RSN-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "CLAIM REASON CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCRTBL.YCRCD[XX0XWCT1] != "999") /* or End of Data*/
        if (YCRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCRTBL.YCRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCRTBL.YCRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && YCRTBL.YCRCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YCRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCRTBL.YCRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCRTBL.YCRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCRTBL.YCRCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0C5200

// Converse CLM STAT Popup
Function EK0C5300()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW for YCS-CLM-STAT-CD*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
   /* OVE XX0XW02.XX0XWHDR TO XX0XM001.XX0XMHDR; /* Place heading on map*/
    XX0XM001.XX0XMHDR = "CLAIM STATUS CODE DESCRIPTION"; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCSTBL.YCSCD[XX0XWCT1] != "999") /* or End of Data*/
        if (YCSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCSTBL.YCSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCSTBL.YCSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1 /* Load from the bottom up*/
       && YCSTBL.YCSCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YCSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCSTBL.YCSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCSTBL.YCSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCSTBL.YCSCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EK0C5300

// Call TA0020
Function EK0CS-CALL-TA0020()

   /* Call TA0020 to report DB2 or application errors*/

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "EK0C";
  TA1REC.TA1MAP = "EK0CM001";
  if (TA1REC.TA1TYPE == "DB2")
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end EK0CS-CALL-TA0020

// Call TA0050 for Temp Storage
Function EK0CS-CALL-TA0050()

   /* Call TA0050 to manage the Temp Storage quere*/
   /* If problems, report to TA0020.*/

  EK0CW01.EK0CW-RCD-SIZE = 0290;
  call "TA0050" (EK0CW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0000) /* Problems*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0CS-CALL-TA0050";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0050";
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    EK0CS-CALL-TA0020();
    converseLib.validationFailed(811); /* Unexpected error*/
    exit stack;
  end

end // end EK0CS-CALL-TA0050

// Check if User allowed Access
Function EK0CS-CHECK-ACCESS()

   /* Only valid Security Users can use this screen*/
   /* Check IF User is allowed access to this application*/

  EK0CW00.EK0CW-ALLOW-ACCESS-FL = "N";

  set VCLRES01 empty;

  VCLRES01.XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;
  VCLRES01.CL-CR-ANLS-USER-ID = " ";

  EK0CS-VCLRES01-S();

  if (SQLCA.VAGen_SQLCODE == 0)
    EK0CW00.EK0CW-ALLOW-ACCESS-FL = "Y";
  else
    EK0CW00.EK0CW-ALLOW-ACCESS-FL = "N";
  end

  if (EK0CW00.EK0CW-ALLOW-ACCESS-FL == "Y")
     /* continue*/
  else
   /* MOVE COMMAREA.CAFROMAP TO COMMAREA.CATOAP;*/
    COMMAREA.CATOAP = "EK0A";

    XSEXIT(); /* Exit to another application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(811); /* Cannot transfer*/
    return;
  end

end // end EK0CS-CHECK-ACCESS

// Check PF Key Pressed
Function EK0CS-CHECK-PFKEYS()

   /* Check for valid PF keys and Transfer Options*/

  if (converseVar.eventKey is pa2) /* Need refresh*/
    set EK0CW02 empty; /* Scrap table*/
    EK0CW00.EK0CW-MODE-IND = "I"; /* Switch to Inquire Mode*/
    EK0CW00.EK0CW-CURR-PAGE = 001;
    EK0CW00.EK0CW-CURR-RCD = 001;
    return;
  end

  if (converseVar.eventKey is enter) /* If ENTER pressed*/
    if (EK0CM001.CATOAP == " ") /* If Opt is blank*/
      if (EK0CM001.CAITEM == " ") /* And Item is blank*/
        return; /* OK, so exit*/
      else /* Cannot have item without option*/
        converseLib.validationFailed(285); /* Tell user*/
        set EK0CM001.CAITEM cursor, bold;
        return;
      end /* OK, so exit*/
    else
      EK0CS-PURGE-QUEUE(); /* Purge temp storage*/
      COMMAREA.CATOAP = EK0CM001.CATOAP;
      COMMAREA.CAITEM = EK0CM001.CAITEM;
      XSEXIT(); /* Try to get there*/
      converseLib.validationFailed(006); /* Cannot transfer*/
      set EK0CM001.CATOAP cursor, bold;
      return;
    end
  else
    if (EK0CM001.CATOAP != " " /* If Opt entered*/
     || EK0CM001.CAITEM != " ") /* or item entered*/
      converseLib.validationFailed(812); /* Can't use option and PFkey*/
      set EK0CM001.CATOAP cursor, bold;
      set EK0CM001.CAITEM bold;
      return;
    end
  end

  if (converseVar.eventKey is pf1) /* Help System*/
    EK0CS-PURGE-QUEUE(); /* Purge temp storage*/
    XSPF1(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf3) /* EF0I Menu*/

    EK0CS-PURGE-QUEUE(); /* Purge temp storage*/

    EK0CW00.EK0CW-END-SCREEN = "Y";

    if (EK0CW00.EK0CW-MODE-IND == "I") /* Inquire*/

      COMMAREA.CATOAP = COMMAREA.CAFROMAP;
   /* XSEFS-EXIT;                   /* Exit to another application*/
      XSEXIT(); /* Exit to another application*/

      XSPF4(); /* Try to get there*/
      converseLib.validationFailed(811); /* Cannot transfer*/
      return;
    else /* PF3 from CHANGE or ADD mode*/
      EK0CW00.EK0CW-MODE-IND = "I"; /* Switch to Inquire Mode*/
      EK0CW00.EK0CW-CURR-PAGE = 001;
      EK0CW00.EK0CW-CURR-RCD = 001;
      return;
    end
  end

  if (converseVar.eventKey is pf4) /* Master Menu*/
    EK0CS-PURGE-QUEUE(); /* Purge temp storage*/
    COMMAREA.CATOAP = "KL0A";
    XSEXIT(); /* Exit to another application*/

    XSPF4(); /* Try to get there*/
    converseLib.validationFailed(006); /* Cannot transfer*/
    return;
  end

  if (converseVar.eventKey is pf7) /* scroll up*/
    if (EK0CW02.EK0CW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0CW00.EK0CW-END-SCREEN = "N";
      return;
    end
    if (EK0CW00.EK0CW-CURR-PAGE == 1)
      converseLib.validationFailed(813); /* at the first page*/
      return;
    else
      EK0CW00.EK0CW-CURR-PAGE = EK0CW00.EK0CW-CURR-PAGE - 1;
      return;
    end
  end

  if (converseVar.eventKey is pf8) /* scroll down*/
    if (EK0CW02.EK0CW-SCREEN-CHNGD == "Y") /* User entered changes*/
      converseLib.validationFailed(812); /* Can't change & scroll*/
      EK0CW00.EK0CW-END-SCREEN = "N";
      return;
    end
    if (EK0CW00.EK0CW-CURR-PAGE == EK0CW00.EK0CW-MAX-PAGE)
      converseLib.validationFailed(814); /* at the last page*/
      return;
    else
      EK0CW00.EK0CW-CURR-PAGE = EK0CW00.EK0CW-CURR-PAGE + 1;
      return;
    end
  end

  if (converseVar.eventKey is pf9) /* go to ADD mode*/
    if (EK0CW00.EK0CW-MODE-IND == "A" ||  /* If already in ADD or*/
    EK0CW00.EK0CW-MODE-IND == "C" ||      /* CHANGE mode or*/
    EK0CW00.EK0CW-MODE-IND == "D")        /* DELETE mode*/
       /* continue down to INVALID PF Key*/
    else
      if (EK0CM001.EK0CM-SEARCH-CLM-TYP == CLWREC.YCTCD && 
      EK0CM001.EK0CM-SEARCH-CLM-RSN == CLWREC.YCRCD) /* No Search*/
        if (COMMAREA.CAADDFL == "Y") /* User can add*/
          EK0CS-PURGE-QUEUE(); /* Purge temp storage*/

          set EK0CW01 empty;
          set EK0CW02 empty;
          EK0CW00.EK0CW-CURR-PAGE = 1;
          EK0CW00.EK0CW-CURR-RCD = 1;
          EK0CW00.EK0CW-MAX-PAGE = 1;
          EK0CM001.EK0CM-CURR-PAGE = EK0CW00.EK0CW-CURR-PAGE;
          EK0CM001.EK0CM-MAX-PAGE = EK0CW00.EK0CW-MAX-PAGE;
          EK0CW00.EK0CW-MODE-IND = "A";

          EK0CS-SET-ADD-SCR(); /* Setup ADD screen*/

          return;
        else
          converseLib.validationFailed(562); /* Don't have authority*/
          return;
        end
      else
        converseLib.validationFailed(001); /* PFkey not allowed when criteria changed*/
        return;
      end
    end
  end

  if (converseVar.eventKey is pf10) /* go to CHANGE mode*/
    if (EK0CW00.EK0CW-MODE-IND == "C" ||  /* If already in CHANGE or*/
    EK0CW00.EK0CW-MODE-IND == "A" ||      /* ADD mode or*/
    EK0CW00.EK0CW-MODE-IND == "D" ||      /* DELETE mode or*/
    EK0CM001.EK0CM-YCT-CLM-TYP-CD[1] == " ") /* No entries on screen*/
       /* continue down to INVALID PF Key*/
    else
      if (EK0CM001.EK0CM-SEARCH-CLM-TYP == CLWREC.YCTCD && 
      EK0CM001.EK0CM-SEARCH-CLM-RSN == CLWREC.YCRCD) /* No Search*/
        if (COMMAREA.CACHGFL == "Y") /* User can Change*/
          EK0CW00.EK0CW-MODE-IND = "C";
          return;
        else
          converseLib.validationFailed(562); /* Don't have authority*/
          return;
        end
      else
        converseLib.validationFailed(812); /* PFkey not allowed when criteria changed*/
        return;
      end
    end
  end

  if (converseVar.eventKey is pf11) /* go to DELETE mode*/
    if (EK0CW00.EK0CW-MODE-IND == "D" ||  /* If already in DELETE or*/
    EK0CW00.EK0CW-MODE-IND == "A" ||      /* ADD mode or*/
    EK0CW00.EK0CW-MODE-IND == "C" ||      /* CHANGE mode or*/
    EK0CM001.EK0CM-YCT-CLM-TYP-CD[1] == " ") /* No entries on screen*/
       /* continue down to INVALID PF Key*/
    else
      if (EK0CM001.EK0CM-SEARCH-CLM-TYP == CLWREC.YCTCD && 
      EK0CM001.EK0CM-SEARCH-CLM-RSN == CLWREC.YCRCD) /* No Search*/
        if (COMMAREA.CADELFL == "Y") /* User can Delete*/
          EK0CW00.EK0CW-MODE-IND = "D";
          converseLib.validationFailed(827); /* Mode changed; Select line to delete*/
          return;
        else
          converseLib.validationFailed(562); /* Don't have authority*/
          return;
        end
      else
        converseLib.validationFailed(812); /* PFkey not allowed when criteria changed*/
        return;
      end
    end
  end

  if (converseVar.eventKey is pf12) /* User has confirmed*/
    if (EK0CW00.EK0CW-MODE-IND == "I"
    ) /* continue as invalid PF Key*/
    else /* User has confirmed ADD, CHANGE or DELETE*/
      return;
    end
  end


  converseLib.validationFailed(002); /* Invalid PF key*/

end // end EK0CS-CHECK-PFKEYS

// Display Popup Window(s)
Function EK0CS-POPUP-WINDOW()
   /* ------------------------------------------------------------*/
   /* PopUp Window processing for Data Distribution Code and GPC*/
   /* ------------------------------------------------------------*/

  EK0CW00.EK0CW-POPUP-FL = "Y";

  XPXX001(); /* Initialize popup window*/

  if (EK0CW00.EK0CW-POPUP-IND == 1 ||  /* Claim Type Code Popup (Search)*/
  EK0CW00.EK0CW-POPUP-IND == 3)        /* Claim Type Code Popup (Detail)*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0C5100(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0CW00.EK0CW-POPUP-IND == 1) /* Claim Type Popup on Search*/
        EK0CM001.EK0CM-SEARCH-CLM-TYP = YCTTBL.YCTCD[XX0XWPIX];
        EK0CM001.EK0CM-YCTDESC = YCTTBL.YCTDESC[XX0XWPIX];
        set EK0CM001.EK0CM-SEARCH-CLM-TYP cursor;
        set EK0CM001.EK0CM-SEARCH-CLM-TYP normal;
      else /* 3  /* Claim Type Popup on Detail*/
        EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] = YCTTBL.YCTCD[XX0XWPIX];
        set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] cursor;
        set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] normal;
      end
    else
      if (EK0CW00.EK0CW-POPUP-IND == 1) /* Claim Type Popup on Search*/
        EK0CM001.EK0CM-SEARCH-CLM-TYP = " ";
        EK0CM001.EK0CM-YCTDESC = " ";
        set EK0CM001.EK0CM-SEARCH-CLM-TYP cursor;
        set EK0CM001.EK0CM-SEARCH-CLM-TYP normal;
      else /* Claim Type Popup on Detail*/
        EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] = " ";
        set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] cursor;
        set EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] normal;
      end
    end

  end

  if (EK0CW00.EK0CW-POPUP-IND == 2 ||  /* Claim Reason Code Popup (Search)*/
  EK0CW00.EK0CW-POPUP-IND == 4)        /* Claim Reason Code Popup (Detail)*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0C5200(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      if (EK0CW00.EK0CW-POPUP-IND == 2) /* Claim Rsn Popup on Search*/
        EK0CM001.EK0CM-SEARCH-CLM-RSN = YCRTBL.YCRCD[XX0XWPIX];
        EK0CM001.EK0CM-YCRDESC = YCRTBL.YCRDESC[XX0XWPIX];
        set EK0CM001.EK0CM-SEARCH-CLM-RSN cursor;
        set EK0CM001.EK0CM-SEARCH-CLM-RSN normal;
      else /* 4  /* Claim Rsn Popup on Detail*/
        EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] = YCRTBL.YCRCD[XX0XWPIX];
        set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] cursor;
        set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] normal;
      end
    else
      if (EK0CW00.EK0CW-POPUP-IND == 2) /* Claim Type Popup on Search*/
        EK0CM001.EK0CM-SEARCH-CLM-RSN = " ";
        EK0CM001.EK0CM-YCRDESC = " ";
        set EK0CM001.EK0CM-SEARCH-CLM-RSN cursor;
        set EK0CM001.EK0CM-SEARCH-CLM-RSN normal;
      else /* 4  /* Claim Type Popup on Detail*/
        EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] = " ";
        set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] cursor;
        set EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] normal;
      end
    end

  end

  if (EK0CW00.EK0CW-POPUP-IND == 5) /* Claim Status Code Popup requested*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      EK0C5300(); /* Display the list*/
    end

    set EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] cursor;

    if (XX0XW02.XX0XWPIX > 0)
      EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] = YCSTBL.YCSCD[XX0XWPIX];
    else
      EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] = " ";
    end

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  converseLib.validationFailed(810); /* Requested list(s) displayed*/

   /* ------------------------------------------------------------*/
   /* End EK0CS-POPUP-WINDOW*/
   /* ------------------------------------------------------------*/
end // end EK0CS-POPUP-WINDOW

// Purge temp storage queue
Function EK0CS-PURGE-QUEUE()
   /* CHANGE RECORD LENGTH!!!  ALSO ERROR MESSAGE*/

   /* Call TA0050 to manage the Temp Storage quere*/
   /* If problems, report to TA0020.*/

  TA5REC.TA5APPID = "EK0C";
  TA5REC.TA5FNCCD = "P";
  EK0CW01.EK0CW-RCD-SIZE = 0290;
  call "TA0050" (EK0CW01, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0000) /* Problems*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1LOC = "EK0CS-PURGE-QUEUE";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM TA0050";
    TAEREC.TAEDESC2 = TA5REC.TA5DATA;
    EK0CS-CALL-TA0020();
    converseLib.validationFailed(001); /* Unexpected error*/
    exit stack;
  end

end // end EK0CS-PURGE-QUEUE

// Setup ADD screen
Function EK0CS-SET-ADD-SCR()
  EK0CW00.EK0CW-SCR-IDX = 1;
  EK0CW00.EK0CW-LINE-IDX = 1;

  while (EK0CW00.EK0CW-SCR-IDX <= EK0CW00.EK0CW-SCR-LINES)

    if (EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] == "S")

      EK0CM001.EK0CM-COL-FUNC[EK0CW-LINE-IDX] = " ";
      EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-LINE-IDX] = EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX];
      EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-LINE-IDX] = EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX];
      EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-LINE-IDX] = EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX];
      EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-LINE-IDX] = EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX];
      EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-LINE-IDX] = EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX];
      EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-LINE-IDX] = EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX];
      EK0CM001.EK0CM-ZZ-SDT[EK0CW-LINE-IDX] = 0;
      EK0CM001.EK0CM-ZZ-CHNG-DT[EK0CW-LINE-IDX] = 0;

      EK0CW02.EK0CW-ROW-DELTD[EK0CW-LINE-IDX] = "N";
      EK0CW02.EK0CW-ROW-CHNGD[EK0CW-LINE-IDX] = "N";
      EK0CW02.EK0CW-ROW-EXISTS[EK0CW-LINE-IDX] = "N";
      EK0CW02.EK0CW-ROW-ADDED[EK0CW-LINE-IDX] = "Y";

      EK0CW00.EK0CW-LINE-IDX = EK0CW-LINE-IDX + 1;

    end

    EK0CW00.EK0CW-SCR-IDX = EK0CW-SCR-IDX + 1;

  end

  EK0CW00.EK0CW-SCR-IDX = EK0CW00.EK0CW-LINE-IDX;

  while (EK0CW00.EK0CW-SCR-IDX <= EK0CW00.EK0CW-SCR-LINES)

    EK0CM001.EK0CM-COL-FUNC[EK0CW-SCR-IDX] = " ";
    EK0CM001.EK0CM-YCT-CLM-TYP-CD[EK0CW-SCR-IDX] = " ";
    EK0CM001.EK0CM-YCR-CLM-RSN-CD[EK0CW-SCR-IDX] = " ";
    EK0CM001.EK0CM-YCS-CLM-STAT-CD[EK0CW-SCR-IDX] = " ";
    EK0CM001.EK0CM-CL-XCEP-FL[EK0CW-SCR-IDX] = " ";
    EK0CM001.EK0CM-CL-ESC-DAYS1[EK0CW-SCR-IDX] = 0;
    EK0CM001.EK0CM-CL-ESC-DAYS2[EK0CW-SCR-IDX] = 0;
    EK0CM001.EK0CM-ZZ-SDT[EK0CW-SCR-IDX] = 0;
    EK0CM001.EK0CM-ZZ-CHNG-DT[EK0CW-SCR-IDX] = 0;

    EK0CW02.EK0CW-ROW-DELTD[EK0CW-SCR-IDX] = "N";
    EK0CW02.EK0CW-ROW-CHNGD[EK0CW-SCR-IDX] = "N";
    EK0CW02.EK0CW-ROW-EXISTS[EK0CW-SCR-IDX] = "N";
    EK0CW02.EK0CW-ROW-ADDED[EK0CW-SCR-IDX] = "Y";

    EK0CW00.EK0CW-SCR-IDX = EK0CW-SCR-IDX + 1;

  end

  EK0CW01.EK0CW-TEMP-ITEM = EK0CW02.EK0CW-TEMP-ITEM;

  TA5REC.TA5FNCCD = "A";

  EK0CS-CALL-TA0050(); /* Write TS Queue record*/

end // end EK0CS-SET-ADD-SCR

// Validate Search criteria
Function EK0CS-VAL-SEARCH()

   /* Validate Claim Reason Code*/

  EK0CW00.EK0CW-3-CHAR = EK0CM001.EK0CM-SEARCH-CLM-RSN;

  if (EK0CW00.EK0CW-1ST-CHAR == "?" || 
  EK0CW00.EK0CW-2ND-CHAR == "?" || 
  EK0CW00.EK0CW-3RD-CHAR == "?")

    EK0CW00.EK0CW-POPUP-IND = "2";

    EK0CS-POPUP-WINDOW(); /* Display PopUp Window*/

    return;
  else

    EK0CW00.EK0CW-POPUP-FL = "N";

    if (EK0CM001.EK0CM-SEARCH-CLM-RSN == " ")
      CLWREC.YCRCD = " ";
      EK0CM001.EK0CM-YCRDESC = " ";
    else
      if (EK0CM001.EK0CM-SEARCH-CLM-RSN == "999") /* End of data*/
        converseLib.validationFailed(817); /* Claim Reason is invalid*/
        EK0CM001.EK0CM-YCRDESC = " ";
        set EK0CM001.EK0CM-SEARCH-CLM-RSN cursor, bold;
      else
        if (EK0CM001.EK0CM-SEARCH-CLM-RSN in YCRTBL.YCRCD && 
        YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active*/
          set EK0CM001.EK0CM-SEARCH-CLM-RSN normal;
          CLWREC.YCRCD = EK0CM001.EK0CM-SEARCH-CLM-RSN;
          EK0CM001.EK0CM-YCRDESC = YCRTBL.YCRDESC[sysVar.arrayIndex];
        else
          converseLib.validationFailed(817); /* Claim Reason is invalid*/
          set EK0CM001.EK0CM-SEARCH-CLM-RSN cursor, bold;
          EK0CM001.EK0CM-YCRDESC = " ";
        end
      end
    end
  end


   /* Validate Claim Type Code*/

  EK0CW00.EK0CW-3-CHAR = EK0CM001.EK0CM-SEARCH-CLM-TYP;

  if (EK0CW00.EK0CW-1ST-CHAR == "?" || 
  EK0CW00.EK0CW-2ND-CHAR == "?" || 
  EK0CW00.EK0CW-3RD-CHAR == "?")

    EK0CW00.EK0CW-POPUP-IND = "1";

    EK0CS-POPUP-WINDOW(); /* Display PopUp Window*/

    return;
  else

    EK0CW00.EK0CW-POPUP-FL = "N";

    if (EK0CM001.EK0CM-SEARCH-CLM-TYP == "  ")
      CLWREC.YCTCD = " ";
      EK0CM001.EK0CM-YCTDESC = " ";
    else
      if (EK0CM001.EK0CM-SEARCH-CLM-TYP == "999") /* End of data*/
        converseLib.validationFailed(087); /* Claim Type is invalid*/
        set EK0CM001.EK0CM-SEARCH-CLM-TYP cursor, bold;
        EK0CM001.EK0CM-YCTDESC = " ";
      else
        if (EK0CM001.EK0CM-SEARCH-CLM-TYP in YCTTBL.YCTCD && 
        YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active*/
          set EK0CM001.EK0CM-SEARCH-CLM-TYP normal;
          CLWREC.YCTCD = EK0CM001.EK0CM-SEARCH-CLM-TYP;
          EK0CM001.EK0CM-YCTDESC = YCTTBL.YCTDESC[sysVar.arrayIndex];
            /* continue*/
        else
          converseLib.validationFailed(087); /* Claim Type is invalid*/
          set EK0CM001.EK0CM-SEARCH-CLM-TYP cursor, bold;
          EK0CM001.EK0CM-YCTDESC = " ";
        end
      end
    end
  end

end // end EK0CS-VAL-SEARCH

// Close VCLESC01 row
Function EK0CS-VCLESC01-C1()

  CLXREC.CLXCPROC = "EK0CS-VCLESC01-C1";

  call "VCLESC01" ("C1", SQLCA, VCLESC01) {isNoRefresh = yes, isExternal = yes}; /* Close*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(339); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
      TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
      TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
      XPCL010(); /* abend routine*/
    end
  end

end // end EK0CS-VCLESC01-C1

// Delete VCLESC01 row
Function EK0CS-VCLESC01-D()

  CLXREC.CLXCPROC = "EK0CS-VCLESC01-D";

  call "VCLESC01" ("D ", SQLCA, VCLESC01) {isNoRefresh = yes, isExternal = yes}; /* Delete*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(339); /* data base busy*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "D      "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "VCLESC01"; /* io module*/
      TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
      TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
      XPCL010(); /* abend routine*/
    end
  end

end // end EK0CS-VCLESC01-D

// Insert VCLESC01 row
Function EK0CS-VCLESC01-I()
  call "VCLESC01" ("A ", SQLCA, VCLESC01) {isNoRefresh = yes, isExternal = yes}; /* Insert*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(339); /* data base busy*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "A      "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "VCLESC01"; /* io module*/
      TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
      TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
      XPCL010(); /* abend routine*/
    end
  end

end // end EK0CS-VCLESC01-I

// Fetch VCLESC01 row
Function EK0CS-VCLESC01-N1()

  CLXREC.CLXCPROC = "EK0CS-VCLESC01-N1";

  call "VCLESC01" ("N1", SQLCA, VCLESC01) {isNoRefresh = yes, isExternal = yes}; /* Fetch*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(339); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
      TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
      TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
      XPCL010(); /* abend routine*/
    end
  end

end // end EK0CS-VCLESC01-N1

// Select VCLESC01 row
Function EK0CS-VCLESC01-S()
  CLXREC.CLXCPROC = "EK0CS-VCLESC01-S";

  call "VCLESC01" ("S ", SQLCA, VCLESC01) {isNoRefresh = yes, isExternal = yes}; /* Select*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(339); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
      TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
      TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
      XPCL010(); /* abend routine*/
    end
  end

end // end EK0CS-VCLESC01-S

// Open VCLESC01 row
Function EK0CS-VCLESC01-S1()

  CLXREC.CLXCPROC = "EK0CS-VCLESC01-S1";

  set VCLESC01 empty;

  VCLESC01.YCT-CLM-TYP-CD = EK0CM001.EK0CM-SEARCH-CLM-TYP;
  VCLESC01.YCR-CLM-RSN-CD = EK0CM001.EK0CM-SEARCH-CLM-RSN;

  call "VCLESC01" ("S1", SQLCA, VCLESC01) {isNoRefresh = yes, isExternal = yes}; /* Select*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(339); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
      TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
      TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
      XPCL010(); /* abend routine*/
    end
  end

end // end EK0CS-VCLESC01-S1

// Update VCLESC01 row
Function EK0CS-VCLESC01-U()
  CLXREC.CLXCPROC = "EK0CS-VCLESC01-U";

  XX0XS01(); /* get current system time and date*/

  VCLESC01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VCLESC01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

  call "VCLESC01" ("U ", SQLCA, VCLESC01) {isNoRefresh = yes, isExternal = yes}; /**/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(339); /* data base busy*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "U      "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "VCLESC01 "; /* io module*/
      TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
      TA1REC.TA1TBLVU = "VCLESC01"; /* table view*/
      XPCL010(); /* abend routine*/
    end
  end

end // end EK0CS-VCLESC01-U

// Select VCLRES01 row
Function EK0CS-VCLRES01-S()
  CLXREC.CLXCPROC = "EK0CS-VCLRES01-S";

  try
    call "VCLRES01" ("S ", SQLCA, VCLRES01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(339); /* data base busy*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0 && 
      SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
        TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
        TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
        XPCL010(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "S 8    "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "VCLRES01 "; /* io module*/
    TA1REC.TA1DBASE = "DCLAIM"; /* data base*/
    TA1REC.TA1TBLVU = "VCLRES01"; /* table view*/
    XPCL010(); /* abend routine*/
  end
end // end EK0CS-VCLRES01-S

//*** RECORD=EK0CW00 ****
// This is the main working storage record for EK0C.
// ***********************
Record EK0CW00 type basicRecord
  10 EK0CW-SCR-LINES EK0CW-SCR-LINES ; 
  10 EK0CW-SCR-IDX EK0CW-SCR-IDX ; 
  10 EK0CW-LINE-IDX EK0CW-LINE-IDX ; 
  10 EK0CW-END-SCREEN EK0CW-END-SCREEN ; 
  10 EK0CW-WRK-IDX EK0CW-WRK-IDX ; 
  10 EK0CW-COL-IDX EK0CW-COL-IDX ; 
  10 EK0CW-LINE-COUNT EK0CW-LINE-COUNT ; 
  10 EK0CW-MODE-IND EK0CW-MODE-IND ; 
  10 EK0CW-POPUP-FL EK0CW-POPUP-FL ; 
  10 EK0CW-POPUP-IND EK0CW-POPUP-IND ; 
  10 EK0CW-END-SCAN EK0CW-END-SCAN ; 
  10 EK0CW-VALID-KEY-FL EK0CW-VALID-KEY-FL ; 
  10 EK0CW-BYPASS-FL EK0CW-BYPASS-FL ; 
  10 EK0CW-ALLOW-ACCESS-FL EK0CW-ALLOW-ACCESS-FL ; 
  10 * char(1) ; 
  10 EK0CW-VCLESC01-ROW EK0CW-VCLESC01-ROW ; 
    15 EK0CW-YCT-CLM-TYP-CD EK0CW-YCT-CLM-TYP-CD ; 
    15 EK0CW-YCR-CLM-RSN-CD EK0CW-YCR-CLM-RSN-CD ; 
    15 EK0CW-YCS-CLM-STAT-CD EK0CW-YCS-CLM-STAT-CD ; 
    15 EK0CW-CL-XCEP-FL EK0CW-CL-XCEP-FL ; 
    15 EK0CW-CL-ESC-DAYS1 EK0CW-CL-ESC-DAYS1 ; 
    15 EK0CW-CL-ESC-DAYS2 EK0CW-CL-ESC-DAYS2 ; 
    15 EK0CW-ZZ-SDT EK0CW-ZZ-SDT ; 
    15 EK0CW-ZZ-CHNG-DT EK0CW-ZZ-CHNG-DT ; 
  10 * char(1) ; 
  10 EK0CW-SEARCH-CLM-TYP EK0CW-SEARCH-CLM-TYP ; 
  10 EK0CW-SEARCH-CLM-RSN EK0CW-SEARCH-CLM-RSN ; 
  10 * char(1) ; 
  10 EK0CW-TEMP-STG-DATA EK0CW-TEMP-STG-DATA ; 
    15 EK0CW-CURR-PAGE EK0CW-CURR-PAGE ; 
    15 EK0CW-MAX-PAGE EK0CW-MAX-PAGE ; 
    15 EK0CW-CURR-RCD EK0CW-CURR-RCD ; 
    15 EK0CW-MAX-RCD EK0CW-MAX-RCD ; 
  10 * char(1) ; 
  10 EK0CW-DATE-CCYYMMDD-BIN EK0CW-DATE-CCYYMMDD-BIN ; 
  10 * char(1) ; 
  10 EK0CW-DATE-CCYYMMDD EK0CW-DATE-CCYYMMDD ; 
    15 EK0CW-DATE-CC EK0CW-DATE-CC ; 
    15 EK0CW-DATE-YY EK0CW-DATE-YY ; 
    15 EK0CW-DATE-MM EK0CW-DATE-MM ; 
    15 EK0CW-DATE-DD EK0CW-DATE-DD ; 
  10 * char(1) ; 
  10 EK0CW-3-CHAR EK0CW-3-CHAR ; 
    15 EK0CW-1ST-CHAR EK0CW-1ST-CHAR ; 
    15 EK0CW-2ND-CHAR EK0CW-2ND-CHAR ; 
    15 EK0CW-3RD-CHAR EK0CW-3RD-CHAR ; 
  10 * char(1) ; 
  10 EK0CW-ZZ-FAMILY EK0CW-ZZ-FAMILY ; 
    15 ZZ-SDT ZZ-SDT ; 
    15 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    15 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    15 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    15 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end EK0CW00

//*** RECORD=EK0CW01 ****
// This is the main working storage record for EK0C.
// ***********************
Record EK0CW01 type basicRecord
  5 EK0CW-RCD-SIZE EK0CW-RCD-SIZE ; 
  5 EK0CW-TEMP-ITEM EK0CW-TEMP-ITEM ; 
    10 EK0CW-COL-FUNC EK0CW-COL-FUNC [10] ; 
    10 YCT-CLM-TYP-CD YCT-CLM-TYP-CD [10] ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD [10] ; 
    10 YCS-CLM-STAT-CD YCS-CLM-STAT-CD [10] ; 
    10 CL-XCEP-FL CL-XCEP-FL [10] ; 
    10 CL-ESC-DAYS1 CL-ESC-DAYS1 [10] ; 
    10 CL-ESC-DAYS2 CL-ESC-DAYS2 [10] ; 
    10 ZZ-SDT ZZ-SDT [10] ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT [10] ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT [10] ; 
    10 EK0CW-ROW-EXISTS EK0CW-ROW-EXISTS [10] ; 
    10 EK0CW-ROW-CHNGD EK0CW-ROW-CHNGD [10] ; 
    10 EK0CW-ROW-ADDED EK0CW-ROW-ADDED [10] ; 
    10 EK0CW-ROW-DELTD EK0CW-ROW-DELTD [10] ; 
end // end EK0CW01

//*** RECORD=EK0CW02 ****
// ************************************************************
// Working Storage for EK0C
// 
// This table holds information about the section of temp
// storage currently being displayed on the screen.
// ************************************************************
// ***********************
Record EK0CW02 type basicRecord
  5 EK0CW-CURR-RCD EK0CW-CURR-RCD ; 
  5 EK0CW-W02-IDX EK0CW-W02-IDX ; 
  5 EK0CW-SCREEN-CHNGD EK0CW-SCREEN-CHNGD ; 
  5 EK0CW-UPD-STG EK0CW-UPD-STG ; 
  5 EK0CW-TEMP-ITEM EK0CW-TEMP-ITEM ; 
    10 EK0CW-COL-FUNC EK0CW-COL-FUNC [10] ; 
    10 YCT-CLM-TYP-CD YCT-CLM-TYP-CD [10] ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD [10] ; 
    10 YCS-CLM-STAT-CD YCS-CLM-STAT-CD [10] ; 
    10 CL-XCEP-FL CL-XCEP-FL [10] ; 
    10 CL-ESC-DAYS1 CL-ESC-DAYS1 [10] ; 
    10 CL-ESC-DAYS2 CL-ESC-DAYS2 [10] ; 
    10 ZZ-SDT ZZ-SDT [10] ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT [10] ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT [10] ; 
    10 EK0CW-ROW-EXISTS EK0CW-ROW-EXISTS [10] ; 
    10 EK0CW-ROW-CHNGD EK0CW-ROW-CHNGD [10] ; 
    10 EK0CW-ROW-ADDED EK0CW-ROW-ADDED [10] ; 
    10 EK0CW-ROW-DELTD EK0CW-ROW-DELTD [10] ; 
end // end EK0CW02

//*** RECORD=EK0CW03 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - xpxx001
//            and xp???01. ( Where ??? is the table name
//            associated with the pop-up window process.)
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/06/98  HMACAL  CREATED
// ************************************************************
// ***********************
Record EK0CW03 type basicRecord
  10 EK0CWCT1 EK0CWCT1 ; 
  10 EK0CWCT2 EK0CWCT2 ; 
  10 EK0CWSIX EK0CWSIX ; 
  10 EK0CWPIX EK0CWPIX ; 
  10 EK0CWINX EK0CWINX [20] ; 
  10 EK0CWEND EK0CWEND ; 
  10 EK0CWFFL EK0CWFFL ; 
  10 EK0CWERR EK0CWERR ; 
  10 EK0CWHDR EK0CWHDR ; 
    15 * char(1) ; // filler 1
    15 EK0CW-YCT-CLM-TYP-CD EK0CW-YCT-CLM-TYP-CD ; 
    15 * char(1) ; // filler 2
    15 EK0CW-YCT-CLM-TYP-DESC EK0CW-YCT-CLM-TYP-DESC ; 
  10 EK0CWNUM EK0CWNUM ; 
    15 EK0CWCHA EK0CWCHA ; 
end // end EK0CW03

// 1st of 3
DataItem EK0CW-1ST-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd of 3
DataItem EK0CW-2ND-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3-CHAR Work Area
DataItem EK0CW-3-CHAR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd of 3
DataItem EK0CW-3RD-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-ALLOW-ACCESS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-BYPASS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-ESC-DAYS1
DataItem EK0CW-CL-ESC-DAYS1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-ESC-DAYS2
DataItem EK0CW-CL-ESC-DAYS2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-XCEP-FL
DataItem EK0CW-CL-XCEP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// column function
DataItem EK0CW-COL-FUNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// column index
DataItem EK0CW-COL-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page on screen
DataItem EK0CW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current temp storage records
DataItem EK0CW-CURR-RCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date century
DataItem EK0CW-DATE-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 Date Format Numeric
DataItem EK0CW-DATE-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 Date Format Binary
DataItem EK0CW-DATE-CCYYMMDD-BIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date day
DataItem EK0CW-DATE-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date month
DataItem EK0CW-DATE-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date year
DataItem EK0CW-DATE-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of scan flag
DataItem EK0CW-END-SCAN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of screen flag
DataItem EK0CW-END-SCREEN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of entered detail lines
DataItem EK0CW-LINE-COUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line index
DataItem EK0CW-LINE-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum pages
DataItem EK0CW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum temp storage records
DataItem EK0CW-MAX-RCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// program mode (a,c,i)
DataItem EK0CW-MODE-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// was a popup displayed? Y/N
DataItem EK0CW-POPUP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1=CLM TYP 2=CLM RSN 3=CLM ST
DataItem EK0CW-POPUP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Modified Switch
DataItem EK0CW-RCD-SIZE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0CW-ROW-ADDED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-ROW-CHNGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-ROW-DELTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-ROW-EXISTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen index
DataItem EK0CW-SCR-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size of screen table
DataItem EK0CW-SCR-LINES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0CW-SCREEN-CHNGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search YCR-CLM-RSN-CD
DataItem EK0CW-SEARCH-CLM-RSN char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search YCT-CLM-TYP-CD
DataItem EK0CW-SEARCH-CLM-TYP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-TEMP-ITEM char(290)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage control data
DataItem EK0CW-TEMP-STG-DATA char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-UPD-STG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-VALID-KEY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-VCLESC01-ROW char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-W02-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem EK0CW-WRK-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YCR-CLM-RSN-CD
DataItem EK0CW-YCR-CLM-RSN-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YCS-CLM-STAT-CD1
DataItem EK0CW-YCS-CLM-STAT-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YCT-CLM-TYP-CD
DataItem EK0CW-YCT-CLM-TYP-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CW-YCT-CLM-TYP-DESC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZZ-CHNG-DT
DataItem EK0CW-ZZ-CHNG-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0CW-ZZ-FAMILY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZZ-SDT
DataItem EK0CW-ZZ-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0CWCHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0CWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0CWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CWHDR char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EK0CWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0CWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0CWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EK0CWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

