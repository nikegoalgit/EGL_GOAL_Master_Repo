package gn0s;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fy.common.*;
import gn0a.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pk.common.*;
import pk0y.VOPPKI02;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=GN0S ****
// ************************************************************
// 
//                    NIL EXPORT ORDER MCO -  UPDATE
//                         &  MISSSING COUNTRY OF ORIGIN REPORT
//                    ===============================
// 
// 
// ************************************************************
// OVERVIEW:
// 1. Manufactured country of origin is updated using  this
// application for a NIL export order product at size level
//  using PF5 key
// 2. MCOs are validated with internal table
//  XCTTBL(dcorp.vxct0001)
// 2. Missing country of origin report printed  for a schedule
//  at size level using PF8 key
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
// CONTROL    DATE         NAME   DESCRIPTION OF CHANGE
// -----------------     --------          ----------   
//  ---------------------------------
//     00             05/02/03   rathal     created prototype
// 
// IO Modules :
// ===========
// VOPPKH05 - 1. to check the order existence
//                       2. to validate the nil order
// VOPPKI02 - to get the line item number of the product
// VOPPKS03 -to get available sizes for the perticular product
// IO0800 -  1. to check shcedule existence
//                 2. to validate the schedule for NIL orders
// ************************************************************
// ************************************************************
// *********************
Program GN0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "GN00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  GN0SW01 GN0SW01; // record
  GN0SW02 GN0SW02; // record
  SQLCA SQLCA; // record
  SR2REC SR2REC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  VOPPKH05 VOPPKH05; // record
  VOPPKI02 VOPPKI02; // record
  VOPPKS03 VOPPKS03; // record
  X2CREC X2CREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use GN0ST01 {deleteAfterUse = yes}; // table
  use GN0ST02 {deleteAfterUse = yes}; // table
  use XWHTBL; // table
  use XCTTBL; // table
  use GN0SM.GN0SM110,  // forms
      GN0SM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    GN0S110: GN0S110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    goto GN0S120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                   ****/
     /* ************************************************************/


    GN0S120: GN0S120();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    goto GN0S120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                   ****/
     /* ************************************************************/


  end // end main
end // end GN0S

// one time initializations
Function GN0S110()


   /* ****************************************************************/
   /* *** standard security checking                                 ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ****************************************************************/

  XSENTRY();

   /* ****************************************************************/
   /* *** standard segmented trans id setting                   ****/
   /* ****************************************************************/

  XSSEGTR();

   /* ****************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ****************************************************************/

  converseLib.clearScreen();
  set GN0SM110 initial; /* resets fld values, attr.s & cursor*/

   /* ****************************************************************/
   /* *** initialize std working storage & map fields            ****/
   /* ****************************************************************/

  set GN0SW01 empty; /* working storage fields*/
  set GN0SW02 empty;
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set TAEREC empty;
  set TARREC empty;
  set TA6REC empty;
  set VOPPKS03 empty;
  set VOPPKH05 empty;
  set VOPPKI02 empty;
  set SR2REC empty;

  set ERRSQLCA empty;
  set SQLCA empty; /* SQL returned data record*/
  set X2CREC empty; /* current date record*/
  set XX0XW01 empty;


  /***************************************************************/
  /* ***Hide size buckets when displaying the map*/
  /***************************************************************/
  GN0SIDX01 = 1;
  while (GN0SIDX01 <= 40)
    set GN0SM110.SY4IDDSC[GN0SIDX01] skip, invisible;
    set GN0SM110.MCOCD[GN0SIDX01] skip, invisible;
    GN0SIDX01 = GN0SIDX01 + 1;
  end

   /* ****************************************************************/
   /* *** initialize std working storage & map fields            ****/
   /* ****************************************************************/
  GN0SM110.XXXMAPNM = "GN0SM110";
  GN0SM110.XXXTITLE = "NIL EXPORT ORDER MCO - UPDATE";
  GN0SM110.XXXRVNBR = "0";

  XSX2CDT(); /* <=== get current ccyymmdd*/

  GN0SW01.XXXAPPID = "GN0S"; /* error id appl. name*/
  TA1REC.TA1MAP = "GN0SM110"; /* TA0020 current map name*/

  GN0SM110.XQACD = "01";
  GN0SM110.XISEG = "000";
  GN0SM110.XEDIF = "000";
  GN0SM110.XPKGTYP = "00";
  GN0SM110.XUOMCD = "01";
  GN0SM110.XOWCD = "00";

  GN0SW01.GN0SW01-ERRFL = "N"; /* error switch*/
  GN0SW01.XXXLOCID = "110"; /* error location*/
  GN0SW01.GN0SW01-MSGNO = 0; /* saved msg number*/

   /* ****************************************************************/
   /* *** move ws fields to map fields - re: this data will     ****/
   /* *** be needed during resets and for multiple levels   ****/
   /* ****************************************************************/

  GN0SM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ****************************************************************/
   /* *** end of EXECUTE section                                   ****/
   /* ****************************************************************/


end // end GN0S110

// converse & control key entry
Function GN0S120()


  if (GN0SW01.GN0SW01-SU-UPDT-FL == "Y")
    GN0SM110.XGPCD = " ";
    GN0SM110.XSTYNBR = " ";
    GN0SM110.XCLRCD = " ";
    GN0SM110.XDMCD = " ";
    GN0SM110.XQACD = "01";
    GN0SM110.XISEG = "000";
    GN0SM110.XEDIF = "000";
    GN0SM110.XPKGTYP = "00";
    GN0SM110.XUOMCD = "01";
    GN0SM110.XOWCD = "00";
    set GN0SM110.XGPCD cursor;

    GN0SIDX01 = 1;
    while (GN0SIDX01 <= 40)
      GN0SW02.SY5SZID[GN0SIDX01] = 0;
      GN0SW02.SY4IDDSC[GN0SIDX01] = " ";
      GN0SW02.SZMCO[GN0SIDX01] = " ";
      GN0SM110.SY4IDDSC[GN0SIDX01] = " ";
      GN0SM110.MCOCD[GN0SIDX01] = " ";
      set GN0SM110.SY4IDDSC[GN0SIDX01] skip, invisible;
      set GN0SM110.MCOCD[GN0SIDX01] skip, invisible;
      GN0SIDX01 = GN0SIDX01 + 1;
    end

  end


   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map             ****/
   /* ************************************************************/

  if (GN0SW01.GN0SW01-MSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(GN0SW01.GN0SW01-MSGNO);
  end
  GN0SM110.XXXERRID = GN0SW01.XXXERRID;


  converse GN0SM110 ;


   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (GN0SM110.CATOAP > " ")
    COMMAREA.CATOAP = GN0SM110.CATOAP;
    COMMAREA.CAITEM = GN0SM110.CAITEM;
    XSEXIT();
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.XXXLOCID = "120A"; /* error location*/
    GN0SW01.GN0SW01-MSGNO = 0001;
    GN0SM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set GN0SM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (GN0SM110.CAITEM > " ")
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.XXXLOCID = "120B"; /* error location*/
    GN0SW01.GN0SW01-MSGNO = 0155;
    set GN0SM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set GN0SM110.XWHCD initialAttributes;
  set GN0SM110.CUORDID initialAttributes;
  set GN0SM110.NKORDID initialAttributes;
  set GN0SM110.XGPCD initialAttributes;
  set GN0SM110.XSTYNBR initialAttributes;
  set GN0SM110.XCLRCD initialAttributes;
  set GN0SM110.XDMCD initialAttributes;
  set GN0SM110.XQACD initialAttributes;
  set GN0SM110.XISEG initialAttributes;
  set GN0SM110.XEDIF initialAttributes;
  set GN0SM110.XPKGTYP initialAttributes;
  set GN0SM110.XUOMCD initialAttributes;
  set GN0SM110.XOWCD initialAttributes;

  set GN0SM110.SCHNBR initialAttributes;
  set GN0SM110.RMTNBR initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/


  if (converseVar.eventKey not enter)
    if (converseVar.eventKey not pf5)
      GN0SIDX01 = 1;
      while (GN0SIDX01 <= 40)
        set GN0SM110.SY4IDDSC[GN0SIDX01] skip, invisible;
        set GN0SM110.MCOCD[GN0SIDX01] skip, invisible;
        GN0SIDX01 = GN0SIDX01 + 1;
      end
    end
  end

   /* ***********************************************************/

  GN0SW01.GN0SW01-MSGNO = 0;
  GN0SW01.GN0SW01-ERRFL = "N";
  GN0SW01.XXXLOCID = "120"; /* error location*/
  GN0SM110.VAGen_EZEMSG = " ";
  set GN0SM110.CATOAP initialAttributes;
  set GN0SM110.CAITEM initialAttributes;
  GN0SW01.GN0SW01-SU-UPDT-FL = "N";

   /* ************************************************************/
   /* *** if PF1: go to help application                         ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.XXXLOCID = "120C"; /* error location*/
    GN0SW01.GN0SW01-MSGNO = 0;
    GN0SM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSPF4();
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.XXXLOCID = "120D"; /* error location*/
    GN0SW01.GN0SW01-MSGNO = 0;
    GN0SM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.XXXLOCID = "120E";
    GN0SW01.GN0SW01-MSGNO = 0000;
    GN0SM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    GN0SS-VALIDT-INPUT();
    exit stack;
  end

   /* *************************************************************/
   /* *** if PF5 : export order MCO update                         ****/
   /* *************************************************************/

  if (converseVar.eventKey is pf5)
    GN0SS-ORDR-MCO-UPD();
    exit stack;
  end


   /* *************************************************************/
   /* *** if PF8 : rept for empty MCO                 ****/
   /* *************************************************************/

  if (converseVar.eventKey is pf8)
    GN0SS-SCH-MCO-RPT();
    exit stack;
  end


   /* ****************************************************************/
   /* *** if this code is executed (control drops thru),        ****/
   /* *** then use invalid pfkey was pressed msg             ****/
   /* ****************************************************************/

  GN0SW01.GN0SW01-ERRFL = "Y";
  GN0SW01.XXXLOCID = "120F"; /* error location*/
  GN0SW01.GN0SW01-MSGNO = 0150; /* <--- invlaid pfkey msg*/
  set GN0SM110.CUORDID cursor;

   /* ****************************************************************/
   /* *** end of CONVERSE AFTER section                    ****/
   /* ****************************************************************/


end // end GN0S120

Function GN0SS-CHK-DATA-CHG()

  /***************************************************************/
  /*  *** check mco edit*/
  /***************************************************************/

  GN0SW01.GN0SW01-DATA-CHANGED-FL = "N";

  if (GN0SM110.CUORDID != GN0SW01-CUORDID
   || GN0SM110.NKORDID != GN0SW01-NKORDID
   || GN0SM110.XGPCD != GN0SW01-XGPCD
   || GN0SM110.XSTYNBR != GN0SW01-XSTYNBR
   || GN0SM110.XCLRCD != GN0SW01-XCLRCD
   || GN0SM110.XDMCD != GN0SW01-XDMCD
   || GN0SM110.XQACD != GN0SW01-XQACD
   || GN0SM110.XISEG != GN0SW01-XISEG
   || GN0SM110.XEDIF != GN0SW01-XEDIF
   || GN0SM110.XPKGTYP != GN0SW01-XPKGTYP
   || GN0SM110.XUOMCD != GN0SW01-XUOMCD
   || GN0SM110.XOWCD != GN0SW01-XOWCD)
    /*next sentence*/
  else

    GN0SIDX01 = 1;
    GN0SIDX02 = 1;
    while (GN0SIDX01 <= 40)
      if (GN0SIDX01 == GN0SW02.SY5SZID[GN0SIDX02])
        if (GN0SM110.MCOCD[GN0SIDX01] != GN0SW02.SZMCO[GN0SIDX02])
          GN0SW01.GN0SW01-DATA-CHANGED-FL = "Y";
          set GN0SM110.MCOCD[GN0SIDX01] normal; /* resets if previously wrong xct entered*/
        end
        GN0SIDX02 = GN0SIDX02 + 1;
      end
      GN0SIDX01 = GN0SIDX01 + 1;
    end

  end

  if (GN0SW01.GN0SW01-DATA-CHANGED-FL == "Y")
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0160; /* change is valid-  use pk key*/
    GN0SW01.XXXLOCID = "DTCG"; /* error location*/
    GN0SIDX01 = GN0SW02.SY5SZID[1];
    set GN0SM110.MCOCD[GN0SIDX01] cursor; /* set the cursor at first editable size field*/
    return;
  end
end // end GN0SS-CHK-DATA-CHG

Function GN0SS-CHK-NILORD()

   /* ************************************************************/
   /* *** select unique from: DORDER.VOPPKH05 table ****/
   /* *** using the std module:  VOPPKH05                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = normal return code                     ****/
   /* ***   100, -911 = deadlock - resource unavailable        ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  set SQLCA empty;
  set VOPPKH05 empty;

  VOPPKH05.XWHCD = GN0SW01.GN0SW01-XWHCD;
  VOPPKH05.OP1CUOID = GN0SW01.GN0SW01-CUORDID;
  VOPPKH05.OP1NORID = GN0SW01.GN0SW01-NKORDID;


  try
    call "VOPPKH05" ("S ", SQLCA, VOPPKH05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* Evaluate success of call.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      /**/
      return;
      /**/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        GN0SW01.GN0SW01-MSGNO = 0130; /* order not  found in OTP table*/
        GN0SW01.GN0SW01-ERRFL = "Y";
        GN0SW01.XXXLOCID = "NIC1"; /* error location*/
        set GN0SM110.CUORDID cursor, bold;
        return; /* Return to previous process*/
      end
      /**/
    end
    /**/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    /**/
    GN0SW01.GN0SW01-MSGNO = 0022; /* Data in use by another*/
    /**/
  else
    /**/
    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    /**/
  end

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1PGMNO = "GN0S"; /* Module id*/
  TA1REC.TA1TYPE = "DB2 "; /* Error type*/
  TA1REC.TA1LOC = "CHK NIL ORD EXISTENCE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Curr app*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base*/
  TA1REC.TA1TBLVU = "VOPPKH05"; /* Table view*/
  TA1REC.TA1TBLKE = VOPPKH05.OP1KEY; /* Table key*/
  GN0SW01.XXXLOCID = "NIC2";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end GN0SS-CHK-NILORD

// close cursor dship.vsrord01
Function GN0SS-CLOSE-C1()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VOPPKS03" ("C1", SQLCA, VOPPKS03) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "GN0S"; /* Program number*/
  TA1REC.TA1DBASE = "DORDER   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOPPKS03"; /* Table view name*/

  GN0SW01.XXXLOCID = "SZC1";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end GN0SS-CLOSE-C1

// fetch next dship.vsrord01
Function GN0SS-FETCH-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from dship.vsrord01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "VOPPKS03" ("N1", SQLCA, VOPPKS03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      GN0SW02.GN0SENDCUR = "Y"; /* Indicate end of cursor*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  /*MOVE 'S09' TO TSWREC.XXXMODID;    /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    GN0SW01.GN0SW01-MSGNO = 0022; /* Data in use by another*/

  else

    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "GN0S"; /* Program number*/
  TA1REC.TA1DBASE = "DORDER   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOPPKS03"; /* Table view name*/
  TA1REC.TA1TBLKE = VOPPKS03.VOPPKS03-KEY; /* Table key*/

  GN0SW01.XXXLOCID = "SZN1";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end GN0SS-FETCH-N1

// key missing input edits
Function GN0SS-FIELD-CHECK()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (GN0SM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0070; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FICA"; /* error location*/
    set GN0SM110.XWHCD cursor, bold;
    return;
  end

  if (GN0SM110.SCHNBR > 0)
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FICB"; /* error location*/
    set GN0SM110.SCHNBR cursor, bold;
    return;
  end


  if (GN0SM110.RMTNBR > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FICC"; /* error location*/
    set GN0SM110.RMTNBR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* ***check for remote printer number feilds            ***   */
   /* ************************************************************/


  if (GN0SW02.GN0SW02-CHKRMT == "RMT" && 
  GN0SW02.GN0SW02-CHKRMTF4 is numeric && 
  GN0SW02.GN0SW02-CHKRMTF5 is numeric && 
  GN0SW02.GN0SW02-CHKRMTF6 is numeric)
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0158; /* <--- not numeric feild msg*/
    GN0SW01.XXXLOCID = "FICD"; /* error location*/
    set GN0SM110.RMTNBR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end GN0SS-FIELD-CHECK

// key missing input edits
Function GN0SS-FLD-CHK()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (GN0SM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0070; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHA"; /* error location*/
    set GN0SM110.XWHCD cursor, bold;
    return;
  end

  if (GN0SM110.CUORDID > 0)
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0072; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHB"; /* error location*/
    set GN0SM110.CUORDID cursor, bold;
    return;
  end

  if (GN0SM110.NKORDID > 0)
     /* ** next sentence ***/
  else
    GN0SM110.NKORDID = 1; /* default order to one*/
  end


  if (GN0SM110.XOWCD > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHL"; /* error location*/
    set GN0SM110.XOWCD cursor, bold;
  end


  if (GN0SM110.XUOMCD > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHK"; /* error location*/
    set GN0SM110.XUOMCD cursor, bold;
  end


  if (GN0SM110.XPKGTYP > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHJ"; /* error location*/
    set GN0SM110.XPKGTYP cursor, bold;
  end


  if (GN0SM110.XEDIF > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHI"; /* error location*/
    set GN0SM110.XEDIF cursor, bold;
  end


  if (GN0SM110.XISEG > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHH"; /* error location*/
    set GN0SM110.XISEG cursor, bold;
  end


  if (GN0SM110.XQACD > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHG"; /* error location*/
    set GN0SM110.XQACD cursor, bold;
  end


  if (GN0SM110.XDMCD > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHF"; /* error location*/
    set GN0SM110.XDMCD cursor, bold;
  end


  if (GN0SM110.XCLRCD > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHE"; /* error location*/
    set GN0SM110.XCLRCD cursor, bold;
  end


  if (GN0SM110.XSTYNBR > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHD"; /* error location*/
    set GN0SM110.XSTYNBR cursor, bold;
  end


  if (GN0SM110.XGPCD > " ")
     /* ** next sentence ***/
  else
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0009; /* <--- missing required field msg*/
    GN0SW01.XXXLOCID = "FCHC"; /* error location*/
    set GN0SM110.XGPCD cursor, bold;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end GN0SS-FLD-CHK

// select : prod location : s7
Function GN0SS-GET-PROD-SZS()

   /* ************************************************************/
   /* *** clear working storage size table                    ****/
   /* ************************************************************/

  GN0SIDX01 = 1;
  while (GN0SIDX01 <= 40)
    GN0SW02.SY5SZID[GN0SIDX01] = 0;
    GN0SW02.SY4IDDSC[GN0SIDX01] = " ";
    GN0SW02.SZMCO[GN0SIDX01] = " ";
    GN0SIDX01 = GN0SIDX01 + 1;
  end


   /* ------------------------------------------------------------*/
   /* select set and open the OTP size table.*/
   /* ------------------------------------------------------------*/

  GN0SS-OPEN-S1(); /* select set and open cursor for*/
                                   /* dorder.voppks03*/

   /* ------------------------------------------------------------*/
   /* fetch the next row  until end of cursor*/
   /* ------------------------------------------------------------*/

  GN0SW02.GN0SENDCUR = "N"; /* end of cursor switch*/
  GN0SW02.GN0SIDX01 = 1;
  GN0SW02.GN0SWNSZ = 1;

  while (GN0SW02.GN0SENDCUR == "N") /* until end of cursor*/

    GN0SS-FETCH-N1(); /* fetch the next size for the product*/

    if (GN0SW02.GN0SENDCUR == "N") /* if size found*/

      GN0SW02.SY5SZID[GN0SIDX01] = VOPPKS03.SYSZID;
      GN0SW02.SZMCO[GN0SIDX01] = VOPPKS03.XCTCD;
      GN0SW02.GN0SIDX01 = GN0SW02.GN0SIDX01 + 1;
      GN0SW02.GN0SWNSZ = GN0SW02.GN0SWNSZ + 1;

    end
  end

  GN0SS-CLOSE-C1(); /* close the cursor*/

  if (GN0SIDX01 == 1)
    GN0SW01.GN0SW01-MSGNO = 0152; /* NO sizes found for the product*/
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.XXXLOCID = "PSZS"; /* error location*/
    set GN0SM110.XGPCD cursor, bold;
    set GN0SM110.XSTYNBR bold;
    set GN0SM110.XCLRCD bold;
    return; /* Return to previous process*/
  end


  /***************************************************************/
  /* ***get size descriptions for product sizes*/
  /***************************************************************/

  GN0SS-SIZE-DESC();


end // end GN0SS-GET-PROD-SZS

// inquiry : sz xlate : 0
Function GN0SS-IO-SY1190()


   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSYPI0 ";
  TA1REC.TA1LOCAT[1] = "SY1120  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end GN0SS-IO-SY1190

Function GN0SS-MAPARR-INIT()

  /***************************************************************/
  /* ***reset the map and working storage array  variables*/
  /***************************************************************/
  GN0SIDX01 = 1;
  while (GN0SIDX01 <= 40)
    GN0SW02.SY5SZID[GN0SIDX01] = 0;
    GN0SW02.SY4IDDSC[GN0SIDX01] = " ";
    GN0SW02.SZMCO[GN0SIDX01] = " ";
    GN0SM110.SY4IDDSC[GN0SIDX01] = " ";
    GN0SM110.MCOCD[GN0SIDX01] = " ";
    set GN0SM110.SY4IDDSC[GN0SIDX01] skip, invisible;
    set GN0SM110.MCOCD[GN0SIDX01] skip, invisible;
    GN0SIDX01 = GN0SIDX01 + 1;
  end

end // end GN0SS-MAPARR-INIT

Function GN0SS-MAPARR-RESET()

  /***************************************************************/
  /* ***Hide size buckets when displaying the map*/
  /***************************************************************/
  GN0SIDX01 = 1;
  while (GN0SIDX01 <= 40)
    set GN0SM110.SY4IDDSC[GN0SIDX01] skip, invisible;
    set GN0SM110.MCOCD[GN0SIDX01] skip, invisible;
    GN0SIDX01 = GN0SIDX01 + 1;
  end

end // end GN0SS-MAPARR-RESET

Function GN0SS-MCO-RPT-JCLP()

   /* --------------------------------------------------------------------------*/
   /* This function submits the Bactch job GSWWCR*/
   /* in prod region to print products at size level for EMPTY country code */
   /* --------------------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format remote printer number,warehouse,container number*/
     /* and shipment number entered by the user.*/
    /* ------------------------------------------------------------*/

    if (GN0ST02.TARTYPE[TA6INDEX] == "A") /* first parm*/
      GN0ST02.GN0ST02-WS2[TA6INDEX] = GN0SM110.XWHCD;
    else
      if (GN0ST02.TARTYPE[TA6INDEX] == "B") /* second parm*/
        GN0ST02.GN0ST02-RMT[TA6INDEX] = GN0SM110.RMTNBR;
      else
        if (GN0ST02.TARTYPE[TA6INDEX] == "C") /* third parm*/
          GN0ST02.GN0ST02-WS3[TA6INDEX] = GN0SM110.XWHCD;
        else
          if (GN0ST02.TARTYPE[TA6INDEX] == "D") /* fourth parm*/
            GN0ST02.GN0ST02-WS1[TA6INDEX] = GN0SM110.XWHCD;
            GN0ST02.GN0ST02-SHNR[TA6INDEX] = GN0SM110.SCHNBR;
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = GN0ST02.TARJCL[TA6INDEX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = GN0ST02.TARTYPE[TA6INDEX]; /* Type*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (GN0ST02.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    GN0SW01.GN0SW01-MSGNO = 0159; /*Job submission msg*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    GN0SW01.GN0SW01-ERRFL = "Y"; /* trigger error switch*/
    GN0SW01.XXXLOCID = "JCLP"; /* error location*/

  end



end // end GN0SS-MCO-RPT-JCLP

Function GN0SS-MCO-RPT-JCLT()

   /* --------------------------------------------------------------------------*/
   /* This function submits the Bactch job GNWWCRT*/
   /* in test region to print products at size level for EMPTY country code */
   /* --------------------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format remote printer number,warehouse,container number*/
     /* and shipment number entered by the user.*/
    /* ------------------------------------------------------------*/

    if (GN0ST01.TARTYPE[TA6INDEX] == "A") /* first parm*/
      GN0ST01.GN0ST01-XWHCD2[TA6INDEX] = GN0SM110.XWHCD;
    else
      if (GN0ST01.TARTYPE[TA6INDEX] == "B") /* second parm*/
        GN0ST01.GN0ST01-RMT[TA6INDEX] = GN0SM110.RMTNBR;
      else
        if (GN0ST01.TARTYPE[TA6INDEX] == "C") /* third parm*/
          GN0ST01.GN0ST01-XWHCD3[TA6INDEX] = GN0SM110.XWHCD;
        else
          if (GN0ST01.TARTYPE[TA6INDEX] == "D") /* fourth parm*/
            GN0ST01.GN0ST01-XWHCD1[TA6INDEX] = GN0SM110.XWHCD;
            GN0ST01.GN0ST01-SHNR[TA6INDEX] = GN0SM110.SCHNBR;
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = GN0ST01.TARJCL[TA6INDEX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = GN0ST01.TARTYPE[TA6INDEX]; /* Type*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (GN0ST01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    GN0SW01.GN0SW01-MSGNO = 0159; /*Job submission msg*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    GN0SW01.GN0SW01-ERRFL = "Y"; /* trigger error switch*/
    GN0SW01.XXXLOCID = "JCLT"; /* error location*/

  end



end // end GN0SS-MCO-RPT-JCLT

// select set dship.vsrord01
Function GN0SS-OPEN-S1()
   /* ------------------------------------------------------------*/
   /* select set dorder.voppks03*/
   /* ------------------------------------------------------------*/

  set VOPPKS03 empty;

  VOPPKS03.XWHCD = GN0SW01.GN0SW01-XWHCD;
  VOPPKS03.OP1CUOID = GN0SW01.GN0SW01-CUORDID;
  VOPPKS03.OP1NORID = GN0SW01.GN0SW01-NKORDID;
  VOPPKS03.OPLNINB = VOPPKI02.OP2LNINB;
  VOPPKS03.OP1NTMAL = VOPPKI02.OP1NTMAL;



  call "VOPPKS03" ("S1", SQLCA, VOPPKS03) {isNoRefresh = yes, isExternal = yes};

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    GN0SW01.GN0SW01-MSGNO = 0022; /* Data in use by another*/

  else

    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VOPPKS03 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "GN0S"; /* Module id*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOPPKS03"; /* Table view name*/
  TA1REC.TA1TBLKE = VOPPKS03.VOPPKS03-KEY; /* Table key*/

  GN0SW01.XXXLOCID = "SZS1";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end GN0SS-OPEN-S1

Function GN0SS-ORDR-MCO-UPD()

  /***************************************************************/
  /*  *** check the data change*/
  /***************************************************************/

  GN0SW01.GN0SW01-DATA-CHANGED-FL = "N";
  GN0SW01.GN0SW01-KEY-DATA-CHNGD-FL = "N";


  if (GN0SM110.XWHCD != GN0SW01-XWHCD
   || GN0SM110.CUORDID != GN0SW01-CUORDID
   || GN0SM110.NKORDID != GN0SW01-NKORDID
   || GN0SM110.XGPCD != GN0SW01-XGPCD
   || GN0SM110.XSTYNBR != GN0SW01-XSTYNBR
   || GN0SM110.XCLRCD != GN0SW01-XCLRCD
   || GN0SM110.XDMCD != GN0SW01-XDMCD
   || GN0SM110.XQACD != GN0SW01-XQACD
   || GN0SM110.XISEG != GN0SW01-XISEG
   || GN0SM110.XEDIF != GN0SW01-XEDIF
   || GN0SM110.XPKGTYP != GN0SW01-XPKGTYP
   || GN0SM110.XUOMCD != GN0SW01-XUOMCD
   || GN0SM110.XOWCD != GN0SW01-XOWCD)

    GN0SW01.GN0SW01-KEY-DATA-CHNGD-FL = "Y";
  else

    GN0SIDX01 = 1;
    GN0SIDX02 = 1;
    while (GN0SIDX01 <= 40)

      if (GN0SIDX01 == GN0SW02.SY5SZID[GN0SIDX02])
        if (GN0SM110.MCOCD[GN0SIDX01] != GN0SW02.SZMCO[GN0SIDX02])
          GN0SW01.GN0SW01-DATA-CHANGED-FL = "Y";
        end
        GN0SIDX02 = GN0SIDX02 + 1;
      end

      GN0SIDX01 = GN0SIDX01 + 1;
    end

  end

  if (GN0SW01.GN0SW01-KEY-DATA-CHNGD-FL == "Y")
    GN0SW01.GN0SW01-MSGNO = 0161; /*key fields cann't be changed*/
    GN0SW01.XXXLOCID = "MCO1"; /* error location*/
    set GN0SM110.CUORDID cursor;
    return;
  end

  if (GN0SW01.GN0SW01-DATA-CHANGED-FL == "N")
    GN0SW01.GN0SW01-MSGNO = 0110; /*Data not changed no upate performed*/
    GN0SW01.XXXLOCID = "MCO2"; /* error location*/
    set GN0SM110.CUORDID cursor;
    return;
  end




  /***************************************************************/
  /*update the MCO fields for  product sizes*/
  /***************************************************************/

  GN0SIDX01 = 1;
  GN0SIDX02 = 1;
  while (GN0SIDX01 <= 40)

    if (GN0SIDX01 == GN0SW02.SY5SZID[GN0SIDX02])
      if (GN0SM110.MCOCD[GN0SIDX01] != GN0SW02.SZMCO[GN0SIDX02])
        GN0SS-VALID-MCOCHK();
        set GN0SM110.MCOCD[GN0SIDX01] normal; /* resets if previously wrong xct entered*/
        GN0SS-XCT-UPD-U1();
        GN0SW02.SZMCO[GN0SIDX02] = GN0SM110.MCOCD[GN0SIDX01];
              /* Mco moved to work.stor. to avoid chng cnt updated more than once for many invalid MCOs */
      end
      GN0SIDX02 = GN0SIDX02 + 1;
    end
    GN0SIDX01 = GN0SIDX01 + 1;
  end


  /***************************************************************/
  /* check for any error in the update*/
  /***************************************************************/

  if (GN0SW01.GN0SW01-ERRFL == "N")
    GN0SW01.GN0SW01-MSGNO = 0101; /*update sucessful*/
    GN0SW01.XXXLOCID = "MCO3"; /*  location*/
    GN0SW01.GN0SW01-SU-UPDT-FL = "Y";
  end


  exit stack;

end // end GN0SS-ORDR-MCO-UPD

// close cursor dship.vsrord01
Function GN0SS-OTP-ITEM-C2()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VOPPKI02" ("C2", SQLCA, VOPPKI02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "GN0S"; /* module id*/
  TA1REC.TA1DBASE = "DORDER   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOPPKI02"; /* Table view name*/

  GN0SW01.XXXLOCID = "ITC2";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end GN0SS-OTP-ITEM-C2

// fetch next dship.vsrord01
Function GN0SS-OTP-ITEM-N2()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from dorder.voppki02 table.*/
   /* ------------------------------------------------------------*/

  try
    call "VOPPKI02" ("N2", SQLCA, VOPPKI02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      GN0SW01.GN0SW01-ERRFL = "Y";
      GN0SW01.GN0SW01-MSGNO = 0151; /*Product not found*/
      GN0SW01.XXXLOCID = "ITN2"; /* error location*/
      set GN0SM110.XGPCD cursor, bold;
      set GN0SM110.XSTYNBR bold;
      set GN0SM110.XCLRCD bold;

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    GN0SW01.GN0SW01-MSGNO = 0022; /* Data in use by another*/

  else

    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "GN0S"; /* Program number*/
  TA1REC.TA1DBASE = "DORDER   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOPPKI02"; /* Table view name*/
  /*MOVE VOPPKI02.OP1CUOID TO TA1REC.TA1TBLKE;  /* Table key*/

  GN0SW01.XXXLOCID = "IMN2";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end GN0SS-OTP-ITEM-N2

// select set dship.vsrord01
Function GN0SS-OTP-ITEM-S2()
   /* ------------------------------------------------------------*/
   /* select set dorder.voppki02*/
   /* ------------------------------------------------------------*/

  call "VOPPKI02" ("S2", SQLCA, VOPPKI02) {isNoRefresh = yes, isExternal = yes};

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    GN0SW01.GN0SW01-MSGNO = 0022; /* Data in use by another*/

  else

    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VOPPKI02 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "GN0S"; /*Module id*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOPPKI02"; /* Table view name*/
  /*MOVE VOPPKI02.OP1CUOID TO TA1REC.TA1TBLKE; /* Table key*/

  GN0SW01.XXXLOCID = "ITS2";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end GN0SS-OTP-ITEM-S2

// select unique shp hdr tbl row
Function GN0SS-PROD-LNITM()


   /* ************************************************************/
   /* *** select unique from: DORDER.VOPPKI02        ****/
   /* *** using the std module:  VOPPKI02                       ****/
   /* *** return codes:                                                              ****/
   /* ***      0 = successful                                                       ****/
   /* ***   +100 = not found                                                      ****/
   /* ***   -911 = deadlock - resource unavailable        ****/
   /* ***     <0 = db/severe error                                           ****/
   /* ***          note: TA0020 will be executed                   ****/
   /* ************************************************************/

  set VOPPKI02 empty;
  set SQLCA empty;

   /* ************************************************************/
   /* *** select unique with these fields:                    ****/
   /* ************************************************************/

  VOPPKI02.XWHCD = GN0SM110.XWHCD;
  VOPPKI02.OP1CUOID = GN0SM110.CUORDID;
  VOPPKI02.OP1NORID = GN0SM110.NKORDID;
  VOPPKI02.XGPCD = GN0SM110.XGPCD;
  VOPPKI02.SY1STNBR = GN0SM110.XSTYNBR;
  VOPPKI02.SY2CLRID = GN0SM110.XCLRCD;
  VOPPKI02.XDMCD = GN0SM110.XDMCD;
  VOPPKI02.XQACD = GN0SM110.XQACD;
  VOPPKI02.PC2INSEG = GN0SM110.XISEG;
  VOPPKI02.XEGCD = GN0SM110.XEDIF;
  VOPPKI02.XPGCD = GN0SM110.XPKGTYP;
  VOPPKI02.XUMCD = GN0SM110.XUOMCD;
  VOPPKI02.XOWCD = GN0SM110.XOWCD;


  /***************************************************************/
  /* ***open OTP item cursor*/
  /***************************************************************/

  GN0SS-OTP-ITEM-S2();


  /***************************************************************/
  /* ***fetch OTP item cursor*/
  /***************************************************************/

  GN0SS-OTP-ITEM-N2();


  /***************************************************************/
  /* ***close OTP item cursor*/
  /***************************************************************/

  GN0SS-OTP-ITEM-C2();


end // end GN0SS-PROD-LNITM

// close cursor dship.vsrord01
Function GN0SS-SCH-CHK-C2()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("C2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "GN0S"; /* module id*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/

  GN0SW01.XXXLOCID = "SHC2";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end GN0SS-SCH-CHK-C2

// fetch next dship.vsrord01
Function GN0SS-SCH-CHK-N2()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from dship.vsrord01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("N2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      GN0SW02.GN0SEOFORCUR = "Y";

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    GN0SW01.GN0SW01-MSGNO = 0022; /* Data in use by another*/

  else

    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "GN0S"; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01 "; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  GN0SW01.XXXLOCID = "SCN2";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end GN0SS-SCH-CHK-N2

// select set dship.vsrord01
Function GN0SS-SCH-CHK-S2()

  set SR2REC empty;
  set SQLCA empty;

  /*MOVE GN0SM110.XWHCD TO SR2REC.XWHCD;   /* whse cd*/
  /*MOVE GN0SM110.SCHNBR TO SR2REC.PK1PKSCH;  /* pick schedule number*/
  SR2REC.XWHCD = GN0SW02.GN0SW02-XWHCD1; /* whse cd*/
  SR2REC.PK1PKSCH = GN0SW02.GN0SW02-SCHDNBR; /* pick schedule number*/
  SR2REC.OP1CUOID = -1; /* order number*/
  SR2REC.OP1NORID = -1; /* order id*/
  SR2REC.OP1NTMAL = -1; /* nbr times alloc*/


   /* ------------------------------------------------------------*/
   /* select set dship.vsrord01*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("S2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    GN0SW01.GN0SW01-MSGNO = 0022; /* Data in use by another*/

  else

    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSHIP. VSRORD ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "GN0S"; /*Module id*/
  TA1REC.TA1DBASE = "DSHIP  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  GN0SW01.XXXLOCID = "SHS2";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end GN0SS-SCH-CHK-S2

Function GN0SS-SCH-MCO-RPT()


   /* ************************************************************/
   /* *** move map values to working storage var.      ****/
   /* ************************************************************/

  GN0SW02-XWHCD1 = GN0SM110.XWHCD;
  GN0SW02-SCHDNBR = GN0SM110.SCHNBR;
  GN0SW02-RMTNBR = GN0SM110.RMTNBR;


  /***************************************************************/
  /* ***initialize map arrays regardless of product selection*/
  /***************************************************************/

  GN0SS-MAPARR-INIT();


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  GN0SS-FIELD-CHECK(); /* <=== missing input fields*/

  if (GN0SW01.GN0SW01-ERRFL == "Y")
    return;
  end

   /* ************************************************************/
   /* ***                         Valid warehouse  check        ****/
   /* ************************************************************/

  GN0SS-XWHCD-CHK(); /* <=== field edits*/

  if (GN0SW01.GN0SW01-ERRFL == "Y")
    return;
  end

   /* ************************************************************/
   /* *** Validate the container existance                   ****/
   /* ************************************************************/

  GN0SS-VALIDT-SCH();


  if (GN0SW01.GN0SW01-ERRFL == "Y")
    return;
  end


   /* ************************************************************/
   /* *** no errors: submit the  job  GNwwCR                ****/
   /* ************************************************************/

  if (COMMAREA.XCTH-THEATER-RUNTYPE == "TEST")
    GN0SS-MCO-RPT-JCLT(); /* <=== Format and submit the test job*/
  else
    GN0SS-MCO-RPT-JCLP(); /* <=== Format and submit the prod  job*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

  if (GN0SW01.GN0SW01-ERRFL == "Y")
    return;
  else
    GN0SW01.GN0SW01-MSGNO = 0159; /*Job submission msg*/
    set GN0SM110.CUORDID cursor;
    GN0SM110.SCHNBR = " ";
    GN0SM110.RMTNBR = " ";
  end

end // end GN0SS-SCH-MCO-RPT

Function GN0SS-SELECT-SIZE()
   /* ------------------------------------------------------------*/
   /* select unique from DORDER.VOPPKS03 table.*/
   /* ------------------------------------------------------------*/

   /* ************************************************************/
   /* *** select unique from: OTP size table ****/
   /* *** using the std module:  voppks03                 ****/
   /* *** return codes:                                       ****/
   /* ***      0 = normal return code                     ****/
   /* ***   100, -911 = deadlock - resource unavailable        ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/


  try
    call "VOPPKS03" ("S ", SQLCA, VOPPKS03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* Evaluate success of call.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      /**/
      return;
      /**/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /**/
        GN0SW01.GN0SW01-MSGNO = 0154; /*size not found in OTP size table to update MCO*/
        GN0SW01.XXXLOCID = "SSZ1";
        GN0SW01.GN0SW01-ERRFL = "Y";
        set GN0SM110.CUORDID cursor;
        GN0SS-MAPARR-INIT();
        exit stack; /* Exit to display map*/

      end
      /**/
    end
    /**/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    /**/
    GN0SW01.GN0SW01-MSGNO = 0022; /* Data in use by another*/
    /**/
  else
    /**/
    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    /**/
  end

  sysLib.rollback(); /* Rollback the changes*/

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1PGMNO = "GN0S"; /* Module id*/
  TA1REC.TA1TYPE = "DB2 "; /* Error type*/
  TA1REC.TA1LOC = "SELECT PRODUCT SIZE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Curr app*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base*/
  TA1REC.TA1TBLVU = "VOPPKS03"; /* Table view*/
  TA1REC.TA1TBLKE = VOPPKS03.VOPPKS03-KEY; /* Table key*/
  GN0SW01.XXXLOCID = "SSZ2";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end GN0SS-SELECT-SIZE

// key obtain table data
Function GN0SS-SIZE-DESC()

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SZDSC";
  TA1REC.TA1MAP = "GN0SM110";


   /* ************************************************************/
   /* *** get the size descriptions.                          ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.XGPCD = GN0SM110.XGPCD;
  SYPREC.SY1STNBR = GN0SM110.XSTYNBR;
  SYPREC.SY2CLRID = GN0SM110.XCLRCD;
  SYPREC.XDMCD = GN0SM110.XDMCD;
  /*MOVE '**' TO SYPREC.XQACD;*/
  SYPREC.XQACD = GN0SM110.XQACD;

  GN0SS-SIZE-TRAN(); /* perform size translation call*/


  if (GN0SW01.GN0SW01-ERRFL == "Y")
    return;
  end


   /* ************************************************************/
   /* *** clear MAP size table                    ****/
   /* ************************************************************/

  GN0SIDX01 = 1;
  while (GN0SIDX01 <= 40)
    GN0SM110.SY4IDDSC[GN0SIDX01] = " ";
    GN0SM110.MCOCD[GN0SIDX01] = " ";
    GN0SIDX01 = GN0SIDX01 + 1;
  end


   /* ************************************************************/
   /* *** move the internal size and and description to the   ****/
   /* *** size table.                                         ****/
   /* ************************************************************/

  GN0SIDX01 = 1;
  GN0SIDX02 = 1;

  while (GN0SIDX01 <= 40)
    if (SYPREC.SY4IDDSC[GN0SIDX01] > " ")
      GN0SM110.SY4IDDSC[GN0SIDX01] = SYPREC.SY4IDDSC[GN0SIDX01];

      if (GN0SIDX01 == GN0SW02.SY5SZID[GN0SIDX02])
        set GN0SM110.SY4IDDSC[GN0SIDX01] skip;
        set GN0SM110.MCOCD[GN0SIDX01] initialAttributes;
        GN0SW02.SY4IDDSC[GN0SIDX02] = SYPREC.SY4IDDSC[GN0SIDX01];
        GN0SM110.MCOCD[GN0SIDX01] = GN0SW02.SZMCO[GN0SIDX02];
        GN0SIDX02 = GN0SIDX02 + 1;
      else
        set GN0SM110.SY4IDDSC[GN0SIDX01] skip, bold;
  /*     SET GN0SM110.MCOCD[GN0SIDX01] AUTOSKIP, BRIGHT;*/
      end

    else
      set GN0SM110.SY4IDDSC[GN0SIDX01] skip, invisible;
      set GN0SM110.MCOCD[GN0SIDX01] skip, invisible;
    end

    GN0SIDX01 = GN0SIDX01 + 1;
  end
  /*  */
  /***************************************************************/
  /* set the cursor at first editable size field*/
  /***************************************************************/

  GN0SIDX01 = GN0SW02.SY5SZID[1];
  set GN0SM110.MCOCD[GN0SIDX01] cursor;


end // end GN0SS-SIZE-DESC

// load syprec with size desc
Function GN0SS-SIZE-TRAN()


   /* ************************************************************/
   /* *** this routine loads the syprec with the size         ****/
   /* *** descriptions.                                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SY119";
  TA1REC.TA1MAP = "GN0SM110";

   /* *** obtain valid size descriptions ****/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";
  SYPREC.XQACD = "**";

  GN0SS-IO-SY1190(); /* <=== load syprec with size desc*/

  if (SYPREC.SYPRC == 0) /* <=== product desc loaded*/
    return;
  end

  if (SYPREC.SYPRC == 11) /* <=== product not found*/
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.XXXLOCID = "SYP1";
    GN0SW01.GN0SW01-MSGNO = 0153; /* <--- not on db msg*/
    set GN0SM110.XSTYNBR cursor, bold;
    return;
  end

  if (SYPREC.SYPRC == 9) /* <=== deadlock*/
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.XXXLOCID = "SYP2";
    GN0SW01.GN0SW01-MSGNO = 0022; /* <--- try again msg*/
    return;
  end

  GN0SW01.GN0SW01-ERRFL = "Y";
  GN0SW01.XXXLOCID = "SYP3";
  GN0SW01.GN0SW01-MSGNO = 0001; /* <--- contact pgm'g*/
  return;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end GN0SS-SIZE-TRAN

Function GN0SS-VALID-MCOCHK()
   /* ------------------------------------------------------------*/
   /* Before update check the valid country code from XCTTBL*/
   /* ------------------------------------------------------------*/
  if (GN0SM110.MCOCD[GN0SIDX01] in XCTTBL.XCTCD /* code in table*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
         /* next sentence*/
  else
    GN0SW01.GN0SW01-ERRFL = "Y"; /*/set error flag*/
    GN0SW01.XXXLOCID = "VMCO"; /*  error location*/
    GN0SW01.GN0SW01-MSGNO = 0080; /*invalid country code*/
    set GN0SM110.MCOCD[GN0SIDX01] cursor, bold; /* highlight*/
    exit stack;
  end

end // end GN0SS-VALID-MCOCHK

Function GN0SS-VALIDT-INPUT()

  /* ****Validate map input for valid values******/


  /***************************************************************/
  /*Missing input fields check*/
  /***************************************************************/

  GN0SS-FLD-CHK(); /* <=== enter processing*/

  if (GN0SW01.GN0SW01-ERRFL == "Y")
    GN0SS-MAPARR-RESET();
    return;
  end

   /* ************************************************************/
   /* ***                         Valid warehouse  check        ****/
   /* ************************************************************/

  GN0SS-XWHCD-CHK(); /* <=== field edits*/

  if (GN0SW01.GN0SW01-ERRFL == "Y")
    GN0SS-MAPARR-RESET();
    return;
  end


   /* ************************************************************/
   /* ***                       check for any mco update       ****/
   /* ************************************************************/

  GN0SS-CHK-DATA-CHG();

  if (GN0SW01.GN0SW01-ERRFL == "Y")
    return;
  end

   /* ************************************************************/
   /* *** move map values to working storage var.      ****/
   /* ************************************************************/

  GN0SW01-XWHCD = GN0SM110.XWHCD;
  GN0SW01-CUORDID = GN0SM110.CUORDID;
  GN0SW01-NKORDID = GN0SM110.NKORDID;
  GN0SW01-XGPCD = GN0SM110.XGPCD;
  GN0SW01-XSTYNBR = GN0SM110.XSTYNBR;
  GN0SW01-XCLRCD = GN0SM110.XCLRCD;
  GN0SW01-XDMCD = GN0SM110.XDMCD;
  GN0SW01-XQACD = GN0SM110.XQACD;
  GN0SW01-XISEG = GN0SM110.XISEG;
  GN0SW01-XEDIF = GN0SM110.XEDIF;
  GN0SW01-XPKGTYP = GN0SM110.XPKGTYP;
  GN0SW01-XUOMCD = GN0SM110.XUOMCD;
  GN0SW01-XOWCD = GN0SM110.XOWCD;

  /***************************************************************/
  /*resets  map array for new product sizes*/
  /***************************************************************/

  GN0SS-MAPARR-RESET();

  /***************************************************************/
  /*Verify the NIL Order */
  /***************************************************************/

  GN0SS-CHK-NILORD(); /* verify the order number*/

  if (GN0SW01.GN0SW01-ERRFL == "Y")
    GN0SS-MAPARR-RESET();
    return;
  end

  GN0SW01.XDVCD = VOPPKH05.XDVCD;

  if (GN0SW01.XDVCD != "02")
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0132; /*not NIL order*/
    GN0SW01.XXXLOCID = "VIN1"; /* error location*/
    set GN0SM110.CUORDID cursor, bold;
    GN0SS-MAPARR-RESET();
    return;
  end


  /***************************************************************/
  /* ***get the line item nbr of the product*/
  /***************************************************************/

  GN0SS-PROD-LNITM();

  if (GN0SW01.GN0SW01-ERRFL == "Y")
    GN0SS-MAPARR-RESET();
    return;
  end


  /***************************************************************/
  /* ***get product sizes form OTP size table*/
  /***************************************************************/

  GN0SS-GET-PROD-SZS(); /*  to get size-ids and MCO from  dorder.voppks03*/

  if (GN0SW01.GN0SW01-ERRFL == "Y")
    GN0SS-MAPARR-RESET();
    return;
  end


end // end GN0SS-VALIDT-INPUT

// select unique shp hdr tbl row
Function GN0SS-VALIDT-SCH()

  /***************************************************************/
  /* *** check the schedule existence in DSHIP.VSRORD01*/
  /***************************************************************/


  GN0SW02.GN0SEOFORCUR = "N"; /* end of cursor switch*/
  GN0SW02.GN0SNILORFND = "N";

  GN0SS-SCH-CHK-S2(); /* ***open srord cursor*/

  GN0SS-SCH-CHK-N2(); /* ***fetch srord cursor*/

  if (GN0SW02.GN0SEOFORCUR == "Y")
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0156; /*Schedule not found*/
    GN0SW01.XXXLOCID = "VSH1"; /* error location*/
    set GN0SM110.SCHNBR cursor, bold;
  end


  while (GN0SW02.GN0SEOFORCUR == "N") /* until end of cursor*/

    if (SR2REC.XDVCD == "02") /* if NIL order found*/

      GN0SW02.GN0SNILORFND = "Y";
      GN0SW02.GN0SEOFORCUR = "Y";

    end

    GN0SS-SCH-CHK-N2(); /* fetch the next order of the schedule*/

  end


  GN0SS-SCH-CHK-C2(); /* ***close srord cursor*/


  if (GN0SW01.GN0SW01-ERRFL == "Y")
    return;
  end

  if (GN0SW02.GN0SNILORFND == "N")
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0157; /*not NIL order*/
    GN0SW01.XXXLOCID = "VSH2"; /* error location*/
    set GN0SM110.SCHNBR cursor, bold;
    return;
  end

end // end GN0SS-VALIDT-SCH

Function GN0SS-XCT-UPD-U1()
   /* ------------------------------------------------------------*/
   /* update the country code DORDER.VOPPKS03 table.*/
   /* ------------------------------------------------------------*/

   /* ************************************************************/
   /* *** select unique from: UCC 128  database  ****/
   /* *** using the std module:  VCTNID02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = normal return code                     ****/
   /* ***   100, -911 = deadlock - resource unavailable        ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  set SQLCA empty;
  set VOPPKS03 empty;

  VOPPKS03.XWHCD = GN0SW01.GN0SW01-XWHCD;
  VOPPKS03.OP1CUOID = GN0SW01.GN0SW01-CUORDID;
  VOPPKS03.OP1NORID = GN0SW01.GN0SW01-NKORDID;
  VOPPKS03.OPLNINB = VOPPKI02.OP2LNINB;
  VOPPKS03.SYSZID = GN0SIDX01;
  VOPPKS03.OP1NTMAL = VOPPKI02.OP1NTMAL;

  /***************************************************************/
  /*get unique row from OTP size table*/
  /***************************************************************/

  GN0SS-SELECT-SIZE();


  XX0XS01(); /* get date and time*/
  VOPPKS03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date*/
  VOPPKS03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time;*/
  VOPPKS03.XCTCD = GN0SM110.MCOCD[GN0SIDX01]; /* Country code*/



  try
    call "VOPPKS03" ("U ", SQLCA, VOPPKS03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* Evaluate success of call.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      /**/
      return;
      /**/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
  /*    */
        GN0SW01.GN0SW01-MSGNO = 0154; /*size not found in OTP size table to update MCO*/
        GN0SW01.XXXLOCID = "XCT1";
        GN0SW01.GN0SW01-ERRFL = "Y";
        set GN0SM110.CUORDID cursor;
        GN0SS-MAPARR-INIT();
        exit stack;
        /**/
      end
      /**/
    end
    /**/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    /**/
    GN0SW01.GN0SW01-MSGNO = 0022; /* Data in use by another*/
    /**/
  else
    /**/
    GN0SW01.GN0SW01-MSGNO = 0001; /* Unexpected error occurred*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    /**/
  end

  sysLib.rollback(); /* Rollback the changes*/

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1PGMNO = "GN0S"; /* Module id*/
  TA1REC.TA1TYPE = "DB2 "; /* Error type*/
  TA1REC.TA1LOC = "UPDATE COUNTRY CODE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Curr app*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base*/
  TA1REC.TA1TBLVU = "VOPPKS03"; /* Table view*/
  TA1REC.TA1TBLKE = VOPPKS03.VOPPKS03-KEY; /* Table key*/
  GN0SW01.XXXLOCID = "XCT2";
  GN0SW01.GN0SW01-ERRFL = "Y";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end GN0SS-XCT-UPD-U1

// key field edits
Function GN0SS-XWHCD-CHK()
  /**/

   /* ********************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ********************************************************************/

  if (GN0SM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      GN0SM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      GN0SM110.XWHABRV = " ";
      GN0SW01.GN0SW01-ERRFL = "Y";
      GN0SW01.GN0SW01-MSGNO = 0162; /* inactive msg*/
      GN0SW01.XXXLOCID = "WCH1"; /* error location*/
      set GN0SM110.XWHCD cursor, bold;
    end
  else
    GN0SM110.XWHABRV = " ";
    GN0SW01.GN0SW01-ERRFL = "Y";
    GN0SW01.GN0SW01-MSGNO = 0071; /* invalid value msg*/
    GN0SW01.XXXLOCID = "WCH2"; /* error location*/
    set GN0SM110.XWHCD cursor, bold;
  end

   /* ********************************************************************/
   /* *** end of STATEMENT GROUP                                 ****/
   /* ********************************************************************/


end // end GN0SS-XWHCD-CHK

//*** RECORD=GN0SW01 ****
//  GN0S application uses GN0SW01GROUP  record.
// 
// MAINTENANCE LOG:
// 
// DATE      NAME       COMMENTS
// ---------       ---------       
//  ------------------------------------
// 
// 04-24-03  rathal        created csp record
// 
// ************************************************************
// ***********************
Record GN0SW01 type basicRecord
  3 GN0SW01GROUP char(56) ; // group level for gs0bw01
    4 GN0SW01-ERRFL char(1) ; // general error switch
    4 GN0SW01-MSGNO smallint ; // msg no. save field
    4 GN0SW01-ITEMKY char(40) ; // group key
      5 GN0SW01-XWHCD char(2) ; // warehouse code
      5 GN0SW01-CUORDID num(9) ; // order id
      5 GN0SW01-NKORDID num(2) ; // nike order id
      5 GN0SW01-XGPCD char(2) ; // GPC code
      5 GN0SW01-XSTYNBR char(6) ; // style
      5 GN0SW01-XCLRCD char(3) ; // color code
      5 GN0SW01-XDMCD char(2) ; // dimension
      5 GN0SW01-XQACD char(2) ; // quality
      5 GN0SW01-XISEG char(3) ; // iseg
      5 GN0SW01-XEDIF char(3) ; // engg diff
      5 GN0SW01-XPKGTYP char(2) ; // package type
      5 GN0SW01-XUOMCD char(2) ; // UOM
      5 GN0SW01-XOWCD char(2) ; // owner gp
    4 GN0SW01-DATA-CHANGED-FL char(1) ; // map fields change
    4 GN0SW01-KEY-DATA-CHNGD-FL char(1) ; // map fields change
    4 GN0SW01-SU-UPDT-FL char(1) ; // MCO sucessful update flag
    4 XDVCD char(2) ; // xdv-div-cd
    4 XXXERRID XXXERRID ; 
      5 XXXAPPID XXXAPPID ; 
      5 XXXLOCID XXXLOCID ; 
end // end GN0SW01

//*** RECORD=GN0SW02 ****
// ************************************************************
//  GN0S application uses GN0SW02 record.
// 
// MAINTENANCE LOG:
// 
// DATE      NAME       COMMENTS
// ---------       ---------       
//  ------------------------------------
// 
// 04-24-03  rathal        created csp record
// 
// ************************************************************
// ***********************
Record GN0SW02 type basicRecord
  3 GN0SWNSZ smallint ; // num of sizes
  3 GN0SWARY char(11) [40] ; // size data array
    4 SY5SZID SY5SZID ; 
    4 SY4IDDSC SY4IDDSC ; 
    4 SZMCO char(4) ; // manufg country of origin
  3 GN0SIDX01 num(4) ; // size index
  3 GN0SIDX02 num(4) ; // working storage size index
  3 GN0SENDCUR char(1) ; // otp size table cursor switch
  3 GN0SEOFORCUR char(1) ; // shiprec order table cur switch
  3 GN0SNILORFND char(1) ; // otp size table cursor switch
  3 GN0SW02-XWHCD1 char(2) ; // warehouse code
  3 GN0SW02-SCHDNBR int ; // pick schedule number
  3 GN0SW02-RMTNBR char(6) ; // remote printer number
    4 GN0SW02-CHKRMT char(3) ; 
    4 GN0SW02-CHKRMTF4 char(1) ; 
    4 GN0SW02-CHKRMTF5 char(1) ; 
    4 GN0SW02-CHKRMTF6 char(1) ; 
end // end GN0SW02

//*** RECORD=VOPPKS03 ****
// ************************************************************
//   DB2 table           : DORDER.VOPPKS03
//   copylib member  : DOPPKS03
//   i/o module          : VOPPKS03
//   date created       : May 14, 2003
// 
// maintenance log:
// 
//   date         init.       description
//   --------        ------      
//  -----------------------------------------
// 05/14/03  rathal     Created.
// ************************
Record VOPPKS03 type basicRecord
  3 VOPPKS03-GROUP VOPPKS03-GROUP ; 
    4 XWHCD XWHCD ; 
    4 VOPPKS03-KEY VOPPKS03-KEY ; 
      5 OP1PARTN OP1PARTN ; 
      5 OP1CUOID OP1CUOID ; 
      5 OP1NORID OP1NORID ; 
    4 OP1NTMAL OP1NTMAL ; 
    4 OPLNINB OPLNINB ; 
    4 SYSZID SYSZID ; 
    4 CU-CUSPRDID CU-CUSPRDID ; 
    4 CU-PRDNM CU-PRDNM ; 
    4 CU-PRDSNM CU-PRDSNM ; 
    4 CU-PRDCLRNM CU-PRDCLRNM ; 
    4 CU-PRDSZID CU-PRDSZID ; 
    4 CU-PRDSZNM CU-PRDSZNM ; 
    4 CU-CUSRTPR CU-CUSRTPR ; 
    4 CU-CUSSPPR CU-CUSSPPR ; 
    4 CU-SPPREDT CU-SPPREDT ; 
    4 CU-SUGGRTPR CU-SUGGRTPR ; 
    4 CU-BYSNID CU-BYSNID ; 
    4 CU-HGXGPCD CU-HGXGPCD ; 
    4 CU-HGSTYNBR CU-HGSTYNBR ; 
    4 OPCASLTNBR OPCASLTNBR ; 
    4 PKLBLCD1 PKLBLCD1 ; 
    4 PKLBLCD2 PKLBLCD2 ; 
    4 YLA-LBLATHCD1 YLA-LBLATHCD1 ; 
    4 YLA-LBLATHCD2 YLA-LBLATHCD2 ; 
    4 CU-HGCTNCLS CU-HGCTNCLS ; 
    4 CU-VENDCLSID CU-VENDCLSID ; 
    4 CU-SKUCMNT1 CU-SKUCMNT1 ; 
    4 CU-SKUCMNT2 CU-SKUCMNT2 ; 
    4 CU-SKUCMNT3 CU-SKUCMNT3 ; 
    4 XDZDISTCD XDZDISTCD ; 
    4 PKALQTY PKALQTY ; 
    4 SYSZWT1 SYSZWT1 ; 
    4 PKSAPSZLNNBR PKSAPSZLNNBR ; 
    4 PKSAPBTHNBR PKSAPBTHNBR ; 
    4 PKUPKQTY PKUPKQTY ; 
    4 PKTKLBLSTKID PKTKLBLSTKID ; 
    4 SRDCRECSTIND SRDCRECSTIND ; 
    4 XCTCD XCTCD ; 
    4 ZZZSDT ZZZSDT ; 
    4 ZZZCHGDT ZZZCHGDT ; 
    4 ZZZCHGTM ZZZCHGTM ; 
    4 ZZZCHGCT ZZZCHGCT ; 
end // end VOPPKS03

// cu-buy-sesn-id
DataItem CU-BYSNID char(6) 
end

// cu-cust-prod-id
DataItem CU-CUSPRDID char(25) 
end

// cu-cust-rtl-prc
DataItem CU-CUSRTPR decimal(13)  {
  sign = none
}
end

// cu-cust-spcl-prc
DataItem CU-CUSSPPR decimal(13)  {
  sign = none
}
end

// Distribution Center Cmpny Id
DataItem CU-DISTCTR-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Distribution Center Store Id
DataItem CU-DISTCTR-STOR-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EDI Ship Notice Seq. Nbr
DataItem CU-EDI-SHP-SEQ-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_EDI_TRADPT_ID
DataItem CU-EDI-TRADPT-ID char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CU-EXPT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-hang-crtn-cls
DataItem CU-HGCTNCLS char(3) 
end

// cu-hang-sty-nbr
DataItem CU-HGSTYNBR char(6) 
end

// cu-hang-xgp-cd
DataItem CU-HGXGPCD char(2) 
end

// cu-prod-colr-nm
DataItem CU-PRDCLRNM char(30) 
end

// cu-prod-nm
DataItem CU-PRDNM char(30) 
end

// cu-prod-snm
DataItem CU-PRDSNM char(10) 
end

// cu-prod-sz-id
DataItem CU-PRDSZID char(5) 
end

// cu-prod-sz-nm
DataItem CU-PRDSZNM char(30) 
end

DataItem CU-SHGRP-ADDR-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu-sku-comnt1
DataItem CU-SKUCMNT1 char(20) 
end

// cu-sku-comnt2
DataItem CU-SKUCMNT2 char(20) 
end

// cu-sku-comnt3
DataItem CU-SKUCMNT3 char(20) 
end

// cu-spcl-prc-edt
DataItem CU-SPPREDT int {
  sign = none
}
end

// cu-stor-self-id
DataItem CU-STOR-SELF-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-sugg-rtl-prc
DataItem CU-SUGGRTPR decimal(13)  {
  sign = none
}
end

// cu-vend-cls-id
DataItem CU-VENDCLSID char(10) 
end

// op-case-lot-nbr
DataItem OPCASLTNBR char(12) 
end

// op-line-item-nbr
DataItem OPLNINB smallint {
  sign = none
}
end

// pk-aloc-pick-qty
DataItem PKALQTY decimal(7)  {
  sign = none
}
end

// pk-labl-cd1
DataItem PKLBLCD1 char(3) 
end

// pk-labl-cd2
DataItem PKLBLCD2 char(3) 
end

// pk-sap-btch-nbr
DataItem PKSAPBTHNBR char(10) 
end

// pk-sap-sz-ln-nbr
DataItem PKSAPSZLNNBR char(6) 
end

// pk-tkt-labl-stk-id
DataItem PKTKLBLSTKID char(6) 
end

// pk-unt-in-pack-qty
DataItem PKUPKQTY smallint {
  sign = none
}
end

// sr-dc-rec-stat-ind
DataItem SRDCRECSTIND char(1) 
end

// sy-sz-id
DataItem SYSZID smallint {
  sign = none
}
end


// sy-sz-wt1
DataItem SYSZWT1 decimal(5)  {
  sign = none
}
end

// ops record group
DataItem VOPPKS03-GROUP char(329) 
end

// op1rec key
DataItem VOPPKS03-KEY char(7) 
end

// xdz-data-dist-cd
DataItem XDZDISTCD char(2) 
end


// yla-labl-atch-cd1
DataItem YLA-LBLATHCD1 char(2) 
end

// yla-labl-atch-cd2
DataItem YLA-LBLATHCD2 char(2) 
end