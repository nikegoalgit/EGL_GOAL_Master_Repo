package fe0d;

import corpcom1.CAUSERID;
import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPTA0P;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS30;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XSNTBL;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XWSCD;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import fe.common.FE0DTBL;
import ff.common.*;
import fg.common.FG1REC;
import sy.common.SY1SSTNM;
import sy.common.SY2CLRAB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FE0D ****
// This application allows the user to submit a Model From
// Master Update via a batch job. This job will be submitted
// immediately. The application must verify that a model has
// been selected (FF0W) for a master before allowing the user
// to submit the job.
// 
// The user must specify the "range". He may update all lines
// by leaving the other fields blank, or he can specify a
// "type" and "line", or a "type" and "category". The "update
// from selected model test run" must be "y" for the batch job
// to be submitted.
// 
// If the user doesn't know the code for a "line", "type", or
// "category", he can enter a "?" to ask for help. The program
// will bring up a pop-up window to show a list of lines, types
// or categories. So that he can choose from there.
// 
// The user may exit to any allowed application, via fast path
// or PF keys.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04/16/91  MWALKE  New application--clone of ff0z
//          11/18/91  KSANFO  Enhance screen to display the
//                            correct Line when only Category
//                            is entered.
// FF2066   11/21/91  LDELUH  Add new logic for re-freezing
//                            before submit has been done.
// FIX      08/14/92  KSTOKK  Fix comments in JCL tble.
// FF-338   06/30/93  KGRAHA  Change question description to
//                            UPDATE MODEL FROM SUGGESTED BUY
//                            (Y/N):.
// FF       09/07/93  mdange  Add logic to submit either test
//                            or prod JCL.
// FF175    12/12/96  DSMITH  Changed the date range fill
//                            character to '0'.
// ff-1054  12/16/97  RKUDPI  Changes to interface with the new
//                            GPP system.
// ff-1631A 07/15/98  RKUDPI  fix to fe0ds-val-season to
//                            always create model for 12 mos.
// ff-1641  09/29/98  RKUDPI  changes for 3-season project
// *********************
Program FE0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0DW00 FE0DW00; // record
  FE0DW01 FE0DW01; // record
  FE0DW02 FE0DW02; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  FG1REC FG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  WFF7060 WFF7060; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use XPCTBL; // table
  use YPGTBL; // table
  use FE0DT; // table
  use FE0DT5O {deleteAfterUse = yes}; // table
  use FE0DTBL {deleteAfterUse = yes}; // table
  use FE0DM.FE0DM001, // form
  		FE0DM.XX0XM001,
  		FE0DM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FE0DM001 initial; /* M001 input/output*/
    set FE0DW00 empty; /* Working storage*/
    set FE0DW01 empty; /* M001 display storage*/
    set FE0DW02 empty; /* Jcl storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FE0DW00.FE0DWSWF = "Y"; /* Format the map switch*/
    ;
     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/
    ;
    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    if (FFWREC.YPGCD == "  ") /* No type group*/
      FFWREC.YPGCD = "01"; /* Default value*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end /* Abbreviation*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/
    ;
    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/
    FFWREC.XPLCD = " "; /* Clear line code*/
    FFWREC.XPLABRV = " "; /* Clear line name*/
    FFWREC.XPCCD = " "; /* Clear cat code*/
    FFWREC.XPCABRV = " "; /* Clear cat name*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0D001; /* Converse the main process*/
    ;
    ;
    FE0D001: FE0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0D001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FE0D

// Inquire/maintain a table row
Function FE0D001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0D200(); /* Format and display the map*/
  ;
  FE0D300(); /* Check attention identifier*/
  ;
  FE0D400(); /* Reset fields to normal intensity*/
  ;
  FE0D500(); /* Verify the entered data*/
  ;
  FE0D600(); /* Process valid input request*/
  ;
  ;
end // end FE0D001

// Format and converse the map
Function FE0D200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FE0DW00.FE0DWSWF == "Y") /* Map must be formatted*/
      FE0D210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0DM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0DM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FE0DM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FE0DM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0DM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FE0DM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0DM001.CAITEM; /* Application data*/
  ;
  ;
end // end FE0D200

// Format the display data
Function FE0D210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0DM001 initial; /* M001 input/output area*/
  ;
  FE0DW00.FE0DWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0DW00.FE0DWBYM = FFWREC.FFABEGMO; /* date range beg month*/
  FE0DM001.FFZBYYMM = FE0DW00.FE0DWBYM; /* date range beg month*/
  FE0DW00.FE0DWBYM = FFWREC.FFAENDMO; /* date range end month*/
  FE0DM001.FFZEYYMM = FE0DW00.FE0DWBYM; /* date range end month*/
  FE0DM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0DM001.XPLABRV = FFWREC.XPLABRV; /* Product line abbreviation*/
  FE0DM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FE0DM001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
  FE0DM001.XPCCD = FFWREC.XPCCD; /* Category code*/
  FE0DM001.XPCABRV = FFWREC.XPCABRV; /* Category short description*/
  ;
  ;
end // end FE0D210

// Check attention identifier
Function FE0D300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FE0DW00.FE0DWSWF = "Y"; /* Format the map switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0DM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FE0DM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FE0DM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0Y"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FF0W"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FF0X"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FF01"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "FG05"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0D300

// Reset highlighted fields
Function FE0D400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0DM001.XPLCD initialAttributes; /* Product line code*/
  set FE0DM001.YPGCD initialAttributes; /* Type group code*/
  set FE0DM001.XPCCD initialAttributes; /* Category code*/
  set FE0DM001.FE0DSES1 initialAttributes; /* date range beg month*/
  set FE0DM001.FE0DSES2 initialAttributes; /* Season Code 1*/
  set FE0DM001.FE0DSES3 initialAttributes; /* Season Code 2*/
  set FE0DM001.FE0DSES4 initialAttributes; /* Season Code 3*/
  set FE0DM001.FFZBYYMM initialAttributes; /* Season Code 4*/
  set FE0DM001.FFZEYYMM initialAttributes; /* date range end month*/
  set FE0DM001.FE0DMJS1 initialAttributes; /* job submit switch*/
  set FE0DM001.FE0DCRYF initialAttributes; /* Include Carryover flag*/
  set FE0DM001.FE0DSPLF initialAttributes; /* Include Specialty Categpry Flag*/
  set FE0DM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FE0DM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0DM001.XPLCD == "?" /* Product line list requested*/
   || FE0DM001.YPGCD == "?" /* or type group liest requested*/
   || FE0DM001.XPCCD == "?") /* or category list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0DM001.XPLCD == "?") /* Product line list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0DM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FE0DM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FE0DM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FE0DM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0DM001.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0DM001.YPGCD == "?") /* Type group list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0DM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0DM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FE0DM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FE0DM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0DM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0DM001.XPCCD == "?") /* Category list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0DM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FE0DM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FE0DM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FE0DM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0DM001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0D400

// Verify the entered data
Function FE0D500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FE0DM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify Key data*/
   /* ------------------------------------------------------------*/
  ;
  FE0D510(); /* verify key data*/
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0D500

// Verify Key Data
Function FE0D510()
  FE0DW00.FE0DW-SESN-ENTERED = "N";
  FE0DW00.FE0DW-DATE-ENTERED = "N";
  ;
  if (FE0DM001.FE0DSES1 != "    "
   || FE0DM001.FE0DSES2 != "    "
   || FE0DM001.FE0DSES3 != "    "
   || FE0DM001.FE0DSES4 != "    ")
    FE0DW00.FE0DW-SESN-ENTERED = "Y";
    FE0DW00.FE0DSNRN = "S";
  end
  ;
  if (FE0DM001.FFZBYYMM != "0000"
   || FE0DM001.FFZEYYMM != "0000")
    FE0DW00.FE0DW-DATE-ENTERED = "Y";
    FE0DW00.FE0DSNRN = "R";
  end
  ;
  if (FE0DW00.FE0DW-SESN-ENTERED == "N"
   && FE0DW00.FE0DW-DATE-ENTERED == "N")
    FFWREC.XXXMODID = "510";
    converseLib.validationFailed(535);
    set FE0DM001.FE0DSES1 cursor, bold;
    return;
  end
  ;
  if (FE0DW00.FE0DW-SESN-ENTERED == "Y"
   && FE0DW00.FE0DW-DATE-ENTERED == "Y")
    FFWREC.XXXMODID = "510";
    converseLib.validationFailed(536);
    set FE0DM001.FE0DSES1 cursor, bold;
    return;
  end
  ;
  FE0D511(); /* Read DFCAST.VFFCTL01*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify Season Codes entered;*/
   /* ------------------------------------------------------------*/
  if (FE0DW00.FE0DW-SESN-ENTERED == "Y")
    FE0DW00.FE0DW-LEAST-BEG-MO = FE0DW00.FE0DW-BUY-CYM;
    if (FE0DM001.FE0DSES1 != "    ")
      FE0DW00.FE0DW-SESN-YR = FE0DM001.FE0DSES1;
      FE0DW00.FE0DW-BEG-MO = 000000;
      FE0DS-VAL-SEASON();
      if (converseVar.validationMsgNum != 0)
        set FE0DM001.FE0DSES1 cursor, bold;
        return;
      end
    end
    ;
    if (FE0DM001.FE0DSES2 != "    ")
      FE0DW00.FE0DW-BEG-MO = 000000;
      FE0DW00.FE0DW-SESN-YR = FE0DM001.FE0DSES2;
      FE0DS-VAL-SEASON();
      if (converseVar.validationMsgNum != 0)
        set FE0DM001.FE0DSES2 cursor, bold;
        return;
      end
    end
    ;
    if (FE0DM001.FE0DSES3 != "    ")
      FE0DW00.FE0DW-SESN-YR = FE0DM001.FE0DSES3;
      FE0DW00.FE0DW-BEG-MO = 000000;
      FE0DS-VAL-SEASON();
      if (converseVar.validationMsgNum != 0)
        set FE0DM001.FE0DSES3 cursor, bold;
        return;
      end
    end
    ;
    if (FE0DM001.FE0DSES4 != "    ")
      FE0DW00.FE0DW-SESN-YR = FE0DM001.FE0DSES4;
      FE0DW00.FE0DW-BEG-MO = 000000;
      FE0DS-VAL-SEASON();
      if (converseVar.validationMsgNum != 0)
        set FE0DM001.FE0DSES4 cursor, bold;
        return;
      end
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify Date Range*/
   /* ------------------------------------------------------------*/
  if (FE0DW00.FE0DW-DATE-ENTERED == "Y")
    set FFZREC empty; /* Subroutine parameters*/
    ;
    FFZREC.FFZSRANG = "Y";
    FFZREC.FFZBYYMM = FE0DM001.FFZBYYMM; /* Beginning date*/
    FFZREC.FFZEYYMM = FE0DM001.FFZEYYMM; /* Ending date*/
    ;
    XSFFS30(); /* Verify the range*/
    ;
     /* ------------------------------------------------------------*/
      /* If not zero return code, indicate missing or invalid.*/
     /* ------------------------------------------------------------*/
    ;
    if (FFZREC.FFZENDRC != "0") /* Ending date error*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      set FE0DM001.FFZEYYMM cursor, bold; /* Highlight*/
      ;
      if (FFZREC.FFZENDRC == "1") /* No date entered*/
        converseLib.validationFailed(8); /* Required field missing*/
      else
        ;
        if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
          converseLib.validationFailed(17); /* Invalid date entered*/
        else
          ;
          converseLib.validationFailed(151); /* Date is out of range*/
          ;
        end
        ;
      end
      ;
    end
    ;
    if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      set FE0DM001.FFZBYYMM cursor, bold; /* Highlight*/
      ;
      if (FFZREC.FFZBEGRC == "1") /* No date entered*/
        converseLib.validationFailed(8); /* Required field missing*/
      else
        ;
        if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
          converseLib.validationFailed(17); /* Invalid date entered*/
        else
          ;
          converseLib.validationFailed(151); /* Date is out of range*/
          ;
        end
        ;
      end
      ;
    end
  end
  ;
  if (FE0DW00.FE0DW-SESN-ENTERED == "Y")
    if (FE0DM001.FE0DSPLF == "Y")
      FE0DS-CALL-FF7060();
      ;
      set FFZREC empty;
      FFZREC.FFZBEGMO = FF7060-XSN-BEG-MO;
      FFZREC.FFZENDMO = FF7060-XSN-END-MO;
      ;
      FE0DS-VAL-MORNG();
      if (converseVar.validationMsgNum != 0)
        set FE0DM001.FE0DSES1 cursor, bold;
        return;
      end
    else
      set FFZREC empty;
      FFZREC.FFZBEGMO = FE0DW00.FE0DW-LEAST-BEG-MO;
      FFZREC.FFZENDMO = FE0DW00.FE0DW-GRTST-END-MO;
      ;
      FE0DS-VAL-MORNG();
      if (converseVar.validationMsgNum != 0)
        set FE0DM001.FE0DSES1 cursor, bold;
        return;
      end
      FE0DW00.FE0DW-MSG-PART-1 = "THE MODEL WILL BE CREATED FOR ";
      FE0DW00.FE0DW-MSG-BEG-MO = FE0DW00.FE0DW-LEAST-BEG-MO;
      FE0DW00.FE0DW-MSG-PART-2 = " THRU ";
      FE0DW00.FE0DW-MSG-END-MO = FE0DW00.FE0DW-GRTST-END-MO;
      FE0DW00.FE0DW-MSG-PART-3 = " <PRESS ENTER TO ACCEPT>";
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If category was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0DM001.XPCCD > " ") /* category entered*/
    ;
    if (FE0DM001.XPCCD in XPCTBL.XPCCD /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FE0DM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      ;
      FE0DM001.XPCABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FE0DM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
      return;
      ;
    end
    ;
  else
    FE0DM001.XPCABRV = " "; /* Abbreviation*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If line code was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0DM001.XPLCD > " ") /* line code entered*/
    if (FE0DM001.XPLCD == "*") /* line code wildcarded*/
      FE0DM001.XPLABRV = "*ALL*"; /* Abbreviation*/
    else
      if (FE0DM001.XPLCD in XPLTBL.XPLCD /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FE0DM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/
        FE0DM001.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        set FE0DM001.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Indicate missing or invalid*/
        return;
      end
    end
  else
    FE0DM001.XPLABRV = " "; /* Abbreviation*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If category was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0DM001.XPCCD == " " /* category missing*/
   && FE0DM001.XPLCD == " ") /* line code missing*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0DM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    return;
    ;
  end
  ;
  FE0D520();
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
   /* ------------------------------------------------------------*/
   /* If type code was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0DM001.YPGCD > " ") /* line code entered*/
    if (FE0DM001.YPGCD == "*") /* line code wildcarded*/
      FE0DM001.YPGABRV = "*ALL*"; /* Abbreviation*/
    else
      if (FE0DM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and flag eq yes*/
        FE0DM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/
        FE0DM001.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        set FE0DM001.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Indicate missing or invalid*/
        return;
      end
    end
  else
    ;
    FE0DM001.YPGABRV = " "; /* Abbreviation*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0DM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    return;
    ;
  end
  ;
  if (FE0DW00.FE0DW-DATE-ENTERED == "Y")
    if (FE0DM001.FE0DCRYF == "Y")
      FFWREC.XXXMODID = "510"; /* Module Identification*/
      converseLib.validationFailed(543); /* Error msg*/
      set FE0DM001.FE0DCRYF cursor, bold; /* Highliht field*/
      return;
    end
    ;
    if (FE0DM001.FE0DSPLF == "Y")
      FFWREC.XXXMODID = "510"; /* Module Identification*/
      converseLib.validationFailed(544); /* Error msg*/
      set FE0DM001.FE0DSPLF cursor, bold; /* Highliht field*/
      return;
    end
  else
    if (FE0DM001.FE0DCRYF != "Y"
     && FE0DM001.FE0DCRYF != "N")
      FFWREC.XXXMODID = "510"; /* Module Identification*/
      converseLib.validationFailed(533); /* Error msg*/
      set FE0DM001.FE0DCRYF cursor, bold; /* Highliht field*/
      return;
    end
    ;
    if (FE0DM001.FE0DSPLF != "Y"
     && FE0DM001.FE0DSPLF != "N")
      FFWREC.XXXMODID = "510"; /* Module Identification*/
      converseLib.validationFailed(534); /* Error msg*/
      set FE0DM001.FE0DSPLF cursor, bold; /* Highliht field*/
      return;
    end
  end
  ;
  if (FE0DM001.FE0DMJS1 != "Y" /* verify key data*/
   && FE0DM001.FE0DMJS1 != "N")
    FFWREC.XXXMODID = "500";
    converseLib.validationFailed(153);
    set FE0DM001.FE0DMJS1 cursor, bold;
  end
  ;
end // end FE0D510

// Calculate the buy and curr
Function FE0D511()
   /* ------------------------------------------------------------*/
     /* Buy month calculation , stored in fe0dW00.fe0dw-buy-dt*/
   /* ------------------------------------------------------------*/
  ;
  FE0D512(); /* get futures cutoff date*/
  ;
  FE0DW00.FE0DW-BUY-DT = FF1REC.FF1FUTDT;
  ;
  FE0DW00.FE0DW-BUY-MM = FE0DW00.FE0DW-BUY-MM + 6;
   /* Buy month is futures + 5 ; We require buy-mo + 1 as starting pt.*/
  if (FE0DW00.FE0DW-BUY-MM > 12)
    FE0DW00.FE0DW-BUY-MM = FE0DW00.FE0DW-BUY-MM - 12;
    if (FE0DW00.FE0DW-BUY-YY == 99)
      FE0DW00.FE0DW-BUY-CC = FE0DW00.FE0DW-BUY-CC + 1;
      FE0DW00.FE0DW-BUY-YY = 00;
    else
      FE0DW00.FE0DW-BUY-YY = FE0DW00.FE0DW-BUY-YY + 1;
    end
  end
  ;
  FE0DW00.FE0DW-GRTST-END-MO = FE0DW00.FE0DW-BUY-CYM;
  FE0DW00.FE0DW-GRTST-END-MM = FE0DW00.FE0DW-GRTST-END-MM + 11;
  if (FE0DW00.FE0DW-GRTST-END-MM > 12)
    FE0DW00.FE0DW-GRTST-END-MM = FE0DW00.FE0DW-GRTST-END-MM - 12;
    if (FE0DW00.FE0DW-GRTST-END-YY == 99)
      FE0DW00.FE0DW-GRTST-END-CC = FE0DW00.FE0DW-GRTST-END-CC + 1;
      FE0DW00.FE0DW-GRTST-END-YY = 00;
    else
      FE0DW00.FE0DW-GRTST-END-YY = FE0DW00.FE0DW-GRTST-END-YY + 1;
    end
  end
  ;
end // end FE0D511

// Get futures cutoff date
Function FE0D512()
  ;
  set FF1REC empty; /* Clear up the storage row*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "126"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0D512

// Verify Relationships
Function FE0D520()
   /* ------------------------------------------------------------*/
   /* Verify that key is in FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If there are no errors*/
    ;
    /* ------------------------------------------------------------*/
     /* Clear the row storage area.*/
    /* ------------------------------------------------------------*/
    ;
    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/
    ;
    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFXRF01.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0DM001.XPCCD == " ") /* category not entered*/
      FF2REC.XPCCD = "*"; /* category*/
    else
      FF2REC.XPCCD = FE0DM001.XPCCD; /* category*/
    end
    ;
    if (FE0DM001.XPLCD == " ") /* line not entered*/
      FF2REC.XPLCD = "*"; /* line*/
    else
      FF2REC.XPLCD = FE0DM001.XPLCD; /* line*/
    end
    ;
    FF2REC.YSMXDV = "*"; /* division*/
    ;
    if (FE0DM001.YPGCD == " ") /* type grp not entered*/
      FF2REC.YPGCD = "*"; /* type grp*/
    else
      FF2REC.YPGCD = FE0DM001.YPGCD; /* type grp*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* Select the row to display from the table.*/
    /* ------------------------------------------------------------*/
    ;
    FE0D522(); /* Open cursor for DFCAST.VFFXRF01*/
    ;
    FE0D524(); /* fetch FFXRF*/
    ;
    /* ------------------------------------------------------------*/
     /* If successful, close FFXRF.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* Row not found code*/
      ;
      /* ------------------------------------------------------------*/
       /* If not found, indicate invalid.*/
      /* ------------------------------------------------------------*/
      ;
      FFWREC.XXXMODID = "520"; /* Module identification*/
      if (FE0DM001.XPCCD != " ") /* category entered*/
        set FE0DM001.XPCCD cursor, bold; /* highlight*/
      end
      if (FE0DM001.XPLCD != " ") /* line entered*/
        set FE0DM001.XPLCD cursor, bold; /* highlight*/
      end
      converseLib.validationFailed(203); /* Indicate invalid relationship*/
      ;
      ;
    else
      if (FE0DM001.XPLCD == " ")
        FE0DM001.XPLCD = FF2REC.XPLCD;
        FE0DS001();
      end
      ;
    end
    ;
    FE0D526(); /* close cursor*/
    ;
  end
  ;
  ;
end // end FE0D520

// Open FFXRF
Function FE0D522()
   /* ------------------------------------------------------------*/
   /* Open FFXRF*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "522"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0D522

// Fetch FFXRF
Function FE0D524()
   /* ------------------------------------------------------------*/
   /* Fetch Next Row Xref Table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, Return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "524"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0D524

// Close Cursor - FFXRF
Function FE0D526()
   /* ------------------------------------------------------------*/
   /* Close FFXRF*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "526"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0D526

// Process valid input request
Function FE0D600()
   /* ------------------------------------------------------------*/
   /* Save fields that were entered by the user.*/
   /* ------------------------------------------------------------*/
  ;
  FE0DW00.FE0DWSWF = "Y"; /* Format the map switch*/
  FE0DW01.FFZBYYMM = FE0DM001.FFZBYYMM; /* beg month*/
  FE0DW01.FFZEYYMM = FE0DM001.FFZEYYMM; /* end month*/
  FE0DW01.FE0DSES1 = FE0DM001.FE0DSES1; /* Season Code 1*/
  FE0DW01.FE0DSES2 = FE0DM001.FE0DSES2; /* Season Code 2*/
  FE0DW01.FE0DSES3 = FE0DM001.FE0DSES3; /* Season Code 3*/
  FE0DW01.FE0DSES4 = FE0DM001.FE0DSES4; /* Season Code 4*/
   /*  */
  FE0DW01.FE0DCRYF = FE0DM001.FE0DCRYF; /* CARRYOVER FLAG*/
  FE0DW01.FE0DSPLF = FE0DM001.FE0DSPLF; /* SPECIALTY FLAG*/
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* beg month*/
  FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* end month*/
  FFWREC.XPLCD = FE0DM001.XPLCD; /* line code*/
  FFWREC.XPLABRV = FE0DM001.XPLABRV; /* line abrv*/
  FFWREC.YPGCD = FE0DM001.YPGCD; /* type code*/
  FFWREC.YPGABRV = FE0DM001.YPGABRV; /* type abrv*/
  FFWREC.XPCCD = FE0DM001.XPCCD; /* category code*/
  FFWREC.XPCABRV = FE0DM001.XPCABRV; /* category abrv*/
  ;
   /* ------------------------------------------------------------*/
   /* If the key has changed*/
      /* submit the JCL to run the batch job.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZBEGMO != FE0DW02.FFZBEGMO   /* beg month changed*/
   || FFZREC.FFZENDMO != FE0DW02.FFZENDMO   /* end month changed*/
   || FE0DM001.XPLCD != FE0DW02.XPLCD       /* Product line changed*/
   || FE0DM001.YPGCD != FE0DW02.YPGCD       /* or type group changed*/
   || FE0DM001.XPCCD != FE0DW02.XPCCD       /* or category changed*/
   || FE0DM001.FE0DSES1 != FE0DW02.FE0DSES1 /* SEASON CODE 1 CHANGED*/
   || FE0DM001.FE0DSES1 != FE0DW02.FE0DSES2 /* SEASON CODE 2 CHANGED*/
   || FE0DM001.FE0DSES1 != FE0DW02.FE0DSES3 /* SEASON CODE 3 CHANGED*/
   || FE0DM001.FE0DSES1 != FE0DW02.FE0DSES4 /* SEASON CODE 4 CHANGED*/
   || FE0DM001.FE0DCRYF != FE0DW02.FE0DCRYF /* CARRYOVER FLG CHANGED*/
   || FE0DM001.FE0DSPLF != FE0DW02.FE0DSPLF) /* SPECIALTY FLG CHANGED*/
    ;
    if (FE0DM001.FE0DMJS1 == "Y")
      if (FE0DW00.FE0DW-SESN-ENTERED == "Y")
        if (FE0DM001.FE0DMRS1 == "Y")
          FE0DM001.FE0DMRS1 = "N"; /* Month Range DISPLAYED ?*/
          FE0DM001.FE0DMJS1 = "N"; /* Re-set submit switch to No*/
          FE0D610(); /* Submit a batch job*/
        else
          FFWREC.XXXMODID = "600";
          set FE0DM001.FE0DMJS1 cursor, bold;
          converseLib.validationFailed();
          FE0DM001.VAGen_EZEMSG = FE0DW00.FE0DW-RNG-MSG;
          FE0DM001.FE0DMRS1 = "Y";
          exit stack;
        end
      else
        FE0DM001.FE0DMRS1 = "N";
        FE0DM001.FE0DMJS1 = "N";
        FE0D610();
      end
    else
      FE0DM001.FE0DMRS1 = "N";
      FFWREC.XXXMODID = "600"; /* Module identification*/
      converseLib.validationFailed(302); /* Switch must be Y to submit job*/
      set FE0DM001.FE0DMJS1 cursor, bold;
      ;
      exit stack; /* Exit to display map*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 313; /* Forecast already submitted*/
    ;
  end
  ;
  ;
end // end FE0D600

// Submit a batch job
Function FE0D610()
  ;
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FE0D611(); /* format production jcl*/
    else
      FE0D612(); /* format development jcl*/
    end
  else
    ;
    FFWREC.XXXMODID = "610"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end
  ;
end // end FE0D610

// Submit prod JCL FF7011
Function FE0D611()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0DW02 empty; /* Parameter work area*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FE0DT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      ;
      if (FE0DM001.FE0DSPLF == "Y")
        FE0DW02.FFZBEGMO = FF7060-XSN-BEG-MO;
        FE0DW02.FFZENDMO = FF7060-XSN-END-MO;
      else
        FE0DW02.FFZBEGMO = FFZREC.FFZBEGMO; /* Actual buy month*/
        FE0DW02.FFZENDMO = FFZREC.FFZENDMO; /* Actual buy month*/
      end
      FE0DW02.FE0DSES1 = FE0DM001.FE0DSES1; /* SEASON CODE 1*/
      FE0DW02.FE0DSES2 = FE0DM001.FE0DSES2; /* SEASON CODE 2*/
      FE0DW02.FE0DSES3 = FE0DM001.FE0DSES3; /* SEASON CODE 3*/
      FE0DW02.FE0DSES4 = FE0DM001.FE0DSES4; /* SEASON CODE 4*/
      FE0DW02.FE0DCRYF = FE0DM001.FE0DCRYF; /* CARRYOVER FLAG*/
      FE0DW02.FE0DSPLF = FE0DM001.FE0DSPLF; /* SPECIALTY FLAG*/
      FE0DW02.YPGCD = FE0DM001.YPGCD; /* Type group*/
      FE0DW02.XPLCD = FE0DM001.XPLCD; /* Product line*/
      FE0DW02.XPCCD = FE0DM001.XPCCD; /* Category*/
      FE0DW02.FE0DSNRN = FE0DW00.FE0DSNRN; /* Season or Range ?*/
      FE0DW02.CAUSERID = COMMAREA.CAUSERID; /* User id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0DW02.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0DT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FE0DT.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0DT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online msg*/
  ;
  XPTA0P(); /* Print Request Subroutine*/
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "611"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Indicate job was submitted*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0D611

// Submit test JCL FF7011
Function FE0D612()
   /* submit test JCL*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0DW02 empty; /* Parameter work area*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FE0DT5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      ;
      if (FE0DM001.FE0DSPLF == "Y")
        FE0DW02.FFZBEGMO = FF7060-XSN-BEG-MO;
        FE0DW02.FFZENDMO = FF7060-XSN-END-MO;
      else
        FE0DW02.FFZBEGMO = FFZREC.FFZBEGMO; /* Actual buy month*/
        FE0DW02.FFZENDMO = FFZREC.FFZENDMO; /* Actual buy month*/
      end
      FE0DW02.FE0DSES1 = FE0DM001.FE0DSES1; /* SEASON CODE 1*/
      FE0DW02.FE0DSES2 = FE0DM001.FE0DSES2; /* SEASON CODE 2*/
      FE0DW02.FE0DSES3 = FE0DM001.FE0DSES3; /* SEASON CODE 3*/
      FE0DW02.FE0DSES4 = FE0DM001.FE0DSES4; /* SEASON CODE 4*/
      FE0DW02.FE0DCRYF = FE0DM001.FE0DCRYF; /* CARRYOVER FLAG*/
      FE0DW02.FE0DSPLF = FE0DM001.FE0DSPLF; /* SPECIALTY FLAG*/
      FE0DW02.FE0DSNRN = FE0DW00.FE0DSNRN; /* Season or Range ?*/
      FE0DW02.YPGCD = FE0DM001.YPGCD; /* Type group*/
      FE0DW02.XPLCD = FE0DM001.XPLCD; /* Product line*/
      FE0DW02.XPCCD = FE0DM001.XPCCD; /* Category*/
      FE0DW02.CAUSERID = COMMAREA.CAUSERID; /* User id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0DW02.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0DT5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FE0DT5O.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0DT5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online msg*/
  ;
  XPTA0P(); /* Print Request Subroutine*/
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "612"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Indicate job was submitted*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0D612

// CALL FF7060 TO CHECK IF SPECIA
Function FE0DS-CALL-FF7060()
  FF7060-RETURN-CODE = "0";
  FF7060-YPG-PDTYP-GRP-CD = FE0DM001.YPGCD;
  FF7060-XPL-PROD-LN-CD = FE0DM001.XPLCD;
  FF7060-XPC-PROD-CAT-CD = FE0DM001.XPCCD;
  FF7060-SESN-CD1 = FE0DM001.FE0DSES1;
  FF7060-SESN-CD2 = FE0DM001.FE0DSES2;
  FF7060-SESN-CD3 = FE0DM001.FE0DSES3;
  FF7060-SESN-CD4 = FE0DM001.FE0DSES4;
  FF7060-XSN-BEG-MO = FE0DW00.FE0DW-LEAST-BEG-MO;
  FF7060-XSN-END-MO = FE0DW00.FE0DW-GRTST-END-MO;
  ;
  call "FF7060" (WFF7060) {isNoRefresh = yes, isExternal = yes};
  ;
  if (FF7060-RETURN-CODE != "0")
    converseLib.validationFailed();
    FE0DM001.VAGen_EZEMSG = FF7060-ERR-MESSAGE;
    exit stack;
  end
end // end FE0DS-CALL-FF7060

// VALIDATE DATE RANGE
Function FE0DS-VAL-MORNG()
  FFZREC.FFZSRANG = "Y";
  ;
  XSFFS30();
  ;
  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "510"; /* Module Identification*/
    if (FFZREC.FFZENDRC == "1" || 
    FFZREC.FFZENDRC == "2")
      converseLib.validationFailed(541);
    else
      if (FE0DM001.FE0DSPLF == "Y")
        FF7060-XSN-END-MM = FF7060-XSN-BEG-MM + 11;
        if (FF7060-XSN-END-MM > 12)
          FF7060-XSN-END-MM = FF7060-XSN-END-MM - 12;
          if (FF7060-XSN-BEG-YY == 99)
            FF7060-XSN-END-YY = 00;
            FF7060-XSN-END-CC = FF7060-XSN-BEG-CC + 1;
          else
            FF7060-XSN-END-YY = FF7060-XSN-BEG-YY + 1;
          end
        else
          move FF7060-XSN-BEG-CC to FF7060-XSN-END-CC withV60Compat;
          move FF7060-XSN-BEG-YY to FF7060-XSN-END-YY withV60Compat;
        end
        FE0DW00.FE0DW-MSG-PART-1 = "THE MODEL WILL BE CREATED FOR ";
        FE0DW00.FE0DW-MSG-BEG-MO = FF7060-XSN-BEG-MO;
        FE0DW00.FE0DW-MSG-PART-2 = " THRU ";
        FE0DW00.FE0DW-MSG-END-MO = FF7060-XSN-END-MO;
        FE0DW00.FE0DW-MSG-PART-3 = " PRESS <ENTER> TO ACCEPT ";
      else
        converseLib.validationFailed(542);
      end
    end
  else
    FE0DW00.FE0DW-MSG-PART-1 = "THE MODEL WILL BE CREATED FOR ";
    FE0DW00.FE0DW-MSG-BEG-MO = FF7060-XSN-BEG-MO;
    FE0DW00.FE0DW-MSG-PART-2 = " THRU ";
    FE0DW00.FE0DW-MSG-END-MO = FF7060-XSN-END-MO;
    FE0DW00.FE0DW-MSG-PART-3 = " PRESS <ENTER> TO ACCEPT ";
  end
end // end FE0DS-VAL-MORNG

// VALIDATE SEASON CODE
Function FE0DS-VAL-SEASON()
  if (FE0DW00.FE0DW-YR not numeric)
    FFWREC.XXXMODID = "510";
    converseLib.validationFailed(537);
    return;
  end
  ;
  if (FE0DW00.FE0DW-SESN in FE0DTBL.FE0DSESN)
    FE0DW00.FE0DW-BEG-MM = FE0DTBL.FE0DBMON[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0)
    FFWREC.XXXMODID = "510";
    converseLib.validationFailed(537);
    return;
  else
    FE0DW00.FE0DW-END-YY = FE0DW00.FE0DW-YR;
    FE0DW00.FE0DW-END-MM = FE0DTBL.FE0DEMON[sysVar.arrayIndex];
    if (FE0DW00.FE0DW-END-YY > 57)
      FE0DW00.FE0DW-END-CC = 19;
    else
      FE0DW00.FE0DW-END-CC = 20;
    end
    if (FE0DW00.FE0DW-END-MO > FE0DW00.FE0DW-GRTST-END-MO)
      FE0DW00.FE0DW-GRTST-END-MO = FE0DW00.FE0DW-END-MO;
    end
   /* IF FE0DW00.FE0DW-SESN = 'SP';*/
   /* IF FE0DW00.FE0DW-YR = 00;*/
   /* MOVE 99 TO FE0DW00.FE0DW-YR;*/
   /* ELSE;*/
   /* MOVE FE0DW00.FE0DW-YR TO FE0DW00.FE0DW-TEMP-YR;*/
   /* FE0DW00.FE0DW-TEMP-YR = FE0DW00.FE0DW-TEMP-YR - 1;*/
   /* MOVE FE0DW00.FE0DW-TEMP-YR TO FE0DW00.FE0DW-YR;*/
   /* END;*/
   /* END;*/
    FE0DW00.FE0DW-BEG-YY = FE0DW00.FE0DW-YR;
    if (FE0DW00.FE0DW-BEG-YY > 57)
      FE0DW00.FE0DW-BEG-CC = 19;
    else
      FE0DW00.FE0DW-BEG-CC = 20;
    end
    if (FE0DW00.FE0DW-BEG-MO < FE0DW00.FE0DW-LEAST-BEG-MO)
      FE0DW00.FE0DW-LEAST-BEG-MO = FE0DW00.FE0DW-BEG-MO;
    end
  end
  ;
  if (FE0DW00.FE0DW-LEAST-BEG-MO < FE0DW00.FE0DW-BUY-CYM)
    if (FE0DW00.FE0DW-END-MO < FE0DW00.FE0DW-BUY-CYM)
      FFWREC.XXXMODID = "510";
      converseLib.validationFailed(540);
      return;
    else
      FE0DW00.FE0DW-LEAST-BEG-MO = FE0DW00.FE0DW-BUY-CYM;
    end
  end
  ;
  if (FE0DW00.FE0DW-BEG-MO > FE0DW00.FE0DW-GRTST-END-MO)
    FFWREC.XXXMODID = "510";
    converseLib.validationFailed(542);
  end
end // end FE0DS-VAL-SEASON

// Get Line name from XPLTBL
Function FE0DS001()
   /* ------------------------------------------------------------*/
   /* If line code was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0DM001.XPLCD > " ") /* line code entered*/
    if (FE0DM001.XPLCD == "*") /* line code wildcarded*/
      FE0DM001.XPLABRV = "*ALL*"; /* Abbreviation*/
    else
      if (FE0DM001.XPLCD in XPLTBL.XPLCD /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FE0DM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/
        FE0DM001.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        set FE0DM001.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Indicate missing or invalid*/
      end
    end
  else
    FE0DM001.XPLABRV = " "; /* Abbreviation*/
  end
end // end FE0DS001

//*** RECORD=FE0DW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0DW00 type basicRecord
  10 FE0DWSWF FE0DWSWF ; 
  10 FE0DW-DATE-ENTERED FE0DW-DATE-ENTERED ; 
  10 FE0DW-SESN-ENTERED FE0DW-SESN-ENTERED ; 
  10 FE0DWSWZ FE0DWSWZ ; 
  10 FE0DWECF FE0DWECF ; 
  10 FE0DWCNT FE0DWCNT ; 
  10 FE0DWIXM FE0DWIXM ; 
  10 FFABEGMO FFABEGMO ; 
  10 FFQMBYMO FFQMBYMO ; 
  10 FF1FUTDT FF1FUTDT ; 
  10 FE0DWBYM FE0DWBYM ; 
  10 XWSCD XWSCD ; 
  10 FE0DWFPF FE0DWFPF ; 
  10 FE0DSNRN FE0DSNRN ; 
  10 FE0DW-RNG-MSG FE0DW-RNG-MSG ; 
    15 FE0DW-MSG-PART-1 FE0DW-MSG-PART-1 ; 
    15 FE0DW-MSG-BEG-MO FE0DW-MSG-BEG-MO ; 
    15 FE0DW-MSG-PART-2 FE0DW-MSG-PART-2 ; 
    15 FE0DW-MSG-END-MO FE0DW-MSG-END-MO ; 
    15 FE0DW-MSG-PART-3 FE0DW-MSG-PART-3 ; 
  10 FE0DW-BUY-DT FE0DW-BUY-DT ; 
    15 * num(1) ; 
    15 FE0DW-BUY-CYM FE0DW-BUY-CYM ; 
      20 FE0DW-BUY-CC FE0DW-BUY-CC ; 
      20 FE0DW-BUY-YY FE0DW-BUY-YY ; 
      20 FE0DW-BUY-MM FE0DW-BUY-MM ; 
    15 FE0DW-BUY-DD FE0DW-BUY-DD ; 
  10 FE0DW-TEMP-YR FE0DW-TEMP-YR ; 
  10 FE0DW-SESN-YR FE0DW-SESN-YR ; 
    15 FE0DW-SESN FE0DW-SESN ; 
    15 FE0DW-YR FE0DW-YR ; 
  10 FE0DW-BEG-MO FE0DW-BEG-MO ; 
    15 FE0DW-BEG-CC FE0DW-BEG-CC ; 
    15 FE0DW-BEG-YY FE0DW-BEG-YY ; 
    15 FE0DW-BEG-MM FE0DW-BEG-MM ; 
  10 FE0DW-LEAST-BEG-MO FE0DW-LEAST-BEG-MO ; 
    15 FE0DW-LEAST-BEG-CC FE0DW-LEAST-BEG-CC ; 
    15 FE0DW-LEAST-BEG-YY FE0DW-LEAST-BEG-YY ; 
    15 FE0DW-LEAST-BEG-MM FE0DW-LEAST-BEG-MM ; 
  10 FE0DW-END-MO FE0DW-END-MO ; 
    15 FE0DW-END-CC FE0DW-END-CC ; 
    15 FE0DW-END-YY FE0DW-END-YY ; 
    15 FE0DW-END-MM FE0DW-END-MM ; 
  10 FE0DW-GRTST-END-MO FE0DW-GRTST-END-MO ; 
    15 FE0DW-GRTST-END-CC FE0DW-GRTST-END-CC ; 
    15 FE0DW-GRTST-END-YY FE0DW-GRTST-END-YY ; 
    15 FE0DW-GRTST-END-MM FE0DW-GRTST-END-MM ; 
end // end FE0DW00

//*** RECORD=FE0DW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FE0DW01 type basicRecord
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 FFZBYYMM FFZBYYMM ; 
  10 FFZEYYMM FFZEYYMM ; 
  10 FE0DSES1 FE0DSES1 ; 
  10 FE0DSES2 FE0DSES2 ; 
  10 FE0DSES3 FE0DSES3 ; 
  10 FE0DSES4 FE0DSES4 ; 
  10 FE0DCRYF FE0DCRYF ; 
  10 FE0DSPLF FE0DSPLF ; 
end // end FE0DW01

//*** RECORD=FE0DW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0DW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 FE0DSES1 FE0DSES1 ; 
    15 FE0DSES2 FE0DSES2 ; 
    15 FE0DSES3 FE0DSES3 ; 
    15 FE0DSES4 FE0DSES4 ; 
    15 FFZBEGMO FFZBEGMO ; 
    15 FFZENDMO FFZENDMO ; 
    15 FE0DCRYF FE0DCRYF ; 
    15 FE0DSPLF FE0DSPLF ; 
    15 FE0DSNRN FE0DSNRN ; 
    15 YPGCD YPGCD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 CAUSERID CAUSERID ; 
    15 * char(35) ; 
end // end FE0DW02

//*** RECORD=WFF7060 ****
// **********  PASSING PARAMETER RECORD FOR FF7060  ***********
// 
// THIS COPY MEMBER IS USED WITH THE FF7060 SUB-PROGRAM TO
// RETURN SPECIALTY CATEGORY INFORMATION. IT ALSO RETURNS
// THE EARLIEST BEGIN MONTH AND LATEST END MONTH FOR GIVEN
// SEASONS AS DEFINED IN GPP.
// IT IS A 'NIKE BOTH' ROUTINE AND CAN BE CALLED FROM BOTH
// ONLINE AND BATCH PROGRAMS.
// 
//     KEYS REQUIRED:  FF7060-YPG-PDTYP-GRP-CD,
//                     FF7060-XPL-PROD-LN-CD,
//                     FF7060-XPC-PROD-CAT-CD,
//                     FF7060-SESN-CD1,
//                     FF7060-SESN-CD2,
//                     FF7060-SESN-CD3,
//                     FF7060-SESN-CD4
// 
//   RETURNED VALUES:  FF7060-RETURN-CODE,FF7060-SQLCODE
//                     FF7060-XSN-BEG-MO, FF7060-XSN-END-MO
//                     FF7060-SPEC-INCLUDE-FL
// 
// RETURN CODES:
// 
//        GOOD RETURN              VALUE '0'
//        BAD RETURN (-VE SQLCODE) VALUE '1'
//   THE PROGRAM WILL POST DB2 ERRORS TO THE ERRDIAG FILES
//   USING TA0020.
// 
// CALLING FORMAT:
// 
//         CALL FF7060 WFF7060 (REPLY,NONCSP,NOMAPS;
// 
// 
// MAINTENANCE LOG:
// 
// DATE     INIT       COMMENTS
// -------- ------     -------------------------------------
// 12-19-97 RKUDPI      Initial Creation.
// ************************************************************
// ***********************
Record WFF7060 type basicRecord
  3 FF7060-PARAMETERS FF7060-PARAMETERS ; 
    5 FF7060-RETURN-CODE FF7060-RETURN-CODE ; 
    5 FF7060-SQLCODE FF7060-SQLCODE ; 
    5 FF7060-ERR-MESSAGE FF7060-ERR-MESSAGE ; 
    5 FF7060-YPG-PDTYP-GRP-CD FF7060-YPG-PDTYP-GRP-CD ; 
    5 FF7060-XPL-PROD-LN-CD FF7060-XPL-PROD-LN-CD ; 
    5 FF7060-XPC-PROD-CAT-CD FF7060-XPC-PROD-CAT-CD ; 
    5 FF7060-SESN-CD1 FF7060-SESN-CD1 ; 
      10 FF7060-SESN-1 FF7060-SESN-1 ; 
      10 FF7060-YEAR-1 FF7060-YEAR-1 ; 
    5 FF7060-SESN-CD2 FF7060-SESN-CD2 ; 
      10 FF7060-SESN-2 FF7060-SESN-2 ; 
      10 FF7060-YEAR-2 FF7060-YEAR-2 ; 
    5 FF7060-SESN-CD3 FF7060-SESN-CD3 ; 
      10 FF7060-SESN-3 FF7060-SESN-3 ; 
      10 FF7060-YEAR-3 FF7060-YEAR-3 ; 
    5 FF7060-SESN-CD4 FF7060-SESN-CD4 ; 
      10 FF7060-SESN-4 FF7060-SESN-4 ; 
      10 FF7060-YEAR-4 FF7060-YEAR-4 ; 
    5 FF7060-XSN-BEG-MO FF7060-XSN-BEG-MO ; 
      10 FF7060-XSN-BEG-CC FF7060-XSN-BEG-CC ; 
      10 FF7060-XSN-BEG-YY FF7060-XSN-BEG-YY ; 
      10 FF7060-XSN-BEG-MM FF7060-XSN-BEG-MM ; 
    5 FF7060-XSN-END-MO FF7060-XSN-END-MO ; 
      10 FF7060-XSN-END-CC FF7060-XSN-END-CC ; 
      10 FF7060-XSN-END-YY FF7060-XSN-END-YY ; 
      10 FF7060-XSN-END-MM FF7060-XSN-END-MM ; 
    5 FF7060-SPEC-INCLUDE-FL FF7060-SPEC-INCLUDE-FL ; 
    5 FF7060-FILLER FF7060-FILLER ; 
end // end WFF7060

DataItem FE0DCRYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season Code 1
DataItem FE0DSES1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season Code 2
DataItem FE0DSES2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season Code 3
DataItem FE0DSES3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season Code 4
DataItem FE0DSES4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0DSNRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0DSPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0DW-BEG-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-BEG-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-BEG-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-BEG-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-BUY-CYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-BUY-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FE0DW-DATE-ENTERED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0DW-END-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-END-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-END-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-GRTST-END-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-GRTST-END-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-GRTST-END-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-GRTST-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-LEAST-BEG-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-LEAST-BEG-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-LEAST-BEG-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-LEAST-BEG-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-MSG-BEG-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-MSG-END-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-MSG-PART-1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0DW-MSG-PART-2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0DW-MSG-PART-3 char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0DW-RNG-MSG char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0DW-SESN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0DW-SESN-ENTERED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0DW-SESN-YR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0DW-TEMP-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0DW-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date range beg month
DataItem FE0DWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row counter
DataItem FE0DWCNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End cursor flag
DataItem FE0DWECF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First parm flag
DataItem FE0DWFPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season index
DataItem FE0DWIXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FE0DWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tentative buy qty zero flag
DataItem FE0DWSWZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Return Code
DataItem FF7060-ERR-MESSAGE char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF7060-FILLER char(939)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group item for Entire Rec.
DataItem FF7060-PARAMETERS char(1024)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Option Code
DataItem FF7060-RETURN-CODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem FF7060-SESN-1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem FF7060-SESN-2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem FF7060-SESN-3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem FF7060-SESN-4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem FF7060-SESN-CD1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem FF7060-SESN-CD2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem FF7060-SESN-CD3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem FF7060-SESN-CD4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF7060-SPEC-INCLUDE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sub-option
DataItem FF7060-SQLCODE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem FF7060-XPC-PROD-CAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem FF7060-XPL-PROD-LN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF7060-XSN-BEG-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF7060-XSN-BEG-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF7060-XSN-BEG-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF7060-XSN-BEG-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF7060-XSN-END-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF7060-XSN-END-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF7060-XSN-END-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF7060-XSN-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XDR_PROD_REG_CD
DataItem FF7060-YEAR-1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDR_PROD_REG_CD
DataItem FF7060-YEAR-2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDR_PROD_REG_CD
DataItem FF7060-YEAR-3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDR_PROD_REG_CD
DataItem FF7060-YEAR-4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Look-up keys
DataItem FF7060-YPG-PDTYP-GRP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

