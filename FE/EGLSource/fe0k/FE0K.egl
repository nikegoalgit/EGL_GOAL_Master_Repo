package fe0k;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS20;
import corpcom4.XSFFS30;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import ff.common.FF1REC;
import ff.common.FF8REC;
import ff.common.FFFREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ff.common.FFZREC;
import fg.common.FG9REC;
import sy.common.SYBSTGNB;
import sy.common.SYBSTGNM;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FE0K ****
// This application allows a user to inquire the monthly
// production forecast by style group for a given range of
// months.  The range can be up to twelve months with the first
// month equal to or greater than the buy month.  The inquiries
// may be made by type group, category, and division group.
// 
// All the quantities on the screen have been rounded to the
// nearest hundred and are in thousands.
// 
// The user may use appropriate attention key to scroll the
// screen backward, forward, left and right.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the screen.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// FF#324   08/31/92  KSTOKK  New application.
//          01/12/94  JJUCH   Fixed duplicate stygrp problem
//                            when same stygrp has different
//                            short name.
// FF175    12/12/96  DSMITH  Change the date range fill
//                            character to '0'.
//                            Also corrected fe0k125 & fe0ks33
//                            to increment century instead of
//                            year when year=99.
// *********************
Program FE0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0KW00 FE0KW00; // record
  FE0KW01 FE0KW01; // record
  FE0KW02 FE0KW02; // record
  FE0KW03 FE0KW03; // record
  FF1REC FF1REC; // record
  FF8REC FF8REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG9REC FG9REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FE0KM.FE0KM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FE0KM001 initial; /* M001 input/output*/
    set FE0KW00 empty; /* Working storage*/
    set FE0KW01 empty; /* M001 display storage*/
    set FE0KW02 empty; /* M001 temporary storage*/
    set FE0KW03 empty; /* M001 totals display storage*/
    set FFFREC empty; /* Special function parameters*/
    set FFXREC empty; /* Translation subroutine record*/
    set FFZREC empty; /* Range editing subroutine record*/
    set FF1REC empty; /* FF system control table record*/
    set FF8REC empty; /* Month master by style group record*/
    set FG9REC empty; /* FF product history record*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set YSMREC empty; /* Summary codes lists record*/
    set XPCREC empty; /* Category codes table record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Pop-up window record*/
    ;
    FE0KW00.XXXTSLEN = 2027; /* temp storage length*/
    ;
    FE0KW00.FE0KW-SWR = "N"; /* Request for data switch*/
    FE0KW00.FE0KW-SWF = "Y"; /* format screen data switch*/
    FE0KW00.FE0KW-NEXT = "N"; /* Next season flag*/
    move "N" to FE0KW00.FE0KW-PMON[1] for all; /* Print remaining month flag*/
    FE0KW00.FE0KW-SWD = "1"; /* map switch*/
    FE0KW00.FE0KW-SIX = 1; /* save index*/
    FE0KW00.FE0KW-SNX = 1; /* season index*/
    FE0KW00.FE0KW-PGX = 1; /* page index*/
    FE0KW00.XXXTSPAG = 1; /* page number*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.FFWENDM1 = 0; /* Clear season end month 1*/
    FFWREC.FFWENDM2 = 0; /* Clear season end month 2*/
    FFWREC.FFWENDM3 = 0; /* Clear season end month 3*/
    FFWREC.FFWENDM4 = 0; /* Clear season end month 4*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " ")
      FE0KW00.FE0KW-SWR = "Y"; /* Set data request flag*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0K-000; /* Converse the main process*/
    ;
    FE0K-000: FE0K-000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0K-001; /* Converse the main process*/
    ;
    FE0K-001: FE0K-001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0K-001; /* converse the main process*/
    ;
  end // end main
end // end FE0K

// One-time validation process
Function FE0K-000()
   /* ------------------------------------------------------------*/
   /* Validate begin and end dates if request for data switch*/
   /* has been set to yes*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KW00.FE0KW-SWR != "Y")
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate beginning yymm of date range*/
   /* ------------------------------------------------------------*/
  ;
  FE0K-125(); /* Calculate the buy month*/
  ;
   /* reformat map begin date*/
  ;
  FE0KW00.FE0KW-WDT1 = 0;
  FE0KW00.FE0KW-WDT1 = FFWREC.FFABEGMO;
  if (FE0KW00.FE0KW-WYY1 > 50)
    FE0KW00.FE0KW-WCC1 = 19;
  else
    FE0KW00.FE0KW-WCC1 = 20;
  end
  ;
  if (FE0KW00.FE0KW-WCY1 > 0 /* Begin month entered*/
   && FE0KW00.FE0KW-WCY1 < FE0KW00.FE0KW-BYD) /* Less*/
    converseLib.validationFailed(151); /* Out of range*/
    FFWREC.XXXMODID = "000";
    FE0KM001.FE0KM-BRG = FFWREC.FFABEGMO;
    set FE0KM001.FE0KM-BRG cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify begin and end dates passed using xsffs30*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  FFZREC.FFZSRANG = "N"; /* Not invoked by short-range appl*/
  FFZREC.FFZCHK12 = "Y"; /* Range limited to 12 months*/
  FFZREC.FFZBEGMO = FFWREC.FFABEGMO; /* Range begin month*/
  FFZREC.FFZENDMO = FFWREC.FFAENDMO; /* Range end month*/
  ;
  XSFFS30();
  ;
  if (FFZREC.FFZENDRC == "1")
    set FE0KM001.FE0KM-ERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "000";
  else
    if (FFZREC.FFZENDRC == "2")
      set FE0KM001.FE0KM-ERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "000";
    else
      if (FFZREC.FFZENDRC == "3")
        set FE0KM001.FE0KM-ERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "000";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FE0KM001.FE0KM-BRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "000";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FE0KM001.FE0KM-BRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "000";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FE0KM001.FE0KM-BRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "000";
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if date range is in error load default field values*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    FE0KM001.YPGCD = FFWREC.YPGCD;
    FE0KM001.YPGABRV = FFWREC.YPGABRV;
    FE0KM001.XPCCD = FFWREC.XPCCD;
    FE0KM001.XPCABRV = FFWREC.XPCABRV;
    FE0KM001.YSMXDV = FFWREC.YSMXDV;
    FE0KM001.YSMSMDSC = FFWREC.YSMSMDSC;
    FE0KW00.FE0KW-PIX = 1;
  end
  ;
  ;
end // end FE0K-000

// Prdctn fcst style group inq
Function FE0K-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0K-100(); /* Obtain the data to display*/
  ;
  FE0K-200(); /* Format and display the map*/
  ;
  FE0K-300(); /* Check attention identifier*/
  ;
  FE0K-400(); /* Reset fields to normal intensity*/
  ;
  FE0K-500(); /* Verify the entered data*/
  ;
  FE0K-600(); /* Process valid input request*/
  ;
  ;
end // end FE0K-001

// Obtain data for display
Function FE0K-100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KW00.FE0KW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* -------------------------------------------------------------*/
   /* Calculate the no. of season and no of months in each season.*/
   /* -------------------------------------------------------------*/
  ;
  FE0KS-33();
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FE0KS-01(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01, calculate*/
   /* current date minus one month.*/
   /* ------------------------------------------------------------*/
   /* ------------------------*/
   /* Get current date*/
   /* ------------------------*/
  ;
  XX0XS01();
  ;
  FE0KW00.FE0KW-CWD = XX0XW01.XX0XWDAT; /* current work dt ccyymmdd*/
  FE0KW00.FE0KW-CRD = XX0XW01.XX0XWCYM; /* current date ccyymm*/
  FE0KW00.FE0KW-WDT = XX0XW01.XX0XWCYM; /* work date*/
  ;
  if (FE0KW00.FE0KW-WMM == 1)
    FE0KW00.FE0KW-WMM = 12;
    if (FE0KW00.FE0KW-WYY == 00)
      FE0KW00.FE0KW-WYY = 99;
      FE0KW00.FE0KW-WCC = FE0KW00.FE0KW-WCC - 1;
    else
      FE0KW00.FE0KW-WYY = FE0KW00.FE0KW-WYY - 1;
    end
  else
    FE0KW00.FE0KW-WMM = FE0KW00.FE0KW-WMM - 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the list of style groups from the DFCAST.VPFHST01*/
   /* table.*/
   /* ------------------------------------------------------------*/
  ;
  FE0KW00.FE0KW-IDX = 1; /* init index*/
  FE0KW00.FE0KW-TIX = FFZREC.FFZNUMMO + 1; /* load total index*/
  ;
   /* ----------------------------------------------------------*/
   /* Process all style groups.*/
   /* ----------------------------------------------------------*/
  ;
  FE0K-120(); /* Select VPFHST01 style groups - 'S2'*/
  ;
  FE0KW00.FE0KW-CR2 = "N"; /* Initialize end of cursor switch*/
  ;
  FE0K-121(); /* Fetch next row in VPFHST01 - style groups - 'N2'*/
  if (FE0KW00.FE0KW-CR2 == "Y") /* Until end of cursor*/
    return;
  end
  ;
  while (FE0KW00.FE0KW-CR2 == "N") /* Until end of cursor PFHST*/
    ;
    if (FG9REC.SYBSTGNB != FE0KW00.FE0KW-SYBSTGNB) /* Style group change*/
      ;
      FE0KW00.FE0KW-SYBSTGNB = FG9REC.SYBSTGNB;
      FE0KW02.SYBSTGNB[FE0KW-IDX] = FG9REC.SYBSTGNB; /* style grp nbr*/
      FE0KW02.SYBSTGNM[FE0KW-IDX] = FG9REC.SYBSTGNM; /* style grp name*/
      FFWREC.SYBSTGNB = FG9REC.SYBSTGNB; /* style group nbr*/
      ;
        /* ------------------------------------------------------------*/
         /* For each style group, obtain the summed master forecast*/
         /* from the VMSGRP01 table.*/
        /* ------------------------------------------------------------*/
      ;
      FE0KW00.FE0KW-UTQ = 0; /* init w/s product range total*/
      FE0KW00.FE0KW-PIX = 1; /* init process index*/
      ;
      while (FE0KW00.FE0KW-PIX <= FFZREC.FFZNUMMO) /* While LE no mos in range*/
        ;
        FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FE0KW-PIX];
        FFFREC.FFFENDMO = FFZREC.FFZINDMO[FE0KW-PIX];
        ;
        if (FFWREC.YSMXDV == "*") /* div code wildcarded*/
          ;
          /* Process each division separately as required by IO3730*/
          ;
          /* division '10'*/
          ;
          FE0KW00.FE0KW-UHS = 0; /* init sales*/
          set FF8REC empty; /* init PFHST record*/
          ;
          FF8REC.YSMXDV = "10"; /* div code '10'*/
          FE0KS-03(); /* select sum SGRP 'SS'*/
          FE0KW00.FE0KW-UHS = FE0KW00.FE0KW-UHS + FF8REC.FF6PRFCT; /* '10'*/
          ;
          /* division '20'*/
          ;
          set FF8REC empty; /* init PFHST record*/
          ;
          FF8REC.YSMXDV = "20"; /* div code '20'*/
          FE0KS-03(); /* select sum SGRP 'SS'*/
          FE0KW00.FE0KW-UHS = FE0KW00.FE0KW-UHS + FF8REC.FF6PRFCT; /* '20'*/
          ;
        else /* div code specified*/
          ;
          FE0KW00.FE0KW-UHS = 0; /* init sales*/
          set FF8REC empty; /* init PFHST record*/
          ;
          FF8REC.YSMXDV = FFWREC.YSMXDV; /* use specific div code*/
          FE0KS-03(); /* select sum SGRP 'SS'*/
          FE0KW00.FE0KW-UHS = FE0KW00.FE0KW-UHS + FF8REC.FF6PRFCT;
        end
        ;
          /* ---------------------------------------------------*/
           /* load style group detail sales qtys*/
          /* ---------------------------------------------------*/
        ;
        FE0KW00.FE0KW-UQT[FE0KW-PIX] = FE0KW00.FE0KW-UHS;
        FFXREC.FFXNUMB = FE0KW00.FE0KW-UHS;
        XSFFS10();
        FE0KW00.FE0KW-QTY[FE0KW-PIX] = FFXREC.FFXCHAR;
        ;
          /* ---------------------------------------------------*/
           /* accumulate style group sales qty total*/
          /* ---------------------------------------------------*/
        ;
        FE0KW00.FE0KW-UTQ = FE0KW00.FE0KW-UHS + FE0KW00.FE0KW-UTQ;
        ;
          /* ---------------------------------------------------------*/
           /* accumulate monthly sales qty totals (column totals)*/
          /* ---------------------------------------------------------*/
        ;
        FE0KW00.FE0KW-NM1 = FE0KW03.FE0KW-UMT[FE0KW-PIX];
        FE0KW03.FE0KW-UMT[FE0KW-PIX] = FE0KW00.FE0KW-UHS + FE0KW00.FE0KW-NM1;
        FFXREC.FFXNUMB = FE0KW03.FE0KW-UMT[FE0KW-PIX];
        XSFFS10();
        FE0KW03.FE0KW-MTQ[FE0KW-PIX] = FFXREC.FFXCHAR;
        ;
        FE0KW00.FE0KW-PIX = FE0KW00.FE0KW-PIX + 1;
        ;
      end
      ;
        /* ------------------------------------------------------------*/
         /* load style group total sales qty (last entry in t/s)*/
        /* ------------------------------------------------------------*/
      ;
      FE0KW00.FE0KW-UQT[FE0KW-TIX] = FE0KW00.FE0KW-UTQ;
      FFXREC.FFXNUMB = FE0KW00.FE0KW-UTQ;
      XSFFS10();
      FE0KW00.FE0KW-QTY[FE0KW-TIX] = FFXREC.FFXCHAR;
      ;
        /* ------------------------------------------------------------*/
         /* load temporary storage record with style group detail*/
         /* and total qtys*/
        /* ------------------------------------------------------------*/
      ;
      FE0KW02.FE0KW-QTS[FE0KW-IDX] = FE0KW00.FE0KW-LQT;
      ;
        /* ------------------------------------------------------------*/
         /* accumulate monthly sales qty total (last entry in w/s)*/
        /* ------------------------------------------------------------*/
      ;
      FE0KW00.FE0KW-NM1 = FE0KW03.FE0KW-UMT[FE0KW-TIX];
      FE0KW03.FE0KW-UMT[FE0KW-TIX] = FE0KW00.FE0KW-NM1 + FE0KW00.FE0KW-UTQ;
      FFXREC.FFXNUMB = FE0KW03.FE0KW-UMT[FE0KW-TIX];
      XSFFS10();
      FE0KW03.FE0KW-MTQ[FE0KW-TIX] = FFXREC.FFXCHAR;
      ;
      FE0KS-06(); /* save the style group*/
      ;
    end
    ;
    FE0K-121(); /* Fetch next row in VPFHST01 - 'S2'*/
    ;
  end /* End of style groups*/
  ;
  FFWREC.SYBSTGNB = "      "; /* Clear the style group field*/
  ;
  FE0K-122(); /* Close VPFHST01 - 'C2'*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KW00.FE0KW-IDX > 1) /* Page was formatted*/
    FE0KW02.FE0KW-NLD = FE0KW00.FE0KW-IDX - 1;
    FE0K-160(); /* Add page to temp storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate monthly percents (column percents)*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KW03.FE0KW-UMT[FE0KW-TIX] != 0)
    ;
    FE0KW00.FE0KW-NM1 = FE0KW03.FE0KW-UMT[FE0KW-TIX];
    FE0KW00.FE0KW-IDX = 1;
    while (FE0KW00.FE0KW-IDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/
      ;
      FE0KW00.FE0KW-NM2 = FE0KW03.FE0KW-UMT[FE0KW-IDX] * 100;
      FE0KW03.FE0KW-MPT[FE0KW-IDX] = mathLib.round(FE0KW00.FE0KW-NM2 /       FE0KW00.FE0KW-NM1, -mathLib.decimals(FE0KW03.FE0KW-MPT[FE0KW-IDX]));
      ;
      FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-IDX + 1;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FE0KW00.XXXTSPAG = 1; /* Desired page number*/
  FE0KW00.FE0KW-PGX = 1; /* Page index*/
  FE0KW00.FE0KW-PAGP[1] = 1; /* Starting point of the page*/
  FE0KW00.FE0KW-PAGS[1] = 1; /* Season of the page*/
  FE0KW00.FE0KW-SWR = "N"; /* Request for data switch*/
  FE0KW01.CACHGFL = "Y"; /* data is available for change*/
  ;
end // end FE0K-100

// Sel and open VPFHST01 - 'S2'
Function FE0K-120()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FG9REC empty; /* Clear row storage area*/
  ;
  FG9REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FG9REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FG9REC.YSMXDV = FFWREC.YSMXDV; /* Div group code*/
  ;
  try
    call "IO5430" ("S2", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0K-120

// Fetch VPFHST01 - 'N2'
Function FE0K-121()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5430" ("N2", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FE0KW00.FE0KW-CR2 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "121"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0K-121

// Close VPFHST01 cursor - 'C2'
Function FE0K-122()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5430" ("C2", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "122"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0K-122

// Calculate the buy month
Function FE0K-125()
   /* ------------------------------------------------------------*/
     /* Buy month calculation, stored in FE0KW00.FE0KW-BYD*/
   /* ------------------------------------------------------------*/
  ;
  FE0K-126(); /* Get futures cutoff date*/
  ;
  FE0KW00.FE0KW-WDT1-FOR-BUY-MO = FF1REC.FF1FUTDT;
  ;
  FE0KW00.FE0KW-WMM1-FOR-BUY-MO = FE0KW00.FE0KW-WMM1-FOR-BUY-MO + 5;
  if (FE0KW00.FE0KW-WMM1-FOR-BUY-MO > 12)
    FE0KW00.FE0KW-WMM1-FOR-BUY-MO = FE0KW00.FE0KW-WMM1-FOR-BUY-MO - 12;
    if (FE0KW00.FE0KW-WYY1-FOR-BUY-MO == 99)
  /* dsmith*/
      FE0KW00.FE0KW-WCC1-FOR-BUY-MO = FE0KW00.FE0KW-WCC1-FOR-BUY-MO + 1;
  /* FE0KW00.FE0KW-WYY1-FOR-BUY-MO = FE0KW00.FE0KW-WYY1-FOR-BUY-MO + 1;*/
  /* dsmith*/
      FE0KW00.FE0KW-WYY1-FOR-BUY-MO = 00;
    else
      FE0KW00.FE0KW-WYY1-FOR-BUY-MO = FE0KW00.FE0KW-WYY1-FOR-BUY-MO + 1;
    end
  end
  ;
  FE0KW00.FE0KW-BYD = FE0KW00.FE0KW-WCY1-FOR-BUY-MO; /* buy month*/
  ;
end // end FE0K-125

// Get futures cutoff date
Function FE0K-126()
  ;
  set FF1REC empty; /* Clear up the storage row*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "126"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0K-126

// Add temporary storage
Function FE0K-160()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
   /*  */
  FE0KW02.XXXTSLEN = FE0KW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FE0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FE0KW02 empty; /* M001 display storage*/
    ;
    FE0KW00.FE0KW-IDX = 1; /* Display line index*/
    ;
    FE0KW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0K-160

// Format and converse the map
Function FE0K-200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If no errors format map*/
    ;
    set FE0KM001 initial; /* M001 input/ouput area*/
    ;
    /* ------------------------------------------------------------*/
     /* Format FE0KM001 using passed data*/
    /* ------------------------------------------------------------*/
    ;
    FE0KW00.FE0KW-WDT = FFWREC.FFABEGMO; /* w/s date field*/
    FE0KM001.FE0KM-BRG = FE0KW00.FE0KW-WYM; /* begin month range*/
    FE0KW00.FE0KW-WDT = FFWREC.FFAENDMO; /* w/s date field*/
    FE0KM001.FE0KM-ERG = FE0KW00.FE0KW-WYM; /* end month range*/
    ;
    FE0KM001.YSMXDV = FFWREC.YSMXDV; /* sum div grp code*/
    FE0KM001.YSMSMDSC = FFWREC.YSMSMDSC; /* sum div grp abrv desc*/
    ;
    FE0KM001.YPGCD = FFWREC.YPGCD; /* product type group*/
    FE0KM001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/
    ;
    FE0KM001.XPCCD = FFWREC.XPCCD; /* product category code*/
    FE0KM001.XPCABRV = FFWREC.XPCABRV; /* product category abrv*/
    ;
    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0KW00.FE0KW-SWF == "Y") /* map must be formatted*/
      FE0K-210(); /* Format the data on the map*/
    end
    ;
  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KW00.TA5TSQIX > 0)
    set FE0KM001.XXXLITPG skip;
    FE0KM001.XXXTSPAG = FE0KW00.XXXTSPAG; /* Current page*/
    set FE0KM001.XXXLITOF skip;
    FE0KM001.TA5TSQIX = FE0KW00.TA5TSQIX; /* max pages*/
  end
  ;
  FE0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FE0KM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FE0KM001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FE0KM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FE0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0KM001.CAITEM; /* Application data*/
  ;
  ;
end // end FE0K-200

// Format the display data
Function FE0K-210()
  ;
  FE0KW00.FE0KW-SWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KW01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings yymm*/
   /* ------------------------------------------------------------*/
  set FE0KM001.FE0KM-SH1 skip;
  set FE0KM001.FE0KM-SH2 skip;
  ;
  FE0KW00.FE0KW-LIX = 1;
  FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-PAGP[FE0KW-PGX];
  ;
  if (FE0KW00.FE0KW-PMON[FE0KW-PGX] == "Y") /* print remaining month check*/
    FE0K-211();
  else
    FE0K-212();
    FE0K-213();
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain style grp sale qtys from temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FE0KS-04(); /* read temporary storage*/
  ;
  FE0KW00.FE0KW-PIX = 1;
  while (FE0KW00.FE0KW-PIX <= FE0KW02.FE0KW-NLD) /* process temp storage*/
    ;
    FE0KM001.FE0KM-SDS[FE0KW-PIX] = FE0KW02.SYBSTGNM[FE0KW-PIX];
    ;
    FE0KW00.FE0KW-LQT = FE0KW02.FE0KW-QTS[FE0KW-PIX];
    ;
    /* ----------------------------------------------------------*/
     /* Reformat style grp quantities using working storage*/
     /* and calculate style grp subtotal*/
    /* ----------------------------------------------------------*/
    ;
    FE0KW00.FE0KW-LIX = 1; /* load index*/
    move 0 to FE0KW00.FE0KW-UST[1] for all; /* product line subtotal*/
    FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-PAGP[FE0KW-PGX];
    move " " to FE0KW00.FE0KW-WQT[1] for all; /* clear w/s display table*/
    ;
    if (FE0KW00.FE0KW-PMON[FE0KW-PGX] == "Y") /* print remaining month check*/
      FE0K-214();
    else
      FE0K-215();
      FE0K-216();
    end
    ;
    /* ----------------------------------------------------------*/
     /* Load style grp quantities to M001*/
    /* ----------------------------------------------------------*/
    ;
    FE0KM001.FE0KM-Q01[FE0KW-PIX] = FE0KW00.FE0KW-WQT[1];
    FE0KM001.FE0KM-Q02[FE0KW-PIX] = FE0KW00.FE0KW-WQT[2];
    FE0KM001.FE0KM-Q03[FE0KW-PIX] = FE0KW00.FE0KW-WQT[3];
    FE0KM001.FE0KM-Q04[FE0KW-PIX] = FE0KW00.FE0KW-WQT[4];
    FE0KM001.FE0KM-Q05[FE0KW-PIX] = FE0KW00.FE0KW-WQT[5];
    FE0KM001.FE0KM-Q06[FE0KW-PIX] = FE0KW00.FE0KW-WQT[6];
    FE0KM001.FE0KM-Q07[FE0KW-PIX] = FE0KW00.FE0KW-WQT[7];
    FE0KM001.FE0KM-Q08[FE0KW-PIX] = FE0KW00.FE0KW-WQT[8];
    FE0KM001.FE0KM-Q09[FE0KW-PIX] = FE0KW00.FE0KW-WQT[9];
    FE0KM001.FE0KM-Q10[FE0KW-PIX] = FE0KW00.FE0KW-WQT[10];
    ;
    FE0KW00.FE0KW-PIX = FE0KW00.FE0KW-PIX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Load style grp line monthly totals*/
   /* ------------------------------------------------------------*/
  ;
  FE0KM001.FE0KM-SDS[FE0KW-PIX] = "TOTAL QTY   ";
  ;
  FE0KW00.FE0KW-UMT = 0;
  move " " to FE0KW00.FE0KW-WQT[1] for all; /* clear w/s display table*/
  FE0KW00.FE0KW-LIX = 1; /* load index*/
  FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-PAGP[FE0KW-PGX];
  ;
  if (FE0KW00.FE0KW-PMON[FE0KW-PGX] == "Y") /* print remaining month check*/
    FE0K-217();
  else
    FE0K-218();
    FE0K-219();
  end
  ;
   /* ----------------------------------------------------------*/
   /* load style grp monthly total quantities to m001*/
   /* ----------------------------------------------------------*/
  ;
  FE0KM001.FE0KM-Q01[FE0KW-PIX] = FE0KW00.FE0KW-WQT[1];
  FE0KM001.FE0KM-Q02[FE0KW-PIX] = FE0KW00.FE0KW-WQT[2];
  FE0KM001.FE0KM-Q03[FE0KW-PIX] = FE0KW00.FE0KW-WQT[3];
  FE0KM001.FE0KM-Q04[FE0KW-PIX] = FE0KW00.FE0KW-WQT[4];
  FE0KM001.FE0KM-Q05[FE0KW-PIX] = FE0KW00.FE0KW-WQT[5];
  FE0KM001.FE0KM-Q06[FE0KW-PIX] = FE0KW00.FE0KW-WQT[6];
  FE0KM001.FE0KM-Q07[FE0KW-PIX] = FE0KW00.FE0KW-WQT[7];
  FE0KM001.FE0KM-Q08[FE0KW-PIX] = FE0KW00.FE0KW-WQT[8];
  FE0KM001.FE0KM-Q09[FE0KW-PIX] = FE0KW00.FE0KW-WQT[9];
  FE0KM001.FE0KM-Q10[FE0KW-PIX] = FE0KW00.FE0KW-WQT[10];
  ;
  FE0KW00.FE0KW-PIX = FE0KW00.FE0KW-PIX + 1;
  ;
   /* ------------------------------------------------------------*/
   /* Load style grp monthly percents*/
   /* ------------------------------------------------------------*/
  ;
  FE0KM001.FE0KM-SDS[FE0KW-PIX] = "TOTAL PCT   ";
  ;
  move " " to FE0KW00.FE0KW-WQT[1] for all; /* clear w/s display table*/
  FE0KW00.FE0KW-LIX = 1; /* load index*/
  FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-PAGP[FE0KW-PGX];
  ;
  if (FE0KW00.FE0KW-PMON[FE0KW-PGX] == "Y") /* print remaining month check*/
    FE0K-220();
  else
    FE0K-221();
    FE0K-222();
  end
  ;
   /* ----------------------------------------------------------*/
   /* Load style grp monthly total percents*/
   /* ----------------------------------------------------------*/
  ;
  FE0KM001.FE0KM-Q01[FE0KW-PIX] = FE0KW00.FE0KW-WQT[1];
  FE0KM001.FE0KM-Q02[FE0KW-PIX] = FE0KW00.FE0KW-WQT[2];
  FE0KM001.FE0KM-Q03[FE0KW-PIX] = FE0KW00.FE0KW-WQT[3];
  FE0KM001.FE0KM-Q04[FE0KW-PIX] = FE0KW00.FE0KW-WQT[4];
  FE0KM001.FE0KM-Q05[FE0KW-PIX] = FE0KW00.FE0KW-WQT[5];
  FE0KM001.FE0KM-Q06[FE0KW-PIX] = FE0KW00.FE0KW-WQT[6];
  FE0KM001.FE0KM-Q07[FE0KW-PIX] = FE0KW00.FE0KW-WQT[7];
  FE0KM001.FE0KM-Q08[FE0KW-PIX] = FE0KW00.FE0KW-WQT[8];
  FE0KM001.FE0KM-Q09[FE0KW-PIX] = FE0KW00.FE0KW-WQT[9];
  FE0KM001.FE0KM-Q10[FE0KW-PIX] = FE0KW00.FE0KW-WQT[10];
  ;
  ;
end // end FE0K-210

// Print remaining month heading
Function FE0K-211()
   /* ----------------------------------------------------------------------*/
   /* Print whatever is left from the previous page.*/
   /* (Month headings, Percent, Range total and Percent or subtotal,*/
   /* Range total and percent)*/
   /*  */
   /* load subtotal/total/percent literals*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
  FE0KW00.FE0KW-REM = FE0KW00.FE0KW-SIN[FE0KW-SNX] - 6; /* remaining mos*/
  ;
  while (FE0KW00.FE0KW-IDX <= FFZREC.FFZNUMMO /* nbr of mos loaded*/
   && FE0KW00.FE0KW-LIX <= FE0KW00.FE0KW-REM) /* nbr of mos left*/
    ;
    FE0KM001.FE0KM-HD2[FE0KW-LIX] = FFZREC.FFZIYYMM[FE0KW-IDX];
    set FE0KM001.FE0KM-HD2[FE0KW-LIX] skip;
    ;
    FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-IDX + 1; /* increment index*/
    FE0KW00.FE0KW-LIX = FE0KW00.FE0KW-LIX + 1; /* increment load index*/
    ;
  end
  ;
  FE0KS-20(); /* load heading literals*/
  ;
end // end FE0K-211

// Move the monthly heading
Function FE0K-212()
  ;
  while (FE0KW00.FE0KW-IDX <= FFZREC.FFZNUMMO /* nbr of mos loaded*/
   && FE0KW00.FE0KW-LIX <= FE0KW00.FE0KW-SIN[FE0KW-SNX]
   /* no of mos in sesn*/
   && FE0KW00.FE0KW-LIX <= 6)
    ;
    FE0KM001.FE0KM-HD2[FE0KW-LIX] = FFZREC.FFZIYYMM[FE0KW-IDX];
    set FE0KM001.FE0KM-HD2[FE0KW-LIX] skip;
    ;
    FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-IDX + 1; /* increment index*/
    FE0KW00.FE0KW-LIX = FE0KW00.FE0KW-LIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FE0K-212

// Move total and pct heading
Function FE0K-213()
   /* --------------------------------------------------------*/
   /* move the totals and pct headings*/
   /* --------------------------------------------------------*/
  ;
  if (FE0KW00.FE0KW-LIX > FE0KW00.FE0KW-SIN[FE0KW-SNX])
                                                     /* load the whole sesn*/
    ;
    FE0KS-20(); /* load heading literals*/
    ;
  end
  ;
end // end FE0K-213

// Move the remaining month
Function FE0K-214()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever is left from the previous page.*/
   /* (Month, Percent, Range total and Percent or subtotal, Range total*/
   /* percent)*/
   /*  */
   /* load subtotal/total/percent*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months, subtotal, range total and pct fields*/
   /* --------------------------------------------------------------*/
  ;
  ;
  FE0KW00.FE0KW-SIX = FE0KW00.FE0KW-IDX - 6;
  while (FE0KW00.FE0KW-SIX < FE0KW00.FE0KW-IDX)
    FE0KW00.FE0KW-UST[FE0KW-PIX] = FE0KW00.FE0KW-UQT[FE0KW-SIX] +                                 FE0KW00.FE0KW-UST[FE0KW-PIX];
    FE0KW00.FE0KW-SIX = FE0KW00.FE0KW-SIX + 1;
  end
  ;
   /* remaining mos*/
  FE0KW00.FE0KW-REM = FE0KW00.FE0KW-SIN[FE0KW-SNX] - 6;
  while (FE0KW00.FE0KW-IDX <= FFZREC.FFZNUMMO   /* nbr of mos loaded*/
   && FE0KW00.FE0KW-LIX <= FE0KW00.FE0KW-REM /* nbr of mos left*/
   && FE0KW00.FE0KW-LIX <= 6) /* right end*/
    ;
    FE0KW00.FE0KW-WQT[FE0KW-LIX] = FE0KW00.FE0KW-QTY[FE0KW-IDX];
    ;
    FE0KW00.FE0KW-UST[FE0KW-PIX] = FE0KW00.FE0KW-UQT[FE0KW-IDX] +                                FE0KW00.FE0KW-UST[FE0KW-PIX];
    ;
    FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-IDX + 1; /* increment work index*/
    FE0KW00.FE0KW-LIX = FE0KW00.FE0KW-LIX + 1; /* increment load index*/
    ;
  end
  ;
  FE0KS-30(); /* subtotal and range total*/
  ;
end // end FE0K-214

// Move the monthly qty
Function FE0K-215()
  while (FE0KW00.FE0KW-IDX <= FFZREC.FFZNUMMO /* nbr mos loaded*/
   && FE0KW00.FE0KW-LIX <= FE0KW00.FE0KW-SIN[FE0KW-SNX]
   /* no of mo in sesn*/
   && FE0KW00.FE0KW-LIX <= 6)
    ;
    FE0KW00.FE0KW-WQT[FE0KW-LIX] = FE0KW00.FE0KW-QTY[FE0KW-IDX];
    ;
    FE0KW00.FE0KW-UST[FE0KW-PIX] = FE0KW00.FE0KW-UQT[FE0KW-IDX] +                                FE0KW00.FE0KW-UST[FE0KW-PIX];
    ;
    FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-IDX + 1; /* increment save index*/
    FE0KW00.FE0KW-LIX = FE0KW00.FE0KW-LIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FE0K-215

// Move the total line
Function FE0K-216()
  if (FE0KW00.FE0KW-LIX > FE0KW00.FE0KW-SIN[FE0KW-SNX])
                                                     /* load the whole sesn*/
    ;
    FE0KS-30(); /* move subtotal, total and pcts*/
    ;
  end
end // end FE0K-216

// Move the remaining month total
Function FE0K-217()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever is left from the previous page.*/
   /* (Month, Percent, Range total and Percent or subtotal, Range total*/
   /* percent)*/
   /*  */
   /* load subtotal/total/percent for the total line*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months, subtotal, range total and pct fields*/
   /* --------------------------------------------------------------*/
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* since pf10 is going backward to the 1st page and subtotal*/
   /* will still be 0. So if pf10 and the 2nd (right) page is*/
   /* reached, then the calculation of subtotal in the 1st*/
   /* page is necessary.*/
   /* ---------------------------------------------------------------*/
  ;
  FE0KW00.FE0KW-SIX = FE0KW00.FE0KW-IDX - 6;
  while (FE0KW00.FE0KW-SIX < FE0KW00.FE0KW-IDX)
    FE0KW00.FE0KW-UMT = FE0KW03.FE0KW-UMT[FE0KW-SIX] +                      FE0KW00.FE0KW-UMT;
    FE0KW00.FE0KW-SIX = FE0KW00.FE0KW-SIX + 1;
  end
  ;
  FE0KW00.FE0KW-REM = FE0KW00.FE0KW-SIN[FE0KW-SNX] - 6; /* remaining mos*/
  ;
  while (FE0KW00.FE0KW-IDX <= FFZREC.FFZNUMMO   /* nbr of mos loaded*/
   && FE0KW00.FE0KW-LIX <= FE0KW00.FE0KW-REM /* nbr of mos left*/
   && FE0KW00.FE0KW-LIX <= 6) /* right end*/
    ;
    FE0KW00.FE0KW-WQT[FE0KW-LIX] = FE0KW03.FE0KW-MTQ[FE0KW-IDX];
    FE0KW00.FE0KW-UMT = FE0KW03.FE0KW-UMT[FE0KW-IDX] + FE0KW00.FE0KW-UMT;
    ;
    FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-IDX + 1; /* increment work index*/
    FE0KW00.FE0KW-LIX = FE0KW00.FE0KW-LIX + 1; /* increment load index*/
    ;
  end
  ;
  FE0KS-40(); /* process tots for total line*/
  ;
end // end FE0K-217

// Move the monthly total
Function FE0K-218()
  ;
  while (FE0KW00.FE0KW-IDX <= FFZREC.FFZNUMMO /* nbr mos loaded*/
   && FE0KW00.FE0KW-LIX <= FE0KW00.FE0KW-SIN[FE0KW-SNX]
   /* no of mo in sesn*/
   && FE0KW00.FE0KW-LIX <= 6)
    ;
    FE0KW00.FE0KW-WQT[FE0KW-LIX] = FE0KW03.FE0KW-MTQ[FE0KW-IDX];
    FE0KW00.FE0KW-UMT = FE0KW03.FE0KW-UMT[FE0KW-IDX] + FE0KW00.FE0KW-UMT;
    ;
    FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-IDX + 1; /* increment save index*/
    FE0KW00.FE0KW-LIX = FE0KW00.FE0KW-LIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FE0K-218

// Move subtot & tot for tot line
Function FE0K-219()
   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/
  ;
  if (FE0KW00.FE0KW-LIX > FE0KW00.FE0KW-SIN[FE0KW-SNX])
                                                     /* load the whole sesn*/
    ;
    FE0KS-40(); /* translate and load subtotal and total*/
    ;
  end
end // end FE0K-219

// Move the remaining month pct
Function FE0K-220()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Monthly percent or subtotal percent)*/
   /*  */
   /* load subtotal percent for the percent line*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months and subtotal*/
   /* --------------------------------------------------------------*/
  ;
  FE0KW00.FE0KW-REM = FE0KW00.FE0KW-SIN[FE0KW-SNX] - 6; /* remaining mos*/
  ;
  while (FE0KW00.FE0KW-IDX <= FFZREC.FFZNUMMO   /* nbr of mos loaded*/
   && FE0KW00.FE0KW-LIX <= FE0KW00.FE0KW-REM /* nbr of mos left*/
   && FE0KW00.FE0KW-LIX <= 6) /* right end*/
    ;
    if (FE0KW03.FE0KW-UMT[FE0KW-TIX] > 0)
      FE0KW00.FE0KW-NM1 = FE0KW03.FE0KW-UMT[FE0KW-IDX] * 100;
      FE0KW00.FE0KW-NPT = mathLib.round(FE0KW00.FE0KW-NM1 /                        FE0KW03.FE0KW-UMT[FE0KW-TIX], -mathLib.decimals(FE0KW00.FE0KW-NPT));
      ;
      /* ----------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* ----------------------------------------------------------*/
      ;
      if (FE0KW00.FE0KW-NPT != 0)
        FE0KW00.FE0KW-PTW = FE0KW00.FE0KW-NP1;
        FE0KW00.FE0KW-PTP = ".";
        FE0KW00.FE0KW-PTD = FE0KW00.FE0KW-NP2;
        ;
        if (FE0KW00.FE0KW-PT1 == "0")
          FE0KW00.FE0KW-PT1 = " ";
          if (FE0KW00.FE0KW-PT2 == "0")
            FE0KW00.FE0KW-PT2 = " ";
          end
        end
        ;
        FE0KW00.FE0KW-WQT[FE0KW-LIX] = FE0KW00.FE0KW-PCT;
        ;
      end
    end
    ;
    FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-IDX + 1; /* increment work index*/
    FE0KW00.FE0KW-LIX = FE0KW00.FE0KW-LIX + 1; /* increment load index*/
    ;
  end
  ;
  FE0KS-50(); /* translate and load subtotal*/
  ;
  FE0KW00.FE0KW-NEXT = "Y"; /* next season*/
  ;
end // end FE0K-220

// Move the monthly pct
Function FE0K-221()
  ;
  while (FE0KW00.FE0KW-IDX <= FFZREC.FFZNUMMO /* nbr mos loaded*/
   && FE0KW00.FE0KW-LIX <= FE0KW00.FE0KW-SIN[FE0KW-SNX]
   /* no of mo in sesn*/
   && FE0KW00.FE0KW-LIX <= 6)
    ;
    /* ----------------------------------------------------------*/
     /* calculate/load style grp monthly percents*/
    /* ----------------------------------------------------------*/
    ;
    if (FE0KW03.FE0KW-UMT[FE0KW-TIX] > 0)
      FE0KW00.FE0KW-NM1 = FE0KW03.FE0KW-UMT[FE0KW-IDX] * 100;
      FE0KW00.FE0KW-NPT = mathLib.round(FE0KW00.FE0KW-NM1 / FE0KW03.FE0KW-UMT[FE0KW-TIX], -mathLib.decimals(FE0KW00.FE0KW-NPT));
      ;
      /* ----------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* ----------------------------------------------------------*/
      ;
      if (FE0KW00.FE0KW-NPT != 0)
        FE0KW00.FE0KW-PTW = FE0KW00.FE0KW-NP1;
        FE0KW00.FE0KW-PTP = ".";
        FE0KW00.FE0KW-PTD = FE0KW00.FE0KW-NP2;
        ;
        if (FE0KW00.FE0KW-PT1 == "0")
          FE0KW00.FE0KW-PT1 = " ";
          if (FE0KW00.FE0KW-PT2 == "0")
            FE0KW00.FE0KW-PT2 = " ";
          end
        end
        ;
        FE0KW00.FE0KW-WQT[FE0KW-LIX] = FE0KW00.FE0KW-PCT;
        ;
      end
    end
    ;
    FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-IDX + 1; /* increment save index*/
    FE0KW00.FE0KW-LIX = FE0KW00.FE0KW-LIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FE0K-221

// Move the total pct
Function FE0K-222()
  ;
   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/
  ;
  if (FE0KW00.FE0KW-LIX > FE0KW00.FE0KW-SIN[FE0KW-SNX])
                                                     /* load the whole sesn*/
    ;
    FE0KS-50(); /* translate and load subtotal*/
    ;
    if (FE0KW00.FE0KW-IDX > FFZREC.FFZNUMMO) /* Reach the no of mo reqstd*/
      ;
    else
      FE0KW00.FE0KW-NEXT = "Y"; /* next season*/
    end
    ;
  else
    ;
    FE0KW00.FE0KW-SIX = FE0KW00.FE0KW-PGX + 1;
    FE0KW00.FE0KW-PMON[FE0KW-SIX] = "Y";
    ;
  end
end // end FE0K-222

// Check attention identifier
Function FE0K-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FE0KW00.FE0KW-SWF = "Y"; /* format screen m001*/
    FE0KW00.FE0KW-SWR = "N"; /* request for data*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FE0KS-01(); /* purge temp storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      FE0KW00.FE0KW-SWF = "Y"; /* format screen m001*/
      FE0KW00.FE0KW-SWR = "N"; /* request for data*/
      ;
      set FE0KM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FE0KM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FE0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FE0B"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FE0L"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FE0KW00.FE0KW-SWF = "Y"; /* format screen m001*/
    FE0KW00.FE0KW-SWR = "N"; /* request for data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf10  /* pf10 was not pressed*/
   && converseVar.eventKey not pf11  /* pf11 was not pressed*/
   && converseVar.eventKey not pf19) /* pf19 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0K-300

// Reset highlighted fields
Function FE0K-400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0KM001.FE0KM-BRG initialAttributes; /* begin range month*/
  set FE0KM001.FE0KM-ERG initialAttributes; /* end range month*/
  set FE0KM001.YPGCD initialAttributes; /* product type group code*/
  set FE0KM001.XPCCD initialAttributes; /* product category code*/
  set FE0KM001.YSMXDV initialAttributes; /* summary division code*/
  set FE0KM001.CATOAP initialAttributes;
  set FE0KM001.CAITEM initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KM001.XPCCD == "?" /* product category*/
   || FE0KM001.YPGCD == "?") /* product type group*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KM001.XPCCD == "?") /* category list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODES"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      XPCREC.XPCCD = FFWREC.XPCCD; /* category code*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FE0KM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FE0KM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FE0KM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FE0KM001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KM001.YPGCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/
    ;
    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0KM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0KM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FE0KM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FE0KM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FE0KM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0K-400

// Verify the entered data
Function FE0K-500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FE0KM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify request to scroll forward(pf7) or backwards(pf8)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    ;
    FE0K-510(); /* verify scroll fwrd/back request*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify request to scroll right(pf11) or left(pf10)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10
   || converseVar.eventKey is pf11)
    ;
    FE0K-520(); /* verify scroll left/right*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if ezeaid not enter verify modifiable data*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter)
    ;
    FE0KS-05(); /* verify modifiable data*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    FE0KW00.FE0KW-WYM = FFWREC.FFABEGMO;
    FE0KW00.FE0KW-WYM1 = FFWREC.FFAENDMO;
    ;
    if (FE0KM001.YSMXDV != FFWREC.YSMXDV         /* div code changed*/
     || FE0KM001.YSMXDV == " "                   /* div code changed*/
     || FE0KM001.YPGCD != FFWREC.YPGCD           /* product type grp chg*/
     || FE0KM001.YPGCD == " "                    /* product type grp chg*/
     || FE0KM001.XPCCD != FFWREC.XPCCD           /* product category chg*/
     || FE0KM001.XPCCD == " "                    /* product category changed*/
     || FE0KM001.FE0KM-BRG != FE0KW00.FE0KW-WYM  /* beg range changed*/
     || FE0KM001.FE0KM-BRG == 0                  /* beg range changed*/
     || FE0KM001.FE0KM-ERG != FE0KW00.FE0KW-WYM1 /* end range changed*/
     || FE0KM001.FE0KM-ERG == 0)                 /* end range changed*/
      ;
      FE0KW00.FE0KW-SNX = 1; /* season index*/
      FE0KW00.FE0KW-PGX = 1; /* page index*/
      FE0KW00.XXXTSPAG = 1; /* page no*/
      FE0KW00.FE0KW-NEXT = "N"; /* next season flag*/
      move "N" to FE0KW00.FE0KW-PMON[1] for all; /* print remaining month flag*/
      FE0KW00.FE0KW-UMT = 0;
      move 0 to FE0KW00.FE0KW-UST[1] for all;
      ;
    end
    ;
    FE0K-530(); /* validate entry fields*/
    ;
    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FE0KW00.FE0KW-WYM = FFWREC.FFABEGMO;
    FE0KW00.FE0KW-WYM1 = FFWREC.FFAENDMO;
    ;
    if (FE0KM001.YSMXDV != FFWREC.YSMXDV         /* div code changed*/
     || FE0KM001.YSMXDV == " "                   /* div code changed*/
     || FE0KM001.YPGCD != FFWREC.YPGCD           /* product type grp chg*/
     || FE0KM001.YPGCD == " "                    /* product type grp chg*/
     || FE0KM001.XPCCD != FFWREC.XPCCD           /* product category chg*/
     || FE0KM001.XPCCD == " "                    /* product category changed*/
     || FE0KM001.FE0KM-BRG != FE0KW00.FE0KW-WYM  /* beg range changed*/
     || FE0KM001.FE0KM-BRG == 0                  /* beg range changed*/
     || FE0KM001.FE0KM-ERG != FE0KW00.FE0KW-WYM1 /* end range changed*/
     || FE0KM001.FE0KM-ERG == 0)                 /* end range changed*/
      ;
      if (converseVar.validationMsgNum == 0)
        FE0KW00.FE0KW-SWR = "Y"; /* request data request*/
      end
      ;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
  ;
end // end FE0K-500

// Verify scroll fwrd/back
Function FE0K-510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FE0KW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FE0KW00.XXXTSPAG >= FE0KW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FE0K-510

// Verify scroll left/right
Function FE0K-520()
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left request*/
    if (FE0KW00.FE0KW-PGX == 1) /* and no previous pages*/
      ;
      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(23); /* No previous page to display*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FE0KW00.FE0KW-IDX > FFZREC.FFZNUMMO) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(24); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FE0K-520

// Validate modifiable data
Function FE0K-530()
  ;
   /* ------------------------------------------------------------*/
   /* validate beginning yymm of date range*/
   /* ------------------------------------------------------------*/
  ;
  FE0K-125(); /* Calculate the buy month*/
  ;
   /* reformat map begin date*/
  ;
  FE0KW00.FE0KW-WDT1 = 0;
  FE0KW00.FE0KW-WDT1 = FE0KM001.FE0KM-BRG;
  if (FE0KW00.FE0KW-WYY1 > 50)
    FE0KW00.FE0KW-WCC1 = 19;
  else
    FE0KW00.FE0KW-WCC1 = 20;
  end
  ;
  if (FE0KW00.FE0KW-WCY1 < FE0KW00.FE0KW-BYD) /* Less*/
    converseLib.validationFailed(151); /* Out of range*/
    FFWREC.XXXMODID = "530";
    set FE0KM001.FE0KM-BRG cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* edit the date range*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZSRANG = "N"; /* Not invoked by short-range appl*/
  FFZREC.FFZCHK12 = "Y"; /* Range limited to 12 months*/
  FFZREC.FFZBYYMM = FE0KM001.FE0KM-BRG; /* Range begin month*/
  FFZREC.FFZEYYMM = FE0KM001.FE0KM-ERG; /* Range end month*/
  ;
  XSFFS30(); /* edit date range*/
  ;
   /* ------------------------------------------------------------*/
   /* validate number of months in season entry*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KM001.XPCCD != "  ") /* Category code entered*/
    FE0K-531();
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate div group using routine xsffs20*/
   /* ------------------------------------------------------------*/
  ;
  set YSMREC empty;
  YSMREC.YSMSUMCD = FE0KM001.YSMXDV;
  TA1REC.TA1PGMNM = "FE0K530";
  ;
  if (FE0KM001.YSMXDV == "*")
    FE0KM001.YSMSMDSC = "ALL"; /* Idv grp description*/
  else
    XSFFS20(); /* validate/get division group data*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FE0KM001.YSMSMDSC = YSMREC.YSMSMDSC;
    else
      FE0KM001.YSMSMDSC = " ";
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "530";
      set FE0KM001.YSMXDV cursor, bold;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FE0KM001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FE0KM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FE0KM001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "530";
    set FE0KM001.XPCCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KM001.YPGCD in YPGTBL.YPGCD
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FE0KM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  else
    FE0KM001.YPGABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "530";
    set FE0KM001.YPGCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FE0KM001.FE0KM-ERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "530";
  else
    if (FFZREC.FFZENDRC == "2")
      set FE0KM001.FE0KM-ERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "530";
    else
      if (FFZREC.FFZENDRC == "3")
        set FE0KM001.FE0KM-ERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "530";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FE0KM001.FE0KM-BRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "530";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FE0KM001.FE0KM-BRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "530";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FE0KM001.FE0KM-BRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "530";
      end
    end
  end
  ;
  ;
end // end FE0K-530

// Get season end month(s)
Function FE0K-531()
  ;
   /* ------------------------------------------------------------*/
   /* Get season-end month(s)*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDMO == 0) /* passed from other application*/
    FE0KW00.FE0KW-WBD = FFWREC.FFABEGMO; /* beginning date*/
    FE0KW00.FE0KW-WED = FFWREC.FFAENDMO; /* ending date*/
  else
    FE0KW00.FE0KW-WBD = FFZREC.FFZBEGMO; /* beginning date*/
    FE0KW00.FE0KW-WED = FFZREC.FFZENDMO; /* ending date*/
  end
  ;
  FE0KW00.FE0KW-NSS = 0; /* init number of seasons*/
  FE0KW00.FE0KW-PIX = 2; /* init index*/
  ;
   /* Figure out number of months in range FE0KW00.FE0KW-NM1*/
  ;
  if (FE0KW00.FE0KW-BYY == FE0KW00.FE0KW-EYY) /* beg year EQ end year*/
   /* nbr of mos = end month minus (begin month plus 1)*/
    FE0KW00.FE0KW-NM1 = FE0KW00.FE0KW-EMM - FE0KW00.FE0KW-BMM + 1;
  else
   /* nbr of mos = (end month plus 12) minus (begin month plus 1)*/
    FE0KW00.FE0KW-NM1 = FE0KW00.FE0KW-EMM + 12 - FE0KW00.FE0KW-BMM + 1;
  end
  ;
   /* Figure out number of seasons and the season-end month(s)*/
   /*  */
   /* Check the length of the range, if LE 6 months use end month of*/
   /* the range for sesn-end month; otherwise add 5 months to beg month*/
   /* of range for first season-end month and use end month of the*/
   /* range for the second season-end month.*/
  ;
  if (FE0KW00.FE0KW-NM1 <= 6) /* total nbr of months in range LE 6*/
    ;
    FE0KW00.FE0KW-NSS = 1; /* nbr of sesns*/
    ;
    FE0KW00.FE0KW-SEM[1] = FE0KW00.FE0KW-EMM; /* mm*/
    FE0KW00.FE0KW-SMO[1] = FE0KW00.FE0KW-WED; /* ccyymm*/
    ;
    FE0KW00.FE0KW-SEM[2] = 0; /* mm*/
    FE0KW00.FE0KW-SMO[2] = 0; /* ccyymm*/
    ;
  else /* total nbr of months in range GT 6*/
    ;
    FE0KW00.FE0KW-NSS = 2; /* nbr of sesns*/
    ;
    FE0KW00.FE0KW-WBD-FIRST = FE0KW00.FE0KW-WBD;
    FE0KW00.FE0KW-BMM-FIRST = FE0KW00.FE0KW-BMM-FIRST + 5;
    if (FE0KW00.FE0KW-BMM-FIRST > 12)
      FE0KW00.FE0KW-BMM-FIRST = FE0KW00.FE0KW-BMM-FIRST - 12;
      if (FE0KW00.FE0KW-BYY-FIRST == 99)
        FE0KW00.FE0KW-BYY-FIRST = FE0KW00.FE0KW-BYY-FIRST + 1;
        FE0KW00.FE0KW-BYY-FIRST = 00;
      else
        FE0KW00.FE0KW-BYY-FIRST = FE0KW00.FE0KW-BYY-FIRST + 1;
      end
    end
    ;
    FE0KW00.FE0KW-SEM[1] = FE0KW00.FE0KW-BMM-FIRST; /* mm*/
    FE0KW00.FE0KW-SMO[1] = FE0KW00.FE0KW-WBD-FIRST; /* ccyymm*/
    ;
    FE0KW00.FE0KW-SEM[2] = FE0KW00.FE0KW-EMM; /* mm*/
    FE0KW00.FE0KW-SMO[2] = FE0KW00.FE0KW-WED; /* ccyymm*/
    ;
  end
  ;
  ;
   /* Figure out number of months in each season*/
   /*  */
  FE0KW00.FE0KW-PIX = FE0KW00.FE0KW-NSS;
   /* E 0 TO FE0KW00.FE0KW-NM1;     /* clear total months work area*/
  while (FE0KW00.FE0KW-PIX > 0) /* nbr of seasons*/
    FE0KS-80(); /* calculate no of mos in each sesn*/
    FE0KW00.FE0KW-PIX = FE0KW00.FE0KW-PIX - 1;
  end
  ;
end // end FE0K-531

// Process valid input request
Function FE0K-600()
  ;
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FE0KW00.FE0KW-SWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.YSMXDV = FE0KM001.YSMXDV; /* division code*/
  FFWREC.YSMSMDSC = FE0KM001.YSMSMDSC; /* division abrv desc*/
  ;
  FFWREC.XPCCD = FE0KM001.XPCCD; /* product category*/
  FFWREC.XPCABRV = FE0KM001.XPCABRV; /* product category abrv desc*/
  ;
  FFWREC.YPGCD = FE0KM001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FE0KM001.YPGABRV; /* product type grp abrv desc*/
  ;
  FFWREC.FFWENDM1 = FE0KW00.FE0KW-SMO[1]; /* season end month 1*/
  FFWREC.FFWENDM2 = FE0KW00.FE0KW-SMO[2]; /* season end month 2*/
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  ;
  if (converseVar.eventKey is enter
   && FE0KW00.FE0KW-SWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* display next season*/
    FE0KW00.XXXTSPAG = FE0KW00.XXXTSPAG - 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* display next season*/
    FE0KW00.XXXTSPAG = FE0KW00.XXXTSPAG + 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll left*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* display prior season*/
    ;
    FE0KW00.FE0KW-PGX = FE0KW00.FE0KW-PGX - 1;
    FE0KW00.FE0KW-SNX = FE0KW00.FE0KW-PAGS[FE0KW-PGX];
    FE0KW00.FE0KW-NEXT = "N";
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll right*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* display next season*/
    ;
    FE0KW00.FE0KW-PGX = FE0KW00.FE0KW-PGX + 1;
    FE0KW00.FE0KW-PAGP[FE0KW-PGX] = FE0KW00.FE0KW-IDX;
                                                         /* start point  of*/
                                  /* next page*/
    if (FE0KW00.FE0KW-NEXT == "Y") /* next season*/
      FE0KW00.FE0KW-SNX = FE0KW00.FE0KW-SNX + 1;
      FE0KW00.FE0KW-NEXT = "N";
    end
    ;
    FE0KW00.FE0KW-PAGS[FE0KW-PGX] = FE0KW00.FE0KW-SNX;
                                                         /* sesn of the pag*/
    ;
    return;
  end
  ;
end // end FE0K-600

// Purge temporary storage
Function FE0KS-01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0KW01 empty; /* header data*/
  set FE0KW02 empty; /* M001 temporary storage detail*/
  set FE0KW03 empty; /* columns totals*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FE0KW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FE0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0KS-01

// Select sum MSGRP 'SS'
Function FE0KS-03()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmsgrp01 table.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff8rec record - dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/
  ;
  if (FF8REC.YSMXDV == "10") /* div = '10'*/
    FF8REC.XCTCD = "USA"; /* country code = 'USA'*/
  else
    FF8REC.XCTCD = "*"; /* country code wildcarded*/
  end
  FF8REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF8REC.SYBSTGNB = FG9REC.SYBSTGNB; /* style grp nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* select sum dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMSGRP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0KS-03

// Read temporary storage
Function FE0KS-04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  FE0KW02.XXXTSLEN = FE0KW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FE0KW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FE0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0KS-04

// Verify modifiable fields
Function FE0KS-05()
   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/
  ;
  if (FE0KM001.YSMXDV != FFWREC.YSMXDV)
    set FE0KM001.YSMXDV cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S05";
  end
  ;
  if (FE0KM001.XPCCD != FFWREC.XPCCD)
    set FE0KM001.XPCCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S05";
  end
  ;
  if (FE0KM001.YPGCD != FFWREC.YPGCD)
    set FE0KM001.YPGCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S05";
  end
  ;
  FE0KW00.FE0KW-WED = FFWREC.FFAENDMO;
  if (FE0KM001.FE0KM-ERG != FE0KW00.FE0KW-EYM)
    set FE0KM001.FE0KM-ERG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S05";
  end
  ;
  FE0KW00.FE0KW-WBD = FFWREC.FFABEGMO;
  if (FE0KM001.FE0KM-BRG != FE0KW00.FE0KW-BYM)
    set FE0KM001.FE0KM-BRG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S05";
  end
  ;
end // end FE0KS-05

// Keep the style group
Function FE0KS-06()
  ;
   /* ------------------------------------------------------------*/
   /* If the page is full, add the page to the storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0KW00.FE0KW-IDX > 12) /* Page is full*/
    FE0KW02.FE0KW-NLD = FE0KW00.FE0KW-IDX; /* nbr of lines loaded*/
    FE0K-160(); /* Add page to temp storage*/
  else
    FE0KW00.FE0KW-IDX = FE0KW00.FE0KW-IDX + 1;
  end
  ;
end // end FE0KS-06

// Load heading literals
Function FE0KS-20()
   /* ------------------------------------------------------------*/
   /* load heading literals*/
   /* ------------------------------------------------------------*/
  ;
   /* subtotal*/
  ;
  FE0KM001.FE0KM-HD1[7] = " SUB ";
  set FE0KM001.FE0KM-HD1[7] skip;
  FE0KM001.FE0KM-HD2[7] = "TOTAL";
  set FE0KM001.FE0KM-HD2[7] skip;
  ;
   /* subtotal percent*/
  ;
  FE0KM001.FE0KM-HD1[8] = "% OF ";
  set FE0KM001.FE0KM-HD1[8] skip;
  FE0KM001.FE0KM-HD2[8] = "TOTAL";
  set FE0KM001.FE0KM-HD2[8] skip;
  ;
   /* range total*/
  ;
  FE0KM001.FE0KM-HD1[9] = "RANGE";
  set FE0KM001.FE0KM-HD1[9] skip;
  FE0KM001.FE0KM-HD2[9] = "TOTAL";
  set FE0KM001.FE0KM-HD2[9] skip;
  ;
   /* range total percent*/
  ;
  FE0KM001.FE0KM-HD1[10] = "% FOR";
  set FE0KM001.FE0KM-HD1[10] skip;
  FE0KM001.FE0KM-HD2[10] = "R-TOT";
  set FE0KM001.FE0KM-HD2[10] skip;
  ;
end // end FE0KS-20

// Load subtotal and total
Function FE0KS-30()
    /* ----------------------------------------------------------*/
     /* translate/load style grp subtotal*/
    /* ----------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0KW00.FE0KW-UST[FE0KW-PIX];
  XSFFS10();
  FE0KW00.FE0KW-WQT[7] = FFXREC.FFXCHAR;
  ;
  FE0KW00.FE0KW-STX[FE0KW-PIX] = FE0KW00.FE0KW-LIX;
                                   /* Save subtot pos.*/
  FE0KW00.FE0KW-STQ[FE0KW-PIX] = FE0KW00.FE0KW-UST[FE0KW-PIX]; /* Save subtot qty*/
  ;
    /* ----------------------------------------------------------*/
     /* load style group range total*/
    /* ----------------------------------------------------------*/
  ;
  FE0KW00.FE0KW-WQT[9] = FE0KW00.FE0KW-QTY[FE0KW-TIX];
  ;
    /* ----------------------------------------------------------*/
     /* calculate/load style grp range total percent*/
    /* ----------------------------------------------------------*/
  ;
  if (FE0KW03.FE0KW-UMT[FE0KW-TIX] > 0)
    FE0KW00.FE0KW-NM1 = FE0KW00.FE0KW-UQT[FE0KW-TIX] * 100;
    FE0KW00.FE0KW-NPT = mathLib.round(FE0KW00.FE0KW-NM1 / FE0KW03.FE0KW-UMT[FE0KW-TIX], -mathLib.decimals(FE0KW00.FE0KW-NPT));
    ;
      /* --------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* --------------------------------------------------------*/
    ;
    if (FE0KW00.FE0KW-NPT != 0)
      FE0KW00.FE0KW-PTW = FE0KW00.FE0KW-NP1;
      FE0KW00.FE0KW-PTP = ".";
      FE0KW00.FE0KW-PTD = FE0KW00.FE0KW-NP2;
      ;
      if (FE0KW00.FE0KW-PT1 == "0")
        FE0KW00.FE0KW-PT1 = " ";
        if (FE0KW00.FE0KW-PT2 == "0")
          FE0KW00.FE0KW-PT2 = " ";
        end
      end
      ;
      FE0KW00.FE0KW-WQT[10] = FE0KW00.FE0KW-PCT;
      FE0KW00.FE0KW-NPT = 0; /* Clear percent*/
      FE0KW00.FE0KW-PCT = 0; /* Clear percent*/
      ;
    end
  end
  ;
end // end FE0KS-30

// Cal no of sesn and mos in each
Function FE0KS-33()
  ;
   /* ------------------------------------------------------------*/
   /* Calculate nbr of seasons and months in each*/
   /* ------------------------------------------------------------*/
  ;
  FE0KW00.FE0KW-WBD = FFWREC.FFABEGMO; /* beginning date*/
  FE0KW00.FE0KW-WED = FFWREC.FFAENDMO; /* ending date*/
  ;
  FE0KW00.FE0KW-NSS = 0; /* init number of seasons*/
  FE0KW00.FE0KW-PIX = 2; /* init index*/
  ;
   /* Figure out number of months in range FE0KW00.FE0KW-NM1*/
  ;
  if (FE0KW00.FE0KW-BYY == FE0KW00.FE0KW-EYY) /* beg year EQ end year*/
   /* nbr of mos = end month minus (begin month plus 1)*/
    FE0KW00.FE0KW-NM1 = FE0KW00.FE0KW-EMM - FE0KW00.FE0KW-BMM + 1;
  else
   /* nbr of mos = (end month plus 12) minus (begin month plus 1)*/
    FE0KW00.FE0KW-NM1 = FE0KW00.FE0KW-EMM + 12 - FE0KW00.FE0KW-BMM + 1;
  end
  ;
   /* Figure out number of seasons and the season-end month(s)*/
   /*  */
   /* Check the length of the range, if LE 6 months use end month of*/
   /* the range for sesn-end month; otherwise use range begin month plus*/
   /* 5 months for the first season-end month and the date range end*/
   /* month for the second season-end month.*/
  ;
  if (FE0KW00.FE0KW-NM1 <= 6) /* total nbr of months in range LE 6*/
    ;
    FE0KW00.FE0KW-NSS = 1; /* nbr of sesns*/
    ;
    FE0KW00.FE0KW-SEM[1] = FE0KW00.FE0KW-EMM; /* sesn end mo - mm*/
    FE0KW00.FE0KW-SMO[1] = FE0KW00.FE0KW-WED; /* sesn end mo - ccyymm*/
    ;
    FE0KW00.FE0KW-SEM[2] = 0; /* mm*/
    FE0KW00.FE0KW-SMO[2] = 0; /* ccyymm*/
    ;
  else /* total nbr of months in range GT 6*/
    ;
    FE0KW00.FE0KW-NSS = 2; /* nbr of sesns*/
    ;
    FE0KW00.FE0KW-WBD-FIRST = FE0KW00.FE0KW-WBD;
    FE0KW00.FE0KW-BMM-FIRST = FE0KW00.FE0KW-BMM-FIRST + 5;
    if (FE0KW00.FE0KW-BMM-FIRST > 12)
      FE0KW00.FE0KW-BMM-FIRST = FE0KW00.FE0KW-BMM-FIRST - 12;
      if (FE0KW00.FE0KW-BYY-FIRST == 99)
        FE0KW00.FE0KW-BCC-FIRST = FE0KW00.FE0KW-BCC-FIRST + 1;
  /* FE0KW00.FE0KW-BYY-FIRST = FE0KW00.FE0KW-BYY-FIRST + 1;/*dsmith*/
        FE0KW00.FE0KW-BYY-FIRST = 00;
      else
        FE0KW00.FE0KW-BYY-FIRST = FE0KW00.FE0KW-BYY-FIRST + 1;
      end
    end
    ;
    FE0KW00.FE0KW-SEM[1] = FE0KW00.FE0KW-BMM-FIRST; /* mm*/
    FE0KW00.FE0KW-SMO[1] = FE0KW00.FE0KW-WBD-FIRST; /* ccyymm*/
    ;
    FE0KW00.FE0KW-SEM[2] = FE0KW00.FE0KW-EMM; /* mm*/
    FE0KW00.FE0KW-SMO[2] = FE0KW00.FE0KW-WED; /* ccyymm*/
    ;
  end
  ;
   /*  */
   /* Figure out number of months in each season*/
   /*  */
  FE0KW00.FE0KW-PIX = FE0KW00.FE0KW-NSS;
  while (FE0KW00.FE0KW-PIX > 0) /* nbr of seasons*/
    FE0KS-80(); /* calculate no of mos in each sesn*/
    FE0KW00.FE0KW-PIX = FE0KW00.FE0KW-PIX - 1;
  end
  ;
end // end FE0KS-33

// Load subtot & tot for tot line
Function FE0KS-40()
  ;
   /* ----------------------------------------------------------*/
   /* translate/load style grp monthly subtotal/total*/
   /* ----------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0KW00.FE0KW-UMT;
  XSFFS10();
  FE0KW00.FE0KW-WQT[7] = FFXREC.FFXCHAR;
  ;
   /* ----------------------------------------------------------*/
   /* calculate/load style grp subtotal percent*/
   /* ----------------------------------------------------------*/
  ;
  FE0KW00.FE0KW-NPT = 0; /* Clear percent*/
  FE0KW00.FE0KW-PCT = 0; /* Clear percent*/
  ;
  if (FE0KW00.FE0KW-UMT > 0)
    FE0KW00.FE0KW-NM1 = FE0KW00.FE0KW-UMT * 100;
    FE0KW00.FE0KW-NPT = mathLib.round(FE0KW00.FE0KW-NM1 / FE0KW00.FE0KW-UMT, -mathLib.decimals(FE0KW00.FE0KW-NPT));
    ;
    /* --------------------------------------------------------*/
     /* zero suppress the percent field*/
    /* --------------------------------------------------------*/
    ;
    if (FE0KW00.FE0KW-NPT != 0)
      FE0KW00.FE0KW-PTW = FE0KW00.FE0KW-NP1;
      FE0KW00.FE0KW-PTP = ".";
      FE0KW00.FE0KW-PTD = FE0KW00.FE0KW-NP2;
      ;
      if (FE0KW00.FE0KW-PT1 == "0")
        FE0KW00.FE0KW-PT1 = " ";
        if (FE0KW00.FE0KW-PT2 == "0")
          FE0KW00.FE0KW-PT2 = " ";
        end
      end
      ;
      FE0KW00.FE0KW-WQT[8] = FE0KW00.FE0KW-PCT;
      FE0KW00.FE0KW-NPT = 0; /* Clear percent*/
      FE0KW00.FE0KW-PCT = 0; /* Clear percent*/
      ;
    end
  end
  ;
   /* ----------------------------------------------------------*/
   /* calculate/load style grp subtotal percent*/
   /* ----------------------------------------------------------*/
  ;
  FE0KW00.FE0KW-PIX = 1; /* Init process index*/
  FE0KW00.FE0KW-NPT = 0; /* Clear percent*/
  FE0KW00.FE0KW-PCT = 0; /* Clear percent*/
  ;
  while (FE0KW00.FE0KW-PIX <= FE0KW02.FE0KW-NLD)
    ;
    if (FE0KW00.FE0KW-UMT > 0)
      FE0KW00.FE0KW-NM1 = FE0KW00.FE0KW-STQ[FE0KW-PIX] * 100;
      FE0KW00.FE0KW-NPT = mathLib.round(FE0KW00.FE0KW-NM1 / FE0KW00.FE0KW-UMT, -mathLib.decimals(FE0KW00.FE0KW-NPT));
      ;
      /* --------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* --------------------------------------------------------*/
      ;
      if (FE0KW00.FE0KW-NPT != 0)
        FE0KW00.FE0KW-PTW = FE0KW00.FE0KW-NP1;
        FE0KW00.FE0KW-PTP = ".";
        FE0KW00.FE0KW-PTD = FE0KW00.FE0KW-NP2;
        ;
        if (FE0KW00.FE0KW-PT1 == "0")
          FE0KW00.FE0KW-PT1 = " ";
          if (FE0KW00.FE0KW-PT2 == "0")
            FE0KW00.FE0KW-PT2 = " ";
          end
        end
        ;
        FE0KM001.FE0KM-Q08[FE0KW-PIX] = FE0KW00.FE0KW-PCT;
        ;
      end
    end
    ;
    FE0KW00.FE0KW-PIX = FE0KW00.FE0KW-PIX + 1;
    ;
  end
  ;
  move 0 to FE0KW00.FE0KW-STX[1] for all; /* Clear subtot col position*/
  move 0 to FE0KW00.FE0KW-STQ[1] for all; /* Clear subtot qty*/
  FE0KW00.FE0KW-NPT = 0; /* Clear percent*/
  FE0KW00.FE0KW-PCT = 0; /* Clear percent*/
  ;
   /* --------------------------------------------------------*/
   /* load style grp monthly range total*/
   /* --------------------------------------------------------*/
  ;
  FE0KW00.FE0KW-WQT[9] = FE0KW03.FE0KW-MTQ[FE0KW-TIX];
  ;
end // end FE0KS-40

// Load subtot for pct line
Function FE0KS-50()
   /* ----------------------------------------------------------*/
   /* calculate/load style grp monthly total percent*/
   /* ----------------------------------------------------------*/
  ;
  if (FE0KW03.FE0KW-UMT[FE0KW-TIX] > 0)
    FE0KW00.FE0KW-NM1 = FE0KW00.FE0KW-UMT * 100;
    FE0KW00.FE0KW-NPT = mathLib.round(FE0KW00.FE0KW-NM1 / FE0KW03.FE0KW-UMT[FE0KW-TIX], -mathLib.decimals(FE0KW00.FE0KW-NPT));
    ;
    /* ----------------------------------------------------------*/
     /* zero suppress the percent field*/
    /* ----------------------------------------------------------*/
    ;
    if (FE0KW00.FE0KW-NPT != 0)
      FE0KW00.FE0KW-PTW = FE0KW00.FE0KW-NP1;
      FE0KW00.FE0KW-PTP = ".";
      FE0KW00.FE0KW-PTD = FE0KW00.FE0KW-NP2;
      ;
      if (FE0KW00.FE0KW-PT1 == "0")
        FE0KW00.FE0KW-PT1 = " ";
        if (FE0KW00.FE0KW-PT2 == "0")
          FE0KW00.FE0KW-PT2 = " ";
        end
      end
      ;
      FE0KW00.FE0KW-WQT[7] = FE0KW00.FE0KW-PCT;
      ;
    end
  end
  ;
end // end FE0KS-50

// Calculate no of mos in season
Function FE0KS-80()
  ;
   /* Calculate nbr of months in each season*/
  ;
  FE0KW00.FE0KW-WDT = FE0KW00.FE0KW-SMO[FE0KW-PIX]; /* sesn end mo*/
  ;
  if (FE0KW00.FE0KW-PIX == 1) /* 1st season*/
    ;
    if (FE0KW00.FE0KW-WMM >= FE0KW00.FE0KW-BMM) /* in the same year*/
      FE0KW00.FE0KW-SIN[FE0KW-PIX] = FE0KW00.FE0KW-WDT -                                    FE0KW00.FE0KW-WBD + 1;
    else /* in the different year*/
      FE0KW00.FE0KW-SIN[FE0KW-PIX] = FE0KW00.FE0KW-WMM + 12 -                                    FE0KW00.FE0KW-BMM + 1;
    end
    ;
  else /* other season*/
    ;
    FE0KW00.FE0KW-LIX = FE0KW00.FE0KW-PIX - 1;
    FE0KW00.FE0KW-WDT1 = FE0KW00.FE0KW-SMO[FE0KW-LIX];
                                                            /* prev sesn mo*/
    if (FE0KW00.FE0KW-WMM > FE0KW00.FE0KW-WMM1) /* in the same year*/
      FE0KW00.FE0KW-SIN[FE0KW-PIX] = FE0KW00.FE0KW-WMM -       FE0KW00.FE0KW-WMM1;
    else /* in the different year*/
      FE0KW00.FE0KW-SIN[FE0KW-PIX] = FE0KW00.FE0KW-WMM + 12 -                                    FE0KW00.FE0KW-WMM1;
    end
    ;
  end
  ;
end // end FE0KS-80

//*** RECORD=FE0KW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0KW00 type basicRecord
  10 FE0KW-DCF FE0KW-DCF ; 
  10 FE0KW-NSS FE0KW-NSS ; 
  10 FE0KW-SIN FE0KW-SIN [2] ; 
  10 FE0KW-SEM FE0KW-SEM [2] ; 
  10 FE0KW-SMO FE0KW-SMO [2] ; 
  10 FE0KW-SWR FE0KW-SWR ; 
  10 FE0KW-SWF FE0KW-SWF ; 
  10 FE0KW-GRP FE0KW-GRP ; 
  10 FE0KW-SWD FE0KW-SWD ; 
  10 FE0KW-CR2 FE0KW-CR2 ; 
  10 FE0KW-NM1 FE0KW-NM1 ; 
  10 FE0KW-NM2 FE0KW-NM2 ; 
  10 FE0KW-NPT FE0KW-NPT ; 
    15 FE0KW-NP1 FE0KW-NP1 ; 
    15 FE0KW-NP2 FE0KW-NP2 ; 
  10 FE0KW-PCT FE0KW-PCT ; 
    15 FE0KW-PTW FE0KW-PTW ; 
      20 FE0KW-PT1 FE0KW-PT1 ; 
      20 FE0KW-PT2 FE0KW-PT2 ; 
      20 FE0KW-PT3 FE0KW-PT3 ; 
    15 FE0KW-PTP FE0KW-PTP ; 
    15 FE0KW-PTD FE0KW-PTD ; 
  10 FE0KW-UTQ FE0KW-UTQ ; 
  10 FE0KW-UMT FE0KW-UMT ; 
  10 FE0KW-UST FE0KW-UST [13] ; 
  10 FE0KW-UHS FE0KW-UHS ; 
  10 FE0KW-NIL FE0KW-NIL ; 
  10 FE0KW-HST FE0KW-HST ; 
  10 FE0KW-WQT FE0KW-WQT [10] ; 
  10 FE0KW-LQT FE0KW-LQT ; 
    15 FE0KW-UQT FE0KW-UQT [13] ; 
    15 FE0KW-QTY FE0KW-QTY [13] ; 
  10 FE0KW-STX FE0KW-STX [15] ; 
  10 FE0KW-STQ FE0KW-STQ [15] ; 
  10 FE0KW-IDX FE0KW-IDX ; 
  10 FE0KW-TIX FE0KW-TIX ; 
  10 FE0KW-SIX FE0KW-SIX ; 
  10 FE0KW-LIX FE0KW-LIX ; 
  10 FE0KW-PIX FE0KW-PIX ; 
  10 FE0KW-PGX FE0KW-PGX ; 
  10 FE0KW-SNX FE0KW-SNX ; 
  10 FE0KW-CWD FE0KW-CWD ; 
    15 FE0KW-CYM FE0KW-CYM ; 
      20 FE0KW-CCC FE0KW-CCC ; 
      20 FE0KW-CYY FE0KW-CYY ; 
      20 FE0KW-CMM FE0KW-CMM ; 
    15 FE0KW-CDD FE0KW-CDD ; 
  10 FE0KW-ICD FE0KW-ICD ; 
    15 FE0KW-IYM FE0KW-IYM ; 
      20 FE0KW-ICC FE0KW-ICC ; 
      20 FE0KW-IYY FE0KW-IYY ; 
      20 FE0KW-IMM FE0KW-IMM ; 
    15 FE0KW-IDD FE0KW-IDD ; 
  10 FE0KW-WDT FE0KW-WDT ; 
    15 * num(3) ; 
    15 FE0KW-WCC FE0KW-WCC ; 
    15 FE0KW-WYM FE0KW-WYM ; 
      20 FE0KW-WYY FE0KW-WYY ; 
      20 FE0KW-WMM FE0KW-WMM ; 
  10 FE0KW-WDT1 FE0KW-WDT1 ; 
    15 * num(3) ; 
    15 FE0KW-WCY1 FE0KW-WCY1 ; 
      20 FE0KW-WCC1 FE0KW-WCC1 ; 
      20 FE0KW-WYM1 FE0KW-WYM1 ; 
        25 FE0KW-WYY1 FE0KW-WYY1 ; 
        25 FE0KW-WMM1 FE0KW-WMM1 ; 
  10 FE0KW-WDT1-FOR-BUY-MO FE0KW-WDT1-FOR-BUY-MO ; 
    15 * num(1) ; 
    15 FE0KW-WCY1-FOR-BUY-MO FE0KW-WCY1-FOR-BUY-MO ; 
      20 FE0KW-WCC1-FOR-BUY-MO FE0KW-WCC1-FOR-BUY-MO ; 
      20 FE0KW-WYY1-FOR-BUY-MO FE0KW-WYY1-FOR-BUY-MO ; 
      20 FE0KW-WMM1-FOR-BUY-MO FE0KW-WMM1-FOR-BUY-MO ; 
    15 FE0KW-WDD1-FOR-BUY-MO FE0KW-WDD1-FOR-BUY-MO ; 
  10 FE0KW-WBD FE0KW-WBD ; 
    15 * num(3) ; 
    15 FE0KW-BCC FE0KW-BCC ; 
    15 FE0KW-BYM FE0KW-BYM ; 
      20 FE0KW-BYY FE0KW-BYY ; 
      20 FE0KW-BMM FE0KW-BMM ; 
  10 FE0KW-WED FE0KW-WED ; 
    15 * num(3) ; 
    15 FE0KW-ECC FE0KW-ECC ; 
    15 FE0KW-EYM FE0KW-EYM ; 
      20 FE0KW-EYY FE0KW-EYY ; 
      20 FE0KW-EMM FE0KW-EMM ; 
  10 FE0KW-WBD-FIRST FE0KW-WBD-FIRST ; 
    15 * num(3) ; 
    15 FE0KW-BCC-FIRST FE0KW-BCC-FIRST ; 
    15 FE0KW-BYM-FIRST FE0KW-BYM-FIRST ; 
      20 FE0KW-BYY-FIRST FE0KW-BYY-FIRST ; 
      20 FE0KW-BMM-FIRST FE0KW-BMM-FIRST ; 
  10 FE0KW-CRD FE0KW-CRD ; 
  10 FE0KW-CD1 FE0KW-CD1 ; 
  10 FE0KW-BYD FE0KW-BYD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FE0KW-PAGP FE0KW-PAGP [10] ; 
  10 FE0KW-PAGS FE0KW-PAGS [10] ; 
  10 FE0KW-PMON FE0KW-PMON [10] ; 
  10 FE0KW-REM FE0KW-REM ; 
  10 FE0KW-NEXT FE0KW-NEXT ; 
  10 FE0KW-SYBSTGNB FE0KW-SYBSTGNB ; 
end // end FE0KW00

//*** RECORD=FE0KW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FE0KW01 type basicRecord
  10 CACHGFL CACHGFL ; 
end // end FE0KW01

//*** RECORD=FE0KW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FE0KW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(2027) ; 
    10 FE0KW-NLD FE0KW-NLD ; 
    10 SYBSTGNB SYBSTGNB [15] ; 
    10 SYBSTGNM SYBSTGNM [15] ; 
    10 FE0KW-QTS FE0KW-QTS [15] ; 
      15 FE0KW-U01 FE0KW-U01 ; 
      15 FE0KW-Q01 FE0KW-Q01 ; 
      15 FE0KW-U02 FE0KW-U02 ; 
      15 FE0KW-Q02 FE0KW-Q02 ; 
      15 FE0KW-U03 FE0KW-U03 ; 
      15 FE0KW-Q03 FE0KW-Q03 ; 
      15 FE0KW-U04 FE0KW-U04 ; 
      15 FE0KW-Q04 FE0KW-Q04 ; 
      15 FE0KW-U05 FE0KW-U05 ; 
      15 FE0KW-Q05 FE0KW-Q05 ; 
      15 FE0KW-U06 FE0KW-U06 ; 
      15 FE0KW-Q06 FE0KW-Q06 ; 
      15 FE0KW-U07 FE0KW-U07 ; 
      15 FE0KW-Q07 FE0KW-Q07 ; 
      15 FE0KW-U08 FE0KW-U08 ; 
      15 FE0KW-Q08 FE0KW-Q08 ; 
      15 FE0KW-U09 FE0KW-U09 ; 
      15 FE0KW-Q09 FE0KW-Q09 ; 
      15 FE0KW-U10 FE0KW-U10 ; 
      15 FE0KW-Q10 FE0KW-Q10 ; 
      15 FE0KW-U11 FE0KW-U11 ; 
      15 FE0KW-Q11 FE0KW-Q11 ; 
      15 FE0KW-U12 FE0KW-U12 ; 
      15 FE0KW-Q12 FE0KW-Q12 ; 
      15 FE0KW-U13 FE0KW-U13 ; 
      15 FE0KW-Q13 FE0KW-Q13 ; 
end // end FE0KW02

//*** RECORD=FE0KW03 ****
// ------------------------------
// map 001 totals display storage
// ------------------------------
// ***********************
Record FE0KW03 type basicRecord
  5 FE0KW-GP3 FE0KW-GP3 ; 
    10 FE0KW-UMT FE0KW-UMT [13] ; 
    10 FE0KW-MTQ FE0KW-MTQ [13] ; 
    10 FE0KW-MPT FE0KW-MPT [13] ; 
end // end FE0KW03

// begin century
DataItem FE0KW-BCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end century
DataItem FE0KW-BCC-FIRST num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FE0KW-BMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FE0KW-BMM-FIRST num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy date CCYYMM
DataItem FE0KW-BYD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FE0KW-BYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FE0KW-BYM-FIRST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FE0KW-BYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FE0KW-BYY-FIRST num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FE0KW-CCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date -1 month
DataItem FE0KW-CD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work day
DataItem FE0KW-CDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FE0KW-CMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor for VPFHST01
DataItem FE0KW-CR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date
DataItem FE0KW-CRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymmdd
DataItem FE0KW-CWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FE0KW-CYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FE0KW-CYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data change flag
DataItem FE0KW-DCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end century
DataItem FE0KW-ECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FE0KW-EMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FE0KW-EYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FE0KW-EYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fe0kw03 group level
DataItem FE0KW-GP3 char(169)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style group active flag
DataItem FE0KW-GRP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales thousands
DataItem FE0KW-HST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice work century
DataItem FE0KW-ICC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice compare date
DataItem FE0KW-ICD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// invoice work day
DataItem FE0KW-IDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FE0KW-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work month
DataItem FE0KW-IMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice ccyymm
DataItem FE0KW-IYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work year
DataItem FE0KW-IYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load  index
DataItem FE0KW-LIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product line qtys
DataItem FE0KW-LQT char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly percent
DataItem FE0KW-MPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// monthly sale qtys
DataItem FE0KW-MTQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Next season flag
DataItem FE0KW-NEXT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIL sales units
DataItem FE0KW-NIL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines per page
DataItem FE0KW-NLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FE0KW-NM1 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FE0KW-NM2 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0KW-NP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0KW-NP2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric percent field
DataItem FE0KW-NPT num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no of seasons
DataItem FE0KW-NSS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Starting point of the page
DataItem FE0KW-PAGP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Processing season of the page
DataItem FE0KW-PAGS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char percent field
DataItem FE0KW-PCT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page index
DataItem FE0KW-PGX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// process index
DataItem FE0KW-PIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print remaining month flag
DataItem FE0KW-PMON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0KW-PT1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0KW-PT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0KW-PT3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0KW-PTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0KW-PTP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0KW-PTW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 1
DataItem FE0KW-Q01 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 2
DataItem FE0KW-Q02 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 3
DataItem FE0KW-Q03 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 4
DataItem FE0KW-Q04 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 5
DataItem FE0KW-Q05 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 6
DataItem FE0KW-Q06 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 7
DataItem FE0KW-Q07 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 8
DataItem FE0KW-Q08 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 9
DataItem FE0KW-Q09 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 10
DataItem FE0KW-Q10 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 11
DataItem FE0KW-Q11 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 12
DataItem FE0KW-Q12 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 13
DataItem FE0KW-Q13 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product line monthly qtys
DataItem FE0KW-QTS char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sale qty 1000
DataItem FE0KW-QTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Remaining month
DataItem FE0KW-REM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month - mm
DataItem FE0KW-SEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of months in season
DataItem FE0KW-SIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save index
DataItem FE0KW-SIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month - ccyymm
DataItem FE0KW-SMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season index
DataItem FE0KW-SNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subtotal qty
DataItem FE0KW-STQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subtotal col posititon
DataItem FE0KW-STX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display map switch
DataItem FE0KW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0KW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FE0KW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style group number
DataItem FE0KW-SYBSTGNB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total index
DataItem FE0KW-TIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 1
DataItem FE0KW-U01 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 2
DataItem FE0KW-U02 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 3
DataItem FE0KW-U03 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 4
DataItem FE0KW-U04 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 5
DataItem FE0KW-U05 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 6
DataItem FE0KW-U06 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 7
DataItem FE0KW-U07 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 8
DataItem FE0KW-U08 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 9
DataItem FE0KW-U09 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 10
DataItem FE0KW-U10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 11
DataItem FE0KW-U11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 12
DataItem FE0KW-U12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 13
DataItem FE0KW-U13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales units
DataItem FE0KW-UHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit monthly sale qty
DataItem FE0KW-UMT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sale qty units
DataItem FE0KW-UQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit sale qty sub total
DataItem FE0KW-UST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s product range total
DataItem FE0KW-UTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FE0KW-WBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FE0KW-WBD-FIRST num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FE0KW-WCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FE0KW-WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CC
DataItem FE0KW-WCC1-FOR-BUY-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date CCYYMM
DataItem FE0KW-WCY1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date CCYYMM
DataItem FE0KW-WCY1-FOR-BUY-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DD
DataItem FE0KW-WDD1-FOR-BUY-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FE0KW-WDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work date
DataItem FE0KW-WDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work date CCYYMMDD
DataItem FE0KW-WDT1-FOR-BUY-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FE0KW-WED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FE0KW-WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FE0KW-WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM
DataItem FE0KW-WMM1-FOR-BUY-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s product line qtys
DataItem FE0KW-WQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year and month
DataItem FE0KW-WYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FE0KW-WYM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FE0KW-WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FE0KW-WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY
DataItem FE0KW-WYY1-FOR-BUY-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

