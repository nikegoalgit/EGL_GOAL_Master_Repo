package fe0c;

import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXCT01;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS22;
import corpcom4.XSFFS30;
import corpcom4.XSNOWAY;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import corpz3.ZRGCD;
import corpz3.ZRGTBL;
import ff.common.*;
import fg.common.FG9REC;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FE0C ****
// This program provides nil users the ability to view and
// change the monthly style color production forecasts.
// 
// The NIL users can come into this application from:
//   - LONG RANGE MAIN MENU SCREEN
// 
// 
// The NIL user will enter key information at the top of the
// screen consisting of a date range, a "Y" or "N" in the all
// styles flag to indicate whether they want to see all styles
// on VFFSTY01 even if they had not previously forecasted it,
// a category and or style group, and a country code.  If the
// country code is left blank the total production forecast for
// all countrys for each style will be displayed.  If updates
// are made to this total from all countries the adjustment
// quantity will be made to the "0000" country code.
// 
// The user can specify the number of months in a season and
// he has the flexibility to view 3 months,4 months or 6 months
// seasons with varying subtotals. The user may use appropriate
// attention key to scroll left and right.
// 
// The life cycle on th top of the screen will show the earl-
// iest projected introduction date and latest projected close-
// out date. The program will check the projected intro. date
// and projected closeout date for each product. The forecast
// quantities of those months before the intro. date and after
// the closeout date (exclude the intro. month and include the
// closeout month) will be zeroed out and become non-enterable.
// 
// If the user is satisfied with the forecast quantities on the
// screen, he can make these sales forecasts as master by
// pressing PF15. The system will then update the master prod
// forecast by style color, by style group and by category.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04/02/91  MDANGE  New application.
//          05/02/91  MDANGE  Change master style table from
//                            VFFSTY01 to VPFHST01.  VFFSTY01
//                            will be used if all styles are
//                            requested.
//  FF1105  12/02/91  MDANGE  Change to allow months greater
//                            than 12 months beyond the buy
//                            month.
//  FF1111  03/09/92  MDANGE  Change to use NIL closeout date
//                            from VFFSTY01.
//  FF1119  06/26/92  LDELUH  When add MCAT for makeups set
//                            fill rt & futr rto to 100.
//  FF367   01/14/93  JJUCH   Add edit for management region
//                            which will be entered in the
//                            country code field.
//  FF402   05/04/93  JJUCH   Default inline fill rate to 92
//                            when insert a new MCAT row.
//          09/10/93  JJUCH   Convert to CSP V4.1 version.
//  FF439   01/04/93  JJUCH   Fixed the problem of showing
//                            duplicate products in the same
//                            style group. (diff stygrp sname)
// 
//  FF175   12/05/96  DSMITH  Changed the date range fields
//                            fill characters from none to '0'.
//                            also changed FE0C557 to increment
//                            century if year = '00'.
// 
// *********************
Program FE0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0CW00 FE0CW00; // record
  FE0CW01 FE0CW01; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF4REC FF4REC; // record
  FF7REC FF7REC; // record
  FF8REC FF8REC; // record
  FF9REC FF9REC; // record
  FFFREC FFFREC; // record
  FFKREC FFKREC; // record
  FFSREC FFSREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG9REC FG9REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YPGTBL; // table
  use XPCTBL; // table
  use XCTTBL; // table
  use ZRGTBL {deleteAfterUse = yes}; // table
  use FE0CM.FE0CM001, // form
  		FE0CM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FE0CM001 initial; /* M001 input/output*/
    set FE0CW00 empty; /* Working storage*/
    set FE0CW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA6REC empty; /* Submit batch job parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FE0CW00.FE0CWSWF = "Y"; /* Format the map switch*/
    FE0CW00.FE0CWSWR = "N"; /* Request for data switch*/
    ;
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    ;
    if (FFWREC.YPGCD == " ") /* No type group passed*/
      ;
      FFWREC.YPGCD = "01"; /* Default type group code*/
      FFWREC.YPGABRV = "INLINE"; /* Default type group abbreviation*/
      ;
    end
    ;
    FFWREC.YSMXDV = "20"; /* default to nil*/
    FFWREC.YSMSMDSC = "NIL"; /* default to nil*/
    ;
    ;
    if (FFWREC.FFABEGMO != 0 /* Beginning month passed*/
     && FFWREC.FFAENDMO != 0 /* Ending month passed*/
     && FFWREC.YPGCD != " "  /* Type group code passed*/
     && FFWREC.XPCCD != " "  /* Category code passed*/
     && FFWREC.XCTCD != " "  /* Country code passed*/
     && FFWREC.YSMXDV != " ") /* Division group passed*/
      ;
      FE0CW00.FE0CWSWR = "Y"; /* Request for data switch*/
      ;
    end
    ;
    FE0CW01.FE0CWBMO = FFWREC.FFABEGMO; /* Beginning month*/
    FE0CW01.FE0CWEMO = FFWREC.FFAENDMO; /* Ending month*/
    ;
    FE0CW00.FE0CWLEF = 1; /* Scrolling left index*/
    ;
    FE0CM001.FE0CMMOS = 6; /* Default months in seasonin map*/
    FE0CW00.FE0CWMOS = 6;
                                     /* Default months in season in work area*/
    FE0CM001.FE0CMALL = "N"; /* Default all styles flag*/
    FE0CW00.FE0CWALL = "N"; /* Default all styles flag in work area*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0C001; /* Converse the main process*/
    ;
    FE0C000: FE0C000();
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0C001; /* Converse the main process*/
    ;
    ;
    FE0C001: FE0C001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0C001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FE0C

// Check the FROM application
Function FE0C000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP == "FE0C" /* same application*/
   || COMMAREA.CAFROMAP == "FG0A") /* From allowed application*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/
    ;
    XSNOWAY(); /* Invalid transfer was attempted*/
    ;
    ;
  end
  ;
  ;
end // end FE0C000

// List the rows in the table
Function FE0C001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0C100(); /* Obtain the data to display*/
  ;
  FE0C200(); /* Format and display the map*/
  ;
  FE0C300(); /* Check attention identifier*/
  ;
  FE0C400(); /* Reset fields to normal intensity*/
  ;
  FE0C500(); /* Verify the entered data*/
  ;
  FE0C600(); /* Process valid input request*/
  ;
  ;
end // end FE0C001

// Obtain the data to display
Function FE0C100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CW00.FE0CWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (FE0CM001.FE0CMALL == "Y")
    FE0C101(); /* Build up temp storage from VFFSTY01*/
  else
    FE0C105(); /* Build up temp storage from VPFHST01*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FE0CW00.XXXTSPAG = 1; /* Desired page number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FE0CW00.FE0CWSWR = "N"; /* Request for data switch*/
  ;
end // end FE0C100

// Build up temp storage VFFSTY01
Function FE0C101()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FE0CW00.XXXTSLEN = 3344; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FE0C110(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the search key informations in the map*/
   /* ------------------------------------------------------------*/
  ;
  FE0CW01.FE0CWBMO = FFWREC.FFABEGMO; /* Beginning date*/
  FE0CW01.FE0CWEMO = FFWREC.FFAENDMO; /* Ending date*/
  FE0CW00.FE0CWMOS = FE0CM001.FE0CMMOS; /* Months in the season*/
  FE0CW00.FE0CWALL = FE0CM001.FE0CMALL; /* All styles flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Load the month heading*/
   /* ------------------------------------------------------------*/
  ;
  FE0C115();
  ;
   /* ------------------------------------------------------------*/
   /* If style group was specified, obtain a list of style colors*/
   /* for that style group, otherwise, obtain a list of style*/
   /* groups and style colors for the specified category.*/
   /* Then, use each style color to retrieve the existing monthly*/
   /* style color forecasts from DFCAST.Vmsty001.*/
   /* ------------------------------------------------------------*/
  ;
  FE0CW00.FE0CWCR1 = "N"; /* Initialize end of cursor switch*/
  FE0CW00.FE0CWIXM = 1; /* Initialize the map index*/
  FE0CW00.SYBSTGNB = " "; /* Initialize the style group*/
  FE0CW00.FE0CW1SD = 0; /* Earliest 1st sales month*/
  FE0CW00.FE0CWCOD = 0; /* latest proj. closeout month*/
  ;
  if (FFWREC.SYBSTGNB != " ") /* Style group was specified*/
    ;
    FE0C102(); /* obtain data for specified style group*/
    ;
  else
    ;
    FE0C103(); /* obtain data for specified category*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CW00.FE0CWIXM > 1) /* Page was formatted*/
    ;
    FE0C180(); /* Calculate the grand totals*/
    ;
    FE0C190(); /* Add page to temporary storage*/
    ;
  else
    ;
    if (FE0CW00.FE0CWIXM == 1) /* Page was formatted*/
      ;
      /* ---------------------------------------------------*/
       /* Move the month totals from previous page to tsq*/
      /* ---------------------------------------------------*/
      ;
      FE0CW00.FE0CWIXT = FE0CW00.FE0CWLEF;
      FE0CW00.FE0CWIXE = FE0CW00.FE0CWIXT + FE0CW00.FE0CWEND - 1;
      FE0CW01.FE0CWDES[1] = "   TOTAL"; /* Total line desc.*/
      FE0CW01.FE0CWGFL[1] = "N"; /* Style group flag*/
      ;
      while (FE0CW00.FE0CWIXT <= FE0CW00.FE0CWIXE)
        ;
        FE0CW01.FE0CWFCS[FE0CWIXT] = FE0CW00.FE0CWMTL[FE0CWIXT];
        FFXREC.FFXNUMB = FE0CW01.FE0CWFCS[FE0CWIXT];
        XSFFS10();
        FE0CW01.FE0CWFCT[FE0CWIXT] = FFXREC.FFXCHAR;
        ;
        FE0CW00.FE0CWMTL[FE0CWIXT] = 0; /* reset month tot chng flag*/
        FE0CW00.FE0CWMTF[FE0CWIXT] = "N"; /* clear month total*/
        ;
        FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT + 1;
        ;
      end
      ;
      FE0C190(); /* Add page to temporary storage*/
    end
    ;
  end
  ;
end // end FE0C101

// Build style group  - VFFSTY01
Function FE0C102()
   /* ----------------------------------------------------------*/
   /* Process the specified style group.*/
   /* ----------------------------------------------------------*/
  ;
  FE0C140(); /* Select and open VFFSTY01 with style*/
                                 /* group*/
  FE0C141(); /* Fetch next row in VFFSTY01*/
  if (FE0CW00.FE0CWCR1 == "Y")
    return;
  end
  ;
  while (FE0CW00.FE0CWCR1 == "N") /* Until end of cursor*/
    ;
    set FG9REC empty;
    FG9REC.SY1STNBR = FF3REC.SY1STNBR;
    FG9REC.SY2CLRID = FF3REC.SY2CLRID;
    FG9REC.XDMCD = FF3REC.XDMCD;
    FE0CS35(); /* Select unique VPFHST01*/
    if (SQLCA.VAGen_SQLCODE == 100)
      FE0CS07(); /* Process active product*/
    end
    FE0C141(); /* Fetch next row in VFFSTY01*/
    ;
  end
  ;
  FE0C142(); /* Close VFFSTY01*/
  ;
end // end FE0C102

// Obtain data for cat VFFSTY01
Function FE0C103()
   /* ----------------------------------------------------------*/
   /* Process all style groups within the specified category.*/
   /* ----------------------------------------------------------*/
  ;
  FE0C150(); /* Select VFFSTY01 with category*/
  ;
  FE0CW00.FE0CWCR2 = "N"; /* Initialize end of cursor switch*/
  ;
  FE0C151(); /* Fetch next row in VFFSTY01*/
  if (FE0CW00.FE0CWCR2 == "Y")
    return;
  end
  ;
  while (FE0CW00.FE0CWCR2 == "N") /* Until end of cursor*/
    ;
    FFWREC.SYBSTGNB = FF3REC.SYBSTGNB;
                                   /* Save the current style grp*/
    ;
    FE0C140(); /* Select and open VFFSTY01 with style*/
                                   /* group*/
    ;
    FE0CW00.FE0CWCR1 = "N";
                                   /* Reset the end of cursor switch*/
    FE0C141(); /* Fetch next row in VFFSTY01*/
    while (FE0CW00.FE0CWCR1 == "N") /* Until end of cursor*/
      ;
      set FG9REC empty;
      FG9REC.SY1STNBR = FF3REC.SY1STNBR;
      FG9REC.SY2CLRID = FF3REC.SY2CLRID;
      FG9REC.XDMCD = FF3REC.XDMCD;
      FE0CS35(); /* select unique VPFHST01*/
      if (SQLCA.VAGen_SQLCODE == 100)
        FE0CS07(); /* Process active product*/
      end
      FE0C141(); /* Fetch next row in VFFSTY01*/
      ;
    end
    ;
    FE0C142(); /* Close VFFSTY01-style group*/
    ;
    FE0C151(); /* Fetch next row in VFFSTY01*/
    ;
  end
  ;
  FFWREC.SYBSTGNB = "      "; /* Clear the style group field*/
  FE0C152(); /* Close VFFSTY01-cat*/
end // end FE0C103

// Build up temp storage VPFHST01
Function FE0C105()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FE0CW00.XXXTSLEN = 3344; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FE0C110(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the search key informations in the map*/
   /* ------------------------------------------------------------*/
  ;
  FE0CW01.FE0CWBMO = FFWREC.FFABEGMO; /* Beginning date*/
  FE0CW01.FE0CWEMO = FFWREC.FFAENDMO; /* Ending date*/
  FE0CW00.FE0CWMOS = FE0CM001.FE0CMMOS; /* Months in the season*/
  FE0CW00.FE0CWALL = FE0CM001.FE0CMALL; /* All styles flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Load the month heading*/
   /* ------------------------------------------------------------*/
  ;
  FE0C115();
  ;
   /* ------------------------------------------------------------*/
   /* If style group was specified, obtain a list of style colors*/
   /* for that style group, otherwise, obtain a list of style*/
   /* groups and style colors for the specified category.*/
   /* Then, use each style color to retrieve the existing monthly*/
   /* style color forecasts from DFCAST.Vmsty001.*/
   /* ------------------------------------------------------------*/
  ;
  FE0CW00.FE0CWCR1 = "N"; /* Initialize end of cursor switch*/
  FE0CW00.FE0CWIXM = 1; /* Initialize the map index*/
  FE0CW00.SYBSTGNB = " "; /* Initialize the style group*/
  FE0CW00.FE0CW1SD = 0; /* Earliest 1st sales month*/
  FE0CW00.FE0CWCOD = 0; /* Latest projected closeout month*/
  ;
  if (FFWREC.SYBSTGNB != " ") /* Style group was specified*/
    ;
    /* ----------------------------------------------------------*/
     /* Process the specified style group.*/
    /* ----------------------------------------------------------*/
    ;
    FE0C106(); /* Obtain data for style group*/
    ;
  else
    /* ----------------------------------------------------------*/
     /* Process all style groups within the specified category.*/
    /* ----------------------------------------------------------*/
    ;
    FE0C107(); /* Obtain data for category*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CW00.FE0CWIXM > 1) /* Page was formatted*/
    ;
    FE0C180(); /* Calculate the grand totals*/
    ;
    FE0C190(); /* Add page to temporary storage*/
    ;
  else
    ;
    if (FE0CW00.FE0CWIXM == 1) /* Page was formatted*/
      ;
      /* ---------------------------------------------------*/
       /* Move the month totals from previous page to tsq*/
      /* ---------------------------------------------------*/
      ;
      FE0CW00.FE0CWIXT = FE0CW00.FE0CWLEF;
      FE0CW00.FE0CWIXE = FE0CW00.FE0CWIXT + FE0CW00.FE0CWEND - 1;
      FE0CW01.FE0CWDES[1] = "   TOTAL"; /* Total line desc.*/
      FE0CW01.FE0CWGFL[1] = "N"; /* Style group flag*/
      ;
      while (FE0CW00.FE0CWIXT <= FE0CW00.FE0CWIXE)
        ;
        FE0CW01.FE0CWFCS[FE0CWIXT] = FE0CW00.FE0CWMTL[FE0CWIXT];
        FFXREC.FFXNUMB = FE0CW01.FE0CWFCS[FE0CWIXT];
        XSFFS10();
        FE0CW01.FE0CWFCT[FE0CWIXT] = FFXREC.FFXCHAR;
        ;
        FE0CW00.FE0CWMTL[FE0CWIXT] = 0; /* reset month tot chng flag*/
        FE0CW00.FE0CWMTF[FE0CWIXT] = "N"; /* clear month total*/
        ;
        FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT + 1;
        ;
      end
      ;
      FE0C190(); /* Add page to temporary storage*/
    end
    ;
  end
  ;
end // end FE0C105

// Obtain data sty group VPFHST01
Function FE0C106()
   /* ----------------------------------------------------------*/
   /* Process the specified style group.*/
   /* ----------------------------------------------------------*/
  ;
  FE0C143(); /* Select and open VPFHST01 with style*/
                                 /* group*/
  FE0C144(); /* Fetch next row in VPFHST01*/
  if (FE0CW00.FE0CWCR1 == "Y") /* Until end of cursor*/
    return;
  end
  ;
  while (FE0CW00.FE0CWCR1 == "N") /* Until end of cursor*/
    ;
    FE0CS08(); /* Process active product*/
    ;
    FE0C144(); /* Fetch next row in VPFHST01*/
    ;
  end
  ;
  FE0C145(); /* Close VPFHST01*/
  ;
end // end FE0C106

// Obtain data category VPFHST01
Function FE0C107()
   /* ----------------------------------------------------------*/
   /* Process all style groups within the specified category.*/
   /* ----------------------------------------------------------*/
  ;
  FE0C153(); /* Select VPFHST01 with category*/
  ;
  FE0CW00.FE0CWCR2 = "N"; /* Initialize end of cursor switch*/
  FFWREC.SYBSTGNB = " "; /* Initialize style group number*/
  ;
  FE0C154(); /* Fetch next row in VPFHST01*/
  if (FE0CW00.FE0CWCR2 == "Y") /* Until end of cursor*/
    return;
  end
  ;
  while (FE0CW00.FE0CWCR2 == "N") /* Until end of cursor*/
    if (FG9REC.SYBSTGNB != FE0CW00.SYBSTGNB)
      ;
      FFWREC.SYBSTGNB = FG9REC.SYBSTGNB;
                                   /* Save the current style grp*/
      ;
      FE0C143(); /* Select and open vpfhst01 with style*/
                                   /* group*/
      ;
      FE0CW00.FE0CWCR1 = "N";
                                   /* Reset the end of cursor switch*/
      FE0C144(); /* Fetch next row in vpfhst01*/
      while (FE0CW00.FE0CWCR1 == "N") /* Until end of cursor*/
        ;
        FE0CS08(); /* Process active product*/
        FE0C144(); /* Fetch next row in vpfhst01*/
        ;
      end
      ;
      FE0C145(); /* Close vpfhst01-style group*/
      ;
    end
    ;
    FE0C154(); /* Fetch next row in vpfhst01*/
    ;
  end
  ;
  FFWREC.SYBSTGNB = "      "; /* Clear the style group field*/
  ;
  FE0C155(); /* Close vpfhst01-cat*/
end // end FE0C107

// Purge temporary storage
Function FE0C110()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0CW01 empty; /* M001 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FE0CW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FE0CW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C110

// Load the month heading
Function FE0C115()
  ;
  FE0CW00.FE0CWEND = 1; /* Initialize end of range index*/
  FE0CW00.FE0CWIXM = 1; /* Initialize the map index*/
  FE0CW00.FE0CWHDG[1] = FE0CW01.FE0CWBMO; /* First month*/
  ;
  ;
  while (FE0CW00.FE0CWIXM <= 12 /* Until reach 12 months*/
   && FE0CW00.FE0CWHDG[FE0CWIXM] < FE0CW01.FE0CWEMO) /* or end of range*/
    ;
    FE0CW00.FE0CWIXM = FE0CW00.FE0CWIXM + 1; /* Increment the heading index*/
    ;
    FE0CW00.FE0CWDAT = FE0CW01.FE0CWBMO + FE0CW00.FE0CWIXM - 1;
    ;
    if (FE0CW00.FE0CWDMM > 12)
      FE0CW00.FE0CWDMM = FE0CW00.FE0CWDMM - 12;
      ;
      FE0CW00.FE0CWDYY = FE0CW00.FE0CWDYY + 1; /* Next year*/
      if (FE0CW00.FE0CWDYY == 0) /* Intro a new century*/
        ;
        FE0CW00.FE0CWDCC = FE0CW00.FE0CWDCC + 1; /* Next century*/
        ;
      end
      ;
    end
    ;
    FE0CW00.FE0CWHDG[FE0CWIXM] = FE0CW00.FE0CWDAT;
    FE0CW00.FE0CWEND = FE0CW00.FE0CWIXM; /* Set end of rang index*/
    ;
  end
  ;
end // end FE0C115

// Sel and open VFFSTY01 cursor
Function FE0C140()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF3REC empty; /* Clear row storage area*/
  ;
  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group code*/
  FF3REC.XLCCD = "10"; /* Life cycle code*/
  ;
  FF3REC.YSMXDV = "*"; /* div group*/
  ;
  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C140

// Fetch next row in VFFSTY01
Function FE0C141()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FE0CW00.FE0CWCR1 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "141"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C141

// Close cursor for VFFSTY01 grp
Function FE0C142()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "142"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0C142

// Sel & open VPFHST01 cursor
Function FE0C143()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FG9REC empty; /* Clear row storage area*/
  ;
  FG9REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FG9REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group code*/
  ;
  FG9REC.YSMXDV = "20"; /* div group*/
  ;
  try
    call "IO5430" ("S1", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "143"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C143

// Fetch VPFHST01 cursor
Function FE0C144()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5430" ("N1", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FE0CW00.FE0CWCR1 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "144"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C144

// Close VPFHST01 cursor
Function FE0C145()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5430" ("C1", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "145"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0C145

// Sel and open VFFSTY01 - CAT
Function FE0C150()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF3REC empty; /* Clear row storage area*/
  ;
  FF3REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.XLCCD = "10"; /* Life cycle code*/
  FF3REC.YSMXDV = "*"; /* div group*/
  ;
  try
    call "IO3990" ("S2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "150"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C150

// Fetch next row in VFFSTY01
Function FE0C151()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("N2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FE0CW00.FE0CWCR2 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "151"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C151

// Close cursor VFFSTY01 - CAT
Function FE0C152()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("C2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "152"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0C152

// Sel and open VPFHST01 cursor
Function FE0C153()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FG9REC empty; /* Clear row storage area*/
  ;
  FG9REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FG9REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FG9REC.YSMXDV = "20"; /* div group*/
  ;
  try
    call "IO5430" ("S2", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "153"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C153

// Fetch VPFHST01 cursor
Function FE0C154()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5430" ("N2", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FE0CW00.FE0CWCR2 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "154"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C154

// Close VPFHST01 cursor
Function FE0C155()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5430" ("C2", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "155"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0C155

// Access VMSTY001 table
Function FE0C170()
  FE0C171(); /* Select & open cursor for VMSTY001*/
  ;
  FE0CW00.FE0CWCR3 = "N"; /* End of cursor switch*/
  ;
  FE0C172(); /* Fetch next row in VMSTY001*/
  ;
  while (FE0CW00.FE0CWCR3 == "N") /* Until end of cursor*/
    ;
    FE0C172(); /* Fetch next row in VMSTY001*/
    ;
  end
  ;
  FE0C173(); /* Close the cursor for VMSTY001*/
  ;
  ;
end // end FE0C170

// Sel & open cursor for VMSTY001
Function FE0C171()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF9REC empty; /* Clear row storage area*/
  ;
  FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FE0CW01.FE0CWSTY[FE0CWIXM]; /* Style number*/
  FF9REC.SY2CLRID = FE0CW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FE0CW00.XDMCD; /* Dimension code*/
  ;
  set FFFREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  ;
  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "171"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C171

// Fetch next 's1' VMSTY001
Function FE0C172()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF9REC empty;
  ;
  try
    call "IO3740" ("N1", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FF9REC.FF4FCTMO in FE0CW00.FE0CWHDG)
        ;
        FE0CWIXF = FE0CWIXM - 1; /* Find the row it is at*/
        FE0CWIXF = FE0CWIXF * 12 + sysVar.arrayIndex; /* find the position it is at*/
        FE0CW01.FE0CWFCS[FE0CWIXF] = FF9REC.FF6PRFCT;
                                   /* Save the fcst*/
        FE0CW01.FE0CWCNT[FE0CWIXF] = FF9REC.ZZZCHGCT; /* Save chng cnt*/
        ;
        FFXREC.FFXNUMB = FF9REC.FF6PRFCT;
        XSFFS10(); /* Convert the value from NUM to CHAR*/
        FE0CW01.FE0CWFCT[FE0CWIXF] = FFXREC.FFXCHAR;
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FE0CW00.FE0CWCR3 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "172"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C172

// Close the 's1' cursor VMSTY001
Function FE0C173()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "C1"; /* Function code*/
  ;
  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "173"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0C173

// Access VMSTY001 table - SUM
Function FE0C174()
  FE0CW00.FE0CWIXN = 1; /* set index to 1*/
  while (FE0CW00.FE0CWIXN <= 12) /* Until reach 12 months*/
    ;
    if (FE0CW00.FE0CWHDG[FE0CWIXN] > 0) /* month exists*/
      FE0C175(); /* select sum VMSTY001 all ctrys*/
    end
    FE0CW00.FE0CWIXN = FE0CW00.FE0CWIXN + 1;
    ;
  end
end // end FE0C174

// Select 'SS' sum VMSTY001
Function FE0C175()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF9REC empty; /* Clear row storage area*/
  ;
  FF9REC.XCTCD = "*"; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FE0CW01.FE0CWSTY[FE0CWIXM]; /* Style number*/
  FF9REC.SY2CLRID = FE0CW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FE0CW00.XDMCD; /* Dimension code*/
  ;
  set FFFREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FE0CW00.FE0CWHDG[FE0CWIXN]; /* Beginning month*/
  FFFREC.FFFENDMO = FE0CW00.FE0CWHDG[FE0CWIXN]; /* Ending month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  ;
  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FE0CWIXF = FE0CWIXM - 1; /* Find the row it is at*/
      FE0CWIXF = FE0CWIXF * 12 + FE0CWIXN; /* find the position it is at*/
      FE0CW01.FE0CWFCS[FE0CWIXF] = FF9REC.FF6PRFCT; /* Save the fcst*/
      FE0CW01.FE0CWCNT[FE0CWIXF] = FF9REC.ZZZCHGCT; /* Save chng cnt*/
      ;
      FFXREC.FFXNUMB = FF9REC.FF6PRFCT;
      XSFFS10(); /* Convert the value from NUM to CHAR*/
      FE0CW01.FE0CWFCT[FE0CWIXF] = FFXREC.FFXCHAR;
      ;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100
       || SQLCA.VAGen_SQLCODE == -305)
        return; /* Return to previous process*/
      end
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "175"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C175

// Calculate the grand total
Function FE0C180()
  ;
   /* --------------------------------------------------------*/
   /* Calculate the total forecast for each month. If the*/
   /* style colors within the style group are across two*/
   /* pages, bring in the accumulate totals and change flags.*/
   /* --------------------------------------------------------*/
  ;
  if (FE0CW00.FE0CWIXM == 1)
    FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXM;
  else
    FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXM - 1; /* Initialize map index*/
  end
  FE0CW01.FE0CWSTY[FE0CWIXM] = " ";
  FE0CW01.FE0CWDES[FE0CWIXM] = "   TOTAL"; /* Total line description*/
  FE0CW01.FE0CWGFL[FE0CWIXM] = "N"; /* Style group flag*/
  ;
  while (FE0CW00.FE0CWIXW >= 1 /* Until top of the page*/
   && FE0CW01.FE0CWGFL[FE0CWIXW] == "N") /* or reach style grp*/
    ;
    FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXW - 1;
    FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF * 12 + 1;
    FE0CW00.FE0CWIXE = FE0CW00.FE0CWIXF + FE0CW00.FE0CWEND - 1;
    ;
    FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXM - 1;
    FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT * 12 + 1;
    ;
    FE0CW00.FE0CWCLM = 1; /* Initialize temp total idx*/
    ;
    while (FE0CW00.FE0CWIXF <= FE0CW00.FE0CWIXE)
      ;
      FE0CW00.FE0CWTOT = FE0CW01.FE0CWFCS[FE0CWIXT]; /* Total qty*/
      FE0CW00.FE0CWFCS = FE0CW01.FE0CWFCS[FE0CWIXF]; /* Mo. fcst qty*/
      FE0CW01.FE0CWFCS[FE0CWIXT] = FE0CW00.FE0CWTOT + FE0CW00.FE0CWFCS;
      ;
      if (FE0CW00.FE0CWMTF[FE0CWCLM] == "Y") /* Month total changed*/
        ;
        FE0CW00.FE0CWTOT = FE0CW01.FE0CWFCS[FE0CWIXT]; /* Total qty*/
        FE0CW00.FE0CWFCS = FE0CW00.FE0CWMTL[FE0CWCLM];
                                   /* Mo. fcst qty*/
        FE0CW01.FE0CWFCS[FE0CWIXT] = FE0CW00.FE0CWTOT + FE0CW00.FE0CWFCS;
        ;
        FE0CW00.FE0CWMTF[FE0CWCLM] = "N"; /* Reset month tot chng flg*/
        FE0CW00.FE0CWMTL[FE0CWCLM] = 0; /* Clear the month tot*/
        ;
      end
      ;
      FFXREC.FFXNUMB = FE0CW01.FE0CWFCS[FE0CWIXT];
      XSFFS10(); /* Convert from NUM to CHAR*/
      FE0CW01.FE0CWFCT[FE0CWIXT] = FFXREC.FFXCHAR;
      ;
      FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF + 1;
      FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT + 1;
      FE0CW00.FE0CWCLM = FE0CW00.FE0CWCLM + 1;
      ;
    end
    ;
    FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW - 1;
    ;
  end
  ;
  FE0CW00.FE0CWNPG = 0; /* Clear the next page number*/
  ;
  FE0CS06(); /* Calculate subtotals & totals*/
  ;
  FE0CW00.FE0CWIXM = FE0CW00.FE0CWIXM + 1; /* Increment map index*/
  ;
end // end FE0C180

// Add page to temp storage
Function FE0C190()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0CW01.XXXTSLEN = FE0CW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  if (FE0CW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/
    ;
    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/
    ;
  end
  ;
  try
    call "TA0050" (FE0CW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FE0CW01 empty; /* M001 display storage*/
    move "     " to FE0CW01.FE0CWFCT[1] for all; /* Initialize the forecast qty field*/
    ;
    /* ---------------------------------------------------------*/
     /* Save the search information in map display storage queue*/
    /* ---------------------------------------------------------*/
    FE0CW01.FE0CWBMO = FFWREC.FFABEGMO; /* Beginning month*/
    FE0CW01.FE0CWEMO = FFWREC.FFAENDMO; /* Ending month*/
    FE0CW00.FE0CWALL = FE0CM001.FE0CMALL; /* All styles flag*/
    FE0CW00.FE0CWMOS = FE0CM001.FE0CMMOS; /* Months in season*/
    ;
    FE0CW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FE0CW00.FE0CWIXM = 1; /* Display line number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "190"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C190

// Format and converse the map
Function FE0C200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CW00.FE0CWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FE0CW00.FE0CWSWF == "Y") /* Map must be formatted*/
      FE0C210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0CM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0CM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FE0CM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FE0CM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0CM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FE0CM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0CM001.CAITEM; /* Application data*/
  ;
  ;
end // end FE0C200

// Format the display data
Function FE0C210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0CM001 initial; /* M001 input/output area*/
  ;
  FE0CW00.FE0CWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FE0CW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (FE0CW00.FE0CWSWU == "Y") /* Current page was changed*/
        ;
        FE0CS03(); /* Update temporary storage page*/
        ;
        FE0CW00.FE0CWSWU = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FE0CW00.XXXTSPAG > FE0CW00.TA5TSQIX) /* Desired greater highest*/
        FE0CW00.XXXTSPAG = FE0CW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      TA5REC.TA5TSQIX = FE0CW00.XXXTSPAG;
      ;
      FE0CS04(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FE0CM001.XXXLITPG skip; /* "PAGE" literal*/
    FE0CM001.XXXTSPAG = FE0CW00.XXXTSPAG; /* Current page*/
    set FE0CM001.XXXLITOF skip; /* "OF" literal*/
    FE0CM001.TA5TSQIX = FE0CW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0CM001.FE0CMBMO = FE0CW01.FE0CWBMY; /* Beginning month*/
  FE0CM001.FE0CMEMO = FE0CW01.FE0CWEMY; /* Ending month*/
  ;
  FE0CM001.FE0CMMOS = FE0CW00.FE0CWMOS; /* Months in season*/
  ;
  FE0CM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FE0CM001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
  ;
  FE0CM001.XPCCD = FFWREC.XPCCD; /* Category code*/
  FE0CM001.XPCABRV = FFWREC.XPCABRV; /* Category abbreviation*/
  ;
  FE0CM001.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FE0CM001.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/
  ;
  FE0CM001.FE0CMALL = FE0CW00.FE0CWALL; /* All styles flag*/
  ;
  FE0CM001.XCTCD = FFWREC.XCTCD; /* Country code*/
  FE0CM001.XCTABRV = FFWREC.XCTABRV; /* Country abbreviation*/
  if (FFWREC.XCTCD == " ") /* Country code blank*/
    FE0CM001.XCTABRV = "SUM"; /* Country abbreviation*/
  end
  ;
  FE0CM001.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FE0CM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Division group desc*/
  ;
  if (FE0CW00.TA5TSQIX != 0) /* If data obtained*/
    FE0CM001.FE0CM1SM = FE0CW00.FE0CW1SM; /* Projected intro. month*/
    FE0CM001.FE0CMCOM = FE0CW00.FE0CWCOM; /* Projected closeout month*/
  end
  ;
  set FE0CM001.FE0CMBMO normal; /* Beginning month*/
  set FE0CM001.FE0CMEMO normal; /* Ending month*/
  set FE0CM001.YPGCD normal; /* Type group code*/
  set FE0CM001.XPCCD normal; /* Category code*/
  set FE0CM001.SYBSTGNB normal; /* Style group number*/
  set FE0CM001.FE0CMALL normal; /* All styles flag*/
  set FE0CM001.XCTCD normal; /* Country code*/
  ;
   /* ------------------------------------------------------*/
   /* Move the heading*/
   /* ------------------------------------------------------*/
  ;
  FE0CW00.FE0CWIXF = 1; /* Initialize the map index*/
  FE0CW00.FE0CWIXM = FE0CW00.FE0CWLEF;
                                   /* Initialize the work area index*/
  ;
  FE0CW00.FE0CWRIG = FE0CW00.FE0CWLEF + FE0CW00.FE0CWMOS - 1;
  ;
  while (FE0CW00.FE0CWIXM <= FE0CW00.FE0CWRIG
   /* Until end of page (right end)*/
   && FE0CW00.FE0CWIXM <= FE0CW00.FE0CWEND) /* or end of range*/
    ;
    FE0CM001.FE0CMHD[FE0CWIXF] = FE0CW00.FE0CWHYM[FE0CWIXM];
    set FE0CM001.FE0CMHD[FE0CWIXF] skip;
    ;
    FE0CW00.FE0CWIXM = FE0CW00.FE0CWIXM + 1; /* Increment the map index*/
    FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF + 1; /* Increment the work area index*/
    ;
  end
  ;
   /* ------------------------------------------------------*/
   /* Move detail lines*/
   /* ------------------------------------------------------*/
  ;
  FE0CW00.FE0CWIXM = 1; /* Initialize the map index*/
  ;
  while (FE0CW00.FE0CWIXM <= 14)
    if (FE0CW01.FE0CWDES[FE0CWIXM] > " "
     || FE0CW01.FE0CWSTY[FE0CWIXM] > " ")
      ;
      FE0CM001.FE0CMSTY[FE0CWIXM] = FE0CW01.FE0CWSTY[FE0CWIXM];
      FE0CM001.FE0CMDES[FE0CWIXM] = FE0CW01.FE0CWDES[FE0CWIXM];
      ;
      if (FE0CW01.FE0CWGFL[FE0CWIXM] == "N") /* Process color or total line*/
        ;
        /* -------------------------------------------------*/
         /* Move forecast quantity fields. For the first*/
         /* total line on the page, need to check if any*/
         /* monthly fcst within the same style group on the*/
         /* previous page has been updated and accomodate*/
         /* the changes to the total on the current page.*/
        /* -------------------------------------------------*/
        ;
        FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXM - 1;
        FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF * 6 + 1;
        FE0CW00.FE0CWIXN = FE0CW00.FE0CWIXF + FE0CW00.FE0CWMOS - 1;
        FE0CW00.FE0CWIXE = FE0CW00.FE0CWIXF + 6 - 1;
        ;
        FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXM - 1;
        FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW * 12 + FE0CW00.FE0CWLEF;
        FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXM - 1;
        FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT * 12 + FE0CW00.FE0CWEND;
        ;
        FE0CW00.FE0CWCLM = FE0CW00.FE0CWLEF; /* Initialize accum tot idx*/
        ;
        while (FE0CW00.FE0CWIXF <= FE0CW00.FE0CWIXE /* Until end of page*/
         && FE0CW00.FE0CWIXW <= FE0CW00.FE0CWIXT) /* or end of range*/
          ;
          FE0CM001.FE0CMFCS[FE0CWIXF] = FE0CW01.FE0CWFCT[FE0CWIXW];
          ;
          if (FE0CW01.FE0CWDES[FE0CWIXM] != "   TOTAL") /* Not total line*/
            ;
            if (FE0CW00.FE0CWIXF <= FE0CW00.FE0CWIXN) /* Within the page*/
              ;
              set FE0CM001.FE0CMFCS[FE0CWIXF] normal; /* Unprotected*/
              ;
            else
              ;
              set FE0CM001.FE0CMFCS[FE0CWIXF] initialAttributes; /* Dark*/
              ;
            end
            ;
          else
            ;
            if (FE0CW00.FE0CWIXF <= FE0CW00.FE0CWIXN) /* Within the page*/
              ;
              set FE0CM001.FE0CMFCS[FE0CWIXF] skip; /* Make it visible*/
              ;
            else
              ;
              set FE0CM001.FE0CMFCS[FE0CWIXF] initialAttributes; /* Make it visible*/
              ;
            end
            ;
          end
          ;
          FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF + 1;
          FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW + 1;
          FE0CW00.FE0CWCLM = FE0CW00.FE0CWCLM + 1;
          ;
        end
        ;
        FE0CS06(); /* Calculate the totals and subtotals*/
        ;
        /* ----------------------------------------------------*/
         /* Move subtotal and grand total quantity*/
        /* ----------------------------------------------------*/
        ;
        FE0CM001.FE0CMSUB[FE0CWIXM] = FE0CW01.FE0CWSBC[FE0CWIXM];
        FE0CM001.FE0CMGND[FE0CWIXM] = FE0CW01.FE0CWGNC[FE0CWIXM];
        ;
        set FE0CM001.FE0CMGND[FE0CWIXM] skip; /* Visible*/
        ;
      end
      ;
    end
    ;
    FE0CW00.FE0CWIXM = FE0CW00.FE0CWIXM + 1;
    ;
  end
  ;
   /* -------------------------------------------------------*/
   /* Protect those fields which are under the months before*/
   /* projected intro month and after the projected closeout*/
   /* month (include).*/
   /* -------------------------------------------------------*/
  ;
  FE0CW00.FE0CWIXW = 1; /* Initialize fcst field index*/
  ;
  while (FE0CW00.FE0CWIXW <= 14) /* Until end of page*/
    if (FE0CW01.FE0CWSTY[FE0CWIXW] == " " /* End of list*/
     && FE0CW01.FE0CWDES[FE0CWIXW] == " ")
      ;
    else
      FE0CW00.FE0CWIXM = FE0CW00.FE0CWLEF;
                                   /* Initialize heading index*/
      FE0CW00.FE0CWIXF = 1;
      ;
      while (FE0CW00.FE0CWIXM <= FE0CW00.FE0CWRIG /* Until end of page*/
       && FE0CW00.FE0CWIXM <= FE0CW00.FE0CWEND) /* or end of range*/
        ;
        if (FE0CW00.FE0CWHDG[FE0CWIXM] < FE0CW01.FE0CW1SD[FE0CWIXW]
         || FE0CW00.FE0CWHDG[FE0CWIXM] >= FE0CW01.FE0CWCOD[FE0CWIXW])
          ;
          FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXW - 1;
          FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT * 6 + FE0CW00.FE0CWIXF;
          ;
          set FE0CM001.FE0CMFCS[FE0CWIXT] skip;
          ;
        end
        ;
        FE0CW00.FE0CWIXM = FE0CW00.FE0CWIXM + 1; /* Increment the heading index*/
        FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF + 1;
                                   /* Increment the fcst index*/
        ;
      end
      ;
    end
    FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW + 1; /* Increment the map index*/
    ;
  end
  ;
end // end FE0C210

// Check attention identifier
Function FE0C300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FE0CW00.FE0CWSWR == "Y") /* Request for data*/
      set FE0CW01 empty; /* M001 display storage*/
    end
    ;
    FE0CW00.FE0CWSWF = "Y"; /* Format the map switch*/
    FE0CW00.FE0CWSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (FE0CW00.FE0CWMST == "Y"
       || FE0CW00.FE0CWMST == " ")
        ;
        FE0C110(); /* Purge temporary storage*/
        ;
        XSFFS01(); /* Exit to another application*/
        ;
        set FE0CM001.CATOAP cursor, bold; /* Highlight*/
        ;
      else
        ;
        if (FE0CW00.FE0CWERR == "Y")
                                   /* Warning msg already shown once*/
          ;
          FE0CW00.FE0CWERR = "N"; /* Clear the error switch*/
          FE0C110(); /* Purge temporary storage*/
          XSFFS01(); /* Exit to another application*/
          set FE0CM001.CATOAP cursor, bold; /* Highlight*/
          ;
        else
          ;
          COMMAREA.CATOAP = " "; /* TO application*/
          FFWREC.XXXMODID = "300"; /* Module identification*/
          converseLib.validationFailed(369); /* Indicate update master fcst*/
          FE0CW00.FE0CWERR = "Y"; /* Set the error switch*/
          ;
        end
        ;
      end
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FG0A"; /* Return to appliction*/
      COMMAREA.CAITEM = "FE0CM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    if (FE0CW00.FE0CWMST == "Y"
     || FE0CW00.FE0CWMST == " ")
      ;
      FE0C110(); /* Purge temporary storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
    else
      ;
      if (FE0CW00.FE0CWERR == "Y") /* Warning msg already shown once*/
        ;
        FE0CW00.FE0CWERR = "N"; /* Clear the error switch*/
        FE0C110(); /* Purge temporary storage*/
        XSFFS01(); /* Exit to another application*/
        ;
      else
        ;
        COMMAREA.CATOAP = " "; /* TO application*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(369); /* Indicate update master fcst*/
        FE0CW00.FE0CWERR = "Y"; /* Set the error switch*/
        ;
      end
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, reset the error message switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FE0CW00.FE0CWERR = "N";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end FE0C300

// Reset highlighted fields
Function FE0C400()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0CM001.FE0CMMOS initialAttributes; /* Months in season*/
  ;
  ;
  set FE0CM001.FE0CMBMO normal; /* Beginning month*/
  set FE0CM001.FE0CMEMO normal; /* Ending month*/
  ;
  set FE0CM001.YPGCD normal; /* Type group code*/
  set FE0CM001.XPCCD normal; /* Category code*/
  set FE0CM001.SYBSTGNB normal; /* Style group code*/
  set FE0CM001.FE0CMALL normal; /* All styles flag*/
  set FE0CM001.XCTCD normal; /* Country code*/
  ;
  ;
  set FE0CM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FE0CM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  FE0CW00.FE0CWIXT = FE0CM001.FE0CMMOS + 1; /* Initial range index*/
  ;
  if (" " in FE0CM001.FE0CMHD) /* Find the position of end of range*/
    FE0CW00.FE0CWIXT = sysVar.arrayIndex;
  end
  ;
  FE0CW00.FE0CWIXM = 1;
  ;
  while (FE0CW00.FE0CWIXM <= 14 /* Until end of page*/
   && FE0CM001.FE0CMDES[FE0CWIXM] != " ") /* or the last row*/
    ;
    if (FE0CW01.FE0CWGFL[FE0CWIXM] == "N") /* Not style group row*/
      ;
      FE0C410(); /* Reset the forecast field*/
      ;
    end
    ;
    FE0CW00.FE0CWIXM = FE0CW00.FE0CWIXM + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CM001.YPGCD == "?" /* Type group list requested*/
   || FE0CM001.XPCCD == "?" /* Category list requested*/
   || FE0CM001.XCTCD == "?") /* Country list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of ypg codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CM001.YPGCD == "?") /* product list requested*/
    ;
    XPXX001(); /* init for pop up window*/
    ;
    XX0XW02.XX0XWHDR = "    TYPE GRP";
    XX0XW02.YPGFFFL = "Y";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    ;
    if (XX0XW02.XX0XWPIX > 0)
      FE0CM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FE0CM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FE0CM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0CM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CM001.XPCCD == "?") /* Category list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CAT"; /* Heading*/
    XX0XW02.XGPCD = XPCREC.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0CM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FE0CM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FE0CM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FE0CM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0CM001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CM001.XCTCD == "?") /* Country list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CTRY"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0CM001.XCTCD = FFWREC.XCTCD; /* Restore prior code*/
      FE0CM001.XCTABRV = FFWREC.XCTABRV; /* Abbreviation*/
    else
      FE0CM001.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
      FE0CM001.XCTABRV = XCTTBL.XCTABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0CM001.XCTCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0C400

// Reset forecast fields
Function FE0C410()
  ;
  FE0CW00.FE0CWCLM = 1; /* Initialize column index*/
  ;
  FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXM - 1;
  FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF * 6 + 1;
  FE0CW00.FE0CWIXE = FE0CW00.FE0CWIXF + FE0CM001.FE0CMMOS - 1;
  ;
  FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXM - 1;
  FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW * 6 + FE0CW00.FE0CWIXT;
  ;
  while (FE0CW00.FE0CWIXF <= FE0CW00.FE0CWIXE /* Until end of page*/
   && FE0CW00.FE0CWIXF < FE0CW00.FE0CWIXW) /* or end of range*/
    ;
    if (FE0CM001.FE0CMDES[FE0CWIXM] == "   TOTAL") /* Total line*/
      ;
      set FE0CM001.FE0CMFCS[FE0CWIXF] skip; /* total qty field*/
      ;
    else
      ;
      if (FE0CW00.FE0CWHDG[FE0CWCLM] >= FE0CW00.FE0CW1SD /* After intro. mo*/
       && FE0CW00.FE0CWHDG[FE0CWCLM] < FE0CW00.FE0CWCOD)
                                   /* Before c/o mo*/
        ;
        set FE0CM001.FE0CMFCS[FE0CWIXF] normal; /* Fcst qty field*/
        ;
      else
        set FE0CM001.FE0CMFCS[FE0CWIXF] skip; /* Forecast quantity fld*/
        ;
      end
      ;
    end
    ;
    FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF + 1;
    FE0CW00.FE0CWCLM = FE0CW00.FE0CWCLM + 1;
    ;
  end
end // end FE0C410

// Verify the entered data
Function FE0C500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CM001.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FE0CM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf10 /* or scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FE0C510(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Verify data in the line.*/
    /* ------------------------------------------------------------*/
    ;
    FE0C520(); /* Verify forecast quantity*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify the entered keys*/
   /* ------------------------------------------------------------*/
  ;
  FE0C550(); /* Verify the entered keys*/
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0C500

// Verify scroll request
Function FE0C510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FE0CW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FE0CW00.XXXTSPAG >= FE0CW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left request*/
    ;
    FE0CW00.FE0CWIXW = FE0CW00.FE0CWLEF - FE0CM001.FE0CMMOS;
    ;
    if (FE0CW00.FE0CWIXW < 1) /* and no more months*/
      ;
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(23); /* No more columns to display*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    ;
    FE0CW00.FE0CWIXW = FE0CW00.FE0CWRIG + FE0CM001.FE0CMMOS;
    ;
    if (FE0CW00.FE0CWIXW > 12) /* and no more months*/
      ;
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(24); /* No more columns to display*/
      ;
    else
      ;
      FE0CW00.FE0CWIXW = FE0CW00.FE0CWLEF + FE0CM001.FE0CMMOS;
      ;
      if (FE0CW00.FE0CWIXW > FE0CW00.FE0CWEND) /* and no more months*/
        ;
        FFWREC.XXXMODID = "510"; /* Module identification*/
        converseLib.validationFailed(24); /* No more columns to display*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  if (FE0CM001.FE0CMMOS != FE0CW00.FE0CWMOS) /* Months in season changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0CM001.FE0CMMOS cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0C510

// Verify data in the line
Function FE0C520()
  ;
  FE0CW00.FE0CWIXM = 14; /* Initialize disp index*/
  ;
  while (FE0CW00.FE0CWIXM >= 1) /* Until end of the page*/
    ;
    if (FE0CW01.FE0CWSTY[FE0CWIXM] > " ")
      ;
      FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXM - 1;
      FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF * 6 + FE0CW00.FE0CWMOS;
      ;
      FE0CW00.FE0CWIXE = FE0CW00.FE0CWIXM - 1;
      FE0CW00.FE0CWIXE = FE0CW00.FE0CWIXE * 6 + 1;
      ;
      FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXM - 1;
      FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW * 12 + FE0CW00.FE0CWLEF;
      FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW + FE0CW00.FE0CWMOS - 1;
      ;
      FE0CW00.FE0CWCLM = FE0CW00.FE0CWRIG;
                                   /* Initialize month tot idx*/
      ;
      /* ----------------------------------------------------------*/
        /* Find out the position of the total line.*/
      /* ----------------------------------------------------------*/
      ;
      FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXM;
      ;
      while (FE0CW00.FE0CWIXT <= 14 /* Untile end of page*/
       && FE0CM001.FE0CMSTY[FE0CWIXT] != " ") /* or reach total line*/
        ;
        FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT + 1;
        ;
      end
      ;
      FE0CW00.FE0CWIND = FE0CW00.FE0CWIXT; /* Save the tot line position*/
      ;
      FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT - 1;
      FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT * 12 + FE0CW00.FE0CWLEF;
      FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT + FE0CW00.FE0CWMOS - 1;
      ;
      FE0CW00.FE0CWCLM = FE0CW00.FE0CWRIG; /* Column index*/
      ;
      /* ------------------------------------------------------------*/
       /* Convert the entered quantities from CHAR format to NUM*/
       /* format.*/
       /* Check the quantities to make sure they are not negative*/
       /* values.*/
      /* ------------------------------------------------------------*/
      ;
      while (FE0CW00.FE0CWIXF >= FE0CW00.FE0CWIXE)
        ;
        if (FE0CM001.FE0CMFCS[FE0CWIXF] > " "
         && FE0CM001.FE0CMFCS[FE0CWIXF] != FE0CW01.FE0CWFCT[FE0CWIXW])
          ;
          FE0CW00.FE0CWMST = "N";
                                   /* Reset master fcst saved switch*/
          FFXREC.FFXCHAR = FE0CM001.FE0CMFCS[FE0CWIXF];
          XSFFS11(); /* Translate value format*/
          ;
          if (FFXREC.FFXRTNCD == "0") /* Normal return*/
            ;
            if (FFXREC.FFXNUMB < 0) /* Negative value*/
              if (FE0CM001.XCTCD != "0000") /* not country 0000*/
                ;
                FFWREC.XXXMODID = "520"; /* Module identification*/
                converseLib.validationFailed(10); /* Invalid value entered*/
                set FE0CM001.FE0CMFCS[FE0CWIXF] cursor, bold; /* Highlighted*/
                ;
              else
                ;
                FE0C521(); /* Update grand total areas*/
                ;
              end
              ;
            else
              ;
              FE0C521(); /* Update grand total areas*/
              ;
            end
            ;
          else
            ;
            FFWREC.XXXMODID = "520"; /* Module identification*/
            converseLib.validationFailed(10); /* Indicate invalid value entered*/
            set FE0CM001.FE0CMFCS[FE0CWIXF] cursor, bold; /* Highlighted*/
            ;
          end
          ;
        else
          ;
          if (FE0CM001.FE0CMFCS[FE0CWIXF] == " ")
            ;
            if (FE0CM001.FE0CMFCS[FE0CWIXF] != FE0CW01.FE0CWFCT[FE0CWIXW])
              FE0CW00.FE0CWMST = "N"; /* Reset mstr fcst upd switch*/
            end
            ;
            FFXREC.FFXNUMB = 0;
            ;
            FE0C521(); /* Update grand totals & change flags*/
            ;
          end
          ;
        end
        ;
        FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF - 1; /* Decrement map index*/
        FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW - 1; /* Decrement storage index*/
        FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT - 1; /* Decrement grand tot index*/
        FE0CW00.FE0CWCLM = FE0CW00.FE0CWCLM - 1; /* Decrement column idx*/
        ;
      end
      ;
    end
    ;
    FE0CW00.FE0CWIXM = FE0CW00.FE0CWIXM - 1; /* decrement display index*/
    ;
  end
  ;
  ;
end // end FE0C520

// Update Grand tots and chg flag
Function FE0C521()
  ;
  if (FE0CM001.FE0CMFCS[FE0CWIXF] != FE0CW01.FE0CWFCT[FE0CWIXW])
    ;
    /* -------------------------------------------------------*/
      /* Turn on the change flags.*/
    /* -------------------------------------------------------*/
    ;
    FE0CW01.FE0CWFCH[FE0CWIXW] = "Y"; /* Mo fcst changed*/
    FE0CW01.FE0CWSCH[FE0CWIXM] = "Y"; /* CLR tot changed*/
    FFWREC.FFWMODSW = "Y"; /* Indicate data modified*/
    FE0CW00.FE0CWSWU = "Y"; /* Storage update switch*/
    ;
    /* -------------------------------------------------------*/
     /* Rounding the updated field.*/
    /* -------------------------------------------------------*/
    ;
    XSFFS10();
    ;
    /* -------------------------------------------------------*/
      /* Update the grand totals by subtracting the old*/
      /* forecast and adding the new one.*/
    /* -------------------------------------------------------*/
    ;
    FE0CW00.FE0CWFCS = FE0CW01.FE0CWFCS[FE0CWIXW];
    ;
    /* -----------------------------------------------------------*/
       /* Update the grand total of each style color*/
    /* -----------------------------------------------------------*/
    ;
    FE0CW00.FE0CWTOT = FE0CW01.FE0CWGND[FE0CWIXM];
    FE0CW01.FE0CWGND[FE0CWIXM] = FE0CW00.FE0CWTOT - FE0CW00.FE0CWFCS;
    FE0CW00.FE0CWTOT = FE0CW01.FE0CWGND[FE0CWIXM];
    FE0CW01.FE0CWGND[FE0CWIXM] = FE0CW00.FE0CWTOT + FFXREC.FFXNUMB;
    FE0CW01.FE0CWSCH[FE0CWIXM] = "Y"; /* Style group total changed*/
    ;
    /* -----------------------------------------------------------*/
       /* Update the monthly grand total. If the total line shows*/
       /* on the next page, need to save the changes and apply to*/
       /* the next page later on (When scrolling).*/
    /* -----------------------------------------------------------*/
    ;
    if (FE0CW00.FE0CWIND > 14) /* Total line is in next page*/
      ;
       /* next sentence*/
      ;
    else
      ;
      FE0CW00.FE0CWTOT = FE0CW01.FE0CWFCS[FE0CWIXT];
      FE0CW01.FE0CWFCS[FE0CWIXT] = FE0CW00.FE0CWTOT - FE0CW00.FE0CWFCS;
      FE0CW00.FE0CWTOT = FE0CW01.FE0CWFCS[FE0CWIXT];
      FE0CW01.FE0CWFCS[FE0CWIXT] = FE0CW00.FE0CWTOT + FFXREC.FFXNUMB;
      FE0CW01.FE0CWFCH[FE0CWIXT] = "Y"; /* Monthly grp total changed*/
      ;
      FE0CW00.FE0CWTOT = FE0CW01.FE0CWGND[FE0CWIND];
      FE0CW01.FE0CWGND[FE0CWIND] = FE0CW00.FE0CWTOT - FE0CW00.FE0CWFCS;
      FE0CW00.FE0CWTOT = FE0CW01.FE0CWGND[FE0CWIND];
      FE0CW01.FE0CWGND[FE0CWIND] = FE0CW00.FE0CWTOT + FFXREC.FFXNUMB;
      FE0CW01.FE0CWSCH[FE0CWIND] = "Y"; /* Total of mo. grp tot changed*/
      ;
    end
    ;
    FE0CW00.FF6PRFCT = FE0CW01.FE0CWFCS[FE0CWIXW]; /* Save old fcst*/
    FE0CW00.FE0CWFCS = FFXREC.FFXNUMB; /* Save new fcst*/
    ;
    FE0CW01.FE0CWFCS[FE0CWIXW] = FFXREC.FFXNUMB;
    FE0CW01.FE0CWFCT[FE0CWIXW] = FFXREC.FFXCHAR;
    ;
    FFXREC.FFXNUMB = FE0CW01.FE0CWFCS[FE0CWIXT];
    XSFFS10(); /* Convert from NUM to CHAR*/
    FE0CW01.FE0CWFCT[FE0CWIXT] = FFXREC.FFXCHAR;
    ;
    if (FE0CW00.FE0CWIND > 14) /* Total line is in next page*/
      ;
      FE0CS02(); /* Update the first total line in next page*/
      ;
    end
    ;
  end
  ;
end // end FE0C521

// Verify months in the season
Function FE0C530()
  ;
  if (FE0CM001.FE0CMMOS != 4 /* 4 months season*/
   && FE0CM001.FE0CMMOS != 6) /* 6 months season*/
    ;
    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FE0CM001.FE0CMMOS cursor, bold; /* Highlighted*/
    converseLib.validationFailed(10); /* Indicate invalid value entered*/
    ;
  else
    ;
    if (FE0CM001.FE0CMMOS != FE0CW00.FE0CWMOS /* Months in season changed*/
     && FE0CW00.FE0CWLEF != 1)                /* and not the leftmost page*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FE0CM001.FE0CMMOS cursor, bold; /* Highlighted*/
      converseLib.validationFailed(235); /* Indicate not at the very left*/
    end
    ;
  end
  ;
end // end FE0C530

// Verify entered keys
Function FE0C550()
  ;
   /* -------------------------------------------------------*/
     /* Verify country code*/
   /* -------------------------------------------------------*/
  ;
  if (FE0CM001.XCTCD == "USA ")
    ;
    FFWREC.XXXMODID = "550"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate invalid value entered*/
    set FE0CM001.XCTCD cursor, bold; /* Highlight*/
    ;
  else
    ;
    if (FE0CM001.XCTCD != FFWREC.XCTCD) /* Country code changed*/
      if (FE0CM001.XCTCD != " ") /* Country code not blank*/
        FE0C551(); /* Verify country code*/
      else
        FE0CM001.XCTABRV = "SUM";
      end
    end
    ;
  end
  ;
   /* -------------------------------------------------------*/
     /* Verify all styles flag*/
   /* -------------------------------------------------------*/
  ;
  if (FE0CM001.FE0CMALL == " "
   || FE0CM001.FE0CMALL == "Y"
   || FE0CM001.FE0CMALL == "N")
    /* NEXT SENTENCE*/
  else
    FFWREC.XXXMODID = "550"; /* Module identification*/
    converseLib.validationFailed(153); /* Indicate must be a 'y' or 'n'*/
    set FE0CM001.FE0CMALL cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* -------------------------------------------------------*/
     /* Verify category code*/
   /* -------------------------------------------------------*/
  ;
  if (FE0CM001.XPCCD == " ") /* No category code entered*/
    FFWREC.XXXMODID = "550"; /* Module identification*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    set FE0CM001.XPCCD cursor, bold; /* Highlight*/
    ;
  else
    ;
    FE0C552(); /* Verify category code in xpctbl*/
    ;
  end
  ;
   /* -------------------------------------------------------*/
   /* Verify type group code*/
   /* -------------------------------------------------------*/
  ;
  if (FE0CM001.YPGCD == "  " /* No type code entered*/
   || FE0CM001.YPGCD == "* ") /* No category code entered*/
    FFWREC.XXXMODID = "550"; /* Module identification*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    set FE0CM001.YPGCD cursor, bold; /* Highlight*/
    ;
  else
    ;
    FE0C553(); /* Verify type group code in ypgtbl*/
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  if (FE0CM001.SYBSTGNB == " ") /* No style group specified*/
    ;
    /* -----------------------------------------------------------*/
       /* Verify the relationship between type group and category*/
    /* -----------------------------------------------------------*/
    ;
    if (FE0CM001.XPCCD != " " /* Category exist*/
     && FE0CM001.YPGCD != " ") /* Type group exist*/
      ;
      FE0C554(); /* Verify type group and category in VFFXRF01*/
      ;
    end
    ;
  else
    ;
    /* -----------------------------------------------------------*/
       /* Verify the relationship among type group, category and*/
       /* style group.*/
    /* -----------------------------------------------------------*/
    ;
    if (FE0CM001.XPCCD != " " /* Category exist*/
     && FE0CM001.YPGCD != " " /* Type group exist*/
     && FE0CM001.SYBSTGNB != " ") /* Style group exist*/
      ;
      FE0C555(); /* Verify type grp, cat and sty grp in VFFSTY01*/
      ;
    end
    ;
  end
  ;
   /* -------------------------------------------------------*/
     /* Verify style group code*/
   /* -------------------------------------------------------*/
  ;
  if (FE0CM001.SYBSTGNB == " ") /* Style group not entered*/
    ;
    FE0CM001.SYBSTGNM = " "; /* Style group name*/
    ;
  else
    ;
    FE0CM001.SYBSTGNM = "******"; /* Style group name*/
    ;
  end
  ;
  if (FE0CM001.SYBSTGNB != " ") /* Style group entered*/
    ;
    set FF3REC empty; /* Clear the storage row*/
    ;
    FF3REC.SYBSTGNB = FE0CM001.SYBSTGNB; /* Style group*/
    FF3REC.YSMXDV = "*";
    ;
    FF3REC.XLCCD = "*"; /* Life cycle code*/
    FF3REC.YPGCD = FE0CM001.YPGCD; /* Type group code*/
    TA1REC.TA1PGMNM = "FE0C550"; /* Name of the calling process*/
    ;
    XSFFS22(); /* Verify style group code*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
      ;
      FE0CM001.SYBSTGNM = FF3REC.SYBSTGNM; /* Style group name*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
      ;
      FFWREC.XXXMODID = "550"; /* Module identification*/
      converseLib.validationFailed(10); /* Indicate invalid value entered*/
      set FE0CM001.SYBSTGNB cursor, bold; /* Highlight*/
      set FE0CM001.YPGCD normal;
      set FE0CM001.XPCCD normal;
      ;
    end
    ;
  end
  ;
   /* -------------------------------------------------------*/
     /* Verify month in season*/
   /* -------------------------------------------------------*/
  ;
  if (FE0CM001.FE0CMMOS != FE0CW00.FE0CWMOS) /* Months in season changed*/
    ;
    FE0C530(); /* Verify months in season*/
    ;
  end
  ;
   /* -------------------------------------------------------*/
     /* Verify range*/
   /* -------------------------------------------------------*/
  ;
  if (FE0CM001.FE0CMBMO != FE0CW01.FE0CWBMY /* Beginning month changed*/
   || FE0CM001.FE0CMEMO != FE0CW01.FE0CWEMY /* Ending month changed*/
   || FE0CM001.FE0CMBMO == 0                /* No beginning month entered*/
   || FE0CM001.FE0CMEMO == 0)               /* No ending month entered*/
    ;
    FE0C556(); /* Verify range*/
    ;
  end
  ;
end // end FE0C550

// Verify country code
Function FE0C551()
   /* ------------------------------------------------------------*/
   /* Verify the foreign country code that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CM001.XCTCD in XCTTBL.XCTCD /* Code in table*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FE0CM001.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex]; /* Abbreviation*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* If not found, check the 1st two charaters against the region*/
    /* table, if not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FE0CW00.XCTCD = FE0CM001.XCTCD; /* move ctry cd to ws*/
    if (FE0CW00.ZRGCD in ZRGTBL.ZRGCD            /* code in zrgtbl*/
     && ZRGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active*/
     && FE0CW00.ZRGCD != "US"                    /* and not 'us' region*/
     && FE0CW00.FE0CWBLK == "  ")                /* and last 2 char be spaces*/
      FE0CM001.XCTABRV = ZRGTBL.ZRGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      FE0CM001.XCTABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "551"; /* Module identification*/
      set FE0CM001.XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
    end
    ;
  end
  ;
end // end FE0C551

// Verify cat in XPCTBL
Function FE0C552()
  ;
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XPCCD = FE0CM001.XPCCD;
  ;
  if (FE0CM001.XPCCD == "  ")
    FE0CM001.XPCABRV = "      ";
  else
    FE0CM001.XPCABRV = "******";
  end
  ;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FE0CM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FFWREC.XXXMODID = "552"; /* Module identification*/
    ;
    set FE0CM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    ;
  end
  ;
  ;
end // end FE0C552

// Verify typ grp code in YPGTBL
Function FE0C553()
  ;
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CM001.YPGCD == "  ") /* No type group*/
    FE0CM001.YPGABRV = "      ";
  else
    FE0CM001.YPGABRV = "******";
  end
  ;
  if (FE0CM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and active for FF system*/
    ;
    FE0CM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FFWREC.XXXMODID = "553"; /* Module identification*/
    ;
    set FE0CM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    ;
  end
  ;
end // end FE0C553

// Verify typgrp and cat-VFFXRF01
Function FE0C554()
  FE0CS11(); /* Open & select VFFXRF01*/
  ;
  FE0CS12(); /* Fetch first row in VFFXRF01*/
  ;
  FE0CS13(); /* Close the cursor for VFFXRF01*/
  ;
end // end FE0C554

// Verify typ,cat & stgrp VFFSTY0
Function FE0C555()
  set FF3REC empty; /* Clear the storage row*/
  ;
  FF3REC.SYBSTGNB = FE0CM001.SYBSTGNB; /* Style group*/
  FF3REC.YSMXDV = "*"; /* Division group code*/
  ;
  FF3REC.YPGCD = FE0CM001.YPGCD; /* Type group code*/
  FF3REC.XLCCD = "*"; /* Life cycle code*/
  TA1REC.TA1PGMNM = "FE0C555"; /* Name of the calling process*/
  ;
  XSFFS22();
  ;
  if (FF3REC.YPGCD == FE0CM001.YPGCD /* Valid type group code*/
   && FF3REC.XPCCD == FE0CM001.XPCCD) /* and valid category code*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FFWREC.XXXMODID = "555"; /* Module identification*/
    converseLib.validationFailed(203); /* Indicate inconsistent relationship*/
    set FE0CM001.YPGCD cursor, bold; /* Highlight*/
    set FE0CM001.XPCCD bold; /* Highlight*/
    set FE0CM001.SYBSTGNB bold; /* Highlight*/
    ;
  end
  ;
end // end FE0C555

// Verify range
Function FE0C556()
   /* ------------------------------------------------------------*/
   /* The beginning month must be greater than the current month*/
   /* and less than or equal to the current plus 30 month*/
   /* The ending month must be greater than or equal to the*/
   /* beginning month, not greater than the beginning plus 11*/
   /* month and not greater than the current plus 30 months.*/
   /* ------------------------------------------------------------*/
  ;
  FE0C557(); /* get buy month*/
  set FFZREC empty; /* Clear storage row*/
  ;
  FFZREC.FFZBYYMM = FE0CM001.FE0CMBMO; /* Beginning month*/
  FFZREC.FFZEYYMM = FE0CM001.FE0CMEMO; /* Ending month*/
  FFZREC.FFZMONTH = 1; /* Number of month*/
  ;
  XSFFS30(); /* Verify the range*/
  ;
  if (FFZREC.FFZENDRC != "0") /* Check error code*/
    ;
    FFWREC.XXXMODID = "556"; /* Module identification*/
    ;
    set FE0CM001.FE0CMEMO cursor, bold; /* Hightlight*/
    ;
    if (FFZREC.FFZENDRC == "1") /* No ending month entered*/
      ;
      converseLib.validationFailed(8); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZENDRC == "2") /* Invalid ending month entered*/
      ;
      converseLib.validationFailed(17); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZENDRC == "3") /* Ending month out of range*/
      ;
      converseLib.validationFailed(151); /* Indicate invalid date entered*/
      ;
    end
    ;
  end
  ;
  if (FFZREC.FFZBEGRC != "0") /* Check error code*/
    ;
    FFWREC.XXXMODID = "556"; /* Module identification*/
    set FE0CM001.FE0CMBMO cursor, bold; /* hightlight*/
    ;
    if (FFZREC.FFZBEGRC == "1") /* No beginning month entered*/
      ;
      converseLib.validationFailed(8); /* Indicate required field*/
      ;
    end
    ;
    if (FFZREC.FFZBEGRC == "2") /* Invalid beginning month entered*/
      ;
      converseLib.validationFailed(17); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZBEGRC == "3") /* Beginning month out of range*/
      ;
      converseLib.validationFailed(151); /* Indicate invalid date entered*/
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0)
    ;
    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Save converted dates*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO;
    ;
  end
  ;
end // end FE0C556

// Calculate the buy month
Function FE0C557()
   /* ------------------------------------------------------------*/
     /* Buy month calculation , stored in fe0cW00.fe0cWdat*/
   /* ------------------------------------------------------------*/
  ;
  FE0C558(); /* get futures cutoff date*/
  FE0CW00.FE0CWDTE = FF1REC.FF1FUTDT;
  ;
  FE0CW00.FE0CWDMM = FE0CW00.FE0CWDMM + 5;
  if (FE0CW00.FE0CWDMM > 12)
    FE0CW00.FE0CWDMM = FE0CW00.FE0CWDMM - 12;
    if (FE0CW00.FE0CWDYY == 99)
      FE0CW00.FE0CWDYY = 00;
      FE0CW00.FE0CWDCC = FE0CW00.FE0CWDCC + 1;
    else
      FE0CW00.FE0CWDYY = FE0CW00.FE0CWDYY + 1;
    end
  end
  ;
  FE0CW00.FE0CWDYY = FE0CW00.FE0CWDYY + 1; /* one year beyond buy mon*/
  if (FE0CW00.FE0CWDYY == 00)
    FE0CW00.FE0CWDCC = FE0CW00.FE0CWDCC + 1;
  end
end // end FE0C557

// Get futures cutoff date
Function FE0C558()
  ;
  set FF1REC empty; /* Clear up the storage row*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "558"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET FUTURES CUTOFF D";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0C558

// Process valid input request
Function FE0C600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0CW00.FE0CWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* if PF15 was pressed, save the forecasts into master tables.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    ;
    FE0C640(); /* Process PF15 for NIL*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if the key field changed, save the search information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CM001.FE0CMBMO != FE0CW01.FE0CWBMY /* Beginning month changed*/
   || FE0CM001.FE0CMEMO != FE0CW01.FE0CWEMY /* Ending month changed*/
   || FE0CM001.YPGCD != FFWREC.YPGCD        /* Type group changed*/
   || FE0CM001.XPCCD != FFWREC.XPCCD        /* Category changed*/
   || FE0CM001.SYBSTGNB != FFWREC.SYBSTGNB  /* Style group changed*/
   || FE0CM001.FE0CMALL != FE0CW00.FE0CWALL /* All styles flag changed*/
   || FE0CM001.XCTCD != FFWREC.XCTCD)       /* Country changed*/
    ;
    if (FE0CW00.FE0CWMST == "Y" /* master has been updated*/
     || FE0CW00.FE0CWMST == " ")
      ;
      FE0CW01.FE0CWBMO = FFWREC.FFABEGMO; /* Beginning month*/
      FE0CW01.FE0CWEMO = FFWREC.FFAENDMO; /* Ending month*/
      FE0CW00.FE0CWALL = FE0CM001.FE0CMALL; /* all styles flag*/
      FFWREC.YPGCD = FE0CM001.YPGCD; /* Type group code*/
      FFWREC.YPGABRV = FE0CM001.YPGABRV; /* Type group abbreviation*/
      FFWREC.XPCCD = FE0CM001.XPCCD; /* Category code*/
      FFWREC.XPCABRV = FE0CM001.XPCABRV; /* Category abbreviation*/
      FFWREC.SYBSTGNB = FE0CM001.SYBSTGNB; /* Style group code*/
      FFWREC.SYBSTGNM = FE0CM001.SYBSTGNM; /* Style group short name*/
      FFWREC.XCTCD = FE0CM001.XCTCD; /* Country code*/
      FFWREC.XCTABRV = FE0CM001.XCTABRV; /* Country abbreviation*/
      FE0CW00.FE0CWSWU = "N"; /* Reset TSQ update switch*/
      FE0CW00.FE0CWLEF = 1; /* Reset left index*/
      if (FE0CM001.FE0CMMOS != FE0CW00.FE0CWMOS)
                                   /* Months in seasons changed*/
        FE0CW00.FE0CWMOS = FE0CM001.FE0CMMOS;
        FE0CW00.FE0CWRIG = FE0CW00.FE0CWLEF + FE0CW00.FE0CWMOS - 1;
      end
      FE0CW00.FE0CWSWR = "Y"; /* Request for data switch*/
      return; /* Return to previous process*/
      ;
    else
      if (FE0CW00.FE0CWUPD == "Y") /* Warning msg already shown once*/
        FE0CW00.FE0CWUPD = "N"; /* Clear the error switch*/
        FE0CW00.FE0CWMST = " "; /* Clear master update switch*/
        FE0CW01.FE0CWBMO = FFWREC.FFABEGMO; /* Beginning month*/
        FE0CW01.FE0CWEMO = FFWREC.FFAENDMO; /* Ending month*/
        FE0CW00.FE0CWALL = FE0CM001.FE0CMALL; /* all styles flag*/
        FFWREC.YPGCD = FE0CM001.YPGCD; /* Type group code*/
        FFWREC.YPGABRV = FE0CM001.YPGABRV; /* Type group abbreviation*/
        FFWREC.XPCCD = FE0CM001.XPCCD; /* Category code*/
        FFWREC.XPCABRV = FE0CM001.XPCABRV; /* Category abbreviation*/
        FFWREC.SYBSTGNB = FE0CM001.SYBSTGNB; /* Style group code*/
        FFWREC.SYBSTGNM = FE0CM001.SYBSTGNM;
                                   /* Style group short name*/
        FFWREC.XCTCD = FE0CM001.XCTCD; /* Country code*/
        FFWREC.XCTABRV = FE0CM001.XCTABRV; /* Country abbreviation*/
        FE0CW00.FE0CWSWU = "N"; /* Reset TSQ update switch*/
        FE0CW00.FE0CWLEF = 1; /* Reset left index*/
        if (FE0CM001.FE0CMMOS != FE0CW00.FE0CWMOS) /* Months in seas changed*/
          FE0CW00.FE0CWMOS = FE0CM001.FE0CMMOS;
          FE0CW00.FE0CWRIG = FE0CW00.FE0CWLEF + FE0CW00.FE0CWMOS - 1;
        end
        FE0CW00.FE0CWSWR = "Y"; /* Request for data switch*/
        return; /* Return to previous process*/
        ;
      else
        FFWREC.XXXMODID = "600"; /* Module identification*/
        converseLib.validationFailed(369); /* Indicate update master fcst*/
        FE0CW00.FE0CWUPD = "Y"; /* Set the error switch*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
  ;
  if (FE0CM001.FE0CMMOS != FE0CW00.FE0CWMOS) /* Months in seasons changed*/
    ;
    FE0CW00.FE0CWMOS = FE0CM001.FE0CMMOS;
    FE0CW00.FE0CWRIG = FE0CW00.FE0CWLEF + FE0CW00.FE0CWMOS - 1;
                                   /* right index*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FE0CW00.XXXTSPAG = FE0CW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FE0CW00.XXXTSPAG = FE0CW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll left was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FE0CW00.FE0CWRIG = FE0CW00.FE0CWRIG - FE0CW00.FE0CWMOS;
    FE0CW00.FE0CWLEF = FE0CW00.FE0CWLEF - FE0CW00.FE0CWMOS;
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll right was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FE0CW00.FE0CWRIG = FE0CW00.FE0CWRIG + FE0CW00.FE0CWMOS;
    FE0CW00.FE0CWLEF = FE0CW00.FE0CWLEF + FE0CW00.FE0CWMOS;
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
end // end FE0C600

// Process PF15 key
Function FE0C640()
  ;
   /* ------------------------------------------------------------*/
   /* Update the DFCAST.VMSTY001 table.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CW00.FE0CWSWU == "Y") /* Data changed*/
    ;
    FE0CS03(); /* Update TSQ page*/
    ;
    FE0CW00.FE0CWSWU = "N"; /* Reset the update switch*/
    ;
  end
  ;
  FE0CW00.FE0CWPAG = 1; /* Initialize the page number*/
  ;
  while (FE0CW00.FE0CWPAG <= FE0CW00.TA5TSQIX) /* Until reach the last page*/
    ;
    TA5REC.TA5TSQIX = FE0CW00.FE0CWPAG; /* Set the page number*/
    ;
    FE0CS04(); /* Read TSQ page*/
    ;
    FE0C646(); /* Update DFCAST.VMSTY001,VMSGRP01*/
    ;
    if ("Y" in FE0CW01.FE0CWFCH) /* Check if any data changed*/
      ;
      move "N" to FE0CW01.FE0CWFCH[1] for all;
      ;
      FE0CS03(); /* Update TSQ page*/
      ;
      FE0CW00.FE0CWSWU = "N"; /* Reset the update switch*/
      ;
    end
    ;
    ;
    FE0CW00.FE0CWPAG = FE0CW00.FE0CWPAG + 1;
    ;
  end
  ;
  FFWREC.FFWMODSW = "N";
                                   /* Indicate the data no need to be saved*/
  ;
  ;
   /* ------------------------------------------------------------*/
    /* Update VMCAT001 and VMONTH01 with the montly variances.*/
   /* ------------------------------------------------------------*/
  FE0C648();
  ;
   /* ------------------------------------------------------------*/
    /* Restore the page before calling subroutine.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5TSQIX = FE0CW00.XXXTSPAG; /* Set the page number*/
  ;
  FE0CS04(); /* Read TSQ page*/
  ;
  if (converseVar.validationMsgNum == 0)
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    FFWREC.XXXMODID = "640"; /* Module identification*/
    FFWREC.XXXMSGNO = 26; /* Indicate wrksht fcst saved as master*/
    FE0CW00.FE0CWMST = "Y"; /* Turned on mstr fcst saved switch*/
    ;
  end
  ;
  ;
end // end FE0C640

// Update Tables
Function FE0C646()
  ;
  FE0CW00.FE0CWIXM = 1; /* Initialize the map index*/
  ;
  while (FE0CW00.FE0CWIXM <= 14)
    if (FE0CW01.FE0CWDES[FE0CWIXM] == " "
     && FE0CW01.FE0CWSTY[FE0CWIXM] == " ")
      /* NEXT SENTENCE*/
    else
      FE0C647(); /* process row*/
    end
    ;
    FE0CW00.FE0CWIXM = FE0CW00.FE0CWIXM + 1; /* Increment the map index*/
    ;
  end
  ;
end // end FE0C646

// Process update row
Function FE0C647()
  if (FE0CW01.FE0CWGFL[FE0CWIXM] == "Y") /* Save style group*/
    FE0CW00.SYBSTGNB = FE0CW01.FE0CWSTY[FE0CWIXM];
  else
    if (FE0CW01.FE0CWDES[FE0CWIXM] != "   TOTAL")
      FE0C650(); /* process style color change*/
    else
      FE0C651(); /* process style group change*/
    end
  end
  ;
end // end FE0C647

// Update VMCAT001 and VMONTH01
Function FE0C648()
  ;
  FE0CW00.FE0CWIXN = 1; /* Initialize heading index*/
  while (FE0CW00.FE0CWIXN <= 12) /* Until end of range*/
    ;
    if (FE0CW00.FE0CWCV[FE0CWIXN] != 0) /* VMCAT001 variance exists*/
      FE0CS27(); /* Read DFCAST.VMCAT001*/
      if (SQLCA.VAGen_SQLCODE == 100)
        FE0CS28(); /* Insert DFCAST.VMCAT001*/
      else
        FE0CS29(); /* update DFCAST.VMCAT001*/
      end
      FE0CS30(); /* Read DFCAST.VMONTH01*/
      if (SQLCA.VAGen_SQLCODE == 100)
        FE0CS31(); /* Insert DFCAST.VMONTH01*/
      else
        FE0CS32(); /* update DFCAST.VMONTH01*/
      end
      FE0CW00.FE0CWCV[FE0CWIXN] = 0;
    end
    FE0CW00.FE0CWIXN = FE0CW00.FE0CWIXN + 1;
  end
  ;
end // end FE0C648

// Add style to VPFHST01
Function FE0C649()
  set FG9REC empty;
  FG9REC.SY1STNBR = FE0CW01.FE0CWSTY[FE0CWIXM];
  FG9REC.SY2CLRID = FE0CW00.SY2CLRID;
  FG9REC.XDMCD = FE0CW00.XDMCD;
  FE0CS35(); /* select unique vpfhst01*/
  if (SQLCA.VAGen_SQLCODE == 100)
    FE0CS33(); /* select unique vffsty01*/
    FE0CS34(); /* insert into VPFHST01*/
  end
end // end FE0C649

// Process update style color
Function FE0C650()
  FE0CW00.FE0CWUSY = "N"; /* style updated*/
  FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXM - 1;
  FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW * 12 + 1; /* beginning index val*/
  FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXM - 1;
  FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT * 12 + FE0CW00.FE0CWEND; /* end index*/
  FE0CW00.FE0CWCLM = 1; /* Initialize heading index*/
  while (FE0CW00.FE0CWIXW <= FE0CW00.FE0CWIXT) /* Until end of range*/
    if (FE0CW01.FE0CWFCH[FE0CWIXW] == "Y") /* Forecast changed*/
      FE0CS20(); /* Read DFCAST.VMSTY001*/
      if (SQLCA.VAGen_SQLCODE == 100)
        FE0CW00.FE0CWUSY = "Y"; /* style updated*/
        FE0CS23(); /* Insert DFCAST.VMSTY001*/
      else
        if (FF9REC.ZZZCHGCT != FE0CW01.FE0CWCNT[FE0CWIXW] /* Recd changed*/
         && FFWREC.XCTCD != " ")                          /* and not a sum of all ctrys*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* Roll back all changes*/
          FE0CW00.FE0CWSWR = "Y"; /* Request for data switch*/
          FE0CW00.FE0CWSWU = "N"; /* Reset update switch*/
          FFWREC.XXXMODID = "650"; /* Module identification*/
          FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
          exit stack; /* Exit to display map*/
          ;
        else
          FE0CW00.FE0CWUSY = "Y"; /* style updated*/
          FE0CS22(); /* Update DFCAST.VMSTY001*/
        end
      end
    end
    FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW + 1;
    FE0CW00.FE0CWCLM = FE0CW00.FE0CWCLM + 1;
  end
  ;
  if (FE0CW00.FE0CWUSY == "Y" /* style updated*/
   && FE0CW00.FE0CWALL == "Y") /* new style*/
    FE0C649(); /* add style to VPFHST01*/
  end
end // end FE0C650

// Process update style group
Function FE0C651()
  FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXM - 1;
  FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW * 12 + 1; /* beginning index val*/
  FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXM - 1;
  FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT * 12 + FE0CW00.FE0CWEND; /* end index*/
  FE0CW00.FE0CWCLM = 1; /* Initialize heading index*/
  while (FE0CW00.FE0CWIXW <= FE0CW00.FE0CWIXT) /* Until end of range*/
    if (FE0CW01.FE0CWFCH[FE0CWIXW] == "Y") /* style group changed*/
      FE0CS24(); /* read VMSGRP01*/
      if (SQLCA.VAGen_SQLCODE == 100)
        FE0CS25(); /* add VMSGRP01*/
      else
        FE0CS26(); /* update VMSGRP01*/
      end
    end
    FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW + 1;
    FE0CW00.FE0CWCLM = FE0CW00.FE0CWCLM + 1;
  end
end // end FE0C651

// Accumulate the sty group total
Function FE0CS01()
  ;
   /* --------------------------------------------------------*/
   /* Accumulate the style color forecasts for the last style*/
   /* group on the current page, and bring the total to the*/
   /* next page. So, the total line on the next page will*/
   /* include all the style color fcst for the last style*/
   /* group.*/
   /* --------------------------------------------------------*/
  ;
  FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXM - 1; /* Initialize map index*/
  move 0 to FE0CW00.FE0CWMTL[1] for all; /* Initialize the month total work area*/
  move "N" to FE0CW00.FE0CWMTF[1] for all; /* Initialize the month tot change flag*/
  ;
  while (FE0CW00.FE0CWIXW >= 1 /* Until top of the page*/
   && FE0CW01.FE0CWGFL[FE0CWIXW] == "N") /* or reach style grp*/
    ;
    FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXW - 1;
    FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF * 12 + 1;
    FE0CW00.FE0CWIXE = FE0CW00.FE0CWIXF + FE0CW00.FE0CWEND - 1;
    ;
    FE0CW00.FE0CWIXT = 1;
    ;
    while (FE0CW00.FE0CWIXF <= FE0CW00.FE0CWIXE)
      ;
      FE0CW00.FE0CWTOT = FE0CW00.FE0CWMTL[FE0CWIXT]; /* Total qty*/
      FE0CW00.FE0CWFCS = FE0CW01.FE0CWFCS[FE0CWIXF]; /* Mo. fcst qty*/
      FE0CW00.FE0CWMTL[FE0CWIXT] = FE0CW00.FE0CWTOT + FE0CW00.FE0CWFCS;
      FE0CWMTF[FE0CWIXT] = "Y"; /* Month total changed*/
      ;
      FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF + 1;
      FE0CW00.FE0CWIXT = FE0CW00.FE0CWIXT + 1;
      ;
    end
    ;
    FE0CW00.FE0CWIXW = FE0CW00.FE0CWIXW - 1;
    ;
  end
  ;
  ;
end // end FE0CS01

// Update tot in next page
Function FE0CS02()
  ;
   /* ------------------------------------------------------------*/
    /* Update the current page with the changes, obtain next*/
    /* page and apply the changes to the total with the same*/
    /* style group and bring back the original page.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0CW00.FE0CWSWU == "Y") /* Data modified*/
    ;
    FE0CS03();
                                   /* Update current temporary storage page*/
    ;
    FE0CW00.FE0CWSWU = "N"; /* Reset update switch*/
    ;
  end
  ;
  FE0CW00.FE0CWNPG = FE0CW00.XXXTSPAG + 1; /* Next page no.*/
  ;
  TA5REC.TA5TSQIX = FE0CW00.FE0CWNPG;
  FE0CS04(); /* Obtain next temporary storage page*/
  ;
  if ("   TOTAL" in FE0CW01.FE0CWDES) /* Find the first total line*/
    ;
    /* ------------------------------------------------------------*/
      /* Update style group grand total*/
    /* ------------------------------------------------------------*/
    ;
    FE0CW00.FE0CWTOT = FE0CW01.FE0CWGND[sysVar.arrayIndex];
    FE0CW01.FE0CWGND[sysVar.arrayIndex] = FE0CW00.FE0CWTOT - FE0CW00.FF6PRFCT;
    FE0CW00.FE0CWTOT = FE0CW01.FE0CWGND[sysVar.arrayIndex];
    FE0CW01.FE0CWGND[sysVar.arrayIndex] = FE0CW00.FE0CWTOT + FE0CW00.FE0CWFCS;
    FE0CW01.FE0CWSCH[sysVar.arrayIndex] = "Y";
                                   /* Indicate clr/grp grnd tot chng*/
    ;
    /* ------------------------------------------------------------*/
      /* Update style group month total*/
    /* ------------------------------------------------------------*/
    ;
    FE0CW00.FE0CWIXN = sysVar.arrayIndex - 1;
    FE0CW00.FE0CWIXN = FE0CW00.FE0CWIXN * 12 + FE0CW00.FE0CWCLM;
    ;
    FE0CW00.FE0CWTOT = FE0CW01.FE0CWFCS[FE0CWIXN];
    FE0CW01.FE0CWFCS[FE0CWIXN] = FE0CW00.FE0CWTOT - FE0CW00.FF6PRFCT;
    FE0CW00.FE0CWTOT = FE0CW01.FE0CWFCS[FE0CWIXN];
    FE0CW01.FE0CWFCS[FE0CWIXN] = FE0CW00.FE0CWTOT + FE0CW00.FE0CWFCS;
    FE0CW01.FE0CWFCH[FE0CWIXN] = "Y"; /* Indicate monthly fcst chngd*/
    ;
    FFXREC.FFXNUMB = FE0CW01.FE0CWFCS[FE0CWIXN];
    XSFFS10();
    FE0CW01.FE0CWFCT[FE0CWIXN] = FFXREC.FFXCHAR;
    ;
  end
  ;
  FE0CS03();
                                   /* Update current temporary storage page*/
  ;
  FE0CW00.FE0CWSWU = "N"; /* Reset update switch*/
  ;
  FE0CW00.FE0CWNPG = 0; /* Clear next page number*/
  ;
  TA5REC.TA5TSQIX = FE0CW00.XXXTSPAG; /* Restore previous page*/
  ;
  FE0CS04(); /* Restore previou TSQ page*/
  ;
  ;
end // end FE0CS02

// Update temp storage page
Function FE0CS03()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FE0CW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS03

// Read temp storage page
Function FE0CS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0CW01.XXXTSLEN = FE0CW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FE0CW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS04

// Calculate subtots and tots
Function FE0CS06()
   /* ---------------------------------------------------*/
      /* Calculate the subtotal for each style color.*/
   /* ---------------------------------------------------*/
  ;
  FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXM - 1;
  FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF * 12 + FE0CW00.FE0CWLEF;
  FE0CW00.FE0CWIXE = FE0CW00.FE0CWIXF + FE0CW00.FE0CWMOS - 1;
  ;
  FE0CW00.FE0CWTSB = 0; /* Initialize the temp subtotal area*/
  ;
  while (FE0CW00.FE0CWIXF <= FE0CW00.FE0CWIXE) /* Until end the row*/
    ;
    FE0CW00.FE0CWTSB = FE0CW00.FE0CWTSB + FE0CW01.FE0CWFCS[FE0CWIXF];
    ;
    FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF + 1;
    ;
  end
  ;
  FE0CW01.FE0CWSUB[FE0CWIXM] = FE0CW00.FE0CWTSB;
  FFXREC.FFXNUMB = FE0CW00.FE0CWTSB;
  XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
  FE0CW01.FE0CWSBC[FE0CWIXM] = FFXREC.FFXCHAR;
  ;
   /* ---------------------------------------------------*/
      /* Calculate the grand total for each style color.*/
   /* ---------------------------------------------------*/
  ;
  FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXM - 1;
  FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF * 12 + 1;
  FE0CW00.FE0CWIXE = FE0CW00.FE0CWIXF + 11;
  ;
  FE0CW00.FE0CWTGD = 0; /* Initialize the temp grand total area*/
  ;
  while (FE0CW00.FE0CWIXF <= FE0CW00.FE0CWIXE) /* Until end the row*/
    ;
    FE0CW00.FE0CWTGD = FE0CW00.FE0CWTGD + FE0CW01.FE0CWFCS[FE0CWIXF];
    ;
    FE0CW00.FE0CWIXF = FE0CW00.FE0CWIXF + 1;
    ;
  end
  ;
  FE0CW01.FE0CWGND[FE0CWIXM] = FE0CW00.FE0CWTGD;
  FFXREC.FFXNUMB = FE0CW00.FE0CWTGD;
  XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
  FE0CW01.FE0CWGNC[FE0CWIXM] = FFXREC.FFXCHAR;
  ;
end // end FE0CS06

// Process the  active product
Function FE0CS07()
  ;
  if (FF3REC.PG2FPDMO <= FFWREC.FFAENDMO
   /* Proj. intro date within range*/
   && FF3REC.SY2PNCMO >= FFWREC.FFABEGMO)
                                   /* Proj. clsout date within range*/
    ;
    /* ------------------------------------------------------------*/
     /* If style group changed, calculate the total for the style*/
     /* group and load the new style group number and style group*/
     /* name into the display storage.*/
     /* If there is no style color fcst for the previous style grp,*/
     /* clear the style group line unless the all styles flag = "Y"*/
    /* ------------------------------------------------------------*/
    ;
    if (FF3REC.SYBSTGNB != FE0CW00.SYBSTGNB) /* Style group changed*/
      ;
      if (FE0CW00.SYBSTGNB != " ") /* Not 1st time thru*/
        FE0C180(); /* Calculate the totals*/
        if (FE0CW00.FE0CWIXM > 14)
          FE0C190(); /* Add page to temporary storage*/
        end
        ;
      end
      ;
      FE0CW00.SYBSTGNB = FF3REC.SYBSTGNB; /* Save new style grp*/
      FE0CW01.FE0CWSTY[FE0CWIXM] = FF3REC.SYBSTGNB; /* Stygrp no*/
      FE0CW01.FE0CWDES[FE0CWIXM] = FF3REC.SYBSTGNM; /* Stygrp name*/
      FE0CW01.FE0CWGFL[FE0CWIXM] = "Y"; /* Style group flag*/
      ;
      FE0CWIXM = FE0CWIXM + 1;
      ;
      if (FE0CW00.FE0CWIXM > 14)
        ;
        FE0C190(); /* Add page to temporary storage*/
        ;
      end
      ;
    end
    ;
    FE0CW01.FE0CWSTY[FE0CWIXM] = FF3REC.SY1STNBR; /* Style number*/
    FE0CW00.SY2CLRID = FF3REC.SY2CLRID; /* Color id*/
    FE0CW00.XDMCD = FF3REC.XDMCD; /* Dimension code*/
    FE0CW00.SY2CLRAB = FF3REC.SY2CLRAB; /* Color abbreviation*/
    FE0CW01.FE0CW1SD[FE0CWIXM] = FF3REC.PG2FPDMO; /* 1st Dom sales mo*/
    FE0CW01.FE0CWCOD[FE0CWIXM] = FF3REC.SY2PNCMO; /* Proj. C/O mo*/
    FE0CW01.FE0CWDES[FE0CWIXM] = FE0CW00.FE0CWDES;
    FE0CW01.FE0CWGFL[FE0CWIXM] = "N"; /* style group flag*/
    ;
    /* ------------------------------------------------------------*/
     /* Save the earliest projected intro. date and latest closeout*/
     /* date.*/
    /* ------------------------------------------------------------*/
    ;
    if (FF3REC.PG2FPDMO < FE0CW00.FE0CW1SD /* 1st DOM sls month is earlier*/
     || FE0CW00.FE0CW1SD == 0)             /* or no date in work area*/
      ;
      FE0CW00.FE0CW1SD = FF3REC.PG2FPDMO;
                                   /* Save the earlier intro mo*/
      ;
    end
    ;
    if (FF3REC.SY2PNCMO > FE0CW00.FE0CWCOD) /* Get the latest closeout date*/
      ;
      FE0CW00.FE0CWCOD = FF3REC.SY2PNCMO; /* Proj. closeout month*/
      ;
    end
    ;
    if (FFWREC.XCTCD == " ") /* country code blank select sum*/
      FE0C174(); /* Access DFCAST.VMSTY001 table*/
    else
      FE0C170(); /* Access DFCAST.VMSTY001 table*/
    end
    ;
    FE0CS06(); /* Calculate subtotals & totals*/
    FE0CW00.FE0CWIXM = FE0CW00.FE0CWIXM + 1;
    ;
    if (FE0CW00.FE0CWIXM > 14)
      ;
      FE0CS01(); /* Accumulate the style group total*/
      ;
      FE0C190(); /* Add page to temporary storage*/
      ;
    end
    ;
  end
  ;
end // end FE0CS07

// Process the active product
Function FE0CS08()
  ;
  if (FG9REC.PG2FPDMO <= FFWREC.FFAENDMO
   /* Proj. intro date within range*/
   && FG9REC.SY2PDCMO >= FFWREC.FFABEGMO)
                                   /* Proj. clsout date within range*/
    ;
    /* ------------------------------------------------------------*/
     /* If style group changed, calculate the total for the style*/
     /* group and load the new style group number and style group*/
     /* name into the display storage.*/
     /* If there is no style color fcst for the previous style grp,*/
     /* clear the style group line unless the all styles flag = "Y"*/
    /* ------------------------------------------------------------*/
    ;
    if (FG9REC.SYBSTGNB != FE0CW00.SYBSTGNB) /* Style group changed*/
      ;
      if (FE0CW00.SYBSTGNB != " ") /* Not 1st time thru*/
        FE0C180(); /* Calculate the totals*/
        if (FE0CW00.FE0CWIXM > 14)
          FE0C190(); /* Add page to temporary storage*/
        end
      end
      ;
      FE0CW00.SYBSTGNB = FG9REC.SYBSTGNB; /* Save new style grp*/
      FE0CW01.FE0CWSTY[FE0CWIXM] = FG9REC.SYBSTGNB; /* Stygrp no*/
      FE0CW01.FE0CWDES[FE0CWIXM] = FG9REC.SYBSTGNM; /* Stygrp name*/
      FE0CW01.FE0CWGFL[FE0CWIXM] = "Y"; /* Style group flag*/
      ;
      FE0CWIXM = FE0CWIXM + 1;
      ;
      if (FE0CW00.FE0CWIXM > 14)
        ;
        FE0C190(); /* Add page to temporary storage*/
        ;
      end
      ;
    end
    ;
    FE0CW01.FE0CWSTY[FE0CWIXM] = FG9REC.SY1STNBR; /* Style number*/
    FE0CW00.SY2CLRID = FG9REC.SY2CLRID; /* Color id*/
    FE0CW00.XDMCD = FG9REC.XDMCD; /* Dimension code*/
    FE0CW00.SY2CLRAB = FG9REC.SY2CLRAB; /* Color abbreviation*/
    FE0CW01.FE0CW1SD[FE0CWIXM] = FG9REC.PG2FPDMO; /* 1st Dom sales mo*/
    FE0CW01.FE0CWCOD[FE0CWIXM] = FG9REC.SY2PDCMO; /* Proj. C/O mo*/
    FE0CW01.FE0CWDES[FE0CWIXM] = FE0CW00.FE0CWDES;
    FE0CW01.FE0CWGFL[FE0CWIXM] = "N"; /* style group flag*/
    ;
    /* ------------------------------------------------------------*/
     /* Save the earliest projected intro. date and latest closeout*/
     /* date.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG9REC.PG2FPDMO < FE0CW00.FE0CW1SD /* 1st DOM sls month is earlier*/
     || FE0CW00.FE0CW1SD == 0)             /* or no date in work area*/
      ;
      FE0CW00.FE0CW1SD = FG9REC.PG2FPDMO;
                                   /* Save the earlier intro mo*/
      ;
    end
    ;
    if (FG9REC.SY2PDCMO > FE0CW00.FE0CWCOD) /* Get the latest closeout date*/
      ;
      FE0CW00.FE0CWCOD = FG9REC.SY2PDCMO; /* Proj. closeout month*/
      ;
    end
    ;
    if (FFWREC.XCTCD == " ") /* country code blank select sum*/
      FE0C174(); /* Access DFCAST.VMSTY001 table*/
    else
      FE0C170(); /* Access DFCAST.VMSTY001 table*/
    end
    ;
    ;
    FE0CS06(); /* Calculate subtotals & totals*/
    FE0CW00.FE0CWIXM = FE0CW00.FE0CWIXM + 1;
    ;
    if (FE0CW00.FE0CWIXM > 14)
      ;
      FE0CS01(); /* Accumulate the style group total*/
      ;
      FE0C190(); /* Add page to temporary storage*/
      ;
    end
    ;
  end
  ;
end // end FE0CS08

// Sel & open csr for VFFXRF01
Function FE0CS11()
  ;
  set FF2REC empty; /* Clear the storage row*/
  ;
  FF2REC.XPCCD = FE0CM001.XPCCD; /* Category code*/
  FF2REC.YPGCD = FE0CM001.YPGCD; /* Type group code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/
  FF2REC.XPLCD = "*"; /* Product line code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S11"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS11

// Fetch next row in VFFXRF01
Function FE0CS12()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* or end of select set*/
      converseLib.validationFailed(203); /* Indicate inconsistent*/
      FFWREC.XXXMODID = "S12"; /* Module identification*/
      set FE0CM001.YPGCD cursor, bold; /* Highlight*/
      set FE0CM001.XPCCD bold; /* Highlight*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S12"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS12

// Close the VFFXRF01 cursor
Function FE0CS13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S13"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS13

// Read VMSTY001 row
Function FE0CS20()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XCTCD == " ")
    FE0CS21(); /* Select sum quantity*/
    FE0CW00.FF6PRFCT = FF9REC.FF6PRFCT; /* save old sum value*/
    set FF9REC empty; /* Clear row storage area*/
    FF9REC.XCTCD = "0000"; /* Country code*/
  else
    set FF9REC empty; /* Clear row storage area*/
    FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  end
  ;
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FE0CW01.FE0CWSTY[FE0CWIXM]; /* Style number*/
  FE0CW00.FE0CWDES = FE0CW01.FE0CWDES[FE0CWIXM];
  FF9REC.SY2CLRID = FE0CW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FE0CW00.XDMCD; /* Dimension code*/
  ;
  FF9REC.FF4FCTMO = FE0CW00.FE0CWHDG[FE0CWCLM]; /* Fcst month*/
  ;
  try
    call "IO3740" ("S ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S20"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS20

// Read DFCAST.VMSTY001 - SUM
Function FE0CS21()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF9REC empty; /* Clear row storage area*/
  ;
  FF9REC.XCTCD = "*"; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FE0CW01.FE0CWSTY[FE0CWIXM]; /* Style number*/
  FE0CW00.FE0CWDES = FE0CW01.FE0CWDES[FE0CWIXM];
  FF9REC.SY2CLRID = FE0CW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FE0CW00.XDMCD; /* Dimension code*/
  ;
  set FFFREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FE0CW00.FE0CWHDG[FE0CWCLM]; /* Fcst month*/
  FFFREC.FFFENDMO = FE0CW00.FE0CWHDG[FE0CWCLM]; /* Fcst month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  ;
  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100
       || SQLCA.VAGen_SQLCODE == -305)
        return; /* Return to previous process*/
      end
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S21"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0CS21

// Update DFCAST.VMSTY001
Function FE0CS22()
  ;
  if (FFWREC.XCTCD == " ") /* country code blank*/
    FE0CW00.FE0CWVAR = FE0CW01.FE0CWFCS[FE0CWIXW] - FE0CW00.FF6PRFCT;
                                                                 /* old sum*/
    ;
    FF9REC.FF6PRFCT = FF9REC.FF6PRFCT + FE0CW00.FE0CWVAR; /* add to fcst*/
  else
    FE0CW00.FE0CWVAR = FE0CW01.FE0CWFCS[FE0CWIXW] - FF9REC.FF6PRFCT;
    FF9REC.FF6PRFCT = FE0CW01.FE0CWFCS[FE0CWIXW]; /* move new value*/
  end
   /* add variance to category level*/
  FE0CW00.FE0CWCV[FE0CWCLM] = FE0CW00.FE0CWCV[FE0CWCLM] + FE0CW00.FE0CWVAR;
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FE0CW01.FE0CWCNT[FE0CWIXW] = FE0CW01.FE0CWCNT[FE0CWIXW] + 1;
                                   /* add 1 chg cnt*/
  ;
  ;
  try
    call "IO3740" ("U ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S22"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS22

// Add DFCAST.VMSTY001
Function FE0CS23()
  set FF9REC empty;
  if (FFWREC.XCTCD == " ") /* calculate variance for '0000' prod fcst*/
    FF9REC.XCTCD = "0000"; /* Country code*/
    FE0CW00.FE0CWVAR = FE0CW01.FE0CWFCS[FE0CWIXW] - FE0CW00.FF6PRFCT;
    FF9REC.FF6PRFCT = FE0CW00.FE0CWVAR; /* move var to prod fcst*/
  else
    FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
    FF9REC.FF6PRFCT = FE0CW01.FE0CWFCS[FE0CWIXW]; /* prod forecast*/
  end
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FE0CW01.FE0CWSTY[FE0CWIXM]; /* Style number*/
  FE0CW00.FE0CWDES = FE0CW01.FE0CWDES[FE0CWIXM];
  FF9REC.SY2CLRID = FE0CW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FE0CW00.XDMCD; /* Dimension code*/
  ;
  FF9REC.FF4FCTMO = FE0CW00.FE0CWHDG[FE0CWCLM]; /* Fcst month*/
   /* add production forecast to category total*/
  FE0CW00.FE0CWCV[FE0CWCLM] = FE0CW00.FE0CWCV[FE0CWCLM] + FF9REC.FF6PRFCT;
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF9REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3740" ("A ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S23"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS23

// Read DFCAST.VMSGRP01
Function FE0CS24()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XCTCD == " ")
    FE0CS36(); /* select old sum*/
    FE0CW00.FF6PRFCT = FF8REC.FF6PRFCT; /* save old sum*/
    set FF8REC empty; /* Clear row storage area*/
    FF8REC.XCTCD = "0000"; /* Country code*/
  else
    set FF8REC empty; /* Clear row storage area*/
    FF8REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  end
  ;
  FF8REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF8REC.SYBSTGNB = FE0CW00.SYBSTGNB; /* Style group number*/
  FF8REC.FF4FCTMO = FE0CW00.FE0CWHDG[FE0CWCLM]; /* Fcst month*/
  ;
  try
    call "IO3730" ("S ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S24"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS24

// Add DFCAST.VMSGRP01
Function FE0CS25()
  ;
  set FF8REC empty;
  if (FFWREC.XCTCD == " ") /* calculate variance for '0000' prod*/
                                   /* fcst*/
    FF8REC.XCTCD = "0000"; /* Country code*/
    FE0CW00.FE0CWVAR = FE0CW01.FE0CWFCS[FE0CWIXW] - FE0CW00.FF6PRFCT;
    FF8REC.FF6PRFCT = FE0CW00.FE0CWVAR; /* move var to prod fcst*/
  else
    FF8REC.XCTCD = FFWREC.XCTCD; /* Country code*/
    FF8REC.FF6PRFCT = FE0CW01.FE0CWFCS[FE0CWIXW]; /* prod forecast*/
  end
  FF8REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF8REC.SYBSTGNB = FE0CW00.SYBSTGNB; /* Style group number*/
  FF8REC.FF4FCTMO = FE0CW00.FE0CWHDG[FE0CWCLM]; /* Fcst month*/
  ;
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF8REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF8REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF8REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3730" ("A ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S25"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS25

// Update DFCAST.VMSGRP01
Function FE0CS26()
  ;
   /* ------------------------------------------------------------*/
   /* calculate the sty group variance and add to current fcst*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XCTCD == " ") /* country code blank*/
    FE0CW00.FE0CWVAR = FE0CW01.FE0CWFCS[FE0CWIXW] - FE0CW00.FF6PRFCT;
                                   /* old sum*/
    ;
    FF8REC.FF6PRFCT = FF8REC.FF6PRFCT + FE0CW00.FE0CWVAR; /* add to fcst*/
  else
    FF8REC.FF6PRFCT = FE0CW01.FE0CWFCS[FE0CWIXW]; /* move new value*/
  end
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF8REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF8REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3730" ("U ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S26"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS26

// Read DFCAST.VMCAT001
Function FE0CS27()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  if (FFWREC.XCTCD == " ")
    FF7REC.XCTCD = "0000"; /* Country code*/
  else
    FF7REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  end
  ;
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* category code*/
  FF7REC.FF4FCTMO = FE0CW00.FE0CWHDG[FE0CWIXN]; /* Fcst month*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S27"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS27

// Add DFCAST.VMCAT001
Function FE0CS28()
  ;
  if (FFWREC.XCTCD == " ")
    FF7REC.XCTCD = "0000"; /* Country code*/
  else
    FF7REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  end
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF7REC.FF4FCTMO = FE0CW00.FE0CWHDG[FE0CWIXN]; /* Fcst month*/
  ;
  FF7REC.FF6PRFCT = FE0CW00.FE0CWCV[FE0CWIXN];
                                   /* move cat variance to fcst*/
  ;
  if (FFWREC.YPGCD == "01") /* if inline*/
    FF7REC.FF7FURAT = 0;
    FF7REC.FF7FLLRT = 92;
  else
    if (FFWREC.YPGCD == "02") /* if makeups*/
      FF7REC.FF7FURAT = 100;
      FF7REC.FF7FLLRT = 100;
    end
  end
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF7REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3700" ("A ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S28"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS28

// Update DFCAST.VMCAT001
Function FE0CS29()
  ;
  FF7REC.FF6PRFCT = FF7REC.FF6PRFCT + FE0CW00.FE0CWCV[FE0CWIXN]; /* add var*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S29"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS29

// Read DFCAST.VMONTH01
Function FE0CS30()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF4REC empty; /* Clear row storage area*/
  ;
  FF4REC.FF4FCTMO = FE0CW00.FE0CWHDG[FE0CWIXN]; /* Fcst month*/
  ;
  try
    call "IO3720" ("S ", SQLCA, FF4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S30"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMONTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF4REC.FF4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS30

// Add DFCAST.VMONTH01
Function FE0CS31()
  ;
  FF4REC.FF4FCTMO = FE0CW00.FE0CWHDG[FE0CWIXN]; /* Fcst month*/
  ;
  FF4REC.FF4NSBUY = FE0CW00.FE0CWCV[FE0CWIXN];
                                   /* move cat var to sugg buy*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF4REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3720" ("A ", SQLCA, FF4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S31"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMONTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF4REC.FF4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS31

// Update DFCAST.VMONTH01
Function FE0CS32()
  ;
  FF4REC.FF4NSBUY = FF4REC.FF4NSBUY + FE0CW00.FE0CWCV[FE0CWIXN]; /* add var*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3720" ("U ", SQLCA, FF4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S32"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMONTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF4REC.FF4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS32

// Select unique VFFSTY01
Function FE0CS33()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF3REC empty; /* Clear row storage area*/
  ;
  FF3REC.SY1STNBR = FG9REC.SY1STNBR; /* Style number*/
  FF3REC.SY2CLRID = FG9REC.SY2CLRID; /* Color id*/
  FF3REC.XDMCD = FG9REC.XDMCD; /* Dimension code*/
  ;
  try
    call "IO3990" ("S ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S33"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS33

// Insert into DFCAST.VPFHST01
Function FE0CS34()
  set FG9REC empty;
  ;
  FG9REC.SY1STNBR = FF3REC.SY1STNBR; /* move fields from VFFSTY01*/
  FG9REC.SY2CLRID = FF3REC.SY2CLRID;
  FG9REC.XDMCD = FF3REC.XDMCD;
  FG9REC.SYBSTGNB = FF3REC.SYBSTGNB;
  FG9REC.XPCCD = FF3REC.XPCCD;
  FG9REC.YPGCD = FF3REC.YPGCD;
  FG9REC.XPLCD = FF3REC.XPLCD;
  FG9REC.YSMXDV = "20";
  FG9REC.SY1STYNM = FF3REC.SY1STYNM;
  FG9REC.SYBSTGNM = FF3REC.SYBSTGNM;
  FG9REC.SY1SSTNM = FF3REC.SY1SSTNM;
  FG9REC.SY2CLRDS = FF3REC.SY2CLRDS;
  FG9REC.SY2CLRAB = FF3REC.SY2CLRAB;
  FG9REC.XSUCD = FF3REC.XSUCD;
  FG9REC.XGACD = FF3REC.XGACD;
  FG9REC.PG7MAXPR = FF3REC.PG7MAXPR;
  FG9REC.FF2SYMIN = FF3REC.FF2SYMIN;
  FG9REC.FF2GRMIN = FF3REC.FF2GRMIN;
  FG9REC.FF3PREFL = FF3REC.FF3PREFL;
  FG9REC.PG2FPDMO = FF3REC.PG2FPDMO;
  FG9REC.PG1SC4CD = FF3REC.PG1SC4CD;
  FG9REC.SY2FDSMO = FF3REC.SY2FNSMO;
  FG9REC.SY2PDCMO = FF3REC.SY2PNCMO;
  FG9REC.SY2SSCIN = FF3REC.SY2SSCIN;
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FG9REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FG9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FG9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FG9REC.ZZZSTM = XX0XW01.XX0XWTIM; /* set up time*/
  ;
  ;
  try
    call "IO5430" ("A ", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S34"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS34

// Select unique DFCAST.VPFHST01
Function FE0CS35()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  FG9REC.YSMXDV = "20"; /* Division code*/
  ;
  try
    call "IO5430" ("S ", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S35"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0CS35

// Select old sum VMSGRP01
Function FE0CS36()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF8REC empty; /* Clear row storage area*/
  ;
  FF8REC.XCTCD = "*"; /* Country code*/
  FF8REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF8REC.SYBSTGNB = FE0CW00.SYBSTGNB; /* Style group number*/
  ;
  set FFFREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FE0CW00.FE0CWHDG[FE0CWCLM]; /* Fcst month*/
  FFFREC.FFFENDMO = FE0CW00.FE0CWHDG[FE0CWCLM]; /* Fcst month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  ;
  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100
       || SQLCA.VAGen_SQLCODE == -305)
        return; /* Return to previous process*/
      end
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S36"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0CS36

//*** RECORD=FE0CW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0CW00 type basicRecord
  10 FE0CWIND FE0CWIND ; 
  10 FE0CWIXM FE0CWIXM ; 
  10 FE0CWIXW FE0CWIXW ; 
  10 FE0CWIXF FE0CWIXF ; 
  10 FE0CWIXE FE0CWIXE ; 
  10 FE0CWIXT FE0CWIXT ; 
  10 FE0CWIXN FE0CWIXN ; 
  10 FE0CWCLM FE0CWCLM ; 
  10 FE0CWCR1 FE0CWCR1 ; 
  10 FE0CWCR2 FE0CWCR2 ; 
  10 FE0CWCR3 FE0CWCR3 ; 
  10 FE0CWCR4 FE0CWCR4 ; 
  10 FE0CWUSY FE0CWUSY ; 
  10 FE0CWSWF FE0CWSWF ; 
  10 FE0CWSWR FE0CWSWR ; 
  10 FE0CWSWU FE0CWSWU ; 
  10 FE0CWSW1 FE0CWSW1 ; 
  10 FE0CWSWL FE0CWSWL ; 
  10 FE0CWMST FE0CWMST ; 
  10 FE0CWERR FE0CWERR ; 
  10 FE0CWUPD FE0CWUPD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FE0CWPAG FE0CWPAG ; 
  10 FE0CWNPG FE0CWNPG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FE0CWRIG FE0CWRIG ; 
  10 FE0CWLEF FE0CWLEF ; 
  10 FE0CWEND FE0CWEND ; 
  10 FE0CWGQT FE0CWGQT ; 
  10 FE0CWTSB FE0CWTSB ; 
  10 FE0CWTGD FE0CWTGD ; 
  10 FE0CWTOT FE0CWTOT ; 
  10 FE0CWGDT FE0CWGDT [12] ; 
  10 FE0CWFCS FE0CWFCS ; 
  10 FE0CWDTE FE0CWDTE ; 
    15 FE0CWDAT FE0CWDAT ; 
      20 FE0CWDCC FE0CWDCC ; 
      20 FE0CWDYM FE0CWDYM ; 
        25 FE0CWDYY FE0CWDYY ; 
        25 FE0CWDMM FE0CWDMM ; 
    15 FE0CWDAY FE0CWDAY ; 
  10 FE0CWHDG FE0CWHDG [12] ; 
    15 FE0CWHCC FE0CWHCC ; 
    15 FE0CWHYM FE0CWHYM ; 
  10 FE0CWMOS FE0CWMOS ; 
  10 FE0CWALL FE0CWALL ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FE0CWNM FE0CWNM ; 
  10 FE0CWVAR FE0CWVAR ; 
  10 FE0CWMVR FE0CWMVR [12] ; 
  10 FE0CWCV FE0CWCV [12] ; 
  10 FE0CW1SD FE0CW1SD ; 
    15 FE0CW1SC FE0CW1SC ; 
    15 FE0CW1SM FE0CW1SM ; 
  10 FE0CWCOD FE0CWCOD ; 
    15 FE0CWCOC FE0CWCOC ; 
    15 FE0CWCOM FE0CWCOM ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 FE0CWDES FE0CWDES ; 
    15 SY2CLRID SY2CLRID ; 
    15 * char(1) ; 
    15 XDMCD XDMCD ; 
    15 * char(1) ; 
    15 SY2CLRAB SY2CLRAB ; 
  10 FE0CWMTL FE0CWMTL [12] ; 
  10 FE0CWMTF FE0CWMTF [12] ; 
  10 FE0CWBMO FE0CWBMO ; 
  10 FE0CWEMO FE0CWEMO ; 
  10 XCTCD XCTCD ; 
    15 ZRGCD ZRGCD ; 
    15 FE0CWBLK char(2) ; // blank
end // end FE0CW00

//*** RECORD=FE0CW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FE0CW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(3344) ; 
    10 FE0CWBMO FE0CWBMO ; 
      15 FE0CWBCC FE0CWBCC ; 
      15 FE0CWBMY FE0CWBMY ; 
    10 FE0CWEMO FE0CWEMO ; 
      15 FE0CWECC FE0CWECC ; 
      15 FE0CWEMY FE0CWEMY ; 
    10 FE0CWSTY FE0CWSTY [14] ; 
    10 FE0CWDES FE0CWDES [14] ; 
    10 FE0CW1SD FE0CW1SD [14] ; 
    10 FE0CWCOD FE0CWCOD [14] ; 
    10 FE0CWGFL FE0CWGFL [14] ; 
    10 FE0CWFCT FE0CWFCT [180] ; 
    10 FE0CWFCH FE0CWFCH [180] ; 
    10 FE0CWFCS FE0CWFCS [180] ; 
    10 FE0CWCNT FE0CWCNT [180] ; 
    10 FE0CWSBC FE0CWSBC [14] ; 
    10 FE0CWSUB FE0CWSUB [14] ; 
    10 FE0CWGNC FE0CWGNC [14] ; 
    10 FE0CWGND FE0CWGND [14] ; 
    10 FE0CWSCH FE0CWSCH [14] ; 
end // end FE0CW01

// Century
DataItem FE0CW1SC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First domestic sales date
DataItem FE0CW1SD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First domestic sales month
DataItem FE0CW1SM char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// All styles flag
DataItem FE0CWALL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Century
DataItem FE0CWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning date of the range
DataItem FE0CWBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Beginning date of the range
DataItem FE0CWBMY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FE0CWCLM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Change count
DataItem FE0CWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FE0CWCOC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Projected dom closeout date
DataItem FE0CWCOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Projected dom closeout month
DataItem FE0CWCOM char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VFFXRF01
DataItem FE0CWCR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VFFSTY01
DataItem FE0CWCR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VMSTY001
DataItem FE0CWCR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VWSMTH01
DataItem FE0CWCR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Category variance for months
DataItem FE0CWCV int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date ccyymm
DataItem FE0CWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DD  work area
DataItem FE0CWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century work area
DataItem FE0CWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style grp/style color desc
DataItem FE0CWDES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MM work area
DataItem FE0CWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date ccyymmdd
DataItem FE0CWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMM work area
DataItem FE0CWDYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY work area
DataItem FE0CWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FE0CWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending date of the range
DataItem FE0CWEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Ending date of the range
DataItem FE0CWEMY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// End of range index
DataItem FE0CWEND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error occured switch
DataItem FE0CWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast changed flag
DataItem FE0CWFCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0CWFCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast enter & display field
DataItem FE0CWFCT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Cat grand total for each month
DataItem FE0CWGDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style group flag
DataItem FE0CWGFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total
DataItem FE0CWGNC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total
DataItem FE0CWGND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total qty of grand total field
DataItem FE0CWGQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading century work area
DataItem FE0CWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading work area
DataItem FE0CWHDG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading YYMM work area
DataItem FE0CWHYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Indicator of last disp row
DataItem FE0CWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FE0CWIXE smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FE0CWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FE0CWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FE0CWIXN smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FE0CWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FE0CWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Scroll right index
DataItem FE0CWLEF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No. of month in season
DataItem FE0CWMOS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Master fcst saved switch
DataItem FE0CWMST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month total change flag
DataItem FE0CWMTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month total work area
DataItem FE0CWMTL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Monthly variance for the fcsts
DataItem FE0CWMVR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric work field
DataItem FE0CWNM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Next TSQ page number
DataItem FE0CWNPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Curr TSQ page for PF15 process
DataItem FE0CWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Scroll left index
DataItem FE0CWRIG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subtotal
DataItem FE0CWSBC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Style total change flag
DataItem FE0CWSCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style group/style number
DataItem FE0CWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Subtot
DataItem FE0CWSUB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First time through switch
DataItem FE0CWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0CWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last row switch
DataItem FE0CWSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FE0CWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FE0CWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total work area
DataItem FE0CWTGD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total field work area
DataItem FE0CWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subtotal work area
DataItem FE0CWTSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error occured switch
DataItem FE0CWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style updated switch
DataItem FE0CWUSY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Variance between old & new fcs
DataItem FE0CWVAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

