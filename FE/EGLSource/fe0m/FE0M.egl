package fe0m;

import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS30;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import corpy2.YSMSRCVL;
import fb.common.FB7REC;
import fb.common.FB8REC;
import fb.common.FBKREC;
import ff.common.*;
import pa.common.PA1REC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FE0M ****
// This application provides an on-line tool for the user to
// inquire and balance the submitted buy, footwear buy and
// order adjustment quantities at the product level.
// 
// This application requests the user to enter type group code,
// category code and actual buy month. So the associated short
// range current worksheet can be used, and product list can
// be obtained and be used to retrieve the related footwear
// buy and O/A information.
// 
// The submitted buy quantities on the S/R worksheet are
// the quantities which haven't been reconciled. For the
// contemporaneous month it might include the carryover
// submitted buy quantities from previous months.
// 
// The footwear buy quantities from footwear buy system are the
// ones which have any status but 'C' (complete) and 'R' (recon
// -ciled) and have the buy date as the actual buy month with
// day 01.
// 
// The O/A quantities from order adjustment system are the ones
// with the open status (not '70','71','95') and have the same
// submit forecast month as the actual buy month and haven't
// been reconciled. (fcst relieve flag = 'N')  In order to
// identify the variance among submitted buy, footwear buy and
// O/A for the contemporaneous month correctly, adding all the
// open O/A quantities from prior months (a year back from the
// current month) is necessary.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/31/92  JJUCH   New application.
//          03/16/95  mdange  Eliminate centralized Europe
//                            Order Adjustments by screening
//                            out any O/A numbers greater than
//                            199999.
//          12/04/96  cwhit1  fix leading 0's for yr 2000
// 
// FL1289   10/14/97  AMAND1  Application is regenerated due to
//                            the oct'97 db2 table changes.
// *********************
Program FE0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB7REC FB7REC; // record
  FB8REC FB8REC; // record
  FBKREC FBKREC; // record
  FE0MW00 FE0MW00; // record
  FE0MW01 FE0MW01; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  PA1REC PA1REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FE0MM.FE0MM001, // form
  		FE0MM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FE0MM001 initial; /* M001 input/output*/
    set FE0MW00 empty; /* Working storage*/
    set FE0MW01 empty; /* m001 display storage*/
    set FE0MW01 empty; /* M001 temporary storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FE0MW00.XXXTSLEN = 1188; /* temp storage length*/

    FE0MW00.FE0MWSWR = "N"; /* Request for data switch*/
    FE0MW00.FE0MWSWF = "N"; /* format screen data switch*/
    FE0MW00.XXXTSPAG = 1; /* page number*/

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process*/
     /* ------------------------------------------------------------*/

    goto FE0M001; /* Converse the main process*/

    FE0M001: FE0M001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/

    goto FE0M001; /* converse the main process*/

  end // end main
end // end FE0M

// sbmt buy, ftwr buy and O/A inq
Function FE0M001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FE0M100(); /* Obtain the data to display*/

  FE0M200(); /* Format and display the map*/

  FE0M300(); /* Check attention identifier*/

  FE0M400(); /* Reset fields to normal intensity*/

  FE0M500(); /* Verify the entered data*/

  FE0M600(); /* Process valid input request*/


end // end FE0M001

// Obtain data for display
Function FE0M100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FE0MW00.FE0MWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FE0MS01(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain the open status code for O/A quantities.*/
   /* ------------------------------------------------------------*/

  FE0M110();

   /* ------------------------------------------------------------*/
   /* Clear the total work area*/
   /* ------------------------------------------------------------*/

  FE0MW00.FE0MW-SBMT-BUY-TOT = 0; /* submitted buy total*/
  FE0MW00.FE0MW-FTWR-BUY-TOT = 0; /* ftwr buy total*/
  FE0MW00.FE0MW-OA-TOT = 0; /* oa total*/
  FE0MW00.FE0MW-FTWR-OA-TOT = 0; /* ftwr buy + o/a total*/

   /* ------------------------------------------------------------*/
   /* Obtain short range current worksheet*/
   /* ------------------------------------------------------------*/

  FE0MW00.FE0MWIDX = 1; /* Process row index*/
  FE0MW01.FE0MWNLD = 1; /* Load index*/
  FE0MW00.FE0MW-SWHDR-CSR = "N"; /* swhdr01 cursor*/

  FE0M120(); /* Open 'S1' vswhdr01 cursor*/
  FE0M130(); /* Fetch 'N1' in vswhdr01 cursor*/

  while (FE0MW00.FE0MW-SWHDR-CSR == "N") /* Until end of cursor*/
    if (FE0MW00.FE0MW-ACTL-BUY-MO >= FFQREC.FFABEGMO /* >= fcst beg mo*/
     && FE0MW00.FE0MW-ACTL-BUY-MO <= FFQREC.FFAENDMO) /* <= fcst end mo*/

      FE0M135(); /* Save style color description*/
      FE0M140(); /* Obtain submitted buy from vswitm01*/
      FE0M150(); /* Process footwear buy information*/
      FE0M160(); /* Process O/A information*/

      FE0MW01.FE0MW-FTWR-OA[FE0MWIDX] = FE0MW00.FE0MWNM1; /* ftwr+o/a*/
      FE0MW00.FE0MW-FTWR-OA-TOT = FE0MW00.FE0MW-FTWR-OA-TOT +                               FE0MW00.FE0MWNM1;

      FFXREC.FFXNUMB = FE0MW00.FE0MWNM1;
      XSFFS10();
      FE0MW01.FE0MW-FTWR-OA-THOUS[FE0MWIDX] = FFXREC.FFXCHAR;
      FE0MW00.FE0MWNM1 = 0;

      if (FE0MW00.FE0MWIDX == 15) /* Page full*/
        FE0MS04(); /* Add page to temp storage*/
      end

      FE0MW00.FE0MWIDX = FE0MW00.FE0MWIDX + 1; /* Process row index*/
      FE0MW01.FE0MWNLD = FE0MW01.FE0MWNLD + 1; /* Load index*/

    end
    FE0M130(); /* Fetch 'N1' in vswhdr01 cursor*/

  end

  FE0M180(); /* Close vswhdr01 cursor*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FE0MW00.FE0MWIDX > 1) /* Page was formatted*/
    FE0MW01.FE0MWNLD = FE0MW01.FE0MWNLD - 1; /* Load index*/
    FE0MS04(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0MW00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FE0MW00.XXXTSPAG = 1; /* Desired page number*/
  FE0MW00.FE0MWSWR = "N"; /* Request for data switch*/
  FE0MW00.FE0MWSWF = "Y"; /* Format the data switch*/

end // end FE0M100

// Obtn open status from vsumcd01
Function FE0M110()
  FE0MW00.FE0MW-SUMCD-CSR = "N"; /* end of sumcd01 cursor*/
  FE0MW00.FE0MWYIX = 1; /* open status index*/

  FE0M111(); /* Open 'S1' vsumcd01 cursor*/
  FE0M112(); /* Fetch 'N1' next in the cursor*/

  while (FE0MW00.FE0MW-SUMCD-CSR == "N")

    FE0MW00.FE0MWYIX = FE0MW00.FE0MWYIX + 1;
    FE0M112(); /* Fetch 'N1' next in the cursor*/

  end

  FE0M113(); /* Close 'c1' cursor*/

end // end FE0M110

// Open  'S1' vsumcd01 cursor
Function FE0M111()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format dcorp.vsumcd01.*/
   /* ------------------------------------------------------------*/

  YSMREC.YSMTBLPF = "YES"; /* table prefix*/
  YSMREC.YSMSYSPF = "PA"; /* system prefix*/
  YSMREC.YSMSUMID = 3; /* sum id*/
  YSMREC.YSMSUMCD = "OP"; /* sum code*/
  YSMREC.YSMSRCVL = "****"; /* sum code value*/

   /* ------------------------------------------------------------*/
   /* select set dcorp.vsumcd01*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DCORP.VSUMCD01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M111

// Fetch 'N1' in vsumcd01 cursor
Function FE0M112()
   /* ------------------------------------------------------------*/
   /* Fetch dcorp.vsumcd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FE0MW00.YSMSRCVL[FE0MWYIX] = YSMREC.YSMSRCVL; /* Save op status*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      FE0MW00.FE0MW-SUMCD-CSR = "Y"; /* end of file*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DCORP.VSUMCD01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M112

// Close 'C1' vsumcd01 cursor
Function FE0M113()
   /* ------------------------------------------------------------*/
   /* Close dcorp.vsumcd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "113"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DCORP.VSUMCD01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FE0M113

// Open  'S1' vswhdr01 cursor
Function FE0M120()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format Dfcast.vswhdr01.*/
   /* ------------------------------------------------------------*/

  FFQREC.XPCCD = FFWREC.XPCCD; /* product line*/
  FFQREC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FFQREC.XWSCD = "01"; /* current worksheet*/
  FFQREC.FFABEGMO = -1; /* begin month*/
  FFQREC.FFQMBYMO = -1; /* main buy month*/
  FFQREC.SY2SSCIN = "*"; /* safety stock indicator*/
  FFQREC.ZZZCHGDT = -1; /* setup date*/
  FFQREC.ZZZCHGTM = -1; /* setup time*/

   /* ------------------------------------------------------------*/
   /* select set dfcast.vswhdr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("S1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DFCAST.VSWHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M120

// Fetch 'N1' in vswhdr01 cursor
Function FE0M130()
   /* ------------------------------------------------------------*/
   /* Fetch Dfcast.vswhdr01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("N1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      FE0MW00.FE0MW-SWHDR-CSR = "Y"; /* end of file*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VSWHDR01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M130

// Save style color description
Function FE0M135()
  FE0MW00.SY1STNBR = FFQREC.SY1STNBR; /* style number*/
  FE0MW00.SY2CLRID = FFQREC.SY2CLRID; /* style color id*/
  FE0MW00.XDMCD = FFQREC.XDMCD; /* dimension code*/
  FE0MW00.FE0MWDH1 = "-";
  FE0MW00.FE0MWDH2 = "-";
  FE0MW01.FE0MW-STY-DES[FE0MWIDX] = FE0MW00.FE0MWDSC;

  FE0MS02(); /* obtain color abbreviation*/

  if (SQLCA.VAGen_SQLCODE == 0) /* dprodg.vsyclr01 recd found*/
    FE0MW01.FE0MW-COLR-ABRV[FE0MWIDX] = PG2REC.SY2CLRAB;
    FE0MW01.FE0MW-STY-NAME[FE0MWIDX] = PG2REC.SY1SSTNM;
  else
    FE0MW01.FE0MW-COLR-ABRV[FE0MWIDX] = "  ";
    FE0MS05(); /* obtain style dev. short style name*/
    FE0MW01.FE0MW-STY-NAME[FE0MWIDX] = PG4REC.SY1SSTNM;
  end

end // end FE0M135

// Obtain sbmt buy from vswitm01
Function FE0M140()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FFRREC empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format Dfcast.vswitm01.*/
   /* ------------------------------------------------------------*/

  FFRREC.FFEWSNBR = FFQREC.FFEWSNBR; /* worksheet no*/
  FFRREC.FF4FCTMO = FE0MW00.FE0MW-ACTL-BUY-MO; /* fcst month*/

   /* ------------------------------------------------------------*/
   /* select set dfcast.vswitm01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3820" ("S ", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    FE0MW01.FE0MW-SBMT-BUY[FE0MWIDX] = FFRREC.FFRSUBBY; /* submit buy*/
    FFXREC.FFXNUMB = FFRREC.FFRSUBBY;
    XSFFS10();
    FE0MW01.FE0MW-SBMT-BUY-THOUS[FE0MWIDX] = FFXREC.FFXCHAR;

    FE0MW00.FE0MW-SBMT-BUY-TOT = FE0MW00.FE0MW-SBMT-BUY-TOT +                                FFRREC.FFRSUBBY; /* Accum sbmt buy*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ON DFCAST.VSWITM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M140

// Process ftwr buy information
Function FE0M150()
   /* -----------------------------------------------------------------*/
   /* This process will use the buy total of all the buy transactions*/
   /* from dfbuy.vfqtbs01 table to subtract out the reconciled total*/
   /* from dfbuy.vmfbuy01 table to get the total which is still open.*/
   /* -----------------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* Obtain all the reconciled record from dfbuy.vmfbuy01.*/
   /* ----------------------------------------------------------*/

  FE0MW00.FE0MW-MFBUY-CSR = "N";
  FE0MW00.FE0MW-FOUND = "N";
  FE0MW00.FE0MWNM2 = 0; /* reconciled buy qty work area*/

  FE0M151(); /* Open dfbuy.vmfbuy01 cursor*/
  FE0M152(); /* Fetch next in the cursor*/

  while (FE0MW00.FE0MW-MFBUY-CSR == "N"
   && FE0MW00.FE0MW-FOUND == "N") /* Record not found yet*/

    if (FB7REC.FB7BUYST == "R"       /* reconciled*/
     && FB7REC.XQACD == "01"         /* A grade*/
     && FB7REC.XPRCD == FFQREC.XPRCD /* type code*/
     && FB7REC.XPLCD == FFQREC.XPLCD /* line code*/
     && FB7REC.XPCCD == FFQREC.XPCCD /* category code*/
     && FB7REC.XCTCD == "USA")       /* country code*/
      if (FB7REC.XDVCD == "01" /* divison code*/
       || FB7REC.XDVCD == "05" 
       || FB7REC.XDVCD == "06" 
       || FB7REC.XDVCD == "07")
        FE0MW00.FE0MWNM2 = FE0MW00.FE0MWNM2 + FB7REC.FB8FTQTB; /* accum recncl*/
        FE0MW00.FE0MW-FOUND = "Y";
      end
    end

    FE0M152(); /* Fetch next in the cursor*/

  end

  FE0M154(); /* Close the cursor*/

   /* ----------------------------------------------------------*/
   /* Obtain all the buy total from dfbuy.vfqtbs01 table.*/
   /* ----------------------------------------------------------*/

  FE0M155(); /* select dfbuy.vfqtbs01*/

  FE0M156(); /* Calculate the ftwr buy qty*/
end // end FE0M150

// Open  'S1' vmfbuy01 cursor
Function FE0M151()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FB7REC empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format Dfbuy.vmfbuy01.*/
   /* ------------------------------------------------------------*/

  FB7REC.SY1STNBR = FFQREC.SY1STNBR; /* style number*/
  FB7REC.SY2CLRID = FFQREC.SY2CLRID; /* color id*/
  FB7REC.XDMCD = FFQREC.XDMCD; /* dimension code*/
  FB7REC.XWHCD = "*"; /* whse code*/
  FB7REC.FB7RTADT = -1; /* rta date*/
  FB7REC.PC2CUXID = "*"; /* pc prdcu id*/
  FE0MW00.FE0MWCYM = FE0MW00.FE0MW-ACTL-BUY-MO; /* actual buy month*/
  FE0MW00.FE0MWCDD = 01;
  FB7REC.FB8BUYDT = FE0MW00.FE0MWCWD; /* buy date*/

   /* ------------------------------------------------------------*/
   /* select set dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("S1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DFBUY.VMFBUY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M151

// Fetch 'N1' in vmfbuy01 cursor
Function FE0M152()
   /* ------------------------------------------------------------*/
   /* Fetch Dfbuy.vmfbuy01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("N1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      FB7REC.FB8FTQTB = 0;
      FE0MW00.FE0MW-MFBUY-CSR = "Y"; /* end of file*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "152"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFBUY.VMFBUY01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M152

// Close 'C1' vmfbuy01 cursor
Function FE0M154()
   /* ------------------------------------------------------------*/
   /* Close dfbuy.vmfbuy01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("C1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "154"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFBUY.VMFBUY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FE0M154

// Select buy total from vfqtbs01
Function FE0M155()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FBKREC empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format Dfbuy.vmfbuy01.*/
   /* ------------------------------------------------------------*/

  FBKREC.FB8RCTYP = "B"; /* record type*/
  FBKREC.SY1STNBR = FFQREC.SY1STNBR; /* style number*/
  FBKREC.SY2CLRID = FFQREC.SY2CLRID; /* color id*/
  FBKREC.XDMCD = FFQREC.XDMCD; /* dimension code*/
  FE0MW00.FE0MWCYM = FE0MW00.FE0MW-ACTL-BUY-MO; /* actual buy month*/
  FE0MW00.FE0MWCDD = 01;
  FBKREC.FB8BUYDT = FE0MW00.FE0MWCWD; /* buy date*/

   /* ------------------------------------------------------------*/
   /* select set dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "155"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DFBUY.VMFBUY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M155

// Calculate ftwr buy qtys
Function FE0M156()
  FE0MW01.FE0MW-FTWR-BUY[FE0MWIDX] = FBKREC.FB8FTQTB; /* ftwr buy*/
  FE0MW00.FE0MW-FTWR-BUY-TOT = FE0MW00.FE0MW-FTWR-BUY-TOT +                              FBKREC.FB8FTQTB; /* accum ftwr buy*/
  FE0MW00.FE0MWNM1 = FE0MW00.FE0MWNM1 + FBKREC.FB8FTQTB; /* accum ftwr+o/a*/

  if (FBKREC.FB8FTQTB > 0)
    FE0MW01.FE0MW-FTWR-BUY[FE0MWIDX] = FE0MW01.FE0MW-FTWR-BUY[FE0MWIDX] -                                      FE0MW00.FE0MWNM2; /* reconciled*/
    FE0MW00.FE0MW-FTWR-BUY-TOT = FE0MW00.FE0MW-FTWR-BUY-TOT -                                FE0MW00.FE0MWNM2; /* reconciled*/
    FE0MW00.FE0MWNM1 = FE0MW00.FE0MWNM1 - FE0MW00.FE0MWNM2; /* ftwr buy + oa*/
  end

  FFXREC.FFXNUMB = FE0MW01.FE0MW-FTWR-BUY[FE0MWIDX];
  XSFFS10();
  FE0MW01.FE0MW-FTWR-BUY-THOUS[FE0MWIDX] = FFXREC.FFXCHAR;

end // end FE0M156

// Process O/A information
Function FE0M160()

  if (FFQREC.FFQCURMO == FE0MW00.FE0MW-ACTL-BUY-MO) /* contemp month*/
    FE0M170(); /* Roll up all the open O/A*/
  end

  FE0MW00.FE0MW-PAHDR-CSR = "N";
  FE0M161(); /* Open dproda.vpahdr01 cursor*/
  FE0M162(); /* Fetch next in the cursor*/

  while (FE0MW00.FE0MW-PAHDR-CSR == "N")

    if (PA1REC.YESCD in FE0MW00.YSMSRCVL /* open status*/
     && PA1REC.PA1OANBR < 200000)        /* o/a number less than 200000 not euro*/

      FE0M163(); /* Sum up the O/A qty*/

    end

    FE0M162(); /* Fetch next in the cursor*/

  end

  FE0M164(); /* Close the cursor*/

end // end FE0M160

// Open  'S1' dproda.vpahdr01
Function FE0M161()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set PA1REC empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format Dproda.vpahdr01.*/
   /* ------------------------------------------------------------*/

  PA1REC.SY1STNBR = FFQREC.SY1STNBR; /* style number*/
  PA1REC.SY2CLRID = FFQREC.SY2CLRID; /* color id*/
  PA1REC.XDMCD = FFQREC.XDMCD; /* dimension code*/
  PA1REC.PA1FCRFL = "N"; /* fcst relieve flag*/
  PA1REC.PA1SBFMO = FE0MW00.FE0MW-ACTL-BUY-MO; /* fcst submit month*/

   /* ------------------------------------------------------------*/
   /* select set dproda.vpahdr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4830" ("S1", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM ON DPRODA.VPAHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M161

// Fetch 'N1' in vpahdr01 cursor
Function FE0M162()
   /* ------------------------------------------------------------*/
   /* Fetch dproda.vpahdr01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4830" ("N1", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      FE0MW00.FE0MW-PAHDR-CSR = "Y"; /* end of file*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DPRODA.VPAHDR01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M162

// Summarize O/A qtys
Function FE0M163()
  FE0MW01.FE0MW-OA[FE0MWIDX] = FE0MW01.FE0MW-OA[FE0MWIDX] +                              PA1REC.PA1RQQTY; /* order adjustment*/
  FFXREC.FFXNUMB = FE0MW01.FE0MW-OA[FE0MWIDX];
  XSFFS10();
  FE0MW01.FE0MW-OA-THOUS[FE0MWIDX] = FFXREC.FFXCHAR;

  FE0MW00.FE0MW-OA-TOT = FE0MW00.FE0MW-OA-TOT + PA1REC.PA1RQQTY; /* accm o/a*/
  FE0MW00.FE0MWNM1 = FE0MW00.FE0MWNM1 + PA1REC.PA1RQQTY; /* accum ftwr+o/a*/

end // end FE0M163

// Close 'C1' vpahdr csr
Function FE0M164()
   /* ------------------------------------------------------------*/
   /* Close dproda.vpahdr01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4830" ("C1", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "164"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DPRODA.VPAHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FE0M164

// Sum up O/A before contp month
Function FE0M170()

   /* ------------------------------------------------------------------*/
   /* Sum up all the open O/A qty for the months prior to contp month.*/
   /* ------------------------------------------------------------------*/

  FE0MW00.FE0MWCYM = FE0MW00.FE0MW-ACTL-BUY-MO;
  if (FE0MW00.FE0MWCYY == 0)
    FE0MW00.FE0MWCYY = 99;
    FE0MW00.FE0MWCCC = FE0MW00.FE0MWCCC - 1;
  else
    FE0MW00.FE0MWCYY = FE0MW00.FE0MWCYY - 1;
  end

  while (FE0MW00.FE0MWCYM < FE0MW00.FE0MW-ACTL-BUY-MO)

    FE0MW00.FE0MW-PAHDR-CSR = "N";
    FE0M171(); /* Open dproda.vpahdr01 cursor*/
    FE0M172(); /* Fetch next in the cursor*/

    while (FE0MW00.FE0MW-PAHDR-CSR == "N")

      if (PA1REC.YESCD in FE0MW00.YSMSRCVL /* open status*/
       && PA1REC.PA1OANBR < 200000)       
                                      /* o/a nbr less than 200000, not euro*/

        FE0M173(); /* Sum up the O/A qty*/

      end

      FE0M172(); /* Fetch next in the cursor*/

    end

    FE0M174(); /* Close the cursor*/

    if (FE0MW00.FE0MWCMM == 12)
      FE0MW00.FE0MWCMM = 1;
      if (FE0MW00.FE0MWCYY == 99)
        FE0MW00.FE0MWCYY = 0;
        FE0MW00.FE0MWCCC = FE0MW00.FE0MWCCC + 1;
      else
        FE0MW00.FE0MWCYY = FE0MW00.FE0MWCYY + 1;
      end
    else
      FE0MW00.FE0MWCMM = FE0MW00.FE0MWCMM + 1;
    end

  end

end // end FE0M170

// Open 'S1' vpahdr01 csr - prior
Function FE0M171()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set PA1REC empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format Dproda.vpahdr01.*/
   /* ------------------------------------------------------------*/

  PA1REC.SY1STNBR = FFQREC.SY1STNBR; /* style number*/
  PA1REC.SY2CLRID = FFQREC.SY2CLRID; /* color id*/
  PA1REC.XDMCD = FFQREC.XDMCD; /* dimension code*/
  PA1REC.PA1FCRFL = "N"; /* fcst relieve flag*/
  PA1REC.PA1SBFMO = FE0MW00.FE0MWCYM; /* fcst submit month*/

   /* ------------------------------------------------------------*/
   /* select set dproda.vpahdr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4830" ("S1", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "171"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM ON DPRODA.VPAHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M171

// Fetch 'N1' in vpahdr csr-prior
Function FE0M172()
   /* ------------------------------------------------------------*/
   /* Fetch dproda.vpahdr01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4830" ("N1", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      FE0MW00.FE0MW-PAHDR-CSR = "Y"; /* end of file*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "172"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DPRODA.VPAHDR01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0M172

// Summarize previous O/A qty
Function FE0M173()
  FE0MW01.FE0MW-OA[FE0MWIDX] = FE0MW01.FE0MW-OA[FE0MWIDX] +                              PA1REC.PA1RQQTY; /* order adjustment*/
  FFXREC.FFXNUMB = FE0MW01.FE0MW-OA[FE0MWIDX];
  XSFFS10();
  FE0MW01.FE0MW-OA-THOUS[FE0MWIDX] = FFXREC.FFXCHAR;

  FE0MW00.FE0MW-OA-TOT = FE0MW00.FE0MW-OA-TOT +                        PA1REC.PA1RQQTY; /* accum o/a*/

  FE0MW00.FE0MWNM1 = FE0MW00.FE0MWNM1 + PA1REC.PA1RQQTY; /* accum ftwr+o/a*/

end // end FE0M173

// Close 'C1' vpahdr csr - prior
Function FE0M174()
   /* ------------------------------------------------------------*/
   /* Close dproda.vpahdr01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4830" ("C1", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "174"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DPRODA.VPAHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FE0M174

// Close 'C1' vswhdr01 cursor
Function FE0M180()
   /* ------------------------------------------------------------*/
   /* Close dfcast.vswhdr01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("C1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "180"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S1 DFCAST.VSWHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FE0M180

// Format and converse the map
Function FE0M200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors format map*/

    set FE0MM001 initial; /* m001 input/ouput area*/

    /* ------------------------------------------------------------*/
     /* Format fe0mm001 using passed data*/
    /* ------------------------------------------------------------*/

    FE0MM001.XPLCD = FFWREC.XPLCD; /* product line*/
    FE0MM001.XPLABRV = FFWREC.XPLABRV;

    FE0MM001.YPGCD = FFWREC.YPGCD; /* product type group*/
    FE0MM001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/

    FE0MM001.XPCCD = FFWREC.XPCCD; /* product line code*/
    FE0MM001.XPCABRV = FFWREC.XPCABRV; /* product line abrv*/

    FE0MM001.FE0MMABM = FE0MW00.FE0MWABM; /* actual buy month*/

    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/

    if (FE0MW00.FE0MWSWF == "Y") /* map must be formatted*/
      FE0M210(); /* Format the data on the map*/
    end

  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (FE0MW00.TA5TSQIX > 0)
    set FE0MM001.XXXLITPG skip;
    FE0MM001.XXXTSPAG = FE0MW00.XXXTSPAG; /* Current page*/
    set FE0MM001.XXXLITOF skip;
    FE0MM001.TA5TSQIX = FE0MW00.TA5TSQIX; /* max pages*/
  end

  FE0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FE0MM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0MM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FE0MM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FE0MM001 alarm; /* Indicate sound alarm*/
  end

  converse FE0MM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FE0MM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0MM001.CAITEM; /* Application data*/


end // end FE0M200

// Format the display data
Function FE0M210()

  FE0MW00.FE0MWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* obtain detail line from tsq.*/
   /* ------------------------------------------------------------*/

  FE0MS03(); /* read temporary storage*/

  FE0MW00.FE0MWIDX = 1;
  while (FE0MW00.FE0MWIDX <= FE0MW01.FE0MWNLD) /* process temp storage*/

    FE0MM001.FE0MM-STY-DES[FE0MWIDX] = FE0MW01.FE0MW-STY-DES[FE0MWIDX];
    FE0MM001.FE0MM-STY-NAME[FE0MWIDX] = FE0MW01.FE0MW-STY-NAME[FE0MWIDX];
    FE0MM001.FE0MM-COLR-ABRV[FE0MWIDX] = FE0MW01.FE0MW-COLR-ABRV[FE0MWIDX];
    FE0MM001.FE0MM-SBMT-BUY[FE0MWIDX] = FE0MW01.FE0MW-SBMT-BUY-THOUS[FE0MWIDX];
    FE0MM001.FE0MM-FTWR-BUY[FE0MWIDX] = FE0MW01.FE0MW-FTWR-BUY-THOUS[FE0MWIDX];
    FE0MM001.FE0MM-OA[FE0MWIDX] = FE0MW01.FE0MW-OA-THOUS[FE0MWIDX];
    FE0MM001.FE0MM-FTWR-OA[FE0MWIDX] = FE0MW01.FE0MW-FTWR-OA-THOUS[FE0MWIDX];

    FE0MW00.FE0MWIDX = FE0MW00.FE0MWIDX + 1;
  end

   /* -------------------------------------------------*/
   /* Load the total line*/
   /* -------------------------------------------------*/

  FE0MM001.FE0MM-STY-DES[FE0MWIDX] = "       TOTAL";

  FFXREC.FFXNUMB = FE0MW00.FE0MW-SBMT-BUY-TOT; /* sbmt buy tot*/
  XSFFS10();
  FE0MM001.FE0MM-SBMT-BUY[FE0MWIDX] = FFXREC.FFXCHAR;

  FFXREC.FFXNUMB = FE0MW00.FE0MW-FTWR-BUY-TOT; /* ftwr buy tot*/
  XSFFS10();
  FE0MM001.FE0MM-FTWR-BUY[FE0MWIDX] = FFXREC.FFXCHAR;

  FFXREC.FFXNUMB = FE0MW00.FE0MW-OA-TOT; /* o/a tot*/
  XSFFS10();
  FE0MM001.FE0MM-OA[FE0MWIDX] = FFXREC.FFXCHAR;

  FFXREC.FFXNUMB = FE0MW00.FE0MW-FTWR-OA-TOT; /* ftwr+o/a tot*/
  XSFFS10();
  FE0MM001.FE0MM-FTWR-OA[FE0MWIDX] = FFXREC.FFXCHAR;

end // end FE0M210

// Check attention identifier
Function FE0M300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    FE0MW00.FE0MWSWF = "Y"; /* format screen m001*/
    FE0MW00.FE0MWSWR = "N"; /* request for data*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FE0MM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FE0MS01(); /* purge temp storage*/

      XSFFS01(); /* Exit to another application*/

      FE0MW00.FE0MWSWF = "Y"; /* format screen m001*/
      FE0MW00.FE0MWSWR = "N"; /* request for data*/

      set FE0MM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FE0MM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    FE0MW00.FE0MWSWF = "Y"; /* format screen m001*/
    FE0MW00.FE0MWSWR = "N"; /* request for data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8)  /* pf8 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FE0M300

// Reset highlighted fields
Function FE0M400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FE0MM001.YPGCD initialAttributes; /* product type group*/
  set FE0MM001.XPCCD initialAttributes; /* product line code*/
  set FE0MM001.FE0MMABM initialAttributes; /* actual buy month*/

  set FE0MM001.CATOAP initialAttributes;
  set FE0MM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FE0MM001.XPCCD == "?" /* product category*/
   || FE0MM001.YPGCD == "?") /* product type group*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/

  if (FE0MM001.XPCCD == "?") /* product type grp list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODES"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      XPCREC.XPCCD = FFWREC.XPCCD; /* product line code*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FE0MM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FE0MM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FE0MM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/

    end

    set FE0MM001.XPCCD cursor; /* Establish cursor position*/

  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/

  if (FE0MM001.YPGCD == "?") /* product type grp list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/

    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FE0MM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0MM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FE0MM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FE0MM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/

    end

    set FE0MM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FE0M400

// Verify the entered data
Function FE0M500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FE0MM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* verify request to scroll forward(pf7) or backwards(pf8)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    FE0M510(); /* verify scroll fwrd/back request*/

  end

   /* ------------------------------------------------------------*/
   /* if ezeaid not equal enter verify modifiable data*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter)

    FE0M520(); /* verify modifiable data*/

  end

   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    FE0M530(); /* validate entry fields*/

    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/

    if (FE0MM001.YPGCD != FFWREC.YPGCD /* product type grp chg*/
     || FE0MM001.YPGCD == " "          /* product type grp chg*/
     || FE0MM001.XPCCD != FFWREC.XPCCD /* product category chg*/
     || FE0MM001.XPCCD == " "          /* product category changed*/
     || FE0MM001.FE0MMABM != FE0MW00.FE0MWABM) /* actual buy month changed*/

      if (converseVar.validationMsgNum == 0)
        FE0MW00.FE0MWSWR = "Y"; /* request data request*/
      end

    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FE0M500

// verify scroll fwrd/back
Function FE0M510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FE0MW00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FE0MW00.XXXTSPAG >= FE0MW00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end


end // end FE0M510

// Verify header modifible fields
Function FE0M520()
   /* -----------------------------------------------------*/
   /* Verify header modifiable fields*/
   /* -----------------------------------------------------*/

  if (FE0MM001.FE0MMABM != FE0MW00.FE0MWABM)
    set FE0MM001.FE0MMABM cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "520";
  end

  if (FE0MM001.XPCCD != FFWREC.XPCCD)
    set FE0MM001.XPCCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "520";
  end

  if (FE0MM001.YPGCD != FFWREC.YPGCD)
    set FE0MM001.YPGCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "520";
  end


end // end FE0M520

// validate modifiable data
Function FE0M530()

   /* ----------------------------------------------------------------*/
   /* validate actual buy month which must not be less than buy month*/
   /* ----------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZMONTH = 0;
  FFZREC.FFZSRANG = "N";
  FFZREC.FFZBYYMM = FE0MM001.FE0MMABM;
  FFZREC.FFZEYYMM = FE0MM001.FE0MMABM;

  XSFFS30(); /* edit date range*/

  if (FFZREC.FFZBEGRC == "1")
    set FE0MM001.FE0MMABM cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "530";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FE0MM001.FE0MMABM cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "530";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FE0MM001.FE0MMABM cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "530";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FE0MM001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FE0MM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FE0MM001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "530";
    set FE0MM001.XPCCD cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/

  if (FE0MM001.YPGCD in YPGTBL.YPGCD
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FE0MM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  else
    FE0MM001.YPGABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "530";
    set FE0MM001.YPGCD cursor, bold;
  end

end // end FE0M530

// Process valid input request
Function FE0M600()

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/

  FFWREC.XPCCD = FE0MM001.XPCCD; /* product category*/
  FFWREC.XPCABRV = FE0MM001.XPCABRV; /* product category abrv desc*/

  FFWREC.YPGCD = FE0MM001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FE0MM001.YPGABRV; /* product type grp abrv desc*/

  FE0MW00.FE0MW-ACTL-BUY-MO = FFZREC.FFZBEGMO; /* actual buy month*/
  FE0MW00.FE0MWABM = FE0MM001.FE0MMABM;

  if (converseVar.eventKey is enter)
    return;
  end

  FE0MW00.FE0MWSWF = "Y"; /* fromat the data switch*/

   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    FE0MW00.XXXTSPAG = FE0MW00.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    FE0MW00.XXXTSPAG = FE0MW00.XXXTSPAG + 1;
    return;
  end

end // end FE0M600

// Purge temporary storage
Function FE0MS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FE0MW01 empty; /* M001 temporary storage detail*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FE0MW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FE0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0MS01

// Obtain colr abrv from vsyclr01
Function FE0MS02()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format dprodg.vsyclr01.*/
   /* ------------------------------------------------------------*/

  PG2REC.SY1STNBR = FFQREC.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = FFQREC.SY2CLRID; /* color code*/
  PG2REC.XDMCD = FFQREC.XDMCD; /* dimension code*/
  PG2REC.XGPCD = "02"; /* gpc code*/

   /* ------------------------------------------------------------*/
   /* select set dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ON DPRODG.VSYCLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0MS02

// Read temporary storage
Function FE0MS03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  FE0MW01.XXXTSLEN = FE0MW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FE0MW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FE0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0MS03

// Add to temporary storage
Function FE0MS04()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FE0MW01.XXXTSLEN = FE0MW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FE0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FE0MW01 empty; /* M001 display storage*/

    FE0MW00.FE0MWIDX = 0; /* Display line index*/
    FE0MW01.FE0MWNLD = 0; /* Load index*/

    FE0MW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0MS04

// Obtain sty name from vsydvl01
Function FE0MS05()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format dprodg.vsydvl01.*/
   /* ------------------------------------------------------------*/

  PG4REC.PG4STNBR = FFQREC.SY1STNBR; /* style number*/

   /* ------------------------------------------------------------*/
   /* select set dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ON DPRODG.VSYCLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FE0MS05

//*** RECORD=FE0MW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0MW00 type basicRecord
  10 FE0MWDSC FE0MWDSC ; 
    15 SY1STNBR SY1STNBR ; 
    15 FE0MWDH1 FE0MWDH1 ; 
    15 SY2CLRID SY2CLRID ; 
    15 FE0MWDH2 FE0MWDH2 ; 
    15 XDMCD XDMCD ; 
  10 FE0MWABM FE0MWABM ; 
  10 FE0MW-ACTL-BUY-MO FE0MW-ACTL-BUY-MO ; 
  10 FE0MWSWR FE0MWSWR ; 
  10 FE0MWSWF FE0MWSWF ; 
  10 FE0MWNM1 FE0MWNM1 ; 
  10 FE0MWNM2 FE0MWNM2 ; 
  10 FE0MW-SBMT-BUY-TOT FE0MW-SBMT-BUY-TOT ; 
  10 FE0MW-FTWR-BUY-TOT FE0MW-FTWR-BUY-TOT ; 
  10 FE0MW-OA-TOT FE0MW-OA-TOT ; 
  10 FE0MW-FTWR-OA-TOT FE0MW-FTWR-OA-TOT ; 
  10 FE0MWIDX FE0MWIDX ; 
  10 FE0MWYIX FE0MWYIX ; 
  10 YSMSRCVL YSMSRCVL [30] ; 
  10 FE0MWCWD FE0MWCWD ; 
    15 FE0MWCYM FE0MWCYM ; 
      20 FE0MWCCC FE0MWCCC ; 
      20 FE0MWYM FE0MWYM ; 
        25 FE0MWCYY FE0MWCYY ; 
        25 FE0MWCMM FE0MWCMM ; 
    15 FE0MWCDD FE0MWCDD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FE0MW-SWHDR-CSR FE0MW-SWHDR-CSR ; 
  10 FE0MW-MFBUY-CSR FE0MW-MFBUY-CSR ; 
  10 FE0MW-SUMCD-CSR FE0MW-SUMCD-CSR ; 
  10 FE0MW-PAHDR-CSR FE0MW-PAHDR-CSR ; 
  10 FE0MW-FOUND FE0MW-FOUND ; 
end // end FE0MW00

//*** RECORD=FE0MW01 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FE0MW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1188) ; 
    10 FE0MWNLD FE0MWNLD ; 
    10 FE0MW-STY-DES FE0MW-STY-DES [16] ; 
    10 FE0MW-STY-NAME FE0MW-STY-NAME [16] ; 
    10 FE0MW-COLR-ABRV FE0MW-COLR-ABRV [16] ; 
    10 FE0MW-SBMT-BUY FE0MW-SBMT-BUY [16] ; 
    10 FE0MW-SBMT-BUY-THOUS FE0MW-SBMT-BUY-THOUS [16] ; 
    10 FE0MW-FTWR-BUY FE0MW-FTWR-BUY [16] ; 
    10 FE0MW-FTWR-BUY-THOUS FE0MW-FTWR-BUY-THOUS [16] ; 
    10 FE0MW-OA FE0MW-OA [16] ; 
    10 FE0MW-OA-THOUS FE0MW-OA-THOUS [16] ; 
    10 FE0MW-FTWR-OA FE0MW-FTWR-OA [16] ; 
    10 FE0MW-FTWR-OA-THOUS FE0MW-FTWR-OA-THOUS [16] ; 
end // end FE0MW01

// Actual buy month
DataItem FE0MW-ACTL-BUY-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// color abbreviation
DataItem FE0MW-COLR-ABRV char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found mfbuy record flag
DataItem FE0MW-FOUND char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footwear buy quantity
DataItem FE0MW-FTWR-BUY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// footwear buy quantity in 1000
DataItem FE0MW-FTWR-BUY-THOUS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ftwr buy total
DataItem FE0MW-FTWR-BUY-TOT num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ftwr buy + OA qty
DataItem FE0MW-FTWR-OA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ftwr buy + OA qty in 1000
DataItem FE0MW-FTWR-OA-THOUS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ftwr buy + O/A total
DataItem FE0MW-FTWR-OA-TOT num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of mfbuy01 cursor
DataItem FE0MW-MFBUY-CSR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order adjustment quantity
DataItem FE0MW-OA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order adjustment qty in 1000
DataItem FE0MW-OA-THOUS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order adjustment total
DataItem FE0MW-OA-TOT num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of pahdr01 cursor
DataItem FE0MW-PAHDR-CSR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// submitted buy quantity
DataItem FE0MW-SBMT-BUY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// submitted buy quantity in 1000
DataItem FE0MW-SBMT-BUY-THOUS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// submitted buy total
DataItem FE0MW-SBMT-BUY-TOT num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style/color/dim
DataItem FE0MW-STY-DES char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style/color/dim
DataItem FE0MW-STY-NAME char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of sumcd01 cursor
DataItem FE0MW-SUMCD-CSR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of swhdr01 cursor
DataItem FE0MW-SWHDR-CSR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Actual buy month
DataItem FE0MWABM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FE0MWCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work day
DataItem FE0MWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FE0MWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work ccyymmdd
DataItem FE0MWCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FE0MWCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FE0MWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dash
DataItem FE0MWDH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem FE0MWDH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style-color-dim
DataItem FE0MWDSC char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem FE0MWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load index
DataItem FE0MWNLD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FE0MWNM1 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FE0MWNM2 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FE0MWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FE0MWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// open status index
DataItem FE0MWYIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work yymm
DataItem FE0MWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

