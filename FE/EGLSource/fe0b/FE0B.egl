package fe0b;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS12;
import corpcom4.XSFFS14;
import corpcom4.XSFFS20;
import corpcom4.XSFFS30;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XPCABRV;
import corpy2.YPGTBL;
import ff.common.FF1REC;
import ff.common.FF2REC;
import ff.common.FF7REC;
import ff.common.FFFREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ff.common.FFZBYYMM;
import ff.common.FFZEYYMM;
import ff.common.FFZIYYMM;
import ff.common.FFZREC;
import fh.common.FHBREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FE0B ****
// This application displays a list of categories and their
// production fcsts.
// 
// The user must specify the 'DATE RANGE', 'TYPE', 'LINE', and
// DIVISION GROUP'. The program will bring back a list of all
// cats, meeting the specifications. zeroes will be displayed
// if no fcsts are found. The total of all cat fcsts per month
// will be accumulated. The total will appear on every page and
// will be the same. (This refers to the entire set of cats.)
// 
// If the user doesn't know the code for the 'TYPE' or 'LINE'
// he desires, he can enter a '?' to ask for help.  The pgm
// will bring up a pop-up window to show all the 'TYPES' or
// 'LINES' then the user can select the correct code from
// there.
// 
// The user may scroll forward and backward to view all cats
// by pressing PF7 and PF8.  He may exit to any allowed appli-
// cation, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/04/89  cnewma  New application.
// ff2031   08/31/90  cross   allow for nil division and *
// FF2038   09/27/90  RHETRI  Add logic for type = "*".
// FF       06/28/91  MDANGE  For NIl processing, compare month
//                            to buy month if LE move '0000' to
//                            the country code to obtain the
//                            prod order qty else move '*' to
//                            obtain production forecast qty.
// FF       07/28/91  MDANGE  For NIl processing, always use
//                            sum of all countries.
// FF2047   09/04/91  MDANGE  Change for LT buy month.  The
//                            actual PO quantity will be
//                            retrieved from VWHCAT01.
// FF333    08/12/92  MDANGE  Change for LT curr month.  The
//                            actual PO quantity will be
//                            retrieved from VWHCAT01.
// 
// FF175    12/12/96  DSMITH  Changed the date range fill
//                            character to '0'.
// 
// *********************
Program FE0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0BW00 FE0BW00; // record
  FE0BW01 FE0BW01; // record
  FE0BW02 FE0BW02; // record
  FE0BW03 FE0BW03; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FHBREC FHBREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use FE0BM.FE0BM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FE0BM001 initial; /* M001 input/output*/
    set FE0BW00 empty; /* Working storage*/
    set FE0BW01 empty; /* M001 display storage*/
    set FE0BW02 empty; /* Mask for M001 storage*/
    set FE0BW03 empty; /* Totals for display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FE0BW00.FE0BWSWF = "Y"; /* Format the map flag*/
    ;
     /* ------------------------------------------------------------*/
     /* If country code not in ffwrec, default to usa*/
     /* ------------------------------------------------------------*/
    ;
    FFWREC.XCTCD = "USA "; /* move default value*/
    ;
     /* ------------------------------------------------------------*/
     /* If type is missing, default it to '01'.*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ") /* type group code not passed*/
      FFWREC.YPGCD = "01"; /* default to '01'*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* If line code is present, obtain description.*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.XPLCD != " ") /* line code passed*/
      ;
      XPLREC.XPLCD = FFWREC.XPLCD; /* line code*/
      XPLREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      ;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
      ;
    end
    ;
     /* ------------------------------------------------------------*/
     /* If complete key is present, request data.*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO > 0 /* Beginning month passed*/
     && FFWREC.FFAENDMO > 0 /* and ending month passed*/
     && FFWREC.YPGCD != " " /* and type group code passed*/
     && FFWREC.XPLCD != " " /* and line code passed*/
     && FFWREC.YSMXDV != " ") /* and div code passed*/
      ;
      FE0BW00.FE0BWSWR = "Y"; /* Request data*/
      ;
    else
      ;
      FE0BW01.FFZBYYMM = FFWREC.FFABEGMO; /* Beg month*/
      FE0BW01.FFZEYYMM = FFWREC.FFAENDMO; /* End month*/
      ;
      FE0BW00.FE0BWSWR = "N"; /* data not requested*/
      ;
    end
    ;
     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/
    ;
    FFWREC.XPCCD = " "; /* Clear cat code*/
    FFWREC.XPCABRV = " "; /* Clear cat name*/
    FFWREC.SYBSTGNB = " "; /* Clear style grp code*/
    FFWREC.SYBSTGNM = " "; /* Clear style grp name*/
    FFWREC.SY1STNBR = " "; /* Clear style code*/
    FFWREC.SY1SSTNM = " "; /* Clear style name*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0B001; /* Converse the main process*/
    ;
    ;
    FE0B001: FE0B001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0B001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FE0B

// Main process to display a map
Function FE0B001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0B100(); /* Obtain the data to display*/
  ;
  FE0B200(); /* Format and display the map*/
  ;
  FE0B300(); /* Check attention identifier*/
  ;
  FE0B400(); /* Reset fields to normal intensity*/
  ;
  FE0B500(); /* Verify the entered data*/
  ;
  FE0B600(); /* Process valid input request*/
  ;
  ;
end // end FE0B001

// Obtain the data to display
Function FE0B100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BW00.FE0BWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FE0BW00.XXXTSLEN = 966; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FE0B110(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Expand date range to set of YYMMs.*/
   /* ------------------------------------------------------------*/
  ;
  FE0B120(); /* Expand dates*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the buy month*/
   /* ------------------------------------------------------------*/
  ;
  FE0B125(); /* Calc buy month*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain data for lines.*/
   /* ------------------------------------------------------------*/
  ;
  FE0B130(); /* Open FFXRF*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  while (FE0BW00.FE0BWSWC == "N") /* Until end of cursor*/
    ;
    FE0B140(); /* Fetch FFXRF*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Line was found*/
      ;
      FE0B150(); /* Obtain and process Cat Fcst data*/
      ;
      /* ------------------------------------------------------------*/
       /* Save data in display storage.*/
      /* ------------------------------------------------------------*/
      ;
      FE0B160(); /* Save data*/
      ;
      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      ;
      if (FE0BW00.FE0BWIXM > 13) /* Page is full*/
        FE0B170(); /* Add page to temporary storage*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for DFCAST.VFFXRF01.*/
   /* ------------------------------------------------------------*/
  ;
  FE0B180(); /* Close FFXRF*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BW00.FE0BWIXM > 1) /* Page was formatted*/
    FE0B170(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  else
    ;
    FE0BW00.XXXTSPAG = 1; /* Desired page number*/
    ;
    /* ------------------------------------------------------------*/
     /* Format totals*/
    /* ------------------------------------------------------------*/
    ;
    FE0B190(); /* Obtain totals*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FE0BW00.FE0BWSWR = "N"; /* Request for data switch*/
  ;
  ;
end // end FE0B100

// Purge any temporary storage
Function FE0B110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0BW01 empty; /* M001 display storage*/
  set FE0BW02 empty; /* Mask for map display fields*/
  set FE0BW03 empty; /* Storage for totals*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FE0BW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FE0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B110

// Expand date range to YYMMs
Function FE0B120()
   /* ------------------------------------------------------------*/
   /* Call XSFFS30 to expand date range.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FFWREC.FFAENDMO; /* Ending date*/
  ;
  XSFFS30(); /* Verify the range*/
  ;
  FE0BW03.FE0BWNBM = FFZREC.FFZNUMMO; /* Ending date*/
  ;
  ;
end // end FE0B120

// Calculate the buy and curr mon
Function FE0B125()
   /* ------------------------------------------------------------*/
     /* Buy month calculation , stored in fe0bW00.fe0bWbyd*/
   /* ------------------------------------------------------------*/
  ;
  FE0B126(); /* get futures cutoff date*/
  ;
  FE0BW00.FE0BWDT1 = FF1REC.FF1FUTDT;
  ;
  FE0BW00.FE0BWMM1 = FE0BW00.FE0BWMM1 + 5;
  if (FE0BW00.FE0BWMM1 > 12)
    FE0BW00.FE0BWMM1 = FE0BW00.FE0BWMM1 - 12;
    if (FE0BW00.FE0BWYY1 == 99)
      FE0BW00.FE0BWCC1 = FE0BW00.FE0BWCC1 + 1;
  /* FE0BW00.FE0BWYY1 = FE0BW00.FE0BWYY1 + 1;/* commented out by dsmith*/
      FE0BW00.FE0BWYY1 = 00;
    else
      FE0BW00.FE0BWYY1 = FE0BW00.FE0BWYY1 + 1;
    end
  end
  ;
  FE0BW00.FE0BWBYD = FE0BW00.FE0BWCY1; /* buy month date*/
  ;
   /* ------------------------------------------------------------*/
     /* Curr month calculation , stored in fe0bW00.fe0bwcdt*/
   /* ------------------------------------------------------------*/
  ;
  if (FF1REC.FF1IVCDT != 0) /* ===> Invoice cutoff date*/
    FE0BW00.FE0BWDT1 = FF1REC.FF1IVCDT;
    ;
    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* ===> curr >  ivc date*/
      FE0BW00.FE0BWCDT = FE0BW00.FE0BWCY1;
    else
      ;
      if (FE0BW00.FE0BWMM1 == 1)
        FE0BW00.FE0BWMM1 = 12;
        ;
        if (FE0BW00.FE0BWYY1 == 0)
          FE0BW00.FE0BWYY1 = 99;
          FE0BW00.FE0BWCC1 = FE0BW00.FE0BWCC1 - 1;
          FE0BW00.FE0BWCDT = FE0BW00.FE0BWCY1;
        else
          FE0BW00.FE0BWYY1 = FE0BW00.FE0BWYY1 - 1;
          FE0BW00.FE0BWCDT = FE0BW00.FE0BWCY1;
        end
        ;
      else
        FE0BW00.FE0BWMM1 = FE0BW00.FE0BWMM1 - 1;
        FE0BW00.FE0BWCDT = FE0BW00.FE0BWCY1;
      end
      ;
    end
  else
    FE0BW00.FE0BWCDT = 0;
  end
  ;
end // end FE0B125

// Get futures cutoff date
Function FE0B126()
  ;
  set FF1REC empty; /* Clear up the storage row*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "126"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B126

// Open FFXRF
Function FE0B130()
   /* ------------------------------------------------------------*/
   /* Open cursor for FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
   /* always use div=10, since tbl is set up*/
     /* with div=10 for all rows - dom and nil*/
  FF2REC.YSMXDV = "10"; /* Division group*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Line*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type*/
  ;
  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FE0BW00.FE0BWIXM = 1; /* Display line index*/
    FE0BW00.FE0BWSWC = "N"; /* End of cursor switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B130

// Fetch FFXRF
Function FE0B140()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FE0BW00.FE0BWSWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B140

// Obtain forecasts for display
Function FE0B150()
   /* ------------------------------------------------------------*/
   /* Clear work fields.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0BW02 empty; /* clear line work fields*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain Cat Fcst data for each month in range.*/
   /* ------------------------------------------------------------*/
  ;
  FE0BW00.FE0BWCNT = 1; /* set counter*/
  ;
  while (FE0BW00.FE0BWCNT <= FFZREC.FFZNUMMO) /* count LE nbr mos*/
    ;
    if (FFZREC.FFZINDMO[FE0BWCNT] < FE0BW00.FE0BWCDT) /* compare to curr mo*/
      FE0B151(); /* get actual po from DFHIST.VWHCAT01*/
    else
      FE0B152(); /* get production forecast from*/
                                   /* DFCAST.VMCAT001*/
    end
    /* ------------------------------------------------------------*/
     /* If row found, format mask for display line.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      ;
      if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
       || FFXREC.FFXNUMB <= -1000000) /* Use millions*/
        ;
        XSFFS12(); /* Translation number*/
        ;
      else /* Use thousands*/
        ;
        XSFFS14(); /* Translation number*/
        ;
      end
      ;
      FE0BW02.FE0BWAMT[FE0BWCNT] = FFXREC.FFXCHAR; /* Load mask*/
      ;
      /* ------------------------------------------------------------*/
       /* Add to total for this line.*/
      /* ------------------------------------------------------------*/
      ;
      FE0BW02.FE0BWLNT = FE0BW02.FE0BWLNT + FFXREC.FFXNUMB; /* Add to tot*/
      ;
      /* ------------------------------------------------------------*/
       /* Add to total for this month (column).*/
      /* ------------------------------------------------------------*/
      ;
      FE0BW00.FE0BWFDA = FE0BW03.FE0BWCLT[FE0BWCNT]; /* Load cl tot*/
      FE0BW00.FE0BWFDA = FE0BW00.FE0BWFDA + FFXREC.FFXNUMB; /* Add to tot*/
      FE0BW03.FE0BWCLT[FE0BWCNT] = FE0BW00.FE0BWFDA; /* Restore tot*/
      ;
    end
    ;
    FE0BW00.FE0BWCNT = FE0BW00.FE0BWCNT + 1; /* add 1 to counter*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Translate the total for this line.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0BW02.FE0BWLNT; /* Load work field*/
  ;
  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FE0BW02.FE0BWAMT[FE0BWCNT] = FFXREC.FFXCHAR; /* Line total*/
  ;
  ;
end // end FE0B150

// Get actual PO from VWHCAT01
Function FE0B151()
   /* ------------------------------------------------------------*/
   /* Obtain actual PO qty from DFHIST.VWHCAT01*/
   /* ------------------------------------------------------------*/
  ;
  set FHBREC empty;
  ;
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  ;
  FHBREC.XQACD = "01"; /* quality  code*/
  FHBREC.XPCCD = FF2REC.XPCCD; /* category code*/
  FHBREC.FH7INVDT = FFZREC.FFZINDMO[FE0BWCNT]; /* date*/
  FHBREC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FHBREC.YSMXDV = FFWREC.YSMXDV; /* div group code*/
  FE0B154(); /* Select VWHCAT01*/
  ;
   /* ------------------------------------------------------------*/
   /* If row found, move to conversion field*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    ;
    FFXREC.FFXNUMB = FHBREC.FH7MOPRQ; /* Load wk fld*/
    ;
  end
end // end FE0B151

// Get prod fcst from VMCAT001
Function FE0B152()
   /* ------------------------------------------------------------*/
   /* Obtain Cat Fcst from DFCAST.VMCAT001*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty;
  set FFFREC empty;
  ;
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  ;
  FF7REC.XPCCD = FF2REC.XPCCD; /* category code*/
  FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FE0BWCNT]; /* lo-mth*/
  FFFREC.FFFENDMO = FFZREC.FFZINDMO[FE0BWCNT]; /* hi-mth*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* type group code*/
   /* on div = 10, or * - set up to read dom first*/
  if (FFWREC.YSMXDV == "20") /* nil*/
    FF7REC.YSMXDV = FFWREC.YSMXDV; /* div group code*/
    FF7REC.XCTCD = "*"; /* wildcard country code*/
    FE0B153(); /* Select MCAT*/
  else
    FF7REC.XCTCD = FFWREC.XCTCD; /* country code*/
    FF7REC.YSMXDV = "10"; /* div group code*/
    FE0B153(); /* Select MCAT*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Select Row - Month Master Category Table*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.YSMXDV == "*")
    FE0BW00.FE0BWHAL = 0;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FE0BW00.FE0BWHAL = FF7REC.FF6PRFCT;
    end
      /* now perform read for nil*/
    FF7REC.YSMXDV = "20"; /* div group code*/
    FF7REC.XCTCD = "*"; /* wildcard country code*/
    FE0B153(); /* Select MCAT*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FE0BW00.FE0BWHAL = FE0BW00.FE0BWHAL + FF7REC.FF6PRFCT;
    else
      if (FE0BW00.FE0BWHAL > 0)
          /* if first read was good, but second wasn't*/
        SQLCA.VAGen_SQLCODE = 0;
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* If row found, move to conversion field*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    ;
    if (FFWREC.YSMXDV == "10") /* domestic*/
      FFXREC.FFXNUMB = FF7REC.FF6PRFCT; /* Load wk fld*/
    end
    if (FFWREC.YSMXDV == "20") /* nil*/
      FFXREC.FFXNUMB = FF7REC.FF6PRFCT; /* Load wk fld*/
    end
    if (FFWREC.YSMXDV == "*") /* nil and dom*/
      FFXREC.FFXNUMB = FE0BW00.FE0BWHAL; /* Load wk fld*/
    end
    ;
  end
end // end FE0B152

// Select VMCAT001
Function FE0B153()
   /* ------------------------------------------------------------*/
   /* Select and Sum Cat fcst from Mcat*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS";
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, save data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -305) /* null value on sum*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "153"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B153

// Select VWHCAT01
Function FE0B154()
   /* ------------------------------------------------------------*/
   /* Select Actual PO qty from DFHIST.VWHCAT01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5970" ("SS", SQLCA, FHBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, save data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -305) /* null value on sum*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "154"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHACT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FHBREC.FHBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B154

// Save data in display storage
Function FE0B160()
   /* ------------------------------------------------------------*/
   /* If first line on page, save beginning and ending months.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BW00.FE0BWIXM == 1) /* First line on page*/
    ;
    FE0BW01.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning month*/
    FE0BW01.FFZEYYMM = FFWREC.FFAENDMO; /* Ending month*/
    ;
    FE0BW00.FE0BWCNT = 1; /* Set counter to 1*/
    while (FE0BW00.FE0BWCNT <= FFZREC.FFZNUMMO) /* While counter LE nbr mos*/
      ;
      FE0BW01.FFZIYYMM[FE0BWCNT] = FFZREC.FFZIYYMM[FE0BWCNT];
      FE0BW00.FE0BWCNT = FE0BW00.FE0BWCNT + 1; /* Add 1 to counter*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BW00.FE0BWSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XPCCD = FF2REC.XPCCD; /* Format xpc key*/
  XPCREC.XGPCD = COMMAREA.XGPCD; /* Format xpc key*/
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
    FE0BW01.XPCABRV[FE0BWIXM] = XPCTBL.XPCABRV[sysVar.arrayIndex];
  end
  ;
  FE0BW01.FE0BWLIN[FE0BWIXM] = FE0BW02.FE0BWMSK; /* Line mask to map*/
  ;
  FE0BW00.FE0BWIXM = FE0BW00.FE0BWIXM + 1; /* Increment line index*/
  ;
  ;
end // end FE0B160

// Add page to temporary storage
Function FE0B170()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0BW01.XXXTSLEN = FE0BW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FE0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FE0BW01 empty; /* M001 display storage*/
    ;
    FE0BW00.FE0BWIXM = 1; /* Display line index*/
    ;
    FE0BW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "170"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B170

// Close FFXRF
Function FE0B180()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B180

// Format Totals
Function FE0B190()
   /* ------------------------------------------------------------*/
   /* Move Totals*/
   /* ------------------------------------------------------------*/
  ;
  FE0BW00.FE0BWCNT = 1; /* set counter*/
  ;
  while (FE0BW00.FE0BWCNT <= FFZREC.FFZNUMMO) /* count LE nbr mos*/
    ;
    /* ------------------------------------------------------------*/
     /* Translate TOTALS.*/
    /* ------------------------------------------------------------*/
    ;
    FFXREC.FFXNUMB = FE0BW03.FE0BWCLT[FE0BWCNT]; /* Load translation fld*/
    ;
    if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
     || FFXREC.FFXNUMB <= -1000000) /* Use millions*/
      ;
      XSFFS12(); /* Translation number*/
      ;
    else /* Use thousands*/
      ;
      XSFFS14(); /* Translation number*/
      ;
    end
    ;
    FE0BW03.FE0BWTOT[FE0BWCNT] = FFXREC.FFXCHAR; /* Load tot amt*/
    ;
    FE0BW03.FE0BWTTA = FE0BW03.FE0BWTTA + FFXREC.FFXNUMB; /* accm TOT grd tot*/
    ;
    /* ------------------------------------------------------------*/
     /* Add one to counter.*/
    /* ------------------------------------------------------------*/
    ;
    FE0BW00.FE0BWCNT = FE0BW00.FE0BWCNT + 1; /* add 1 to counter*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Translate and load Grand TOTAL.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0BW03.FE0BWTTA; /* Load translation fld*/
  ;
  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FE0BW03.FE0BWTOT[FE0BWCNT] = FFXREC.FFXCHAR; /* Load amt*/
  ;
  ;
end // end FE0B190

// Format and converse the map
Function FE0B200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BW00.FE0BWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FE0BW00.FE0BWSWF == "Y") /* Map must be formatted*/
      FE0B210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0BM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0BM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FE0BM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FE0BM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0BM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FE0BM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0BM001.CAITEM; /* Application data*/
  ;
  ;
end // end FE0B200

// Format the display data
Function FE0B210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0BM001 initial; /* M001 input/output area*/
  ;
  FE0BW00.FE0BWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FE0BW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FE0BW00.XXXTSPAG > FE0BW00.TA5TSQIX) /* Desired greater highest*/
        FE0BW00.XXXTSPAG = FE0BW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FE0B211(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FE0BM001.XXXLITPG skip; /* "PAGE" literal*/
    FE0BM001.XXXTSPAG = FE0BW00.XXXTSPAG; /* Current page*/
    set FE0BM001.XXXLITOF skip; /* "OF" literal*/
    FE0BM001.TA5TSQIX = FE0BW00.TA5TSQIX; /* Highest page*/
    ;
    set FE0BM001.FE0BMNMA skip; /* Make "TOTAL" visable*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0BM001.FFZBYYMM = FE0BW01.FFZBYYMM; /* Beginning month*/
  FE0BM001.FFZEYYMM = FE0BW01.FFZEYYMM; /* Ending month*/
  ;
  FE0BM001.XPLCD = FFWREC.XPLCD; /* Line*/
  FE0BM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
  ;
  FE0BM001.YPGCD = FFWREC.YPGCD; /* Type*/
  FE0BM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  FE0BM001.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  FE0BM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Abbreviation*/
  ;
  FE0BW00.FE0BWIXM = 1; /* Initialize line index*/
  while (FE0BW00.FE0BWIXM <= 13 /* Until screen is full*/
   && FE0BW01.XPCABRV[FE0BWIXM] > " ") /* and line exists*/
    ;
    FE0BM001.XPCABRV[FE0BWIXM] = FE0BW01.XPCABRV[FE0BWIXM];
    FE0BM001.FE0BMLIN[FE0BWIXM] = FE0BW01.FE0BWLIN[FE0BWIXM];
    ;
    FE0BW00.FE0BWIXM = FE0BW00.FE0BWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  FE0BW00.FE0BWCNT = 1; /* Initialize counter*/
  while (FE0BW00.FE0BWCNT <= FE0BW03.FE0BWNBM) /* while cnt LE nbr mos*/
    ;
    FE0BM001.FE0BMRMO[FE0BWCNT] = FE0BW01.FFZIYYMM[FE0BWCNT];
    ;
    FE0BM001.FE0BMTOT[FE0BWCNT] = FE0BW03.FE0BWTOT[FE0BWCNT];
    ;
    FE0BW00.FE0BWCNT = FE0BW00.FE0BWCNT + 1; /* Increment line index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Move one more set past ffznummo to pick up the totals.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BW03.FE0BWNBM > 0) /* If any months exist*/
    ;
    FE0BM001.FE0BMRMO[FE0BWCNT] = "TOTL"; /* Load "TOTL" to header*/
    ;
    FE0BM001.FE0BMTOT[FE0BWCNT] = FE0BW03.FE0BWTOT[FE0BWCNT];
    ;
  end
  ;
end // end FE0B210

// Obtain TSQ Record
Function FE0B211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0BW01.XXXTSLEN = FE0BW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FE0BW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FE0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B211

// Check attention identifier
Function FE0B300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FE0BW00.FE0BWSWR == "Y") /* Request for data*/
      set FE0BW01 empty; /* M001 display storage*/
    end
    ;
    FE0BW00.FE0BWSWF = "Y"; /* Format the map switch*/
    FE0BW00.FE0BWSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FE0B110(); /* Purge temporary storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FE0BM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf14) /* or pf14 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FE0BM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf14) /* pf14 was pressed*/
      COMMAREA.CATOAP = "FE0A"; /* TO application*/
    end
    ;
    FE0B110(); /* Purge temporary storage*/
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0B300

// Reset highlighted fields
Function FE0B400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0BM001.FFZBYYMM initialAttributes; /* Beginning month*/
  set FE0BM001.FFZEYYMM initialAttributes; /* Ending month*/
  set FE0BM001.XPLCD initialAttributes; /* Line*/
  set FE0BM001.YSMXDV initialAttributes; /* Division group*/
  ;
  set FE0BM001.CATOAP initialAttributes; /* TO application*/
  set FE0BM001.CAITEM initialAttributes; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BM001.YPGCD == "?" /* Type list requested*/
   || FE0BM001.XPLCD == "?") /* Line list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BM001.XPLCD == "?") /* Line list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc cd*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0BM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FE0BM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FE0BM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FE0BM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0BM001.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BM001.YPGCD == "?") /* Line list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* flag*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc cd*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0BM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0BM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FE0BM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FE0BM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0BM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B400

// Verify the entered data
Function FE0B500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BM001.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FE0BM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    FE0B510(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0BM001.FFZBYYMM != FE0BW01.FFZBYYMM /* Beginning date changed*/
     || FE0BM001.FFZEYYMM != FE0BW01.FFZEYYMM /* or ending date changed*/
     || FE0BM001.XPLCD != FFWREC.XPLCD        /* or line changed*/
     || FE0BM001.YPGCD != FFWREC.YPGCD        /* or type changed*/
     || FE0BM001.YSMXDV != FFWREC.YSMXDV      /* or division group changed*/
                                              
     || FE0BM001.FFZBYYMM == 0                /* Beginning date missing*/
     || FE0BM001.FFZEYYMM == 0                /* Ending date missing*/
     || FE0BM001.XPLCD == " "                 /* or line missing*/
     || FE0BM001.YPGCD == " "                 /* or type missing*/
     || FE0BM001.YSMXDV == " ")               /* or division group missing*/
      ;
      FE0B520(); /* Verify the key fields*/
      ;
      FE0B530(); /* Verify Relationships*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0B500

// Verify scroll request
Function FE0B510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FE0BW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FE0BW00.XXXTSPAG >= FE0BW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BM001.YSMXDV != FFWREC.YSMXDV) /* Division group changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0BM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FE0BM001.YPGCD != FFWREC.YPGCD) /* Type changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0BM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FE0BM001.XPLCD != FFWREC.XPLCD) /* Line changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0BM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FE0BM001.FFZEYYMM != FE0BW01.FFZEYYMM) /* Ending date changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0BM001.FFZEYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FE0BM001.FFZBYYMM != FE0BW01.FFZBYYMM) /* Beginning date changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0BM001.FFZBYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0B510

// Verify the key fields
Function FE0B520()
   /* ------------------------------------------------------------*/
   /* If division group was entered, verify division group code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BM001.YSMXDV == "*")
    FE0BM001.YSMSMDSC = "ALL"; /* Abbreviation*/
  else
    set YSMREC empty; /* Row storage area*/
    YSMREC.YSMSUMCD = FE0BM001.YSMXDV; /* Division group code*/
    TA1REC.TA1PGMNM = "FE0B520 "; /* Calling program*/
    ;
    XSFFS20(); /* Verify division group*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
      FE0BM001.YSMSMDSC = YSMREC.YSMSMDSC; /* Abbreviation*/
    else
      FE0BM001.YSMSMDSC = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FE0BM001.YSMXDV cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If line was entered, verify the code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BM001.XPLCD in XPLTBL.XPLCD /* Code in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FE0BM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FE0BM001.XPLABRV = " "; /* Abbreviation*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FE0BM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If type was entered, verify the code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BM001.YPGCD == "*") /* If type equal 'all'*/
    ;
    FE0BM001.YPGABRV = "*ALL*"; /* Abbreviation*/
    ;
  else
    ;
    if (FE0BM001.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FE0BM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      ;
      FE0BM001.YPGABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FE0BM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify the beginning and ending dates in the entered range.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FE0BM001.FFZBYYMM; /* Beginning date*/
  FFZREC.FFZEYYMM = FE0BM001.FFZEYYMM; /* Ending date*/
  ;
  XSFFS30(); /* Verify the range*/
  ;
   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FE0BM001.FFZEYYMM cursor, bold; /* Highlight*/
    ;
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      ;
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        ;
        converseLib.validationFailed(151); /* Date is out of range*/
        ;
      end
      ;
    end
    ;
  end
  ;
  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FE0BM001.FFZBYYMM cursor, bold; /* Highlight*/
    ;
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      ;
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        ;
        converseLib.validationFailed(151); /* Date is out of range*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
end // end FE0B520

// Verify FFXRF
Function FE0B530()
   /* ------------------------------------------------------------*/
   /* Verify that key is in FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If there are no errors*/
    ;
    /* ------------------------------------------------------------*/
     /* Clear the row storage area.*/
    /* ------------------------------------------------------------*/
    ;
    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/
    ;
    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFXRF01.*/
    /* ------------------------------------------------------------*/
    ;
    FF2REC.XPCCD = "*"; /* category*/
    FF2REC.XPLCD = FE0BM001.XPLCD; /* line*/
    FF2REC.YPGCD = FE0BM001.YPGCD; /* type*/
    FF2REC.YSMXDV = "*"; /* div grp*/
    ;
    /* ------------------------------------------------------------*/
     /* Select the row to display from the table.*/
    /* ------------------------------------------------------------*/
    ;
    FE0B531(); /* Open cursor for DFCAST.VFFXRF01*/
    ;
    FE0B532(); /* fetch FFXRF*/
    ;
    /* ------------------------------------------------------------*/
     /* If successful, close FFXRF.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* Row not found code*/
      ;
      /* ------------------------------------------------------------*/
       /* If not found, indicate invalid.*/
      /* ------------------------------------------------------------*/
      ;
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FE0BM001.YSMXDV bold; /* Highlight*/
      set FE0BM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* Indicate invalid relationship*/
      ;
    end
    ;
    FE0B533(); /* close cursor*/
    ;
  end
  ;
  ;
end // end FE0B530

// Open  DFCAST.VFFXRF01
Function FE0B531()
   /* ------------------------------------------------------------*/
   /* Open FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "531"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B531

// Fetch DFCAST.VFFXRF01
Function FE0B532()
   /* ------------------------------------------------------------*/
   /* Fetch FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "532"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B532

// Close DFCAST.VFFXRF01
Function FE0B533()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "533"; /* Module identification*/
  ;
  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0B533

// Process valid input request
Function FE0B600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0BW00.FE0BWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0BM001.FFZBYYMM != FE0BW01.FFZBYYMM /* Beginning month changed*/
   || FE0BM001.FFZEYYMM != FE0BW01.FFZEYYMM /* or ending month changed*/
   || FE0BM001.XPLCD != FFWREC.XPLCD        /* or line changed*/
   || FE0BM001.YPGCD != FFWREC.YPGCD        /* or type changed*/
   || FE0BM001.YSMXDV != FFWREC.YSMXDV)     /* or division group changed*/
    ;
    /* ------------------------------------------------------------*/
     /* Update the modifiable data in the FF system commarea.*/
    /* ------------------------------------------------------------*/
    ;
    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* Ending month*/
    FFWREC.XPLCD = FE0BM001.XPLCD; /* Line code*/
    FFWREC.XPLABRV = FE0BM001.XPLABRV; /* Line name*/
    FFWREC.YPGCD = FE0BM001.YPGCD; /* Type code*/
    FFWREC.YPGABRV = FE0BM001.YPGABRV; /* Type name*/
    FFWREC.YSMXDV = FE0BM001.YSMXDV; /* Division group code*/
    FFWREC.YSMSMDSC = FE0BM001.YSMSMDSC; /* Division group name*/
    ;
    FE0BW00.FE0BWSWR = "Y"; /* Request for data switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FE0BW00.XXXTSPAG = FE0BW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FE0BW00.XXXTSPAG = FE0BW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FE0B600

//*** RECORD=FE0BW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0BW00 type basicRecord
  10 FE0BWIXM FE0BWIXM ; 
  10 FE0BWIX2 FE0BWIX2 ; 
  10 FE0BWSWC FE0BWSWC ; 
  10 FE0BWHAL FE0BWHAL ; 
  10 FE0BWSWF FE0BWSWF ; 
  10 FE0BWSWR FE0BWSWR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * num(1) ; 
  10 FE0BWCNT FE0BWCNT ; 
  10 FE0BWFDA FE0BWFDA ; 
  10 * num(1) ; 
  10 FE0BWDT1 FE0BWDT1 ; 
    15 * num(1) ; 
    15 FE0BWCY1 FE0BWCY1 ; 
      20 FE0BWCC1 FE0BWCC1 ; 
      20 FE0BWYY1 FE0BWYY1 ; 
      20 FE0BWMM1 FE0BWMM1 ; 
    15 FE0BWDD1 FE0BWDD1 ; 
  10 * char(1) ; 
  10 FE0BWBYD FE0BWBYD ; 
  10 FE0BWCDT FE0BWCDT ; 
end // end FE0BW00

//*** RECORD=FE0BW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FE0BW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(966) ; 
    10 FFZBYYMM FFZBYYMM ; 
    10 FFZEYYMM FFZEYYMM ; 
    10 FFZIYYMM FFZIYYMM [12] ; 
    10 XPCABRV XPCABRV [13] ; 
    10 FE0BWLIN FE0BWLIN [13] ; 
end // end FE0BW01

//*** RECORD=FE0BW02 ****
// Mask for map line display
// ***********************
Record FE0BW02 type basicRecord
  5 FE0BWMSK FE0BWMSK ; 
    10 FE0BWGRP FE0BWGRP [13] ; 
      15 FE0BWAMT FE0BWAMT ; 
      15 * char(1) ; 
  5 * char(1) ; 
  5 FE0BWLNT FE0BWLNT ; 
end // end FE0BW02

//*** RECORD=FE0BW03 ****
// Storage for total fields
// ***********************
Record FE0BW03 type basicRecord
  5 FE0BWNBM FE0BWNBM ; 
  5 * char(1) ; 
  5 FE0BWTOT FE0BWTOT [13] ; 
  5 * char(1) ; 
  5 FE0BWCLT FE0BWCLT [12] ; 
  5 * char(1) ; 
  5 FE0BWTTA FE0BWTTA ; 
  5 * char(1) ; 
end // end FE0BW03

// FF_PRDCTN_TRGT amts
DataItem FE0BWAMT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date CCYYMM
DataItem FE0BWBYD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CC
DataItem FE0BWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// curr date CCYYMM
DataItem FE0BWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Accum column tots
DataItem FE0BWCLT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Counter for loops
DataItem FE0BWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CCYYMM
DataItem FE0BWCY1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY
DataItem FE0BWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold work date
DataItem FE0BWDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem FE0BWFDA int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ffWREC working storage group
DataItem FE0BWGRP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty field for div=*
DataItem FE0BWHAL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FE0BWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem FE0BWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Trgt amts & tot for 12 months
DataItem FE0BWLIN char(64)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Line total work field
DataItem FE0BWLNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY
DataItem FE0BWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line mask
DataItem FE0BWMSK char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of months
DataItem FE0BWNBM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FE0BWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0BWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FE0BWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Totals for range
DataItem FE0BWTOT char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Accum grand Totals
DataItem FE0BWTTA int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// YY
DataItem FE0BWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

