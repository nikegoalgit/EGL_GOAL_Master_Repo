package fe0o;

import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPTA0P;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS22;
import corpcom4.XSFFS35;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpx2.XPCCD;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import ff.common.*;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNB;
import sy.common.SYBSTGNM;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FE0O ****
// This program provides the user with the ability to adjust
// the the monthly style color and style group master forecast
// 
// The forecaster needs to specify a style group code or go to
// the style group list screen pick one up. The current master
// forecasts for all the active styles under that group will
// then be displayed.
// 
// The 'CHNG TOT QTY', 'CHNG TOT PCT' and 'CHG%' fields can be
// used to adjusted the style group and style color forecasts.
// Only the forecasts for thoses months within the life cycle
// range of each style can be updated.
// 
// If the user is satisfied with the forecast quantities on the
// screen, he can make these sales forecasts as master by
// pressing PF15. The system will then update the master sales
// forecast by style color, by style group, by category and by
// type group.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// FF382    02/05/93  JJUCH   New application.
// Fix      03/24/93  JJUCH   Update the dmd on VSWITM01 when
//                            save the master sales forecasts.
// Fix      04/30/93  JJUCH   Fixed the bug of not calc sls
//                            correctly when zeroing out then
//                            change tot chng pct.
// FF402    05/04/93  JJUCH   Default inline fill rate to 92
//                            when insert a new MCAT row.
// Fix      05/12/93  JJUCH   Reduce deadlock.
//                            Submit FF650d only when change
//                            stygrp or PF3/PF5 out.
// Fix      06/17/93  JJUCH   Add process MLTYP logic.
// FF415    07/15/93  JJUCH   Fix the fast pathing problems.
// Fix      10/21/93  JJUCH   Edit the FFWREC before obtaining
//                            any data.
// FF420    10/28/93  mdange  Roll up FF_DMD_FCST changes to
//                            category and line level.
// Fix      11/16/93  JJUCH   Re-calculate the fill rate on
//                            MCAT by using the new cat sales
//                            and demand forecasts.
// Fix      03/14/94  JJUCH   Increase the size of FE0OWDVAR
//                            which cause the cat demand fcst
//                            and cat fill rate to be wrong.
// Fix      10/16/95  DPACK   Increase array of worksheet id's
//                            from 6 to 12.
// FF175    12/10/96  DSMITH  Changed the fill character for
//                            the date range to '0'.
// FF9999   05/09/01  SBUNGO  MODIFIED FE0OS-29 PROC TO AVOID
//                            NEGATIVE QTYS IN SLS FCST, DMD
//                            FCST AND FILL RATE
// *********************
Program FE0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0OW00 FE0OW00; // record
  FE0OW01 FE0OW01; // record
  FE0OW02 FE0OW02; // record
  FE0OW03 FE0OW03; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FF8REC FF8REC; // record
  FF9REC FF9REC; // record
  FFFREC FFFREC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YPGTBL; // table
  use XPCTBL; // table
  use FE0OT; // table
  use FE0OT5O {deleteAfterUse = yes}; // table
  use FE0OM.FE0OM001,  // forms
      FE0OM.FE0OM002,
      FE0OM.XX0XM001,
      FE0OM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FE0OM001 initial; /* M001 input/output*/
    set FE0OM002 initial; /* M002 input/output*/
    set FE0OW00 empty; /* Working storage*/
    set FE0OW01 empty; /* M001 display storage*/
    set FE0OW02 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA6REC empty; /* Submit batch job parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FE0OW00.FE0OW-SWF = "N"; /* Format the map switch*/
    FE0OW00.FE0OW-SWO = "N"; /* Data obtained switch*/
    FE0OW00.FE0OW-SWR = "N"; /* Request for data switch*/
    ;
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    ;
    if (FFWREC.YPGCD == " ") /* No type group passed*/
      ;
      FFWREC.YPGCD = "01"; /* Default type group code*/
      FFWREC.YPGABRV = "INLINE"; /* Default type group abbreviation*/
      ;
    end
    ;
    FFWREC.YSMXDV = "10"; /* Default division group code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default division group abbrev*/
    FFWREC.XCTCD = "USA "; /* Default country code*/
    FFWREC.XCTABRV = "USA "; /* Default country abbreviation*/
    ;
    if (FFWREC.FFABEGMO != 0 /* Beginning month passed*/
     && FFWREC.FFAENDMO != 0 /* Ending month passed*/
     && FFWREC.YPGCD != " "  /* Type group code passed*/
     && FFWREC.XPCCD != " "  /* Category code passed*/
     && FFWREC.SYBSTGNB != " ") /* Style group passed*/
      ;
      FE0OW00.FE0OW-SWR = "Y"; /* Request for data switch*/
      ;
    end
    ;
    FE0OW01.FE0OW-BMO = FFWREC.FFABEGMO; /* Beginning month*/
    FE0OW01.FE0OW-EMO = FFWREC.FFAENDMO; /* Ending month*/
    ;
    FE0OW00.FE0OW-LEF = 1; /* Scrolling left index*/
    FE0OW00.FE0OW-MAP = 1; /* Map indicator*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0O-000; /* Converse the main process*/
    ;
    FE0O-000: FE0O-000();
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0O-000; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FE0O

// Determine the processed map
Function FE0O-000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OW00.FE0OW-MAP == 1) /* Map 1 was requested*/
    ;
    FE0O-100(); /* Display map 1*/
    ;
  else
    ;
    if (FE0OW00.FE0OW-MAP == 2) /* Map 2 was requested*/
      ;
      FE0O-200(); /* Display map 2*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      ;
      FFWREC.XXXMODID = "000"; /* MODULE IDENTIFICATION*/
      FFWREC.XXXMSGNO = 10; /* Indicate system error*/
      ;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FE0OW00.FE0OW-MAP; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/
      ;
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
    ;
  end
  ;
  ;
end // end FE0O-000

// Process map 1
Function FE0O-100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0O-110(); /* Obtain the data to display*/
  ;
  FE0O-120(); /* Format and display the map*/
  ;
  FE0O-130(); /* Check attention identifier*/
  ;
  FE0O-140(); /* Reset fields to normal intensity*/
  ;
  FE0O-150(); /* Verify the entered data*/
  ;
  FE0O-160(); /* Process valid input request*/
  ;
end // end FE0O-100

// Obtain the data to display
Function FE0O-110()
  ;
  if (FE0OW00.FE0OW-SWR == "Y") /* DATA WAS REQUESTED*/
    FE0O-115(); /* Verify date range*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OW00.FE0OW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  FE0O-11000(); /* Build up temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FE0OW00.XXXTSPAG = 1; /* Desired page number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-SWR = "N"; /* Request for data switch*/
  ;
  if (FE0OW00.FE0OW-SWO == "Y") /* Data obtained*/
    FE0OW00.FE0OW-SWF = "Y"; /* Format data switch*/
  end
  ;
end // end FE0O-110

// Build up temporary storage
Function FE0O-11000()
  ;
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.XXXTSLEN = 3177; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FE0O-11100(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Load the month heading*/
   /* ------------------------------------------------------------*/
  ;
   /* PERFORM FE0O-11200;*/
  FE0O-11250();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain a list of style colors for the specified style group.*/
   /* Then, use each style color to retrieve the existing monthly*/
   /* style color forecasts from DFCAST.VMSTY001.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-FFSTY-CSR = "N"; /* Initialize end of cursor switch*/
  FE0OW00.FE0OW-IXM = 1; /* Initialize the map index*/
  move 0 to FE0OW00.FE0OW-MON-TOT-FCS[1] for all; /* Initialize month totals*/
  FE0OW00.FE0OW-GND-TOT = 0; /* Initialize grand total*/
  ;
   /* ----------------------------------------------------------*/
   /* Process the specified style group.*/
   /* ----------------------------------------------------------*/
  ;
  FE0O-11300(); /* Select and open VFFSTY01 with style group*/
  FE0O-11310(); /* Fetch next row in VFFSTY01*/
  ;
  while (FE0OW00.FE0OW-FFSTY-CSR == "N") /* Until end of cursor*/
    ;
    FE0O-11320(); /* Process each active product*/
    ;
    FE0O-11310(); /* Fetch next row in VFFSTY01*/
    ;
  end
  ;
  FE0O-11330(); /* Close VFFSTY01*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OW00.FE0OW-IXM > 1) /* Page was formatted*/
    ;
    FE0O-11500(); /* Add page to temporary storage*/
    ;
  end
  ;
end // end FE0O-11000

// Purge temporary storage
Function FE0O-11100()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0OW01 empty; /* M001 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FE0OW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FE0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "11100"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-11100

// Load the month heading
Function FE0O-11250()
  ;
  FE0OW01.FE0OW-BMO = FFWREC.FFABEGMO; /* Beginning date*/
  FE0OW01.FE0OW-EMO = FFWREC.FFAENDMO; /* Ending date*/
  ;
  FE0OW00.FE0OW-IXM = 1; /* Initialize the map index*/
  FE0OW00.FE0OW-DAT = FE0OW01.FE0OW-BMO; /* First month*/
  ;
  while (FE0OW00.FE0OW-IXM <= 12) /* Until reach 12 months*/
    FE0OW00.FE0OW-HDG[FE0OW-IXM] = FE0OW00.FE0OW-DAT;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXM] == FE0OW01.FE0OW-EMO)
      FE0OW00.FE0OW-IXM = 13; /* force out of the loop*/
    else
      FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM + 1;
                                      /* Increment the heading index*/
      ;
      FE0OW00.FE0OW-DAT = FE0OW00.FE0OW-DAT + 1;
      ;
      if (FE0OW00.FE0OW-DMM > 12)
        FE0OW00.FE0OW-DMM = FE0OW00.FE0OW-DMM - 12;
        ;
        FE0OW00.FE0OW-DYY = FE0OW00.FE0OW-DYY + 1; /* Next year*/
        if (FE0OW00.FE0OW-DYY == 0) /* Intro a new century*/
          FE0OW00.FE0OW-DCC = FE0OW00.FE0OW-DCC + 1; /* Next century*/
        end
      end
    end
    ;
  end
  ;
end // end FE0O-11250

// Sel & open 'S1' VFFSTY01
Function FE0O-11300()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF3REC empty; /* Clear row storage area*/
  ;
  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group code*/
  FF3REC.XLCCD = "10"; /* Life cycle code*/
  ;
  FF3REC.YSMXDV = FFWREC.YSMXDV; /* div group*/
  ;
  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "113"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "11300"; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-11300

// Fetch 'N1' VFFSTY01
Function FE0O-11310()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FE0OW00.FE0OW-FFSTY-CSR = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "113"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "11310"; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-11310

// Process active product
Function FE0O-11320()
  if (FF3REC.SY2FDSMO <= FFWREC.FFAENDMO
   /* Proj. intro date within range*/
   && FF3REC.SY2PDCMO >= FFWREC.FFABEGMO)
                                   /* Proj. clsout date within range*/
    ;
    FE0OW01.FE0OW-STY[FE0OW-IXM] = FF3REC.SY1STNBR; /* Style number*/
    FE0OW00.SY2CLRID = FF3REC.SY2CLRID; /* Color id*/
    FE0OW00.XDMCD = FF3REC.XDMCD; /* Dimension code*/
    FE0OW00.SY2CLRAB = FF3REC.SY2CLRAB; /* Color abbreviation*/
    FE0OW01.FE0OW-DES[FE0OW-IXM] = FE0OW00.FE0OW-DES;
    FE0OW01.FE0OW-1SD[FE0OW-IXM] = FF3REC.SY2FDSMO;
                                   /* 1st Dom sales mo*/
    FE0OW01.FE0OW-COD[FE0OW-IXM] = FF3REC.SY2PDCMO; /* Proj. C/O mo*/
    FE0OW01.FF8DEVFL[FE0OW-IXM] = FF3REC.FF8DEVFL; /* development fl*/
    ;
    FE0O-11400(); /* Access DFCAST.VMSTY001 table*/
    ;
    FE0OW-IXM = FE0OW-IXM + 1;
    ;
    if (FE0OW00.FE0OW-IXM > 15)
      ;
      FE0O-11500(); /* Add page to temporary storage*/
      ;
    end
    ;
  end
  ;
end // end FE0O-11320

// Close 'C1' VFFSTY01
Function FE0O-11330()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "113"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "11330"; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0O-11330

// Access VMSTY001 table
Function FE0O-11400()
  FE0O-11410(); /* Select & open cursor for VMSTY001*/
  ;
  FE0OW00.FE0OW-MSTY-CSR = "N"; /* End of cursor switch*/
  ;
  FE0O-11420(); /* Fetch next row in VMSTY001*/
  ;
  while (FE0OW00.FE0OW-MSTY-CSR == "N") /* Until end of cursor*/
    ;
    FE0O-11430(); /* Save the monthly fcst*/
    FE0O-11440(); /* Accumulate the total*/
    FE0O-11420(); /* Fetch next row in VMSTY001*/
    ;
  end
  ;
  FE0O-11450(); /* Close the cursor for VMSTY001*/
  ;
  FE0O-11460(); /* Move fcst qty to w01 area*/
  ;
end // end FE0O-11400

// Sel & open cursor for VMSTY001
Function FE0O-11410()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF9REC empty; /* Clear row storage area*/
  ;
  FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FE0OW01.FE0OW-STY[FE0OW-IXM]; /* Style number*/
  FF9REC.SY2CLRID = FE0OW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FE0OW00.XDMCD; /* Dimension code*/
  ;
  set FFFREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  ;
  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "114"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "11410"; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-11410

// Fetch next row in VMSTY001
Function FE0O-11420()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3740" ("N1", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FE0OW00.FE0OW-MSTY-CSR = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "114"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "11420"; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-11420

// Save the monthly sty clr fcst
Function FE0O-11430()
  if (FF9REC.FF4FCTMO in FE0OW00.FE0OW-HDG)
    ;
    FE0OW00.FE0OW-FCS[sysVar.arrayIndex] = FF9REC.FF6SLFCT;
                                   /* Save the fcst*/
    FFXREC.FFXNUMB = FF9REC.FF6SLFCT;
    XSFFS10(); /* Convert grand tot from NUM to CHAR*/
    FE0OW00.FE0OW-FCS-CHAR[sysVar.arrayIndex] = FFXREC.FFXCHAR;
    ;
    FE0OW00.FE0OW-FCH = "N"; /* Save fcst change flag*/
    ;
    FE0OW00.FE0OW-CNT[sysVar.arrayIndex] = FF9REC.ZZZCHGCT;
                                   /* Save chng count*/
    ;
  end
  ;
end // end FE0O-11430

// Calculate the grand total
Function FE0O-11440()
   /* --------------------------------------------------------*/
   /* Accumulate the style color grand total*/
   /* --------------------------------------------------------*/
  ;
  FE0OW01.FE0OW-CLR-TOT[FE0OW-IXM] = FE0OW01.FE0OW-CLR-TOT[FE0OW-IXM] +                                    FE0OW00.FE0OW-FCS[sysVar.arrayIndex];
  ;
   /* --------------------------------------------------------*/
   /* Accumulate the style group monthly total*/
   /* --------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-MON-TOT-FCS[sysVar.arrayIndex] = FE0OW00.FE0OW-MON-TOT-FCS[sysVar.arrayIndex] +                             FE0OW00.FE0OW-FCS[sysVar.arrayIndex];
  ;
end // end FE0O-11440

// Close cursor for VMSTY001
Function FE0O-11450()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "C1"; /* Function code*/
  ;
  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "114"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "11450"; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0O-11450

// Move the fcst to w01 work area
Function FE0O-11460()
  if (FE0OW00.FE0OW-IXM == 1) /* 1st line*/
    FE0OW01.FE0OW-FCST-LINE-1 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 2) /* 2nd line*/
    FE0OW01.FE0OW-FCST-LINE-2 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 3) /* 3rd line*/
    FE0OW01.FE0OW-FCST-LINE-3 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 4) /* 4th line*/
    FE0OW01.FE0OW-FCST-LINE-4 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 5) /* 5th line*/
    FE0OW01.FE0OW-FCST-LINE-5 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 6) /* 6th line*/
    FE0OW01.FE0OW-FCST-LINE-6 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 7) /* 7th line*/
    FE0OW01.FE0OW-FCST-LINE-7 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 8) /* 8th line*/
    FE0OW01.FE0OW-FCST-LINE-8 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 9) /* 9th line*/
    FE0OW01.FE0OW-FCST-LINE-9 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 10) /* 10th line*/
    FE0OW01.FE0OW-FCST-LINE-10 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 11) /* 11th line*/
    FE0OW01.FE0OW-FCST-LINE-11 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 12) /* 12th line*/
    FE0OW01.FE0OW-FCST-LINE-12 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 13) /* 13th line*/
    FE0OW01.FE0OW-FCST-LINE-13 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 14) /* 14th line*/
    FE0OW01.FE0OW-FCST-LINE-14 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 15) /* 15th line*/
    FE0OW01.FE0OW-FCST-LINE-15 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
end // end FE0O-11460

// Verify Date range
Function FE0O-115()
  ;
  FE0OW01.FE0OW-BMO = FFWREC.FFABEGMO; /* Beginning date*/
  FE0OW01.FE0OW-EMO = FFWREC.FFAENDMO; /* Ending date*/
  ;
  FE0OW00.FE0OW-WBD = FE0OW01.FE0OW-BMO;
  FE0OW00.FE0OW-WED = FE0OW01.FE0OW-EMO;
  ;
   /* --------------------------------------------------------------------*/
   /* put the default date range into ffzrec.ffzbegmo and ffzrec.ffzendmo*/
   /* --------------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Clear storage row*/
  FFZREC.FFZBYYMM = FE0OW00.FE0OW-BYM; /* Beginning month*/
  FFZREC.FFZEYYMM = FE0OW00.FE0OW-EYM; /* Ending month*/
  FFZREC.FFZMONTH = 6; /* Number of month*/
  ;
  XSFFS35(); /* Verify the range*/
  ;
  if (FFZREC.FFZENDRC != "0" /* Check error code*/
   || FFZREC.FFZBEGRC != "0")
    ;
    FE0OW00.FE0OW-SWR = "N"; /* Don't obtain data*/
    ;
  end
  ;
  if (FFZREC.FFZENDRC != "0") /* Check error code*/
    ;
    FFWREC.XXXMODID = "115"; /* Module identification*/
    ;
    set FE0OM001.FE0OM-END-MO cursor, bold; /* Hightlight*/
    ;
    if (FFZREC.FFZENDRC == "1") /* No ending month entered*/
      ;
      converseLib.validationFailed(8); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZENDRC == "2") /* Invalid ending month entered*/
      ;
      converseLib.validationFailed(17); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZENDRC == "3") /* Ending month out of range*/
      ;
      converseLib.validationFailed(151); /* Indicate invalid date entered*/
      ;
    end
    ;
  end
  ;
  if (FFZREC.FFZBEGRC != "0") /* Check error code*/
    ;
    FFWREC.XXXMODID = "115"; /* Module identification*/
    set FE0OM001.FE0OM-BEG-MO cursor, bold; /* hightlight*/
    ;
    if (FFZREC.FFZBEGRC == "1") /* No beginning month entered*/
      ;
      converseLib.validationFailed(8); /* Indicate required field*/
      ;
    end
    ;
    if (FFZREC.FFZBEGRC == "2") /* Invalid beginning month entered*/
      ;
      converseLib.validationFailed(17); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZBEGRC == "3") /* Beginning month out of range*/
      ;
      converseLib.validationFailed(151); /* Indicate invalid date entered*/
      ;
    end
    ;
  end
  ;
end // end FE0O-115

// Add page to temporary storage
Function FE0O-11500()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW01.XXXTSLEN = FE0OW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  if (FE0OW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/
    ;
    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/
    ;
  end
  ;
  try
    call "TA0050" (FE0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FE0OW01 empty; /* M001 display storage*/
    FE0OW00.FE0OW-FCST-WORK = " ";
                                       /* Initialize the forecast qty field*/
    ;
    /* ---------------------------------------------------------*/
     /* Save the search information in map display storage queue*/
    /* ---------------------------------------------------------*/
    FE0OW01.FE0OW-BMO = FFWREC.FFABEGMO; /* Beginning month*/
    FE0OW01.FE0OW-EMO = FFWREC.FFAENDMO; /* Ending month*/
    ;
    FE0OW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FE0OW00.FE0OW-IXM = 1; /* Display line number*/
    FE0OW00.FE0OW-SWO = "Y"; /* Obtain data switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "11500"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-11500

// Format and converse the map
Function FE0O-120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* no error found*/
    ;
    set FE0OM001 empty;
    ;
    FE0OW01.FE0OW-BMO = FFWREC.FFABEGMO;
    FE0OW01.FE0OW-EMO = FFWREC.FFAENDMO;
    FE0OM001.FE0OM-BEG-MO = FE0OW01.FE0OM-BEG-MO; /* Beginning month*/
    FE0OM001.FE0OM-END-MO = FE0OW01.FE0OM-END-MO; /* Ending month*/
    set FE0OM001.FE0OM-BEG-MO initialAttributes;
    set FE0OM001.FE0OM-END-MO initialAttributes;
    ;
    FE0OM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
    FE0OM001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
    set FE0OM001.YPGCD initialAttributes;
    ;
    FE0OM001.XPCCD = FFWREC.XPCCD; /* Category code*/
    FE0OM001.XPCABRV = FFWREC.XPCABRV; /* Category abbreviation*/
    set FE0OM001.XPCCD initialAttributes;
    ;
    FE0OM001.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
    FE0OM001.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/
    set FE0OM001.SYBSTGNB initialAttributes;
    ;
    set FE0OM001.FE0OM-CHG-TOT initialAttributes;
    set FE0OM001.FE0OM-CHG-PCT initialAttributes;
    ;
    set FE0OM001.FE0OM-TOT-QTY initialAttributes;
    set FE0OM001.FE0OM-TOT-PCT initialAttributes;
    ;
    /* ------------------------------------------------------*/
     /* Darken all the fcst qty fields on the screen*/
    /* ------------------------------------------------------*/
    ;
    FE0OW00.FE0OW-IXF = 1;
    ;
    while (FE0OW00.FE0OW-IXF <= 6)
      ;
      set FE0OM001.FE0OM-FCST-1[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-2[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-3[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-4[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-5[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-6[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-7[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-8[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-9[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-10[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-11[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-12[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-13[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-14[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-15[FE0OW-IXF] initialAttributes;
      set FE0OM001.FE0OM-FCST-16[FE0OW-IXF] initialAttributes;
      ;
      FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF + 1;
      ;
    end
    ;
    /* ------------------------------------------------------*/
     /* Move the heading*/
    /* ------------------------------------------------------*/
    ;
    FE0OW00.FE0OW-IXF = 1; /* Initialize the map index*/
    ;
    while (FE0OW00.FE0OW-IXF <= 6) /* End of page*/
      ;
      set FE0OM001.FE0OM-HD[FE0OW-IXF] initialAttributes;
      FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF + 1; /* Increment the screen index*/
      ;
    end
    ;
    /* ------------------------------------------------------*/
    /* Reset change style color pct column*/
    /* ------------------------------------------------------*/
    ;
    FE0OW00.FE0OW-IXM = 1;
    while (FE0OW00.FE0OW-IXM <= 16)
      set FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] initialAttributes; /* Darken*/
      FE0OW-IXM = FE0OW-IXM + 1;
    end
    ;
    if (FE0OW00.FE0OW-SWF == "Y") /* Map must be formatted*/
      FE0O-121(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0OM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0OM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FE0OM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FE0OM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0OM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FE0OM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0OM001.CAITEM; /* Application data*/
  ;
end // end FE0O-120

// Format the display data
Function FE0O-121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FE0OW00.FE0OW-SWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FE0OW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (FE0OW00.FE0OW-SWU == "Y") /* Current page was changed*/
        ;
        FE0OS-01(); /* Update temporary storage page*/
        ;
        FE0OW00.FE0OW-SWU = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FE0OW00.XXXTSPAG > FE0OW00.TA5TSQIX) /* Desired greater highest*/
        FE0OW00.XXXTSPAG = FE0OW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      TA5REC.TA5TSQIX = FE0OW00.XXXTSPAG;
      ;
      FE0OS-02(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    FE0OM001.XXXLITPG = "PAGE"; /* "page" literal*/
    set FE0OM001.XXXLITPG skip;
    FE0OM001.XXXTSPAG = FE0OW00.XXXTSPAG; /* Current page*/
    FE0OM001.XXXLITOF = "OF"; /* "of" literal*/
    set FE0OM001.XXXLITOF skip;
    FE0OM001.TA5TSQIX = FE0OW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------*/
   /* Move the heading*/
   /* ------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-IXF = 1; /* Initialize the map index*/
  FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-LEF; /* Initialize work area idx*/
  ;
  FE0OW00.FE0OW-RIG = FE0OW00.FE0OW-LEF + 6 - 1;
  if (FE0OW00.FE0OW-RIG > FFZREC.FFZNUMMO)
    FE0OW00.FE0OW-RIG = FFZREC.FFZNUMMO;
  end
  ;
  while (FE0OW00.FE0OW-IXF <= 6) /* End of page*/
    ;
    if (FE0OW00.FE0OW-IXW <= FE0OW-RIG) /* end of season*/
      FE0OM001.FE0OM-HD[FE0OW-IXF] = FE0OW00.FE0OW-HYM[FE0OW-IXW];
      set FE0OM001.FE0OM-HD[FE0OW-IXF] skip;
    end
    ;
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1; /* Increment the map index*/
    FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF + 1; /* Increment the screen index*/
    ;
  end
  ;
  FE0OM001.FE0OM-TOT-QTY = "TOTAL";
  FE0OM001.FE0OM-TOT-PCT = "CHG% ";
  set FE0OM001.FE0OM-TOT-QTY skip; /* Visible*/
  set FE0OM001.FE0OM-TOT-PCT skip; /* Visible*/
  ;
   /* ------------------------------------------------------*/
   /* Move detail lines*/
   /* ------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-IXM = 1; /* Initialize the map index*/
  ;
  while (FE0OW00.FE0OW-IXM <= 15
   && FE0OW01.FE0OW-STY[FE0OW-IXM] > " ")
    ;
    FE0OW00.SYBSTGNB = FE0OW01.FE0OW-STY[FE0OW-IXM];
    FE0OW00.FE0OW-DES = FE0OW01.FE0OW-DES[FE0OW-IXM];
    FE0OM001.FE0OM-STY[FE0OW-IXM] = FE0OW00.FE0OW-DESC;
    ;
      /* -------------------------------------------------*/
       /* Move forecast quantity fields.*/
      /* -------------------------------------------------*/
    ;
    FFXREC.FFXNUMB = FE0OW01.FE0OW-CLR-TOT[FE0OW-IXM];
    XSFFS10(); /* translate to unit in 1000*/
    FE0OM001.FE0OM-GND[FE0OW-IXM] = FFXREC.FFXCHAR;
    ;
    set FE0OM001.FE0OM-GND[FE0OW-IXM] skip; /* Visible*/
    set FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] normal; /* Unprotect*/
    ;
    FE0OW00.FE0OW-IXF = 1; /* Initialize the map index*/
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-LEF; /* Work area index*/
    ;
    FE0OS-03(); /* Extract the fcst data*/
    ;
    while (FE0OW00.FE0OW-IXF <= 6 /* Until end of page*/
     && FE0OW00.FE0OW-IXW <= FE0OW00.FE0OW-RIG) /* Within the range*/
      ;
      FE0OS-04(); /* Move detail fcst qty to map*/
      ;
      FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF + 1;
      FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
      ;
    end
    ;
    FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM + 1;
    ;
  end
  ;
   /* ------------------------------------------------------*/
   /* Move total lines*/
   /* ------------------------------------------------------*/
  ;
  if (FE0OW00.FE0OW-SWO == "Y") /* Data obtained*/
    ;
    FE0OM001.FE0OM-STY[FE0OW-IXM] = "STYLE GROUP TOTAL : ";
    ;
    FE0OW00.FE0OW-GND-TOT = 0;
    FE0OW00.FE0OW-IXW = 1;
    while (FE0OW00.FE0OW-IXW <= FFZREC.FFZNUMMO)
      FE0OW00.FE0OW-GND-TOT = FE0OW00.FE0OW-GND-TOT +                               FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW];
      FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
    end
    ;
    FE0OW00.FE0OW-IXF = 1; /* Initialize the map index*/
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-LEF; /* Work area index*/
    ;
    while (FE0OW00.FE0OW-IXF <= 6 /* Until end of page*/
     && FE0OW00.FE0OW-IXW <= FE0OW00.FE0OW-RIG) /* Until end of page*/
      ;
      FE0OS-05(); /* Move total fcst to map*/
      ;
      FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF + 1;
      FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
      ;
    end
    ;
    FFXREC.FFXNUMB = FE0OW00.FE0OW-GND-TOT;
    XSFFS10(); /* Convert grand tot from NUM to CHAR*/
    FE0OM001.FE0OM-GND[FE0OW-IXM] = FFXREC.FFXCHAR;
    ;
  end
end // end FE0O-121

// Check attention identifier
Function FE0O-130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FE0OW00.FE0OW-SWR == "Y") /* Request for data*/
      set FE0OW01 empty; /* M001 display storage*/
    end
    ;
    FE0OW00.FE0OW-SWF = "Y"; /* Format the map switch*/
    FE0OW00.FE0OW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (FE0OW00.FE0OW-MST == "Y"
       || FE0OW00.FE0OW-MST == " ")
        ;
        if (FFWREC.YPGCD != " "
         && FFWREC.XPCCD != " "
         && FFWREC.SYBSTGNB != " ")
          FE0OS-70(); /* submit ff650d*/
        end
        ;
        FE0O-11100(); /* Purge temporary storage*/
        ;
        XSFFS01(); /* Exit to another application*/
        ;
        set FE0OM001.CATOAP cursor, bold; /* Highlight*/
        ;
      else
        ;
        if (FE0OW00.FE0OW-WARN == "Y")
                                   /* Warning msg already shown once*/
          ;
          FE0OW00.FE0OW-WARN = "N"; /* Clear the error switch*/
          FE0O-11100(); /* Purge temporary storage*/
          XSFFS01(); /* Exit to another application*/
          set FE0OM001.CATOAP cursor, bold; /* Highlight*/
          ;
        else
          ;
          if (FFWREC.FFWMODSW == "N") /* chge will be lost msg shown once*/
                                  /* and save mstr msg shown once*/
            if (FFWREC.YPGCD != " "
             && FFWREC.XPCCD != " "
             && FFWREC.SYBSTGNB != " ")
              FE0OS-70(); /* submit ff650d*/
            end
            ;
            FE0O-11100(); /* Purge temporary storage*/
            XSFFS01(); /* Exit to another application*/
            set FE0OM001.CATOAP cursor, bold; /* Highlight*/
            ;
          else
            ;
            COMMAREA.CATOAP = " "; /* TO application*/
            FFWREC.XXXMODID = "130"; /* Module identification*/
            converseLib.validationFailed(369); /* Indicate update master fcst*/
            FE0OW00.FE0OW-WARN = "Y"; /* Set the error switch*/
            ;
          end
          ;
        end
        ;
      end
      ;
    else
      ;
      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      ;
      COMMAREA.CAITEM = "FE0OM001"; /* Application find code*/
      ;
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      ;
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
      ;
    end
    ;
    if (FE0OW00.FE0OW-MST == "Y"
     || FE0OW00.FE0OW-MST == " ")
      ;
      if (FFWREC.YPGCD != " "
       && FFWREC.XPCCD != " "
       && FFWREC.SYBSTGNB != " ")
        FE0OS-70(); /* submit ff650d*/
      end
      ;
      FE0O-11100(); /* Purge temporary storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
    else
      ;
      if (FE0OW00.FE0OW-WARN == "Y") /* Warning msg already shown once*/
        ;
        FE0OW00.FE0OW-WARN = "N"; /* Clear the error switch*/
        FE0O-11100(); /* Purge temporary storage*/
        XSFFS01(); /* Exit to another application*/
        ;
      else
        ;
        if (FFWREC.FFWMODSW == "N") /* chge will be lost msg shown once*/
                                  /* and save mstr msg shown once*/
          if (FFWREC.YPGCD != " "
           && FFWREC.XPCCD != " "
           && FFWREC.SYBSTGNB != " ")
            FE0OS-70(); /* submit ff650d*/
          end
          ;
          FE0O-11100(); /* Purge temporary storage*/
          XSFFS01(); /* Exit to another application*/
          set FE0OM001.CATOAP cursor, bold; /* Highlight*/
          ;
        else
          ;
          COMMAREA.CATOAP = " "; /* TO application*/
          FFWREC.XXXMODID = "130"; /* Module identification*/
          converseLib.validationFailed(369); /* Indicate update master fcst*/
          FE0OW00.FE0OW-WARN = "Y"; /* Set the error switch*/
          ;
        end
        ;
      end
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If pf12 was pressed, reset the error message switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf12 /* PF12 was pressed*/
   && FE0OW00.FE0OW-MST == "N")    /* haven't saved as master yet*/
    if (FE0OW00.FE0OW-WARN == "Y") /* Warning msg already shown once*/
      ;
      FE0OW00.FE0OW-WARN = "N"; /* clear the error switch*/
      ;
    else
      ;
      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(369); /* Indicate update master fcst*/
      FE0OW00.FE0OW-WARN = "Y"; /* Set the error switch*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, reset the error message switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FE0OW00.FE0OW-WARN = "N";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/
    ;
    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end FE0O-130

// Reset highlighted fields
Function FE0O-140()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0OM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FE0OM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  set FE0OM001.FE0OM-BEG-MO initialAttributes; /* range begin month*/
  set FE0OM001.FE0OM-END-MO initialAttributes; /* range end month*/
  set FE0OM001.YPGCD initialAttributes; /* type group*/
  set FE0OM001.XPCCD initialAttributes; /* category*/
  set FE0OM001.SYBSTGNB initialAttributes; /* style group*/
  set FE0OM001.FE0OM-CHG-TOT initialAttributes; /* change total*/
  set FE0OM001.FE0OM-CHG-PCT initialAttributes; /* change pct*/
  ;
  FE0OW00.FE0OW-IXM = 1;
  ;
  while (FE0OW00.FE0OW-IXM <= 15 /* Until end of page*/
   && FE0OW01.FE0OW-STY[FE0OW-IXM] != " ")
    ;
    FE0OW00.FE0OW-IXF = 1; /* Initialize screen index*/
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-LEF; /* Work W01 index*/
    ;
    while (FE0OW00.FE0OW-IXF <= 6 /* Until end of page*/
     && FE0OW00.FE0OW-IXW <= FE0OW00.FE0OW-RIG) /* end of range*/
      ;
      if (FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-1SD[FE0OW-IXM]
       && FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-COD[FE0OW-IXM])
        FE0O-141(); /* Reset the forecast field*/
      end
      ;
      FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF + 1;
      FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
      ;
    end
    ;
    set FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] normal;
    ;
    FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OM001.YPGCD == "?" /* Type group list requested*/
   || FE0OM001.XPCCD == "?") /* Category list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "140"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of ypg codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OM001.YPGCD == "?") /* product list requested*/
    ;
    XPXX001(); /* init for pop up window*/
    ;
    XX0XW02.XX0XWHDR = "    TYPE GRP";
    XX0XW02.YPGFFFL = "Y";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    ;
    if (XX0XW02.XX0XWPIX > 0)
      FE0OM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FE0OM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FE0OM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0OM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OM001.XPCCD == "?") /* Category list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CAT"; /* Heading*/
    XX0XW02.XGPCD = XPCREC.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0OM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FE0OM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FE0OM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FE0OM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0OM001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "140"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0O-140

// Reset forecast fields
Function FE0O-141()
  ;
  if (FE0OW-IXM == 1) /* 1st line*/
    ;
    set FE0OM001.FE0OM-FCST-1[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 2) /* 2nd line*/
    ;
    set FE0OM001.FE0OM-FCST-2[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 3) /* 3rd line*/
    ;
    set FE0OM001.FE0OM-FCST-3[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 4) /* 4th line*/
    ;
    set FE0OM001.FE0OM-FCST-4[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 5) /* 5th line*/
    ;
    set FE0OM001.FE0OM-FCST-5[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 6) /* 6th line*/
    ;
    set FE0OM001.FE0OM-FCST-6[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 7) /* 7th line*/
    ;
    set FE0OM001.FE0OM-FCST-7[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 8) /* 8th line*/
    ;
    set FE0OM001.FE0OM-FCST-8[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 9) /* 9th line*/
    ;
    set FE0OM001.FE0OM-FCST-9[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 10) /* 10th line*/
    ;
    set FE0OM001.FE0OM-FCST-10[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 11) /* 11th line*/
    ;
    set FE0OM001.FE0OM-FCST-11[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 12) /* 12th line*/
    ;
    set FE0OM001.FE0OM-FCST-12[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 13) /* 13th line*/
    ;
    set FE0OM001.FE0OM-FCST-13[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 14) /* 14th line*/
    ;
    set FE0OM001.FE0OM-FCST-14[FE0OW-IXF] normal;
    ;
  end
  ;
  if (FE0OW-IXM == 15) /* 15th line*/
    ;
    set FE0OM001.FE0OM-FCST-15[FE0OW-IXF] normal;
    ;
  end
  ;
end // end FE0O-141

// Verify the entered data
Function FE0O-150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OM001.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FE0OM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf10 /* or scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FE0O-151(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Verify data in the line.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0OW00.FE0OW-SWO == "Y") /* Indicate data was obtained*/
      FE0O-152(); /* Verify forecast quantity*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* Verify entered key.*/
    /* ------------------------------------------------------------*/
    ;
    FE0O-155(); /* Verify key field*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FE0O-150

// Verify scroll request
Function FE0O-151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FE0OW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FE0OW00.XXXTSPAG >= FE0OW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left request*/
    ;
    if (FE0OW00.FE0OW-LEF == 1) /* current page is the 1st page*/
      ;
      FFWREC.XXXMODID = "151"; /* Module identification*/
      converseLib.validationFailed(23); /* No more columns to display*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    ;
    if (FE0OW00.FE0OW-RIG == FFZREC.FFZNUMMO) /* and no more pages*/
      ;
      FFWREC.XXXMODID = "151"; /* Module identification*/
      converseLib.validationFailed(24); /* No more columns to display*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error for any detail data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-IXM = 15; /* Initialize display index*/
  ;
  while (FE0OW00.FE0OW-IXM >= 1) /* Until end of the page*/
    ;
    if (FE0OM001.FE0OM-STY[FE0OW-IXM] > " "
     && FE0OM001.FE0OM-STY[FE0OW-IXM] != "STYLE GROUP TOTAL :")
      ;
      FE0OS-03(); /* Extract data from W01  to w00*/
      FE0OS-07(); /* Extract data from M001 to w00*/
      ;
      FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-RIG; /* Work area index*/
      ;
      if (FE0OW00.FE0OW-RIG > 6) /* on the right page*/
        FE0OW00.FE0OW-IXF = FFZREC.FFZNUMMO - 6;
      else /* on the left page*/
        if (FFZREC.FFZNUMMO > 6)
          FE0OW00.FE0OW-IXF = 6;
        else
          FE0OW00.FE0OW-IXF = FFZREC.FFZNUMMO;
        end
      end
      ;
      while (FE0OW00.FE0OW-IXF >= 1)
        ;
        FE0OS-06(); /* Check modified fcst field*/
        ;
        FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF - 1;
        FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW - 1;
        ;
      end
    end
    ;
    if (FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] != 0)
      ;
      FFWREC.XXXMODID = "151"; /* Module identification*/
      converseLib.validationFailed(5); /* Modification not allowed*/
      set FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] cursor, bold; /* Highlight*/
      ;
    end
    ;
    FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM - 1; /* Decrement disply index*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error for any key data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OM001.FE0OM-CHG-TOT != 0)
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(5); /* Modification not allowed*/
    set FE0OM001.FE0OM-CHG-TOT cursor, bold; /* Highlighted*/
    ;
  end
  ;
  if (FE0OM001.FE0OM-CHG-PCT != 0)
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(5); /* Modification not allowed*/
    set FE0OM001.FE0OM-CHG-PCT cursor, bold; /* Highlighted*/
    ;
  end
  ;
  if (FE0OM001.SYBSTGNB != FFWREC.SYBSTGNB) /* style group changed*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(5); /* Modification not allowed*/
    set FE0OM001.SYBSTGNB cursor, bold; /* Highlighted*/
    ;
  end
  ;
  if (FE0OM001.XPCCD != FFWREC.XPCCD) /* category changed*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(5); /* Modification not allowed*/
    set FE0OM001.XPCCD cursor, bold; /* Highlighted*/
    ;
  end
  ;
  if (FE0OM001.YPGCD != FFWREC.YPGCD) /* type group changed*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(5); /* Modification not allowed*/
    set FE0OM001.YPGCD cursor, bold; /* Highlighted*/
    ;
  end
end // end FE0O-151

// Verify data in the line
Function FE0O-152()
  ;
  FE0OW00.FE0OW-IXM = 15; /* Initialize disp index*/
  ;
  while (FE0OW00.FE0OW-IXM >= 1) /* Until end of the page*/
    ;
    if (FE0OM001.FE0OM-STY[FE0OW-IXM] > " "
     && FE0OM001.FE0OM-STY[FE0OW-IXM] != "STYLE GROUP TOTAL : ")
      ;
      FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-RIG; /* W01 index*/
      ;
      if (FE0OW00.FE0OW-RIG > 6)
        FE0OW00.FE0OW-IXF = FFZREC.FFZNUMMO - 6;
      else /* on the left hand page*/
        if (FFZREC.FFZNUMMO > 6)
          FE0OW00.FE0OW-IXF = 6; /* range > 6 month*/
        else
          FE0OW00.FE0OW-IXF = FFZREC.FFZNUMMO; /* range <= 6 mos*/
        end
      end
      ;
      FE0OS-03(); /* Extract W01 data into work area*/
      FE0OS-07(); /* Extract M001 data into work area*/
      ;
      /* ------------------------------------------------------------*/
       /* Convert the entered quantities from CHAR format to NUM*/
       /* format.*/
       /* Check the quantities to make sure they are not negative*/
       /* values.*/
      /* ------------------------------------------------------------*/
      ;
      while (FE0OW00.FE0OW-IXF >= 1)
        ;
        FE0O-1521(); /* Verify the fcst fields*/
        ;
        FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF - 1; /* Decrement map index*/
        FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW - 1; /* Decrement W01 index*/
        ;
      end
      ;
    end
    ;
    FE0O-1522(); /* verify mutual exclusive*/
    ;
    FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM - 1; /* decrement display index*/
    ;
  end
  ;
end // end FE0O-152

// Verify fcst qtys
Function FE0O-1521()
  FE0OW00.FE0OW-ERR = "N"; /* Error switch*/
  ;
  if (FE0OW00.FE0OW-MAP-FCST[FE0OW-IXF] > " "
   && FE0OW00.FE0OW-MAP-FCST[FE0OW-IXF] != 
  FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW])
    ;
    FFXREC.FFXCHAR = FE0OW00.FE0OW-MAP-FCST[FE0OW-IXF];
    XSFFS11(); /* Translate value format*/
    ;
    if (FFXREC.FFXRTNCD == "0") /* Normal return*/
      ;
      if (FFXREC.FFXNUMB < 0) /* Negative value*/
        ;
        FFWREC.XXXMODID = "152"; /* Module identification*/
        converseLib.validationFailed(10); /* Invalid value entered*/
        FE0OW00.FE0OW-ERR = "Y";
        ;
      end
      ;
    else
      ;
      FFWREC.XXXMODID = "152"; /* Module identification*/
      converseLib.validationFailed(10); /* Indicate invalid value entered*/
      FE0OW00.FE0OW-ERR = "Y";
      ;
    end
    ;
  end
  ;
   /* ---------------------------------------*/
   /* Check mutual exclusive situation*/
   /* ---------------------------------------*/
  ;
  FE0O-15211(); /* verify mutual exclusive*/
  ;
  if (FE0OW-IXM == 1) /* 1st line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-1[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 2) /* 2nd line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-2[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 3) /* 3rd line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-3[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 4) /* 4th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-4[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 5) /* 5th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-5[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 6) /* 6th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-6[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 7) /* 7th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-7[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 8) /* 8th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-8[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 9) /* 9th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-9[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 10) /* 10th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-10[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 11) /* 11th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-11[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 12) /* 12th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-12[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 13) /* 13th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-13[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 14) /* 14th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-14[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 15) /* 15th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-15[FE0OW-IXF] cursor, bold; /* Highlighted*/
    end
    ;
  end
  ;
end // end FE0O-1521

// Verify mutual exclusive - fcst
Function FE0O-15211()
  ;
  if (FE0OW00.FE0OW-MAP-FCST[FE0OW-IXF] != 
  FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW]
   && FE0OM001.FE0OM-CHG-TOT != 0) /* change tot*/
    ;
    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(233); /* Invalid value entered*/
    FE0OW00.FE0OW-ERR = "Y";
    set FE0OM001.FE0OM-CHG-TOT cursor, bold;
    ;
  end
  ;
  if (FE0OW00.FE0OW-MAP-FCST[FE0OW-IXF] != 
  FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW]
   && FE0OM001.FE0OM-CHG-PCT != 0) /* change pct*/
    ;
    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(233); /* Invalid value entered*/
    FE0OW00.FE0OW-ERR = "Y";
    set FE0OM001.FE0OM-CHG-PCT cursor, bold;
    ;
  end
  ;
  if (FE0OW00.FE0OW-MAP-FCST[FE0OW-IXF] != 
  FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW]
   && FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] != 0) /* color change pct*/
    ;
    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(233); /* Invalid value entered*/
    FE0OW00.FE0OW-ERR = "Y";
    set FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] cursor, bold;
    ;
  end
  ;
end // end FE0O-15211

// Verify mutual exclusive
Function FE0O-1522()
  ;
  if (FE0OM001.FE0OM-CHG-TOT != 0 /* change tot*/
   && FE0OM001.FE0OM-CHG-PCT != 0) /* change pct*/
    ;
    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(233); /* Invalid value entered*/
    set FE0OM001.FE0OM-CHG-TOT cursor, bold;
    set FE0OM001.FE0OM-CHG-PCT bold;
    ;
  end
  ;
  if (FE0OM001.FE0OM-CHG-TOT != 0 /* change tot*/
   && FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] != 0) /* color change pct*/
    ;
    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(233); /* Invalid value entered*/
    set FE0OM001.FE0OM-CHG-TOT cursor, bold;
    set FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] bold;
    ;
  end
  ;
  if (FE0OM001.FE0OM-CHG-PCT != 0 /* change pct*/
   && FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] != 0) /* color change pct*/
    ;
    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(233); /* Invalid value entered*/
    set FE0OM001.FE0OM-CHG-PCT cursor, bold;
    set FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] bold;
    ;
  end
  ;
end // end FE0O-1522

// Verify entered keys
Function FE0O-155()
   /* -------------------------------------------------------*/
   /* Verify change total qty to ensure that the current*/
   /* displayed qtys on the screen have been saved as*/
   /* master and can be used as index calculation.*/
   /* -------------------------------------------------------*/
  ;
  if (FE0OM001.FE0OM-CHG-TOT != 0 /* Change total requested*/
   && FE0OW00.FE0OW-MST == "N")   /* and fcsts haven't been saved as mstr*/
    ;
    FFWREC.XXXMODID = "155";
    converseLib.validationFailed(481); /* Indicate data has been changed*/
    set FE0OM001.FE0OM-CHG-TOT cursor, bold;
    ;
  end
  ;
   /* -------------------------------------------------------*/
   /* Verify style group code*/
   /* -------------------------------------------------------*/
  ;
  if (FE0OM001.SYBSTGNB == " ") /* Style group not entered*/
    ;
    if (converseVar.eventKey not pf12)
      FE0OM001.SYBSTGNM = " "; /* Style group name*/
      set FE0OM001.SYBSTGNB cursor, bold;
      FFWREC.XXXMODID = "155"; /* Module identification*/
      converseLib.validationFailed(482); /* Enter stygrp no or press PF12*/
    end
    ;
  end
  ;
  if (FE0OM001.SYBSTGNB != " " /* Style group entered*/
   && FE0OM001.SYBSTGNB != FFWREC.SYBSTGNB) /* Style group changed*/
    ;
    set FF3REC empty; /* Clear the storage row*/
    ;
    FF3REC.SYBSTGNB = FE0OM001.SYBSTGNB; /* Style group*/
    FF3REC.YSMXDV = FFWREC.YSMXDV; /* Division group*/
    ;
    FF3REC.XLCCD = "*"; /* Life cycle code*/
    FF3REC.YPGCD = FE0OM001.YPGCD; /* Type group code*/
    TA1REC.TA1PGMNM = "FE0O155"; /* Name of the calling process*/
    ;
    XSFFS22(); /* Verify style group code*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
      ;
      FE0OM001.SYBSTGNM = FF3REC.SYBSTGNM; /* Style group name*/
      FE0OM001.XPCCD = FF3REC.XPCCD; /* category code*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
      ;
      FFWREC.XXXMODID = "155"; /* Module identification*/
      converseLib.validationFailed(10); /* Indicate invalid value entered*/
      set FE0OM001.SYBSTGNB bold; /* Highlight*/
      set FE0OM001.YPGCD cursor, bold; /* Highlight*/
      ;
    end
    ;
  end
  ;
   /* -------------------------------------------------------*/
     /* Verify category code*/
   /* -------------------------------------------------------*/
  ;
  if (FE0OM001.XPCCD != FFWREC.XPCCD /* Category code changed*/
   || FE0OM001.XPCCD == " ")         /* No category code entered*/
    ;
    FE0O-1552(); /* Verify category code in xpctbl*/
    ;
  end
  ;
  if (FE0OM001.YPGCD != FFWREC.YPGCD) /* Type group changed*/
    ;
    FE0O-1553(); /* Verify type group code in ypgtbl*/
    ;
  end
  ;
   /* ---------------------------------------------------------------*/
   /* Verify the relationship among type group, category and stygrp.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FE0OM001.SYBSTGNB == " ") /* No style group specified*/
    ;
    /* -----------------------------------------------------------*/
       /* Verify the relationship between type group and category*/
    /* -----------------------------------------------------------*/
    ;
    if (FE0OM001.XPCCD != " " /* Category exist*/
     && FE0OM001.YPGCD != " ") /* Type group exist*/
      ;
      if (FE0OM001.XPCCD != FFWREC.XPCCD /* Category changed*/
       || FE0OM001.YPGCD != FFWREC.YPGCD) /* Type group changed*/
        ;
        FE0O-1554(); /* Verify type group and category in VFFXRF01*/
        ;
      end
      ;
    end
    ;
  else
    ;
    /* -----------------------------------------------------------*/
       /* Verify the relationship among type group, category and*/
       /* style group.*/
    /* -----------------------------------------------------------*/
    ;
    if (FE0OM001.XPCCD != " " /* Category exist*/
     && FE0OM001.YPGCD != " " /* Type group exist*/
     && FE0OM001.SYBSTGNB != " ") /* Style group exist*/
      ;
      if (FE0OM001.XPCCD != FFWREC.XPCCD /* Category changed*/
       || FE0OM001.YPGCD != FFWREC.YPGCD /* Type group changed*/
       || FE0OM001.SYBSTGNB != FFWREC.SYBSTGNB) /* Style group changed*/
        ;
        FE0O-1555(); /* Verify type grp, cat and sty grp in VFFSTY01*/
        ;
      end
      ;
    end
    ;
  end
  ;
   /* -------------------------------------------------------*/
     /* Verify range*/
   /* -------------------------------------------------------*/
  ;
  if (FE0OM001.FE0OM-BEG-MO != FE0OW01.FE0OM-BEG-MO
   /* Beginning month changed*/
   || FE0OM001.FE0OM-END-MO != FE0OW01.FE0OM-END-MO
   /* Ending month changed*/
   || FE0OM001.FE0OM-BEG-MO == 0 /* No beginning month entered*/
   || FE0OM001.FE0OM-END-MO == 0) /* No ending month entered*/
    ;
    FE0O-1556(); /* Verify range*/
    ;
  end
  ;
end // end FE0O-155

// Verify category code in xpctbl
Function FE0O-1552()
  ;
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XPCCD = FE0OM001.XPCCD;
  ;
  if (FE0OM001.XPCCD == "  ")
    FE0OM001.XPCABRV = "      ";
  else
    FE0OM001.XPCABRV = "******";
  end
  ;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FE0OM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
    ;
  else
    ;
    if (FE0OM001.XPCCD == "  " /* category not entered*/
     && FE0OM001.SYBSTGNB != " ") /* and style group entered*/
      ;
    else
       /* ------------------------------------------------------------*/
        /* If not found or inactive, indicate missing or invalid.*/
       /* ------------------------------------------------------------*/
      ;
      FFWREC.XXXMODID = "155"; /* Module identification*/
      ;
      set FE0OM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
    end
    ;
  end
  ;
  ;
end // end FE0O-1552

// Verify type grp code in ypgtbl
Function FE0O-1553()
  ;
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OM001.YPGCD == "  ") /* No type group*/
    FE0OM001.YPGABRV = "      ";
  else
    FE0OM001.YPGABRV = "******";
  end
  ;
  if (FE0OM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and active for FF system*/
    ;
    FE0OM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FFWREC.XXXMODID = "155"; /* Module identification*/
    ;
    set FE0OM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    ;
  end
  ;
end // end FE0O-1553

// Verify typ grp & cat in VFFXRF
Function FE0O-1554()
  FE0OS-11(); /* Open & select VFFXRF01*/
  ;
  FE0OS-12(); /* Fetch first row in VFFXRF01*/
  ;
  FE0OS-13(); /* Close the cursor for VFFXRF01*/
  ;
end // end FE0O-1554

// Verify typ, cat & stgrp-VFFSTY
Function FE0O-1555()
  set FF3REC empty; /* Clear the storage row*/
  ;
  FF3REC.SYBSTGNB = FE0OM001.SYBSTGNB; /* Style group*/
  FF3REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  ;
  FF3REC.YPGCD = FE0OM001.YPGCD; /* Type group code*/
  FF3REC.XLCCD = "*"; /* Life cycle code*/
  TA1REC.TA1PGMNM = "FE0O1555"; /* Name of the calling process*/
  ;
  XSFFS22();
  ;
  if (FF3REC.YPGCD == FE0OM001.YPGCD /* Valid type group code*/
   && FF3REC.XPCCD == FE0OM001.XPCCD) /* and valid category code*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FFWREC.XXXMODID = "155"; /* Module identification*/
    converseLib.validationFailed(203); /* Indicate inconsistent relationship*/
    set FE0OM001.YPGCD cursor, bold; /* Highlight*/
    set FE0OM001.XPCCD bold; /* Highlight*/
    set FE0OM001.SYBSTGNB bold; /* Highlight*/
    ;
  end
  ;
  ;
end // end FE0O-1555

// Verify range
Function FE0O-1556()
   /* ------------------------------------------------------------*/
   /* The beginning month must be greater than the current month*/
   /* and less than or equal to the current plus 30 month*/
   /* The ending month must be greater than or equal to the*/
   /* beginning month, not greater than the beginning plus 11*/
   /* month and not greater than the current plus 30 months.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Clear storage row*/
  ;
  FFZREC.FFZBYYMM = FE0OM001.FE0OM-BEG-MO; /* Beginning month*/
  FFZREC.FFZEYYMM = FE0OM001.FE0OM-END-MO; /* Ending month*/
  FFZREC.FFZMONTH = 6; /* Number of month*/
  ;
  XSFFS35(); /* Verify the range*/
  ;
  if (FFZREC.FFZENDRC != "0") /* Check error code*/
    ;
    FFWREC.XXXMODID = "155"; /* Module identification*/
    ;
    set FE0OM001.FE0OM-END-MO cursor, bold; /* Hightlight*/
    ;
    if (FFZREC.FFZENDRC == "1") /* No ending month entered*/
      ;
      converseLib.validationFailed(8); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZENDRC == "2") /* Invalid ending month entered*/
      ;
      converseLib.validationFailed(17); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZENDRC == "3") /* Ending month out of range*/
      ;
      converseLib.validationFailed(151); /* Indicate invalid date entered*/
      ;
    end
    ;
  end
  ;
  if (FFZREC.FFZBEGRC != "0") /* Check error code*/
    ;
    FFWREC.XXXMODID = "155"; /* Module identification*/
    set FE0OM001.FE0OM-BEG-MO cursor, bold; /* hightlight*/
    ;
    if (FFZREC.FFZBEGRC == "1") /* No beginning month entered*/
      ;
      converseLib.validationFailed(8); /* Indicate required field*/
      ;
    end
    ;
    if (FFZREC.FFZBEGRC == "2") /* Invalid beginning month entered*/
      ;
      converseLib.validationFailed(17); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZBEGRC == "3") /* Beginning month out of range*/
      ;
      converseLib.validationFailed(151); /* Indicate invalid date entered*/
      ;
    end
    ;
  end
  ;
end // end FE0O-1556

// Process valid input request
Function FE0O-160()
  if (converseVar.eventKey is pf7  /* Scroll back requested*/
   || converseVar.eventKey is pf8  /* Scroll foreward requested*/
   || converseVar.eventKey is pf10 /* Scroll left requested*/
   || converseVar.eventKey is pf11) /* Scroll right requested*/
    FE0OW00.FE0OW-SWF = "Y"; /* Format data switch*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FE0OW00.XXXTSPAG = FE0OW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FE0OW00.XXXTSPAG = FE0OW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll left was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FE0OW00.FE0OW-LEF = FE0OW00.FE0OW-LEF - 6;
    FE0OW00.FE0OW-RIG = FE0OW00.FE0OW-RIG - 6;
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll right was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FE0OW00.FE0OW-LEF = FE0OW00.FE0OW-LEF + 6;
    FE0OW00.FE0OW-RIG = FE0OW00.FE0OW-RIG + 6;
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check if any key field was changed.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------*/
   /* Obtain line code*/
   /* ------------------------*/
  ;
  FE0O-1554();
  FFWREC.XPLCD = FF2REC.XPLCD; /* Line*/
  ;
  if (FE0OM001.YPGCD != FFWREC.YPGCD
   || FE0OM001.XPCCD != FFWREC.XPCCD
   || FE0OM001.SYBSTGNB != FFWREC.SYBSTGNB
   || FFWREC.FFABEGMO != FFZREC.FFZBEGMO
   || FFWREC.FFAENDMO != FFZREC.FFZENDMO)
    ;
    if (FE0OM001.YPGCD != FFWREC.YPGCD
     || FE0OM001.XPCCD != FFWREC.XPCCD
     || FE0OM001.SYBSTGNB != FFWREC.SYBSTGNB)
      ;
      if (FFWREC.XPCCD != " " /* not first time thru*/
       && FFWREC.SYBSTGNB != " ")
        ;
        FE0OS-70(); /* submit FF650d*/
        ;
      end
      ;
    end
    ;
    FE0OW00.FE0OW-SWR = "Y"; /* request for data switch*/
    FE0OW00.FE0OW-SWF = "N"; /* Format data switch*/
    FE0OW00.FE0OW-SWO = "N"; /* reset data obtained switch*/
    FE0OW00.FE0OW-SWU = "N"; /* reset data updated switch*/
    FFWREC.YPGCD = FE0OM001.YPGCD; /* type group*/
    FFWREC.YPGABRV = FE0OM001.YPGABRV;
    FFWREC.XPCCD = FE0OM001.XPCCD; /* category*/
    FFWREC.XPCABRV = FE0OM001.XPCABRV;
    FFWREC.SYBSTGNB = FE0OM001.SYBSTGNB; /* style group*/
    FFWREC.SYBSTGNM = FE0OM001.SYBSTGNM;
    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Save converted dates*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO;
    FE0OW00.FE0OW-LEF = 1; /* Left index*/
    move 0 to FE0OW00.FE0OW-CAT-DMD[1] for all; /* Category demand fcst accumulator*/
    ;
  end
  ;
  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
    ;
    FE0OW00.FE0OW-MAP = 2; /* indicate 2nd map*/
    ;
    FE0OW00.FE0OW-SWR = "Y"; /* request for data switch*/
    FE0OW00.FE0OW-SWF = "Y"; /* format data switch*/
    FE0OW00.FE0OW-MST = "Y"; /* reset master saved switch*/
    FFWREC.FFWMODSW = "N"; /* Data modified switch*/
    FE0OW00.FE0OW-LEF = 1; /* reset left index*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (FE0OW00.FE0OW-SWO == "Y") /* Indicate data was obtained*/
    ;
     /* ------------------------------------------------------------*/
      /* If ENTER was pressed and any forecast being updated, then*/
      /* update the W01 fcst qty and totals.*/
     /* ------------------------------------------------------------*/
    ;
    FE0OW00.FE0OW-SWF = "Y"; /* Format data switch*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
       /* ------------------------------------------------------------*/
       /* Move the key fields*/
       /* ------------------------------------------------------------*/
      ;
      FE0O-161(); /* Process Update*/
      ;
    end
    ;
     /* ------------------------------------------------------------*/
      /* if PF15 was pressed, save the forecasts into master tables.*/
     /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      ;
      FE0O-162(); /* Process PF15*/
      ;
    end
    ;
  end
  ;
end // end FE0O-160

// Process ENTER key
Function FE0O-161()
  ;
   /* -----------------------------------------------------*/
   /* Update the tsq W01 area*/
   /* -----------------------------------------------------*/
  ;
  FE0OW00.FE0OW-IXM = 1; /* Initialize map index*/
  ;
  while (FE0OW00.FE0OW-IXM <= 15 /* Until end of page*/
   && FE0OW01.FE0OW-STY[FE0OW-IXM] != " ") /* End of the list*/
    ;
    FE0OS-03(); /* Extract data from W01 to W00*/
    FE0OS-07(); /* Extract data from M001 tp W00*/
    ;
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-LEF; /* Work w01 index*/
    FE0OW00.FE0OW-IXF = 1; /* Map index*/
    ;
    while (FE0OW00.FE0OW-IXF <= 6 /* Until end of page*/
     && FE0OW00.FE0OW-IXW <= FE0OW00.FE0OW-RIG) /* end of range*/
      ;
      FE0OS-08(); /* Update the changed fcst field*/
      ;
      FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF + 1; /* Increment map index*/
      FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1; /* Increment w01 index*/
      ;
    end
    ;
    if (FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] != 0) /* Change clr pct*/
      FE0O-1613(); /* Update stygrp and styclr fcst*/
    end
    ;
    FE0OS-10(); /* Save data to W01*/
    ;
    FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM + 1; /* Increment map index*/
    ;
  end
  ;
  FE0OS-01(); /* update tsq page*/
  ;
   /* -------------------------------------------------------*/
   /* Go through all the tsq pages to update the fcsts,*/
   /* when change total qty or changetotal pct is requested.*/
   /* -------------------------------------------------------*/
  ;
  if (FE0OM001.FE0OM-CHG-TOT != 0) /* Change group total*/
    FE0O-1611(); /* Update stygrp and styclr fcst*/
  end
  ;
  if (FE0OM001.FE0OM-CHG-PCT != 0) /* Change total pct*/
    FE0O-1612(); /* Update stygrp and styclr fcst*/
  end
  ;
end // end FE0O-161

// Process change total qty
Function FE0O-1611()
   /* ---------------------------------------------------*/
   /* When the style group total is changed, update*/
   /* all the style color forecasts based on the old*/
   /* master style color fcst versus master style group*/
   /* fcst ratio.*/
   /* ---------------------------------------------------*/
  ;
  FE0OW00.FE0OW-PAG = 1; /* Initialize the page number*/
  ;
  while (FE0OW00.FE0OW-PAG <= FE0OW00.TA5TSQIX) /* Until reach the last page*/
    ;
    TA5REC.TA5TSQIX = FE0OW00.FE0OW-PAG; /* Set the page number*/
    ;
    FE0OS-02(); /* Read TSQ page*/
    ;
    FE0OW00.FE0OW-IXM = 1; /* Initialize the map index*/
    ;
    while (FE0OW00.FE0OW-IXM <= 15
     && FE0OW01.FE0OW-STY[FE0OW-IXM] != " ")
      ;
      FE0OS-03(); /* extract data from W01 to W00*/
      ;
      FE0OW00.FE0OW-IXW = 1; /* Work W01 column index*/
      ;
      while (FE0OW00.FE0OW-IXW <= FFZREC.FFZNUMMO) /* Until end of range*/
        ;
        if (FE0OW00.FE0OW-GND-TOT == 0)
          ;
          FE0OW00.FE0OW-RATIO = 0;
          ;
        else
          ;
          FE0OW00.FE0OW-RATIO = mathLib.round(FE0OW00.FE0OW-FCS[FE0OW-IXW] /           FE0OW00.FE0OW-GND-TOT, -mathLib.decimals(FE0OW00.FE0OW-RATIO));
          ;
        end
        ;
        FE0OW00.FE0OW-OLD-FCS = FE0OW00.FE0OW-FCS[FE0OW-IXW];
        ;
        FE0OW00.FE0OW-FCS[FE0OW-IXW] = mathLib.round(FE0OM001.FE0OM-CHG-TOT * 1000 *         FE0OW00.FE0OW-RATIO, -mathLib.decimals(FE0OW00.FE0OW-FCS[FE0OW-IXW]));
        ;
        FFXREC.FFXNUMB = FE0OW00.FE0OW-FCS[FE0OW-IXW];
        XSFFS10(); /* Convert grand tot from NUM to CHAR*/
        FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW] = FFXREC.FFXCHAR;
        ;
        FE0OS-09(); /* Update totals*/
        ;
        FE0OW00.FE0OW-FCH[FE0OW-IXW] = "Y"; /* chng flag*/
        ;
        FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
        ;
      end
      ;
      FE0OS-10(); /* Save data to W01*/
      FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM + 1;
      ;
    end
    ;
    FE0OS-01(); /* Update TSQ page*/
    ;
    FE0OW00.FE0OW-PAG = FE0OW00.FE0OW-PAG + 1;
    ;
  end
  ;
  FFWREC.FFWMODSW = "Y"; /* Indicate data modified*/
  FE0OW00.FE0OW-SWF = "Y"; /* ; /* Format data switch*/
  FE0OW00.FE0OW-SWU = "Y"; /* Storage update switch*/
  FE0OW00.FE0OW-MST = "N"; /* Haven't saved as master yet*/
  ;
   /* ----------------------------------------------------*/
   /* Restore the current page.*/
   /* ----------------------------------------------------*/
  ;
  TA5REC.TA5TSQIX = FE0OW00.XXXTSPAG; /* Current page number*/
  ;
  FE0OS-02(); /* Bring back the current page*/
  ;
end // end FE0O-1611

// Process change total pct
Function FE0O-1612()
   /* ---------------------------------------------------*/
   /* When the style group total pct is changed, update*/
   /* all the style color forecasts based on the*/
   /* percentage.*/
   /* ---------------------------------------------------*/
  ;
  FE0OW00.FE0OW-PAG = 1; /* Initialize the page number*/
  ;
  while (FE0OW00.FE0OW-PAG <= FE0OW00.TA5TSQIX) /* Until reach the last page*/
    ;
    TA5REC.TA5TSQIX = FE0OW00.FE0OW-PAG; /* Set the page number*/
    ;
    FE0OS-02(); /* Read TSQ page*/
    ;
    FE0OW00.FE0OW-IXM = 1; /* Initialize the map index*/
    ;
    while (FE0OW00.FE0OW-IXM <= 15
     && FE0OW01.FE0OW-STY[FE0OW-IXM] != " ")
      ;
      FE0OS-03(); /* extract data from W01 to W00*/
      ;
      FE0OW00.FE0OW-IXW = 1; /* Work W01 column index*/
      ;
      while (FE0OW00.FE0OW-IXW <= FFZREC.FFZNUMMO) /* Until end of range*/
        ;
        FE0OW00.FE0OW-OLD-FCS = FE0OW00.FE0OW-FCS[FE0OW-IXW];
        ;
        FE0OW00.FE0OW-FCS[FE0OW-IXW] = mathLib.round(FE0OW00.FE0OW-FCS[FE0OW-IXW] +         FE0OW00.FE0OW-FCS[FE0OW-IXW] * FE0OM001.FE0OM-CHG-PCT / 100, -mathLib.decimals(FE0OW00.FE0OW-FCS[FE0OW-IXW]));
        ;
        FFXREC.FFXNUMB = FE0OW00.FE0OW-FCS[FE0OW-IXW];
        XSFFS10(); /* Convert grand tot from NUM to CHAR*/
        FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW] = FFXREC.FFXCHAR;
        ;
        FE0OS-09(); /* Update totals*/
        ;
        FE0OW00.FE0OW-FCH[FE0OW-IXW] = "Y"; /* chng flag*/
        ;
        FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
        ;
      end
      ;
      FE0OS-10(); /* Save data W01*/
      FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM + 1;
      ;
    end
    ;
    FE0OS-01(); /* Update TSQ page*/
    ;
    FE0OW00.FE0OW-PAG = FE0OW00.FE0OW-PAG + 1;
    ;
  end
  ;
  FFWREC.FFWMODSW = "Y"; /* Indicate data modified*/
  FE0OW00.FE0OW-SWF = "Y"; /* ; /* Format data switch*/
  FE0OW00.FE0OW-SWU = "Y"; /* Storage update switch*/
  FE0OW00.FE0OW-MST = "N"; /* Haven't saved as master yet*/
  ;
   /* ----------------------------------------------------*/
   /* Restore the current page.*/
   /* ----------------------------------------------------*/
  ;
  TA5REC.TA5TSQIX = FE0OW00.XXXTSPAG; /* Current page number*/
  ;
  FE0OS-02(); /* Bring back the current page*/
  ;
end // end FE0O-1612

// Process change color pct
Function FE0O-1613()
   /* ---------------------------------------------------*/
   /* When the style color pct is changed, update*/
   /* all the style color forecasts based on the*/
   /* percentage.*/
   /* ---------------------------------------------------*/
  ;
  FE0OW00.FE0OW-IXW = 1; /* Work W01 index*/
  ;
  while (FE0OW00.FE0OW-IXW <= FFZREC.FFZNUMMO)
    ;
    FE0OW00.FE0OW-OLD-FCS = FE0OW00.FE0OW-FCS[FE0OW-IXW]; /* Old fcst*/
    ;
    FE0OW00.FE0OW-FCS[FE0OW-IXW] = mathLib.round(FE0OW00.FE0OW-FCS[FE0OW-IXW] +     FE0OW00.FE0OW-FCS[FE0OW-IXW] *     FE0OM001.FE0OM-CHG-STY-PCT[FE0OW-IXM] / 100, -mathLib.decimals(FE0OW00.FE0OW-FCS[FE0OW-IXW]));
    ;
    FFXREC.FFXNUMB = FE0OW00.FE0OW-FCS[FE0OW-IXW];
    XSFFS10(); /* Convert grand tot from NUM to CHAR*/
    FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW] = FFXREC.FFXCHAR;
    ;
    FE0OS-09(); /* Update totals*/
    ;
    FE0OW00.FE0OW-FCH[FE0OW-IXW] = "Y"; /* chng flag*/
    ;
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
    ;
  end
  ;
  FFWREC.FFWMODSW = "Y"; /* Indicate data modified*/
  FE0OW00.FE0OW-SWF = "Y"; /* ; /* Format data switch*/
  FE0OW00.FE0OW-SWU = "Y"; /* Storage update switch*/
  FE0OW00.FE0OW-MST = "N"; /* Haven't saved as master yet*/
  ;
end // end FE0O-1613

// Process PF15 key
Function FE0O-162()
  ;
  FE0O-1621(); /* save master tables*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  FFWREC.XXXMSGNO = 26; /* Indicate wrksht fcst saved as master*/
  FE0OW00.FE0OW-MST = "Y"; /* Turn on mstr fcst saved switch*/
  ;
  ;
end // end FE0O-162

// Update master tables
Function FE0O-1621()
   /* ------------------------------------------------------------*/
   /* Update the current tsq page.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OW00.FE0OW-SWU == "Y") /* Data changed*/
    ;
    FE0OS-01(); /* Update TSQ page*/
    ;
    FE0OW00.FE0OW-SWU = "N";
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Update the DFCAST.VMSTY001 table.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-PAG = 1; /* Initialize the page number*/
  move "N" to FE0OW00.FE0OW-UPD-GRP[1] for all; /* Update style group flag*/
  ;
  FE0OW00.FE0OW-IXW = 1; /* W01 work index*/
  while (FE0OW00.FE0OW-IXW <= 12)
    ;
    FE0OW00.FE0OW-DMDVAR[FE0OW-IXW] = 0;
                                                     /* zero out demand var*/
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
    ;
  end
  ;
  while (FE0OW00.FE0OW-PAG <= FE0OW00.TA5TSQIX) /* Until reach the last page*/
    ;
    TA5REC.TA5TSQIX = FE0OW00.FE0OW-PAG; /* Set the page number*/
    ;
    FE0OS-02(); /* Read TSQ page*/
    ;
    FE0OW00.FE0OW-IXM = 1; /* Initialize the map index*/
    ;
    while (FE0OW00.FE0OW-IXM <= 15
     && FE0OW01.FE0OW-STY[FE0OW-IXM] != " ")
      ;
      FE0O-16214(); /* Get DFCAST.VSWHDR01*/
      ;
      FE0OS-03(); /* extract data from W01 to W00*/
      FE0O-16211(); /* Update DFCAST.VMSTY001*/

      FE0OS-10(); /* save updated data*/
      ;
      FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM + 1; /* Increment the map index*/
      ;
    end
    ;
    if (FE0OW00.FE0OW-SWU == "Y")
      FE0OS-01(); /* Update current tsq page*/
      FE0OW00.FE0OW-SWU = "N"; /* Reset update switch*/
      ;
    end
    ;
    FE0OW00.FE0OW-PAG = FE0OW00.FE0OW-PAG + 1;
    ;
  end
  ;
  FE0O-16212(); /* Update DFCAST.VMSGRP01*/
  ;
  FE0O-16213(); /* Update DFCAST.VMCAT001*/
  ;
  FE0O-16215(); /* Update DFCAST.VMLTYP01*/
  ;
  FFWREC.FFWMODSW = "N";
                                   /* Indicate the data no need to be saved*/
  ;
   /* ------------------------------------------------------------*/
    /* Restore the page before calling subroutine.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5TSQIX = FE0OW00.XXXTSPAG; /* Set the page number*/
  ;
  FE0OS-02(); /* Read TSQ page*/
  ;
end // end FE0O-1621

// Process MSTY001
Function FE0O-16211()
  FE0OW00.FE0OW-IXW = 1; /* W01 work index*/
  ;
  while (FE0OW00.FE0OW-IXW <= 12)
    ;
    if (FE0OW00.FE0OW-FCH[FE0OW-IXW] == "Y") /* Forecast changed*/
      ;
      FE0OW00.FE0OW-FCH[FE0OW-IXW] = "N"; /* Reset fcst change flag*/
      FE0OW00.FE0OW-UPD-GRP[FE0OW-IXW] = "Y"; /* set upd stygrp flag*/
      FE0OW00.FE0OWDOLD = 0; /* reset old demand*/
      FE0OW00.FE0OWDVAR = 0; /* reset demand variance*/
      ;
      FE0OS-20(); /* Read DFCAST.VMSTY001*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100)
        ;
        FE0OS-23(); /* Insert DFCAST.VMSTY001*/
        ;
      else
        ;
        if (FF9REC.ZZZCHGCT != FE0OW00.FE0OW-CNT[FE0OW-IXW]) /* Recd changed*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* Roll back all changes*/
          FE0OW00.FE0OW-SWR = "Y"; /* Request for data switch*/
          FE0OW00.FE0OW-SWU = "N"; /* Reset update switch*/
          FFWREC.XXXMODID = "162"; /* Module identification*/
          FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
          exit stack; /* Exit to display map*/
          ;
        else
          ;
          if (FF9REC.FF7FLLRT != 0) /* fill rate not 0*/
            FE0OW00.FE0OWDOLD = FF9REC.FF6SLFCT * 100             / FF9REC.FF7FLLRT; /* calculate old demand*/
          else
            FE0OW00.FE0OWDOLD = 0;
          end
          FE0OS-22(); /* Update DFCAST.VMSTY001*/
          FE0OW00.FE0OW-SWU = "Y"; /* data update switch*/
          FE0OW00.FE0OW-CNT[FE0OW-IXW] = FF9REC.ZZZCHGCT; /* chg cnt*/
          ;
        end
        ;
        FE0O-16211A(); /* Process SWITM01*/
        FE0OW00.FE0OWDVAR = FFRREC.FFRCDMFC - FE0OW00.FE0OWDOLD;
        FE0OW00.FE0OW-DMDVAR[FE0OW-IXW] = FE0OW00.FE0OW-DMDVAR[FE0OW-IXW]           + FE0OW00.FE0OWDVAR;
                                   /* add variance to total demand variance*/
        ;
        /* accumulate the demand total -*/
        /* This total will only be used when insert a new cateogry recd*/
        /* and will be reset everytime the key fields changed.*/
        ;
        FE0OW00.FE0OW-CAT-DMD[FE0OW-IXW] = FE0OW00.FE0OW-CAT-DMD[FE0OW-IXW] +                                  FFRREC.FFRCDMFC;
        ;
      end
    end
    ;
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
    ;
  end
end // end FE0O-16211

// Process SWITM01
Function FE0O-16211A()
  FE0OW00.FE0OW-IXF = 1;
  FE0OW00.FE0OW-FOUND = "N";
  ;
  while (FE0OW00.FE0OW-IXF <= 12
   && FE0OW00.FE0OW-FOUND == "N")
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW00.FE0OW-SWHDR-BEG[FE0OW-IXF]
     && 
    FE0OW00.FE0OW-HDG[FE0OW-IXW] <= FE0OW00.FE0OW-SWHDR-END[FE0OW-IXF])
      FE0OW00.FE0OW-FOUND = "Y";
    else
      FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF + 1;
    end
  end
  ;
  if (FE0OW00.FE0OW-FOUND == "Y")
    FE0O-16211A1(); /* Read SWITM01*/
    if (VAGen_SQLCODE == 0)
      if (FFRREC.FF7FLLRT != 0)
        FFRREC.FFRCDMFC = mathLib.round(FE0OW00.FE0OW-FCS[FE0OW-IXW] * 100 /                         FFRREC.FF7FLLRT, -mathLib.decimals(FFRREC.FFRCDMFC)); /* Update demand*/
      else
        FFRREC.FFRCDMFC = 0;
      end
      FE0O-16211A2(); /* Update SWITM01*/
    end
  end
  ;
end // end FE0O-16211A

// Read 'S ' SWITM01
Function FE0O-16211A1()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFRREC empty; /* Clear row storage area*/
  ;
  FFRREC.FFEWSNBR = FE0OW00.FE0OW-SWHDR-WS[FE0OW-IXF]; /* ws no.*/
  FFRREC.FF4FCTMO = FE0OW00.FE0OW-HDG[FE0OW-IXW]; /* fcst mo*/
  ;
  try
    call "IO3820" ("S ", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Record not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-16211A1

// Update 'U ' SWITM01
Function FE0O-16211A2()
  ;
  FFRREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFRREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3820" ("U ", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-16211A2

// Process MSGRP01
Function FE0O-16212()
  FE0OW00.FE0OW-IXW = 1; /* W01 work index*/
  ;
  while (FE0OW00.FE0OW-IXW <= 12)
    ;
    if (FE0OW00.FE0OW-UPD-GRP[FE0OW-IXW] == "Y") /* Forecast changed*/
      ;
      FE0OS-24(); /* Read DFCAST.VMSGRP01*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100)
        ;
        FE0OS-25(); /* Insert DFCAST.VMSGRP01*/
        ;
      else
        ;
        FE0OS-26(); /* Update DFCAST.VMSGRP01*/
      end
    end
    ;
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
    ;
  end
end // end FE0O-16212

// Process MCAT001
Function FE0O-16213()
  ;
  FE0OW00.FE0OW-IXW = 1; /* W01 work index*/
  ;
  while (FE0OW00.FE0OW-IXW <= 12)
    ;
    if (FE0OW00.FE0OW-UPD-GRP[FE0OW-IXW] == "Y") /* Forecast changed*/
      ;
      FE0OS-27(); /* Read DFCAST.VMCAT001*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100)
        ;
        FE0OS-28(); /* Insert DFCAST.VMCAT001*/
        ;
      else
        ;
        FE0OS-29(); /* Update DFCAST.VMCAT001*/
      end
    end
    ;
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
    ;
  end
  ;
end // end FE0O-16213

// Process SWHDR01
Function FE0O-16214()
  ;
  FE0OW00.FE0OW-SWHDR-CSR = "N";
  FE0OW00.FE0OW-IXF = 1;
  ;
  FE0O-16214A(); /* Open 's2' SWHDR01*/
  FE0O-16214B(); /* Fetch 'n2' SWHDR01*/
  ;
  while (FE0OW00.FE0OW-SWHDR-CSR == "N") /* Until end of cursor*/
    FE0O-16214C(); /* Process SWHDR01*/
    FE0O-16214B(); /* Fetch next*/
  end
  ;
  FE0O-16214D(); /* Close 'c2' SWHDR01*/
  ;
end // end FE0O-16214

// Open 's2' SWHDR01 cursor
Function FE0O-16214A()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFQREC empty; /* Clear row storage area*/
  ;
  FFQREC.SY1STNBR = FE0OW01.FE0OW-STY[FE0OW-IXM]; /* Style number*/
  FE0OW00.FE0OW-DES = FE0OW01.FE0OW-DES[FE0OW-IXM];
  FFQREC.SY2CLRID = FE0OW00.SY2CLRID; /* Color id*/
  FFQREC.XDMCD = FE0OW00.XDMCD; /* Dimension code*/
  FFQREC.XWSCD = "01"; /* worksheet type*/
  FFQREC.SY2SSCIN = "*"; /* Safety stock class ind*/
  FFQREC.FFABEGMO = -1; /* fcst begin month*/
  FFQREC.FFQMBYMO = -1; /* main buy month*/
  FFQREC.FFQABYMO = -1; /* actual buy month*/
  FFQREC.ZZZCHGDT = -1; /* change date*/
  FFQREC.ZZZCHGTM = -1; /* change time*/
  ;
  try
    call "IO3810" ("S2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN THE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-16214A

// Fetch 'n2' SWHDR01 cursor
Function FE0O-16214B()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3810" ("N2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* Record not found*/
      ;
      FE0OW00.FE0OW-SWHDR-CSR = "Y";
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-16214B

// Save SWHDR01 records to work
Function FE0O-16214C()
  FE0OW00.FE0OW-SWHDR-WS[FE0OW-IXF] = FFQREC.FFEWSNBR;
  FE0OW00.FE0OW-SWHDR-BEG[FE0OW-IXF] = FFQREC.FFABEGMO;
  FE0OW00.FE0OW-SWHDR-END[FE0OW-IXF] = FFQREC.FFAENDMO;
  ;
  FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF + 1;
  ;
end // end FE0O-16214C

// Close 'c2' SWHDR01 cursor
Function FE0O-16214D()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3810" ("C2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE THE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-16214D

// Process MLTYP01
Function FE0O-16215()
  ;
  FE0OW00.FE0OW-IXW = 1; /* W01 work index*/
  ;
  while (FE0OW00.FE0OW-IXW <= 12)
    ;
    if (FE0OW00.FE0OW-UPD-GRP[FE0OW-IXW] == "Y") /* Forecast changed*/
      ;
      FE0OW00.FE0OW-UPD-GRP[FE0OW-IXW] = "N";
      FE0OS-30(); /* Read DFCAST.VMLTYP01*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100)
        ;
        FE0OS-31(); /* Insert DFCAST.VMLTYP01*/
        ;
      else
        ;
        FE0OS-32(); /* Update DFCAST.VMLTYP01*/
      end
    end
    ;
    FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW + 1;
    ;
  end
  ;
end // end FE0O-16215

// Process map 2
Function FE0O-200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0O-210(); /* Obtain the data to display*/
  ;
  FE0O-220(); /* Format and display the map*/
  ;
  FE0O-230(); /* Check attention identifier*/
  ;
  FE0O-240(); /* Reset fields to normal intensity*/
  ;
  FE0O-250(); /* Verify the entered data*/
  ;
  FE0O-260(); /* Process valid input request*/
  ;
end // end FE0O-200

// Obtain the data to display
Function FE0O-210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OW00.FE0OW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  FE0O-211(); /* Build up temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "210"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FE0OW00.XXXTSPAG = 1; /* Desired page number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-SWR = "N"; /* Request for data switch*/
  FE0OW00.FE0OW-SWF = "Y"; /* Format data switch*/
  FE0OW00.FE0OW-SWO = "Y"; /* data obtained switch*/
  ;
end // end FE0O-210

// Build tsq
Function FE0O-211()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.XXXTSLEN = 3177; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OS-62(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain a list of style groups for the specified category.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-FFSTY-CSR = "N"; /* Initialize end of cursor switch*/
  FE0OW00.FE0OW-IXM = 1; /* Initialize the map index*/
  ;
   /* ----------------------------------------------------------*/
   /* Process the specified style group.*/
   /* ----------------------------------------------------------*/
  ;
  FE0O-2111(); /* Select and open VFFSTY01 with style group*/
  FE0O-2112(); /* Fetch next row in VFFSTY01*/
  ;
  while (FE0OW00.FE0OW-FFSTY-CSR == "N") /* Until end of cursor*/
    ;
    if (FF3REC.SY2FDSMO > FFWREC.FFAENDMO /* 1st sls mo > range end mo*/
     || FF3REC.SY2PDCMO <= FFWREC.FFABEGMO) /* or clsout before rng beg mo*/
      ;
    else
      FE0O-2113(); /* Process each active product*/
    end
    ;
    FE0O-2112(); /* Fetch next row in VFFSTY01*/
    ;
  end
  ;
  FE0O-2114(); /* Close VFFSTY01*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OW00.FE0OW-IXM > 1) /* Page was formatted*/
    ;
    FE0OS-61(); /* Add page to temporary storage*/
    ;
  end
  ;
end // end FE0O-211

// Open 'S2' VFFSTY01
Function FE0O-2111()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF3REC empty; /* Clear row storage area*/
  ;
  FF3REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.XLCCD = "10"; /* Life cycle code*/
  FF3REC.YSMXDV = FFWREC.YSMXDV; /* div group*/
  ;
  ;
  try
    call "IO3990" ("S2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "211"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "2111"; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-2111

// Fetch 'N2' VFFSTY01
Function FE0O-2112()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("N2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FE0OW00.FE0OW-FFSTY-CSR = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "211"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "2112"; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0O-2112

// Process style group list
Function FE0O-2113()
  FE0OW03.SYBSTGNB[FE0OW-IXM] = FF3REC.SYBSTGNB; /* Style group number*/
  FE0OW03.SYBSTGNM[FE0OW-IXM] = FF3REC.SYBSTGNM; /* Style group name*/
  ;
  FE0OW-IXM = FE0OW-IXM + 1;
  ;
  if (FE0OW00.FE0OW-IXM > 17)
    ;
    FE0OS-61(); /* Add page to temporary storage*/
    ;
  end
  ;
end // end FE0O-2113

// Close 'C2' VFFSTY01
Function FE0O-2114()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("C2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "2114"; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0O-2114

// Format & dispaly the map
Function FE0O-220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* no error found*/
    ;
    set FE0OM002 empty;
    ;
    FE0OM002.YPGCD = FFWREC.YPGCD; /* Type group code*/
    FE0OM002.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
    ;
    FE0OM002.XPCCD = FFWREC.XPCCD; /* Category code*/
    FE0OM002.XPCABRV = FFWREC.XPCABRV; /* Category abbreviation*/
    ;
    if (FE0OW00.FE0OW-SWF == "Y") /* Map must be formatted*/
      FE0O-221(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0OM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0OM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FE0OM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FE0OM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0OM002 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FE0OM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0OM002.CAITEM; /* Application data*/
  ;
end // end FE0O-220

// Format the display data
Function FE0O-221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-SWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FE0OW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FE0OW00.XXXTSPAG > FE0OW00.TA5TSQIX) /* Desired greater highest*/
        FE0OW00.XXXTSPAG = FE0OW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      TA5REC.TA5TSQIX = FE0OW00.XXXTSPAG;
      ;
      FE0OS-60(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    FE0OM002.XXXLITPG = "PAGE"; /* "page" literal*/
    set FE0OM002.XXXLITPG skip;
    FE0OM002.XXXTSPAG = FE0OW00.XXXTSPAG; /* Current page*/
    FE0OM002.XXXLITOF = "OF"; /* "of" literal*/
    set FE0OM002.XXXLITOF skip;
    FE0OM002.TA5TSQIX = FE0OW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------*/
   /* Move detail lines*/
   /* ------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-IXM = 1; /* Initialize the map index*/
  ;
  set FE0OM002.FE0OM-SEL[1] cursor;
  ;
  while (FE0OW00.FE0OW-IXM <= 17)
    ;
    if (FE0OW03.SYBSTGNB[FE0OW-IXM] != " ")
      ;
      set FE0OM002.FE0OM-SEL[FE0OW-IXM] normal; /* Unprotect*/
      FE0OM002.SYBSTGNB[FE0OW-IXM] = FE0OW03.SYBSTGNB[FE0OW-IXM];
      FE0OM002.SYBSTGNM[FE0OW-IXM] = FE0OW03.SYBSTGNM[FE0OW-IXM];
      ;
    else
      ;
      set FE0OM002.FE0OM-SEL[FE0OW-IXM] initialAttributes; /* Unprotect*/
      ;
    end
    ;
    FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM + 1;
    ;
  end
  ;
end // end FE0O-221

// Check attention identifier
Function FE0O-230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FE0OW00.FE0OW-SWR == "Y") /* Request for data*/
      set FE0OW03 empty; /* M002 display storage*/
    end
    ;
    FE0OW00.FE0OW-SWF = "Y"; /* Format the map switch*/
    FE0OW00.FE0OW-SWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0OM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (FFWREC.YPGCD != " "
       && FFWREC.XPCCD != " "
       && FFWREC.SYBSTGNB != " ")
        FE0OS-70(); /* Submit ff650d*/
      end
      ;
      FE0O-11100(); /* Purge temporary storage*/
      FFWREC.FFWMODSW = "N"; /* Reset modified flag*/
      XSFFS01(); /* Exit to another application*/
      set FE0OM002.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FE0OM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    if (FFWREC.YPGCD != " "
     && FFWREC.XPCCD != " "
     && FFWREC.SYBSTGNB != " ")
      FE0OS-70(); /* Submit ff650d*/
    end
    ;
    FE0O-11100(); /* Purge temporary storage*/
    FFWREC.FFWMODSW = "N"; /* Reset modified flag*/
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    ;
    FFWREC.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end FE0O-230

// Reset fields to normal
Function FE0O-240()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-IXM = 1;
  ;
  while (FE0OW00.FE0OW-IXM <= 17 /* Until end of page*/
   && FE0OW03.SYBSTGNB[FE0OW-IXM] != " ")
    ;
    set FE0OM002.FE0OM-SEL[FE0OW-IXM] normal;
    ;
    FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM + 1;
    ;
  end
  ;
end // end FE0O-240

// Verify the entered data
Function FE0O-250()
  ;
   /* ------------------------------------------------------------*/
   /* validate scrolling backward and forward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    FE0O-251(); /* Verify scroll request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate 's'election field*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-IXF = 17;
  ;
  while (FE0OW00.FE0OW-IXF >= 1)
    if (FE0OW03.SYBSTGNB[FE0OW-IXF] != " ")
      ;
      if (FE0OM002.FE0OM-SEL[FE0OW-IXF] != " "
       && FE0OM002.FE0OM-SEL[FE0OW-IXF] != "S")
        converseLib.validationFailed(41);
        FFWREC.XXXMODID = "250";
        set FE0OM002.FE0OM-SEL[FE0OW-IXF] cursor, bold;
      end
      ;
      if (FE0OM002.FE0OM-SEL[FE0OW-IXF] == "S")
        FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXF - 1;
        ;
        while (FE0OW00.FE0OW-IXW >= 1)
          ;
          if (FE0OM002.FE0OM-SEL[FE0OW-IXW] > " "
           && FE0OM002.FE0OM-SEL[FE0OW-IXF] > " ")
            converseLib.validationFailed(136);
            FFWREC.XXXMODID = "250";
            set FE0OM002.FE0OM-SEL[FE0OW-IXF] cursor, bold;
            set FE0OM002.FE0OM-SEL[FE0OW-IXW] bold;
          end
          ;
          FE0OW00.FE0OW-IXW = FE0OW00.FE0OW-IXW - 1;
          ;
        end
      end
      ;
    end
    FE0OW00.FE0OW-IXF = FE0OW00.FE0OW-IXF - 1;
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
end // end FE0O-250

// Verify scroll request
Function FE0O-251()
   /* ------------------------------------------------------------*/
   /* Verify PF7 scroll backward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   && FE0OW00.XXXTSPAG == 1) /* no more previous page*/
    converseLib.validationFailed(6);
    FFWREC.XXXMODID = "250";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify PF8 scroll forward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8
   && FE0OW00.XXXTSPAG == FE0OW00.TA5TSQIX) /* no more page*/
    converseLib.validationFailed(7);
    FFWREC.XXXMODID = "250";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error for any detail data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-IXM = 17; /* Initialize display index*/
  ;
  while (FE0OW00.FE0OW-IXM >= 1) /* Until end of the page*/
    ;
    if (FE0OM002.FE0OM-SEL[FE0OW-IXM] > " ")
      ;
      FFWREC.XXXMODID = "251"; /* Module identification*/
      converseLib.validationFailed(5); /* Modification not allowed*/
      set FE0OM002.FE0OM-SEL[FE0OW-IXM] cursor, bold; /* Highlight*/
      ;
    end
    ;
    FE0OW00.FE0OW-IXM = FE0OW00.FE0OW-IXM - 1; /* Decrement disply index*/
    ;
  end
  ;
end // end FE0O-251

// Process valid input request
Function FE0O-260()
  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* Scroll foreward requested*/
    FE0OW00.FE0OW-SWF = "Y"; /* Format data switch*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FE0OW00.XXXTSPAG = FE0OW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FE0OW00.XXXTSPAG = FE0OW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is enter)
    FE0OW00.FE0OW-SWF = "Y"; /* Format data switch*/
  end
  ;
  if (FE0OW00.FE0OW-SWO == "Y" /* Indicate data was obtained*/
   && "S" in FE0OM002.FE0OM-SEL) /* Selection exist*/
    ;
    FE0OW00.FE0OW-IXF = sysVar.arrayIndex; /* save the position*/
    ;
    if (FE0OM002.SYBSTGNB[sysVar.arrayIndex] != FFWREC.SYBSTGNB /* change stygrp*/
     && FFWREC.SYBSTGNB != " ")                                
      FE0OS-70(); /* submit ff650d*/
    end
    ;
    FFWREC.SYBSTGNB = FE0OM002.SYBSTGNB[FE0OW-IXF];
    FFWREC.SYBSTGNM = FE0OM002.SYBSTGNM[FE0OW-IXF];
    ;
    FE0OW00.FE0OW-SWF = "N"; /* Format data switch*/
    FE0OW00.FE0OW-SWR = "Y"; /* Request for data switch*/
    FE0OW00.FE0OW-SWO = "N"; /* Data obtained switch*/
    FE0OW00.FE0OW-SWU = "N"; /* Data changed switch*/
    FE0OW00.FE0OW-MST = "Y"; /* Reset mstr saved switch*/
    FFWREC.FFWMODSW = "N"; /* Reset data modified switch*/
    ;
    FE0OW00.FE0OW-MAP = 1; /* Indicate 1st map*/
    set FE0OM001.FE0OM-BEG-MO cursor; /* Set cursor on 1st map*/
    ;
  end
  ;
end // end FE0O-260

// Update temporary storage page
Function FE0OS-01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FE0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-01

// Read temporary storage page
Function FE0OS-02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW01.XXXTSLEN = FE0OW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FE0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-02

// Extract fcst data from W01
Function FE0OS-03()
  if (FE0OW-IXM == 1) /* 1st line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-1;
  end
  ;
  if (FE0OW-IXM == 2) /* 2nd line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-2;
  end
  ;
  if (FE0OW-IXM == 3) /* 3rd line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-3;
  end
  ;
  if (FE0OW-IXM == 4) /* 4th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-4;
  end
  ;
  if (FE0OW-IXM == 5) /* 5th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-5;
  end
  ;
  if (FE0OW-IXM == 6) /* 6th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-6;
  end
  ;
  if (FE0OW-IXM == 7) /* 7th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-7;
  end
  ;
  if (FE0OW-IXM == 8) /* 8th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-8;
  end
  ;
  if (FE0OW-IXM == 9) /* 9th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-9;
  end
  ;
  if (FE0OW-IXM == 10) /* 10th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-10;
  end
  ;
  if (FE0OW-IXM == 11) /* 11th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-11;
  end
  ;
  if (FE0OW-IXM == 12) /* 12th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-12;
  end
  ;
  if (FE0OW-IXM == 13) /* 13th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-13;
  end
  ;
  if (FE0OW-IXM == 14) /* 14th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-14;
  end
  ;
  if (FE0OW-IXM == 15) /* 15th line*/
    FE0OW-FCST-WORK = FE0OW01.FE0OW-FCST-LINE-15;
  end
  ;
end // end FE0OS-03

// Move detail fcst qtys to M001
Function FE0OS-04()
  if (FE0OW-IXM == 1) /* 1st line*/
    ;
    FE0OM001.FE0OM-FCST-1[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-1[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-1[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 2) /* 2nd line*/
    ;
    FE0OM001.FE0OM-FCST-2[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-2[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-2[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 3) /* 3rd line*/
    ;
    FE0OM001.FE0OM-FCST-3[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-3[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-3[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 4) /* 4th line*/
    ;
    FE0OM001.FE0OM-FCST-4[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-4[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-4[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 5) /* 5th line*/
    ;
    FE0OM001.FE0OM-FCST-5[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-5[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-5[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 6) /* 6th line*/
    ;
    FE0OM001.FE0OM-FCST-6[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-6[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-6[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 7) /* 7th line*/
    ;
    FE0OM001.FE0OM-FCST-7[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-7[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-7[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 8) /* 8th line*/
    ;
    FE0OM001.FE0OM-FCST-8[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-8[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-8[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 9) /* 9th line*/
    ;
    FE0OM001.FE0OM-FCST-9[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-9[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-9[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 10) /* 10th line*/
    ;
    FE0OM001.FE0OM-FCST-10[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-10[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-10[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 11) /* 11th line*/
    ;
    FE0OM001.FE0OM-FCST-11[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-11[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-11[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 12) /* 12th line*/
    ;
    FE0OM001.FE0OM-FCST-12[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-12[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-12[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 13) /* 13th line*/
    ;
    FE0OM001.FE0OM-FCST-13[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-13[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-13[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 14) /* 14th line*/
    ;
    FE0OM001.FE0OM-FCST-14[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-14[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-14[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 15) /* 15th line*/
    ;
    FE0OM001.FE0OM-FCST-15[FE0OW-IXF] = FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW];
    ;
    if (FE0OW00.FE0OW-HDG[FE0OW-IXW] < FE0OW01.FE0OW-1SD[FE0OW-IXM]
     || FE0OW00.FE0OW-HDG[FE0OW-IXW] >= FE0OW01.FE0OW-COD[FE0OW-IXM])
                                    /* before intro date or after c/o date*/
      set FE0OM001.FE0OM-FCST-15[FE0OW-IXF] skip; /* visible*/
    else
      set FE0OM001.FE0OM-FCST-15[FE0OW-IXF] normal; /* Unprotected*/
    end
    ;
  end
  ;
end // end FE0OS-04

// Move total fcst qtys to M001
Function FE0OS-05()
  FFXREC.FFXNUMB = FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW];
  XSFFS10(); /* Convert the value from NUM to CHAR*/
  ;
  if (FE0OW-IXM == 1) /* 1st line*/
    ;
    FE0OM001.FE0OM-FCST-1[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-1[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 2) /* 2nd line*/
    ;
    FE0OM001.FE0OM-FCST-2[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-2[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 3) /* 3rd line*/
    ;
    FE0OM001.FE0OM-FCST-3[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-3[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 4) /* 4th line*/
    ;
    FE0OM001.FE0OM-FCST-4[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-4[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 5) /* 5th line*/
    ;
    FE0OM001.FE0OM-FCST-5[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-5[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 6) /* 6th line*/
    ;
    FE0OM001.FE0OM-FCST-6[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-6[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 7) /* 7th line*/
    ;
    FE0OM001.FE0OM-FCST-7[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-7[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 8) /* 8th line*/
    ;
    FE0OM001.FE0OM-FCST-8[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-8[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 9) /* 9th line*/
    ;
    FE0OM001.FE0OM-FCST-9[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-9[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 10) /* 10th line*/
    ;
    FE0OM001.FE0OM-FCST-10[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-10[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 11) /* 11th line*/
    ;
    FE0OM001.FE0OM-FCST-11[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-11[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 12) /* 12th line*/
    ;
    FE0OM001.FE0OM-FCST-12[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-12[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 13) /* 13th line*/
    ;
    FE0OM001.FE0OM-FCST-13[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-13[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 14) /* 14th line*/
    ;
    FE0OM001.FE0OM-FCST-14[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-14[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 15) /* 15th line*/
    ;
    FE0OM001.FE0OM-FCST-15[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-15[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
  if (FE0OW-IXM == 16) /* 16th line*/
    ;
    FE0OM001.FE0OM-FCST-16[FE0OW-IXF] = FFXREC.FFXCHAR;
    set FE0OM001.FE0OM-FCST-16[FE0OW-IXF] skip; /* visible*/
    ;
  end
  ;
end // end FE0OS-05

// Check modified fcst field
Function FE0OS-06()
  FE0OW00.FE0OW-ERR = "N"; /* Error switch*/
  ;
  if (FE0OW00.FE0OW-MAP-FCST[FE0OW-IXF] != 
  FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW]
  )
    FFWREC.XXXMODID = "S06"; /* Module identification*/
    converseLib.validationFailed(5); /* Modifications not allowed*/
    FE0OW00.FE0OW-ERR = "Y";
    ;
  end
  ;
  if (FE0OW-IXM == 1) /* 1st line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-1[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 2) /* 2nd line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-2[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 3) /* 3rd line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-3[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 4) /* 4th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-4[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 5) /* 5th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-5[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 6) /* 6th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-6[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 7) /* 7th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-7[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 8) /* 8th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-8[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 9) /* 9th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-9[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 10) /* 10th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-10[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 11) /* 11th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-11[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 12) /* 12th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-12[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 13) /* 13th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-13[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 14) /* 14th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-14[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
  if (FE0OW-IXM == 15) /* 15th line*/
    ;
    if (FE0OW00.FE0OW-ERR == "Y") /* Error occurred*/
      set FE0OM001.FE0OM-FCST-15[FE0OW-IXF] cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
end // end FE0OS-06

// Extract fcst data from M001
Function FE0OS-07()
  if (FE0OW-IXM == 1) /* 1st line*/
    move FE0OM001.FE0OM-FCST-1 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 2) /* 2nd line*/
    move FE0OM001.FE0OM-FCST-2 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 3) /* 3rd line*/
    move FE0OM001.FE0OM-FCST-3 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 4) /* 4th line*/
    move FE0OM001.FE0OM-FCST-4 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 5) /* 5th line*/
    move FE0OM001.FE0OM-FCST-5 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 6) /* 6th line*/
    move FE0OM001.FE0OM-FCST-6 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 7) /* 7th line*/
    move FE0OM001.FE0OM-FCST-7 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 8) /* 8th line*/
    move FE0OM001.FE0OM-FCST-8 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 9) /* 9th line*/
    move FE0OM001.FE0OM-FCST-9 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 10) /* 10th line*/
    move FE0OM001.FE0OM-FCST-10 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 11) /* 11th line*/
    move FE0OM001.FE0OM-FCST-11 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 12) /* 12th line*/
    move FE0OM001.FE0OM-FCST-12 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 13) /* 13th line*/
    move FE0OM001.FE0OM-FCST-13 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 14) /* 14th line*/
    move FE0OM001.FE0OM-FCST-14 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
  if (FE0OW-IXM == 15) /* 15th line*/
    move FE0OM001.FE0OM-FCST-15 to FE0OW00.FE0OW-MAP-FCST[1] for all;
  end
  ;
end // end FE0OS-07

// Process updated fcst fields
Function FE0OS-08()
  ;
  if (FE0OW00.FE0OW-MAP-FCST[FE0OW-IXF] != 
  FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW])
    ;
    FE0OW00.FE0OW-MST = "N"; /* Reset master fcst saved switch*/
    ;
    FFXREC.FFXCHAR = FE0OW00.FE0OW-MAP-FCST[FE0OW-IXF];
    ;
    XSFFS11(); /* Translate value format*/
    XSFFS10(); /* Rounding the updated field*/
    ;
    FE0OW00.FE0OW-OLD-FCS = FE0OW00.FE0OW-FCS[FE0OW-IXW]; /* old fcst*/
    FE0OW00.FE0OW-FCS[FE0OW-IXW] = FFXREC.FFXNUMB; /* fcst qty*/
    FE0OW00.FE0OW-FCS-CHAR[FE0OW-IXW] = FFXREC.FFXCHAR; /* fcs in 1000*/
    ;
    FE0OS-09(); /* Update totals*/
    ;
    FE0OW00.FE0OW-FCH[FE0OW-IXW] = "Y"; /* chng flag*/
    FFWREC.FFWMODSW = "Y"; /* Indicate data modified*/
    FE0OW00.FE0OW-SWF = "Y"; /* ; /* Format data switch*/
    FE0OW00.FE0OW-SWU = "Y"; /* Storage update switch*/
    ;
  end
  ;
end // end FE0OS-08

// Update the totals
Function FE0OS-09()
   /* -----------------------------------------------------------*/
   /* Monthly style group total*/
   /* -----------------------------------------------------------*/
  ;
  FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW] = FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW] -                                FE0OW00.FE0OW-OLD-FCS +                                FE0OW00.FE0OW-FCS[FE0OW-IXW];
   /* -----------------------------------------------------------*/
   /* style color total*/
   /* -----------------------------------------------------------*/
  ;
  FE0OW01.FE0OW-CLR-TOT[FE0OW-IXM] = FE0OW01.FE0OW-CLR-TOT[FE0OW-IXM] -                                FE0OW00.FE0OW-OLD-FCS +                                FE0OW00.FE0OW-FCS[FE0OW-IXW];
  ;
end // end FE0OS-09

// Save changes to W01
Function FE0OS-10()
  if (FE0OW00.FE0OW-IXM == 1) /* 1st line*/
    FE0OW01.FE0OW-FCST-LINE-1 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 2) /* 2nd line*/
    FE0OW01.FE0OW-FCST-LINE-2 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 3) /* 3rd line*/
    FE0OW01.FE0OW-FCST-LINE-3 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 4) /* 4th line*/
    FE0OW01.FE0OW-FCST-LINE-4 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 5) /* 5th line*/
    FE0OW01.FE0OW-FCST-LINE-5 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 6) /* 6th line*/
    FE0OW01.FE0OW-FCST-LINE-6 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 7) /* 7th line*/
    FE0OW01.FE0OW-FCST-LINE-7 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 8) /* 8th line*/
    FE0OW01.FE0OW-FCST-LINE-8 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 9) /* 9th line*/
    FE0OW01.FE0OW-FCST-LINE-9 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 10) /* 10th line*/
    FE0OW01.FE0OW-FCST-LINE-10 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 11) /* 11th line*/
    FE0OW01.FE0OW-FCST-LINE-11 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 12) /* 12th line*/
    FE0OW01.FE0OW-FCST-LINE-12 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 13) /* 13th line*/
    FE0OW01.FE0OW-FCST-LINE-13 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 14) /* 14th line*/
    FE0OW01.FE0OW-FCST-LINE-14 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
  if (FE0OW00.FE0OW-IXM == 15) /* 15th line*/
    FE0OW01.FE0OW-FCST-LINE-15 = FE0OW00.FE0OW-FCST-WORK;
  end
  ;
end // end FE0OS-10

// Sel & open csr for VFFXRF01
Function FE0OS-11()
  ;
  set FF2REC empty; /* Clear the storage row*/
  ;
  FF2REC.XPCCD = FE0OM001.XPCCD; /* Category code*/
  FF2REC.YPGCD = FE0OM001.YPGCD; /* Type group code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/
  FF2REC.XPLCD = "*"; /* Product line code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S11"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-11

// Fetch next row in VFFXRF01
Function FE0OS-12()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* or end of select set*/
      converseLib.validationFailed(203); /* Indicate inconsistent*/
      FFWREC.XXXMODID = "S12"; /* Module identification*/
      set FE0OM001.YPGCD cursor, bold; /* Highlight*/
      set FE0OM001.XPCCD bold; /* Highlight*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S12"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-12

// Close the csr for VFFXRF01
Function FE0OS-13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S13"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-13

// Read MSTY001
Function FE0OS-20()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF9REC empty; /* Clear row storage area*/
  ;
  FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FE0OW01.FE0OW-STY[FE0OW-IXM]; /* Style number*/
  FE0OW00.FE0OW-DES = FE0OW01.FE0OW-DES[FE0OW-IXM];
  FF9REC.SY2CLRID = FE0OW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FE0OW00.XDMCD; /* Dimension code*/
  ;
  FF9REC.FF4FCTMO = FE0OW00.FE0OW-HDG[FE0OW-IXW]; /* Fcst month*/
  ;
  try
    call "IO3740" ("S ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S20"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-20

// Update DFCAST.VMSTY001
Function FE0OS-22()
  ;
  FF9REC.FF6SLFCT = FE0OW00.FE0OW-FCS[FE0OW-IXW];
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3740" ("U ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S22"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-22

// Insert MSTY001
Function FE0OS-23()
  set FF9REC empty;
  ;
  FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF9REC.FF6SLFCT = FE0OW00.FE0OW-FCS[FE0OW-IXW]; /* prod forecast*/
  ;
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FE0OW01.FE0OW-STY[FE0OW-IXM]; /* Style*/
  FE0OW00.FE0OW-DES = FE0OW01.FE0OW-DES[FE0OW-IXM];
  FF9REC.SY2CLRID = FE0OW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FE0OW00.XDMCD; /* Dimension code*/
  FF9REC.FF8DEVFL = FE0OW01.FF8DEVFL[FE0OW-IXM]; /* development flag*/
  ;
  FF9REC.FF4FCTMO = FE0OW00.FE0OW-HDG[FE0OW-IXW]; /* Fcst month*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF9REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3740" ("A ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S23"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-23

// Read MSGRP01
Function FE0OS-24()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF8REC empty; /* Clear row storage area*/
  ;
  FF8REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF8REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF8REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF8REC.FF4FCTMO = FE0OW00.FE0OW-HDG[FE0OW-IXW]; /* Fcst month*/
  ;
  try
    call "IO3730" ("S ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S24"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-24

// Insert MSGRP01
Function FE0OS-25()
  ;
  set FF8REC empty;
  ;
  FF8REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF8REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF8REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF8REC.FF4FCTMO = FE0OW00.FE0OW-HDG[FE0OW-IXW]; /* Fcst month*/
  FF8REC.FF6SLFCT = FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW]; /* sls fcs*/
  FF8REC.FF8DEVFL = "N"; /* development flag*/
  ;
  FE0OW00.FE0OW-CAT-VAR = FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW]; /* new varnce*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF8REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF8REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF8REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3730" ("A ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S25"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-25

// Update MSGRP01
Function FE0OS-26()
  FE0OW00.FE0OW-CAT-VAR[FE0OW-IXW] = FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW] -                                    FF8REC.FF6SLFCT;
  FE0OW00.FE0OW-LIN-VAR[FE0OW-IXW] = FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW] -                                    FF8REC.FF6SLFCT;
  ;
  FF8REC.FF6SLFCT = FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW]; /* move new value*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF8REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF8REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3730" ("U ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S26"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-26


// Read MCAT001
Function FE0OS-27()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* category code*/
  FF7REC.FF4FCTMO = FE0OW00.FE0OW-HDG[FE0OW-IXW]; /* Fcst month*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S27"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-27


// Insert MCAT001
Function FE0OS-28()
  ;
  FF7REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF7REC.FF4FCTMO = FE0OW00.FE0OW-HDG[FE0OW-IXW]; /* Fcst month*/
  ;
  FF7REC.FF6SLFCT = FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW]; /* Sygrp tot*/
  FF7REC.FF6DMFCT = FE0OW00.FE0OW-CAT-DMD[FE0OW-IXW]; /* demenad fcst*/
  ;
  if (FF7REC.FF6SLFCT != 0
   && FF7REC.FF6DMFCT != 0)
    FF7REC.FF7FLLRT = mathLib.round((FF7REC.FF6SLFCT * 100) / FF7REC.FF6DMFCT, -mathLib.decimals(FF7REC.FF7FLLRT));
  else
    if (FFWREC.YPGCD == "01") /* if inlines*/
      FF7REC.FF7FLLRT = 92;
    else
      if (FFWREC.YPGCD == "02") /* if makeups*/
        FF7REC.FF7FLLRT = 100;
      end
    end
  end
  ;
  if (FFWREC.YPGCD == "01") /* if inlines*/
    FF7REC.FF7FURAT = 0;
  else
    if (FFWREC.YPGCD == "02") /* if makeups*/
      FF7REC.FF7FURAT = 100;
    end
  end
  ;
  FF7REC.FF7FRZFL = "N"; /* freeze flag*/
  FF7REC.FF7CBYFL = "N"; /* cat buy flag*/
  FF7REC.FF7PBYFL = "N"; /* prod buy flag*/
  FF7REC.FF7CATFL = "N"; /* cat update flag*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF7REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3700" ("A ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S28"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-28

// Update MCAT001
Function FE0OS-29()
  ;
  FF7REC.FF6SLFCT = FF7REC.FF6SLFCT +                   FE0OW00.FE0OW-CAT-VAR[FE0OW-IXW]; /* Add cat variance*/
  FF7REC.FF6DMFCT = FF7REC.FF6DMFCT +                   FE0OW00.FE0OW-DMDVAR[FE0OW-IXW]; /* Add demand variance*/
  ;
  if (FF7REC.FF6SLFCT < 0)
    FF7REC.FF6SLFCT = 0;
  end
  ;
  if (FF7REC.FF6DMFCT < 0)
    FF7REC.FF6DMFCT = 0;
  end
  ;
  if (FF7REC.FF6SLFCT > 0
   && FF7REC.FF6DMFCT > 0)
    FF7REC.FF7FLLRT = mathLib.round((FF7REC.FF6SLFCT * 100) / FF7REC.FF6DMFCT, -mathLib.decimals(FF7REC.FF7FLLRT));
  end
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S29"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-29

// Read MLTYP01
Function FE0OS-30()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF6REC empty; /* Clear row storage area*/
  ;
  FF6REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF6REC.XPLCD = FFWREC.XPLCD; /* category code*/
  FF6REC.FF4FCTMO = FE0OW00.FE0OW-HDG[FE0OW-IXW]; /* Fcst month*/
  ;
  try
    call "IO3750" ("S ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S30"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-30

// Insert MLTYP01
Function FE0OS-31()
  ;
  FF6REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF6REC.XPLCD = FFWREC.XPLCD; /* Category code*/
  FF6REC.FF4FCTMO = FE0OW00.FE0OW-HDG[FE0OW-IXW]; /* Fcst month*/
  ;
  FF6REC.FF6SLFCT = FE0OW00.FE0OW-MON-TOT-FCS[FE0OW-IXW]; /* Sygrp tot*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF6REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF6REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF6REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  ;
  try
    call "IO3750" ("A ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S31"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-31

// Update MLTYP01
Function FE0OS-32()
  ;
  FF6REC.FF6SLFCT = FF6REC.FF6SLFCT +   FE0OW00.FE0OW-LIN-VAR[FE0OW-IXW]; /* Add cat variance*/
  FF6REC.FF6DMFCT = FF6REC.FF6DMFCT +   FE0OW00.FE0OW-DMDVAR[FE0OW-IXW]; /* Add demand variance*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF6REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF6REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3750" ("U ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S32"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-32

// Read TSQ page to W03
Function FE0OS-60()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW03.XXXTSLEN = FE0OW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FE0OW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S60"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-60

// Add W03 to TSQ
Function FE0OS-61()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0OW03.XXXTSLEN = FE0OW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  if (FE0OW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/
    ;
    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/
    ;
  end
  ;
  try
    call "TA0050" (FE0OW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FE0OW03 empty; /* M001 display storage*/
    FE0OW00.FE0OW-FCST-WORK = " ";
                                   /* Initialize the forecast qty field*/
    ;
    FE0OW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FE0OW00.FE0OW-IXM = 1; /* Display line number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S61"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-61

// Purge W03 TSQ page
Function FE0OS-62()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0OW03 empty; /* m002 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FE0OW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FE0OW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S62"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0OS-62

// Submit FF650d
Function FE0OS-70()
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FE0OS-71(); /* format production JCL*/
    else
      FE0OS-72(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "S70"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FE0OS-70

// Format production JCL
Function FE0OS-71()
   /* ------------------------------------------------------------*/
   /* Submit batch subroutine to update the month master tables.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0OW02 empty; /* Subroutine parameters*/
  ;
  FE0OW02.XPCCD = FFWREC.XPCCD; /* Product category*/
  FE0OW02.YPGCD = FFWREC.YPGCD; /* Product type group*/
  FE0OW02.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FE0OT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the worksheet numbers in the parameters statement.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0OW02.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0OT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FE0OT.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0OT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Submit JCL only*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Background Job Subroutine*/
  ;
   /* ------------------------------------------------------------*/
   /* If any error, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD >= "2")        /* or unexpected return code*/
    ;
    FFWREC.XXXMODID = "S71"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end FE0OS-71

// Format test JCL
Function FE0OS-72()
   /* ------------------------------------------------------------*/
   /* Submit batch subroutine to update the month master tables.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0OW02 empty; /* Subroutine parameters*/
  ;
  FE0OW02.XPCCD = FFWREC.XPCCD; /* Product category*/
  FE0OW02.YPGCD = FFWREC.YPGCD; /* Product type group*/
  FE0OW02.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FE0OT5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the worksheet numbers in the parameters statement.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0OW02.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0OT5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FE0OT5O.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0OT5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Submit JCL only*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Background Job Subroutine*/
  ;
   /* ------------------------------------------------------------*/
   /* If any error, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD >= "2")        /* or unexpected return code*/
    ;
    FFWREC.XXXMODID = "S72"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end FE0OS-72

//*** RECORD=FE0OW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0OW00 type basicRecord
  10 FE0OW-MAP FE0OW-MAP ; 
  10 FE0OW-IXM FE0OW-IXM ; 
  10 FE0OW-IXW FE0OW-IXW ; 
  10 FE0OW-IXF FE0OW-IXF ; 
  10 FE0OWDVAR FE0OWDVAR ; 
  10 FE0OWDOLD FE0OWDOLD ; 
  10 FE0OW-FFSTY-CSR FE0OW-FFSTY-CSR ; 
  10 FE0OW-MSTY-CSR FE0OW-MSTY-CSR ; 
  10 FE0OW-SWHDR-CSR FE0OW-SWHDR-CSR ; 
  10 FE0OW-SWF FE0OW-SWF ; 
  10 FE0OW-SWO FE0OW-SWO ; 
  10 FE0OW-SWR FE0OW-SWR ; 
  10 FE0OW-SWU FE0OW-SWU ; 
  10 FE0OW-MST FE0OW-MST ; 
  10 FE0OW-ERR FE0OW-ERR ; 
  10 FE0OW-WARN FE0OW-WARN ; 
  10 FE0OW-FOUND FE0OW-FOUND ; 
  10 FE0OW-UPD-GRP FE0OW-UPD-GRP [12] ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FE0OW-PAG FE0OW-PAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FE0OW-RIG FE0OW-RIG ; 
  10 FE0OW-LEF FE0OW-LEF ; 
  10 FE0OW-GND-TOT FE0OW-GND-TOT ; 
  10 FE0OW-DAT FE0OW-DAT ; 
    15 FE0OW-DCC FE0OW-DCC ; 
    15 FE0OW-DYM FE0OW-DYM ; 
      20 FE0OW-DYY FE0OW-DYY ; 
      20 FE0OW-DMM FE0OW-DMM ; 
  10 FE0OW-HDG FE0OW-HDG [12] ; 
    15 FE0OW-HCC FE0OW-HCC ; 
    15 FE0OW-HYM FE0OW-HYM ; 
  10 FE0OW-1SD FE0OW-1SD ; 
    15 FE0OW-1SC FE0OW-1SC ; 
    15 FE0OW-1SM FE0OW-1SM ; 
  10 FE0OW-COD FE0OW-COD ; 
    15 FE0OW-COC FE0OW-COC ; 
    15 FE0OW-COM FE0OW-COM ; 
  10 FE0OW-DESC FE0OW-DESC ; 
    15 SYBSTGNB SYBSTGNB ; 
    15 * char(1) ; 
    15 FE0OW-DES FE0OW-DES ; 
      20 SY2CLRID SY2CLRID ; 
      20 * char(1) ; 
      20 XDMCD XDMCD ; 
      20 * char(1) ; 
      20 SY2CLRAB SY2CLRAB ; 
  10 FE0OW-MON-TOT-FCS FE0OW-MON-TOT-FCS [12] ; 
  10 FE0OW-OLD-FCS FE0OW-OLD-FCS ; 
  10 FE0OW-BMO FE0OW-BMO ; 
  10 FE0OW-WBD FE0OW-WBD ; 
    15 * num(3) ; 
    15 FE0OW-BCC FE0OW-BCC ; 
    15 FE0OW-BYM FE0OW-BYM ; 
      20 FE0OW-BYY FE0OW-BYY ; 
      20 FE0OW-BMM FE0OW-BMM ; 
  10 FE0OW-EMO FE0OW-EMO ; 
  10 FE0OW-WED FE0OW-WED ; 
    15 * num(3) ; 
    15 FE0OW-ECC FE0OW-ECC ; 
    15 FE0OW-EYM FE0OW-EYM ; 
      20 FE0OW-EYY FE0OW-EYY ; 
      20 FE0OW-EMM FE0OW-EMM ; 
  10 FE0OW-WDT FE0OW-WDT ; 
    15 * num(3) ; 
    15 FE0OW-WCC FE0OW-WCC ; 
    15 FE0OW-WYM FE0OW-WYM ; 
      20 FE0OW-WYY FE0OW-WYY ; 
      20 FE0OW-WMM FE0OW-WMM ; 
  10 FE0OW-FCST-WORK FE0OW-FCST-WORK ; 
    15 FE0OW-FCS FE0OW-FCS [12] ; 
    15 FE0OW-FCS-CHAR FE0OW-FCS-CHAR [12] ; 
    15 FE0OW-FCH FE0OW-FCH [12] ; 
    15 FE0OW-CNT FE0OW-CNT [12] ; 
  10 FE0OW-MAP-FCST FE0OW-MAP-FCST [6] ; 
  10 FE0OW-CAT-VAR FE0OW-CAT-VAR [12] ; 
  10 FE0OW-CAT-DMD FE0OW-CAT-DMD [12] ; 
  10 FE0OW-LIN-VAR FE0OW-LIN-VAR [12] ; 
  10 FE0OW-DMDVAR FE0OW-DMDVAR [12] ; 
  10 FE0OW-RATIO FE0OW-RATIO ; 
  10 FE0OW-SWHDR-WS FE0OW-SWHDR-WS [12] ; 
  10 FE0OW-SWHDR-BEG FE0OW-SWHDR-BEG [12] ; 
  10 FE0OW-SWHDR-END FE0OW-SWHDR-END [12] ; 
end // end FE0OW00

//*** RECORD=FE0OW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FE0OW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(3177) ; 
    10 FE0OW-BMO FE0OW-BMO ; 
      15 FE0OW-BCC FE0OW-BCC ; 
      15 FE0OM-BEG-MO FE0OM-BEG-MO ; 
    10 FE0OW-EMO FE0OW-EMO ; 
      15 FE0OW-ECC FE0OW-ECC ; 
      15 FE0OM-END-MO FE0OM-END-MO ; 
    10 FE0OW-STY FE0OW-STY [15] ; 
    10 FE0OW-DES FE0OW-DES [15] ; 
    10 FE0OW-1SD FE0OW-1SD [15] ; 
    10 FE0OW-COD FE0OW-COD [15] ; 
    10 FF8DEVFL FF8DEVFL [15] ; 
    10 FE0OW-CLR-TOT FE0OW-CLR-TOT [15] ; 
    10 FE0OW-FCST-LINE-1 FE0OW-FCST-LINE-1 ; 
    10 FE0OW-FCST-LINE-2 FE0OW-FCST-LINE-2 ; 
    10 FE0OW-FCST-LINE-3 FE0OW-FCST-LINE-3 ; 
    10 FE0OW-FCST-LINE-4 FE0OW-FCST-LINE-4 ; 
    10 FE0OW-FCST-LINE-5 FE0OW-FCST-LINE-5 ; 
    10 FE0OW-FCST-LINE-6 FE0OW-FCST-LINE-6 ; 
    10 FE0OW-FCST-LINE-7 FE0OW-FCST-LINE-7 ; 
    10 FE0OW-FCST-LINE-8 FE0OW-FCST-LINE-8 ; 
    10 FE0OW-FCST-LINE-9 FE0OW-FCST-LINE-9 ; 
    10 FE0OW-FCST-LINE-10 FE0OW-FCST-LINE-10 ; 
    10 FE0OW-FCST-LINE-11 FE0OW-FCST-LINE-11 ; 
    10 FE0OW-FCST-LINE-12 FE0OW-FCST-LINE-12 ; 
    10 FE0OW-FCST-LINE-13 FE0OW-FCST-LINE-13 ; 
    10 FE0OW-FCST-LINE-14 FE0OW-FCST-LINE-14 ; 
    10 FE0OW-FCST-LINE-15 FE0OW-FCST-LINE-15 ; 
end // end FE0OW01

//*** RECORD=FE0OW02 ****
// ---------------------------------------------------------
// Parameters passed to FF650D - Update Month Master Tables.
// ---------------------------------------------------------
// ***********************
Record FE0OW02 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPCCD XPCCD ; 
    10 YPGCD YPGCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 * char(59) ; 
end // end FE0OW02

//*** RECORD=FE0OW03 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record FE0OW03 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(3177) ; 
    10 SYBSTGNB SYBSTGNB [17] ; 
    10 SYBSTGNM SYBSTGNM [17] ; 
    10 * char(2871) ; 
end // end FE0OW03

// Beginning date of the range
DataItem FE0OM-BEG-MO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Ending date of the range
DataItem FE0OM-END-MO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Century
DataItem FE0OW-1SC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First domestic sales date
DataItem FE0OW-1SD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First domestic sales month
DataItem FE0OW-1SM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem FE0OW-BCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// month
DataItem FE0OW-BMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning date of the range
DataItem FE0OW-BMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year/month
DataItem FE0OW-BYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FE0OW-BYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Brand new category demand tot
DataItem FE0OW-CAT-DMD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Variance at category level
DataItem FE0OW-CAT-VAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style color total
DataItem FE0OW-CLR-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change count
DataItem FE0OW-CNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FE0OW-COC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Projected dom closeout date
DataItem FE0OW-COD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Projected dom closeout month
DataItem FE0OW-COM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area
DataItem FE0OW-DAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century work area
DataItem FE0OW-DCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style group/style color desc
DataItem FE0OW-DES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style group/style number
DataItem FE0OW-DESC char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Demand variance
DataItem FE0OW-DMDVAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM work area
DataItem FE0OW-DMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMM work area
DataItem FE0OW-DYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY work area
DataItem FE0OW-DYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FE0OW-ECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FE0OW-EMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending date of the range
DataItem FE0OW-EMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Error occured switch
DataItem FE0OW-ERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year/month
DataItem FE0OW-EYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FE0OW-EYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast changed flag
DataItem FE0OW-FCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast enter & display field
DataItem FE0OW-FCS-CHAR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-1 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-10 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-11 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-12 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-13 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-14 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-15 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-2 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-3 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-4 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-5 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-6 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-7 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-8 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FE0OW-FCST-LINE-9 char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0OW-FCST-WORK char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VFFXRF01
DataItem FE0OW-FFSTY-CSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SWHDR found switch
DataItem FE0OW-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total field work area
DataItem FE0OW-GND-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading work area
DataItem FE0OW-HDG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading century work area
DataItem FE0OW-HCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// Heading YYMM work area
DataItem FE0OW-HYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem FE0OW-IXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FE0OW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FE0OW-IXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Scroll right index
DataItem FE0OW-LEF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Variance at line level
DataItem FE0OW-LIN-VAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map indicator
DataItem FE0OW-MAP num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map froecst qtys
DataItem FE0OW-MAP-FCST char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Month total work area
DataItem FE0OW-MON-TOT-FCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Master fcst saved switch
DataItem FE0OW-MST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VMSTY001
DataItem FE0OW-MSTY-CSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Old fcst work area
DataItem FE0OW-OLD-FCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage page
DataItem FE0OW-PAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0OW-RATIO decimal(7,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Scroll left index
DataItem FE0OW-RIG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style group/style number
DataItem FE0OW-STY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0OW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FF_FCST_BMO
DataItem FE0OW-SWHDR-BEG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// End of cursor for VSWHDR01
DataItem FE0OW-SWHDR-CSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FF_FCST_XMO
DataItem FE0OW-SWHDR-END int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// FF_WRKSHT_NBR
DataItem FE0OW-SWHDR-WS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data obtained switch
DataItem FE0OW-SWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FE0OW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FE0OW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update style group switch
DataItem FE0OW-UPD-GRP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error occured switch
DataItem FE0OW-WARN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0OW-WBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FE0OW-WCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0OW-WDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0OW-WED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FE0OW-WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year/month
DataItem FE0OW-WYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FE0OW-WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Old demand value
DataItem FE0OWDOLD int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Demand variance
DataItem FE0OWDVAR int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

