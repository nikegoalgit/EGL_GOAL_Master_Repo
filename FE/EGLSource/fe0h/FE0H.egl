package fe0h;

import corpcom1.CACHGFL;
import corpcom2.XX0XW01;
import corpcom3.XPFF001;
import corpcom3.XPTA0P;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS50;
import corpcom4.XSFFS52;
import corpcom4.XSNOWAY;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.ZZZSTM;
import corpx1.XDMCD;
import corpx1.XLCCD;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XWSCD;
import corpx2.XXXUSRID;
import corpy2.YPGCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ff.common.*;
import ff.common.FFZINDMO;
import fg.common.FG4BALSH;
import fh.common.FH1ALQTY;
import fh.common.FH1PAQTY;
import fh.common.FH3REC;
import fh.common.FH5MSHQT;
import fh.common.FH6REC;
import fh.common.FHBREC;
import pg.common.PG7MAXPR;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SY2SSCIN;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TA9REC;
import ta.common.TAEDESC2;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FE0H ****
// This user can only enter this application by, first, going
// through FE0G and selecting a target worksheet.
// 
// This application displays demand, forecast and inventory
// information and allows users to alter some figures to come
// up with a forecasted quantity to buy for a specific product.
// 
// The user may scroll forward or back to view each of the
// worksheet pages or scroll left and right to see various
// forecast months.
// 
// The user may save it by pressing PF13, print it by pressing
// PF14 or exit to any allowed application via FAST PATH.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/03/91  LDELUH  New application.
// FF#283   02/17/92  LDELUH  Chg calc of fut rto for lt contp
//                            to include cancels.
// FF#284   02/28/92  LDELUH  Allow hist of 1 or 2 years ago.
// FF#285   03/06/92  LDELUH  Add alternate cat indicator.
// FF1111   05/08/92  LDELUH  Allow varying length seasons.
// FF333    08/14/92  mdange  Show domestic production fore-
//                            cast in actual months.
// FF???    09/28/92  mdange  Get master sales,prop and demand
//                            forecasts from the frozen master
//                            target worksheet type '07'.
// FF386    04/07/93  JJUCH   Change calc of subtot and accum
//                            tot for fcst and hist fill rate.
//                            Fix incorrect calc for dmd, prop
//                            futr and inv turn subtot and tot.
// FF       9/01/93   mdange  Add logic to submit either test
//                            or prod JCL.
// FF       10/05/93  JJUCH   Rename PF14 to PF16.
// FH140    02/03/94  JJUCH   Change to use authorize future
//                            when calc hist fut%, hist fill rt
//                            and hist seas idx.
//          12/19/96  CWHIT1  REGEN FOR YR 2000
// *********************
Program FE0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0HW00 FE0HW00; // record
  FE0HW01 FE0HW01; // record
  FE0HW02 FE0HW02; // record
  FE0HW03 FE0HW03; // record
  FE0HW04 FE0HW04; // record
  FE0HW05 FE0HW05; // record
  FE0HW06 FE0HW06; // record
  FE0HW07 FE0HW07; // record
  FE0HW08 FE0HW08; // record
  FE0HW09 FE0HW09; // record
  FE0HW10 FE0HW10; // record
  FE0HW11 FE0HW11; // record
  FE0HW12 FE0HW12; // record
  FE0HW13 FE0HW13; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF7REC FF7REC; // record
  FFDREC FFDREC; // record
  FFFREC FFFREC; // record
  FFPREC FFPREC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FH3REC FH3REC; // record
  FH6REC FH6REC; // record
  FHBREC FHBREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FE0HT01; // table
  use FE0HT5O {deleteAfterUse = yes}; // table
  use FE0HM.FE0HM001,  // forms
      FE0HM.FE0HM002, 
      FE0HM.FE0HM003, 
      FE0HM.FE0HM004, 
      FE0HM.FE0HM005, 
      FE0HM.FE0HM006, 
      FE0HM.FE0HM007,
      FE0HM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FE0HW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Submit batch job parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FE0HW00.FE0HWBEG = 1; /* Beginning column*/
    FE0HW00.FE0HWLRS = 8; /* Left/right scroll amount*/
    FE0HW00.FE0HWPAG = 1; /* Page number*/

    FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/
    FE0HW00.FE0HWSWR = "Y"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* Flow to determine what application transferred control.*/
     /* ------------------------------------------------------------*/

    goto FE0H000; /* Check the FROM application*/


    FE0H000: FE0H000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FE0H001; /* Converse the main process*/


    FE0H001: FE0H001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FE0H001; /* Converse the main process*/


  end // end main
end // end FE0H

// Check the FROM application
Function FE0H000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FE0G" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FE0H") /* or same application*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end FE0H000

// Main process to display a map
Function FE0H001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, if specified, display the fourth map.*/
   /* 5) Otherwise, if specified, display the fifth map.*/
   /* 6) Otherwise, if specified, display the sixth map.*/
   /* 7) Otherwise, if specified, display the seventh map.*/
   /* 8) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWPAG == 1 /* Page 1 was requested*/
   || FE0HW00.FE0HWSWR == "Y") /* or data was requested*/
    FE0H100(); /* Display map 1*/
  else

    if (FE0HW00.FE0HWPAG == 2) /* Page 2 was requested*/
      FE0H200(); /* Display map 2*/
    else

      if (FE0HW00.FE0HWPAG == 3) /* Page 3 was requested*/
        FE0H300(); /* Display map 3*/
      else

        if (FE0HW00.FE0HWPAG == 4) /* Page 4 was requested*/
          FE0H400(); /* Display map 4*/
        else

          if (FE0HW00.FE0HWPAG == 5) /* Page 5 was requested*/
            FE0H500(); /* Display map 5*/
          else

            if (FE0HW00.FE0HWPAG == 6) /* Page 6 was requested*/
              FE0H600(); /* Display map 6*/
            else

              if (FE0HW00.FE0HWPAG == 7) /* Page 7 was requested*/
                FE0H700(); /* Display map 7*/
              else

                /* --------------------------------------------------------*/
                /* Write the error to the Error Diagnosis Reporting.*/

                /* --------------------------------------------------------*/

                FFWREC.XXXMODID = "001"; /* Module identification*/
                FFWREC.XXXMSGNO = 1; /* System error occurred*/

                TA1REC.TA1FUNC = "RETN"; /* Termination function*/
                TA1REC.TA1TYPE = "APPL"; /* Type of error*/
                TA1REC.TA1LOC = "INVALID PAGE NUMBER REQUESTED";
                TA1REC.TA1MAPNO = FE0HW00.FE0HWPAG; /* Page number*/
                TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
                TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

                call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/


                /* --------------------------------------------------------*/
                /* Exit to display the application system menu.*/

                /* --------------------------------------------------------*/

                COMMAREA.CATOAP = "FF0A"; /* TO application*/

                XSFFS01(); /* Exit to another application*/


                /* --------------------------------------------------------*/
                /* Abnormally terminate the transaction if exit failed.*/

                /* --------------------------------------------------------*/

                TA1REC.TA1FUNC = "ABND"; /* Termination function*/
                TA1REC.TA1LOC = "EXIT TO APPLICATION MENU FAILED";

                call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

              end
            end
          end
        end
      end
    end
  end


end // end FE0H001

Function FE0H100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FE0H110(); /* Obtain the data to display*/

  FE0H120(); /* Format and display the map*/

  FE0H130(); /* Check attention identifier*/

  FE0H140(); /* Reset fields to normal intensity*/

  FE0H150(); /* Verify the entered data*/

  FE0H160(); /* Process valid input request*/


end // end FE0H100

// Obtain the data to display
Function FE0H110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage and total areas.*/
   /* ------------------------------------------------------------*/

  set FE0HW01 empty; /* M001 display storage*/
  set FE0HW02 empty; /* M002 display storage*/
  set FE0HW03 empty; /* M003 display storage*/
  set FE0HW04 empty; /* M004 display storage*/
  set FE0HW05 empty; /* M005 display storage*/
  set FE0HW06 empty; /* M006 display storage*/
  set FE0HW07 empty; /* M007 display storage*/
  set FE0HW08 empty; /* Season subtotals*/
  set FE0HW09 empty; /* accum totals*/
  set FE0HW10 empty; /* Changes translation results*/

  FE0HW01.CACHGFL = "N"; /* Modifiable data switch*/
  FE0HW01.FFWMODSW = "N"; /* Modified data switch*/

   /* ------------------------------------------------------------*/
   /* Select the row from the product cross-reference table.*/
   /* ------------------------------------------------------------*/

  FE0H112(); /* Select product cross-reference*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FE0H113(); /* Open worksheet header cursor*/

  FE0HW00.FE0HWCOL = 1; /* Current column*/
  FE0HW00.FE0HWIXW = 1; /* Worksheet number index*/

  FE0HW00.FE0HWSWH = "N"; /* Header cursor EOF switch*/
  FE0HW00.FE0HWSW1 = "Y"; /* First time through switch*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FE0HW00.FE0HWSWH == "N") /* Until end of cursor*/

    FE0H114(); /* Fetch next worksheet header*/

    if (FE0HW00.FE0HWSW1 == "N") /* Not first time through*/
      FE0H115(); /* Calculate season totals*/
    end

    if (FE0HW00.FE0HWSWH == "N") /* Not end of cursor*/

      if (FE0HW00.FE0HWSW1 == "Y") /* First time through*/
        FE0H116(); /* Save header information*/
      end

      FE0H117(); /* Obtain worksheet items*/

      if (FE0HW00.FE0HWSW1 == "Y") /* First time through*/
        FE0H118(); /* Obtain worksheet comments*/
      end

      FE0HW00.FE0HWSW1 = "N"; /* First time through switch*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FE0H119(); /* Close worksheet header cursor*/

   /* ------------------------------------------------------------*/
   /* Determine the maximum beginning column for scrolling.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWMAX = FE0HW00.FE0HWCOL - 8; /* Maximum beginning column*/
   /* fe0hW00.fe0hWCOL = fe0hW00.fe0hWCOL - 7*/

  if (FE0HW00.FE0HWMAX < 1) /* Maximum LT minimum*/
    FE0HW00.FE0HWMAX = 1; /* Default to minimum*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWSW1 == "Y") /* No worksheet found*/

    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    FE0HW00.FE0HWPAG = 1; /* Page number*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWSWR = "N"; /* Request for data switch*/
  FE0HW01.CACHGFL = "Y"; /* Modifiable data switch*/

   /* ------------------------------------------------------------*/
   /* If data request came from another page, return to display.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWPAG > 1) /* Subsequent page was displayed*/
    exit stack; /* Exit to display map*/
  end


end // end FE0H110

// Select product cross-reference
Function FE0H112()
   /* ------------------------------------------------------------*/
   /* Select the product cross-reference table row.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FE0HW00.FF2NSEAS = FF2REC.FF2NSEAS; /* ===> # of seasons per year*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT PRODUCT CROSS-REFERENCE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0H112

// Open worksheet header cursor
Function FE0H113()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.XPCCD = FFWREC.XPCCD; /* Category*/
  FFQREC.YPGCD = FFWREC.YPGCD; /* Type group*/
  FFQREC.XWSCD = "05"; /* Target w/s type*/
  FFQREC.ZZZCHGDT = -1; /* Change date*/
  FFQREC.ZZZCHGTM = -1; /* Change time*/
  FFQREC.FFABEGMO = -1; /* Forecast begin month*/
  FFQREC.SY2SSCIN = "*"; /* Safety stock class*/
  FFQREC.FFQMBYMO = -1; /* Main buy month*/
  FFQREC.FFQABYMO = -1; /* Actl buy month*/

  try
    call "IO3810" ("S1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WORKSHEET HEADER CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0H113

// Fetch next worksheet header
Function FE0H114()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("N1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FE0HW00.FE0HWSWH = "Y"; /* Header cursor EOF switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT WORKSHEET HEADER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0H114

// Calculate season totals
Function FE0H115()
   /* ------------------------------------------------------------*/
   /* Calculate the M001 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FE0HW01.FE0HMMON[FE0HWCOL] = "  SUB"; /* Subtotal literal*/

  FFXREC.FFXNUMB = FE0HW08.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRPFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRPFUDM = FE0HW09.FFRPFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRAFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRAFUDM = FE0HW09.FFRAFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRIFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRIFUDM = FE0HW09.FFRIFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRCFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRCFUDM = FE0HW09.FFRCFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWFUT; /* Futures tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FE0HWFUT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWFUT = FE0HW09.FE0HWFUT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRPNFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRPNFDM = FE0HW09.FFRPNFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRANFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRANFDM = FE0HW09.FFRANFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRINFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRINFDM = FE0HW09.FFRINFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRCNFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRCNFDM = FE0HW09.FFRCNFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWNFT; /* Natl acct fut tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FE0HWNFT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWNFT = FE0HW09.FE0HWNFT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M002 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW08.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRPPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRPPRDM = FE0HW09.FFRPPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRAPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRAPRDM = FE0HW09.FFRAPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRIPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRIPRDM = FE0HW09.FFRIPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRCPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRCPRDM = FE0HW09.FFRCPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWPRT; /* Prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FE0HWPRT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWPRT = FE0HW09.FE0HWPRT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRPNPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRPNPDM = FE0HW09.FFRPNPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRANPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRANPDM = FE0HW09.FFRANPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRINPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRINPDM = FE0HW09.FFRINPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRCNPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRCNPDM = FE0HW09.FFRCNPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWNPT; /* Natl acct prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FE0HWNPT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWNPT = FE0HW09.FE0HWNPT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M003 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWTDP; /* Total pre-alloc*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWTDP = FE0HW09.FE0HWTDP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWTDA; /* Total allocated*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDA[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWTDA = FE0HW09.FE0HWTDA + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWTDI; /* Total invoiced*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDI[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWTDI = FE0HW09.FE0HWTDI + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWTDC; /* Total cancelled*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWTDC = FE0HW09.FE0HWTDC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWTDT; /* Total demand*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWTDT = FE0HW09.FE0HWTDT + FFXREC.FFXROUND; /* accum total*/

  if (FE0HW03.FE0HWTDT[FE0HWCOL] != 0) /* Total demand NE zero*/
    FE0HW00.FE0HWPCT = FE0HW03.FE0HWTDC[FE0HWCOL] * 100; /* Cancellation %*/
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW03.FE0HWTDT[FE0HWCOL], -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW03.FE0HWCAP[FE0HWCOL] = FE0HW00.FE0HWPCT;
  end

  FFXREC.FFXNUMB = FE0HW08.FE0HWTAF; /* Tot active fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTAF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTAF[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWTAF = FE0HW09.FE0HWTAF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWTAP; /* Tot active prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTAP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTAP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWTAP = FE0HW09.FE0HWTAP + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M004 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWDFU; /* Fut dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDFU[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDFU[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWDFU = FE0HW09.FE0HWDFU + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWDNF; /* Natl fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDNF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDNF[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWDNF = FE0HW09.FE0HWDNF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWDTF; /* Total fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDTF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTF[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWDTF = FE0HW09.FE0HWDTF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWDPR; /* Prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDPR[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDPR[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWDPR = FE0HW09.FE0HWDPR + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWDNP; /* Natl prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDNP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDNP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWDNP = FE0HW09.FE0HWDNP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWDTP; /* Total prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDTP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWDTP = FE0HW09.FE0HWDTP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMPCF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FFRCPRFC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRCPRFC = FE0HW09.FFRCPRFC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FF6PRPFC; /* Prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMPRF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FF6PRPFC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FF6PRPFC = FE0HW09.FF6PRPFC + FFXREC.FFXROUND; /* accum total*/

  if (FE0HW08.FFRCDMFC > 0 /* Subtotal GT zero*/
   && FE0HW08.FE0HWFRF > 0) /* Subtotal GT zero*/
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW08.FE0HWFRF * 100 / FE0HW08.FFRCDMFC, -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW04.FE0HWDFF[FE0HWCOL] = FE0HW00.FE0HWPCT; /* Fcst fut %*/
  end
  FE0HW09.FE0HWFRF = FE0HW09.FE0HWFRF + FE0HW08.FE0HWFRF; /* accum total*/

  if (FE0HW08.FE0HWHCF != 0) /* Subtotal NE zero*/
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW08.FE0HWHFU * 100 / FE0HW08.FE0HWHCF, -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW04.FE0HWDHF[FE0HWCOL] = FE0HW00.FE0HWPCT; /* Hist fut %*/
  end
  FE0HW09.FE0HWHCF = FE0HW09.FE0HWHCF + FE0HW08.FE0HWHCF; /* accum total*/
  FE0HW09.FE0HWHFU = FE0HW09.FE0HWHFU + FE0HW08.FE0HWHFU; /* accum total*/

  if (FE0HW08.FFRCPRFC != 0) /* Subtotal NE zero*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWCOL - FE0HW08.FE0HWNMO; /* Season begin*/
    while (FE0HW00.FE0HWIXC <= FE0HW00.FE0HWCOL) /* Until end of season*/
      if (FE0HW04.FFRCPRFC[FE0HWIXC] >= 0) /* Curr prop fcst GE zero*/
        FE0HW00.FE0HWPCT = FE0HW04.FFRCPRFC[FE0HWIXC] * 100;
        FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW08.FFRCPRFC, -mathLib.decimals(FE0HW00.FE0HWPCT));
        FE0HW04.FE0HWDFI[FE0HWIXC] = FE0HW00.FE0HWPCT; /* Fcst idx*/
      end
      FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Next month of season*/
    end
  end

  if (FE0HW08.FE0HWHPR != 0) /* Subtotal NE zero*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWCOL - FE0HW08.FE0HWNMO;
                                   /* Season begin*/
    FE0HW04.FE0HWHPR[FE0HWCOL] = FE0HW08.FE0HWHPR; /* Subtotal*/
    while (FE0HW00.FE0HWIXC <= FE0HW00.FE0HWCOL) /* Until end of season*/
      if (FE0HW04.FE0HWHPR[FE0HWIXC] >= 0) /* Hist prop qty GE zero*/
        FE0HW00.FE0HWPCT = FE0HW04.FE0HWHPR[FE0HWIXC] * 100;
        FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW08.FE0HWHPR, -mathLib.decimals(FE0HW00.FE0HWPCT));
        FE0HW04.FE0HWDHI[FE0HWIXC] = FE0HW00.FE0HWPCT; /* Hist idx*/
      end
      FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Next month of season*/
    end
  end
  FE0HW09.FE0HWHPR = FE0HW09.FE0HWHPR + FE0HW08.FE0HWHPR; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M005 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW08.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMFCD[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FFRCDMFC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRCDMFC = FE0HW09.FFRCDMFC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWMDM; /* Mstr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMMDM[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FE0HWMDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWMDM = FE0HW09.FE0HWMDM + FFXREC.FFXROUND; /* accum total*/

  if (FE0HW05.FFRCDMFC[FE0HWCOL] != 0) /* Subtotal NE zero*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWCOL - FE0HW08.FE0HWNMO; /* Season begin*/
    while (FE0HW00.FE0HWIXC <= FE0HW00.FE0HWCOL) /* Until end of season*/
      FE0HW00.FE0HWPCT = FE0HW05.FFRCDMFC[FE0HWIXC] * 100; /* Curr dmd fcst*/
      FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW05.FFRCDMFC[FE0HWCOL], -mathLib.decimals(FE0HW00.FE0HWPCT));
      FE0HW05.FE0HWFSI[FE0HWIXC] = FE0HW00.FE0HWPCT; /* Fcst seas idx*/
      FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Next month of season*/
    end
  end

  if (FE0HW08.FE0HWHDM > 0) /* Subtotal GT zero*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWCOL - FE0HW08.FE0HWNMO;
                                   /* Season begin*/
    FE0HW05.FE0HWHDM[FE0HWCOL] = FE0HW08.FE0HWHDM; /* Subtotal*/
    while (FE0HW00.FE0HWIXC <= FE0HW00.FE0HWCOL) /* Until end of season*/
      FE0HW00.FE0HWPCT = FE0HW05.FE0HWHDM[FE0HWIXC] * 100;
                                   /* Hist dmd qty*/
      FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW05.FE0HWHDM[FE0HWCOL], -mathLib.decimals(FE0HW00.FE0HWPCT));
      FE0HW05.FE0HWHSI[FE0HWIXC] = FE0HW00.FE0HWPCT; /* Hist seas idx*/
      FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Next month of season*/
    end
  end
  FE0HW09.FE0HWHDM = FE0HW09.FE0HWHDM + FE0HW08.FE0HWHDM; /* accum total*/

  if (FE0HW08.FF7RVFCT != 0) /* Subtotal NE zero*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWCOL - FE0HW08.FE0HWNMO; /* Season begin*/
    FE0HW05.FF7RVFCT[FE0HWCOL] = FE0HW08.FF7RVFCT; /* Subtotal*/
    while (FE0HW00.FE0HWIXC <= FE0HW00.FE0HWCOL) /* Until end of season*/
      FE0HW00.FE0HWPCT = FE0HW05.FF7RVFCT[FE0HWIXC] * 100; /* Rvse dmd fcst*/
      FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW05.FF7RVFCT[FE0HWCOL], -mathLib.decimals(FE0HW00.FE0HWPCT));
      FE0HW05.FE0HWRSI[FE0HWIXC] = FE0HW00.FE0HWPCT; /* Revd seas idx*/
      FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Next month of season*/
    end
  end
  FE0HW09.FF7RVFCT = FE0HW09.FF7RVFCT + FE0HW08.FF7RVFCT; /* accum total*/

   /* Fcst fill rate*/

  if (FE0HW08.FFRCDMFC != 0) /* curr dmd*/
    FE0HW08.FE0HWFFR = mathLib.round(FE0HW08.FH5MSHQT * 100 / FE0HW08.FFRCDMFC, -mathLib.decimals(FE0HW08.FE0HWFFR));
  else
    if (FE0HW08.FH5MSHQT == 0) /* both curr sls and dmd are zero;*/
      FE0HW08.FE0HWFFR = 100;
    else
      FE0HW08.FE0HWFFR = 0;
    end
  end

  FE0HW05.FE0HWFFR[FE0HWCOL] = FE0HW08.FE0HWFFR;
  FE0HW05.FE0HMFFR[FE0HWCOL] = mathLib.round(FE0HW05.FE0HWFFR[FE0HWCOL] / 1, -mathLib.decimals(FE0HW05.FE0HMFFR[FE0HWCOL]));

   /* Hist fill rate*/

  if (FE0HW08.FE0HWHOR != 0) /* Order qty*/
    FE0HW08.FE0HWHFR = mathLib.round(FE0HW08.FE0HWHIN * 100 / FE0HW08.FE0HWHOR, -mathLib.decimals(FE0HW08.FE0HWHFR));
  else
    if (FE0HW08.FE0HWHIN == 0) /* both order and invoiced are zero;*/
      FE0HW08.FE0HWHFR = 100;
    else
      FE0HW08.FE0HWHFR = 0;
    end
  end

  FE0HW05.FE0HWHFR[FE0HWCOL] = FE0HW08.FE0HWHFR;

  FFXREC.FFXNUMB = FE0HW08.FH5MSHQT; /* Curr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMCSF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FH5MSHQT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FH5MSHQT = FE0HW09.FH5MSHQT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FF6SLFCT; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMMSL[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FF6SLFCT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FF6SLFCT = FE0HW09.FF6SLFCT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M006 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW08.FF6BEINV; /* Beg inv*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMINB[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FF6BEINV[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FF6BEINV = FE0HW09.FF6BEINV + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRPRDDU; /* Prdctn due*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMDUE[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FFRPRDDU[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRPRDDU = FE0HW09.FFRPRDDU + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRSUBBY; /* Sbmt qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMQBY[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FFRSUBBY[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRSUBBY = FE0HW09.FFRSUBBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FFRTENBY; /* Tntv qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMTBY[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FFRTENBY[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRTENBY = FE0HW09.FFRTENBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWSUP; /* Supply*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMSUP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FE0HWSUP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWSUP = FE0HW09.FE0HWSUP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FG4BALSH; /* Bal to shp*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMBAL[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FG4BALSH[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FG4BALSH = FE0HW09.FG4BALSH + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWINE; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMINE[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FE0HWINE[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWINE = FE0HW09.FE0HWINE + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FF6SFSTK; /* Sfty stk*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMSTK[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FF6SFSTK[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FF6SFSTK = FE0HW09.FF6SFSTK + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FF6SUGBY; /* Sugg qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMSBY[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FF6SUGBY[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FF6SUGBY = FE0HW09.FF6SUGBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FF6PRFCT; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMFCT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FF6PRFCT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FF6PRFCT = FE0HW09.FF6PRFCT + FFXREC.FFXROUND; /* accum total*/

  FE0HW00.FE0HWASL = FE0HW08.FF6SLFCT * 12 * 2; /* Inv turns*/
  FE0HW00.FE0HWAIN = FE0HW08.FF6BEINV + FE0HW08.FE0HWINE;
  FE0HW00.FE0HWAIN = FE0HW00.FE0HWAIN * FE0HW08.FE0HWNMO;
  if (FE0HW00.FE0HWAIN != 0) /* Inventory NE zero*/
    FE0HW06.FE0HWTUR[FE0HWCOL] = mathLib.round(FE0HW00.FE0HWASL / FE0HW00.FE0HWAIN, -mathLib.decimals(FE0HW06.FE0HWTUR[FE0HWCOL]));
  end

  FFXREC.FFXNUMB = FE0HW08.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMDIR[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FFRDIRSH[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FFRDIRSH = FE0HW09.FFRDIRSH + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FE0HW08.FE0HWNIL; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMNIL[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FE0HWNIL[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW09.FE0HWNIL = FE0HW09.FE0HWNIL + FFXREC.FFXROUND; /* accum total*/


   /* ------------------------------------------------------------*/
   /* Accumulate the number of months for accum total averaging.*/
   /* ------------------------------------------------------------*/

  FE0HW09.FE0HWNMO = FE0HW09.FE0HWNMO + FE0HW08.FE0HWNMO;
                                   /* Number of months*/

   /* ------------------------------------------------------------*/
   /* Increment the current column and clear the subtotal fields.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
  FE0HW00.FE0HWNMO = FE0HW08.FE0HWNMO; /* Number of months*/
  set FE0HW08 empty; /* Season subtotals*/

  if (FE0HW00.FE0HWIXW == 2) /* sub for 1st Header processed*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate the M001 accum totals for the category.*/
   /* ------------------------------------------------------------*/

  FE0HW01.FE0HMMON[FE0HWCOL] = "ACCUM"; /* accum total literal*/

  FFXREC.FFXNUMB = FE0HW09.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRPFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRAFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRIFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRCFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWFUT; /* Futures tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FE0HWFUT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRPNFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRANFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRINFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRCNFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWNFT; /* Natl acct fut tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FE0HWNFT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M002 accum totals for the category.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW09.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRPPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRAPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRIPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRCPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWPRT; /* Prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FE0HWPRT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRPNPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRANPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRINPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRCNPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWNPT; /* Natl acct prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FE0HWNPT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M003 accum totals for the category.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWTDP; /* Total pre-alloc*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWTDA; /* Total allocated*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDA[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWTDI; /* Total invoiced*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDI[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWTDC; /* Total cancelled*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWTDT; /* Total demand*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FE0HW03.FE0HWTDT[FE0HWCOL] != 0) /* Total demand NE zero*/
    FE0HW00.FE0HWPCT = FE0HW03.FE0HWTDC[FE0HWCOL] * 100; /* Cancellation %*/
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW03.FE0HWTDT[FE0HWCOL], -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW03.FE0HWCAP[FE0HWCOL] = FE0HW00.FE0HWPCT;
  end

  FFXREC.FFXNUMB = FE0HW09.FE0HWTAF; /* Tot active fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTAF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTAF[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWTAP; /* Tot active prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTAP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTAP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M004 accum totals for the category.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWDFU; /* Fut dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDFU[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDFU[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWDNF; /* Natl fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDNF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDNF[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWDTF; /* Total fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDTF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTF[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWDPR; /* Prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDPR[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDPR[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWDNP; /* Natl prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDNP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDNP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWDTP; /* Total prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDTP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMPCF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FFRCPRFC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FF6PRPFC; /* Prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMPRF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FF6PRPFC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FE0HW09.FFRCDMFC > 0 /* accum total GT zero*/
   && FE0HW09.FE0HWFRF > 0) /* accum total GT zero*/
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW09.FE0HWFRF * 100 / FE0HW09.FFRCDMFC, -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW04.FE0HWDFF[FE0HWCOL] = FE0HW00.FE0HWPCT; /* Fcst fut %*/
  end

  if (FE0HW09.FE0HWHCF != 0) /* accum total NE zero*/
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW09.FE0HWHFU * 100 / FE0HW09.FE0HWHCF, -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW04.FE0HWDHF[FE0HWCOL] = FE0HW00.FE0HWPCT; /* Hist fut %*/
  end

  if (FE0HW09.FFRCPRFC != 0) /* accum total NE zero*/
    FE0HW04.FE0HWDFI[FE0HWCOL] = 100; /* Fcst prop idx*/
  end

  if (FE0HW09.FE0HWHPR != 0) /* accum total NE zero*/
    FE0HW04.FE0HWDHI[FE0HWCOL] = 100; /* Hist prop idx*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M005 accum totals for the category.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW09.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMFCD[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FFRCDMFC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWMDM; /* Mstr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMMDM[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FE0HWMDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FE0HW09.FFRCDMFC != 0) /* accum total NE zero*/
    FE0HW05.FE0HWFSI[FE0HWCOL] = 100; /* Fcst seas idx*/
  end

  if (FE0HW09.FE0HWHDM != 0) /* accum total NE zero*/
    FE0HW05.FE0HWHSI[FE0HWCOL] = 100; /* Hist seas idx*/
  end

  if (FE0HW09.FF7RVFCT != 0) /* accum total NE zero*/
    FE0HW05.FE0HWRSI[FE0HWCOL] = 100; /* Revd seas idx*/
  end

   /* Fcst fill rate*/

  if (FE0HW09.FFRCDMFC != 0) /* curr dmd*/
    FE0HW09.FE0HWFFR = mathLib.round(FE0HW09.FH5MSHQT * 100 / FE0HW09.FFRCDMFC, -mathLib.decimals(FE0HW09.FE0HWFFR));
  else
    if (FE0HW09.FH5MSHQT == 0) /* both curr sls and dmd are zero;*/
      FE0HW09.FE0HWFFR = 100;
    else
      FE0HW09.FE0HWFFR = 0;
    end
  end

  FE0HW05.FE0HWFFR[FE0HWCOL] = FE0HW09.FE0HWFFR;
  FE0HW05.FE0HMFFR[FE0HWCOL] = mathLib.round(FE0HW05.FE0HWFFR[FE0HWCOL] / 1, -mathLib.decimals(FE0HW05.FE0HMFFR[FE0HWCOL]));

   /* Hist fill rate*/

  if (FE0HW09.FE0HWHOR != 0) /* Order qty*/
    FE0HW09.FE0HWHFR = mathLib.round(FE0HW09.FE0HWHIN * 100 / FE0HW09.FE0HWHOR, -mathLib.decimals(FE0HW09.FE0HWHFR));
  else
    if (FE0HW09.FE0HWHIN == 0) /* both order and invoiced are zero;*/
      FE0HW09.FE0HWHFR = 100;
    else
      FE0HW09.FE0HWHFR = 0;
    end
  end

  FE0HW05.FE0HWHFR[FE0HWCOL] = FE0HW09.FE0HWHFR;

  FFXREC.FFXNUMB = FE0HW09.FH5MSHQT; /* Curr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMCSF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FH5MSHQT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FF6SLFCT; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMMSL[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FF6SLFCT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M006 accum totals for the category.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW09.FF6BEINV; /* Beg inv*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMINB[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FF6BEINV[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRPRDDU; /* Prdctn due*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMDUE[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FFRPRDDU[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRSUBBY; /* Sbmt qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMQBY[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FFRSUBBY[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FFRTENBY; /* Tntv qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMTBY[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FFRTENBY[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWSUP; /* Supply*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMSUP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FE0HWSUP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FG4BALSH; /* Bal to shp*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMBAL[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FG4BALSH[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWINE; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMINE[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FE0HWINE[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FF6SFSTK; /* Sfty stk*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMSTK[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FF6SFSTK[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FF6SUGBY; /* Sugg qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMSBY[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FF6SUGBY[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FF6PRFCT; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMFCT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FF6PRFCT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FE0HW00.FE0HWASL = FE0HW09.FF6SLFCT * 12 * 2; /* Inv turns*/
  FE0HW00.FE0HWAIN = FE0HW09.FF6BEINV + FE0HW09.FE0HWINE;
  FE0HW00.FE0HWAIN = FE0HW00.FE0HWAIN * FE0HW09.FE0HWNMO;
  if (FE0HW00.FE0HWAIN != 0) /* Inventory NE zero*/
    FE0HW06.FE0HWTUR[FE0HWCOL] = mathLib.round(FE0HW00.FE0HWASL / FE0HW00.FE0HWAIN, -mathLib.decimals(FE0HW06.FE0HWTUR[FE0HWCOL]));
  end

  FFXREC.FFXNUMB = FE0HW09.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMDIR[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FFRDIRSH[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FE0HW09.FE0HWNIL; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMNIL[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FE0HWNIL[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/

end // end FE0H115

// Save header information
Function FE0H116()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date/time*/

   /* ------------------------------------------------------------*/
   /* Calculate the number of working days in the month to date.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* Subroutine parameters*/

  TA9REC.TA9BEGDT = XX0XW01.XX0XWDAT; /* Beginning date*/
  TA9REC.TA9BEGDD = 01; /* Beginning day*/

  TA9REC.TA9ENDDT = XX0XW01.XX0XWDAT; /* Ending date*/

  try
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Working days subroutine*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA9REC.TA9RTNFL != 0)          /* or bad return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

    FFWREC.XXXMODID = "116"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALCULATE WORKING DAYS TO DATE";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

  if (TA9REC.TA9DTDIF == 0) /* No working days to date*/
    FE0HW00.FE0HWDTD = 1; /* Default to 1 working day*/
  else
    FE0HW00.FE0HWDTD = TA9REC.TA9DTDIF; /* Working days to date*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the number of working days in the month.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* Subroutine parameters*/

  TA9REC.TA9BEGDT = XX0XW01.XX0XWDAT; /* Beginning date*/
  TA9REC.TA9BEGDD = 01; /* Beginning day*/

  FE0HW00.FE0HWDAT = XX0XW01.XX0XWCYM; /* Current CCYYMM*/
  FE0HW00.FE0HWDMM = FE0HW00.FE0HWDMM + 1; /* Increment month*/
  if (FE0HW00.FE0HWDMM > 12) /* Month GT maximum*/
    FE0HW00.FE0HWDMM = 1; /* Reset to minimum*/
    FE0HW00.FE0HWDYY = FE0HW00.FE0HWDYY + 1; /* Increment year*/
  end
  TA9REC.TA9ENDDT = FE0HW00.FE0HWDAT * 100; /* Ending date*/
  TA9REC.TA9ENDDD = 01; /* Ending day*/

  try
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Working days subroutine*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA9REC.TA9RTNFL != 0)          /* or bad return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

    FFWREC.XXXMODID = "116"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALCULATE WORKING DAYS IN MONTH";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

  FE0HW00.FE0HWDIM = TA9REC.TA9DTDIF; /* Working days in month*/

   /* ------------------------------------------------------------*/
   /* Save the information from the worksheet header row.*/
   /* ------------------------------------------------------------*/

  FE0HW01.FFQMBYMO = FFQREC.FFQMBYMO; /* Main buy mo*/

  FE0HW01.FFQCURMO = FFQREC.FFQCURMO; /* Current mo*/
  FFXREC.FFXNUMB = FFQREC.FFQLCOFU; /* Lst caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FFQLCOFU = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQLCOPR; /* Lst caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FFQLCOPR = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQOCOFU; /* Oth caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FFQOCOFU = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQOCOPR; /* Oth caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FFQOCOPR = FFXREC.FFXROUND; /* Rounded number*/
  FE0HW01.FF2PRIND = FFQREC.FF2PRIND; /* Prop yr ind*/
  FE0HW04.FF2FUIND = FFQREC.FF2FUIND; /* Futr yr ind*/
  FE0HW05.FF2DMIND = FFQREC.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Establish the year indicators used to calculate history.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FF2PRIND = FE0HW01.FF2PRIND; /* Prop yr ind*/
  FE0HW00.FF2FUIND = FE0HW04.FF2FUIND; /* Futr yr ind*/
  FE0HW00.FF2DMIND = FE0HW05.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Calculate the Prior Month for FF_CONTP_MO*/
    /* and save it in a field called --> fe0hWPMO*/
   /* ------------------------------------------------------------*/

  FE0HW01.FE0HWCMO = FFQREC.FFQCURMO; /* Current mo*/

  if (FE0HW01.FE0HWCMM == 1) /* Current mo*/
    FE0HW01.FE0HWPCY = FE0HW01.FE0HWCCY - 1;
    FE0HW01.FE0HWPMM = 12;
  else
    FE0HW01.FE0HWPCY = FE0HW01.FE0HWCCY; /* curr to prior*/
    FE0HW01.FE0HWPMM = FE0HW01.FE0HWCMM - 1; /* decrement month*/
  end


end // end FE0H116

// Obtain worksheet items
Function FE0H117()
   /* ------------------------------------------------------------*/
   /* If more than 12 worksheets found, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWIXW > 12) /* More than twelve wrkshts*/

    FFWREC.XXXMODID = "117"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "MORE THAN TWELVE WORKSHEETS FOUND";
    TAEREC.TAEDESC2 = FE0HW01.TAEDESC2; /* Worksheet numbers*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN WORKSHEET ITEMS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the worksheet number and beginning and ending months.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWIXW <= 9) /* Only room for 9 nbrs in err rec*/
    FE0HW01.FE0HWNBR[FE0HWIXW] = FFQREC.FFEWSNBR; /* Worksheet number err*/
  end
  FE0HW01.FE0HWSNO[FE0HWIXW] = FFQREC.FFEWSNBR; /* Worksheet number*/
  FE0HW01.FFABEGMO[FE0HWIXW] = FFQREC.FFABEGMO; /* Beginning month*/
  FE0HW01.FFAENDMO[FE0HWIXW] = FFQREC.FFAENDMO; /* Ending month*/

  FE0HW00.FE0HWIXW = FE0HW00.FE0HWIXW + 1; /* Worksheet number index*/

   /* ------------------------------------------------------------*/
   /* Select the items for the worksheet and open the cursor.*/
   /* ------------------------------------------------------------*/

  FE0HS01(); /* Open worksheet item cursor*/

  FE0HW00.FE0HWSWI = "N"; /* Item cursor EOF switch*/

   /* ------------------------------------------------------------*/
   /* Fetch the selected items until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FE0HW00.FE0HWSWI == "N") /* Until end of cursor*/

    FE0HS02(); /* Fetch next worksheet item*/

    if (FE0HW00.FE0HWSWI == "N") /* Not end of cursor*/

      FE0HS03(); /* Sum domestic cat forecast*/

      if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        set FHBREC empty; /* reset record layout*/
        FHBREC.YSMXDV = FFWREC.YSMXDV; /* move division code*/
        FE0HS30(); /* get actual planned receipt qty*/
        FE0HW06.FF6PRFCT[FE0HWCOL] = FHBREC.FH7MOPRQ; /* actual qty*/
      else
        FE0HW06.FF6PRFCT[FE0HWCOL] = FF7REC.FF6PRFCT; /* Dom prod fcst*/
      end
      if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        set FHBREC empty; /* reset record layout*/
        FHBREC.YSMXDV = "20"; /* move division code*/
        FE0HS30(); /* get actual planned receipt qty*/
        FE0HW06.FE0HWNIL[FE0HWCOL] = FHBREC.FH7MOPRQ; /* actual qty*/
      else
        FE0HS04(); /* Sum NIL cat pfcst qty*/
        FE0HW06.FE0HWNIL[FE0HWCOL] = FF7REC.FF6PRFCT; /* NIL prod fcst*/
      end

      FE0HS06(); /* Sum invoice/order quantities*/

      if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
        FE0HS07(); /* Sum one year ago history*/
        FE0HS08(); /* Sum two year ago history*/
      end

      if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        FE0HS09(); /* Sum cat shipment history*/
        FE0HW00.FH5MSHQT = FH6REC.FH5MSHQT - FH6REC.FH5RTSQT;
        FE0HW05.FH5MSHQT[FE0HWCOL] = FE0HW00.FH5MSHQT; /* Shipped*/
      else
        FE0HS10(); /* Sum next three months forecast*/
        FE0HW00.FE0HWASL = FE0HW12.FG4BALSH; /* Sales forecast*/
      end


      if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
         /* NEXT SENTENCE*/
      else
        FE0H170(); /* get frozen master sales,prop,demand*/
      end

      FE0HS11(); /* Save item information*/

      FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Close the worksheet item cursor.*/
   /* ------------------------------------------------------------*/

  FE0HS14(); /* Close worksheet item cursor*/

   /* ------------------------------------------------------------*/
   /* If not the first time through, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWSW1 == "N") /* Not first time through*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Determine where to display the carryover quantities.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFQCURMO in FE0HW01.FF4FCTMO) /* Find current month*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

  else

    FFWREC.XXXMODID = "117"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "CURRENT MONTH WAS NOT FOUND";
    FE0HW00.FE0HWDAT = FE0HW01.FFQCURMO; /* Date work area*/
    TAEREC.TAEDESC2 = FE0HW00.FE0HWDAT; /* Current month*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN WORKSHEET ITEMS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

  if (FE0HW01.FFABEGMO[1] == FE0HW01.FFQCURMO) /* Beg mo EQ curr*/

    FFXREC.FFXNUMB = FE0HW01.FFQOCOFU + FE0HW01.FFQLCOFU; /* Caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW01.FE0HMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW01.FE0HWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FE0HW01.FFQOCOPR + FE0HW01.FFQLCOPR; /* Caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW01.FE0HMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW01.FE0HWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FE0HW01.FE0HWFCO[sysVar.arrayIndex] + FE0HW01.FE0HWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  else

    FFXREC.FFXNUMB = FE0HW01.FFQLCOFU; /* Lst caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW01.FE0HMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW01.FE0HWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FE0HW01.FFQLCOPR; /* Lst caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW01.FE0HMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW01.FE0HWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FE0HW01.FE0HWFCO[sysVar.arrayIndex] + FE0HW01.FE0HWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

    FFXREC.FFXNUMB = FE0HW01.FFQOCOFU; /* Oth caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW01.FE0HMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW01.FE0HWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FE0HW01.FFQOCOPR; /* Oth caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW01.FE0HMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW01.FE0HWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FE0HW01.FE0HWFCO[sysVar.arrayIndex] + FE0HW01.FE0HWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end


end // end FE0H117

// Obtain worksheet comments
Function FE0H118()
   /* ------------------------------------------------------------*/
   /* Select the comments for the worksheet and open the cursor.*/
   /* ------------------------------------------------------------*/

  FE0HS80(); /* Open worksheet comment cursor*/

  FE0HW00.FE0HWIXL = 1; /* Line index*/

  FE0HW00.FE0HWSWC = "N"; /* Comment cursor EOF switch*/

   /* ------------------------------------------------------------*/
   /* Fetch the selected comments until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FE0HW00.FE0HWSWC == "N") /* Until end of cursor*/
    FE0HS81(); /* Fetch next worksheet comment*/
  end

   /* ------------------------------------------------------------*/
   /* Close the worksheet comments cursor.*/
   /* ------------------------------------------------------------*/

  FE0HS82(); /* Close worksheet comment cursor*/


end // end FE0H118

// Close worksheet header cursor
Function FE0H119()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("C1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "119"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE WORKSHEET HEADER CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0H119

// Format and converse the map
Function FE0H120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FE0HW00.FE0HWSWF == "Y") /* Map must be formatted*/
      FE0H121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FE0H122(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FE0HM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FE0HM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0HM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0HM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FE0HM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FE0HM001 alarm; /* Indicate sound alarm*/

  end

  converse FE0HM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FE0HM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0HM001.CAITEM; /* Application data*/


end // end FE0H120

// Format the display data
Function FE0H121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FE0HM001 initial; /* M001 input/output area*/

  FE0HW00.FE0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HM001.FE0HMPAG = FE0HW00.FE0HWPAG; /* Page number*/
  FE0HM001.FE0HMLRS = FE0HW00.FE0HWLRS; /* Left/right scroll amount*/

  FE0HM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0HM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FE0HM001.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0HM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FE0HM001.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0HM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FE0HM001.FFQMBYMO = FE0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.CACHGFL != "Y") /* No modifiable data exists*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/

  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Beginning column*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWCOL <= FE0HW00.FE0HWEND /* Until end of columns*/
   && FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* or end of data*/

    set FE0HM001.FE0HMMON[FE0HWIXC] skip; /* Forecast month*/

    FE0HM001.FE0HMMON[FE0HWIXC] = FE0HW01.FE0HMMON[FE0HWCOL];
    FE0HM001.FE0HMFCO[FE0HWIXC] = FE0HW01.FE0HMFCO[FE0HWCOL];
    FE0HM001.FE0HMPCO[FE0HWIXC] = FE0HW01.FE0HMPCO[FE0HWCOL];
    FE0HM001.FE0HMFUP[FE0HWIXC] = FE0HW01.FE0HMFUP[FE0HWCOL];
    FE0HM001.FE0HMFUA[FE0HWIXC] = FE0HW01.FE0HMFUA[FE0HWCOL];
    FE0HM001.FE0HMFUI[FE0HWIXC] = FE0HW01.FE0HMFUI[FE0HWCOL];
    FE0HM001.FE0HMFUC[FE0HWIXC] = FE0HW01.FE0HMFUC[FE0HWCOL];
    FE0HM001.FE0HMFUT[FE0HWIXC] = FE0HW01.FE0HMFUT[FE0HWCOL];
    FE0HM001.FE0HMNFP[FE0HWIXC] = FE0HW01.FE0HMNFP[FE0HWCOL];
    FE0HM001.FE0HMNFA[FE0HWIXC] = FE0HW01.FE0HMNFA[FE0HWCOL];
    FE0HM001.FE0HMNFI[FE0HWIXC] = FE0HW01.FE0HMNFI[FE0HWCOL];
    FE0HM001.FE0HMNFC[FE0HWIXC] = FE0HW01.FE0HMNFC[FE0HWCOL];
    FE0HM001.FE0HMNFT[FE0HWIXC] = FE0HW01.FE0HMNFT[FE0HWCOL];

    if (COMMAREA.CACHGFL == "Y") /* & user can chg data*/
      set FE0HM001.FE0HMFUP[FE0HWIXC] normal; /* Pral futr dmd*/
      set FE0HM001.FE0HMNFP[FE0HWIXC] normal; /* Pral natl fdmd*/
    else
      set FE0HM001.FE0HMFUP[FE0HWIXC] skip; /* Pral futr dmd*/
      set FE0HM001.FE0HMNFP[FE0HWIXC] skip; /* Pral natl fdmd*/
    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H121

// Check change authorization
Function FE0H122()

  if (FE0HW01.CACHGFL == "Y") /* Modifiable data exists*/

    FE0HW00.FE0HWIXC = 1; /* Column index*/
    FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

    while (FE0HW00.FE0HWIXC <= 8 /* Until end of columns*/
     && FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* or end of data*/

      if (FE0HW01.FF4FCTMO[FE0HWCOL] < FE0HW01.FFQCURMO /* Month LT curr*/
       || FE0HW01.FF4FCTMO[FE0HWCOL] > FE0HW01.FFQMBYMO /* or GT buy*/
       || FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB"         /* or subtotal*/
       || FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM")        /* or accum total*/

        set FE0HM001.FE0HMFUP[FE0HWIXC] skip; /* Pral futr dmd*/
        set FE0HM001.FE0HMNFP[FE0HWIXC] skip; /* Pral natl fdmd*/

      end

      FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
      FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

    end

  else

    /* ------------------------------------------------------------*/
     /* If no modifiable data, autoskip the page and scroll amount.*/
    /* ------------------------------------------------------------*/

    set FE0HM001.FE0HMPAG skip, bold; /* Page number*/
    set FE0HM001.FE0HMLRS skip; /* Left/right scroll amount*/

  end


end // end FE0H122

// Check attention identifier
Function FE0H130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FE0HM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13 has been pressed & user is only allowed inquiry*/
   /* send error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* If PF13 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* and inquiry only allowed*/
      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(403); /* Key not valid for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FE0G"; /* Return to application*/
      COMMAREA.CAITEM = "FE0HM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FE0H130

// Reset highlighted fields
Function FE0H140()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FE0HM001.FE0HMPAG initialAttributes; /* Page number*/
  set FE0HM001.FE0HMLRS initialAttributes; /* Left/right scroll amount*/

  if (FE0HW01.CACHGFL == "Y") /* Modifiable data exists*/

    FE0HW00.FE0HWIXC = 1; /* Column index*/

    while (FE0HW00.FE0HWIXC <= 8 /* Until end of columns*/
     && FE0HM001.FE0HMMON[FE0HWIXC] > " ") /* or end of data*/

      if (COMMAREA.CACHGFL == "Y") /* And user can chg data*/
        set FE0HM001.FE0HMFUP[FE0HWIXC] normal; /* Pral futr dmd*/
        set FE0HM001.FE0HMNFP[FE0HWIXC] normal; /* Pral natl fdmd*/
      else
        set FE0HM001.FE0HMFUP[FE0HWIXC] skip; /* Pral futr dmd*/
        set FE0HM001.FE0HMNFP[FE0HWIXC] skip; /* Pral natl fdmd*/
      end

      FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

    end

  end

  set FE0HM001.CATOAP initialAttributes; /* TO application*/
  set FE0HM001.CAITEM initialAttributes; /* Application data*/


end // end FE0H140

// Verify the entered data
Function FE0H150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FE0HM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FE0H151(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FE0H152(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether valid a request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H153(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether valid a request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FE0H154(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FE0H155(); /* Verify M001 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FE0H150

// Verify page request
Function FE0H151()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no more pages.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS15(); /* Check M001 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    set FE0HM001.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.FE0HMPAG < 1 /* Less than minimum*/
   || FE0HM001.FE0HMPAG > 7) /* or greater than maximum*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    set FE0HM001.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FE0H151

// Verify scroll request
Function FE0H152()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "152"; /* Module identification*/

    if (converseVar.eventKey is pf10) /* Scroll left request*/
      converseLib.validationFailed(23); /* Unable to scroll left*/
    else
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0HW00.FE0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FE0HW00.FE0HWBEG == FE0HW00.FE0HWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS15(); /* Check M001 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.FE0HMLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    set FE0HM001.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    set FE0HM001.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H152

// Verify save worksheet request
Function FE0H153()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no data to process.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    converseLib.validationFailed(208); /* No data to process*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS15(); /* Check M001 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    set FE0HM001.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    set FE0HM001.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H153

// Verify print request
Function FE0H154()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no data to process.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "154"; /* Module identification*/
    converseLib.validationFailed(208); /* No data to process*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "154"; /* Module identification*/
    converseLib.validationFailed(438); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS15(); /* Check M001 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "154"; /* Module identification*/
    set FE0HM001.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "154"; /* Module identification*/
    set FE0HM001.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H154

// Verify M001 changed fields
Function FE0H155()
   /* ------------------------------------------------------------*/
   /* Verify any changed PRAL NATL FDMD field.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM001.FE0HMNFP[FE0HWIXC] != FE0HW01.FE0HMNFP[FE0HWEND])

      FFXREC.FFXCHAR = FE0HM001.FE0HMNFP[FE0HWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FE0HW10.FFRPNFDM[FE0HWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "155"; /* Module identification*/
        set FE0HM001.FE0HMNFP[FE0HWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed PRAL FUTR DMD field.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM001.FE0HMFUP[FE0HWIXC] != FE0HW01.FE0HMFUP[FE0HWEND])

      FFXREC.FFXCHAR = FE0HM001.FE0HMFUP[FE0HWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FE0HW10.FFRPFUDM[FE0HWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "155"; /* Module identification*/
        set FE0HM001.FE0HMFUP[FE0HWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "155"; /* Module identification*/
    set FE0HM001.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM001.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "155"; /* Module identification*/
    set FE0HM001.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H155

// Process valid input request
Function FE0H160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    FE0HW00.FE0HWPAD = +1; /* Page direction*/

    if (FE0HM001.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page specified*/

      FE0HW00.FE0HWPAG = FE0HM001.FE0HMPAG; /* Page number*/
    else
      FE0HW00.FE0HWPAG = FE0HW00.FE0HWPAG + FE0HW00.FE0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FE0HW00.FE0HWLRS = FE0HM001.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG - FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG < 1) /* Beginning LT minimum*/

      FE0HW00.FE0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "160"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FE0HW00.FE0HWLRS = FE0HM001.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG + FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG > FE0HW00.FE0HWMAX) /* Beginning GT maximum*/

      FE0HW00.FE0HWBEG = FE0HW00.FE0HWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "160"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save target worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H162(); /* Format/insert target worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FE0H164(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H166(); /* Process M001 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FE0HW01.FFWMODSW; /* Modified data exit switch*/


end // end FE0H160

// Format/insert target worksheet
Function FE0H162()
   /* ------------------------------------------------------------*/
   /* Obtain current date/time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date/time*/

   /* ------------------------------------------------------------*/
   /* Select and open cursor for target worksheet to be deleted.*/
   /* ------------------------------------------------------------*/

  FE0H113(); /* Open worksheet header cursor*/

    /* ------------------------------------------------------------*/
     /* Delete the header, items & comments until end of cursor.*/
    /* ------------------------------------------------------------*/

  FE0HW00.FE0HWSWH = "N"; /* Header cursor EOF switch*/

  while (FE0HW00.FE0HWSWH == "N") /* Until end of cursor*/

    FE0H114(); /* Fetch next worksheet header*/

    if (FE0HW00.FE0HWSWH == "N") /* Not end of cursor*/

      FE0HS20(); /* Delete worksheet header*/

      FE0HS21(); /* Delete worksheet items*/

      if (FFQREC.FFQFCMFL == "Y") /* Forecaster comments exist*/

        FE0HS22(); /* Delete worksheet comments*/

      end

    end

  end

    /* ------------------------------------------------------------*/
     /* Close the cursor for the selected target worksheets.*/
    /* ------------------------------------------------------------*/

  FE0H119(); /* Close worksheet header cursor*/

    /* ------------------------------------------------------------*/
     /* Format/insert target worksheet header, items and comments.*/
    /* ------------------------------------------------------------*/

  set FFQREC empty; /* Worksheet header row*/
  set FFRREC empty; /* Worksheet item row*/
  set FFPREC empty; /* Worksheet comment row*/

  FFQREC.XWSCD = "05"; /* Worksheet type code*/

  FE0HW00.FE0HWCOL = 1; /* Current column number*/
  FE0HW00.FE0HWIXW = 1; /* Worksheet number index*/

  while (FE0HW00.FE0HWIXW <= 12 /* Until end of array*/
   && FE0HW01.FE0HWSNO[FE0HWIXW] > 0) /* or end of worksheets*/

    FE0HS23(); /* Obtain next worksheet number*/

    FE0HS25(); /* Insert worksheet header row*/

    while (FE0HW01.FE0HMMON[FE0HWCOL] != "  SUB") /* Until end of season*/

      FE0HS26(); /* Insert worksheet item row*/

      FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column number*/

    end

    if (FE0HW00.FE0HWIXW == 1) /* First season worksheet*/

      FE0HW00.FE0HWIXL = 1; /* Line index*/

      while (FE0HW00.FE0HWIXL <= 10) /* Until end of lines*/

        if (FE0HW07.FFPCOMNT[FE0HWIXL] > " ") /* Comment exists*/
          FE0HS27(); /* Insert worksheet comment row*/
        end

        FE0HW00.FE0HWIXL = FE0HW00.FE0HWIXL + 1; /* Line index*/

      end

        /* ===> bump col index by 1 to bypass sub column*/
      FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column number*/

    else

        /* ===> bump col index by 2 to bypass sub & accum column*/
      FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 2; /* Current column number*/

    end

    FE0HW00.FE0HWIXW = FE0HW00.FE0HWIXW + 1; /* Worksheet number index*/

  end

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* Update the control information and request data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFWMODSW == "Y") /* or data was modified*/

    FFWREC.FFWMODSW = "N"; /* Modified data exit switch*/

  end

  FE0HW00.FE0HWSWR = "Y"; /* Request for data switch*/

   /* ------------------------------------------------------------*/
   /* Indicate the worksheet was saved.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "162"; /* Module identification*/
  FFWREC.XXXMSGNO = 32; /* Update successful*/


end // end FE0H162

// Submit print worksheet request
Function FE0H164()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FE0H165(); /* format production jcl*/
    else
      FE0H167(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "164"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FE0H164

// Submit prod jcl FF1911
Function FE0H165()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FE0HT01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format selection information in the parameters statement.*/
      /* ------------------------------------------------------------*/

      set FE0HW13 empty; /* Parameters work area*/

      FE0HW13.XPLCD = FFWREC.XPLCD; /* Product line code*/
      FE0HW13.YPGCD = FFWREC.YPGCD; /* Product type group code*/
      FE0HW13.XPCCD = FFWREC.XPCCD; /* Product category code*/
      FE0HW13.FE0HWSEL = "C"; /* W/S level*/
      FE0HW13.FE0HWCTP = "N"; /* Combine types flag*/

      TA6REC.TARJCL[TA6INDEX] = FE0HW13.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FE0HT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FE0HT01.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FE0HT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Background Job Subroutine*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "165"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* User cancelled request*/
  else
    converseLib.validationFailed(1); /* System error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FE0H165

// Process M001 changed fields
Function FE0H166()
   /* ------------------------------------------------------------*/
   /* If PRAL FUTR DMD was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8) /* Until end of columns*/

    if (FE0HM001.FE0HMFUP[FE0HWIXC] != FE0HW01.FE0HMFUP[FE0HWCOL]
     && FE0HW01.FE0HMMON[FE0HWCOL] != "  SUB" /* and not subtotal*/
     && FE0HW01.FE0HMMON[FE0HWCOL] != "ACCUM") /* and not accum total*/

      FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/
        FE0HS16(); /* Process PRAL FUTR DMD change*/
      end

      while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum column*/
          FE0HS16(); /* ===> Process PRAL FUTR DMD change*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* index for fcst months*/
      end

      sysVar.arrayIndex = FE0HW00.FE0HWCOL; /* Current column*/

      FE0HS16(); /* Process PRAL FUTR DMD change*/

      FE0HS17(); /* Calculations based on demand*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If PRAL NATL FDMD was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8) /* Until end of columns*/

    if (FE0HM001.FE0HMNFP[FE0HWIXC] != FE0HW01.FE0HMNFP[FE0HWCOL]
     && FE0HW01.FE0HMMON[FE0HWCOL] != "  SUB" /* and not subtotal*/
     && FE0HW01.FE0HMMON[FE0HWCOL] != "ACCUM") /* and not accum total*/

      FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/
        FE0HS18(); /* Process PRAL NATL FDMD change*/
      end

      while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum column*/
          FE0HS18(); /* ===> Process PRAL NATL FDMD change*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* index for fcst months*/
      end


      sysVar.arrayIndex = FE0HW00.FE0HWCOL; /* Current column*/

      FE0HS18(); /* Process PRAL NATL FDMD change*/

      FE0HS17(); /* Calculations based on demand*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H166

// Submit test jcl FF1911
Function FE0H167()
   /* submit test jcl*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FE0HT5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format selection information in the parameters statement.*/
      /* ------------------------------------------------------------*/

      set FE0HW13 empty; /* Parameters work area*/

      FE0HW13.XPLCD = FFWREC.XPLCD; /* Product line code*/
      FE0HW13.YPGCD = FFWREC.YPGCD; /* Product type group code*/
      FE0HW13.XPCCD = FFWREC.XPCCD; /* Product category code*/
      FE0HW13.FE0HWSEL = "C"; /* W/S level*/
      FE0HW13.FE0HWCTP = "N"; /* Combine types flag*/

      TA6REC.TARJCL[TA6INDEX] = FE0HW13.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FE0HT5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FE0HT5O.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FE0HT5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Background Job Subroutine*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "167"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* User cancelled request*/
  else
    converseLib.validationFailed(1); /* System error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FE0H167

// Get frozen master quantities
Function FE0H170()
   /* *********************************************************************/
   /* obtain the frozen master sales and prop forecasts.  Calculate a*/
   /* frozen master demand forecast based on frozen fill rate.*/
   /* frozen master values are kept on master target WS type '07'.*/
   /* frozen master sales is kept in balance to ship field.*/
   /* frozen master prop is kept in current prop forecast field.*/
   /* *********************************************************************/

  FE0HW00.FE0HWSF = 0; /* zero out previous sales forecast*/
  FE0HW04.FF6PRPFC[FE0HWCOL] = 0; /* zero out master prop forecast*/
  FE0HW05.FE0HWMDM[FE0HWCOL] = 0; /* zero out master demand forecast*/
  FE0HW05.FF6SLFCT[FE0HWCOL] = 0; /* zero out master sales forecast*/

  if (FFRREC.FF4FCTMO == FFQREC.FFQCURMO) /* current month*/
    set FE0HW11 empty; /* set ffqrec empty*/
    set FE0HW12 empty; /* set ffrrec empty*/

    FE0HW12.FF4FCTMO = FE0HW01.FE0HWPMO; /* prev month*/
    FE0H174(); /* select category vswitm01*/

    FE0HW00.FE0HWSF = FE0HW12.FG4BALSH; /* previous sales forecast*/
  end

  set FE0HW11 empty; /* set ffqrec empty*/
  set FE0HW12 empty; /* set ffrrec empty*/

  FE0HW12.FF4FCTMO = FFRREC.FF4FCTMO; /* fcst month*/
  FE0H174(); /* sel category vswitm01*/

  FE0HW12.FG4BALSH = FE0HW12.FG4BALSH - FE0HW00.FE0HWSF; /* minus previous*/
  FE0HW05.FF6SLFCT[FE0HWCOL] = FE0HW12.FG4BALSH; /* master sales*/
  FE0HW04.FF6PRPFC[FE0HWCOL] = FE0HW12.FFRCPRFC; /* master prop*/

   /* Calculate the master demand forecast*/
   /* =  Master Sales Fcst * 100 / Fcst fill rate*/

  if (FE0HW12.FF7FLLRT == 0) /* fill rate is zero*/
    FE0HW05.FE0HWMDM[FE0HWCOL] = 0; /* master demand*/
  else
    FE0HW05.FE0HWMDM[FE0HWCOL] = FE0HW12.FG4BALSH * 100     / FE0HW12.FF7FLLRT;
  end
end // end FE0H170

// Sel frozen WS type = '07'
Function FE0H174()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  FE0HW11.XWSCD = "07"; /* Worksheet type code*/

  FE0HW11.XPCCD = FFWREC.XPCCD; /* One product category*/

  FE0HW11.YPGCD = FFWREC.YPGCD; /* One type group*/

  try
    call "FF2930" ("S ", SQLCA, FE0HW11, FE0HW12) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "174"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FE0HW11.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0H174

Function FE0H200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FE0H220(); /* Format and display the map*/

  FE0H230(); /* Check attention identifier*/

  FE0H240(); /* Reset fields to normal intensity*/

  FE0H250(); /* Verify the entered data*/

  FE0H260(); /* Process valid input request*/


end // end FE0H200

// Format and converse the map
Function FE0H220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FE0HW00.FE0HWSWF == "Y") /* Map must be formatted*/
      FE0H221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FE0H222(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FE0HM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FE0HM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0HM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0HM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FE0HM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FE0HM002 alarm; /* Indicate sound alarm*/

  end

  converse FE0HM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FE0HM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0HM002.CAITEM; /* Application data*/


end // end FE0H220

// Format the display data
Function FE0H221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FE0HM002 initial; /* M001 input/output area*/

  FE0HW00.FE0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HM002.FE0HMPAG = FE0HW00.FE0HWPAG; /* Page number*/
  FE0HM002.FE0HMLRS = FE0HW00.FE0HWLRS; /* Left/right scroll amount*/

  FE0HM002.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0HM002.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FE0HM002.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0HM002.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FE0HM002.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0HM002.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FE0HM002.FFQMBYMO = FE0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/

  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Beginning column*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWCOL <= FE0HW00.FE0HWEND /* Until end of columns*/
   && FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* or end of data*/

    set FE0HM002.FE0HMMON[FE0HWIXC] skip; /* Forecast month*/

    FE0HM002.FE0HMMON[FE0HWIXC] = FE0HW01.FE0HMMON[FE0HWCOL];
    FE0HM002.FE0HMPRP[FE0HWIXC] = FE0HW02.FE0HMPRP[FE0HWCOL];
    FE0HM002.FE0HMPRA[FE0HWIXC] = FE0HW02.FE0HMPRA[FE0HWCOL];
    FE0HM002.FE0HMPRI[FE0HWIXC] = FE0HW02.FE0HMPRI[FE0HWCOL];
    FE0HM002.FE0HMPRC[FE0HWIXC] = FE0HW02.FE0HMPRC[FE0HWCOL];
    FE0HM002.FE0HMPRT[FE0HWIXC] = FE0HW02.FE0HMPRT[FE0HWCOL];
    FE0HM002.FE0HMNPP[FE0HWIXC] = FE0HW02.FE0HMNPP[FE0HWCOL];
    FE0HM002.FE0HMNPA[FE0HWIXC] = FE0HW02.FE0HMNPA[FE0HWCOL];
    FE0HM002.FE0HMNPI[FE0HWIXC] = FE0HW02.FE0HMNPI[FE0HWCOL];
    FE0HM002.FE0HMNPC[FE0HWIXC] = FE0HW02.FE0HMNPC[FE0HWCOL];
    FE0HM002.FE0HMNPT[FE0HWIXC] = FE0HW02.FE0HMNPT[FE0HWCOL];

    if (COMMAREA.CACHGFL == "Y") /* and user allowed to chg data*/
      set FE0HM002.FE0HMPRP[FE0HWIXC] normal; /* Pral prop dmd*/
      set FE0HM002.FE0HMNPP[FE0HWIXC] normal; /* Pral natl pdmd*/
    else
      set FE0HM002.FE0HMPRP[FE0HWIXC] skip; /* Pral prop dmd*/
      set FE0HM002.FE0HMNPP[FE0HWIXC] skip; /* Pral natl pdmd*/
    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H221

// Check change authorization
Function FE0H222()
   /* ------------------------------------------------------------*/
   /* Autoskip fields in columns prior to current.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8 /* Until end of columns*/
   && FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* or end of data*/

    if (FE0HW01.FF4FCTMO[FE0HWCOL] < FE0HW01.FFQCURMO /* Month LT curr*/
     || FE0HW01.FF4FCTMO[FE0HWCOL] > FE0HW01.FFQMBYMO /* or GT buy*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB"         /* or subtotal*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM")        /* or accum total*/

      set FE0HM002.FE0HMPRP[FE0HWIXC] skip; /* Pral prop dmd*/
      set FE0HM002.FE0HMNPP[FE0HWIXC] skip; /* Pral natl pdmd*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H222

// Check attention identifier
Function FE0H230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FE0HM002.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13 and user can't update data send error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* If PF13 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(403); /* Key invalid for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FE0G"; /* Return to application*/
      COMMAREA.CAITEM = "FE0HM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FE0H230

// Reset highlighted fields
Function FE0H240()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FE0HM002.FE0HMPAG initialAttributes; /* Page number*/
  set FE0HM002.FE0HMLRS initialAttributes; /* Left/right scroll amount*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/

  while (FE0HW00.FE0HWIXC <= 8 /* Until end of columns*/
   && FE0HM002.FE0HMMON[FE0HWIXC] > " ") /* or end of data*/

    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FE0HM002.FE0HMPRP[FE0HWIXC] normal; /* Pral prop dmd*/
      set FE0HM002.FE0HMNPP[FE0HWIXC] normal; /* Pral natl pdmd*/
    else
      set FE0HM002.FE0HMPRP[FE0HWIXC] skip; /* Pral prop dmd*/
      set FE0HM002.FE0HMNPP[FE0HWIXC] skip; /* Pral natl pdmd*/
    end

    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end

  set FE0HM002.CATOAP initialAttributes; /* TO application*/
  set FE0HM002.CAITEM initialAttributes; /* Application data*/


end // end FE0H240

// Verify the entered data
Function FE0H250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "250"; /* Module identification*/
    set FE0HM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FE0H251(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FE0H252(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save as work worksheet*/

    FE0H253(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/

    FE0H254(); /* Verify print request*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H255(); /* Verify M002 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FE0H250

// Verify page request
Function FE0H251()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS35(); /* Check M002 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FE0HM002.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.FE0HMPAG < 1 /* Less than minimum*/
   || FE0HM002.FE0HMPAG > 7) /* or greater than maximum*/

    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FE0HM002.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FE0H251

// Verify scroll request
Function FE0H252()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0HW00.FE0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FE0HW00.FE0HWBEG == FE0HW00.FE0HWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS35(); /* Check M002 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.FE0HMLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    set FE0HM002.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    set FE0HM002.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H252

// Verify save worksheet request
Function FE0H253()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS35(); /* Check M002 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "253"; /* Module identification*/
    set FE0HM002.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "253"; /* Module identification*/
    set FE0HM002.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H253

// Verify print request
Function FE0H254()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "254"; /* Module identification*/
    converseLib.validationFailed(438); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS35(); /* Check M002 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "254"; /* Module identification*/
    set FE0HM002.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "254"; /* Module identification*/
    set FE0HM002.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H254

// Verify M002 changed fields
Function FE0H255()
   /* ------------------------------------------------------------*/
   /* Verify any changed PRAL NATL PDMD field.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM002.FE0HMNPP[FE0HWIXC] != FE0HW02.FE0HMNPP[FE0HWEND])

      FFXREC.FFXCHAR = FE0HM002.FE0HMNPP[FE0HWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FE0HW10.FFRPNPDM[FE0HWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "255"; /* Module identification*/
        set FE0HM002.FE0HMNPP[FE0HWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed PRAL PROP DMD field.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM002.FE0HMPRP[FE0HWIXC] != FE0HW02.FE0HMPRP[FE0HWEND])

      FFXREC.FFXCHAR = FE0HM002.FE0HMPRP[FE0HWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FE0HW10.FFRPPRDM[FE0HWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "255"; /* Module identification*/
        set FE0HM002.FE0HMPRP[FE0HWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "255"; /* Module identification*/
    set FE0HM002.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM002.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "255"; /* Module identification*/
    set FE0HM002.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H255

// Process valid input request
Function FE0H260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FE0HM002.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page specified*/

      if (FE0HM002.FE0HMPAG < FE0HW00.FE0HWPAG) /* Page backward*/

        FE0HW00.FE0HWPAD = -1; /* Page direction*/
      else
        FE0HW00.FE0HWPAD = +1; /* Page direction*/

      end

      FE0HW00.FE0HWPAG = FE0HM002.FE0HMPAG; /* Page number*/

    else

      FE0HW00.FE0HWPAG = FE0HW00.FE0HWPAG + FE0HW00.FE0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FE0HW00.FE0HWLRS = FE0HM002.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG - FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG < 1) /* Beginning LT minimum*/

      FE0HW00.FE0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "260"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FE0HW00.FE0HWLRS = FE0HM002.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG + FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG > FE0HW00.FE0HWMAX) /* Beginning GT maximum*/

      FE0HW00.FE0HWBEG = FE0HW00.FE0HWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "260"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save target worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H162(); /* Format/insert target worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FE0H164(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H266(); /* Process M002 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FE0HW01.FFWMODSW; /* Modified data exit switch*/


end // end FE0H260

// Process M002 changed fields
Function FE0H266()
   /* ------------------------------------------------------------*/
   /* If PRAL PROP DMD was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8) /* Until end of columns*/

    if (FE0HM002.FE0HMPRP[FE0HWIXC] != FE0HW02.FE0HMPRP[FE0HWCOL]
     && FE0HW01.FE0HMMON[FE0HWCOL] != "  SUB" /* and not subtotal*/
     && FE0HW01.FE0HMMON[FE0HWCOL] != "ACCUM") /* and not accum total*/

      FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/
        FE0HS37(); /* ===> Process PRAL PROP DMD change*/
      end

      while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
          FE0HS37(); /* ===> Process PRAL PROP DMD change*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/
      end

      sysVar.arrayIndex = FE0HW00.FE0HWCOL; /* Current column*/

      FE0HS37(); /* ===> Process PRAL PROP DMD change*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If PRAL NATL PDMD was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8) /* Until end of columns*/

    if (FE0HM002.FE0HMNPP[FE0HWIXC] != FE0HW02.FE0HMNPP[FE0HWCOL]
     && FE0HW01.FE0HMMON[FE0HWCOL] != "  SUB" /* and not subtotal*/
     && FE0HW01.FE0HMMON[FE0HWCOL] != "ACCUM") /* and not accum total*/

      FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/
        FE0HS39(); /* Process PRAL NATL PDMD change*/
      end

      while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
          FE0HS39(); /* Process PRAL NATL PDMD change*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/
      end

      sysVar.arrayIndex = FE0HW00.FE0HWCOL; /* Current column*/

      FE0HS39(); /* Process PRAL NATL PDMD change*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H266

Function FE0H300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FE0H320(); /* Format and display the map*/

  FE0H330(); /* Check attention identifier*/

  FE0H340(); /* Reset fields to normal intensity*/

  FE0H350(); /* Verify the entered data*/

  FE0H360(); /* Process valid input request*/


end // end FE0H300

// Format and converse the map
Function FE0H320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FE0HW00.FE0HWSWF == "Y") /* Map must be formatted*/
      FE0H321(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FE0HM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FE0HM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0HM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0HM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FE0HM003.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FE0HM003 alarm; /* Indicate sound alarm*/

  end

  converse FE0HM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FE0HM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0HM003.CAITEM; /* Application data*/


end // end FE0H320

// Format the display data
Function FE0H321()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FE0HM003 initial; /* M001 input/output area*/

  FE0HW00.FE0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HM003.FE0HMPAG = FE0HW00.FE0HWPAG; /* Page number*/
  FE0HM003.FE0HMLRS = FE0HW00.FE0HWLRS; /* Left/right scroll amount*/

  FE0HM003.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0HM003.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FE0HM003.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0HM003.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FE0HM003.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0HM003.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FE0HM003.FFQMBYMO = FE0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/

  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Beginning column*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWCOL <= FE0HW00.FE0HWEND /* Until end of columns*/
   && FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* or end of data*/

    set FE0HM003.FE0HMMON[FE0HWIXC] skip; /* Forecast month*/

    FE0HM003.FE0HMMON[FE0HWIXC] = FE0HW01.FE0HMMON[FE0HWCOL];
    FE0HM003.FE0HMTDP[FE0HWIXC] = FE0HW03.FE0HMTDP[FE0HWCOL];
    FE0HM003.FE0HMTDA[FE0HWIXC] = FE0HW03.FE0HMTDA[FE0HWCOL];
    FE0HM003.FE0HMTDI[FE0HWIXC] = FE0HW03.FE0HMTDI[FE0HWCOL];
    FE0HM003.FE0HMTDC[FE0HWIXC] = FE0HW03.FE0HMTDC[FE0HWCOL];
    FE0HM003.FE0HMTDT[FE0HWIXC] = FE0HW03.FE0HMTDT[FE0HWCOL];
    FE0HM003.FE0HMCAP[FE0HWIXC] = FE0HW03.FE0HWCAP[FE0HWCOL];
    FE0HM003.FE0HMTAF[FE0HWIXC] = FE0HW03.FE0HMTAF[FE0HWCOL];
    FE0HM003.FE0HMTAP[FE0HWIXC] = FE0HW03.FE0HMTAP[FE0HWCOL];

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H321

// Check attention identifier
Function FE0H330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FE0HM003.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13 and user can't update data send error*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* If PF13 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FE0G"; /* Return to application*/
      COMMAREA.CAITEM = "FE0HM003"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FE0H330

// Reset highlighted fields
Function FE0H340()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FE0HM003.FE0HMPAG initialAttributes; /* Page number*/
  set FE0HM003.FE0HMLRS initialAttributes; /* Left/right scroll amount*/

  set FE0HM003.CATOAP initialAttributes; /* TO application*/
  set FE0HM003.CAITEM initialAttributes; /* Application data*/


end // end FE0H340

// Verify the entered data
Function FE0H350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "350"; /* Module identification*/
    set FE0HM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FE0H351(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FE0H352(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H353(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/

    FE0H354(); /* Verify print request*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H355(); /* Verify M003 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FE0H350

// Verify page request
Function FE0H351()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "351"; /* Module identification*/
    set FE0HM003.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.FE0HMPAG < 1 /* Less than minimum*/
   || FE0HM003.FE0HMPAG > 7) /* or greater than maximum*/

    FFWREC.XXXMODID = "351"; /* Module identification*/
    set FE0HM003.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FE0H351

// Verify scroll request
Function FE0H352()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0HW00.FE0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FE0HW00.FE0HWBEG == FE0HW00.FE0HWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.FE0HMLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    set FE0HM003.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    set FE0HM003.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H352

// Verify save worksheet request
Function FE0H353()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "353"; /* Module identification*/
    set FE0HM003.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "353"; /* Module identification*/
    set FE0HM003.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H353

// Verify print request
Function FE0H354()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "354"; /* Module identification*/
    converseLib.validationFailed(438); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "354"; /* Module identification*/
    set FE0HM003.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "354"; /* Module identification*/
    set FE0HM003.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H354

// Verify M003 changed fields
Function FE0H355()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "355"; /* Module identification*/
    set FE0HM003.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM003.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "355"; /* Module identification*/
    set FE0HM003.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H355

// Process valid input request
Function FE0H360()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FE0HM003.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page specified*/

      if (FE0HM003.FE0HMPAG < FE0HW00.FE0HWPAG) /* Page backward*/

        FE0HW00.FE0HWPAD = -1; /* Page direction*/
      else
        FE0HW00.FE0HWPAD = +1; /* Page direction*/

      end

      FE0HW00.FE0HWPAG = FE0HM003.FE0HMPAG; /* Page number*/

    else

      FE0HW00.FE0HWPAG = FE0HW00.FE0HWPAG + FE0HW00.FE0HWPAD;
                                   /* Page number*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FE0HW00.FE0HWLRS = FE0HM003.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG - FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG < 1) /* Beginning LT minimum*/

      FE0HW00.FE0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "360"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FE0HW00.FE0HWLRS = FE0HM003.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG + FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG > FE0HW00.FE0HWMAX) /* Beginning GT maximum*/

      FE0HW00.FE0HWBEG = FE0HW00.FE0HWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "360"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If save target worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H162(); /* Format/insert target worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FE0H164(); /* Submit print request*/

    return; /* Return to previous process*/

  end


end // end FE0H360

Function FE0H400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FE0H420(); /* Format and display the map*/

  FE0H430(); /* Check attention identifier*/

  FE0H440(); /* Reset fields to normal intensity*/

  FE0H450(); /* Verify the entered data*/

  FE0H460(); /* Process valid input request*/


end // end FE0H400

// Format and converse the map
Function FE0H420()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FE0HW00.FE0HWSWF == "Y") /* Map must be formatted*/
      FE0H421(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FE0H422(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FE0HM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FE0HM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0HM004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0HM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FE0HM004.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FE0HM004 alarm; /* Indicate sound alarm*/

  end

  converse FE0HM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FE0HM004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0HM004.CAITEM; /* Application data*/


end // end FE0H420

// Format the display data
Function FE0H421()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FE0HM004 initial; /* M001 input/output area*/

  FE0HW00.FE0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HM004.FE0HMPAG = FE0HW00.FE0HWPAG; /* Page number*/
  FE0HM004.FE0HMLRS = FE0HW00.FE0HWLRS; /* Left/right scroll amount*/

  FE0HM004.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0HM004.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FE0HM004.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0HM004.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FE0HM004.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0HM004.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FE0HM004.FFQMBYMO = FE0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the future year indicator in the HIST FUT % line.*/
   /* ------------------------------------------------------------*/

  if (FF2REC.FF2ALCAT != "  ")
    FE0HM004.FE0HMFAI = "A"; /* Futr alt cat indicator*/
    FE0HM004.FE0HMPAI = "A"; /* Prop alt cat indicator*/
  end

  FE0HM004.FF2FUIND = FE0HW04.FF2FUIND; /* Futr yr ind*/

  if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
    set FE0HM004.FF2FUIND normal; /* Futr yr ind*/
  else
    set FE0HM004.FF2FUIND skip; /* Futr yr ind*/
  end

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/

  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Beginning column*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWCOL <= FE0HW00.FE0HWEND /* Until end of columns*/
   && FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* or end of data*/

    set FE0HM004.FE0HMMON[FE0HWIXC] skip; /* Forecast month*/

    FE0HM004.FE0HMMON[FE0HWIXC] = FE0HW01.FE0HMMON[FE0HWCOL];
    FE0HM004.FE0HMDFU[FE0HWIXC] = FE0HW04.FE0HMDFU[FE0HWCOL];
    FE0HM004.FE0HMDNF[FE0HWIXC] = FE0HW04.FE0HMDNF[FE0HWCOL];
    FE0HM004.FE0HMDTF[FE0HWIXC] = FE0HW04.FE0HMDTF[FE0HWCOL];
    FE0HM004.FE0HMDPR[FE0HWIXC] = FE0HW04.FE0HMDPR[FE0HWCOL];
    FE0HM004.FE0HMDNP[FE0HWIXC] = FE0HW04.FE0HMDNP[FE0HWCOL];
    FE0HM004.FE0HMDTP[FE0HWIXC] = FE0HW04.FE0HMDTP[FE0HWCOL];
    FE0HM004.FE0HMDCP[FE0HWIXC] = FE0HW04.FE0HMDCP[FE0HWCOL];
    FE0HM004.FE0HMPCF[FE0HWIXC] = FE0HW04.FE0HMPCF[FE0HWCOL];
    FE0HM004.FE0HMPRF[FE0HWIXC] = FE0HW04.FE0HMPRF[FE0HWCOL];
    FE0HM004.FE0HMDFF[FE0HWIXC] = FE0HW04.FE0HWDFF[FE0HWCOL];
    FE0HM004.FE0HMDHF[FE0HWIXC] = FE0HW04.FE0HWDHF[FE0HWCOL];
    FE0HM004.FE0HMDFI[FE0HWIXC] = FE0HW04.FE0HWDFI[FE0HWCOL];
    FE0HM004.FE0HMDHI[FE0HWIXC] = FE0HW04.FE0HWDHI[FE0HWCOL];

    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FE0HM004.FE0HMPCF[FE0HWIXC] normal; /* Cur prop fcst*/
      set FE0HM004.FE0HMDFF[FE0HWIXC] normal; /* Fcst fut %*/
    else
      set FE0HM004.FE0HMPCF[FE0HWIXC] skip; /* Cur prop fcst*/
      set FE0HM004.FE0HMDFF[FE0HWIXC] skip; /* Fcst fut %*/
    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H421

// Check change authorization
Function FE0H422()
   /* ------------------------------------------------------------*/
   /* Autoskip fields in columns prior to current.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8 /* Until end of columns*/
   && FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* or end of data*/

    if (FE0HW01.FF4FCTMO[FE0HWCOL] < FE0HW01.FFQCURMO /* Month LT curr*/
     || FE0HW01.FF4FCTMO[FE0HWCOL] > FE0HW01.FFQMBYMO /* Month GT buy*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB"         /* or subtotal*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM")        /* or accum total*/

      set FE0HM004.FE0HMPCF[FE0HWIXC] skip; /* Cur prop fcst*/

    end

    if (FE0HW01.FF4FCTMO[FE0HWCOL] <= FE0HW01.FFQMBYMO /* Month Le buy*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB"          /* or subtotal*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM")         /* or accum total*/

      set FE0HM004.FE0HMDFF[FE0HWIXC] skip; /* fcst fut %*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H422

// Check attention identifier
Function FE0H430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FE0HM004.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "430"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13 and user can't change data send error*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* If PF13 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "430"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FE0G"; /* Return to application*/
      COMMAREA.CAITEM = "FE0HM004"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "430"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FE0H430

// Reset highlighted fields
Function FE0H440()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FE0HM004.FE0HMPAG initialAttributes; /* Page number*/
  set FE0HM004.FE0HMLRS initialAttributes; /* Left/right scroll amount*/

  if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
    set FE0HM004.FF2FUIND normal; /* Futr yr ind*/
  else
    set FE0HM004.FF2FUIND skip; /* Futr yr ind*/
  end

  FE0HW00.FE0HWIXC = 1; /* Column index*/

  while (FE0HW00.FE0HWIXC <= 8 /* Until end of columns*/
   && FE0HM004.FE0HMMON[FE0HWIXC] > " ") /* or end of data*/

    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FE0HM004.FE0HMPCF[FE0HWIXC] normal; /* Cur prop fcst*/
      set FE0HM004.FE0HMDFF[FE0HWIXC] normal; /* Fcst fut %*/
    else
      set FE0HM004.FE0HMPCF[FE0HWIXC] skip; /* Cur prop fcst*/
      set FE0HM004.FE0HMDFF[FE0HWIXC] skip; /* Fcst fut %*/
    end

    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end

  set FE0HM004.CATOAP initialAttributes; /* TO application*/
  set FE0HM004.CAITEM initialAttributes; /* Application data*/


end // end FE0H440

// Verify the entered data
Function FE0H450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "450"; /* Module identification*/
    set FE0HM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FE0H451(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FE0H452(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H453(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/

    FE0H454(); /* Verify print request*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H455(); /* Verify M004 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FE0H450

// Verify page request
Function FE0H451()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS40(); /* Check M004 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "451"; /* Module identification*/
    set FE0HM004.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FE0HMPAG < 1 /* Less than minimum*/
   || FE0HM004.FE0HMPAG > 7) /* or greater than maximum*/

    FFWREC.XXXMODID = "451"; /* Module identification*/
    set FE0HM004.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FE0H451

// Verify scroll request
Function FE0H452()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0HW00.FE0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FE0HW00.FE0HWBEG == FE0HW00.FE0HWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS40(); /* Check M004 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FE0HMLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    set FE0HM004.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    set FE0HM004.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H452

// Verify save worksheet request
Function FE0H453()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS40(); /* Check M004 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "453"; /* Module identification*/
    set FE0HM004.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "453"; /* Module identification*/
    set FE0HM004.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H453

// Verify print request
Function FE0H454()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "454"; /* Module identification*/
    converseLib.validationFailed(438); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS40(); /* Check M004 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "454"; /* Module identification*/
    set FE0HM004.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "454"; /* Module identification*/
    set FE0HM004.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H454

// Verify M004 changed fields
Function FE0H455()
   /* ------------------------------------------------------------*/
   /* Verify a changed FUTR YR IND field.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FF2FUIND != FE0HW04.FF2FUIND) /* Field changed*/

    if (FE0HM004.FF2FUIND == "1" /* One year futures*/
     || FE0HM004.FF2FUIND == "2") /* Two year futures*/

       /* NEXT SENTENCE*/

    else

      FFWREC.XXXMODID = "455"; /* Module identification*/
      set FE0HM004.FF2FUIND cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Data missing or invalid*/

    end

  end
   /* ------------------------------------------------------------*/
   /* Verify any changed CURR PROP FCST field.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM004.FE0HMPCF[FE0HWIXC] != FE0HW04.FE0HMPCF[FE0HWEND])

      FFXREC.FFXCHAR = FE0HM004.FE0HMPCF[FE0HWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FE0HW10.FFRCPRFC[FE0HWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "455"; /* Module identification*/
        set FE0HM004.FE0HMPCF[FE0HWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "455"; /* Module identification*/
    set FE0HM004.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "455"; /* Module identification*/
    set FE0HM004.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H455

// Process valid input request
Function FE0H460()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FE0HM004.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page specified*/

      if (FE0HM004.FE0HMPAG < FE0HW00.FE0HWPAG) /* Page backward*/

        FE0HW00.FE0HWPAD = -1; /* Page direction*/
      else
        FE0HW00.FE0HWPAD = +1; /* Page direction*/

      end

      FE0HW00.FE0HWPAG = FE0HM004.FE0HMPAG; /* Page number*/

    else

      FE0HW00.FE0HWPAG = FE0HW00.FE0HWPAG + FE0HW00.FE0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FE0HW00.FE0HWLRS = FE0HM004.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG - FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG < 1) /* Beginning LT minimum*/

      FE0HW00.FE0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "460"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FE0HW00.FE0HWLRS = FE0HM004.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG + FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG > FE0HW00.FE0HWMAX) /* Beginning GT maximum*/

      FE0HW00.FE0HWBEG = FE0HW00.FE0HWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "460"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save target worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H162(); /* Format/insert target worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FE0H164(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H466(); /* Process M004 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FE0HW01.FFWMODSW; /* Modified data exit switch*/


end // end FE0H460

// Process M004 changed fields
Function FE0H466()
   /* ------------------------------------------------------------*/
   /* If FUTR YR IND was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FF2FUIND != FE0HW04.FF2FUIND) /* Futr yr ind*/

    FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/
    FE0HS41(); /* Process FUTR YR IND change*/

  end

   /* ------------------------------------------------------------*/
   /* If   CURR PROP FCST was changed, ( curr mo to the buy mo)*/
     /* or FCST FUT %     was changed, ( past the buy mo      )*/
        /* calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8) /* Until end of columns*/

    /* ------------------------------------------------------------*/
     /* If   CURR PROP FCST was changed,*/
          /* - DMD FCST will change*/
    /* ------------------------------------------------------------*/

    if (FE0HM004.FE0HMPCF[FE0HWIXC] != FE0HW04.FE0HMPCF[FE0HWCOL]
     && FE0HW01.FE0HMMON[FE0HWCOL] != "  SUB" /* and not subtotal*/
     && FE0HW01.FE0HMMON[FE0HWCOL] != "ACCUM") /* and not accum total*/

      FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/
        FE0HS42(); /* Process CURR PROP FCST change*/
      end

      while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
          FE0HS42(); /* Process CURR PROP FCST change*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/
      end

      sysVar.arrayIndex = FE0HW00.FE0HWCOL; /* Current column*/

      FE0HS42(); /* Process CURR PROP FCST change*/

      FE0HS44(); /* Calculate FCST PROP IDX*/

      FE0HS17(); /* Calculations based on demand*/

    else

      /* ------------------------------------------------------------*/
         /* if FCST FUT %     was changed,*/
            /* - Tot Futures will change*/
      /* ------------------------------------------------------------*/

      if (FE0HM004.FE0HMDFF[FE0HWIXC] != FE0HW04.FE0HWDFF[FE0HWCOL]
       && FE0HW01.FF4FCTMO[FE0HWCOL] > FE0HW01.FFQMBYMO /* ===> buy mo*/
       && FE0HW01.FE0HMMON[FE0HWCOL] != "  SUB"         /* and not subtotal*/
       && FE0HW01.FE0HMMON[FE0HWCOL] != "ACCUM")        /* and not accum total*/

        FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/

        FE0HS46(); /* Process FCST FUT %     change*/

        FE0HS44(); /* Calculate FCST PROP IDX*/

      end /* ===> FCST FUT % was changed check*/

    end /* ===> Prop changed check*/

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H466

Function FE0H500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FE0H520(); /* Format and display the map*/

  FE0H530(); /* Check attention identifier*/

  FE0H540(); /* Reset fields to normal intensity*/

  FE0H550(); /* Verify the entered data*/

  FE0H560(); /* Process valid input request*/


end // end FE0H500

// Format and converse the map
Function FE0H520()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FE0HW00.FE0HWSWF == "Y") /* Map must be formatted*/
      FE0H521(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FE0H522(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FE0HM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FE0HM005.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0HM005.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0HM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FE0HM005.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FE0HM005 alarm; /* Indicate sound alarm*/

  end

  converse FE0HM005 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FE0HM005.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0HM005.CAITEM; /* Application data*/


end // end FE0H520

// Format the display data
Function FE0H521()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FE0HM005 initial; /* M005 input/output area*/

  FE0HW00.FE0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HM005.FE0HMPAG = FE0HW00.FE0HWPAG; /* Page number*/
  FE0HM005.FE0HMLRS = FE0HW00.FE0HWLRS; /* Left/right scroll amount*/

  FE0HM005.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0HM005.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FE0HM005.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0HM005.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FE0HM005.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0HM005.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FE0HM005.FFQMBYMO = FE0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the demand year indicator in the HIST SEAS IDX line.*/
   /* ------------------------------------------------------------*/

  if (FF2REC.FF2ALCAT != "  ")
    FE0HM005.FE0HMDAI = "A"; /* Demand alt cat indicator*/
  end

  FE0HM005.FF2DMIND = FE0HW05.FF2DMIND; /* Dmd yr ind*/

  if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
    set FE0HM005.FF2DMIND normal; /* Dmd yr ind*/
  else
    set FE0HM005.FF2DMIND skip; /* Dmd yr ind*/
  end

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/

  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Beginning column*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWCOL <= FE0HW00.FE0HWEND /* Until end of columns*/
   && FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* or end of data*/

    set FE0HM005.FE0HMMON[FE0HWIXC] skip; /* Forecast month*/

    FE0HM005.FE0HMMON[FE0HWIXC] = FE0HW01.FE0HMMON[FE0HWCOL];
    FE0HM005.FE0HMFCD[FE0HWIXC] = FE0HW05.FE0HMFCD[FE0HWCOL];
    FE0HM005.FE0HMMDM[FE0HWIXC] = FE0HW05.FE0HMMDM[FE0HWCOL];
    FE0HM005.FE0HMFSI[FE0HWIXC] = FE0HW05.FE0HWFSI[FE0HWCOL];
    FE0HM005.FE0HMHSI[FE0HWIXC] = FE0HW05.FE0HWHSI[FE0HWCOL];
    FE0HM005.FE0HMRSI[FE0HWIXC] = FE0HW05.FE0HWRSI[FE0HWCOL];
    FE0HM005.FE0HMFFR[FE0HWIXC] = FE0HW05.FE0HMFFR[FE0HWCOL];
    FE0HW05.FE0HWFFR[FE0HWCOL] = FE0HW05.FE0HMFFR[FE0HWCOL];
    FE0HM005.FE0HMHFR[FE0HWIXC] = FE0HW05.FE0HWHFR[FE0HWCOL];
    FE0HM005.FE0HMCSF[FE0HWIXC] = FE0HW05.FE0HMCSF[FE0HWCOL];
    FE0HM005.FE0HMMSL[FE0HWIXC] = FE0HW05.FE0HMMSL[FE0HWCOL];

    if (FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB" /* Season subtotal*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM") /* or accum total*/

      set FE0HM005.FE0HMFCD[FE0HWIXC] skip; /* Cur dmd fcst*/
      set FE0HM005.FE0HMFFR[FE0HWIXC] skip; /* Fcst fill rt*/

    else

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        set FE0HM005.FE0HMFCD[FE0HWIXC] normal; /* Cur dmd fcst*/
        set FE0HM005.FE0HMFFR[FE0HWIXC] normal; /* Fcst fill rt*/
      else
        set FE0HM005.FE0HMFCD[FE0HWIXC] skip; /* Cur dmd fcst*/
        set FE0HM005.FE0HMFFR[FE0HWIXC] skip; /* Fcst fill rt*/
      end

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H521

// Check change authorization
Function FE0H522()
   /* ------------------------------------------------------------*/
   /* Autoskip fields in columns prior to current.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8 /* Until end of columns*/
   && FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* or end of data*/

    if (FE0HW01.FF4FCTMO[FE0HWCOL] < FE0HW01.FFQCURMO /* Month LT curr*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB"         /* or subtotal*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM")        /* or accum total*/

      set FE0HM005.FE0HMFCD[FE0HWIXC] skip; /* Cur dmd fcst*/
      set FE0HM005.FE0HMFFR[FE0HWIXC] skip; /* Fcst fill rt*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H522

// Check attention identifier
Function FE0H530()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FE0HM005.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13 and user can't change data send error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* If PF13 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* If user cant' chg data*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FE0G"; /* Return to application*/
      COMMAREA.CAITEM = "FE0HM005"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FE0H530

// Reset highlighted fields
Function FE0H540()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FE0HM005.FE0HMPAG initialAttributes; /* Page number*/
  set FE0HM005.FE0HMLRS initialAttributes; /* Left/right scroll amount*/

  if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
    set FE0HM005.FF2DMIND normal; /* Dmd yr ind*/
  else
    set FE0HM005.FF2DMIND skip; /* Dmd yr ind*/
  end

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8 /* Until end of columns*/
   && FE0HM005.FE0HMMON[FE0HWIXC] > " ") /* or end of data*/

    if (FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB" /* Season subtotal*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM" /* or accum total*/
     || FE0HW01.FF4FCTMO[FE0HWCOL] < FE0HW01.FFQCURMO)

         /* NEXT SENTENCE*/

    else
      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        set FE0HM005.FE0HMFCD[FE0HWIXC] normal; /* Cur dmd fcst*/
        set FE0HM005.FE0HMFFR[FE0HWIXC] normal; /* Fcst fill rt*/
      else
        set FE0HM005.FE0HMFCD[FE0HWIXC] skip; /* Cur dmd fcst*/
        set FE0HM005.FE0HMFFR[FE0HWIXC] skip; /* Fcst fill rt*/
      end
    end

    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/
    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/

  end

  set FE0HM005.CATOAP initialAttributes; /* TO application*/
  set FE0HM005.CAITEM initialAttributes; /* Application data*/


end // end FE0H540

// Verify the entered data
Function FE0H550()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "550"; /* Module identification*/
    set FE0HM005.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FE0H551(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FE0H552(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H553(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/

    FE0H554(); /* Verify print request*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H555(); /* Verify M005 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FE0H550

// Verify page request
Function FE0H551()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS50(); /* Check M005 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "551"; /* Module identification*/
    set FE0HM005.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FE0HMPAG < 1 /* Less than minimum*/
   || FE0HM005.FE0HMPAG > 7) /* or greater than maximum*/

    FFWREC.XXXMODID = "551"; /* Module identification*/
    set FE0HM005.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FE0H551

// Verify scroll request
Function FE0H552()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0HW00.FE0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FE0HW00.FE0HWBEG == FE0HW00.FE0HWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS50(); /* Check M005 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FE0HMLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    set FE0HM005.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    set FE0HM005.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H552

// Verify save worksheet request
Function FE0H553()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS50(); /* Check M005 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "553"; /* Module identification*/
    set FE0HM005.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "553"; /* Module identification*/
    set FE0HM005.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H553

// Verify print request
Function FE0H554()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "554"; /* Module identification*/
    converseLib.validationFailed(438); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS50(); /* Check M005 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "554"; /* Module identification*/
    set FE0HM005.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "554"; /* Module identification*/
    set FE0HM005.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H554

// Verify M005 changed fields
Function FE0H555()
   /* ------------------------------------------------------------*/
   /* Verify any changed FCST FILL RT field.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM005.FE0HMFFR[FE0HWIXC] != FE0HW05.FE0HMFFR[FE0HWEND])

      if (FE0HM005.FE0HMFFR[FE0HWIXC] >= 0 /* Rate GE 0*/
       && FE0HM005.FE0HMFFR[FE0HWIXC] <= 100) /* and LE 100*/

         /* NEXT SENTENCE*/

      else

        FFWREC.XXXMODID = "555"; /* Module identification*/
        set FE0HM005.FE0HMFFR[FE0HWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end


   /* ------------------------------------------------------------*/
   /* Verify a changed DMD YR IND field.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FF2DMIND != FE0HW05.FF2DMIND) /* Field changed*/

    if (FE0HM005.FF2DMIND == "1" /* One year futures*/
     || FE0HM005.FF2DMIND == "2") /* or two years futures*/

       /* NEXT SENTENCE*/

    else

      FFWREC.XXXMODID = "555"; /* Module identification*/
      set FE0HM005.FF2DMIND cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Data missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed CURR DMD FCST field.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM005.FE0HMFCD[FE0HWIXC] != FE0HW05.FE0HMFCD[FE0HWEND])

      FFXREC.FFXCHAR = FE0HM005.FE0HMFCD[FE0HWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FE0HW10.FFRCDMFC[FE0HWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "555"; /* Module identification*/
        set FE0HM005.FE0HMFCD[FE0HWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "555"; /* Module identification*/
    set FE0HM005.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "555"; /* Module identification*/
    set FE0HM005.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H555

// Process valid input request
Function FE0H560()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FE0HM005.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page specified*/

      if (FE0HM005.FE0HMPAG < FE0HW00.FE0HWPAG) /* Page backward*/

        FE0HW00.FE0HWPAD = -1; /* Page direction*/
      else
        FE0HW00.FE0HWPAD = +1; /* Page direction*/

      end

      FE0HW00.FE0HWPAG = FE0HM005.FE0HMPAG; /* Page number*/

    else

      FE0HW00.FE0HWPAG = FE0HW00.FE0HWPAG + FE0HW00.FE0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FE0HW00.FE0HWLRS = FE0HM005.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG - FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG < 1) /* Beginning LT minimum*/

      FE0HW00.FE0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "560"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FE0HW00.FE0HWLRS = FE0HM005.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG + FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG > FE0HW00.FE0HWMAX) /* Beginning GT maximum*/

      FE0HW00.FE0HWBEG = FE0HW00.FE0HWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "560"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save target worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H162(); /* Format/insert target worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FE0H164(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H566(); /* Process M005 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FE0HW01.FFWMODSW; /* Modified data exit switch*/


end // end FE0H560

// Process M005 changed fields
Function FE0H566()
   /* ------------------------------------------------------------*/
   /* If DMD YR IND was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  if (FE0HM005.FF2DMIND != FE0HW05.FF2DMIND) /* Futr yr ind*/

    FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/

    FE0HS51(); /* Process DMD YR IND change*/

  end

   /* ------------------------------------------------------------*/
   /* If CURR DMD FCST was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8) /* Until end of columns*/

    if (FE0HM005.FE0HMFCD[FE0HWIXC] != FE0HW05.FE0HMFCD[FE0HWCOL]
     && FE0HW01.FE0HMMON[FE0HWCOL] != "  SUB" /* and not subtotal*/
     && FE0HW01.FE0HMMON[FE0HWCOL] != "ACCUM") /* and not accum total*/

      FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/

      sysVar.arrayIndex = FE0HW00.FE0HWCOL; /* Current column*/

      FE0HS52(); /* Process CURR DMD FCST change*/

      FE0HW00.FE0HWPOS = FE0HW00.FE0HWCOL;
      while (FE0HW01.FE0HMMON[FE0HWPOS] > " ") /* more fcst month*/

        if ("  SUB" in FE0HW01.FE0HMMON from FE0HWPOS) /* Season subtotal*/

          FE0HS52(); /* Process CURR DMD FCST change*/

        end

        if ("ACCUM" in FE0HW01.FE0HMMON from FE0HWPOS) /* accum total*/

          FE0HS52(); /* Process CURR DMD FCST change*/

        end

        FE0HW00.FE0HWPOS = sysVar.arrayIndex + 1;

      end

      FE0HS17(); /* Calculations based on demand*/

      FE0HS44(); /* Calculate FCST PROP IDX*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If FCST FILL RT was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/
  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Current column*/

  while (FE0HW00.FE0HWIXC <= 8) /* Until end of columns*/

    if (FE0HM005.FE0HMFFR[FE0HWIXC] != FE0HW05.FE0HMFFR[FE0HWCOL]
     && FE0HW01.FE0HMMON[FE0HWCOL] != "  SUB" /* and not subtotal*/
     && FE0HW01.FE0HMMON[FE0HWCOL] != "ACCUM") /* and not accum total*/

      FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/

      FE0HS54(); /* Process FCST FILL RT change*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H566

Function FE0H600()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FE0H620(); /* Format and display the map*/

  FE0H630(); /* Check attention identifier*/

  FE0H640(); /* Reset fields to normal intensity*/

  FE0H650(); /* Verify the entered data*/

  FE0H660(); /* Process valid input request*/


end // end FE0H600

// Format and converse the map
Function FE0H620()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FE0HW00.FE0HWSWF == "Y") /* Map must be formatted*/
      FE0H621(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FE0HM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FE0HM006.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0HM006.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0HM006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FE0HM006.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FE0HM006 alarm; /* Indicate sound alarm*/

  end

  converse FE0HM006 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FE0HM006.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0HM006.CAITEM; /* Application data*/


end // end FE0H620

// Format the display data
Function FE0H621()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FE0HM006 initial; /* M006 input/output area*/

  FE0HW00.FE0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HM006.FE0HMPAG = FE0HW00.FE0HWPAG; /* Page number*/
  FE0HM006.FE0HMLRS = FE0HW00.FE0HWLRS; /* Left/right scroll amount*/

  FE0HM006.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0HM006.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FE0HM006.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0HM006.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FE0HM006.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0HM006.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FE0HM006.FFQMBYMO = FE0HW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 1; /* Column index*/

  FE0HW00.FE0HWCOL = FE0HW00.FE0HWBEG; /* Beginning column*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWCOL <= FE0HW00.FE0HWEND /* Until end of columns*/
   && FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* or end of data*/

    set FE0HM006.FE0HMMON[FE0HWIXC] skip; /* Forecast month*/

    FE0HM006.FE0HMMON[FE0HWIXC] = FE0HW01.FE0HMMON[FE0HWCOL];
    FE0HM006.FE0HMCSF[FE0HWIXC] = FE0HW05.FE0HMCSF[FE0HWCOL];
    FE0HM006.FE0HMMSL[FE0HWIXC] = FE0HW05.FE0HMMSL[FE0HWCOL];
    FE0HM006.FE0HMDUE[FE0HWIXC] = FE0HW06.FE0HMDUE[FE0HWCOL];
    FE0HM006.FE0HMQBY[FE0HWIXC] = FE0HW06.FE0HMQBY[FE0HWCOL];
    FE0HM006.FE0HMTBY[FE0HWIXC] = FE0HW06.FE0HMTBY[FE0HWCOL];
    FE0HM006.FE0HMBAL[FE0HWIXC] = FE0HW06.FE0HMBAL[FE0HWCOL];
    FE0HM006.FE0HMSBY[FE0HWIXC] = FE0HW06.FE0HMSBY[FE0HWCOL];
    FE0HM006.FE0HMFCT[FE0HWIXC] = FE0HW06.FE0HMFCT[FE0HWCOL];
    FE0HM006.FE0HMTUR[FE0HWIXC] = FE0HW06.FE0HWTUR[FE0HWCOL];
    FE0HM006.FE0HMDIR[FE0HWIXC] = FE0HW06.FE0HMDIR[FE0HWCOL];
    FE0HM006.FE0HMNIL[FE0HWIXC] = FE0HW06.FE0HMNIL[FE0HWCOL];

    if (FE0HW01.FE0HMMON[FE0HWCOL] != "  SUB" /* Season subtotal*/
     && FE0HW01.FE0HMMON[FE0HWCOL] != "ACCUM") /* & accum total*/

      FE0HM006.FE0HMINB[FE0HWIXC] = FE0HW06.FE0HMINB[FE0HWCOL];
      FE0HM006.FE0HMSUP[FE0HWIXC] = FE0HW06.FE0HMSUP[FE0HWCOL];
      FE0HM006.FE0HMINE[FE0HWIXC] = FE0HW06.FE0HMINE[FE0HWCOL];
      FE0HM006.FE0HMSTK[FE0HWIXC] = FE0HW06.FE0HMSTK[FE0HWCOL];

    end

    if (FE0HW01.FF4FCTMO[FE0HWCOL] >= FE0HW01.FFQCURMO) /* Fcst mo GE contp*/
      set FE0HM006.FE0HMINB[FE0HWIXC] skip; /* Beg inv*/
      set FE0HM006.FE0HMDUE[FE0HWIXC] skip; /* Prod due*/
    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Column index*/

  end


end // end FE0H621

// Check attention identifier
Function FE0H630()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FE0HM006.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "630"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13 and user can't chg data send error*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* If PF13 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "630"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FE0G"; /* Return to application*/
      COMMAREA.CAITEM = "FE0HM006"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "630"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FE0H630

// Reset highlighted fields
Function FE0H640()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FE0HM006.FE0HMPAG initialAttributes; /* Page number*/
  set FE0HM006.FE0HMLRS initialAttributes; /* Left/right scroll amount*/

  set FE0HM006.CATOAP initialAttributes; /* TO application*/
  set FE0HM006.CAITEM initialAttributes; /* Application data*/


end // end FE0H640

// Verify the entered data
Function FE0H650()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "650"; /* Module identification*/
    set FE0HM006.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FE0H651(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FE0H652(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H653(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/

    FE0H654(); /* Verify print request*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H655(); /* Verify M006 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FE0H650

// Verify page request
Function FE0H651()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "651"; /* Module identification*/
    set FE0HM006.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.FE0HMPAG < 1 /* Less than minimum*/
   || FE0HM006.FE0HMPAG > 7) /* or greater than maximum*/

    FFWREC.XXXMODID = "651"; /* Module identification*/
    set FE0HM006.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FE0H651

// Verify scroll request
Function FE0H652()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0HW00.FE0HWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FE0HW00.FE0HWBEG == FE0HW00.FE0HWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.FE0HMLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    set FE0HM006.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    set FE0HM006.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H652

// Verify save worksheet request
Function FE0H653()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "653"; /* Module identification*/
    set FE0HM006.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "653"; /* Module identification*/
    set FE0HM006.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H653

// Verify print request
Function FE0H654()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "654"; /* Module identification*/
    converseLib.validationFailed(438); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "654"; /* Module identification*/
    set FE0HM006.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "654"; /* Module identification*/
    set FE0HM006.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H654

// Verify M006 changed fields
Function FE0H655()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.FE0HMLRS != FE0HW00.FE0HWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "655"; /* Module identification*/
    set FE0HM006.FE0HMLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM006.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "655"; /* Module identification*/
    set FE0HM006.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H655

// Process valid input request
Function FE0H660()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FE0HM006.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page specified*/

      if (FE0HM006.FE0HMPAG < FE0HW00.FE0HWPAG) /* Page backward*/

        FE0HW00.FE0HWPAD = -1; /* Page direction*/
      else
        FE0HW00.FE0HWPAD = +1; /* Page direction*/

      end

      FE0HW00.FE0HWPAG = FE0HM006.FE0HMPAG; /* Page number*/

    else

      FE0HW00.FE0HWPAG = FE0HW00.FE0HWPAG + FE0HW00.FE0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FE0HW00.FE0HWLRS = FE0HM006.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG - FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG < 1) /* Beginning LT minimum*/

      FE0HW00.FE0HWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "660"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FE0HW00.FE0HWLRS = FE0HM006.FE0HMLRS; /* Scroll amount*/

    FE0HW00.FE0HWBEG = FE0HW00.FE0HWBEG + FE0HW00.FE0HWLRS;

    if (FE0HW00.FE0HWBEG > FE0HW00.FE0HWMAX) /* Beginning GT maximum*/

      FE0HW00.FE0HWBEG = FE0HW00.FE0HWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "660"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save target worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H162(); /* Format/insert target worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FE0H164(); /* Submit print request*/

    return; /* Return to previous process*/

  end


end // end FE0H660

// Display FORECAST COMMENTS
Function FE0H700()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FE0H720(); /* Format and display the map*/

  FE0H730(); /* Check attention identifier*/

  FE0H740(); /* Reset fields to normal intensity*/

  FE0H750(); /* Verify the entered data*/

  FE0H760(); /* Process valid input request*/


end // end FE0H700

// Format and converse the map
Function FE0H720()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FE0HW00.FE0HWSWF == "Y") /* Map must be formatted*/
      FE0H721(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FE0HM007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FE0HM007.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0HM007.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0HM007.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FE0HM007.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FE0HM007 alarm; /* Indicate sound alarm*/

  end

  converse FE0HM007 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FE0HM007.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0HM007.CAITEM; /* Application data*/


end // end FE0H720

// Format the display data
Function FE0H721()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FE0HM007 initial; /* M001 input/output area*/

  FE0HW00.FE0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HM007.FE0HMPAG = FE0HW00.FE0HWPAG; /* Page number*/

  FE0HM007.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0HM007.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FE0HM007.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0HM007.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FE0HM007.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0HM007.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each line from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXL = 1; /* Line index*/

  while (FE0HW00.FE0HWIXL <= 10) /* Until end of lines*/

    FE0HM007.FFPCOMNT[FE0HWIXL] = FE0HW07.FFPCOMNT[FE0HWIXL];

    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FE0HM007.FFPCOMNT[FE0HWIXL] normal; /* Comment text*/
    else
      set FE0HM007.FFPCOMNT[FE0HWIXL] skip; /* Comment text*/
    end

    FE0HW00.FE0HWIXL = FE0HW00.FE0HWIXL + 1; /* Line index*/

  end


end // end FE0H721

// Check attention identifier
Function FE0H730()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FE0HM007.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FE0HM007.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "730"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13 and user can't change data send error*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* If PF13 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "730"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FE0G"; /* Return to application*/
      COMMAREA.CAITEM = "FE0HM007"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "730"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FE0H730

// Reset highlighted fields
Function FE0H740()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FE0HM007.FE0HMPAG initialAttributes; /* Page number*/

  FE0HW00.FE0HWIXL = 1; /* Line index*/

  while (FE0HW00.FE0HWIXL <= 10) /* Until end of lines*/

    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FE0HM007.FFPCOMNT[FE0HWIXL] normal; /* Comment text*/
    else
      set FE0HM007.FFPCOMNT[FE0HWIXL] skip; /* Comment text*/
    end

    FE0HW00.FE0HWIXL = FE0HW00.FE0HWIXL + 1; /* Line index*/

  end

  set FE0HM007.CATOAP initialAttributes; /* TO application*/
  set FE0HM007.CAITEM initialAttributes; /* Application data*/


end // end FE0H740

// Verify the entered data
Function FE0H750()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FE0HM007.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "750"; /* Module identification*/
    set FE0HM007.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FE0H751(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H753(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/

    FE0H754(); /* Verify print request*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H755(); /* Verify M007 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FE0H750

// Verify page request
Function FE0H751()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FE0HS70(); /* Check M007 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FE0HM007.FE0HMPAG < 1 /* Less than minimum*/
   || FE0HM007.FE0HMPAG > 7) /* or greater than maximum*/

    FFWREC.XXXMODID = "751"; /* Module identification*/
    set FE0HM007.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FE0H751

// Verify save worksheet request
Function FE0H753()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS70(); /* Check M007 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM007.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "753"; /* Module identification*/
    set FE0HM007.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H753

// Verify print request
Function FE0H754()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "754"; /* Module identification*/
    converseLib.validationFailed(438); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FE0HS70(); /* Check M007 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM007.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "754"; /* Module identification*/
    set FE0HM007.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H754

// Verify M007 changed fields
Function FE0H755()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM007.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "755"; /* Module identification*/
    set FE0HM007.FE0HMPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FE0H755

// Process valid input request
Function FE0H760()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    FE0HW00.FE0HWPAD = -1; /* Page direction*/

    if (FE0HM007.FE0HMPAG != FE0HW00.FE0HWPAG) /* Page specified*/

      FE0HW00.FE0HWPAG = FE0HM007.FE0HMPAG; /* Page number*/
    else
      FE0HW00.FE0HWPAG = FE0HW00.FE0HWPAG + FE0HW00.FE0HWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save target worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save target worksheet*/

    FE0H162(); /* Format/insert target worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FE0H164(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FE0H764(); /* Process M007 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FE0HW01.FFWMODSW; /* Modified data exit switch*/


end // end FE0H760

// Process M007 changed fields
Function FE0H764()
   /* ------------------------------------------------------------*/
   /* Save any changed comment lines in the map display storage.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXL = 1; /* Line index*/

  while (FE0HW00.FE0HWIXL <= 10) /* Until end of lines*/

    if (FE0HM007.FFPCOMNT[FE0HWIXL] != FE0HW07.FFPCOMNT[FE0HWIXL])

      FE0HW07.FFPCOMNT[FE0HWIXL] = FE0HM007.FFPCOMNT[FE0HWIXL];

      FE0HW01.FFWMODSW = "Y"; /* Modified data switch*/

    end

    FE0HW00.FE0HWIXL = FE0HW00.FE0HWIXL + 1; /* Line index*/

  end

   /* ------------------------------------------------------------*/
   /* Update comments flag to indicate whether comments exist.*/
   /* ------------------------------------------------------------*/

  if (FE0HW07.FE0HWCMT == " ") /* No comments exist*/

    FE0HW06.FE0HWCMF = "N"; /* Comments flag*/
  else
    FE0HW06.FE0HWCMF = "Y"; /* Comments flag*/

  end


end // end FE0H764

// Open worksheet item cursor
Function FE0HS01()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set FFRREC empty; /* Clear row storage area*/

  FFRREC.FFEWSNBR = FFQREC.FFEWSNBR; /* Worksheet number*/

  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  FFFREC.FFFBEGMO = -999999999; /* Beginning month*/
  FFFREC.FFFENDMO = +999999999; /* Ending month*/

  try
    call "IO3820" (FFFREC, SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WORKSHEET ITEM CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS01

// Fetch next worksheet item
Function FE0HS02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3820" ("N1", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FE0HW00.FE0HWSWI = "Y"; /* Item cursor EOF switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT WORKSHEET ITEM";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS02

// Sum domestic cat forecast
Function FE0HS03()
   /* ------------------------------------------------------------*/
   /* Select the row from the month master by category table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Category*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type group*/
  FF7REC.FF4FCTMO = FFRREC.FF4FCTMO; /* Forecast month*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM DOMESTIC CAT FORECAST  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS03

// Sum NIL cat prdctn fcst
Function FE0HS04()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by category table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "20"; /* Division group code*/
  FF7REC.XCTCD = "*"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NIL CAT FCST GT BUY  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS04

// Sum invoice/order quantities
Function FE0HS06()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FE0HS06"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWHIN = FH3REC.FH2SHP; /* Invoiced qty*/
  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/

    FE0HW00.FE0HWHOR = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Ordered qty*/
    FE0HW00.FE0HWHOR = FE0HW00.FE0HWHOR + FH3REC.FH1ALQTY;
    FE0HW00.FE0HWHOR = FE0HW00.FE0HWHOR + FH3REC.FH3CNCL;

  else
    FE0HW00.FE0HWHOR = FH3REC.FH-FRZ-PRAL-QTY +                       FH3REC.FH-FRZ-ALOC-QTY +                       FH3REC.FH-FRZ-SHP-QTY +                       FH3REC.FH-FRZ-CNCL-QTY;
  end

  if (FE0HW00.FE0HWCOL > 1)
    FE0HW08.FE0HWHIN = FE0HW08.FE0HWHIN + FE0HW00.FE0HWHIN;
    FE0HW08.FE0HWHOR = FE0HW08.FE0HWHOR + FE0HW00.FE0HWHOR;
    FE0HW09.FE0HWHIN = FE0HW09.FE0HWHIN + FE0HW00.FE0HWHIN;
    FE0HW09.FE0HWHOR = FE0HW09.FE0HWHOR + FE0HW00.FE0HWHOR;
  end

   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FE0HS06"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWHIN = FE0HW00.FE0HWHIN + FH3REC.FH2SHP; /* Invoiced qty*/

  FE0HW00.FE0HWHOR = FE0HW00.FE0HWHOR + FH3REC.FH2SHP; /* Ordered qty*/
  FE0HW00.FE0HWHOR = FE0HW00.FE0HWHOR + FH3REC.FH1PAQTY;
  FE0HW00.FE0HWHOR = FE0HW00.FE0HWHOR + FH3REC.FH1ALQTY;
  FE0HW00.FE0HWHOR = FE0HW00.FE0HWHOR + FH3REC.FH3CNCL;

  if (FE0HW00.FE0HWCOL > 1)
    FE0HW08.FE0HWHIN = FE0HW08.FE0HWHIN + FH3REC.FH2SHP;
    FE0HW08.FE0HWHOR = FE0HW08.FE0HWHOR + FH3REC.FH2SHP + FH3REC.FH1PAQTY                     + FH3REC.FH1ALQTY + FH3REC.FH3CNCL;
    FE0HW09.FE0HWHIN = FE0HW09.FE0HWHIN + FH3REC.FH2SHP;
    FE0HW09.FE0HWHOR = FE0HW09.FE0HWHOR + FH3REC.FH2SHP + FH3REC.FH1PAQTY                     + FH3REC.FH1ALQTY + FH3REC.FH3CNCL;
  end

end // end FE0HS06

// Sum one year ago history
Function FE0HS07()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end

  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FE0HS07"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical futures quantity.*/
   /* ------------------------------------------------------------*/

  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FE0HW00.FE0HWHFU = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Hist futr qty*/
    FE0HW00.FE0HWHFU = FE0HW00.FE0HWHFU + FH3REC.FH1ALQTY;
    FE0HW00.FE0HWHFU = FE0HW00.FE0HWHFU + FH3REC.FH3CNCL;
  else
    FE0HW00.FE0HWHFU = FH3REC.FH-FRZ-PRAL-QTY +                       FH3REC.FH-FRZ-ALOC-QTY +                       FH3REC.FH-FRZ-SHP-QTY +                       FH3REC.FH-FRZ-CNCL-QTY;
  end

   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end

  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FE0HS07"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWHPR = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Hist prop qty*/
  FE0HW00.FE0HWHPR = FE0HW00.FE0HWHPR + FH3REC.FH1ALQTY;
  FE0HW00.FE0HWHPR = FE0HW00.FE0HWHPR + FH3REC.FH3CNCL;

   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWHDM = FE0HW00.FE0HWHFU + FE0HW00.FE0HWHPR;
                                   /* Hist demand qty*/

  FE0HW00.FE0HWHCF = FE0HW00.FE0HWHDM; /* Hist combined qty*/


end // end FE0HS07

// Sum two years ago history
Function FE0HS08()
   /* ------------------------------------------------------------*/
   /* Sum two years ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 200; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FE0HS08"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate futures for the product.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FF2FUIND == "2") /* Two years futures indicated*/

    if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
      FE0HW00.FE0HWHFU = FH3REC.FH2SHP; /* Hist futr qty*/
      FE0HW00.FE0HWHCF = FH3REC.FH2SHP; /* Hist combined qty*/
      FE0HW00.FE0HWHFU = FE0HW00.FE0HWHFU + FH3REC.FH1PAQTY;
      FE0HW00.FE0HWHFU = FE0HW00.FE0HWHFU + FH3REC.FH1ALQTY;
      FE0HW00.FE0HWHFU = FE0HW00.FE0HWHFU + FH3REC.FH3CNCL;

      FE0HW00.FE0HWHCF = FE0HW00.FE0HWHCF + FH3REC.FH1PAQTY;
      FE0HW00.FE0HWHCF = FE0HW00.FE0HWHCF + FH3REC.FH1ALQTY;
      FE0HW00.FE0HWHCF = FE0HW00.FE0HWHCF + FH3REC.FH3CNCL;
    else
      FE0HW00.FE0HWHFU = FH3REC.FH-FRZ-PRAL-QTY +                         FH3REC.FH-FRZ-ALOC-QTY +                         FH3REC.FH-FRZ-SHP-QTY +                         FH3REC.FH-FRZ-CNCL-QTY;
    end

  end

   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity for the product.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FF2DMIND == "2") /* Two years demand indicated*/

    if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
      FE0HW00.FE0HWHDM = FH3REC.FH2SHP; /* Hist futr qty*/

      FE0HW00.FE0HWHDM = FE0HW00.FE0HWHDM + FH3REC.FH1PAQTY;
      FE0HW00.FE0HWHDM = FE0HW00.FE0HWHDM + FH3REC.FH1ALQTY;
      FE0HW00.FE0HWHDM = FE0HW00.FE0HWHDM + FH3REC.FH3CNCL;
    else
      FE0HW00.FE0HWHDM = FH3REC.FH-FRZ-PRAL-QTY +                         FH3REC.FH-FRZ-ALOC-QTY +                         FH3REC.FH-FRZ-SHP-QTY +                         FH3REC.FH-FRZ-CNCL-QTY;
    end

  end

   /* ------------------------------------------------------------*/
   /* Sum two years ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 200; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FE0HS08"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate historical combined based on futures indicator.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FF2FUIND == "2") /* Two years futures indicated*/

    FE0HW00.FE0HWHCF = FE0HW00.FE0HWHCF + FH3REC.FH2SHP;
    FE0HW00.FE0HWHCF = FE0HW00.FE0HWHCF + FH3REC.FH1PAQTY;
    FE0HW00.FE0HWHCF = FE0HW00.FE0HWHCF + FH3REC.FH1ALQTY;
    FE0HW00.FE0HWHCF = FE0HW00.FE0HWHCF + FH3REC.FH3CNCL;

  end

   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity for the product.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FF2PRIND == "2") /* Two years prop indicated*/

    FE0HW00.FE0HWHPR = FH3REC.FH2SHP; /* Hist prop qty*/

    FE0HW00.FE0HWHPR = FE0HW00.FE0HWHPR + FH3REC.FH1PAQTY;
    FE0HW00.FE0HWHPR = FE0HW00.FE0HWHPR + FH3REC.FH1ALQTY;
    FE0HW00.FE0HWHPR = FE0HW00.FE0HWHPR + FH3REC.FH3CNCL;

  end

   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity for the product.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FF2DMIND == "2") /* Two years demand indicated*/

    FE0HW00.FE0HWHDM = FE0HW00.FE0HWHDM + FH3REC.FH2SHP;
    FE0HW00.FE0HWHDM = FE0HW00.FE0HWHDM + FH3REC.FH1PAQTY;
    FE0HW00.FE0HWHDM = FE0HW00.FE0HWHDM + FH3REC.FH1ALQTY;
    FE0HW00.FE0HWHDM = FE0HW00.FE0HWHDM + FH3REC.FH3CNCL;

  end


end // end FE0HS08

// Sum category shipment history
Function FE0HS09()
   /* ------------------------------------------------------------*/
   /* Sum quantities in shipment history by category table.*/
   /* ------------------------------------------------------------*/

  set FH6REC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/

  FH6REC.XDVCD = "10"; /* Division group code*/
  FH6REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH6REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH6REC.XLCCD = "10"; /* Life cycle code*/
  FH6REC.XQACD = "01"; /* Quality code*/
  FH6REC.XCTCD = "USA"; /* Foreign country code*/
  FH6REC.YSMXOT = "*"; /* Order type group code*/
  FH6REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FE0HS09"; /* Calling process*/

  XSFFS52(); /* Summarize VCTSHP01 quantities*/


end // end FE0HS09

// Sum next three months category
Function FE0HS10()

   /* ------------------------------------------------------------*/
   /* Sum balance to ship on frozen master worksheet to get*/
   /* next 3 months master sales forecast.*/
   /* ------------------------------------------------------------*/

  set FE0HW11 empty; /* set ffqrec empty*/
  set FE0HW12 empty; /* set ffrrec empty*/

  FE0HW00.FE0HWDAT = FFRREC.FF4FCTMO; /* Forecast month*/
  FE0HW00.FE0HWDMM = FE0HW00.FE0HWDMM + 1; /* Beginning month*/
  if (FE0HW00.FE0HWDMM > 12) /* Month GT maximum*/
    FE0HW00.FE0HWDMM = FE0HW00.FE0HWDMM - 12; /* Decrement month*/
    FE0HW00.FE0HWDYY = FE0HW00.FE0HWDYY + 1; /* Increment year*/
  end
  FE0HW12.FF4FCTMO = FE0HW00.FE0HWDAT; /* Beginning month*/

  FE0HW00.FE0HWDAT = FFRREC.FF4FCTMO; /* Forecast month*/
  FE0HW00.FE0HWDMM = FE0HW00.FE0HWDMM + 3; /* Ending month*/
  if (FE0HW00.FE0HWDMM > 12) /* Month GT maximum*/
    FE0HW00.FE0HWDMM = FE0HW00.FE0HWDMM - 12; /* Decrement month*/
    FE0HW00.FE0HWDYY = FE0HW00.FE0HWDYY + 1; /* Increment year*/
  end
  FE0HW11.FFAENDMO = FE0HW00.FE0HWDAT; /* Ending month*/

  FE0HW11.XWSCD = "07"; /* Worksheet type code*/

  FE0HW11.XPCCD = FFWREC.XPCCD; /* One product category*/

  FE0HW11.YPGCD = FFWREC.YPGCD; /* One type group*/

  FE0HW11.XPLCD = FFWREC.XPLCD; /* One line code*/

  try
    call "FF2930" ("SU", SQLCA, FE0HW11, FE0HW12) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0    /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == -305 /* or not found*/
    )                              
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FE0HW11.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FE0HS10

// ==> Save item information <==
Function FE0HS11()
   /* ------------------------------------------------------------*/
   /* If no room for subtotal/accum total, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWCOL > 61) /* No room for totals*/

    FFWREC.XXXMODID = "S11"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "TARGET WORKSHEETS EXCEED 3 YEARS";
    TAEREC.TAEDESC2 = FE0HW01.TAEDESC2; /* Worksheet numbers*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "SAVE ITEM INFORMATION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the M001 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FFZINDMO = FFRREC.FF4FCTMO; /* Forecast month*/
  FE0HW01.FF4FCTMO[FE0HWCOL] = FE0HW00.FFZINDMO; /* Forecast month*/
  FE0HW01.FE0HMMON[FE0HWCOL] = FE0HW00.FE0HWMON; /* Forecast YYMM*/

   /* ---> Non-national accts futures*/
   /* ---> --------------------------*/

   /* ---> Pre-allocated*/
  if (FFRREC.FF4FCTMO < FE0HW01.FFQCURMO) /* Fcst mo lt current*/
    set FH3REC empty; /* Init FHCAT record*/
    FH3REC.FH1PNAC = "N"; /* Natl acct flag*/
    FH3REC.YSMXOT = "FT"; /* Order type grp code*/
    FE0HS12(); /* Get FHCAT qtys*/
    FFRREC.FFRPFUDM = FH3REC.FH1PAQTY; /* Pral futr dmd*/
    FFRREC.FFRAFUDM = FH3REC.FH1ALQTY; /* Aloc futr dmd*/
    FFRREC.FFRIFUDM = FH3REC.FH2SHP; /* Ivc futr dmd*/
    FFRREC.FFRCFUDM = FH3REC.FH3CNCL; /* Cncl futr dmd*/
  end
  FFXREC.FFXNUMB = FFRREC.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRPFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRPFUDM = FE0HW08.FFRPFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Allocated*/
  FFXREC.FFXNUMB = FFRREC.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRAFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRAFUDM = FE0HW08.FFRAFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Invoiced*/
  FFXREC.FFXNUMB = FFRREC.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRIFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRIFUDM = FE0HW08.FFRIFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Cancelled*/
  FFXREC.FFXNUMB = FFRREC.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRCFUDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRCFUDM = FE0HW08.FFRCFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net bookings*/
  FFXREC.FFXNUMB = FE0HW01.FFRPFUDM[FE0HWCOL]; /* Futures tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRAFUDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRIFUDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRCFUDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FE0HWFUT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWFUT = FE0HW08.FE0HWFUT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> National accts futures*/
   /* ---> ----------------------*/

   /* ---> Pre-allocated*/
  if (FFRREC.FF4FCTMO < FE0HW01.FFQCURMO) /* Fcst mo lt current*/
    set FH3REC empty; /* Init FHCAT record*/
    FH3REC.FH1PNAC = "Y"; /* Natl acct flag*/
    FH3REC.YSMXOT = "FT"; /* Order type grp code*/
    FE0HS12(); /* Get FHCAT qtys*/
    FFRREC.FFRPNFDM = FH3REC.FH1PAQTY; /* Pral natl fdmd*/
    FFRREC.FFRANFDM = FH3REC.FH1ALQTY; /* Aloc natl fdmd*/
    FFRREC.FFRINFDM = FH3REC.FH2SHP; /* Ivc natl fdmd*/
    FFRREC.FFRCNFDM = FH3REC.FH3CNCL; /* Cncl natl fdmd*/
  end
  FFXREC.FFXNUMB = FFRREC.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRPNFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRPNFDM = FE0HW08.FFRPNFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Allocated*/
  FFXREC.FFXNUMB = FFRREC.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRANFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRANFDM = FE0HW08.FFRANFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Invoiced*/
  FFXREC.FFXNUMB = FFRREC.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRINFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRINFDM = FE0HW08.FFRINFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Cancelled*/
  FFXREC.FFXNUMB = FFRREC.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRCNFDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRCNFDM = FE0HW08.FFRCNFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net bookings*/
  FFXREC.FFXNUMB = FE0HW01.FFRPNFDM[FE0HWCOL]; /* Natl acct fut tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRANFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRINFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRCNFDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FE0HWNFT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWNFT = FE0HW08.FE0HWNFT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M002 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

   /* ---> Non-national accts prop*/
   /* ---> -----------------------*/

   /* ---> Pre-allocated*/
  if (FFRREC.FF4FCTMO < FE0HW01.FFQCURMO) /* Fcst mo lt current*/
    set FH3REC empty; /* Init FHCAT record*/
    FH3REC.FH1PNAC = "N"; /* Natl acct flag*/
    FH3REC.YSMXOT = "PR"; /* Order type grp code*/
    FE0HS12(); /* Get FHCAT qtys*/
    FFRREC.FFRPPRDM = FH3REC.FH1PAQTY; /* Pral prop dmd*/
    FFRREC.FFRAPRDM = FH3REC.FH1ALQTY; /* Aloc prop dmd*/
    FFRREC.FFRIPRDM = FH3REC.FH2SHP; /* Ivc prop dmd*/
    FFRREC.FFRCPRDM = FH3REC.FH3CNCL; /* Cncl prop dmd*/
  end
  FFXREC.FFXNUMB = FFRREC.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRPPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRPPRDM = FE0HW08.FFRPPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Allocated*/
  FFXREC.FFXNUMB = FFRREC.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRAPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRAPRDM = FE0HW08.FFRAPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Invoiced*/
  FFXREC.FFXNUMB = FFRREC.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRIPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRIPRDM = FE0HW08.FFRIPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Cancelled*/
  FFXREC.FFXNUMB = FFRREC.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRCPRDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRCPRDM = FE0HW08.FFRCPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net bookings*/
  FFXREC.FFXNUMB = FE0HW02.FFRPPRDM[FE0HWCOL]; /* Prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRAPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRIPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRCPRDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FE0HWPRT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWPRT = FE0HW08.FE0HWPRT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> National accts prop*/
   /* ---> -------------------*/

   /* ---> Pre-allocated*/
  if (FFRREC.FF4FCTMO < FE0HW01.FFQCURMO) /* Fcst mo lt current*/
    set FH3REC empty; /* Init FHCAT record*/
    FH3REC.FH1PNAC = "Y"; /* Natl acct flag*/
    FH3REC.YSMXOT = "PR"; /* Order type grp code*/
    FE0HS12(); /* Get FHCAT qtys*/
    FFRREC.FFRPNPDM = FH3REC.FH1PAQTY; /* Pral natl pdmd*/
    FFRREC.FFRANPDM = FH3REC.FH1ALQTY; /* Aloc natl pdmd*/
    FFRREC.FFRINPDM = FH3REC.FH2SHP; /* Ivc natl pdmd*/
    FFRREC.FFRCNPDM = FH3REC.FH3CNCL; /* Cncl natl pdmd*/
  end
  FFXREC.FFXNUMB = FFRREC.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRPNPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRPNPDM = FE0HW08.FFRPNPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Allocated*/
  FFXREC.FFXNUMB = FFRREC.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRANPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRANPDM = FE0HW08.FFRANPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Invoiced*/
  FFXREC.FFXNUMB = FFRREC.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRINPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRINPDM = FE0HW08.FFRINPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Cancelled*/
  FFXREC.FFXNUMB = FFRREC.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRCNPDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRCNPDM = FE0HW08.FFRCNPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net bookings*/
  FFXREC.FFXNUMB = FE0HW02.FFRPNPDM[FE0HWCOL]; /* Natl acct prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRANPDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRINPDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRCNPDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FE0HWNPT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWNPT = FE0HW08.FE0HWNPT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M003 information from the previous maps.*/
   /* ------------------------------------------------------------*/

   /* ---> Total demand*/
   /* ---> -------------------*/

   /* ---> Pre-allocated*/
  FFXREC.FFXNUMB = FE0HW01.FFRPFUDM[FE0HWCOL]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRPNFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRPPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRPNPDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWTDP = FE0HW08.FE0HWTDP + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Allocated*/
  FFXREC.FFXNUMB = FE0HW01.FFRAFUDM[FE0HWCOL]; /* Total allocated*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRANFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRAPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRANPDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDA[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDA[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWTDA = FE0HW08.FE0HWTDA + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Invoiced*/
  FFXREC.FFXNUMB = FE0HW01.FFRIFUDM[FE0HWCOL]; /* Total invoiced*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRINFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRIPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRINPDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDI[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDI[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWTDI = FE0HW08.FE0HWTDI + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Cancelled*/
  FFXREC.FFXNUMB = FE0HW01.FFRCFUDM[FE0HWCOL]; /* Total cancelled*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRCNFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRCPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRCNPDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDC[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWTDC = FE0HW08.FE0HWTDC + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net bookings*/
  FFXREC.FFXNUMB = FE0HW03.FE0HWTDP[FE0HWCOL]; /* Total demand*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW03.FE0HWTDA[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW03.FE0HWTDI[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW03.FE0HWTDC[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWTDT = FE0HW08.FE0HWTDT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Total cancellation %*/
   /* ---> --------------------*/

  if (FE0HW03.FE0HWTDT[FE0HWCOL] != 0) /* Total demand NE zero*/
    FE0HW00.FE0HWPCT = FE0HW03.FE0HWTDC[FE0HWCOL] * 100; /* Cancellation %*/
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW03.FE0HWTDT[FE0HWCOL], -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW03.FE0HWCAP[FE0HWCOL] = FE0HW00.FE0HWPCT;
  end

   /* ---> Total active futures*/
   /* ---> --------------------*/

  FFXREC.FFXNUMB = FE0HW01.FFRPFUDM[FE0HWCOL]; /* Tot active fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRAFUDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRIFUDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRPNFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRANFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRINFDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTAF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTAF[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWTAF = FE0HW08.FE0HWTAF + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Total active prop*/
   /* ---> -----------------*/

  FFXREC.FFXNUMB = FE0HW02.FFRPPRDM[FE0HWCOL]; /* Tot active prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRAPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRIPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRPNPDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRANPDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRINPDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTAP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTAP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWTAP = FE0HW08.FE0HWTAP + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M004 information from the previous maps.*/
   /* ------------------------------------------------------------*/

   /* ---> Demand forecast*/
   /* ---> ---------------*/

   /* ---> Non-national accts futures*/
  if (FFRREC.FF4FCTMO > FE0HW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = 0; /* Fut dmd*/
  else
    FFXREC.FFXNUMB = FE0HW01.FFRPFUDM[FE0HWCOL]; /* Fut dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRAFUDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRIFUDM[FE0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDFU[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDFU[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWDFU = FE0HW08.FE0HWDFU + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> National accts futures*/
  if (FFRREC.FF4FCTMO > FE0HW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = 0; /* Natl fut*/
  else
    FFXREC.FFXNUMB = FE0HW01.FFRPNFDM[FE0HWCOL]; /* Natl fut*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRANFDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRINFDM[FE0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDNF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDNF[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWDNF = FE0HW08.FE0HWDNF + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Total futures*/
  FFXREC.FFXNUMB = FFRREC.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FFRREC.FFRCDMFC = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FFRREC.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FFRREC.FFRCPRFC = FFXREC.FFXROUND; /* Rounded number*/

  if (FFRREC.FF4FCTMO > FE0HW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = FFRREC.FFRCDMFC - FFRREC.FFRCPRFC; /* Total fut*/
  else
    FFXREC.FFXNUMB = FE0HW04.FE0HWDFU[FE0HWCOL]; /* Total fut*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FE0HWDNF[FE0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDTF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTF[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWDTF = FE0HW08.FE0HWDTF + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Non-national accts prop*/
  FFXREC.FFXNUMB = FE0HW02.FFRPPRDM[FE0HWCOL]; /* Prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRAPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRIPRDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDPR[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDPR[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWDPR = FE0HW08.FE0HWDPR + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> National accts prop*/
  FFXREC.FFXNUMB = FE0HW02.FFRPNPDM[FE0HWCOL]; /* Natl prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRANPDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRINPDM[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDNP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDNP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWDNP = FE0HW08.FE0HWDNP + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Total prop*/
  FFXREC.FFXNUMB = FE0HW04.FE0HWDPR[FE0HWCOL]; /* Total prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FE0HWDNP[FE0HWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDTP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWDTP = FE0HW08.FE0HWDTP + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Calc prop fcst*/
  if (FFRREC.FF4FCTMO == FE0HW01.FFQCURMO /* Fcst mo EQ contp*/
   && FFRREC.FF4FCTMO == XX0XW01.XX0XWCYM) /* and EQ current*/
    FFXREC.FFXNUMB = FE0HW04.FE0HWDPR[FE0HWCOL] * FE0HW00.FE0HWDIM;
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / FE0HW00.FE0HWDTD, -mathLib.decimals(FFXREC.FFXNUMB));
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FE0HWDNP[FE0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0HW04.FE0HMDCP[FE0HWCOL] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
    FE0HW04.FE0HWDCP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ---> Curr prop fcst*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRCPRFC; /* Curr prop fcst*/
  else
    FFXREC.FFXNUMB = FE0HW04.FE0HWDTP[FE0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMPCF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FFRCPRFC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and fcst GT zero*/
    FE0HW08.FFRCPRFC = FE0HW08.FFRCPRFC + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Mstr prop fcst*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FE0HW04.FF6PRPFC[FE0HWCOL]; /* Mstr prop*/
  else
    FFXREC.FFXNUMB = FE0HW04.FE0HWDTP[FE0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMPRF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FF6PRPFC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and fcst GT zero*/
    FE0HW08.FF6PRPFC = FE0HW08.FF6PRPFC + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Fcst fut %*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
      if (FFRREC.FFRCDMFC != 0) /* & curr dmd fcst ne 0*/
        FE0HW00.FE0HWPCT = FE0HW04.FE0HWDTF[FE0HWCOL] * 100;
        FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FFRREC.FFRCDMFC, -mathLib.decimals(FE0HW00.FE0HWPCT));
        FE0HW04.FE0HWDFF[FE0HWCOL] = FE0HW00.FE0HWPCT; /* Fcst fut %*/
        FE0HW08.FE0HWFRF = FE0HW08.FE0HWFRF + FE0HW04.FE0HWDTF[FE0HWCOL];
      end
    else
      if (FE0HW03.FE0HWTDT[FE0HWCOL] != 0) /* & tot net books ne 0*/
        FE0HW00.FE0HWPCT = FE0HW01.FE0HWFUT[FE0HWCOL]         + FE0HW01.FE0HWNFT[FE0HWCOL];
        FE0HW00.FE0HWPCT = FE0HW00.FE0HWPCT * 100;
        FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT         / FE0HW03.FE0HWTDT[FE0HWCOL], -mathLib.decimals(FE0HW00.FE0HWPCT));
        FE0HW04.FE0HWDFF[FE0HWCOL] = FE0HW00.FE0HWPCT; /* Fcst fut %*/
        FE0HW08.FE0HWFRF = FE0HW08.FE0HWFRF + FE0HW01.FE0HWFUT[FE0HWCOL]         + FE0HW01.FE0HWNFT[FE0HWCOL];
      end
    end
  end

   /* ---> Hist fut %*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    if (FE0HW00.FE0HWHCF > 0) /* Hist comb GT zero*/
      FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWHFU * 100 / FE0HW00.FE0HWHCF, -mathLib.decimals(FE0HW00.FE0HWPCT));
      FE0HW04.FE0HWDHF[FE0HWCOL] = FE0HW00.FE0HWPCT; /* Hist fut %*/
    end
    FE0HW08.FE0HWHCF = FE0HW08.FE0HWHCF + FE0HW00.FE0HWHCF; /* Subtotal*/
    FE0HW08.FE0HWHFU = FE0HW08.FE0HWHFU + FE0HW00.FE0HWHFU; /* Subtotal*/
  end

   /*  */
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW04.FE0HWHPR[FE0HWCOL] = FE0HW00.FE0HWHPR; /* Hist prop qty*/
    FE0HW08.FE0HWHPR = FE0HW08.FE0HWHPR + FE0HW00.FE0HWHPR; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M005 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

   /* ---> Sales forecast*/
   /* ---> ---------------*/

   /* ---> Curr dmd fcst*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRCDMFC; /* Curr dmd fcst*/
    FE0HW05.FFRCDMFC[FE0HWCOL] = FFRREC.FFRCDMFC;
  else /* Use tot net books from w03*/
    FFXREC.FFXNUMB = FE0HW03.FE0HWTDT[FE0HWCOL]; /* Curr dmd fcst*/
    FE0HW05.FFRCDMFC[FE0HWCOL] = FE0HW03.FE0HWTDT[FE0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMFCD[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRCDMFC = FE0HW08.FFRCDMFC + FE0HW05.FFRCDMFC[FE0HWCOL];
  end

   /*  */
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW05.FE0HWHDM[FE0HWCOL] = FE0HW00.FE0HWHDM; /* Hist demand qty*/
    FE0HW08.FE0HWHDM = FE0HW08.FE0HWHDM + FE0HW00.FE0HWHDM; /* Subtotal*/
  end

   /* ---> Hist fill rate*/
  if (FE0HW00.FE0HWHOR != 0) /* Ordered NE zero*/
    FE0HW00.FE0HWPCT = FE0HW00.FE0HWHIN * 100; /* Hist fill rt*/
    FE0HW05.FE0HWHFR[FE0HWCOL] = mathLib.round(FE0HW00.FE0HWPCT / FE0HW00.FE0HWHOR, -mathLib.decimals(FE0HW05.FE0HWHFR[FE0HWCOL]));
  end
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWHFR = FE0HW08.FE0HWHFR + FE0HW05.FE0HWHFR[FE0HWCOL];
  end

   /* ---> Fcst fill rate*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    if (FFRREC.FF7FLLRT != 0) /* Fill rate exists*/
      FE0HW05.FE0HWFFR[FE0HWCOL] = FFRREC.FF7FLLRT; /* Fcst fill rt*/
    else
      FE0HW05.FE0HWFFR[FE0HWCOL] = FE0HW05.FE0HWHFR[FE0HWCOL];
    end
  end
  FE0HW05.FE0HMFFR[FE0HWCOL] = mathLib.round(FE0HW05.FE0HWFFR[FE0HWCOL] / 1, -mathLib.decimals(FE0HW05.FE0HMFFR[FE0HWCOL]));
   /* sub-total curr mo forward*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FE0HW08.FE0HWFFR = FE0HW08.FE0HWFFR + FE0HW05.FE0HWFFR[FE0HWCOL];
  end
   /* prior to curr will be added to totals on re-calc*/
  if (FFRREC.FF4FCTMO == FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FE0HS13(); /* ====> Re-calc fill rate for lt contp*/
  end

   /* ---> Curr sls fcst*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[FE0HWCOL]; /* Curr sls fcst*/
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FE0HW05.FE0HWFFR[FE0HWCOL] / 100, -mathLib.decimals(FFXREC.FFXNUMB));
    FE0HW05.FH5MSHQT[FE0HWCOL] = FFXREC.FFXNUMB;
  else
    FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[FE0HWCOL];
    FE0HW05.FH5MSHQT[FE0HWCOL] = FFXREC.FFXNUMB;
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMCSF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FH5MSHQT = FE0HW08.FH5MSHQT + FE0HW05.FH5MSHQT[FE0HWCOL];
  end

   /* ---> Mstr sls fcst*/
  if (FFRREC.FF4FCTMO < FE0HW01.FFQCURMO) /* Fcst mo LT current*/
    FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[FE0HWCOL];
    FE0HW05.FF6SLFCT[FE0HWCOL] = FE0HW05.FH5MSHQT[FE0HWCOL];
  else
    FFXREC.FFXNUMB = FE0HW05.FF6SLFCT[FE0HWCOL]; /* Mstr sls fcst*/
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMMSL[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FF6SLFCT = FE0HW08.FF6SLFCT + FE0HW05.FF6SLFCT[FE0HWCOL];
  end

   /* ---> Mstr dmd fcst*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FE0HW05.FE0HWMDM[FE0HWCOL]; /* master demand*/
  else
    FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[FE0HWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMMDM[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FE0HWMDM[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWMDM = FE0HW08.FE0HWMDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Revised fcst*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FFXREC.FFXNUMB = FF7REC.FF7RVFCT; /* Rvse dmd fcst*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW05.FF7RVFCT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0HW08.FF7RVFCT = FE0HW08.FF7RVFCT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M006 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

   /* ---> Inventory position*/
   /* ---> ------------------*/

   /* ---> Beg inventory*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    if (FFRREC.FF4FCTMO == FE0HW01.FFQCURMO)
      FFXREC.FFXNUMB = FFRREC.FF6BEINV; /* Beg inv*/
    else
      FFXREC.FFXNUMB = FE0HW06.FE0HWINE[FE0HWIXP]; /* Beg inv*/
    end
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW00.FF6SUGBY;
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMINB[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FF6BEINV[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0HW08.FF6BEINV = FE0HW08.FF6BEINV + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Prod due*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    if (FFRREC.FF4FCTMO == FE0HW01.FFQCURMO) /* Fcst mo EQ current*/
      FFXREC.FFXNUMB = FFRREC.FFRPRDDU + FE0HW08.FFRPRDDU; /* Prod due*/
      FE0HW08.FFRPRDDU = 0; /* Clear prior months subtotal*/
    else
      FFXREC.FFXNUMB = FFRREC.FFRPRDDU; /* Prod due*/
    end
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMDUE[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FFRPRDDU[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0HW08.FFRPRDDU = FE0HW08.FFRPRDDU + FFXREC.FFXROUND; /* Subtotal*/
  else
    FE0HW08.FFRPRDDU = FE0HW08.FFRPRDDU + FFRREC.FFRPRDDU; /* Subtotal*/
  end

   /* ---> Submitted buy*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRSUBBY; /* Sbmt qtb*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMQBY[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FFRSUBBY[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0HW08.FFRSUBBY = FE0HW08.FFRSUBBY + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Tentative buy*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRTENBY; /* Tntv qtb*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMTBY[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FFRTENBY[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0HW08.FFRTENBY = FE0HW08.FFRTENBY + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Supply*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FE0HW06.FF6BEINV[FE0HWCOL]; /* Supply*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW06.FFRPRDDU[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW06.FFRSUBBY[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW06.FFRTENBY[FE0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMSUP[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FE0HWSUP[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0HW08.FE0HWSUP = FE0HW08.FE0HWSUP + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Bal to ship*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FG4BALSH; /* Bal to shp*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMBAL[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FG4BALSH[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0HW08.FG4BALSH = FE0HW08.FG4BALSH + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> End inventory*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FE0HW06.FE0HWSUP[FE0HWCOL]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW06.FG4BALSH[FE0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMINE[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FE0HWINE[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0HW08.FE0HWINE = FE0HW08.FE0HWINE + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Sfty stock*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FF6SFSTK; /* Sfty stk*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMSTK[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FF6SFSTK[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0HW08.FF6SFSTK = FE0HW08.FF6SFSTK + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Var/Sugg buy*/
  if (FFRREC.FF4FCTMO >= FE0HW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FF6SUGBY; /* Sugg qtb*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW06.FE0HMSBY[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW06.FF6SUGBY[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    if (FFRREC.FF4FCTMO > FE0HW01.FFQMBYMO) /* Fcst mo GT buy*/
      FE0HW08.FF6SUGBY = FE0HW08.FF6SUGBY + FFXREC.FFXROUND; /* Subtotal*/
      FE0HW00.FF6SUGBY = FE0HW06.FF6SUGBY[FE0HWCOL];
    else
      FE0HW00.FF6SUGBY = 0;
    end
  end

   /* ---> Dom prod fcst*/
  FFXREC.FFXNUMB = FE0HW06.FF6PRFCT[FE0HWCOL]; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMFCT[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FF6PRFCT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FF6PRFCT = FE0HW08.FF6PRFCT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Inv turns*/
  FE0HW00.FE0HWASL = FE0HW00.FE0HWASL * 12; /* Inv turns*/
  FE0HW00.FE0HWAIN = FE0HW06.FE0HWINE[FE0HWCOL] * 3;
  if (FE0HWAIN != 0) /* Inventory NE zero*/
    FE0HW06.FE0HWTUR[FE0HWCOL] = mathLib.round(FE0HW00.FE0HWASL / FE0HW00.FE0HWAIN, -mathLib.decimals(FE0HW06.FE0HWTUR[FE0HWCOL]));
  end

   /* ---> Direct ship*/
  FFXREC.FFXNUMB = FFRREC.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMDIR[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FFRDIRSH[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FFRDIRSH = FE0HW08.FFRDIRSH + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> NIL production*/
  FFXREC.FFXNUMB = FE0HW06.FE0HWNIL[FE0HWCOL]; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FE0HW06.FE0HMNIL[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW06.FE0HWNIL[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWNIL = FE0HW08.FE0HWNIL + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save prior month index.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXP = FE0HW00.FE0HWCOL;

   /* ------------------------------------------------------------*/
   /* Calculate the number of months for subtotal averaging.*/
   /* ------------------------------------------------------------*/

  if (FE0HW00.FE0HWCOL > 1) /* Not first column*/
    FE0HW08.FE0HWNMO = FE0HW08.FE0HWNMO + 1; /* Number of months*/
  end


end // end FE0HS11

// Sum FHCAT qtys lt curr month
Function FE0HS12()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO;
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO;

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
   /* ----> loaded in the calling process group --->*/
   /* MOVE '??' TO FH3REC.YSMXOT      ; Order type group code*/
   /* MOVE '?' TO FH3REC.FH1PNAC      ; National account flag*/
   /* ----> loaded in the calling process group*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FE0HS12"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/


end // end FE0HS12

// Calc fill rate prior to curr
Function FE0HS13()
   /* ------------------------------------------------------------*/
    /* Actual Fill rate = ((sales + carry over) * 100)/tot dmd*/
     /* - first determine which if any carry over QTYs to use*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = 0; /* ===> init W.S. Accumulator*/

  if (FE0HW01.FFQCURMO in FE0HW01.FF4FCTMO) /* Find current month*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

  else

    FFWREC.XXXMODID = "S13"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "CURRENT MONTH WAS NOT FOUND";
    FE0HW00.FE0HWDAT = FE0HW01.FFQCURMO; /* Date work area*/
    TAEREC.TAEDESC2 = FE0HW00.FE0HWDAT; /* Current month*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN WORKSHEET ITEMS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
    /* Actual Fill rate = ((sales + carry over) * 100)/tot dmd)*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFABEGMO == FE0HW01.FFQCURMO) /* Beg mo EQ curr*/

    if (FE0HW03.FE0HWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 0;
    else
      FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply last carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFQLCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFQLCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100;
                                   /* ===> (sale + carry over) * 100*/
      FE0HW05.FE0HWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FE0HW03.FE0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0HW05.FE0HWFFR[sysVar.arrayIndex]));
    end
    FE0HW05.FE0HMFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FE0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0HW05.FE0HMFFR[sysVar.arrayIndex]));
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FE0HW08.FE0HWFFR = FE0HW08.FE0HWFFR + FE0HW05.FE0HWFFR[sysVar.arrayIndex];
    end

  else /* ==================> not Beg mo EQ*/
                                   /* curr*/

    if (FE0HW03.FE0HWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 0;
    else
      FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply last carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFQLCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFQLCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100;
                                   /* ===> (sale + carry over) * 100*/
      FE0HW05.FE0HWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FE0HW03.FE0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0HW05.FE0HWFFR[sysVar.arrayIndex]));
    end
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FE0HW08.FE0HWFFR = FE0HW08.FE0HWFFR + FE0HW05.FE0HWFFR[sysVar.arrayIndex];
    end


    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior 2nd month*/

    if (FE0HW03.FE0HWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 0;
    else
      /* ====> apply other carry over QTYs*/
      FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply other carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFQOCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFQOCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100;
                                   /* ===> (sale + carry over) * 100*/
      FE0HW05.FE0HWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FE0HW03.FE0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0HW05.FE0HWFFR[sysVar.arrayIndex]));
    end
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FE0HW08.FE0HWFFR = FE0HW08.FE0HWFFR + FE0HW05.FE0HWFFR[sysVar.arrayIndex];
    end


    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* ===> Point to prior 3rd month*/

    while (sysVar.arrayIndex > 0) /* ===>until all prior to curr months*/
                                   /* processed*/

      if (FE0HW03.FE0HWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
        FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 0;
      else
        FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
        /* ====> no carry over QTYs to apply*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100;
                                   /* ===> (sale + carry over) * 100*/
        FE0HW05.FE0HWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB /         FE0HW03.FE0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0HW05.FE0HWFFR[sysVar.arrayIndex]));
      end
      if (sysVar.arrayIndex > 1) /* Not first column*/
        FE0HW08.FE0HWFFR = FE0HW08.FE0HWFFR + FE0HW05.FE0HWFFR[sysVar.arrayIndex];
      end
      sysVar.arrayIndex = sysVar.arrayIndex - 1; /* ===> Point to prior 3rd month*/
    end


  end


end // end FE0HS13

// Close worksheet item cursor
Function FE0HS14()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3820" ("C1", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S14"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE WORKSHEET ITEM CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS14

// Check M001 fields for changes
Function FE0HS15()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM001.FE0HMNFP[FE0HWIXC] != FE0HW01.FE0HMNFP[FE0HWEND]
     && FE0HM001.FE0HMMON[FE0HWIXC] > " ")

      FFWREC.XXXMODID = "S15"; /* Module identification*/
      set FE0HM001.FE0HMNFP[FE0HWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM001.FE0HMFUP[FE0HWIXC] != FE0HW01.FE0HMFUP[FE0HWEND]
     && FE0HM001.FE0HMMON[FE0HWIXC] > " ")

      FFWREC.XXXMODID = "S15"; /* Module identification*/
      set FE0HM001.FE0HMFUP[FE0HWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end


end // end FE0HS15

// Process PRAL FUTR DMD change
Function FE0HS16()
   /* ------------------------------------------------------------*/
   /* Adjust FUTURES TOT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWDMD = "Y"; /* set dmd chg switch*/
  if (FE0HW01.FFRPFUDM[FE0HWCOL] > FE0HW10.FFRPFUDM[FE0HWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FE0HW01.FE0HWFUT[sysVar.arrayIndex]; /* Futures tot*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPFUDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPFUDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW01.FE0HMFUT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW01.FE0HWFUT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PRE-ALLOC by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW03.FE0HWTDP[sysVar.arrayIndex]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPFUDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPFUDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL Cancelled by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFRPFUDM[FE0HWCOL] > FE0HW10.FFRPFUDM[FE0HWIXC])
    FFXREC.FFXNUMB = FE0HW03.FE0HWTDC[sysVar.arrayIndex]; /* Total cancelled*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRPFUDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW10.FFRPFUDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW03.FE0HMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW03.FE0HWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFRPFUDM[FE0HWCOL] > FE0HW10.FFRPFUDM[FE0HWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FE0HW03.FE0HWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPFUDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPFUDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW03.FE0HMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW03.FE0HWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FE0HW03.FE0HWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FE0HW00.FE0HWPCT = FE0HW03.FE0HWTDC[sysVar.arrayIndex] * 100;
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW03.FE0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW03.FE0HWCAP[sysVar.arrayIndex] = FE0HW00.FE0HWPCT; /* Cancellation %*/
  else
    FE0HW03.FE0HWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOT ACTIVE FUT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW03.FE0HWTAF[sysVar.arrayIndex]; /* Tot active fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPFUDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPFUDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTAF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTAF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust FUT DMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW04.FE0HWDFU[sysVar.arrayIndex]; /* Fut dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPFUDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPFUDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDFU[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDFU[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL FUT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW04.FE0HWDTF[sysVar.arrayIndex]; /* Total fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPFUDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPFUDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust CURR DMD FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPFUDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPFUDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMFCD[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FFRCDMFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate FCST FUT % if CURR DMD FCST greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] > 0) /* Curr dmd fcst GT zero*/
    FE0HW00.FE0HWPCT = FE0HW04.FE0HWDTF[sysVar.arrayIndex] * 100;
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW04.FE0HWDFF[sysVar.arrayIndex] = FE0HW00.FE0HWPCT; /* Fcst fut %*/
  else
    FE0HW04.FE0HWDFF[sysVar.arrayIndex] = 0; /* Fcst fut %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust CNCL FUTR DMD by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFRPFUDM[FE0HWCOL] > FE0HW10.FFRPFUDM[FE0HWIXC])
    FFXREC.FFXNUMB = FE0HW01.FFRCFUDM[sysVar.arrayIndex]; /* cancel futr dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRPFUDM[FE0HWCOL]; /* before*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW10.FFRPFUDM[FE0HWIXC]; /* after*/
    XSFFS10(); /* Translate to thousands*/
    FE0HW01.FE0HMFUC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW01.FFRCFUDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust PRAL FUTR DMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW01.FFRPFUDM[sysVar.arrayIndex]; /* Pral futr dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPFUDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPFUDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMFUP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRPFUDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FE0HS16

// Calculations based on demand
Function FE0HS17()
   /* ------------------------------------------------------------*/
   /* Calculate FCST SEAS IDX for each month in the season.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/

    FE0HW00.FE0HWEND = sysVar.arrayIndex; /* Ending column*/

    FE0HW00.FE0HWNMO = 0;
    FE0HW00.FE0HWIXP = sysVar.arrayIndex; /* Prior index*/
    FE0HW00.FE0HWIXP = FE0HW00.FE0HWIXP - 1; /* Decrement prior index*/
    while (FE0HW01.FE0HMMON[FE0HWIXP] != "  SUB" /* Not sub*/
     && FE0HW01.FE0HMMON[FE0HWIXP] != "ACCUM" /* & not accum*/
     && FE0HW00.FE0HWIXP > 1) /* & not prior to first sesn*/
      FE0HW00.FE0HWNMO = FE0HW00.FE0HWNMO + 1; /* Add to mos in sesn ctr*/
      FE0HW00.FE0HWIXP = FE0HW00.FE0HWIXP - 1; /* Decrement prior index*/
    end

    sysVar.arrayIndex = sysVar.arrayIndex - FE0HW00.FE0HWNMO; /* Season begin month*/

  end

  while (sysVar.arrayIndex <= FE0HW00.FE0HWEND) /* Until end of season*/

    if (FE0HW05.FFRCDMFC[FE0HWEND] > 0) /* Season demand GT zero*/

      FE0HW00.FE0HWPCT = FE0HW05.FFRCDMFC[sysVar.arrayIndex] * 100; /* Curr dmd fcst*/
      FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW05.FFRCDMFC[FE0HWEND], -mathLib.decimals(FE0HW00.FE0HWPCT));
      FE0HW05.FE0HWFSI[sysVar.arrayIndex] = FE0HW00.FE0HWPCT; /* Fcst seas idx*/

    else

      FE0HW05.FE0HWFSI[sysVar.arrayIndex] = 0; /* Fcst seas idx*/

    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Next season month*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate CURR SLS FCST using the adjusted CURR DMD FCST.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW05.FH5MSHQT[FE0HWCOL];
    FE0HW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXNUMB;

    if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] != 0) /* curr dmd*/
      FE0HW05.FE0HWFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FH5MSHQT[sysVar.arrayIndex] * 100 /                                 FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW05.FE0HWFFR[sysVar.arrayIndex]));
    else
      if (FE0HW05.FH5MSHQT[sysVar.arrayIndex] == 0) /* curr sls*/
        FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 100;
      else
        FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 0;
      end
    end
    FE0HW05.FE0HMFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FE0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0HW05.FE0HMFFR[sysVar.arrayIndex]));

  end

  while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* More fcst months*/
    if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/
      FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW05.FH5MSHQT[FE0HWCOL];
      FE0HW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXNUMB;

      if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] != 0) /* curr dmd*/
        FE0HW05.FE0HWFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FH5MSHQT[sysVar.arrayIndex] * 100 /                                   FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW05.FE0HWFFR[sysVar.arrayIndex]));
      else
        if (FE0HW05.FH5MSHQT[sysVar.arrayIndex] == 0) /* curr sls*/
          FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 100;
        else
          FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 0;
        end
      end
      FE0HW05.FE0HMFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FE0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0HW05.FE0HMFFR[sysVar.arrayIndex]));

    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[FE0HWCOL]; /* Curr dmd fcst*/
  FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FE0HW05.FE0HWFFR[FE0HWCOL] / 100, -mathLib.decimals(FFXREC.FFXNUMB));

  XSFFS10(); /* Translate to thousands*/

  FE0HW05.FE0HMCSF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FH5MSHQT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW05.FH5MSHQT[FE0HWCOL];

    if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] != 0) /* curr dmd*/
      FE0HW05.FE0HWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB * 100 /                                 FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW05.FE0HWFFR[sysVar.arrayIndex]));
    else
      if (FFXREC.FFXNUMB == 0) /* curr sls*/
        FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 100;
      else
        FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 0;
      end
    end
    FE0HW05.FE0HMFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FE0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0HW05.FE0HMFFR[sysVar.arrayIndex]));

    XSFFS10(); /* Translate to thousands*/
    FE0HW05.FE0HMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


  end


  while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* More fcst months*/
    if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/
      FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW05.FH5MSHQT[FE0HWCOL];

      if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] != 0) /* curr dmd*/
        FE0HW05.FE0HWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB * 100 /                                   FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW05.FE0HWFFR[sysVar.arrayIndex]));
      else
        if (FFXREC.FFXNUMB == 0) /* curr sls*/
          FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 100;
        else
          FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 0;
        end
      end
      FE0HW05.FE0HMFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FE0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0HW05.FE0HMFFR[sysVar.arrayIndex]));

      XSFFS10(); /* Translate to thousands*/
      FE0HW05.FE0HMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FE0HW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


end // end FE0HS17

// Process PRAL NATL FDMD change
Function FE0HS18()
   /* ------------------------------------------------------------*/
   /* Adjust NATL FUT TOT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWDMD = "Y"; /* set the dmd changed switch to yes*/
  if (FE0HW01.FFRPNFDM[FE0HWCOL] > FE0HW10.FFRPNFDM[FE0HWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FE0HW01.FE0HWNFT[sysVar.arrayIndex]; /* Natl fut tot*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPNFDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNFDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW01.FE0HMNFT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW01.FE0HWNFT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PRE-ALLOC by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW03.FE0HWTDP[sysVar.arrayIndex]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPNFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNFDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL Cancelled by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFRPNFDM[FE0HWCOL] > FE0HW10.FFRPNFDM[FE0HWIXC])
    FFXREC.FFXNUMB = FE0HW03.FE0HWTDC[sysVar.arrayIndex]; /* Total cancelled*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRPNFDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW10.FFRPNFDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW03.FE0HMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW03.FE0HWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFRPNFDM[FE0HWCOL] > FE0HW10.FFRPNFDM[FE0HWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FE0HW03.FE0HWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPNFDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNFDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW03.FE0HMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW03.FE0HWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FE0HW03.FE0HWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FE0HW00.FE0HWPCT = FE0HW03.FE0HWTDC[sysVar.arrayIndex] * 100;
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW03.FE0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW03.FE0HWCAP[sysVar.arrayIndex] = FE0HW00.FE0HWPCT; /* Cancellation %*/
  else
    FE0HW03.FE0HWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOT ACTIVE FUT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW03.FE0HWTAF[sysVar.arrayIndex]; /* Tot active fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPNFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNFDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTAF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTAF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust NATL FUT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW04.FE0HWDNF[sysVar.arrayIndex]; /* Natl fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPNFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNFDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDNF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDNF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL FUT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW04.FE0HWDTF[sysVar.arrayIndex]; /* Total fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPNFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNFDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust CURR DMD FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPNFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNFDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMFCD[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FFRCDMFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate FCST FUT % if CURR DMD FCST greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] > 0) /* Curr dmd fcst GT zero*/
    FE0HW00.FE0HWPCT = FE0HW04.FE0HWDTF[sysVar.arrayIndex] * 100;
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW04.FE0HWDFF[sysVar.arrayIndex] = FE0HW00.FE0HWPCT; /* Fcst fut %*/
  else
    FE0HW04.FE0HWDFF[sysVar.arrayIndex] = 0; /* Fcst fut %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust CNCL NATL FDMD by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FFRPNFDM[FE0HWCOL] > FE0HW10.FFRPNFDM[FE0HWIXC])
    FFXREC.FFXNUMB = FE0HW01.FFRCNFDM[sysVar.arrayIndex]; /* Cncl futr dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW01.FFRPNFDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW10.FFRPNFDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW01.FE0HMNFC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW01.FFRCNFDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust PRAL NATL FDMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW01.FFRPNFDM[sysVar.arrayIndex]; /* Pral futr dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW01.FFRPNFDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNFDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW01.FE0HMNFP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW01.FFRPNFDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/



end // end FE0HS18

// Delete worksheet header row
Function FE0HS20()
   /* ------------------------------------------------------------*/
   /* Delete the worksheet header table row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("D ", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE WORKSHEET HEADER ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS20

// Delete worksheet item rows
Function FE0HS21()
   /* ------------------------------------------------------------*/
   /* Delete the worksheet item table rows.*/
   /* ------------------------------------------------------------*/

  FFRREC.FFEWSNBR = FFQREC.FFEWSNBR; /* Worksheet number*/

  try
    call "IO3820" ("DS", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE WORKSHEET ITEM ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS21

// Delete worksheet comment rows
Function FE0HS22()
   /* ------------------------------------------------------------*/
   /* Delete the worksheet comment table rows.*/
   /* ------------------------------------------------------------*/

  FFPREC.FFEWSNBR = FFQREC.FFEWSNBR; /* Worksheet number*/

  try
    call "IO3800" ("DS", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE WORKSHEET COMMENT ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFPREC.FFPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS22

// Obtain next worksheet number
Function FE0HS23()
   /* ------------------------------------------------------------*/
   /* Select the row from Footwear Forecasting Control Table.*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Row storage area*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3660" ("U3", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row was not found, indicate data was in use by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      FFWREC.XXXMODID = "S23"; /* Module identification*/
      converseLib.validationFailed(47); /* Data in use by another*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    converseLib.validationFailed(47); /* Data in use by another*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.validationFailed(1); /* System error occurred*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN NEXT WORKSHEET NUMBER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS23

// Insert worksheet header row
Function FE0HS25()
   /* ------------------------------------------------------------*/
   /* Format and insert the worksheet header table row.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty;

  FFQREC.FFEWSNBR = FF1REC.FF1WSNBR; /* Wrksht nbr*/
  FFQREC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FFQREC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FFQREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FFQREC.XLCCD = "10"; /* Life cycle code*/
  FFQREC.XWSCD = "05"; /* Worksheet type code*/
  FFQREC.FFABEGMO = FE0HW01.FFABEGMO[FE0HWIXW]; /* Fcst bmo*/
  FFQREC.FFQMBYMO = FE0HW01.FFQMBYMO; /* Main buy mo*/
  FFQREC.FFAENDMO = FE0HW01.FFAENDMO[FE0HWIXW]; /* Fcst xmo*/
  FFQREC.FFQCURMO = FE0HW01.FFQCURMO; /* Curr mo*/
  FFQREC.FFQLCOFU = FE0HW01.FFQLCOFU; /* Lst caov futr*/
  FFQREC.FFQLCOPR = FE0HW01.FFQLCOPR; /* Lst caov prop*/
  FFQREC.FFQOCOFU = FE0HW01.FFQOCOFU; /* Oth caov futr*/
  FFQREC.FFQOCOPR = FE0HW01.FFQOCOPR; /* Oth caov prop*/
  FFQREC.FF2FUIND = FE0HW04.FF2FUIND; /* Futr yr ind*/
  FFQREC.FF2DMIND = FE0HW05.FF2DMIND; /* Dmd yr ind*/
  FFQREC.FF2PRIND = FE0HW01.FF2PRIND; /* Prop yr ind*/
  if (FE0HW00.FE0HWIXW == 1) /* First season worksheet*/
    if (FE0HW07.FFPCOMNT[1] > " " /* and fcstr comnts exist*/
     || FE0HW07.FFPCOMNT[2] > " " /**/
     || FE0HW07.FFPCOMNT[3] > " " /**/
     || FE0HW07.FFPCOMNT[4] > " " /**/
     || FE0HW07.FFPCOMNT[5] > " " /**/
     || FE0HW07.FFPCOMNT[6] > " " /**/
     || FE0HW07.FFPCOMNT[7] > " " /**/
     || FE0HW07.FFPCOMNT[8] > " " /**/
     || FE0HW07.FFPCOMNT[9] > " " /**/
     || FE0HW07.FFPCOMNT[10] > " ") /**/
      FFQREC.FFQFCMFL = "Y"; /* Fcstr comnt fl*/
    else
      FFQREC.FFQFCMFL = "N"; /* Fcstr comnt fl*/
    end
  else
    FFQREC.FFQFCMFL = "N"; /* Fcstr comnt fl*/
  end
  FFQREC.FFQSCMFL = "N"; /* Schedr comnt fl*/
  FFQREC.XXXUSRID = COMMAREA.CAUSERID; /* User identification*/
  FFQREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFQREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/
  FFQREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFQREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3810" ("A ", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT WORKSHEET HEADER ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS25

// Insert worksheet item row
Function FE0HS26()
   /* ------------------------------------------------------------*/
   /* Format and insert the worksheet item table row.*/
   /* ------------------------------------------------------------*/

  set FFRREC empty;

  FFRREC.FFEWSNBR = FF1REC.FF1WSNBR; /* Wrksht nbr*/
  FFRREC.FF4FCTMO = FE0HW01.FF4FCTMO[FE0HWCOL]; /* Fcst mo*/
  FFRREC.FFRPFUDM = FE0HW01.FFRPFUDM[FE0HWCOL]; /* Pral futr dmd*/
  FFRREC.FFRAFUDM = FE0HW01.FFRAFUDM[FE0HWCOL]; /* Aloc futr dmd*/
  FFRREC.FFRIFUDM = FE0HW01.FFRIFUDM[FE0HWCOL]; /* Ivc futr dmd*/
  FFRREC.FFRCFUDM = FE0HW01.FFRCFUDM[FE0HWCOL]; /* Cncl futr dmd*/
  FFRREC.FFRPNFDM = FE0HW01.FFRPNFDM[FE0HWCOL]; /* Pral natl fdmd*/
  FFRREC.FFRANFDM = FE0HW01.FFRANFDM[FE0HWCOL]; /* Aloc natl fdmd*/
  FFRREC.FFRINFDM = FE0HW01.FFRINFDM[FE0HWCOL]; /* Ivc natl fdmd*/
  FFRREC.FFRCNFDM = FE0HW01.FFRCNFDM[FE0HWCOL]; /* Cncl natl fdmd*/
  FFRREC.FFRPPRDM = FE0HW02.FFRPPRDM[FE0HWCOL]; /* Pral prop dmd*/
  FFRREC.FFRAPRDM = FE0HW02.FFRAPRDM[FE0HWCOL]; /* Aloc prop dmd*/
  FFRREC.FFRIPRDM = FE0HW02.FFRIPRDM[FE0HWCOL]; /* Ivc prop dmd*/
  FFRREC.FFRCPRDM = FE0HW02.FFRCPRDM[FE0HWCOL]; /* Cncl prop dmd*/
  FFRREC.FFRPNPDM = FE0HW02.FFRPNPDM[FE0HWCOL]; /* Pral natl pdmd*/
  FFRREC.FFRANPDM = FE0HW02.FFRANPDM[FE0HWCOL]; /* Aloc natl pdmd*/
  FFRREC.FFRINPDM = FE0HW02.FFRINPDM[FE0HWCOL]; /* Ivc natl pdmd*/
  FFRREC.FFRCNPDM = FE0HW02.FFRCNPDM[FE0HWCOL]; /* Cncl natl pdmd*/
  FFRREC.FFRCPRFC = FE0HW04.FFRCPRFC[FE0HWCOL]; /* Curr prop fcst*/
  FFRREC.FFRCDMFC = FE0HW05.FFRCDMFC[FE0HWCOL]; /* Curr dmd fcst*/
  FFRREC.FF7FLLRT = FE0HW05.FE0HWFFR[FE0HWCOL]; /* Fill rate pct*/
  FFRREC.FF6BEINV = FE0HW06.FF6BEINV[FE0HWCOL]; /* Beg inv*/
  FFRREC.FF6SUGBY = FE0HW06.FF6SUGBY[FE0HWCOL]; /* Sugg qtb*/
  FFRREC.FFRPRDDU = FE0HW06.FFRPRDDU[FE0HWCOL]; /* Prdctn due*/
  FFRREC.FFRSUBBY = FE0HW06.FFRSUBBY[FE0HWCOL]; /* Sbmt qtb*/
  FFRREC.FFRTENBY = FE0HW06.FFRTENBY[FE0HWCOL]; /* Tntv qtb*/
  FFRREC.FFRDIRSH = FE0HW06.FFRDIRSH[FE0HWCOL]; /* Dirshp qty*/
  FFRREC.FF6SFSTK = FE0HW06.FF6SFSTK[FE0HWCOL]; /* Sfty stk*/
  FFRREC.FG4BALSH = FE0HW06.FG4BALSH[FE0HWCOL]; /* Bal to shp*/
  FFRREC.FF7FURAT = FE0HW04.FE0HWDFF[FE0HWCOL]; /* Fcst fut %*/
  FFRREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFRREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFRREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3820" ("A ", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT WORKSHEET ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS26

// Insert worksheet comment row
Function FE0HS27()
   /* ------------------------------------------------------------*/
   /* Format and insert the worksheet comment table row.*/
   /* ------------------------------------------------------------*/

  FFPREC.FFEWSNBR = FF1REC.FF1WSNBR; /* Wrksht nbr*/
  FFPREC.FFPCTIND = "F"; /* Comnt typ ind*/
  FFPREC.FFPCMSEQ = FFPREC.FFPCMSEQ + 1; /* Comnt seq*/
  FFPREC.FFPCOMNT = FE0HW07.FFPCOMNT[FE0HWIXL]; /* Comnt txt*/
  FFPREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFPREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFPREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3800" ("A ", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S27"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT WORKSHEET COMMENT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFPREC.FFPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS27

// Select actual DFHIST.VWHCAT01
Function FE0HS30()
   /* ------------------------------------------------------------*/
   /* Select Actual PO qty from DFHIST.VWHCAT01*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FHBREC.XQACD = "01"; /* quality code*/
  FHBREC.FH7INVDT = FFRREC.FF4FCTMO; /* date*/
  FHBREC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FHBREC.XPCCD = FFWREC.XPCCD; /* category*/

  try
    call "IO5970" ("SS", SQLCA, FHBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, save data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -305) /* null value on sum*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHACT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FHBREC.FHBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS30

// Check M002 fields for changes
Function FE0HS35()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM002.FE0HMNPP[FE0HWIXC] != FE0HW02.FE0HMNPP[FE0HWEND])

      FFWREC.XXXMODID = "S35"; /* Module identification*/
      set FE0HM002.FE0HMNPP[FE0HWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM002.FE0HMPRP[FE0HWIXC] != FE0HW02.FE0HMPRP[FE0HWEND])

      FFWREC.XXXMODID = "S35"; /* Module identification*/
      set FE0HM002.FE0HMPRP[FE0HWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end


end // end FE0HS35

// Process PRAL PROP DMD change
Function FE0HS37()
   /* ------------------------------------------------------------*/
   /* Adjust PROP TOT by the difference in the amounts.*/
    /* ie: Net bookings*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FE0HW02.FFRPPRDM[FE0HWCOL] > FE0HW10.FFRPPRDM[FE0HWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FE0HW02.FE0HWPRT[sysVar.arrayIndex]; /* Prop tot*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPPRDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPPRDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW02.FE0HMPRT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW02.FE0HWPRT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL Cancelled by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  if (FE0HW02.FFRPPRDM[FE0HWCOL] > FE0HW10.FFRPPRDM[FE0HWIXC])
    FFXREC.FFXNUMB = FE0HW03.FE0HWTDC[sysVar.arrayIndex]; /* Total cancelled*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRPPRDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW10.FFRPPRDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW03.FE0HMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW03.FE0HWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PRE-ALLOC by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW03.FE0HWTDP[sysVar.arrayIndex]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPPRDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FE0HW02.FFRPPRDM[FE0HWCOL] > FE0HW10.FFRPPRDM[FE0HWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FE0HW03.FE0HWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPPRDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPPRDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW03.FE0HMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW03.FE0HWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FE0HW03.FE0HWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FE0HW00.FE0HWPCT = FE0HW03.FE0HWTDC[sysVar.arrayIndex] * 100;
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW03.FE0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW03.FE0HWCAP[sysVar.arrayIndex] = FE0HW00.FE0HWPCT; /* Cancellation %*/
  else
    FE0HW03.FE0HWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOT ACTIVE PROP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW03.FE0HWTAP[sysVar.arrayIndex]; /* Tot active prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPPRDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTAP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTAP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust PROP DMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW04.FE0HWDPR[sysVar.arrayIndex]; /* Prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPPRDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDPR[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDPR[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PROP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW04.FE0HWDTP[sysVar.arrayIndex]; /* Total prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPPRDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDTP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Determine CALC PROP FCST for the current month only.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FF4FCTMO[sysVar.arrayIndex] == FE0HW01.FFQCURMO) /* Fcst mo EQ curr*/
    FFXREC.FFXNUMB = FE0HW04.FE0HWDPR[FE0HWCOL] * FE0HW00.FE0HWDIM;
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / FE0HW00.FE0HWDTD, -mathLib.decimals(FFXREC.FFXNUMB));
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FE0HWDNP[FE0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0HW04.FE0HMDCP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW04.FE0HWDCP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust CNCL PROP DMD by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FE0HW02.FFRPPRDM[FE0HWCOL] > FE0HW10.FFRPPRDM[FE0HWIXC])
    FFXREC.FFXNUMB = FE0HW02.FFRCPRDM[sysVar.arrayIndex]; /* Cncl prop dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRPPRDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW10.FFRPPRDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW02.FE0HMPRC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW02.FFRCPRDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust PRAL PROP DMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW02.FFRPPRDM[sysVar.arrayIndex]; /* Pral prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPPRDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPPRDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMPRP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRPPRDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FE0HS37

// Process PRAL NATL PDMD change
Function FE0HS39()
   /* ------------------------------------------------------------*/
   /* Adjust NATL PROP TOT by the difference in the amounts.*/
    /* ie: Net bookings*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FE0HW02.FFRPNPDM[FE0HWCOL] > FE0HW10.FFRPNPDM[FE0HWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FE0HW02.FE0HWNPT[sysVar.arrayIndex]; /* Natl prop tot*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPNPDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNPDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW02.FE0HMNPT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW02.FE0HWNPT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL Cancelled by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FE0HW02.FFRPNPDM[FE0HWCOL] > FE0HW10.FFRPNPDM[FE0HWIXC])
    FFXREC.FFXNUMB = FE0HW03.FE0HWTDC[sysVar.arrayIndex]; /* Total pre-alloc*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRPNPDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW10.FFRPNPDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW03.FE0HMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW03.FE0HWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PRE-ALLOC by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW03.FE0HWTDP[sysVar.arrayIndex]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPNPDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNPDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTDP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTDP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FE0HW02.FFRPNPDM[FE0HWCOL] > FE0HW10.FFRPNPDM[FE0HWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FE0HW03.FE0HWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPNPDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNPDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW03.FE0HMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW03.FE0HWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FE0HW03.FE0HWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FE0HW00.FE0HWPCT = FE0HW03.FE0HWTDC[sysVar.arrayIndex] * 100;
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW03.FE0HWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW03.FE0HWCAP[sysVar.arrayIndex] = FE0HW00.FE0HWPCT; /* Cancellation %*/
  else
    FE0HW03.FE0HWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust TOT ACTIVE PROP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW03.FE0HWTAP[sysVar.arrayIndex]; /* Tot active prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPNPDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNPDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW03.FE0HMTAP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW03.FE0HWTAP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


   /* ------------------------------------------------------------*/
   /* Adjust NATL PROP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW04.FE0HWDNP[sysVar.arrayIndex]; /* Prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPNPDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNPDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDNP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDNP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PROP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW04.FE0HWDTP[sysVar.arrayIndex]; /* Total prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPNPDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNPDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMDTP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Determine CALC PROP FCST for the current month only.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FF4FCTMO[sysVar.arrayIndex] == FE0HW01.FFQCURMO) /* Fcst mo EQ curr*/
    FFXREC.FFXNUMB = FE0HW04.FE0HWDPR[FE0HWCOL] * FE0HW00.FE0HWDIM;
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / FE0HW00.FE0HWDTD, -mathLib.decimals(FFXREC.FFXNUMB));
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FE0HWDNP[FE0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0HW04.FE0HMDCP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW04.FE0HWDCP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust CNCL NATL PDMD by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FE0HW02.FFRPNPDM[FE0HWCOL] > FE0HW10.FFRPNPDM[FE0HWIXC])
    FFXREC.FFXNUMB = FE0HW02.FFRCNPDM[sysVar.arrayIndex]; /* Pral prop dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW02.FFRPNPDM[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW10.FFRPNPDM[FE0HWIXC];
    XSFFS10(); /* Translate to thousands*/
    FE0HW02.FE0HMNPC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW02.FFRCNPDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust PRAL NATL PDMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0HW02.FFRPNPDM[sysVar.arrayIndex]; /* Pral prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW02.FFRPNPDM[FE0HWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRPNPDM[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW02.FE0HMNPP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW02.FFRPNPDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FE0HS39

// Check M004 fields for changes
Function FE0HS40()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FE0HM004.FF2FUIND != FE0HW04.FF2FUIND) /* Futr yr ind*/

    FFWREC.XXXMODID = "S40"; /* Module identification*/
    set FE0HM004.FF2FUIND cursor, bold; /* Highlight*/
    converseLib.validationFailed(219); /* Modifications not allowed*/

  end

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM004.FE0HMPCF[FE0HWIXC] != FE0HW04.FE0HMPCF[FE0HWEND])

      FFWREC.XXXMODID = "S40"; /* Module identification*/
      set FE0HM004.FE0HMPCF[FE0HWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end


end // end FE0HS40

// Process FUTR YR IND change
Function FE0HS41()
   /* ------------------------------------------------------------*/
   /* Establish the year indicators used to calculate history.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FF2PRIND = FE0HW01.FF2PRIND; /* Prop yr ind*/
  FE0HW00.FF2FUIND = FE0HM004.FF2FUIND; /* Futr yr ind*/
  FE0HW00.FF2DMIND = FE0HW05.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Initialize the subtotal and accum total accumulators.*/
   /* ------------------------------------------------------------*/

  FE0HW08.FE0HWHCF = 0; /* Historical combined subtotal*/
  FE0HW08.FE0HWHFU = 0; /* Historical futures subtotal*/
  FE0HW09.FE0HWHCF = 0; /* Historical combined accum total*/
  FE0HW09.FE0HWHFU = 0; /* Historical futures accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate HIST FUT % for each month and subtotal.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWCOL = 2; /* First season begin*/

  while (FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* ===> more fcst months*/

    if (FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB" /* ===> Season subtotal*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM") /* ===> Accum subtotal*/

      if (FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB") /* ===> Season subtotal*/
        if (FE0HW08.FE0HWHCF > 0) /* Subtotal GT zero*/
          FE0HW00.FE0HWPCT = FE0HW08.FE0HWHFU * 100;
          FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW08.FE0HWHCF, -mathLib.decimals(FE0HW00.FE0HWPCT));
          FE0HW04.FE0HWDHF[FE0HWCOL] = FE0HW00.FE0HWPCT;
                                   /* Hist fut %*/
        else
          FE0HW04.FE0HWDHF[FE0HWCOL] = 0; /* Hist fut %*/
        end
        FE0HW09.FE0HWHCF = FE0HW09.FE0HWHCF + FE0HW08.FE0HWHCF;
                                   /* accum total*/
        FE0HW09.FE0HWHFU = FE0HW09.FE0HWHFU + FE0HW08.FE0HWHFU;
                                   /* accum total*/
        FE0HW08.FE0HWHCF = 0; /* Historical combined subtotal*/
        FE0HW08.FE0HWHFU = 0; /* Historical futures subtotal*/
      end

      /* ------------------------------------------------------------*/
       /* for the Accum total*/
       /* Calculate HIST FUT % if accum total is greater than zero.*/
      /* ------------------------------------------------------------*/

      if (FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM") /* ===> Accum subtotal*/
        if (FE0HW09.FE0HWHCF > 0) /* accum total GT zero*/
          FE0HW00.FE0HWPCT = FE0HW09.FE0HWHFU * 100;
          FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW09.FE0HWHCF, -mathLib.decimals(FE0HW00.FE0HWPCT));
          FE0HW04.FE0HWDHF[FE0HWCOL] = FE0HW00.FE0HWPCT;
                                   /* Hist fut %*/
        else
          FE0HW04.FE0HWDHF[FE0HWCOL] = 0; /* Hist fut %*/
        end
      end

    else /* ===> load and sub total data*/

      /* ------------------------------------------------------------*/
       /* Calculate HIST FUT % for each month*/
      /* ------------------------------------------------------------*/

      FFRREC.FF4FCTMO = FE0HW01.FF4FCTMO[FE0HWCOL]; /* Fcst mo*/

      FE0HS07(); /* Sum one year ago history*/

      FE0HS08(); /* Sum two years ago history*/

      if (FE0HW00.FE0HWHCF > 0) /* Combined GT zero*/

        FE0HW00.FE0HWPCT = FE0HW00.FE0HWHFU * 100;
        FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW00.FE0HWHCF, -mathLib.decimals(FE0HW00.FE0HWPCT));
        FE0HW04.FE0HWDHF[FE0HWCOL] = FE0HW00.FE0HWPCT; /* Hist fut %*/

      else

        FE0HW04.FE0HWDHF[FE0HWCOL] = 0; /* Hist fut %*/

      end

      FE0HW08.FE0HWHCF = FE0HW08.FE0HWHCF + FE0HW00.FE0HWHCF; /* Subtotal*/
      FE0HW08.FE0HWHFU = FE0HW08.FE0HWHFU + FE0HW00.FE0HWHFU; /* Subtotal*/

    end /* ===> Season subtotal*/

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Next month of season*/

  end

   /* ------------------------------------------------------------*/
   /* Save the changed FUTR YR IND in map display storage.*/
   /* ------------------------------------------------------------*/

  FE0HW04.FF2FUIND = FE0HM004.FF2FUIND; /* Futr yr ind*/


end // end FE0HS41

// Process CURR PROP FCST change
Function FE0HS42()
   /* ------------------------------------------------------------*/
   /* Adjust CURR PROP FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWDMD = "Y"; /* set dmd changed switch to yes*/
  FFXREC.FFXNUMB = FE0HW04.FFRCPRFC[sysVar.arrayIndex]; /* Curr prop fcst*/
  if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "  SUB" /* Season subtotal*/
   || FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
    if (FE0HW04.FFRCPRFC[FE0HWCOL] > 0) /* Curr prop fcst GT zero*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW04.FFRCPRFC[FE0HWCOL];
    end
  else
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW04.FFRCPRFC[FE0HWCOL];
  end
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRCPRFC[FE0HWIXC];
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMPCF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate CURR DMD FCST as TOTAL FUT plus CURR PROP FCST.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "  SUB" /* Season subtotal*/
   || FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
    FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW05.FFRCDMFC[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FE0HWDTF[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRCPRFC[FE0HWIXC];
  else
    FFXREC.FFXNUMB = FE0HW04.FE0HWDTF[sysVar.arrayIndex]; /* Curr dmd fcst*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FFRCPRFC[sysVar.arrayIndex];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMFCD[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FFRCDMFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate FCST FUT % if CURR DMD FCST greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] > 0) /* Curr dmd fcst GT zero*/
    FE0HW00.FE0HWPCT = FE0HW04.FE0HWDTF[sysVar.arrayIndex] * 100;
    FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW00.FE0HWPCT));
    FE0HW04.FE0HWDFF[sysVar.arrayIndex] = FE0HW00.FE0HWPCT; /* Fcst fut %*/
  else
    FE0HW04.FE0HWDFF[sysVar.arrayIndex] = 0; /* Fcst fut %*/
  end


end // end FE0HS42

// Calculate FCST PROP IDX
Function FE0HS44()
   /* ------------------------------------------------------------*/
   /* Calculate FCST PROP IDX for each month in the season.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/

    FE0HW00.FE0HWEND = sysVar.arrayIndex; /* Ending column*/

    FE0HW00.FE0HWNMO = 0;
    FE0HW00.FE0HWIXP = sysVar.arrayIndex; /* Prior index*/
    FE0HW00.FE0HWIXP = FE0HW00.FE0HWIXP - 1; /* Decrement prior index*/
    while (FE0HW01.FE0HMMON[FE0HWIXP] != "  SUB" /* Not sub*/
     && FE0HW01.FE0HMMON[FE0HWIXP] != "ACCUM" /* & not accum*/
     && FE0HW00.FE0HWIXP > 1) /* & not prior to first sesn*/
      FE0HW00.FE0HWNMO = FE0HW00.FE0HWNMO + 1; /* Add to mos in sesn ctr*/
      FE0HW00.FE0HWIXP = FE0HW00.FE0HWIXP - 1; /* Decrement prior index*/
    end

    sysVar.arrayIndex = sysVar.arrayIndex - FE0HW00.FE0HWNMO; /* Season begin month*/

  end

  while (sysVar.arrayIndex <= FE0HW00.FE0HWEND) /* Until end of season*/

    if (FE0HW04.FFRCPRFC[FE0HWEND] > 0 /* Season prop GT zero*/
     && FE0HW04.FFRCPRFC[sysVar.arrayIndex] > 0) /* and fcst GT zero*/

      FE0HW00.FE0HWPCT = FE0HW04.FFRCPRFC[sysVar.arrayIndex] * 100; /* Curr prop fcst*/
      FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW04.FFRCPRFC[FE0HWEND], -mathLib.decimals(FE0HW00.FE0HWPCT));
      FE0HW04.FE0HWDFI[sysVar.arrayIndex] = FE0HW00.FE0HWPCT; /* Fcst prop idx*/

    else

      FE0HW04.FE0HWDFI[sysVar.arrayIndex] = 0; /* Fcst prop idx*/

    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Next season month*/

  end


end // end FE0HS44

// Process FCST FUT %   change
Function FE0HS46()
   /* ------------------------------------------------------------*/
   /* Calc fields the related to FCST FUT % change*/
    /* ie.)  Tot futures    = curr dmd * Fcst fut %*/
          /* Curr prop fcst = Curr dmd - Tot futures*/

   /* ------------------------------------------------------------*/


  FE0HW04.FE0HWDFF[FE0HWCOL] = FE0HM004.FE0HMDFF[FE0HWIXC];


   /* ------------------------------------------------------------*/
   /* Calculate Total futures using the changed fcst fut %.*/
   /* ------------------------------------------------------------*/

   /* ===> subtract out the old QTYS*/

  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FE0HW04.FE0HWDTF[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW04.FE0HWDTF[FE0HWCOL];
    FE0HW04.FE0HWDTF[sysVar.arrayIndex] = FFXREC.FFXNUMB;

  end

  while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/
      FFXREC.FFXNUMB = FE0HW04.FE0HWDTF[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW04.FE0HWDTF[FE0HWCOL];
      FE0HW04.FE0HWDTF[sysVar.arrayIndex] = FFXREC.FFXNUMB;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

   /* ===> calc the new QTYS*/
    /* ie.)  Tot futures    = curr dmd * Fcst fut %*/

  FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[FE0HWCOL] * FE0HW04.FE0HWDFF[FE0HWCOL];
  FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / 100, -mathLib.decimals(FFXREC.FFXNUMB));

  XSFFS10(); /* Translate to thousands*/

  FE0HW04.FE0HMDTF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FE0HWDTF[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ===> add in the new QTYS*/

  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FE0HW04.FE0HWDTF[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FE0HWDTF[FE0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0HW04.FE0HMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW04.FE0HWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    /* now calc the sub   total as ---> futures / curr dmd fcst*/
    if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] == 0)
      FE0HW04.FE0HWDFF[sysVar.arrayIndex] = 0;
    else
      FE0HW00.FE0HWPCT = FE0HW04.FE0HWDTF[sysVar.arrayIndex];
      FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT * 100 / FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW00.FE0HWPCT));
      FE0HW04.FE0HWDFF[sysVar.arrayIndex] = FE0HW00.FE0HWPCT;
    end

  end

  while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
      FFXREC.FFXNUMB = FE0HW04.FE0HWDTF[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FE0HWDTF[FE0HWCOL];
      XSFFS10(); /* Translate to thousands*/
      FE0HW04.FE0HMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FE0HW04.FE0HWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

      /* now calc the accum total as ---> futures / curr dmd fcst*/
      if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] == 0)
        FE0HW04.FE0HWDFF[sysVar.arrayIndex] = 0;
      else
        FE0HW00.FE0HWPCT = FE0HW04.FE0HWDTF[sysVar.arrayIndex];
        FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT * 100 /         FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW00.FE0HWPCT));
        FE0HW04.FE0HWDFF[sysVar.arrayIndex] = FE0HW00.FE0HWPCT;
      end
    end /* ===> accum total*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end /* ===> more fcst months*/

   /* ------------------------------------------------------------*/
   /* Calculate CURR PROP FCST using the changed Futures.*/
   /* ------------------------------------------------------------*/

   /* ===> subtract out the old QTYS*/

  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FE0HW04.FFRCPRFC[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW04.FFRCPRFC[FE0HWCOL];
    FE0HW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXNUMB;

  end


  while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
      FFXREC.FFXNUMB = FE0HW04.FFRCPRFC[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW04.FFRCPRFC[FE0HWCOL];
      FE0HW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXNUMB;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end /* ===> more fcst months*/

   /* ===> calc the new QTYS*/
          /* Curr prop fcst = Curr dmd - Tot futures*/

  FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[FE0HWCOL]; /* Curr dmd fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW04.FE0HWDTF[FE0HWCOL];

  XSFFS10(); /* Translate to thousands*/

  FE0HW04.FE0HMPCF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FFRCPRFC[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ===> add in the new QTYS*/

  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/
    FFXREC.FFXNUMB = FE0HW04.FFRCPRFC[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FFRCPRFC[FE0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0HW04.FE0HMPCF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


  while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
      FFXREC.FFXNUMB = FE0HW04.FFRCPRFC[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FFRCPRFC[FE0HWCOL];
      XSFFS10(); /* Translate to thousands*/
      FE0HW04.FE0HMPCF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FE0HW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end /* ===> more fcst months*/

end // end FE0HS46

// Check M005 fields for changes
Function FE0HS50()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM005.FE0HMFFR[FE0HWIXC] != FE0HW05.FE0HWFFR[FE0HWEND])

      FFWREC.XXXMODID = "S50"; /* Module identification*/
      set FE0HM005.FE0HMFFR[FE0HWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end

  if (FE0HM005.FF2DMIND != FE0HW05.FF2DMIND)
    FFWREC.XXXMODID = "S50"; /* Module identification*/
    converseLib.validationFailed(219); /* Modifications not allowed*/
  end

  FE0HW00.FE0HWIXC = 8; /* Column index*/
  FE0HW00.FE0HWEND = FE0HW00.FE0HWBEG + 7; /* Ending column*/

  while (FE0HW00.FE0HWIXC > 0) /* Until end of columns*/

    if (FE0HM005.FE0HMFCD[FE0HWIXC] != FE0HW05.FE0HMFCD[FE0HWEND])

      FFWREC.XXXMODID = "S50"; /* Module identification*/
      set FE0HM005.FE0HMFCD[FE0HWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FE0HW00.FE0HWEND = FE0HW00.FE0HWEND - 1; /* Ending column*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC - 1; /* Column index*/

  end


end // end FE0HS50

// Process DMD YR IND change
Function FE0HS51()
   /* ------------------------------------------------------------*/
   /* Establish the year indicators used to calculate history.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FF2PRIND = FE0HW01.FF2PRIND; /* Prop yr ind*/
  FE0HW00.FF2FUIND = FE0HW04.FF2FUIND; /* Futr yr ind*/
  FE0HW00.FF2DMIND = FE0HM005.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Initialize the subtotal and accum total accumulators.*/
   /* ------------------------------------------------------------*/

  FE0HW08.FE0HWHDM = 0; /* Historical demand subtotal*/
  FE0HW09.FE0HWHDM = 0; /* Historical demand accum total*/

   /* ------------------------------------------------------------*/
   /* Accumulate historical demand for each month and subtotal.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWCOL = 2; /* Current column*/

  while (FE0HW01.FE0HMMON[FE0HWCOL] > "  ") /* ===> More fcst months*/

    if (FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB" /* ===> Season subtotal*/
     || FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM") /* ===> Season accum total*/

      if (FE0HW01.FE0HMMON[FE0HWCOL] == "  SUB") /* ===> Season subtotal*/
        FE0HW05.FE0HWHDM[FE0HWCOL] = FE0HW08.FE0HWHDM; /* Hist demand*/
        FE0HW09.FE0HWHDM = FE0HW09.FE0HWHDM + FE0HW08.FE0HWHDM;
                                   /* accum total*/
        FE0HW08.FE0HWHDM = 0; /* Historical demand subtotal*/
      end /* ===> Season subtotal*/

    else

      FFRREC.FF4FCTMO = FE0HW01.FF4FCTMO[FE0HWCOL]; /* Fcst mo*/

      FE0HS07(); /* Sum one year ago history*/

      FE0HS08(); /* Sum two years ago history*/

      FE0HW05.FE0HWHDM[FE0HWCOL] = FE0HW00.FE0HWHDM; /* Hist demand*/

      FE0HW08.FE0HWHDM = FE0HW08.FE0HWHDM + FE0HW00.FE0HWHDM; /* Subtotal*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Current column*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate HIST SEAS IDX for each month and subtotal.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWCOL = 2; /* First season begin*/

  while (FE0HW01.FE0HMMON[FE0HWCOL] > " ") /* ===> more fcst months*/

    if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/
      FE0HW00.FE0HWCOL = sysVar.arrayIndex; /* Subtotal column*/

      FE0HW00.FE0HWNMO = 0;
      FE0HW00.FE0HWIXP = sysVar.arrayIndex; /* Prior index*/
      FE0HW00.FE0HWIXP = FE0HW00.FE0HWIXP - 1; /* Decrement prior index*/
      while (FE0HW01.FE0HMMON[FE0HWIXP] != "  SUB" /* Not sub*/
       && FE0HW01.FE0HMMON[FE0HWIXP] != "ACCUM" /* & not accum*/
       && FE0HW00.FE0HWIXP > 1) /* & not prior to first sesn*/
        FE0HW00.FE0HWNMO = FE0HW00.FE0HWNMO + 1; /* Add to mos in sesn ctr*/
        FE0HW00.FE0HWIXP = FE0HW00.FE0HWIXP - 1; /* Decrement prior index*/
      end

    end

    FE0HW08.FE0HWHDM = FE0HW05.FE0HWHDM[FE0HWCOL]; /* Hist dmd*/
    FE0HW00.FE0HWIXC = FE0HW00.FE0HWCOL - FE0HW00.FE0HWNMO; /* Season begin*/

    while (FE0HW00.FE0HWIXC <= FE0HW00.FE0HWCOL) /* Until end of season*/

      if (FE0HW08.FE0HWHDM > 0) /* Subtotal demand GT zero*/

        FE0HW00.FE0HWPCT = FE0HW05.FE0HWHDM[FE0HWIXC] * 100;
        FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW08.FE0HWHDM, -mathLib.decimals(FE0HW00.FE0HWPCT));
        FE0HW05.FE0HWHSI[FE0HWIXC] = FE0HW00.FE0HWPCT;

      else

        FE0HW05.FE0HWHSI[FE0HWIXC] = 0; /* Hist seas idx*/

      end

      FE0HW00.FE0HWIXC = FE0HW00.FE0HWIXC + 1; /* Next month of season*/

    end

    FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Next season begin*/

    /* ------------------------------------------------------------*/
     /* Set HIST SEAS IDX for accum total depending on demand.*/
    /* ------------------------------------------------------------*/

    if (FE0HW01.FE0HMMON[FE0HWCOL] == "ACCUM") /* ===> Season accum total*/
      if (FE0HW09.FE0HWHDM > 0) /* accum total GT zero*/
        FE0HW05.FE0HWHSI[FE0HWCOL] = 100; /* Hist seas idx*/
      else
        FE0HW05.FE0HWHSI[FE0HWCOL] = 0; /* Hist seas idx*/
      end
      FE0HW00.FE0HWCOL = FE0HW00.FE0HWCOL + 1; /* Next season begin*/
    end /* ===> Season accum total*/

  end /* ===> more fcst months*/

   /* ------------------------------------------------------------*/
   /* Save the changed DMD YR IND in map display storage.*/
   /* ------------------------------------------------------------*/

  FE0HW05.FF2DMIND = FE0HM005.FF2DMIND; /* Dmd yr ind*/


end // end FE0HS51

// Process CURR DMD FCST change
Function FE0HS52()
   /* ------------------------------------------------------------*/
   /* Adjust CURR DMD FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWDMD = "Y"; /* set dmd changed switch to yes*/
  if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "  SUB" /* Season subtotal*/
   || FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/

    if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] > 0
     || FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
      FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW00.FFRCDMFC;
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW05.FFRCDMFC[FE0HWCOL];
    else
      FE0HW00.FE0HWWRK = sysVar.arrayIndex - FE0HW00.FE0HWCOL;
      if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] == 0 /* process current subtot*/
       && FE0HW00.FE0HWWRK <= 6)                  
        FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW00.FFRCDMFC;
        FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW05.FFRCDMFC[FE0HWCOL];
      else
        FFXREC.FFXNUMB = 0;
      end
    end

  else
    FE0HW00.FFRCDMFC = FE0HW05.FFRCDMFC[sysVar.arrayIndex]; /* Prev dmd fcst*/
    FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW05.FFRCDMFC[FE0HWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW10.FFRCDMFC[FE0HWIXC];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW05.FE0HMFCD[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FFRCDMFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate TOTAL FUT or FCST FUT % depending on FCST MO.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FF4FCTMO[FE0HWCOL] > FE0HW01.FFQMBYMO  /* Fcst mo GT buy mo*/
   && FE0HW01.FE0HMMON[sysVar.arrayIndex] != "  SUB" /* and not season subtotal*/
   && FE0HW01.FE0HMMON[sysVar.arrayIndex] != "ACCUM") /* and not accum total*/
    FE0HW00.FE0HWDTF = FE0HW04.FE0HWDTF[sysVar.arrayIndex]; /* Prev total fut*/
    FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[sysVar.arrayIndex]; /* Total fut*/
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FE0HW04.FE0HWDFF[sysVar.arrayIndex] / 100, -mathLib.decimals(FFXREC.FFXNUMB));
    XSFFS10(); /* Translate to thousands*/
    FE0HW04.FE0HMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW04.FE0HWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  else
    if (FE0HW01.FF4FCTMO[FE0HWCOL] > FE0HW01.FFQMBYMO) /* Fcst mo GT buy mo*/
      if (FE0HW04.FE0HWDTF[sysVar.arrayIndex] > 0
       || FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
        FFXREC.FFXNUMB = FE0HW04.FE0HWDTF[sysVar.arrayIndex]; /* Total fut*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW00.FE0HWDTF;
        FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FE0HWDTF[FE0HWCOL];
        XSFFS10(); /* Translate to thousands*/
        FE0HW04.FE0HMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands numb*/
        FE0HW04.FE0HWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
      else
        FE0HW00.FE0HWWRK = sysVar.arrayIndex - FE0HW00.FE0HWCOL;
        if (FE0HW04.FE0HWDTF[sysVar.arrayIndex] == 0 /* process current subtot*/
         && FE0HW00.FE0HWWRK <= 6)                  
          FFXREC.FFXNUMB = FE0HW04.FE0HWDTF[sysVar.arrayIndex]; /* Total fut*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW00.FE0HWDTF;
          FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FE0HWDTF[FE0HWCOL];
          XSFFS10(); /* Translate to thousands*/
          FE0HW04.FE0HMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands*/
          FE0HW04.FE0HWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded num*/
        else
          FFXREC.FFXNUMB = 0;
          XSFFS10(); /* Translate to thousands*/
          FE0HW04.FE0HMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands*/
          FE0HW04.FE0HWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded num*/
        end
      end
    end
    if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] > 0) /* Curr dmd fcst GT zero*/
      FE0HW00.FE0HWPCT = FE0HW04.FE0HWDTF[sysVar.arrayIndex] * 100; /* Fcst fut %*/
      FE0HW00.FE0HWPCT = mathLib.round(FE0HW00.FE0HWPCT / FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW00.FE0HWPCT));
      FE0HW04.FE0HWDFF[sysVar.arrayIndex] = FE0HW00.FE0HWPCT;
    else
      FE0HW04.FE0HWDFF[sysVar.arrayIndex] = 0; /* Fcst fut %*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Adjust CURR PROP FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "  SUB" /* Season subtotal*/
   || FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/

    if (FE0HW04.FFRCPRFC[sysVar.arrayIndex] > 0
     || FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
      FFXREC.FFXNUMB = FE0HW04.FFRCPRFC[sysVar.arrayIndex]; /* Curr prop fcst*/
      if (FE0HW00.FFRCPRFC > 0) /* Prev prop fcst GT zero*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW00.FFRCPRFC;
      end
      if (FE0HW04.FFRCPRFC[FE0HWCOL] > 0) /* Curr prop fcst GT zero*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FFRCPRFC[FE0HWCOL];
      end
    else
      FE0HW00.FE0HWWRK = sysVar.arrayIndex - FE0HW00.FE0HWCOL;
      if (FE0HW04.FE0HWDTF[sysVar.arrayIndex] == 0 /* process current subtot*/
       && FE0HW00.FE0HWWRK <= 6)                  
        FFXREC.FFXNUMB = FE0HW04.FFRCPRFC[sysVar.arrayIndex]; /* Curr prop fcst*/
        if (FE0HW00.FFRCPRFC > 0) /* Prev prop fcst GT zero*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW00.FFRCPRFC;
        end
        if (FE0HW04.FFRCPRFC[FE0HWCOL] > 0) /* Curr prop fcst GT zero*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW04.FFRCPRFC[FE0HWCOL];
        end
      else
        FFXREC.FFXNUMB = 0;
      end
    end
  else
    FE0HW00.FFRCPRFC = FE0HW04.FFRCPRFC[sysVar.arrayIndex]; /* Prev prop fcst*/
    FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[sysVar.arrayIndex] - FE0HW04.FE0HWDTF[sysVar.arrayIndex];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0HW04.FE0HMPCF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FE0HS52

// Process FCST FILL RT change
Function FE0HS54()
   /* ------------------------------------------------------------*/
   /* Accumulate the total of FCST FILL RT for the season.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWDMD = "Y"; /* set dmd changed switch to yes*/
  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/

    FE0HW00.FE0HWEND = sysVar.arrayIndex; /* End of season*/

    FE0HW00.FE0HWNMO = 0;
    FE0HW00.FE0HWIXP = sysVar.arrayIndex; /* Prior index*/
    FE0HW00.FE0HWIXP = FE0HW00.FE0HWIXP - 1; /* Decrement prior index*/
    while (FE0HW01.FE0HMMON[FE0HWIXP] != "  SUB" /* Not sub*/
     && FE0HW01.FE0HMMON[FE0HWIXP] != "ACCUM" /* & not accum*/
     && FE0HW00.FE0HWIXP > 1) /* & not prior to first sesn*/
      FE0HW00.FE0HWNMO = FE0HW00.FE0HWNMO + 1; /* Add to mos in sesn ctr*/
      FE0HW00.FE0HWIXP = FE0HW00.FE0HWIXP - 1; /* Decrement prior index*/
    end

    sysVar.arrayIndex = sysVar.arrayIndex - FE0HW00.FE0HWNMO; /* Season begin*/

    FE0HW08.FE0HWFFR = 0; /* Season subtotal*/

  end

  FE0HW05.FE0HWFFR[FE0HWCOL] = FE0HM005.FE0HMFFR[FE0HWIXC];
  FE0HW05.FE0HMFFR[FE0HWCOL] = FE0HM005.FE0HMFFR[FE0HWIXC];

   /* ------------------------------------------------------------*/
   /* Calculate CURR SLS FCST using the changed FCST FILL RT.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW05.FH5MSHQT[FE0HWCOL];
    FE0HW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXNUMB;

  end

  while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* ===> ACCUM TOTAL*/
      FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0HW05.FH5MSHQT[FE0HWCOL];
      FE0HW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXNUMB;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  FFXREC.FFXNUMB = FE0HW05.FFRCDMFC[FE0HWCOL]; /* Curr dmd fcst*/
  FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FE0HW05.FE0HWFFR[FE0HWCOL] / 100, -mathLib.decimals(FFXREC.FFXNUMB));

  XSFFS10(); /* Translate to thousands*/

  FE0HW05.FE0HMCSF[FE0HWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0HW05.FH5MSHQT[FE0HWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if ("  SUB" in FE0HW01.FE0HMMON from FE0HWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW05.FH5MSHQT[FE0HWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0HW05.FE0HMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0HW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end


  while (FE0HW01.FE0HMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FE0HW01.FE0HMMON[sysVar.arrayIndex] == "ACCUM") /* ===> ACCUM TOTAL*/
      FFXREC.FFXNUMB = FE0HW05.FH5MSHQT[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0HW05.FH5MSHQT[FE0HWCOL];
      XSFFS10(); /* Translate to thousands*/
      FE0HW05.FE0HMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FE0HW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

   /* ------------------------------------------------------------*/
   /* Adjust the season subtotal and accum total FCST FILL RT.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWPOS = FE0HW00.FE0HWCOL;

  while (FE0HW01.FE0HMMON[FE0HWPOS] > " ") /* more forecast month*/

    if ("  SUB" in FE0HW01.FE0HMMON from FE0HWPOS) /* Season subtotal*/

      if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] != 0)
        FE0HW05.FE0HWFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FH5MSHQT[sysVar.arrayIndex] * 100 /         FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW05.FE0HWFFR[sysVar.arrayIndex]));
      else
        if (FE0HW05.FH5MSHQT[sysVar.arrayIndex] == 0)
          FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 100;
        else
          FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 0;
        end
      end
      FE0HW05.FE0HMFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FE0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0HW05.FE0HMFFR[sysVar.arrayIndex]));
    end

    if ("ACCUM" in FE0HW01.FE0HMMON from FE0HWPOS) /* Season accum total*/

      if (FE0HW05.FFRCDMFC[sysVar.arrayIndex] != 0)
        FE0HW05.FE0HWFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FH5MSHQT[sysVar.arrayIndex] * 100 /         FE0HW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FE0HW05.FE0HWFFR[sysVar.arrayIndex]));
      else
        if (FE0HW05.FH5MSHQT[sysVar.arrayIndex] == 0)
          FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 100;
        else
          FE0HW05.FE0HWFFR[sysVar.arrayIndex] = 0;
        end
      end
      FE0HW05.FE0HMFFR[sysVar.arrayIndex] = mathLib.round(FE0HW05.FE0HWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0HW05.FE0HMFFR[sysVar.arrayIndex]));
    end

    FE0HW00.FE0HWPOS = sysVar.arrayIndex + 1;

  end

end // end FE0HS54

// Check M007 fields for changes
Function FE0HS70()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FE0HW00.FE0HWIXL = 10; /* Line index*/

  while (FE0HW00.FE0HWIXL > 0) /* Until end of lines*/

    if (FE0HM007.FFPCOMNT[FE0HWIXL] != FE0HW07.FFPCOMNT[FE0HWIXL])

      FFWREC.XXXMODID = "S70"; /* Module identification*/
      set FE0HM007.FFPCOMNT[FE0HWIXL] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FE0HW00.FE0HWIXL = FE0HW00.FE0HWIXL - 1; /* Line index*/

  end


end // end FE0HS70

// Open worksheet comment cursor
Function FE0HS80()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set FFPREC empty; /* Clear row storage area*/

  FFPREC.FFEWSNBR = FFQREC.FFEWSNBR; /* Worksheet number*/
  FFPREC.FFPCTIND = "F"; /* Comment type indicator*/

  try
    call "IO3800" ("S1", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FE0HW00.FE0HWIXL = 1; /* Line index*/
    FE0HW00.FE0HWSWC = "N"; /* Comments cursor EOF switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S80"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WORKSHEET COMMENT CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFPREC.FFPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS80

// Fetch next worksheet comment
Function FE0HS81()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3800" ("N1", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

        /* ------------------------------------------------------------*/
         /* If more than ten forcaster comments, indicate system error.*/
        /* ------------------------------------------------------------*/

      if (FE0HW00.FE0HWIXL > 10) /* More than ten comments*/

        FFWREC.XXXMODID = "S81"; /* Module identification*/
        converseLib.validationFailed(1); /* System error occurred*/

        TAEREC.TAEDESC1 = "MORE THAN TEN FORECASTER COMMENTS";
        TAEREC.TAEDESC2 = FE0HW01.FE0HWSNO[1]; /* Worksheet number*/

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "FETCH NEXT WORKSHEET COMMENT";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
        TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

        exit stack; /* Exit to display map*/

      end

      FE0HW07.FFPCOMNT[FE0HWIXL] = FFPREC.FFPCOMNT; /* Comment*/

      FE0HW00.FE0HWIXL = FE0HW00.FE0HWIXL + 1; /* Line index*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FE0HW00.FE0HWSWC = "Y"; /* Comment cursor EOF switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S81"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT WORKSHEET COMMENT";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFPREC.FFPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS81

// Close worksheet comment cursor
Function FE0HS82()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3800" ("C1", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S82"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE WORKSHEET COMMENT CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0HS82

//*** RECORD=FE0HW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0HW00 type basicRecord
  10 FE0HWAIN FE0HWAIN ; 
  10 FE0HWASL FE0HWASL ; 
  10 FE0HWBEG FE0HWBEG ; 
  10 FE0HWCOL FE0HWCOL ; 
  10 FE0HWPOS FE0HWPOS ; 
  10 FE0HWWRK FE0HWWRK ; 
  10 FE0HWEND FE0HWEND ; 
  10 FE0HWNMO FE0HWNMO ; 
  10 FE0HWMAX FE0HWMAX ; 
  10 FE0HWDAT FE0HWDAT ; 
    15 FE0HWDYY FE0HWDYY ; 
    15 FE0HWDMM FE0HWDMM ; 
  10 FE0HWDIM FE0HWDIM ; 
  10 FE0HWDTD FE0HWDTD ; 
  10 FE0HWTIM FE0HWTIM ; 
  10 FE0HWHCF FE0HWHCF ; 
  10 FE0HWHIN FE0HWHIN ; 
  10 FE0HWHOR FE0HWHOR ; 
  10 FE0HWHDM FE0HWHDM ; 
  10 FE0HWHFU FE0HWHFU ; 
  10 FE0HWHPR FE0HWHPR ; 
  10 FE0HWIXC FE0HWIXC ; 
  10 FE0HWIXL FE0HWIXL ; 
  10 FE0HWIXS FE0HWIXS ; 
  10 FE0HWIXP FE0HWIXP ; 
  10 FE0HWIXT FE0HWIXT ; 
  10 FE0HWIXW FE0HWIXW ; 
  10 FE0HWLRS FE0HWLRS ; 
  10 FE0HWPAD FE0HWPAD ; 
  10 FE0HWPAG FE0HWPAG ; 
  10 FE0HWPCT FE0HWPCT ; 
  10 FE0HWSWC FE0HWSWC ; 
  10 FE0HWSWF FE0HWSWF ; 
  10 FE0HWSWH FE0HWSWH ; 
  10 FE0HWSWI FE0HWSWI ; 
  10 FE0HWSWR FE0HWSWR ; 
  10 FE0HWSW1 FE0HWSW1 ; 
  10 FE0HWDMD FE0HWDMD ; 
  10 FF2FUIND FF2FUIND ; 
  10 FF2PRIND FF2PRIND ; 
  10 FF2DMIND FF2DMIND ; 
  10 FF2NSEAS FF2NSEAS ; 
  10 FF6BEINV FF6BEINV ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF4FCTMO FF4FCTMO ; 
  10 FE0HWSF FE0HWSF ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FE0HWDTF FE0HWDTF ; 
  10 FFZINDMO FFZINDMO ; 
    15 * char(2) ; 
    15 FE0HWMON FE0HWMON ; 
  10 FH1PAQTY FH1PAQTY ; 
  10 FH1ALQTY FH1ALQTY ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 XPLCD XPLCD ; 
end // end FE0HW00

//*** RECORD=FE0HW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FE0HW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FFWMODSW FFWMODSW ; 
  10 FE0HWCMO FE0HWCMO ; 
    15 * num(3) ; 
    15 FE0HWCCY FE0HWCCY ; 
    15 FE0HWCMM FE0HWCMM ; 
  10 * char(1) ; 
  10 FE0HWPMO FE0HWPMO ; 
    15 * num(3) ; 
    15 FE0HWPCY FE0HWPCY ; 
    15 FE0HWPMM FE0HWPMM ; 
  10 * char(1) ; 
  10 * char(1) ; 
  10 TAEDESC2 TAEDESC2 ; 
    15 * char(7) [9] ; 
      20 FE0HWNBR FE0HWNBR ; 
      20 * char(1) ; 
    15 * char(5) ; 
  10 FE0HWSNO FE0HWSNO [12] ; 
  10 FFABEGMO FFABEGMO [12] ; 
  10 FFAENDMO FFAENDMO [12] ; 
  10 FFQMBYMO FFQMBYMO ; 
  10 FFQCURMO FFQCURMO ; 
  10 FF2PRIND FF2PRIND ; 
  10 FFQLCOFU FFQLCOFU ; 
  10 FFQLCOPR FFQLCOPR ; 
  10 FFQOCOFU FFQOCOFU ; 
  10 FFQOCOPR FFQOCOPR ; 
  10 FF4FCTMO FF4FCTMO [61] ; 
  10 FE0HMMON FE0HMMON [61] ; 
  10 FE0HWFCO FE0HWFCO [61] ; 
  10 FE0HMFCO FE0HMFCO [61] ; 
  10 FE0HWPCO FE0HWPCO [61] ; 
  10 FE0HMPCO FE0HMPCO [61] ; 
  10 FFRPFUDM FFRPFUDM [61] ; 
  10 FE0HMFUP FE0HMFUP [61] ; 
  10 FFRAFUDM FFRAFUDM [61] ; 
  10 FE0HMFUA FE0HMFUA [61] ; 
  10 FFRIFUDM FFRIFUDM [61] ; 
  10 FE0HMFUI FE0HMFUI [61] ; 
  10 FFRCFUDM FFRCFUDM [61] ; 
  10 FE0HMFUC FE0HMFUC [61] ; 
  10 FE0HWFUT FE0HWFUT [61] ; 
  10 FE0HMFUT FE0HMFUT [61] ; 
  10 FFRPNFDM FFRPNFDM [61] ; 
  10 FE0HMNFP FE0HMNFP [61] ; 
  10 FFRANFDM FFRANFDM [61] ; 
  10 FE0HMNFA FE0HMNFA [61] ; 
  10 FFRINFDM FFRINFDM [61] ; 
  10 FE0HMNFI FE0HMNFI [61] ; 
  10 FFRCNFDM FFRCNFDM [61] ; 
  10 FE0HMNFC FE0HMNFC [61] ; 
  10 FE0HWNFT FE0HWNFT [61] ; 
  10 FE0HMNFT FE0HMNFT [61] ; 
end // end FE0HW01

//*** RECORD=FE0HW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record FE0HW02 type basicRecord
  10 FFRPPRDM FFRPPRDM [61] ; 
  10 FE0HMPRP FE0HMPRP [61] ; 
  10 FFRAPRDM FFRAPRDM [61] ; 
  10 FE0HMPRA FE0HMPRA [61] ; 
  10 FFRIPRDM FFRIPRDM [61] ; 
  10 FE0HMPRI FE0HMPRI [61] ; 
  10 FFRCPRDM FFRCPRDM [61] ; 
  10 FE0HMPRC FE0HMPRC [61] ; 
  10 FE0HWPRT FE0HWPRT [61] ; 
  10 FE0HMPRT FE0HMPRT [61] ; 
  10 FFRPNPDM FFRPNPDM [61] ; 
  10 FE0HMNPP FE0HMNPP [61] ; 
  10 FFRANPDM FFRANPDM [61] ; 
  10 FE0HMNPA FE0HMNPA [61] ; 
  10 FFRINPDM FFRINPDM [61] ; 
  10 FE0HMNPI FE0HMNPI [61] ; 
  10 FFRCNPDM FFRCNPDM [61] ; 
  10 FE0HMNPC FE0HMNPC [61] ; 
  10 FE0HWNPT FE0HWNPT [61] ; 
  10 FE0HMNPT FE0HMNPT [61] ; 
end // end FE0HW02

//*** RECORD=FE0HW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record FE0HW03 type basicRecord
  10 FE0HWTDP FE0HWTDP [61] ; 
  10 FE0HMTDP FE0HMTDP [61] ; 
  10 FE0HWTDA FE0HWTDA [61] ; 
  10 FE0HMTDA FE0HMTDA [61] ; 
  10 FE0HWTDI FE0HWTDI [61] ; 
  10 FE0HMTDI FE0HMTDI [61] ; 
  10 FE0HWTDC FE0HWTDC [61] ; 
  10 FE0HMTDC FE0HMTDC [61] ; 
  10 FE0HWTDT FE0HWTDT [61] ; 
  10 FE0HMTDT FE0HMTDT [61] ; 
  10 FE0HWCAP FE0HWCAP [61] ; 
  10 FE0HWTAF FE0HWTAF [61] ; 
  10 FE0HMTAF FE0HMTAF [61] ; 
  10 FE0HWTAP FE0HWTAP [61] ; 
  10 FE0HMTAP FE0HMTAP [61] ; 
end // end FE0HW03

//*** RECORD=FE0HW04 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record FE0HW04 type basicRecord
  10 FF2FUIND FF2FUIND ; 
  10 FE0HWDFU FE0HWDFU [61] ; 
  10 FE0HMDFU FE0HMDFU [61] ; 
  10 FE0HWDNF FE0HWDNF [61] ; 
  10 FE0HMDNF FE0HMDNF [61] ; 
  10 FE0HWDTF FE0HWDTF [61] ; 
  10 FE0HMDTF FE0HMDTF [61] ; 
  10 FE0HWDPR FE0HWDPR [61] ; 
  10 FE0HMDPR FE0HMDPR [61] ; 
  10 FE0HWDNP FE0HWDNP [61] ; 
  10 FE0HMDNP FE0HMDNP [61] ; 
  10 FE0HWDTP FE0HWDTP [61] ; 
  10 FE0HMDTP FE0HMDTP [61] ; 
  10 FE0HWDCP FE0HWDCP [61] ; 
  10 FE0HMDCP FE0HMDCP [61] ; 
  10 FFRCPRFC FFRCPRFC [61] ; 
  10 FE0HMPCF FE0HMPCF [61] ; 
  10 FF6PRPFC FF6PRPFC [61] ; 
  10 FE0HMPRF FE0HMPRF [61] ; 
  10 FE0HWDFF FE0HWDFF [61] ; 
  10 FE0HWDHF FE0HWDHF [61] ; 
  10 FE0HWUHF FE0HWUHF [61] ; 
  10 FE0HWDFI FE0HWDFI [61] ; 
  10 FE0HWDHI FE0HWDHI [61] ; 
  10 FE0HWUHI FE0HWUHI [61] ; 
  10 FE0HWHPR FE0HWHPR [61] ; 
end // end FE0HW04

//*** RECORD=FE0HW05 ****
// ------------------------
// Map 005 display storage.
// ------------------------
// ***********************
Record FE0HW05 type basicRecord
  10 FF2DMIND FF2DMIND ; 
  10 FFRCDMFC FFRCDMFC [61] ; 
  10 FE0HMFCD FE0HMFCD [61] ; 
  10 FE0HWMDM FE0HWMDM [61] ; 
  10 FE0HMMDM FE0HMMDM [61] ; 
  10 FF7RVFCT FF7RVFCT [61] ; 
  10 FE0HWHDM FE0HWHDM [61] ; 
  10 FE0HWFSI FE0HWFSI [61] ; 
  10 FE0HWHSI FE0HWHSI [61] ; 
  10 FE0HWUSI FE0HWUSI [61] ; 
  10 FE0HWRSI FE0HWRSI [61] ; 
  10 FE0HWFFR FE0HWFFR [61] ; 
  10 FE0HMFFR FE0HMFFR [61] ; 
  10 FE0HWHFR FE0HWHFR [61] ; 
  10 FH5MSHQT FH5MSHQT [61] ; 
  10 FE0HMCSF FE0HMCSF [61] ; 
  10 FF6SLFCT FF6SLFCT [61] ; 
  10 FE0HMMSL FE0HMMSL [61] ; 
end // end FE0HW05

//*** RECORD=FE0HW06 ****
// ------------------------
// Map 006 display storage.
// ------------------------
// ***********************
Record FE0HW06 type basicRecord
  10 FE0HWCMF FE0HWCMF ; 
  10 FF6BEINV FF6BEINV [61] ; 
  10 FE0HMINB FE0HMINB [61] ; 
  10 FFRPRDDU FFRPRDDU [61] ; 
  10 FE0HMDUE FE0HMDUE [61] ; 
  10 FFRSUBBY FFRSUBBY [61] ; 
  10 FE0HMQBY FE0HMQBY [61] ; 
  10 FFRTENBY FFRTENBY [61] ; 
  10 FE0HMTBY FE0HMTBY [61] ; 
  10 FE0HWSUP FE0HWSUP [61] ; 
  10 FE0HMSUP FE0HMSUP [61] ; 
  10 FG4BALSH FG4BALSH [61] ; 
  10 FE0HMBAL FE0HMBAL [61] ; 
  10 FE0HWINE FE0HWINE [61] ; 
  10 FE0HMINE FE0HMINE [61] ; 
  10 FF6SFSTK FF6SFSTK [61] ; 
  10 FE0HMSTK FE0HMSTK [61] ; 
  10 FF6SUGBY FF6SUGBY [61] ; 
  10 FE0HMSBY FE0HMSBY [61] ; 
  10 FF6PRFCT FF6PRFCT [61] ; 
  10 FE0HMFCT FE0HMFCT [61] ; 
  10 FE0HWTUR FE0HWTUR [61] ; 
  10 FFRDIRSH FFRDIRSH [61] ; 
  10 FE0HMDIR FE0HMDIR [61] ; 
  10 FE0HWNIL FE0HWNIL [61] ; 
  10 FE0HMNIL FE0HMNIL [61] ; 
end // end FE0HW06

//*** RECORD=FE0HW07 ****
// ------------------------
// Map 007 display storage.
// ------------------------
// ***********************
Record FE0HW07 type basicRecord
  10 FE0HWCMT FE0HWCMT ; 
    15 FFPCOMNT FFPCOMNT [10] ; 
end // end FE0HW07

//*** RECORD=FE0HW08 ****
// -----------------
// Season subtotals.
// -----------------
// ***********************
Record FE0HW08 type basicRecord
  10 FFRPFUDM FFRPFUDM ; 
  10 FFRAFUDM FFRAFUDM ; 
  10 FFRIFUDM FFRIFUDM ; 
  10 FFRCFUDM FFRCFUDM ; 
  10 FE0HWFUT FE0HWFUT ; 
  10 FFRPNFDM FFRPNFDM ; 
  10 FFRANFDM FFRANFDM ; 
  10 FFRINFDM FFRINFDM ; 
  10 FFRCNFDM FFRCNFDM ; 
  10 FE0HWNFT FE0HWNFT ; 
  10 FFRPPRDM FFRPPRDM ; 
  10 FFRAPRDM FFRAPRDM ; 
  10 FFRIPRDM FFRIPRDM ; 
  10 FFRCPRDM FFRCPRDM ; 
  10 FE0HWPRT FE0HWPRT ; 
  10 FFRPNPDM FFRPNPDM ; 
  10 FFRANPDM FFRANPDM ; 
  10 FFRINPDM FFRINPDM ; 
  10 FFRCNPDM FFRCNPDM ; 
  10 FE0HWNPT FE0HWNPT ; 
  10 FE0HWTDP FE0HWTDP ; 
  10 FE0HWTDA FE0HWTDA ; 
  10 FE0HWTDI FE0HWTDI ; 
  10 FE0HWTDC FE0HWTDC ; 
  10 FE0HWTDT FE0HWTDT ; 
  10 FE0HWTAF FE0HWTAF ; 
  10 FE0HWTAP FE0HWTAP ; 
  10 FE0HWDFU FE0HWDFU ; 
  10 FE0HWDNF FE0HWDNF ; 
  10 FE0HWDTF FE0HWDTF ; 
  10 FE0HWDPR FE0HWDPR ; 
  10 FE0HWDNP FE0HWDNP ; 
  10 FE0HWDTP FE0HWDTP ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF6PRPFC FF6PRPFC ; 
  10 FE0HWHCF FE0HWHCF ; 
  10 FE0HWHDM FE0HWHDM ; 
  10 FE0HWHFU FE0HWHFU ; 
  10 FE0HWHPR FE0HWHPR ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FE0HWMDM FE0HWMDM ; 
  10 FF7RVFCT FF7RVFCT ; 
  10 FE0HWFFR FE0HWFFR ; 
  10 FE0HWHFR FE0HWHFR ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF6BEINV FF6BEINV ; 
  10 FFRPRDDU FFRPRDDU ; 
  10 FFRSUBBY FFRSUBBY ; 
  10 FFRTENBY FFRTENBY ; 
  10 FE0HWSUP FE0HWSUP ; 
  10 FG4BALSH FG4BALSH ; 
  10 FE0HWINE FE0HWINE ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FFRDIRSH FFRDIRSH ; 
  10 FE0HWNIL FE0HWNIL ; 
  10 FE0HWFRF FE0HWFRF ; 
  10 FE0HWNMO FE0HWNMO ; 
  10 FE0HWHIN FE0HWHIN ; 
  10 FE0HWHOR FE0HWHOR ; 
end // end FE0HW08

//*** RECORD=FE0HW09 ****
// ---------------------
// Category accum totals
// ---------------------
// ***********************
Record FE0HW09 type basicRecord
  10 FFRPFUDM FFRPFUDM ; 
  10 FFRAFUDM FFRAFUDM ; 
  10 FFRIFUDM FFRIFUDM ; 
  10 FFRCFUDM FFRCFUDM ; 
  10 FE0HWFUT FE0HWFUT ; 
  10 FFRPNFDM FFRPNFDM ; 
  10 FFRANFDM FFRANFDM ; 
  10 FFRINFDM FFRINFDM ; 
  10 FFRCNFDM FFRCNFDM ; 
  10 FE0HWNFT FE0HWNFT ; 
  10 FFRPPRDM FFRPPRDM ; 
  10 FFRAPRDM FFRAPRDM ; 
  10 FFRIPRDM FFRIPRDM ; 
  10 FFRCPRDM FFRCPRDM ; 
  10 FE0HWPRT FE0HWPRT ; 
  10 FFRPNPDM FFRPNPDM ; 
  10 FFRANPDM FFRANPDM ; 
  10 FFRINPDM FFRINPDM ; 
  10 FFRCNPDM FFRCNPDM ; 
  10 FE0HWNPT FE0HWNPT ; 
  10 FE0HWTDP FE0HWTDP ; 
  10 FE0HWTDA FE0HWTDA ; 
  10 FE0HWTDI FE0HWTDI ; 
  10 FE0HWTDC FE0HWTDC ; 
  10 FE0HWTDT FE0HWTDT ; 
  10 FE0HWTAF FE0HWTAF ; 
  10 FE0HWTAP FE0HWTAP ; 
  10 FE0HWDFU FE0HWDFU ; 
  10 FE0HWDNF FE0HWDNF ; 
  10 FE0HWDTF FE0HWDTF ; 
  10 FE0HWDPR FE0HWDPR ; 
  10 FE0HWDNP FE0HWDNP ; 
  10 FE0HWDTP FE0HWDTP ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF6PRPFC FF6PRPFC ; 
  10 FE0HWHCF FE0HWHCF ; 
  10 FE0HWHDM FE0HWHDM ; 
  10 FE0HWHFU FE0HWHFU ; 
  10 FE0HWHPR FE0HWHPR ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FE0HWMDM FE0HWMDM ; 
  10 FF7RVFCT FF7RVFCT ; 
  10 FE0HWFFR FE0HWFFR ; 
  10 FE0HWHFR FE0HWHFR ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF6BEINV FF6BEINV ; 
  10 FFRPRDDU FFRPRDDU ; 
  10 FFRSUBBY FFRSUBBY ; 
  10 FFRTENBY FFRTENBY ; 
  10 FE0HWSUP FE0HWSUP ; 
  10 FG4BALSH FG4BALSH ; 
  10 FE0HWINE FE0HWINE ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FFRDIRSH FFRDIRSH ; 
  10 FE0HWNIL FE0HWNIL ; 
  10 FE0HWFRF FE0HWFRF ; 
  10 FE0HWNMO FE0HWNMO ; 
  10 FE0HWHIN FE0HWHIN ; 
  10 FE0HWHOR FE0HWHOR ; 
end // end FE0HW09

//*** RECORD=FE0HW10 ****
// ----------------------------------------------------
// Translation results of map fields that were changed.
// ----------------------------------------------------
// ***********************
Record FE0HW10 type basicRecord
  10 FFQLCOFU FFQLCOFU ; 
  10 FFQLCOPR FFQLCOPR ; 
  10 FFQOCOFU FFQOCOFU ; 
  10 FFQOCOPR FFQOCOPR ; 
  10 FFRPFUDM FFRPFUDM [8] ; 
  10 FFRCFUDM FFRCFUDM [8] ; 
  10 FFRPNFDM FFRPNFDM [8] ; 
  10 FFRCNFDM FFRCNFDM [8] ; 
  10 FFRPPRDM FFRPPRDM [8] ; 
  10 FFRCPRDM FFRCPRDM [8] ; 
  10 FFRPNPDM FFRPNPDM [8] ; 
  10 FFRCNPDM FFRCNPDM [8] ; 
  10 FFRCPRFC FFRCPRFC [8] ; 
  10 FFRCDMFC FFRCDMFC [61] ; 
  10 FF6BEINV FF6BEINV [8] ; 
  10 FFRPRDDU FFRPRDDU [8] ; 
  10 FFRTENBY FFRTENBY [8] ; 
  10 FF6SFSTK FF6SFSTK [8] ; 
  10 FF6SUGBY FF6SUGBY [61] ; 
end // end FE0HW10

//*** RECORD=FE0HW11 ****
// ************ SHORT RANGE WORKSHEET HEADER TABLE ************
// 
// DB2 TABLE VIEW:       DFCAST.VSWHDR01
// 
// DCLGEN MEMBER:        DCL00645
// 
// I/O MODULE:           IO3810
// 
// KEY TO TABLE:         FFEWSNBR        (Primary)
// 
//                       XPCCD           (Alternate)
//                       YPGCD
//                       XWSCD
//                       FFABEGMO
//                       SY2SSCIN
//                       FFQMBYMO
// 
//                       SY1STNBR        (Alternate)
//                       SY2CLRID
//                       XDMCD
//                       XWSCD
//                       FFABEGMO
//                       SY2SSCIN
//                       FFQMBYMO
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// FF345     9/18/92  MDANGE  New record for second cursor
// ***********************
Record FE0HW11 type basicRecord
  5 FFQGROUP FFQGROUP ; 
    10 FFQKEY FFQKEY ; 
      15 FFEWSNBR FFEWSNBR ; 
    10 FFQKEY2 FFQKEY2 ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 SYBSTGNB SYBSTGNB ; 
      15 XPCCD XPCCD ; 
      15 YPGCD YPGCD ; 
      15 XPRCD XPRCD ; 
      15 XPLCD XPLCD ; 
      15 XLCCD XLCCD ; 
      15 XWSCD XWSCD ; 
      15 FFABEGMO FFABEGMO ; 
      15 SY2SSCIN SY2SSCIN ; 
      15 FFQMBYMO FFQMBYMO ; 
    10 FFQABYMO FFQABYMO ; 
    10 FFAENDMO FFAENDMO ; 
    10 FFQCURMO FFQCURMO ; 
    10 PG7MAXPR PG7MAXPR ; 
    10 FFQDMDDT FFQDMDDT ; 
    10 FFQLCOFU FFQLCOFU ; 
    10 FFQLCOPR FFQLCOPR ; 
    10 FFQLCOFP FFQLCOFP ; 
    10 FFQLCOPP FFQLCOPP ; 
    10 FFQOCOFU FFQOCOFU ; 
    10 FFQOCOPR FFQOCOPR ; 
    10 FFQOCOFP FFQOCOFP ; 
    10 FFQOCOPP FFQOCOPP ; 
    10 FF2FUIND FF2FUIND ; 
    10 FF2DMIND FF2DMIND ; 
    10 FF2PRIND FF2PRIND ; 
    10 FFQFCMFL FFQFCMFL ; 
    10 FFQSCMFL FFQSCMFL ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FE0HW11

//*** RECORD=FE0HW12 ****
// ************* SHORT RANGE WORKSHEET ITEM TABLE *************
// 
// DB2 TABLE VIEW:       DFCAST.VSWITM01
// 
// DCLGEN MEMBER:        DCL00646
// 
// I/O MODULE:           IO3820
// 
// KEY TO TABLE:         FFEWSNBR
//                       FF4FCTMO
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// FF345    09/18/92  MDANGE  New record for second cursor
// ***********************
Record FE0HW12 type basicRecord
  5 FFRGROUP FFRGROUP ; 
    10 FFRKEY FFRKEY ; 
      15 FFEWSNBR FFEWSNBR ; 
      15 FF4FCTMO FF4FCTMO ; 
    10 FFRPFUDM FFRPFUDM ; 
    10 FFRAFUDM FFRAFUDM ; 
    10 FFRIFUDM FFRIFUDM ; 
    10 FFRCFUDM FFRCFUDM ; 
    10 FFRPNFDM FFRPNFDM ; 
    10 FFRANFDM FFRANFDM ; 
    10 FFRINFDM FFRINFDM ; 
    10 FFRCNFDM FFRCNFDM ; 
    10 FFRPPRDM FFRPPRDM ; 
    10 FFRAPRDM FFRAPRDM ; 
    10 FFRIPRDM FFRIPRDM ; 
    10 FFRCPRDM FFRCPRDM ; 
    10 FFRPNPDM FFRPNPDM ; 
    10 FFRANPDM FFRANPDM ; 
    10 FFRINPDM FFRINPDM ; 
    10 FFRCNPDM FFRCNPDM ; 
    10 FFRCPRFC FFRCPRFC ; 
    10 FFRCDMFC FFRCDMFC ; 
    10 FF7FLLRT FF7FLLRT ; 
    10 FF6BEINV FF6BEINV ; 
    10 FF6SUGBY FF6SUGBY ; 
    10 FFRPRDDU FFRPRDDU ; 
    10 FFRSUBBY FFRSUBBY ; 
    10 FFRTENBY FFRTENBY ; 
    10 FFRDIRSH FFRDIRSH ; 
    10 FF6SFSTK FF6SFSTK ; 
    10 FFRSSFCT FFRSSFCT ; 
    10 FG4BALSH FG4BALSH ; 
    10 FF7FURAT FF7FURAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FE0HW12

//*** RECORD=FE0HW13 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF1911 - Print Target Worksheet.
// ------------------------------------------------------------
// ***********************
Record FE0HW13 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 XPCCD XPCCD ; 
    10 FE0HWBGM FE0HWBGM ; 
    10 FF2NSEAS FF2NSEAS ; 
    10 FE0HWMIS FE0HWMIS [4] ; 
    10 FE0HWSEL FE0HWSEL ; 
    10 FE0HWCTP FE0HWCTP ; 
    10 * char(56) ; 
end // end FE0HW13

// FF_BAL_TO_SHP
DataItem FE0HMBAL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// fh-mo-shp-qty
DataItem FE0HMCSF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// CALC PROP FCST
DataItem FE0HMDCP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUT DMD
DataItem FE0HMDFU char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_DIRSHP_QTY
DataItem FE0HMDIR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL FUT
DataItem FE0HMDNF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL PROP
DataItem FE0HMDNP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP DMD
DataItem FE0HMDPR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL FUT
DataItem FE0HMDTF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL PROP
DataItem FE0HMDTP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRDCTN_DUE
DataItem FE0HMDUE char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CURR_DMD_FCST
DataItem FE0HMFCD char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES CARRYOVER
DataItem FE0HMFCO char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRDCTN_FCST
DataItem FE0HMFCT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FCST FILL RT
DataItem FE0HMFFR num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_FUTR_DMD
DataItem FE0HMFUA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_FUTR_DMD
DataItem FE0HMFUC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_FUTR_DMD
DataItem FE0HMFUI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_FUTR_DMD
DataItem FE0HMFUP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES TOT NET BKGS
DataItem FE0HMFUT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_BEG_INV
DataItem FE0HMINB char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// END INVENTORY
DataItem FE0HMINE char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// MSTR DMD FCST
DataItem FE0HMMDM char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Individual month YYMM
DataItem FE0HMMON char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SLS_FCST
DataItem FE0HMMSL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_NATL_FDMD
DataItem FE0HMNFA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_NATL_FDMD
DataItem FE0HMNFC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_NATL_FDMD
DataItem FE0HMNFI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_NATL_FDMD
DataItem FE0HMNFP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL ACCT FUT TOT NET BKGS
DataItem FE0HMNFT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NIL PRODUCTION
DataItem FE0HMNIL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_NATL_PDMD
DataItem FE0HMNPA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_NATL_PDMD
DataItem FE0HMNPC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_NATL_PDMD
DataItem FE0HMNPI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_NATL_PDMD
DataItem FE0HMNPP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL ACCT PROP TOT NET BKGS
DataItem FE0HMNPT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CURR_PROP_FCST
DataItem FE0HMPCF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP CARRYOVER
DataItem FE0HMPCO char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_PROP_DMD
DataItem FE0HMPRA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_PROP_DMD
DataItem FE0HMPRC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PROP_FCST
DataItem FE0HMPRF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_PROP_DMD
DataItem FE0HMPRI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_PROP_DMD
DataItem FE0HMPRP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP TOT NET BKGS
DataItem FE0HMPRT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SBMT_QTB
DataItem FE0HMQBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SUGG_QTB
DataItem FE0HMSBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SFTY_STK
DataItem FE0HMSTK char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// SUPPLY
DataItem FE0HMSUP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE FUT
DataItem FE0HMTAF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE PROP
DataItem FE0HMTAP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_TNTV_QTB
DataItem FE0HMTBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND ALLOCATED
DataItem FE0HMTDA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND CANCELLED
DataItem FE0HMTDC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND INVOICED
DataItem FE0HMTDI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND PRE-ALLOC
DataItem FE0HMTDP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND TOT NET BKGS
DataItem FE0HMTDT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Average inventory work area
DataItem FE0HWAIN bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Average sales work area
DataItem FE0HWASL bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning column number
DataItem FE0HWBEG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// begin month
DataItem FE0HWBGM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CANCELLATION %
DataItem FE0HWCAP decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_CONTP_MO "CCYY" re-formated
DataItem FE0HWCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// COMMENTS
DataItem FE0HWCMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CONTP_MO  "MM"  re-formated
DataItem FE0HWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_CONTP_MO        re-formated
DataItem FE0HWCMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Comments group level
DataItem FE0HWCMT char(300)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current column number
DataItem FE0HWCOL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Combine types flag
DataItem FE0HWCTP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date work area
DataItem FE0HWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CALC PROP FCST
DataItem FE0HWDCP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST FUT %
DataItem FE0HWDFF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST PROP IDX
DataItem FE0HWDFI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUT DMD
DataItem FE0HWDFU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST FUT %
DataItem FE0HWDHF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST PROP IDX
DataItem FE0HWDHI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working days in month
DataItem FE0HWDIM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Demand data changed switch
DataItem FE0HWDMD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date work month
DataItem FE0HWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL FUT
DataItem FE0HWDNF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NATL PROP
DataItem FE0HWDNP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PROP DMD
DataItem FE0HWDPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working days to date
DataItem FE0HWDTD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL FUT
DataItem FE0HWDTF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL PROP
DataItem FE0HWDTP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Date work year
DataItem FE0HWDYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending column number
DataItem FE0HWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES CARRYOVER
DataItem FE0HWFCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST FILL RT
DataItem FE0HWFFR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Futr rto futures
DataItem FE0HWFRF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCST SEAS IDX
DataItem FE0HWFSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES TOT NET BKGS
DataItem FE0HWFUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Historical combined by futures
DataItem FE0HWHCF bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical demand quantity
DataItem FE0HWHDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST FILL RT
DataItem FE0HWHFR decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Historical futures quantity
DataItem FE0HWHFU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical invoiced quantity
DataItem FE0HWHIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical ordered quantity
DataItem FE0HWHOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical prop quantity
DataItem FE0HWHPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST SEAS IDX
DataItem FE0HWHSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// END INVENTORY
DataItem FE0HWINE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map columns
DataItem FE0HWIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map lines
DataItem FE0HWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for prior months
DataItem FE0HWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for subsequent months
DataItem FE0HWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp use
DataItem FE0HWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for worksheet number
DataItem FE0HWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Left/right scroll amount
DataItem FE0HWLRS num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maximum beginning column
DataItem FE0HWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// MSTR DMD FCST
DataItem FE0HWMDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of months in season
DataItem FE0HWMIS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Individual month YYMM
DataItem FE0HWMON char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// wrksht nbr for error msg
DataItem FE0HWNBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL ACCT FUT TOT NET BKGS
DataItem FE0HWNFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NIL PRODUCTION
DataItem FE0HWNIL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of months for averaging
DataItem FE0HWNMO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL ACCT PROP TOT NET BKGS
DataItem FE0HWNPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Page direction
DataItem FE0HWPAD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page number
DataItem FE0HWPAG num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROP CARRYOVER
DataItem FE0HWPCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Percent calculation work area
DataItem FE0HWPCT bin(18,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO "CCYY"
DataItem FE0HWPCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO  "MM"
DataItem FE0HWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO
DataItem FE0HWPMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current column no. saved area
DataItem FE0HWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PROP TOT NET BKGS
DataItem FE0HWPRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// REVD SEAS IDX
DataItem FE0HWRSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Menu selection number
DataItem FE0HWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save FF_SLS_FCST (Prior mo)
DataItem FE0HWSF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season worksheet number
DataItem FE0HWSNO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUPPLY
DataItem FE0HWSUP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// First time through switch
DataItem FE0HWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comments cursor EOF switch
DataItem FE0HWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0HWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Headers cursor EOF switch
DataItem FE0HWSWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Items cursor EOF switch
DataItem FE0HWSWI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FE0HWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE FUT
DataItem FE0HWTAF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE PROP
DataItem FE0HWTAP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND ALLOCATED
DataItem FE0HWTDA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND CANCELLED
DataItem FE0HWTDC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND INVOICED
DataItem FE0HWTDI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND PRE-ALLOC
DataItem FE0HWTDP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND TOT NET BKGS
DataItem FE0HWTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HHMM from work worksheet
DataItem FE0HWTIM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INV TURNS
DataItem FE0HWTUR decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST FUT % - user created
DataItem FE0HWUHF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST PROP IDX - user created
DataItem FE0HWUHI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST SEAS IDX- user created
DataItem FE0HWUSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work area
DataItem FE0HWWRK smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

