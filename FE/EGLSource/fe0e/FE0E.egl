package fe0e;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPTA0P;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import ff.common.FF1REC;
import ff.common.FF2REC;
import ff.common.FF3REC;
import ff.common.FFQREC;
import ff.common.FFRREC;
import ff.common.FFWREC;
import pg.common.PG2REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FE0E ****
// This application provides the user with the ability to
// create Short Range Category Target Worksheets.
// 
// The user can create one or more category target worksheets
// depending on what values were entered for line, type, and
// category.  A batch job is submitted which performs the
// actual creation.
// 
// The user may exit to any allowed application, via fast path
// or PF keys.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/11/91  KSANFO  New application.
// FF       09/01/93  mdange  Add logic to submit either test
//                            or prod jcl.
//          12/19/96  CWHIT1  REGEN FOR YR 2000
// *********************
Program FE0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0EW00 FE0EW00; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use FE0ET01; // table
  use FE0ET5O {deleteAfterUse = yes}; // table
  use FE0EM.FE0EM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FE0EM001 initial; /* M001 input/output*/
    set FE0EW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/
    ;
    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    if (FFWREC.YPGCD == "  ") /* No type group*/
      FFWREC.YPGCD = "01"; /* Default value*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end /* Abbreviation*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FE0E.*/
     /* ------------------------------------------------------------*/
    ;
    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0E001; /* Converse the main process*/
    ;
    ;
    FE0E001: FE0E001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0E001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FE0E

// Main Process Control Module
Function FE0E001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FE0E100(); /* Get Data*/
  ;
  FE0E200(); /* Format and display the map*/
  ;
  FE0E300(); /* Check attention identifier*/
  ;
  FE0E400(); /* Reset fields to normal intensity*/
  ;
  FE0E500(); /* Verify the entered data*/
  ;
  FE0E600(); /* Process valid input request*/
  ;
  ;
end // end FE0E001

// Obtain the data to display
Function FE0E100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FE0E100

// Format and converse the map
Function FE0E200()
  ;
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    FE0E210(); /* Format the data on the map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0EM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FE0EM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FE0EM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0EM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FE0EM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0EM001.CAITEM; /* Application data*/
  ;
  ;
end // end FE0E200

Function FE0E210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0EM001 initial; /* M001 input/output area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0EM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0EM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FE0EM001.XPCCD = FFWREC.XPCCD; /* Category code*/
  FE0EM001.XPLABRV = FFWREC.XPLABRV; /* Product line abbreviation*/
  FE0EM001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
  FE0EM001.XPCABRV = FFWREC.XPCABRV; /* Category short description*/
  ;
  ;
end // end FE0E210

// Check attention identifier
Function FE0E300()
   /* ------------------------------------------------------------*/
   /* Send warning to  user when buy = y, and about to exit appl*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0EM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FE0EM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf12 /* or PF12 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FE0EM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FE0G"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0E300

// Reset highlighted fields
Function FE0E400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0EM001.XPLCD initialAttributes; /* Product line code*/
  set FE0EM001.YPGCD initialAttributes; /* Type group code*/
  set FE0EM001.XPCCD initialAttributes; /* Category code*/
  set FE0EM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FE0EM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0EM001.XPLCD == "?" /* Product line list requested*/
   || FE0EM001.YPGCD == "?" /* or type group liest requested*/
   || FE0EM001.XPCCD == "?") /* or category list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0EM001.XPLCD == "?") /* Product line list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = XPLREC.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0EM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FE0EM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FE0EM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FE0EM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0EM001.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0EM001.YPGCD == "?") /* Type group list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0EM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0EM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FE0EM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FE0EM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0EM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0EM001.XPCCD == "?") /* Category list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = XPCREC.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0EM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FE0EM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FE0EM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FE0EM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0EM001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0E400

// Verify the entered data
Function FE0E500()
   /* -------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FE0EM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
  end
   /* ------------------------------------------------------------*/
   /* Verify that either style, cat/type grp, or line/type grp*/
   /* were entered.  Key fields are not allowed to be spaces.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    if (FE0EM001.YPGCD == " ") /* Type group not entered*/
      if (FE0EM001.XPCCD == " ") /* Category not entered*/
        if (FE0EM001.XPLCD == " ") /* Line not entered*/
          FFWREC.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(8); /* Indicate missing field*/
        else
          FFWREC.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(8); /* Indicate missing field*/
          set FE0EM001.YPGCD cursor, bold; /* Highlight*/
        end
      else
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(8); /* Indicate missing field*/
        set FE0EM001.YPGCD cursor, bold; /* Highlight*/
      end
    else
      if (FE0EM001.XPCCD == " ") /* Category not entered*/
        if (FE0EM001.XPLCD == " ") /* Line not entered*/
          FFWREC.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(8); /* Indicate missing field*/
          set FE0EM001.XPCCD cursor, bold; /* Highlight*/
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If category was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  if (FE0EM001.XPCCD > "  ") /* Category entered*/
    FE0E510(); /* Verify category code*/
  else
    FE0EM001.XPCABRV = "      "; /* Clear category abbrev.*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If type group was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  if (FE0EM001.YPGCD > "  ") /* Type group entered*/
    FE0E520(); /* Verify type group code*/
  else
    FE0EM001.YPGABRV = "      "; /* Clear type grp abbrev.*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If product line was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/
  if (FE0EM001.XPLCD > "  ") /* Product line entered*/
    FE0E530(); /* Verify product line code*/
  else
    FE0EM001.XPLABRV = "      "; /* Clear product line abbrev.*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FE0EM001.YPGABRV != " ") /* Type group valid*/
      if (FE0EM001.XPCABRV != " ") /* Category valid*/
        set FF2REC empty; /* Clear row storage*/
        FF2REC.XPLCD = "*";
        FF2REC.XPCCD = FE0EM001.XPCCD;
        FF2REC.YPGCD = FE0EM001.YPGCD;
        FF2REC.YSMXDV = "10";
        FE0ES01(); /* Select & open FF2REC "S1" csr*/
        FE0ES02(); /* Fetch first FF2REC "S1" csr*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          FFWREC.XXXMODID = "520"; /* Module identification*/
          converseLib.validationFailed(203); /* Inconsistent relationship*/
          set FE0EM001.YPGCD cursor, bold; /* Highlight*/
          set FE0EM001.XPCCD bold; /* Highlight*/
        end
        FE0EM001.XPLCD = FF2REC.XPLCD;
        if (FE0EM001.XPLCD in XPLTBL.XPLCD)
          FE0EM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        end
        FE0ES03(); /* Close FF2REC "S1" csr*/
      else
        if (FE0EM001.XPLABRV != " ") /* Line valid*/
          set FF2REC empty; /* Clear row storage*/
          FF2REC.XPCCD = "*";
          FF2REC.XPLCD = FE0EM001.XPLCD;
          FF2REC.YPGCD = FE0EM001.YPGCD;
          FF2REC.YSMXDV = "10";
          FE0ES01(); /* Select & open FF2REC "S1" csr*/
          FE0ES02(); /* Fetch first FF2REC "S1" csr*/
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            FFWREC.XXXMODID = "520"; /* Module identification*/
            converseLib.validationFailed(203); /* Inconsistent relationship*/
            set FE0EM001.YPGCD cursor, bold; /* Highlight*/
            set FE0EM001.XPLCD bold; /* Highlight*/
          end
          FE0ES03(); /* Close FF2REC "S1" csr*/
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* errors were found*/
    exit stack; /* exit to display map*/
  end
  ;
  ;
end // end FE0E500

// Verify category code
Function FE0E510()
  ;
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XPCCD = FE0EM001.XPCCD;
  FE0EM001.XPCABRV = "************";
  ;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    FE0EM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Category desc.*/
    FE0E511(); /* Obtain related product line*/
  else
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate invalid.*/
    /* ------------------------------------------------------------*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0EM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate invalid*/
  end
  ;
  ;
end // end FE0E510

// Obtain related product line
Function FE0E511()
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YPGCD = FE0EM001.YPGCD; /* Type group code*/
  FF2REC.XPCCD = FE0EM001.XPCCD; /* Category code*/
  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FE0EM001.XPLCD = FF2REC.XPLCD; /* Save the related line*/
      XPLREC.XPLCD = FF2REC.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        FE0EM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FE0EM001.XPLCD = "  "; /* Clear line code field*/
      FE0EM001.XPLABRV = "      "; /* Clear line abrv field*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "511"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0E511

// Verify type group code
Function FE0E520()
  ;
  if (FE0EM001.YPGCD == "* ") /* Wild card*/
    FE0EM001.YPGABRV = "ALL";
    return; /* Return to the previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0EM001.YPGCD == "  ") /* No type group entered*/
    FE0EM001.YPGABRV = "      "; /* Clear abbrev. field*/
  else
    FE0EM001.YPGABRV = "******";
  end
  ;
  if (FE0EM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and active for FF system*/
    FE0EM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Type group abbrev.*/
  else
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate invalid.*/
    /* ------------------------------------------------------------*/
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FE0EM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate invalid*/
  end
  ;
  ;
end // end FE0E520

// Verify product line code
Function FE0E530()
  ;
  if (FE0EM001.XPLCD == "* ") /* Wild card*/
    FE0EM001.XPLABRV = "ALL";
    return; /* Return to the previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/
  ;
  XPLREC.XPLCD = FE0EM001.XPLCD;
  ;
  if (FE0EM001.XPLCD == "  ") /* No product line entered*/
    FE0EM001.XPLABRV = "      "; /* Clear the abbrev. field*/
  else
    FE0EM001.XPLABRV = "******";
  end
  ;
  if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    FE0EM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
                                   /* Product line abbrev.*/
  else
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate invalid.*/
    /* ------------------------------------------------------------*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FE0EM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate invalid*/
  end
  ;
  ;
end // end FE0E530

// Process valid input request
Function FE0E600()
   /* ------------------------------------------------------------*/
   /* Save the search information in FF system COMMAREA.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XPLCD = FE0EM001.XPLCD;
  FFWREC.YPGCD = FE0EM001.YPGCD;
  FFWREC.XPCCD = FE0EM001.XPCCD;
  FFWREC.XPLABRV = FE0EM001.XPLABRV;
  FFWREC.YPGABRV = FE0EM001.YPGABRV;
  FFWREC.XPCABRV = FE0EM001.XPCABRV;
  ;
   /* ------------------------------------------------------------*/
   /* Submit the job to create target worksheets*/
   /* ------------------------------------------------------------*/
  ;
  FE0E610(); /* Submit a batch job*/
  ;
  ;
end // end FE0E600

// Submit job to create wrkshts
Function FE0E610()
  ;
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FE0E611(); /* format production jcl*/
    else
      FE0E612(); /* format development jcl*/
    end
  else
    ;
    FFWREC.XXXMODID = "610"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end
end // end FE0E610

// Submit prod jcl FF1211
Function FE0E611()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FE0ET01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      FE0EW00.XPLCD = FE0EM001.XPLCD; /* Product line*/
      FE0EW00.YPGCD = FE0EM001.YPGCD; /* Type group*/
      FE0EW00.XPCCD = FE0EM001.XPCCD; /* Category*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0EW00.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0ET01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FE0ET01.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0ET01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "611"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    FFWREC.XXXMSGNO = 76; /* Indicate job was submitted*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    FFWREC.XXXMSGNO = 86; /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0E611

// Submit test jcl FF1211
Function FE0E612()
   /* submit test jcl*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FE0ET5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      FE0EW00.XPLCD = FE0EM001.XPLCD; /* Product line*/
      FE0EW00.YPGCD = FE0EM001.YPGCD; /* Type group*/
      FE0EW00.XPCCD = FE0EM001.XPCCD; /* Category*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0EW00.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0ET5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FE0ET5O.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0ET5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "612"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    FFWREC.XXXMSGNO = 76; /* Indicate job was submitted*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    FFWREC.XXXMSGNO = 86; /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0E612

// Select & open FF2REC "S1" csr
Function FE0ES01()
   /* ------------------------------------------------------------*/
   /* Select the requested rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table rows*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELATIONSHIP      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0ES01

// Fetch next FF2REC "S1" csr
Function FE0ES02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Rows not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FF2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0ES02

// Close FF2REC "S1" csr
Function FE0ES03()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FF2REC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0ES03

//*** RECORD=FE0EW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0EW00 type basicRecord
  10 TARJCL TARJCL ; 
    15 YPGCD YPGCD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 * char(74) ; 
end // end FE0EW00

