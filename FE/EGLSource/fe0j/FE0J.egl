package fe0j;

import corpcom1.CACHGFL;
import corpcom2.XX0XW01;
import corpcom3.XPFF001;
import corpcom3.XPTA0P;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS50;
import corpcom4.XSFFS51;
import corpcom4.XSFFS52;
import corpcom4.XSFFS55;
import corpcom4.XSNOWAY;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.ZZZSTM;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XLCCD;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XWSCD;
import corpx2.XXXUSRID;
import corpy2.YPGCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ff.common.*;
import fg.common.FG4BALSH;
import fh.common.FH1ALQTY;
import fh.common.FH1PAQTY;
import fh.common.FH3REC;
import fh.common.FH4REC;
import fh.common.FH5MSHQT;
import fh.common.FH6REC;
import fh.common.FHAREC;
import fh.common.FHBREC;
import pg.common.PG7MAXPR;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SY2SSCIN;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TA9REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FE0J ****
// This user can only enter this application by, first, going
// through FF0i and selecting a worksheet.
// 
// This application displays demand, forecast and inventory
// information summarized at the line, category, or type group
// level.
// 
// The user may scroll forward or back to view each of the
// worksheet pages or scroll left and right to see various
// forecast months.
// 
// The user may print the displayed forecast by pressing PF16
// or exit to any allowed application via FAST PATH.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// FF#254   01/02/92  LDELUH  New application.
// FF#283   02/18/92  LDELUH  Chg calc of fut rto for lt contp
//                            to include cancels.
// FF#284   02/28/92  LDELUH  Allow 2 yr ago hist at cat level.
// FF#285   03/06/92  LDELUH  Add alternate cat indicator for
//                            single category request.
// FF1111   05/26/92  LDELUH  Allow varying length seasons.
// FF333    08/12/92  mdange  Show domestic production fore-
//                            cast in actual months.
// FF???    09/28/92  mdange  Get master sales,prop and demand
//                            forecasts from frozen target
//                            master worksheet type '07'.
// FF386    04/06/93  JJUCH   Change calc of subtot and accum
//                            total for the fcst and hist fill
// FF       09/01/93  mdange  Add logic to submit either test
//                            or prod jcl.
// FF435    10/05/93  JJUCH   Allow current month to be in any
//                            season.
// FH140    02/03/94  JJUCH   Change to use authorize future
//                            when calc hist futr %, hist fill
//                            rate and hist seas indx.
//          12/19/96  CWHIT1  REGEN FOR YR 2000
// *********************
Program FE0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0JW00 FE0JW00; // record
  FE0JW01 FE0JW01; // record
  FE0JW02 FE0JW02; // record
  FE0JW03 FE0JW03; // record
  FE0JW04 FE0JW04; // record
  FE0JW05 FE0JW05; // record
  FE0JW06 FE0JW06; // record
  FE0JW07 FE0JW07; // record
  FE0JW08 FE0JW08; // record
  FE0JW09 FE0JW09; // record
  FE0JW10 FE0JW10; // record
  FE0JW11 FE0JW11; // record
  FF2REC FF2REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FH3REC FH3REC; // record
  FH4REC FH4REC; // record
  FH6REC FH6REC; // record
  FHAREC FHAREC; // record
  FHBREC FHBREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FE0JT01; // table
  use FE0JT5O {deleteAfterUse = yes}; // table
  use FE0JM.FE0JM001,  // forms
      FE0JM.FE0JM002, 
      FE0JM.FE0JM003, 
      FE0JM.FE0JM004, 
      FE0JM.FE0JM005, 
      FE0JM.FE0JM006,
      FE0JM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty; /* Special function parameters*/
    set FE0JW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* TA0P record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FE0JW00.FE0JWBEG = 1; /* Beginning column*/
    FE0JW00.FE0JWPAG = 1; /* Page number*/
    ;
    FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
    FE0JW00.FE0JWSWR = "Y"; /* Request for data switch*/
    move "N" to FE0JW00.FE0JWSWO[1] for all; /* Data Obtained switch each year*/
    FE0JW00.FE0JWSWS = "N"; /* First season switch*/
    ;
     /* ------------------------------------------------------------*/
     /* Save season end months sent from FE0I.*/
     /* ------------------------------------------------------------*/
    ;
    FE0JW00.FE0JWEMO[1] = FFWREC.FFWENDM1;
    FE0JW00.FE0JWEMO[2] = FFWREC.FFWENDM2;
    FE0JW00.FE0JWEMO[3] = FFWREC.FFWENDM3;
    FE0JW00.FE0JWEMO[4] = FFWREC.FFWENDM4;
    FE0JW00.FE0JWEDM = FFWREC.FFAENDMO; /* max data month*/
    FFWREC.FFAENDMO = 0;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to determine what application transferred control.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0J000; /* Check the FROM application*/
    ;
    ;
    FE0J000: FE0J000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0J001; /* Converse the main process*/
    ;
    ;
    FE0J001: FE0J001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0J001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FE0J

// Format carryover w/subtotals
Function FE0J-1191()
  ;
  FE0JW00.FE0JW-CAOV-IX = FE0JW00.FE0JWSIX - 1;
  FE0JW00.FE0JW-CURR = FE0JW01.FFQCURMO; /* current month*/
  if (FE0JW00.FE0JWSIX > 1)
    FE0JW00.FE0JW-MON-GAP = FE0JW00.FE0JW-CURR -     FE0JW00.FE0JWEMO[FE0JW-CAOV-IX] - 1;
  else
    FE0JW00.FE0JW-MON-GAP = FE0JW00.FE0JW-CURR -     FE0JW01.FFABEGMO;
  end
  ;
  if (FE0JW00.FE0JW-MON-GAP >= 2) /* No of month in the season*/
    ;
    FE0J-11912(); /* Last caov info*/
    FE0J-11913(); /* Other caov info*/
    ;
  else
    ;
    if (FE0JW00.FE0JW-MON-GAP == 1) /* No of month in the season*/
      FE0J-11912(); /* Last caov info*/
      if (FE0JW00.FE0JWSIX == 1) /* 1st season*/
        ;
      else
        if (FE0JW00.FE0JWSIX == 2)
          sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Excluded subtotal space*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex - 2; /* Excluded sub and accum tot spaces*/
        end
        FE0J-11913(); /* Other caov info*/
      end
    else
      if (FE0JW00.FE0JWSIX == 1) /* 1st season*/
        ;
      else
        if (FE0JW00.FE0JWSIX == 2)
          sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Excluded subtotal space*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex - 2; /* Excluded sub and accum tot spaces*/
        end
        FE0JW00.FE0JW-CAOV-IX = FE0JW00.FE0JWSIX - 1; /* previous season*/
        if (FE0JW00.FE0JWMIS[FE0JW-CAOV-IX] >= 2) /* month in season*/
          FE0J-11912(); /* Last caov info*/
          FE0J-11913(); /* Other caov info*/
        else
          FE0J-11912(); /* Last caov info*/
          if (FE0JW00.FE0JW-CAOV-IX == 1) /* 1st season*/
            ;
          else
            if (FE0JW00.FE0JW-CAOV-IX == 2)
              sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Excluded subtotal space*/
            else
              sysVar.arrayIndex = sysVar.arrayIndex - 2; /* Excluded sub & accum tot spaces*/
            end
            FE0J-11913(); /* Other caov info*/
          end
        end
      end
    end
    ;
  end
  ;
end // end FE0J-1191

// Last caov info
Function FE0J-11912()
  FFXREC.FFXNUMB = FE0JW01.FFQLCOFU; /* Lst caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FE0JWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW01.FFQLCOPR; /* Lst caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FE0JWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW01.FE0JWFCO[sysVar.arrayIndex] + FE0JW01.FE0JWPCO[sysVar.arrayIndex];
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/
  ;
end // end FE0J-11912

// Other caov info
Function FE0J-11913()
  ;
  FFXREC.FFXNUMB = FE0JW01.FFQOCOFU; /* Oth caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FE0JWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW01.FFQOCOPR; /* Oth caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FE0JWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW01.FE0JWFCO[sysVar.arrayIndex] + FE0JW01.FE0JWPCO[sysVar.arrayIndex];
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  ;
end // end FE0J-11913

// Check the FROM application
Function FE0J000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP == "FE0I" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FE0J") /* or same application*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/
    ;
    XSNOWAY(); /* Invalid transfer was attempted*/
    ;
  end
  ;
  ;
end // end FE0J000

// Main process to display a map
Function FE0J001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, if specified, display the fourth map.*/
   /* 5) Otherwise, if specified, display the fifth map.*/
   /* 6) Otherwise, if specified, display the sixth map.*/
   /* 7) Otherwise, indicate error and exit to Application Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWPAG == 1 /* Page 1 was requested*/
   || FE0JW00.FE0JWSWR == "Y") /* or data was requested*/
    FE0J100(); /* Display map 1*/
  else
    ;
    if (FE0JW00.FE0JWPAG == 2) /* Page 2 was requested*/
      FE0J200(); /* Display map 2*/
    else
      ;
      if (FE0JW00.FE0JWPAG == 3) /* Page 3 was requested*/
        FE0J300(); /* Display map 3*/
      else
        ;
        if (FE0JW00.FE0JWPAG == 4) /* Page 4 was requested*/
          FE0J400(); /* Display map 4*/
        else
          ;
          if (FE0JW00.FE0JWPAG == 5) /* Page 5 was requested*/
            FE0J500(); /* Display map 5*/
          else
            ;
            if (FE0JW00.FE0JWPAG == 6) /* Page 6 was requested*/
              FE0J600(); /* Display map 6*/
            else
              ;
              /* --------------------------------------------------------*/
               /* Write the error to the Error Diagnosis Reporting.*/
              /* --------------------------------------------------------*/
              ;
              FFWREC.XXXMODID = "001"; /* Module identification*/
              FFWREC.XXXMSGNO = 1; /* System error occurred*/
              ;
              TA1REC.TA1FUNC = "RETN"; /* Termination function*/
              TA1REC.TA1TYPE = "APPL"; /* Type of error*/
              TA1REC.TA1LOC = "INVALID PAGE NUMBER REQUESTED";
              TA1REC.TA1MAPNO = FE0JW00.FE0JWPAG; /* Page number*/
              TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
              TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
              ;
              call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/
              ;
              /* --------------------------------------------------------*/
               /* Exit to display the application system menu.*/
              /* --------------------------------------------------------*/
              ;
              COMMAREA.CATOAP = "FF0A"; /* TO application*/
              ;
              XSFFS01(); /* Exit to another application*/
              ;
              /* --------------------------------------------------------*/
               /* Abnormally terminate the transaction if exit failed.*/
              /* --------------------------------------------------------*/
              ;
              TA1REC.TA1FUNC = "ABND"; /* Termination function*/
              TA1REC.TA1LOC = "EXIT TO APPLICATION MENU FAILED";
              ;
              call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/
              ;
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end FE0J001

// Main process
Function FE0J100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J110(); /* Obtain the data to display*/
  ;
  FE0J120(); /* Format and display the map*/
  ;
  FE0J130(); /* Check attention identifier*/
  ;
  FE0J140(); /* Reset fields to normal intensity*/
  ;
  FE0J150(); /* Verify the entered data*/
  ;
  FE0J160(); /* Process valid input request*/
  ;
  ;
end // end FE0J100

// Obtain the data to display
Function FE0J110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate number of months in each season.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWSIX = 1; /* Season index*/
  FE0JW00.FE0JWMSC = 0; /* Months in season counter*/
  FE0JW00.FF2NSEAS = 0; /* Nbr of seasons*/
  ;
  if (FFWREC.FFWENDM1 != 0)
    FE0JW00.FE0JWDAT = FFWREC.FFABEGMO;
    FE0JS01(); /* Count months in sesn*/
    FE0JW00.FF2NSEAS = FE0JW00.FF2NSEAS + 1;
  end
  ;
  if (FFWREC.FFWENDM2 != 0)
    FE0JS01(); /* Count months in sesn*/
    FE0JW00.FF2NSEAS = FE0JW00.FF2NSEAS + 1;
  end
  ;
  if (FFWREC.FFWENDM3 != 0)
    FE0JS01(); /* Count months in sesn*/
    FE0JW00.FF2NSEAS = FE0JW00.FF2NSEAS + 1;
  end
  ;
  if (FFWREC.FFWENDM4 != 0)
    FE0JS01(); /* Count months in sesn*/
    FE0JW00.FF2NSEAS = FE0JW00.FF2NSEAS + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Process 2nd & 3rd year if requested.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSWS == "Y") /* 1st yr season formatted switch*/
    FE0J111(); /* Process 2nd & 3rd year of seasons*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Clear the map display storage and total areas.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JW01 empty; /* M001 display storage*/
  set FE0JW02 empty; /* M002 display storage*/
  set FE0JW03 empty; /* M003 display storage*/
  set FE0JW04 empty; /* M004 display storage*/
  set FE0JW05 empty; /* M005 display storage*/
  set FE0JW06 empty; /* M006 display storage*/
  set FE0JW07 empty; /* Season subtotals*/
  set FE0JW08 empty; /* accum totals*/
  set FE0JW09 empty; /* Print selection parameters*/
  ;
  FE0JW01.CACHGFL = "N"; /* Data was obtained switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Set indicator to tell what level summary for.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XPCCD == "*"
   || FFWREC.XPCCD == "  ")
    if (FFWREC.XPLCD == "*"
     || FFWREC.XPLCD == "  ")
      FE0JW00.FE0JWLVL = "T"; /* Type grp summary*/
    else
      FE0JW00.FE0JWLVL = "L"; /* Line summary*/
    end
  else
    FE0JW00.FE0JWLVL = "C"; /* Category summary*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested single category obtain alt cat from ffxrf.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWLVL == "C"
   && FFWREC.YPGCD != "*")
    FE0JS90(); /* Obtain alt cat*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Get/save header summary worksheet data row for "CURR MO"*/
   /* and save the data obtained.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J117(); /* ===> Get hdr sum wrksht "curr"*/
  ;
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J112(); /* Open summary worksheet cursor*/
  ;
  FE0JW00.FE0JWCOL = 1; /* Current column*/
  FE0JW00.FE0JWFMO = 1; /* Number months formatted*/
  FE0JW00.FE0JWSIX = 1; /* Season index*/
  FE0JW00.FE0JWMSC = 0; /* Months in sesn counter*/
  FE0JW00.FE0JWSCT = 1; /* Season count*/
  ;
  FE0JW00.FE0JWSWC = "N"; /* Summary cursor EOF switch*/
  FE0JW00.FE0JWSWS = "N"; /* First season switch*/
  FE0JW00.FE0JWSW1 = "Y"; /* First time through switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  while (FE0JW00.FE0JWSWC == "N") /* Until end of cursor*/
    ;
    FE0J113(); /* Fetch next summary worksheet*/
    ;
    if (FE0JW00.FE0JWFMO > 12) /* Twelve months were formatted*/
      FE0JW00.FE0JWSWC = "Y"; /* End of cursor switch*/
    end
    ;
    if (FE0JW00.FE0JWSW1 == "N") /* Not first time through*/
      ;
      if (FE0JW00.FE0JWSWC == "Y" /* End of cursor*/
       || FE0JW00.FE0JWMSC == FE0JW00.FE0JWMIS[FE0JWSIX]) /* or sesn end*/
        ;
        if (FE0JW00.FE0JWSWS == "N") /* First season switch*/
          FE0JW00.FE0JWSWS = "Y"; /* First season switch*/
        end
        ;
        FE0J114(); /* Calculate season totals*/
        ;
        if (FE0JW00.FE0JWSWC == "N") /* If notend of cursor*/
          FE0JW00.FE0JWSIX = FE0JW00.FE0JWSIX + 1; /* Incrmt sesn ix*/
          FE0JW00.FE0JWMSC = 0; /* clear mos in sesn counter*/
        end
        ;
      end
      ;
    end /* ===> Not first time through*/
    ;
    if (FE0JW00.FE0JWSWC == "N") /* Not end of cursor*/
      ;
      if (FE0JW00.FE0JWSW1 == "Y") /* First time through*/
        ;
        /* ======== Next Sentence ===============>*/
        ;
      else
        ;
        FE0JW00.FE0JWFMO = FE0JW00.FE0JWFMO + 1; /* Number months formatted*/
        FE0JW00.FE0JWMSC = FE0JW00.FE0JWMSC + 1; /* Months in sesn counter*/
        ;
      end /* ===> First time through*/
      ;
      FE0J115(); /* ====> Save item information*/
      ;
      if (FE0JW01.FFQCURMO == FFRREC.FF4FCTMO)
        FE0J119(); /* Format carryover quantities*/
      end
      ;
      FE0JW00.FE0JWSW1 = "N"; /* First time through switch*/
      ;
    end /* ===> Not end of cursor*/
    ;
  end /* ===> Until end of cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J116(); /* Close summary worksheet cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Determine the maximum beginning column for scrolling.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWMAX = FE0JW00.FE0JWCOL - 8; /* Maximum beginning column*/
  ;
  if (FE0JW00.FE0JWMAX < 1) /* Maximum LT minimum*/
    FE0JW00.FE0JWMAX = 1; /* Default to minimum*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSW1 == "Y") /* No worksheet found*/
    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    return; /* Exit to continue processing*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWSWR = "N"; /* Request for data switch*/
  FE0JW01.CACHGFL = "Y"; /* Data was obtained switch*/
  ;
  ;
end // end FE0J110

// Process 2nd & 3rd year's sesns
Function FE0J111()
  ;
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW01.CACHGFL = "N"; /* Data was obtained switch*/
  FE0JW00.FE0JWFMO = 0; /* ===>  number of months formatted*/
  ;
  FE0J112(); /* Open summary worksheet cursor*/
  ;
  FE0JW00.FE0JWSWC = "N"; /* Summary cursor EOF switch*/
  FE0JW00.FE0JWSIX = 1; /* Season index*/
  FE0JW00.FE0JWMSC = 0; /* Mos in sesn counter*/
  ;
  FE0J113(); /* Fetch next summary worksheet*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  while (FE0JW00.FE0JWSWC == "N" /* Until end of cursor*/
   && FE0JW00.FE0JWFMO <= 12) /* ===> months formatted*/
    ;
    if (FE0JW00.FE0JWMSC == FE0JW00.FE0JWMIS[FE0JWSIX]) /* If sesn end*/
      FE0J114(); /* Calculate season totals*/
      FE0JW00.FE0JWSIX = FE0JW00.FE0JWSIX + 1; /* Incrmt sesn index*/
      FE0JW00.FE0JWMSC = 0; /* Mos in sesn counter*/
    end
    ;
    FE0JW00.FE0JWFMO = FE0JW00.FE0JWFMO + 1; /* ===> months formatted*/
    FE0JW00.FE0JWMSC = FE0JW00.FE0JWMSC + 1; /* Mos in sesn counter*/
    ;
    FE0J115(); /* ====> Save item information*/
    ;
    FE0J113(); /* Fetch next summary worksheet*/
    ;
  end /* ===> Until end of cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J116(); /* Close summary worksheet cursor*/
  ;
  FE0J114(); /* Calculate season totals*/
  ;
   /* ------------------------------------------------------------*/
   /* Determine the maximum beginning column for scrolling.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWMAX = FE0JW00.FE0JWCOL - 8; /* Maximum beginning column*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWSWR = "N"; /* Request for data switch*/
  FE0JW01.CACHGFL = "Y"; /* Data was obtained switch*/
  ;
  exit stack; /* ===> to process the current map*/
  ;
  ;
end // end FE0J111

// Open summary worksheet cursor
Function FE0J112()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFQREC empty; /* Worksheet header*/
  set FFRREC empty; /* Worksheet item*/
  ;
  FFQREC.XWSCD = "05"; /* Worksheet type code*/
  FFQREC.SYBSTGNB = "*"; /* Any style group*/
  FFQREC.FFQMBYMO = -1; /* Main buy mo*/
  FFQREC.FFQABYMO = -1; /* Actl buy mo*/
  FFQREC.ZZZCHGDT = -1; /* Change date*/
  FFQREC.ZZZCHGTM = -1; /* Change time*/
  ;
  if (FFWREC.XPCCD == " ") /* No product category*/
    FFQREC.XPCCD = "*"; /* All product categorys*/
  else
    FFQREC.XPCCD = FFWREC.XPCCD; /* One product category*/
  end
  ;
  if (FFWREC.XPLCD == " ") /* No product line*/
    FFQREC.XPLCD = "*"; /* All product lines*/
  else
    FFQREC.XPLCD = FFWREC.XPLCD; /* One product line*/
  end
  ;
  if (FFWREC.YPGCD == " ") /* No type group*/
    FFQREC.YPGCD = "*"; /* All type groups*/
  else
    FFQREC.YPGCD = FFWREC.YPGCD; /* One type group*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine beginning date  & ending date for year's of season*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSWS == "N") /* Format First 1st yr season switch*/
    /* ------------------------------------------------------------*/
        /* Use the parameter beginning date from Pass record*/
        /* and calc ending date for the first year's seasons*/
    /* ------------------------------------------------------------*/
    FE0JW00.FE0JWDAT = FFWREC.FFABEGMO; /* Begin mo*/
    FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM - 1; /* Decrement month*/
    ;
    if (FE0JW00.FE0JWDMM < 1) /* Month LT minimum*/
      FE0JW00.FE0JWDMM = 12; /* Reset month*/
      FE0JW00.FE0JWDYY = FE0JW00.FE0JWDYY - 1; /* Decrement year*/
    end
    ;
    FFRREC.FF4FCTMO = FE0JW00.FE0JWDAT; /* Fcst mo*/
    FE0JW00.FE0JWDYY = FE0JW00.FE0JWDYY + 1; /* Increment year*/
    FFQREC.FFAENDMO = FE0JW00.FE0JWDAT; /* Fcst mo*/
    FE0JW00.FFAENDMO = FE0JW00.FE0JWDAT; /* Fcst xmo*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
        /* Use the ending date + 1 for the beginning date and*/
        /* calc the ending date for the 2nd & 3rd year's season.*/
    /* ------------------------------------------------------------*/
    FE0JW00.FE0JWDAT = FE0JW00.FFAENDMO; /* restore last Fcst xmo*/
    FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM + 1; /* Increment month*/
    ;
    if (FE0JW00.FE0JWDMM > 12) /* Month > 12*/
      FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM - 12; /* Decrement months*/
      FE0JW00.FE0JWDYY = FE0JW00.FE0JWDYY + 1; /* increment year*/
    end
    ;
    FFRREC.FF4FCTMO = FE0JW00.FE0JWDAT; /* Fcst mo*/
    FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM + 11; /* Increment month*/
    ;
    if (FE0JW00.FE0JWDMM > 12) /* Month > 12*/
      FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM - 12; /* Decrement months*/
      FE0JW00.FE0JWDYY = FE0JW00.FE0JWDYY + 1; /* increment year*/
    end
    ;
    FFQREC.FFAENDMO = FE0JW00.FE0JWDAT; /* Fcst ending month*/
    FE0JW00.FFAENDMO = FE0JW00.FE0JWDAT; /* Fcst xmo*/
    ;
  end
  ;
  if (FFWREC.XPCCD != " " /* One product category*/
   && FFWREC.XPCCD != "*" 
   && FFWREC.YPGCD != "*") /* One type group*/
    try
      call "FF2930" ("S2", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "FF2930" ("S3", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "112"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0J112

// Fetch next summary worksheet
Function FE0J113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XPCCD != "  " /* One category*/
   && FFWREC.XPCCD != "*"  
   && FFWREC.YPGCD != "*") /* One type group*/
    try
      call "FF2930" ("N2", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "FF2930" ("N3", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FE0JW00.FE0JWSWC = "Y"; /* Header cursor EOF switch*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "113"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT SUMMARY WORKSHEET";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0J113

// Calculate season totals
Function FE0J114()
   /* ------------------------------------------------------------*/
   /* Calculate the M001 subtotals for the season.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW01.FE0JMMON[FE0JWCOL] = "  SUB"; /* Subtotal literal*/
  FE0JW01.FE0JMSCT[FE0JWCOL] = FE0JW00.FE0JWSCT;
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRPFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRPFUDM = FE0JW08.FFRPFUDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRAFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRAFUDM = FE0JW08.FFRAFUDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRIFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRIFUDM = FE0JW08.FFRIFUDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRCFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRCFUDM = FE0JW08.FFRCFUDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWFUT; /* Futures tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FE0JWFUT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWFUT = FE0JW08.FE0JWFUT + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRPNFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRPNFDM = FE0JW08.FFRPNFDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRANFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRANFDM = FE0JW08.FFRANFDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRINFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRINFDM = FE0JW08.FFRINFDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRCNFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRCNFDM = FE0JW08.FFRCNFDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWNFT; /* Natl acct fut tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FE0JWNFT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWNFT = FE0JW08.FE0JWNFT + FFXREC.FFXROUND; /* accum total*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M002 subtotals for the season.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRPPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRPPRDM = FE0JW08.FFRPPRDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRAPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRAPRDM = FE0JW08.FFRAPRDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRIPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRIPRDM = FE0JW08.FFRIPRDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRCPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRCPRDM = FE0JW08.FFRCPRDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWPRT; /* Prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FE0JWPRT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWPRT = FE0JW08.FE0JWPRT + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRPNPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRPNPDM = FE0JW08.FFRPNPDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRANPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRANPDM = FE0JW08.FFRANPDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRINPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRINPDM = FE0JW08.FFRINPDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRCNPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRCNPDM = FE0JW08.FFRCNPDM + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWNPT; /* Natl acct prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FE0JWNPT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWNPT = FE0JW08.FE0JWNPT + FFXREC.FFXROUND; /* accum total*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M003 subtotals for the season.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWTDP; /* Total pre-alloc*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWTDP = FE0JW08.FE0JWTDP + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWTDA; /* Total allocated*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDA[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWTDA = FE0JW08.FE0JWTDA + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWTDI; /* Total invoiced*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDI[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWTDI = FE0JW08.FE0JWTDI + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWTDC; /* Total cancelled*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWTDC = FE0JW08.FE0JWTDC + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWTDT; /* Total demand*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWTDT = FE0JW08.FE0JWTDT + FFXREC.FFXROUND; /* accum total*/
  ;
  if (FE0JW03.FE0JWTDT[FE0JWCOL] != 0) /* Total demand NE zero*/
    FE0JW00.FE0JWPCT = FE0JW03.FE0JWTDC[FE0JWCOL] * 100; /* Cancellation %*/
    FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWPCT / FE0JW03.FE0JWTDT[FE0JWCOL], -mathLib.decimals(FE0JW00.FE0JWPCT));
    FE0JW03.FE0JWCAP[FE0JWCOL] = FE0JW00.FE0JWPCT;
  end
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWTAF; /* Tot active fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTAF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTAF[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWTAF = FE0JW08.FE0JWTAF + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWTAP; /* Tot active prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTAP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTAP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWTAP = FE0JW08.FE0JWTAP + FFXREC.FFXROUND; /* accum total*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M004 subtotals for the season.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWDFU; /* Fut dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDFU[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDFU[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWDFU = FE0JW08.FE0JWDFU + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWDNF; /* Natl fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDNF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDNF[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWDNF = FE0JW08.FE0JWDNF + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWDTF; /* Total fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDTF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDTF[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWDTF = FE0JW08.FE0JWDTF + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWDPR; /* Prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDPR[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDPR[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWDPR = FE0JW08.FE0JWDPR + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWDNP; /* Natl prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDNP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDNP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWDNP = FE0JW08.FE0JWDNP + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWDTP; /* Total prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDTP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDTP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWDTP = FE0JW08.FE0JWDTP + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMPCF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FFRCPRFC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRCPRFC = FE0JW08.FFRCPRFC + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FF6PRPFC; /* Mstr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMPRF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FF6PRPFC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FF6PRPFC = FE0JW08.FF6PRPFC + FFXREC.FFXROUND; /* accum total*/
  ;
  if (FE0JW07.FFRCDMFC != 0) /* Subtotal NE zero*/
    FE0JW00.FE0JWPCT = mathLib.round(FE0JW07.FE0JWFRF * 100 / FE0JW07.FFRCDMFC, -mathLib.decimals(FE0JW00.FE0JWPCT));
    FE0JW04.FE0JWDFF[FE0JWCOL] = FE0JW00.FE0JWPCT; /* Fcst fut %*/
  end
  FE0JW08.FE0JWFRF = FE0JW08.FE0JWFRF + FE0JW07.FE0JWFRF; /* accum total*/
  ;
  if (FE0JW07.FE0JWHCF != 0) /* Subtotal GT zero*/
    FE0JW00.FE0JWPCT = mathLib.round(FE0JW07.FE0JWHFU * 100 / FE0JW07.FE0JWHCF, -mathLib.decimals(FE0JW00.FE0JWPCT));
    FE0JW04.FE0JWDHF[FE0JWCOL] = FE0JW00.FE0JWPCT; /* Hist fut %*/
  end
  FE0JW08.FE0JWHCF = FE0JW08.FE0JWHCF + FE0JW07.FE0JWHCF; /* accum total*/
  FE0JW08.FE0JWHFU = FE0JW08.FE0JWHFU + FE0JW07.FE0JWHFU; /* accum total*/
  ;
  if (FE0JW07.FFRCPRFC != 0) /* Subtotal NE zero*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWCOL - FE0JW07.FE0JWNMO; /* Season begin*/
    while (FE0JW00.FE0JWIXC <= FE0JW00.FE0JWCOL) /* Until end of season*/
      if (FE0JW04.FFRCPRFC[FE0JWIXC] >= 0) /* Curr prop fcst GE zero*/
        FE0JW00.FE0JWPCT = FE0JW04.FFRCPRFC[FE0JWIXC] * 100;
        FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWPCT / FE0JW07.FFRCPRFC, -mathLib.decimals(FE0JW00.FE0JWPCT));
        FE0JW04.FE0JWDFI[FE0JWIXC] = FE0JW00.FE0JWPCT; /* Fcst idx*/
      end
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Next month of season*/
    end
  end
  ;
  if (FE0JW07.FE0JWHPR != 0) /* Subtotal NE zero*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWCOL - FE0JW07.FE0JWNMO; /* Season begin*/
    FE0JW04.FE0JWHPR[FE0JWCOL] = FE0JW07.FE0JWHPR; /* Subtotal*/
    while (FE0JW00.FE0JWIXC <= FE0JW00.FE0JWCOL) /* Until end of season*/
      if (FE0JW04.FE0JWHPR[FE0JWIXC] >= 0) /* Hist prop qty GE zero*/
        FE0JW00.FE0JWPCT = FE0JW04.FE0JWHPR[FE0JWIXC] * 100;
        FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWPCT / FE0JW07.FE0JWHPR, -mathLib.decimals(FE0JW00.FE0JWPCT));
        FE0JW04.FE0JWDHI[FE0JWIXC] = FE0JW00.FE0JWPCT; /* Hist idx*/
      end
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Next month of season*/
    end
  end
  FE0JW08.FE0JWHPR = FE0JW08.FE0JWHPR + FE0JW07.FE0JWHPR; /* accum total*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M005 subtotals for the season.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMFCD[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FFRCDMFC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRCDMFC = FE0JW08.FFRCDMFC + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWMDM; /* Mstr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMMDM[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FE0JWMDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWMDM = FE0JW08.FE0JWMDM + FFXREC.FFXROUND; /* accum total*/
  ;
  if (FE0JW05.FFRCDMFC[FE0JWCOL] != 0) /* Subtotal NE zero*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWCOL - FE0JW07.FE0JWNMO; /* Season begin*/
    while (FE0JW00.FE0JWIXC <= FE0JW00.FE0JWCOL) /* Until end of season*/
      FE0JW00.FE0JWPCT = FE0JW05.FFRCDMFC[FE0JWIXC] * 100; /* Curr dmd fcst*/
      FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWPCT / FE0JW05.FFRCDMFC[FE0JWCOL], -mathLib.decimals(FE0JW00.FE0JWPCT));
      FE0JW05.FE0JWFSI[FE0JWIXC] = FE0JW00.FE0JWPCT; /* Fcst seas idx*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Next month of season*/
    end
  end
  ;
  if (FE0JW07.FE0JWHDM > 0) /* Subtotal GT zero*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWCOL - FE0JW07.FE0JWNMO; /* Season begin*/
    FE0JW05.FE0JWHDM[FE0JWCOL] = FE0JW07.FE0JWHDM; /* Subtotal*/
    while (FE0JW00.FE0JWIXC <= FE0JW00.FE0JWCOL) /* Until end of season*/
      FE0JW00.FE0JWPCT = FE0JW05.FE0JWHDM[FE0JWIXC] * 100; /* Hist dmd qty*/
      FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWPCT / FE0JW05.FE0JWHDM[FE0JWCOL], -mathLib.decimals(FE0JW00.FE0JWPCT));
      FE0JW05.FE0JWHSI[FE0JWIXC] = FE0JW00.FE0JWPCT; /* Hist seas idx*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Next month of season*/
    end
  end
  FE0JW08.FE0JWHDM = FE0JW08.FE0JWHDM + FE0JW07.FE0JWHDM; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FF7RVFCT; /* Rvse dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMRVF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FF7RVFCT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FF7RVFCT = FE0JW08.FF7RVFCT + FFXREC.FFXROUND; /* accum total*/
  ;
  if (FE0JW07.FF7RVFCT != 0) /* Subtotal NE zero*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWCOL - FE0JW07.FE0JWNMO; /* Season begin*/
    while (FE0JW00.FE0JWIXC <= FE0JW00.FE0JWCOL) /* Until end of season*/
      FE0JW00.FE0JWPCT = FE0JW05.FF7RVFCT[FE0JWIXC] * 100; /* Rvse dmd fcst*/
      FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWPCT / FE0JW05.FF7RVFCT[FE0JWCOL], -mathLib.decimals(FE0JW00.FE0JWPCT));
      FE0JW05.FE0JWRSI[FE0JWIXC] = FE0JW00.FE0JWPCT; /* Revd seas idx*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Next month of season*/
    end
  end
  ;
   /* Fcst fill rate*/
  ;
  if (FE0JW07.FFRCDMFC != 0) /* curr dmd*/
    FE0JW07.FE0JWFFR = mathLib.round(FE0JW07.FH5MSHQT * 100 / FE0JW07.FFRCDMFC, -mathLib.decimals(FE0JW07.FE0JWFFR));
  else
    if (FE0JW07.FH5MSHQT == 0) /* both curr sls and dmd are 0*/
      FE0JW07.FE0JWFFR = 100;
    else
      FE0JW07.FE0JWFFR = 0;
    end
  end
  FE0JW05.FE0JWFFR[FE0JWCOL] = FE0JW07.FE0JWFFR;
  FE0JW05.FE0JMFFR[FE0JWCOL] = mathLib.round(FE0JW05.FE0JWFFR[FE0JWCOL] / 1, -mathLib.decimals(FE0JW05.FE0JMFFR[FE0JWCOL]));
  ;
   /* Hist fill rate*/
  ;
  if (FE0JW07.FE0JWHOR != 0) /* order qty*/
    FE0JW07.FE0JWHFR = mathLib.round(FE0JW07.FE0JWHIN * 100 / FE0JW07.FE0JWHOR, -mathLib.decimals(FE0JW07.FE0JWHFR));
  else
    if (FE0JW07.FE0JWHIN == 0) /* both order and invoice are 0*/
      FE0JW07.FE0JWHFR = 100;
    else
      FE0JW07.FE0JWHFR = 0;
    end
  end
  FE0JW05.FE0JWHFR[FE0JWCOL] = FE0JW07.FE0JWHFR;
  ;
  FFXREC.FFXNUMB = FE0JW07.FH5MSHQT; /* Curr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMCSF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FH5MSHQT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FH5MSHQT = FE0JW08.FH5MSHQT + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FF6SLFCT; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMMSL[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FF6SLFCT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FF6SLFCT = FE0JW08.FF6SLFCT + FFXREC.FFXROUND; /* accum total*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M006 subtotals for the season.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FF6BEINV; /* Beg inv*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMINB[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FF6BEINV[FE0JWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FE0JW08.FF6BEINV = FE0JW08.FF6BEINV + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRPRDDU; /* Prdctn due*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMDUE[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FFRPRDDU[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRPRDDU = FE0JW08.FFRPRDDU + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRSUBBY; /* Sbmt qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMQBY[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FFRSUBBY[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRSUBBY = FE0JW08.FFRSUBBY + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRTENBY; /* Tntv qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMTBY[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FFRTENBY[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRTENBY = FE0JW08.FFRTENBY + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWSUP; /* Supply*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMSUP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FE0JWSUP[FE0JWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FE0JW08.FE0JWSUP = FE0JW08.FE0JWSUP + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FG4BALSH; /* Bal to shp*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMBAL[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FG4BALSH[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FG4BALSH = FE0JW08.FG4BALSH + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWINE; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMINE[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FE0JWINE[FE0JWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FE0JW08.FE0JWINE = FE0JW08.FE0JWINE + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FF6SFSTK; /* Sfty stk*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMSTK[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FF6SFSTK[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FF6SFSTK = FE0JW08.FF6SFSTK + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FF6SUGBY; /* Sugg qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMSBY[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FF6SUGBY[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FF6SUGBY = FE0JW08.FF6SUGBY + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FF6PRFCT; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMFCT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FF6PRFCT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FF6PRFCT = FE0JW08.FF6PRFCT + FFXREC.FFXROUND; /* accum total*/
  ;
  FE0JW00.FE0JWASL = FE0JW07.FF6SLFCT * 12 * 2; /* Inv turns*/
  FE0JW00.FE0JWAIN = FE0JW07.FF6BEINV + FE0JW07.FE0JWINE;
  FE0JW00.FE0JWAIN = FE0JW00.FE0JWAIN * FE0JW07.FE0JWNMO;
  if (FE0JW00.FE0JWAIN != 0) /* Inventory NE zero*/
    FE0JW06.FE0JWTUR[FE0JWCOL] = mathLib.round(FE0JW00.FE0JWASL / FE0JW00.FE0JWAIN, -mathLib.decimals(FE0JW06.FE0JWTUR[FE0JWCOL]));
  end
  ;
  FFXREC.FFXNUMB = FE0JW07.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMDIR[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FFRDIRSH[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FFRDIRSH = FE0JW08.FFRDIRSH + FFXREC.FFXROUND; /* accum total*/
  ;
  FFXREC.FFXNUMB = FE0JW07.FE0JWNIL; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMNIL[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FE0JWNIL[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FE0JW08.FE0JWNIL = FE0JW08.FE0JWNIL + FFXREC.FFXROUND; /* accum total*/
  ;
   /* ------------------------------------------------------------*/
   /* Accumulate the number of months for accum total averaging.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW08.FE0JWNMO = FE0JW08.FE0JWNMO + FE0JW07.FE0JWNMO;
                                   /* Number of months*/
  ;
   /* ------------------------------------------------------------*/
   /* Increment the current column and clear the subtotal fields.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWCOL = FE0JW00.FE0JWCOL + 1; /* Current column*/
  set FE0JW07 empty; /* Season subtotals*/
  ;
   /* ------------------------------------------------------------*/
   /* First season does not have an accum column so skip logic.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSCT == 1) /* First season*/
    FE0JW00.FE0JWSCT = FE0JW00.FE0JWSCT + 1; /* Season counter*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M001 accum totals for the product.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW01.FE0JMMON[FE0JWCOL] = "ACCUM"; /* accum total literal*/
  FE0JW01.FE0JMSCT[FE0JWCOL] = FE0JW00.FE0JWSCT; /* Sesn count*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRPFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRAFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRIFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRCFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWFUT; /* Futures tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FE0JWFUT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRPNFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRANFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRINFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRCNFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWNFT; /* Natl acct fut tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FE0JWNFT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M002 accum totals for the product.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRPPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRAPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRIPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRCPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWPRT; /* Prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FE0JWPRT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRPNPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRANPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRINPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRCNPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWNPT; /* Natl acct prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FE0JWNPT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M003 accum totals for the product.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWTDP; /* Total pre-alloc*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWTDA; /* Total allocated*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDA[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWTDI; /* Total invoiced*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDI[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWTDC; /* Total cancelled*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWTDT; /* Total demand*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  if (FE0JW03.FE0JWTDT[FE0JWCOL] != 0) /* Total demand NE zero*/
    FE0JW00.FE0JWPCT = FE0JW03.FE0JWTDC[FE0JWCOL] * 100; /* Cancellation %*/
    FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWPCT / FE0JW03.FE0JWTDT[FE0JWCOL], -mathLib.decimals(FE0JW00.FE0JWPCT));
    FE0JW03.FE0JWCAP[FE0JWCOL] = FE0JW00.FE0JWPCT;
  end
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWTAF; /* Tot active fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTAF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTAF[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWTAP; /* Tot active prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTAP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTAP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M004 accum totals for the product.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWDFU; /* Fut dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDFU[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDFU[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWDNF; /* Natl fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDNF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDNF[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWDTF; /* Total fut*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDTF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDTF[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWDPR; /* Prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDPR[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDPR[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWDNP; /* Natl prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDNP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDNP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWDTP; /* Total prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDTP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDTP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMPCF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FFRCPRFC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FF6PRPFC; /* Mstr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMPRF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FF6PRPFC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  if (FE0JW08.FFRCDMFC != 0) /* accum total NE zero*/
    FE0JW00.FE0JWPCT = mathLib.round(FE0JW08.FE0JWFRF * 100 / FE0JW08.FFRCDMFC, -mathLib.decimals(FE0JW00.FE0JWPCT));
    FE0JW04.FE0JWDFF[FE0JWCOL] = FE0JW00.FE0JWPCT; /* Fcst fut %*/
  end
  ;
  if (FE0JW08.FE0JWHFU > 0 /* accum total GT zero*/
   && FE0JW08.FE0JWHCF > 0) /* accum total GT zero*/
    FE0JW00.FE0JWPCT = mathLib.round(FE0JW08.FE0JWHFU * 100 / FE0JW08.FE0JWHCF, -mathLib.decimals(FE0JW00.FE0JWPCT));
    FE0JW04.FE0JWDHF[FE0JWCOL] = FE0JW00.FE0JWPCT; /* Hist fut %*/
  end
  ;
  if (FE0JW08.FFRCPRFC != 0) /* accum total NE zero*/
    FE0JW04.FE0JWDFI[FE0JWCOL] = 100; /* Fcst prop idx*/
  end
  ;
  if (FE0JW08.FE0JWHPR != 0) /* accum total NE zero*/
    FE0JW04.FE0JWDHI[FE0JWCOL] = 100; /* Hist prop idx*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M005 accum totals for the product.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMFCD[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FFRCDMFC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWMDM; /* Mstr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMMDM[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FE0JWMDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  if (FE0JW08.FFRCDMFC != 0) /* accum total NE zero*/
    FE0JW05.FE0JWFSI[FE0JWCOL] = 100; /* Fcst seas idx*/
  end
  ;
  if (FE0JW08.FE0JWHDM != 0) /* accum total NE zero*/
    FE0JW05.FE0JWHSI[FE0JWCOL] = 100; /* Hist seas idx*/
  end
  ;
  FFXREC.FFXNUMB = FE0JW08.FF7RVFCT; /* Rvse dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMRVF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FF7RVFCT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  if (FE0JW05.FF7RVFCT[FE0JWCOL] != 0) /* accum total NE zero*/
    FE0JW05.FE0JWRSI[FE0JWCOL] = 100; /* Revd seas idx*/
  end
  ;
   /* Fcst fill rate*/
  ;
  if (FE0JW08.FFRCDMFC != 0) /* curr dmd*/
    FE0JW08.FE0JWFFR = mathLib.round(FE0JW08.FH5MSHQT * 100 / FE0JW08.FFRCDMFC, -mathLib.decimals(FE0JW08.FE0JWFFR));
  else
    if (FE0JW08.FH5MSHQT == 0) /* both curr sls and dmd are 0*/
      FE0JW08.FE0JWFFR = 100;
    else
      FE0JW08.FE0JWFFR = 0;
    end
  end
  FE0JW05.FE0JWFFR[FE0JWCOL] = FE0JW08.FE0JWFFR;
  FE0JW05.FE0JMFFR[FE0JWCOL] = mathLib.round(FE0JW05.FE0JWFFR[FE0JWCOL] / 1, -mathLib.decimals(FE0JW05.FE0JMFFR[FE0JWCOL]));
  ;
   /* Hist fill rate*/
  ;
  if (FE0JW08.FE0JWHOR != 0) /* order qty*/
    FE0JW08.FE0JWHFR = mathLib.round(FE0JW08.FE0JWHIN * 100 / FE0JW08.FE0JWHOR, -mathLib.decimals(FE0JW08.FE0JWHFR));
  else
    if (FE0JW08.FE0JWHIN == 0) /* both order and invoice are 0*/
      FE0JW08.FE0JWHFR = 100;
    else
      FE0JW08.FE0JWHFR = 0;
    end
  end
  FE0JW05.FE0JWHFR[FE0JWCOL] = FE0JW08.FE0JWHFR;
  ;
  FFXREC.FFXNUMB = FE0JW08.FH5MSHQT; /* Curr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMCSF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FH5MSHQT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FF6SLFCT; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMMSL[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FF6SLFCT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M006 accum totals for the product.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FF6BEINV; /* Beg inv*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMINB[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FF6BEINV[FE0JWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRPRDDU; /* Prdctn due*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMDUE[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FFRPRDDU[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRSUBBY; /* Sbmt qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMQBY[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FFRSUBBY[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRTENBY; /* Tntv qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMTBY[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FFRTENBY[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWSUP; /* Supply*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMSUP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FE0JWSUP[FE0JWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FG4BALSH; /* Bal to shp*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMBAL[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FG4BALSH[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWINE; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMINE[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FE0JWINE[FE0JWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FF6SFSTK; /* Sfty stk*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMSTK[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FF6SFSTK[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FF6SUGBY; /* Sugg qtb*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMSBY[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FF6SUGBY[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FF6PRFCT; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMFCT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FF6PRFCT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FE0JW00.FE0JWASL = FE0JW08.FF6SLFCT * 12 * 2; /* Inv turns*/
  FE0JW00.FE0JWAIN = FE0JW08.FF6BEINV + FE0JW08.FE0JWINE;
  FE0JW00.FE0JWAIN = FE0JW00.FE0JWAIN * FE0JW08.FE0JWNMO;
  if (FE0JW00.FE0JWAIN != 0) /* Inventory NE zero*/
    FE0JW06.FE0JWTUR[FE0JWCOL] = mathLib.round(FE0JW00.FE0JWASL / FE0JW00.FE0JWAIN, -mathLib.decimals(FE0JW06.FE0JWTUR[FE0JWCOL]));
  end
  ;
  FFXREC.FFXNUMB = FE0JW08.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMDIR[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FFRDIRSH[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FFXREC.FFXNUMB = FE0JW08.FE0JWNIL; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMNIL[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FE0JWNIL[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  ;
  FE0JW00.FE0JWCOL = FE0JW00.FE0JWCOL + 1; /* Current column*/
  FE0JW00.FE0JWSCT = FE0JW00.FE0JWSCT + 1; /* Sesn count*/
  ;
  ;
end // end FE0J114

// Process worksheet items
Function FE0J115()
   /* ------------------------------------------------------------*/
   /* Obtain related info for month and save in display storage.*/
   /* ------------------------------------------------------------*/
  if (FE0JW00.FE0JWLVL == "T") /* Type group summary*/
    ;
    FE0JS02(); /* Sum dom typgrp fcst*/
    ;
    if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
      FE0JW05.FF7RVFCT[FE0JWCOL] = FF7REC.FF7RVFCT; /* Rvse dmd fcst*/
    end
    ;
    if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
      FE0JS31(); /* get actual planned receipts*/
      FE0JW06.FF6PRFCT[FE0JWCOL] = FF7REC.FF6PRFCT; /* Actual PO*/
    else
      FE0JW06.FF6PRFCT[FE0JWCOL] = FF7REC.FF6PRFCT; /* Dom prod fcst*/
    end
    ;
    if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
      FE0JS33(); /* get actual planned receipts*/
      FE0JW06.FE0JWNIL[FE0JWCOL] = FF7REC.FF6PRFCT; /* NIL actual PO*/
    else
      FE0JS06(); /* Sum NIL typgrp pfcst*/
      FE0JW06.FE0JWNIL[FE0JWCOL] = FF7REC.FF6PRFCT; /* NIL prod fcst*/
    end
    ;
    FE0JS10(); /* Sum typgrp ivc/ord qtys*/
    ;
    if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
      FE0JS12(); /* Sum typgrp 1 yr ago hist*/
    end
    ;
    if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
      FE0JS14(); /* Sum typgrp shipment history*/
      FE0JW00.FH5MSHQT = FHAREC.FH5MSHQT - FHAREC.FH5RTSQT;
      FE0JW05.FH5MSHQT[FE0JWCOL] = FE0JW00.FH5MSHQT; /* Shipped*/
    else
      FE0JS16(); /* Sum next 3mo frozen sales fcst*/
      FE0JW00.FE0JWASL = FE0JW11.FG4BALSH; /* Sales forecast*/
    end
  else
    ;
    if (FE0JW00.FE0JWLVL == "L") /* Product line summary*/
      ;
      FE0JS20(); /* Sum dom line fcst*/
      ;
      if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
        FE0JW05.FF7RVFCT[FE0JWCOL] = FF7REC.FF7RVFCT; /* Rvse dmd fcst*/
      end
      ;
      if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        FE0JS31(); /* get actual planned receipts*/
        FE0JW06.FF6PRFCT[FE0JWCOL] = FF7REC.FF6PRFCT; /* Actual PO*/
      else
        FE0JW06.FF6PRFCT[FE0JWCOL] = FF7REC.FF6PRFCT; /* Dom prod fcst*/
      end
      ;
      if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        FE0JS33(); /* get actual planned receipts*/
        FE0JW06.FE0JWNIL[FE0JWCOL] = FF7REC.FF6PRFCT; /* NIL actual PO*/
      else
        FE0JS22(); /* Sum NIL line pfcst*/
        FE0JW06.FE0JWNIL[FE0JWCOL] = FF7REC.FF6PRFCT; /* NIL prod fcst*/
      end
      ;
      FE0JS26(); /* Sum line ivc/ord qtys*/
      ;
      if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
        FE0JS28(); /* Sum line 1 yr ago hist*/
      end
      ;
      if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        FE0JS30(); /* Sum line shipment history*/
        FE0JW00.FH5MSHQT = FHAREC.FH5MSHQT - FHAREC.FH5RTSQT;
        FE0JW05.FH5MSHQT[FE0JWCOL] = FE0JW00.FH5MSHQT; /* Shipped*/
      else
        FE0JS16(); /* Sum next 3mo frozen sales fcst*/
        FE0JW00.FE0JWASL = FE0JW11.FG4BALSH; /* Sales forecast*/
      end
      ;
    else
      ;
      if (FFWREC.YPGCD == "*") /* All type groups*/
        FE0JS40(); /* Sum dom cat fcst*/
      else
        FE0JS41(); /* Get dom cat fcst*/
      end
      ;
      if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
        FE0JW05.FF7RVFCT[FE0JWCOL] = FF7REC.FF7RVFCT;
                                   /* Rvse dmd fcst*/
      end
      ;
      if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        FE0JS31(); /* get actual planned receipts*/
        FE0JW06.FF6PRFCT[FE0JWCOL] = FF7REC.FF6PRFCT; /* Actual PO*/
      else
        FE0JW06.FF6PRFCT[FE0JWCOL] = FF7REC.FF6PRFCT; /* Dom prod fcst*/
      end
      ;
      if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        FE0JS33(); /* get actual planned receipts*/
        FE0JW06.FE0JWNIL[FE0JWCOL] = FF7REC.FF6PRFCT;
      else
        FE0JS42(); /* Sum NIL cat pfcst*/
        FE0JW06.FE0JWNIL[FE0JWCOL] = FF7REC.FF6PRFCT;
                                   /* NIL production*/
      end
      ;
      FE0JS46(); /* Sum cat ivc/ord qtys*/
      ;
      if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
        FE0JS48(); /* Sum one year ago cat hist*/
        if (FFWREC.YPGCD != "*")
          FE0JS49(); /* Sum two year ago cat hist*/
        end
      end
      ;
      if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        FE0JS50(); /* Sum cat ship history*/
        FE0JW00.FH5MSHQT = FH6REC.FH5MSHQT - FH6REC.FH5RTSQT;
        FE0JW05.FH5MSHQT[FE0JWCOL] = FE0JW00.FH5MSHQT; /* Shipped*/
      else
        FE0JS16(); /* Sum next 3mo frozen sales fcst*/
        FE0JW00.FE0JWASL = FE0JW11.FG4BALSH; /* Sales forecast*/
      end
      ;
    end
  end
  ;
  if (FE0JW00.FE0JWLVL == "C" /* one category only*/
   && FFWREC.YPGCD != "*")   
    if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
          /* NEXT SENTENCE*/
    else
      FE0J180(); /* Get master dmd,prop and sales fcsts*/
    end
  else
    if (FFRREC.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
       /* NEXT SENTENCE*/
    else
      FE0J170(); /* Get curr sales fcst*/
      FE0J180(); /* Get master dmd,prop and sales fcsts*/
    end
  end
  ;
  FE0JS80(); /* Save item information*/
  ;
  FE0JW00.FE0JWCOL = FE0JW00.FE0JWCOL + 1; /* Current column*/
  ;
  ;
end // end FE0J115

// Close summary worksheet cursor
Function FE0J116()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XPCCD != "  " /* One category*/
   && FFWREC.XPCCD != "*"  
   && FFWREC.YPGCD != "*") /* One type group*/
    try
      call "FF2930" ("C2", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "FF2930" ("C3", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0J116

// Get "Curr mo" hdr wrksht
Function FE0J117()
   /* ------------------------------------------------------------*/
   /* Get header summary worksheet data row for "CURR MO"*/
   /* and save the data obtained in W.S.*/
   /* Note: This process is done here to get the SUMMED values*/
         /* selected from the header/item join for the row with*/
         /* CURR MO/CONT MO = FCST MO.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for search for row.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWSWC = "N"; /* ===> Summary cursor EOF switch*/
  ;
  FE0J112(); /* ===> Open summary worksheet cursor*/
  ;
  FE0J113(); /* ===> Fetch next summary worksheet*/
  ;
  while (FE0JW00.FE0JWSWC == "N") /* ===> Until end of cursor*/
    ;
    if (FFQREC.FFQCURMO == FFRREC.FF4FCTMO) /* ===> if current month*/
      ;
      FE0J118(); /* ===> Save header information*/
      FE0JW00.FE0JWSWC = "Y"; /* ===> Summary cursor EOF switch*/
      ;
    else
      ;
      FE0J113(); /* ===> Fetch next summary worksheet*/
      ;
    end /* ===> Header CURR MO = Item FCST MO*/
    ;
  end /* ===> Until end of cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J116(); /* Close summary worksheet cursor*/
  ;
  ;
end // end FE0J117

// Save header information
Function FE0J118()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* Obtain current date/time*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the number of working days in the month to date.*/
   /* ------------------------------------------------------------*/
  ;
  set TA9REC empty; /* Subroutine parameters*/
  ;
  TA9REC.TA9BEGDT = XX0XW01.XX0XWDAT; /* Beginning date*/
  TA9REC.TA9BEGDD = 01; /* Beginning day*/
  ;
  TA9REC.TA9ENDDT = XX0XW01.XX0XWDAT; /* Ending date*/
  ;
  try
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Working days subroutine*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA9REC.TA9RTNFL != 0)          /* or bad return code*/
    ;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/
    ;
    FFWREC.XXXMODID = "118"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALCULATE WORKING DAYS TO DATE";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (TA9REC.TA9DTDIF == 0) /* No working days to date*/
    FE0JW00.FE0JWDTD = 1; /* Default to 1 working day*/
  else
    FE0JW00.FE0JWDTD = TA9REC.TA9DTDIF; /* Working days to date*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the number of working days in the month.*/
   /* ------------------------------------------------------------*/
  ;
  set TA9REC empty; /* Subroutine parameters*/
  ;
  TA9REC.TA9BEGDT = XX0XW01.XX0XWDAT; /* Beginning date*/
  TA9REC.TA9BEGDD = 01; /* Beginning day*/
  ;
  FE0JW00.FE0JWDAT = XX0XW01.XX0XWCYM; /* Current CCYYMM*/
  FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM + 1; /* Increment month*/
  if (FE0JW00.FE0JWDMM > 12) /* Month GT maximum*/
    FE0JW00.FE0JWDMM = 1; /* Reset to minimum*/
    FE0JW00.FE0JWDYY = FE0JW00.FE0JWDYY + 1; /* Increment year*/
  end
  TA9REC.TA9ENDDT = FE0JW00.FE0JWDAT * 100; /* Ending date*/
  TA9REC.TA9ENDDD = 01; /* Ending day*/
  ;
  try
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Working days subroutine*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA9REC.TA9RTNFL != 0)          /* or bad return code*/
    ;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/
    ;
    FFWREC.XXXMODID = "118"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALCULATE WORKING DAYS IN MONTH";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  FE0JW00.FE0JWDIM = TA9REC.TA9DTDIF; /* Working days in month*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the information from the worksheet header row.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.FFABEGMO > 0) /* Begin mo passed*/
    FE0JW01.FFABEGMO = FFWREC.FFABEGMO; /* Begin mo*/
  else
    FE0JW01.FFABEGMO = FFQREC.FFABEGMO; /* Begin mo*/
  end
  ;
  FE0JW01.FFQMBYMO = FFQREC.FFQMBYMO; /* Main buy mo*/
  ;
  FE0JW01.FFQCURMO = FFQREC.FFQCURMO; /* Current mo*/
  FFXREC.FFXNUMB = FFQREC.FFQLCOFU; /* Lst caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FFQLCOFU = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQLCOPR; /* Lst caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FFQLCOPR = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQOCOFU; /* Oth caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FFQOCOFU = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQOCOPR; /* Oth caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FFQOCOPR = FFXREC.FFXROUND; /* Rounded number*/
  ;
  if (FE0JW00.FE0JWLVL == "C"
   && FFWREC.YPGCD != "*")
    FE0JW01.FF2PRIND = FFQREC.FF2PRIND; /* Prop yr ind*/
    FE0JW04.FF2FUIND = FFQREC.FF2FUIND; /* Futr yr ind*/
    FE0JW05.FF2DMIND = FFQREC.FF2DMIND; /* Dmd yr ind*/
  else
    FE0JW01.FF2PRIND = "1"; /* Prop yr ind*/
    FE0JW04.FF2FUIND = "1"; /* Futr yr ind*/
    FE0JW05.FF2DMIND = "1"; /* Dmd yr ind*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Establish the year indicators used to calculate history.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FF2PRIND = FE0JW01.FF2PRIND; /* Prop yr ind*/
  FE0JW00.FF2FUIND = FE0JW04.FF2FUIND; /* Futr yr ind*/
  FE0JW00.FF2DMIND = FE0JW05.FF2DMIND; /* Dmd yr ind*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the Prior Month for FF_CONTP_MO*/
    /* and save it in a field called --> fe0jWPMO*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW01.FE0JWCMO = FFQREC.FFQCURMO; /* Current mo*/
  ;
  if (FE0JW01.FE0JWCMM == 1) /* Current mo*/
    FE0JW01.FE0JWPCY = FE0JW01.FE0JWCCY - 1;
    FE0JW01.FE0JWPMM = 12;
  else
    FE0JW01.FE0JWPCY = FE0JW01.FE0JWCCY; /* curr to prior*/
    FE0JW01.FE0JWPMM = FE0JW01.FE0JWCMM - 1; /* decrement month*/
  end
  ;
  ;
end // end FE0J118

// Format carryover quantities
Function FE0J119()
   /* ------------------------------------------------------------*/
   /* Determine where to display the carryover quantities.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW01.FFQCURMO in FE0JW01.FF4FCTMO) /* Find current month*/
    ;
    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/
    ;
  else
    ;
    FFWREC.XXXMODID = "119"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    TAEREC.TAEDESC1 = "CURRENT MONTH WAS NOT FOUND";
    FE0JW00.FE0JWDAT = FE0JW01.FFQCURMO; /* Date work area*/
    TAEREC.TAEDESC2 = FE0JW00.FE0JWDAT; /* Current month*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FORMAT CARRYOVER QUANTITIES";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (FE0JW01.FFABEGMO == FE0JW01.FFQCURMO) /* Beg mo EQ curr*/
    ;
    FFXREC.FFXNUMB = FE0JW01.FFQOCOFU + FE0JW01.FFQLCOFU; /* Caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FE0JW01.FE0JMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW01.FE0JWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
    ;
    FFXREC.FFXNUMB = FE0JW01.FFQOCOPR + FE0JW01.FFQLCOPR; /* Caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FE0JW01.FE0JMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW01.FE0JWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
    ;
    FFXREC.FFXNUMB = FE0JW01.FE0JWFCO[sysVar.arrayIndex] + FE0JW01.FE0JWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FE0JW06.FE0JMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
    ;
  else
    ;
    FE0J-1191();
    ;
  end
  ;
  ;
end // end FE0J119

// Format and converse the map
Function FE0J120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FE0JW00.FE0JWSWF == "Y") /* Map must be formatted*/
      FE0J121(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J122(); /* Check change authorization*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0JM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0JM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0JM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FE0JM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FE0JM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0JM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FE0JM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0JM001.CAITEM; /* Application data*/
  ;
  ;
end // end FE0J120

// Format the display data
Function FE0J121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM001 initial; /* M001 input/output area*/
  ;
  FE0JW00.FE0JWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM001.FE0JWPAG = FE0JW00.FE0JWPAG; /* Page number*/
  ;
  FE0JM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0JM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
  ;
  FE0JM001.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0JM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  FE0JM001.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0JM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
  ;
  FE0JM001.FFQMBYMO = FE0JW01.FFQMBYMO; /* Main buy mo*/
  ;
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW01.CACHGFL != "Y") /* No modifiable data exists*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWRSA = 0; /* Right scroll amount*/
  FE0JW00.FE0JWIXC = 1; /* Column index*/
  ;
  FE0JW00.FE0JWCOL = FE0JW00.FE0JWBEG; /* Beginning column*/
  FE0JW00.FE0JWEND = FE0JW00.FE0JWBEG + 7; /* Ending column*/
  ;
  while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
    ;
    if (FE0JW00.FE0JWIXC == 1)
      FE0JW01.FE0JMBSF[FE0JWCOL] = "Y";
    else
      FE0JW01.FE0JMBSF[FE0JWCOL] = "N";
    end
    ;
    set FE0JM001.FE0JMMON[FE0JWIXC] skip; /* Forecast month*/
    ;
    FE0JM001.FE0JMMON[FE0JWIXC] = FE0JW01.FE0JMMON[FE0JWCOL];
    FE0JM001.FE0JMFCO[FE0JWIXC] = FE0JW01.FE0JMFCO[FE0JWCOL];
    FE0JM001.FE0JMPCO[FE0JWIXC] = FE0JW01.FE0JMPCO[FE0JWCOL];
    FE0JM001.FE0JMFUP[FE0JWIXC] = FE0JW01.FE0JMFUP[FE0JWCOL];
    FE0JM001.FE0JMFUA[FE0JWIXC] = FE0JW01.FE0JMFUA[FE0JWCOL];
    FE0JM001.FE0JMFUI[FE0JWIXC] = FE0JW01.FE0JMFUI[FE0JWCOL];
    FE0JM001.FE0JMFUC[FE0JWIXC] = FE0JW01.FE0JMFUC[FE0JWCOL];
    FE0JM001.FE0JMFUT[FE0JWIXC] = FE0JW01.FE0JMFUT[FE0JWCOL];
    FE0JM001.FE0JMNFP[FE0JWIXC] = FE0JW01.FE0JMNFP[FE0JWCOL];
    FE0JM001.FE0JMNFA[FE0JWIXC] = FE0JW01.FE0JMNFA[FE0JWCOL];
    FE0JM001.FE0JMNFI[FE0JWIXC] = FE0JW01.FE0JMNFI[FE0JWCOL];
    FE0JM001.FE0JMNFC[FE0JWIXC] = FE0JW01.FE0JMNFC[FE0JWCOL];
    FE0JM001.FE0JMNFT[FE0JWIXC] = FE0JW01.FE0JMNFT[FE0JWCOL];
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "  SUB" /**/
     && FE0JW00.FE0JWIXC <= 8                 /**/
     && FE0JW01.FE0JMSCT[FE0JWCOL] == 1)      /* first season*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM001.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM") /* ===> end of season data*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM001.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] != "     "
     && FE0JW01.FE0JMMON[FE0JWCOL] != "  SUB"
     && FE0JW01.FE0JMMON[FE0JWCOL] != "ACCUM")
      FE0JW00.FE0JWLDM = FE0JW01.FF4FCTMO[FE0JWCOL]; /* Last disp mo*/
    end
    ;
    ;
    FE0JW00.FE0JWCOL = FE0JW00.FE0JWCOL + 1; /* Current column*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
    FE0JW00.FE0JWRSA = FE0JW00.FE0JWRSA + 1; /* Right scroll amount*/
    ;
  end
  ;
  ;
end // end FE0J121

// Check change authorization
Function FE0J122()
   /* ------------------------------------------------------------*/
   /* If no data was obtained, autoskip page and scroll amount.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW01.CACHGFL != "Y") /* No data was obtained*/
    ;
    set FE0JM001.FE0JWPAG skip, bold; /* Page number*/
    /* SET fe0jM001.fe0jWLRS AUTOSKIP  ; Left/right scroll amount*/
    ;
  end
  ;
  ;
end // end FE0J122

// Check attention identifier
Function FE0J130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FE0JM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FE0I"; /* Return to application*/
      COMMAREA.CAITEM = "FE0JM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/
    ;
    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0J130

// Reset highlighted fields
Function FE0J140()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM001.FE0JWPAG initialAttributes; /* Page number*/
  ;
  set FE0JM001.CATOAP initialAttributes; /* TO application*/
  set FE0JM001.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FE0J140

// Verify the entered data
Function FE0J150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM001.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FE0JM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page request*/
    FE0J151(); /* Verify page request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FE0J152(); /* Verify scroll request*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether valid a request to print was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print request*/
    FE0J153(); /* Verify print request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FE0J154(); /* Verify M001 changed fields*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0J150

// Verify page request
Function FE0J151()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no more pages.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW01.CACHGFL != "Y") /* No modifiable data exists*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM001.FE0JWPAG < 1 /* Less than minimum*/
   || FE0JM001.FE0JWPAG > 6) /* or greater than maximum*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    set FE0JM001.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/
    ;
  end
  ;
  ;
end // end FE0J151

// Verify scroll request
Function FE0J152()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW01.CACHGFL != "Y") /* No modifiable data exists*/
    ;
    FFWREC.XXXMODID = "152"; /* Module identification*/
    ;
    if (converseVar.eventKey is pf10) /* Scroll left request*/
      ;
      converseLib.validationFailed(23); /* Unable to scroll left*/
    else
      converseLib.validationFailed(24); /* Unable to scroll right*/
      ;
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0JW00.FE0JWBEG == 1)       /* and at minimum column*/
    ;
    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    ;
    if (FE0JW00.FE0JWEDM != 0)
      if (FE0JW00.FE0JWLDM == FE0JW00.FE0JWEDM) /* If no more data*/
        if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM"
         || FE0JW01.FE0JMMON[FE0JWCOL] == "     ")
          FFWREC.XXXMODID = "152"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end
    ;
    if (FE0JW00.FF2NSEAS == 1 /* One season per year*/
     && FE0JW00.FE0JWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "152"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FE0JW00.FE0JWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "152"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FE0JW00.FE0JWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "152"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FE0JW00.FE0JWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "152"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM001.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "152"; /* Module identification*/
    set FE0JM001.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J152

// Verify print request
Function FE0J153()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no data to process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW01.CACHGFL != "Y") /* No modifiable data exists*/
    ;
    FFWREC.XXXMODID = "153"; /* Module identification*/
    converseLib.validationFailed(208); /* No data to process*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM001.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "153"; /* Module identification*/
    set FE0JM001.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J153

// Verify M001 changed fields
Function FE0J154()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM001.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "154"; /* Module identification*/
    set FE0JM001.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J154

// Process valid input request
Function FE0J160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page requested*/
    ;
    FE0JW00.FE0JWPAD = +1; /* Page direction*/
    ;
    if (FE0JM001.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page specified*/
      ;
      FE0JW00.FE0JWPAG = FE0JM001.FE0JWPAG; /* Page number*/
    else
      FE0JW00.FE0JWPAG = FE0JW00.FE0JWPAG + FE0JW00.FE0JWPAD;
                                   /* Page number*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FE0JW00.FE0JWDIX = FE0JW00.FE0JWBEG - 1;
    FE0JW00.FE0JWLSA = 1;
    ;
    while (FE0JW00.FE0JWDIX > 0
     && FE0JW01.FE0JMBSF[FE0JWDIX] != "Y")
      FE0JW00.FE0JWLSA = FE0JW00.FE0JWLSA + 1;
      FE0JW00.FE0JWDIX = FE0JW00.FE0JWDIX - 1;
    end
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG - FE0JW00.FE0JWLSA;
    ;
    if (FE0JW00.FE0JWBEG < 1) /* Beginning LT minimum*/
      ;
      FE0JW00.FE0JWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "160"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG + FE0JW00.FE0JWRSA;
    ;
    if (FE0JW00.FE0JWCOL <= 60) /* columns not yet all obtained*/
      ;
      FE0J161(); /* check for 2nd or 3rd year*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print requested*/
    ;
    FE0J162(); /* Submit print request*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FE0J160

// Check for 2nd or 3rd year
Function FE0J161()
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* and determine whether new data must be selected*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FF2NSEAS == 1) /* One season per year*/
    if (FE0JW00.FE0JWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FE0JW00.FE0JWCOL > 14)     /* columns not yet all obtained*/
      FE0JW00.FE0JWSWR = "Y"; /* Request for data switch*/
      FE0JW00.FE0JWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end
    ;
    if (FE0JW00.FE0JWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FE0JW00.FE0JWCOL > 28)     /* columns not yet all obtained*/
      FE0JW00.FE0JWSWR = "Y"; /* Request for data switch*/
      FE0JW00.FE0JWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end
  ;
  if (FE0JW00.FF2NSEAS == 2) /* Two seasons per year*/
    if (FE0JW00.FE0JWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FE0JW00.FE0JWCOL > 16)     /* columns not yet all obtained*/
      FE0JW00.FE0JWSWR = "Y"; /* Request for data switch*/
      FE0JW00.FE0JWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end
    ;
    if (FE0JW00.FE0JWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FE0JW00.FE0JWCOL > 32)     /* columns not yet all obtained*/
      FE0JW00.FE0JWSWR = "Y"; /* Request for data switch*/
      FE0JW00.FE0JWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end
  ;
  if (FE0JW00.FF2NSEAS == 3) /* Three seasons per year*/
    if (FE0JW00.FE0JWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FE0JW00.FE0JWCOL > 18)     /* columns not yet all obtained*/
      FE0JW00.FE0JWSWR = "Y"; /* Request for data switch*/
      FE0JW00.FE0JWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end
    ;
    if (FE0JW00.FE0JWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FE0JW00.FE0JWCOL > 36)     /* columns not yet all obtained*/
      FE0JW00.FE0JWSWR = "Y"; /* Request for data switch*/
      FE0JW00.FE0JWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end
  ;
  if (FE0JW00.FF2NSEAS == 4) /* Four seasons per year*/
    if (FE0JW00.FE0JWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FE0JW00.FE0JWCOL > 20)     /* columns not yet all obtained*/
      FE0JW00.FE0JWSWR = "Y"; /* Request for data switch*/
      FE0JW00.FE0JWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end
    ;
    if (FE0JW00.FE0JWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FE0JW00.FE0JWCOL > 40)     /* columns not yet all obtained*/
      FE0JW00.FE0JWSWR = "Y"; /* Request for data switch*/
      FE0JW00.FE0JWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end
  ;
  ;
end // end FE0J161

// Submit print worksheet request
Function FE0J162()
  ;
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FE0J163(); /* format production jcl*/
    else
      FE0J164(); /* format development jcl*/
    end
  else
    ;
    FFWREC.XXXMODID = "162"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end
  ;
end // end FE0J162

// Submit prod jcl FF1911
Function FE0J163()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FE0JT01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format selection information in the parameters statement.*/
      /* ------------------------------------------------------------*/
      ;
      set FE0JW09 empty; /* Parameters work area*/
      ;
      FE0JW09.XPLCD = FFWREC.XPLCD; /* Product line code*/
      FE0JW09.YPGCD = FFWREC.YPGCD; /* Product type group code*/
      FE0JW09.XPCCD = FFWREC.XPCCD; /* Product category code*/
      FE0JW09.FE0JWSEL = FE0JW00.FE0JWLVL; /* W/S sum level*/
      FE0JW09.FE0JWBGM = FFWREC.FFABEGMO; /* Begin month*/
      FE0JW09.FE0JWMIS[1] = FE0JW00.FE0JWMIS[1];
      FE0JW09.FE0JWMIS[2] = FE0JW00.FE0JWMIS[2];
      FE0JW09.FE0JWMIS[3] = FE0JW00.FE0JWMIS[3];
      FE0JW09.FE0JWMIS[4] = FE0JW00.FE0JWMIS[4];
      if (FFWREC.YPGCD == "*")
        FE0JW09.FE0JWCTP = "Y"; /* Combine types*/
      else
        FE0JW09.FE0JWCTP = "N"; /* Not combine types*/
      end
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0JW09.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0JT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FE0JT01.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0JT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Background Job Subroutine*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "163"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* User cancelled request*/
  else
    converseLib.validationFailed(1); /* System error occurred*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0J163

// Submit test jcl FF1911
Function FE0J164()
   /* submit test jcl*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FE0JT5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format selection information in the parameters statement.*/
      /* ------------------------------------------------------------*/
      ;
      set FE0JW09 empty; /* Parameters work area*/
      ;
      FE0JW09.XPLCD = FFWREC.XPLCD; /* Product line code*/
      FE0JW09.YPGCD = FFWREC.YPGCD; /* Product type group code*/
      FE0JW09.XPCCD = FFWREC.XPCCD; /* Product category code*/
      FE0JW09.FE0JWSEL = FE0JW00.FE0JWLVL; /* W/S sum level*/
      FE0JW09.FE0JWBGM = FFWREC.FFABEGMO; /* Begin month*/
      FE0JW09.FE0JWMIS[1] = FE0JW00.FE0JWMIS[1];
      FE0JW09.FE0JWMIS[2] = FE0JW00.FE0JWMIS[2];
      FE0JW09.FE0JWMIS[3] = FE0JW00.FE0JWMIS[3];
      FE0JW09.FE0JWMIS[4] = FE0JW00.FE0JWMIS[4];
      if (FFWREC.YPGCD == "*")
        FE0JW09.FE0JWCTP = "Y"; /* Combine types*/
      else
        FE0JW09.FE0JWCTP = "N"; /* Not combine types*/
      end
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0JW09.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FE0JT5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FE0JT5O.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0JT5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Background Job Subroutine*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "164"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* User cancelled request*/
  else
    converseLib.validationFailed(1); /* System error occurred*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0J164

// Calc Curr sales forecast
Function FE0J170()
   /* *********************************************************************/
   /* Calculate the current sales forecast*/
   /* by calculating each category in summary cursor.*/
   /* *********************************************************************/
  ;
  FE0JW00.FE0JWCSF = 0;
                                   /* zero out current sales forecast*/
  FE0JW05.FH5MSHQT[FE0JWCOL] = 0; /* zero out current sales forecast*/
  FE0JW00.FE0JWXRF = "N"; /* reset eof flag*/
  ;
  FE0J171(); /* open cross reference*/
  FE0J172(); /* fetch cross reference*/
  ;
  while (FE0JW00.FE0JWXRF == "N") /* while not end cross reference*/
    ;
    set FE0JW10 empty; /* Worksheet header*/
    set FE0JW11 empty; /* Worksheet item*/
    ;
    FE0JW10.XWSCD = "05"; /* Worksheet type code*/
    FE0JW11.FF4FCTMO = FFRREC.FF4FCTMO; /* Fcst mo*/
    ;
    FE0J174(); /* sel category vswitm01*/
    ;
     /* Calculate the current sales forecast and accumulate*/
     /* =  Current demand forecast * Fcst fill rate / 100*/
    ;
    FE0JW00.FE0JWCSF = FE0JW11.FFRCDMFC * FE0JW11.FF7FLLRT / 100;
    FE0JW05.FH5MSHQT[FE0JWCOL] = FE0JW05.FH5MSHQT[FE0JWCOL] + FE0JW00.FE0JWCSF; /* add to accum*/
    ;
    FE0J172(); /* fetch cross reference*/
    ;
  end
  ;
  FE0J175(); /* close cross reference*/
end // end FE0J170

// Open cross reference
Function FE0J171()
  ;
   /* ------------------------------------------------------------*/
   /* Open cursor for FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  if (FFWREC.XPCCD == " ") /* No product category*/
    FF2REC.XPCCD = "*"; /* All product categorys*/
  else
    FF2REC.XPCCD = FFWREC.XPCCD; /* One product category*/
  end
  ;
  if (FFWREC.XPLCD == " ") /* No product line*/
    FF2REC.XPLCD = "*"; /* All product lines*/
  else
    FF2REC.XPLCD = FFWREC.XPLCD; /* One product line*/
  end
  ;
  if (FFWREC.YPGCD == " ") /* No type group*/
    FF2REC.YPGCD = "*"; /* All type groups*/
  else
    FF2REC.YPGCD = FFWREC.YPGCD; /* One type group*/
  end
   /* always use div=10, since tbl is set up*/
     /* with div=10 for all rows - dom and nil*/
  FF2REC.YSMXDV = "10"; /* Division group*/
  ;
  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "171"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0J171

// Fetch cross reference
Function FE0J172()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FE0JW00.FE0JWXRF = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "171"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0J172

// Sel frozen target WS type '07'
Function FE0J174()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW10.XPCCD = FF2REC.XPCCD; /* One product category*/
  ;
  FE0JW10.XPLCD = FF2REC.XPLCD; /* One product line*/
  ;
  FE0JW10.YPGCD = FF2REC.YPGCD; /* One type group*/
  ;
  try
    call "FF2930" ("S ", SQLCA, FE0JW10, FE0JW11) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "174"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FE0JW10.FFQKEY2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0J174

// Close cross reference
Function FE0J175()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "175"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0J175

// Get master sales,prop,demand
Function FE0J180()
   /* *********************************************************************/
   /* obtain the frozen master sales and prop forecasts.  Calculate a*/
   /* frozen master demand forecast based on frozen fill rate.*/
   /* frozen master values are kept on master target WS type '07'.*/
   /* frozen master sales is kept in balance to ship field.*/
   /* frozen master prop is kept in current prop forecast field.*/
   /* *********************************************************************/
  ;
  FE0JW00.FE0JWSF = 0; /* zero out previous sales forecast*/
  FE0JW04.FF6PRPFC[FE0JWCOL] = 0; /* zero out master prop forecast*/
  FE0JW05.FE0JWMDM[FE0JWCOL] = 0; /* zero out master demand forecast*/
  FE0JW05.FF6SLFCT[FE0JWCOL] = 0; /* zero out master sales forecast*/
  FE0JW00.FE0JWMDF = 0;
                                   /* zero out master demand forecast*/
  FE0JW00.FE0JWXRF = "N"; /* reset eof flag*/
  ;
  FE0J171(); /* open cross reference*/
  FE0J172(); /* fetch cross reference*/
  ;
  while (FE0JW00.FE0JWXRF == "N") /* while not end cross reference*/
    if (FFRREC.FF4FCTMO == FFQREC.FFQCURMO) /* current month, get prev fcst*/
      set FE0JW10 empty; /* Worksheet header*/
      set FE0JW11 empty; /* Worksheet item*/
      ;
      FE0JW10.XWSCD = "07"; /* Worksheet type code*/
      FE0JW11.FF4FCTMO = FE0JW01.FE0JWPMO; /* Prev Fcst mo*/
      ;
      FE0J174(); /* sel category vswitm01*/
      FE0JW00.FE0JWSF = FE0JW11.FG4BALSH; /* previous sales forecast*/
    end
    ;
    set FE0JW10 empty; /* Worksheet header*/
    set FE0JW11 empty; /* Worksheet item*/
    ;
    FE0JW10.XWSCD = "07"; /* Worksheet type code*/
    FE0JW11.FF4FCTMO = FFRREC.FF4FCTMO; /* Fcst mo*/
    ;
    FE0J174(); /* sel category vswitm01*/
    ;
    FE0JW11.FG4BALSH = FE0JW11.FG4BALSH - FE0JW00.FE0JWSF; /* minus prev*/
    ;
    ;
    FE0JW05.FF6SLFCT[FE0JWCOL] = FE0JW05.FF6SLFCT[FE0JWCOL] +                   FE0JW11.FG4BALSH; /* master sales forecast*/
    ;
    FE0JW04.FF6PRPFC[FE0JWCOL] = FE0JW04.FF6PRPFC[FE0JWCOL] +                   FE0JW11.FFRCPRFC; /* master prop forecast*/
    ;
     /* Calculate the master demand forecast and accumulate*/
     /* =  Master Sales Fcst * 100 / Fcst fill rate*/
    ;
    if (FE0JW11.FF7FLLRT == 0) /* fill rate is zero*/
      FE0JW00.FE0JWMDF = 0; /* master demand*/
    else
      FE0JW00.FE0JWMDF = FE0JW11.FG4BALSH * 100 / FE0JW11.FF7FLLRT;
      FE0JW05.FE0JWMDM[FE0JWCOL] = FE0JW05.FE0JWMDM[FE0JWCOL] + FE0JW00.FE0JWMDF; /* add to accum*/
    end
    ;
    FE0J172(); /* fetch cross reference*/
    ;
  end
  ;
  FE0J175(); /* close cross reference*/
end // end FE0J180

Function FE0J200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J220(); /* Format and display the map*/
  ;
  FE0J230(); /* Check attention identifier*/
  ;
  FE0J240(); /* Reset fields to normal intensity*/
  ;
  FE0J250(); /* Verify the entered data*/
  ;
  FE0J260(); /* Process valid input request*/
  ;
  ;
end // end FE0J200

// Format and converse the map
Function FE0J220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FE0JW00.FE0JWSWF == "Y") /* Map must be formatted*/
      FE0J221(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0JM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0JM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0JM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FE0JM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FE0JM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0JM002 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FE0JM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0JM002.CAITEM; /* Application data*/
  ;
  ;
end // end FE0J220

// Format the display data
Function FE0J221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM002 initial; /* M002 input/output area*/
  ;
  FE0JW00.FE0JWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM002.FE0JWPAG = FE0JW00.FE0JWPAG; /* Page number*/
  ;
  FE0JM002.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0JM002.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
  ;
  FE0JM002.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0JM002.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  FE0JM002.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0JM002.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
  ;
  FE0JM002.FFQMBYMO = FE0JW01.FFQMBYMO; /* Main buy month*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWIXC = 1; /* Column index*/
  FE0JW00.FE0JWRSA = 0; /* Right scroll amount*/
  ;
  FE0JW00.FE0JWCOL = FE0JW00.FE0JWBEG; /* Beginning column*/
  FE0JW00.FE0JWEND = FE0JW00.FE0JWBEG + 7; /* Ending column*/
  ;
  while (FE0JW00.FE0JWIXC <= 8) /* Until end of map columns*/
    ;
    if (FE0JW00.FE0JWIXC == 1)
      FE0JW01.FE0JMBSF[FE0JWCOL] = "Y";
    else
      FE0JW01.FE0JMBSF[FE0JWCOL] = "N";
    end
    ;
    set FE0JM002.FE0JMMON[FE0JWIXC] skip; /* Forecast month*/
    ;
    FE0JM002.FE0JMMON[FE0JWIXC] = FE0JW01.FE0JMMON[FE0JWCOL];
    FE0JM002.FE0JMPRP[FE0JWIXC] = FE0JW02.FE0JMPRP[FE0JWCOL];
    FE0JM002.FE0JMPRA[FE0JWIXC] = FE0JW02.FE0JMPRA[FE0JWCOL];
    FE0JM002.FE0JMPRI[FE0JWIXC] = FE0JW02.FE0JMPRI[FE0JWCOL];
    FE0JM002.FE0JMPRC[FE0JWIXC] = FE0JW02.FE0JMPRC[FE0JWCOL];
    FE0JM002.FE0JMPRT[FE0JWIXC] = FE0JW02.FE0JMPRT[FE0JWCOL];
    FE0JM002.FE0JMNPP[FE0JWIXC] = FE0JW02.FE0JMNPP[FE0JWCOL];
    FE0JM002.FE0JMNPA[FE0JWIXC] = FE0JW02.FE0JMNPA[FE0JWCOL];
    FE0JM002.FE0JMNPI[FE0JWIXC] = FE0JW02.FE0JMNPI[FE0JWCOL];
    FE0JM002.FE0JMNPC[FE0JWIXC] = FE0JW02.FE0JMNPC[FE0JWCOL];
    FE0JM002.FE0JMNPT[FE0JWIXC] = FE0JW02.FE0JMNPT[FE0JWCOL];
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "  SUB" /**/
     && FE0JW00.FE0JWIXC <= 8                 /**/
     && FE0JW01.FE0JMSCT[FE0JWCOL] == 1)      /* first season*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM002.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM") /* ===> end of season data*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM002.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] != "     "
     && FE0JW01.FE0JMMON[FE0JWCOL] != "  SUB"
     && FE0JW01.FE0JMMON[FE0JWCOL] != "ACCUM")
      FE0JW00.FE0JWLDM = FE0JW01.FF4FCTMO[FE0JWCOL]; /* Last disp mo*/
    end
    ;
    FE0JW00.FE0JWCOL = FE0JW00.FE0JWCOL + 1; /* Current column*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
    FE0JW00.FE0JWRSA = FE0JW00.FE0JWRSA + 1; /* Right scroll amount*/
    ;
  end
  ;
  ;
end // end FE0J221

// Check attention identifier
Function FE0J230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FE0JM002.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FE0I"; /* Return to application*/
      COMMAREA.CAITEM = "FE0JM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/
    ;
    FFWREC.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0J230

// Reset highlighted fields
Function FE0J240()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM002.FE0JWPAG initialAttributes; /* Page number*/
  ;
  set FE0JM002.CATOAP initialAttributes; /* TO application*/
  set FE0JM002.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FE0J240

// Verify the entered data
Function FE0J250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM002.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "250"; /* Module identification*/
    set FE0JM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page request*/
    FE0J251(); /* Verify page request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FE0J252(); /* Verify scroll request*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print request*/
    FE0J253(); /* Verify print request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FE0J254(); /* Verify M002 changed fields*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0J250

// Verify page request
Function FE0J251()
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM002.FE0JWPAG < 1 /* Less than minimum*/
   || FE0JM002.FE0JWPAG > 6) /* or greater than maximum*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FE0JM002.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/
    ;
  end
  ;
  ;
end // end FE0J251

// Verify scroll request
Function FE0J252()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0JW00.FE0JWBEG == 1)       /* and at minimum column*/
    ;
    FFWREC.XXXMODID = "252"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    ;
    if (FE0JW00.FE0JWEDM != 0)
      if (FE0JW00.FE0JWLDM == FE0JW00.FE0JWEDM) /* If no more data*/
        if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM"
         || FE0JW01.FE0JMMON[FE0JWCOL] == "     ")
          FFWREC.XXXMODID = "252"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end
    ;
    if (FE0JW00.FF2NSEAS == 1 /* One season per year*/
     && FE0JW00.FE0JWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "252"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FE0JW00.FE0JWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "252"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FE0JW00.FE0JWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "252"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FE0JW00.FE0JWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "252"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM002.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "252"; /* Module identification*/
    set FE0JM002.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J252

// Verify print request
Function FE0J253()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM002.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "253"; /* Module identification*/
    set FE0JM002.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J253

// Verify M002 changed fields
Function FE0J254()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM002.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "254"; /* Module identification*/
    set FE0JM002.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J254

// Process valid input request
Function FE0J260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page requested*/
    ;
    if (FE0JM002.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page specified*/
      ;
      if (FE0JM002.FE0JWPAG < FE0JW00.FE0JWPAG) /* Page backward*/
        ;
        FE0JW00.FE0JWPAD = -1; /* Page direction*/
      else
        FE0JW00.FE0JWPAD = +1; /* Page direction*/
        ;
      end
      ;
      FE0JW00.FE0JWPAG = FE0JM002.FE0JWPAG; /* Page number*/
      ;
    else
      ;
      FE0JW00.FE0JWPAG = FE0JW00.FE0JWPAG + FE0JW00.FE0JWPAD;
                                   /* Page number*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FE0JW00.FE0JWDIX = FE0JW00.FE0JWBEG - 1;
    FE0JW00.FE0JWLSA = 1;
    ;
    while (FE0JW00.FE0JWDIX > 0
     && FE0JW01.FE0JMBSF[FE0JWDIX] != "Y")
      FE0JW00.FE0JWLSA = FE0JW00.FE0JWLSA + 1;
      FE0JW00.FE0JWDIX = FE0JW00.FE0JWDIX - 1;
    end
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG - FE0JW00.FE0JWLSA;
    ;
    if (FE0JW00.FE0JWBEG < 1) /* Beginning LT minimum*/
      ;
      FE0JW00.FE0JWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "260"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG + FE0JW00.FE0JWRSA;
    ;
    if (FE0JW00.FE0JWCOL <= 60) /* columns not yet all obtained*/
      ;
      FE0J161(); /* check for 2nd or 3rd year*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print requested*/
    ;
    FE0J162(); /* Submit print request*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FE0J260

Function FE0J300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J320(); /* Format and display the map*/
  ;
  FE0J330(); /* Check attention identifier*/
  ;
  FE0J340(); /* Reset fields to normal intensity*/
  ;
  FE0J350(); /* Verify the entered data*/
  ;
  FE0J360(); /* Process valid input request*/
  ;
  ;
end // end FE0J300

// Format and converse the map
Function FE0J320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FE0JW00.FE0JWSWF == "Y") /* Map must be formatted*/
      FE0J321(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0JM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0JM003.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0JM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FE0JM003.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FE0JM003 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0JM003 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FE0JM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0JM003.CAITEM; /* Application data*/
  ;
  ;
end // end FE0J320

// Format the display data
Function FE0J321()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM003 initial; /* M001 input/output area*/
  ;
  FE0JW00.FE0JWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM003.FE0JWPAG = FE0JW00.FE0JWPAG; /* Page number*/
  ;
  FE0JM003.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0JM003.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
  ;
  FE0JM003.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0JM003.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  FE0JM003.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0JM003.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
  ;
  FE0JM003.FFQMBYMO = FE0JW01.FFQMBYMO; /* Main buy month*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWIXC = 1; /* Column index*/
  FE0JW00.FE0JWRSA = 0; /* Right scroll amount*/
  ;
  FE0JW00.FE0JWCOL = FE0JW00.FE0JWBEG; /* Beginning column*/
  FE0JW00.FE0JWEND = FE0JW00.FE0JWBEG + 7; /* Ending column*/
  ;
  while (FE0JW00.FE0JWIXC <= 8) /* Until end of map columns*/
    ;
    if (FE0JW00.FE0JWIXC == 1)
      FE0JW01.FE0JMBSF[FE0JWCOL] = "Y";
    else
      FE0JW01.FE0JMBSF[FE0JWCOL] = "N";
    end
    ;
    set FE0JM003.FE0JMMON[FE0JWIXC] skip; /* Forecast month*/
    ;
    FE0JM003.FE0JMMON[FE0JWIXC] = FE0JW01.FE0JMMON[FE0JWCOL];
    FE0JM003.FE0JMTDP[FE0JWIXC] = FE0JW03.FE0JMTDP[FE0JWCOL];
    FE0JM003.FE0JMTDA[FE0JWIXC] = FE0JW03.FE0JMTDA[FE0JWCOL];
    FE0JM003.FE0JMTDI[FE0JWIXC] = FE0JW03.FE0JMTDI[FE0JWCOL];
    FE0JM003.FE0JMTDC[FE0JWIXC] = FE0JW03.FE0JMTDC[FE0JWCOL];
    FE0JM003.FE0JMTDT[FE0JWIXC] = FE0JW03.FE0JMTDT[FE0JWCOL];
    FE0JM003.FE0JMCAP[FE0JWIXC] = FE0JW03.FE0JWCAP[FE0JWCOL];
    FE0JM003.FE0JMTAF[FE0JWIXC] = FE0JW03.FE0JMTAF[FE0JWCOL];
    FE0JM003.FE0JMTAP[FE0JWIXC] = FE0JW03.FE0JMTAP[FE0JWCOL];
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "  SUB" /**/
     && FE0JW00.FE0JWIXC <= 8                 /**/
     && FE0JW01.FE0JMSCT[FE0JWCOL] == 1)      /* first season*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM003.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM") /* ===> end of season data*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM003.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] != "     "
     && FE0JW01.FE0JMMON[FE0JWCOL] != "  SUB"
     && FE0JW01.FE0JMMON[FE0JWCOL] != "ACCUM")
      FE0JW00.FE0JWLDM = FE0JW01.FF4FCTMO[FE0JWCOL]; /* Last disp mo*/
    end
    ;
    FE0JW00.FE0JWCOL = FE0JW00.FE0JWCOL + 1; /* Current column*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
    FE0JW00.FE0JWRSA = FE0JW00.FE0JWRSA + 1; /* Column index*/
    ;
  end
  ;
  ;
end // end FE0J321

// Check attention identifier
Function FE0J330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM003.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FE0JM003.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FE0I"; /* Return to application*/
      COMMAREA.CAITEM = "FE0JM003"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/
    ;
    FFWREC.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0J330

// Reset highlighted fields
Function FE0J340()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM003.FE0JWPAG initialAttributes; /* Page number*/
  ;
  set FE0JM003.CATOAP initialAttributes; /* TO application*/
  set FE0JM003.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FE0J340

// Verify the entered data
Function FE0J350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM003.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "350"; /* Module identification*/
    set FE0JM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page request*/
    FE0J351(); /* Verify page request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FE0J352(); /* Verify scroll request*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print request*/
    FE0J353(); /* Verify print request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FE0J354(); /* Verify M003 changed fields*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0J350

// Verify page request
Function FE0J351()
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM003.FE0JWPAG < 1 /* Less than minimum*/
   || FE0JM003.FE0JWPAG > 6) /* or greater than maximum*/
    ;
    FFWREC.XXXMODID = "351"; /* Module identification*/
    set FE0JM003.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/
    ;
  end
  ;
  ;
end // end FE0J351

// Verify scroll request
Function FE0J352()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0JW00.FE0JWBEG == 1)       /* and at minimum column*/
    ;
    FFWREC.XXXMODID = "352"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    ;
    if (FE0JW00.FE0JWEDM != 0)
      if (FE0JW00.FE0JWLDM == FE0JW00.FE0JWEDM) /* If no more data*/
        if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM"
         || FE0JW01.FE0JMMON[FE0JWCOL] == "     ")
          FFWREC.XXXMODID = "352"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end
    ;
    if (FE0JW00.FF2NSEAS == 1 /* One season per year*/
     && FE0JW00.FE0JWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "352"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FE0JW00.FE0JWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "352"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FE0JW00.FE0JWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "352"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FE0JW00.FE0JWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "352"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM003.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "352"; /* Module identification*/
    set FE0JM003.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J352

// Verify print request
Function FE0J353()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM003.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "353"; /* Module identification*/
    set FE0JM003.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J353

// Verify M003 changed fields
Function FE0J354()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM003.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "354"; /* Module identification*/
    set FE0JM003.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J354

// Process valid input request
Function FE0J360()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page requested*/
    ;
    if (FE0JM003.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page specified*/
      ;
      if (FE0JM003.FE0JWPAG < FE0JW00.FE0JWPAG) /* Page backward*/
        ;
        FE0JW00.FE0JWPAD = -1; /* Page direction*/
      else
        FE0JW00.FE0JWPAD = +1; /* Page direction*/
        ;
      end
      ;
      FE0JW00.FE0JWPAG = FE0JM003.FE0JWPAG; /* Page number*/
      ;
    else
      ;
      FE0JW00.FE0JWPAG = FE0JW00.FE0JWPAG + FE0JW00.FE0JWPAD;
                                   /* Page number*/
      ;
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FE0JW00.FE0JWDIX = FE0JW00.FE0JWBEG - 1;
    FE0JW00.FE0JWLSA = 1;
    ;
    while (FE0JW00.FE0JWDIX > 0
     && FE0JW01.FE0JMBSF[FE0JWDIX] != "Y")
      FE0JW00.FE0JWLSA = FE0JW00.FE0JWLSA + 1;
      FE0JW00.FE0JWDIX = FE0JW00.FE0JWDIX - 1;
    end
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG - FE0JW00.FE0JWLSA;
    ;
    if (FE0JW00.FE0JWBEG < 1) /* Beginning LT minimum*/
      ;
      FE0JW00.FE0JWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "360"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/
      ;
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG + FE0JW00.FE0JWRSA;
    ;
    if (FE0JW00.FE0JWCOL <= 60) /* columns not yet all obtained*/
      ;
      FE0J161(); /* check for 2nd or 3rd year*/
      ;
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print requested*/
    ;
    FE0J162(); /* Submit print request*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FE0J360

Function FE0J400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J420(); /* Format and display the map*/
  ;
  FE0J430(); /* Check attention identifier*/
  ;
  FE0J440(); /* Reset fields to normal intensity*/
  ;
  FE0J450(); /* Verify the entered data*/
  ;
  FE0J460(); /* Process valid input request*/
  ;
  ;
end // end FE0J400

// Format and converse the map
Function FE0J420()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FE0JW00.FE0JWSWF == "Y") /* Map must be formatted*/
      FE0J421(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0JM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0JM004.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0JM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FE0JM004.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FE0JM004 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0JM004 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FE0JM004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0JM004.CAITEM; /* Application data*/
  ;
  ;
end // end FE0J420

// Format the display data
Function FE0J421()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM004 initial; /* M001 input/output area*/
  ;
  FE0JW00.FE0JWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM004.FE0JWPAG = FE0JW00.FE0JWPAG; /* Page number*/
  ;
  FE0JM004.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0JM004.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
  ;
  FE0JM004.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0JM004.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  FE0JM004.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0JM004.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
  ;
  FE0JM004.FFQMBYMO = FE0JW01.FFQMBYMO; /* Main buy month*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the future year indicator in the HIST FUT % line.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWLVL == "C"
   && FFWREC.YPGCD != "*")
    if (FF2REC.FF2ALCAT != "  ")
      FE0JM004.FE0JMFAI = "A"; /* Futr alt cat indicator*/
      FE0JM004.FE0JMPAI = "A"; /* Prop alt cat indicator*/
    end
  end
  ;
  FE0JM004.FF2FUIND = FE0JW04.FF2FUIND; /* Futr yr ind*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWIXC = 1; /* Column index*/
  FE0JW00.FE0JWRSA = 0; /* Right scroll amount*/
  ;
  FE0JW00.FE0JWCOL = FE0JW00.FE0JWBEG; /* Beginning column*/
  FE0JW00.FE0JWEND = FE0JW00.FE0JWBEG + 7; /* Ending column*/
  ;
  while (FE0JW00.FE0JWIXC <= 8) /* Until end of map columns*/
    ;
    if (FE0JW00.FE0JWIXC == 1)
      FE0JW01.FE0JMBSF[FE0JWCOL] = "Y";
    else
      FE0JW01.FE0JMBSF[FE0JWCOL] = "N";
    end
    ;
    set FE0JM004.FE0JMMON[FE0JWIXC] skip; /* Forecast month*/
    ;
    FE0JM004.FE0JMMON[FE0JWIXC] = FE0JW01.FE0JMMON[FE0JWCOL];
    FE0JM004.FE0JMDFU[FE0JWIXC] = FE0JW04.FE0JMDFU[FE0JWCOL];
    FE0JM004.FE0JMDNF[FE0JWIXC] = FE0JW04.FE0JMDNF[FE0JWCOL];
    FE0JM004.FE0JMDTF[FE0JWIXC] = FE0JW04.FE0JMDTF[FE0JWCOL];
    FE0JM004.FE0JMDPR[FE0JWIXC] = FE0JW04.FE0JMDPR[FE0JWCOL];
    FE0JM004.FE0JMDNP[FE0JWIXC] = FE0JW04.FE0JMDNP[FE0JWCOL];
    FE0JM004.FE0JMDTP[FE0JWIXC] = FE0JW04.FE0JMDTP[FE0JWCOL];
    FE0JM004.FE0JMDCP[FE0JWIXC] = FE0JW04.FE0JMDCP[FE0JWCOL];
    FE0JM004.FE0JMPCF[FE0JWIXC] = FE0JW04.FE0JMPCF[FE0JWCOL];
    FE0JM004.FE0JMPRF[FE0JWIXC] = FE0JW04.FE0JMPRF[FE0JWCOL];
    FE0JM004.FE0JMDFF[FE0JWIXC] = FE0JW04.FE0JWDFF[FE0JWCOL];
    FE0JM004.FE0JMDHF[FE0JWIXC] = FE0JW04.FE0JWDHF[FE0JWCOL];
    FE0JM004.FE0JMDFI[FE0JWIXC] = FE0JW04.FE0JWDFI[FE0JWCOL];
    FE0JM004.FE0JMDHI[FE0JWIXC] = FE0JW04.FE0JWDHI[FE0JWCOL];
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "  SUB" /**/
     && FE0JW00.FE0JWIXC <= 8                 /**/
     && FE0JW01.FE0JMSCT[FE0JWCOL] == 1)      /* first season*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM004.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM") /* ===> end of season data*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM004.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] != "     "
     && FE0JW01.FE0JMMON[FE0JWCOL] != "  SUB"
     && FE0JW01.FE0JMMON[FE0JWCOL] != "ACCUM")
      FE0JW00.FE0JWLDM = FE0JW01.FF4FCTMO[FE0JWCOL]; /* Last disp mo*/
    end
    ;
    FE0JW00.FE0JWCOL = FE0JW00.FE0JWCOL + 1; /* Current column*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
    FE0JW00.FE0JWRSA = FE0JW00.FE0JWRSA + 1; /* Right scroll amount*/
    ;
  end
  ;
  ;
end // end FE0J421

// Check attention identifier
Function FE0J430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM004.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FE0JM004.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "430"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* Return to application*/
      COMMAREA.CAITEM = "FE0JM004"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/
    ;
    FFWREC.XXXMODID = "430"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0J430

// Reset highlighted fields
Function FE0J440()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM004.FE0JWPAG initialAttributes; /* Page number*/
  ;
  set FE0JM004.CATOAP initialAttributes; /* TO application*/
  set FE0JM004.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FE0J440

// Verify the entered data
Function FE0J450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM004.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "450"; /* Module identification*/
    set FE0JM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page request*/
    FE0J451(); /* Verify page request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FE0J452(); /* Verify scroll request*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print request*/
    FE0J453(); /* Verify print request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FE0J454(); /* Verify M004 changed fields*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0J450

// Verify page request
Function FE0J451()
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM004.FE0JWPAG < 1 /* Less than minimum*/
   || FE0JM004.FE0JWPAG > 6) /* or greater than maximum*/
    ;
    FFWREC.XXXMODID = "451"; /* Module identification*/
    set FE0JM004.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/
    ;
  end
  ;
  ;
end // end FE0J451

// Verify scroll request
Function FE0J452()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0JW00.FE0JWBEG == 1)       /* and at minimum column*/
    ;
    FFWREC.XXXMODID = "452"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    ;
    if (FE0JW00.FE0JWEDM != 0)
      if (FE0JW00.FE0JWLDM == FE0JW00.FE0JWEDM) /* If no more data*/
        if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM"
         || FE0JW01.FE0JMMON[FE0JWCOL] == "     ")
          FFWREC.XXXMODID = "452"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end
    ;
    if (FE0JW00.FF2NSEAS == 1 /* One season per year*/
     && FE0JW00.FE0JWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "452"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FE0JW00.FE0JWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "452"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FE0JW00.FE0JWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "452"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FE0JW00.FE0JWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "452"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM004.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "452"; /* Module identification*/
    set FE0JM004.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J452

// Verify print request
Function FE0J453()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM004.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "453"; /* Module identification*/
    set FE0JM004.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J453

// Verify M004 changed fields
Function FE0J454()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM004.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "454"; /* Module identification*/
    set FE0JM004.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J454

// Process valid input request
Function FE0J460()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page requested*/
    ;
    if (FE0JM004.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page specified*/
      ;
      if (FE0JM004.FE0JWPAG < FE0JW00.FE0JWPAG) /* Page backward*/
        ;
        FE0JW00.FE0JWPAD = -1; /* Page direction*/
      else
        FE0JW00.FE0JWPAD = +1; /* Page direction*/
        ;
      end
      ;
      FE0JW00.FE0JWPAG = FE0JM004.FE0JWPAG; /* Page number*/
      ;
    else
      ;
      FE0JW00.FE0JWPAG = FE0JW00.FE0JWPAG + FE0JW00.FE0JWPAD;
                                   /* Page number*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FE0JW00.FE0JWDIX = FE0JW00.FE0JWBEG - 1;
    FE0JW00.FE0JWLSA = 1;
    ;
    while (FE0JW00.FE0JWDIX > 0
     && FE0JW01.FE0JMBSF[FE0JWDIX] != "Y")
      FE0JW00.FE0JWLSA = FE0JW00.FE0JWLSA + 1;
      FE0JW00.FE0JWDIX = FE0JW00.FE0JWDIX - 1;
    end
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG - FE0JW00.FE0JWLSA;
    ;
    if (FE0JW00.FE0JWBEG < 1) /* Beginning LT minimum*/
      ;
      FE0JW00.FE0JWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "460"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG + FE0JW00.FE0JWRSA;
    ;
    if (FE0JW00.FE0JWCOL <= 60) /* columns not yet all obtained*/
      ;
      FE0J161(); /* check for 2nd or 3rd year*/
      ;
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print requested*/
    ;
    FE0J162(); /* Submit print request*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FE0J460

Function FE0J500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J520(); /* Format and display the map*/
  ;
  FE0J530(); /* Check attention identifier*/
  ;
  FE0J540(); /* Reset fields to normal intensity*/
  ;
  FE0J550(); /* Verify the entered data*/
  ;
  FE0J560(); /* Process valid input request*/
  ;
  ;
end // end FE0J500

// Format and converse the map
Function FE0J520()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FE0JW00.FE0JWSWF == "Y") /* Map must be formatted*/
      FE0J521(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0JM005.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0JM005.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0JM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FE0JM005.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FE0JM005 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0JM005 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FE0JM005.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0JM005.CAITEM; /* Application data*/
  ;
  ;
end // end FE0J520

// Format the display data
Function FE0J521()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM005 initial; /* M001 input/output area*/
  ;
  FE0JW00.FE0JWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM005.FE0JWPAG = FE0JW00.FE0JWPAG; /* Page number*/
  ;
  FE0JM005.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0JM005.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
  ;
  FE0JM005.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0JM005.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  FE0JM005.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0JM005.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
  ;
  FE0JM005.FFQMBYMO = FE0JW01.FFQMBYMO; /* Main buy month*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the demand year indicator in the HIST SEAS IDX line.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWLVL == "C"
   && FFWREC.YPGCD != "*")
    if (FF2REC.FF2ALCAT != "  ")
      FE0JM005.FE0JMDAI = "A"; /* Dmd alt cat indicator*/
    end
  end
  ;
  FE0JM005.FF2DMIND = FE0JW05.FF2DMIND; /* Dmd yr ind*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWIXC = 1; /* Column index*/
  FE0JW00.FE0JWRSA = 0; /* Right scroll amount*/
  ;
  FE0JW00.FE0JWCOL = FE0JW00.FE0JWBEG; /* Beginning column*/
  FE0JW00.FE0JWEND = FE0JW00.FE0JWBEG + 7; /* Ending column*/
  ;
  while (FE0JW00.FE0JWIXC <= 8) /* Until end of map columns*/
    ;
    if (FE0JW00.FE0JWIXC == 1)
      FE0JW01.FE0JMBSF[FE0JWCOL] = "Y";
    else
      FE0JW01.FE0JMBSF[FE0JWCOL] = "N";
    end
    ;
    set FE0JM005.FE0JMMON[FE0JWIXC] skip; /* Forecast month*/
    ;
    FE0JM005.FE0JMMON[FE0JWIXC] = FE0JW01.FE0JMMON[FE0JWCOL];
    FE0JM005.FE0JMFCD[FE0JWIXC] = FE0JW05.FE0JMFCD[FE0JWCOL];
    FE0JM005.FE0JMMDM[FE0JWIXC] = FE0JW05.FE0JMMDM[FE0JWCOL];
    FE0JM005.FE0JMFSI[FE0JWIXC] = FE0JW05.FE0JWFSI[FE0JWCOL];
    FE0JM005.FE0JMHSI[FE0JWIXC] = FE0JW05.FE0JWHSI[FE0JWCOL];
    FE0JM005.FE0JMRSI[FE0JWIXC] = FE0JW05.FE0JWRSI[FE0JWCOL];
    FE0JM005.FE0JMFFR[FE0JWIXC] = FE0JW05.FE0JMFFR[FE0JWCOL];
    FE0JM005.FE0JMHFR[FE0JWIXC] = FE0JW05.FE0JWHFR[FE0JWCOL];
    FE0JM005.FE0JMCSF[FE0JWIXC] = FE0JW05.FE0JMCSF[FE0JWCOL];
    FE0JM005.FE0JMMSL[FE0JWIXC] = FE0JW05.FE0JMMSL[FE0JWCOL];
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "  SUB" /**/
     && FE0JW00.FE0JWIXC <= 8                 /**/
     && FE0JW01.FE0JMSCT[FE0JWCOL] == 1)      /* first season*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM005.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM") /* ===> end of season data*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM005.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] != "     "
     && FE0JW01.FE0JMMON[FE0JWCOL] != "  SUB"
     && FE0JW01.FE0JMMON[FE0JWCOL] != "ACCUM")
      FE0JW00.FE0JWLDM = FE0JW01.FF4FCTMO[FE0JWCOL]; /* Last disp mo*/
    end
    ;
    FE0JW00.FE0JWCOL = FE0JW00.FE0JWCOL + 1; /* Current column*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
    FE0JW00.FE0JWRSA = FE0JW00.FE0JWRSA + 1; /* Right scroll amount*/
    ;
  end
  ;
  ;
end // end FE0J521

// Check attention identifier
Function FE0J530()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM005.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FE0JM005.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* Return to application*/
      COMMAREA.CAITEM = "FE0JM005"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/
    ;
    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0J530

// Reset highlighted fields
Function FE0J540()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM005.FE0JWPAG initialAttributes; /* Page number*/
  ;
  set FE0JM005.CATOAP initialAttributes; /* TO application*/
  set FE0JM005.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FE0J540

// Verify the entered data
Function FE0J550()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM005.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "550"; /* Module identification*/
    set FE0JM005.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page request*/
    FE0J551(); /* Verify page request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FE0J552(); /* Verify scroll request*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print request*/
    FE0J553(); /* Verify print request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FE0J554(); /* Verify M005 changed fields*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0J550

// Verify page request
Function FE0J551()
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM005.FE0JWPAG < 1 /* Less than minimum*/
   || FE0JM005.FE0JWPAG > 6) /* or greater than maximum*/
    ;
    FFWREC.XXXMODID = "551"; /* Module identification*/
    set FE0JM005.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/
    ;
  end
  ;
  ;
end // end FE0J551

// Verify scroll request
Function FE0J552()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0JW00.FE0JWBEG == 1)       /* and at minimum column*/
    ;
    FFWREC.XXXMODID = "552"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    ;
    if (FE0JW00.FE0JWEDM != 0)
      if (FE0JW00.FE0JWLDM == FE0JW00.FE0JWEDM) /* If no more data*/
        if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM"
         || FE0JW01.FE0JMMON[FE0JWCOL] == "     ")
          FFWREC.XXXMODID = "552"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end
    ;
    if (FE0JW00.FF2NSEAS == 1 /* One season per year*/
     && FE0JW00.FE0JWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "552"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FE0JW00.FE0JWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "552"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FE0JW00.FE0JWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "552"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FE0JW00.FE0JWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "552"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM005.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "552"; /* Module identification*/
    set FE0JM005.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J552

// Verify print request
Function FE0J553()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM005.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "553"; /* Module identification*/
    set FE0JM005.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J553

// Verify M005 changed fields
Function FE0J554()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM005.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "554"; /* Module identification*/
    set FE0JM005.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J554

// Process valid input request
Function FE0J560()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page requested*/
    ;
    if (FE0JM005.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page specified*/
      ;
      if (FE0JM005.FE0JWPAG < FE0JW00.FE0JWPAG) /* Page backward*/
        ;
        FE0JW00.FE0JWPAD = -1; /* Page direction*/
      else
        FE0JW00.FE0JWPAD = +1; /* Page direction*/
        ;
      end
      ;
      FE0JW00.FE0JWPAG = FE0JM005.FE0JWPAG; /* Page number*/
      ;
    else
      ;
      FE0JW00.FE0JWPAG = FE0JW00.FE0JWPAG + FE0JW00.FE0JWPAD;
                                   /* Page number*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FE0JW00.FE0JWDIX = FE0JW00.FE0JWBEG - 1;
    FE0JW00.FE0JWLSA = 1;
    ;
    while (FE0JW00.FE0JWDIX > 0
     && FE0JW01.FE0JMBSF[FE0JWDIX] != "Y")
      FE0JW00.FE0JWLSA = FE0JW00.FE0JWLSA + 1;
      FE0JW00.FE0JWDIX = FE0JW00.FE0JWDIX - 1;
    end
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG - FE0JW00.FE0JWLSA;
    ;
    if (FE0JW00.FE0JWBEG < 1) /* Beginning LT minimum*/
      ;
      FE0JW00.FE0JWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "560"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG + FE0JW00.FE0JWRSA;
    ;
    if (FE0JW00.FE0JWCOL <= 60) /* columns not yet all obtained*/
      ;
      FE0J161(); /* check for 2nd or 3rd year*/
      ;
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print requested*/
    ;
    FE0J162(); /* Submit print request*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FE0J560

Function FE0J600()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0J620(); /* Format and display the map*/
  ;
  FE0J630(); /* Check attention identifier*/
  ;
  FE0J640(); /* Reset fields to normal intensity*/
  ;
  FE0J650(); /* Verify the entered data*/
  ;
  FE0J660(); /* Process valid input request*/
  ;
  ;
end // end FE0J600

// Format and converse the map
Function FE0J620()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FE0JW00.FE0JWSWF == "Y") /* Map must be formatted*/
      FE0J621(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0JM006.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0JM006.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FE0JM006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FE0JM006.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FE0JM006 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0JM006 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FE0JM006.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0JM006.CAITEM; /* Application data*/
  ;
  ;
end // end FE0J620

// Format the display data
Function FE0J621()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM006 initial; /* M001 input/output area*/
  ;
  FE0JW00.FE0JWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JM006.FE0JWPAG = FE0JW00.FE0JWPAG; /* Page number*/
  ;
  FE0JM006.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FE0JM006.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
  ;
  FE0JM006.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FE0JM006.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  FE0JM006.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FE0JM006.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
  ;
  FE0JM006.FFQMBYMO = FE0JW01.FFQMBYMO; /* Main buy month*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWIXC = 1; /* Column index*/
  FE0JW00.FE0JWRSA = 0; /* Right scroll amount*/
  ;
  FE0JW00.FE0JWCOL = FE0JW00.FE0JWBEG; /* Beginning column*/
  FE0JW00.FE0JWEND = FE0JW00.FE0JWBEG + 7; /* Ending column*/
  ;
  while (FE0JW00.FE0JWIXC <= 8) /* Until end of map columns*/
    ;
    if (FE0JW00.FE0JWIXC == 1)
      FE0JW01.FE0JMBSF[FE0JWCOL] = "Y";
    else
      FE0JW01.FE0JMBSF[FE0JWCOL] = "N";
    end
    ;
    set FE0JM006.FE0JMMON[FE0JWIXC] skip; /* Forecast month*/
    ;
    FE0JM006.FE0JMMON[FE0JWIXC] = FE0JW01.FE0JMMON[FE0JWCOL];
    FE0JM006.FE0JMCSF[FE0JWIXC] = FE0JW05.FE0JMCSF[FE0JWCOL];
    FE0JM006.FE0JMMSL[FE0JWIXC] = FE0JW05.FE0JMMSL[FE0JWCOL];
    FE0JM006.FE0JMDUE[FE0JWIXC] = FE0JW06.FE0JMDUE[FE0JWCOL];
    FE0JM006.FE0JMQBY[FE0JWIXC] = FE0JW06.FE0JMQBY[FE0JWCOL];
    FE0JM006.FE0JMTBY[FE0JWIXC] = FE0JW06.FE0JMTBY[FE0JWCOL];
    FE0JM006.FE0JMBAL[FE0JWIXC] = FE0JW06.FE0JMBAL[FE0JWCOL];
    FE0JM006.FE0JMSBY[FE0JWIXC] = FE0JW06.FE0JMSBY[FE0JWCOL];
    FE0JM006.FE0JMFCT[FE0JWIXC] = FE0JW06.FE0JMFCT[FE0JWCOL];
    FE0JM006.FE0JMTUR[FE0JWIXC] = FE0JW06.FE0JWTUR[FE0JWCOL];
    FE0JM006.FE0JMDIR[FE0JWIXC] = FE0JW06.FE0JMDIR[FE0JWCOL];
    FE0JM006.FE0JMNIL[FE0JWIXC] = FE0JW06.FE0JMNIL[FE0JWCOL];
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "  SUB" /* Season subtotal*/
     || FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM") /* or accum total*/
      ;
       /* NEXT SENTENCE*/
      ;
    else
      ;
      FE0JM006.FE0JMINB[FE0JWIXC] = FE0JW06.FE0JMINB[FE0JWCOL];
      FE0JM006.FE0JMSUP[FE0JWIXC] = FE0JW06.FE0JMSUP[FE0JWCOL];
      FE0JM006.FE0JMINE[FE0JWIXC] = FE0JW06.FE0JMINE[FE0JWCOL];
      FE0JM006.FE0JMSTK[FE0JWIXC] = FE0JW06.FE0JMSTK[FE0JWCOL];
      ;
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "  SUB" /**/
     && FE0JW00.FE0JWIXC <= 8                 /**/
     && FE0JW01.FE0JMSCT[FE0JWCOL] == 1)      /* first season*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM006.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM") /* ===> end of season data*/
      FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      while (FE0JW00.FE0JWIXC <= 8) /* Column index*/
        set FE0JM006.FE0JMMON[FE0JWIXC] skip, invisible; /* Forecast month*/
        FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
      end
    end
    ;
    if (FE0JW01.FE0JMMON[FE0JWCOL] != "     "
     && FE0JW01.FE0JMMON[FE0JWCOL] != "  SUB"
     && FE0JW01.FE0JMMON[FE0JWCOL] != "ACCUM")
      FE0JW00.FE0JWLDM = FE0JW01.FF4FCTMO[FE0JWCOL]; /* Last disp mo*/
    end
    ;
    FE0JW00.FE0JWCOL = FE0JW00.FE0JWCOL + 1; /* Current column*/
    FE0JW00.FE0JWIXC = FE0JW00.FE0JWIXC + 1; /* Column index*/
    FE0JW00.FE0JWRSA = FE0JW00.FE0JWRSA + 1; /* Right scroll amount*/
    ;
  end
  ;
  ;
end // end FE0J621

// Check attention identifier
Function FE0J630()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM006.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FE0JM006.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "630"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* Return to application*/
      COMMAREA.CAITEM = "FE0JM006"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/
    ;
    FFWREC.XXXMODID = "630"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0J630

// Reset highlighted fields
Function FE0J640()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JM006.FE0JWPAG initialAttributes; /* Page number*/
  ;
  set FE0JM006.CATOAP initialAttributes; /* TO application*/
  set FE0JM006.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FE0J640

// Verify the entered data
Function FE0J650()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM006.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "650"; /* Module identification*/
    set FE0JM006.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page request*/
    FE0J651(); /* Verify page request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FE0J652(); /* Verify scroll request*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print request*/
    FE0J653(); /* Verify print request*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FE0J654(); /* Verify M006 changed fields*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0J650

// Verify page request
Function FE0J651()
   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM006.FE0JWPAG < 1 /* Less than minimum*/
   || FE0JM006.FE0JWPAG > 6) /* or greater than maximum*/
    ;
    FFWREC.XXXMODID = "651"; /* Module identification*/
    set FE0JM006.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/
    ;
  end
  ;
  ;
end // end FE0J651

// Verify scroll request
Function FE0J652()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FE0JW00.FE0JWBEG == 1)       /* and at minimum column*/
    ;
    FFWREC.XXXMODID = "652"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    ;
    if (FE0JW00.FE0JWEDM != 0)
      if (FE0JW00.FE0JWLDM == FE0JW00.FE0JWEDM) /* If no more data*/
        if (FE0JW01.FE0JMMON[FE0JWCOL] == "ACCUM"
         || FE0JW01.FE0JMMON[FE0JWCOL] == "     ")
          FFWREC.XXXMODID = "652"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end
    ;
    if (FE0JW00.FF2NSEAS == 1 /* One season per year*/
     && FE0JW00.FE0JWCOL > 42) /* and at max column*/
      FFWREC.XXXMODID = "652"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 2 /* Two seasons per year*/
     && FE0JW00.FE0JWCOL > 48) /* and at max column*/
      FFWREC.XXXMODID = "652"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 3 /* Three seasons per year*/
     && FE0JW00.FE0JWCOL > 54) /* and at max column*/
      FFWREC.XXXMODID = "652"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    if (FE0JW00.FF2NSEAS == 4 /* Four seasons per year*/
     && FE0JW00.FE0JWCOL > 60) /* and at max column*/
      FFWREC.XXXMODID = "652"; /* Module identification*/
      converseLib.validationFailed(24); /* Unable to scroll right*/
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM006.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "652"; /* Module identification*/
    set FE0JM006.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J652

// Verify print request
Function FE0J653()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM006.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "653"; /* Module identification*/
    set FE0JM006.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J653

// Verify M006 changed fields
Function FE0J654()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JM006.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page was changed*/
    ;
    FFWREC.XXXMODID = "654"; /* Module identification*/
    set FE0JM006.FE0JWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0J654

// Process valid input request
Function FE0J660()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Page requested*/
    ;
    FE0JW00.FE0JWPAD = -1; /* Page direction*/
    ;
    if (FE0JM006.FE0JWPAG != FE0JW00.FE0JWPAG) /* Page specified*/
      ;
      FE0JW00.FE0JWPAG = FE0JM006.FE0JWPAG; /* Page number*/
    else
      FE0JW00.FE0JWPAG = FE0JW00.FE0JWPAG + FE0JW00.FE0JWPAD;
                                   /* Page number*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FE0JW00.FE0JWDIX = FE0JW00.FE0JWBEG - 1;
    FE0JW00.FE0JWLSA = 1;
    ;
    while (FE0JW00.FE0JWDIX > 0
     && FE0JW01.FE0JMBSF[FE0JWDIX] != "Y")
      FE0JW00.FE0JWLSA = FE0JW00.FE0JWLSA + 1;
      FE0JW00.FE0JWDIX = FE0JW00.FE0JWDIX - 1;
    end
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG - FE0JW00.FE0JWLSA;
    ;
    if (FE0JW00.FE0JWBEG < 1) /* Beginning LT minimum*/
      ;
      FE0JW00.FE0JWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "660"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FE0JW00.FE0JWBEG = FE0JW00.FE0JWBEG + FE0JW00.FE0JWRSA;
    ;
    if (FE0JW00.FE0JWCOL <= 60) /* columns not yet all obtained*/
      ;
      FE0J161(); /* check for 2nd or 3rd year*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Print requested*/
    ;
    FE0J162(); /* Submit print request*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FE0J660

// Calculate months in seasons
Function FE0JS01()
   /* ---------------------------------------------------------------------*/
   /* Calculate number of months in each season.*/
   /* ---------------------------------------------------------------------*/
  ;
  while (FE0JW00.FE0JWDAT <= FE0JW00.FE0JWEMO[FE0JWSIX])
    FE0JW00.FE0JWMSC = FE0JW00.FE0JWMSC + 1;
    FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM + 1;
    if (FE0JW00.FE0JWDMM > 12)
      FE0JW00.FE0JWDMM = 01;
      FE0JW00.FE0JWDAT = FE0JW00.FE0JWDAT + 100;
    end
  end
  ;
  FE0JW00.FE0JWMIS[FE0JWSIX] = FE0JW00.FE0JWMSC;
  FE0JW00.FE0JWMSC = 0;
  FE0JW00.FE0JWSIX = FE0JW00.FE0JWSIX + 1; /* Season index*/
  ;
  ;
end // end FE0JS01

// Sum dom typgrp fcst
Function FE0JS02()
   /* ------------------------------------------------------------*/
   /* Summarize the rows from the category by month master table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF7REC.FF4FCTMO = FFRREC.FF4FCTMO; /* Forecast month*/
  ;
  try
    call "FF2940" ("S2", SQLCA, FF7REC, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If call was successful, return to the calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    converseLib.validationFailed(47); /* Data in use by another*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "SUM DOM TYPGRP FORECAST   ";
    TAEREC.TAEDESC1 = "SUBROUTINE FF2940 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/
    ;
  end
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  converseLib.validationFailed(1); /* Unexpected error occurred*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS02

// Sum NIL typgrp pfcst
Function FE0JS06()
   /* ------------------------------------------------------------*/
   /* Summarize the rows from the month master by category table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.YSMXDV = "20"; /* Division group code*/
  FF7REC.XCTCD = "*"; /* Foreign country code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF7REC.FF4FCTMO = FFRREC.FF4FCTMO; /* Forecast month*/
  ;
  try
    call "FF2940" ("S2", SQLCA, FF7REC, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If call was successful, return to the calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "S06"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    converseLib.validationFailed(47); /* Data in use by another*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "SUM NIL TYPGRP FCST  ";
    TAEREC.TAEDESC1 = "SUBROUTINE FF2940 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/
    ;
  end
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  converseLib.validationFailed(1); /* Unexpected error occurred*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS06

// Sum typgrp ivc/ord qtys
Function FE0JS10()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH4REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = "*"; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "FT"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS10"; /* Calling process*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHIN = FH4REC.FH2SHP; /* Invoiced qty*/
  ;
  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FE0JW00.FE0JWHOR = FH4REC.FH2SHP + FH4REC.FH1PAQTY; /* Ordered qty*/
    FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH1ALQTY;
    FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH3CNCL;
  else
    FE0JW00.FE0JWHOR = FH4REC.FH-FRZ-PRAL-QTY +                       FH4REC.FH-FRZ-ALOC-QTY +                       FH4REC.FH-FRZ-SHP-QTY +                       FH4REC.FH-FRZ-CNCL-QTY;
  end
  ;
  if (FE0JW00.FE0JWCOL > 1)
    FE0JW07.FE0JWHIN = FE0JW07.FE0JWHIN + FE0JW00.FE0JWHIN;
    FE0JW07.FE0JWHOR = FE0JW07.FE0JWHOR + FE0JW00.FE0JWHOR;
    FE0JW08.FE0JWHIN = FE0JW08.FE0JWHIN + FE0JW00.FE0JWHIN;
    FE0JW08.FE0JWHOR = FE0JW08.FE0JWHOR + FE0JW00.FE0JWHOR;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH4REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = "*"; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "PR"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS10"; /* Calling process*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHIN = FE0JW00.FE0JWHIN + FH4REC.FH2SHP; /* Invoiced qty*/
  ;
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH2SHP; /* Ordered qty*/
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH1PAQTY;
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH1ALQTY;
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH3CNCL;
  ;
  if (FE0JW00.FE0JWCOL > 1)
    FE0JW07.FE0JWHIN = FE0JW07.FE0JWHIN + FH4REC.FH2SHP;
    FE0JW07.FE0JWHOR = FE0JW07.FE0JWHOR + FH4REC.FH2SHP + FH4REC.FH1PAQTY                     + FH4REC.FH1ALQTY + FH4REC.FH3CNCL;
    FE0JW08.FE0JWHIN = FE0JW08.FE0JWHIN + FH4REC.FH2SHP;
    FE0JW08.FE0JWHOR = FE0JW08.FE0JWHOR + FH4REC.FH2SHP + FH4REC.FH1PAQTY                     + FH4REC.FH1ALQTY + FH4REC.FH3CNCL;
  end
  ;
end // end FE0JS10

// Sum typgrp 1 yr ago hist
Function FE0JS12()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH4REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = "*"; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "FT"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS12"; /* Calling process*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical futures quantity.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FE0JW00.FE0JWHFU = FH4REC.FH2SHP + FH4REC.FH1PAQTY; /* Hist futr qty*/
    FE0JW00.FE0JWHFU = FE0JW00.FE0JWHFU + FH4REC.FH1ALQTY;
    FE0JW00.FE0JWHFU = FE0JW00.FE0JWHFU + FH4REC.FH3CNCL;
  else
    FE0JW00.FE0JWHFU = FH4REC.FH-FRZ-PRAL-QTY +                       FH4REC.FH-FRZ-ALOC-QTY +                       FH4REC.FH-FRZ-SHP-QTY +                       FH4REC.FH-FRZ-CNCL-QTY;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH4REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = "*"; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "PR"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS12"; /* Calling process*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHPR = FH4REC.FH2SHP + FH4REC.FH1PAQTY; /* Hist prop qty*/
  FE0JW00.FE0JWHPR = FE0JW00.FE0JWHPR + FH4REC.FH1ALQTY;
  FE0JW00.FE0JWHPR = FE0JW00.FE0JWHPR + FH4REC.FH3CNCL;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHDM = FE0JW00.FE0JWHFU + FE0JW00.FE0JWHPR;
                                   /* Hist demand qty*/
  ;
  ;
end // end FE0JS12

// Sum typgrp ship history
Function FE0JS14()
   /* ------------------------------------------------------------*/
   /* Sum quantities in shipment history by line table.*/
   /* ------------------------------------------------------------*/
  ;
  set FHAREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/
  ;
  FHAREC.XDVCD = "10"; /* Division group code*/
  FHAREC.XCTCD = "USA"; /* Foreign country code*/
  FHAREC.XPLCD = "*"; /* PRODUCT LINE CODE*/
  FHAREC.YSMXOT = "*"; /* Order type group code*/
  FHAREC.XDSCD = "*"; /* Direct ship code*/
  FHAREC.XQACD = "01"; /* Quality code*/
  FHAREC.XLCCD = "10"; /* Life cycle code*/
  FHAREC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS14"; /* Calling process*/
  ;
  XSFFS55(); /* Summarize VLNSHP01 quantities*/
  ;
  ;
end // end FE0JS14

// Sum next 3mos sales forecast
Function FE0JS16()
  ;
   /* ------------------------------------------------------------*/
   /* Sum balance to ship on frozen master worksheet to get*/
   /* next 3 months master sales forecast.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0JW10 empty; /* set fe0jw10 empty*/
  set FE0JW11 empty; /* set ffrrec empty*/
  ;
  FE0JW00.FE0JWDAT = FFRREC.FF4FCTMO; /* Forecast month*/
  FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM + 1; /* Beginning month*/
  if (FE0JW00.FE0JWDMM > 12) /* Month GT maximum*/
    FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM - 12; /* Decrement month*/
    FE0JW00.FE0JWDYY = FE0JW00.FE0JWDYY + 1; /* Increment year*/
  end
  FE0JW11.FF4FCTMO = FE0JW00.FE0JWDAT; /* Beginning month*/
  ;
  FE0JW00.FE0JWDAT = FFRREC.FF4FCTMO; /* Forecast month*/
  FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM + 3; /* Ending month*/
  if (FE0JW00.FE0JWDMM > 12) /* Month GT maximum*/
    FE0JW00.FE0JWDMM = FE0JW00.FE0JWDMM - 12; /* Decrement month*/
    FE0JW00.FE0JWDYY = FE0JW00.FE0JWDYY + 1; /* Increment year*/
  end
  FE0JW10.FFAENDMO = FE0JW00.FE0JWDAT; /* Ending month*/
  ;
  FE0JW10.XWSCD = "07"; /* Worksheet type code*/
  ;
  if (FFWREC.XPCCD == " ") /* No product category*/
    FE0JW10.XPCCD = "*"; /* All product categorys*/
  else
    FE0JW10.XPCCD = FFWREC.XPCCD; /* One product category*/
  end
  ;
  if (FFWREC.XPLCD == " ") /* No product line*/
    FE0JW10.XPLCD = "*"; /* All product lines*/
  else
    FE0JW10.XPLCD = FFWREC.XPLCD; /* One product line*/
  end
  ;
  if (FFWREC.YPGCD == " ") /* No type group*/
    FE0JW10.YPGCD = "*"; /* All type groups*/
  else
    FE0JW10.YPGCD = FFWREC.YPGCD; /* One type group*/
  end
  ;
  try
    call "FF2930" ("SU", SQLCA, FE0JW10, FE0JW11) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0    /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == -305 /* or not found*/
    )                              
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S16"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FE0JW10.FFQKEY2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FE0JS16

// Sum dom line fcst
Function FE0JS20()
   /* ------------------------------------------------------------*/
   /* Summarize the rows from the category by month master table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPLCD; /* Product line code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF7REC.FF4FCTMO = FFRREC.FF4FCTMO; /* Forecast month*/
  ;
  try
    call "FF2940" ("SS", SQLCA, FF7REC, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If call was successful, return to the calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "S20"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    converseLib.validationFailed(47); /* Data in use by another*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "SUM DOMESTIC LINE FORECAST";
    TAEREC.TAEDESC1 = "SUBROUTINE FF2940 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/
    ;
  end
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  converseLib.validationFailed(1); /* Unexpected error occurred*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS20

// Sum NIL line pfcst
Function FE0JS22()
   /* ------------------------------------------------------------*/
   /* Summarize the rows from the month master by category table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.YSMXDV = "20"; /* Division group code*/
  FF7REC.XCTCD = "*"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPLCD; /* Product line code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF7REC.FF4FCTMO = FFRREC.FF4FCTMO; /* Forecast month*/
  ;
  try
    call "FF2940" ("SS", SQLCA, FF7REC, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If call was successful, return to the calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "S22"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    converseLib.validationFailed(47); /* Data in use by another*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "SUM NIL LINE FORECAST";
    TAEREC.TAEDESC1 = "SUBROUTINE FF2940 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/
    ;
  end
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  converseLib.validationFailed(1); /* Unexpected error occurred*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS22

// Sum line ivc/ord qtys
Function FE0JS26()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH4REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "FT"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS26"; /* Calling process*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHIN = FH4REC.FH2SHP; /* Invoiced qty*/
  ;
  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FE0JW00.FE0JWHOR = FH4REC.FH2SHP + FH4REC.FH1PAQTY; /* Ordered qty*/
    FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH1ALQTY;
    FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH3CNCL;
  else
    FE0JW00.FE0JWHOR = FH4REC.FH-FRZ-PRAL-QTY +                       FH4REC.FH-FRZ-ALOC-QTY +                       FH4REC.FH-FRZ-SHP-QTY +                       FH4REC.FH-FRZ-CNCL-QTY;
  end
  ;
  if (FE0JW00.FE0JWCOL > 1)
    FE0JW07.FE0JWHIN = FE0JW07.FE0JWHIN + FE0JW00.FE0JWHIN;
    FE0JW07.FE0JWHOR = FE0JW07.FE0JWHOR + FE0JW00.FE0JWHOR;
    FE0JW08.FE0JWHIN = FE0JW08.FE0JWHIN + FE0JW00.FE0JWHIN;
    FE0JW08.FE0JWHOR = FE0JW08.FE0JWHOR + FE0JW00.FE0JWHOR;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH4REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "PR"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS26"; /* Calling process*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHIN = FE0JW00.FE0JWHIN + FH4REC.FH2SHP; /* Invoiced qty*/
  ;
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH2SHP; /* Ordered qty*/
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH1PAQTY;
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH1ALQTY;
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH4REC.FH3CNCL;
  ;
  if (FE0JW00.FE0JWCOL > 1)
    FE0JW07.FE0JWHIN = FE0JW07.FE0JWHIN + FH4REC.FH2SHP;
    FE0JW07.FE0JWHOR = FE0JW07.FE0JWHOR + FH4REC.FH2SHP + FH4REC.FH1PAQTY     + FH4REC.FH1ALQTY + FH4REC.FH3CNCL;
    FE0JW08.FE0JWHIN = FE0JW08.FE0JWHIN + FH4REC.FH2SHP;
    FE0JW08.FE0JWHOR = FE0JW08.FE0JWHOR + FH4REC.FH2SHP + FH4REC.FH1PAQTY     + FH4REC.FH1ALQTY + FH4REC.FH3CNCL;
  end
  ;
  ;
end // end FE0JS26

// Sum one year ago line hist
Function FE0JS28()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH4REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "FT"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS28"; /* Calling process*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical futures quantity.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FE0JW00.FE0JWHFU = FH4REC.FH2SHP + FH4REC.FH1PAQTY; /* Hist futr qty*/
    FE0JW00.FE0JWHFU = FE0JW00.FE0JWHFU + FH4REC.FH1ALQTY;
    FE0JW00.FE0JWHFU = FE0JW00.FE0JWHFU + FH4REC.FH3CNCL;
  else
    FE0JW00.FE0JWHFU = FH4REC.FH-FRZ-PRAL-QTY +                       FH4REC.FH-FRZ-ALOC-QTY +                       FH4REC.FH-FRZ-SHP-QTY +                       FH4REC.FH-FRZ-CNCL-QTY;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH4REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "PR"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS28"; /* Calling process*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHPR = FH4REC.FH2SHP + FH4REC.FH1PAQTY; /* Hist prop qty*/
  FE0JW00.FE0JWHPR = FE0JW00.FE0JWHPR + FH4REC.FH1ALQTY;
  FE0JW00.FE0JWHPR = FE0JW00.FE0JWHPR + FH4REC.FH3CNCL;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHDM = FE0JW00.FE0JWHFU + FE0JW00.FE0JWHPR; /* Hist dmd qty*/
  ;
  ;
end // end FE0JS28

// Sum line shipment history
Function FE0JS30()
   /* ------------------------------------------------------------*/
   /* Sum quantities in shipment history by line table.*/
   /* ------------------------------------------------------------*/
  ;
  set FHAREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/
  ;
  FHAREC.XDVCD = "10"; /* Division group code*/
  FHAREC.XCTCD = "USA"; /* Foreign country code*/
  FHAREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FHAREC.YSMXOT = "*"; /* Order type group code*/
  FHAREC.XDSCD = "*"; /* Direct ship code*/
  FHAREC.XQACD = "01"; /* Quality code*/
  FHAREC.XLCCD = "10"; /* Life cycle code*/
  FHAREC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS30"; /* Calling process*/
  ;
  XSFFS55(); /* Summarize VLNSHP01 quantities*/
  ;
  ;
end // end FE0JS30

// Get actual planned recpts DOM
Function FE0JS31()
   /* ------------------------------------------------------------*/
   /* Obtain actual planned receipts from DFHIST.VWHCAT01*/
   /* ------------------------------------------------------------*/
  FE0JW00.FE0JWSW2 = "N"; /* end of cursor flag*/
  FF7REC.FF6PRFCT = 0; /* 0 prod fcst field*/
  if (FFWREC.XPLCD == " ")
    FFWREC.XPLCD = "*";
  end
  if (FFWREC.XPCCD == " ")
    FFWREC.XPCCD = "*";
  end
  ;
  if (FE0JW00.FE0JWLVL == "L" /* line or type level open cursor of cats*/
   || FE0JW00.FE0JWLVL == "T" 
  )                           /* ------------------------------------------------------------*/
     /* Open FFXRF for list of categories.*/
    /* ------------------------------------------------------------*/
    FE0JS34(); /* Open FFXRF*/
    ;
    /* ------------------------------------------------------------*/
     /* Loop until no more categories.*/
    /* ------------------------------------------------------------*/
    while (FE0JW00.FE0JWSW2 == "N") /* Until end of cursor*/
      ;
      FE0JS35(); /* Fetch FFXRF*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* Cat was found*/
        FE0JS36(); /* Obtain DFHIST.VWHCAT01*/
      end
    end
    ;
    FE0JS37(); /* Close FFXRF*/
    ;
  else /* category level single call*/
    set FHBREC empty;
    ;
    /* ------------------------------------------------------------*/
     /* Format keys.*/
    /* ------------------------------------------------------------*/
    ;
    FHBREC.XQACD = "01"; /* quality code*/
    FHBREC.XPCCD = FFWREC.XPCCD; /* category code*/
    FHBREC.FH7INVDT = FFRREC.FF4FCTMO; /* date*/
    FHBREC.YPGCD = FFWREC.YPGCD; /* type group code*/
    FHBREC.YSMXDV = FFWREC.YSMXDV; /* div group code*/
    FE0JS38(); /* Select VWHCAT01*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FF7REC.FF6PRFCT = FHBREC.FH7MOPRQ; /* save data*/
    end
  end
  ;
end // end FE0JS31

// Get actual planned recpts NIL
Function FE0JS33()
   /* ------------------------------------------------------------*/
   /* Obtain actual planned receipts from DFHIST.VWHCAT01 NIL*/
   /* ------------------------------------------------------------*/
  FE0JW00.FE0JWSW2 = "N"; /* end of cursor flag*/
  FF7REC.FF6PRFCT = 0; /* 0 prod fcst field*/
  if (FFWREC.XPLCD == " ")
    FFWREC.XPLCD = "*";
  end
  if (FFWREC.XPCCD == " ")
    FFWREC.XPCCD = "*";
  end
  ;
  if (FE0JW00.FE0JWLVL == "L" /* line or type level open cursor of*/
   /* cats*/
   || FE0JW00.FE0JWLVL == "T" 
  )                           /* ------------------------------------------------------------*/
     /* Open FFXRF for list of categories.*/
    /* ------------------------------------------------------------*/
    FE0JS34(); /* Open FFXRF*/
    ;
    /* ------------------------------------------------------------*/
     /* Loop until no more categories.*/
    /* ------------------------------------------------------------*/
    while (FE0JW00.FE0JWSW2 == "N") /* Until end of cursor*/
      ;
      FE0JS35(); /* Fetch FFXRF*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* Cat was found*/
        FE0JS39(); /* Obtain DFHIST.VWHCAT01 NIL*/
      end
    end
    ;
    FE0JS37(); /* Close FFXRF*/
    ;
  else /* category level single call*/
    set FHBREC empty;
    ;
    /* ------------------------------------------------------------*/
     /* Format keys.*/
    /* ------------------------------------------------------------*/
    ;
    FHBREC.XQACD = "01"; /* quality code*/
    FHBREC.XPCCD = FFWREC.XPCCD; /* category code*/
    FHBREC.FH7INVDT = FFRREC.FF4FCTMO; /* date*/
    FHBREC.YPGCD = FFWREC.YPGCD; /* type group code*/
    FHBREC.YSMXDV = "20"; /* div group code*/
    FE0JS38(); /* Select VWHCAT01*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FF7REC.FF6PRFCT = FHBREC.FH7MOPRQ; /* save data*/
    end
  end
  ;
end // end FE0JS33

// Open DFHIST.VWHCAT01
Function FE0JS34()
   /* ------------------------------------------------------------*/
   /* Open cursor for FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
   /* always use div=10, since tbl is set up*/
   /* with div=10 for all rows - dom and nil*/
  FF2REC.YSMXDV = "10"; /* Division group*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Line*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type*/
  ;
  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FE0JW00.FE0JWSW2 = "N"; /* End of cursor switch*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S34"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS34

// Fetch DFHIST.VWHCAT01
Function FE0JS35()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FE0JW00.FE0JWSW2 = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S35"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS35

// Obtain DFHIST.VWHCAT01 DOM
Function FE0JS36()
   /* ------------------------------------------------------------*/
   /* Obtain actual PO qty from DFHIST.VWHCAT01*/
   /* ------------------------------------------------------------*/
  ;
  set FHBREC empty;
  ;
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  ;
  FHBREC.XQACD = "01"; /* quality code*/
  FHBREC.XPCCD = FF2REC.XPCCD; /* category code*/
  FHBREC.FH7INVDT = FFRREC.FF4FCTMO; /* date*/
  FHBREC.YPGCD = FF2REC.YPGCD; /* type group code*/
  FHBREC.YSMXDV = FFWREC.YSMXDV; /* div group code*/
  FE0JS38(); /* Select VWHCAT01*/
  ;
   /* ------------------------------------------------------------*/
   /* If row found, add to line total field*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    ;
    FF7REC.FF6PRFCT = FF7REC.FF6PRFCT + FHBREC.FH7MOPRQ;
                                   /* add to line tot*/
    ;
  end
  ;
end // end FE0JS36

// Close DFHIST.VWHACT01
Function FE0JS37()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S37"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS37

// Select DFHIST.VWHCAT01
Function FE0JS38()
   /* ------------------------------------------------------------*/
   /* Select Actual PO qty from DFHIST.VWHCAT01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5970" ("SS", SQLCA, FHBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, save data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -305) /* null value on sum*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S38"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHACT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FHBREC.FHBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS38

// Obtain DFHIST.VWHCAT01 NIL
Function FE0JS39()
   /* ------------------------------------------------------------*/
   /* Obtain actual PO qty from DFHIST.VWHCAT01 NIL*/
   /* ------------------------------------------------------------*/
  ;
  set FHBREC empty;
  ;
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  ;
  FHBREC.XQACD = "01"; /* quality code*/
  FHBREC.XPCCD = FF2REC.XPCCD; /* category code*/
  FHBREC.FH7INVDT = FFRREC.FF4FCTMO; /* date*/
  FHBREC.YPGCD = FF2REC.YPGCD; /* type group code*/
  FHBREC.YSMXDV = "20"; /* div group code*/
  FE0JS38(); /* Select VWHCAT01*/
  ;
   /* ------------------------------------------------------------*/
   /* If row found, add to line total field*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    ;
    FF7REC.FF6PRFCT = FF7REC.FF6PRFCT + FHBREC.FH7MOPRQ;
                                   /* add to line tot*/
    ;
  end
  ;
end // end FE0JS39

// Sum dom category fcst
Function FE0JS40()
   /* ------------------------------------------------------------*/
   /* Select the row from the category by month master table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum qtys*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S40"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM DOMESTIC CATEGORY FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS40

// Get dom category fcst
Function FE0JS41()
   /* ------------------------------------------------------------*/
   /* Select the row from the category by month master table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF7REC.FF4FCTMO = FFRREC.FF4FCTMO; /* Forecast month*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or no row was found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S41"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET DOMESTIC CATEGORY FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS41

// Sum NIL cat prdctn fcst
Function FE0JS42()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by category table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.YSMXDV = "20"; /* Division group code*/
  FF7REC.XCTCD = "*"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S42"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NIL CATEGORY FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS42

// Sum cat ivc/ord qtys
Function FE0JS46()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS46"; /* Calling process*/
  ;
  XSFFS50(); /* Summarize VFHCAT01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHIN = FH3REC.FH2SHP; /* Invoiced qty*/
  ;
  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FE0JW00.FE0JWHOR = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Ordered qty*/
    FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH3REC.FH1ALQTY;
    FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH3REC.FH3CNCL;
  else
    FE0JW00.FE0JWHOR = FH3REC.FH-FRZ-PRAL-QTY +                       FH3REC.FH-FRZ-ALOC-QTY +                       FH3REC.FH-FRZ-SHP-QTY +                       FH3REC.FH-FRZ-CNCL-QTY;
  end
  ;
  if (FE0JW00.FE0JWCOL > 1)
    FE0JW07.FE0JWHIN = FE0JW07.FE0JWHIN + FE0JW00.FE0JWHIN;
    FE0JW07.FE0JWHOR = FE0JW07.FE0JWHOR + FE0JW00.FE0JWHOR;
    FE0JW08.FE0JWHIN = FE0JW08.FE0JWHIN + FE0JW00.FE0JWHIN;
    FE0JW08.FE0JWHOR = FE0JW08.FE0JWHOR + FE0JW00.FE0JWHOR;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS46"; /* Calling process*/
  ;
  XSFFS50(); /* Summarize VFHCAT01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHIN = FE0JW00.FE0JWHIN + FH3REC.FH2SHP; /* Invoiced qty*/
  ;
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH3REC.FH2SHP; /* Ordered qty*/
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH3REC.FH1PAQTY;
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH3REC.FH1ALQTY;
  FE0JW00.FE0JWHOR = FE0JW00.FE0JWHOR + FH3REC.FH3CNCL;
  ;
  if (FE0JW00.FE0JWCOL > 1)
    FE0JW07.FE0JWHIN = FE0JW07.FE0JWHIN + FH3REC.FH2SHP;
    FE0JW07.FE0JWHOR = FE0JW07.FE0JWHOR + FH3REC.FH2SHP + FH3REC.FH1PAQTY     + FH3REC.FH1ALQTY + FH3REC.FH3CNCL;
    FE0JW08.FE0JWHIN = FE0JW08.FE0JWHIN + FH3REC.FH2SHP;
    FE0JW08.FE0JWHOR = FE0JW08.FE0JWHOR + FH3REC.FH2SHP + FH3REC.FH1PAQTY     + FH3REC.FH1ALQTY + FH3REC.FH3CNCL;
  end
  ;
end // end FE0JS46

// Sum one year ago cat history
Function FE0JS48()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  if (FFWREC.YPGCD == "*")
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    if (FF2REC.FF2ALCAT == "  ")
      FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
    else
      FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Product category code*/
    end
  end
  ;
  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS48"; /* Calling process*/
  ;
  XSFFS50(); /* Summarize VFHCAT01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical futures quantity.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FE0JW00.FE0JWHFU = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Hist futr qty*/
    FE0JW00.FE0JWHFU = FE0JW00.FE0JWHFU + FH3REC.FH1ALQTY;
    FE0JW00.FE0JWHFU = FE0JW00.FE0JWHFU + FH3REC.FH3CNCL;
  else
    FE0JW00.FE0JWHFU = FH3REC.FH-FRZ-PRAL-QTY +                       FH3REC.FH-FRZ-ALOC-QTY +                       FH3REC.FH-FRZ-SHP-QTY +                       FH3REC.FH-FRZ-CNCL-QTY;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  if (FFWREC.YPGCD == "*")
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    if (FF2REC.FF2ALCAT == "  ")
      FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
    else
      FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Product category code*/
    end
  end
  ;
  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS48"; /* Calling process*/
  ;
  XSFFS50(); /* Summarize VFHCAT01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHPR = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Hist prop qty*/
  FE0JW00.FE0JWHPR = FE0JW00.FE0JWHPR + FH3REC.FH1ALQTY;
  FE0JW00.FE0JWHPR = FE0JW00.FE0JWHPR + FH3REC.FH3CNCL;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWHDM = FE0JW00.FE0JWHFU + FE0JW00.FE0JWHPR;
                                   /* Hist demand qty*/
  ;
  FE0JW00.FE0JWHCF = FE0JW00.FE0JWHDM; /* Hist combined qty*/
  ;
  ;
end // end FE0JS48

// Sum two years ago history
Function FE0JS49()
   /* ------------------------------------------------------------*/
   /* Sum two years ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 200; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  if (FFWREC.YPGCD == "*")
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    if (FF2REC.FF2ALCAT == "  ")
      FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
    else
      FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Product category code*/
    end
  end
  ;
  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS49"; /* Calling process*/
  ;
  XSFFS50(); /* Summarize VFHCAT01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate futures for the product.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FF2FUIND == "2") /* Two years futures indicated*/
    ;
    if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
      FE0JW00.FE0JWHFU = FH3REC.FH2SHP; /* Hist futr qty*/
      FE0JW00.FE0JWHCF = FH3REC.FH2SHP; /* Hist combined qty*/
      ;
      FE0JW00.FE0JWHFU = FE0JW00.FE0JWHFU + FH3REC.FH1PAQTY;
      FE0JW00.FE0JWHFU = FE0JW00.FE0JWHFU + FH3REC.FH1ALQTY;
      FE0JW00.FE0JWHFU = FE0JW00.FE0JWHFU + FH3REC.FH3CNCL;
      ;
      FE0JW00.FE0JWHCF = FE0JW00.FE0JWHCF + FH3REC.FH1PAQTY;
      FE0JW00.FE0JWHCF = FE0JW00.FE0JWHCF + FH3REC.FH1ALQTY;
      FE0JW00.FE0JWHCF = FE0JW00.FE0JWHCF + FH3REC.FH3CNCL;
    else
      FE0JW00.FE0JWHFU = FH3REC.FH-FRZ-PRAL-QTY +                         FH3REC.FH-FRZ-ALOC-QTY +                         FH3REC.FH-FRZ-SHP-QTY +                         FH3REC.FH-FRZ-CNCL-QTY;
      FE0JW00.FE0JWHCF = FE0JW00.FE0JWHFU;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity for the product.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FF2DMIND == "2") /* Two years demand indicated*/
    ;
    if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
      FE0JW00.FE0JWHDM = FH3REC.FH2SHP; /* Hist futr qty*/
      ;
      FE0JW00.FE0JWHDM = FE0JW00.FE0JWHDM + FH3REC.FH1PAQTY;
      FE0JW00.FE0JWHDM = FE0JW00.FE0JWHDM + FH3REC.FH1ALQTY;
      FE0JW00.FE0JWHDM = FE0JW00.FE0JWHDM + FH3REC.FH3CNCL;
    else
      FE0JW00.FE0JWHDM = FH3REC.FH-FRZ-PRAL-QTY +                         FH3REC.FH-FRZ-ALOC-QTY +                         FH3REC.FH-FRZ-SHP-QTY +                         FH3REC.FH-FRZ-CNCL-QTY;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Sum two years ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO - 200; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/
  ;
  if (FFWREC.YPGCD == "*")
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    if (FF2REC.FF2ALCAT == "  ")
      FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
    else
      FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Product category code*/
    end
  end
  ;
  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS08"; /* Calling process*/
  ;
  XSFFS50(); /* Summarize VFHCAT01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate historical combined based on futures indicator.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FF2FUIND == "2") /* Two years futures indicated*/
    ;
    FE0JW00.FE0JWHCF = FE0JW00.FE0JWHCF + FH3REC.FH2SHP;
    FE0JW00.FE0JWHCF = FE0JW00.FE0JWHCF + FH3REC.FH1PAQTY;
    FE0JW00.FE0JWHCF = FE0JW00.FE0JWHCF + FH3REC.FH1ALQTY;
    FE0JW00.FE0JWHCF = FE0JW00.FE0JWHCF + FH3REC.FH3CNCL;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity for the product.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FF2PRIND == "2") /* Two years prop indicated*/
    ;
    FE0JW00.FE0JWHPR = FH3REC.FH2SHP; /* Hist prop qty*/
    ;
    FE0JW00.FE0JWHPR = FE0JW00.FE0JWHPR + FH3REC.FH1PAQTY;
    FE0JW00.FE0JWHPR = FE0JW00.FE0JWHPR + FH3REC.FH1ALQTY;
    FE0JW00.FE0JWHPR = FE0JW00.FE0JWHPR + FH3REC.FH3CNCL;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity for the product.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FF2DMIND == "2") /* Two years demand indicated*/
    ;
    FE0JW00.FE0JWHDM = FE0JW00.FE0JWHDM + FH3REC.FH2SHP;
    FE0JW00.FE0JWHDM = FE0JW00.FE0JWHDM + FH3REC.FH1PAQTY;
    FE0JW00.FE0JWHDM = FE0JW00.FE0JWHDM + FH3REC.FH1ALQTY;
    FE0JW00.FE0JWHDM = FE0JW00.FE0JWHDM + FH3REC.FH3CNCL;
    ;
  end
  ;
  ;
end // end FE0JS49

// Sum category shipment history
Function FE0JS50()
   /* ------------------------------------------------------------*/
   /* Sum quantities in shipment history by category table.*/
   /* ------------------------------------------------------------*/
  ;
  set FH6REC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO; /* Ending month*/
  ;
  FH6REC.XDVCD = "10"; /* Division group code*/
  FH6REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH6REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH6REC.XLCCD = "10"; /* Life cycle code*/
  FH6REC.XQACD = "01"; /* Quality code*/
  FH6REC.XCTCD = "USA"; /* Foreign country code*/
  FH6REC.YSMXOT = "*"; /* Order type group code*/
  FH6REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS50"; /* Calling process*/
  ;
  XSFFS52(); /* Summarize VCTSHP01 quantities*/
  ;
  ;
end // end FE0JS50

// ===> Save item information <==
Function FE0JS80()
   /* ------------------------------------------------------------*/
   /* If no room for subtotal/accum total, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWCOL > 61) /* No room for totals*/
    ;
    FFWREC.XXXMODID = "S80"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    TAEREC.TAEDESC1 = "SHORT RANGE WORKSHEETS EXCEEDS 3 YEARS";
    TAEREC.TAEDESC2 = FE0JW09.TARJCL; /* Selection parameters*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "SAVE ITEM INFORMATION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the M001 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FFZINDMO = FFRREC.FF4FCTMO; /* Forecast month*/
  FE0JW01.FF4FCTMO[FE0JWCOL] = FE0JW00.FFZINDMO; /* Forecast month*/
  FE0JW01.FE0JMMON[FE0JWCOL] = FE0JW00.FE0JWMON; /* Forecast YYMM*/
  FE0JW01.FE0JMSCT[FE0JWCOL] = FE0JW00.FE0JWSCT; /* Sesn count*/
  ;
   /* ---> Non-National ACCTs Future*/
   /* ---> -------------------------*/
   /* ---> pre-allocated*/
  if (FFRREC.FF4FCTMO < FE0JW01.FFQCURMO) /* ===> Fcst mo LT current*/
    if (FE0JW00.FE0JWLVL == "C") /* Cat summary level*/
      set FH3REC empty; /* Init call record*/
      FH3REC.FH1PNAC = "N"; /* National account flag*/
      FH3REC.YSMXOT = "FT"; /* Order type group code*/
      FE0JS82(); /* Get FHCAT non-natl futr hist*/
      FFRREC.FFRPFUDM = FH3REC.FH1PAQTY; /* Pral*/
      FFRREC.FFRAFUDM = FH3REC.FH1ALQTY; /* Aloc*/
      FFRREC.FFRIFUDM = FH3REC.FH2SHP; /* Invoiced*/
      FFRREC.FFRCFUDM = FH3REC.FH3CNCL; /* Cancel*/
    else /* Type or Line summary level*/
      set FH4REC empty; /* Init call record*/
      FH4REC.FH1PNAC = "N"; /* National account flag*/
      FH4REC.YSMXOT = "FT"; /* Order type group code*/
      FE0JS84(); /* Get FHLIN non-natl futr hist*/
      FFRREC.FFRPFUDM = FH4REC.FH1PAQTY; /* Pral*/
      FFRREC.FFRAFUDM = FH4REC.FH1ALQTY; /* Aloc*/
      FFRREC.FFRIFUDM = FH4REC.FH2SHP; /* Invoiced*/
      FFRREC.FFRCFUDM = FH4REC.FH3CNCL; /* Cancel*/
    end
  end
  FFXREC.FFXNUMB = FFRREC.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRPFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRPFUDM = FE0JW07.FFRPFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> allocated*/
  FFXREC.FFXNUMB = FFRREC.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRAFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRAFUDM = FE0JW07.FFRAFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> invoiced*/
  FFXREC.FFXNUMB = FFRREC.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRIFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRIFUDM = FE0JW07.FFRIFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> cancelled*/
  FFXREC.FFXNUMB = FFRREC.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRCFUDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRCFUDM = FE0JW07.FFRCFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FE0JW01.FFRPFUDM[FE0JWCOL]; /* Futures tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRAFUDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRIFUDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRCFUDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMFUT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FE0JWFUT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWFUT = FE0JW07.FE0JWFUT + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> National ACCTs Future*/
   /* ---> ---------------------*/
   /* ---> pre-allocated*/
  if (FFRREC.FF4FCTMO < FE0JW01.FFQCURMO) /* ===> Fcst mo LT current*/
    if (FE0JW00.FE0JWLVL == "C") /* Cat summary level*/
      set FH3REC empty; /* Init call record*/
      FH3REC.FH1PNAC = "Y"; /* National account flag*/
      FH3REC.YSMXOT = "FT"; /* Order type group code*/
      FE0JS82(); /* Get FHCAT natl futr hist*/
      FFRREC.FFRPNFDM = FH3REC.FH1PAQTY; /* Pral*/
      FFRREC.FFRANFDM = FH3REC.FH1ALQTY; /* Aloc*/
      FFRREC.FFRINFDM = FH3REC.FH2SHP; /* Invoiced*/
      FFRREC.FFRCNFDM = FH3REC.FH3CNCL; /* Cancel*/
    else /* Type or Line summary level*/
      set FH4REC empty; /* Init call record*/
      FH4REC.FH1PNAC = "Y"; /* National account flag*/
      FH4REC.YSMXOT = "FT"; /* Order type group code*/
      FE0JS84(); /* Get FHLIN natl futr hist*/
      FFRREC.FFRPNFDM = FH4REC.FH1PAQTY; /* Pral*/
      FFRREC.FFRANFDM = FH4REC.FH1ALQTY; /* Aloc*/
      FFRREC.FFRINFDM = FH4REC.FH2SHP; /* Invoiced*/
      FFRREC.FFRCNFDM = FH4REC.FH3CNCL; /* Cancel*/
    end
  end
  FFXREC.FFXNUMB = FFRREC.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRPNFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRPNFDM = FE0JW07.FFRPNFDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> allocated*/
  FFXREC.FFXNUMB = FFRREC.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRANFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRANFDM = FE0JW07.FFRANFDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> invoiced*/
  FFXREC.FFXNUMB = FFRREC.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRINFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRINFDM = FE0JW07.FFRINFDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> cancelled*/
  FFXREC.FFXNUMB = FFRREC.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FFRCNFDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRCNFDM = FE0JW07.FFRCNFDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FE0JW01.FFRPNFDM[FE0JWCOL]; /* Natl acct fut tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRANFDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRINFDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRCNFDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW01.FE0JMNFT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW01.FE0JWNFT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWNFT = FE0JW07.FE0JWNFT + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the M002 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* ---> Non-National Acct Prop.*/
   /* ---> -----------------------*/
   /* ---> pre-allocated*/
  if (FFRREC.FF4FCTMO < FE0JW01.FFQCURMO) /* ===> Fcst mo LT current*/
    if (FE0JW00.FE0JWLVL == "C") /* Cat summary level*/
      set FH3REC empty; /* Init call record*/
      FH3REC.FH1PNAC = "N"; /* National account flag*/
      FH3REC.YSMXOT = "PR"; /* Order type group code*/
      FE0JS82(); /* Get FHCAT non-natl prop hist*/
      FFRREC.FFRPPRDM = FH3REC.FH1PAQTY; /* Pral*/
      FFRREC.FFRAPRDM = FH3REC.FH1ALQTY; /* Aloc*/
      FFRREC.FFRIPRDM = FH3REC.FH2SHP; /* Invoiced*/
      FFRREC.FFRCPRDM = FH3REC.FH3CNCL; /* Cancel*/
    else /* Type or Line summary level*/
      set FH4REC empty; /* Init call record*/
      FH4REC.FH1PNAC = "N"; /* National account flag*/
      FH4REC.YSMXOT = "PR"; /* Order type group code*/
      FE0JS84(); /* Get FHLIN non-natl prop hist*/
      FFRREC.FFRPPRDM = FH4REC.FH1PAQTY; /* Pral*/
      FFRREC.FFRAPRDM = FH4REC.FH1ALQTY; /* Aloc*/
      FFRREC.FFRIPRDM = FH4REC.FH2SHP; /* Invoiced*/
      FFRREC.FFRCPRDM = FH4REC.FH3CNCL; /* Cancel*/
    end
  end
  FFXREC.FFXNUMB = FFRREC.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRPPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRPPRDM = FE0JW07.FFRPPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> allocated*/
  FFXREC.FFXNUMB = FFRREC.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRAPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRAPRDM = FE0JW07.FFRAPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> invoiced*/
  FFXREC.FFXNUMB = FFRREC.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRIPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRIPRDM = FE0JW07.FFRIPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> cancelled*/
  FFXREC.FFXNUMB = FFRREC.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRCPRDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRCPRDM = FE0JW07.FFRCPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FE0JW02.FFRPPRDM[FE0JWCOL]; /* Prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRAPRDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRIPRDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRCPRDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMPRT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FE0JWPRT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWPRT = FE0JW07.FE0JWPRT + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> National Acct Prop.*/
   /* ---> -------------------*/
   /* ---> pre-allocated*/
  if (FFRREC.FF4FCTMO < FE0JW01.FFQCURMO) /* ===> Fcst mo LT current*/
    if (FE0JW00.FE0JWLVL == "C") /* Cat summary level*/
      set FH3REC empty; /* Init call record*/
      FH3REC.FH1PNAC = "Y"; /* National account flag*/
      FH3REC.YSMXOT = "PR"; /* Order type group code*/
      FE0JS82(); /* Get FHCAT natl prop hist*/
      FFRREC.FFRPNPDM = FH3REC.FH1PAQTY; /* Pral*/
      FFRREC.FFRANPDM = FH3REC.FH1ALQTY; /* Aloc*/
      FFRREC.FFRINPDM = FH3REC.FH2SHP; /* Invoiced*/
      FFRREC.FFRCNPDM = FH3REC.FH3CNCL; /* Cancel*/
    else /* Type or Line summary level*/
      set FH4REC empty; /* Init call record*/
      FH4REC.FH1PNAC = "Y"; /* National account flag*/
      FH4REC.YSMXOT = "PR"; /* Order type group code*/
      FE0JS84(); /* Get FHLIN natl prop hist*/
      FFRREC.FFRPNPDM = FH4REC.FH1PAQTY; /* Pral*/
      FFRREC.FFRANPDM = FH4REC.FH1ALQTY; /* Aloc*/
      FFRREC.FFRINPDM = FH4REC.FH2SHP; /* Invoiced*/
      FFRREC.FFRCNPDM = FH4REC.FH3CNCL; /* Cancel*/
    end
  end
  FFXREC.FFXNUMB = FFRREC.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRPNPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRPNPDM = FE0JW07.FFRPNPDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> allocated*/
  FFXREC.FFXNUMB = FFRREC.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRANPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRANPDM = FE0JW07.FFRANPDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> invoiced*/
  FFXREC.FFXNUMB = FFRREC.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRINPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRINPDM = FE0JW07.FFRINPDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> cancelled*/
  FFXREC.FFXNUMB = FFRREC.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FFRCNPDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRCNPDM = FE0JW07.FFRCNPDM + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FE0JW02.FFRPNPDM[FE0JWCOL]; /* Natl acct prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRANPDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRINPDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRCNPDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW02.FE0JMNPT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW02.FE0JWNPT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWNPT = FE0JW07.FE0JWNPT + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M003 information from the previous maps.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0JW01.FFRPFUDM[FE0JWCOL]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRPNFDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRPPRDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRPNPDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWTDP = FE0JW07.FE0JWTDP + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  FFXREC.FFXNUMB = FE0JW01.FFRAFUDM[FE0JWCOL]; /* Total allocated*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRANFDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRAPRDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRANPDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDA[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDA[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWTDA = FE0JW07.FE0JWTDA + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  FFXREC.FFXNUMB = FE0JW01.FFRIFUDM[FE0JWCOL]; /* Total invoiced*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRINFDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRIPRDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRINPDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDI[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDI[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWTDI = FE0JW07.FE0JWTDI + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  FFXREC.FFXNUMB = FE0JW01.FFRCFUDM[FE0JWCOL]; /* Total cancelled*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRCNFDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRCPRDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRCNPDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDC[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWTDC = FE0JW07.FE0JWTDC + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  FFXREC.FFXNUMB = FE0JW03.FE0JWTDP[FE0JWCOL]; /* Total demand*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW03.FE0JWTDA[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW03.FE0JWTDI[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW03.FE0JWTDC[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTDT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTDT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWTDT = FE0JW07.FE0JWTDT + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  if (FE0JW03.FE0JWTDT[FE0JWCOL] != 0) /* Total demand NE zero*/
    FE0JW00.FE0JWPCT = FE0JW03.FE0JWTDC[FE0JWCOL] * 100; /* Cancellation %*/
    FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWPCT / FE0JW03.FE0JWTDT[FE0JWCOL], -mathLib.decimals(FE0JW00.FE0JWPCT));
    FE0JW03.FE0JWCAP[FE0JWCOL] = FE0JW00.FE0JWPCT;
  end
  ;
  FFXREC.FFXNUMB = FE0JW01.FFRPFUDM[FE0JWCOL]; /* Tot active fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRAFUDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRIFUDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRPNFDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRANFDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRINFDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTAF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTAF[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWTAF = FE0JW07.FE0JWTAF + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  FFXREC.FFXNUMB = FE0JW02.FFRPPRDM[FE0JWCOL]; /* Tot active prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRAPRDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRIPRDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRPNPDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRANPDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRINPDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW03.FE0JMTAP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW03.FE0JWTAP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWTAP = FE0JW07.FE0JWTAP + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the M004 information from the previous maps.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFRREC.FF4FCTMO > FE0JW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = 0; /* Fut dmd*/
  else
    FFXREC.FFXNUMB = FE0JW01.FFRPFUDM[FE0JWCOL]; /* Fut dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRAFUDM[FE0JWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRIFUDM[FE0JWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDFU[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDFU[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWDFU = FE0JW07.FE0JWDFU + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  if (FFRREC.FF4FCTMO > FE0JW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = 0; /* Natl fut*/
  else
    FFXREC.FFXNUMB = FE0JW01.FFRPNFDM[FE0JWCOL]; /* Natl fut*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRANFDM[FE0JWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFRINFDM[FE0JWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDNF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDNF[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWDNF = FE0JW07.FE0JWDNF + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  FFXREC.FFXNUMB = FE0JW02.FFRPPRDM[FE0JWCOL]; /* Prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRAPRDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRIPRDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDPR[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDPR[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWDPR = FE0JW07.FE0JWDPR + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  FFXREC.FFXNUMB = FE0JW02.FFRPNPDM[FE0JWCOL]; /* Natl prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRANPDM[FE0JWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW02.FFRINPDM[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDNP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDNP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWDNP = FE0JW07.FE0JWDNP + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  FFXREC.FFXNUMB = FE0JW04.FE0JWDPR[FE0JWCOL]; /* Total prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW04.FE0JWDNP[FE0JWCOL];
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDTP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDTP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWDTP = FE0JW07.FE0JWDTP + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  if (FE0JW01.FF4FCTMO[FE0JWCOL] == FE0JW01.FFQCURMO /* Fcst mo EQ contp*/
   && FE0JW01.FF4FCTMO[FE0JWCOL] == XX0XW01.XX0XWCYM) /* and EQ current*/
    FFXREC.FFXNUMB = FE0JW04.FE0JWDPR[FE0JWCOL] * FE0JW00.FE0JWDIM;
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / FE0JW00.FE0JWDTD, -mathLib.decimals(FFXREC.FFXNUMB));
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW04.FE0JWDNP[FE0JWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0JW04.FE0JMDCP[FE0JWCOL] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
    FE0JW04.FE0JWDCP[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  end
  ;
   /* ===> Curr prop fcst*/
       /* --------------*/
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GT current*/
    FFXREC.FFXNUMB = FFRREC.FFRCPRFC; /* Curr prop fcst*/
  else
    FFXREC.FFXNUMB = FE0JW04.FE0JWDTP[FE0JWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMPCF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FFRCPRFC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and fcst GT zero*/
    FE0JW07.FFRCPRFC = FE0JW07.FFRCPRFC + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ===> Mstr prop fcst*/
       /* --------------*/
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GT current*/
    FFXREC.FFXNUMB = FE0JW04.FF6PRPFC[FE0JWCOL]; /* Mstr prop fcst*/
  else
    FFXREC.FFXNUMB = FE0JW04.FE0JWDTP[FE0JWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMPRF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FF6PRPFC[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and fcst GT zero*/
    FE0JW07.FF6PRPFC = FE0JW07.FF6PRPFC + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  ;
  if (FFRREC.FF4FCTMO > FE0JW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = FFRREC.FFRCDMFC - FE0JW04.FFRCPRFC[FE0JWCOL];
  else
    FFXREC.FFXNUMB = FE0JW04.FE0JWDFU[FE0JWCOL]; /* Total fut*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW04.FE0JWDNF[FE0JWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0JW04.FE0JMDTF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW04.FE0JWDTF[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWDTF = FE0JW07.FE0JWDTF + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ===> Fcst futr pct*/
       /* -------------*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GT current*/
      if (FFRREC.FFRCDMFC != 0) /* and curr dmd fcst NE zero*/
        FE0JW00.FE0JWPCT = FE0JW04.FE0JWDTF[FE0JWCOL] * 100;
        FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWPCT / FFRREC.FFRCDMFC, -mathLib.decimals(FE0JW00.FE0JWPCT));
        FE0JW04.FE0JWDFF[FE0JWCOL] = FE0JW00.FE0JWPCT; /* Fcst fut %*/
        FE0JW07.FE0JWFRF = FE0JW07.FE0JWFRF + FE0JW04.FE0JWDTF[FE0JWCOL];
      end
    else
      if (FE0JW03.FE0JWTDT[FE0JWCOL] != 0) /* and tot net books NE zero*/
        FE0JW00.FE0JWPCT = FE0JW01.FE0JWFUT[FE0JWCOL]         + FE0JW01.FE0JWNFT[FE0JWCOL];
        FE0JW00.FE0JWPCT = FE0JW00.FE0JWPCT * 100;
        FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWPCT         / FE0JW03.FE0JWTDT[FE0JWCOL], -mathLib.decimals(FE0JW00.FE0JWPCT));
        FE0JW04.FE0JWDFF[FE0JWCOL] = FE0JW00.FE0JWPCT; /* Fcst fut %*/
        FE0JW07.FE0JWFRF = FE0JW07.FE0JWFRF + FE0JW01.FE0JWFUT[FE0JWCOL]         + FE0JW01.FE0JWNFT[FE0JWCOL];
      end
    end
  end
  ;
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    if (FE0JW00.FE0JWHDM > 0) /* Hist comb GT zero*/
      FE0JW00.FE0JWPCT = mathLib.round(FE0JW00.FE0JWHFU * 100 / FE0JW00.FE0JWHDM, -mathLib.decimals(FE0JW00.FE0JWPCT));
      FE0JW04.FE0JWDHF[FE0JWCOL] = FE0JW00.FE0JWPCT; /* Hist fut %*/
    end
    FE0JW07.FE0JWHCF = FE0JW07.FE0JWHCF + FE0JW00.FE0JWHDM; /* Subtotal*/
    FE0JW07.FE0JWHFU = FE0JW07.FE0JWHFU + FE0JW00.FE0JWHFU; /* Subtotal*/
  end
  ;
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW04.FE0JWHPR[FE0JWCOL] = FE0JW00.FE0JWHPR; /* Hist prop qty*/
    FE0JW07.FE0JWHPR = FE0JW07.FE0JWHPR + FE0JW00.FE0JWHPR; /* Subtotal*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the M005 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/
  ;
   /* ===> Curr Dmd fcst*/
       /* -------------*/
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRCDMFC; /* Curr dmd fcst*/
    FE0JW05.FFRCDMFC[FE0JWCOL] = FFRREC.FFRCDMFC;
  else /* ===> use Tot Net Books from W03*/
    FFXREC.FFXNUMB = FE0JW03.FE0JWTDT[FE0JWCOL]; /* Curr dmd fcst*/
    FE0JW05.FFRCDMFC[FE0JWCOL] = FE0JW03.FE0JWTDT[FE0JWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMFCD[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRCDMFC = FE0JW07.FFRCDMFC + FE0JW05.FFRCDMFC[FE0JWCOL];
  end
  ;
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW05.FE0JWHDM[FE0JWCOL] = FE0JW00.FE0JWHDM; /* Hist demand qty*/
    FE0JW07.FE0JWHDM = FE0JW07.FE0JWHDM + FE0JW00.FE0JWHDM; /* Subtotal*/
  end
  ;
   /* ===> Hist Fill Rate*/
       /* --------------*/
  if (FE0JW00.FE0JWHOR != 0) /* Ordered NE zero*/
    FE0JW00.FE0JWPCT = FE0JW00.FE0JWHIN * 100; /* Hist fill rt*/
    FE0JW05.FE0JWHFR[FE0JWCOL] = mathLib.round(FE0JW00.FE0JWPCT / FE0JW00.FE0JWHOR, -mathLib.decimals(FE0JW05.FE0JWHFR[FE0JWCOL]));
  end
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWHFR = FE0JW07.FE0JWHFR + FE0JW05.FE0JWHFR[FE0JWCOL];
  end
  ;
   /* ===> Fcst Fill Rate*/
       /* --------------*/
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    if (FE0JW00.FE0JWLVL == "C"
     && FFWREC.YPGCD != "*")
      FE0JW05.FE0JWFFR[FE0JWCOL] = mathLib.round(FFRREC.FF7FLLRT * 1, -mathLib.decimals(FE0JW05.FE0JWFFR[FE0JWCOL]));
    else
      if (FE0JW05.FFRCDMFC[FE0JWCOL] != 0) /* If curr dmd NE zero*/
        FE0JW00.FE0JWPCT = FE0JW05.FH5MSHQT[FE0JWCOL] * 100; /**/
        FE0JW05.FE0JWFFR[FE0JWCOL] = mathLib.round(FE0JW00.FE0JWPCT         / FE0JW05.FFRCDMFC[FE0JWCOL], -mathLib.decimals(FE0JW05.FE0JWFFR[FE0JWCOL])); /* Fcst fill rt*/
      end
    end
    if (FE0JW05.FE0JWFFR[FE0JWCOL] == 0) /* Fcst fill rt not exist*/
      FE0JW05.FE0JWFFR[FE0JWCOL] = FE0JW05.FE0JWHFR[FE0JWCOL];
    end
    FE0JW05.FE0JMFFR[FE0JWCOL] = mathLib.round(FE0JW05.FE0JWFFR[FE0JWCOL] / 1, -mathLib.decimals(FE0JW05.FE0JMFFR[FE0JWCOL]));
  end
   /* ---> sub-total curr mo forward*/
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    FE0JW07.FE0JWFFR = FE0JW07.FE0JWFFR + FE0JW05.FE0JWFFR[FE0JWCOL];
  end
   /* ---> proir to curr will be added to totals on re-calc*/
  if (FFRREC.FF4FCTMO == FE0JW01.FFQCURMO) /* Fcst mo EQ current*/
    FE0JS86(); /* ====> Re-calc fill rate lt contp*/
  end
  ;
   /* ===> Curr sls fcst*/
       /* -------------*/
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    if (FE0JW00.FE0JWLVL == "C" /* one category*/
     && FFWREC.YPGCD != "*")   
      FFXREC.FFXNUMB = FE0JW05.FFRCDMFC[FE0JWCOL]; /* Curr sls fcst*/
      FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FE0JW05.FE0JWFFR[FE0JWCOL] / 100, -mathLib.decimals(FFXREC.FFXNUMB));
      FE0JW05.FH5MSHQT[FE0JWCOL] = FFXREC.FFXNUMB; /* Rounded number*/
    else
      FFXREC.FFXNUMB = FE0JW05.FH5MSHQT[FE0JWCOL];
      FE0JW05.FH5MSHQT[FE0JWCOL] = FFXREC.FFXNUMB; /* Rounded number*/
    end
  else
    FFXREC.FFXNUMB = FE0JW05.FH5MSHQT[FE0JWCOL];
    FE0JW05.FH5MSHQT[FE0JWCOL] = FFXREC.FFXNUMB; /* Rounded number*/
  end
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMCSF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FH5MSHQT = FE0JW07.FH5MSHQT + FE0JW05.FH5MSHQT[FE0JWCOL];
  end
  ;
   /* ===> Mstr sls fcst*/
       /* -------------*/
  if (FFRREC.FF4FCTMO < FE0JW01.FFQCURMO) /* Fcst mo LT current*/
    FE0JW05.FF6SLFCT[FE0JWCOL] = FE0JW05.FH5MSHQT[FE0JWCOL];
  end
  FFXREC.FFXNUMB = FE0JW05.FF6SLFCT[FE0JWCOL]; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMMSL[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FF6SLFCT = FE0JW07.FF6SLFCT + FE0JW05.FF6SLFCT[FE0JWCOL];
  end
  ;
   /* ===> Mstr dmd fcst*/
       /* -------------*/
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    if (FE0JW00.FE0JWLVL == "C" /* one category*/
     && FFWREC.YPGCD != "*")   
      if (FE0JW05.FE0JWFFR[FE0JWCOL] != 0)
        FFXREC.FFXNUMB = FE0JW05.FF6SLFCT[FE0JWCOL];
        FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100;
        FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / FE0JW05.FE0JWFFR[FE0JWCOL], -mathLib.decimals(FFXREC.FFXNUMB));
      else
        FFXREC.FFXNUMB = 0;
      end
    else
      FFXREC.FFXNUMB = FE0JW05.FE0JWMDM[FE0JWCOL]; /* Mstr dmd fcst*/
    end
  else
    FFXREC.FFXNUMB = FE0JW05.FFRCDMFC[FE0JWCOL]; /* Mstr dmd fcst*/
  end
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMMDM[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FE0JWMDM[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWMDM = FE0JW07.FE0JWMDM + FFXREC.FFXNUMB; /* Subtotal*/
  end
  ;
   /* ===> Revised fcst*/
       /* ------------*/
  FFXREC.FFXNUMB = FE0JW05.FF7RVFCT[FE0JWCOL]; /* Rvse dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW05.FE0JMRVF[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW05.FF7RVFCT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FF7RVFCT = FE0JW07.FF7RVFCT + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the M006 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    if (FFRREC.FF4FCTMO == FE0JW01.FFQCURMO)
      FFXREC.FFXNUMB = FFRREC.FF6BEINV; /* Beg inv*/
    else
      FFXREC.FFXNUMB = FE0JW06.FE0JWINE[FE0JWIXP]; /* Beg inv*/
    end
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW00.FF6SUGBY;
    XSFFS10(); /* Translate to thousands*/
    FE0JW06.FE0JMINB[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW06.FF6BEINV[FE0JWCOL] = FFXREC.FFXNUMB; /* Actual number*/
    FE0JW07.FF6BEINV = FE0JW07.FF6BEINV + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    if (FFRREC.FF4FCTMO == FE0JW01.FFQCURMO) /* Fcst mo EQ current*/
      FFXREC.FFXNUMB = FFRREC.FFRPRDDU + FE0JW07.FFRPRDDU; /* Prod due*/
      FE0JW07.FFRPRDDU = 0; /* Clear prior months subtotal*/
    else
      FFXREC.FFXNUMB = FFRREC.FFRPRDDU; /* Prod due*/
    end
    XSFFS10(); /* Translate to thousands*/
    FE0JW06.FE0JMDUE[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW06.FFRPRDDU[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0JW07.FFRPRDDU = FE0JW07.FFRPRDDU + FFXREC.FFXROUND; /* Subtotal*/
  else
    FE0JW07.FFRPRDDU = FE0JW07.FFRPRDDU + FFRREC.FFRPRDDU; /* Subtotal*/
  end
  ;
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRSUBBY; /* Sbmt qtb*/
    XSFFS10(); /* Translate to thousands*/
    FE0JW06.FE0JMQBY[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW06.FFRSUBBY[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0JW07.FFRSUBBY = FE0JW07.FFRSUBBY + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FFRTENBY; /* Tntv qtb*/
    XSFFS10(); /* Translate to thousands*/
    FE0JW06.FE0JMTBY[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW06.FFRTENBY[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0JW07.FFRTENBY = FE0JW07.FFRTENBY + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FE0JW06.FF6BEINV[FE0JWCOL]; /* Supply*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW06.FFRPRDDU[FE0JWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW06.FFRSUBBY[FE0JWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW06.FFRTENBY[FE0JWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0JW06.FE0JMSUP[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW06.FE0JWSUP[FE0JWCOL] = FFXREC.FFXNUMB; /* Actual number*/
    FE0JW07.FE0JWSUP = FE0JW07.FE0JWSUP + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FG4BALSH; /* Bal to shp*/
    XSFFS10(); /* Translate to thousands*/
    FE0JW06.FE0JMBAL[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW06.FG4BALSH[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0JW07.FG4BALSH = FE0JW07.FG4BALSH + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FE0JW06.FE0JWSUP[FE0JWCOL]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FE0JW06.FG4BALSH[FE0JWCOL];
    XSFFS10(); /* Translate to thousands*/
    FE0JW06.FE0JMINE[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW06.FE0JWINE[FE0JWCOL] = FFXREC.FFXNUMB; /* Actual number*/
    FE0JW07.FE0JWINE = FE0JW07.FE0JWINE + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FF6SFSTK; /* Sfty stk*/
    XSFFS10(); /* Translate to thousands*/
    FE0JW06.FE0JMSTK[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW06.FF6SFSTK[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FE0JW07.FF6SFSTK = FE0JW07.FF6SFSTK + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  if (FFRREC.FF4FCTMO >= FE0JW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FFRREC.FF6SUGBY; /* Sugg qtb*/
    XSFFS10(); /* Translate to thousands*/
    FE0JW06.FE0JMSBY[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FE0JW06.FF6SUGBY[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    ;
    if (FFRREC.FF4FCTMO > FE0JW01.FFQMBYMO) /* Fcst mo GT buy*/
      FE0JW07.FF6SUGBY = FE0JW07.FF6SUGBY + FFXREC.FFXROUND; /* Subtotal*/
      FE0JW00.FF6SUGBY = FE0JW06.FF6SUGBY[FE0JWCOL];
    else
      FE0JW00.FF6SUGBY = 0;
    end
    ;
  end
  ;
  FFXREC.FFXNUMB = FE0JW06.FF6PRFCT[FE0JWCOL]; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMFCT[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FF6PRFCT[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FF6PRFCT = FE0JW07.FF6PRFCT + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  FE0JW00.FE0JWASL = FE0JW00.FE0JWASL * 12; /* Inv turns*/
  FE0JW00.FE0JWAIN = FE0JW06.FE0JWINE[FE0JWCOL] * 3;
  if (FE0JWAIN != 0) /* Inventory NE zero*/
    FE0JW06.FE0JWTUR[FE0JWCOL] = mathLib.round(FE0JW00.FE0JWASL / FE0JW00.FE0JWAIN, -mathLib.decimals(FE0JW06.FE0JWTUR[FE0JWCOL]));
  end
  ;
  FFXREC.FFXNUMB = FFRREC.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMDIR[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FFRDIRSH[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FFRDIRSH = FE0JW07.FFRDIRSH + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
  FFXREC.FFXNUMB = FE0JW06.FE0JWNIL[FE0JWCOL]; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FE0JW06.FE0JMNIL[FE0JWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FE0JW06.FE0JWNIL[FE0JWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWNIL = FE0JW07.FE0JWNIL + FFXREC.FFXROUND; /* Subtotal*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save prior month index.*/
   /* ------------------------------------------------------------*/
  ;
  FE0JW00.FE0JWIXP = FE0JW00.FE0JWCOL;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the number of months for subtotal averaging.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW00.FE0JWCOL > 1) /* Not first column*/
    FE0JW07.FE0JWNMO = FE0JW07.FE0JWNMO + 1; /* Number of months*/
  end
  ;
end // end FE0JS80

// Sum invoice/order qtys beg-cur
Function FE0JS82()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO;
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO;
  ;
  if (FFWREC.YPGCD == "  ")
    FH3REC.XPRCD = "*";
  else
    FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  end
  ;
  if (FFWREC.XPCCD == "  ")
    FH3REC.XPCCD = "*";
  else
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  end
  ;
  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
   /* ----> loaded in the calling process group --->*/
   /* MOVE 'FT' TO FH3REC.YSMXOT      ; Order type group code*/
   /* MOVE '*' TO FH3REC.FH1PNAC      ; National account flag*/
   /* ----> loaded in the calling process group*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS82"; /* Calling process*/
  ;
  XSFFS50(); /* Summarize VFHCAT01 quantities*/
  ;
  ;
end // end FE0JS82

// Sum invoice/order qtys beg-cur
Function FE0JS84()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FFRREC.FF4FCTMO;
  FFFREC.FFFENDMO = FFRREC.FF4FCTMO;
  ;
  if (FFWREC.YPGCD == "  ")
    FH4REC.XPRCD = "*";
  else
    FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  end
  ;
  if (FFWREC.XPLCD == "  ")
    FH4REC.XPLCD = "*";
  else
    FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  end
  ;
  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
   /* ---> loaded from the calling process group --->*/
   /* MOVE '??' TO FH4REC.YSMXOT      ; Order type group code*/
   /* MOVE '?' TO FH4REC.FH1PNAC      ; National account flag*/
   /* ---> loaded from the calling process group*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
  TA1REC.TA1PGMNM = "FE0JS84"; /* Calling process*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
  ;
end // end FE0JS84

// Calc fill rate prior to curr
Function FE0JS86()
   /* ------------------------------------------------------------*/
    /* Actual Fill rate = ((sales + carry over) * 100)/tot dmd*/
     /* - first determine which if any carry over QTYs to use*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = 0; /* ===> init W.S. Accumulator*/
  ;
  if (FE0JW01.FFQCURMO in FE0JW01.FF4FCTMO) /* Find current month*/
    ;
    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/
    ;
  else
    ;
    FFWREC.XXXMODID = "S86"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    TAEREC.TAEDESC1 = "CURRENT MONTH WAS NOT FOUND";
    FE0JW00.FE0JWDAT = FE0JW01.FFQCURMO; /* Date work area*/
    TAEREC.TAEDESC2 = FE0JW00.FE0JWDAT; /* Current month*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN WORKSHEET ITEMS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
    /* Actual Fill rate = ((sales + carry over) * 100)/tot dmd)*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0JW01.FFABEGMO == FE0JW01.FFQCURMO) /* Beg mo EQ curr*/
    ;
    if (FE0JW03.FE0JWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FE0JW05.FE0JWFFR[sysVar.arrayIndex] = 0;
    else
      FFXREC.FFXNUMB = FE0JW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply last carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFQLCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFQLCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100;
                                   /* ===> (sale + carry over) * 100*/
      FE0JW05.FE0JWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FE0JW03.FE0JWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0JW05.FE0JWFFR[sysVar.arrayIndex]));
    end
    FE0JW05.FE0JMFFR[sysVar.arrayIndex] = mathLib.round(FE0JW05.FE0JWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0JW05.FE0JMFFR[sysVar.arrayIndex]));
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FE0JW07.FE0JWFFR = FE0JW07.FE0JWFFR + FE0JW05.FE0JWFFR[sysVar.arrayIndex];
    end
    ;
  else /* ==================> not Beg mo EQ*/
                                   /* curr*/
    ;
    if (FE0JW03.FE0JWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FE0JW05.FE0JWFFR[sysVar.arrayIndex] = 0;
    else
      FFXREC.FFXNUMB = FE0JW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply last carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFQLCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFQLCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100;
                                   /* ===> (sale + carry over) * 100*/
      FE0JW05.FE0JWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FE0JW03.FE0JWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0JW05.FE0JWFFR[sysVar.arrayIndex]));
    end
    FE0JW05.FE0JMFFR[sysVar.arrayIndex] = mathLib.round(FE0JW05.FE0JWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0JW05.FE0JMFFR[sysVar.arrayIndex]));
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FE0JW07.FE0JWFFR = FE0JW07.FE0JWFFR + FE0JW05.FE0JWFFR[sysVar.arrayIndex];
    end
    ;
    ;
    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior 2nd month*/
    ;
    if (FE0JW03.FE0JWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FE0JW05.FE0JWFFR[sysVar.arrayIndex] = 0;
    else
      /* ====> apply other carry over QTYs*/
      FFXREC.FFXNUMB = FE0JW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply other carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFQOCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FE0JW01.FFQOCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100;
                                   /* ===> (sale + carry over) * 100*/
      FE0JW05.FE0JWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FE0JW03.FE0JWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0JW05.FE0JWFFR[sysVar.arrayIndex]));
    end
    FE0JW05.FE0JMFFR[sysVar.arrayIndex] = mathLib.round(FE0JW05.FE0JWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0JW05.FE0JMFFR[sysVar.arrayIndex]));
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FE0JW07.FE0JWFFR = FE0JW07.FE0JWFFR + FE0JW05.FE0JWFFR[sysVar.arrayIndex];
    end
    ;
    ;
    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* ===> Point to prior 3rd month*/
    ;
    while (sysVar.arrayIndex > 0) /* ===>until all prior to curr months*/
                                   /* processed*/
      ;
      if (FE0JW03.FE0JWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
        FE0JW05.FE0JWFFR[sysVar.arrayIndex] = 0;
      else
        FFXREC.FFXNUMB = FE0JW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
        /* ====> no carry over QTYs to apply*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100;
                                   /* ===> (sale + carry over) * 100*/
        FE0JW05.FE0JWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB /         FE0JW03.FE0JWTDT[sysVar.arrayIndex], -mathLib.decimals(FE0JW05.FE0JWFFR[sysVar.arrayIndex]));
      end
      FE0JW05.FE0JMFFR[sysVar.arrayIndex] = mathLib.round(FE0JW05.FE0JWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FE0JW05.FE0JMFFR[sysVar.arrayIndex]));
      if (sysVar.arrayIndex > 1) /* Not first column*/
        FE0JW07.FE0JWFFR = FE0JW07.FE0JWFFR + FE0JW05.FE0JWFFR[sysVar.arrayIndex];
      end
      sysVar.arrayIndex = sysVar.arrayIndex - 1; /* ===> Point to prior 3rd month*/
    end
    ;
  end
  ;
  ;
end // end FE0JS86

// Obtain alternate category
Function FE0JS90()
   /* ------------------------------------------------------------*/
   /* Select the product cross-reference table row.*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S90"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT PRODUCT CROSS-REFERENCE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0JS90

//*** RECORD=FE0JW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0JW00 type basicRecord
  10 FE0JWAIN FE0JWAIN ; 
  10 FE0JWASL FE0JWASL ; 
  10 FE0JWBEG FE0JWBEG ; 
  10 FE0JWSEA FE0JWSEA ; 
  10 FE0JWCOL FE0JWCOL ; 
  10 FE0JWEND FE0JWEND ; 
  10 FE0JWMAX FE0JWMAX ; 
  10 FE0JWSIX FE0JWSIX ; 
  10 FE0JWDIX FE0JWDIX ; 
  10 FE0JW-CAOV-IX FE0JW-CAOV-IX ; 
  10 FE0JW-MON-GAP FE0JW-MON-GAP ; 
  10 FE0JWDAT FE0JWDAT ; 
    15 FE0JWDYY FE0JWDYY ; 
    15 FE0JWDMM FE0JWDMM ; 
  10 FE0JWDIM FE0JWDIM ; 
  10 FE0JWDTD FE0JWDTD ; 
  10 FE0JWFMO FE0JWFMO ; 
  10 FE0JWHIN FE0JWHIN ; 
  10 FE0JWHOR FE0JWHOR ; 
  10 FE0JWHCF FE0JWHCF ; 
  10 FE0JWHDM FE0JWHDM ; 
  10 FE0JWHFU FE0JWHFU ; 
  10 FE0JWHPR FE0JWHPR ; 
  10 FE0JWIXC FE0JWIXC ; 
  10 FE0JWIXL FE0JWIXL ; 
  10 FE0JWIXP FE0JWIXP ; 
  10 FE0JWIXS FE0JWIXS ; 
  10 FE0JWPAD FE0JWPAD ; 
  10 FE0JWPAG FE0JWPAG ; 
  10 FE0JWPCT FE0JWPCT ; 
  10 FE0JWSWF FE0JWSWF ; 
  10 FE0JWSWC FE0JWSWC ; 
  10 FE0JWSW2 FE0JWSW2 ; 
  10 FE0JWSWR FE0JWSWR ; 
  10 FE0JWSWO FE0JWSWO [3] ; 
  10 FE0JWSWS FE0JWSWS ; 
  10 FE0JWSW1 FE0JWSW1 ; 
  10 FE0JWTFD FE0JWTFD ; 
  10 FE0JWTFI FE0JWTFI ; 
  10 FE0JWTUD FE0JWTUD ; 
  10 FE0JWTUI FE0JWTUI ; 
  10 FF2FUIND FF2FUIND ; 
  10 FF2PRIND FF2PRIND ; 
  10 FF2DMIND FF2DMIND ; 
  10 FF6BEINV FF6BEINV ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FE0JWSF FE0JWSF ; 
  10 FFWMSESN FFWMSESN ; 
  10 FFZINDMO FFZINDMO ; 
    15 * char(2) ; 
    15 FE0JWMON FE0JWMON ; 
  10 FH1PAQTY FH1PAQTY ; 
  10 FH1ALQTY FH1ALQTY ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 XDVCD XDVCD ; 
  10 XLCCD XLCCD ; 
  10 FFAENDMO FFAENDMO ; 
  10 FE0JWLVL FE0JWLVL ; 
  10 FE0JWEMO FE0JWEMO [4] ; 
  10 FE0JW-CURR FE0JW-CURR ; 
  10 FE0JWMIS FE0JWMIS [4] ; 
  10 FE0JWMSC FE0JWMSC ; 
  10 FF2NSEAS FF2NSEAS ; 
  10 FE0JWRSA FE0JWRSA ; 
  10 FE0JWLSA FE0JWLSA ; 
  10 FE0JWSCT FE0JWSCT ; 
  10 FE0JWEDM FE0JWEDM ; 
  10 FE0JWLDM FE0JWLDM ; 
  10 FE0JWCSF FE0JWCSF ; 
  10 FE0JWMDF FE0JWMDF ; 
  10 FE0JWXRF FE0JWXRF ; 
end // end FE0JW00

//*** RECORD=FE0JW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FE0JW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FFABEGMO FFABEGMO ; 
  10 FFQMBYMO FFQMBYMO ; 
  10 * char(1) ; 
  10 FE0JWCMO FE0JWCMO ; 
    15 * num(3) ; 
    15 FE0JWCCY FE0JWCCY ; 
    15 FE0JWCMM FE0JWCMM ; 
  10 * num(3) ; 
  10 FE0JWPMO FE0JWPMO ; 
    15 * num(3) ; 
    15 FE0JWPCY FE0JWPCY ; 
    15 FE0JWPMM FE0JWPMM ; 
  10 * num(3) ; 
  10 FFQCURMO FFQCURMO ; 
  10 FF2PRIND FF2PRIND ; 
  10 FFQLCOFU FFQLCOFU ; 
  10 FFQLCOPR FFQLCOPR ; 
  10 FFQOCOFU FFQOCOFU ; 
  10 FFQOCOPR FFQOCOPR ; 
  10 FF4FCTMO FF4FCTMO [61] ; 
  10 FE0JMMON FE0JMMON [61] ; 
  10 FE0JMSCT FE0JMSCT [61] ; 
  10 FE0JMBSF FE0JMBSF [61] ; 
  10 FE0JWFCO FE0JWFCO [61] ; 
  10 FE0JMFCO FE0JMFCO [61] ; 
  10 FE0JWPCO FE0JWPCO [61] ; 
  10 FE0JMPCO FE0JMPCO [61] ; 
  10 FFRPFUDM FFRPFUDM [61] ; 
  10 FE0JMFUP FE0JMFUP [61] ; 
  10 FFRAFUDM FFRAFUDM [61] ; 
  10 FE0JMFUA FE0JMFUA [61] ; 
  10 FFRIFUDM FFRIFUDM [61] ; 
  10 FE0JMFUI FE0JMFUI [61] ; 
  10 FFRCFUDM FFRCFUDM [61] ; 
  10 FE0JMFUC FE0JMFUC [61] ; 
  10 FE0JWFUT FE0JWFUT [61] ; 
  10 FE0JMFUT FE0JMFUT [61] ; 
  10 FFRPNFDM FFRPNFDM [61] ; 
  10 FE0JMNFP FE0JMNFP [61] ; 
  10 FFRANFDM FFRANFDM [61] ; 
  10 FE0JMNFA FE0JMNFA [61] ; 
  10 FFRINFDM FFRINFDM [61] ; 
  10 FE0JMNFI FE0JMNFI [61] ; 
  10 FFRCNFDM FFRCNFDM [61] ; 
  10 FE0JMNFC FE0JMNFC [61] ; 
  10 FE0JWNFT FE0JWNFT [61] ; 
  10 FE0JMNFT FE0JMNFT [61] ; 
end // end FE0JW01

//*** RECORD=FE0JW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record FE0JW02 type basicRecord
  10 FFRPPRDM FFRPPRDM [61] ; 
  10 FE0JMPRP FE0JMPRP [61] ; 
  10 FFRAPRDM FFRAPRDM [61] ; 
  10 FE0JMPRA FE0JMPRA [61] ; 
  10 FFRIPRDM FFRIPRDM [61] ; 
  10 FE0JMPRI FE0JMPRI [61] ; 
  10 FFRCPRDM FFRCPRDM [61] ; 
  10 FE0JMPRC FE0JMPRC [61] ; 
  10 FE0JWPRT FE0JWPRT [61] ; 
  10 FE0JMPRT FE0JMPRT [61] ; 
  10 FFRPNPDM FFRPNPDM [61] ; 
  10 FE0JMNPP FE0JMNPP [61] ; 
  10 FFRANPDM FFRANPDM [61] ; 
  10 FE0JMNPA FE0JMNPA [61] ; 
  10 FFRINPDM FFRINPDM [61] ; 
  10 FE0JMNPI FE0JMNPI [61] ; 
  10 FFRCNPDM FFRCNPDM [61] ; 
  10 FE0JMNPC FE0JMNPC [61] ; 
  10 FE0JWNPT FE0JWNPT [61] ; 
  10 FE0JMNPT FE0JMNPT [61] ; 
end // end FE0JW02

//*** RECORD=FE0JW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record FE0JW03 type basicRecord
  10 FE0JWTDP FE0JWTDP [61] ; 
  10 FE0JMTDP FE0JMTDP [61] ; 
  10 FE0JWTDA FE0JWTDA [61] ; 
  10 FE0JMTDA FE0JMTDA [61] ; 
  10 FE0JWTDI FE0JWTDI [61] ; 
  10 FE0JMTDI FE0JMTDI [61] ; 
  10 FE0JWTDC FE0JWTDC [61] ; 
  10 FE0JMTDC FE0JMTDC [61] ; 
  10 FE0JWTDT FE0JWTDT [61] ; 
  10 FE0JMTDT FE0JMTDT [61] ; 
  10 FE0JWCAP FE0JWCAP [61] ; 
  10 FE0JWTAF FE0JWTAF [61] ; 
  10 FE0JMTAF FE0JMTAF [61] ; 
  10 FE0JWTAP FE0JWTAP [61] ; 
  10 FE0JMTAP FE0JMTAP [61] ; 
end // end FE0JW03

//*** RECORD=FE0JW04 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record FE0JW04 type basicRecord
  10 FF2FUIND FF2FUIND ; 
  10 FE0JWDFU FE0JWDFU [61] ; 
  10 FE0JMDFU FE0JMDFU [61] ; 
  10 FE0JWDNF FE0JWDNF [61] ; 
  10 FE0JMDNF FE0JMDNF [61] ; 
  10 FE0JWDTF FE0JWDTF [61] ; 
  10 FE0JMDTF FE0JMDTF [61] ; 
  10 FE0JWDPR FE0JWDPR [61] ; 
  10 FE0JMDPR FE0JMDPR [61] ; 
  10 FE0JWDNP FE0JWDNP [61] ; 
  10 FE0JMDNP FE0JMDNP [61] ; 
  10 FE0JWDTP FE0JWDTP [61] ; 
  10 FE0JMDTP FE0JMDTP [61] ; 
  10 FE0JWDCP FE0JWDCP [61] ; 
  10 FE0JMDCP FE0JMDCP [61] ; 
  10 FFRCPRFC FFRCPRFC [61] ; 
  10 FE0JMPCF FE0JMPCF [61] ; 
  10 FF6PRPFC FF6PRPFC [61] ; 
  10 FE0JMPRF FE0JMPRF [61] ; 
  10 FE0JWDFF FE0JWDFF [61] ; 
  10 FE0JWDHF FE0JWDHF [61] ; 
  10 FE0JWDFI FE0JWDFI [61] ; 
  10 FE0JWDHI FE0JWDHI [61] ; 
  10 FE0JWHPR FE0JWHPR [61] ; 
end // end FE0JW04

//*** RECORD=FE0JW05 ****
// ------------------------
// Map 005 display storage.
// ------------------------
// ***********************
Record FE0JW05 type basicRecord
  10 FF2DMIND FF2DMIND ; 
  10 FFRCDMFC FFRCDMFC [61] ; 
  10 FE0JMFCD FE0JMFCD [61] ; 
  10 FE0JWMDM FE0JWMDM [61] ; 
  10 FE0JMMDM FE0JMMDM [61] ; 
  10 FF7RVFCT FF7RVFCT [61] ; 
  10 FE0JMRVF FE0JMRVF [61] ; 
  10 FE0JWHDM FE0JWHDM [61] ; 
  10 FE0JWFSI FE0JWFSI [61] ; 
  10 FE0JWHSI FE0JWHSI [61] ; 
  10 FE0JWRSI FE0JWRSI [61] ; 
  10 FE0JWFFR FE0JWFFR [61] ; 
  10 FE0JMFFR FE0JMFFR [61] ; 
  10 FE0JWHFR FE0JWHFR [61] ; 
  10 FH5MSHQT FH5MSHQT [61] ; 
  10 FE0JMCSF FE0JMCSF [61] ; 
  10 FF6SLFCT FF6SLFCT [61] ; 
  10 FE0JMMSL FE0JMMSL [61] ; 
end // end FE0JW05

//*** RECORD=FE0JW06 ****
// ------------------------
// Map 006 display storage.
// ------------------------
// ***********************
Record FE0JW06 type basicRecord
  10 FF6BEINV FF6BEINV [61] ; 
  10 FE0JMINB FE0JMINB [61] ; 
  10 FFRPRDDU FFRPRDDU [61] ; 
  10 FE0JMDUE FE0JMDUE [61] ; 
  10 FFRSUBBY FFRSUBBY [61] ; 
  10 FE0JMQBY FE0JMQBY [61] ; 
  10 FFRTENBY FFRTENBY [61] ; 
  10 FE0JMTBY FE0JMTBY [61] ; 
  10 FE0JWSUP FE0JWSUP [61] ; 
  10 FE0JMSUP FE0JMSUP [61] ; 
  10 FG4BALSH FG4BALSH [61] ; 
  10 FE0JMBAL FE0JMBAL [61] ; 
  10 FE0JWINE FE0JWINE [61] ; 
  10 FE0JMINE FE0JMINE [61] ; 
  10 FF6SFSTK FF6SFSTK [61] ; 
  10 FE0JMSTK FE0JMSTK [61] ; 
  10 FF6SUGBY FF6SUGBY [61] ; 
  10 FE0JMSBY FE0JMSBY [61] ; 
  10 FF6PRFCT FF6PRFCT [61] ; 
  10 FE0JMFCT FE0JMFCT [61] ; 
  10 FE0JWTUR FE0JWTUR [61] ; 
  10 FFRDIRSH FFRDIRSH [61] ; 
  10 FE0JMDIR FE0JMDIR [61] ; 
  10 FE0JWNIL FE0JWNIL [61] ; 
  10 FE0JMNIL FE0JMNIL [61] ; 
end // end FE0JW06

//*** RECORD=FE0JW07 ****
// -----------------
// Season subtotals.
// -----------------
// ***********************
Record FE0JW07 type basicRecord
  10 FFRPFUDM FFRPFUDM ; 
  10 FFRAFUDM FFRAFUDM ; 
  10 FFRIFUDM FFRIFUDM ; 
  10 FFRCFUDM FFRCFUDM ; 
  10 FE0JWFUT FE0JWFUT ; 
  10 FFRPNFDM FFRPNFDM ; 
  10 FFRANFDM FFRANFDM ; 
  10 FFRINFDM FFRINFDM ; 
  10 FFRCNFDM FFRCNFDM ; 
  10 FE0JWNFT FE0JWNFT ; 
  10 FFRPPRDM FFRPPRDM ; 
  10 FFRAPRDM FFRAPRDM ; 
  10 FFRIPRDM FFRIPRDM ; 
  10 FFRCPRDM FFRCPRDM ; 
  10 FE0JWPRT FE0JWPRT ; 
  10 FFRPNPDM FFRPNPDM ; 
  10 FFRANPDM FFRANPDM ; 
  10 FFRINPDM FFRINPDM ; 
  10 FFRCNPDM FFRCNPDM ; 
  10 FE0JWNPT FE0JWNPT ; 
  10 FE0JWTDP FE0JWTDP ; 
  10 FE0JWTDA FE0JWTDA ; 
  10 FE0JWTDI FE0JWTDI ; 
  10 FE0JWTDC FE0JWTDC ; 
  10 FE0JWTDT FE0JWTDT ; 
  10 FE0JWTAF FE0JWTAF ; 
  10 FE0JWTAP FE0JWTAP ; 
  10 FE0JWDFU FE0JWDFU ; 
  10 FE0JWDNF FE0JWDNF ; 
  10 FE0JWDTF FE0JWDTF ; 
  10 FE0JWDPR FE0JWDPR ; 
  10 FE0JWDNP FE0JWDNP ; 
  10 FE0JWDTP FE0JWDTP ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF6PRPFC FF6PRPFC ; 
  10 FE0JWHCF FE0JWHCF ; 
  10 FE0JWHDM FE0JWHDM ; 
  10 FE0JWHFU FE0JWHFU ; 
  10 FE0JWHPR FE0JWHPR ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FE0JWMDM FE0JWMDM ; 
  10 FF7RVFCT FF7RVFCT ; 
  10 FE0JWFFR FE0JWFFR ; 
  10 FE0JWHFR FE0JWHFR ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF6BEINV FF6BEINV ; 
  10 FFRPRDDU FFRPRDDU ; 
  10 FFRSUBBY FFRSUBBY ; 
  10 FFRTENBY FFRTENBY ; 
  10 FE0JWSUP FE0JWSUP ; 
  10 FG4BALSH FG4BALSH ; 
  10 FE0JWINE FE0JWINE ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FFRDIRSH FFRDIRSH ; 
  10 FE0JWNIL FE0JWNIL ; 
  10 FE0JWFRF FE0JWFRF ; 
  10 FE0JWNMO FE0JWNMO ; 
  10 FE0JWHIN FE0JWHIN ; 
  10 FE0JWHOR FE0JWHOR ; 
end // end FE0JW07

//*** RECORD=FE0JW08 ****
// ---------------------
// Product accum totals.
// ---------------------
// ***********************
Record FE0JW08 type basicRecord
  10 FFRPFUDM FFRPFUDM ; 
  10 FFRAFUDM FFRAFUDM ; 
  10 FFRIFUDM FFRIFUDM ; 
  10 FFRCFUDM FFRCFUDM ; 
  10 FE0JWFUT FE0JWFUT ; 
  10 FFRPNFDM FFRPNFDM ; 
  10 FFRANFDM FFRANFDM ; 
  10 FFRINFDM FFRINFDM ; 
  10 FFRCNFDM FFRCNFDM ; 
  10 FE0JWNFT FE0JWNFT ; 
  10 FFRPPRDM FFRPPRDM ; 
  10 FFRAPRDM FFRAPRDM ; 
  10 FFRIPRDM FFRIPRDM ; 
  10 FFRCPRDM FFRCPRDM ; 
  10 FE0JWPRT FE0JWPRT ; 
  10 FFRPNPDM FFRPNPDM ; 
  10 FFRANPDM FFRANPDM ; 
  10 FFRINPDM FFRINPDM ; 
  10 FFRCNPDM FFRCNPDM ; 
  10 FE0JWNPT FE0JWNPT ; 
  10 FE0JWTDP FE0JWTDP ; 
  10 FE0JWTDA FE0JWTDA ; 
  10 FE0JWTDI FE0JWTDI ; 
  10 FE0JWTDC FE0JWTDC ; 
  10 FE0JWTDT FE0JWTDT ; 
  10 FE0JWTAF FE0JWTAF ; 
  10 FE0JWTAP FE0JWTAP ; 
  10 FE0JWDFU FE0JWDFU ; 
  10 FE0JWDNF FE0JWDNF ; 
  10 FE0JWDTF FE0JWDTF ; 
  10 FE0JWDPR FE0JWDPR ; 
  10 FE0JWDNP FE0JWDNP ; 
  10 FE0JWDTP FE0JWDTP ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF6PRPFC FF6PRPFC ; 
  10 FE0JWHCF FE0JWHCF ; 
  10 FE0JWHDM FE0JWHDM ; 
  10 FE0JWHFU FE0JWHFU ; 
  10 FE0JWHPR FE0JWHPR ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FE0JWMDM FE0JWMDM ; 
  10 FF7RVFCT FF7RVFCT ; 
  10 FE0JWFFR FE0JWFFR ; 
  10 FE0JWHFR FE0JWHFR ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF6BEINV FF6BEINV ; 
  10 FFRPRDDU FFRPRDDU ; 
  10 FFRSUBBY FFRSUBBY ; 
  10 FFRTENBY FFRTENBY ; 
  10 FE0JWSUP FE0JWSUP ; 
  10 FG4BALSH FG4BALSH ; 
  10 FE0JWINE FE0JWINE ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FFRDIRSH FFRDIRSH ; 
  10 FE0JWNIL FE0JWNIL ; 
  10 FE0JWFRF FE0JWFRF ; 
  10 FE0JWNMO FE0JWNMO ; 
  10 FE0JWHIN FE0JWHIN ; 
  10 FE0JWHOR FE0JWHOR ; 
end // end FE0JW08

//*** RECORD=FE0JW09 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF1911 - Print Target Worksheet.
// ------------------------------------------------------------
// ***********************
Record FE0JW09 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 XPCCD XPCCD ; 
    10 FE0JWBGM FE0JWBGM ; 
    10 FF2NSEAS FF2NSEAS ; 
    10 FE0JWMIS FE0JWMIS [4] ; 
    10 FE0JWSEL FE0JWSEL ; 
    10 FE0JWCTP FE0JWCTP ; 
    10 * char(56) ; 
end // end FE0JW09

//*** RECORD=FE0JW10 ****
// ************ SHORT RANGE WORKSHEET HEADER TABLE ************
// 
// DB2 TABLE VIEW:       DFCAST.VSWHDR01
// 
// DCLGEN MEMBER:        DCL00645
// 
// I/O MODULE:           IO3810
// 
// KEY TO TABLE:         FFEWSNBR        (Primary)
// 
//                       XPCCD           (Alternate)
//                       YPGCD
//                       XWSCD
//                       FFABEGMO
//                       SY2SSCIN
//                       FFQMBYMO
// 
//                       SY1STNBR        (Alternate)
//                       SY2CLRID
//                       XDMCD
//                       XWSCD
//                       FFABEGMO
//                       SY2SSCIN
//                       FFQMBYMO
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// FF345     9/18/92  MDANGE  New record for second cursor
// ***********************
Record FE0JW10 type basicRecord
  5 FFQGROUP FFQGROUP ; 
    10 FFQKEY FFQKEY ; 
      15 FFEWSNBR FFEWSNBR ; 
    10 FFQKEY2 FFQKEY2 ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 SYBSTGNB SYBSTGNB ; 
      15 XPCCD XPCCD ; 
      15 YPGCD YPGCD ; 
      15 XPRCD XPRCD ; 
      15 XPLCD XPLCD ; 
      15 XLCCD XLCCD ; 
      15 XWSCD XWSCD ; 
      15 FFABEGMO FFABEGMO ; 
      15 SY2SSCIN SY2SSCIN ; 
      15 FFQMBYMO FFQMBYMO ; 
    10 FFQABYMO FFQABYMO ; 
    10 FFAENDMO FFAENDMO ; 
    10 FFQCURMO FFQCURMO ; 
    10 PG7MAXPR PG7MAXPR ; 
    10 FFQDMDDT FFQDMDDT ; 
    10 FFQLCOFU FFQLCOFU ; 
    10 FFQLCOPR FFQLCOPR ; 
    10 FFQLCOFP FFQLCOFP ; 
    10 FFQLCOPP FFQLCOPP ; 
    10 FFQOCOFU FFQOCOFU ; 
    10 FFQOCOPR FFQOCOPR ; 
    10 FFQOCOFP FFQOCOFP ; 
    10 FFQOCOPP FFQOCOPP ; 
    10 FF2FUIND FF2FUIND ; 
    10 FF2DMIND FF2DMIND ; 
    10 FF2PRIND FF2PRIND ; 
    10 FFQFCMFL FFQFCMFL ; 
    10 FFQSCMFL FFQSCMFL ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FE0JW10

//*** RECORD=FE0JW11 ****
// ************* SHORT RANGE WORKSHEET ITEM TABLE *************
// 
// DB2 TABLE VIEW:       DFCAST.VSWITM01
// 
// DCLGEN MEMBER:        DCL00646
// 
// I/O MODULE:           IO3820
// 
// KEY TO TABLE:         FFEWSNBR
//                       FF4FCTMO
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// FF345    09/18/92  MDANGE  New record for second cursor
// ***********************
Record FE0JW11 type basicRecord
  5 FFRGROUP FFRGROUP ; 
    10 FFRKEY FFRKEY ; 
      15 FFEWSNBR FFEWSNBR ; 
      15 FF4FCTMO FF4FCTMO ; 
    10 FFRPFUDM FFRPFUDM ; 
    10 FFRAFUDM FFRAFUDM ; 
    10 FFRIFUDM FFRIFUDM ; 
    10 FFRCFUDM FFRCFUDM ; 
    10 FFRPNFDM FFRPNFDM ; 
    10 FFRANFDM FFRANFDM ; 
    10 FFRINFDM FFRINFDM ; 
    10 FFRCNFDM FFRCNFDM ; 
    10 FFRPPRDM FFRPPRDM ; 
    10 FFRAPRDM FFRAPRDM ; 
    10 FFRIPRDM FFRIPRDM ; 
    10 FFRCPRDM FFRCPRDM ; 
    10 FFRPNPDM FFRPNPDM ; 
    10 FFRANPDM FFRANPDM ; 
    10 FFRINPDM FFRINPDM ; 
    10 FFRCNPDM FFRCNPDM ; 
    10 FFRCPRFC FFRCPRFC ; 
    10 FFRCDMFC FFRCDMFC ; 
    10 FF7FLLRT FF7FLLRT ; 
    10 FF6BEINV FF6BEINV ; 
    10 FF6SUGBY FF6SUGBY ; 
    10 FFRPRDDU FFRPRDDU ; 
    10 FFRSUBBY FFRSUBBY ; 
    10 FFRTENBY FFRTENBY ; 
    10 FFRDIRSH FFRDIRSH ; 
    10 FF6SFSTK FF6SFSTK ; 
    10 FFRSSFCT FFRSSFCT ; 
    10 FG4BALSH FG4BALSH ; 
    10 FF7FURAT FF7FURAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FE0JW11

// FF_BAL_TO_SHP
DataItem FE0JMBAL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Begin screen flag
DataItem FE0JMBSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fh-mo-shp-qty
DataItem FE0JMCSF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// CALC PROP FCST
DataItem FE0JMDCP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUT DMD
DataItem FE0JMDFU char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_DIRSHP_QTY
DataItem FE0JMDIR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL FUT
DataItem FE0JMDNF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL PROP
DataItem FE0JMDNP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP DMD
DataItem FE0JMDPR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL FUT
DataItem FE0JMDTF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL PROP
DataItem FE0JMDTP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRDCTN_DUE
DataItem FE0JMDUE char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CURR_DMD_FCST
DataItem FE0JMFCD char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES CARRYOVER
DataItem FE0JMFCO char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRDCTN_FCST
DataItem FE0JMFCT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FCST FILL RT
DataItem FE0JMFFR num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_FUTR_DMD
DataItem FE0JMFUA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_FUTR_DMD
DataItem FE0JMFUC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_FUTR_DMD
DataItem FE0JMFUI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_FUTR_DMD
DataItem FE0JMFUP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES TOT NET BKGS
DataItem FE0JMFUT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_BEG_INV
DataItem FE0JMINB char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// END INVENTORY
DataItem FE0JMINE char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// MSTR DMD FCST
DataItem FE0JMMDM char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Individual month YYMM
DataItem FE0JMMON char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SLS_FCST
DataItem FE0JMMSL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_NATL_FDMD
DataItem FE0JMNFA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_NATL_FDMD
DataItem FE0JMNFC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_NATL_FDMD
DataItem FE0JMNFI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_NATL_FDMD
DataItem FE0JMNFP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL ACCT FUT TOT NET BKGS
DataItem FE0JMNFT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NIL PRODUCTION
DataItem FE0JMNIL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_NATL_PDMD
DataItem FE0JMNPA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_NATL_PDMD
DataItem FE0JMNPC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_NATL_PDMD
DataItem FE0JMNPI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_NATL_PDMD
DataItem FE0JMNPP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL ACCT PROP TOT NET BKGS
DataItem FE0JMNPT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CURR_PROP_FCST
DataItem FE0JMPCF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP CARRYOVER
DataItem FE0JMPCO char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_PROP_DMD
DataItem FE0JMPRA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_PROP_DMD
DataItem FE0JMPRC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PROP_FCST
DataItem FE0JMPRF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_PROP_DMD
DataItem FE0JMPRI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_PROP_DMD
DataItem FE0JMPRP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP TOT NET BKGS
DataItem FE0JMPRT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SBMT_QTB
DataItem FE0JMQBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_RVSE_DMD_FCST
DataItem FE0JMRVF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SUGG_QTB
DataItem FE0JMSBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Season counter
DataItem FE0JMSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_SFTY_STK
DataItem FE0JMSTK char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// SUPPLY
DataItem FE0JMSUP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE FUT
DataItem FE0JMTAF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE PROP
DataItem FE0JMTAP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_TNTV_QTB
DataItem FE0JMTBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND ALLOCATED
DataItem FE0JMTDA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND CANCELLED
DataItem FE0JMTDC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND INVOICED
DataItem FE0JMTDI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND PRE-ALLOC
DataItem FE0JMTDP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND TOT NET BKGS
DataItem FE0JMTDT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Carryover index
DataItem FE0JW-CAOV-IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current month
DataItem FE0JW-CURR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// # of mo before cur mo in sesn
DataItem FE0JW-MON-GAP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Average inventory work area
DataItem FE0JWAIN bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Average sales work area
DataItem FE0JWASL bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning column number
DataItem FE0JWBEG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// begin month
DataItem FE0JWBGM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CANCELLATION %
DataItem FE0JWCAP decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_CONTP_MO "CCYY" re-formated
DataItem FE0JWCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_CONTP_MO  "MM"  re-formated
DataItem FE0JWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_CONTP_MO        re-formated
DataItem FE0JWCMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current column number
DataItem FE0JWCOL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current sales forecast work
DataItem FE0JWCSF num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Combine types flag
DataItem FE0JWCTP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date work area
DataItem FE0JWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CALC PROP FCST
DataItem FE0JWDCP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST FUT %
DataItem FE0JWDFF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST PROP IDX
DataItem FE0JWDFI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUT DMD
DataItem FE0JWDFU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST FUT %
DataItem FE0JWDHF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST PROP IDX
DataItem FE0JWDHI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working days in month
DataItem FE0JWDIM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Decrement index
DataItem FE0JWDIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work month
DataItem FE0JWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL FUT
DataItem FE0JWDNF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NATL PROP
DataItem FE0JWDNP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PROP DMD
DataItem FE0JWDPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working days to date
DataItem FE0JWDTD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL FUT
DataItem FE0JWDTF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL PROP
DataItem FE0JWDTP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Date work year
DataItem FE0JWDYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End data month
DataItem FE0JWEDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season end ccyymm
DataItem FE0JWEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending column number
DataItem FE0JWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES CARRYOVER
DataItem FE0JWFCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST FILL RT
DataItem FE0JWFFR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of months formatted
DataItem FE0JWFMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Futr rto futures
DataItem FE0JWFRF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCST SEAS IDX
DataItem FE0JWFSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES TOT NET BKGS
DataItem FE0JWFUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Historical combined by futures
DataItem FE0JWHCF bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical demand quantity
DataItem FE0JWHDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST FILL RT
DataItem FE0JWHFR decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Historical futures quantity
DataItem FE0JWHFU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical invoiced quantity
DataItem FE0JWHIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical ordered quantity
DataItem FE0JWHOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical prop quantity
DataItem FE0JWHPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST SEAS IDX
DataItem FE0JWHSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// END INVENTORY
DataItem FE0JWINE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map columns
DataItem FE0JWIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map lines
DataItem FE0JWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for prior months
DataItem FE0JWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for subsequent months
DataItem FE0JWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Last displayed month
DataItem FE0JWLDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Left scroll amount
DataItem FE0JWLSA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Summary level
DataItem FE0JWLVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maximum beginning column
DataItem FE0JWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// master demand forecast work
DataItem FE0JWMDF num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MSTR DMD FCST
DataItem FE0JWMDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Months in season
DataItem FE0JWMIS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Individual month YYMM
DataItem FE0JWMON char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Months in sesn counter
DataItem FE0JWMSC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL ACCT FUT TOT NET BKGS
DataItem FE0JWNFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NIL PRODUCTION
DataItem FE0JWNIL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of months for averaging
DataItem FE0JWNMO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL ACCT PROP TOT NET BKGS
DataItem FE0JWNPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Page direction
DataItem FE0JWPAD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page number
DataItem FE0JWPAG num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROP CARRYOVER
DataItem FE0JWPCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Percent calculation work area
DataItem FE0JWPCT bin(18,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO "CCYY"
DataItem FE0JWPCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO  "MM"
DataItem FE0JWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO
DataItem FE0JWPMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PROP TOT NET BKGS
DataItem FE0JWPRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Right scroll amount
DataItem FE0JWRSA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REVD SEAS IDX
DataItem FE0JWRSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Season counter
DataItem FE0JWSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current season shown
DataItem FE0JWSEA num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Menu selection number
DataItem FE0JWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save FF_SLS_FCST (Prior mo)
DataItem FE0JWSF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season index
DataItem FE0JWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUPPLY
DataItem FE0JWSUP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// First time through switch
DataItem FE0JWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VFFXRF01 cursor EOF switch
DataItem FE0JWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summary Cursor EOF Switch
DataItem FE0JWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0JWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Rqst for data switch each year
DataItem FE0JWSWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FE0JWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First season switch
DataItem FE0JWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE FUT
DataItem FE0JWTAF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE PROP
DataItem FE0JWTAP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND ALLOCATED
DataItem FE0JWTDA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND CANCELLED
DataItem FE0JWTDC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND INVOICED
DataItem FE0JWTDI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND PRE-ALLOC
DataItem FE0JWTDP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND TOT NET BKGS
DataItem FE0JWTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total frozen demand
DataItem FE0JWTFD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total frozen indices
DataItem FE0JWTFI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total unfrozen demand
DataItem FE0JWTUD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total unfrozen indices
DataItem FE0JWTUI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INV TURNS
DataItem FE0JWTUR decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cross reference EOF flag
DataItem FE0JWXRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

