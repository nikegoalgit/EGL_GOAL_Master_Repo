package fe0a;

import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS12;
import corpcom4.XSFFS14;
import corpcom4.XSFFS20;
import corpcom4.XSFFS30;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPLTBL;
import corpx2.XPCCD;
import corpx2.XPLABRV;
import corpx2.XPLCD;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import corpy2.YSMXDV;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ff.common.*;
import fh.common.FHBREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FE0A ****
// This application displays a list of product lines and their
// production fcsts.
// 
// The user must specify the 'DATE RANGE', 'TYPE', and 'DIVI-
// SION GROUP'. The program will bring back a list of all
// lines, meeting the specifications. zeroes will be displayed
// if no fcsts are found. The total of all line fcsts per month
// will be accumulated. The total will appear on every page and
// will be the same. (This refers to the entire set of lines.)
// 
// If the user doesn't know the code for the 'TYPE' he wishes
// to use, he can enter a '?' to ask for help.  The program
// will bring up a pop-up window to show all the 'TYPES', then
// the user can select the correct code from there.
// 
// The user may scroll forward and backward to view all lines
// by pressing PF7 and PF8.  He may exit to any allowed appli-
// cation, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/30/89  cnewma  New application.
// ff2031   08/31/90  cross   allow for nil and * division
// FF2038   09/27/90  RHETRI  Allow "*" in type
// FF       06/28/91  MDANGE  For NIL processing, check month
//                            if LE buy month use '0000' to
//                            obtain NIL production order qty.
// FF2040   09/06/91  MDANGE  Obtain actual PO qty from DFHIST.
//                            VWHCAT01 for months less than the
//                            buy month.
// FF333    08/12/92  MDANGE  Obtain actual PO qty from DFHIST.
//                            VWHCAT01 for months less than the
//                            current month.
// FF175    12/12/96  DSMITH  Changed the date range fill
//                            character to '0' - also corrected
//                            fe0a125 to increment century
//                            instead of year.
// *********************
Program FE0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0AW00 FE0AW00; // record
  FE0AW01 FE0AW01; // record
  FE0AW02 FE0AW02; // record
  FE0AW03 FE0AW03; // record
  FE0AW04 FE0AW04; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FHBREC FHBREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use FE0AM.FE0AM001, // form
  		FE0AM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FE0AM001 initial; /* M001 input/output*/
    set FE0AW00 empty; /* Working storage*/
    set FE0AW01 empty; /* M001 display storage*/
    set FE0AW02 empty; /* Mask for M001 storage*/
    set FE0AW03 empty; /* Totals for display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FE0AW00.FE0AWSWF = "Y"; /* Format the map flag*/
    FE0AW00.FE0AWSWR = "N"; /* Request for data flag*/
    FFWREC.XCTCD = "USA"; /* initialize country code*/
    ;
     /* ------------------------------------------------------------*/
     /* If type is missing, default it to '01'.*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ") /* type group code not passed*/
      FFWREC.YPGCD = "01"; /* default to '01'*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* If complete key is present, request data.*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO > 0 /* Beginning month passed*/
     && FFWREC.FFAENDMO > 0 /* and ending month passed*/
     && FFWREC.YPGCD != " " /* and type group code passed*/
     && FFWREC.YSMXDV != " ") /* and div code passed*/
      ;
      FE0AW00.FE0AWSWR = "Y"; /* Request data*/
      ;
    else
      ;
      FE0AW00.FE0AWSWR = "N"; /* data not requested*/
      ;
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0A001; /* Converse the main process*/
    ;
    ;
    FE0A001: FE0A001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0A001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FE0A

// Main process to display a map
Function FE0A001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0A100(); /* Obtain the data to display*/
  ;
  FE0A200(); /* Format and display the map*/
  ;
  FE0A300(); /* Check attention identifier*/
  ;
  FE0A400(); /* Reset fields to normal intensity*/
  ;
  FE0A500(); /* Verify the entered data*/
  ;
  FE0A600(); /* Process valid input request*/
  ;
  ;
end // end FE0A001

// Obtain the data to display
Function FE0A100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AW00.FE0AWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FE0AW00.XXXTSLEN = 966; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FE0A110(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Expand date range to set of YYMMs.*/
   /* ------------------------------------------------------------*/
  ;
  FE0A120(); /* Expand dates*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the buy month and current month*/
   /* ------------------------------------------------------------*/
  ;
  FE0A125(); /* Calculate the buy month*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain data for lines.*/
   /* ------------------------------------------------------------*/
  ;
  FE0A130(); /* Open FFXRF*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  while (FE0AW00.FE0AWSWC == "N") /* Until end of cursor*/
    ;
    FE0A140(); /* Fetch FFXRF*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Line was found*/
      ;
      FE0A150(); /* Obtain and process MLTYP data*/
      ;
      /* ------------------------------------------------------------*/
       /* Save data in display storage.*/
      /* ------------------------------------------------------------*/
      ;
      FE0A160(); /* Save data*/
      ;
      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      ;
      if (FE0AW00.FE0AWIXM > 13) /* Page is full*/
        FE0A170(); /* Add page to temporary storage*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for DFCAST.VFFXRF01.*/
   /* ------------------------------------------------------------*/
  ;
  FE0A180(); /* Close FFXRF*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AW00.FE0AWIXM > 1) /* Page was formatted*/
    FE0A170(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  else
    ;
    FE0AW00.XXXTSPAG = 1; /* Desired page number*/
    ;
    /* ------------------------------------------------------------*/
     /* Translate totals, Obtain MONTH targets & calculate variance*/
    /* ------------------------------------------------------------*/
    ;
    FE0A190(); /* Obtain totals*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FE0AW00.FE0AWSWR = "N"; /* Request for data switch*/
  ;
  ;
end // end FE0A100

// Purge any temporary storage
Function FE0A110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0AW01 empty; /* M001 display storage*/
  set FE0AW02 empty; /* Mask for map display fields*/
  set FE0AW03 empty; /* Storage for totals*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FE0AW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FE0AW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A110

// Expand date range to YYMMs
Function FE0A120()
   /* ------------------------------------------------------------*/
   /* Call XSFFS30 to expand date range.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FFWREC.FFAENDMO; /* Ending date*/
  ;
  XSFFS30(); /* Verify the range*/
  ;
  FE0AW03.FE0AWNBM = FFZREC.FFZNUMMO; /* Hold number of months*/
  ;
  ;
end // end FE0A120

// Calculate the buy and curr
Function FE0A125()
   /* ------------------------------------------------------------*/
     /* Buy month calculation , stored in fe0aW00.fe0aWybd*/
   /* ------------------------------------------------------------*/
  ;
  FE0A126(); /* get futures cutoff date*/
  ;
  FE0AW00.FE0AWDT1 = FF1REC.FF1FUTDT;
  ;
  FE0AW00.FE0AWMM1 = FE0AW00.FE0AWMM1 + 5;
  if (FE0AW00.FE0AWMM1 > 12)
    FE0AW00.FE0AWMM1 = FE0AW00.FE0AWMM1 - 12;
    if (FE0AW00.FE0AWYY1 == 99)
      FE0AW00.FE0AWCC1 = FE0AW00.FE0AWCC1 + 1;
  /* FE0AW00.FE0AWYY1 = FE0AW00.FE0AWYY1 + 1;/* dsmith*/
      FE0AW00.FE0AWYY1 = 00;
    else
      FE0AW00.FE0AWYY1 = FE0AW00.FE0AWYY1 + 1;
    end
  end
  ;
  FE0AW00.FE0AWBYD = FE0AW00.FE0AWCY1; /* buy month date*/
   /* ------------------------------------------------------------*/
     /* Curr month calculation , stored in fe0aW00.fe0awcdt*/
   /* ------------------------------------------------------------*/
  ;
  if (FF1REC.FF1IVCDT != 0) /* ===> Invoice cutoff date*/
    FE0AW00.FE0AWDT1 = FF1REC.FF1IVCDT;
    ;
    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* ===> curr >  ivc date*/
      FE0AW00.FE0AWCDT = FE0AW00.FE0AWCY1;
    else
      ;
      if (FE0AW00.FE0AWMM1 == 1)
        FE0AW00.FE0AWMM1 = 12;
        ;
        if (FE0AW00.FE0AWYY1 == 0)
          FE0AW00.FE0AWYY1 = 99;
          FE0AW00.FE0AWCC1 = FE0AW00.FE0AWCC1 - 1;
          FE0AW00.FE0AWCDT = FE0AW00.FE0AWCY1;
        else
          FE0AW00.FE0AWYY1 = FE0AW00.FE0AWYY1 - 1;
          FE0AW00.FE0AWCDT = FE0AW00.FE0AWCY1;
        end
        ;
      else
        FE0AW00.FE0AWMM1 = FE0AW00.FE0AWMM1 - 1;
        FE0AW00.FE0AWCDT = FE0AW00.FE0AWCY1;
      end
      ;
    end
  else
    FE0AW00.FE0AWCDT = 0;
  end
  ;
end // end FE0A125

// Get futures cutoff date
Function FE0A126()
  ;
  set FF1REC empty; /* Clear up the storage row*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "126"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A126

// Open FFXRF
Function FE0A130()
   /* ------------------------------------------------------------*/
   /* Open cursor for FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
   /* always use div=10, since set up that way for all divisions*/
  FF2REC.YSMXDV = "10"; /* Division group*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type*/
  ;
  try
    call "IO4000" ("S3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FE0AW00.FE0AWIXM = 1; /* Display line index*/
    FE0AW00.FE0AWSWC = "N"; /* End of cursor switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A130

// Fetch FFXRF
Function FE0A140()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FE0AW00.FE0AWSWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A140

// Obtain forecasts for display
Function FE0A150()
   /* ------------------------------------------------------------*/
   /* Clear work fields.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0AW02 empty; /* clear line work fields*/
  ;
   /* ------------------------------------------------------------*/
   /* Loop through months in range.*/
   /* ------------------------------------------------------------*/
  ;
  FE0AW00.FE0AWCNT = 1; /* set counter*/
  while (FE0AW00.FE0AWCNT <= FFZREC.FFZNUMMO) /* count LE nbr mos*/
    ;
    FE0AW02.FE0AWLNS = 0; /* reset line total for month*/
    if (FFZREC.FFZINDMO[FE0AWCNT] < FE0AW00.FE0AWCDT) /* lt curr mon*/
      FE0A151(); /* get actual po qty from*/
                                   /* DFHIST.VWHCAT01*/
    else
      FE0A152(); /* get prod forecast from VMCAT001*/
    end
    ;
    /* translate total for line*/
    ;
    FFXREC.FFXNUMB = FE0AW02.FE0AWLNS; /* Load work field*/
    FE0AS01(); /* translate numbers add to totals*/
    ;
    FE0AW00.FE0AWCNT = FE0AW00.FE0AWCNT + 1; /* add 1 to counter*/
  end
  ;
  FFXREC.FFXNUMB = FE0AW02.FE0AWLNT; /* Load work field*/
  ;
  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/
    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    XSFFS14(); /* Translation number*/
  end
  ;
  FE0AW02.FE0AWAMT[FE0AWCNT] = FFXREC.FFXCHAR; /* Line total*/
end // end FE0A150

// Get actual PO qty VWHCAT01
Function FE0A151()
   /* ------------------------------------------------------------*/
   /* Open FFXRF for list of categories.*/
   /* ------------------------------------------------------------*/
  FE0A154(); /* Open FFXRF*/
  ;
   /* ------------------------------------------------------------*/
   /* Loop until no more categories.*/
   /* ------------------------------------------------------------*/
  while (FE0AW00.FE0AWSW2 == "N") /* Until end of cursor*/
    ;
    FE0A155(); /* Fetch FFXRF*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Line was found*/
      FE0A158(); /* Obtain DFHIST.VWHCAT01*/
    end
  end
  ;
  FE0A156(); /* Close FFXRF*/
  ;
end // end FE0A151

// Get Prod Fcst DFCAST.VMCAT001
Function FE0A152()
   /* ------------------------------------------------------------*/
   /* Open FFXRF for list of categories.*/
   /* ------------------------------------------------------------*/
  FE0A154(); /* Open FFXRF*/
  ;
   /* ------------------------------------------------------------*/
   /* Loop until no more categories.*/
   /* ------------------------------------------------------------*/
  while (FE0AW00.FE0AWSW2 == "N") /* Until end of cursor*/
    ;
    FE0A155(); /* Fetch FFXRF*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Line was found*/
      FE0A153(); /* Obtain and process Cat Fcst data*/
    end
  end
  ;
  FE0A156(); /* Close FFXRF*/
  ;
  ;
end // end FE0A152

// Obtain mcat qtys
Function FE0A153()
   /* Obtain Cat production forecast quantity from VMCAT001*/
  ;
  set FF7REC empty;
  set FFFREC empty;
     /* Format keys.*/
  FF7REC.XPCCD = FE0AW04.XPCCD; /* category code*/
  FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FE0AWCNT]; /* lo-mth*/
  FFFREC.FFFENDMO = FFZREC.FFZINDMO[FE0AWCNT]; /* hi-mth*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  if (FFWREC.YSMXDV == "20")
    FF7REC.YSMXDV = "20"; /* div group code*/
    FF7REC.XCTCD = "*"; /* wildcard country code*/
    FE0A157(); /* Select MCAT*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FE0AW02.FE0AWLNS = FE0AW02.FE0AWLNS + FF7REC.FF6PRFCT;
    end
  end
  ;
  if (FFWREC.YSMXDV == "*")
    FF7REC.YSMXDV = "20"; /* div group code*/
    FF7REC.XCTCD = "*"; /* wildcard country code*/
    FE0A157(); /* Select MCAT*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FE0AW02.FE0AWLNS = FE0AW02.FE0AWLNS + FF7REC.FF6PRFCT;
    end
    ;
    FF7REC.YSMXDV = "10"; /* div group code*/
    FF7REC.XCTCD = "USA";
    FE0A157(); /* Select MCAT*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FE0AW02.FE0AWLNS = FE0AW02.FE0AWLNS + FF7REC.FF6PRFCT;
    end
  end
  ;
  if (FFWREC.YSMXDV == "10")
    FF7REC.YSMXDV = "10"; /* div group code*/
    FF7REC.XCTCD = "USA"; /* wildcard country code*/
    FE0A157(); /* Select MCAT*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FE0AW02.FE0AWLNS = FE0AW02.FE0AWLNS + FF7REC.FF6PRFCT;
    end
  end
end // end FE0A153

// Open FFXRF
Function FE0A154()
   /* ------------------------------------------------------------*/
   /* Open cursor for FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0AW04 empty; /* Clear row storage area*/
  ;
   /* always use div=10, since tbl is set up*/
     /* with div=10 for all rows - dom and nil*/
  FE0AW04.YSMXDV = "10"; /* Division group*/
  FE0AW04.XPLCD = FF2REC.XPLCD; /* Line*/
  FE0AW04.YPGCD = FFWREC.YPGCD; /* Type*/
  ;
  try
    call "IO4000" ("S2", SQLCA, FE0AW04) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FE0AW00.FE0AWSW2 = "N"; /* End of cursor switch*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "154"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FE0AW04.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A154

// Fetch FFXRF
Function FE0A155()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N2", SQLCA, FE0AW04) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FE0AW00.FE0AWSW2 = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "155"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FE0AW04.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A155

// Close FFXRF
Function FE0A156()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C2", SQLCA, FE0AW04) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "156"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A156

// Select MCAT
Function FE0A157()
   /* ------------------------------------------------------------*/
   /* Select and Sum Cat fcst from MCAT*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS";
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, save data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -305) /* null value on sum*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "157"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A157

// Obtain DFHIST.VWHCAT01 qtys
Function FE0A158()
   /* ------------------------------------------------------------*/
   /* Obtain actual PO qty from DFHIST.VWHCAT01*/
   /* ------------------------------------------------------------*/
  ;
  set FHBREC empty;
  ;
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  ;
  FHBREC.XQACD = "01"; /* quality code*/
  FHBREC.XPCCD = FE0AW04.XPCCD; /* category code*/
  FHBREC.FH7INVDT = FFZREC.FFZINDMO[FE0AWCNT]; /* date*/
  FHBREC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FHBREC.YSMXDV = FFWREC.YSMXDV; /* div group code*/
  FE0A159(); /* Select VWHCAT01*/
  ;
   /* ------------------------------------------------------------*/
   /* If row found, add to line total field*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    ;
    FE0AW02.FE0AWLNS = FE0AW02.FE0AWLNS + FHBREC.FH7MOPRQ;
                                                         /* add to line tot*/
    ;
  end
  ;
end // end FE0A158

// Select DFHIST.VWHCAT01
Function FE0A159()
   /* ------------------------------------------------------------*/
   /* Select Actual PO qty from DFHIST.VWHCAT01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5970" ("SS", SQLCA, FHBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, save data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -305) /* null value on sum*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "159"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHACT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FHBREC.FHBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A159

// Save data in display storage
Function FE0A160()
   /* ------------------------------------------------------------*/
   /* If first line on page, save beginning and ending months.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AW00.FE0AWIXM == 1) /* First line on page*/
    ;
    FE0AW01.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning month*/
    FE0AW01.FFZEYYMM = FFWREC.FFAENDMO; /* Ending month*/
    ;
    FE0AW00.FE0AWCNT = 1; /* Set counter to 1*/
    while (FE0AW00.FE0AWCNT <= FFZREC.FFZNUMMO) /* While counter LE nbr mos*/
      ;
      FE0AW01.FFZIYYMM[FE0AWCNT] = FFZREC.FFZIYYMM[FE0AWCNT];
      FE0AW00.FE0AWCNT = FE0AW00.FE0AWCNT + 1; /* Add 1 to counter*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AW00.FE0AWSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  XPLREC.XPLCD = FF2REC.XPLCD; /* Format xpl key*/
  XPLREC.XGPCD = COMMAREA.XGPCD; /* Format xpl key*/
  if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
    FE0AW01.XPLABRV[FE0AWIXM] = XPLTBL.XPLABRV[sysVar.arrayIndex];
  end
  ;
  FE0AW01.FE0AWLIN[FE0AWIXM] = FE0AW02.FE0AWMSK; /* Line mask to map*/
  ;
  FE0AW00.FE0AWIXM = FE0AW00.FE0AWIXM + 1; /* Increment line index*/
  ;
  ;
end // end FE0A160

// Add page to temporary storage
Function FE0A170()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0AW01.XXXTSLEN = FE0AW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FE0AW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FE0AW01 empty; /* M001 display storage*/
    ;
    FE0AW00.FE0AWIXM = 1; /* Display line index*/
    ;
    FE0AW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "170"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A170

// Close FFXRF
Function FE0A180()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "180"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A180

// Translate Totals
Function FE0A190()
   /* ------------------------------------------------------------*/
   /* Move Totals*/
   /* ------------------------------------------------------------*/
  ;
  FE0AW00.FE0AWCNT = 1; /* set counter*/
  ;
  while (FE0AW00.FE0AWCNT <= FFZREC.FFZNUMMO) /* count LE nbr mos*/
    ;
    /* ------------------------------------------------------------*/
     /* Translate TOTALS.*/
    /* ------------------------------------------------------------*/
    ;
    FFXREC.FFXNUMB = FE0AW03.FE0AWCLT[FE0AWCNT]; /* Load field*/
    ;
    if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
     || FFXREC.FFXNUMB <= -1000000) /* Use millions*/
      ;
      XSFFS12(); /* Translation number*/
      ;
    else /* Use thousands*/
      ;
      XSFFS14(); /* Translation number*/
      ;
    end
    ;
    FE0AW03.FE0AWTOT[FE0AWCNT] = FFXREC.FFXCHAR; /* Load tot amt*/
    ;
    FE0AW03.FE0AWTTA = FE0AW03.FE0AWTTA + FFXREC.FFXNUMB; /* accm TOT grd tot*/
    ;
    /* ------------------------------------------------------------*/
     /* Add one to counter.*/
    /* ------------------------------------------------------------*/
    ;
    FE0AW00.FE0AWCNT = FE0AW00.FE0AWCNT + 1; /* add 1 to counter*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Translate and load Grand TOTAL.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FE0AW03.FE0AWTTA; /* Load translation fld*/
  ;
  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FE0AW03.FE0AWTOT[FE0AWCNT] = FFXREC.FFXCHAR; /* Load amt*/
  ;
  ;
end // end FE0A190

// Format and converse the map
Function FE0A200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AW00.FE0AWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FE0AW00.FE0AWSWF == "Y") /* Map must be formatted*/
      FE0A210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0AM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0AM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0AM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FE0AM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FE0AM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0AM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FE0AM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0AM001.CAITEM; /* Application data*/
  ;
  ;
end // end FE0A200

// Format the display data
Function FE0A210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0AM001 initial; /* M001 input/output area*/
  ;
  FE0AW00.FE0AWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FE0AW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FE0AW00.XXXTSPAG > FE0AW00.TA5TSQIX) /* Desired greater highest*/
        FE0AW00.XXXTSPAG = FE0AW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FE0A211(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FE0AM001.XXXLITPG skip; /* "PAGE" literal*/
    FE0AM001.XXXTSPAG = FE0AW00.XXXTSPAG; /* Current page*/
    set FE0AM001.XXXLITOF skip; /* "OF" literal*/
    FE0AM001.TA5TSQIX = FE0AW00.TA5TSQIX; /* Highest page*/
    ;
    set FE0AM001.FE0AMNMA skip; /* make 'TOTAL' visable*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0AM001.FFZBYYMM = FE0AW01.FFZBYYMM; /* Beginning month*/
  FE0AM001.FFZEYYMM = FE0AW01.FFZEYYMM; /* Ending month*/
  ;
  FE0AM001.YPGCD = FFWREC.YPGCD; /* Type*/
  FE0AM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  FE0AM001.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  FE0AM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Abbreviation*/
  ;
  FE0AW00.FE0AWIXM = 1; /* Initialize line index*/
  while (FE0AW00.FE0AWIXM <= 13 /* Until screen is full*/
   && FE0AW01.XPLABRV[FE0AWIXM] > " ") /* and line exists*/
    ;
    FE0AM001.XPLABRV[FE0AWIXM] = FE0AW01.XPLABRV[FE0AWIXM];
    FE0AM001.FE0AMLIN[FE0AWIXM] = FE0AW01.FE0AWLIN[FE0AWIXM];
    ;
    FE0AW00.FE0AWIXM = FE0AW00.FE0AWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  FE0AW00.FE0AWCNT = 1; /* Initialize counter*/
  while (FE0AW00.FE0AWCNT <= FE0AW03.FE0AWNBM) /* while cnt LE nbr mos*/
    ;
    FE0AM001.FE0AMRMO[FE0AWCNT] = FE0AW01.FFZIYYMM[FE0AWCNT];
    ;
    FE0AM001.FE0AMTOT[FE0AWCNT] = FE0AW03.FE0AWTOT[FE0AWCNT];
    ;
    FE0AW00.FE0AWCNT = FE0AW00.FE0AWCNT + 1; /* Increment line index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Move one more set past ffznummo to pick up the totals.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AW03.FE0AWNBM > 0) /* If any months exist*/
    ;
    FE0AM001.FE0AMRMO[FE0AWCNT] = "TOTL"; /* Load "TOTL" to header*/
    ;
    FE0AM001.FE0AMTOT[FE0AWCNT] = FE0AW03.FE0AWTOT[FE0AWCNT];
    ;
  end
  ;
end // end FE0A210

// Obtain TSQ Record
Function FE0A211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0AW01.XXXTSLEN = FE0AW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FE0AW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FE0AW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A211

// Check attention identifier
Function FE0A300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FE0AW00.FE0AWSWR == "Y") /* Request for data*/
      set FE0AW01 empty; /* M001 display storage*/
    end
    ;
    FE0AW00.FE0AWSWF = "Y"; /* Format the map switch*/
    FE0AW00.FE0AWSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FE0A110(); /* Purge temporary storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FE0AM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FE0AM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FE0B"; /* TO application*/
    end
    ;
    FE0A110(); /* Purge temporary storage*/
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FE0A300

// Reset highlighted fields
Function FE0A400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0AM001.FFZBYYMM initialAttributes; /* Beginning month*/
  set FE0AM001.FFZEYYMM initialAttributes; /* Ending month*/
  set FE0AM001.YPGCD initialAttributes; /* Type*/
  set FE0AM001.YSMXDV initialAttributes; /* Division group*/
  ;
  set FE0AM001.CATOAP initialAttributes; /* TO application*/
  set FE0AM001.CAITEM initialAttributes; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AM001.YPGCD == "?") /* Type list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AM001.YPGCD == "?") /* Type list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* flag*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FE0AM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0AM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FE0AM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FE0AM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FE0AM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A400

// Verify the entered data
Function FE0A500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AM001.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FE0AM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    FE0A510(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    ;
    if (FE0AM001.FFZBYYMM != FE0AW01.FFZBYYMM /* Beginning date changed*/
     || FE0AM001.FFZEYYMM != FE0AW01.FFZEYYMM /* or ending date changed*/
     || FE0AM001.YPGCD != FFWREC.YPGCD        /* or type changed*/
     || FE0AM001.YSMXDV != FFWREC.YSMXDV      /* or division group changed*/
                                              
     || FE0AM001.FFZBYYMM == 0                /* Beginning date missing*/
     || FE0AM001.FFZEYYMM == 0                /* Ending date missing*/
     || FE0AM001.YPGCD == " "                 /* or type missing*/
     || FE0AM001.YSMXDV == " ")               /* or division group missing*/
      ;
      FE0A520(); /* Verify the key fields*/
      ;
      FE0A530(); /* Verify Relationships*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0A500

// Verify scroll request
Function FE0A510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FE0AW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FE0AW00.XXXTSPAG >= FE0AW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AM001.YSMXDV != FFWREC.YSMXDV) /* Division group changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0AM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FE0AM001.YPGCD != FFWREC.YPGCD) /* Type changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0AM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FE0AM001.FFZEYYMM != FE0AW01.FFZEYYMM) /* Ending date changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0AM001.FFZEYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FE0AM001.FFZBYYMM != FE0AW01.FFZBYYMM) /* Beginning date changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0AM001.FFZBYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FE0A510

// Verify the key fields
Function FE0A520()
   /* ------------------------------------------------------------*/
   /* If division group was entered, verify division group code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AM001.YSMXDV == "*")
    FE0AM001.YSMSMDSC = "ALL"; /* Abbreviation*/
  else
    set YSMREC empty; /* Row storage area*/
    YSMREC.YSMSUMCD = FE0AM001.YSMXDV; /* Division group code*/
    TA1REC.TA1PGMNM = "FE0A520 "; /* Calling program*/
    ;
    XSFFS20(); /* Verify division group*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
      FE0AM001.YSMSMDSC = YSMREC.YSMSMDSC; /* Abbreviation*/
    else
      FE0AM001.YSMSMDSC = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FE0AM001.YSMXDV cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify type code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AM001.YPGCD == "*") /* Type equal 'all'*/
    ;
    FE0AM001.YPGABRV = "*ALL*"; /* Abbreviation*/
    ;
  else
    if (FE0AM001.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FE0AM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      ;
      FE0AM001.YPGABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FE0AM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify the beginning and ending dates in the entered range.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FE0AM001.FFZBYYMM; /* Beginning date*/
  FFZREC.FFZEYYMM = FE0AM001.FFZEYYMM; /* Ending date*/
  ;
  XSFFS30(); /* Verify the range*/
  ;
   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FE0AM001.FFZEYYMM cursor, bold; /* Highlight*/
    ;
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      ;
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        ;
        converseLib.validationFailed(151); /* Date is out of range*/
        ;
      end
      ;
    end
    ;
  end
  ;
  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FE0AM001.FFZBYYMM cursor, bold; /* Highlight*/
    ;
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      ;
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        ;
        converseLib.validationFailed(151); /* Date is out of range*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
end // end FE0A520

// Verify FFXRF
Function FE0A530()
   /* ------------------------------------------------------------*/
   /* Verify that key is in FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* If there are no errors*/
    ;
    /* ------------------------------------------------------------*/
     /* Clear the row storage area.*/
    /* ------------------------------------------------------------*/
    ;
    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/
    ;
    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFXRF01.*/
    /* ------------------------------------------------------------*/
    ;
    FF2REC.XPCCD = "*"; /* category*/
    FF2REC.XPLCD = "*"; /* line*/
    FF2REC.YPGCD = FE0AM001.YPGCD; /* type*/
    FF2REC.YSMXDV = "*"; /* div grp*/
    ;
    /* ------------------------------------------------------------*/
     /* Select the row to display from the table.*/
    /* ------------------------------------------------------------*/
    ;
    FE0A531(); /* Open cursor for DFCAST.VFFXRF01*/
    ;
    FE0A532(); /* fetch FFXRF*/
    ;
    /* ------------------------------------------------------------*/
     /* If successful, close FFXRF.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* Row not found code*/
      ;
      /* ------------------------------------------------------------*/
       /* If not found, indicate invalid.*/
      /* ------------------------------------------------------------*/
      ;
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FE0AM001.YSMXDV bold; /* Highlight*/
      set FE0AM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* Indicate invalid relationship*/
      ;
    end
    ;
    FE0A533(); /* close cursor*/
    ;
  end
  ;
  ;
end // end FE0A530

// Open  DFCAST.VFFXRF01
Function FE0A531()
   /* ------------------------------------------------------------*/
   /* Open FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "531"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A531

// Fetch DFCAST.VFFXRF01
Function FE0A532()
   /* ------------------------------------------------------------*/
   /* Fetch FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "532"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A532

// Close DFCAST.VFFXRF01
Function FE0A533()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "533"; /* Module identification*/
  ;
  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0A533

// Process valid input request
Function FE0A600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0AW00.FE0AWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0AM001.FFZBYYMM != FE0AW01.FFZBYYMM /* Beginning month changed*/
   || FE0AM001.FFZEYYMM != FE0AW01.FFZEYYMM /* or ending month changed*/
   || FE0AM001.YPGCD != FFWREC.YPGCD        /* or type changed*/
   || FE0AM001.YSMXDV != FFWREC.YSMXDV)     /* or division group changed*/
    ;
    /* ------------------------------------------------------------*/
     /* Update the modifiable data in the FF system commarea.*/
    /* ------------------------------------------------------------*/
    ;
    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* Ending month*/
    FFWREC.YPGCD = FE0AM001.YPGCD; /* Type code*/
    FFWREC.YPGABRV = FE0AM001.YPGABRV; /* Type name*/
    FFWREC.YSMXDV = FE0AM001.YSMXDV; /* Division group code*/
    FFWREC.YSMSMDSC = FE0AM001.YSMSMDSC; /* Division group name*/
    ;
    FE0AW00.FE0AWSWR = "Y"; /* Request for data switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FE0AW00.XXXTSPAG = FE0AW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FE0AW00.XXXTSPAG = FE0AW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end FE0A600

// Format qty
Function FE0AS01()
  ;
  if (FFXREC.FFXNUMB >= +10000000 /* Use millions*/
   || FFXREC.FFXNUMB <= -1000000) /* Use millions*/
    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    XSFFS14(); /* Translation number*/
  end
  FE0AW02.FE0AWAMT[FE0AWCNT] = FFXREC.FFXCHAR; /* Load mask*/
  ;
   /* ------------------------------------------------------------*/
   /* Add to total for this line.*/
   /* ------------------------------------------------------------*/
  ;
  FE0AW02.FE0AWLNT = FE0AW02.FE0AWLNT + FFXREC.FFXNUMB; /* Add to tot*/
  ;
   /* ------------------------------------------------------------*/
   /* Add to total for this month (column).*/
   /* ------------------------------------------------------------*/
  ;
  FE0AW00.FE0AWFDA = FE0AW03.FE0AWCLT[FE0AWCNT]; /* Load cl tot*/
  FE0AW00.FE0AWFDA = FE0AW00.FE0AWFDA + FFXREC.FFXNUMB; /* Add to tot*/
  FE0AW03.FE0AWCLT[FE0AWCNT] = FE0AW00.FE0AWFDA; /* Restore tot*/
  ;
end // end FE0AS01

//*** RECORD=FE0AW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0AW00 type basicRecord
  10 FE0AWIXM FE0AWIXM ; 
  10 FE0AWIX2 FE0AWIX2 ; 
  10 FE0AWSWC FE0AWSWC ; 
  10 FE0AWSW2 FE0AWSW2 ; 
  10 FE0AWSWF FE0AWSWF ; 
  10 FE0AWSWR FE0AWSWR ; 
  10 FE0AWCAT FE0AWCAT [12] ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * num(1) ; 
  10 FE0AWCNT FE0AWCNT ; 
  10 FE0AWFDA FE0AWFDA ; 
  10 * num(1) ; 
  10 FE0AWDT1 FE0AWDT1 ; 
    15 * num(1) ; 
    15 FE0AWCY1 FE0AWCY1 ; 
      20 FE0AWCC1 FE0AWCC1 ; 
      20 FE0AWYY1 FE0AWYY1 ; 
      20 FE0AWMM1 FE0AWMM1 ; 
    15 FE0AWDD1 FE0AWDD1 ; 
  10 * char(1) ; 
  10 FE0AWBYD FE0AWBYD ; 
  10 FE0AWCDT FE0AWCDT ; 
end // end FE0AW00

//*** RECORD=FE0AW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FE0AW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(966) ; 
    10 FFZBYYMM FFZBYYMM ; 
    10 FFZEYYMM FFZEYYMM ; 
    10 FFZIYYMM FFZIYYMM [12] ; 
    10 XPLABRV XPLABRV [13] ; 
    10 FE0AWLIN FE0AWLIN [13] ; 
end // end FE0AW01

//*** RECORD=FE0AW02 ****
// Mask for map line display
// ***********************
Record FE0AW02 type basicRecord
  5 FE0AWMSK FE0AWMSK ; 
    10 FE0AWGRP FE0AWGRP [13] ; 
      15 FE0AWAMT FE0AWAMT ; 
      15 * char(1) ; 
  5 * char(1) ; 
  5 FE0AWLNT FE0AWLNT ; 
  5 FE0AWLNS FE0AWLNS ; 
end // end FE0AW02

//*** RECORD=FE0AW03 ****
// Storage for total fields
// ***********************
Record FE0AW03 type basicRecord
  5 FE0AWNBM FE0AWNBM ; 
  5 * char(1) ; 
  5 FE0AWTOT FE0AWTOT [13] ; 
  5 * char(1) ; 
  5 FE0AWCLT FE0AWCLT [12] ; 
  5 * char(1) ; 
  5 FE0AWTTA FE0AWTTA ; 
  5 * char(1) ; 
end // end FE0AW03

//*** RECORD=FE0AW04 ****
// **** copy of ff2rec - used for second open cursor **********
// ***********************
Record FE0AW04 type basicRecord
  5 FF2GROUP FF2GROUP ; 
    10 FF2KEY FF2KEY ; 
      15 XPCCD XPCCD ; 
      15 XPLCD XPLCD ; 
      15 YPGCD YPGCD ; 
      15 YSMXDV YSMXDV ; 
    10 FF2DMIND FF2DMIND ; 
    10 FF2FUIND FF2FUIND ; 
    10 FF2PRIND FF2PRIND ; 
    10 FF2GOIND FF2GOIND ; 
    10 FF2COIND FF2COIND ; 
    10 FF2ALCAT FF2ALCAT ; 
    10 FF2SEASN FF2SEASN [4] ; 
    10 FF2CATDT FF2CATDT ; 
    10 FF2REVDT FF2REVDT ; 
    10 FF2DMTOL FF2DMTOL ; 
    10 FF2PRTOL FF2PRTOL ; 
    10 FF2INTOL FF2INTOL ; 
    10 FF2GRMIN FF2GRMIN ; 
    10 FF2SYMIN FF2SYMIN ; 
    10 FF2CRVFL FF2CRVFL ; 
    10 FF2LRVFL FF2LRVFL ; 
    10 FF2NSEAS FF2NSEAS ; 
    10 FF2FCMGR FF2FCMGR ; 
    10 FFQLCOFP FFQLCOFP ; 
    10 FFQLCOPP FFQLCOPP ; 
    10 FFQOCOFP FFQOCOFP ; 
    10 FFQOCOPP FFQOCOPP ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FE0AW04

// FF_PRDCTN_TRGT amts
DataItem FE0AWAMT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy date CCYYMM
DataItem FE0AWBYD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table of monthly category tots
DataItem FE0AWCAT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  CC
DataItem FE0AWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// curr date CCYYMM
DataItem FE0AWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Accum column tots
DataItem FE0AWCLT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Counter for loops
DataItem FE0AWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work date CCYYMM
DataItem FE0AWCY1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  DD
DataItem FE0AWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold work date
DataItem FE0AWDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem FE0AWFDA int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ffWREC working storage group
DataItem FE0AWGRP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index two for stored fields
DataItem FE0AWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem FE0AWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Trgt amts & tot for 12 months
DataItem FE0AWLIN char(64)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Line total work field
DataItem FE0AWLNS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line total work field
DataItem FE0AWLNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  MM
DataItem FE0AWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line mask
DataItem FE0AWMSK char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of months
DataItem FE0AWNBM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch2
DataItem FE0AWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FE0AWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0AWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FE0AWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Totals for range
DataItem FE0AWTOT char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Accum grand Totals
DataItem FE0AWTTA int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//  YY
DataItem FE0AWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

