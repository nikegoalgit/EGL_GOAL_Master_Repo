package fe0g;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XXXUSRID;
import corpy2.YPGTBL;
import ff.common.FF1REC;
import ff.common.FF2REC;
import ff.common.FF3REC;
import ff.common.FFQREC;
import ff.common.FFWREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FE0G ****
// This application obtains a specific line/type group,
// category/type group, then displays a list of existing
// Target work sheets for that line or category.
// The user may scroll forward or back to view all the work
// sheets obtained.  The user can then select which work sheet
// they wish to view, and is transfered to application FE0H to
// view it.
// 
// This application uses FFWREC.FFQMBYMO to store actual buy
// month.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/20/91  KSANFO  New application.
//          12/19/96  CWHIT1  REGEN FOR YR 2000
// *********************
Program FE0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0GW00 FE0GW00; // record
  FE0GW01 FE0GW01; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FFQREC FFQREC; // record
  FFWREC FFWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use FE0GM.FE0GM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FE0GM001 initial; /* M001 input/output*/
    set FE0GW00 empty; /* Working storage*/
    set FE0GW01 empty; /* M001 display storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date & time convert parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    ;
    FE0GW00.FE0GWFMS = "Y"; /* Format the map switch*/
    FE0GW00.CACHGFL = "N"; /* Date not obtained*/
    ;
     /* ------------------------------------------------------------*/
     /* Do not request data since work sheet type needs to be*/
     /* obtained.*/
     /* ------------------------------------------------------------*/
    FFWREC.XWSCD = " "; /* Ignore W/S type passed*/
    FFWREC.XWSABRV = " ";
    FE0GW00.FE0GWRDS = "N"; /* Request for data switch*/
    ;
    if (FFWREC.YPGCD == " ") /* Type group not known*/
      FFWREC.YPGCD = "01"; /* Default value*/
      FFWREC.YPGABRV = "******";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FE0G.*/
     /* ------------------------------------------------------------*/
    ;
    FFWREC.XPLCD = "  ";
    FFWREC.XPLABRV = "  ";
    FFWREC.XPCCD = "  ";
    FFWREC.XPCABRV = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0G001; /* Converse the main process*/
    ;
    ;
    FE0G001: FE0G001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FE0G001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FE0G

// Main process to display a map
Function FE0G001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FE0G100(); /* Obtain the data to display*/
  ;
  FE0G200(); /* Format and display the map*/
  ;
  FE0G300(); /* Check attention identifier*/
  ;
  FE0G400(); /* Reset fields to normal intensity*/
  ;
  FE0G500(); /* Verify the entered data*/
  ;
  FE0G600(); /* Process valid input request*/
  ;
  ;
end // end FE0G001

// Obtain the data to display
Function FE0G100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GW00.FE0GWRDS == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end
  ;
  FE0GW00.CACHGFL = "N"; /* Set data not obtained*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain data & build temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FE0G110(); /* Build up the temporary storage*/
  ;
  if (FFWREC.XXXMSGNO != 0)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GW00.TA5TSQIX == 0) /* No pages formatted*/
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    return; /* Exit to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FE0GW00.XXXTSPAG = 1; /* Desired page number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GW00.FE0GWRDS = "N"; /* Request for data switch "off"*/
  FE0GW00.CACHGFL = "Y"; /* Set data obtained*/
  ;
  ;
end // end FE0G100

// Build up the temporary storage
Function FE0G110()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GW00.XXXTSLEN = 390; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FE0G111(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain and format FFQREC rows into temporary storage area.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XPCCD != " "
   && FFWREC.YPGCD != " ")
    FE0G112();
  else
    if (FFWREC.XPLCD != " "
     && FFWREC.YPGCD != " ")
      FE0G113();
    end
  end
  ;
  ;
end // end FE0G110

// Purge any temporary storage
Function FE0G111()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (TA5REC.TA5FNCCD == "P")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0GW01 empty; /* M001 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FE0GW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FE0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0G111

// Obtain & format FFQREC rows
Function FE0G112()
   /* ------------------------------------------------------------*/
   /* Select & open cursor for FFQREC S8 set to be formatted*/
   /* using category, type group.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GS01(); /* Select & open FFQREC "S8" csr*/
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  while (FE0GW00.FE0GWQCS == "N") /* Until end of cursor*/
    FE0GS02(); /* Fetch selected FFQREC "S8" row*/
    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    if (FE0GW00.FE0GWMIX > 15) /* Page is full*/
      FE0GS03(); /* Add page to temporary storage*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GW00.FE0GWMIX > 1) /* Page was formatted*/
    FE0GS03(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected FFQREC set.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GS04(); /* Close FFQREC "S8" cursor*/
  ;
  ;
end // end FE0G112

// Select & format FFQREC rows
Function FE0G113()
   /* ------------------------------------------------------------*/
   /* Select & open cursor for FFQREC S10 set to be formatted*/
   /* using line, type group.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GS06(); /* Select & open FFQREC "S10" csr*/
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  while (FE0GW00.FE0GWQCS == "N") /* Until end of cursor*/
    FE0GS07(); /* Fetch selected FFQREC "S10" row*/
    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    if (FE0GW00.FE0GWMIX > 15) /* Page is full*/
      FE0GS03(); /* Add page to temporary storage*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GW00.FE0GWMIX > 1) /* Page was formatted*/
    FE0GS03(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected FFQREC set.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GS08(); /* Close FFQREC "S10" cursor*/
  ;
  ;
end // end FE0G113

// Format and converse the map
Function FE0G200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GW00.FE0GWRDS == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FE0GW00.FE0GWFMS == "Y") /* map must be formatted*/
      FE0G210(); /* Format the data on the map*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH and map*/
   /* information.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FE0GM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0GM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FE0GM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FE0GM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FE0GM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "   "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FE0GM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0GM001.CAITEM; /* Application data*/
  ;
  ;
end // end FE0G200

// Format the map
Function FE0G210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0GM001 initial; /* M001 input/output area*/
  ;
  FE0GW00.FE0GWFMS = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GW00.TA5TSQIX > 0) /* Pages were formatted*/
    if (FE0GW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (FE0GW00.XXXTSPAG > FE0GW00.TA5TSQIX) /* Desired greater highest*/
        FE0GW00.XXXTSPAG = FE0GW00.TA5TSQIX; /* Default to highest*/
      end
      FE0GS20(); /* Obtain temporary storage page*/
    end
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set FE0GM001.XXXLITPG skip;
    set FE0GM001.XXXLITOF skip;
    FE0GM001.XXXTSPAG = FE0GW00.XXXTSPAG; /* Current page*/
    FE0GM001.TA5TSQIX = FE0GW00.TA5TSQIX; /* Highest page*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GM001.XPLCD = FFWREC.XPLCD;
  FE0GM001.XPLABRV = FFWREC.XPLABRV;
  FE0GM001.YPGCD = FFWREC.YPGCD;
  FE0GM001.YPGABRV = FFWREC.YPGABRV;
  FE0GM001.XPCCD = FFWREC.XPCCD;
  FE0GM001.XPCABRV = FFWREC.XPCABRV;
  ;
  ;
  FE0GW00.FE0GWMIX = 1; /* Initialize line index*/
  ;
  while (FE0GW00.FE0GWMIX <= 15 /* Until screen is full*/
   && FE0GW01.FE0GWCDT[FE0GWMIX] > 0) /* or end of data*/
    if (FE0GW00.FE0GWMIX == 1) /* First select field*/
      set FE0GM001.FE0GMSEL[FE0GWMIX] cursor, normal; /* Position cursor*/
    else
      set FE0GM001.FE0GMSEL[FE0GWMIX] normal; /* Unprotect*/
    end
    FE0GM001.FE0GMXPC[FE0GWMIX] = FE0GW01.FE0GWXPC[FE0GWMIX];
    FE0GM001.FE0GMCDT[FE0GWMIX] = FE0GW01.FE0GWCDT[FE0GWMIX];
    FE0GM001.FE0GMCTM[FE0GWMIX] = FE0GW01.FE0GWCTM[FE0GWMIX];
    FE0GM001.XXXUSRID[FE0GWMIX] = FE0GW01.XXXUSRID[FE0GWMIX];
    FE0GW00.FE0GWMIX = FE0GW00.FE0GWMIX + 1; /* Increment line index*/
  end
  ;
  ;
end // end FE0G210

// Check attention identifier
Function FE0G300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FE0GW00.FE0GWRDS == "Y") /* Request for data*/
      set FE0GW01 empty; /* M001 display storage*/
    end
    FE0GW00.FE0GWFMS = "Y"; /* Format the map switch*/
    FE0GW00.FE0GWRDS = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (FE0GM001.CATOAP == "FE0H")
        set FE0GM001.CATOAP cursor, bold; /* Highlight*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(189); /* No fast path allowed*/
      else
        FE0G111(); /* Purge temporary storage*/
        FFWREC.FFQMBYMO = 0; /* Clear actual from main buy mo*/
        XSFFS01(); /* Exit to another application*/
        set FE0GM001.CATOAP cursor, bold; /* Highlight*/
        FE0GW00.FE0GWFMS = "Y"; /* Format the map switch*/
        FE0GW00.FE0GWRDS = "N"; /* Request for data switch*/
      end
    else
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
    end
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FE0GM001"; /* Application find code*/
    end
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FE0I"; /* TO application*/
    end
    FE0G111(); /* Purge temporary storage*/
    XSFFS01(); /* Exit to another application*/
    FE0GW00.FE0GWFMS = "Y"; /* Format the map switch*/
    FE0GW00.FE0GWRDS = "N"; /* Request for data switch*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7
   && converseVar.eventKey not pf8)
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0G300

// Reset highlighted fields
Function FE0G400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FE0GM001.XPLCD initialAttributes;
  set FE0GM001.YPGCD initialAttributes;
  set FE0GM001.XPCCD initialAttributes;
  set FE0GM001.XXXLITPG normal;
  set FE0GM001.XXXLITOF normal;
  ;
  FE0GW00.FE0GWMIX = 1; /* Initialize line index*/
  ;
  while (FE0GW00.FE0GWMIX <= 15 /* Until end of lines*/
   && FE0GM001.FE0GMCDT[FE0GWMIX] > 0) /* or end of display*/
    set FE0GM001.FE0GMSEL[FE0GWMIX] normal; /* Reset select flag*/
    FE0GW00.FE0GWMIX = FE0GW00.FE0GWMIX + 1; /* Increment line index*/
  end
  ;
  set FE0GM001.CATOAP initialAttributes; /* TO application*/
  set FE0GM001.CAITEM initialAttributes; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.XPLCD == "?" /* Line codes list requested*/
   || FE0GM001.YPGCD == "?" /* Type group list requested*/
   || FE0GM001.XPCCD == "?") /* Category list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.XPLCD == "?") /* Line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE    "; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FE0GM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FE0GM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FE0GM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FE0GM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FE0GM001.XPLCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FE0GM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FE0GM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FE0GM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0GM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FE0GM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FE0GM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FE0GM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FE0GM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FE0GM001.XPCCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0G400

// Verify the entered data
Function FE0G500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.CAITEM > " ") /* Application data was entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FE0GM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    FE0G510(); /* Verify scroll request*/
  else
    /* ------------------------------------------------------------*/
     /* If it is not a scroll request & the search key was*/
     /* changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    if (FE0GM001.XPLCD != FFWREC.XPLCD /* Line code changed*/
     || FE0GM001.YPGCD != FFWREC.YPGCD /* or type group changed*/
     || FE0GM001.XPCCD != FFWREC.XPCCD /* or category changed*/
     || FE0GW00.CACHGFL == "N")        /* or data not obtained*/
      FE0G520(); /* Verify the key fields*/
    else
      /* ------------------------------------------------------------*/
       /* Otherwise, if page was formatted, verify data in the line.*/
      /* ------------------------------------------------------------*/
      if (FE0GW00.TA5TSQIX > 0) /* Page was formatted*/
        FE0GW00.FE0GWSSW = "N"; /* Initialize select switch*/
        FE0GW00.FE0GWSSI = 0; /* Initialize save select ix*/
        FE0GW00.FE0GWMIX = 15; /* Initialize line index*/
        while (FE0GW00.FE0GWMIX > 0) /* Until end of lines*/
          FE0G530(); /* Verify data in the line*/
          FE0GW00.FE0GWMIX = FE0GW00.FE0GWMIX - 1; /* Decrement line number*/
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0G500

// Verify scroll request
Function FE0G510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FE0GW00.XXXTSPAG < 2)       /* and no previous pages*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FE0GW00.XXXTSPAG >= FE0GW00.TA5TSQIX) /* and no more pages*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GW00.FE0GWMIX = 15; /* Initialize line index*/
  ;
  while (FE0GW00.FE0GWMIX > 0) /* Until end of lines*/
    if (FE0GM001.FE0GMSEL[FE0GWMIX] > " ") /* Selection entered*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FE0GM001.FE0GMSEL[FE0GWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    FE0GW00.FE0GWMIX = FE0GW00.FE0GWMIX - 1; /* Decrement line number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.XPLCD != FFWREC.XPLCD) /* Line code changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0GM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end
  ;
  if (FE0GM001.YPGCD != FFWREC.YPGCD) /* Type group changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0GM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end
  ;
  if (FE0GM001.XPCCD != FFWREC.XPCCD) /* Category changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0GM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end
  ;
  ;
  ;
end // end FE0G510

// Verify the key fields
Function FE0G520()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered since selections*/
   /* are not allowed when key fields are changed.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GW00.FE0GWMIX = 15; /* Initialize line index*/
  ;
  while (FE0GW00.FE0GWMIX > 0) /* Until end of lines*/
    if (FE0GM001.FE0GMSEL[FE0GWMIX] > " ") /* Selection entered*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FE0GM001.FE0GMSEL[FE0GWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    FE0GW00.FE0GWMIX = FE0GW00.FE0GWMIX - 1; /* Decrement line number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that either category/type group, or*/
   /* line/type group were entered. Key fields are not allowed*/
   /* to be spaces or zeros.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.YPGCD == " ") /* Type group code not entered*/
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FE0GM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end
  ;
  if (FE0GM001.XPCCD == " ") /* Category not entered*/
    if (FE0GM001.XPLCD == " ") /* Line not entered*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FE0GM001.XPLCD bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.XPCCD > " ") /* Category was entered*/
    if (FE0GM001.XPCCD in XPCTBL.XPCCD /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      FE0GM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FE0GM001.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FE0GM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FE0GM001.XPCABRV = " "; /* Clear abbrv*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.YPGCD > " ") /* Type group was entered*/
    if (FE0GM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FE0GM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FE0GM001.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FE0GM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FE0GM001.YPGABRV = " "; /* Clear abrv*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If line code was entered verify the code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.XPLCD > " ") /* Line was entered*/
    if (FE0GM001.XPLCD in XPLTBL.XPLCD           /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and ftwr*/
      FE0GM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FE0GM001.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FE0GM001.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FE0GM001.XPLABRV = " "; /* Clear abrv*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FE0GM001.YPGABRV != " ") /* Type group valid*/
      if (FE0GM001.XPCABRV != " ") /* Category valid*/
        set FF2REC empty; /* Clear row storage*/
        FF2REC.XPLCD = "*";
        FF2REC.XPCCD = FE0GM001.XPCCD;
        FF2REC.YPGCD = FE0GM001.YPGCD;
        FF2REC.YSMXDV = "10";
        FE0GS30(); /* Select & open FF2REC "S1" csr*/
        FE0GS31(); /* Fetch first FF2REC "S1" csr*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          FFWREC.XXXMODID = "520"; /* Module identification*/
          converseLib.validationFailed(203); /* Inconsistent relationship*/
          set FE0GM001.YPGCD cursor, bold; /* Highlight*/
          set FE0GM001.XPCCD bold; /* Highlight*/
        end
        FE0GM001.XPLCD = FF2REC.XPLCD;
        if (FE0GM001.XPLCD in XPLTBL.XPLCD)
          FE0GM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        end
        FE0GS32(); /* Close FF2REC "S1" csr*/
      else
        if (FE0GM001.XPLABRV != " ") /* Line valid*/
          set FF2REC empty; /* Clear row storage*/
          FF2REC.XPCCD = "*";
          FF2REC.XPLCD = FE0GM001.XPLCD;
          FF2REC.YPGCD = FE0GM001.YPGCD;
          FF2REC.YSMXDV = "10";
          FE0GS30(); /* Select & open FF2REC "S1" csr*/
          FE0GS31(); /* Fetch first FF2REC "S1" csr*/
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            FFWREC.XXXMODID = "520"; /* Module identification*/
            converseLib.validationFailed(203); /* Inconsistent relationship*/
            set FE0GM001.YPGCD cursor, bold; /* Highlight*/
            set FE0GM001.XPLCD bold; /* Highlight*/
          end
          FE0GS32(); /* Close FF2REC "S1" csr*/
        end
      end
    end
  end
  ;
end // end FE0G520

// Verify data in the line
Function FE0G530()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.FE0GMSEL[FE0GWMIX] > " " /* Selection was entered*/
   && FE0GM001.FE0GMSEL[FE0GWMIX] != "S") /* and is not a "S"*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FE0GM001.FE0GMSEL[FE0GWMIX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(41); /* Indicate only "S" may be used*/
  end
  ;
  if (FE0GM001.FE0GMSEL[FE0GWMIX] > " ") /* Selection made*/
    if (FE0GW00.FE0GWSSW == "Y") /* Selection already made*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FE0GM001.FE0GMSEL[FE0GWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(136); /* Indicate more than one line selected*/
    else
      FE0GW00.FE0GWSSW = "Y"; /* Indicate selection made*/
      FE0GW00.FE0GWSSI = FE0GW00.FE0GWMIX; /* Save select index*/
    end
  end
  ;
  ;
end // end FE0G530

// Process valid input request
Function FE0G600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GW00.FE0GWFMS = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information*/
   /* in FF system commarea.*/
   /* ------------------------------------------------------------*/
  ;
  if (FE0GM001.XPLCD != FFWREC.XPLCD /* Line code changed*/
   || FE0GM001.YPGCD != FFWREC.YPGCD /* or type group changed*/
   || FE0GM001.XPCCD != FFWREC.XPCCD) /* or category changed*/
    ;
    FFWREC.XPLCD = FE0GM001.XPLCD;
    FFWREC.XPLABRV = FE0GM001.XPLABRV;
    FFWREC.YPGCD = FE0GM001.YPGCD;
    FFWREC.YPGABRV = FE0GM001.YPGABRV;
    FFWREC.XPCCD = FE0GM001.XPCCD;
    FFWREC.XPCABRV = FE0GM001.XPCABRV;
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/
    if (FFWREC.YPGCD != "  " /* Type group entered*/
     && FFWREC.XPCCD != "  ") /* and category entered*/
      FE0G111(); /* Purge any temp storage*/
      FE0GW00.FE0GWRDS = "Y"; /* Request for data switch*/
      return;
    else
      if (FFWREC.XPLCD != "  " /* Line code entered*/
       && FFWREC.YPGCD != " ") /* Type group entered*/
        FE0G111(); /* Purge any temp storage*/
        FE0GW00.FE0GWRDS = "Y"; /* Request for data switch*/
        return;
      else
        FE0GW00.FE0GWRDS = "N"; /* Request for data switch*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    FE0GW00.XXXTSPAG = FE0GW00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    FE0GW00.XXXTSPAG = FE0GW00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* ENTER was requested so send key data to Fe0H.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    if (FE0GW00.FE0GWSSW == "Y") /* A selection was made*/
      FFWREC.XPCCD = FE0GW01.FE0GWXPC[FE0GWSSI];
      if (FFWREC.XPCCD in XPCTBL.XPCCD)
        FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
      FFWREC.XPLCD = FE0GW01.FE0GWXPL[FE0GWSSI];
      if (FFWREC.XPLCD in XPLTBL.XPLCD)
        FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
      FFWREC.ZZZCHGDT = FE0GW01.FE0GWCDT[FE0GWSSI];
      FFWREC.ZZZCHGTM = FE0GW01.FE0GWCTM[FE0GWSSI];
    else
      FFWREC.XXXMODID = "600"; /* Module identification*/
      converseLib.validationFailed(154); /* Indicate selection missing*/
      exit stack; /* Exit to display map*/
    end
    ;
    COMMAREA.CATOAP = "FE0H"; /* To application*/
    FE0G111(); /* Purge any temp storage*/
    XSFFS01(); /* Transfer to application*/
    /* ------------------------------------------------------------*/
     /* If transfer request failed display returned error message.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "    "; /* Clear to application*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FE0G600

// Select & open FFQREC "S8" csr
Function FE0GS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FFQREC empty; /* Clear row storage area*/
  ;
  FFQREC.XPCCD = FFWREC.XPCCD;
  FFQREC.YPGCD = FFWREC.YPGCD;
  FFQREC.XWSCD = "05"; /* Target wrksheet type*/
  FFQREC.SY2SSCIN = "*"; /* Wildcard for Stk Cls Ind*/
  FFQREC.FFQMBYMO = -1; /* Wildcard for Main Buy Month*/
  ;
  FFQREC.FFQABYMO = -1; /* Wildcard for Actual Buy Month*/
  ;
  FFQREC.FFABEGMO = -1; /* Wildcard for Begin Month*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3810" ("S8", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FE0GW00.FE0GWMIX = 1; /* Initialize display index*/
      FE0GW00.FE0GWQCS = "N";
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WORK SHEET USING CATEGORY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS01

// Fetch next FFQREC "S8" row
Function FE0GS02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3810" ("N8", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FE0GS05(); /* Save in display storage*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FE0GW00.FE0GWQCS = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS02

// add page to temp storage
Function FE0GS03()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GW01.XXXTSLEN = FE0GW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FE0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set FE0GW01 empty; /* M001 display storage*/
    FE0GW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FE0GW00.FE0GWMIX = 1; /* Map line number*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS03

// Close FFQREC "S8" cursor
Function FE0GS04()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3810" ("C8", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FFQREC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS04

// Save data in display storage
Function FE0GS05()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GW01.FE0GWXPC[FE0GWMIX] = FFQREC.XPCCD; /* Category*/
  FE0GW01.FE0GWXPL[FE0GWMIX] = FFQREC.XPLCD; /* Line*/
  FE0GW01.FE0GWCDT[FE0GWMIX] = FFQREC.ZZZCHGDT; /* Create date*/
  FE0GW01.FE0GWCTM[FE0GWMIX] = FFQREC.ZZZCHGTM; /* Create time*/
  FE0GW01.XXXUSRID[FE0GWMIX] = FFQREC.XXXUSRID; /* User-id*/
  ;
  FE0GW00.FE0GWMIX = FE0GW00.FE0GWMIX + 1; /* Increment display index*/
  ;
  ;
end // end FE0GS05

// Select & open FFQREC "SA" csr
Function FE0GS06()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FFQREC empty; /* Clear row storage area*/
  ;
  FFQREC.XPLCD = FFWREC.XPLCD;
  FFQREC.YPGCD = FFWREC.YPGCD;
  FFQREC.XWSCD = "05";
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3810" ("SA", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FE0GW00.FE0GWMIX = 1; /* Initialize display index*/
      FE0GW00.FE0GWQCS = "N";
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S06"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WORK SHEET USING LINE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS06

// Fetch next FFQREC "SA" row
Function FE0GS07()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3810" ("NA", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FE0GS05(); /* Save in display storage*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FE0GW00.FE0GWQCS = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S07"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS07

// Close FFQREC "SA" cursor
Function FE0GS08()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3810" ("CA", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S08"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FFQREC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS08

// Read temporary storage page
Function FE0GS20()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FE0GW01.XXXTSLEN = FE0GW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FE0GW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FE0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S20"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS20

// Select & open FF2REC "S1" csr
Function FE0GS30()
   /* ------------------------------------------------------------*/
   /* Select the requested rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table rows*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S30"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELATIONSHIP      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS30

// Fetch next FF2REC "S1" csr
Function FE0GS31()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Rows not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S31"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FF2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS31

// Close FF2REC "S1" csr
Function FE0GS32()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S32"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FF2REC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FE0GS32

//*** RECORD=FE0GW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0GW00 type basicRecord
  10 FE0GWMIX FE0GWMIX ; 
  10 FE0GWFMS FE0GWFMS ; 
  10 FE0GWRDS FE0GWRDS ; 
  10 FE0GWQCS FE0GWQCS ; 
  10 FE0GWF3S FE0GWF3S ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 CACHGFL CACHGFL ; 
  10 FE0GWSSW FE0GWSSW ; 
  10 FE0GWSSI FE0GWSSI ; 
  10 FE0GWDT1 FE0GWDT1 ; 
    15 * num(1) ; 
    15 FE0GWCY1 FE0GWCY1 ; 
      20 FE0GWCC1 FE0GWCC1 ; 
      20 FE0GWYY1 FE0GWYY1 ; 
      20 FE0GWMM1 FE0GWMM1 ; 
    15 FE0GWDD1 FE0GWDD1 ; 
end // end FE0GW00

//*** RECORD=FE0GW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FE0GW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(390) ; 
    10 FE0GWSEL FE0GWSEL [15] ; 
    10 FE0GWXPC FE0GWXPC [15] ; 
    10 FE0GWXPL FE0GWXPL [15] ; 
    10 FE0GWCDT FE0GWCDT [15] ; 
    10 FE0GWCTM FE0GWCTM [15] ; 
    10 XXXUSRID XXXUSRID [15] ; 
end // end FE0GW01

// work century
DataItem FE0GWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create date CCYYMMDD
DataItem FE0GWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create time HHMM
DataItem FE0GWCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work ccyymm
DataItem FE0GWCY1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem FE0GWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FE0GWDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// First FF3REC switch
DataItem FE0GWF3S char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0GWFMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map lines index
DataItem FE0GWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work month
DataItem FE0GWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of FFQREC csr switch
DataItem FE0GWQCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FE0GWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work sheet selection indicator
DataItem FE0GWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save select index
DataItem FE0GWSSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection switch
DataItem FE0GWSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Actual buy YYMM
DataItem FE0GWXPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0GWXPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year
DataItem FE0GWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

