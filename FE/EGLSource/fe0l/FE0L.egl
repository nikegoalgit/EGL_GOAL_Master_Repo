package fe0l;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS20;
import corpcom4.XSFFS30;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import ff.common.*;
import fg.common.FG9REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FE0L ****
// This application allows the user to inquire the monthly
// production forecast by style/color for a given range of
// months.  The range can be up to twelve months with the first
// month equal to or greater than the buy month.  The inquir-
// ies may be made by type group, category, and division group.
// 
// All the quantities on the screen have been rounded to the
// nearest hundred and are in thousands.
// 
// The user may use appropriate attention key to scroll the
// screen backward, forward, left and right.
// 
// The user may exit to any allowed application, via fast path
// or PF key, from the screen.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// FF#324   09/08/92  KSTOKK  New application.
//          01/12/94  JJUCH   Fixed duplicate stygrp problem
//                            when stygrp has different short
//                            name.
// FF175    12/12/96  DSMITH  Changed the date range fill
//                            character to '0'.
//                            also - corrected the century
//                            increment in fe0l125, fe0ls-33
//                            and fe0l-541.
// *********************
Program FE0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0LW00 FE0LW00; // record
  FE0LW01 FE0LW01; // record
  FE0LW02 FE0LW02; // record
  FE0LW03 FE0LW03; // record
  FE0LW05 FE0LW05; // record
  FF1REC FF1REC; // record
  FF8REC FF8REC; // record
  FF9REC FF9REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG9REC FG9REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use XPCTBL; // table
  use YPGTBL; // table
  use FE0LM.FE0LM001, // form
  		FE0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FE0LM001 initial; /* M001 input/output*/
    set FE0LW00 empty; /* Working storage*/
    set FE0LW01 empty; /* m001 display storage*/
    set FE0LW02 empty; /* M001 temporary storage*/
    set FE0LW03 empty; /* M001 totals display storage*/
    set FE0LW05 empty; /* M001 detail quantities work area*/
    set FFFREC empty; /* Special function parameters*/
    set FFXREC empty; /* Translation subroutine record*/
    set FFZREC empty; /* Range editing subroutine*/
    set FF1REC empty; /* FF system control table record*/
    set FF8REC empty; /* Month master by style group record*/
    set FF9REC empty; /* Month master by style/color record*/
    set FG9REC empty; /* FF product history record*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set XPCREC empty; /* Category codes table record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Pop-up-window record*/
    set YSMREC empty; /* Summary codes lists record*/

    FE0LW00.XXXTSLEN = 2042; /* temp storage length*/

    FE0LW00.FE0LW-SWR = "N"; /* Request for data switch*/
    FE0LW00.FE0LW-SWF = "Y"; /* format screen data switch*/
    FE0LW00.FE0LW-NEXT = "N"; /* next season flag*/
    move "N" to FE0LW00.FE0LW-PMON[1] for all; /* print remaining month flag*/
    FE0LW00.FE0LW-SWD = "1"; /* map switch*/
    FE0LW00.FE0LW-SNX = 1; /* season index*/
    FE0LW00.FE0LW-PGX = 1; /* page index*/
    FE0LW00.XXXTSPAG = 1; /* page number*/

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.XPLCD = " "; /* Clear product line code*/
    FFWREC.XPLABRV = " "; /* Clear product line abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* number of months per season*/
     /* ------------------------------------------------------------*/

    FE0LW00.FE0LW-SIN = 6; /* default months per season*/

     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " ")
      FE0LW00.FE0LW-SWR = "Y"; /* set data request flag*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/

    goto FE0L-000; /* Converse the main process*/

    FE0L-000: FE0L-000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FE0L-001; /* Converse the main process*/

    FE0L-001: FE0L-001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/

    goto FE0L-001; /* converse the main process*/

  end // end main
end // end FE0L

// One-time validation process
Function FE0L-000()

   /* ------------------------------------------------------------*/
   /* validate beginning yymm of date range*/
   /* ------------------------------------------------------------*/

  FE0L-125(); /* Calculate the buy month*/

   /* reformat map begin date*/

  FE0LW00.FE0LW-WDT1 = 0;
  FE0LW00.FE0LW-WDT1 = FFWREC.FFABEGMO;
  if (FE0LW00.FE0LW-WYY1 > 50)
    FE0LW00.FE0LW-WCC1 = 19;
  else
    FE0LW00.FE0LW-WCC1 = 20;
  end

  if (FE0LW00.FE0LW-WCY1 > 0 /* Begin month entered*/
   && FE0LW00.FE0LW-WCY1 < FE0LW00.FE0LW-BYD) /* Less*/
    converseLib.validationFailed(151); /* Out of range*/
    FFWREC.XXXMODID = "000";
    FE0LM001.FE0LM-BRG = FFWREC.FFABEGMO;
    set FE0LM001.FE0LM-BRG cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate begin and end dates if request for data switch*/
   /* has been set to yes*/
   /* ------------------------------------------------------------*/

  if (FE0LW00.FE0LW-SWR != "Y")

    return;

  end

   /* ------------------------------------------------------------*/
   /* verify begin and end dates passed using xsffs30*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;
  FFZREC.FFZSRANG = "N"; /* Not invoked by short-range application*/
  FFZREC.FFZCHK12 = "Y"; /* Range limited to 12 months*/
  FFZREC.FFZBEGMO = FFWREC.FFABEGMO; /* Range begin month*/
  FFZREC.FFZENDMO = FFWREC.FFAENDMO; /* Range end month*/

  XSFFS30();

  if (FFZREC.FFZENDRC == "1")
    set FE0LM001.FE0LM-ERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "000";
  else
    if (FFZREC.FFZENDRC == "2")
      set FE0LM001.FE0LM-ERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "000";
    else
      if (FFZREC.FFZENDRC == "3")
        set FE0LM001.FE0LM-ERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "000";
      end
    end
  end

  if (FFZREC.FFZBEGRC == "1")
    set FE0LM001.FE0LM-BRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "000";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FE0LM001.FE0LM-BRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "000";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FE0LM001.FE0LM-BRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "000";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if date range is in error load default field values*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    FE0LM001.YPGCD = FFWREC.YPGCD;
    FE0LM001.YPGABRV = FFWREC.YPGABRV;
    FE0LM001.XPCCD = FFWREC.XPCCD;
    FE0LM001.XPCABRV = FFWREC.XPCABRV;
    FE0LM001.YSMXDV = FFWREC.YSMXDV;
    FE0LM001.YSMSMDSC = FFWREC.YSMSMDSC;
    FE0LW00.FE0LW-PIX = 1;
  end


end // end FE0L-000

// Prdctn fcst style/colr inq
Function FE0L-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FE0L-100(); /* Obtain the data to display*/

  FE0L-200(); /* Format and display the map*/

  FE0L-300(); /* Check attention identifier*/

  FE0L-400(); /* Reset fields to normal intensity*/

  FE0L-500(); /* Verify the entered data*/

  FE0L-600(); /* Process valid input request*/


end // end FE0L-001

// Obtain data for display
Function FE0L-100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FE0LW00.FE0LW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate no of seasons and no of months in each season.*/
   /* ------------------------------------------------------------*/

  FE0LS-33();

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FE0LS-01(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FE0LW00.FE0LW-CWD = XX0XW01.XX0XWDAT; /* current work dt ccyymmdd*/
  FE0LW00.FE0LW-CRD = XX0XW01.XX0XWCYM; /* current date ccyymm*/
  FE0LW00.FE0LW-WDT = XX0XW01.XX0XWCYM; /* work date*/

   /* ------------------------------------------------------------*/
   /* Obtain the list of style groups from the DFCAST.VPFHST01*/
   /* table.*/
   /* ------------------------------------------------------------*/

  FE0LW00.FE0LW-IDX = 1; /* init index*/
  FE0LW00.FE0LW-TIX = FFZREC.FFZNUMMO + 1; /* load total index*/

   /* ----------------------------------------------------------*/
   /* Process style groups and style/colors.*/
   /* ----------------------------------------------------------*/

  FE0L-120(); /* Select VPFHST01 style groups - 'S2'*/

  FE0LW00.FE0LW-CR2 = "N"; /* Initialize end of cursor style groups*/

  FE0L-121(); /* Fetch first row PFHST sty grp 'N2'*/

  if (FE0LW00.FE0LW-CR2 == "Y") /* Until end of PFHST cursor sty grps*/
    FE0L-122(); /* Close PFHST style groups set - 'C2'*/
    return;
  end

  while (FE0LW00.FE0LW-CR2 == "N") /* Until end of PFHST style groups*/

    if (FG9REC.SYBSTGNB != FE0LW00.SYBSTGNB) /* Style group change*/
      FE0L-140(); /* Process this style group*/

      FE0LW00.FE0LW-SGT = FE0LW00.FE0LW-UTQ; /* Save style group total*/

      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      if (FE0LW00.FE0LW-IDX > 12) /* Page is full*/
        FE0LW02.FE0LW-NLD = FE0LW00.FE0LW-IDX; /* nbr of lines loaded*/
        FE0LS-04(); /* Add page to temp storage*/
      else

        FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1;
      end

      /* ------------------------------------------------------------*/
       /* Process all style/colors for this style group.*/
      /* ------------------------------------------------------------*/

      FE0L-150(); /* Process style/colors*/
    end

    FE0L-121(); /* Fetch next row PFHST sty grp 'N2'*/

  end

  FFWREC.SYBSTGNB = "      "; /* Clear the style group field*/

  FE0L-122(); /* Close PFHST style groups set - 'C2'*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FE0LW00.FE0LW-IDX > 1) /* Page was formatted*/
    FE0LW02.FE0LW-NLD = FE0LW00.FE0LW-IDX - 1;
    FE0LS-04(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FE0LW00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate monthly percents (column percents)*/
   /* ------------------------------------------------------------*/

  if (FE0LW03.FE0LW-UMT[FE0LW-TIX] != 0)

    FE0LW00.FE0LW-NM1 = FE0LW03.FE0LW-UMT[FE0LW-TIX];
    FE0LW00.FE0LW-IDX = 1;
    while (FE0LW00.FE0LW-IDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/

      FE0LW00.FE0LW-NM2 = FE0LW03.FE0LW-UMT[FE0LW-IDX] * 100;
      FE0LW03.FE0LW-MPT[FE0LW-IDX] = mathLib.round(FE0LW00.FE0LW-NM2 / FE0LW00.FE0LW-NM1, -mathLib.decimals(FE0LW03.FE0LW-MPT[FE0LW-IDX]));

      FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FE0LW00.XXXTSPAG = 1; /* Desired page number*/
  FE0LW00.FE0LW-PGX = 1; /* Page index*/
  FE0LW00.FE0LW-PAGP[1] = 1; /* Starting point of the page*/
  FE0LW00.FE0LW-PAGS[1] = 1; /* Season of the page*/
  FE0LW00.FE0LW-SWR = "N"; /* Request for data switch*/
  FE0LW01.CACHGFL = "Y"; /* data is available for change*/


end // end FE0L-100

// Sel and open VPFHST01 - 'S2'
Function FE0L-120()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FG9REC empty; /* Clear row storage area*/

  FG9REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FG9REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FG9REC.YSMXDV = FFWREC.YSMXDV; /* Div group code*/

  try
    call "IO5430" ("S2", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0L-120

// Fetch VPFHST01 - 'N2'
Function FE0L-121()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5430" ("N2", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FE0LW00.FE0LW-CR2 = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0L-121

// Close VPFHST01 - 'C2'
Function FE0L-122()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5430" ("C2", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "122"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FE0L-122

// Calculate the buy month
Function FE0L-125()
   /* ------------------------------------------------------------*/
     /* Buy month calculation, stored in fe0lW00.fe0lW-BYD*/
   /* ------------------------------------------------------------*/

  FE0L-126(); /* Get futures cutoff date*/

  FE0LW00.FE0LW-WDT1-FOR-BUY-MO = FF1REC.FF1FUTDT;

  FE0LW00.FE0LW-WMM1-FOR-BUY-MO = FE0LW00.FE0LW-WMM1-FOR-BUY-MO + 5;
  if (FE0LW00.FE0LW-WMM1-FOR-BUY-MO > 12)
    FE0LW00.FE0LW-WMM1-FOR-BUY-MO = FE0LW00.FE0LW-WMM1-FOR-BUY-MO - 12;
    if (FE0LW00.FE0LW-WYY1-FOR-BUY-MO == 99)
      FE0LW00.FE0LW-WCC1-FOR-BUY-MO = FE0LW00.FE0LW-WCC1-FOR-BUY-MO + 1;
  /* FE0LW00.FE0LW-WYY1-FOR-BUY-MO = FE0LW00.FE0LW-WYY1-FOR-BUY-MO + 1;*/
  /* dsmith*/
      FE0LW00.FE0LW-WYY1-FOR-BUY-MO = 00;
    else
      FE0LW00.FE0LW-WYY1-FOR-BUY-MO = FE0LW00.FE0LW-WYY1-FOR-BUY-MO + 1;
    end
  end

  FE0LW00.FE0LW-BYD = FE0LW00.FE0LW-WCY1-FOR-BUY-MO; /* buy month*/

end // end FE0L-125

// Get futures cutoff date
Function FE0L-126()

  set FF1REC empty; /* Clear up the storage row*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "126"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0L-126

// Sel & open VPFHST01 - 'S1'
Function FE0L-130()
   /* ------------------------------------------------------------*/
   /* Select the set of style/colors from PFHST - 'S1'*/
   /* ------------------------------------------------------------*/

  set FG9REC empty; /* Clear row storage area*/

  FG9REC.YPGCD = FFWREC.YPGCD; /* Load type group code*/
  FG9REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Load style group code*/
  FG9REC.YSMXDV = FFWREC.YSMXDV; /* Load div group*/

  try
    call "IO5430" ("S1", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0L-130

// Fetch VPFHST01 - 'N1'
Function FE0L-131()
   /* ------------------------------------------------------------*/
   /* Fetch the next row of style/colors from PFHST 'N1'*/
   /* ------------------------------------------------------------*/

  try
    call "IO5430" ("N1", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FE0LW00.FE0LW-CR1 = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "131"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0L-131

// Close VPFHST01 - 'C1'
Function FE0L-132()
   /* ------------------------------------------------------------*/
   /* Close the set of style/colors from PFHST - 'C1'*/
   /* ------------------------------------------------------------*/

  try
    call "IO5430" ("C1", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "132"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FE0L-132

// Process style grp
Function FE0L-140()
   /* ------------------------------------------------------------*/
   /* Process style group.*/
   /* ------------------------------------------------------------*/


  FE0LW02.FE0LW-RCT[FE0LW-IDX] = "1"; /* record type*/
  FE0LW02.FE0LW-DSC[FE0LW-IDX] = FG9REC.SYBSTGNM; /* style group name*/
  FE0LW00.SYBSTGNB = FG9REC.SYBSTGNB; /* style group nbr*/
  FFWREC.SYBSTGNB = FG9REC.SYBSTGNB; /* style group nbr*/

      /* ------------------------------------------------------------*/
       /* For each style group, obtain the summed master forecast*/
       /* from the VMSGRP01 table.*/
      /* ------------------------------------------------------------*/

  FE0LW00.FE0LW-UTQ = 0; /* init w/s product range total*/
  FE0LW00.FE0LW-PIX = 1; /* init process index*/

  while (FE0LW00.FE0LW-PIX <= FFZREC.FFZNUMMO) /* While LE no mos in range*/

    FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FE0LW-PIX];
    FFFREC.FFFENDMO = FFZREC.FFZINDMO[FE0LW-PIX];

    if (FFWREC.YSMXDV == "*") /* div code wildcarded*/

        /* Process each division separately as required by IO3730*/

        /* division '10'*/

      FE0LW00.FE0LW-UHS = 0; /* init sales*/
      set FF8REC empty; /* init PFHST record*/

      FF8REC.YSMXDV = "10"; /* div code '10'*/
      FE0LS-03(); /* select sum SGRP 'SS'*/
      FE0LW00.FE0LW-UHS = FE0LW00.FE0LW-UHS + FF8REC.FF6PRFCT; /* '10'*/

        /* division '20'*/

      set FF8REC empty; /* init PFHST record*/

      FF8REC.YSMXDV = "20"; /* div code '20'*/
      FE0LS-03(); /* select sum SGRP 'SS'*/
      FE0LW00.FE0LW-UHS = FE0LW00.FE0LW-UHS + FF8REC.FF6PRFCT; /* '20'*/

    else /* div code specified*/

      FE0LW00.FE0LW-UHS = 0; /* init sales*/
      set FF8REC empty; /* init PFHST record*/

      FF8REC.YSMXDV = FFWREC.YSMXDV; /* use specific div code*/
      FE0LS-03(); /* select sum SGRP 'SS'*/
      FE0LW00.FE0LW-UHS = FE0LW00.FE0LW-UHS + FF8REC.FF6PRFCT;
    end

      /* ---------------------------------------------------*/
       /* Load style group monthly sales qtys*/
      /* ---------------------------------------------------*/

    FE0LW00.FE0LW-UQT[FE0LW-PIX] = FE0LW00.FE0LW-UHS;
    FFXREC.FFXNUMB = FE0LW00.FE0LW-UHS;
    XSFFS10();
    FE0LW00.FE0LW-QTY[FE0LW-PIX] = FFXREC.FFXCHAR;

      /* ---------------------------------------------------*/
       /* Accumulate style group qty total*/
      /* ---------------------------------------------------*/

    FE0LW00.FE0LW-UTQ = FE0LW00.FE0LW-UHS + FE0LW00.FE0LW-UTQ;

      /* ---------------------------------------------------------*/
       /* Accumulate monthly sales qty totals(column totals)*/
      /* ---------------------------------------------------------*/

    FE0LW00.FE0LW-NM1 = FE0LW03.FE0LW-UMT[FE0LW-PIX];
    FE0LW03.FE0LW-UMT[FE0LW-PIX] = FE0LW00.FE0LW-UHS + FE0LW00.FE0LW-NM1;
    FFXREC.FFXNUMB = FE0LW03.FE0LW-UMT[FE0LW-PIX];
    XSFFS10();
    FE0LW03.FE0LW-MTQ[FE0LW-PIX] = FFXREC.FFXCHAR;

    FE0LW00.FE0LW-PIX = FE0LW00.FE0LW-PIX + 1;

  end

    /* ------------------------------------------------------------*/
     /* Load style group total sales qty(last entry in t/s)*/
    /* ------------------------------------------------------------*/

  FE0LW00.FE0LW-UQT[FE0LW-TIX] = FE0LW00.FE0LW-UTQ;
  FFXREC.FFXNUMB = FE0LW00.FE0LW-UTQ;
  XSFFS10();
  FE0LW00.FE0LW-QTY[FE0LW-TIX] = FFXREC.FFXCHAR;

    /* ------------------------------------------------------------*/
     /* Load temporary storage record with style group detail*/
     /* and total qtys*/
    /* ------------------------------------------------------------*/

  FE0LW02.FE0LW-QTS[FE0LW-IDX] = FE0LW00.FE0LW-LQT;

    /* ------------------------------------------------------------*/
     /* Accumulate monthly sales qty total(last entry in w/s)*/
    /* ------------------------------------------------------------*/

  FE0LW00.FE0LW-NM1 = FE0LW03.FE0LW-UMT[FE0LW-TIX];
  FE0LW03.FE0LW-UMT[FE0LW-TIX] = FE0LW00.FE0LW-NM1 + FE0LW00.FE0LW-UTQ;
  FFXREC.FFXNUMB = FE0LW03.FE0LW-UMT[FE0LW-TIX];
  XSFFS10();
  FE0LW03.FE0LW-MTQ[FE0LW-TIX] = FFXREC.FFXCHAR;

end // end FE0L-140

// Process style/colors
Function FE0L-150()
   /* ----------------------------------------------------------*/
   /* Process PFHST style/colors.*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* Process the style/colors for the specified style group.*/
   /* ----------------------------------------------------------*/

  FE0L-130(); /* Select PFHST style/colors set - 'S1'*/

  FE0LW00.FE0LW-CR1 = "N"; /* Initialize end of cursor style/colors*/
  FE0LW-SAVE-SY1STNBR = "      "; /* style number*/
  FE0LW-SAVE-SY2CLRID = "   "; /* color*/
  FE0LW-SAVE-XDMCD = "  "; /* dim*/

  FE0L-131(); /* Fetch next style/color PFHST - 'N1'*/

  if (FE0LW00.FE0LW-CR1 == "Y") /* If end of cursor*/
    FE0L-132(); /* Close PFHST style/colors set - 'C1'*/
    return;
  end

  while (FE0LW00.FE0LW-CR1 == "N") /* Until end of cursor style/colors set*/

    if (FG9REC.SY1STNBR == FE0LW-SAVE-SY1STNBR /* style*/
     && FG9REC.SY2CLRID == FE0LW-SAVE-SY2CLRID /* color*/
     && FG9REC.XDMCD == FE0LW-SAVE-XDMCD)      /* dim*/

        /* continue on to find next unique style/color/dim*/

    else /* process the style/color/dim*/

      FE0LW02.FE0LW-RCT[FE0LW-IDX] = "2"; /* record type*/
      FE0LW00.SY1STNBR = FG9REC.SY1STNBR; /* style number*/
      FE0LW00.SY2CLRID = FG9REC.SY2CLRID; /* color*/
      FE0LW00.XDMCD = FG9REC.XDMCD; /* dim*/
      FE0LW00.FE0LW-DH1 = "-";
      FE0LW00.FE0LW-DH2 = "-";
      FE0LW02.FE0LW-DSC[FE0LW-IDX] = FE0LW00.FE0LW-DSC; /* style/clr/dim*/

        /* ------------------------------------------------------------*/
         /* For each style group, obtain the summed master forecast*/
         /* from the VMSTY001 table.*/
        /* ------------------------------------------------------------*/

      FE0LW00.FE0LW-UTQ = 0; /* init w/s product range total*/
      FE0LW00.FE0LW-PIX = 1; /* init process index*/

      while (FE0LW00.FE0LW-PIX <= FFZREC.FFZNUMMO) /* While LE no mos in range*/

        FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FE0LW-PIX];
        FFFREC.FFFENDMO = FFZREC.FFZINDMO[FE0LW-PIX];

        if (FFWREC.YSMXDV == "*") /* div code wildcarded*/

          /* Process each division separately as required by IO3740*/

          /* division '10'*/

          FE0LW00.FE0LW-UHS = 0; /* init prdctn fcst*/
          set FF9REC empty; /* init PFHST record*/

          FF9REC.YSMXDV = "10"; /* div code '10'*/
          FE0LS-05(); /* select sum MSTY 'SS'*/
          FE0LW00.FE0LW-UHS = FE0LW00.FE0LW-UHS + FF9REC.FF6PRFCT; /* '10'*/

          /* division '20'*/

          set FF9REC empty; /* init PFHST record*/

          FF9REC.YSMXDV = "20"; /* div code '20'*/
          FE0LS-05(); /* select sum MSTY 'SS'*/
          FE0LW00.FE0LW-UHS = FE0LW00.FE0LW-UHS + FF9REC.FF6PRFCT; /* '20'*/

        else /* div code specified*/

          FE0LW00.FE0LW-UHS = 0; /* init prdctn fcst*/
          set FF9REC empty; /* init PFHST record*/

          FF9REC.YSMXDV = FFWREC.YSMXDV; /* use specific div code*/
          FE0LS-05(); /* select sum MSTY 'SS'*/
          FE0LW00.FE0LW-UHS = FE0LW00.FE0LW-UHS + FF9REC.FF6PRFCT;
        end

        /* ---------------------------------------------------*/
         /* Load style color monthly sales qtys*/
        /* ---------------------------------------------------*/

        FE0LW00.FE0LW-UQT[FE0LW-PIX] = FE0LW00.FE0LW-UHS;
        FFXREC.FFXNUMB = FE0LW00.FE0LW-UHS;
        XSFFS10();
        FE0LW00.FE0LW-QTY[FE0LW-PIX] = FFXREC.FFXCHAR;

        /* ---------------------------------------------------*/
         /* Accumulate style color qty total*/
        /* ---------------------------------------------------*/

        FE0LW00.FE0LW-UTQ = FE0LW00.FE0LW-UHS + FE0LW00.FE0LW-UTQ;

        FE0LW00.FE0LW-PIX = FE0LW00.FE0LW-PIX + 1;

      end

      /* ------------------------------------------------------------*/
       /* Load style color total sales qty(last entry in t/s)*/
      /* ------------------------------------------------------------*/

      FE0LW00.FE0LW-UQT[FE0LW-TIX] = FE0LW00.FE0LW-UTQ;
      FFXREC.FFXNUMB = FE0LW00.FE0LW-UTQ;
      XSFFS10();
      FE0LW00.FE0LW-QTY[FE0LW-TIX] = FFXREC.FFXCHAR;

      /* ------------------------------------------------------------*/
       /* Load temporary storage record with style color detail*/
       /* and total qtys*/
      /* ------------------------------------------------------------*/

      FE0LW02.FE0LW-QTS[FE0LW-IDX] = FE0LW00.FE0LW-LQT;

      /* ------------------------------------------------------------*/
       /* save style group total into each style color entry.*/
      /* ------------------------------------------------------------*/

      FE0LW02.FE0LW-STYGRP-TOT[FE0LW-IDX] = FE0LW00.FE0LW-SGT;

      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/

      if (FE0LW00.FE0LW-IDX > 12) /* Page is full*/
        FE0LW02.FE0LW-NLD = FE0LW00.FE0LW-IDX; /* # of lines loaded*/
        FE0LS-04(); /* Add page to temp storage*/
      else
        FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1;
      end

    end /* check for unique style/color/dim*/

    /* save style/color/dim*/

    FE0LW-SAVE-SY1STNBR = FG9REC.SY1STNBR; /* style number*/
    FE0LW-SAVE-SY2CLRID = FG9REC.SY2CLRID; /* color*/
    FE0LW-SAVE-XDMCD = FG9REC.XDMCD; /* dim*/

    FE0L-131(); /* Fetch next style/color PFHST - 'N1'*/

  end

  FE0L-132(); /* Close PFHST style/colors set - 'C1'*/

end // end FE0L-150

// Format and converse the map
Function FE0L-200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors format map*/

    set FE0LM001 initial; /* m001 input/ouput area*/

    /* ------------------------------------------------------------*/
     /* Format FE0LM001 using passed data*/
    /* ------------------------------------------------------------*/

    FE0LW00.FE0LW-WDT = FFWREC.FFABEGMO; /* w/s date field*/
    FE0LM001.FE0LM-BRG = FE0LW00.FE0LW-WYM; /* begin month range*/
    FE0LW00.FE0LW-WDT = FFWREC.FFAENDMO; /* w/s date field*/
    FE0LM001.FE0LM-ERG = FE0LW00.FE0LW-WYM; /* end month range*/

    FE0LM001.YSMXDV = FFWREC.YSMXDV; /* sum div grp code*/
    FE0LM001.YSMSMDSC = FFWREC.YSMSMDSC; /* sum div grp abrv desc*/

    FE0LM001.YPGCD = FFWREC.YPGCD; /* product type group*/
    FE0LM001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/

    FE0LM001.XPCCD = FFWREC.XPCCD; /* product line code*/
    FE0LM001.XPCABRV = FFWREC.XPCABRV; /* product line abrv*/

    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/

    if (FE0LW00.FE0LW-SWF == "Y") /* map must be formatted*/
      FE0L-210(); /* Format the data on the map*/
    end

  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (FE0LW00.TA5TSQIX > 0)
    set FE0LM001.XXXLITPG skip;
    FE0LM001.XXXTSPAG = FE0LW00.XXXTSPAG; /* Current page*/
    set FE0LM001.XXXLITOF skip;
    FE0LM001.TA5TSQIX = FE0LW00.TA5TSQIX; /* max pages*/
  end

  FE0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FE0LM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0LM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FE0LM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FE0LM001 alarm; /* Indicate sound alarm*/
  end

  converse FE0LM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FE0LM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0LM001.CAITEM; /* Application data*/


end // end FE0L-200

// Format the display data
Function FE0L-210()

  FE0LW00.FE0LW-SWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (FE0LW01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* load monthly headings yymm*/
   /* ------------------------------------------------------------*/

  set FE0LM001.FE0LM-SGH skip; /* style group literal*/
  set FE0LM001.FE0LM-SCH skip; /* style color literal*/

  FE0LW00.FE0LW-LIX = 1;
  FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-PAGP[FE0LW-PGX];

  if (FE0LW00.FE0LW-PMON[FE0LW-PGX] == "Y") /* print remaining month check*/
    FE0L-211();
  else
    FE0L-212();
    FE0L-213();
  end

   /* ------------------------------------------------------------*/
   /* obtain style grp/style color prdctn fcst qtys from t/s*/
   /* ------------------------------------------------------------*/

  FE0LS-16(); /* read temporary storage*/

  FE0LW00.FE0LW-PIX = 1;
  while (FE0LW00.FE0LW-PIX <= FE0LW02.FE0LW-NLD) /* process temp storage*/

    FE0LW05.FE0LW-DSC = FE0LW02.FE0LW-DSC[FE0LW-PIX];

    FE0LW00.FE0LW-LQT = FE0LW02.FE0LW-QTS[FE0LW-PIX];

    /* ----------------------------------------------------------*/
     /* reformat detail quantities using working storage*/
     /* and calculate detail subtotal*/
    /* ----------------------------------------------------------*/

    FE0LW00.FE0LW-LIX = 1; /* load index*/
    move 0 to FE0LW00.FE0LW-UST[1] for all; /* product line subtotal*/
    FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-PAGP[FE0LW-PGX];
    move " " to FE0LW00.FE0LW-WQT[1] for all; /* clear w/s display table*/

    if (FE0LW00.FE0LW-PMON[FE0LW-PGX] == "Y") /* print remaining month check*/
      FE0L-214();
    else
      FE0L-215();
      FE0L-216();
    end

    /* ----------------------------------------------------------*/
     /* load detail quantities to m001*/
    /* ----------------------------------------------------------*/

    FE0LW05.FE0LW-Q01 = FE0LW00.FE0LW-WQT[1];
    FE0LW05.FE0LW-Q02 = FE0LW00.FE0LW-WQT[2];
    FE0LW05.FE0LW-Q03 = FE0LW00.FE0LW-WQT[3];
    FE0LW05.FE0LW-Q04 = FE0LW00.FE0LW-WQT[4];
    FE0LW05.FE0LW-Q05 = FE0LW00.FE0LW-WQT[5];
    FE0LW05.FE0LW-Q06 = FE0LW00.FE0LW-WQT[6];
    FE0LW05.FE0LW-Q07 = FE0LW00.FE0LW-WQT[7];
    FE0LW05.FE0LW-Q08 = FE0LW00.FE0LW-WQT[8];
    FE0LW05.FE0LW-Q09 = FE0LW00.FE0LW-WQT[9];
    FE0LW05.FE0LW-Q10 = FE0LW00.FE0LW-WQT[10];

    FE0LM001.FE0LM-DTL[FE0LW-PIX] = FE0LW05.FE0LW-GP5;

    FE0LW00.FE0LW-PIX = FE0LW00.FE0LW-PIX + 1;

  end

   /* ------------------------------------------------------------*/
   /* load monthly totals*/
   /* ------------------------------------------------------------*/

  FE0LW05.FE0LW-DSC = "TOTAL QTY     ";

  FE0LW00.FE0LW-UMT = 0;
  move " " to FE0LW00.FE0LW-WQT[1] for all; /* clear w/s display table*/
  FE0LW00.FE0LW-LIX = 1; /* load index*/
  FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-PAGP[FE0LW-PGX];

  if (FE0LW00.FE0LW-PMON[FE0LW-PGX] == "Y") /* print remaining month check*/
    FE0L-217();
  else
    FE0L-218();
    FE0L-219();
  end

   /* ----------------------------------------------------------*/
   /* load style grp monthly total quantities to m001*/
   /* ----------------------------------------------------------*/

  FE0LW05.FE0LW-Q01 = FE0LW00.FE0LW-WQT[1];
  FE0LW05.FE0LW-Q02 = FE0LW00.FE0LW-WQT[2];
  FE0LW05.FE0LW-Q03 = FE0LW00.FE0LW-WQT[3];
  FE0LW05.FE0LW-Q04 = FE0LW00.FE0LW-WQT[4];
  FE0LW05.FE0LW-Q05 = FE0LW00.FE0LW-WQT[5];
  FE0LW05.FE0LW-Q06 = FE0LW00.FE0LW-WQT[6];
  FE0LW05.FE0LW-Q07 = FE0LW00.FE0LW-WQT[7];
  FE0LW05.FE0LW-Q08 = FE0LW00.FE0LW-WQT[8];
  FE0LW05.FE0LW-Q09 = FE0LW00.FE0LW-WQT[9];
  FE0LW05.FE0LW-Q10 = FE0LW00.FE0LW-WQT[10];

  FE0LM001.FE0LM-DTL[FE0LW-PIX] = FE0LW05.FE0LW-GP5;

  FE0LW00.FE0LW-PIX = FE0LW00.FE0LW-PIX + 1;

   /* ------------------------------------------------------------*/
   /* load monthly percents*/
   /* ------------------------------------------------------------*/

  FE0LW05.FE0LW-DSC = "TOTAL PCT     ";

  move " " to FE0LW00.FE0LW-WQT[1] for all; /* clear w/s display table*/
  FE0LW00.FE0LW-LIX = 1; /* load index*/
  FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-PAGP[FE0LW-PGX];

  if (FE0LW00.FE0LW-PMON[FE0LW-PGX] == "Y") /* print remaining month check*/
    FE0L-220();
  else
    FE0L-221();
    FE0L-222();
  end

   /* ----------------------------------------------------------*/
   /* load monthly total percents*/
   /* ----------------------------------------------------------*/

  FE0LW05.FE0LW-Q01 = FE0LW00.FE0LW-WQT[1];
  FE0LW05.FE0LW-Q02 = FE0LW00.FE0LW-WQT[2];
  FE0LW05.FE0LW-Q03 = FE0LW00.FE0LW-WQT[3];
  FE0LW05.FE0LW-Q04 = FE0LW00.FE0LW-WQT[4];
  FE0LW05.FE0LW-Q05 = FE0LW00.FE0LW-WQT[5];
  FE0LW05.FE0LW-Q06 = FE0LW00.FE0LW-WQT[6];
  FE0LW05.FE0LW-Q07 = FE0LW00.FE0LW-WQT[7];
  FE0LW05.FE0LW-Q08 = FE0LW00.FE0LW-WQT[8];
  FE0LW05.FE0LW-Q09 = FE0LW00.FE0LW-WQT[9];
  FE0LW05.FE0LW-Q10 = FE0LW00.FE0LW-WQT[10];

  FE0LM001.FE0LM-DTL[FE0LW-PIX] = FE0LW05.FE0LW-GP5;


end // end FE0L-210

// Print remaining month heading
Function FE0L-211()
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month headings, Percent, Range total and Percent or subtotal,*/
   /* Range total and percent)*/
   /*  */
   /* load subtotal/total/percent literals*/
   /*  */
   /* ----------------------------------------------------------------------*/

  FE0LW00.FE0LW-REM = FE0LW00.FE0LW-SIN[FE0LW-SNX] - 6; /* remaining mos*/

  while (FE0LW00.FE0LW-IDX <= FFZREC.FFZNUMMO /* nbr of mos loaded*/
   && FE0LW00.FE0LW-LIX <= FE0LW00.FE0LW-REM) /* nbr of mos left*/

    FE0LM001.FE0LM-HD2[FE0LW-LIX] = FFZREC.FFZIYYMM[FE0LW-IDX];
    set FE0LM001.FE0LM-HD2[FE0LW-LIX] skip;

    FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1; /* increment index*/
    FE0LW00.FE0LW-LIX = FE0LW00.FE0LW-LIX + 1; /* increment load index*/

  end

  FE0LS-20(); /* load heading literals*/

end // end FE0L-211

// Move monthly heading
Function FE0L-212()

  while (FE0LW00.FE0LW-IDX <= FFZREC.FFZNUMMO /* nbr of mos loaded*/
   && FE0LW00.FE0LW-LIX <= FE0LW00.FE0LW-SIN[FE0LW-SNX]
   && FE0LW00.FE0LW-LIX <= 6)

    FE0LM001.FE0LM-HD2[FE0LW-LIX] = FFZREC.FFZIYYMM[FE0LW-IDX];
    set FE0LM001.FE0LM-HD2[FE0LW-LIX] skip;

    FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1; /* increment index*/
    FE0LW00.FE0LW-LIX = FE0LW00.FE0LW-LIX + 1; /* increment load index*/

  end
end // end FE0L-212

// Move total and pct heading
Function FE0L-213()
   /* --------------------------------------------------------*/
   /* move the totals and pct headings*/
   /* --------------------------------------------------------*/

  if (FE0LW00.FE0LW-LIX > FE0LW00.FE0LW-SIN[FE0LW-SNX])
                                                     /* load the whole sesn*/

    FE0LS-20(); /* load heading literals*/

  end

end // end FE0L-213

// Move the remaining month
Function FE0L-214()

   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month, Percent, Range total and Percent or subtotal, Range total*/
   /* percent)*/
   /*  */
   /* load subtotal/total/percent*/
   /*  */
   /* ----------------------------------------------------------------------*/

   /* --------------------------------------------------------------*/
   /* print remaining months, subtotal, range total and pct fields*/
   /* --------------------------------------------------------------*/


  FE0LW00.FE0LW-SIX = FE0LW00.FE0LW-IDX - 6;
  while (FE0LW00.FE0LW-SIX < FE0LW00.FE0LW-IDX)
    FE0LW00.FE0LW-UST[FE0LW-PIX] = FE0LW00.FE0LW-UQT[FE0LW-SIX] +                                 FE0LW00.FE0LW-UST[FE0LW-PIX];
    FE0LW00.FE0LW-SIX = FE0LW00.FE0LW-SIX + 1;
  end

   /* remaining mos*/
  FE0LW00.FE0LW-REM = FE0LW00.FE0LW-SIN[FE0LW-SNX] - 6;
  while (FE0LW00.FE0LW-IDX <= FFZREC.FFZNUMMO   /* nbr of mos loaded*/
   && FE0LW00.FE0LW-LIX <= FE0LW00.FE0LW-REM /* nbr of mos left*/
   && FE0LW00.FE0LW-LIX <= 6) /* right end*/

    FE0LW00.FE0LW-WQT[FE0LW-LIX] = FE0LW00.FE0LW-QTY[FE0LW-IDX];

    FE0LW00.FE0LW-UST[FE0LW-PIX] = FE0LW00.FE0LW-UQT[FE0LW-IDX] +                                FE0LW00.FE0LW-UST[FE0LW-PIX];

    FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1; /* increment work index*/
    FE0LW00.FE0LW-LIX = FE0LW00.FE0LW-LIX + 1; /* increment load index*/

  end

  FE0LS-30(); /* subtotal and range total*/

end // end FE0L-214

// Move the monthly qty
Function FE0L-215()

  while (FE0LW00.FE0LW-IDX <= FFZREC.FFZNUMMO /* nbr mos loaded*/
   && FE0LW00.FE0LW-LIX <= FE0LW00.FE0LW-SIN[FE0LW-SNX]
   && FE0LW00.FE0LW-LIX <= 6)

    FE0LW00.FE0LW-WQT[FE0LW-LIX] = FE0LW00.FE0LW-QTY[FE0LW-IDX];

    FE0LW00.FE0LW-UST[FE0LW-PIX] = FE0LW00.FE0LW-UQT[FE0LW-IDX] +                                  FE0LW00.FE0LW-UST[FE0LW-PIX];

    FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1; /* increment save index*/
    FE0LW00.FE0LW-LIX = FE0LW00.FE0LW-LIX + 1; /* increment load index*/

  end

end // end FE0L-215

// Move the total line
Function FE0L-216()
  if (FE0LW00.FE0LW-LIX > FE0LW00.FE0LW-SIN[FE0LW-SNX])
                                                     /* load the whole sesn*/

    FE0LS-30(); /* move subtotal, total and pcts*/

  end
end // end FE0L-216

// Move the remaining month total
Function FE0L-217()

   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month, Percent, Range total and Percent or subtotal, Range total*/
   /* percent)*/
   /*  */
   /* load subtotal/total/percent for the total line*/
   /*  */
   /* ----------------------------------------------------------------------*/

   /* --------------------------------------------------------------*/
   /* print remaining months, subtotal, range total and pct fields*/
   /* --------------------------------------------------------------*/


   /* ---------------------------------------------------------------*/
   /* since pf10 is going backward to the 1st page and subtotal*/
   /* will still be 0. So if pf10 and the 2nd (right) page is*/
   /* reached, then the calculation of subtotal in the 1st*/
   /* page is necessary.*/
   /* ---------------------------------------------------------------*/

  FE0LW00.FE0LW-SIX = FE0LW00.FE0LW-IDX - 6;
  while (FE0LW00.FE0LW-SIX < FE0LW00.FE0LW-IDX)
    FE0LW00.FE0LW-UMT = FE0LW03.FE0LW-UMT[FE0LW-SIX] +                      FE0LW00.FE0LW-UMT;
    FE0LW00.FE0LW-SIX = FE0LW00.FE0LW-SIX + 1;
  end

  FE0LW00.FE0LW-REM = FE0LW00.FE0LW-SIN[FE0LW-SNX] - 6; /* remaining mos*/

  while (FE0LW00.FE0LW-IDX <= FFZREC.FFZNUMMO   /* nbr of mos loaded*/
   && FE0LW00.FE0LW-LIX <= FE0LW00.FE0LW-REM /* nbr of mos left*/
   && FE0LW00.FE0LW-LIX <= 6) /* right end*/

    FE0LW00.FE0LW-WQT[FE0LW-LIX] = FE0LW03.FE0LW-MTQ[FE0LW-IDX];
    FE0LW00.FE0LW-UMT = FE0LW03.FE0LW-UMT[FE0LW-IDX] + FE0LW00.FE0LW-UMT;

    FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1; /* increment work index*/
    FE0LW00.FE0LW-LIX = FE0LW00.FE0LW-LIX + 1; /* increment load index*/

  end

  FE0LS-40(); /* process tots for total line*/

end // end FE0L-217

// Move the monthly total
Function FE0L-218()

  while (FE0LW00.FE0LW-IDX <= FFZREC.FFZNUMMO /* nbr mos loaded*/
   && FE0LW00.FE0LW-LIX <= FE0LW00.FE0LW-SIN[FE0LW-SNX]
   && FE0LW00.FE0LW-LIX <= 6)

    FE0LW00.FE0LW-WQT[FE0LW-LIX] = FE0LW03.FE0LW-MTQ[FE0LW-IDX];
    FE0LW00.FE0LW-UMT = FE0LW03.FE0LW-UMT[FE0LW-IDX] + FE0LW00.FE0LW-UMT;

    FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1; /* increment save index*/
    FE0LW00.FE0LW-LIX = FE0LW00.FE0LW-LIX + 1; /* increment load index*/

  end

end // end FE0L-218

// Move subtot & tot for tot line
Function FE0L-219()
   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/

  if (FE0LW00.FE0LW-LIX > FE0LW00.FE0LW-SIN[FE0LW-SNX])
                                                     /* load the whole sesn*/

    FE0LS-40(); /* translate and load subtotal and total*/

  end
end // end FE0L-219

// Move the remaining month pct
Function FE0L-220()

   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Monthly percent or subtotal percent)*/
   /*  */
   /* load subtotal percent for the percent line*/
   /*  */
   /* ----------------------------------------------------------------------*/

   /* --------------------------------------------------------------*/
   /* print remaining months and subtotal*/
   /* --------------------------------------------------------------*/

  FE0LW00.FE0LW-REM = FE0LW00.FE0LW-SIN[FE0LW-SNX] - 6; /* remaining mos*/

  while (FE0LW00.FE0LW-IDX <= FFZREC.FFZNUMMO   /* nbr of mos loaded*/
   && FE0LW00.FE0LW-LIX <= FE0LW00.FE0LW-REM /* nbr of mos left*/
   && FE0LW00.FE0LW-LIX <= 6) /* right end*/

    if (FE0LW03.FE0LW-UMT[FE0LW-TIX] > 0)
      FE0LW00.FE0LW-NM1 = FE0LW03.FE0LW-UMT[FE0LW-IDX] * 100;
      FE0LW00.FE0LW-NPT = mathLib.round(FE0LW00.FE0LW-NM1 /                        FE0LW03.FE0LW-UMT[FE0LW-TIX], -mathLib.decimals(FE0LW00.FE0LW-NPT));

      /* ----------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* ----------------------------------------------------------*/

      if (FE0LW00.FE0LW-NPT != 0)
        FE0LW00.FE0LW-PTW = FE0LW00.FE0LW-NP1;
        FE0LW00.FE0LW-PTP = ".";
        FE0LW00.FE0LW-PTD = FE0LW00.FE0LW-NP2;

        if (FE0LW00.FE0LW-PT1 == "0")
          FE0LW00.FE0LW-PT1 = " ";
          if (FE0LW00.FE0LW-PT2 == "0")
            FE0LW00.FE0LW-PT2 = " ";
          end
        end

        FE0LW00.FE0LW-WQT[FE0LW-LIX] = FE0LW00.FE0LW-PCT;

      end
    end

    FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1; /* increment work index*/
    FE0LW00.FE0LW-LIX = FE0LW00.FE0LW-LIX + 1; /* increment load index*/

  end

  FE0LS-50(); /* translate and load subtotal*/

  FE0LW00.FE0LW-NEXT = "Y"; /* next season*/

end // end FE0L-220

// Move the monthly pct
Function FE0L-221()
  while (FE0LW00.FE0LW-IDX <= FFZREC.FFZNUMMO /* nbr mos loaded*/
   && FE0LW00.FE0LW-LIX <= FE0LW00.FE0LW-SIN[FE0LW-SNX]
   && FE0LW00.FE0LW-LIX <= 6)

    /* ----------------------------------------------------------*/
     /* calculate/load monthly percents*/
    /* ----------------------------------------------------------*/

    if (FE0LW03.FE0LW-UMT[FE0LW-TIX] > 0)
      FE0LW00.FE0LW-NM1 = FE0LW03.FE0LW-UMT[FE0LW-IDX] * 100;
      FE0LW00.FE0LW-NPT = mathLib.round(FE0LW00.FE0LW-NM1 / FE0LW03.FE0LW-UMT[FE0LW-TIX], -mathLib.decimals(FE0LW00.FE0LW-NPT));

      /* ----------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* ----------------------------------------------------------*/

      if (FE0LW00.FE0LW-NPT != 0)
        FE0LW00.FE0LW-PTW = FE0LW00.FE0LW-NP1;
        FE0LW00.FE0LW-PTP = ".";
        FE0LW00.FE0LW-PTD = FE0LW00.FE0LW-NP2;

        if (FE0LW00.FE0LW-PT1 == "0")
          FE0LW00.FE0LW-PT1 = " ";
          if (FE0LW00.FE0LW-PT2 == "0")
            FE0LW00.FE0LW-PT2 = " ";
          end
        end

        FE0LW00.FE0LW-WQT[FE0LW-LIX] = FE0LW00.FE0LW-PCT;

      end
    end

    FE0LW00.FE0LW-IDX = FE0LW00.FE0LW-IDX + 1; /* increment save index*/
    FE0LW00.FE0LW-LIX = FE0LW00.FE0LW-LIX + 1; /* increment load index*/

  end

end // end FE0L-221

// Move the total pct
Function FE0L-222()

   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/

  if (FE0LW00.FE0LW-LIX > FE0LW00.FE0LW-SIN[FE0LW-SNX])
                                                     /* load the whole sesn*/

    FE0LS-50(); /* translate and load subtotal*/

    if (FE0LW00.FE0LW-IDX > FFZREC.FFZNUMMO) /* Reach the no of mo reqstd*/

    else
      FE0LW00.FE0LW-NEXT = "Y"; /* next season*/
    end

  else

    FE0LW00.FE0LW-SIX = FE0LW00.FE0LW-PGX + 1;
    FE0LW00.FE0LW-PMON[FE0LW-SIX] = "Y";

  end
end // end FE0L-222

// Check attention identifier
Function FE0L-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    FE0LW00.FE0LW-SWF = "Y"; /* format screen m001*/
    FE0LW00.FE0LW-SWR = "N"; /* request for data*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FE0LM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FE0LS-01(); /* purge temp storage*/

      XSFFS01(); /* Exit to another application*/

      FE0LW00.FE0LW-SWF = "Y"; /* format screen m001*/
      FE0LW00.FE0LW-SWR = "N"; /* request for data*/

      set FE0LM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FE0LM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FE0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FE0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FE0K"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    FE0LW00.FE0LW-SWF = "Y"; /* format screen m001*/
    FE0LW00.FE0LW-SWR = "N"; /* request for data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf10  /* pf10 was not pressed*/
   && converseVar.eventKey not pf11  /* pf11 was not pressed*/
   && converseVar.eventKey not pf19) /* pf19 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FE0L-300

// Reset highlighted fields
Function FE0L-400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FE0LM001.FE0LM-BRG initialAttributes; /* begin range*/
  set FE0LM001.FE0LM-ERG initialAttributes; /* end range*/
  set FE0LM001.YPGCD initialAttributes; /* product type group*/
  set FE0LM001.XPCCD initialAttributes; /* product line code*/
  set FE0LM001.YSMXDV initialAttributes; /* history option*/
  set FE0LM001.CATOAP initialAttributes;
  set FE0LM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FE0LM001.XPCCD == "?" /* product category*/
   || FE0LM001.YPGCD == "?") /* product type group*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FE0LM001.XPCCD == "?") /* category code list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODES"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      XPCREC.XPCCD = FFWREC.XPCCD; /* product line code*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FE0LM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FE0LM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FE0LM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/

    end

    set FE0LM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/

  if (FE0LM001.YPGCD == "?") /* product type grp list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/

    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FE0LM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0LM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FE0LM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FE0LM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/

    end

    set FE0LM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FE0L-400

// Verify the entered data
Function FE0L-500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FE0LM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* verify request to scroll forward(pf7) or backwards(pf8)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    FE0L-510(); /* verify scroll fwrd/back request*/

  end

   /* ------------------------------------------------------------*/
   /* verify request to scroll right(pf11) or left(pf10)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10
   || converseVar.eventKey is pf11)

    FE0L-520(); /* verify scroll left/right*/

  end

   /* ------------------------------------------------------------*/
   /* if ezeaid not equal enter verify modifiable data*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter)

    FE0L-530(); /* verify modifiable data*/

  end

   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    FE0LW00.FE0LW-WYM = FFWREC.FFABEGMO;
    FE0LW00.FE0LW-WYM1 = FFWREC.FFAENDMO;

    if (FE0LM001.YSMXDV != FFWREC.YSMXDV         /* div code changed*/
     || FE0LM001.YSMXDV == " "                   /* div code changed*/
     || FE0LM001.YPGCD != FFWREC.YPGCD           /* product type grp chg*/
     || FE0LM001.YPGCD == " "                    /* product type grp chg*/
     || FE0LM001.XPCCD != FFWREC.XPCCD           /* product category chg*/
     || FE0LM001.XPCCD == " "                    /* product category changed*/
     || FE0LM001.FE0LM-BRG != FE0LW00.FE0LW-WYM  /* beg range changed*/
     || FE0LM001.FE0LM-BRG == 0                  /* beg range changed*/
     || FE0LM001.FE0LM-ERG != FE0LW00.FE0LW-WYM1 /* end range changed*/
     || FE0LM001.FE0LM-ERG == 0)                 /* end range changed*/

      FE0LW00.FE0LW-SNX = 1; /* season index*/
      FE0LW00.FE0LW-PGX = 1; /* page index*/
      FE0LW00.XXXTSPAG = 1; /* page no*/
      FE0LW00.FE0LW-NEXT = "N"; /* next season flag*/
      move "N" to FE0LW00.FE0LW-PMON[1] for all; /* print remaining month flag*/
      FE0LW00.FE0LW-UMT = 0;
      move 0 to FE0LW00.FE0LW-UST[1] for all;

    end

    FE0L-540(); /* validate entry fields*/

    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/

    FE0LW00.FE0LW-WYM = FFWREC.FFABEGMO;
    FE0LW00.FE0LW-WYM1 = FFWREC.FFAENDMO;

    if (FE0LM001.YSMXDV != FFWREC.YSMXDV         /* div code changed*/
     || FE0LM001.YSMXDV == " "                   /* div code changed*/
     || FE0LM001.YPGCD != FFWREC.YPGCD           /* product type grp chg*/
     || FE0LM001.YPGCD == " "                    /* product type grp chg*/
     || FE0LM001.XPCCD != FFWREC.XPCCD           /* product category chg*/
     || FE0LM001.XPCCD == " "                    /* product category changed*/
     || FE0LM001.FE0LM-BRG != FE0LW00.FE0LW-WYM  /* beg range changed*/
     || FE0LM001.FE0LM-BRG == 0                  /* beg range changed*/
     || FE0LM001.FE0LM-ERG != FE0LW00.FE0LW-WYM1 /* end range changed*/
     || FE0LM001.FE0LM-ERG == 0)                 /* end range changed*/

      if (converseVar.validationMsgNum == 0)
        FE0LW00.FE0LW-SWR = "Y"; /* request data request*/
      end

    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FE0L-500

// Verify scroll fwrd/back
Function FE0L-510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FE0LW00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FE0LW00.XXXTSPAG >= FE0LW00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end


end // end FE0L-510

// Verify scroll left/right
Function FE0L-520()
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/
    if (FE0LW00.FE0LW-PGX == 1) /* and no previous pages*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(23); /* No previous page to display*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FE0LW00.FE0LW-IDX > FFZREC.FFZNUMMO) /* and no more pages*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(24); /* No more pages to display*/

  end


end // end FE0L-520

// Verify header modifible fields
Function FE0L-530()
   /* -----------------------------------------------------*/
   /* Verify header modifiable fields*/
   /* -----------------------------------------------------*/

  if (FE0LM001.YSMXDV != FFWREC.YSMXDV)
    set FE0LM001.YSMXDV cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "530";
  end

  if (FE0LM001.XPCCD != FFWREC.XPCCD)
    set FE0LM001.XPCCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "530";
  end

  if (FE0LM001.YPGCD != FFWREC.YPGCD)
    set FE0LM001.YPGCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "530";
  end

  FE0LW00.FE0LW-WED = FFWREC.FFAENDMO;
  if (FE0LM001.FE0LM-ERG != FE0LW00.FE0LW-EYM)
    set FE0LM001.FE0LM-ERG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "530";
  end

  FE0LW00.FE0LW-WBD = FFWREC.FFABEGMO;
  if (FE0LM001.FE0LM-BRG != FE0LW00.FE0LW-BYM)
    set FE0LM001.FE0LM-BRG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "530";
  end


end // end FE0L-530

// Validate modifiable data
Function FE0L-540()
   /* ------------------------------------------------------------*/
   /* validate beginning yymm of date range*/
   /* ------------------------------------------------------------*/

  FE0L-125(); /* Calculate the buy month*/

   /* reformat map begin date*/

  FE0LW00.FE0LW-WDT1 = 0;
  FE0LW00.FE0LW-WDT1 = FE0LM001.FE0LM-BRG;
  if (FE0LW00.FE0LW-WYY1 > 50)
    FE0LW00.FE0LW-WCC1 = 19;
  else
    FE0LW00.FE0LW-WCC1 = 20;
  end

  if (FE0LW00.FE0LW-WCY1 < FE0LW00.FE0LW-BYD) /* Less*/
    converseLib.validationFailed(151); /* Out of range*/
    FFWREC.XXXMODID = "540";
    set FE0LM001.FE0LM-BRG cursor, bold;
  end

  set FFZREC empty;

  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FE0LM001.FE0LM-BRG;
  FFZREC.FFZEYYMM = FE0LM001.FE0LM-ERG;

  XSFFS30(); /* edit date range*/

   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/

  if (FE0LM001.XPCCD != " ") /* Category code entered*/

    FE0L-541(); /* Get season-end month (s)*/

  end

   /* ------------------------------------------------------------*/
   /* validate div group using routine xsffs20*/
   /* ------------------------------------------------------------*/

  set YSMREC empty;
  YSMREC.YSMSUMCD = FE0LM001.YSMXDV;
  TA1REC.TA1PGMNM = "FE0L540";

  if (FE0LM001.YSMXDV == "*")
    FE0LM001.YSMSMDSC = "ALL"; /* Div grp description*/
  else
    XSFFS20(); /* validate/get division group data*/

    if (SQLCA.VAGen_SQLCODE == 0)
      FE0LM001.YSMSMDSC = YSMREC.YSMSMDSC;
    else
      FE0LM001.YSMSMDSC = " ";
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "540";
      set FE0LM001.YSMXDV cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FE0LM001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FE0LM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FE0LM001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "540";
    set FE0LM001.XPCCD cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/

  if (FE0LM001.YPGCD in YPGTBL.YPGCD
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FE0LM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  else
    FE0LM001.YPGABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "540";
    set FE0LM001.YPGCD cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC == "1")
    set FE0LM001.FE0LM-ERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "540";
  else
    if (FFZREC.FFZENDRC == "2")
      set FE0LM001.FE0LM-ERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "540";
    else
      if (FFZREC.FFZENDRC == "3")
        set FE0LM001.FE0LM-ERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "540";
      end
    end
  end

  if (FFZREC.FFZBEGRC == "1")
    set FE0LM001.FE0LM-BRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "540";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FE0LM001.FE0LM-BRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "540";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FE0LM001.FE0LM-BRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "540";
      end
    end
  end


end // end FE0L-540

// Get season end month(s)
Function FE0L-541()

   /* ------------------------------------------------------------*/
   /* Get season-end month(s)*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDMO == 0) /* passed from other application*/
    FE0LW00.FE0LW-WBD = FFWREC.FFABEGMO; /* beginning date*/
    FE0LW00.FE0LW-WED = FFWREC.FFAENDMO; /* ending date*/
  else
    FE0LW00.FE0LW-WBD = FFZREC.FFZBEGMO; /* beginning date*/
    FE0LW00.FE0LW-WED = FFZREC.FFZENDMO; /* ending date*/
  end

  FE0LW00.FE0LW-NSS = 0; /* init number of seasons*/
  FE0LW00.FE0LW-PIX = 2; /* init index*/

   /* Figure out number of months in range FE0LW00.FE0LW-NM1*/

  if (FE0LW00.FE0LW-BYY == FE0LW00.FE0LW-EYY) /* beg year EQ end year*/
   /* nbr of mos = end month minus (begin month plus 1)*/
    FE0LW00.FE0LW-NM1 = FE0LW00.FE0LW-EMM - FE0LW00.FE0LW-BMM + 1;
  else
   /* nbr of mos = (end month plus 12) minus (begin month plus 1)*/
    FE0LW00.FE0LW-NM1 = FE0LW00.FE0LW-EMM + 12 - FE0LW00.FE0LW-BMM + 1;
  end

   /* Figure out number of seasons FE0LW00.FE0LW-NSS*/
   /*  */
   /* Check the length of the range, if LE 6 months use end month of*/
   /* the range for sesn-end month; otherwise use range begin month plus*/
   /* 5 months for the first season-end month and the date range end*/
   /* date for the second season-end month.*/

  if (FE0LW00.FE0LW-NM1 <= 6) /* total nbr of months in range LE 6*/

    FE0LW00.FE0LW-NSS = 1; /* nbr of sesns*/

    FE0LW00.FE0LW-SEM[1] = FE0LW00.FE0LW-EMM; /* mm*/
    FE0LW00.FE0LW-SMO[1] = FE0LW00.FE0LW-WED; /* ccyymm*/

    FE0LW00.FE0LW-SEM[2] = 0; /* mm*/
    FE0LW00.FE0LW-SMO[2] = 0; /* ccyymm*/

  else /* total nbr of months in range GT 6*/

    FE0LW00.FE0LW-NSS = 2; /* nbr of sesns*/

    FE0LW00.FE0LW-WBD-FIRST = FE0LW00.FE0LW-WBD;
    FE0LW00.FE0LW-BMM-FIRST = FE0LW00.FE0LW-BMM-FIRST + 5;
    if (FE0LW00.FE0LW-BMM-FIRST > 12)
      FE0LW00.FE0LW-BMM-FIRST = FE0LW00.FE0LW-BMM-FIRST - 12;
      if (FE0LW00.FE0LW-BYY-FIRST == 99)
        FE0LW00.FE0LW-BCC-FIRST = FE0LW00.FE0LW-BCC-FIRST + 1;
  /* FE0LW00.FE0LW-BYY-FIRST = FE0LW00.FE0LW-BYY-FIRST + 1;dsmith*/
        FE0LW00.FE0LW-BYY-FIRST = 00;
      else
        FE0LW00.FE0LW-BYY-FIRST = FE0LW00.FE0LW-BYY-FIRST + 1;
      end
    end

    FE0LW00.FE0LW-SEM[1] = FE0LW00.FE0LW-BMM-FIRST; /* mm*/
    FE0LW00.FE0LW-SMO[1] = FE0LW00.FE0LW-WBD-FIRST; /* ccyymm*/

    FE0LW00.FE0LW-SEM[2] = FE0LW00.FE0LW-EMM; /* mm*/
    FE0LW00.FE0LW-SMO[2] = FE0LW00.FE0LW-WED; /* ccyymm*/

  end


   /* Figure out number of months in each season*/
   /*  */
  FE0LW00.FE0LW-PIX = FE0LW00.FE0LW-NSS;
   /* E 0 TO FE0LW00.FE0LW-NM1;     /* clear total months work area*/
  while (FE0LW00.FE0LW-PIX > 0) /* nbr of seasons*/
    FE0LS-80(); /* calculate no of mos in each sesn*/
    FE0LW00.FE0LW-PIX = FE0LW00.FE0LW-PIX - 1;
  end

end // end FE0L-541

// Process valid input request
Function FE0L-600()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  FE0LW00.FE0LW-SWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/

  FFWREC.YSMXDV = FE0LM001.YSMXDV; /* division code*/
  FFWREC.YSMSMDSC = FE0LM001.YSMSMDSC; /* division abrv desc*/

  FFWREC.XPCCD = FE0LM001.XPCCD; /* product category*/
  FFWREC.XPCABRV = FE0LM001.XPCABRV; /* product category abrv desc*/

  FFWREC.YPGCD = FE0LM001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FE0LM001.YPGABRV; /* product type grp abrv desc*/

  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;

  if (converseVar.eventKey is enter
   && FE0LW00.FE0LW-SWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    FE0LW00.XXXTSPAG = FE0LW00.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    FE0LW00.XXXTSPAG = FE0LW00.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll left*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* display prior season*/

    FE0LW00.FE0LW-PGX = FE0LW00.FE0LW-PGX - 1; /* page index*/
    FE0LW00.FE0LW-SNX = FE0LW00.FE0LW-PAGS[FE0LW-PGX]; /* sesn index*/
    FE0LW00.FE0LW-NEXT = "N";

    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll right*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* display next season*/

    FE0LW00.FE0LW-PGX = FE0LW00.FE0LW-PGX + 1;
    FE0LW00.FE0LW-PAGP[FE0LW-PGX] = FE0LW00.FE0LW-IDX;
    if (FE0LW00.FE0LW-NEXT == "Y")
      FE0LW00.FE0LW-SNX = FE0LW00.FE0LW-SNX + 1;
      FE0LW00.FE0LW-NEXT = "N";
    end
    FE0LW00.FE0LW-PAGS[FE0LW-PGX] = FE0LW00.FE0LW-SNX;

    return;
  end

end // end FE0L-600

// Purge temporary storage
Function FE0LS-01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FE0LW01 empty; /* header data*/
  set FE0LW02 empty; /* M001 temporary storage detail*/
  set FE0LW03 empty; /* columns totals*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FE0LW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FE0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0LS-01

// Select Sum MSGRP 'SS'
Function FE0LS-03()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmsgrp01 table.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* function code*/

   /* ------------------------------------------------------------*/
   /* load ff8rec record - dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/

  if (FF8REC.YSMXDV == "10") /* div = '10'*/
    FF8REC.XCTCD = "USA"; /* country code = 'USA'*/
  else
    FF8REC.XCTCD = "*"; /* country code wildcarded*/
  end
  FF8REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF8REC.SYBSTGNB = FG9REC.SYBSTGNB; /* style grp nbr*/

   /* ------------------------------------------------------------*/
   /* select sum dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identifisgrpion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMSGRP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0LS-03

// Add to temporary storage
Function FE0LS-04()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FE0LW02.XXXTSLEN = FE0LW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FE0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FE0LW02 empty; /* M001 display storage*/

    FE0LW00.FE0LW-IDX = 1; /* Display line index*/

    FE0LW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0LS-04

// Select Sum MSTY 'SS'
Function FE0LS-05()
   /* ------------------------------------------------------------*/
   /* Select Sum MSTY 'SS'*/
   /* ------------------------------------------------------------*/

  FF9REC.SY1STNBR = FG9REC.SY1STNBR; /* Style number*/
  FF9REC.SY2CLRID = FG9REC.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FG9REC.XDMCD; /* Dimension code*/

  if (FF9REC.YSMXDV == "10") /* div = '10'*/
    FF9REC.XCTCD = "USA"; /* country code = 'USA'*/
  else
    FF9REC.XCTCD = "*"; /* country code wildcarded*/
  end

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305)

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "-05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0LS-05

// Read temporary storage
Function FE0LS-16()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  FE0LW02.XXXTSLEN = FE0LW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FE0LW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FE0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S16"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0LS-16

// Move the heading literals
Function FE0LS-20()

   /* ------------------------------------------------------------*/
   /* load heading literals*/
   /* ------------------------------------------------------------*/

   /* subtotal*/

  FE0LM001.FE0LM-HD1[7] = " SUB ";
  set FE0LM001.FE0LM-HD1[7] skip;
  FE0LM001.FE0LM-HD2[7] = "TOTAL";
  set FE0LM001.FE0LM-HD2[7] skip;

   /* range total*/

  FE0LM001.FE0LM-HD1[8] = "RANGE";
  set FE0LM001.FE0LM-HD1[8] skip;
  FE0LM001.FE0LM-HD2[8] = "TOTAL";
  set FE0LM001.FE0LM-HD2[8] skip;

   /* percent*/

  FE0LM001.FE0LM-HD2[9] = " PCT ";
  set FE0LM001.FE0LM-HD2[9] skip;

end // end FE0LS-20

// Load subtotal and total
Function FE0LS-30()
    /* ----------------------------------------------------------*/
     /* translate/load detail subtotal*/
    /* ----------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0LW00.FE0LW-UST[FE0LW-PIX];
  XSFFS10();
  FE0LW00.FE0LW-WQT[7] = FFXREC.FFXCHAR;

    /* ----------------------------------------------------------*/
     /* load detail range total*/
    /* ----------------------------------------------------------*/

  FE0LW00.FE0LW-WQT[8] = FE0LW00.FE0LW-QTY[FE0LW-TIX];
  if (FE0LW02.FE0LW-RCT[FE0LW-PIX] == "1") /* Style group record*/

    FE0LW00.FE0LW-SGT = FE0LW00.FE0LW-UQT[FE0LW-TIX];
                                                       /* save stygrp total*/

  end

    /* ----------------------------------------------------------*/
     /* calculate/load total percent*/
    /* ----------------------------------------------------------*/

    /* ----------------------------------------------*/
     /* process style group total percent*/
    /* ----------------------------------------------*/
  if (FE0LW02.FE0LW-RCT[FE0LW-PIX] == "1")

    if (FE0LW03.FE0LW-UMT[FE0LW-TIX] > 0)
      FE0LW00.FE0LW-NM1 = FE0LW00.FE0LW-UQT[FE0LW-TIX] * 100;
      FE0LW00.FE0LW-NPT = mathLib.round(FE0LW00.FE0LW-NM1 /       FE0LW03.FE0LW-UMT[FE0LW-TIX], -mathLib.decimals(FE0LW00.FE0LW-NPT));

        /* --------------------------------------------------------*/
         /* zero suppress the percent field*/
        /* --------------------------------------------------------*/

      if (FE0LW00.FE0LW-NPT != 0)
        FE0LW00.FE0LW-PTW = FE0LW00.FE0LW-NP1;
        FE0LW00.FE0LW-PTP = ".";
        FE0LW00.FE0LW-PTD = FE0LW00.FE0LW-NP2;

        if (FE0LW00.FE0LW-PT1 == "0")
          FE0LW00.FE0LW-PT1 = " ";
          if (FE0LW00.FE0LW-PT2 == "0")
            FE0LW00.FE0LW-PT2 = " ";
          end
        end

        FE0LW00.FE0LW-WQT[9] = FE0LW00.FE0LW-PCT;

      end
    end

  else

      /* ----------------------------------------------*/
       /* process style color total percent*/
      /* ----------------------------------------------*/

    FE0LW00.FE0LW-SGT = FE0LW02.FE0LW-STYGRP-TOT[FE0LW-PIX];

    if (FE0LW00.FE0LW-SGT > 0)
      FE0LW00.FE0LW-NM1 = FE0LW00.FE0LW-UQT[FE0LW-TIX] * 100;
      FE0LW00.FE0LW-NPT = mathLib.round(FE0LW00.FE0LW-NM1 / FE0LW00.FE0LW-SGT, -mathLib.decimals(FE0LW00.FE0LW-NPT));

        /* --------------------------------------------------------*/
         /* zero suppress the percent field*/
        /* --------------------------------------------------------*/

      if (FE0LW00.FE0LW-NPT != 0)
        FE0LW00.FE0LW-PTW = FE0LW00.FE0LW-NP1;
        FE0LW00.FE0LW-PTP = ".";
        FE0LW00.FE0LW-PTD = FE0LW00.FE0LW-NP2;

        if (FE0LW00.FE0LW-PT1 == "0")
          FE0LW00.FE0LW-PT1 = " ";
          if (FE0LW00.FE0LW-PT2 == "0")
            FE0LW00.FE0LW-PT2 = " ";
          end
        end

        FE0LW00.FE0LW-WQT[9] = FE0LW00.FE0LW-PCT;

      end
    end
  end

    /* ----------------------------------------------------------*/
     /* if record type eq 1 (style group record ) display '*'*/
    /* ----------------------------------------------------------*/

  FE0LW00.FE0LW-LIX = FE0LW00.FE0LW-LIX + 1;
  if (FE0LW02.FE0LW-RCT[FE0LW-PIX] == "1")
    FE0LW00.FE0LW-WQT[10] = " *   ";
  end

end // end FE0LS-30

// Cal no of sesn and mos in sesn
Function FE0LS-33()

   /* ------------------------------------------------------------*/
   /* Calculate nbr of seasons and months in seasons*/
   /* ------------------------------------------------------------*/

  FE0LW00.FE0LW-WBD = FFWREC.FFABEGMO; /* beginning date*/
  FE0LW00.FE0LW-WED = FFWREC.FFAENDMO; /* ending date*/

  FE0LW00.FE0LW-NSS = 0; /* init number of seasons*/
  FE0LW00.FE0LW-PIX = 2; /* init index*/

   /* Figure out number of months in range fe0lW00.fe0lW-NM1*/

  if (FE0LW00.FE0LW-BYY == FE0LW00.FE0LW-EYY) /* beg year EQ end year*/
   /* nbr of mos = end month minus (begin month plus 1)*/
    FE0LW00.FE0LW-NM1 = FE0LW00.FE0LW-EMM - FE0LW00.FE0LW-BMM + 1;
  else
   /* nbr of mos = (end month plus 12) minus (begin month plus 1)*/
    FE0LW00.FE0LW-NM1 = FE0LW00.FE0LW-EMM + 12 - FE0LW00.FE0LW-BMM + 1;
  end

   /* Figure out number of seasons fe0lW00.fe0lW-NSS*/
   /*  */
   /* Check the length of the range, if LE 6 months use end month of*/
   /* the range for sesn-end month; otherwise use range begin month plus*/
   /* 5 months for the first season-end month and the date range end*/
   /* month for the second season-end month.*/

  if (FE0LW00.FE0LW-NM1 <= 6) /* total nbr of months in range LE 6*/

    FE0LW00.FE0LW-NSS = 1; /* nbr of sesns*/

    FE0LW00.FE0LW-SEM[1] = FE0LW00.FE0LW-EMM; /* sesn end mo - mm*/
    FE0LW00.FE0LW-SMO[1] = FE0LW00.FE0LW-WED; /* sesn end mo - ccyymm*/

    FE0LW00.FE0LW-SEM[2] = 0; /* mm*/
    FE0LW00.FE0LW-SMO[2] = 0; /* ccyymm*/

  else /* total nbr of months in range GT 6*/

    FE0LW00.FE0LW-NSS = 2; /* nbr of sesns*/

    FE0LW00.FE0LW-WBD-FIRST = FE0LW00.FE0LW-WBD;
    FE0LW00.FE0LW-BMM-FIRST = FE0LW00.FE0LW-BMM-FIRST + 5;
    if (FE0LW00.FE0LW-BMM-FIRST > 12)
      FE0LW00.FE0LW-BMM-FIRST = FE0LW00.FE0LW-BMM-FIRST - 12;
      if (FE0LW00.FE0LW-BYY-FIRST == 99)
        FE0LW00.FE0LW-BCC-FIRST = FE0LW00.FE0LW-BCC-FIRST + 1;
  /* FE0LW00.FE0LW-BYY-FIRST = FE0LW00.FE0LW-BYY-FIRST + 1;dsmith*/
        FE0LW00.FE0LW-BYY-FIRST = 00;
      else
        FE0LW00.FE0LW-BYY-FIRST = FE0LW00.FE0LW-BYY-FIRST + 1;
      end
    end

    FE0LW00.FE0LW-SEM[1] = FE0LW00.FE0LW-BMM-FIRST; /* mm*/
    FE0LW00.FE0LW-SMO[1] = FE0LW00.FE0LW-WBD-FIRST; /* ccyymm*/

    FE0LW00.FE0LW-SEM[2] = FE0LW00.FE0LW-EMM; /* mm*/
    FE0LW00.FE0LW-SMO[2] = FE0LW00.FE0LW-WED; /* ccyymm*/

  end

   /*  */
   /* Figure out number of months in each season*/
   /*  */
  FE0LW00.FE0LW-PIX = FE0LW00.FE0LW-NSS;
  while (FE0LW00.FE0LW-PIX > 0) /* nbr of seasons*/
    FE0LS-80(); /* calculate no of mos in each sesn*/
    FE0LW00.FE0LW-PIX = FE0LW00.FE0LW-PIX - 1;
  end

end // end FE0LS-33

// Load subtot & tot for tot line
Function FE0LS-40()

   /* ----------------------------------------------------------*/
   /* translate/load monthly subtotal*/
   /* ----------------------------------------------------------*/

  FFXREC.FFXNUMB = FE0LW00.FE0LW-UMT;
  XSFFS10();
  FE0LW00.FE0LW-WQT[7] = FFXREC.FFXCHAR;

   /* --------------------------------------------------------*/
   /* load monthly range total*/
   /* --------------------------------------------------------*/

  FE0LW00.FE0LW-WQT[8] = FE0LW03.FE0LW-MTQ[FE0LW-TIX];

end // end FE0LS-40

// Load total for pct line
Function FE0LS-50()
   /* ----------------------------------------------------------*/
   /* calculate/load monthly total percent*/
   /* ----------------------------------------------------------*/

  if (FE0LW03.FE0LW-UMT[FE0LW-TIX] > 0)
    FE0LW00.FE0LW-NM1 = FE0LW00.FE0LW-UMT * 100;
    FE0LW00.FE0LW-NPT = mathLib.round(FE0LW00.FE0LW-NM1 / FE0LW03.FE0LW-UMT[FE0LW-TIX], -mathLib.decimals(FE0LW00.FE0LW-NPT));

    /* ----------------------------------------------------------*/
     /* zero suppress the percent field*/
    /* ----------------------------------------------------------*/

    if (FE0LW00.FE0LW-NPT != 0)
      FE0LW00.FE0LW-PTW = FE0LW00.FE0LW-NP1;
      FE0LW00.FE0LW-PTP = ".";
      FE0LW00.FE0LW-PTD = FE0LW00.FE0LW-NP2;

      if (FE0LW00.FE0LW-PT1 == "0")
        FE0LW00.FE0LW-PT1 = " ";
        if (FE0LW00.FE0LW-PT2 == "0")
          FE0LW00.FE0LW-PT2 = " ";
        end
      end

      FE0LW00.FE0LW-WQT[7] = FE0LW00.FE0LW-PCT;

    end
  end

end // end FE0LS-50

// Calculate no of mos in season
Function FE0LS-80()
   /*  */
   /* Calculate no of mos in season*/
   /*  */

  FE0LW00.FE0LW-WDT = FE0LW00.FE0LW-SMO[FE0LW-PIX]; /* sesn end mo*/

  if (FE0LW00.FE0LW-PIX == 1) /* 1st season*/

    if (FE0LW00.FE0LW-WMM >= FE0LW00.FE0LW-BMM) /* in the same year*/
      FE0LW00.FE0LW-SIN[FE0LW-PIX] = FE0LW00.FE0LW-WDT -                                    FE0LW00.FE0LW-WBD + 1;
    else /* in the different year*/
      FE0LW00.FE0LW-SIN[FE0LW-PIX] = FE0LW00.FE0LW-WMM + 12 -                                    FE0LW00.FE0LW-BMM + 1;
    end

  else /* other season*/

    FE0LW00.FE0LW-LIX = FE0LW00.FE0LW-PIX - 1;
    FE0LW00.FE0LW-WDT1 = FE0LW00.FE0LW-SMO[FE0LW-LIX];
                                                            /* prev sesn mo*/
    if (FE0LW00.FE0LW-WMM > FE0LW00.FE0LW-WMM1) /* in the same year*/
      FE0LW00.FE0LW-SIN[FE0LW-PIX] = FE0LW00.FE0LW-WMM -       FE0LW00.FE0LW-WMM1;
    else /* in the different year*/
      FE0LW00.FE0LW-SIN[FE0LW-PIX] = FE0LW00.FE0LW-WMM + 12 -                                    FE0LW00.FE0LW-WMM1;
    end

  end

end // end FE0LS-80

//*** RECORD=FE0LW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0LW00 type basicRecord
  10 FE0LW-DCF FE0LW-DCF ; 
  10 FE0LW-NSS FE0LW-NSS ; 
  10 FE0LW-SIN FE0LW-SIN [4] ; 
  10 FE0LW-SEM FE0LW-SEM [4] ; 
  10 FE0LW-SMO FE0LW-SMO [4] ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 FE0LW-SAVE-YSMXDV FE0LW-SAVE-YSMXDV ; 
  10 FE0LW-SAVE-SY1STNBR FE0LW-SAVE-SY1STNBR ; 
  10 FE0LW-SAVE-SY2CLRID FE0LW-SAVE-SY2CLRID ; 
  10 FE0LW-SAVE-XDMCD FE0LW-SAVE-XDMCD ; 
  10 FE0LW-DSC FE0LW-DSC ; 
    15 * char(1) ; 
    15 FE0LW-GRP FE0LW-GRP ; 
      20 SY1STNBR SY1STNBR ; 
      20 FE0LW-DH1 FE0LW-DH1 ; 
      20 SY2CLRID SY2CLRID ; 
      20 FE0LW-DH2 FE0LW-DH2 ; 
      20 XDMCD XDMCD ; 
  10 FE0LW-SWR FE0LW-SWR ; 
  10 FE0LW-SWF FE0LW-SWF ; 
  10 FE0LW-SDV FE0LW-SDV ; 
  10 FE0LW-SWD FE0LW-SWD ; 
  10 FE0LW-CR1 FE0LW-CR1 ; 
  10 FE0LW-CR2 FE0LW-CR2 ; 
  10 FE0LW-SWP FE0LW-SWP ; 
  10 FE0LW-ACT FE0LW-ACT ; 
  10 FE0LW-SW0 FE0LW-SW0 ; 
  10 FE0LW-NM1 FE0LW-NM1 ; 
  10 FE0LW-NM2 FE0LW-NM2 ; 
  10 FE0LW-NPT FE0LW-NPT ; 
    15 FE0LW-NP1 FE0LW-NP1 ; 
    15 FE0LW-NP2 FE0LW-NP2 ; 
  10 FE0LW-PCT FE0LW-PCT ; 
    15 FE0LW-PTW FE0LW-PTW ; 
      20 FE0LW-PT1 FE0LW-PT1 ; 
      20 FE0LW-PT2 FE0LW-PT2 ; 
      20 FE0LW-PT3 FE0LW-PT3 ; 
    15 FE0LW-PTP FE0LW-PTP ; 
    15 FE0LW-PTD FE0LW-PTD ; 
  10 FE0LW-UTQ FE0LW-UTQ ; 
  10 FE0LW-UMT FE0LW-UMT ; 
  10 FE0LW-UST FE0LW-UST [13] ; 
  10 FE0LW-UHS FE0LW-UHS ; 
  10 FE0LW-SGT FE0LW-SGT ; 
  10 FE0LW-NIL FE0LW-NIL ; 
  10 FE0LW-HST FE0LW-HST ; 
  10 FE0LW-WQT FE0LW-WQT [10] ; 
  10 FE0LW-LQT FE0LW-LQT ; 
    15 FE0LW-UQT FE0LW-UQT [13] ; 
    15 FE0LW-QTY FE0LW-QTY [13] ; 
  10 FE0LW-IDX FE0LW-IDX ; 
  10 FE0LW-TIX FE0LW-TIX ; 
  10 FE0LW-SIX FE0LW-SIX ; 
  10 FE0LW-LIX FE0LW-LIX ; 
  10 FE0LW-PIX FE0LW-PIX ; 
  10 FE0LW-PGX FE0LW-PGX ; 
  10 FE0LW-SNX FE0LW-SNX ; 
  10 FE0LW-LCC FE0LW-LCC ; 
  10 FE0LW-LCD FE0LW-LCD ; 
  10 FE0LW-SDT FE0LW-SDT ; 
    15 * num(1) ; 
    15 FE0LW-CDT FE0LW-CDT ; 
    15 * num(2) ; 
  10 FE0LW-LBR FE0LW-LBR ; 
    15 * num(5) ; 
    15 FE0LW-LBD FE0LW-LBD ; 
  10 FE0LW-LER FE0LW-LER ; 
    15 * num(5) ; 
    15 FE0LW-LED FE0LW-LED ; 
  10 FE0LW-CWD FE0LW-CWD ; 
    15 FE0LW-CYM FE0LW-CYM ; 
      20 FE0LW-CCC FE0LW-CCC ; 
      20 FE0LW-CYY FE0LW-CYY ; 
      20 FE0LW-CMM FE0LW-CMM ; 
    15 FE0LW-CDD FE0LW-CDD ; 
  10 * num(1) ; 
  10 FE0LW-ICD FE0LW-ICD ; 
    15 FE0LW-IYM FE0LW-IYM ; 
      20 FE0LW-ICC FE0LW-ICC ; 
      20 FE0LW-IYY FE0LW-IYY ; 
      20 FE0LW-IMM FE0LW-IMM ; 
    15 FE0LW-IDD FE0LW-IDD ; 
  10 * num(1) ; 
  10 FE0LW-HDT FE0LW-HDT ; 
    15 * num(3) ; 
    15 FE0LW-HYM FE0LW-HYM ; 
      20 FE0LW-HCC FE0LW-HCC ; 
      20 FE0LW-HYY FE0LW-HYY ; 
      20 FE0LW-HMM FE0LW-HMM ; 
  10 * num(1) ; 
  10 FE0LW-WDT FE0LW-WDT ; 
    15 * num(3) ; 
    15 FE0LW-WCC FE0LW-WCC ; 
    15 FE0LW-WYM FE0LW-WYM ; 
      20 FE0LW-WYY FE0LW-WYY ; 
      20 FE0LW-WMM FE0LW-WMM ; 
  10 FE0LW-WDT1 FE0LW-WDT1 ; 
    15 * num(3) ; 
    15 FE0LW-WCY1 FE0LW-WCY1 ; 
      20 FE0LW-WCC1 FE0LW-WCC1 ; 
      20 FE0LW-WYM1 FE0LW-WYM1 ; 
        25 FE0LW-WYY1 FE0LW-WYY1 ; 
        25 FE0LW-WMM1 FE0LW-WMM1 ; 
  10 FE0LW-WDT1-FOR-BUY-MO FE0LW-WDT1-FOR-BUY-MO ; 
    15 * num(1) ; 
    15 FE0LW-WCY1-FOR-BUY-MO FE0LW-WCY1-FOR-BUY-MO ; 
      20 FE0LW-WCC1-FOR-BUY-MO FE0LW-WCC1-FOR-BUY-MO ; 
      20 FE0LW-WYY1-FOR-BUY-MO FE0LW-WYY1-FOR-BUY-MO ; 
      20 FE0LW-WMM1-FOR-BUY-MO FE0LW-WMM1-FOR-BUY-MO ; 
    15 FE0LW-WDD1-FOR-BUY-MO FE0LW-WDD1-FOR-BUY-MO ; 
  10 FE0LW-WBD FE0LW-WBD ; 
    15 * num(3) ; 
    15 FE0LW-BCC FE0LW-BCC ; 
    15 FE0LW-BYM FE0LW-BYM ; 
      20 FE0LW-BYY FE0LW-BYY ; 
      20 FE0LW-BMM FE0LW-BMM ; 
  10 FE0LW-WED FE0LW-WED ; 
    15 * num(3) ; 
    15 FE0LW-ECC FE0LW-ECC ; 
    15 FE0LW-EYM FE0LW-EYM ; 
      20 FE0LW-EYY FE0LW-EYY ; 
      20 FE0LW-EMM FE0LW-EMM ; 
  10 FE0LW-WBD-FIRST FE0LW-WBD-FIRST ; 
    15 * num(3) ; 
    15 FE0LW-BCC-FIRST FE0LW-BCC-FIRST ; 
    15 FE0LW-BYM-FIRST FE0LW-BYM-FIRST ; 
      20 FE0LW-BYY-FIRST FE0LW-BYY-FIRST ; 
      20 FE0LW-BMM-FIRST FE0LW-BMM-FIRST ; 
  10 FE0LW-CRD FE0LW-CRD ; 
  10 FE0LW-CD1 FE0LW-CD1 ; 
  10 FE0LW-BYD FE0LW-BYD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FE0LW-PAGP FE0LW-PAGP [10] ; 
  10 FE0LW-PAGS FE0LW-PAGS [10] ; 
  10 FE0LW-PMON FE0LW-PMON [10] ; 
  10 FE0LW-REM FE0LW-REM ; 
  10 FE0LW-NEXT FE0LW-NEXT ; 
end // end FE0LW00

//*** RECORD=FE0LW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FE0LW01 type basicRecord
  10 CACHGFL CACHGFL ; 
end // end FE0LW01

//*** RECORD=FE0LW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FE0LW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(2042) ; 
    10 FE0LW-NLD FE0LW-NLD ; 
    10 FE0LW-RCT FE0LW-RCT [15] ; 
    10 FE0LW-DSC FE0LW-DSC [15] ; 
    10 FE0LW-QTS FE0LW-QTS [15] ; 
      15 FE0LW-U01 FE0LW-U01 ; 
      15 FE0LW-Q01 FE0LW-Q01 ; 
      15 FE0LW-U02 FE0LW-U02 ; 
      15 FE0LW-Q02 FE0LW-Q02 ; 
      15 FE0LW-U03 FE0LW-U03 ; 
      15 FE0LW-Q03 FE0LW-Q03 ; 
      15 FE0LW-U04 FE0LW-U04 ; 
      15 FE0LW-Q04 FE0LW-Q04 ; 
      15 FE0LW-U05 FE0LW-U05 ; 
      15 FE0LW-Q05 FE0LW-Q05 ; 
      15 FE0LW-U06 FE0LW-U06 ; 
      15 FE0LW-Q06 FE0LW-Q06 ; 
      15 FE0LW-U07 FE0LW-U07 ; 
      15 FE0LW-Q07 FE0LW-Q07 ; 
      15 FE0LW-U08 FE0LW-U08 ; 
      15 FE0LW-Q08 FE0LW-Q08 ; 
      15 FE0LW-U09 FE0LW-U09 ; 
      15 FE0LW-Q09 FE0LW-Q09 ; 
      15 FE0LW-U10 FE0LW-U10 ; 
      15 FE0LW-Q10 FE0LW-Q10 ; 
      15 FE0LW-U11 FE0LW-U11 ; 
      15 FE0LW-Q11 FE0LW-Q11 ; 
      15 FE0LW-U12 FE0LW-U12 ; 
      15 FE0LW-Q12 FE0LW-Q12 ; 
      15 FE0LW-U13 FE0LW-U13 ; 
      15 FE0LW-Q13 FE0LW-Q13 ; 
    10 FE0LW-STYGRP-TOT FE0LW-STYGRP-TOT [15] ; 
end // end FE0LW02

//*** RECORD=FE0LW03 ****
// ------------------------------
// map 001 totals display storage
// ------------------------------
// ***********************
Record FE0LW03 type basicRecord
  5 FE0LW-GP3 FE0LW-GP3 ; 
    10 FE0LW-UMT FE0LW-UMT [13] ; 
    10 FE0LW-MTQ FE0LW-MTQ [13] ; 
    10 FE0LW-MPT FE0LW-MPT [13] ; 
end // end FE0LW03

//*** RECORD=FE0LW05 ****
// -----------------------------------------
// FE0LM001 Map detail quantities work area.
// -----------------------------------------
// ***********************
Record FE0LW05 type basicRecord
  5 FE0LW-GP5 FE0LW-GP5 ; 
    10 FE0LW-DSC FE0LW-DSC ; 
    10 * char(1) ; 
    10 FE0LW-Q01 FE0LW-Q01 ; 
    10 * char(1) ; 
    10 FE0LW-Q02 FE0LW-Q02 ; 
    10 * char(1) ; 
    10 FE0LW-Q03 FE0LW-Q03 ; 
    10 * char(1) ; 
    10 FE0LW-Q04 FE0LW-Q04 ; 
    10 * char(1) ; 
    10 FE0LW-Q05 FE0LW-Q05 ; 
    10 * char(1) ; 
    10 FE0LW-Q06 FE0LW-Q06 ; 
    10 * char(1) ; 
    10 FE0LW-Q07 FE0LW-Q07 ; 
    10 * char(1) ; 
    10 FE0LW-Q08 FE0LW-Q08 ; 
    10 * char(1) ; 
    10 FE0LW-Q09 FE0LW-Q09 ; 
    10 * char(1) ; 
    10 FE0LW-Q10 FE0LW-Q10 ; 
end // end FE0LW05

// active style group flag
DataItem FE0LW-ACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin century
DataItem FE0LW-BCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin century
DataItem FE0LW-BCC-FIRST num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FE0LW-BMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FE0LW-BMM-FIRST num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy date CCYYMM
DataItem FE0LW-BYD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FE0LW-BYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FE0LW-BYM-FIRST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FE0LW-BYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FE0LW-BYY-FIRST num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FE0LW-CCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date -1 month
DataItem FE0LW-CD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work day
DataItem FE0LW-CDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save ccyymm
DataItem FE0LW-CDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FE0LW-CMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor PFHST style/clr
DataItem FE0LW-CR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor PFHSTstyle grp
DataItem FE0LW-CR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date
DataItem FE0LW-CRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymmdd
DataItem FE0LW-CWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FE0LW-CYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FE0LW-CYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data change flag
DataItem FE0LW-DCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem FE0LW-DH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem FE0LW-DH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style-color-dim
DataItem FE0LW-DSC char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end century
DataItem FE0LW-ECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FE0LW-EMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FE0LW-EYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FE0LW-EYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fe0lw03 group level
DataItem FE0LW-GP3 char(169)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fe0lw05 group level
DataItem FE0LW-GP5 char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sty grp
DataItem FE0LW-GRP char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold work century
DataItem FE0LW-HCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold last actl ccyymm
DataItem FE0LW-HDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Hold work month
DataItem FE0LW-HMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales thousands
DataItem FE0LW-HST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold ccyymm
DataItem FE0LW-HYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold work year
DataItem FE0LW-HYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work century
DataItem FE0LW-ICC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice compare date
DataItem FE0LW-ICD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// invoice work day
DataItem FE0LW-IDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FE0LW-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work month
DataItem FE0LW-IMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice ccyymm
DataItem FE0LW-IYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work year
DataItem FE0LW-IYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0LW-LBD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// life cycle begin range
DataItem FE0LW-LBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save life cyc code
DataItem FE0LW-LCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save life cyc date
DataItem FE0LW-LCD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0LW-LED num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// life cycle end range
DataItem FE0LW-LER num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load  index
DataItem FE0LW-LIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product line qtys
DataItem FE0LW-LQT char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly percent
DataItem FE0LW-MPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// monthly sale qtys
DataItem FE0LW-MTQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Next season flag
DataItem FE0LW-NEXT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIL sales units
DataItem FE0LW-NIL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines per page
DataItem FE0LW-NLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FE0LW-NM1 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FE0LW-NM2 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0LW-NP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FE0LW-NP2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric percent field
DataItem FE0LW-NPT num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of seasons
DataItem FE0LW-NSS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Starting point of the season
DataItem FE0LW-PAGP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Processing season of the page
DataItem FE0LW-PAGS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char percent field
DataItem FE0LW-PCT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page index
DataItem FE0LW-PGX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// process index
DataItem FE0LW-PIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print remaining month flag
DataItem FE0LW-PMON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0LW-PT1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0LW-PT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0LW-PT3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0LW-PTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0LW-PTP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FE0LW-PTW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 1
DataItem FE0LW-Q01 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 2
DataItem FE0LW-Q02 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 3
DataItem FE0LW-Q03 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 4
DataItem FE0LW-Q04 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 5
DataItem FE0LW-Q05 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 6
DataItem FE0LW-Q06 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 7
DataItem FE0LW-Q07 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 8
DataItem FE0LW-Q08 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 9
DataItem FE0LW-Q09 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 10
DataItem FE0LW-Q10 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 11
DataItem FE0LW-Q11 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 12
DataItem FE0LW-Q12 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 13
DataItem FE0LW-Q13 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product line monthly qtys
DataItem FE0LW-QTS char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sale qty 1000
DataItem FE0LW-QTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type '1' '2'
DataItem FE0LW-RCT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Remaining month flag
DataItem FE0LW-REM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem FE0LW-SAVE-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem FE0LW-SAVE-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem FE0LW-SAVE-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style group div code
DataItem FE0LW-SAVE-YSMXDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save CCYYMMDD
DataItem FE0LW-SDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style development switch
DataItem FE0LW-SDV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season end month - mm
DataItem FE0LW-SEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style group total save area
DataItem FE0LW-SGT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of months in season
DataItem FE0LW-SIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save index
DataItem FE0LW-SIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month - ccyymm
DataItem FE0LW-SMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season index
DataItem FE0LW-SNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style group total
DataItem FE0LW-STYGRP-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Amount found switch
DataItem FE0LW-SW0 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display map switch
DataItem FE0LW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0LW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Use product switch
DataItem FE0LW-SWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FE0LW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total index
DataItem FE0LW-TIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 1
DataItem FE0LW-U01 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 2
DataItem FE0LW-U02 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 3
DataItem FE0LW-U03 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 4
DataItem FE0LW-U04 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 5
DataItem FE0LW-U05 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 6
DataItem FE0LW-U06 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 7
DataItem FE0LW-U07 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 8
DataItem FE0LW-U08 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 9
DataItem FE0LW-U09 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 10
DataItem FE0LW-U10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 11
DataItem FE0LW-U11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 12
DataItem FE0LW-U12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 13
DataItem FE0LW-U13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales units
DataItem FE0LW-UHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit monthly sale qty
DataItem FE0LW-UMT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sale qty units
DataItem FE0LW-UQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit sale qty sub total
DataItem FE0LW-UST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s product range total
DataItem FE0LW-UTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FE0LW-WBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FE0LW-WBD-FIRST num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FE0LW-WCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FE0LW-WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CC
DataItem FE0LW-WCC1-FOR-BUY-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date CCYYMM
DataItem FE0LW-WCY1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date CCYYMM
DataItem FE0LW-WCY1-FOR-BUY-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DD
DataItem FE0LW-WDD1-FOR-BUY-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FE0LW-WDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work date
DataItem FE0LW-WDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work date CCYYMMDD
DataItem FE0LW-WDT1-FOR-BUY-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FE0LW-WED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FE0LW-WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FE0LW-WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM
DataItem FE0LW-WMM1-FOR-BUY-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s detail lines
DataItem FE0LW-WQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year and month
DataItem FE0LW-WYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FE0LW-WYM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FE0LW-WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FE0LW-WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY
DataItem FE0LW-WYY1-FOR-BUY-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

