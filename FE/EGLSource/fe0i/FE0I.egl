package fe0i;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpy2.YPGTBL;
import ff.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=FE0I ****
// This application obtains a specific line/type group,
// category/type group, the number of months in the season,
// and a beginning month, for the purpose of selecting a target
// worksheet.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// FF254    12/27/91  KSANFO  New application.
//  FIX     05/05/92  LDELUH  Chg edit of begin month to be
//                            against swhdr & not ffxrf.
// FF1111   05/21/92  LDELUH  Allow for varying seasons.
// FF435    10/05/93  JJUCH   Allow the current month to be in
//                            any season.
// yr2000   12/04/96  CWHIT1  fix leading 0's in date
// *********************
Program FE0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FE0IW00 FE0IW00; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FFQREC FFQREC; // record
  FFWREC FFWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use FE0IM.FE0IM001, // form
  		FE0IM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FE0IM001 initial; /* M001 input/output*/
    set FE0IW00 empty; /* Working storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date & time convert parameters*/
    set TA5REC empty; /* Temporary storage parameters*/

    FE0IW00.FE0IWFMS = "Y"; /* Format the map switch*/

     /* ------------------------------------------------------------*/
     /* Do not request data since work sheet type needs to be*/
     /* obtained.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ") /* Type group not known*/
      FFWREC.YPGCD = "01"; /* Default value*/
      FFWREC.YPGABRV = "******";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

    FFWREC.FFABEGMO = 0;
    FFWREC.FFWENDM1 = 0;
    FFWREC.FFWENDM2 = 0;
    FFWREC.FFWENDM3 = 0;
    FFWREC.FFWENDM4 = 0;

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FE0I.*/
     /* ------------------------------------------------------------*/

    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FE0I001; /* Converse the main process*/


    FE0I001: FE0I001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FE0I001; /* Converse the main process*/


  end // end main
end // end FE0I

// Main process to display a map
Function FE0I001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FE0I100(); /* Obtain the data to display*/

  FE0I200(); /* Format and display the map*/

  FE0I300(); /* Check attention identifier*/

  FE0I400(); /* Reset fields to normal intensity*/

  FE0I500(); /* Verify the entered data*/

  FE0I600(); /* Process valid input request*/


end // end FE0I001

// Obtain the data to display
Function FE0I100()
   /* ------------------------------------------------------------*/
   /* If an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end



end // end FE0I100

// Format and converse the map
Function FE0I200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no error found*/
    FE0I210(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH and map*/
   /* information.*/
   /* ------------------------------------------------------------*/

  FE0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FE0IM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FE0IM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FE0IM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FE0IM001 alarm; /* Indicate sound alarm*/

  end

  converse FE0IM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "   "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FE0IM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FE0IM001.CAITEM; /* Application data*/


end // end FE0I200

// Format the display data
Function FE0I210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FE0IM001 initial; /* M001 input/output area*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FE0IM001.XPLCD = FFWREC.XPLCD;
  FE0IM001.XPLABRV = FFWREC.XPLABRV;
  FE0IM001.YPGCD = FFWREC.YPGCD;
  FE0IM001.YPGABRV = FFWREC.YPGABRV;
  FE0IM001.XPCCD = FFWREC.XPCCD;
  FE0IM001.XPCABRV = FFWREC.XPCABRV;

  if (FE0IW00.FE0IWBMO != 0)
    FE0IM001.FE0IMBMO = FE0IW00.FE0IWBMO;
  end

  if (FE0IW00.FE0IWSMM[1] != 0)
    FE0IM001.FE0IMSMM[1] = FE0IW00.FE0IWSMM[1];
    FE0IM001.FE0IMSMM[2] = FE0IW00.FE0IWSMM[2];
    FE0IM001.FE0IMSMM[3] = FE0IW00.FE0IWSMM[3];
    FE0IM001.FE0IMSMM[4] = FE0IW00.FE0IWSMM[4];
  end


end // end FE0I210

// Check attention identifier
Function FE0I300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    FE0IW00.FE0IWFMS = "Y"; /* Format the map switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (FE0IM001.CATOAP == "FE0J")
        set FE0IM001.CATOAP cursor, bold; /* Highlight*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(189); /* No fast path allowed*/
      else
        XSFFS01(); /* Exit to another application*/
        set FE0IM001.CATOAP cursor, bold; /* Highlight*/
        FE0IW00.FE0IWFMS = "Y"; /* Format the map switch*/
      end
    else
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf12) /* or PF12 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FE0IM001"; /* Application find code*/
    end
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end
    if (converseVar.eventKey is pf12) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FE0G"; /* TO application*/
    end
    XSFFS01(); /* Exit to another application*/
    FE0IW00.FE0IWFMS = "Y"; /* Format the map switch*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter)
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end


end // end FE0I300

// Reset highlighted fields
Function FE0I400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FE0IM001.XPLCD initialAttributes;
  set FE0IM001.YPGCD initialAttributes;
  set FE0IM001.XPCCD initialAttributes;
  set FE0IM001.FE0IMBMO initialAttributes;
  set FE0IM001.FE0IMSMM[1] initialAttributes;
  set FE0IM001.FE0IMSMM[2] initialAttributes;
  set FE0IM001.FE0IMSMM[3] initialAttributes;
  set FE0IM001.FE0IMSMM[4] initialAttributes;

  set FE0IM001.CATOAP initialAttributes; /* TO application*/
  set FE0IM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.XPLCD == "?" /* Line codes list requested*/
   || FE0IM001.YPGCD == "?" /* Type group list requested*/
   || FE0IM001.XPCCD == "?") /* Category list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.XPLCD == "?") /* Line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE    "; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FE0IM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FE0IM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FE0IM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FE0IM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FE0IM001.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FE0IM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FE0IM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FE0IM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FE0IM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FE0IM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FE0IM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FE0IM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FE0IM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FE0IM001.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FE0I400

// Edit the entered data
Function FE0I500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.CAITEM > " ") /* Application data was entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FE0IM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
  end

  FE0I510(); /* Verify the key fields*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FE0I500

// Edit the key fields
Function FE0I510()
   /* ------------------------------------------------------------*/
   /* Verify that either style group, category/type group, or*/
   /* line/type group were entered. Key fields are not allowed*/
   /* to be spaces or zeros.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.YPGCD == " ") /* Type group code not entered*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FE0IM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If category and type group are entered - the begin month*/
   /* will be retrieved later, else begin month is a required*/
   /* field.*/
   /* ------------------------------------------------------------*/
  if (FE0IM001.XPCCD != "*" /* Category entered*/
   && FE0IM001.XPCCD != " " 
   && FE0IM001.YPGCD != "*" /* Type group entered*/
   && FE0IM001.YPGCD != " ")

    if (FE0IM001.FE0IMBMO == 0 /* Begin month entered*/
     && FE0IM001.FE0IMSMM[1] != 0) /* Sesn end mos entered*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FE0IM001.FE0IMBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end

  else

    if (FE0IM001.FE0IMSMM[1] == 0)
      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FE0IM001.FE0IMSMM[1] cursor, bold; /* Highlight*/
      set FE0IM001.FE0IMSMM[2] bold; /* Highlight*/
      set FE0IM001.FE0IMSMM[3] bold; /* Highlight*/
      set FE0IM001.FE0IMSMM[4] bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end

    if (FE0IM001.FE0IMBMO == 0) /* Begin month entered*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FE0IM001.FE0IMBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end

  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* ------------------------------------------------------------*/
   /* If begin month was entered verify that it is a valid date.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.FE0IMBMO > 0) /* Begin month entered*/
    set TA2REC empty; /* Clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
    TA2REC.TA2GRTYP = "E"; /* Type*/
    FE0IW00.FE0IWVYM = FE0IM001.FE0IMBMO;
    FE0IW00.FE0IWVDD = 01; /* Default day field*/
    TA2REC.TA2GRGEN = FE0IW00.FE0IWVDT;
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date routine*/
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (TA2RTNCD == 0) /* Normal return code*/
        FE0IW00.FE0IWBGM = TA2REC.TA2GRCYM;
      else
        FFWREC.XXXMODID = "510"; /* Module identification*/
        set FE0IM001.FE0IMBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "510 EDIT BEGIN MONTH";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(1); /* System error occured*/
      exit stack; /* Exit to display map*/
    end
  else
    FFWREC.FFABEGMO = 0;
  end

   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.XPCCD == "*") /* Wildcard*/
    FE0IM001.XPCABRV = "ALL"; /* Abbreviation*/
  else
    if (FE0IM001.XPCCD > " ") /* Category entered*/
      if (FE0IM001.XPCCD in XPCTBL.XPCCD /* Code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FE0IM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
       /* ------------------------------------------------------------*/
        /* If not found or inactive, indicate invalid.*/
       /* ------------------------------------------------------------*/
        FE0IM001.XPCABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        set FE0IM001.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FE0IM001.XPCABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.YPGCD == "*") /* Wildcard*/
    FE0IM001.YPGABRV = "ALL"; /* Abbreviation*/
  else
    if (FE0IM001.YPGCD > " ") /* Typegroup entered*/
      if (FE0IM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FE0IM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
       /* ------------------------------------------------------------*/
        /* If not found or inactive, indicate invalid.*/
       /* ------------------------------------------------------------*/
        FE0IM001.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        set FE0IM001.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FE0IM001.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If line code was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.XPLCD == "*") /* Wildcard*/
    FE0IM001.XPLABRV = "ALL"; /* Abbreviation*/
  else
    if (FE0IM001.XPLCD > " ") /* Line  entered*/
      if (FE0IM001.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and ftwr*/
        FE0IM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
       /* ------------------------------------------------------------*/
        /* If not found or inactive, indicate invalid.*/
       /* ------------------------------------------------------------*/
        FE0IM001.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        set FE0IM001.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FE0IM001.XPLABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FE0IM001.YPGABRV != " ") /* Type group valid*/
      if (FE0IM001.XPCCD != "  " /* Category entered*/
       && FE0IM001.XPCCD != "*")
        set FF2REC empty; /* Clear row storage*/
        FF2REC.XPLCD = "*";
        FF2REC.XPCCD = FE0IM001.XPCCD;
        FF2REC.YPGCD = FE0IM001.YPGCD;
        FF2REC.YSMXDV = "10";
        FE0IS01(); /* Select & open FF2REC "S1" csr*/
        FE0IS02(); /* Fetch first FF2REC "S1" csr*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          FFWREC.XXXMODID = "510"; /* Module identification*/
          converseLib.validationFailed(203); /* Inconsistent relationship*/
          set FE0IM001.YPGCD cursor, bold; /* Highlight*/
          set FE0IM001.XPCCD bold; /* Highlight*/
        end
        FE0IM001.XPLCD = FF2REC.XPLCD;
        if (FE0IM001.XPLCD in XPLTBL.XPLCD)
          FE0IM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        end
        FE0IS03(); /* Close FF2REC "S1" csr*/
      else
        if (FE0IM001.XPLCD != " " /* Line valid*/
         && FE0IM001.XPLCD != "*")
          set FF2REC empty; /* Clear row storage*/
          FF2REC.XPCCD = "*";
          FF2REC.XPLCD = FE0IM001.XPLCD;
          FF2REC.YPGCD = FE0IM001.YPGCD;
          FF2REC.YSMXDV = "10";
          FE0IS01(); /* Select & open FF2REC "S1" csr*/
          FE0IS02(); /* Fetch first FF2REC "S1" csr*/
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            FFWREC.XXXMODID = "520"; /* Module identification*/
            converseLib.validationFailed(203); /* Inconsistent relationship*/
            set FE0IM001.YPGCD cursor, bold; /* Highlight*/
            set FE0IM001.XPLCD bold; /* Highlight*/
          end
          FE0IS03(); /* Close FF2REC "S1" csr*/
        end
      end
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* ------------------------------------------------------------*/
   /* If no errors were found verify begin date range.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.FE0IMBMO > 0) /* Begin month entered*/
    FE0I511(); /* Verify bmo against min bmo & contp*/
  else
    FFWREC.FFABEGMO = FE0IW00.FE0IWBGM;
  end

  if (converseVar.validationMsgNum == 0)
    FE0I513(); /* Verify season end months*/
  end


end // end FE0I510

// Verify date rng "SM"  VSWHDR01
Function FE0I511()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.XWSCD = "05"; /* Target wrksht type*/

  if (FE0IM001.XPLCD == "  ")
    FFQREC.XPLCD = "*";
  else
    FFQREC.XPLCD = FE0IM001.XPLCD;
  end

  if (FE0IM001.YPGCD == "  ")
    FFQREC.YPGCD = "*";
  else
    FFQREC.YPGCD = FE0IM001.YPGCD;
  end

  if (FE0IM001.XPCCD == "  ")
    FFQREC.XPCCD = "*";
  else
    FFQREC.XPCCD = FE0IM001.XPCCD;
  end

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("SM", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (TA2REC.TA2GRCYM < FFQREC.FFABEGMO
       || TA2REC.TA2GRCYM > FFQREC.FFQCURMO) /* ===> contp. month*/
        FFWREC.XXXMODID = "511"; /* Module identification*/
        set FE0IM001.FE0IMBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      else
        FFWREC.FFABEGMO = TA2REC.TA2GRCYM;
      end
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, return to previous process.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == -305) /* No rows found*/
      FFWREC.XXXMODID = "511"; /* Module identification*/
      converseLib.validationFailed(18); /* Indicate no data to display*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "511"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of FE0I511 ***********************/
end // end FE0I511

// Verify sesn end months
Function FE0I513()
   /* ------------------------------------------------------------*/
   /* Validate season end months*/
   /* ------------------------------------------------------------*/

   /* Determine number of seasons entered by looking backwards*/
   /* until data found.*/

  FE0IW00.FE0IWCMO[1] = 0; /* zeros to season end date1*/
  FE0IW00.FE0IWCMO[2] = 0; /* zeros to season end date2*/
  FE0IW00.FE0IWCMO[3] = 0; /* zeros to season end date3*/
  FE0IW00.FE0IWCMO[4] = 0; /* zeros to season end date4*/
  FE0IW00.FE0IWNBS = 0; /* zero out number of seasons*/
  FE0IW00.FE0IWSIX = 4; /* index*/
  while (FE0IW00.FE0IWSIX > 0)
    if (FE0IM001.FE0IMSMM[FE0IWSIX] > 0)
      FE0IW00.FE0IWNBS = FE0IW00.FE0IWSIX; /* number of seasons*/
      FE0IW00.FE0IWSIX = FE0IW00.FE0IWSIX - 4; /* force out of loop*/
    else
      FE0IW00.FE0IWSIX = FE0IW00.FE0IWSIX - 1;
    end
  end

   /* Look for season end months greater than 12*/

  FE0IWSIX = 1; /* Set index to 1*/
  while (FE0IW00.FE0IWSIX <= FE0IW00.FE0IWNBS)
    if (FE0IM001.FE0IMSMM[FE0IWSIX] > 12)
      FFWREC.XXXMODID = "513"; /* Module identification*/
      set FE0IM001.FE0IMSMM[FE0IWSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* Invalid data*/
      FE0IW00.FE0IWSIX = FE0IW00.FE0IWSIX + 1;
    else
      FE0IW00.FE0IWSIX = FE0IW00.FE0IWSIX + 1;
    end
  end

  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end

   /* Default to cat target seasons if end months not entered*/

  if (FE0IW00.FE0IWNBS == 0) /* no season lengths found*/

    FE0IS10(); /* Open SWHDR cursor*/
    FE0IW00.FE0IWQCS = "N"; /* SWHDR cursor switch*/
    FE0IW00.FE0IWSIX = 1; /* Season index*/
    FE0IS12(); /* Fetch SWHDR cursor*/
    if (FE0IW00.FE0IWQCS == "N") /* If not end of SWHDR csr*/
      if (FE0IM001.FE0IMBMO != 0 /* If beg month not entered*/
       && FE0IW00.FE0IWBGM != FFQREC.FFABEGMO)
        FFWREC.XXXMODID = "513"; /* Module identification*/
        set FE0IM001.FE0IMSMM[1] cursor, bold; /* Highlight*/
        set FE0IM001.FE0IMSMM[2] bold;
        set FE0IM001.FE0IMSMM[3] bold;
        set FE0IM001.FE0IMSMM[4] bold;
        converseLib.validationFailed(442); /* Sesn end mos required*/
        return; /* get out*/
      end
      /* calculate year end month*/
      FE0IW00.FE0IWBGM = FFQREC.FFABEGMO;
      FE0IW00.FE0IWWMO = FFQREC.FFABEGMO;
      FE0IW00.FE0IWWMM = FE0IW00.FE0IWWMM + 11;
      if (FE0IW00.FE0IWWMM > 12)
        FE0IW00.FE0IWWMM = FE0IW00.FE0IWWMM - 12;
        FE0IW00.FE0IWWMO = FE0IW00.FE0IWWMO + 100;
      end
      FE0IW00.FE0IWXMO = FE0IW00.FE0IWWMO;
      FE0IS12(); /* Fetch SWHDR cursor*/
    end
     /* calculate & save season end months*/
    while (FE0IW00.FE0IWQCS == "N" /* If not end of SWHDR csr*/
     && FFQREC.FFABEGMO < FE0IW00.FE0IWXMO) /* and not year end*/
      FE0IW00.FE0IWWMO = FFQREC.FFABEGMO;
      FE0IW00.FE0IWWMM = FE0IW00.FE0IWWMM - 1;
      if (FE0IW00.FE0IWWMM == 0)
        FE0IW00.FE0IWWMM = 12;
        FE0IW00.FE0IWWMO = FE0IW00.FE0IWWMO - 100;
      end
      FE0IW00.FE0IWCMO[FE0IWSIX] = FE0IW00.FE0IWWMO;
      FE0IW00.FE0IWSIX = FE0IW00.FE0IWSIX + 1;
      FE0IS12(); /* Fetch SWHDR cursor*/
    end
    FE0IW00.FE0IWCMO[FE0IWSIX] = FE0IW00.FE0IWXMO;
    FE0IS14(); /* Close SWHDR cursor*/

  else /* ** season end months were entered ****/

    FE0IW00.FE0IWSIX = 1; /* index*/
    while (FE0IW00.FE0IWSIX <= FE0IW00.FE0IWNBS) /* for number of seasons*/
      if (FE0IM001.FE0IMSMM[FE0IWSIX] == 0) /* check for embedded zeros*/
        FFWREC.XXXMODID = "513"; /* Module identification*/
        set FE0IM001.FE0IMSMM[FE0IWSIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(440); /* embedded zero msg*/
        return; /* return to previous routine*/
      else
        FE0IW00.FE0IWSIX = FE0IW00.FE0IWSIX + 1;
      end
    end
     /* Verify that last season is 12 months past begin date month*/
    FE0IW00.FE0IWSIX = FE0IW00.FE0IWNBS; /* last season number*/
    FE0IW00.FE0IWWMO = FE0IW00.FE0IWBGM; /* begin date to work area*/

    FE0IW00.FE0IWWMM = FE0IW00.FE0IWWMM + 11;
    if (FE0IW00.FE0IWWMM > 12)
      FE0IW00.FE0IWWMM = FE0IW00.FE0IWWMM - 12;
      FE0IW00.FE0IWWMO = FE0IW00.FE0IWWMO + 100;
    end
    if (FE0IM001.FE0IMSMM[FE0IWSIX] != FE0IW00.FE0IWWMM)
      FFWREC.XXXMODID = "513"; /* Module identification*/
      set FE0IM001.FE0IMSMM[FE0IWSIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* last season must complete year*/
      return; /* return to previous routine*/
    end

    if (converseVar.validationMsgNum > 0) /* errors found*/
      return; /* get out*/
    end
      /* Verify that season end months are valid*/
    FE0IW00.FE0IWSIX = 1; /* reset season index*/
    FE0IW00.FE0IWWMO = FE0IW00.FE0IWBGM; /* begin date to work*/
    if (FE0IM001.FE0IMSMM[1] > 0)
      FE0IW00.FE0IWCMO[1] = FE0IW00.FE0IWBGM;
    end
    if (FE0IM001.FE0IMSMM[2] > 0)
      FE0IW00.FE0IWCMO[2] = FE0IW00.FE0IWBGM;
    end
    if (FE0IM001.FE0IMSMM[3] > 0)
      FE0IW00.FE0IWCMO[3] = FE0IW00.FE0IWBGM;
    end
    if (FE0IM001.FE0IMSMM[4] > 0)
      FE0IW00.FE0IWCMO[4] = FE0IW00.FE0IWBGM;
    end

    while (FE0IWSIX <= FE0IW00.FE0IWNBS)
      FE0IW00.FE0IWCMM[FE0IWSIX] = FE0IM001.FE0IMSMM[FE0IWSIX]; /* move month*/
      if (FE0IW00.FE0IWWMM > FE0IW00.FE0IWCMM[FE0IWSIX]) /* bgn mo > end*/
        FE0IW00.FE0IWCMO[FE0IWSIX] = FE0IW00.FE0IWCMO[FE0IWSIX] + 100; /* increment year*/
      end
      FE0IWSIX = FE0IWSIX + 1; /* bump index*/
    end

    FE0IWSIX = 1;
    FE0IWNIX = 2;

    while (FE0IWNIX <= FE0IW00.FE0IWNBS)
      if (FE0IW00.FE0IWCMO[FE0IWSIX] /* sesn > next sesn*/
       >= FE0IW00.FE0IWCMO[FE0IWNIX])
        FFWREC.XXXMODID = "513"; /* Module identification*/
        set FE0IM001.FE0IMSMM[FE0IWSIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* season must > following season*/
        return; /* return to previous routine*/
      end
      FE0IWSIX = FE0IWSIX + 1; /* increment season index*/
      FE0IWNIX = FE0IWNIX + 1; /* increment next season index*/
    end

  end


end // end FE0I513

// Process valid input request
Function FE0I600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FE0IW00.FE0IWFMS = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information*/
   /* in FF system commarea.*/
   /* ------------------------------------------------------------*/

  if (FE0IM001.XPLCD != FFWREC.XPLCD        /* Line code changed*/
   || FE0IM001.YPGCD != FFWREC.YPGCD        /* or type group changed*/
   || FE0IM001.XPCCD != FFWREC.XPCCD        /* or category changed*/
   || FE0IM001.FE0IMBMO != FE0IW00.FE0IWBMO /* begin month changed*/
   || FE0IM001.FE0IMSMM[1] != FE0IW00.FE0IWSMM[1]
   || FE0IM001.FE0IMSMM[2] != FE0IW00.FE0IWSMM[2]
   || FE0IM001.FE0IMSMM[3] != FE0IW00.FE0IWSMM[3]
   || FE0IM001.FE0IMSMM[4] != FE0IW00.FE0IWSMM[4])

    FFWREC.XPLCD = FE0IM001.XPLCD;
    FFWREC.XPLABRV = FE0IM001.XPLABRV;
    FFWREC.YPGCD = FE0IM001.YPGCD;
    FFWREC.YPGABRV = FE0IM001.YPGABRV;
    FFWREC.XPCCD = FE0IM001.XPCCD;
    FFWREC.XPCABRV = FE0IM001.XPCABRV;
    FFWREC.FFABEGMO = FE0IW00.FE0IWBGM;
    FFWREC.FFWENDM1 = FE0IW00.FE0IWCMO[1];
    FE0IW00.FE0IWSMM[1] = FE0IW00.FE0IWCMM[1];
    FFWREC.FFWENDM2 = FE0IW00.FE0IWCMO[2];
    FE0IW00.FE0IWSMM[2] = FE0IW00.FE0IWCMM[2];
    FFWREC.FFWENDM3 = FE0IW00.FE0IWCMO[3];
    FE0IW00.FE0IWSMM[3] = FE0IW00.FE0IWCMM[3];
    FFWREC.FFWENDM4 = FE0IW00.FE0IWCMO[4];
    FE0IW00.FE0IWSMM[4] = FE0IW00.FE0IWCMM[4];
  end

   /* ------------------------------------------------------------*/
   /* ENTER was requested so send key data to FE0J.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (FE0IM001.FE0IMBMO == 0)
      FE0I605(); /* Get max data month*/
    end
    FFWREC.FFAENDMO = FFQREC.FFAENDMO;
    if (FFWREC.XPCCD != "*" /**/
     && FFWREC.XPCCD != " " /**/
     && FFWREC.YPGCD != "*") /**/
      FE0I610(); /* Obtain FF2REC row*/
      FFWREC.XPLCD = FF2REC.XPLCD;
      if (FFWREC.XPLCD in XPLTBL.XPLCD)
        FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
    end

    COMMAREA.CATOAP = "FE0J"; /* To application*/
    XSFFS01(); /* Transfer to application*/
     /* ------------------------------------------------------------*/
      /* If transfer request failed display returned error message.*/
     /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "    "; /* Clear to application*/
    exit stack; /* Exit to display map*/
  end


end // end FE0I600

// Verify date rng "SM"  VSWHDR01
Function FE0I605()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.XWSCD = "05"; /* Target wrksht type*/

  if (FE0IM001.XPLCD == "  ")
    FFQREC.XPLCD = "*";
  else
    FFQREC.XPLCD = FE0IM001.XPLCD;
  end

  if (FE0IM001.YPGCD == "  ")
    FFQREC.YPGCD = "*";
  else
    FFQREC.YPGCD = FE0IM001.YPGCD;
  end

  if (FE0IM001.XPCCD == "  ")
    FFQREC.XPCCD = "*";
  else
    FFQREC.XPCCD = FE0IM001.XPCCD;
  end

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("SM", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, return to previous process.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == -305) /* No rows found*/
      FFWREC.XXXMODID = "605"; /* Module identification*/
      converseLib.validationFailed(18); /* Indicate no data to display*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "605"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0I605

// Obtain FF2REC row
Function FE0I610()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF2REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FFWREC.XXXMODID = "610"; /* Module identification*/
      set FE0IM001.YPGCD cursor, bold; /* Highlight*/
      set FE0IM001.XPCCD bold; /* Highlight*/
      FFWREC.XXXMSGNO = 187; /* No category found*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN FF2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0I610

// Select & open FF2REC "S1" csr
Function FE0IS01()
   /* ------------------------------------------------------------*/
   /* Select the requested rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELATIONSHIP      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0IS01

// Fetch next FF2REC "S1" csr
Function FE0IS02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Rows not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FF2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0IS02

// Close FF2REC "S1" csr
Function FE0IS03()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S32"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FF2REC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0IS03

// Obtain SWHDR rows
Function FE0IS10()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.YPGCD = FE0IM001.YPGCD; /* Type group code*/
  FFQREC.XPCCD = FE0IM001.XPCCD; /* Category code*/
  FFQREC.XWSCD = "05"; /* Worksheet type code*/
  FFQREC.FFABEGMO = -1;
  FFQREC.SY2SSCIN = "*";
  FFQREC.FFQMBYMO = -1;
  FFQREC.ZZZCHGDT = -1;
  FFQREC.ZZZCHGTM = -1;

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("S1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0IS10

// Fetch SWHDR row
Function FE0IS12()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("N1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      FE0IW00.FE0IWQCS = "Y";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FFQREC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0IS12

// Close SWHDR cursor
Function FE0IS14()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("C1", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S14"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FFQREC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FE0IS14

//*** RECORD=FE0IW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FE0IW00 type basicRecord
  10 FE0IWFMS FE0IWFMS ; 
  10 FE0IW3CS FE0IW3CS ; 
  10 FE0IWQCS FE0IWQCS ; 
  10 FE0IWF3S FE0IWF3S ; 
  10 FE0IW2CS FE0IW2CS ; 
  10 FE0IWWMO FE0IWWMO ; 
    15 FE0IWWCC FE0IWWCC ; 
    15 FE0IWWYM FE0IWWYM ; 
      20 FE0IWWYY FE0IWWYY ; 
      20 FE0IWWMM FE0IWWMM ; 
  10 FE0IWWBD FE0IWWBD ; 
    15 FE0IWWBM FE0IWWBM ; 
    15 * num(2) ; 
  10 FE0IWCRD FE0IWCRD ; 
    15 FE0IWCRC FE0IWCRC ; 
    15 FE0IWCRY FE0IWCRY ; 
    15 FE0IWCRM FE0IWCRM ; 
    15 FE0IWCDY FE0IWCDY ; 
  10 FE0IWCHM FE0IWCHM ; 
  10 FE0IWVDT FE0IWVDT ; 
    15 FE0IWVYM FE0IWVYM ; 
    15 FE0IWVDD FE0IWVDD ; 
  10 FE0IWSSW FE0IWSSW ; 
  10 FE0IWSSI FE0IWSSI ; 
  10 FE0IWABY FE0IWABY ; 
    15 FE0IWABC FE0IWABC ; 
    15 FE0IWABM FE0IWABM ; 
  10 FE0IWBGM FE0IWBGM ; 
    15 FE0IWBGC FE0IWBGC ; 
    15 FE0IWBMO FE0IWBMO ; 
  10 FE0IWDT1 FE0IWDT1 ; 
    15 * num(1) ; 
    15 FE0IWCY1 FE0IWCY1 ; 
      20 FE0IWCC1 FE0IWCC1 ; 
      20 FE0IWYY1 FE0IWYY1 ; 
      20 FE0IWMM1 FE0IWMM1 ; 
    15 FE0IWDD1 FE0IWDD1 ; 
  10 FE0IWSIX FE0IWSIX ; 
  10 FE0IWNIX FE0IWNIX ; 
  10 FE0IWNBS FE0IWNBS ; 
  10 FE0IWCMO FE0IWCMO [4] ; 
    15 FE0IWCCY FE0IWCCY ; 
    15 FE0IWCMM FE0IWCMM ; 
  10 FE0IWSMM FE0IWSMM [4] ; 
  10 FE0IWXMO FE0IWXMO ; 
  10 FE0IWEMO FE0IWEMO [4] ; 
end // end FE0IW00

// End of FF2REC csr switch
DataItem FE0IW2CS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of FF3REC csr switch
DataItem FE0IW3CS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Actl buy century
DataItem FE0IWABC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Actual buy YYMM
DataItem FE0IWABM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Actl buy CCYYMM
DataItem FE0IWABY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Begin month century
DataItem FE0IWBGC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Begin month CCYYMM
DataItem FE0IWBGM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Begin month YYMM
DataItem FE0IWBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FE0IWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted ccyy
DataItem FE0IWCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create day
DataItem FE0IWCDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create hours/minutes
DataItem FE0IWCHM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted mm
DataItem FE0IWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted ccyymm
DataItem FE0IWCMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create century
DataItem FE0IWCRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create ccyymmdd
DataItem FE0IWCRD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create month
DataItem FE0IWCRM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create year
DataItem FE0IWCRY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work ccyymm
DataItem FE0IWCY1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem FE0IWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FE0IWDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// sesn end ccyymm
DataItem FE0IWEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First FF3REC switch
DataItem FE0IWF3S char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FE0IWFMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work month
DataItem FE0IWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of seasons
DataItem FE0IWNBS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next index
DataItem FE0IWNIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of FFQREC csr switch
DataItem FE0IWQCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season idex
DataItem FE0IWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sesn end mm
DataItem FE0IWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save select index
DataItem FE0IWSSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection switch
DataItem FE0IWSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// validate day
DataItem FE0IWVDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// validate date
DataItem FE0IWVDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// validate year/month
DataItem FE0IWVYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work buy date ccyymmdd
DataItem FE0IWWBD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work buy ccyymm
DataItem FE0IWWBM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FE0IWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FE0IWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyymm
DataItem FE0IWWMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year/month
DataItem FE0IWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FE0IWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year end ccyymm
DataItem FE0IWXMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FE0IWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

