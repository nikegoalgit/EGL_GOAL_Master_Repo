package fy0b;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FY0B ****
//      This program will allow the user to inquire/maintain
// existing trade restrictions table rows.  The GPC code is a
// required field.  The database will return 0 to N rows based
// upon the selection criteria.  The program will format the
// screen with the trade restriction information returned from
// the database.
// 
// This program allows adding and deleting of trade restriction
// rows:
//       A trade restriction is any reason a Destination
//       Country places on goods to be imported from the
//       Manufacturing Country.
// 
//       Ex.  Shoes that are made with Pig skin are
//            not allowed in Egypt.
// 
//     The user may add new rows by pressing PF13 from the
// list screen (blank or filled with rows).  This will position
// them in an add screen.  Rows can then be added (if entries
// pass edit criteria) by pressing enter.  The user may
// continue adding or exit the the list screen.  (If a row
// already exists on an add, a message will appear to that
// effect:  'THIS ROW ALREADY EXISTS').
//      A user can select one or more rows for delete and hit
// PF15.  The user will then be positioned in a delete screen
// where they will hit enter to confirm delete and cycle to the
// next row selected for delete or PF3 to return to the list
// screen.
// ;
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 07/01/88   gwitzi   New application.
// 03/04/93   GAMEN    Allow from and to ctry to be the same
// 11/04/97   MBURLE   Y2KFIX: Regenerated to pick up latest
//                     version of XX0XS01.
// *********************
Program FY0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY0BW01 FY0BW01; // record
  FY0BW02 FY0BW02; // record
  FYBREC FYBREC; // record
  FYWREC FYWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XMCTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use YTRTBL {deleteAfterUse = yes}; // table
  use FY0BM.FY0BM001,  // forms
      FY0BM.FY0BM002, 
      FY0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFY001: XPFY001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Factory Trade Restriction process.*/
     /* ------------------------------------------------------------*/

    set FY0BW01 empty; /* Initialize working storage*/
    set FY0BW02 empty; /* Initialize temporary storage*/
    set FYBREC empty; /* Initialize CSP Record*/
    set SQLCA empty; /* Initialize sql error record*/
    set ERRSQLCA empty;
    set TA1REC empty; /* Initialize error diag module*/
    set TA5REC empty; /* Initializes TA0050 record*/
    set XX0XW01 empty; /* Initializes date record*/
    set XX0XW02 empty; /* Initializes pop up window record*/
    set XX0XM001 initial; /* Initialize map output area*/
    set FY0BM001 initial; /* Initialize map output area*/
    set FY0BM002 initial; /* Initialize map output area*/

    FY0BW01.FY0BWIXM = 14; /* Initialize list lines*/
    FY0BW01.FY0BWSWR = "N"; /* Init request for data to no*/
    FY0BW01.FY0BWLSF = "Y"; /* Sets list map flag to yes*/
    FY0BW01.FY0BWMAP = "1"; /* Sets map value to 1*/
    FY0BW01.FY0BWFNC = " "; /* Sets function code to spaces*/
    FY0BW01.XGPCD = COMMAREA.XGPCD; /* Passes GPC code*/

     /* -----------------------------------------------------------*/
     /* WHEN COMMING INTO THIS PROGRAM VIA FAST PATH CAITEM wILL*/
     /* BE CHECKED FOR AN ADD OR DELETE FUNCTION CODE.-*/
     /* -----------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* If item exists*/
      FY0BW01.CAITEM = COMMAREA.CAITEM;
      if (FY0BW01.FY0BWFNC == "A") /* An add was requested*/
        FY0BW01.FY0BWMAP = "2"; /* Will converse map2*/
        FY0BW01.FY0BWLSF = "N"; /* Set list map flag to N*/
      else
        FY0BW01.FY0BWFNC = " "; /* Invalid function passed*/
      end
    end

     /* ---------------------------------------------------------*/
      /* THE GPC CODE WILL BE CHECKED WHEN ENTERING VIA FAST*/
      /* PATH FOR VALIDITY.*/
     /* ---------------------------------------------------------*/

    if (FY0BW01.XGPCD in XGPTBL.XGPCD) /* If gpc code in table*/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        FY0BW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC code to storage*/
        if (FY0BW01.FY0BWMAP == "1")
          FY0BW01.FY0BWSWR = "Y"; /* Data request is yes*/
        end
      end
    end

    goto FY0B001; /* Converse Transportation Restrictions maps*/

    FY0B001: FY0B001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Trade Restriction process.*/
     /* ------------------------------------------------------------*/

    goto FY0B001; /* Converse Trade Restriction Map*/


  end // end main
end // end FY0B

// Country Trade Restrictions
Function FY0B001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all PF Key, "EZEFLO" is used to exit to redusplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (FY0BW01.FY0BWMAP == "1") /* Map 1 was requested*/
    FY0B100(); /* Display map 1*/
  else
    if (FY0BW01.FY0BWMAP == "2") /* Map 2 was requested*/
      if (FY0BW01.FY0BWFNC == "A") /* Add function requested*/
        if (COMMAREA.CAADDFL == "Y") /* User can do adds*/
          FY0B200(); /* Display map 2*/
        else
          FY0BW01.FY0BMSGA = "Y"; /* Turn message flag on*/
          FY0BW01.FY0BWFNC = " "; /* Set function code to spaces*/
          FY0BW01.FY0BWMAP = 1; /* Request for map 1*/
        end
      else
        if (FY0BW01.FY0BWFNC == "D") /* Delete function requested*/
          if (COMMAREA.CADELFL == "Y") /* User can do deletes*/
            FY0B002(); /* Delete Process*/
          else
            FY0BW01.FY0BMSGD = "Y"; /* Turn message flag on*/
            FY0BW01.FY0BWFNC = " "; /* Set function code to spaces*/
            FY0BW01.FY0BWMAP = 1; /* Request for map 1*/
          end
        else
          SQLCA.SQLCAREC = "INVALID FUNCTION CODE";
          FY0B003(); /* Error routine*/
        end
      end
    else
      SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
      FY0B003(); /* Error routine*/
    end
  end


end // end FY0B001

// DELETE SCREEN OPTIONS
Function FY0B002()

   /* ----------------------------------------------------------*/
     /* This module will make the determination if:*/
      /* 1) It is being entered via the List Screen*/
      /* 2) or being entered via Fast Path*/
      /* If Fast Path the List Screen will be brought up.*/
   /* ----------------------------------------------------------*/

  FY0BW01.FY0BWSWR = "N"; /* Request for data key*/
  FY0BW01.FY0BWIXM = 1; /* Initialize line index*/
  FY0BW01.FY0BWCSK = " "; /* Clear save key*/
  while (FY0BWIXM <= 14) /* Until end of lines*/
    if (FY0BM001.FY0BMSEL[FY0BWIXM] == "S") /* Line selected*/
      FY0B300(); /* Display DELETE map*/
      FY0BM001.FY0BMSEL[FY0BWIXM] = " "; /* Clear line selected*/
      set FYBREC empty; /* Clear record*/
    end
    FY0BW01.FY0BWIXM = FY0BW01.FY0BWIXM + 1; /* Increment line count*/
  end
  FY0BW01.FY0BWMAP = "1"; /* Set map 1*/
  FY0BW01.FY0BWSWR = "Y"; /* Request for data key*/

end // end FY0B002

// Fast path error routine
Function FY0B003()

   /* -----------------------------------------------------------*/
     /* This error routine is executed from the Main Application*/
     /* Flow if an error has occureddue to an invalid map number,*/
     /* function code, or major error not covered in the Main*/
     /* Process flow.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "FY0B001"; /* Process name*/
  TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
  TA1REC.TA1MAP = FY0BW01.FY0BWMAP; /* Map name*/
  SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  XSPF4(); /* Exit to master menu*/

end // end FY0B003

// Trade Restrictions inq/maint
Function FY0B100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0BW01.FY0BWSWR == "Y")
    FY0B110(); /* Obtain the data to display*/
  end

  FY0B120(); /* Format and display the map*/

  FY0B130(); /* Check attention identifier*/

  FY0B140(); /* Reset fields to normal intensity*/

  FY0B150(); /* Verify the entered data*/

  FY0B160(); /* Process valid input request*/


end // end FY0B100

// Obtain the data to display
Function FY0B110()
   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  set FY0BM001 initial; /* Clear map1*/

  FY0B111(); /* Purge any temporary storage*/

  FY0B112(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    FY0BW01.FY0BWSWC = "N"; /* Initialize end of file switch*/
    FY0BW01.FY0BWIXM = 1; /* Initialize display line number*/
    set FY0BW02 empty; /* Clear temporary storage*/

    while (FY0BW01.FY0BWSWC == "N") /* Until cursor end of file*/

      FY0B113(); /* Obtain data and format page*/

      if (FY0BW01.FY0BWIXM > 14) /* Page is full*/
        FY0B114(); /* Add page to temporary storage*/
      end
      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        FY0BW01.FY0BWSWC = "Y"; /* Force end of file*/
      end
    end
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    if (FY0BW01.FY0BWIXM > 1) /* and page was formatted*/
      FY0B114(); /* Add page to temporary storage*/
    end
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    FY0B115(); /* Close the selected set cursor*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    FY0BW01.FY0BWTSP = 1; /* Initialize page number*/
    FY0BW01.FY0BWSWR = "N"; /* Request for data completed*/
  end

  if (FY0BW01.TA5TSQIX == 0) /* No data to display*/
    FY0BM001.XXXPRCNM = "FY0B110"; /* Process name*/
    converseLib.validationFailed(21); /* No data to display*/
  end

end // end FY0B110

// Purge any temporary storage
Function FY0B111()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FY0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (FY0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage*/

  if (TA5REC.TA5RTNCD == 0) /* No Error was found*/
    FY0BW01.FY0BWTSP = 0; /* Reset current page number*/
    FY0BW01.TA5TSQIX = 0; /* Reset highest page number*/

  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0B111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

end // end FY0B111

// Select set and open cursor
Function FY0B112()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  FYBREC.XGPCD = FY0BW01.XGPCD; /* Search key*/

  call "IO2800" ("S1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everythiing OK*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0B112"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "FY0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTRORS01"; /* Table view name*/
    TA1REC.TA1TBLKE = FYBREC.XGPCD; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0BM001.XXXPRCNM = "FY0B112"; /* Process name*/
  end

end // end FY0B112

// Fetch next row and format
Function FY0B113()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "IO2800" ("N1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

    FY0B13A(); /* Validation check*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FY0BW01.FY0BWSWC = "Y"; /* Indicate end of file*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0B113"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "FY0BM001"; /* Map name*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTRORS01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      FY0BM001.XXXPRCNM = "FY0B113"; /* Process name*/
    end
  end

end // end FY0B113

// Add page to temporary storage
Function FY0B114()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FY0BW02.FY0BWLEN = 2328; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (FY0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No error was found*/
    FY0BW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    FY0BW01.FY0BWIXM = 1; /* Reset display line number*/
    set FY0BW02 empty; /* Clears temporary storage record*/
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0B114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0BM001.XXXPRCNM = "FY0B114"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end FY0B114

// Close selected set cursor
Function FY0B115()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2800" ("C1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

     /* GO ON*/

  else
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0B115"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "FY0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0BM001.XXXPRCNM = "FY0B115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end FY0B115

// Format and display the map
Function FY0B120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No Error message*/
    set FY0BM001 initial; /* Clear map output area*/
    FY0BM001.XGPCD = FY0BW01.XGPCD; /* GPCNumber*/
    FY0BM001.XGPDESC = FY0BW01.XGPDESC; /* GPC Description*/
    FY0BW01.FY0BWLSF = "Y"; /* Sets list screen flag on*/
    if (FY0BW01.FY0BMSGA == "Y") /* If add message error*/
      FY0BM001.FY0BMMSG = "INVALID SECURITY FOR ADD";
      FY0BW01.FY0BMSGA = " "; /* Clear add message error*/
    end
    if (FY0BW01.FY0BMSGD == "Y") /* If delete message error*/
      FY0BM001.FY0BMMSG = "INVALID SECURITY FOR DELETE";
      FY0BW01.FY0BMSGD = " "; /* Clear delete message error*/
    end
    if (FY0BW01.FY0BWDCF == "Y") /* Delete successful*/
      FY0BM001.FY0BMMSG = "DELETE COMPLETE";
      FY0BW01.FY0BWDCF = " "; /* Clear flag*/
    end

    FY0B121(); /* Format the selected data*/

  else

    set FY0BM001 alarm; /* Indicate sound alarm*/
    FY0BM001.XGPCD = FY0BW01.XGPCD; /* GPCNumber*/
    FY0BM001.XGPDESC = FY0BW01.XGPDESC; /* GPC Description*/
    if (FY0BW01.FY0BWDCF == "Y") /* Delete successful*/
      FY0BM001.FY0BMMSG = "DELETE COMPLETE";
      FY0BW01.FY0BWDCF = " "; /* Clear flag*/
    end

  end

  FY0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse FY0BM001 ;
  FY0BM001.FY0BMMSG = " "; /* Clear app. message field*/

  if (converseVar.eventKey is enter)
    FY0B124(); /* Pop-up window*/
  end

end // end FY0B120

// Format the selected data
Function FY0B121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/
  FY0BW01.FY0BWCSF = "N"; /* Cursor set flag*/

  if (FY0BW01.FY0BWCSK > " ") /* Something in key*/
    FY0BW01.FY0BWTSP = 1; /* Search page*/
  end

  if (COMMAREA.CAADDFL == "Y") /* user can do adds*/
    set FY0BM001.FY0BMADD skip; /* display add key*/
  end
  if (COMMAREA.CADELFL == "Y") /* user can delete rows*/
    set FY0BM001.FY0BMDEL skip; /* display delete key*/
  end

  if (FY0BW01.TA5TSQIX == 0) /* No data to display*/
    set FY0BM001.XGPCD cursor; /* Set cursor top of page*/
    FY0BW01.FY0BWCSK = " "; /* Clear save key*/

     /* Next Sentence*/

  else

    FY0BW01.FY0BWCSF = "N"; /* Initialize cursor set flag*/
    FY0BW01.FY0BWDFL = "N"; /* Initialize save flag*/
    while (FY0BW01.FY0BWDFL == "N") /* Save save key not found*/
      FY0B122(); /* Read temp. storage page*/
      FY0B123(); /* Find save key*/
    end
    FY0BW01.FY0BWCSK = " "; /* Clear save key*/

    if (FY0BW01.FY0BWTSP != TA5REC.TA5TSQIX) /* Desired page not*/
      FY0B122(); /* Obtain temporary storage page*/
    end

    set FY0BMPGL skip; /* Display "PAGE" literal*/
    set FY0BMOFL skip; /* Display "OF" literal*/

    FY0BM001.FY0BWTSP = FY0BW01.FY0BWTSP; /* Current page number*/
    set FY0BM001.FY0BWTSP skip; /* Shows current page number*/
    FY0BM001.TA5TSQIX = FY0BW01.TA5TSQIX; /* Highest page number*/
    set FY0BM001.TA5TSQIX skip; /* Shows highest page number*/


    FY0BW01.FY0BWIXM = 1; /* Initialize line index*/

    while (FY0BW01.FY0BWIXM <= 14) /* Until end of lines*/

      if (FY0BW02.FY0BWCT1[FY0BWIXM] > " ") /* Something in desc.*/
        set FY0BM001.FY0BMSEL[FY0BWIXM] normal; /* Display select flag*/
        FY0BM001.FY0BWCT1[FY0BWIXM] = FY0BW02.FY0BWCT1[FY0BWIXM];
        FY0BM001.FY0BWCT2[FY0BWIXM] = FY0BW02.FY0BWCT2[FY0BWIXM];
        FY0BM001.XMCSDESC[FY0BWIXM] = FY0BW02.XMCSDESC[FY0BWIXM];
        FY0BM001.YTRSDESC[FY0BWIXM] = FY0BW02.YTRSDESC[FY0BWIXM];
      end
      FY0BW01.FY0BWIXM = FY0BW01.FY0BWIXM + 1; /* Increment line index*/
    end
    if (FY0BW01.FY0BWCSF == "N") /* Cursor set flag is on*/
      set FY0BM001.FY0BMSEL[1] cursor; /* Puts cursor on first line*/
    end
  end

end // end FY0B121

// Read temporary storage page
Function FY0B122()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FY0BW02.FY0BWLEN = 2328; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0B"; /* Application identification*/
  TA5REC.TA5TSQIX = FY0BW01.FY0BWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (FY0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No error was found*/

     /* GO ON*/

  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0B122"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0BM001.XXXPRCNM = "FY0B122"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

end // end FY0B122

// LOCATE SAVE KEY
Function FY0B123()

   /* ------------------------------------------------------------*/
   /* Locate the page in which the key is greater than the*/
   /* Save Key.*/
   /* Save Key = FY0BWCSK*/
   /* ------------------------------------------------------------*/

  if (FY0BW01.FY0BWCSK == " ") /* No save key entered*/
    FY0BW01.FY0BWDFL = "Y"; /* Indicate key found*/
  else

    FY0BW01.FY0BWIXM = 1; /* Initialize index*/

    while (FY0BW01.FY0BWIXM <= 14 /* Until key is found*/
     && FY0BW01.FY0BWDFL == "N") /* or page was found*/
      if (FY0BW02.FY0BWCHK[FY0BWIXM] > " ")
        if (FY0BW02.FY0BWCHK[FY0BWIXM] >= FY0BW01.FY0BWCSK)
          set FY0BM001.FY0BMSEL[FY0BWIXM] cursor; /* Initial cursor*/
          FY0BW01.FY0BWCSF = "Y"; /* Turn on cursor set flag*/
          FY0BW01.FY0BWDFL = "Y"; /* Indicate page was found*/
          if (FY0BW01.FY0BWTSP != 1) /* Key not on page*/
            if (FY0BW02.FY0BWCHK[FY0BWIXM] == FY0BW01.FY0BWCSK)

                /* GO ON*/

            else
              FY0BW01.FY0BWIXM = 14; /* Index to last entry*/
              FY0BW01.FY0BWTSP = FY0BW01.FY0BWTSP - 1; /* decrement page*/
              set FY0BM001.FY0BMSEL[FY0BWIXM] cursor; /* Initial cursor*/
            end
          else
            if (FY0BW01.FY0BWIXM > 1) /* Not first key*/
              FY0BW01.FY0BWIXM = FY0BW01.FY0BWIXM - 1; /* Decrement index*/
            end
          end
        else
          FY0BW01.FY0BWIXM = FY0BW01.FY0BWIXM + 1; /* Increment index*/
        end
      else
        FY0BW01.FY0BWIXM = FY0BW01.FY0BWIXM - 1; /* Decrement index*/
        set FY0BM001.FY0BMSEL[FY0BWIXM] cursor; /* Initial cursor*/
        FY0BW01.FY0BWCSF = "Y"; /* Turn on cursor set flag*/
        FY0BW01.FY0BWDFL = "Y"; /* Indicate page was found*/
      end
    end

    if (FY0BW01.FY0BWDFL == "N") /* Save key not found*/
      if (FY0BW01.FY0BWTSP == FY0BW01.TA5TSQIX) /* Last page*/
        FY0BW01.FY0BWIXM = FY0BW01.FY0BWIXM - 1; /* Decrement index*/
        set FY0BM001.FY0BMSEL[FY0BWIXM] cursor; /* Initial cursor*/
        FY0BW01.FY0BWCSF = "Y"; /* Turn on cursor set flag*/
        FY0BW01.FY0BWDFL = "Y"; /* Indicate page was found*/
      else
        FY0BW01.FY0BWTSP = FY0BW01.FY0BWTSP + 1; /* Increment page*/
      end
    end
  end

end // end FY0B123

// Check for ? inquiry by user
Function FY0B124()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0BM001.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0BM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0BM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
    else
      FY0BM001.XGPCD = " "; /* clear fields*/
      FY0BM001.XGPDESC = " ";
    end
    converseLib.clearScreen();
     /* restore the original map*/
  end



end // end FY0B124

// Check attention identifier
Function FY0B130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FY0BM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0BM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FY0B111(); /* Purge any temporary storage*/
      set FYBREC empty; /* Clear record*/
      COMMAREA.CATOAP = FY0BM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0BM001.CAITEM; /* Application data*/

      XSFY001(); /* Exit to another application*/
      FYBREC.XGPCD = FY0BW01.XGPCD; /* Reset load key*/
      FY0BW01.FY0BWSWR = "Y"; /* Set request for data to yes*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0BM001.XXXPRCNM = "FY0B130"; /* Process name*/
    end

    set FY0BM001.CATOAP cursor, modified, bold; /* Highlight*/
    FY0BM001.XXXPRCNM = "FY0B130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0BM001"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end
    FY0B111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0BM001.XXXPRCNM = "FY0B130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0B111(); /* Purge temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0BM001.XXXPRCNM = "FY0B130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 key pressed*/
   && COMMAREA.CAADDFL == "N")     /* Not able to ADD*/
    FY0BM001.XXXPRCNM = "FY0B130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf15 /* PF15 key pressed*/
   && COMMAREA.CADELFL == "N")     /* Not able to DELETE*/
    FY0BM001.XXXPRCNM = "FY0B130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf15 /* PF15 key pressed*/
   && FY0BM001.XGPCD == " ")       /* Nothing on map1*/
    FY0BM001.XXXPRCNM = "FY0B130"; /* Process name*/
    FY0BM001.FY0BMMSG = "YOU MUST HAVE VALID GPC CODE";
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* PF13 was not pressed*/
   && converseVar.eventKey not pf15) /* PF15 was not pressed*/

    FY0BM001.XXXPRCNM = "FY0B130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/

  end

end // end FY0B130

// TABLE VALIDATION ROUTINE
Function FY0B13A()

   /* ------------------------------------------------------------*/
     /* Get manufacturyingcountry code/description*/
   /* ------------------------------------------------------------*/

  FY0BW02.FY0BWCH1[FY0BWIXM] = FYBREC.FYBOXCC; /* Save*/
  FY0BW02.FYBOXCC[FY0BWIXM] = FYBREC.FYBOXCC;

  if (FYBREC.FYBOXCC in XCTTBL.XCTCD) /* Country code in table*/
    FY0BW02.FY0BWCT1[FY0BWIXM] = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Save*/
  else
    FY0BW02.FY0BWCT1[FY0BWIXM] = "* UNKNOWN *";
  end

   /* ------------------------------------------------------------*/
     /* Get destination country code/description*/
   /* ------------------------------------------------------------*/

  FY0BW02.FY0BWCH2[FY0BWIXM] = FYBREC.FYBDXCC; /* Save*/
  FY0BW02.FYBDXCC[FY0BWIXM] = FYBREC.FYBDXCC;

  if (FYBREC.FYBDXCC in XCTTBL.XCTCD) /* Country code in table*/
    FY0BW02.FY0BWCT2[FY0BWIXM] = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Save*/
  else
    FY0BW02.FY0BWCT2[FY0BWIXM] = "* UNKNOWN *";
  end

   /* ------------------------------------------------------------*/
     /* Get matrial content code/description*/
   /* ------------------------------------------------------------*/

  FY0BW02.FY0BWCH3[FY0BWIXM] = FYBREC.XMCCD;
  FY0BW02.XMCCD[FY0BWIXM] = FYBREC.XMCCD;

  if (FYBREC.XMCCD == " ") /* Nothing in code field*/

      /* GO ON*/

  else
    if (FYBREC.XMCCD in XMCTBL.XMCCD) /* Material content code table*/
      FY0BW02.XMCSDESC[FY0BWIXM] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      FY0BW02.XMCDESC[FY0BWIXM] = XMCTBL.XMCDESC[sysVar.arrayIndex]; /* Save*/
    else
      FY0BW02.XMCSDESC[FY0BWIXM] = "* UNKNOWN *";
                               /* Message to user code needs checking*/
      FY0BW02.XMCDESC[FY0BWIXM] = "* UNKNOWN *";
                               /* Message to user code needs checking*/
    end
  end

   /* ------------------------------------------------------------*/
     /* Get trade restriction code/description*/
   /* ------------------------------------------------------------*/

  FY0BW02.FY0BWCH4[FY0BWIXM] = FYBREC.YTRCD; /* Save*/
  FY0BW02.YTRCD[FY0BWIXM] = FYBREC.YTRCD; /* Save data*/

  if (FYBREC.YTRCD in YTRTBL.YTRCD) /* Trade restriction table*/
    FY0BW02.YTRSDESC[FY0BWIXM] = YTRTBL.YTRSDESC[sysVar.arrayIndex]; /* Save*/
    FY0BW02.YTRDESC[FY0BWIXM] = YTRTBL.YTRDESC[sysVar.arrayIndex]; /* Save*/
  else
    FY0BW02.YTRSDESC[FY0BWIXM] = "* UNKNOWN *";
                        /* Message to user that code needs checking*/
    FY0BW02.YTRDESC[FY0BWIXM] = "* UNKNOWN *";
                        /* Message to user that code needs checking*/
  end
  FY0BW01.FY0BWIXM = FY0BW01.FY0BWIXM + 1; /* Increment line index*/
end // end FY0B13A

// Reset highlighted fields
Function FY0B140()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  FY0BW01.FY0BWIXM = 1; /* Initialize line index*/

  while (FY0BW01.FY0BWIXM <= 14) /* Until end of lines*/

    if (FY0BM001.FY0BWCT1[FY0BWIXM] > " ") /* Line was formatted*/
      set FY0BM001.FY0BMSEL[FY0BWIXM] normal; /* Reset select flag*/
    end

    FY0BW01.FY0BWIXM = FY0BW01.FY0BWIXM + 1; /* Increment line index*/

  end

  set FY0BM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0BM001.CAITEM initialAttributes; /* Commarea application data*/

end // end FY0B140

// Verify the entered data
Function FY0B150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0BM001.CAITEM > " ") /* Application data was entered*/

    set FY0BM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0BM001.XXXPRCNM = "FY0B150"; /* Process name*/

  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FY0B151(); /* Verify scroll request*/

  else

    FY0B152(); /* Verify any changed data*/

  end

end // end FY0B150

// Verify scroll request
Function FY0B151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FY0BW01.FY0BWTSP < 2)       /* and no previous pages*/
    FY0BM001.XXXPRCNM = "FY0B151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FY0BW01.FY0BWTSP >= FY0BW01.TA5TSQIX) /* and no more pages*/
    FY0BM001.XXXPRCNM = "FY0B151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  FY0BW01.FY0BWIXM = 14; /* Initialize line index*/

  while (FY0BW01.FY0BWIXM > 0) /* Until end of lines*/
    if (FY0BM001.FY0BMSEL[FY0BWIXM] != FY0BW02.FY0BMSEL[FY0BWIXM])
      set FY0BM001.FY0BMSEL[FY0BWIXM] cursor, modified, bold; /* Highlight*/
      FY0BM001.XXXPRCNM = "FY0B151"; /* Process name*/
      converseLib.validationFailed(14); /* A line may not be selected*/
    end
    FY0BW01.FY0BWIXM = FY0BW01.FY0BWIXM - 1; /* Decrement line count*/
  end

end // end FY0B151

// Verify any changed data
Function FY0B152()

   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If enter key is pressed*/
    if (FY0BM001.XGPCD == FY0BW01.XGPCD) /* Existing GPC code same*/
      if (FY0BM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
        FY0BW01.XGPCD = FY0BM001.XGPCD;
        FY0BW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
        set FY0BM001 initial; /* Clear screen*/
        FY0BM001.XGPCD = FY0BW01.XGPCD;
        FY0BM001.XGPDESC = FY0BW01.XGPDESC; /* Description*/
      end
    else
      if (FY0BM001.XGPCD != FY0BW01.XGPCD) /* If GPC different*/
        if (FY0BM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
         && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
          FY0BW01.XGPCD = FY0BM001.XGPCD;
          COMMAREA.XGPCD = FY0BM001.XGPCD;
          FY0BW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
          set FY0BM001 initial; /* Clear screen*/
          FY0BM001.XGPCD = FY0BW01.XGPCD;
          FY0BM001.XGPDESC = FY0BW01.XGPDESC; /* Description*/
          FY0BW01.FY0BWCSK = " "; /* Clear save key*/
        else
          FY0BM001.XGPDESC = " "; /* Description*/
          set FY0BM001.XGPCD cursor, modified, bold; /* Highlight GPC code*/
          set FY0BM001 initial; /* Clear screen*/
          FY0BW01.XGPCD = " ";
          FY0BW01.XGPDESC = " "; /* Description*/
          FY0BM001.XXXPRCNM = "FY0B152"; /* Process name*/
          converseLib.validationFailed(101); /* Must have valid GPC code*/
        end
      else
        FY0BM001.XGPDESC = " "; /* Description*/
        set FY0BM001.XGPCD cursor, modified, bold; /* Highlight GPC code*/
        FY0BW01.XGPCD = " ";
        FY0BW01.XGPDESC = " "; /* Description*/
        FY0BM001.XXXPRCNM = "FY0B152"; /* Process name*/
        FY0BM001.FY0BMMSG = "MUST CHANGE GPC CODE"; /* Code change*/
      end
    end
  end
  if (converseVar.eventKey is pf13) /* PF13 key pressed (ADD)*/

     /* NEXT SENTENCE*/

  end
  if (converseVar.eventKey is pf15) /* PF15 key pressed (DELETE)*/
    FY0BW01.FY0BWIXM = 14; /* Initialize line index*/

    while (FY0BW01.FY0BWIXM > 0) /* Until end of lines*/
      if (FY0BM001.FY0BMSEL[FY0BWIXM] == " " /* If selection blank*/
       || FY0BM001.FY0BMSEL[FY0BWIXM] == "S") /* (S)election made*/

        /* GO ON*/

      else
        set FY0BM001.FY0BMSEL[FY0BWIXM] cursor, modified, bold;
        FY0BM001.XXXPRCNM = "FY0B152"; /* Process name*/
        converseLib.validationFailed(13); /* Modifications not allowed*/
      end
      FY0BW01.FY0BWIXM = FY0BW01.FY0BWIXM - 1; /* Decrement line number*/
    end
    if (converseVar.validationMsgNum == 0) /* No errors*/
      if ("S" in FY0BM001.FY0BMSEL) /* There is a 'S'*/

         /* GO ON*/

      else
        FY0BM001.XXXPRCNM = "FY0B152"; /* Process name*/
        converseLib.validationFailed(53); /* You must make a selection*/
        exit stack; /* Exit to redispaly map*/
      end
    end
  end

end // end FY0B152

// Process valid input request
Function FY0B160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7) /* Scroll back requested*/
      FY0BW01.FY0BWTSP = FY0BW01.FY0BWTSP - 1; /* Decrement page number*/
    end

    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      FY0BW01.FY0BWTSP = FY0BW01.FY0BWTSP + 1; /* Increment page number*/
    end

    if (converseVar.eventKey is enter) /* Enter key pressed*/
      FY0BW01.FY0BWSWR = "Y"; /* Data request*/
    else
      if (converseVar.eventKey is pf13) /* PF13 key pressed (ADD)*/
        FY0BW01.FY0BWMAP = "2"; /* Map 2 to be displayed*/
        FY0BW01.FY0BWFNC = "A"; /* Function code is add*/
        converseLib.validationFailed(0); /* Clear error message*/
      else
        if (converseVar.eventKey is pf15) /* PF15 key pressed (DELETE)*/
          FY0BW01.FY0BWMAP = "2"; /* Map 2 to be displayed*/
          FY0BW01.FY0BWFNC = "D"; /* Function code is delete*/
          converseLib.validationFailed(0); /* Clear error message*/
        end
      end
    end
  end

end // end FY0B160

// Map number two
Function FY0B200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to Add a record.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/
   /* ------------------------------------------------------------*/

  FY0B210(); /* Format and display the map*/

  FY0B220(); /* Check attention identifier*/

  FY0B230(); /* Reset fields to normal intensity*/

  FY0B240(); /* Verify the entered data*/

  FY0B250(); /* Process valid input request*/

end // end FY0B200

// FORMAT AND DISPLAY THE MAP
Function FY0B210()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    set FY0BM002 initial; /* Clear map output area*/
    FY0BM002.FY0BMMSG = "PLEASE ENTER NEW TRADE RESTRICTION DATA";
    if (FY0BW01.XGPCD > " ") /* If something in GPC code*/
      FY0BM002.XGPCD = FY0BW01.XGPCD; /* Move GPC code to map2*/
      FY0BM002.XGPDESC = FY0BW01.XGPDESC; /* Move GPC desc. to map2*/
    else
      set FY0BM002.XGPCD cursor, modified; /* Place cursor at gpc field*/
    end
  else
    set FY0BM002 alarm; /* Indicate sound alarm*/
  end


  FY0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0BM002.FY0BMFUN = "ADD"; /* Move ADD literial to map 2*/

  if (FY0BW01.FY0BWMFL == "Y") /* Add successfulflag*/
    FY0BM002.FY0BMMSG = "ADD SUCCESSFUL"; /* Map massage field*/
    FY0BW01.FY0BWMFL = "N"; /* Add successful flag*/
  end

  converse FY0BM002 ;

  FY0BM002.FY0BMMSG = " "; /* Clear message field*/

end // end FY0B210

// Check attention identifier
Function FY0B220()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FY0BM002 initial; /* Clear the map fields*/
    FY0BW01.FY0BWSWR = "Y"; /* Request for data eq yes*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0BM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0BM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0BM002.CAITEM; /* Application data*/
      FY0B111(); /* Purge any temporary storage*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0BM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0BM002.XXXPRCNM = "FY0B230"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0BM002"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0B111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0BM002.XXXPRCNM = "FY0B230"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0BW01.FY0BWMAP = "1"; /* Map flag eq 1*/
    FY0BW01.FY0BWSWR = "Y"; /* Request for data*/
    FY0BW01.FY0BWFNC = " "; /* Set function code to spaces*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.XGPCD = FY0BM002.XGPCD; /* Move in gpc code*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0B111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0BM002.XXXPRCNM = "FY0B230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

end // end FY0B220

// Reset highlighted fields
Function FY0B230()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0BM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0BM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0BM002.FYBOXCC initialAttributes; /* Map fields*/
  set FY0BM002.FYBDXCC initialAttributes;
  set FY0BM002.XMCCD initialAttributes;
  set FY0BM002.YTRCD initialAttributes;
  set FY0BM002.XGPCD initialAttributes;

   /* ------------------------------------------------------------*/
     /* CHECK AND SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    FY0B231();
  end

end // end FY0B230

// Check for ? inquiry by user
Function FY0B231()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0BM002.XGPCD == "?" /* if any ? entered*/
   || FY0BM002.FYBOXCC == "?"
   || FY0BM002.FYBDXCC == "?"
   || FY0BM002.XMCCD == "?" 
   || FY0BM002.YTRCD == "?")

       /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0BM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "               GPC CODES  "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0BM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0BM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
    else
      FY0BM002.XGPCD = " "; /* clear fields*/
      FY0BM002.XGPDESC = " ";
    end
  end


  if (FY0BM002.FYBOXCC == "?") /* if ? in country1 code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "         MFG.  COUNTRY    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXCT01(); /* perform country code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0BM002.FYBOXCC = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      FY0BM002.FY0BWCT1 = XCTTBL.XCTDESC[XX0XWPIX]; /* move name*/
      set FY0BM002.FYBOXCC cursor, modified;
    else
      FY0BM002.FYBOXCC = " "; /* clear fields*/
      FY0BM002.FY0BWCT1 = " ";
    end
  end

  if (FY0BM002.FYBDXCC == "?") /* if ? in country code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "         DEST.  COUNTRY   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXCT01(); /* perform country code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0BM002.FYBDXCC = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      FY0BM002.FY0BWCT2 = XCTTBL.XCTDESC[XX0XWPIX]; /* move name*/
      set FY0BM002.FYBDXCC cursor, modified;
    else
      FY0BM002.FYBDXCC = " "; /* clear fields*/
      FY0BM002.FY0BWCT2 = " ";
    end
  end


  if (FY0BM002.XMCCD == "?") /* if ? in material cont. code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "        MATERIAL CONTENT  "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXMC01(); /* perform mat. cont. code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0BM002.XMCCD = XMCTBL.XMCCD[XX0XWPIX]; /* move code*/
      FY0BM002.XMCDESC = XMCTBL.XMCDESC[XX0XWPIX]; /* move name*/
      set FY0BM002.XMCCD cursor, modified;
    else
      FY0BM002.XMCCD = " "; /* clear fields*/
      FY0BM002.XMCDESC = " ";
    end
  end


  if (FY0BM002.YTRCD == "?") /* if ? in trade rest.  code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "      TRADE RESTRICTION   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYTR01(); /* perform trade rest. code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0BM002.YTRCD = YTRTBL.YTRCD[XX0XWPIX]; /* move code*/
      FY0BM002.YTRDESC = YTRTBL.YTRDESC[XX0XWPIX]; /* move name*/
      set FY0BM002.YTRCD cursor, modified;
    else
      FY0BM002.YTRCD = " "; /* clear fields*/
      FY0BM002.YTRDESC = " ";
    end
  end


  converseLib.clearScreen();
   /* restore the original map*/

  converseLib.validationFailed(121); /* Go on to next request*/

  exit stack; /* Exit to redisplay map*/

end // end FY0B231

// Verify the entered data
Function FY0B240()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0BM002.CAITEM > " ") /* Application data was entered*/
    set FY0BM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0BM002.XXXPRCNM = "FY0B240"; /* Process name*/
  end

  FY0B241(); /* Check entered data*/

end // end FY0B240

// VALIDATE INPUT DATA
Function FY0B241()

   /* -----------------------------------------------------------*/
    /* Validate the entered data.*/
    /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/

   /* -----------------------------------------------------------*/
    /* Get active trade resctiction reason from code if active*/
   /* -----------------------------------------------------------*/

  if (FY0BM002.YTRCD > " " /* Something in restriction code field*/
   && FY0BM002.YTRCD in YTRTBL.YTRCD)
                                /* Check restriction content table*/
    if (YTRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      FY0BM002.YTRDESC = YTRTBL.YTRDESC[sysVar.arrayIndex];
      FY0BW01.YTRCD = YTRTBL.YTRCD[sysVar.arrayIndex];
    else
      set FY0BM002.YTRCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(29); /* Code missing or invalid*/
      FY0BM002.XXXPRCNM = "FY0B241"; /* Process name*/
      FY0BM002.YTRDESC = " "; /* Clears description*/
                                             /* Restriction reason*/
    end
  else
    set FY0BM002.YTRCD cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(29); /* Code missing or invalid*/
    FY0BM002.XXXPRCNM = "FY0B241"; /* Process name*/
    FY0BM002.YTRDESC = " "; /* Clears description*/
  end

   /* ------------------------------------------------------------*/
     /* Get material content description from code if active*/
     /* A blank material content code is OK*/
   /* ------------------------------------------------------------*/

  if (FY0BM002.XMCCD == " ") /* Nothing in material code field*/
    FY0BM002.XMCDESC = " "; /* Clears description*/
    FY0BW01.XMCCD = " "; /* Moves spaces to record*/

       /* GO ON*/

  else
    if (FY0BM002.XMCCD in XMCTBL.XMCCD) /* Check material content table*/
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        FY0BM002.XMCDESC = XMCTBL.XMCDESC[sysVar.arrayIndex];
        FY0BW01.XMCCD = XMCTBL.XMCCD[sysVar.arrayIndex];
      else
        set FY0BM002.XMCCD cursor, modified, bold; /* Highlight error*/
        converseLib.validationFailed(28); /* Material Code invalid*/
        FY0BM002.XXXPRCNM = "FY0B241"; /* Process name*/
        FY0BM002.XMCDESC = " "; /* Clears description*/

      end
    else
      set FY0BM002.XMCCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(28); /* Material Code invalid*/
      FY0BM002.XXXPRCNM = "FY0B241"; /* Process name*/
      FY0BM002.XMCDESC = " "; /* Clears description*/
    end
  end

   /* ------------------------------------------------------------*/
     /* Get destination country from code entered if active*/
   /* ------------------------------------------------------------*/

  if (FY0BM002.FYBDXCC > " " /* Something in TO country code field*/
   && FY0BM002.FYBDXCC in XCTTBL.XCTCD) /* Check country content table*/
    if (XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      FY0BM002.FY0BWCT2 = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country name*/
      FY0BW01.FYBDXCC = XCTTBL.XCTCD[sysVar.arrayIndex]; /* Country name*/
    else
      set FY0BM002.FYBDXCC cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(27); /* TO country is missing or invalid*/
      FY0BM002.XXXPRCNM = "FY0B241"; /* Process name*/
      FY0BM002.FY0BWCT2 = " "; /* Clears description*/
    end
  else
    set FY0BM002.FYBDXCC cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(27); /* TO country is missing or invalid*/
    FY0BM002.XXXPRCNM = "FY0B241"; /* Process name*/
    FY0BM002.FY0BWCT2 = " "; /* Clears description*/
  end

   /* ------------------------------------------------------------*/
     /* Get manufacturing country from code entered if active*/
   /* ------------------------------------------------------------*/

  if (FY0BM002.FYBOXCC > " " /* Something in FROM country code field*/
   && FY0BM002.FYBOXCC in XCTTBL.XCTCD) /* Check country content table*/
    if (XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      FY0BM002.FY0BWCT1 = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country name*/
      FY0BW01.FYBOXCC = XCTTBL.XCTCD[sysVar.arrayIndex]; /* Country name*/
    else
      set FY0BM002.FYBOXCC cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(26); /* FROM country is missing or invalid*/
      FY0BM002.XXXPRCNM = "FY0B241"; /* Process name*/
      FY0BM002.FY0BWCT1 = " "; /* Clears description*/
    end
  else
    set FY0BM002.FYBOXCC cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(26); /* FROM country is missing or invalid*/
    FY0BM002.XXXPRCNM = "FY0B241"; /* Process name*/
    FY0BM002.FY0BWCT1 = " "; /* Clears description*/
  end

   /* ------------------------------------------------------------*/
     /* Get general product code entered if active*/
   /* ------------------------------------------------------------*/

  if (FY0BM002.XGPCD > " " /* Something in GPC code field*/
   && FY0BM002.XGPCD in XGPTBL.XGPCD) /* Check GPC table*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      FY0BW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      FY0BM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      FY0BW01.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
      COMMAREA.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
                                           /* GPC description*/
    else
      set FY0BM002.XGPCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(101); /* Must have valid GPC code*/
      FY0BM002.XXXPRCNM = "FY0B241"; /* Process name*/
    end
  else
    set FY0BM002.XGPCD cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(101); /* Must have valid GPC code*/
    FY0BM002.XXXPRCNM = "FY0B241"; /* Process name*/
  end

   /* -----------------------------------------------------------*/
     /* Check and see if MFG country and DEST country same*/
   /* -----------------------------------------------------------*/

  /* IF FY0BM002.FYBOXCC EQ FY0BM002.FYBDXCC;*/
  /* ;                   /* FROM country and TO country are the same*/
  /* SET FY0BM002.FYBOXCC CURSOR,MODIFIED,BRIGHT; /* Highlight error*/
  /* MOVE 32 TO EZEMNO;              /* Countries cannot be the same*/
  /* MOVE 'FY0B241' TO FY0BM002.XXXPRCNM;   /* Process name*/
  /* END;*/

  if (converseVar.validationMsgNum == 0) /* Nothing in ezemno*/

      /* GO ON*/

  else
    FY0BW01.FY0BWMFL = "N"; /* Add successful flag*/
    FY0BM002.FY0BMMSG = "PLEASE CORRECT FIELDS IN ERROR";
  end

end // end FY0B241

// Process valid input request
Function FY0B250()

   /* ------------------------------------------------------------*/
   /* Process any added data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/

    FY0BW01.FY0BWMFL = "N"; /* Add flag eq no*/
    FYBREC.XGPCD = FY0BM002.XGPCD; /* Move fields to record*/
    FYBREC.FYBOXCC = FY0BM002.FYBOXCC;
    FYBREC.FYBDXCC = FY0BM002.FYBDXCC;
    FYBREC.XMCCD = FY0BM002.XMCCD;
    FYBREC.YTRCD = FY0BM002.YTRCD;

    FY0B251(); /* Check table*/

    if (SQLCA.VAGen_SQLCODE == 100) /* If row does not exists*/
      FY0B252(); /* Add new row*/
      FY0BW01.FY0BWMFL = "Y"; /* Add flag equals yes*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* If row does exists*/
        converseLib.validationFailed(31); /* Already exists*/
        FY0BM002.XXXPRCNM = "FY0B250"; /* Process name*/
        FY0BW01.FY0BWSWR = "Y"; /* Request for data eq yes*/
        set FY0BM002.FYBOXCC cursor, modified, bold; /* highlight error*/
      end
    end
  end

end // end FY0B250

// CHECK TABLE
Function FY0B251()

   /* ------------------------------------------------------------*/
   /* This module selects a table row.*/

     /* This alternate select module is designed to return a*/
     /* valid error code whenever  there are overlaps in*/
     /* the data base.  Therefore, if any number of rows are*/
     /* returned from the database a valid error has occurred.*/

   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2800" ("S ", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 100 /* Valid return codes*/
   || SQLCA.VAGen_SQLCODE == 0) 

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0B251"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "FY0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0BM002.XXXPRCNM = "FY0B251"; /* Process name*/
  end

end // end FY0B251

// ADD NEW ROW
Function FY0B252()

   /* ------------------------------------------------------------*/
   /* This module adds a trade restriction table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  FYBREC.XXXSTAT = "A";

  XX0XS01();

  FYBREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FYBREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FYBREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FYBREC.ZZZCHGCT = 0; /* Change count*/

  call "IO2800" ("A ", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Return code OK*/

     /* GO ON*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0B252"; /* Process name*/
    TA1REC.TA1LOC = "ADD A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "FY0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0BM002.XXXPRCNM = "FY0B252"; /* Process name*/
  end

end // end FY0B252

// DELETE MAP
Function FY0B300()

   /* ------------------------------------------------------------*/
   /* This is the main process used to perform a delete.  It will*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all PF key functions EZEFLO is used to redisplay the*/
   /* map if an error occurs.*/
   /* ------------------------------------------------------------*/

  FY0B310(); /* Obtain the data to display*/

  FY0B320(); /* Format and display the map*/

  FY0B330(); /* Check attention identifier*/

  FY0B340(); /* Verify the entered data*/

  FY0B350(); /* Process valid input request*/

end // end FY0B300

// Obtain Data to Display
Function FY0B310()

   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
   /* row on Trade Restriction List map.*/
   /* ------------------------------------------------------------*/

  FY0BM002.XGPCD = FY0BW01.XGPCD; /* Move gpc code to map2*/
  FY0BM002.XGPDESC = FY0BW01.XGPDESC; /* Move desc to map2*/
  FY0BM002.FY0BWCT1 = FY0BW02.FY0BWCT1[FY0BWIXM];
                                            /* S fields to map2*/
  FY0BM002.FY0BWCT2 = FY0BW02.FY0BWCT2[FY0BWIXM];
  FY0BM002.XMCDESC = FY0BW02.XMCDESC[FY0BWIXM];
  FY0BM002.YTRDESC = FY0BW02.YTRDESC[FY0BWIXM];
  FY0BM002.FYBOXCC = FY0BW02.FYBOXCC[FY0BWIXM];
  FY0BM002.FYBDXCC = FY0BW02.FYBDXCC[FY0BWIXM];
  FY0BM002.XMCCD = FY0BW02.XMCCD[FY0BWIXM];
  FY0BM002.YTRCD = FY0BW02.YTRCD[FY0BWIXM];

end // end FY0B310

// FORMAT AND DISPLAY THE MAP
Function FY0B320()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors exist*/
    set FY0BM002.FYBOXCC protect; /* Protect selected fields*/
    set FY0BM002.FYBDXCC protect;
    set FY0BM002.XMCCD protect;
    set FY0BM002.YTRCD protect;
    FY0BW01.FY0BWPRO = "Y"; /* Protect flag is yes*/
    FY0BM002.FY0BMMSG = "PRESS ENTER TO DELETE OR PA2 TO ABORT";
    set FY0BM002.CATOAP cursor, initialAttributes; /* Place cursor*/

    FY0BM002.FY0BMFUN = "DELETE"; /* Move change literal to map*/
    FY0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  else
    set FY0BM002 alarm;
  end

  converse FY0BM002 ;

  FY0BM002.FY0BMMSG = " ";

end // end FY0B320

// CHECK ATTENTION IDENTIFIERS
Function FY0B330()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    FY0BM001.FY0BMSEL[FY0BWIXM] = " ";
    set FY0BM002 initial; /* Clears map 2*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0BM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0BM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FY0BM002.CAITEM; /* Application data*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0BM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0BM002.XXXPRCNM = "FY0B330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0BW01.FY0BWMAP = "1"; /* Move to map 1*/
    FY0BW01.FY0BWMFL = "N"; /* Reset message flag*/
    FY0BW01.FY0BWSWR = "Y"; /* Request for data is yes*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "FY0BM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    FY0B112(); /* Purge temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0BM002.XXXPRCNM = "FY0B330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    COMMAREA.XGPCD = FY0BM002.XGPCD; /* Move in gpc code*/
    FY0B111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0BM002.XXXPRCNM = "FY0B230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

end // end FY0B330

// VERIFY THE ENTERED DATA
Function FY0B340()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0BM002.CAITEM > " ") /* Application data was entered*/
    set FY0BM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0BM002.XXXPRCNM = "FY0B240"; /* Process name*/
  end

end // end FY0B340

// PROCESS VALID INPUT REQUEST
Function FY0B350()

   /* ------------------------------------------------------------*/
   /* If no errors then delete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter     /* ENTER was pressed*/
   && converseVar.validationMsgNum == 0 /* and no errors*/
   && FY0BW01.FY0BWPRO == "Y")          /* Fields protected*/

    FY0BW01.FY0BWPRO = "N"; /* Initialize protect flag*/

    FY0B351(); /* Delete table row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row was found*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* Commit the update*/
      FY0BW01.FY0BWSWR = "Y"; /* Set request for data switch*/
      FY0BW01.FY0BWDCF = "Y"; /* Set delete successful switch*/
      set FY0BM002 initial; /* Clear map area*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row was not found*/
        FY0BM002.FY0BMMSG = "PRESS ENTER OR PA2 TO CONTINUE";
        converseLib.validationFailed(69); /* Delete done by someone else*/
        FY0BM002.XXXPRCNM = "FY0B360"; /* Process name*/
        FY0BW01.FY0BWSWR = "Y"; /* Set request for data switch*/
        set FY0BM002.FYBOXCC cursor, modified, bold; /* Map fields*/
        set FY0BM002.FYBDXCC modified, bold;
        set FY0BM002.XMCCD modified, bold;
        set FY0BM002.YTRCD modified, bold;
        set FY0BM002.XGPCD initialAttributes;
        exit stack;
          /* Ezeflo is used her to flow back and reshow the*/
          /* delete map with the row that does not exist.*/
      end
    end
  end

end // end FY0B350

// Delete the selected row
Function FY0B351()

   /* ------------------------------------------------------------*/
   /* Delete the agent table row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  FYBREC.XGPCD = FY0BW01.XGPCD; /* Move record to be deleted*/
  FYBREC.FYBOXCC = FY0BW02.FYBOXCC[FY0BWIXM]; /* to FYBREC*/
  FYBREC.FYBDXCC = FY0BW02.FYBDXCC[FY0BWIXM];
  FYBREC.XMCCD = FY0BW02.XMCCD[FY0BWIXM];
  FYBREC.YTRCD = FY0BW02.YTRCD[FY0BWIXM];

  FY0BW01.FYBOXCC = FY0BW02.FYBOXCC[FY0BWIXM]; /* Save key*/
  FY0BW01.FYBDXCC = FY0BW02.FYBDXCC[FY0BWIXM]; /* Save key*/
  FY0BW01.XMCCD = FY0BW02.XMCCD[FY0BWIXM]; /* Save key*/
  FY0BW01.YTRCD = FY0BW02.YTRCD[FY0BWIXM]; /* Save key*/

  call "IO2800" ("D ", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
   || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0B361"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "FYOBM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0BM002.XXXPRCNM = "FY0B361"; /* Process name*/
  end


end // end FY0B351

// converse pop up window
Function XPYTR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YTRTBL.YTRCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YTRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YTRTBL.YTRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YTRTBL.YTRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YTRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YTRTBL.YTRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YTRTBL.YTRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YTRTBL.YTRCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYTR01

//*** RECORD=FY0BW01 ****
// Working storage for FY0B - Trade Restriction
// ***********************
Record FY0BW01 type basicRecord
  10 XXXRVNBR XXXRVNBR ; 
  10 FY0BWSWC FY0BWSWC ; 
  10 FY0BWSWR FY0BWSWR ; 
  10 FY0BWTSP FY0BWTSP ; 
  10 FY0BWIXM FY0BWIXM ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FY0BWQIX FY0BWQIX ; 
  10 FY0BWMAP FY0BWMAP ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 FY0BWIND FY0BWIND ; 
  10 FY0BWLSF FY0BWLSF ; 
  10 FY0BWPRO FY0BWPRO ; 
  10 FY0BWDCF FY0BWDCF ; 
  10 FY0BWCSF FY0BWCSF ; 
  10 FY0BMSGA FY0BMSGA ; 
  10 FY0BMSGD FY0BMSGD ; 
  10 FY0BWDFL FY0BWDFL ; 
  10 FY0BWCSK FY0BWCSK ; 
    15 FYBOXCC FYBOXCC ; 
    15 FYBDXCC FYBDXCC ; 
    15 XMCCD XMCCD ; 
    15 YTRCD YTRCD ; 
  10 CAITEM CAITEM ; 
    15 FY0BWFNC FY0BWFNC ; 
    15 * char(19) ; 
  10 FY0BWDEF FY0BWDEF ; 
  10 FY0BWMFL FY0BWMFL ; 
end // end FY0BW01

//*** RECORD=FY0BW02 ****
// Temporary storage record for fy0b - Trade Restriction list
// ***********************
Record FY0BW02 type basicRecord
  10 FY0BWLEN FY0BWLEN ; 
  10 FY0BWLIN FY0BWLIN [14] ; 
    15 FY0BMSEL FY0BMSEL ; 
    15 FY0BWCT1 FY0BWCT1 ; 
    15 FYBOXCC FYBOXCC ; 
    15 FY0BWCT2 FY0BWCT2 ; 
    15 FYBDXCC FYBDXCC ; 
    15 XMCSDESC XMCSDESC ; 
    15 XMCDESC XMCDESC ; 
    15 XMCCD XMCCD ; 
    15 YTRSDESC YTRSDESC ; 
    15 YTRDESC YTRDESC ; 
    15 YTRCD YTRCD ; 
  10 FY0BWCHK FY0BWCHK [14] ; 
    15 FY0BWCH1 FY0BWCH1 ; 
    15 FY0BWCH2 FY0BWCH2 ; 
    15 FY0BWCH3 FY0BWCH3 ; 
    15 FY0BWCH4 FY0BWCH4 ; 
end // end FY0BW02

DataItem FY0BMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add error flag
DataItem FY0BMSGA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete error flag
DataItem FY0BMSGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From country code
DataItem FY0BWCH1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To country code
DataItem FY0BWCH2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Material content code
DataItem FY0BWCH3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YTR_RSTR_CD
DataItem FY0BWCH4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Compare key
DataItem FY0BWCHK char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor set flag
DataItem FY0BWCSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change save key
DataItem FY0BWCSK char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From country description
DataItem FY0BWCT1 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To country description
DataItem FY0BWCT2 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete complete flag
DataItem FY0BWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data entered flag
DataItem FY0BWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete flag
DataItem FY0BWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add or delete flag
DataItem FY0BWFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line count flag
DataItem FY0BWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FY0BWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem FY0BWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// List map line
DataItem FY0BWLIN char(153)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List map flag
DataItem FY0BWLSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem FY0BWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Successful add flag
DataItem FY0BWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Protect flag
DataItem FY0BWPRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Highest page no./index
DataItem FY0BWQIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Cursor end of file switch
DataItem FY0BWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FY0BWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current temporary storage page
DataItem FY0BWTSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

