package fy0d;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=FY0D ****
// THIS PROGRAM WILL ALLOW THE USER TO INQUIRE/MAINTAIN
// EXISTING LIAISON/FIELD OFFICE TABLE ROWS.
// 
//     THE LIAISON/FIELD OFFICE FUNCTION IS TO RELAY INFORM-
//     ATION BETWEEN NIKE (HOME OFFICE) TO THE PRODUCTION
//     FACILITIES LOCATED HERE (USA) AND IN EVERY COUNTRY
//     THAT NIKE HAS PRODUCTION FACILITIES
// 
// BASED UPON THE GPC CODE ENTERED THE DATABASE WILL RETURN
// 0 TO N ROWS.  THESE ROWS WILL BE FORMATTED ON THE LIST
// SCREEN AS INSTRUCTED BY THIS PROGRAM.
// 
// THIS PROGRAM WILL ALLOW THE USER TO INQUIRE, DELETE, OR
// CHANGE EXISTING LIAISON/FIELD OFFICE ROWS.  THE USER WILL
// ALSO BE ABLE TO ADD NEW ROWS.
// 
// ALL PROGRAM FUNCTIONS CAN EITHER BE IMPLEMENTED FROM THE
// LIST SCREEN OR VIA FAST PATH.
// 
// WHEN SELECTING A FUNCTION FROM THE LIST SCREEN
// THE USER WILL MAKE THE FUCTION SELECTION VIA PF KEYS.
// 
//                     PF13 FOR THE ADD
//                     PF14 FOR THE CHANGE
//                     PF15 FOR THE DELETE
//                     ENTER FOR THE INQUIRE
// 
// ONLY ROWS THAT HAVE AN ACTIVE STATUS CAN BE CHANGED OR
// DELETED.  AN INQUIRY CAN BE DONE ON ANY ROW SELECTED.
// AS MANY AS 14 ROWS CAN BE SELECTED FROM ANY ONE PAGE.
// 
// 
//                   * FAST PATH *
// 
// WHEN SELECTING A FUNCTION VIA FAST PATH THE USER WILL
// ENTER A,I,C, OR D.
// 
// WHEN DELETING,CHANGING, OR INQUIRING THE USER WILL BE
// REQUIRED TO HAVE BOTH THE GPC CODE AND THE LIAISON/FIELD
// CODE TO RETRIVE THE REQUESTED RECORD.
// 
// THE USE OF POP-UP WINDOWS HAS BEEN INCORPORATED INTO THIS
// PROGRAM.  THIS WILL ALLOW THE USER TO FIND AND ENTER THE
// CORRECT GPC CODE, COUNTRY, OR STATE (IF COUNTRY IS USA).
// 
// 
//   DATE        NAME       DESCRIPTION OF CHANGE
// ________     ______     ___________________________________
// 08/25/88     gwitzi     NEW APPLICATION
// 11/03/93     GAMEN      Rename/Resize XXXADDR to XXX-ADDR
// 11/04/97     MBURLE     Y2KFIX: Regenerated to pick up
//                         latest version of XX0XS01.
// 06/08/98     vramac     pca434a: Add remote printer
// 
// *********************
Program FY0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY0DW01 FY0DW01; // record
  FY0DW02 FY0DW02; // record
  FYWREC FYWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  VFDOFC02 VFDOFC02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use FY0DM.FY0DM001,  // forms
      FY0DM.FY0DM002, 
      FY0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFY001: XPFY001();
     /* ------------------------------------------------------------*/
     /* INITIALIZE WORKING STORAGE AND MAP OUTPUT AREAS.*/
     /* FLOW TO CONVERSE THE LIAISON/FIELD OFFICE PROCESS.*/
     /* ------------------------------------------------------------*/

    set FY0DW01 empty; /* Initialize working storage*/
    set FY0DW02 empty; /* Initialize temporary storage*/
    set VFDOFC02 empty; /* Initialize CSP record*/
    set SQLCA empty; /* Initialize SQL record*/
    set ERRSQLCA empty; /* Initialize SQL error record*/
    set TA1REC empty; /* Initialize error diag. module*/
    set TA5REC empty; /* Initialize ta0050 record*/
    set XX0XW01 empty; /* Initialize date record*/
    set XX0XW02 empty; /* Initialize date record*/
    set XX0XM001 initial; /* Clear pop-up window map*/
    set FY0DM001 initial; /* Clear list screen map*/
    set FY0DM002 initial; /* Clear functions map*/

    FY0DW01.FY0DWIXM = 14; /* Initialize list screen lines*/
    FY0DW01.FY0DWSWR = "N"; /* Initialize request for data*/
    FY0DW01.FY0DWLSF = "Y"; /* Initialize list map flag*/
    FY0DW01.FY0DWMAP = "1"; /* Initialize list map*/
    FY0DW01.FY0DWFNC = " "; /* Set function code to spaces*/
    FY0DW01.XGPCD = COMMAREA.XGPCD;

     /* ---------------------------------------------------------*/
     /* WHEN COMMING INTO THIS PROGRAM VIA FAST PATH CAITEM WILL*/
     /* BE CHECKED FOR AN ADD, DELETE, INQUIRY, OR CHANGE*/
     /* FUNCTION CODE.*/
     /* ---------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* If item exists*/
      FY0DW01.CAITEM = COMMAREA.CAITEM;
      if (FY0DW01.FY0DWFNC == "A" /* An ADD was requested*/
       || FY0DW01.FY0DWFNC == "C" /* A CHANGE was requested*/
       || FY0DW01.FY0DWFNC == "I") /* An INQUIRY was requested*/
        FY0DW01.FY0DWMAP = "2"; /* Will converse map2*/
        FY0DW01.FY0DWLSF = "N"; /* Turn off list map flag*/
      else
        FY0DW01.FY0DWFNC = " "; /* Clear function code*/
      end
    end

     /* -----------------------------------------------------------*/
     /* THE GPC CODE WILL BE CHECKED WHEN ENTERING VIA FAST PATH*/
     /* FOR VALIDITY.*/
     /* -----------------------------------------------------------*/

    if (COMMAREA.XGPCD in XGPTBL.XGPCD) /* If GPC code in table*/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        FY0DM001.XGPCD = COMMAREA.XGPCD; /* Move code to map1*/
        FY0DW01.XGPCD = COMMAREA.XGPCD; /* Move code to storage*/
        FY0DM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC desc. to map1*/
        FY0DW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC desc.*/
        if (FY0DW01.FY0DWMAP == "1")
          FY0DW01.FY0DWSWR = "Y"; /* Turn on request for data*/
        end
      end
    end


    FY0D001: FY0D001();
    goto FY0D001;
  end // end main
end // end FY0D

// Liaison/Field Office
Function FY0D001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

      /* If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (FY0DW01.FY0DWMAP == "1") /* Map 1 was requested*/
    FY0D100(); /* Display map 1*/
  else
    if (FY0DW01.FY0DWMAP == "2") /* Map 2 was requested*/
      if (FY0DW01.FY0DWFNC == "A") /* Add function requested*/
        if (COMMAREA.CAADDFL == "Y") /* User can do adds*/
          FY0D200(); /* Display map 2*/
        else
          converseLib.validationFailed(6); /* Request for application invalid*/
          FY0DW01.FY0DWFNC = " "; /* Set function code to spaces*/
          FY0DW01.FY0DWMAP = 1; /* Request for map 1*/
        end
      else
        if (FY0DW01.FY0DWFNC == "I") /* Inquire function requested*/
          if (COMMAREA.CAINQFL == "Y") /* User can do deletes*/
            FY0D003(); /* Inquire Process*/
          else
            converseLib.validationFailed(6); /* Request for application invalid*/
            FY0DW01.FY0DWFNC = " "; /* Set function code to spaces*/
            FY0DW01.FY0DWMAP = 1; /* Request for map 1*/
          end
        else
          if (FY0DW01.FY0DWFNC == "C") /* Change function requested*/
            if (COMMAREA.CACHGFL == "Y") /* User can do deletes*/
              FY0D004(); /* Change Process*/
            else
              converseLib.validationFailed(6); /* Request for application invalid*/
              FY0DW01.FY0DWFNC = " "; /* Set function code to spaces*/
              FY0DW01.FY0DWMAP = 1; /* Request for map 1*/
            end
          else
            SQLCA.SQLCAREC = "INVALID FUNCTION CODE";
            FY0D005(); /* Error routine*/
          end
        end
      end
    else
      SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
      FY0D005(); /* Error routine*/
    end
  end

end // end FY0D001

// Inquiry Screen Options
Function FY0D003()

   /* ----------------------------------------------------------*/
     /* This module will make the determination if:*/
      /* 1) It is being entered via the List Screen*/
      /* 2) or being entered via Fast Path*/
      /* If Fast Path the List Screen will be brought up.*/
   /* ----------------------------------------------------------*/

  if (FY0DW01.FY0DWLSF == "Y") /* Came from list screen*/
    FY0DW01.FY0DWSWR = "Y"; /* Request for data key*/
    FY0DW01.FY0DWIXM = 1; /* Initialize line index*/
    while (FY0DWIXM <= 14) /* Until end of lines*/
      if (FY0DM001.FY0DMSEL[FY0DWIXM] == "S") /* Line selected*/
        FY0D500(); /* Display Inquiry map*/
      end
      if (converseVar.validationMsgNum == 0) /* No errors*/
        FY0DW01.FY0DWIXM = FY0DW01.FY0DWIXM + 1; /* Increment line count*/
      end
    end
    FY0DW01.FY0DWMAP = "1"; /* Set map 1*/
    FY0DW01.FY0DWSWR = "Y"; /* Request for data key*/
  end
  if (FY0DW01.FY0DWLSF == "N" /* Came Fast Path*/
   && FY0DW01.FY0DWSWR == "N") /* Request for data eq no*/
    FY0D600(); /* Display Inquiry map*/
  end
  if (FY0DW01.FY0DWLSF == "N" /* Came Fast Path*/
   && FY0DW01.FY0DWSWR == "Y") /* Request for data eq yes*/
    FY0D600(); /* Display Inquiry map*/
  end

end // end FY0D003

// Change Screen Options
Function FY0D004()

   /* ----------------------------------------------------------*/
     /* This module will make the determination if:*/
      /* 1) It is being entered via the List Screen*/
      /* 2) or being entered via Fast Path*/
      /* If Fast Path the List Screen will be brought up.*/
   /* ----------------------------------------------------------*/

  if (FY0DW01.FY0DWLSF == "Y") /* Came from list screen*/
    FY0DW01.FY0DWSWR = "N"; /* Request for data key*/
    FY0DW01.FY0DWIXM = 1; /* Initialize line index*/
    while (FY0DWIXM <= 14) /* Until end of lines*/
      if (FY0DM001.FY0DMSEL[FY0DWIXM] == "S") /* Line selected*/
        FY0D700(); /* Display Change map*/
        if (converseVar.validationMsgNum == 0) /* No errors*/
        else
          FY0DW01.FY0DWIXM = FY0DW01.FY0DWIXM - 1; /* Decrement line count*/
        end
      end
      FY0DW01.FY0DWIXM = FY0DW01.FY0DWIXM + 1; /* Increment line count*/
    end
    FY0DW01.FY0DWMAP = "1"; /* Set map 1*/
    FY0DW01.FY0DWSWR = "Y"; /* Request for data key*/
  end
  if (FY0DW01.FY0DWLSF == "N" /* Came from Fast Path*/
   && FY0DW01.FY0DWSWR == "N") /* Request for data key*/
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set VFDOFC02 empty; /* Clear record*/
    end
    FY0D800(); /* Display Fast Path Change map*/
  end
  if (FY0DW01.FY0DWLSF == "N" /* Came from Fast Path*/
   && FY0DW01.FY0DWSWR == "Y") /* Request for data key*/
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set VFDOFC02 empty; /* Clear record*/
    end
    FY0D800(); /* Display Fast Path Change map*/
  end

end // end FY0D004

// Fast path error routine
Function FY0D005()

   /* -----------------------------------------------------------*/
     /* This error routine is executed from the Main Application*/
     /* Flow if an error has occureddue to an invalid map number,*/
     /* function code, or major error not covered in the Main*/
     /* Process flow.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "FY0D001"; /* Process name*/
  TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
  TA1REC.TA1MAP = FY0DW01.FY0DWMAP; /* Map name*/
  SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  XSPF4(); /* Exit to master menu*/

end // end FY0D005

// Liaison/Field Office List Map
Function FY0D100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 1.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0DW01.FY0DWSWR == "Y")
    FY0D110(); /* Obtain the data to display*/
  end

  FY0D120(); /* Format and display the map*/

  FY0D130(); /* Check attention identifier*/

  FY0D140(); /* Reset fields to normal intensity*/

  FY0D150(); /* Verify the entered data*/

  FY0D160(); /* Process valid input request*/

end // end FY0D100

// Obtain the data to display
Function FY0D110()

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  FY0D111(); /* Purge any temporary storage*/

  FY0D112(); /* Select set and open the cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/

    FY0DW01.FY0DWSWC = "N"; /* Initialize end of file switch*/
    FY0DW01.FY0DWIXM = 1; /* Initialize display line number*/
    set FY0DW02 empty; /* Clear temporary storage*/

    while (FY0DW01.FY0DWSWC == "N") /* Until cursor end of file*/
      FY0D113(); /* Obtain data and format page*/
      if (FY0DW01.FY0DWIXM > 14) /* Page is full*/
        FY0D114(); /* Add page to temporary storage*/
      end
    end
    if (FY0DW01.FY0DWSWC == "Y") /* End of file flag*/
      if (FY0DW01.FY0DWIXM > 1) /* And page was formatted*/
        FY0D114(); /* Add page to temporary storage*/
      end
      FY0DW01.FY0DMTSP = 1; /* Initialize page number*/
      FY0DW01.FY0DWSWR = "N"; /* Request for data completed*/
      FY0D115(); /* Close the selected set cursor*/
    end
  end

  if (FY0DW01.TA5TSQIX == 0) /* No data to display*/
    FY0DM001.XXXPRCNM = "FY0D110"; /* Process name*/
    converseLib.validationFailed(21); /* No data to display*/
  end

end // end FY0D110

// Purge any temporary storage
Function FY0D111()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FY0D"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (FY0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No Error was found*/
    FY0DW01.FY0DMTSP = 0; /* Reset current page number*/
    FY0DW01.TA5TSQIX = 0; /* Reset highest page number*/

  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0D111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0DM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

end // end FY0D111

// Select set and open cursor
Function FY0D112()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  VFDOFC02.XGPCD = FY0DW01.XGPCD; /* Search key*/

  call "VFDOFC02" ("S1", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

       /* GO ON*/


  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0D112"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "FY0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/
    TA1REC.TA1TBLKE = VFDOFC02.XGPCD; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0DM001.XXXPRCNM = "FY0D112"; /* Process name*/
  end

end // end FY0D112

// Fetch next row and format
Function FY0D113()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "VFDOFC02" ("N1", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

    FY0D13A(); /* Validation check*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FY0DW01.FY0DWSWC = "Y"; /* Indicate end of file*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0D113"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "FY0DM001"; /* Map name*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      FY0DM001.XXXPRCNM = "FY0D113"; /* Process name*/
    end
  end

end // end FY0D113

// Add page to temporary storage
Function FY0D114()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FY0DW02.FY0DWLEN = 1180; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0D"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (FY0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No error was found*/
    FY0DW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    FY0DW01.FY0DWIXM = 1; /* Reset display line number*/
    set FY0DW02 empty; /* Clears temporary storage record*/
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0D114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0DM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0DM001.XXXPRCNM = "FY0D114"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end FY0D114

// Close selected set cursor
Function FY0D115()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "VFDOFC02" ("C1", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

     /* GO ON*/

  else
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0D115"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "FY0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0DM001.XXXPRCNM = "FY0D115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end FY0D115

// Format and display the map
Function FY0D120()

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No message to display*/
   || converseVar.validationMsgNum == 53)
    set FY0DM001 initial; /* Clear map output area*/
    FY0DM001.VAGen_EZEMSG = "PLEASE MAKE YOUR SELECTION(S)";
    if (FY0DW01.FY0DWADD == "Y") /* Add successful*/
      FY0DM001.VAGen_EZEMSG = "ADD COMPLETE    MAKE NEW SELECTIONS";
      FY0DW01.FY0DWADD = "N";
    end

    if (FY0DW01.FY0DWUPD == "Y") /* Update successful*/
      FY0DM001.VAGen_EZEMSG = "UPDATE COMPLETE    MAKE NEW SELECTIONS";
      FY0DW01.FY0DWUPD = "N";
    end

    if (FY0DW01.FY0DWINQ == "Y") /* Inquire successful*/
      FY0DM001.VAGen_EZEMSG = "INQUIRE COMPLETE    MAKE NEW SELECTIONS";
      FY0DW01.FY0DWINQ = "N";
    end

    FY0D121(); /* Format the selected data*/
  else
    set FY0DM001 alarm; /* Indicate sound alarm*/
  end
  if (COMMAREA.XGPCD in XGPTBL.XGPCD
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FY0DM001.XGPCD = COMMAREA.XGPCD; /* GPC Number*/
    FY0DW01.XGPCD = COMMAREA.XGPCD; /* GPC Number*/
    FY0DM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    FY0DW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    XXXPRCNM = "FY0D120"; /* Process name*/
    converseLib.validationFailed(101); /* Invalid gpc code*/
    set FY0DM001.XGPCD cursor, bold; /* Highlight error*/
  end
  FY0DW01.FY0DWLSF = "Y"; /* Sets list screen flag on*/


  FY0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (COMMAREA.CAADDFL == "Y") /* User can do adds*/
    set FY0DM001.FY0DMADD skip; /* Display add key*/
  end

  if (COMMAREA.CACHGFL == "Y") /* User can change rows*/
    set FY0DM001.FY0DMCHG skip; /* Display change key*/
  end


  converse FY0DM001 ;

  if (converseVar.eventKey is enter)
    FY0D124(); /* GPC Pop-up Window*/
  end

end // end FY0D120

// Format the selected data
Function FY0D121()

   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  FY0DW01.FY0DWCSF = "N"; /* Cursor set flag*/

  if (FY0DW01.TA5TSQIX == 0) /* No data to display*/
    set FY0DM001.XGPCD cursor; /* Set cursor top of page*/
    FY0DW01.FY0DWCSK = " "; /* Clear save key*/

     /* Next Sentence*/

  else
    if (FY0DW01.FY0DWCSK > " ") /* Something in key*/
      FY0DW01.FY0DMTSP = 1; /* Search page*/
    end

    FY0DW01.FY0DWCSF = "N"; /* Initialize cursor set flag*/
    FY0DW01.FY0DWDFL = "N"; /* Initialize save flag*/
    while (FY0DW01.FY0DWDFL == "N") /* Save save key not found*/
      FY0D122(); /* Read temp. storage page*/
      FY0D123(); /* Find save key*/
    end

    FY0DW01.FY0DWCSK = " "; /* Clear save key*/

    if (FY0DW01.FY0DMTSP != TA5REC.TA5TSQIX) /* Desired page not*/
      FY0D122(); /* Obtain temporary storage page*/
    end

    set FY0DM001.FY0DMPGL skip; /* Display "PAGE" literal*/
    set FY0DM001.FY0DMOFL skip; /* Display "OF" literal*/

    FY0DM001.FY0DMTSP = FY0DW01.FY0DMTSP; /* Current page number*/
    set FY0DM001.FY0DMTSP skip; /* Shows current page number*/
    FY0DM001.TA5TSQIX = FY0DW01.TA5TSQIX; /* Highest page number*/
    set FY0DM001.TA5TSQIX skip; /* Shows highest page number*/


    FY0DW01.FY0DWIXM = 1; /* Initialize line index*/

    while (FY0DW01.FY0DWIXM <= 14) /* Until end of lines*/

      if (FY0DW02.FY6FOCD[FY0DWIXM] > " ") /* Something in code.*/
        set FY0DM001.FY0DMSEL[FY0DWIXM] normal; /* Display select flag*/
        FY0DM001.FY6FOCD[FY0DWIXM] = FY0DW02.FY6FOCD[FY0DWIXM];
        FY0DM001.FY6FOSDS[FY0DWIXM] = FY0DW02.FY6FOSDS[FY0DWIXM];
        FY0DM001.XCTDESC[FY0DWIXM] = FY0DW02.XCTDESC[FY0DWIXM];
        FY0DM001.FY6CMGR[FY0DWIXM] = FY0DW02.FY6CMGR[FY0DWIXM];
        FY0DM001.XROPDEST[FY0DWIXM] = FY0DW02.XROPDEST[FY0DWIXM];
        FY0DM001.XXXSTAT[FY0DWIXM] = FY0DW02.XXXSTAT[FY0DWIXM];
      end
      FY0DW01.FY0DWIXM = FY0DW01.FY0DWIXM + 1; /* Increment line index*/
    end
    if (FY0DW01.FY0DWCSF == "N") /* Cursor set flag is off*/
      set FY0DM001.FY0DMSEL[1] cursor; /* Puts cursor on first line*/
    end
  end

end // end FY0D121

// Read temporary storage page
Function FY0D122()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FY0DW02.FY0DWLEN = 1180; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0D"; /* Application identification*/
  TA5REC.TA5TSQIX = FY0DW01.FY0DMTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (FY0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No error was found*/

     /* GO ON*/

  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0D122"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0DM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0DM001.XXXPRCNM = "FY0D122"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

end // end FY0D122

// LOCATE SAVE KEY
Function FY0D123()

   /* ------------------------------------------------------------*/
   /* Locate the page in which the key is greater than the*/
   /* Save Key.*/
   /* Save Key = FY0DWCSK*/
   /* ------------------------------------------------------------*/

  if (FY0DW01.FY0DWCSK == " ") /* No save key entered*/
    FY0DW01.FY0DWDFL = "Y"; /* Indicate key found*/
  else

    FY0DW01.FY0DWIXM = 1; /* Initialize index*/

    while (FY0DW01.FY0DWIXM <= 14 /* Until key is found*/
     && FY0DW01.FY0DWDFL == "N") /* or page was found*/
      if (FY0DW02.FY6FOCD[FY0DWIXM] >= FY0DW01.FY0DWCSK)
        set FY0DM001.FY0DMSEL[FY0DWIXM] cursor; /* Initial cursor*/
        FY0DW01.FY0DWCSF = "Y"; /* Turn on cursor set flag*/
        FY0DW01.FY0DWDFL = "Y"; /* Indicate page was found*/
        if (FY0DW01.FY0DWIXM == 1) /* Key not on page*/
          if (FY0DW02.FY6FOCD[FY0DWIXM] == FY0DW01.FY0DWCSK)

              /* GO ON*/

          else
            FY0DW01.FY0DWIXM = 14; /* Index to last entry*/
            FY0DW01.FY0DMTSP = FY0DW01.FY0DMTSP - 1; /* decrement page*/
          end
        else
          if (FY0DW01.FY0DWIXM > 1) /* Not first key*/
            FY0DW01.FY0DWIXM = FY0DW01.FY0DWIXM - 1; /* Decrement index*/
          end
        end
      else
        FY0DW01.FY0DWIXM = FY0DW01.FY0DWIXM + 1; /* Increment index*/
      end
    end

    if (FY0DW01.FY0DWDFL == "N") /* Save key not found*/
      if (FY0DW01.FY0DMTSP == FY0DW01.TA5TSQIX) /* Last page*/

           /* GO ON*/

      else
        FY0DW01.FY0DMTSP = FY0DW01.FY0DMTSP + 1; /* Increment page*/
      end
    end
  end

end // end FY0D123

// Check for ? by User
Function FY0D124()


   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0DM001.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0DM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
    else
      FY0DM001.XGPCD = " "; /* clear fields*/
      FY0DM001.XGPDESC = " ";
    end
    converseLib.clearScreen();
     /* restore the original map*/
  end



end // end FY0D124

// Check attention identifier
Function FY0D130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FY0DM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0DM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FY0D111(); /* Purge any temporary storage*/
      set VFDOFC02 empty; /* Clear record*/
      COMMAREA.CATOAP = FY0DM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0DM001.CAITEM; /* To application*/

      XSFY001(); /* Exit to another application*/
      VFDOFC02.XGPCD = COMMAREA.XGPCD; /* Reset load key*/
      FY0DW01.FY0DWSWR = "Y"; /* Set request for data to yes*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0DM001.XXXPRCNM = "FY0D130"; /* Process name*/
    end

    set FY0DM001.CATOAP cursor, modified, bold; /* Highlight*/
    FY0DM001.XXXPRCNM = "FY0D130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0DM001"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end
    FY0D111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0DM001.XXXPRCNM = "FY0D130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    FY0D111(); /* Purge temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0DM001.XXXPRCNM = "FY0D130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 key pressed*/
   && COMMAREA.CAADDFL == "N")     /* Not able to ADD*/
    FY0DM001.XXXPRCNM = "FY0D130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 key pressed*/
   && COMMAREA.CACHGFL == "N")     /* Not able to CHANGE*/
    FY0DM001.XXXPRCNM = "FY0D130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 key pressed*/
   && FY0DM001.XGPCD == " ")       /* Nothing on map1*/
    FY0DM001.XXXPRCNM = "FY0D130"; /* Process name*/
    converseLib.validationFailed(101); /* Must have valid GPC code*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is enter /* Enter key pressed*/
   && COMMAREA.CAINQFL == "N")      /* User cannot do inquiry*/
    FY0DM001.XXXPRCNM = "FY0D130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid attention key*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* PF14 was not pressed*/

    FY0DM001.XXXPRCNM = "FY0D130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/

  end

end // end FY0D130

// TABLE VALIDATION ROUTINE
Function FY0D13A()

  FY0DW02.FY6FOCD[FY0DWIXM] = VFDOFC02.FY6FOCD;
  FY0DW02.FY6FOSDS[FY0DWIXM] = VFDOFC02.FY6FOSDS;
  FY0DW02.FY6CMGR[FY0DWIXM] = VFDOFC02.FY6CMGR;
  FY0DW02.XROPDEST[FY0DWIXM] = VFDOFC02.XROPDEST;
  FY0DW02.XXXSTAT[FY0DWIXM] = VFDOFC02.XXXSTAT;

   /* ------------------------------------------------------------*/
               /* Get country description*/
   /* ------------------------------------------------------------*/

  if (VFDOFC02.XCTCD in XCTTBL.XCTCD) /* Country code in table*/
    FY0DW02.XCTDESC[FY0DWIXM] = XCTTBL.XCTDESC[sysVar.arrayIndex];
  else
    FY0DW02.XCTDESC[FY0DWIXM] = "* UNKNOWN *";
  end

  FY0DW01.FY0DWIXM = FY0DW01.FY0DWIXM + 1; /* Increment line*/

end // end FY0D13A

// Reset highlighted fields
Function FY0D140()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  FY0DW01.FY0DWIXM = 1; /* Initialize line index*/

  while (FY0DW01.FY0DWIXM <= 14) /* Until end of lines*/

    if (FY0DM001.FY6FOCD[FY0DWIXM] > " ") /* Line was formatted*/
      set FY0DM001.FY0DMSEL[FY0DWIXM] normal; /* Reset select flag*/
    end

    FY0DW01.FY0DWIXM = FY0DW01.FY0DWIXM + 1; /* Increment line index*/

  end

  set FY0DM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0DM001.CAITEM initialAttributes; /* Commarea application data*/

end // end FY0D140

// Verify the entered data
Function FY0D150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0DM001.CAITEM > " ") /* Application data was entered*/

    set FY0DM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0DM001.XXXPRCNM = "FY0D150"; /* Process name*/

  end

  if (converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/

      FY0D151(); /* Verify scroll request*/

    else

      FY0D152(); /* Verify any changed data*/

    end
  end

end // end FY0D150

// Verify scroll request
Function FY0D151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FY0DW01.FY0DMTSP < 2)       /* and no previous pages*/
    FY0DM001.XXXPRCNM = "FY0D151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FY0DW01.FY0DMTSP >= FY0DW01.TA5TSQIX) /* and no more pages*/
    FY0DM001.XXXPRCNM = "FY0D151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  FY0DW01.FY0DWIXM = 14; /* Initialize line index*/

  while (FY0DW01.FY0DWIXM > 0) /* Until end of lines*/
    if (FY0DM001.FY0DMSEL[FY0DWIXM] != FY0DW02.FY0DMSEL[FY0DWIXM])
      set FY0DM001.FY0DMSEL[FY0DWIXM] cursor, modified, bold; /* Highlight*/
      FY0DM001.XXXPRCNM = "FY0D151"; /* Process name*/
      converseLib.validationFailed(14); /* A line may not be selected*/
    end
    FY0DW01.FY0DWIXM = FY0DW01.FY0DWIXM - 1; /* Decrement line count*/
  end

end // end FY0D151

// Verify any changed data
Function FY0D152()

   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If enter key is pressed*/
    if (FY0DM001.XGPCD == FY0DW01.XGPCD) /* Existing GPC code same*/
      if (FY0DM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
        FY0DW01.XGPCD = FY0DM001.XGPCD;
        FY0DW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
        FY0DM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
        FY0DM001.XGPCD = FY0DW01.XGPCD;
        FY0DW01.FY0DWSWR = "Y"; /* Turn on request for data*/
      end
    else
      if (FY0DM001.XGPCD != FY0DW01.XGPCD) /* If GPC different*/
        if (FY0DM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
         && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
          COMMAREA.XGPCD = FY0DM001.XGPCD;
          set FY0DM001 initial; /* Clear screen*/
          FY0DM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
          FY0DW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
          FY0DM001.XGPCD = COMMAREA.XGPCD;
          FY0DW01.FY0DWSWR = "Y"; /* Turn on request for data*/
          FY0DW01.FY0DWCSK = " "; /* Clear save key*/
        else
          COMMAREA.XGPCD = FY0DM001.XGPCD;
          set FY0DM001 initial; /* Clear screen*/
          set FY0DM001.XGPCD cursor, modified, bold; /* Highlight GPC code*/
          FY0DW01.XGPCD = " ";
          FY0DW01.XGPDESC = " "; /* Description*/
          FY0DM001.XXXPRCNM = "FY0D152"; /* Process name*/
          converseLib.validationFailed(101); /* Must have valid GPC code*/
        end
      else
        FY0DM001.XGPDESC = " "; /* Description*/
        set FY0DM001.XGPCD cursor, modified, bold; /* Highlight GPC code*/
        FY0DW01.XGPCD = " ";
        FY0DW01.XGPDESC = " "; /* Description*/
        FY0DM001.XXXPRCNM = "FY0D152"; /* Process name*/
      end
    end
  end

  if (converseVar.eventKey is pf13) /* PF13 key pressed (ADD)*/

     /* NEXT SENTENCE*/

  end
  if (converseVar.eventKey is pf14) /* PF14 key pressed (CHANGE)*/
    FY0D153(); /* Selection check loop*/
  end
  if (converseVar.eventKey is pf15) /* PF15 key pressed (DELETE)*/
    FY0D153(); /* Selection check loop*/
  end
  if (converseVar.eventKey is enter) /* Enter key pressed (INQUIRE)*/
    FY0D153(); /* Selection check loop*/
  end

end // end FY0D152

// Selection Check Loop
Function FY0D153()

   /* ------------------------------------------------------------*/
             /* See if a 'S'election was made*/
   /* ------------------------------------------------------------*/

  if (FY0DM001.XGPCD == FY0DW01.XGPCD) /* Same GPC code*/
    FY0DW01.FY0DWIXM = 14; /* Initialize line index*/

    while (FY0DW01.FY0DWIXM > 0) /* Until end of lines*/
      if (FY0DM001.FY0DMSEL[FY0DWIXM] == " " /* If selection blank*/
       || FY0DM001.FY0DMSEL[FY0DWIXM] == "S") /* (S)election made*/

         /* next sentence*/

      else
        set FY0DM001.FY0DMSEL[FY0DWIXM] cursor, modified, bold;
                                   /* Highlight*/
        FY0DM001.XXXPRCNM = "FY0D153"; /* Process name*/
        converseLib.validationFailed(13); /* Only a 'S' is allowed*/
      end
      FY0DW01.FY0DWIXM = FY0DW01.FY0DWIXM - 1; /* Decrement line number*/
    end
    if (converseVar.validationMsgNum == 0) /* No errors*/
      if ("S" in FY0DM001.FY0DMSEL) /* There is a S*/

         /* GO ON*/

      else
        FY0DM001.XXXPRCNM = "FY0D153"; /* Process name*/
        converseLib.validationFailed(53); /* You must make a selection*/
      end
    end
  end

end // end FY0D153

// Process valid input request
Function FY0D160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (FY0DM001.XGPCD == FY0DW01.XGPCD /* GPC codes match*/
   && converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7) /* Scroll back requested*/
      FY0DW01.FY0DMTSP = FY0DW01.FY0DMTSP - 1; /* Decrement page number*/
    end

    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      FY0DW01.FY0DMTSP = FY0DW01.FY0DMTSP + 1; /* Increment page number*/
    end

    if (converseVar.eventKey is enter) /* Enter key pressed*/
      FY0DW01.FY0DWMAP = "2"; /* Map 2 to be displayed*/
      FY0DW01.FY0DWFNC = "I"; /* Function code is inquire*/
    else
      if (converseVar.eventKey is pf13) /* PF13 key pressed (ADD)*/
        FY0DW01.FY0DWMAP = "2"; /* Map 2 to be displayed*/
        FY0DW01.FY0DWFNC = "A"; /* Function code is add*/
      else
        if (converseVar.eventKey is pf14) /* PF14 key pressed (CHANGE)*/
          FY0DW01.FY0DWMAP = "2"; /* Map 2 to be displayed*/
          FY0DW01.FY0DWFNC = "C"; /* Function code is change*/
        else
          if (converseVar.eventKey is pf15) /* PF15 key pressed (DELETE)*/
            FY0DW01.FY0DWMAP = "2"; /* Map 2 to be displayed*/
            FY0DW01.FY0DWFNC = "D"; /* Function code is delete*/

          end
        end
      end
    end
  else
    FY0DW01.XGPCD = FY0DM001.XGPCD;
  end

end // end FY0D160

// MAP NUMBER TWO: ADD
Function FY0D200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to Add a record.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/
   /* ------------------------------------------------------------*/

  FY0D210(); /* Format and display the map*/

  FY0D220(); /* Check attention identifier*/

  FY0D230(); /* Reset fields to normal intensity*/

  FY0D240(); /* Verify the entered data*/

  FY0D250(); /* Process valid input request*/

end // end FY0D200

// FORMAT AND DISPLAY THE MAP
Function FY0D210()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No messages*/
    set FY0DM002 initial; /* Clear map output area*/
    VAGen_EZEMSG = "ENTER YOUR NEW LIAISON/FIELD OFFICE";
  else
    set FY0DM002 alarm; /* Indicate sound alarm*/
  end
  if (FY0DW01.XGPCD > " ") /* If something in GPC code*/
    if (FY0DW01.XGPCD in XGPTBL.XGPCD)
      FY0DM002.XGPCD = FY0DW01.XGPCD; /* Move GPC code to map2*/
      FY0DW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      FY0DM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    else
      set FY0DM002.XGPCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(101); /* Must have valid gpc code*/
      FY0DM002.XXXPRCNM = "FY0D210"; /* Process name*/
    end
  else
    set FY0DM002.XGPCD cursor, modified; /* Place cursor at gpc field*/
    FY0DM002.VAGen_EZEMSG = "ENTER GPC CODE AND NEW LIAISON/FIELD OFFICE";
  end


  FY0DM002.XXXSTAT = "A"; /* Current status*/
  FY0DM002.FY0DMSTD = "ACTIVE"; /* Current status*/
  set FY0DM002.XXXSTAT skip; /* Protect status*/
  FY0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0DM002.FY0DMFNC = "ADD"; /* Move ADD literial to map 2*/

  converse FY0DM002 ;

end // end FY0D210

// Check attention identifier
Function FY0D220()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FY0DM002 initial; /* Clear the map fields*/
    FY0DW01.FY0DWSWR = "N"; /* Request for data eq yes*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0DM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0DM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0DM002.CAITEM; /* To application*/
      FY0D111(); /* Purge any temporary storage*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0DM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0DM002.XXXPRCNM = "FY0D230"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0DM002"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0D111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0DM002.XXXPRCNM = "FY0D230"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0DW01.FY0DWMAP = "1"; /* Map flag eq 1*/
    FY0DW01.FY0DWSWR = "Y"; /* Request for data*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0DW01.FY0DWFNC = " "; /* Set function code to spaces*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0D111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0DM002.XXXPRCNM = "FY0D230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

end // end FY0D220

// Reset highlighted fields
Function FY0D230()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0DM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0DM002.XGPDESC initialAttributes;
  set FY0DM002.XGPCD initialAttributes;
  set FY0DM002.FY6FOCD initialAttributes; /* Map fields*/
  set FY0DM002.FY6FODS initialAttributes; /* Map fields*/
  set FY0DM002.FY6FOSDS initialAttributes; /* Map fields*/
  set FY0DM002.FY6FOABR initialAttributes;
  set FY0DM002.XXX-ADDR1 initialAttributes;
  set FY0DM002.XXX-ADDR2 initialAttributes;
  set FY0DM002.XXX-ADDR3 initialAttributes;
  set FY0DM002.XXXCITY initialAttributes;
  set FY0DM002.XSTCD initialAttributes;
  set FY0DM002.XSTDESC initialAttributes;
  set FY0DM002.XXXZIP initialAttributes;
  set FY0DM002.XCTCD initialAttributes;
  set FY0DM002.XCTDESC initialAttributes;
  set FY0DM002.FY6FOPHN initialAttributes;
  set FY0DM002.FY6FOFAX initialAttributes;
  set FY0DM002.FY6FOTLX initialAttributes;
  set FY0DM002.FY6CMGR initialAttributes;
  set FY0DM002.FY6PMGR initialAttributes;
  set FY0DM002.FY0DMSTD initialAttributes;
  set FY0DM002.XXXSTAT initialAttributes;
  set FY0DM002.XROPDEST initialAttributes;

   /* ------------------------------------------------------------*/
    /* IF NO LISTS WERE REQUESTED. RETURN TO PREVIOUS PROCESS*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/
    FY0D231();
  end

end // end FY0D230

// Check for ? by User
Function FY0D231()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0DM002.XGPCD == "?" /* if any ? entered*/
   || FY0DM002.XSTCD == "?" 
   || FY0DM002.XCTCD == "?" 
   || FY0DM002.XROPDEST == "?")

       /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0DM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0DM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      set FY0DM002.XGPCD cursor;
    else
      FY0DM002.XGPCD = " "; /* clear fields*/
      FY0DM002.XGPDESC = " ";
      set FY0DM002.XGPCD cursor;
    end
  end


  if (FY0DM002.XSTCD == "?") /* if ? in state code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                 STATE    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXST01(); /* perform state code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XSTCD = XSTTBL.XSTCD[XX0XWPIX]; /* move code*/
      FY0DM002.XSTDESC = XSTTBL.XSTDESC[XX0XWPIX]; /* move name*/
      set FY0DM002.XSTCD cursor;
    else
      FY0DM002.XSTCD = " "; /* clear fields*/
      FY0DM002.XSTDESC = " ";
      set FY0DM002.XSTCD cursor;
    end
  end

  if (FY0DM002.XCTCD == "?") /* if ? in country code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                COUNTRY   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXCT01(); /* perform country code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      FY0DM002.XCTDESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move name*/
      set FY0DM002.XCTCD cursor;
    else
      FY0DM002.XCTCD = " "; /* clear fields*/
      FY0DM002.XCTDESC = " ";
      set FY0DM002.XCTCD cursor;
    end
  end

  if (FY0DM002.XROPDEST == "?") /* if ? in country code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "         REMOTE PRINTER   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXRO02(); /* perform remote printer window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XROPDEST = XROTBL.XROPDEST[XX0XWPIX]; /* move code*/
      set FY0DM002.XROPDEST cursor;
    else
      FY0DM002.XROPDEST = " "; /* clear fields*/
      set FY0DM002.XROPDEST cursor;
    end
  end


  converseLib.clearScreen();
   /* restore the original map*/

  converseLib.validationFailed(93); /* Press enter to process*/

  exit stack; /* Exit to display map*/

end // end FY0D231

// Verify the entered data
Function FY0D240()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.CAITEM > " ") /* Application data was entered*/
    set FY0DM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0DM002.XXXPRCNM = "FY0D240"; /* Process name*/
  end

  FY0D241(); /* Check entered data*/

end // end FY0D240

// VALIDATE INPUT DATA
Function FY0D241()

   /* -----------------------------------------------------------*/
    /* Validate the entered data.*/
    /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* Get remote printer from code entered, if active*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XROPDEST > " ") /* Rmt printer entered*/
    if (FY0DM002.XROPDEST in XROTBL.XROPDEST /* Check printer code*/
     && XROTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

    else
      set FY0DM002.XROPDEST cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(15); /* Rmt printer is missing or invalid*/
      FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
    end
  else
    if (FY0DM002.XGPCD == "03") /* Printer code is must for '03'*/
      set FY0DM002.XROPDEST cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(15); /* Rmt printer is missing or invalid*/
      FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
    end
  end

   /* ------------------------------------------------------------*/
     /* Get country from code entered, if active*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XCTCD > " " /* Something in country code field*/
   && FY0DM002.XCTCD in XCTTBL.XCTCD) /* Check country content table*/
    if (XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      FY0DM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country name*/
    else
      set FY0DM002.XCTCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(25); /* Country is missing or invalid*/
      FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
      FY0DM002.XCTDESC = " "; /* Clears description*/
    end
  else
    set FY0DM002.XCTCD cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(25); /* Country is missing or invalid*/
    FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
    FY0DM002.XCTDESC = " "; /* Clears description*/
  end

   /* ------------------------------------------------------------*/
     /* Get state from code entered, if active*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XCTCD == "USA") /* If the country is the United States*/
    if (FY0DM002.XSTCD > " " /* Something in state code field*/
     && FY0DM002.XSTCD in XSTTBL.XSTCD) /* Check state content table*/
      if (XSTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        FY0DM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex]; /* State name*/
      else
        set FY0DM002.XSTCD cursor, modified, bold; /* Highlight error*/
        converseLib.validationFailed(24); /* State is missing or invalid*/
        FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
        FY0DM002.XSTDESC = " "; /* Clears description*/
      end
    else
      set FY0DM002.XSTCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(24); /* State is missing or invalid*/
      FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
      FY0DM002.XSTDESC = " "; /* Clears description*/
    end
  end

   /* ------------------------------------------------------------*/
     /* Liaison/Field Office Abbrv.*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.FY6FOABR == " ") /* Nothing in abbrv. field*/
    set FY0DM002.FY6FOABR cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(22); /* State is missing*/
    FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
     /* Liaison/Field Office Short name*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.FY6FOSDS == " ") /* Nothing in short field*/
    set FY0DM002.FY6FOSDS cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(20); /* State is missing*/
    FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
     /* Liaison/Field Office name*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.FY6FODS == " ") /* Nothing in name field*/
    set FY0DM002.FY6FODS cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(19); /* Name is missing*/
    FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
     /* Liaison/Field Office code*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.FY6FOCD == " ") /* Nothing in code field*/
    set FY0DM002.FY6FOCD cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(18); /* Code is missing*/
    FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
     /* Get general product code entered if active*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XGPCD > " " /* Something in GPC code field*/
   && FY0DM002.XGPCD in XGPTBL.XGPCD) /* Check GPC table*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      FY0DM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Desc.*/
      FY0DW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Desc.*/
      COMMAREA.XGPCD = FY0DM002.XGPCD;
      FY0DW01.XGPCD = FY0DM002.XGPCD;
                                  /* GPC code*/
    else
      set FY0DM002.XGPCD cursor, modified, bold; /* Highlight error*/
      FY0DW01.XGPCD = " ";
      FY0DW01.XGPDESC = " ";
      converseLib.validationFailed(101); /* Must have valid GPC code*/
      FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
    end
  else
    set FY0DM002.XGPCD cursor, modified, bold; /* Highlight error*/
    FY0DW01.XGPCD = " ";
    FY0DW01.XGPDESC = " ";
    converseLib.validationFailed(101); /* Must have valid GPC code*/
    FY0DM002.XXXPRCNM = "FY0D241"; /* Process name*/
  end

end // end FY0D241

// Process valid input request
Function FY0D250()

   /* ------------------------------------------------------------*/
   /* Process any added data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No Messages*/
                                  /* Move fields to record*/
    VFDOFC02.XGPCD = FY0DM002.XGPCD; /* GPC code*/
    VFDOFC02.FY6FOCD = FY0DM002.FY6FOCD; /* Liaison/Field office code*/
    VFDOFC02.FY6FODS = FY0DM002.FY6FODS; /* description*/
    VFDOFC02.FY6FOSDS = FY0DM002.FY6FOSDS; /* short description*/
    VFDOFC02.FY6FOABR = FY0DM002.FY6FOABR; /* abbreviation*/
    VFDOFC02.XXXCITY = FY0DM002.XXXCITY; /* City*/
    VFDOFC02.XXX-ADDR1 = FY0DM002.XXX-ADDR1; /* Address*/
    VFDOFC02.XXX-ADDR2 = FY0DM002.XXX-ADDR2;
    VFDOFC02.XXX-ADDR3 = FY0DM002.XXX-ADDR3;
    VFDOFC02.XSTCD = FY0DM002.XSTCD; /* State code*/
    VFDOFC02.XXXZIP = FY0DM002.XXXZIP; /* Zip code*/
    VFDOFC02.XCTCD = FY0DM002.XCTCD; /* Country code*/
    VFDOFC02.FY6FOPHN = FY0DM002.FY6FOPHN; /* Phone number*/
    VFDOFC02.FY6FOFAX = FY0DM002.FY6FOFAX; /* Fax number*/
    VFDOFC02.FY6FOTLX = FY0DM002.FY6FOTLX; /* Telex number*/
    VFDOFC02.FY6FOSPD = FY0DM002.FY6FOSPD; /* Speed-dial number*/
    VFDOFC02.FY6CMGR = FY0DM002.FY6CMGR; /* Country manager*/
    VFDOFC02.FY6PMGR = FY0DM002.FY6PMGR; /* Production manager*/
    VFDOFC02.XXXSTAT = FY0DM002.XXXSTAT; /* Status*/
    VFDOFC02.XROPDEST = FY0DM002.XROPDEST; /* Remote printer*/

    FY0D251(); /* Check record*/

    if (SQLCA.VAGen_SQLCODE == 100) /* If row does not exists*/
      FY0D252(); /* Add new row*/
      FY0DW01.FY0DWCSK = FY0DM002.FY6FOCD; /* Save key*/
      set FY0DM002 initial; /* Clear screen*/
      FY0DW01.FY0DWADD = "Y"; /* ADD SUCCESSFUL*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* If row does exists*/
        converseLib.validationFailed(45); /* Already exists*/
        FY0DM002.XXXPRCNM = "FY0D250"; /* Process name*/
        FY0DW01.FY0DWSWR = "Y"; /* Request for data eq yes*/
        set FY0DM002.FY6FOCD cursor, modified, bold; /* highlight error*/
      end
    end
  end

end // end FY0D250

// CHECK TABLE
Function FY0D251()

   /* ------------------------------------------------------------*/
   /* This module selects a table row.*/

     /* This alternate select module is designed to return a*/
     /* valid error code whenever  there are overlaps in*/
     /* the data base.  Therefore, if any number of rows are*/
     /* returned from the database a valid error has occurred.*/

   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "VFDOFC02" ("S ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 100 /* Valid return codes*/
   || SQLCA.VAGen_SQLCODE == 0) 

       /* GO ON*/


  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0D251"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "FY0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0DM002.XXXPRCNM = "FY0D251"; /* Process name*/
  end

end // end FY0D251

// ADD NEW ROW
Function FY0D252()

   /* ------------------------------------------------------------*/
   /* This module adds a trade restriction table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  FY0DW01.FY0DWCSK = FY0DM002.FY6FOCD; /* Save key*/
  VFDOFC02.XXXSTAT = "A";

  XX0XS01();

  VFDOFC02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VFDOFC02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VFDOFC02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VFDOFC02.ZZZCHGCT = 0; /* Change count*/

  call "VFDOFC02" ("A ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Return code OK*/
   || SQLCA.VAGen_SQLCODE == 100) /* Return code OK*/

     /* GO ON*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0D252"; /* Process name*/
    TA1REC.TA1LOC = "ADD A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "FY0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0DM002.XXXPRCNM = "FY0D252"; /* Process name*/
  end

end // end FY0D252

// List Screen: Inquire
Function FY0D500()

   /* ------------------------------------------------------------*/
   /* This is the main process used for the INQUIRY MAP.*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  FY0D510(); /* Select a unique row*/

  FY0D520(); /* Format and display the map*/

  FY0D530(); /* Check attention identifier*/

  FY0D540(); /* Reset fields to normal intensity*/

  FY0D550(); /* Verify the entered data*/

  FY0D560(); /* Process valid input request*/

end // end FY0D500

// SELECT UNIQUE ROW
Function FY0D510()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  VFDOFC02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
  VFDOFC02.FY6FOCD = FY0DW02.FY6FOCD[FY0DWIXM]; /* Liaison/Fld code*/

  call "VFDOFC02" ("S ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
   || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/


     /* next sentence*/


  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0D510"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
    TA1REC.TA1MAP = "FY0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/
    TA1REC.TA1TBLKE = VFDOFC02.VFDOFC02-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0DM002.XXXPRCNM = "FY0D510"; /* Process name*/
  end

end // end FY0D510

// FORMAT AND DISPLAY MAP
Function FY0D520()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    set FY0DM002 initial; /* Clear map output area*/
    FY0DM002.VAGen_EZEMSG = "PRESS ENTER TO CONTINUE";

    FY0D521(); /* Format data for map*/

    set FY0DM002.CATOAP cursor;
    set FY0DM002.XGPCD skip; /* PROTECT  FIELDS*/
    set FY0DM002.XGPDESC skip;
    set FY0DM002.FY6FOCD protect;
    set FY0DM002.FY6FODS protect;
    set FY0DM002.FY6FOSDS protect;
    set FY0DM002.FY6FOABR protect;
    set FY0DM002.XXX-ADDR1 protect;
    set FY0DM002.XXX-ADDR2 protect;
    set FY0DM002.XXX-ADDR3 protect;
    set FY0DM002.XXXCITY protect;
    set FY0DM002.XSTCD protect;
    set FY0DM002.XSTDESC protect;
    set FY0DM002.XXXZIP protect;
    set FY0DM002.XCTCD protect;
    set FY0DM002.XCTDESC protect;
    set FY0DM002.FY6FOPHN protect;
    set FY0DM002.FY6FOSPD protect;
    set FY0DM002.FY6FOFAX protect;
    set FY0DM002.FY6FOTLX protect;
    set FY0DM002.FY6CMGR protect;
    set FY0DM002.FY6PMGR protect;
    set FY0DM002.XROPDEST protect;
    set FY0DM002.FY0DMSTD skip;
  else
    set FY0DM002 alarm; /* Indicate sound alarm*/
  end

  if (FY0DW01.XGPCD > " ") /* If something in GPC code*/
    FY0DM002.XGPCD = FY0DW01.XGPCD; /* Move GPC code to map2*/
    FY0DM002.XGPDESC = FY0DW01.XGPDESC;
  else
    set FY0DM002.XGPCD cursor, modified; /* Place cursor at gpc field*/
    FY0DM002.VAGen_EZEMSG = "ENTER GPC CODE";
    set FY0DM002 alarm; /* Indicate sound alarm*/
  end

  set FY0DM002.XXXSTAT skip; /* Protect status*/
  FY0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0DM002.FY0DMFNC = "INQUIRY";
                                   /* Move INQUIRY literial to map 2*/

  converse FY0DM002 ;
end // end FY0D520

// OBTAIN DATA TO DISPLAY
Function FY0D521()

   /* ------------------------------------------------------------*/
          /* MOVE SELECTED LINES TO MAP*/

   /* ------------------------------------------------------------*/

  FY0DM002.FY6FOCD = VFDOFC02.FY6FOCD; /* Liaison/Field office code*/
  FY0DM002.FY6FODS = VFDOFC02.FY6FODS; /* Description*/
  FY0DM002.FY6FOSDS = VFDOFC02.FY6FOSDS; /* Short description*/
  FY0DM002.FY6FOABR = VFDOFC02.FY6FOABR; /* Abbreviation*/
  FY0DM002.XXXCITY = VFDOFC02.XXXCITY; /* City*/
  FY0DM002.XXX-ADDR1 = VFDOFC02.XXX-ADDR1; /* Address*/
  FY0DM002.XXX-ADDR2 = VFDOFC02.XXX-ADDR2;
  FY0DM002.XXX-ADDR3 = VFDOFC02.XXX-ADDR3;
  FY0DM002.XSTCD = VFDOFC02.XSTCD; /* State code*/
  FY0DM002.XXXZIP = VFDOFC02.XXXZIP; /* Zip code*/
  FY0DM002.XCTCD = VFDOFC02.XCTCD; /* Country code*/
  FY0DM002.FY6FOPHN = VFDOFC02.FY6FOPHN; /* Phone number*/
  FY0DM002.FY6FOFAX = VFDOFC02.FY6FOFAX; /* Fax number*/
  FY0DM002.FY6FOTLX = VFDOFC02.FY6FOTLX; /* Telex number*/
  FY0DM002.FY6FOSPD = VFDOFC02.FY6FOSPD; /* Speed-dial number*/
  FY0DM002.FY6CMGR = VFDOFC02.FY6CMGR; /* Country manager*/
  FY0DM002.FY6PMGR = VFDOFC02.FY6PMGR; /* Production manager*/
  FY0DM002.XXXSTAT = VFDOFC02.XXXSTAT; /* Status*/
  FY0DM002.XROPDEST = VFDOFC02.XROPDEST; /* Remote printer*/

  if (VFDOFC02.XXXSTAT == "A")
    FY0DM002.FY0DMSTD = "ACTIVE";
  else
    if (VFDOFC02.XXXSTAT == "I")
      FY0DM002.FY0DMSTD = "INACTIVE";
    else
      if (VFDOFC02.XXXSTAT == " ")
        FY0DM002.FY0DMSTD = " ";
      else
        FY0DM002.FY0DMSTD = "UNKNOWN";
      end
    end
  end

end // end FY0D521

// CHECK ATTENTION IDENTIFIRES
Function FY0D530()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FY0DM002 initial; /* Clears map 2*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0DM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0DM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FY0DM002.CAITEM; /* Application data*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0DM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0DM002.XXXPRCNM = "FY0D330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0DW01.FY0DWMAP = "1"; /* Move to map 1*/
    FY0DW01.FY0DWSWR = "Y"; /* Request for data is yes*/
    FY0DW01.FY0DWFNC = " "; /* Clear function flag*/
    FY0DW01.FY0DWCSK = FY0DM002.FY6FOCD; /* Save key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "FY0DM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    FY0D111(); /* Purge temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0DM002.XXXPRCNM = "FY0D330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0D111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0DM002.XXXPRCNM = "FY0D230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

end // end FY0D530

// RESET HIGHLIGHED FIELDS
Function FY0D540()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0DM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0DM002.XGPDESC initialAttributes;
  set FY0DM002.XGPCD initialAttributes;

end // end FY0D540

// VERIFY THE ENTERED DATA
Function FY0D550()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.CAITEM > " ") /* Application data was entered*/
    set FY0DM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0DM002.XXXPRCNM = "FY0D450"; /* Process name*/
  end

end // end FY0D550

// PROCESS VALID INPUT REQUEST
Function FY0D560()

   /* ------------------------------------------------------------*/
               /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No messages*/
    FY0DW01.FY0DWCSK = FY0DM002.FY6FOCD; /* Save key*/
    FY0DW01.FY0DWINQ = "Y"; /* Inquire successful*/
    FY0DM001.FY0DMSEL[FY0DWIXM] = " ";
    set VFDOFC02 empty;
  end

end // end FY0D560

// Fast Path Inquiry: Map2
Function FY0D600()

   /* ------------------------------------------------------------*/
   /* This is the main process used to Inquire on a record.  It*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/
   /* ------------------------------------------------------------*/

  FY0D610(); /* Format and display the map*/

  FY0D620(); /* Check attention identifier*/

  FY0D630(); /* Reset fields to normal intensity*/

  FY0D640(); /* Verify the entered data*/

  if (FY0DW01.FY0DWSWR == "Y")
    FY0D650(); /* Process valid request*/
  end

end // end FY0D600

// FORMAT AND DISPLAY THE MAP
Function FY0D610()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    set FY0DM002 initial; /* Clear map output area*/
    FY0DM002.VAGen_EZEMSG = "ENTER LIAISON/FIELD OFFICE CODE";
    set FY0DM002.FY6FOCD cursor; /* Place cursor*/
    FY0D611(); /* Format data*/
  else
    set FY0DM002 alarm; /* Indicate sound alarm*/
  end
  if (FY0DW01.XGPCD > " ")
    FY0DM002.XGPCD = FY0DW01.XGPCD; /* Move GPC code to map2*/
    FY0DM002.XGPDESC = FY0DW01.XGPDESC;
  else
    FY0DM002.VAGen_EZEMSG = "ENTER GPC AND LIAISON/FIELD OFFICE CODES";
    set FY0DM002.XGPCD cursor; /* Set cursor*/
  end


  set FY0DM002.XGPDESC initialAttributes;
  set FY0DM002.FY6FODS protect;
  set FY0DM002.FY6FOSDS protect;
  set FY0DM002.FY6FOABR protect;
  set FY0DM002.XXX-ADDR1 protect;
  set FY0DM002.XXX-ADDR2 protect;
  set FY0DM002.XXX-ADDR3 protect;
  set FY0DM002.XXXCITY protect;
  set FY0DM002.XSTCD protect;
  set FY0DM002.XSTDESC protect;
  set FY0DM002.XXXZIP protect;
  set FY0DM002.XCTCD protect;
  set FY0DM002.XCTDESC protect;
  set FY0DM002.FY6FOPHN protect;
  set FY0DM002.FY6FOSPD protect;
  set FY0DM002.FY6FOFAX protect;
  set FY0DM002.FY6FOTLX protect;
  set FY0DM002.FY6CMGR protect;
  set FY0DM002.FY6PMGR protect;
  set FY0DM002.XROPDEST skip;
  set FY0DM002.FY0DMSTD skip;
  set FY0DM002.XXXSTAT skip;

  FY0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0DM002.FY0DMFNC = "INQUIRY";
                                   /* Move INQUIRY literial to map 2*/

  converse FY0DM002 ;

  if (converseVar.eventKey is enter)
    FY0D612(); /* GPC Pop-up Window*/
  end

end // end FY0D610

// Format map data
Function FY0D611()

   /* ------------------------------------------------------------*/
   /* MOVE SELECTED LINES TO MAP*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

    FY0DM002.FY6FOCD = VFDOFC02.FY6FOCD; /* Liaison  Description*/
    FY0DM002.FY6FODS = VFDOFC02.FY6FODS; /* Description*/
    FY0DM002.FY6FOSDS = VFDOFC02.FY6FOSDS; /* Short description*/
    FY0DM002.FY6FOABR = VFDOFC02.FY6FOABR; /* Abbreviation*/
    FY0DM002.XXXCITY = VFDOFC02.XXXCITY; /* City*/
    FY0DM002.XXX-ADDR1 = VFDOFC02.XXX-ADDR1; /* Address*/
    FY0DM002.XXX-ADDR2 = VFDOFC02.XXX-ADDR2;
    FY0DM002.XXX-ADDR3 = VFDOFC02.XXX-ADDR3;
    FY0DM002.XSTCD = VFDOFC02.XSTCD; /* State code*/
    FY0DM002.XXXZIP = VFDOFC02.XXXZIP; /* Zip code*/
    FY0DM002.XCTCD = VFDOFC02.XCTCD; /* Country code*/
    FY0DM002.FY6FOPHN = VFDOFC02.FY6FOPHN; /* Phone number*/
    FY0DM002.FY6FOFAX = VFDOFC02.FY6FOFAX; /* Fax number*/
    FY0DM002.FY6FOTLX = VFDOFC02.FY6FOTLX; /* Telex number*/
    FY0DM002.FY6FOSPD = VFDOFC02.FY6FOSPD; /* Speed-dial number*/
    FY0DM002.FY6CMGR = VFDOFC02.FY6CMGR; /* Country manager*/
    FY0DM002.FY6PMGR = VFDOFC02.FY6PMGR; /* Production manager*/
    FY0DM002.XXXSTAT = VFDOFC02.XXXSTAT; /* Status*/
    FY0DM002.XROPDEST = VFDOFC02.XROPDEST; /* Remote printer*/

    FY0DW01.FY0DWINQ = "Y"; /* Inquire successful*/

    if (VFDOFC02.XXXSTAT == "A")
      FY0DM002.FY0DMSTD = "ACTIVE";
    else
      if (VFDOFC02.XXXSTAT == "I")
        FY0DM002.FY0DMSTD = "INACTIVE";
      else
        if (VFDOFC02.XXXSTAT == " ")
          FY0DM002.FY0DMSTD = " ";
        else
          FY0DM002.FY0DMSTD = "UNKNOWN";
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set FY0DM002 initial; /* Clear map*/
      converseLib.validationFailed(21); /* No data found to display*/
      FY0DM002.XXXPRCNM = "FY0D611"; /* Process name*/
      FY0DM002.FY6FOCD = VFDOFC02.FY6FOCD;
      set FY0DM002.FY6FOCD cursor, bold; /* Highlight*/
    end
  end

  set VFDOFC02 empty; /* Clear record*/

end // end FY0D611

// Check for ? by User
Function FY0D612()


   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0DM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0DM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
    else
      FY0DM002.XGPCD = " "; /* clear fields*/
      FY0DM002.XGPDESC = " ";
    end
    converseLib.clearScreen();
     /* restore the original map*/
  end



end // end FY0D612

// Check attention identifier
Function FY0D620()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FY0DM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0DM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0DM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0DM002.CAITEM; /* To application*/
      FY0D111(); /* Purge any temporary storage*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0DM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0DM002.XXXPRCNM = "FY0D620"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0DM002"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0D111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0DM002.XXXPRCNM = "FY0D620"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0DW01.FY0DWMAP = "1"; /* Map flag eq 1*/
    FY0DW01.FY0DWSWR = "Y"; /* Request for data*/
    FY0DW01.FY0DWFNC = " "; /* Clear function code*/
    FY0DW01.FY0DWCSK = FY0DM002.FY6FOCD; /* save key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0D111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

        /* GO ON*/

  else
    FY0DM002.XXXPRCNM = "FY0D620"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

end // end FY0D620

// Reset highlighted fields
Function FY0D630()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0DM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0DM002.XGPDESC initialAttributes;
  set FY0DM002.XGPCD initialAttributes;
  set FY0DM002.FY6FOCD initialAttributes; /* Map fields*/
  set FY0DM002.FY6FODS initialAttributes; /* Map fields*/
  set FY0DM002.FY6FOSDS initialAttributes; /* Map fields*/
  set FY0DM002.FY6FOABR initialAttributes;
  set FY0DM002.XXX-ADDR1 initialAttributes;
  set FY0DM002.XXX-ADDR2 initialAttributes;
  set FY0DM002.XXX-ADDR3 initialAttributes;
  set FY0DM002.XXXCITY initialAttributes;
  set FY0DM002.XSTCD initialAttributes;
  set FY0DM002.XSTDESC initialAttributes;
  set FY0DM002.XXXZIP initialAttributes;
  set FY0DM002.XCTCD initialAttributes;
  set FY0DM002.XCTDESC initialAttributes;
  set FY0DM002.FY6FOPHN initialAttributes;
  set FY0DM002.FY6FOFAX initialAttributes;
  set FY0DM002.FY6FOTLX initialAttributes;
  set FY0DM002.FY6CMGR initialAttributes;
  set FY0DM002.FY6PMGR initialAttributes;
  set FY0DM002.FY0DMSTD initialAttributes;
  set FY0DM002.XXXSTAT initialAttributes;
  set FY0DM002.XROPDEST initialAttributes;

end // end FY0D630

// Verify the entered data
Function FY0D640()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.CAITEM > " ") /* Application data was entered*/
    set FY0DM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0DM002.XXXPRCNM = "FY0D640"; /* Process name*/
  end

  if (converseVar.validationMsgNum == 0) /* No messages*/
    FY0D641(); /* Process valid input*/
  end

end // end FY0D640

// VALIDATE INPUT DATA
Function FY0D641()

   /* -----------------------------------------------------------*/
    /* Validate the entered data.*/
    /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* Liaison/Field Office code*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.FY6FOCD == " ") /* Nothing in code field*/
    set FY0DM002.FY6FOCD cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(18); /* Code is missing*/
    FY0DM002.XXXPRCNM = "FY0D641"; /* Process name*/
  else
    FY0DW01.FY0DWSWR = "Y"; /* Request for data eq yes*/
    FY0DW01.FY0DWCSK = FY0DM002.FY6FOCD; /* Save key*/
  end

   /* ------------------------------------------------------------*/
     /* Get general product code entered if active*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XGPCD > " " /* Something in GPC code field*/
   && FY0DM002.XGPCD in XGPTBL.XGPCD) /* Check GPC table*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      FY0DW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      FY0DW01.XGPCD = FY0DM002.XGPCD;
      COMMAREA.XGPCD = FY0DM002.XGPCD;
                                           /* GPC description*/
    else
      FY0DW01.XGPCD = FY0DM002.XGPCD;
      set FY0DM002 initial;
      set FY0DM002.XGPCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(101); /* Must have valid GPC code*/
      FY0DM002.XXXPRCNM = "FY0D641"; /* Process name*/
      FY0DW01.XGPDESC = " ";
      COMMAREA.XGPCD = " ";
    end
  else
    FY0DW01.XGPCD = FY0DM002.XGPCD;
    set FY0DM002 initial;
    set FY0DM002.XGPCD cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(101); /* Must have valid GPC code*/
    FY0DM002.XXXPRCNM = "FY0D641"; /* Process name*/
    FY0DW01.XGPDESC = " ";
    COMMAREA.XGPCD = " ";
  end

end // end FY0D641

// Process valid input request
Function FY0D650()

   /* ------------------------------------------------------------*/
   /* Process any entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/

    VFDOFC02.XGPCD = FY0DM002.XGPCD; /* GPC code*/
    VFDOFC02.FY6FOCD = FY0DM002.FY6FOCD; /* Liaison/Fld code*/

    call "VFDOFC02" ("S ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

       /* next sentence*/


    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0D650"; /* Process name*/
      TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
      TA1REC.TA1MAP = "FY0DM002"; /* Map name*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/
      TA1REC.TA1TBLKE = VFDOFC02.VFDOFC02-KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      FY0DM002.XXXPRCNM = "FY0D650"; /* Process name*/
    end
  end

end // end FY0D650

// CHANGE PROCESS: List screen
Function FY0D700()

   /* ------------------------------------------------------------*/
   /* This is the main process used to CHANGE a record.  It will*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  FY0D710(); /* Obtain the data to display*/

  FY0D720(); /* Format and display the map*/

  FY0D730(); /* Check attention identifier*/

  FY0D740(); /* Reset fields to normal intensity*/

  FY0D750(); /* Verify the entered data*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    FY0D760(); /* Process valid input request*/
  end

end // end FY0D700

// Select a unique row: CHANGE
Function FY0D710()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  VFDOFC02.XGPCD = FY0DW01.XGPCD; /* GPC code*/
  VFDOFC02.FY6FOCD = FY0DW02.FY6FOCD[FY0DWIXM]; /* Liaison/Fld code*/

  call "VFDOFC02" ("S ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
   || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

     /* next sentence*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0D710"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE ROW CHANGE";
    TA1REC.TA1MAP = "FY0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/
    TA1REC.TA1TBLKE = VFDOFC02.VFDOFC02-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0DM002.XXXPRCNM = "FY0D710"; /* Process name*/
  end

end // end FY0D710

// Format and display map
Function FY0D720()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error*/
    set FY0DM002 initial; /* Clear map output area*/
    VAGen_EZEMSG = "MAKE YOUR CHANGES THEN PRESS \"ENTER\" OR \"PA2\"";

    FY0D721(); /* Format data for map*/

    set FY0DM002.XGPCD skip; /* PROTECT  FIELDS*/
    set FY0DM002.XGPDESC skip;
    set FY0DM002.FY6FOCD skip;
    set FY0DM002.FY6FODS cursor, initialAttributes;
    set FY0DM002.FY6FOSDS initialAttributes;
    set FY0DM002.FY6FOABR initialAttributes;
    set FY0DM002.XXX-ADDR1 initialAttributes;
    set FY0DM002.XXX-ADDR2 initialAttributes;
    set FY0DM002.XXX-ADDR3 initialAttributes;
    set FY0DM002.XXXCITY initialAttributes;
    set FY0DM002.XSTCD initialAttributes;
    set FY0DM002.XSTDESC initialAttributes;
    set FY0DM002.XXXZIP initialAttributes;
    set FY0DM002.XCTCD initialAttributes;
    set FY0DM002.XCTDESC initialAttributes;
    set FY0DM002.FY6FOPHN initialAttributes;
    set FY0DM002.FY6FOSPD initialAttributes;
    set FY0DM002.FY6FOFAX initialAttributes;
    set FY0DM002.FY6FOTLX initialAttributes;
    set FY0DM002.FY6CMGR initialAttributes;
    set FY0DM002.FY6PMGR initialAttributes;
    set FY0DM002.FY0DMSTD initialAttributes;
    set FY0DM002.XXXSTAT initialAttributes;
    set FY0DM002.XROPDEST initialAttributes;

  else
    set FY0DM002 alarm; /* Indicate sound alarm*/
  end

  FY0DM002.XGPCD = FY0DW01.XGPCD; /* Move GPC code to map2*/
  FY0DM002.XGPDESC = FY0DW01.XGPDESC; /* Desc to map2*/

  FY0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0DM002.FY0DMFNC = "CHANGE"; /* Move CHANGE literial to map 2*/

  converse FY0DM002 ;


end // end FY0D720

// Obtain Data to Display CHANGE
Function FY0D721()

   /* ------------------------------------------------------------*/
   /* MOVE SELECTED LINES TO MAP*/
   /* ------------------------------------------------------------*/

  FY0DM002.FY6FOCD = VFDOFC02.FY6FOCD; /* Liaison/Field office code*/
  FY0DM002.FY6FODS = VFDOFC02.FY6FODS; /* Description*/
  FY0DM002.FY6FOSDS = VFDOFC02.FY6FOSDS; /* Short description*/
  FY0DM002.FY6FOABR = VFDOFC02.FY6FOABR; /* Abbreviation*/
  FY0DM002.XXXCITY = VFDOFC02.XXXCITY; /* City*/
  FY0DM002.XXX-ADDR1 = VFDOFC02.XXX-ADDR1; /* Address*/
  FY0DM002.XXX-ADDR2 = VFDOFC02.XXX-ADDR2;
  FY0DM002.XXX-ADDR3 = VFDOFC02.XXX-ADDR3;
  FY0DM002.XSTCD = VFDOFC02.XSTCD; /* State code*/
  FY0DM002.XXXZIP = VFDOFC02.XXXZIP; /* Zip code*/
  FY0DM002.XCTCD = VFDOFC02.XCTCD; /* Country code*/
  FY0DM002.FY6FOPHN = VFDOFC02.FY6FOPHN; /* Phone number*/
  FY0DM002.FY6FOFAX = VFDOFC02.FY6FOFAX; /* Fax number*/
  FY0DM002.FY6FOTLX = VFDOFC02.FY6FOTLX; /* Telex number*/
  FY0DM002.FY6FOSPD = VFDOFC02.FY6FOSPD; /* Speed-dial number*/
  FY0DM002.FY6CMGR = VFDOFC02.FY6CMGR; /* Country manager*/
  FY0DM002.FY6PMGR = VFDOFC02.FY6PMGR; /* Production manager*/
  FY0DM002.XXXSTAT = VFDOFC02.XXXSTAT; /* Status*/
  FY0DM002.XROPDEST = VFDOFC02.XROPDEST; /* Remote printer*/

  if (VFDOFC02.XXXSTAT == "A")
    FY0DM002.FY0DMSTD = "ACTIVE";
  else
    if (VFDOFC02.XXXSTAT == "I")
      FY0DM002.FY0DMSTD = "INACTIVE";
    else
      if (VFDOFC02.XXXSTAT == " ")
        FY0DM002.FY0DMSTD = " ";
      else
        FY0DM002.FY0DMSTD = "UNKNOWN";
      end
    end
  end

end // end FY0D721

// Check Attention Identifiers
Function FY0D730()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FY0DM002 initial; /* Clears map 2*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0DM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0DM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FY0DM002.CAITEM; /* TO application*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0DM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0DM002.XXXPRCNM = "FY0D730"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0DW01.FY0DWMAP = "1"; /* Move to map 1*/
    FY0DW01.FY0DWSWR = "Y"; /* Request for data is yes*/
    FY0DW01.FY0DWFNC = " "; /* Clear function flag*/
    FY0DW01.FY0DWCSK = FY0DM002.FY6FOCD; /* Save key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "FY0DM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    FY0D111(); /* Purge temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0DM002.XXXPRCNM = "FY0D730"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0D111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0DM002.XXXPRCNM = "FY0D730"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

end // end FY0D730

// Reset Highlighted Fields
Function FY0D740()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0DM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0DM002.FY6FODS initialAttributes; /* Map fields*/
  set FY0DM002.FY6FOSDS initialAttributes; /* Map fields*/
  set FY0DM002.FY6FOABR initialAttributes;
  set FY0DM002.XXX-ADDR1 initialAttributes;
  set FY0DM002.XXX-ADDR2 initialAttributes;
  set FY0DM002.XXX-ADDR3 initialAttributes;
  set FY0DM002.XXXCITY initialAttributes;
  set FY0DM002.XSTCD initialAttributes;
  set FY0DM002.XSTDESC initialAttributes;
  set FY0DM002.XXXZIP initialAttributes;
  set FY0DM002.XCTCD initialAttributes;
  set FY0DM002.XCTDESC initialAttributes;
  set FY0DM002.FY6FOPHN initialAttributes;
  set FY0DM002.FY6FOFAX initialAttributes;
  set FY0DM002.FY6FOTLX initialAttributes;
  set FY0DM002.FY6CMGR initialAttributes;
  set FY0DM002.FY6PMGR initialAttributes;
  set FY0DM002.FY0DMSTD initialAttributes;
  set FY0DM002.XXXSTAT initialAttributes;
  set FY0DM002.XROPDEST initialAttributes;


   /* ------------------------------------------------------------*/
   /* CHECK AND SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    FY0D741();
  end

end // end FY0D740

// Check for ? by User
Function FY0D741()


   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0DM002.XGPCD == "?" /* if any ? entered*/
   || FY0DM002.XSTCD == "?" 
   || FY0DM002.XCTCD == "?" 
   || FY0DM002.XROPDEST == "?")

       /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0DM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "             GPC CODES    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0DM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      set FY0DM002.XGPCD cursor;
    else
      FY0DM002.XGPCD = " "; /* clear fields*/
      FY0DM002.XGPDESC = " ";
      set FY0DM002.XGPCD cursor;
    end
  end


  if (FY0DM002.XSTCD == "?") /* if ? in state code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                STATES    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXST01(); /* perform state code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XSTCD = XSTTBL.XSTCD[XX0XWPIX]; /* move code*/
      FY0DM002.XSTDESC = XSTTBL.XSTDESC[XX0XWPIX]; /* move name*/
      set FY0DM002.XSTCD cursor;
    else
      FY0DM002.XSTCD = " "; /* clear fields*/
      FY0DM002.XSTDESC = " ";
      set FY0DM002.XSTCD cursor;
    end
  end

  if (FY0DM002.XCTCD == "?") /* if ? in country code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "             COUNTRIES    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXCT01(); /* perform country code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      FY0DM002.XCTDESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move name*/
      set FY0DM002.XCTCD cursor;
    else
      FY0DM002.XCTCD = " "; /* clear fields*/
      FY0DM002.XCTDESC = " ";
      set FY0DM002.XCTCD cursor;
    end
  end

  if (FY0DM002.XROPDEST == "?") /* if ? in country code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "         REMOTE PRINTER   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXRO02(); /* perform remote printer window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XROPDEST = XROTBL.XROPDEST[XX0XWPIX]; /* move code*/
      set FY0DM002.XROPDEST cursor;
    else
      FY0DM002.XROPDEST = " "; /* clear fields*/
      set FY0DM002.XROPDEST cursor;
    end
  end


  converseLib.clearScreen();
   /* restore the original map*/

  converseLib.validationFailed(93); /* Press enter to process*/

  exit stack; /* Exit to redisplay map2*/

end // end FY0D741

// Verify the entered data
Function FY0D750()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.CAITEM > " ") /* Application data was entered*/
    set FY0DM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0DM002.XXXPRCNM = "FY0D750"; /* Process name*/
  end

  if (converseVar.validationMsgNum == 0)
    FY0D751();
  end

end // end FY0D750

// Validate Record Change
Function FY0D751()

   /* ------------------------------------------------------------*/
   /* Validate changed record.*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.FY6FODS == VFDOFC02.FY6FODS /* Check fields for changes*/
   && FY0DM002.FY6FOSDS == VFDOFC02.FY6FOSDS
   && FY0DM002.FY6FOABR == VFDOFC02.FY6FOABR
   && FY0DM002.XXX-ADDR1 == VFDOFC02.XXX-ADDR1
   && FY0DM002.XXX-ADDR2 == VFDOFC02.XXX-ADDR2
   && FY0DM002.XXX-ADDR3 == VFDOFC02.XXX-ADDR3
   && FY0DM002.XXXCITY == VFDOFC02.XXXCITY 
   && FY0DM002.XSTCD == VFDOFC02.XSTCD     
   && FY0DM002.XXXZIP == VFDOFC02.XXXZIP   
   && FY0DM002.XCTCD == VFDOFC02.XCTCD     
   && FY0DM002.FY6FOPHN == VFDOFC02.FY6FOPHN
   && FY0DM002.FY6FOFAX == VFDOFC02.FY6FOFAX
   && FY0DM002.FY6FOTLX == VFDOFC02.FY6FOTLX
   && FY0DM002.FY6CMGR == VFDOFC02.FY6CMGR 
   && FY0DM002.FY6PMGR == VFDOFC02.FY6PMGR 
   && FY0DM002.XXXSTAT == VFDOFC02.XXXSTAT 
   && FY0DM002.XROPDEST == VFDOFC02.XROPDEST)
    FY0DM001.FY0DMSEL[FY0DWIXM] = " ";
    exit stack;
  else
    FY0D752(); /* Check entered data*/
  end

end // end FY0D751

// Validate input data CHANGE
Function FY0D752()

   /* -----------------------------------------------------------*/
    /* Validate the entered data.*/
    /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* Validate the status*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XXXSTAT == "A" /* Active*/
   || FY0DM002.XXXSTAT == "I") /* Inactive*/
     /* Next sentence*/
  else
    set FY0DM002.XXXSTAT cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(54); /* Country is missing or invalid*/
    FY0DM002.XXXPRCNM = "FY0D752"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
     /* Get remote printer from code entered, if active*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XROPDEST > " ") /* Rmt printer entered*/
    if (FY0DM002.XROPDEST in XROTBL.XROPDEST /* Check printer code*/
     && XROTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

    else
      set FY0DM002.XROPDEST cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(15); /* Rmt printer is missing or invalid*/
      FY0DM002.XXXPRCNM = "FY0D752"; /* Process name*/
    end
  else
    if (FY0DM002.XGPCD == "03") /* Printer code is must for '03'*/
      set FY0DM002.XROPDEST cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(15); /* Rmt printer is missing or invalid*/
      FY0DM002.XXXPRCNM = "FY0D752"; /* Process name*/
    end
  end

   /* ------------------------------------------------------------*/
     /* Get country from code entered, if active*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XCTCD > " " /* Sometheing in Country code field*/
   && FY0DM002.XCTCD in XCTTBL.XCTCD) /* Check country content table*/
    if (XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      FY0DM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country name*/
    else
      set FY0DM002.XCTCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(25); /* Country is missing or invalid*/
      FY0DM002.XXXPRCNM = "FY0D752"; /* Process name*/
      FY0DM002.XCTDESC = " "; /* Clears description*/
    end
  else
    set FY0DM002.XCTCD cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(25); /* Country is missing or invalid*/
    FY0DM002.XXXPRCNM = "FY0D752"; /* Process name*/
    FY0DM002.XCTDESC = " "; /* Clears description*/
  end

   /* ------------------------------------------------------------*/
     /* Get state from code entered, if active*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XCTCD == "USA") /* If the country is the United States*/
    if (FY0DM002.XSTCD > " " /* Something in State code field*/
     && FY0DM002.XSTCD in XSTTBL.XSTCD) /* Check state content table*/
      if (XSTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        FY0DM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex]; /* State name*/
      else
        set FY0DM002.XSTCD cursor, modified, bold; /* Highlight error*/
        converseLib.validationFailed(24); /* State is missing or invalid*/
        FY0DM002.XXXPRCNM = "FY0D752"; /* Process name*/
        FY0DM002.XSTDESC = " "; /* Clears description*/
      end
    else
      set FY0DM002.XSTCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(24); /* State is missing or invalid*/
      FY0DM002.XXXPRCNM = "FY0D752"; /* Process name*/
      FY0DM002.XSTDESC = " "; /* Clears description*/
    end
  end

   /* ------------------------------------------------------------*/
     /* Liaison/Field Office Abbrv.*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.FY6FOABR == " ") /* Nothing in abbrv. field*/
    set FY0DM002.FY6FOABR cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(22); /* Abbrv. is missing*/
    FY0DM002.XXXPRCNM = "FY0D752"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
     /* Liaison/Field Office Short name*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.FY6FOSDS == " ") /* Nothing in short field*/
    set FY0DM002.FY6FOSDS cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(20); /* State is missing*/
    FY0DM002.XXXPRCNM = "FY0D752"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
     /* Liaison/Field Office name*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.FY6FODS == " ") /* Nothing in name field*/
    set FY0DM002.FY6FODS cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(19); /* Name is missing*/
    FY0DM002.XXXPRCNM = "FY0D752"; /* Process name*/
  end

end // end FY0D752

// Process Changed Data
Function FY0D760()

   /* ------------------------------------------------------------*/
   /* Process Changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
                                  /* Move fields to record*/
    VFDOFC02.XGPCD = FY0DM002.XGPCD; /* GPC code*/
    VFDOFC02.FY6FOCD = FY0DM002.FY6FOCD; /* Liaison/Field office code*/
    VFDOFC02.FY6FODS = FY0DM002.FY6FODS; /* description*/
    VFDOFC02.FY6FOSDS = FY0DM002.FY6FOSDS; /* short description*/
    VFDOFC02.FY6FOABR = FY0DM002.FY6FOABR; /* abbreviation*/
    VFDOFC02.XXXCITY = FY0DM002.XXXCITY; /* City*/
    VFDOFC02.XXX-ADDR1 = FY0DM002.XXX-ADDR1; /* Address*/
    VFDOFC02.XXX-ADDR2 = FY0DM002.XXX-ADDR2;
    VFDOFC02.XXX-ADDR3 = FY0DM002.XXX-ADDR3;
    VFDOFC02.XSTCD = FY0DM002.XSTCD; /* State code*/
    VFDOFC02.XXXZIP = FY0DM002.XXXZIP; /* Zip code*/
    VFDOFC02.XCTCD = FY0DM002.XCTCD; /* Country code*/
    VFDOFC02.FY6FOPHN = FY0DM002.FY6FOPHN; /* Phone number*/
    VFDOFC02.FY6FOFAX = FY0DM002.FY6FOFAX; /* Fax number*/
    VFDOFC02.FY6FOTLX = FY0DM002.FY6FOTLX; /* Telex number*/
    VFDOFC02.FY6FOSPD = FY0DM002.FY6FOSPD; /* Speed-dial number*/
    VFDOFC02.FY6CMGR = FY0DM002.FY6CMGR; /* Country manager*/
    VFDOFC02.FY6PMGR = FY0DM002.FY6PMGR; /* Production manager*/
    VFDOFC02.XXXSTAT = FY0DM002.XXXSTAT; /* Production manager*/
    VFDOFC02.XROPDEST = FY0DM002.XROPDEST; /* Remote printer*/

    FY0D761(); /* Perform update*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If row does exists*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* Update this row*/
      FY0DW01.FY0DWCSK = FY0DM002.FY6FOCD; /* Save key*/
      set FY0DM002 initial; /* Clear map2*/
      FY0DW01.FY0DWUPD = "Y"; /* Update successful*/
      FY0DM001.FY0DMSEL[FY0DWIXM] = " "; /* Remove selected line*/
      set VFDOFC02 empty; /* Clear record*/
      FY0DW01.FY0DWSWR = "Y"; /* Request for data turned on*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* If row does not exists*/
        converseLib.validationFailed(12); /* Update done by someone else*/
      end
    end
  end

end // end FY0D760

// Update row
Function FY0D761()

   /* ------------------------------------------------------------*/
   /* Update the Liaison/Field Office Row*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "VFDOFC02" ("U ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Valid return codes*/
   || SQLCA.VAGen_SQLCODE == 100)

       /* GO ON*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0D761"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "FY0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0DM002.XXXPRCNM = "FY0D761"; /* Process name*/
  end

end // end FY0D761

// CHANGE PROCESS: Fast Path
Function FY0D800()

   /* ------------------------------------------------------------*/
   /* This is the main process used to CHANGE a record.  It will*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0DW01.FY0DWSWR == "Y") /* Request for data is Y*/
    FY0D810(); /* Obtain the data to display*/
  end

  FY0D820(); /* Format and display the map*/

  FY0D830(); /* Check attention identifier*/

  FY0D840(); /* Reset fields to normal intensity*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    FY0D850(); /* Verify the entered data*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors*/
    FY0D860(); /* Process valid input request*/
  end

end // end FY0D800

// Obtain Data To Display
Function FY0D810()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  VFDOFC02.XGPCD = FY0DW01.XGPCD; /* GPC code*/
  VFDOFC02.FY6FOCD = FY0DM002.FY6FOCD; /* Liaison/Fld code*/

  call "VFDOFC02" ("S ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

     /* next sentence*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(21); /* No data found*/
      FY0DM002.XXXPRCNM = "FY0D810"; /* Process name*/
      set FY0DM002.FY6FOCD cursor, bold; /* Highlight*/
      FY0DM002.FY6FOCD = VFDOFC02.FY6FOCD;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0D810"; /* Process name*/
      TA1REC.TA1LOC = "SELECT UNIQUE ROW CHANGE";
      TA1REC.TA1MAP = "FY0DM002"; /* Map name*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/
      TA1REC.TA1TBLKE = VFDOFC02.VFDOFC02-KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      FY0DM002.XXXPRCNM = "FY0D810"; /* Process name*/

    end
  end

end // end FY0D810

// Format and Display Map2
Function FY0D820()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error*/
    set FY0DM002 initial; /* Clear map output area*/
    if (FY0DW01.XGPCD > " ") /* If something in GPC code*/
      FY0DM002.XGPCD = FY0DW01.XGPCD; /* Move GPC code to map2*/
      FY0DM002.XGPDESC = FY0DW01.XGPDESC;
      if (FY0DW01.FY0DWSWR == "Y") /* Request for data is on*/
        FY0D823(); /* Format data for map*/
      else
        FY0D821(); /* Protect non-key fields*/
      end
    else
      FY0D821(); /* Protect non-key fields*/
    end
  else
    set FY0DM002 alarm; /* Indicate sound alarm*/
  end

  FY0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0DM002.FY0DMFNC = "CHANGE"; /* Move CHANGE literial to map 2*/

  converse FY0DM002 ;


end // end FY0D820

// Protect non-key fields
Function FY0D821()

   /* ------------------------------------------------------------*/
   /* Protect non-key fields.*/
   /* ------------------------------------------------------------*/

  set FY0DM002.FY6FODS protect; /* Protect Fields*/
  set FY0DM002.FY6FOSDS protect;
  set FY0DM002.FY6FOABR protect;
  set FY0DM002.XXX-ADDR1 protect;
  set FY0DM002.XXX-ADDR2 protect;
  set FY0DM002.XXX-ADDR3 protect;
  set FY0DM002.XXXCITY protect;
  set FY0DM002.XSTCD protect;
  set FY0DM002.XSTDESC protect;
  set FY0DM002.XXXZIP protect;
  set FY0DM002.XCTCD protect;
  set FY0DM002.XCTDESC protect;
  set FY0DM002.FY6FOPHN protect;
  set FY0DM002.FY6FOSPD protect;
  set FY0DM002.FY6FOFAX protect;
  set FY0DM002.FY6FOTLX protect;
  set FY0DM002.FY6CMGR protect;
  set FY0DM002.FY6PMGR protect;
  set FY0DM002.FY0DMSTD protect;
  set FY0DM002.XXXSTAT protect;
  set FY0DM002.XROPDEST protect;
  FY0DM002.XXXSTAT = "A"; /* Set to active so verify wont error*/
                                   /* off*/
  FY0DM002.FY0DMSTD = "ACTIVE"; /* Status description*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    FY0D822(); /* Check key fields*/
  end

end // end FY0D821

// Validate key fields
Function FY0D822()

   /* -----------------------------------------------------------*/
    /* Validate the entered data.*/
    /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* Liaison/Field Office code*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.FY6FOCD == " ") /* Nothing in code field*/
    set FY0DM002.FY6FOCD cursor; /* Position cursor*/
    FY0DM002.VAGen_EZEMSG = "ENTER LIAISON/FIELD OFFICE";
  end
  if (FY0DM002.XGPCD == " ") /* Nothing in code field*/
    set FY0DM002.XGPCD cursor; /* Position cursor*/
    FY0DM002.VAGen_EZEMSG = "ENTER GPC CODE AND LIAISON/FIELD OFFICE";
  end

  if (FY0DW01.FY0DWUPD == "Y") /* Update successful*/
    FY0DM002.VAGen_EZEMSG = "UPDATE SUCESSFUL--ENTER LIAISON/FIELD OFFICE";
  end

  FY0DW01.FY0DWUPD = "N"; /* Turn off flag*/

end // end FY0D822

// Format data for map
Function FY0D823()

   /* ------------------------------------------------------------*/
   /* MOVE SELECTED LINES TO MAP*/
   /* ------------------------------------------------------------*/

  FY0DM002.FY6FOCD = VFDOFC02.FY6FOCD; /* Liaison/Field Office*/
  FY0DM002.FY6FODS = VFDOFC02.FY6FODS; /* Description*/
  FY0DM002.FY6FOSDS = VFDOFC02.FY6FOSDS; /* Short description*/
  FY0DM002.FY6FOABR = VFDOFC02.FY6FOABR; /* Abbreviation*/
  FY0DM002.XXXCITY = VFDOFC02.XXXCITY; /* City*/
  FY0DM002.XXX-ADDR1 = VFDOFC02.XXX-ADDR1; /* Address*/
  FY0DM002.XXX-ADDR2 = VFDOFC02.XXX-ADDR2;
  FY0DM002.XXX-ADDR3 = VFDOFC02.XXX-ADDR3;
  FY0DM002.XSTCD = VFDOFC02.XSTCD; /* State code*/
  FY0DM002.XXXZIP = VFDOFC02.XXXZIP; /* Zip code*/
  FY0DM002.XCTCD = VFDOFC02.XCTCD; /* Country code*/
  FY0DM002.FY6FOPHN = VFDOFC02.FY6FOPHN; /* Phone number*/
  FY0DM002.FY6FOFAX = VFDOFC02.FY6FOFAX; /* Fax number*/
  FY0DM002.FY6FOTLX = VFDOFC02.FY6FOTLX; /* Telex number*/
  FY0DM002.FY6FOSPD = VFDOFC02.FY6FOSPD; /* Speed-dial number*/
  FY0DM002.FY6CMGR = VFDOFC02.FY6CMGR; /* Country manager*/
  FY0DM002.FY6PMGR = VFDOFC02.FY6PMGR; /* Production manager*/
  FY0DM002.XXXSTAT = VFDOFC02.XXXSTAT; /* Status*/
  FY0DM002.XROPDEST = VFDOFC02.XROPDEST; /* Remote printer*/

  set FY0DM002.XGPCD protect; /* skip field*/
  set FY0DM002.FY6FOCD protect; /* skip field*/
  set FY0DM002.FY6FODS cursor; /* set cursor to name*/
  FY0DM002.VAGen_EZEMSG = "MAKE YOUR CHANGES";

  if (VFDOFC02.XXXSTAT == "A")
    FY0DM002.FY0DMSTD = "ACTIVE";
  else
    if (VFDOFC02.XXXSTAT == "I")
      FY0DM002.FY0DMSTD = "INACTIVE";
    else
      if (VFDOFC02.XXXSTAT == " ")
        FY0DM002.FY0DMSTD = " ";
      else
        FY0DM002.FY0DMSTD = "UNKNOWN";
      end
    end
  end

end // end FY0D823

// Check Attention Identifiers
Function FY0D830()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    VFDOFC02.FY6FOCD = FY0DM002.FY6FOCD;
    VFDOFC02.XGPCD = FY0DM002.XGPCD;
    set FY0DM002 initial; /* Clears map 2*/
    FY0DM002.FY6FOCD = VFDOFC02.FY6FOCD;
    FY0DM002.XGPCD = VFDOFC02.XGPCD;
    FY0DW01.FY0DWSWR = "Y"; /* Request for data is off*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0DM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0DM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FY0DM002.CAITEM; /* TO application*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0DM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0DM002.XXXPRCNM = "FY0D830"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0DW01.FY0DWMAP = "1"; /* Move to map 1*/
    FY0DW01.FY0DWSWR = "Y"; /* Request for data is yes*/
    FY0DW01.FY0DWFNC = " "; /* Clear function flag*/
    FY0DW01.FY0DWCSK = FY0DM002.FY6FOCD; /* Save key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "FY0DM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    FY0D111(); /* Purge temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0DM002.XXXPRCNM = "FY0D830"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0D111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0DM002.XXXPRCNM = "FY0D830"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

end // end FY0D830

// Reset fields to normal
Function FY0D840()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0DM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0DM002.XGPDESC initialAttributes;
  set FY0DM002.XGPCD initialAttributes;
  set FY0DM002.FY6FOCD initialAttributes; /* Map fields*/
  set FY0DM002.FY6FODS initialAttributes; /* Map fields*/
  set FY0DM002.FY6FOSDS initialAttributes; /* Map fields*/
  set FY0DM002.FY6FOABR initialAttributes;
  set FY0DM002.XXX-ADDR1 initialAttributes;
  set FY0DM002.XXX-ADDR2 initialAttributes;
  set FY0DM002.XXX-ADDR3 initialAttributes;
  set FY0DM002.XXXCITY initialAttributes;
  set FY0DM002.XSTCD initialAttributes;
  set FY0DM002.XSTDESC initialAttributes;
  set FY0DM002.XXXZIP initialAttributes;
  set FY0DM002.XCTCD initialAttributes;
  set FY0DM002.XCTDESC initialAttributes;
  set FY0DM002.FY6FOPHN initialAttributes;
  set FY0DM002.FY6FOFAX initialAttributes;
  set FY0DM002.FY6FOTLX initialAttributes;
  set FY0DM002.FY6CMGR initialAttributes;
  set FY0DM002.FY6PMGR initialAttributes;
  set FY0DM002.FY0DMSTD initialAttributes;
  set FY0DM002.XXXSTAT initialAttributes;
  set FY0DM002.XROPDEST initialAttributes;

   /* ------------------------------------------------------------*/
   /* CHECK AND SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    FY0D841();
  end

end // end FY0D840

// Check for ? by User
Function FY0D841()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0DM002.XGPCD == "?" /* if any ? entered*/
   || FY0DM002.XSTCD == "?" 
   || FY0DM002.XCTCD == "?" 
   || FY0DM002.XROPDEST == "?")

        /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0DM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "              GPC CODES   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0DM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      set FY0DM002.XGPCD cursor;
    else
      FY0DM002.XGPCD = " "; /* clear fields*/
      FY0DM002.XGPDESC = " ";
      set FY0DM002.XGPCD cursor;
    end
  end


  if (FY0DM002.XSTCD == "?") /* if ? in state code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                STATES    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXST01(); /* perform state code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XSTCD = XSTTBL.XSTCD[XX0XWPIX]; /* move code*/
      FY0DM002.XSTDESC = XSTTBL.XSTDESC[XX0XWPIX]; /* move name*/
      set FY0DM002.XSTCD cursor;
    else
      FY0DM002.XSTCD = " "; /* clear fields*/
      FY0DM002.XSTDESC = " ";
      set FY0DM002.XSTCD cursor;
    end
  end

  if (FY0DM002.XCTCD == "?") /* if ? in country code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "              COUNTRIES   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXCT01(); /* perform country code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      FY0DM002.XCTDESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move name*/
      set FY0DM002.XCTCD cursor;
    else
      FY0DM002.XCTCD = " "; /* clear fields*/
      FY0DM002.XCTDESC = " ";
      set FY0DM002.XCTCD cursor;
    end
  end

  if (FY0DM002.XROPDEST == "?") /* if ? in country code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "         REMOTE PRINTER   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXRO02(); /* perform remote printer window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0DM002.XROPDEST = XROTBL.XROPDEST[XX0XWPIX]; /* move code*/
      set FY0DM002.XROPDEST cursor;
    else
      FY0DM002.XROPDEST = " "; /* clear fields*/
      set FY0DM002.XROPDEST cursor;
    end
  end


  converseLib.clearScreen();
   /* restore the original map*/

  converseLib.validationFailed(93); /* Press enter to process*/

  exit stack; /* Exit to redisplay map2*/

end // end FY0D841

// Verify the input data
Function FY0D850()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.CAITEM > " ") /* Application data was entered*/
    set FY0DM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0DM002.XXXPRCNM = "FY0D850"; /* Process name*/
  end
  if (converseVar.validationMsgNum == 0) /* No errors*/

    if (FY0DM002.XGPCD != VFDOFC02.XGPCD /* Fields were changed*/
     || FY0DM002.FY6FOCD == VFDOFC02.FY6FOCD
     || FY0DM002.FY6FOSDS != VFDOFC02.FY6FOSDS
     || FY0DM002.FY6FOABR != VFDOFC02.FY6FOABR
     || FY0DM002.XSTCD != VFDOFC02.XSTCD 
     || FY0DM002.XCTCD != VFDOFC02.XCTCD 
     || FY0DM002.XROPDEST != VFDOFC02.XROPDEST
     || FY0DM002.XXXSTAT != VFDOFC02.XXXSTAT)

      FY0D851(); /* Check entered data*/

    else
      if (FY0DM002.FY6FODS == VFDOFC02.FY6FODS /* Did any field change?*/
       && FY0DM002.FY6FOCD == VFDOFC02.FY6FOCD 
       && FY0DM002.FY6FOABR != VFDOFC02.FY6FOABR
       && FY0DM002.XXX-ADDR1 == VFDOFC02.XXX-ADDR1
       && FY0DM002.XXX-ADDR2 == VFDOFC02.XXX-ADDR2
       && FY0DM002.XXX-ADDR3 == VFDOFC02.XXX-ADDR3
       && FY0DM002.XXXCITY == VFDOFC02.XXXCITY 
       && FY0DM002.XXXZIP == VFDOFC02.XXXZIP   
       && FY0DM002.FY6FOPHN == VFDOFC02.FY6FOPHN
       && FY0DM002.FY6FOFAX == VFDOFC02.FY6FOFAX
       && FY0DM002.FY6FOTLX == VFDOFC02.FY6FOTLX
       && FY0DM002.FY6CMGR == VFDOFC02.FY6CMGR 
       && FY0DM002.FY6PMGR == VFDOFC02.FY6PMGR 
       && FY0DM002.XROPDEST == VFDOFC02.XROPDEST
       && FY0DM002.XXXSTAT == VFDOFC02.XXXSTAT)

        FY0DW01.FY0DWSWR = "N"; /* Set request for data to NO!*/
        exit stack;

      end
    end
  end

end // end FY0D850

// Validate Changed Data
Function FY0D851()

   /* -----------------------------------------------------------*/
    /* Validate the entered data.*/
    /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/


   /* ------------------------------------------------------------*/
     /* Validate the status*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XXXSTAT == "A" /* Active*/
   || FY0DM002.XXXSTAT == "I") /* Inactive*/
     /* Next sentence*/
  else
    set FY0DM002.XXXSTAT cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(54); /* Invalid status*/
    FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
  end


  if (FY0DM002.XGPCD != VFDOFC02.XGPCD
   || FY0DM002.FY6FOCD != VFDOFC02.FY6FOCD)

    /* ------------------------------------------------------------*/
       /* Get general product code entered if active*/
    /* ------------------------------------------------------------*/

    if (FY0DM002.XGPCD > " " /* Something in GPC code field*/
     && FY0DM002.XGPCD in XGPTBL.XGPCD) /* Check GPC table*/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        FY0DM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        FY0DW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        FY0DW01.XGPCD = FY0DM002.XGPCD;
        COMMAREA.XGPCD = FY0DM002.XGPCD;
                                  /* GPC description*/
      else
        set FY0DM002.XGPCD cursor, modified, bold; /* Highlight error*/
        converseLib.validationFailed(101); /* Must have valid GPC code*/
        FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
        FY0DW01.FY0DWSWR = "N"; /* Turn off request for data*/
        FY0DW01.XGPCD = " ";
        FY0DM002.XGPDESC = " ";
      end
    else
      set FY0DM002.XGPCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(101); /* Must have valid GPC code*/
      FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
      FY0DW01.FY0DWSWR = "N"; /* Turn off request for data*/
      FY0DW01.XGPCD = " ";
      FY0DM002.XGPDESC = " ";
    end

  else

    /* ------------------------------------------------------------*/
     /* Get remote printer from code entered, if active*/
    /* ------------------------------------------------------------*/

    if (FY0DM002.XROPDEST > " ") /* Rmt printer entered*/
      if (FY0DM002.XROPDEST in XROTBL.XROPDEST /* Check printer code*/
       && XROTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      else
        set FY0DM002.XROPDEST cursor, modified, bold; /* Highlight error*/
        converseLib.validationFailed(15); /* Rmt printer is missing or invalid*/
        FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
      end
    else
      if (FY0DM002.XGPCD == "03") /* Printer code is must for '03'*/
        set FY0DM002.XROPDEST cursor, modified, bold; /* Highlight error*/
        converseLib.validationFailed(15); /* Rmt printer is missing or invalid*/
        FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
      end
    end

    /* ------------------------------------------------------------*/
       /* Get country from code entered, if active*/
    /* ------------------------------------------------------------*/

    if (FY0DM002.XCTCD > " " /* Sometheing in Country code field*/
     && FY0DM002.XCTCD in XCTTBL.XCTCD) /* Check country content table*/
      if (XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        FY0DM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country name*/
      else
        set FY0DM002.XCTCD cursor, modified, bold; /* Highlight error*/
        converseLib.validationFailed(25); /* Country is missing or invalid*/
        FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
        FY0DM002.XCTDESC = " "; /* Clears description*/
      end
    else
      set FY0DM002.XCTCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(25); /* Country is missing or invalid*/
      FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
      FY0DM002.XCTDESC = " "; /* Clears description*/
    end

    /* ------------------------------------------------------------*/
       /* Get state from code entered, if active*/
    /* ------------------------------------------------------------*/

    if (FY0DM002.XCTCD == "USA") /* If the country is the United States*/
      if (FY0DM002.XSTCD > " " /* Something in State code field*/
       && FY0DM002.XSTCD in XSTTBL.XSTCD) /* Check state content table*/
        if (XSTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
          FY0DM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex]; /* State name*/
        else
          set FY0DM002.XSTCD cursor, modified, bold; /* Highlight error*/
          converseLib.validationFailed(24); /* State is missing or invalid*/
          FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
          FY0DM002.XSTDESC = " "; /* Clears description*/
        end
      else
        set FY0DM002.XSTCD cursor, modified, bold; /* Highlight error*/
        converseLib.validationFailed(24); /* State is missing or invalid*/
        FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
        FY0DM002.XSTDESC = " "; /* Clears description*/
      end
    end

    /* ------------------------------------------------------------*/
       /* Liaison/Field Office Abbrv.*/
    /* ------------------------------------------------------------*/

    if (FY0DM002.FY6FOABR == " ") /* Nothing in abbrv. field*/
      set FY0DM002.FY6FOABR cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(22); /* Abbrv. is missing*/
      FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
    end

    /* ------------------------------------------------------------*/
       /* Liaison/Field Office Short name*/
    /* ------------------------------------------------------------*/

    if (FY0DM002.FY6FOSDS == " ") /* Nothing in short field*/
      set FY0DM002.FY6FOSDS cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(20); /* Short name is missing*/
      FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
    end

    /* ------------------------------------------------------------*/
       /* Liaison/Field Office name*/
    /* ------------------------------------------------------------*/

    if (FY0DM002.FY6FODS == " ") /* Nothing in name field*/
      set FY0DM002.FY6FODS cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(19); /* Name is missing*/
      FY0DM002.XXXPRCNM = "FY0D851"; /* Process name*/
    end

  end

end // end FY0D851

// Process Valid input
Function FY0D860()

   /* ------------------------------------------------------------*/
   /* Process Changed data.*/
   /* ------------------------------------------------------------*/

  if (FY0DM002.XGPCD != VFDOFC02.XGPCD
   || FY0DM002.FY6FOCD != VFDOFC02.FY6FOCD)
    FY0DW01.FY0DWSWR = "Y"; /* Turn on request for data*/
  else
    if (converseVar.eventKey is enter) /* Enter key pressed*/
                                  /* Move fields to record*/
      VFDOFC02.XGPCD = FY0DM002.XGPCD; /* GPC code*/
      VFDOFC02.FY6FOCD = FY0DM002.FY6FOCD; /* Liaison/Fld office cd*/
      VFDOFC02.FY6FODS = FY0DM002.FY6FODS; /* description*/
      VFDOFC02.FY6FOSDS = FY0DM002.FY6FOSDS;
                                   /* short description*/
      VFDOFC02.FY6FOABR = FY0DM002.FY6FOABR; /* abbreviation*/
      VFDOFC02.XXXCITY = FY0DM002.XXXCITY; /* City*/
      VFDOFC02.XXX-ADDR1 = FY0DM002.XXX-ADDR1; /* Address*/
      VFDOFC02.XXX-ADDR2 = FY0DM002.XXX-ADDR2;
      VFDOFC02.XXX-ADDR3 = FY0DM002.XXX-ADDR3;
      VFDOFC02.XSTCD = FY0DM002.XSTCD; /* State code*/
      VFDOFC02.XXXZIP = FY0DM002.XXXZIP; /* Zip code*/
      VFDOFC02.XCTCD = FY0DM002.XCTCD; /* Country code*/
      VFDOFC02.FY6FOPHN = FY0DM002.FY6FOPHN; /* Phone number*/
      VFDOFC02.FY6FOFAX = FY0DM002.FY6FOFAX; /* Fax number*/
      VFDOFC02.FY6FOTLX = FY0DM002.FY6FOTLX; /* Telex number*/
      VFDOFC02.FY6FOSPD = FY0DM002.FY6FOSPD;
                                   /* Speed-dial number*/
      VFDOFC02.FY6CMGR = FY0DM002.FY6CMGR; /* Country manager*/
      VFDOFC02.FY6PMGR = FY0DM002.FY6PMGR; /* Production manager*/
      VFDOFC02.XXXSTAT = FY0DM002.XXXSTAT; /* Status*/
      VFDOFC02.XROPDEST = FY0DM002.XROPDEST; /* Remote printer*/

      FY0D861(); /* Perform update*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If row does exists*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* Update this row*/
        FY0DW01.FY0DWCSK = FY0DM002.FY6FOCD;
        set FY0DM002 initial; /* Clear map2*/
        FY0DW01.FY0DWUPD = "Y"; /* UPDATE SUCCESSFUL*/
        FY0DW01.FY0DWSWR = "N"; /* Request for data turned on*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If row does not exists*/
          converseLib.validationFailed(12); /* Change row*/
          FY0DW01.FY0DWSWR = "Y"; /* Turn request for data on*/
          set FY0DM002.FY6FOCD cursor, bold; /* Highlight*/
          exit stack;
            /* Ezeflo is used here to redisplay map2*/
            /* with new changes*/
        end
      end
    end
  end

end // end FY0D860

// Update row
Function FY0D861()

   /* ------------------------------------------------------------*/
   /* Update the Liaison/Field Office Row*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "VFDOFC02" ("U ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Valid return codes*/
   || SQLCA.VAGen_SQLCODE == 100)

       /* GO ON*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0D861"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "FY0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0DM002.XXXPRCNM = "FY0D861"; /* Process name*/
  end

end // end FY0D861

// Converse XROTBL pop-up window
Function XPXRO02()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XROTBL.XROCD[XX0XWCT1] != "9999") /* Or end of data*/
        if (XROTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XROTBL.XROPDEST[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XROTBL.XRODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XROTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XROTBL.XROPDEST[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XROTBL.XRODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XROTBL.XROCD[XX0XWCT1] == "9999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXRO02

//*** RECORD=FY0DW01 ****
// Working storage for FY0d - Liaison/Field Office
// ***********************
Record FY0DW01 type basicRecord
  10 XXXRVNBR XXXRVNBR ; 
  10 FY0DWSWC FY0DWSWC ; 
  10 FY0DWSWR FY0DWSWR ; 
  10 FY0DMTSP FY0DMTSP ; 
  10 FY0DWIXM FY0DWIXM ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FY0DWQIX FY0DWQIX ; 
  10 FY0DWMAP FY0DWMAP ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 FY0DWIND FY0DWIND ; 
  10 FY0DWLSF FY0DWLSF ; 
  10 FY0DWPRO FY0DWPRO ; 
  10 FY0DWDEL FY0DWDEL ; 
  10 FY0DWINQ FY0DWINQ ; 
  10 FY0DWUPD FY0DWUPD ; 
  10 FY0DWADD FY0DWADD ; 
  10 FY0DWCSF FY0DWCSF ; 
  10 FY0DMSGE FY0DMSGE ; 
  10 FY0DWCSK FY0DWCSK ; 
    15 FY6FOCD FY6FOCD ; 
  10 CAITEM CAITEM ; 
    15 FY0DWFNC FY0DWFNC ; 
    15 * char(19) ; 
  10 FY0DWDEF FY0DWDEF ; 
  10 FY0DWDFL FY0DWDFL ; 
end // end FY0DW01

//*** RECORD=FY0DW02 ****
// Temporary storage record for fy0d - Liaison/Field Office
// 
// 06/17/98   PCA434A   drammo   Replaced the prod mgr variable
//                               FY6PMGR by remote printer var
//                               XROPDEST.
// ***********************
Record FY0DW02 type basicRecord
  10 FY0DWLEN FY0DWLEN ; 
  10 FY0DWLIN FY0DWLIN [14] ; 
    15 FY0DMSEL FY0DMSEL ; 
    15 FY6FOCD FY6FOCD ; 
    15 FY6FOSDS FY6FOSDS ; 
    15 XCTDESC XCTDESC ; 
    15 FY6CMGR FY6CMGR ; 
    15 XROPDEST XROPDEST ; 
    15 XXXSTAT XXXSTAT ; 
end // end FY0DW02

DataItem FY0DMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error flag
DataItem FY0DMSGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem FY0DMTSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Successful add flag
DataItem FY0DWADD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor set flag
DataItem FY0DWCSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change save key
DataItem FY0DWCSK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data entered flag
DataItem FY0DWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete complete flag
DataItem FY0DWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save flag
DataItem FY0DWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function flag
DataItem FY0DWFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line count flag
DataItem FY0DWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry complete flag
DataItem FY0DWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FY0DWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem FY0DWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// List map line
DataItem FY0DWLIN char(84)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List map flag
DataItem FY0DWLSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem FY0DWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Protect flag
DataItem FY0DWPRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Highest page no./index
DataItem FY0DWQIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Cursor end of file switch
DataItem FY0DWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FY0DWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change complete flag
DataItem FY0DWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

