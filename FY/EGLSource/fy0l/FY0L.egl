package fy0l;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=FY0L ****
// THIS PROGRAM WILL ALLOW THE USER TO INQUIRE/MAINTAIN
// EXISTING FOB TABLE ROWS.
// 
//     THE FOB TABLE CONTAINS PRICE INFORMATION FOR THE
//     PRODUCTS THAT NIKE PRODUCES. THESE INCLUDE TARGET,
//     QUOTED AND CURRENT PRICES.
// 
// BASED UPON THE GPC, FACTORY, STYLE, COLOR, DIMENSION,
// QUALITY, SPEC. DIFF., PACKAGE TYPE, UOM, AND SEASON CODES,
// AS WELL AS, SEASON YEAR, AND THE EFF. DATE ENTERED,
// THE DATABASE WILL RETURN 0 TO N ROWS.
// 
// THIS PROGRAM WILL ALLOW THE USER TO INQUIRE, DELETE, OR
// CHANGE EXISTING FOB ROWS.  THE USER WILL ALSO BE ABLE TO
// ADD NEW ROWS.
// 
// 
// WHEN SELECTING A FUNCTION FROM THE LIST SCREEN
// THE USER WILL MAKE THE FUCTION SELECTION VIA PF KEYS.
// 
//                     PF13 FOR THE ADD
//                     PF14 FOR THE CHANGE
//                     PF15 FOR THE DELETE
//                     ENTER FOR THE INQUIRE
// 
// ONLY ROWS THAT HAVE AN ACTIVE STATUS CAN BE CHANGED OR
// DELETED.  AN INQUIRY CAN BE DONE ON ANY ROW SELECTED.
// 
// 
// THE USE OF POP-UP WINDOWS HAS BEEN INCORPORATED INTO THIS
// PROGRAM.  THIS WILL ALLOW THE USER TO FIND AND ENTER THE
// CORRECT GPC CODE, ETC.
// 
// 
//   DATE        NAME       DESCRIPTION OF CHANGE
// ________    ________    ___________________________________
// 01/21/89     GWITZI     NEW APPLICATION
// 07/09/90     GAMEN      Change default cursor to all colors
//                         field
// 07/11/90     GAMEN      Fix blank cost showing when no blank
//                         style code exists.
// 08/01/90     dmeier     change to not allow blanking out of
//                         iseg code in fy0lm002 (add mode).
// 08/06/90     GAMEN      Put in delete function.
// 04/04/91     MPISTO     correct margin percent calculations
// 05/11/91     GAMEN      Fix abend when pf13 is hit after
//                         invalid style entered on list map.
// 07/02/91     GAMEN      Blank iseg's still getting out there
//                         when date changed. Fixed by moving
//                         iseg from map and not fy0lw01 in
//                         fy0l261. This was only happening if
//                         iseg was blanked out on map 1.
// 08/12/91     GAMEN      Prevent zeroing out of FOB. Only
//                         happens when other data changed.
// 09/05/91     GAMEN      Prevent zeroing out of FOB when new
//                         rows are added or dates are changed.
// 12/03/91     GAMEN      Add code to all colors 'ADD' process
//                         so only current seasons and carry
//                         overs are added. Allow closeouts to
//                         be added one at a time also.
// 01/30/92     GAMEN      Add xowcd to call for color cost pct
//                         and set af5rec empty. in addition,
//                         don't move color pct to fy4rec and
//                         only move whsl prc when different
//                         from product file price.
// 05/14/92     KSANFO     SR# FY165 - misc % field (FY1MSCPC)
//                         now carries decimal percentages.
// 06/15/92     KSANFO     Insure that season code and year
//                         are a valid combination.
// 12/15/92     chaert     fy0l650, allow delete of fob when
//                         only cancelled po's or no po's found
// 08/10/93     dhales     corrected for CSP 4.1 conversion
// 10/11/93     GAMEN      Add carry over for hollidays and
//                         change code to use pg-curr-xlc-cd.
// 08/08/94     SLEWIS     CHANGE XSNTB TO YSNTB TABLE
// 03/16/95     GAMEN      PCY197-ADD CARRYOVER FOR SUMMER.
// 01/17/96     jniese     Corrected program to display up
//                         to 16 sizes with data.  Was only
//                         checking first 16 of the 40 sizes
//                         and displaying 10 size of the 16.
// 01/24/96     jniese     Modified program to be able to
//                         display all 40 FOB sizes on map 2.
//                         Moved cost info to new map 3.
// 03/27/96     jniese     Corrected processing errors when
//                         multiple lines are selected.
// 11/20/96     jniese     pca354 - changed carryover season
//                         edits.
// 11/07/97     NFIELD     Y2K compliance - changes to FY0L152
//                         and FY0L244 and FY0LM001
// 02/26/98     jniese     pca422 - add fob end date to screen
// 03/28/00     MNADEL     Changed the map(FY0LM003) attributes
//                         of two fields (XQTCD1,XQTCD2) from
//                         Numerical to Character which was
//                         represented wrongly.
// 09/06/01 MNADEL/VMATT   Change FY0LS19 to take 40th bucket
//                         value as it was looping at 40th
// *********************
Program FY0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF5REC AF5REC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY0LW01 FY0LW01; // record
  FY0LW02 FY0LW02; // record
  FY0LW03 FY0LW03; // record
  FY0LW04 FY0LW04; // record
  FY1REC FY1REC; // record
  FY2REC FY2REC; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  FYHREC FYHREC; // record
  FYIREC FYIREC; // record
  FYWREC FYWREC; // record
  PC2REC PC2REC; // record
  PC6REC PC6REC; // record
  PCFREC PCFREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY5REC SY5REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TABREC TABREC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use FY0LM.FY0LM001,  // forms
      FY0LM.FY0LM002, 
      FY0LM.FY0LM003, 
      FY0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFY001: XPFY001();

     /* ------------------------------------------------------------*/
     /* INITIALIZE WORKING STORAGE AND MAP OUTPUT AREAS.*/
     /* FLOW TO CONVERSE THE LIAISON/FIELD OFFICE PROCESS.*/
     /* ------------------------------------------------------------*/

    set FY0LW01 empty; /* Initialize working storage*/
    set FY0LW02 empty; /* Initialize temporary storage*/
    set FY0LW03 empty; /* Initialize temporary storage*/
    set FY1REC empty; /* Initialize CSP record*/
    set FY4REC empty; /* Initialize CSP record*/
    set FYCREC empty; /* Initialize CSP record*/
    set FYHREC empty; /* Initialize CSP record*/
    set FYIREC empty; /* Initialize CSP record*/
    set SY1REC empty; /* Initialize CSP record*/
    set PG2REC empty; /* Initialize CSP record*/
    set PG3REC empty; /* Initialize CSP record*/
    set TA2REC empty; /* Initialize CSP record*/
    set SQLCA empty; /* Initialize SQL record*/
    set ERRSQLCA empty; /* Initialize SQL error record*/
    set TA1REC empty; /* Initialize error diag. module*/
    set TA5REC empty; /* Initialize ta0050 record*/
    set TAEREC empty; /* Initialize ta0020 record*/
    set XX0XW01 empty; /* Initialize date record*/
    set XX0XW02 empty; /* Initialize date record*/
    set FY0LM001 initial; /* Clear list screen map*/
    set FY0LM002 initial; /* Clear functions map*/


    FY0LW01.FY0LWIXM = 11; /* Initialize list screen lines*/
    FY0LW01.FY0LWSWR = "N"; /* Initialize request for data*/
    FY0LW01.FY0LWINF = "Y"; /* Initialize information flag*/
    FY0LW01.FY0LWMAP = "1"; /* Initialize list map*/
    FY0LW01.FY0LWFNC = " "; /* Set function code to spaces*/
    FY0LW01.XDMCD = "00"; /* Default values*/
    FY0LM001.XDMCD = "00"; /* Default values*/
    FY0LW01.PC2INSEG = "000"; /* Default values*/
    FY0LM001.PC2INSEG = "000"; /* Default values*/
    FY0LW01.XQACD = "01"; /* Default values*/
    FY0LM001.XQACD = "01"; /* Default values*/
    FY0LW01.XPGCD = "00"; /* Default values*/
    FY0LM001.XPGCD = "00"; /* Default values*/
    FY0LW01.XGPCD = COMMAREA.XGPCD;

     /* -----------------------------------------------------------*/
     /* THE GPC CODE WILL BE CHECKED WHEN ENTERING VIA FAST PATH*/
     /* FOR VALIDITY.*/
     /* -----------------------------------------------------------*/

    if (COMMAREA.XGPCD in XGPTBL.XGPCD) /* If GPC code in table*/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        FY0LM001.XGPCD = COMMAREA.XGPCD; /* Move code to map1*/
        FY0LW01.XGPCD = COMMAREA.XGPCD; /* Move code to storage*/
        FY0LM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC desc. to map1*/
        FY0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC desc.*/
      end
    end


    FY0L000: FY0L000();
     /* no flow*/
    FY0L001: FY0L001();
    goto FY0L001;
  end // end main
end // end FY0L

// SPECIAL INITIALIZATION
Function FY0L000()

  if (FYWREC.FY1FCTYC > " ")
    FY1REC.XGPCD = FYWREC.XGPCD;
    FY1REC.FY1FCTYC = FYWREC.FY1FCTYC;
    FY0LS03();
    if (SQLCA.VAGen_SQLCODE == 0)
      FY0LW01.FY1FCTSN = FY1REC.FY1FCTSN;
      FY0LM001.FY1FCTSN = FY1REC.FY1FCTSN;
    end
  end

  FY0LS40();

  if (FYWREC.SY1STNBR > " ")
    FY0LM001.XGPCD = FYWREC.XGPCD;
    FY0LM001.SY1STNBR = FYWREC.SY1STNBR;
    FY0LM001.SY2CLRID = FYWREC.SY2CLRID;
    FY0LM001.XDMCD = FYWREC.XDMCD;

    FY0LW01.XGPCD = FYWREC.XGPCD;
    FY0LW01.SY1STNBR = FYWREC.SY1STNBR;
    FY0LW01.SY2CLRID = FYWREC.SY2CLRID;
    FY0LW01.XDMCD = FYWREC.XDMCD;

    PG2REC.XGPCD = FYWREC.XGPCD;
    PG2REC.SY1STNBR = FYWREC.SY1STNBR;
    PG2REC.SY2CLRID = FYWREC.SY2CLRID;
    PG2REC.XDMCD = FYWREC.XDMCD;

    XSPG202(); /* Select unique style/color row*/

    FY0LW01.FY0LWSWR = "Y"; /* Request for data switch on*/

  end

  set FYWREC empty; /* Initialize now that were through with it*/

end // end FY0L000

// FOB by eff. date INQUIRY/MAINT
Function FY0L001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWMAP == "1") /* Map 1 was requested*/
    FY0L100(); /* Display map 1*/
  else
    if (FY0LW01.FY0LWMAP == "2") /* Map 2 was requested*/
      if (FY0LW01.FY0LWFNC == "A") /* Add function requested*/
        FY0L200(); /* Display map 2*/
      else
        if (FY0LW01.FY0LWFNC == "I") /* Inquire function requested*/
          FY0L003(); /* Inquire Process*/
        else
          if (FY0LW01.FY0LWFNC == "C") /* Change function requested*/
            FY0L004(); /* Change Process*/
          else
            if (FY0LW01.FY0LWFNC == "D") /* Delete function requested*/
              FY0L005(); /* Delete Process*/
            else
              SQLCA.SQLCAREC = "INVALID FUNCTION CODE";
              FY0L006(); /* Error routine*/
            end
          end
        end
      end
    else
      if (FY0LW01.FY0LWMAP == "3") /* Map 3 was requested*/
        if (FY0LW01.FY0LWFNC == "A") /* Add function requested*/
          FY0L700(); /* Display map 3*/
        else
          if (FY0LW01.FY0LWFNC == "I") /* Inquire function requested*/
            FY0L800(); /* Inquire Process*/
          else
            if (FY0LW01.FY0LWFNC == "C") /* Change function requested*/
              FY0L900(); /* Change Process*/
            else
              SQLCA.SQLCAREC = "INVALID FUNCTION CODE";
              FY0L006(); /* Error routine*/
            end
          end
        end
      else
        SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
        FY0L006(); /* Error routine*/
      end
    end
  end

end // end FY0L001

// INQUIRY SCREEN OPTIONS
Function FY0L003()

   /* ----------------------------------------------------------*/
   /* This module will cycle the selected rows for the INQUIRY*/
   /* process. If any errors the row will be shown again.*/
   /* ----------------------------------------------------------*/

  if (FY0LW01.FY0LWLSF == "Y") /* Came from list screen*/
    FY0LW01.FY0LWSWR = "Y"; /* Request for data key*/
    FY0LW01.FY0LWIXM = 1; /* Initialize line index*/
    while (FY0LWIXM <= 11) /* Until end of lines*/
      if (FY0LM001.FY0LMSEL[FY0LWIXM] == "S") /* Line selected*/
        FY0L400(); /* Display Inquiry map*/
      end
      if (converseVar.validationMsgNum == 0) /* No errors*/
        FY0LM001.FY0LMSEL[FY0LWIXM] = " "; /* Line selected*/
        FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM + 1; /* Increment line count*/
      end
    end
    FY0LW01.FY0LWMAP = "1"; /* Set map 1*/
    FY0LW01.FY0LWSWR = "Y"; /* Request for data key*/
  end

end // end FY0L003

// CHANGE SCREEN OPTIONS
Function FY0L004()

   /* ----------------------------------------------------------*/
   /* This module will cycle the selected rows for the CHANGE*/
   /* process. If an error occurs it will show the same row.*/
   /* ----------------------------------------------------------*/

  if (FY0LW01.FY0LWLSF == "Y") /* Came from list screen*/
    FY0LW01.FY0LWSWR = "N"; /* Request for data key*/
    FY0LW01.FY0LWIXM = 1; /* Initialize line index*/
    while (FY0LWIXM <= 11) /* Until end of lines*/
      if (FY0LM001.FY0LMSEL[FY0LWIXM] == "S") /* Line selected*/
        if (FY0LW01.FY0LW-RESET-MAP-FLAGS == "Y")
          FY0LW01.FY0LW-RESET-MAP-FLAGS = "N"; /* clear flag*/
          FY0LW01.FY0LW-MAP2-1ST-TIME = "Y"; /* 1st time through*/
          FY0LW01.FY0LW-MAP3-1ST-TIME = "Y"; /* 1st time through*/
        end
        FY0L500(); /* Display Change map*/
        if (converseVar.validationMsgNum == 0) /* No errors*/
          FY0LW01.FY0LW-RESET-MAP-FLAGS = "Y"; /* reset maps*/
          FY0LM001.FY0LMSEL[FY0LWIXM] = " "; /* Line selected*/
        else
          FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM - 1; /* Decrement line*/
        end
      end
      FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM + 1; /* Increment line count*/
    end
    FY0LW01.FY0LWMAP = "1"; /* Set map 1*/
    FY0LW01.FY0LWSWR = "Y"; /* Request for data key*/
  end

end // end FY0L004

// DELETE SCREEN OPTIONS
Function FY0L005()
   /* ----------------------------------------------------------*/
   /* This module will cycle the selected rows for the DELETE*/
   /* process. If any errors the row will be shown again.*/
   /* ----------------------------------------------------------*/

  if (FY0LW01.FY0LWLSF == "Y") /* Came from list screen*/
    FY0LW01.FY0LWSWR = "Y"; /* Request for data key*/
    FY0LW01.FY0LWIXM = 1; /* Initialize line index*/
    while (FY0LWIXM <= 11) /* Until end of lines*/
      if (FY0LM001.FY0LMSEL[FY0LWIXM] == "S") /* Line selected*/
        if (FY0LW01.FY0LW-RESET-MAP-FLAGS == "Y")
          FY0LW01.FY0LW-RESET-MAP-FLAGS = "N"; /* clear flag*/
          FY0LW01.FY0LW-MAP2-1ST-TIME = "Y"; /* 1st time through*/
          FY0LW01.FY0LW-MAP3-1ST-TIME = "Y"; /* 1st time through*/
        end
        FY0L600(); /* Display Inquiry map*/
      end
      if (converseVar.validationMsgNum == 0) /* No errors*/
        FY0LW01.FY0LW-RESET-MAP-FLAGS = "N"; /* reset maps*/
        FY0LM001.FY0LMSEL[FY0LWIXM] = " "; /* Line selected*/
        FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM + 1; /* Increment line count*/
      end
    end
    FY0LW01.FY0LWMAP = "1"; /* Set map 1*/
    FY0LW01.FY0LWFNC = " "; /* Clear function*/
    FY0LW01.FY0LWSWR = "Y"; /* Request for data key*/
  end

end // end FY0L005

// FAST PATH ERROR ROUTINE
Function FY0L006()
   /* -----------------------------------------------------------*/
     /* This error routine is executed from the Main Application*/
     /* Flow if an error has occureddue to an invalid map number,*/
     /* function code, or major error not covered in the Main*/
     /* Process flow.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "FY0L001"; /* Process name*/
  TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
  TA1REC.TA1MAP = FY0LW01.FY0LWMAP; /* Map name*/
  SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  XSPF4(); /* Exit to master menu*/

end // end FY0L006

// FOB by eff. date List Map
Function FY0L100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 1.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (FY0LW01.FY0LWSWR == "Y")
      FY0L110(); /* Obtain the data to display*/
    end
  end

  FY0L120(); /* Format and display the map*/

  FY0L130(); /* Check attention identifier*/

  FY0L140(); /* Reset fields to normal intensity*/

  if (converseVar.validationMsgNum == 0)
    FY0L150(); /* Verify the entered data*/
  end

  if (converseVar.validationMsgNum == 0)
    FY0L160(); /* Process valid input request*/
  end

end // end FY0L100

// OBTAIN THE DATA TO DISPLAY
Function FY0L110()

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  FY0L111(); /* Purge any temporary storage*/

  FY0L112(); /* Select set and open the cursor*/

  FY0L113(); /* See if data exists*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/

    FY0LW01.FY0LWSWC = "N"; /* Initialize end of file switch*/
    FY0LW01.FY0LWIXM = 1; /* Initialize display line*/
    set FY0LW02 empty; /* Clear temporary storage*/

    while (FY0LW01.FY0LWSWC == "N") /* Until cursor end of file*/
      FY0L116(); /* Obtain size range*/
      if (FY0LW01.FY0LWIXM > 11) /* Page is full*/
        FY0L114(); /* Add page to temporary storage*/
        FY0LW01.FY0LWIXM = 1; /* Move 1 to line index*/
      end
      FY0L113(); /* Obtain data and format page*/
    end
    if (FY0LW01.FY0LWSWC == "Y") /* End of file flag*/
      if (FY0LW01.FY0LWIXM > 0 /* And page was formatted*/
       && FY0LW02.FY0LWFCT[1] > " ") /* Something on line*/
        FY0L114(); /* Add page to temporary storage*/
      end
      FY0LW01.FY0LMTSP = 1; /* Initialize page number*/
      FY0LW01.FY0LWSWR = "N"; /* Request for data completed*/
      FY0L115(); /* Close the selected set cursor*/
    end
  end

  if (FY0LW01.TA5TSQIX == 0) /* No data to display*/
    FY0LM001.XXXPRCNM = "FY0L110"; /* Process name*/
    set FY0LM001.SY1STNBR cursor; /* Place cursor at style number*/
    converseLib.validationFailed(21); /* No data to display*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error flag*/
  end

end // end FY0L110

// PURGE ANY TEMPORARY STORAGE
Function FY0L111()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FY0L"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FY0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && TA5REC.TA5RTNCD == 0)          /* No Error was found*/
    FY0LW01.FY0LMTSP = 0; /* Reset current page number*/
    FY0LW01.TA5TSQIX = 0; /* Reset highest page number*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode; /* Csp return code*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    converseLib.validationFailed(10); /* System error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0L111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0LM001"; /* Map name*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error flag*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();
    
  end

end // end FY0L111

// SELECT SET AND OPEN CURSOR
Function FY0L112()

   /* ------------------------------------------------------------*/
   /* Select the set of factory table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set FY4REC empty; /* Clear record*/
  set FYCREC empty; /* Clear record*/

  FY4REC.XGPCD = FY0LW01.XGPCD; /* Search key*/
  if (FY0LW01.FY0LWFCT == " ") /* Something in to factory*/
    FY4REC.FY1FCTYC = "*"; /* Move in defalut*/
  else
    FY4REC.FY1FCTYC = FY0LW01.FY0LWFCT; /* Get factory*/
  end
  FY4REC.SY1STNBR = FY0LW01.SY1STNBR; /* Search key*/
  if (FY0LW01.SY2CLRID == " ") /* Nothing in color id*/
    FY4REC.SY2CLRID = "*"; /* Move in default*/
  else
    FY4REC.SY2CLRID = FY0LW01.SY2CLRID; /* Search key*/
  end
  FY4REC.XDMCD = FY0LW01.XDMCD; /* Search key*/
  FY4REC.XQACD = FY0LW01.XQACD; /* Search key*/
  if (FY0LW01.PC2INSEG == " ") /* Nothing in Spec. diff.*/
    FY4REC.PC2INSEG = "*"; /* Move in default*/
  else
    FY4REC.PC2INSEG = FY0LW01.PC2INSEG; /* Search key*/
  end
  FY4REC.XPGCD = FY0LW01.XPGCD; /* Search key*/
  FY4REC.XUMCD = FY0LW01.XUMCD; /* Search key*/
  FY4REC.XXXSTAT = "*"; /* Search key*/

  if (FY0LW01.XSECD == " ") /* Search key*/
    FY4REC.XSECD = "*";
  else
    FY4REC.XSECD = FY0LW01.XSECD; /* Search key*/
  end

  if (FY0LW01.FY0LWFSD == 0) /* Search key*/
    FY4REC.XSNYR = -1;
  else
    FY4REC.XSNYR = FY0LW01.FY0LWFSD; /* Search key*/
  end

  if (FY0LW01.FY4FOBED == 0) /* Nothing there*/
    FY0LW01.FY0LWBED = 0; /* Nothing there*/
    FY4REC.FY4FOBED = 0; /* Search key*/
    FYCREC.FYCFNC = "S4"; /* Function code*/
  else
    FY4REC.FY4FOBED = FY0LW01.FY4FOBED; /* Search key*/
    FYCREC.FYCFNC = "S4"; /* Function code*/
  end

  if (FY0LW01.FY0LWBED == 0) /* Nothing there*/
    FYCREC.FYC1DATE = 0; /* Search key*/
  else
    FYCREC.FYC1DATE = FY0LW01.FY0LWBED; /* Search key*/
  end

  FYCREC.FYC2DATE = 99999999; /* Search key*/

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error flag*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error flag*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0L112"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF FOB ROWS";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.XGPCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FY0LM001.XXXPRCNM = "FY0L112"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0L112

// FETCH NEXT ROW AND FORMAT
Function FY0L113()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  FYCREC.FYCFNC = "N4";

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Call sucessful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FY0LW01.FY0LWSWC = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
  end


  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0L113"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED FOB ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table view key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0LM001.XXXPRCNM = "FY0L113"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0L113

// ADD PAGE TO TEMPORARY STORAGE
Function FY0L114()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

   /* ** Temp length = 11 rows * 75 chars = 825*/
  FY0LW02.FY0LWLEN = 825; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0L"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  TA5REC.TA5TSQIX = 0; /* Record index*/
  TA5REC.TA5RTNCD = 0; /* Return code*/

  try
    call "TA0050" (FY0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/
    FY0LW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    set FY0LW02 empty; /* Clears temporary storage record*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode; /* Csp return code*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0L114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0LM001"; /* Map name*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FY0LM001.XXXPRCNM = "FY0L114"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/

  end

end // end FY0L114

// CLOSE SELECTED SET
Function FY0L115()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  FYCREC.FYCFNC = "C4";

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (sysVar.errorCode == "00000000" /* Csp return code*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Everything OK*/

        /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Map name*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0L115"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF FOB TABLE ROWS";
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
    TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FY0LM001.XXXPRCNM = "FY0L115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/

  end

end // end FY0L115

// OBTAIN SIZE RANGE
Function FY0L116()

   /* -----------------------------------------------------------*/
     /* THIS PROCESS WILL ACCESS THE PG3REC, WHICH IS THE SIZE*/
     /* RANGE RECORD.*/
   /* -----------------------------------------------------------*/

  set PG3REC empty; /* Clear record*/

  PG3REC.XGPCD = FY0LW01.XGPCD; /* GPC code*/
  PG3REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style number*/
  PG3REC.SY2CLRID = FY4REC.SY2CLRID; /* Color id*/
  PG3REC.XDMCD = FY0LW01.XDMCD; /* Dim. code*/
  PG3REC.XQACD = "**"; /* Quality code*/
  PG3REC.PG3RETCD = "00"; /* Translator return code*/

  PG3REC.PG3FUNCD = "PC"; /* Translator fnc.*/
  PG3REC.PG3DATFM = "N"; /* Compressed/Not compressed sw*/

  TA1REC.TA1PGMNM = "FY0L116"; /* What executes this sgrp*/

  XSPG301(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                   /* SIZE BREAKS.*/

  if (PG3REC.PG3RETCD == "00")

    FY0LW01.FY0LWPRE = 0; /* Set previous price to zero*/
    FY0LW01.FY0LWPIX = 1; /* FOB price index*/

    /* ------------------------------------------------------------*/
       /* THIS LOOP WILL DETERMINE IF THERE ARE ANY PRICES PRESENT*/
       /* IN THE FOB ROW FOR THE SIZES.  IF NONE IT WILL BRANCH TO*/
       /* FY0L117 AND FORMAT A ROW WITHOUT FOB PRICES.*/
    /* ------------------------------------------------------------*/

    while (FY4REC.FY4FOBPR[FY0LWPIX] == 0 /* No prices entered*/
     && FY0LW01.FY0LWPIX != 40)
      FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Add 1 to index*/
    end

    if (FY0LW01.FY0LWPIX == 40)
      FY0L117();
    else

      /* ------------------------------------------------------------*/
         /* THIS LOOP WILL DETERMINE THE SIZE RANGE BASED ON THE FOB*/
         /* PRICE GIVEN.*/

         /* THE FIRST PART OF THE LOOP WILL DETERMINE THE LOW RANGE.*/

         /* THE VALUE OF FY0LPIX AT THIS POINT WILL BE SOME NUMBER*/
         /* GT ZERO AND LE TO 40. THE INDEX WILL BE POINTING TO A*/
         /* VALID PRICE THAT WILL NOT BE ZERO WHEN STARTING THE WHILE*/
         /* LOOP.*/
      /* ------------------------------------------------------------*/

      FY0LW01.FY0LWPRE = 0;

      while (FY0LW01.FY0LWPIX != 40)
        while (FY4REC.FY4FOBPR[FY0LWPIX] == FY0LW01.FY0LWPRE
         && FY0LW01.FY0LWPIX != 40)
          FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Add 1 to index*/

          /* ------------------------------------------------------*/
           /* THE FOLLOWING IF STATEMENT WILL HANDLE ALL $0.00*/
           /* PRICES THAT MIGHT BE EMBEDDED WITHIN A SIZE/PRICE*/
           /* RANGE, SUCH AS, LARGE WHICH MIGHT NOT BE MADE IN THE*/
           /* STYLE ENTERED, WILL ALSO HANDLE THE ZEROS AT THE END*/
           /* OF THE SIZE RANGES.*/
          /* ------------------------------------------------------*/

          if (FY4REC.FY4FOBPR[FY0LWPIX] == 0 /* Price equal $0.00*/
           && FY0LW01.FY0LWPIX != 40)       
            FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Add 1 to index*/
          end
        end

        /* ------------------------------------------------------*/
         /* THE FOLLOWING WILL WILL MOVE ALL VALID FIELDS TO*/
         /* THE W02 RECORD LINE.*/
        /* ------------------------------------------------------*/

        if (FY4REC.FY4FOBPR[FY0LWPIX] != 0   /* Price not equal $0.00*/
         && PG3REC.SY4IDDSC[FY0LWPIX] == " " /* No size discription*/
         && FY0LW01.FY0LWPIX != 40)         
          FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Add 1 to index*/
        end

        FY0LW01.FY0LWPRE = FY4REC.FY4FOBPR[FY0LWPIX];
        FY0LW02.FY4FOBPR[FY0LWIXM] = FY4REC.FY4FOBPR[FY0LWPIX];
        FY0LW02.FY4QTDPR[FY0LWIXM] = FY4REC.FY4QTDPR;
        FY0LW02.FY0LWCDT[FY0LWIXM] = FY4REC.ZZZCHGDT;
        FY0LW02.FY0LWFSZ[FY0LWIXM] = PG3REC.SY4IDDSC[FY0LWPIX];
        FY0LW02.FY0LWDSH[FY0LWIXM] = "-";

        FY0LW01.FY0LWBED = FY4REC.FY4FOBED;

        FY0LW02.FY0LWFCT[FY0LWIXM] = FY4REC.FY1FCTYC;
        FY0LW02.FY0LWCLR[FY0LWIXM] = FY4REC.SY2CLRID;
        FY0LW02.FY0LWSNC[FY0LWIXM] = FY4REC.XSECD;
        FY0LW02.FY0LWSNY[FY0LWIXM] = FY4REC.XSNYR;
        FY0LW02.FY0LWSPC[FY0LWIXM] = FY4REC.PC2INSEG;

        FY0LW02.FY4FOBED[FY0LWIXM] = FY4REC.FY4FOBED;
        FY0LW02.FY0LWEFD[FY0LWIXM] = FY4REC.FY4FOBED;
        FY0LW02.FY4FOXED[FY0LWIXM] = FY4REC.FY4FOXED;
        FY0LW02.FY0LWXED[FY0LWIXM] = FY4REC.FY4FOXED;

        FY0LW02.FY4SMDCT[FY0LWIXM] = FY4REC.FY4SMDCT;
        FY0LW02.XSECD[FY0LWIXM] = FY4REC.XSECD;
        FY0LW02.XSNYR[FY0LWIXM] = FY4REC.XSNYR;

        /* ----------------------------------------------------------*/
           /* THIS SECOND PART OF THE LOOP WILL DETERMINE THE HIGH*/
           /* VALUE IN THE RANGE.*/
        /* ----------------------------------------------------------*/

        while (FY4REC.FY4FOBPR[FY0LWPIX] == FY0LW01.FY0LWPRE
         && FY0LW01.FY0LWPIX != 40)

          if (PG3REC.SY4IDDSC[FY0LWPIX] == " " /* No size discription*/
           && FY4REC.FY4FOBPR[FY0LWPIX] == FY0LW01.FY0LWPRE
           && FY0LW01.FY0LWPIX != 40)         
            FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Add 1 to index*/
          else
            FY0LW02.FY0LWTSZ[FY0LWIXM] = PG3REC.SY4IDDSC[FY0LWPIX];
            FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Add 1 to row index*/
          end

          if (FY4REC.FY4FOBPR[FY0LWPIX] == 0
           && FY0LW01.FY0LWPIX != 40)
            FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Add 1 to row index*/
          end
        end
        FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX - 1; /* Sub 1 from row index*/
        FY0LW01.FY0LWPRE = FY4REC.FY4FOBPR[FY0LWPIX];

        /* ----------------------------------------------------------*/
           /* THIS PART OF THE LOOP WILL DETERMINE IF THERE IS ONE*/
           /* VALUE IN THE RANGE AND IF ONE, IT WILL MOVE THAT VALUE*/
           /* TO THE HIGH VALUE.*/
        /* ----------------------------------------------------------*/

        if (FY0LW02.FY0LWFSZ[FY0LWIXM] > " " /* Something in size*/
         && FY0LW02.FY0LWTSZ[FY0LWIXM] == " ") /* Nothing in size*/
          FY0LW02.FY0LWTSZ[FY0LWIXM] = FY0LW02.FY0LWFSZ[FY0LWIXM];
        end
        if (FY0LW02.FY0LWTSZ[FY0LWIXM] == FY0LW02.FY0LWFSZ[FY0LWIXM])
          FY0LW02.FY0LWFSZ[FY0LWIXM] = " ";
          FY0LW02.FY0LWDSH[FY0LWIXM] = " ";
        end
        FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Add 1 to row index*/

        /* -----------------------------------------------------------*/
           /* THIS PART OF THE LOOP WILL DETERMINE IF THERE IS NO*/
           /* VALUES IN THE RANGE AND IF NONE, WILL BLANK OUT THE LINE*/
           /* AND DECREASE THE LINE COUNT BY ONE.*/
        /* -----------------------------------------------------------*/

        if (FY0LW02.FY0LWFSZ[FY0LWIXM] == " " /* Nothing in first size*/
         && FY0LW02.FY0LWTSZ[FY0LWIXM] == " ") /* Nothing in last size*/
          FY0LW02.FY0LWLIN[FY0LWIXM] = " ";
          FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM - 1; /* Sub 1 from line index*/
        end
        if (FY0LW01.FY0LWIXM >= 11)
          FY0L114(); /* Add page to temp storage*/
          FY0LW01.FY0LWIXM = 0; /* Clear line index*/
        end
        if (FY0LW01.FY0LWPIX != 40)
          FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM + 1; /* Add 1 to line index*/
        end
      end
    end
    if (FY0LW01.FY0LWIXM >= 11)
      FY0L114(); /* Add page to temp storage*/
      FY0LW01.FY0LWIXM = 0; /* Set index to 0*/
    end
    FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM + 1; /* Add 1 to line index*/

  else

    if (PG3REC.PG3RETCD == "09") /* Data in use by someone else*/
      FY0LW01.FY0LWINF = "Y"; /* Turn on soft errror*/
      converseLib.validationFailed(11); /* Deadlock*/
      FY0LM001.XXXPRCNM = "FY0L116"; /* Process name*/
    else
      FY0LW01.FY0LWINF = "N"; /* Turn off soft errror*/
      converseLib.validationFailed(10); /* Unexpected error*/
      FY0LM001.XXXPRCNM = "FY0L116"; /* Process name*/
      exit stack;
    end
  end

end // end FY0L116

// FORM LINE WITH NO PRICES
Function FY0L117()

   /* -----------------------------------------------------------*/
     /* THIS PROCESS WILL ADD A LINE TO THE W02REC WHEN ALL FOB*/
     /* PRICES ARE EQUAL TO $0.00.*/
   /* -----------------------------------------------------------*/

  FY0LW02.FY4FOBPR[FY0LWIXM] = FY4REC.FY4FOBPR;
  FY0LW02.FY4QTDPR[FY0LWIXM] = FY4REC.FY4QTDPR;
  FY0LW02.FY0LWCDT[FY0LWIXM] = FY4REC.ZZZCHGDT;
  FY0LW02.FY0LWFSZ[FY0LWIXM] = PG3REC.SY4IDDSC[FY0LWPIX];

  FY0LW01.FY0LWBED = FY4REC.FY4FOBED;

  FY0LW02.FY0LWFCT[FY0LWIXM] = FY4REC.FY1FCTYC;
  FY0LW02.FY0LWCLR[FY0LWIXM] = FY4REC.SY2CLRID;
  FY0LW02.FY0LWSNC[FY0LWIXM] = FY4REC.XSECD;
  FY0LW02.FY0LWSNY[FY0LWIXM] = FY4REC.XSNYR;
  FY0LW02.FY0LWSPC[FY0LWIXM] = FY4REC.PC2INSEG;
  FY0LW02.FY0LWEFD[FY0LWIXM] = FY4REC.FY4FOBED;
  FY0LW02.FY4FOXED[FY0LWIXM] = FY4REC.FY4FOXED;
  FY0LW02.FY0LWXED[FY0LWIXM] = FY4REC.FY4FOXED;
  FY0LW02.FY4SMDCT[FY0LWIXM] = FY4REC.FY4SMDCT;

end // end FY0L117

// FORMAT AND DISPLAY: LIST MAP
Function FY0L120()

   /* ------------------------------------------------------------*/
   /* If no hard errors to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWINF == "Y") /* No hard error to display*/
    if (converseVar.validationMsgNum == 0) /* No information message*/
      set FY0LM001 initial; /* Clear map output area*/

      if (FY0LW01.FY0LWADD == "Y") /* Add successful*/
        converseLib.validationFailed(99);
        FY0LW01.FY0LWADD = "N";
      end

      if (FY0LW01.FY0LWUPD == "Y") /* Update successful*/
        converseLib.validationFailed(1); /* Update sucessful*/
        FY0LW01.FY0LWUPD = "N";
      end

      FY0L121(); /* Format the selected data*/

    end

    FY0LM001.SY1STNBR = FY0LW01.SY1STNBR; /* Move fields back to map1*/
    FY0LM001.SY1SSTNM = FY0LW01.SY1SSTNM; /* Move fields back to map1*/
    FY0LM001.SY2CLRID = FY0LW01.SY2CLRID;
    if (FY0LW01.SY2CLRID == " ") /* No color*/
      FY0LM001.SY2CLRAB = " "; /* Blank out*/
    else
      FY0LM001.SY2CLRAB = FY0LW01.SY2CLRAB;
    end
    FY0LM001.XDMCD = FY0LW01.XDMCD;
    FY0LM001.XQACD = FY0LW01.XQACD;
    FY0LM001.PC2INSEG = FY0LW01.PC2INSEG;
    FY0LM001.XPGCD = FY0LW01.XPGCD;
    FY0LM001.XSECD = FY0LW01.XSECD;
    FY0LM001.XSNYR = FY0LW01.FY0LWFST;
    FY0LM001.FY1FCTYC = FY0LW01.FY0LWFCT; /* Move factory codes*/
    FY0LM001.FY0LMBED = FY0LW01.FY0LMBED; /* Move factory codes*/

    if (converseVar.validationMsgNum != 0) /* Some message to display*/
      set FY0LM001 alarm; /* Indicate sound alarm*/
    end

  else

    FY0L111(); /* Purge temp storage*/
    set FY0LW02 empty; /* Clear temp strg record*/
    set FY0LM001.FY0LMPGL invisible;
    set FY0LM001.FY0LMOFL invisible;
    FY0LW01.FY0LWIXM = 1; /* Set line index to 1*/
    while (FY0LW01.FY0LWIXM <= 11) /* Until end of lines*/
      set FY0LM001.FY0LMSEL[FY0LWIXM] initialAttributes; /* Set selection dark*/
      FY0LM001.FY0LMSEL[FY0LWIXM] = " "; /* Move spaces to line*/
      FY0LM001.FY0LMFCT[FY0LWIXM] = " ";
      FY0LM001.FY0LMCLR[FY0LWIXM] = " ";
      FY0LM001.FY0LMSEA[FY0LWIXM] = " ";
      FY0LM001.FY0LMSEY[FY0LWIXM] = " ";
      FY0LM001.FY0LMSPC[FY0LWIXM] = " ";
      FY0LM001.FY0LMSIZ[FY0LWIXM] = " ";
      FY0LM001.FY0LMEFD[FY0LWIXM] = 0; /* Move spaces to line*/
      set FY0LM001.FY0LMEFD[FY0LWIXM] skip, invisible; /* Set dark*/
      FY0LM001.FY0LMXED[FY0LWIXM] = 0; /* Move spaces to line*/
      set FY0LM001.FY0LMXED[FY0LWIXM] skip, invisible; /* Set dark*/
      FY0LM001.FY0LMCDT[FY0LWIXM] = 0; /* Move zero to line*/
      set FY0LM001.FY0LMCDT[FY0LWIXM] skip, invisible; /* Set dark*/
      FY0LM001.FY4FOBPR[FY0LWIXM] = 0; /* Move zero to line*/
      set FY0LM001.FY4FOBPR[FY0LWIXM] skip, invisible; /* Set dark*/
      FY0LM001.FY4QTDPR[FY0LWIXM] = 0; /* Move zero to line*/
      set FY0LM001.FY4QTDPR[FY0LWIXM] skip, invisible; /* Set dark*/

      FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM + 1; /* Add 1 to index*/

    end


    set FY0LM001 alarm; /* Indicate sound alarm*/
  end

  if (COMMAREA.XGPCD in XGPTBL.XGPCD
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FY0LM001.XGPCD = COMMAREA.XGPCD; /* GPC Number*/
    FY0LW01.XGPCD = COMMAREA.XGPCD; /* GPC Number*/
    FY0LM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    FY0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    XXXPRCNM = "FY0L120"; /* Process name*/
    converseLib.validationFailed(101); /* Invalid gpc code*/
    set FY0LM001.XGPCD cursor, bold; /* Highlight error*/
  end

  FY0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FY0LW01.FY0LWLSF = "Y"; /* Turn on list screen flag*/

  if (COMMAREA.CAADDFL == "Y") /* User can do adds*/
    set FY0LM001.FY0LMADD skip; /* Display add key*/
  end
  if (COMMAREA.CACHGFL == "Y") /* User can change rows*/
    set FY0LM001.FY0LMCHG skip; /* Display change key*/
  end
  if (COMMAREA.CADELFL == "Y") /* User can change rows*/
    set FY0LM001.FY0LMDEL skip; /* Display delete key*/
  end

  converse FY0LM001 ;

  FY0LW01.FY0LWINF = "Y"; /* Turn on soft error flag*/

end // end FY0L120

// FORMAT THE SELECTED DATA
Function FY0L121()

   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  FY0LW01.FY0LWCSF = "N"; /* Cursor set flag*/

  if (FY0LW01.TA5TSQIX == 0) /* No data to display*/
    set FY0LM001.SY1STNBR cursor; /* Set cursor at style number*/
    return; /* return to previous process*/

  end

  if (FY0LW01.FY0LWSKE > " ") /* Something in key*/
    FY0LW01.FY0LMTSP = 1; /* Search page*/
  end

  FY0LW01.FY0LWCSF = "N"; /* Initialize cursor set flag*/
  FY0LW01.FY0LWDFL = "N"; /* Initialize save flag*/
  while (FY0LW01.FY0LWDFL == "N") /* Save key not found*/
    FY0L122(); /* Read temp. storage page*/
    FY0L123(); /* Find save key*/
  end

  FY0LW01.FY0LWSKE = " "; /* Clear save key*/

  if (FY0LW01.FY0LMTSP != TA5REC.TA5TSQIX) /* Not desired page*/
    FY0L122(); /* Obtain temporary storage page*/
  end

  set FY0LM001.FY0LMPGL skip; /* Display "PAGE" literal*/
  set FY0LM001.FY0LMOFL skip; /* Display "OF" literal*/

  FY0LM001.FY0LMTSP = FY0LW01.FY0LMTSP; /* Current page number*/
  set FY0LM001.FY0LMTSP skip; /* Shows current page number*/
  FY0LM001.TA5TSQIX = FY0LW01.TA5TSQIX; /* Highest page number*/
  set FY0LM001.TA5TSQIX skip; /* Shows highest page number*/

   /* ------------------------------------------------------------*/
    /* THIS FORMAT LOOP WILL HANDEL A CONTROL BREAK WHEN LIKE*/
    /* FIRST P.O. IDS ARE PRESENT.  WHEN A PAGE CHANGE OCCURS*/
    /* THE FIRST LINE WILL BE SHOWN.*/
   /* ------------------------------------------------------------*/

  FY0LW01.FY0LWIXM = 1; /* Initialize line index*/

  while (FY0LW01.FY0LWIXM <= 11) /* Until end of lines*/
    if (FY0LW02.FY0LWFCT[FY0LWIXM] > " ") /* Something in code.*/

      if (FY0LW02.FY0LWFCT[FY0LWIXM] != FY0LW01.FY0LWPFY /* Previous fcty*/
       || FY0LW01.FY0LWIXM == 1)                         /* First line on page*/
        FY0LW01.FY0LWPFY = FY0LW02.FY0LWFCT[FY0LWIXM];
        FY0LM001.FY0LMFCT[FY0LWIXM] = FY0LW02.FY0LWFCT[FY0LWIXM];
        FY0LW01.FY0LWPCL = FY0LW02.FY0LWCLR[FY0LWIXM];
        FY0LM001.FY0LMCLR[FY0LWIXM] = FY0LW02.FY0LWCLR[FY0LWIXM];
        FY0LW01.FY0LWPSC = FY0LW02.FY0LWSNC[FY0LWIXM];
        FY0LM001.FY0LMSEA[FY0LWIXM] = FY0LW02.FY0LWSNC[FY0LWIXM];
        FY0LW01.FY0LWPSY = FY0LW02.FY0LWSNY[FY0LWIXM];
        FY0LM001.FY0LMSEY[FY0LWIXM] = FY0LW02.FY0LWSYY[FY0LWIXM];
        FY0LW01.FY0LWPSP = FY0LW02.FY0LWSPC[FY0LWIXM];
        FY0LM001.FY0LMSPC[FY0LWIXM] = FY0LW02.FY0LWSPC[FY0LWIXM];
        FY0LW01.FY0LWPED = FY0LW02.FY0LWEFD[FY0LWIXM];
        FY0LM001.FY0LMEFD[FY0LWIXM] = FY0LW02.FY0LWEFD[FY0LWIXM];
        FY0LM001.FY0LMXED[FY0LWIXM] = FY0LW02.FY0LWXED[FY0LWIXM];
        FY0LM001.FY4FOBPR[FY0LWIXM] = FY0LW02.FY4FOBPR[FY0LWIXM];
        FY0LM001.FY4QTDPR[FY0LWIXM] = FY0LW02.FY4QTDPR[FY0LWIXM];
        FY0LM001.FY0LMCDT[FY0LWIXM] = FY0LW02.FY0LWCDT[FY0LWIXM];
        set FY0LM001.FY0LMSEL[FY0LWIXM] normal; /* Display select flag*/
      end

      if (FY0LW02.FY0LWCLR[FY0LWIXM] != FY0LW01.FY0LWPCL) /* Prev color*/
        FY0LW01.FY0LWPCL = FY0LW02.FY0LWCLR[FY0LWIXM];
        FY0LM001.FY0LMCLR[FY0LWIXM] = FY0LW02.FY0LWCLR[FY0LWIXM];
        FY0LW01.FY0LWPSC = FY0LW02.FY0LWSNC[FY0LWIXM];
        FY0LM001.FY0LMSEA[FY0LWIXM] = FY0LW02.FY0LWSNC[FY0LWIXM];
        FY0LW01.FY0LWPSY = FY0LW02.FY0LWSNY[FY0LWIXM];
        FY0LM001.FY0LMSEY[FY0LWIXM] = FY0LW02.FY0LWSYY[FY0LWIXM];
        FY0LW01.FY0LWPSP = FY0LW02.FY0LWSPC[FY0LWIXM];
        FY0LM001.FY0LMSPC[FY0LWIXM] = FY0LW02.FY0LWSPC[FY0LWIXM];
        FY0LW01.FY0LWPED = FY0LW02.FY0LWEFD[FY0LWIXM];
        FY0LM001.FY0LMEFD[FY0LWIXM] = FY0LW02.FY0LWEFD[FY0LWIXM];
        FY0LM001.FY0LMXED[FY0LWIXM] = FY0LW02.FY0LWXED[FY0LWIXM];
        FY0LM001.FY4FOBPR[FY0LWIXM] = FY0LW02.FY4FOBPR[FY0LWIXM];
        FY0LM001.FY4QTDPR[FY0LWIXM] = FY0LW02.FY4QTDPR[FY0LWIXM];
        FY0LM001.FY0LMCDT[FY0LWIXM] = FY0LW02.FY0LWCDT[FY0LWIXM];
        set FY0LM001.FY0LMSEL[FY0LWIXM] normal; /* Display select flag*/
      end

      if (FY0LW02.FY0LWSNC[FY0LWIXM] != FY0LW01.FY0LWPSC /* Prev sesn cd*/
       || FY0LW02.FY0LWSNY[FY0LWIXM] != FY0LW01.FY0LWPSY) /* Prev sesn yr*/
        FY0LW01.FY0LWPSC = FY0LW02.FY0LWSNC[FY0LWIXM];
        FY0LM001.FY0LMSEA[FY0LWIXM] = FY0LW02.FY0LWSNC[FY0LWIXM];
        FY0LW01.FY0LWPSY = FY0LW02.FY0LWSNY[FY0LWIXM];
        FY0LM001.FY0LMSEY[FY0LWIXM] = FY0LW02.FY0LWSYY[FY0LWIXM];
        FY0LW01.FY0LWPSP = FY0LW02.FY0LWSPC[FY0LWIXM];
        FY0LM001.FY0LMSPC[FY0LWIXM] = FY0LW02.FY0LWSPC[FY0LWIXM];
        FY0LW01.FY0LWPED = FY0LW02.FY0LWEFD[FY0LWIXM];
        FY0LM001.FY0LMEFD[FY0LWIXM] = FY0LW02.FY0LWEFD[FY0LWIXM];
        FY0LM001.FY0LMXED[FY0LWIXM] = FY0LW02.FY0LWXED[FY0LWIXM];
        FY0LM001.FY4FOBPR[FY0LWIXM] = FY0LW02.FY4FOBPR[FY0LWIXM];
        FY0LM001.FY4QTDPR[FY0LWIXM] = FY0LW02.FY4QTDPR[FY0LWIXM];
        FY0LM001.FY0LMCDT[FY0LWIXM] = FY0LW02.FY0LWCDT[FY0LWIXM];
        set FY0LM001.FY0LMSEL[FY0LWIXM] normal; /* Display select flag*/
      end

      if (FY0LW02.FY0LWSPC[FY0LWIXM] != FY0LW01.FY0LWPSP) /* Prev spec cd*/
        FY0LW01.FY0LWPSP = FY0LW02.FY0LWSPC[FY0LWIXM];
        FY0LM001.FY0LMSPC[FY0LWIXM] = FY0LW02.FY0LWSPC[FY0LWIXM];
        FY0LW01.FY0LWPED = FY0LW02.FY0LWEFD[FY0LWIXM];
        FY0LM001.FY0LMEFD[FY0LWIXM] = FY0LW02.FY0LWEFD[FY0LWIXM];
        FY0LM001.FY0LMXED[FY0LWIXM] = FY0LW02.FY0LWXED[FY0LWIXM];
        FY0LM001.FY4FOBPR[FY0LWIXM] = FY0LW02.FY4FOBPR[FY0LWIXM];
        FY0LM001.FY4QTDPR[FY0LWIXM] = FY0LW02.FY4QTDPR[FY0LWIXM];
        FY0LM001.FY0LMCDT[FY0LWIXM] = FY0LW02.FY0LWCDT[FY0LWIXM];
        set FY0LM001.FY0LMSEL[FY0LWIXM] normal; /* Display select flag*/
      end

      if (FY0LW02.FY0LWEFD[FY0LWIXM] != FY0LW01.FY0LWPED) /* Prev eff dt*/
        FY0LW01.FY0LWPED = FY0LW02.FY0LWEFD[FY0LWIXM];
        FY0LM001.FY0LMEFD[FY0LWIXM] = FY0LW02.FY0LWEFD[FY0LWIXM];
        FY0LM001.FY0LMXED[FY0LWIXM] = FY0LW02.FY0LWXED[FY0LWIXM];
        FY0LM001.FY4FOBPR[FY0LWIXM] = FY0LW02.FY4FOBPR[FY0LWIXM];
        FY0LM001.FY4QTDPR[FY0LWIXM] = FY0LW02.FY4QTDPR[FY0LWIXM];
        FY0LM001.FY0LMCDT[FY0LWIXM] = FY0LW02.FY0LWCDT[FY0LWIXM];
        set FY0LM001.FY0LMSEL[FY0LWIXM] normal; /* Display select flag*/
      end

      FY0LM001.FY0LMSIZ[FY0LWIXM] = FY0LW02.FY0LWSIZ[FY0LWIXM];
      FY0LM001.FY4FOBPR[FY0LWIXM] = FY0LW02.FY4FOBPR[FY0LWIXM];
    else
      FY0LW01.FY0LWIXM = 12; /* Get out of loop*/
    end
    FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM + 1; /* Increment line index*/
  end
  if (FY0LW01.FY0LWCSF == "N") /* Cursor set flag is off*/
    set FY0LM001.FY0LMSEL[1] cursor; /* Puts cursor on first line*/
  end

end // end FY0L121

// READ TEMPORARY STORAGE PAGE
Function FY0L122()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

   /* Temp length = 11 row * 75 chars = 825*/
  FY0LW02.FY0LWLEN = 825; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0L"; /* Application identification*/
  TA5REC.TA5TSQIX = FY0LW01.FY0LMTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  TA5REC.TA5RTNCD = 0; /* Return code*/

  try
    call "TA0050" (FY0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Sucessful call*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/

     /* Next Sentence*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode; /* Csp return code*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0L122"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0LM001"; /* Map name*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FY0LM001.XXXPRCNM = "FY0L122"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/

  end

end // end FY0L122

// LOCATE SAVE KEY
Function FY0L123()

   /* ------------------------------------------------------------*/
   /* LOCATE THE PAGE IN WHICH THE KEY IS LESS THAN OR*/
   /* EQUAL TO THE SAVE KEY.*/
   /* SAVE KEY = FY0LWCSK*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWSKE == " ") /* No key saved*/
    FY0LW01.FY0LWDFL = "Y"; /* Indicate key found*/
  else

    FY0LW01.FY0LWIXM = 1; /* Initialize index*/

    while (FY0LW01.FY0LWIXM <= 11 /* Until key is found*/
     && FY0LW01.FY0LWDFL == "N")
      if (FY0LW02.FY0LWFCT[FY0LWIXM] == FY0LW01.FY0LWFCD
       && FY0LW02.FY0LWCLR[FY0LWIXM] == FY0LW01.FY0LWCCD)
        set FY0LM001.FY0LMSEL[FY0LWIXM] cursor; /* Initial cursor*/
        FY0LW01.FY0LWDFL = "Y"; /* Indicate key was found*/
        FY0LW01.FY0LWCSF = "Y"; /* Turn on cursor set flag*/
        FY0LW01.FY0LWSKE = " "; /* Reset save key*/
      else
        if (FY0LW02.FY0LWFCT[FY0LWIXM] == " ") /* No more fcty. ID*/
          if (FY0LW01.FY0LWIXM == 1) /* No data on page*/
            if (FY0LW01.FY0LMTSP == 1) /* first page*/

                  /* NEXT SENTENCE*/

            else
              FY0LW01.FY0LWIXM = 12; /* Index to last entry*/
              FY0LW01.FY0LMTSP = FY0LW01.FY0LMTSP - 1; /* decrement page*/
            end
          else
            FY0LW01.FY0LWIXM = 1; /* Move 1 to index*/
          end
          set FY0LM001.FY0LMSEL[FY0LWIXM] cursor; /* Initial cursor*/
          FY0LW01.FY0LWDFL = "Y"; /* Indicate page was found*/
          FY0LW01.FY0LWCSF = "Y"; /* Turn on cursor set flag*/
          FY0LW01.FY0LWSKE = " "; /* Reset save key*/
        else
          if (FY0LW02.FY0LWFCT[FY0LWIXM] >= FY0LW01.FY0LWFCD
           && FY0LW02.FY0LWCLR[FY0LWIXM] >= FY0LW01.FY0LWCCD)
            if (FY0LW01.FY0LWIXM == 1) /* Key not on page*/
              if (FY0LW01.FY0LMTSP == 1) /* first page*/

                    /* NEXT SENTENCE*/

              else
                FY0LW01.FY0LWIXM = 12; /* Index to last entry*/
                FY0LW01.FY0LMTSP = FY0LW01.FY0LMTSP - 1; /* decrement page*/
              end
            else
            end
            set FY0LM001.FY0LMSEL[FY0LWIXM] cursor; /* Initial cursor*/
            FY0LW01.FY0LWDFL = "Y"; /* Indicate page was found*/
            FY0LW01.FY0LWCSF = "Y"; /* Turn on cursor set flag*/
            FY0LW01.FY0LWSKE = " "; /* Reset save key*/
          else
            FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM + 1; /* Increment index*/
          end
        end
      end
    end

    if (FY0LW01.FY0LWDFL == "Y") /* Key found*/

          /* NEXT SENTENCE*/

    else
      if (FY0LW01.FY0LMTSP == FY0LW01.TA5TSQIX) /* Last page*/
        FY0LW01.FY0LWIXM = 1; /* Set index to last entry*/
        set FY0LM001.FY0LMSEL[FY0LWIXM] cursor; /* Initial cursor*/
        FY0LW01.FY0LWDFL = "Y"; /* Indicate page was found*/
        FY0LW01.FY0LWCSF = "Y"; /* Turn on cursor set flag*/
        FY0LW01.FY0LWSKE = " "; /* Reset save key*/
      else
        FY0LW01.FY0LMTSP = FY0LW01.FY0LMTSP + 1; /* Increment page*/
      end
    end
  end

end // end FY0L123

// CHECK ATTENTION IDENTIFIERS
Function FY0L130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0LM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FY0L111(); /* Purge any temporary storage*/
      COMMAREA.CATOAP = FY0LM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0LM001.CAITEM; /* To application*/

      XSFY001(); /* Exit to another application*/
      set FY4REC empty; /* Clear record*/
      FY4REC.XGPCD = COMMAREA.XGPCD; /* Reset load key*/
      FY0LW01.FY0LWSWR = "Y"; /* Set request for data to yes*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0LW01.FY0LWINF = "Y"; /* Turn on soft errror*/
      FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    end

    set FY0LM001.CATOAP cursor, bold; /* Highlight*/
    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0LM001"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end
    FY0L111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    FY0L111(); /* Purge temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 key pressed*/
   && COMMAREA.CAADDFL == "N")     /* Not able to ADD*/
    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid key*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft errror*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 key pressed*/
   && COMMAREA.CACHGFL == "N")     /* Not able to CHANGE*/
    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid key*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft errror*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 key pressed*/
   && FY0LM001.XGPCD == " ")       /* Nothing on map1*/
    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    converseLib.validationFailed(101); /* Must have valid GPC code*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft errror*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf15 /* PF15 key pressed*/
   && COMMAREA.CADELFL == "N")     /* Not able to DELETE*/
    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid key*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft errror*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0C"; /* Set to factory application*/
    FY0L111(); /* Purge temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0F"; /* Set to factory/style*/
    FY0L111(); /* Purge temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is enter /* Enter key pressed*/
   && COMMAREA.CAINQFL == "N")      /* User cannot do inquiry*/
    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid attention key*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft errror*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* PF15 was not pressed*/

    FY0LM001.XXXPRCNM = "FY0L130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft errror*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end

end // end FY0L130

// RESET HIGHLIGHTED FIELDS
Function FY0L140()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  FY0LW01.FY0LWIXM = 1; /* Initialize line index*/

  while (FY0LW01.FY0LWIXM <= 11) /* Until end of lines*/
    if (FY0LM001.FY0LMFCT[FY0LWIXM] > " ") /* Line was formatted*/
      set FY0LM001.FY0LMSEL[FY0LWIXM] normal; /* Reset select flag*/
    end
    FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM + 1; /* Increment line index*/
  end

  set FY0LM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0LM001.CAITEM initialAttributes; /* Commarea application data*/


  set FY0LM001.XGPCD normal; /* Reset to normal*/
  set FY0LM001.SY1STNBR normal; /* Reset to normal*/
  set FY0LM001.SY2CLRID normal; /* Reset to normal*/
  set FY0LM001.XDMCD normal; /* Reset to normal*/
  set FY0LM001.XQACD normal; /* Reset to normal*/
  set FY0LM001.PC2INSEG normal; /* Reset to normal*/
  set FY0LM001.XPGCD normal; /* Reset to normal*/
  set FY0LM001.XSECD normal; /* Reset to normal*/
  set FY0LM001.XSNYR normal; /* Reset to normal*/
  set FY0LM001.FY0LMBED normal; /* Reset to normal*/

   /* ------------------------------------------------------------*/
   /* CHECK TO SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/
    FY0L141(); /* Pop-up window check*/
  end

end // end FY0L140

// CHECK FOR ? BY USER
Function FY0L141()


   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0LM001.XGPCD == "?" /* if ? in gpc code field*/
   || FY0LM001.XDMCD == "?" /* if ? in dimension code field*/
   || FY0LM001.XQACD == "?" /* if ? in quality code field*/
   || FY0LM001.XPGCD == "?" /* if ? in package code field*/
   || FY0LM001.XSECD == "?") /* if ? in season code field*/

       /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0LM001.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                 GPC CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0LM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0LM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      set FY0LM001.XGPCD cursor;
    else
      FY0LM001.XGPCD = " "; /* clear fields*/
      FY0LM001.XGPDESC = " ";
      set FY0LM001.XGPCD cursor;
    end
  end

  if (FY0LM001.XDMCD == "?") /* if ? in Dim. code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                DIM. CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXDM01(); /* perform Dim. code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Dim.       **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0LW01.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      set FY0LM001.XDMCD cursor, modified;
    else
      FY0LW01.XDMCD = " "; /* clear fields*/
      set FY0LM001.XDMCD cursor, modified;
    end
  end

  if (FY0LM001.XQACD == "?") /* if ? in Quality code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "             QUALITY CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXQA01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Quality    **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0LW01.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      set FY0LM001.XQACD cursor, modified;
    else
      FY0LW01.XQACD = " "; /* clear fields*/
      set FY0LM001.XQACD cursor, modified;
    end
  end


  if (FY0LM001.XPGCD == "?") /* if ? in Package code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "          PACKAGE TYPE CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXPG01(); /* perform Package code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Package    **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0LW01.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* move code*/
      set FY0LM001.XPGCD cursor, modified;
    else
      FY0LW01.XPGCD = " "; /* clear fields*/
      set FY0LM001.XPGCD cursor, modified;
    end
  end


  if (FY0LM001.XSECD == "?") /* if ? in Season code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                SEASON CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXSE01(); /* perform Season code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Season     **/
     /* *  table code to the map.                               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0LW01.XSECD = XSETBL.XSECD[XX0XWPIX]; /* move code*/
      set FY0LM001.XSECD cursor, modified;
    else
      FY0LW01.XSECD = " "; /* clear fields*/
      set FY0LM001.XSECD cursor, modified;
    end
  end

  converseLib.clearScreen();
   /* restore the original map*/

  converseLib.validationFailed(121); /* Enter next request*/

  exit stack;


end // end FY0L141

// VERIFY THE ENTERED DATA
Function FY0L150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf13) /* Add not requested*/

    if (FY0LM001.CAITEM > " ") /* Application data was entered*/

      set FY0LM001.CAITEM cursor, bold; /* Highlight data*/
      converseLib.validationFailed(7); /* Enter only with FAST PATH*/
      FY0LW01.FY0LWINF = "Y"; /* Turn off soft error*/
      FY0LM001.XXXPRCNM = "FY0L150"; /* Process name*/

    end

    if (converseVar.validationMsgNum == 0) /* No errors*/
      if (converseVar.eventKey is pf7 /* Scroll back request*/
       || converseVar.eventKey is pf8) /* or scroll forward request*/

        FY0L151(); /* Verify scroll request*/

      else

        FY0L152(); /* Verify any changed data*/
        FY0L154(); /* Verify style/color data*/
        FY0L155(); /* Verify p.o. id date-required*/
        FY0L157(); /* Clear screen if any hard errors*/

      end
    end
  end

end // end FY0L150

// VERIFY SCROLL REQUEST
Function FY0L151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FY0LW01.FY0LMTSP < 2)       /* and no previous pages*/
    FY0LM001.XXXPRCNM = "FY0L151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FY0LW01.FY0LMTSP >= FY0LW01.TA5TSQIX) /* and no more pages*/
    FY0LM001.XXXPRCNM = "FY0L151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
  end

  FY0LW01.FY0LWIXM = 11; /* Initialize line index*/

  while (FY0LW01.FY0LWIXM > 0) /* Until end of lines*/
    if (FY0LM001.FY0LMSEL[FY0LWIXM] != FY0LW02.FY0LMSEL[FY0LWIXM])
      set FY0LM001.FY0LMSEL[FY0LWIXM] cursor, bold; /* Highlight*/
      FY0LM001.XXXPRCNM = "FY0L151"; /* Process name*/
      converseLib.validationFailed(14); /* A line may not be selected*/
      FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
    end
    FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM - 1; /* Decrement line count*/
  end

end // end FY0L151

// VERIFY ANY CHANGED DATA
Function FY0L152()

  if (converseVar.validationMsgNum == 0) /* No errors*/

    if (converseVar.eventKey is pf13) /* PF13 key pressed (ADD)*/

          /* NEXT SENTENCE*/

    end
    if (converseVar.eventKey is pf14 /* PF14 key pressed (CHANGE)*/
     || converseVar.eventKey is pf15 /* PF15 key pressed (DELETE)*/
     || converseVar.eventKey is enter) /* Enter key pressed (INQUIRE)*/

      FY0L153(); /* Selection check loop*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If enter key is pressed*/
    if (FY0LM001.XGPCD == FY0LW01.XGPCD) /* Existing GPC code same*/
      if (FY0LM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
        FY0LW01.XGPCD = FY0LM001.XGPCD;
        FY0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
        FY0LM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
        FY0LM001.XGPCD = FY0LW01.XGPCD;
        FY0LW01.FY0LWSWR = "Y"; /* Turn on request for data*/
      end
    else
      if (FY0LM001.XGPCD != FY0LW01.XGPCD) /* If GPC different*/
        if (FY0LM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
         && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
          COMMAREA.XGPCD = FY0LM001.XGPCD;
          FY0LM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
          FY0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
          FY0LM001.XGPCD = COMMAREA.XGPCD;
          FY0LW01.FY0LWSWR = "Y"; /* Turn on request for data*/
        else
          COMMAREA.XGPCD = FY0LM001.XGPCD;
          set FY0LM001.XGPCD cursor, modified, bold; /* Highlight GPC code*/
          FY0LW01.XGPCD = " ";
          FY0LW01.XGPDESC = " "; /* Description*/
          FY0LM001.XXXPRCNM = "FY0L152"; /* Process name*/
          converseLib.validationFailed(101); /* Must have valid GPC code*/
          FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
        end
      else
        FY0LM001.XGPDESC = " "; /* Description*/
        set FY0LM001.XGPCD cursor, modified, bold; /* Highlight GPC code*/
        FY0LW01.XGPCD = " ";
        FY0LW01.XGPDESC = " "; /* Description*/
        FY0LM001.XXXPRCNM = "FY0L152"; /* Process name*/
        converseLib.validationFailed(101); /* Must have valid GPC code*/
        FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

   /* ============================================================*/
    /* Validation of table items entered will take place in this*/
    /* process: SEASON, QUALITY, SPEC. DIFF., PACKAGE TYPE,*/
    /* UNIT of MEASURE, DIMENSION and GPC CODES.*/

   /* ======================START CHECK===========================*/

   /* ------------------------------------------------------------*/
   /* PACKAGE TYPE CHECK*/
   /* ------------------------------------------------------------*/

  FY0LW01.XPGCD = FY0LM001.XPGCD;
  if (FY0LM001.XPGCD > " ") /* If something in PACKAGE code*/
    if (FY0LM001.XPGCD in XPGTBL.XPGCD /* If PACKAGE code in table*/
     && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

            /* NEXT SENTENCE*/

    else
      set FY0LM001.XPGCD cursor, bold; /* Highlight PACKAGE code*/
      FY0LM001.XXXPRCNM = "FY0L152"; /* Process name*/
      FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
      converseLib.validationFailed(79); /* Must have valid PACKAGE code*/
    end
  else
    set FY0LM001.XPGCD cursor, bold; /* Highlight PACKAGE code*/
    FY0LM001.XXXPRCNM = "FY0L152"; /* Process name*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
    converseLib.validationFailed(79); /* Must have valid PACKAGE code*/
  end

   /* ------------------------------------------------------------*/
   /* DIMENSION CHECK*/
   /* ------------------------------------------------------------*/

  FY0LW01.XDMCD = FY0LM001.XDMCD;
  if (FY0LM001.XDMCD > " ") /* If something in DIMN. code*/
    if (FY0LM001.XDMCD in XDMTBL.XDMCD /* If DIMN. code in table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

          /* NEXT SENTENCE*/

    else
      set FY0LM001.XDMCD cursor, bold; /* Highlight DIMN. code*/
      FY0LM001.XXXPRCNM = "FY0L152"; /* Process name*/
      FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
      converseLib.validationFailed(78); /* Must have valid DIMN. code*/
    end
  else
    set FY0LM001.XDMCD cursor, bold; /* Highlight DIMN. code*/
    FY0LM001.XXXPRCNM = "FY0L152"; /* Process name*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
    converseLib.validationFailed(78); /* Must have valid DIMN. code*/
  end

   /* ------------------------------------------------------------*/
   /* QUALITY CODE CHECK*/
   /* ------------------------------------------------------------*/

  FY0LW01.XQACD = FY0LM001.XQACD;
  if (FY0LM001.XQACD > " ") /* If something in QUALITY code*/
    if (FY0LM001.XQACD in XQATBL.XQACD /* If QUALITY code in table*/
     && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

            /* NEXT SENTENCE*/

    else
      set FY0LM001.XQACD cursor, bold; /* Highlight QUALITY code*/
      FY0LM001.XXXPRCNM = "FY0L152"; /* Process name*/
      converseLib.validationFailed(76); /* Must have valid QUALITY code*/
      FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
    end
  else
    set FY0LM001.XQACD cursor, bold; /* Highlight QUALITY code*/
    FY0LM001.XXXPRCNM = "FY0L152"; /* Process name*/
    converseLib.validationFailed(76); /* Must have valid QUALITY code*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
  end

   /* ------------------------------------------------------------*/
   /* INVENTORY SEGMENT CODE*/
   /* ------------------------------------------------------------*/

  FY0LW01.PC2INSEG = FY0LM001.PC2INSEG;
  if (FY0LM001.PC2INSEG > " ") /* If something in SPEC code*/
    PC2REC.XGPCD = FY0LM001.XGPCD;
    PC2REC.PC2INSEG = FY0LM001.PC2INSEG;
    FY0LS97(); /* Select dproda.vprdcu01 row*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      set FY0LM001.PC2INSEG cursor, bold; /* Highlight SPEC code*/
      FY0LM001.XXXPRCNM = "FY0L152"; /* Process name*/
      FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
      converseLib.validationFailed(77); /* Must have valid SPEC code*/
    end
  else
    FY0LW01.PC2INSEG = " ";
  end

   /* ------------------------------------------------------------*/
   /* SEASON CODE CHECK*/
   /* ------------------------------------------------------------*/


   /* ************Y2K IN********************/
   /* OR FY0LM001.XSNYR GT 0;*/
  if (FY0LM001.XSECD > " "
   || FY0LM001.XSNYR < 0
   || FY0LM001.XSNYR > 99)
   /* ************Y2K OUT*******************/
    FY0LW01.XSECD = FY0LM001.XSECD;
    FY0LW01.FY0LWFSD = 0; /* Clear season year*/
    FY0LW01.XSNYR = FY0LM001.XSNYR;
   /* ************Y2K IN********************/
   /* IF FY0LM001.XSNYR GT 0;        /* If something in SEASON YEAR*/
    if (FY0LM001.XSNYR >= 0
     && FY0LM001.XSNYR <= 99)
   /* ************Y2K OUT*******************/
      if (FY0LM001.XSNYR > 57) /* If something in SEASON YEAR*/
        FY0LW01.FY0LWFSD = FY0LM001.XSNYR + 1900; /* Full season year*/
      else
        FY0LW01.FY0LWFSD = FY0LM001.XSNYR + 2000; /* Full season year*/
      end
    end

    sysVar.arrayIndex = 1;
    FY0LW01.FY0LWXSF = "N";
    while (FY0LW01.FY0LWXSF == "N")
      if (YSNTBL.XGPCD[sysVar.arrayIndex] == FY0LM001.XGPCD
       && YSNTBL.XDR-PROD-REG-CD[sysVar.arrayIndex] == TABREC.XDR-PROD-REG-CD
       && YSNTBL.XSECD[sysVar.arrayIndex] == FY0LW01.XSECD
       && YSNTBL.XSNYR[sysVar.arrayIndex] == FY0LW01.FY0LWFSD)
        FY0LW01.FY0LWXSF = "Y"; /* End of season flag.*/
      else
        if (YSNTBL.XSECD[sysVar.arrayIndex] == "99")
          FY0LW01.FY0LWXSF = "Y"; /* End of season flag.*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex + 1;
        end
      end
    end

    if (YSNTBL.XSECD[sysVar.arrayIndex] == "99")
      set FY0LM001.XSNYR cursor, bold; /* Highlight SEASON YEAR*/
      FY0LM001.XXXPRCNM = "FY0L152"; /* Process name*/
      FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
      converseLib.validationFailed(75); /* Must have valid SEASON YEAR*/
    end
  end

   /* ============================================================*/
   /* =======================END CHECK============================*/

end // end FY0L152

// SELECTION CHECK LOOP
Function FY0L153()

   /* ------------------------------------------------------------*/
   /* See if a 'S'election was made.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/

    /* ------------------------------------------------------------*/
     /* See if any field has changed.*/
    /* ------------------------------------------------------------*/

    if (FY0LW01.XGPCD == FY0LM001.XGPCD       /* Same GPC code*/
     && FY0LW01.SY1STNBR == FY0LM001.SY1STNBR /* Same style number*/
     && FY0LW01.SY2CLRID == FY0LM001.SY2CLRID /* Same color number*/
     && FY0LW01.XDMCD == FY0LM001.XDMCD       /* Same etc.*/
     && FY0LW01.XQACD == FY0LM001.XQACD       
     && FY0LW01.PC2INSEG == FY0LM001.PC2INSEG 
     && FY0LW01.XPGCD == FY0LM001.XPGCD       
     && FY0LW01.XSECD == FY0LM001.XSECD       
     && FY0LW01.XSNYR == FY0LM001.XSNYR       
     && FY0LW01.FY0LWFCT == FY0LM001.FY1FCTYC /* Same factory code*/
     && FY0LW01.FY0LMBED == FY0LM001.FY0LMBED) /* Same date*/

      FY0LW01.FY0LWIXM = 11; /* Initialize line index*/

      while (FY0LW01.FY0LWIXM > 0) /* Until end of lines*/
        if (FY0LM001.FY0LMSEL[FY0LWIXM] == " " /* If selection blank*/
         || FY0LM001.FY0LMSEL[FY0LWIXM] == "S") /* (S)election made*/
           /* next sentence*/
        else
          set FY0LM001.FY0LMSEL[FY0LWIXM] cursor, bold; /* Highlight*/
          FY0LM001.XXXPRCNM = "FY0L153"; /* Process name*/
          FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
          converseLib.validationFailed(13); /* Only a 'S' is allowed*/
        end
        FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM - 1; /* Decrement line number*/
      end
      if (converseVar.validationMsgNum == 0) /* No errors*/
        if (FY0LM001.FY0LMFCT[1] > " ") /* There is something there*/
          if ("S" in FY0LM001.FY0LMSEL) /* There is a S*/

                /* NEXT SENTENCE*/

          else
            FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
            FY0LM001.XXXPRCNM = "FY0L153"; /* Process name*/
            converseLib.validationFailed(53); /* You must make a selection*/
          end
        end
      end
    end
  end

end // end FY0L153

// VERIFY STYLE/COLOR
Function FY0L154()

   /* ------------------------------------------------------------*/
   /* SEE IF COLOR/STYLE ENTERED*/
   /* ------------------------------------------------------------*/

  if (FY0LM001.SY1STNBR == " ") /* If style not entered or erased*/
    FY0LW01.SY1STNBR = " "; /* clear the style and color fields*/
    FY0LW01.SY2CLRAB = " ";
    FY0LM001.SY2CLRAB = " ";
    FY0LW01.SY2CLRID = " ";
    FY0LM001.SY2CLRID = " ";
    FY0LW01.SY1SSTNM = " ";
    FY0LM001.SY1SSTNM = " ";
    converseLib.validationFailed(73); /* Data must be entered*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
    FY0LW01.FY0LWSWR = "N"; /* Turn off request for data*/
    FY0LM001.XXXPRCNM = "FY0L154"; /* Process name*/
    set FY0LM001.SY1STNBR cursor, bold; /* Highlight*/
  end

  if (FY0LM001.SY2CLRID == " ") /* If color not entered*/
    FY0LW01.SY2CLRID = " "; /* clear the color fields*/
    FY0LW01.SY2CLRAB = " ";
    FY0LM001.SY2CLRAB = " ";

  end

   /* ------------------------------------------------------------*/
   /* Fetch the row from the STYLE/COLOR set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (FY0LM001.SY1STNBR > " " /* Style entered*/
   && FY0LM001.SY2CLRID > " ") /* Color entered*/
    PG2REC.XGPCD = FY0LM001.XGPCD; /* Search key*/
    PG2REC.SY1STNBR = FY0LM001.SY1STNBR;
    PG2REC.SY2CLRID = FY0LM001.SY2CLRID;
    PG2REC.XDMCD = FY0LM001.XDMCD;

    FY0LW01.SY1STNBR = FY0LM001.SY1STNBR;
    FY0LW01.SY2CLRID = FY0LM001.SY2CLRID;

    XSPG202(); /* Get the row for style/color/dim*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/
      FY0LW01.SY1SSTNM = PG2REC.SY1SSTNM;
      FY0LW01.SY2CLRAB = PG2REC.SY2CLRAB;
      FY0LW01.XUMCD = PG2REC.XUMCD;

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Does not exist*/
        converseLib.validationFailed(73); /* Invalid Style/color*/
        FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
        FY0LW01.FY0LWSWR = "N"; /* Turn off request for data*/
        FY0LW01.SY1STNBR = " ";
        FY0LW01.SY2CLRID = " ";
        set FY0LM001.SY1STNBR cursor, bold; /* Highlight*/
        set FY0LM001.SY2CLRID bold;
        FY0LM001.XXXPRCNM = "FY0L154"; /* Process name*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* Dead-lock*/
          converseLib.validationFailed(11); /* Indicate not available*/
          FY0LW01.FY0LWINF = "N"; /* Turn on soft error*/
          FY0LW01.FY0LWSWR = "N"; /* Turn off request for data*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/
          FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
          FY0LW01.FY0LWSWR = "N"; /* Turn off request for data*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        end
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "FY0L154"; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE STYLE/COLOR ROW";
        TA1REC.TA1MAP = "FY0LM001"; /* Map name*/
        TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
        TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

        FY0LM001.XXXPRCNM = "FY0L154"; /* Process name*/

      end
    end
  end


  if (FY0LM001.SY1STNBR > " " /* Style entered*/
   && FY0LM001.SY2CLRID == " ") /* Color not entered*/
    PG2REC.XGPCD = FY0LM001.XGPCD; /* Search key*/
    PG2REC.SY1STNBR = FY0LM001.SY1STNBR;

    FY0LW01.SY2CLRAB = " ";
    FY0LW01.SY1STNBR = FY0LM001.SY1STNBR;
    FY0LW01.SY2CLRID = FY0LM001.SY2CLRID;

    XSPG201(); /* Get the row for style/color/dim*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/
      FY0LW01.SY1SSTNM = PG2REC.SY1SSTNM;
      FY0LW01.XUMCD = PG2REC.XUMCD;

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Does not exist*/
        converseLib.validationFailed(73); /* Invalid Style/color*/
        FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
        FY0LW01.FY0LWSWR = "N"; /* Turn off request for data*/
        set FY0LM001.SY1STNBR cursor, bold; /* Highlight*/
        FY0LW01.SY1SSTNM = " ";
        FY0LM001.XXXPRCNM = "FY0L154"; /* Process name*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* Dead-lock*/
          converseLib.validationFailed(11); /* Indicate not available*/
          FY0LW01.FY0LWINF = "N"; /* Turn on soft error*/
          FY0LW01.FY0LWSWR = "N"; /* Turn off request for data*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/
          FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
          FY0LW01.FY0LWSWR = "N"; /* Turn off request for data*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        end
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "FY0L154"; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE STYLE/COLOR ROW";
        TA1REC.TA1MAP = "FY0LM001"; /* Map name*/
        TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
        TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

        FY0LM001.XXXPRCNM = "FY0L154"; /* Process name*/

      end
    end
  end

end // end FY0L154

// Eff. date VALIDATION
Function FY0L155()

   /* ------------------------------------------------------------*/
   /* DATE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (FY0LM001.FY0LMBED == 0) /* Nothing there*/

    FY0LW01.FY0LMBED = 0; /* Move in date*/
    FY0LW01.FY0LWBED = 0; /* Beginning date*/
    FY0LW01.FY0LWFED = 0; /* Beginning date*/

  else

    /* ------------------------------------------------------------*/
     /* DATE VALIDATION*/
    /* ------------------------------------------------------------*/

    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
    TA2REC.TA2GRTYP = "A"; /* Move in date type*/
    TA2REC.TA2GRGAN = FY0LM001.FY0LMBED; /* Move in date*/
    FY0LW01.FY0LMBED = FY0LM001.FY0LMBED; /* Move in date*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date validation*/

    if (sysVar.errorCode == "00000000") /* Good call*/
      if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
        FY0LW01.FY4FOBED = TA2REC.TA2GRGAN; /* Move in date*/
        FY0LW01.FY0LMBED = TA2REC.TA2GRGAN; /* Move in date*/
        FY0LW01.FY0LWBED = TA2REC.TA2GRGGN; /* Beginning date*/
      else
        set FY0LM001.FY0LMBED cursor, bold; /* Highlight error*/
        converseLib.validationFailed(62); /* Invalid date*/
        FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
        FY0LM001.XXXPRCNM = "FY0L155"; /* Process name*/
      end
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0L155"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end
  end

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (FY0LM001.FY1FCTYC == " ") /* Nothing there*/

    FY0LW01.FY0LWFCT = FY0LM001.FY1FCTYC; /* Search key*/

  else

    FY1REC.FY1FCTYC = FY0LM001.FY1FCTYC; /* Search key*/
    FY0LW01.FY0LWFCT = FY0LM001.FY1FCTYC;
    FY1REC.XGPCD = FY0LM001.XGPCD; /* Search key*/

    FY0LS03(); /* Fetch the factory row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (FY1REC.XXXSTAT == "A")
        FY0LW01.FY1FCTYC = FY0LM001.FY1FCTYC;
        FY0LW01.FY0LWFCT = FY0LM001.FY1FCTYC;
        FY0LW01.FY1MSCPC = FY1REC.FY1MSCPC;
        FY0LW01.FY1BGDPC = FY1REC.FY1BGDPC;
        FY0LW01.FY1FRGN = FY1REC.FY1FRGN;
      else
        converseLib.validationFailed(67); /* Factory inactive*/
        FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
        FY0LM001.XXXPRCNM = "FY0L155"; /* Process name*/
        set FY0LM001.FY1FCTYC cursor, bold; /* Highlight error*/
        FY0LW01.FY0LWSWR = "N"; /* Set request for data off*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(33); /* Factory code missing/invalid*/
        FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
        FY0LM001.XXXPRCNM = "FY0L155"; /* Process name*/
        set FY0LM001.FY1FCTYC cursor, bold; /* Highlight error*/
        FY0LW01.FY0LWSWR = "N"; /* Set request for data off*/
      end
    end
  end

end // end FY0L155

// CLEAR SCREEN IF ANY ERRORS
Function FY0L157()

   /* -----------------------------------------------------------*/
    /* IF THE INFORMATION FLAG IS SET TO N  CLEAR LINES 1-11.*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No messages*/

    FY0LW01.FY0LWSWR = "Y"; /* Turn on request for data*/

  else

    if (FY0LW01.FY0LWINF == "N") /* Hard error*/

      FY0LM001.FY0LMTSP = 0; /* Set page no. to 0*/
      FY0LM001.TA5TSQIX = 0; /* Set highest page no. to 0*/
      set FY0LM001.FY0LMPGL invisible;
      set FY0LM001.FY0LMOFL invisible;
      FY0LW01.FY0LWIXM = 1; /* Set line index to 1*/

      while (FY0LW01.FY0LWIXM <= 11) /* Until end of lines*/
        set FY0LM001.FY0LMSEL[FY0LWIXM] initialAttributes; /* Set dark*/
        FY0LM001.FY0LMFCT[FY0LWIXM] = " "; /* Clear the line*/
        FY0LM001.FY0LMCLR[FY0LWIXM] = " ";
        FY0LM001.FY0LMSEA[FY0LWIXM] = " ";
        FY0LM001.FY0LMSPC[FY0LWIXM] = " ";
        FY0LM001.FY0LMEFD[FY0LWIXM] = 0;
        FY0LM001.FY0LMXED[FY0LWIXM] = 0;
        FY0LM001.FY0LMSIZ[FY0LWIXM] = " ";
        FY0LM001.FY4FOBPR[FY0LWIXM] = 0;
        FY0LM001.FY4QTDPR[FY0LWIXM] = 0;
        FY0LM001.FY0LMCDT[FY0LWIXM] = 0;

        FY0LW01.FY0LWIXM = FY0LW01.FY0LWIXM + 1; /* Add 1 to index*/

      end
    end
  end

end // end FY0L157

// PROCESS VALID INPUT REQUEST
Function FY0L160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (FY0LM001.XGPCD == FY0LW01.XGPCD /* GPC codes match*/
   && converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7) /* Scroll back requested*/
      FY0LW01.FY0LMTSP = FY0LW01.FY0LMTSP - 1; /* Decrement page number*/
    end

    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      FY0LW01.FY0LMTSP = FY0LW01.FY0LMTSP + 1; /* Increment page number*/
    end

    if (converseVar.eventKey is pf13) /* PF13 key pressed (ADD)*/
      set FY0LM002 initial; /* clear map 2*/
      set FY0LM003 initial; /* clear map 3*/
      FY0LW01.FY0LWMAP = "2"; /* Map 2 to be displayed*/
      FY0LW01.FY0LWFNC = "A"; /* Function code is add*/
      FY0LW01.FY0LMUAC = "Y"; /* Init update all colors flag*/
      FY0LW01.FY0LWDEF = "N"; /* Init data entered flag*/
      FY0LW01.FY0LW-MAP3-DEF = "N"; /* Init data entered flag*/
      if (FY0LW01.SY1STNBR > " ") /* Style was entered*/
        if (FY0LW02.FY0LWCLR[1] > " " /* and color available*/
         || FY0LM001.SY2CLRID > " ") 
          if (FY0LW02.FY0LWCLR[1] > " ")
            FY0LW01.SY2CLRID = FY0LW02.FY0LWCLR[1];
          else
            FY0LW01.SY2CLRID = FY0LM001.SY2CLRID;
          end
          FY0LS30(); /* Get size range*/
          FY0LW01.SY2CLRID = " "; /* Clear color for map display*/
          FY0LW01.FY0LWLSF = "N"; /* Set up for 2nd time through*/
        else
          FY0LW01.FY0LWLSF = "Y"; /* Set up for 1st time through*/
        end
      else
        FY0LW01.FY0LWLSF = "Y"; /* Set up for 1st time through*/
      end
      FY0LW-SAVED-SY2CLRID = FY0LW01.SY2CLRID;
    else

      if ("S" in FY0LM001.FY0LMSEL) /* Selection made*/

        if (converseVar.eventKey is enter) /* Enter key pressed*/
          FY0LW01.FY0LWMAP = "2"; /* Map 2 to be displayed*/
          FY0LW01.FY0LWFNC = "I"; /* Function code is inquire*/
        else
          if (converseVar.eventKey is pf14) /* PF14 key pressed (CHANGE)*/
            set FY0LM002 initial; /* clear map 2*/
            set FY0LM003 initial; /* clear map 3*/
            FY0LW01.FY0LWMAP = "2"; /* Map 2 to be displayed*/
            FY0LW01.FY0LWFNC = "C"; /* Function code is change*/
            FY0LW01.FY0LMUAC = "Y"; /* Init update all colors flag*/
            FY0LW01.FY0LWDEF = "N"; /* Turn off data entered flag*/
            FY0LW01.FY0LW-RESET-MAP-FLAGS = "Y"; /* reset maps*/
            FY0LW01.FY0LW-MAP3-DEF = "N"; /* clear data ent flag*/
          else
            if (converseVar.eventKey is pf15) /* PF15 key pressed (DELETE)*/
              set FY0LM002 initial; /* clear map 2*/
              set FY0LM003 initial; /* clear map 3*/
              FY0LW01.FY0LWMAP = "2"; /* Map 2 to be displayed*/
              FY0LW01.FY0LWFNC = "D"; /* Function code is delete*/
              FY0LW01.FY0LMUAC = "N"; /* Init update all colors flag*/
              FY0LW01.FY0LWDEF = "N"; /* Turn off data entered flag*/
              FY0LW01.FY0LW-RESET-MAP-FLAGS = "Y"; /* reset maps*/
              FY0LW01.FY0LW-MAP3-DEF = "N"; /* clear data ent flag*/
            end
          end
        end
      end
    end
  else
    FY0LW01.XGPCD = FY0LM001.XGPCD;
  end

end // end FY0L160

// MAP NUMBER TWO: ADD
Function FY0L200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to Add a record.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/

  FY0L210(); /* Format and display the map*/

  FY0L220(); /* Check attention identifier*/

  FY0L230(); /* Reset fields to normal intensity*/

  FY0L240(); /* Verify the entered data*/

  FY0L250(); /* Verify the entered row*/

  FY0L260(); /* Process valid input request*/

end // end FY0L200

// FORMAT AND DISPLAY: ADD MAP
Function FY0L210()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWINF == "Y" /* No hard errors*/
   && converseVar.validationMsgNum == 0) /* No messages*/

    if (FY0LW01.SY2CLRID == FY0LW-SAVED-SY2CLRID)
      /* continue*/
    else
      FY0LW-SAVED-SY2CLRID = FY0LW01.SY2CLRID;
      set FY0LM002 initial; /* Clear map2*/
    end

    if (FY0LW01.FY0LWLSF == "N") /* Second time around*/
      FY0L211(); /* Format data*/

      if (FY0LW01.FY0LMBED == 0) /* Nothing there*/
        set FY0LM002.FY0LMBED cursor; /* Place cursor*/
      end

      if (FY0LW01.SY2CLRID == " " /* Nothing there*/
       && FY0LW01.FY0LMUAC == "N") /* Nothing there*/
        set FY0LM002.SY2CLRID cursor; /* Place cursor*/
      end

      if (FY0LW01.SY1STNBR == " ") /* Nothing there*/
        set FY0LM002.SY1STNBR cursor; /* Place cursor*/
      end

      if (FY0LW01.FY1FCTYC == " ") /* Nothing there*/
        set FY0LM002.FY1FCTYC cursor;
      end
    end
  end

  if (FY0LW01.FY0LWINF == "N" /* A hard error*/
   || converseVar.validationMsgNum != 0) /* No messages*/
    FY0LW01.FY0LWLSF = "Y"; /* Turn on flag*/
    set FY0LM002 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0
   || converseVar.validationMsgNum == 70)
    FY0LM002.SY1STNBR = FY0LW01.SY1STNBR; /* Move to map2*/
    FY0LM002.SY1SSTNM = FY0LW01.SY1SSTNM;
    FY0LM002.SY2CLRID = FY0LW01.SY2CLRID;

    if (FY0LW01.SY2CLRID == " ") /* No color id*/
      FY0LM002.SY2CLRAB = " ";
    else
      FY0LM002.SY2CLRAB = FY0LW01.SY2CLRAB;
    end

    FY0LM002.XDMCD = FY0LW01.XDMCD;
    FY0LM002.XQACD = FY0LW01.XQACD;
    FY0LM002.PC2INSEG = FY0LW01.PC2INSEG;
    FY0LM002.XPGCD = FY0LW01.XPGCD;
    FY0LM002.XUMCD = FY0LW01.XUMCD;
    FY0LM002.XSECD = FY0LW01.XSECD;
    FY0LM002.XSNYR = FY0LW01.XSNYR;
    FY0LM002.FY1FCTYC = FY0LW01.FY1FCTYC;
    FY0LM002.FY0LMBED = FY0LW01.FY0LMBED; /* Move to map2*/
  end

  FY0LM002.XGPCD = FY0LW01.XGPCD; /* Move GPC code to map2*/
  FY0LM002.XGPDESC = FY0LW01.XGPDESC; /* Move GPC desc. to map2*/

  FY0LM002.FYITPIND = "1"; /* Reason code*/
  FY0LW01.FYITPIND = "1";
  set FY0LM002.FYITPIND skip; /* Protect field*/
  set FY0LM002.XUMCD skip; /* Protect field*/

  if (converseVar.validationMsgNum == 0) /* No message*/
    if (FY0LW01.FY0LWADD == "Y") /* Second time around*/
      converseLib.validationFailed(1);
      set FY0LM002 alarm;
      move " " to FY0LW01.FY0LWSZA[1] for all; /* Clear size array*/
      move " " to FY0LW01.FY0LWGCL[1] for all; /* Clear color array*/
      FY0LW01.FY0LWADD = "N"; /* Turn off flag*/
    end
  end

  FY0LM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0LM002.FY0LMFNC = "ADD"; /* Move ADD literial to map 2*/

  converse FY0LM002 ;

  FY0LW01.FY0LWLSF = "N"; /* Turn off flag*/
  FY0LW01.FY0LWINF = "Y"; /* Turn on soft error flag*/

end // end FY0L210

// FORMAT FOB LINE
Function FY0L211()

   /* ------------------------------------------------------------*/
    /* MOVE WORKING STORAGE FIELDS TO MAP*/
   /* ------------------------------------------------------------*/

  FY0LM002.SY1STNBR = FY0LW01.SY1STNBR; /* Move to map2*/
  FY0LM002.SY1SSTNM = FY0LW01.SY1SSTNM;
  FY0LM002.SY2CLRID = FY0LW01.SY2CLRID;

  if (FY0LW01.SY2CLRID == " ") /* No color id*/
    FY0LM002.SY2CLRAB = " ";
  else
    FY0LM002.SY2CLRAB = FY0LW01.SY2CLRAB;
  end

  FY0LM002.FY0LMUAC = FY0LW01.FY0LMUAC;
  FY0LM002.XDMCD = FY0LW01.XDMCD;
  FY0LM002.XQACD = FY0LW01.XQACD;
  FY0LM002.PC2INSEG = FY0LW01.PC2INSEG;
  FY0LM002.XPGCD = FY0LW01.XPGCD;
  FY0LM002.XUMCD = FY0LW01.XUMCD;
  FY0LM002.XSECD = FY0LW01.XSECD;
  FY0LM002.XSNYR = FY0LW01.XSNYR;
  FY0LM002.FY1FCTYC = FY0LW01.FY1FCTYC;
  FY0LM002.FY0LMBED = FY0LW01.FY0LMBED; /* Move to map2*/

                                  /* Display cost work info*/
  set FY0LM002.FY4QTDPR normal;
  set FY0LM002.FY4TGTPR normal;
  set FY0LM002.FY4FRGCS normal;
  set FY0LM002.FY4CMNT normal;

                                  /* Display prompts*/
  set FY0LM002.FY0LMTGL skip;
  set FY0LM002.FY0LMQTL skip;
  set FY0LM002.FY0LMFCL skip;
  set FY0LM002.FY0LMCOL skip;

   /* ------------------------------------------------------------*/
   /* FORMAT THE FOB LINE FROM WORKING STORAGE*/
   /* ------------------------------------------------------------*/

  set FY0LW03 empty; /* Clear W03 record*/
  FY0LW01.FY0LWPIX = 1; /* Initialize line index*/
  while (FY0LW01.FY0LWPIX <= 40) /* Until end of lines*/
    FY0LW03.FY0LWMPS[FY0LWPIX] = 0; /* Initialize index*/
    FY0LW03.FY0LWDPS[FY0LWPIX] = 0; /* Initialize index*/
    FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Increment line index*/
  end

  FY0LW01.FY0LWPIX = 1; /* Initialize line index*/
  FY0LW01.FY0LWMIX = 1; /* Initialize line index*/

  while (FY0LW01.FY0LWPIX <= 40 /* Until end of lines*/
   && FY0LW01.FY0LWMIX <= 40) /* Until end of screen lines*/
    if (PG3REC.SY4IDDSC[FY0LWPIX] > " ") /* Something in code.*/
      FY0LM002.SY4IDDSC[FY0LWMIX] = PG3REC.SY4IDDSC[FY0LWPIX];
      set FY0LM002.FY4FOBPR[FY0LWMIX] skip;
      FY0LW03.FY0LWMPS[FY0LWPIX] = FY0LW01.FY0LWMIX;
      FY0LW03.FY0LWDPS[FY0LWMIX] = FY0LW01.FY0LWPIX;
      FY0LW01.FY0LWMIX = FY0LW01.FY0LWMIX + 1; /* Increment line index*/
    end
    FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Increment line index*/
  end

   /* ------------------------------------------------------------*/
   /* IF ANY LINE FORMED THE FY0LM002 MAP FIELDS WILL BE*/
   /* TURNED ON.*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.SY4IDDSC[9] > " ")
    set FY0LM002.FY0LMSZL[2] skip; /* Display*/
    set FY0LM002.FY0LMFBL[2] skip; /* Display*/
    if (FY0LM002.SY4IDDSC[17] > " ")
      set FY0LM002.FY0LMSZL[3] skip; /* Display*/
      set FY0LM002.FY0LMFBL[3] skip; /* Display*/
      if (FY0LM002.SY4IDDSC[25] > " ")
        set FY0LM002.FY0LMSZL[4] skip; /* Display*/
        set FY0LM002.FY0LMFBL[4] skip; /* Display*/
        if (FY0LM002.SY4IDDSC[33] > " ")
          set FY0LM002.FY0LMSZL[5] skip; /* Display*/
          set FY0LM002.FY0LMFBL[5] skip; /* Display*/
        end
      end
    end
  end

  if (FY0LM002.SY4IDDSC[1] > " ")
    set FY0LM002.FY0LMSZL[1] skip; /* Display*/
    set FY0LM002.FY0LMFBL[1] skip; /* Display*/
    set FY0LM002.FY4FOBPR[1] cursor, normal;
    FY0LW01.FY0LWDEF = "Y"; /* Turn on data entered flag*/
  else
    converseLib.validationFailed(21); /* Nothing to display*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft errorflag*/
    FY0LM002.XXXPRCNM = "FY0L211"; /* Process name*/
    set FY0LM002.SY1STNBR cursor, bold; /* Highlight error*/
  end

end // end FY0L211

// CHECK ATTENTION IDENTIFIERS
Function FY0L220()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0LM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0LM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0LM002.CAITEM; /* To application*/
      FY0L111(); /* Purge any temporary storage*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0LW01.FY0LWINF = "N"; /* Turn off hard error*/
    end

    set FY0LM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0LM002.XXXPRCNM = "FY0L220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0LM002"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0L111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM002.XXXPRCNM = "FY0L220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FY0LW01.FY0LWMAP = "1"; /* Map flag eq 1*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0LW01.FY0LWFNC = " "; /* Set function code to spaces*/

    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf6) /* PF6 was pressed*/
    converseLib.validationFailed(70); /* Enter new data message*/
    FY0LW01.FY0LWPIX = 1; /* Initialize line index*/
    while (FY0LW01.FY0LWPIX <= 40) /* Until end of lines*/
      if (FY0LM002.SY4IDDSC[FY0LWPIX] > " ") /* Something there*/
        set FY0LM002.FY4FOBPR[FY0LWPIX] normal; /* Open price field*/
      else
        FY0LW01.FY0LWPIX = 41; /* Exit*/
      end
      FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Increment line count*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf11) /* PF11 was pressed*/
    FY0LW01.FY0LWMAP = "3"; /* Map flag eq 3*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0C"; /* Set to factory application*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0F"; /* Set to factory/style*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0LM002.XXXPRCNM = "FY0L220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    FY0LW01.FY0LWINF = "N"; /* Turn on soft error*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear map before display*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end FY0L220

// RESET HIGHLIGHTED FIELDS
Function FY0L230()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  set FY0LM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0LM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0LM002.XGPDESC initialAttributes;
  set FY0LM002.XGPCD initialAttributes;

  set FY0LM002.SY1STNBR initialAttributes; /* Reset to defined*/
  set FY0LM002.SY2CLRID initialAttributes; /* Reset to defined*/
  set FY0LM002.XDMCD initialAttributes; /* Reset to defined*/
  set FY0LM002.XQACD initialAttributes; /* Reset to defined*/
  set FY0LM002.PC2INSEG initialAttributes; /* Reset to defined*/
  set FY0LM002.XPGCD initialAttributes; /* Reset to defined*/
  set FY0LM002.XUMCD initialAttributes; /* Reset to defined*/
  set FY0LM002.FY0LMBED initialAttributes; /* Reset to defined*/
  set FY0LM002.FY1FCTYC initialAttributes; /* Reset to defined*/
  set FY0LM002.XSNYR initialAttributes; /* Reset to defined*/

   /* ------------------------------------------------------------*/
   /* CHECK TO SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/
    FY0L231(); /* Perform pop-up window routine*/
  end

end // end FY0L230

// CHECK FOR ? BY USER
Function FY0L231()


   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0LM002.XGPCD == "?" /* if ? in gpc code field*/
   || FY0LM002.XDMCD == "?" /* if ? in dimension code field*/
   || FY0LM002.XQACD == "?" /* if ? in quality code field*/
   || FY0LM002.XPGCD == "?" /* if ? in package code field*/
   || FY0LM002.XSECD == "?") /* if ? in season code field*/

        /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0LM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                 GPC CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0LM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0LM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      set FY0LM002.XGPCD cursor;
    else
      FY0LW01.XGPCD = " "; /* clear fields*/
      FY0LW01.XGPDESC = " ";
      set FY0LM002.XGPCD cursor;
    end
  end

  if (FY0LM002.XDMCD == "?") /* if ? in Dim. code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                DIM. CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXDM01(); /* perform Dim. code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Dim.       **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0LM002.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      set FY0LM002.XDMCD cursor, modified;
    else
      FY0LW01.XDMCD = " "; /* clear fields*/
      set FY0LM002.XDMCD cursor, modified;
    end
  end

  if (FY0LM002.XQACD == "?") /* if ? in Quality code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "             QUALITY CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXQA01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Quality    **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0LM002.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      set FY0LM002.XQACD cursor, modified;
    else
      FY0LW01.XQACD = " "; /* clear fields*/
      set FY0LM002.XQACD cursor, modified;
    end
  end


  if (FY0LM002.XPGCD == "?") /* if ? in Package code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "          PACKAGE TYPE CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXPG01(); /* perform Package code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Package    **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0LM002.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* move code*/
      set FY0LM002.XPGCD cursor, modified;
    else
      FY0LW01.XPGCD = " "; /* clear fields*/
      set FY0LM002.XPGCD cursor, modified;
    end
  end


  if (FY0LM002.XSECD == "?") /* if ? in Season code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                SEASON CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXSE01(); /* perform Season code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Season     **/
     /* *  table code to the map.                               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0LM002.XSECD = XSETBL.XSECD[XX0XWPIX]; /* move code*/
      set FY0LM002.XSECD cursor, modified;
    else
      FY0LW01.XSECD = " "; /* clear fields*/
      set FY0LM002.XSECD cursor, modified;
    end
  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  converseLib.validationFailed(121); /* Go on to next selection*/

  exit stack; /* Exit to redisplay map2*/


end // end FY0L231

// VERIFY THE ENTERED DATA
Function FY0L240()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.CAITEM > " ") /* Application data was entered*/
    set FY0LM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0LW01.FY0LWINF = "N"; /* Turn on soft error*/
    FY0LM002.XXXPRCNM = "FY0L240"; /* Process name*/
  else

    FY0L242(); /* Check Date 1*/
    FY0L244(); /* Check entered data*/
    FY0L245(); /* Check Style color*/
    FY0L241(); /* Check factory style/color*/
    FY0L246(); /* Get size descriptions*/

  end

end // end FY0L240

// Select dfcty.vfysty01
Function FY0L241()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set FY2REC empty;
  FY2REC.XGPCD = FY0LW01.XGPCD;
  FY2REC.FY1FCTYC = FY0LW01.FY1FCTYC;
  FY2REC.SY1STNBR = FY0LW01.SY1STNBR;
  FY2REC.XSECD = FY0LW01.XSECD;
  FY2REC.XSNYR = FY0LW01.FY0LWFSD;

  try
    call "IO2980" ("S ", SQLCA, FY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* good call return*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(89); /* Indicate not available*/
        FY0LW01.FY0LWINF = "N"; /* hard error?*/
        FY0LM002.XXXPRCNM = "FY0L241"; /* Process name*/
        set FY0LM002.SY1STNBR cursor, modified, bold;
        return;

      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Row found*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0L241"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1MAP = "FY0LM002"; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY2REC.FY2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FY0LM002.XXXPRCNM = "FY0L241"; /* Process name*/

end // end FY0L241

// Eff. date VALIDATION--ADD
Function FY0L242()

   /* ------------------------------------------------------------*/
   /* DATE CHECK*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* YEAR CHECK*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.FY0LMBED > 0) /* Something there*/

    FY0LW01.FY0LWFED = FY0LM002.FY0LMBED;

  else

    converseLib.validationFailed(83); /* Invalid year*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    FY0LM002.XXXPRCNM = "FY0L242"; /* Process name*/
    set FY0LM002.FY0LMBED cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* DATE VALIDATION--Entered date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "A"; /* Move in date type*/
  TA2REC.TA2GRGAN = FY0LW01.FY0LWFED; /* Move in date*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      XX0XS01(); /* Get current date*/
      XX0XW01.XX0XWDAT = XX0XW01.XX0XWDAT - 20000; /* Subtract 2 years*/
      if (XX0XW01.XX0XWDAT > TA2REC.TA2GRGGN)
        set FY0LM002.FY0LMBED cursor, bold; /* Highlight error*/
        converseLib.validationFailed(139); /* Invalid date*/
        FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
        FY0LM002.XXXPRCNM = "FY0L242"; /* Process name*/
      else
        FY0LW01.FY0LMBED = TA2REC.TA2GRGAN; /* Move in date*/
        FY0LW01.FY0LWBED = TA2REC.TA2GRGGN; /* Beginning date*/
        FY0LW01.FY0LWFED = TA2REC.TA2GRGGN; /* Beginning date*/
      end
    else
      set FY0LM002.FY0LMBED cursor, bold; /* Highlight error*/
      converseLib.validationFailed(62); /* Invalid date*/
      FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
      FY0LM002.XXXPRCNM = "FY0L242"; /* Process name*/
    end
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0L242"; /* Process name*/
    TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

   /* ------------------------------------------------------------*/
   /* ENDING DATE OF ALL NEW FOB BY EFFICTIVE DATE RECORDS*/
   /* WILL BE DEC. 31, 2099 THE HIGHEST DATE AT THE TIME THIS*/
   /* PROGRAM WAS DEVELOPED.*/
   /* ------------------------------------------------------------*/


  FY0LW01.FY4FOXED = 20991231; /* Ending date*/


   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.FY1FCTYC > " ") /* If factory entered*/
    FY1REC.FY1FCTYC = FY0LM002.FY1FCTYC; /* Search key*/
    FY0LW01.FY1FCTYC = FY1REC.FY1FCTYC; /* Search key*/
    FY1REC.XGPCD = FY0LM002.XGPCD; /* Search key*/

    FY0LS03(); /* Select unique factory*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (FY1REC.XXXSTAT == "A")
        FY0LW01.FY1FCTYC = FY0LM002.FY1FCTYC; /* Factory code*/
        FY0LW01.FY1FRGN = FY1REC.FY1FRGN; /* off-shore flag*/
        FY0LW01.FY1MSCPC = FY1REC.FY1MSCPC; /* Misc.%*/
        FY0LW01.FY1BGDPC = FY1REC.FY1BGDPC; /* B-Grade %*/
      else
        converseLib.validationFailed(67); /* Factory inactive*/
        FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
        FY0LM002.XXXPRCNM = "FY0L242"; /* Process name*/
        set FY0LM002.FY1FCTYC cursor, bold; /* Highlight error*/
        FY0LW01.FY0LWSWR = "N"; /* Set request for data off*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(33); /* Factory code missing/invalid*/
        FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
        FY0LM002.XXXPRCNM = "FY0L242"; /* Process name*/
        set FY0LM002.FY1FCTYC cursor, bold; /* Highlight error*/
        FY0LW01.FY0LWSWR = "N"; /* Set request for data off*/
      end
    end
  else
    converseLib.validationFailed(33); /* Factory code missing/invalid*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    FY0LM002.XXXPRCNM = "FY0L242"; /* Process name*/
    set FY0LM002.FY1FCTYC cursor, bold; /* Highlight error*/
    FY0LW01.FY0LWSWR = "N"; /* Set request for data off*/
  end

end // end FY0L242

// VALIDATE INPUT DATA
Function FY0L244()

   /* -----------------------------------------------------------*/
   /* Validate the entered data.*/
   /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

   /* ============================================================*/
   /* Validation of table items entered will take place in this*/
   /* process: SEASON, QUALITY, SPEC. DIFF., PACKAGE TYPE,*/
   /* UNIT of MEASURE, DIMENSION and GPC CODES.*/

   /* ======================START CHECK===========================*/

   /* ------------------------------------------------------------*/
   /* QUALITY CODE CHECK*/
   /* ------------------------------------------------------------*/

  FY0LW01.XQACD = FY0LM002.XQACD;
  FY0LM002.XQACD = FY0LW01.XQACD;
  if (FY0LM002.XQACD > " ") /* If something in QUALITY code*/
    if (FY0LM002.XQACD in XQATBL.XQACD /* If QUALITY code in table*/
     && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

            /* NEXT SENTENCE*/

    else
      set FY0LM002.XQACD cursor, bold; /* Highlight QUALITY code*/
      FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
      converseLib.validationFailed(76); /* Must have valid QUALITY code*/
      FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    end
  else
    set FY0LM002.XQACD cursor, bold; /* Highlight QUALITY code*/
    FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
    converseLib.validationFailed(76); /* Must have valid QUALITY code*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
  end

   /* ------------------------------------------------------------*/
   /* SEASON CODE CHECK*/
   /* ------------------------------------------------------------*/

   /* ************Y2K IN********************/
  if (FY0LM002.XSECD > " "
   || FY0LM002.XSNYR < 0
   || FY0LM002.XSNYR > 99)
   /* OR FY0LM002.XSNYR GT 0;*/
   /* ************Y2K OUT*******************/
    FY0LW01.XSECD = FY0LM002.XSECD;
    FY0LW01.FY0LWFSD = 0; /* Clear season year*/
    FY0LW01.XSNYR = FY0LM002.XSNYR;
   /* ************Y2K IN********************/
   /* IF FY0LM002.XSNYR GT 0;        /* If something in SEASON YEAR*/
    if (FY0LM002.XSNYR >= 0
     && FY0LM002.XSNYR <= 99)
   /* ************Y2K OUT*******************/
      if (FY0LM002.XSNYR > 57) /* If something in SEASON YEAR*/
        FY0LW01.FY0LWFSD = FY0LM002.XSNYR + 1900; /* Full season year*/
      else
        FY0LW01.FY0LWFSD = FY0LM002.XSNYR + 2000; /* Full season year*/
      end
    end

    sysVar.arrayIndex = 1;
    FY0LW01.FY0LWXSF = "N";
    while (FY0LW01.FY0LWXSF == "N")
      if (YSNTBL.XGPCD[sysVar.arrayIndex] == FY0LM002.XGPCD
       && YSNTBL.XDR-PROD-REG-CD[sysVar.arrayIndex] == TABREC.XDR-PROD-REG-CD
       && YSNTBL.XSECD[sysVar.arrayIndex] == FY0LW01.XSECD
       && YSNTBL.XSNYR[sysVar.arrayIndex] == FY0LW01.FY0LWFSD)
        FY0LW01.FY0LWXSF = "Y"; /* End of season flag.*/
      else
        if (YSNTBL.XSECD[sysVar.arrayIndex] == "99")
          FY0LW01.FY0LWXSF = "Y"; /* End of season flag.*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex + 1;
        end
      end
    end

    if (YSNTBL.XSECD[sysVar.arrayIndex] == "99")
      set FY0LM002.XSNYR cursor, bold; /* Highlight SEASON YEAR*/
      FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
      FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
      converseLib.validationFailed(75); /* Must have valid SEASON YEAR*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Get general product code entered if active*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.XGPCD > " " /* Something in GPC code field*/
   && FY0LM002.XGPCD in XGPTBL.XGPCD) /* Check GPC table*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      FY0LM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Desc.*/
      FY0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Desc.*/
      COMMAREA.XGPCD = FY0LM002.XGPCD;
      FY0LW01.XGPCD = FY0LM002.XGPCD;
                                  /* GPC code*/
    else
      set FY0LM002.XGPCD cursor, bold; /* Highlight error*/
      FY0LW01.XGPDESC = " ";
      converseLib.validationFailed(101); /* Must have valid GPC code*/
      FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
      FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
    end
  else
    set FY0LM002.XGPCD cursor, bold; /* Highlight error*/
    FY0LW01.XGPDESC = " ";
    converseLib.validationFailed(101); /* Must have valid GPC code*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
   /* PACKAGE TYPE CHECK*/
   /* ------------------------------------------------------------*/

  FY0LW01.XPGCD = FY0LM002.XPGCD;
  FY0LM002.XPGCD = FY0LW01.XPGCD;
  if (FY0LM002.XPGCD > " ") /* If something in PACKAGE code*/
    if (FY0LM002.XPGCD in XPGTBL.XPGCD /* If PACKAGE code in table*/
     && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

            /* NEXT SENTENCE*/

    else
      set FY0LM002.XPGCD cursor, bold; /* Highlight PACKAGE code*/
      FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
      FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
      converseLib.validationFailed(79); /* Must have valid PACKAGE code*/
    end
  else
    set FY0LM002.XPGCD cursor, bold; /* Highlight PACKAGE code*/
    FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    converseLib.validationFailed(79); /* Must have valid PACKAGE code*/
  end

   /* ------------------------------------------------------------*/
   /* INVENTORY SEGMENT CODE*/
   /* ------------------------------------------------------------*/

  FY0LW01.PC2INSEG = FY0LM002.PC2INSEG;
  FY0LM002.PC2INSEG = FY0LW01.PC2INSEG;
  if (FY0LM002.PC2INSEG > " ") /* If something in SPEC code*/
    PC2REC.XGPCD = FY0LM002.XGPCD;
    PC2REC.PC2INSEG = FY0LM002.PC2INSEG;
    FY0LS97(); /* Select dprodc.vprdcu01*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     && PC2REC.XXXSTAT == "A")   /* Row active*/

            /* NEXT SENTENCE*/

    else
      set FY0LM002.PC2INSEG cursor, bold; /* Highlight SPEC code*/
      FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
      converseLib.validationFailed(77); /* Must have valid SPEC code*/
      FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    end
  else
    set FY0LM002.PC2INSEG cursor, bold; /* Highlight SPEC code*/
    FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
    converseLib.validationFailed(77); /* Must have valid SPEC code*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
  end

   /* ------------------------------------------------------------*/
   /* DIMENSION CHECK*/
   /* ------------------------------------------------------------*/

  FY0LW01.XDMCD = FY0LM002.XDMCD;
  FY0LM002.XDMCD = FY0LW01.XDMCD;
  if (FY0LM002.XDMCD > " ") /* If something in DIMN. code*/
    if (FY0LM002.XDMCD in XDMTBL.XDMCD /* If DIMN. code in table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

          /* NEXT SENTENCE*/

    else
      set FY0LM002.XDMCD cursor, bold; /* Highlight DIMN. code*/
      FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
      converseLib.validationFailed(78); /* Must have valid DIMN. code*/
      FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    end
  else
    set FY0LM002.XDMCD cursor, bold; /* Highlight DIMN. code*/
    FY0LM002.XXXPRCNM = "FY0L244"; /* Process name*/
    converseLib.validationFailed(78); /* Must have valid DIMN. code*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
  end

   /* ============================================================*/
   /* =======================END CHECK============================*/

  if (converseVar.validationMsgNum == 0) /* No errors*/

       /* NEXT SENTENCE*/

  else

    exit stack; /* Get out and redisplay map*/

  end


   /* ============================================================*/

end // end FY0L244

// STYLE/COLOR CHECK--ADD
Function FY0L245()

   /* ------------------------------------------------------------*/
   /* VALIDATE THE UPDATE ALL COLORS FLAG*/
   /* ------------------------------------------------------------*/
   /*  */
  if (FY0LM002.FY0LMUAC == "Y" /* Must equal 'y' or 'n'*/
   || FY0LM002.FY0LMUAC == "N")

    FY0LW01.FY0LMUAC = FY0LM002.FY0LMUAC;

  else

    converseLib.validationFailed(47); /* Must be 'Y' or 'N'*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    FY0LM002.XXXPRCNM = "FY0L245"; /* Process name*/
    set FY0LM002.FY0LMUAC cursor, bold; /* Highlight error*/
  end

   /* ------------------------------------------------------------*/
   /* INSURE THAT A COLOR IS ENTERED IF ALL COLORS FLAG = 'N'*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.FY0LMUAC == "N" /* All colors flag = 'N'*/
   && FY0LM002.SY2CLRID == " ") /* and color NOT entered*/
    FY0LW01.SY2CLRAB = " "; /* Clear description*/
    converseLib.validationFailed(73); /* Style/Color missing*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    FY0LM002.XXXPRCNM = "FY0L245"; /* Process name*/
    set FY0LM002.SY2CLRID cursor, bold; /* Highlight error*/
  end

   /* ------------------------------------------------------------*/
   /* INSURE THAT A STYLE IS ENTERED*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.SY1STNBR == " ") /* Style not entered*/
    FY0LW01.SY1SSTNM = " "; /* Clear description*/
    converseLib.validationFailed(73); /* Style/Color missing*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    FY0LM002.XXXPRCNM = "FY0L245"; /* Process name*/
    set FY0LM002.SY1STNBR cursor, bold; /* Highlight error*/
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE STYLE/COLOR COMBINATION*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.SY1STNBR > " " /* If style entered*/
   && FY0LM002.SY2CLRID > " ") /* and color entered*/
    move " " to FY0LW01.FY0LWGCL[1] for all; /* Init color array*/
    PG2REC.XGPCD = FY0LM002.XGPCD;
    PG2REC.SY1STNBR = FY0LM002.SY1STNBR;
    PG2REC.SY2CLRID = FY0LM002.SY2CLRID;
    PG2REC.XDMCD = FY0LM002.XDMCD;

    XSPG202(); /* Select style/color*/

    if (SQLCA.VAGen_SQLCODE == 0)

      /* ---------------------------------------------------------*/
       /* CHECK LIFE CYCLE CODE. IF 05, 10 OR 20  ADD THE*/
       /* COLOR TO THE ARRAY.*/
      /* ---------------------------------------------------------*/

      if (PG2REC.PG-CURR-XLC-CD == "05" /* Life cycle is active*/
       || PG2REC.PG-CURR-XLC-CD == "10" 
       || PG2REC.PG-CURR-XLC-CD == "20")
        FY0LW01.FY0LWCLR[1] = PG2REC.SY2CLRID;
      else
        converseLib.validationFailed(120); /* Color's life cycle not active*/
        FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
        FY0LM002.XXXPRCNM = "FY0L245"; /* Process name*/
        set FY0LM002.SY2CLRID cursor, bold;
      end

      if (FY0LM002.SY1STNBR != FY0LW01.SY1STNBR
       || FY0LM002.SY2CLRID != FY0LW01.SY2CLRID)
        FY0LW01.FY0LWDEF = "N";
      end

      FY0LW01.SY1STNBR = PG2REC.SY1STNBR;
      FY0LW01.SY1SSTNM = PG2REC.SY1SSTNM;
      FY0LW01.SY2CLRID = PG2REC.SY2CLRID;
      FY0LW01.FY0LWCLR[1] = PG2REC.SY2CLRID;
      FY0LW01.SY2CLRAB = PG2REC.SY2CLRAB;
      FY0LW01.XUMCD = PG2REC.XUMCD;
      FY0LW01.SY1DURT1 = PG2REC.SY1DURT1;
      FY0LW01.SY1DURT2 = PG2REC.SY1DURT2;
      FY0LW01.SY1ADON1 = PG2REC.SY1ADON1;
      FY0LW01.SY1ADON2 = PG2REC.SY1ADON2;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        FY0LM002.SY1SSTNM = " "; /* Clear description*/
        FY0LW01.SY1SSTNM = " "; /* Clear description*/
        FY0LM002.SY2CLRAB = " "; /* Clear description*/
        FY0LW01.SY2CLRAB = " "; /* Clear description*/
        converseLib.validationFailed(73); /* Style/Color invalid*/
        FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
        FY0LM002.XXXPRCNM = "FY0L245"; /* Process name*/
        set FY0LM002.SY1STNBR cursor, bold; /* Highlight*/
        set FY0LM002.SY2CLRID bold;
        FY0LW01.FY0LWSWR = "N"; /* Set request for data*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE THE STYLE IF COLOR NOT ENTERED*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.SY1STNBR > " " /* If style entered*/
   && FY0LM002.SY2CLRID == " ") /* and color NOT entered*/
    PG2REC.XGPCD = FY0LM002.XGPCD;
    PG2REC.SY1STNBR = FY0LM002.SY1STNBR;

    XSPG201(); /* Select unique style*/

    if (SQLCA.VAGen_SQLCODE == 0)
      FY0LM002.SY1SSTNM = PG2REC.SY1SSTNM;
      FY0LW01.SY1SSTNM = PG2REC.SY1SSTNM;
      FY0LW01.XUMCD = PG2REC.XUMCD;
      FY0LW01.SY1DURT1 = PG2REC.SY1DURT1;
      FY0LW01.SY1DURT2 = PG2REC.SY1DURT2;
      FY0LW01.SY1ADON1 = PG2REC.SY1ADON1;
      FY0LW01.SY1ADON2 = PG2REC.SY1ADON2;
      if (FY0LM002.SY1STNBR != FY0LW01.SY1STNBR)
        FY0LW01.FY0LWDEF = "N";
      end
      FY0LW01.SY1STNBR = PG2REC.SY1STNBR;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        FY0LM002.SY1SSTNM = " "; /* Clear description*/
        FY0LW01.SY1SSTNM = " ";
        FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
        converseLib.validationFailed(73); /* Style/Color invalid*/
        FY0LM002.XXXPRCNM = "FY0L245"; /* Process name*/
        set FY0LM002.SY1STNBR cursor, bold;
        FY0LW01.FY0LWSWR = "N"; /* Set request for data off*/
      end
    end
  end


  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* IF ALL COLORS FLAG EQUALS 'Y', TABLE ALL THE COLORS*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.SY1STNBR > " " /* Something there*/
   && FY0LM002.FY0LMUAC == "Y") /* and all colors flag = 'Y'*/
    XX0XS01(); /* Get current date*/
    PG2REC.XGPCD = FY0LM002.XGPCD;
    PG2REC.SY1STNBR = FY0LM002.SY1STNBR;
    PG2REC.SY2CLRID = " ";
    FY0LW01.SY2CLRID = " ";
    PG2REC.XDMCD = FY0LM002.XDMCD;

    FY0LS06(); /* Open style/color cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)

      FY0LS07(); /* Fetch style/color row*/

      FY0LW01.FY0LWIDX = 1; /* Set index to 1*/
      FY0LW01.FY0LWSWC = "N"; /* Move 'N' to EOF*/
      move " " to FY0LW01.FY0LWGCL[1] for all; /* Init color array*/
      while (FY0LW01.FY0LWSWC == "N" /* Until EOF*/
       && FY0LW01.FY0LWIDX <= 100)

        /* ---------------------------------------------------------*/
         /* CHECK LIFE CYCLE CODE. IF 05 10 or 20 ADD THE COLOR TO THE*/
         /* ARRAY FOR THE SEASON ENTERED.*/
        /* ---------------------------------------------------------*/

        if (PG2REC.PG-CURR-XLC-CD == "05" /* Life cycle is active*/
         || PG2REC.PG-CURR-XLC-CD == "10" 
         || PG2REC.PG-CURR-XLC-CD == "20")

          if (PG2REC.XSECD == FY0LW01.XSECD /* Same season*/
           && PG2REC.XSNYR == FY0LW01.FY0LWFSD) /* Same season year*/
            FY0LW01.FY0LWCLR[FY0LWIDX] = PG2REC.SY2CLRID;
            FY0LW01.FY0LWIDX = FY0LWIDX + 1;
          else

            if ((PG2REC.XSECD == "CF" || 
            PG2REC.XSECD == "CH" || 
            PG2REC.XSECD == "CS" || 
            PG2REC.XSECD == "CU")
             && (FY0LW01.XSECD == "FA" || 
            FY0LW01.XSECD == "HO" || 
            FY0LW01.XSECD == "SP" || 
            FY0LW01.XSECD == "SU")
             && PG2REC.XSNYR == FY0LW01.FY0LWFSD) /* Same season year*/
              FY0LW01.FY0LWCLR[FY0LWIDX] = PG2REC.SY2CLRID;
              FY0LW01.FY0LWIDX = FY0LWIDX + 1;
            end
          end

        end

        FY0LS07(); /* Fetch style/color row*/

      end

      FY0LS08(); /* Close style/color cursor*/
    end

    if (FY0LW01.FY0LWINF == "Y" /* No hard errors*/
     && FY0LW01.FY0LWSWC == "N" /* Not EOF*/
     && FY0LW01.FY0LWIDX == 100)
      converseLib.validationFailed(97); /* Not all colors selected*/
      FY0LW01.FY0LWINF = "N";
      FY0LM002.XXXPRCNM = "FY0L245"; /* Process name*/
    end

    if (FY0LW01.FY0LWINF == "Y" /* No hard errors*/
     && FY0LW01.FY0LWCLR[1] == " ") /* No colors loaded*/
      converseLib.validationFailed(128); /* No active life cycles*/
      FY0LW01.FY0LWINF = "N";
      FY0LM002.XXXPRCNM = "FY0L245"; /* Process name*/
      set FY0LM002.SY1STNBR cursor, bold;
    end
  end

end // end FY0L245

// SIZE DESCRIPTION--ADD
Function FY0L246()

   /* ----------------------------------------------------------*/
   /* GET THE SIZES FOR THE ADD MAP*/
   /* ----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No messages*/

    FY0LW01.SY1SSTNM = PG2REC.SY1SSTNM;
    if (FY0LM002.FY0LMUAC == "N")
      FY0LW01.FY0LWCLR[1] = PG2REC.SY2CLRID;
    end

    FY0LW01.FY0LWIDX = 1; /* Color index*/
    FY0LW01.FY0LWSIX = 0; /* Clear size index*/

    while (FY0LW01.FY0LWCLR[FY0LWIDX] == " " /* No colors present*/
     && FY0LW01.FY0LWIDX != 100)
      FY0LW01.FY0LWIDX = FY0LW01.FY0LWIDX + 1; /* Add 1 to index*/
    end

    while (FY0LW01.FY0LWCLR[FY0LWIDX] > " ") /* Colors present*/

      set PG3REC empty; /* Clear record*/

      PG3REC.XGPCD = FY0LM002.XGPCD; /* GPC code*/
      PG3REC.SY1STNBR = FY0LM002.SY1STNBR; /* Style number*/
      PG3REC.SY2CLRID = FY0LW01.FY0LWCLR[FY0LWIDX]; /* Color id*/
      PG3REC.XDMCD = FY0LM002.XDMCD; /* Dim. code*/
      PG3REC.XQACD = "**"; /* Quality code*/
      PG3REC.PG3RETCD = "00"; /* Translator return code*/

      PG3REC.PG3FUNCD = "PC"; /* Translator fnc.*/
      PG3REC.PG3DATFM = "N"; /* Compressed/Not compressed sw*/

      TA1REC.TA1PGMNM = "FY0L246"; /* What executes this sgrp*/

      XSPG301(); /* Get PG3REC: Size scale record*/

      if (PG3REC.PG3RETCD == "00") /* Sizes found*/

        FY0LW01.FY0LWSIX = FY0LW01.FY0LWSIX + 1; /* Add one to size index*/

        FY0LS19(); /* Find any size range difference*/

      else
        if (PG3REC.PG3RETCD == "09") /* Sizes found*/
          converseLib.validationFailed(11); /* Deadlock*/
          FY0LW01.FY0LWINF = "N"; /* Turn off hard error*/
          FY0LM002.XXXPRCNM = "FY0L246"; /* Process name*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
          exit stack;
        else
          if (PG3REC.PG3RETCD == "10") /* Resource not found*/
            converseLib.validationFailed(21); /* No data found*/
            FY0LW01.FY0LWINF = "N"; /* Turn off hard error*/
            FY0LM002.XXXPRCNM = "FY0L246"; /* Process name*/
            exit stack;
          else
            converseLib.validationFailed(10); /* Unexpected error*/
            FY0LW01.FY0LWINF = "N"; /* Turn off hard error*/
            FY0LM002.XXXPRCNM = "FY0L246"; /* Process name*/
            exit stack;
          end
        end
      end
      FY0LW01.FY0LWIDX = FY0LW01.FY0LWIDX + 1; /* Add 1 to index*/
    end

    /* ------------------------------------------------------------*/
     /* CHECK THE SIZE RANGE ARRAY TO FIND ANY DIFFERENCES IN THE*/
     /* RANGE.*/
    /* ------------------------------------------------------------*/

    if (FY0LM002.FY0LMUAC == "Y") /* All color flag on*/

      FY0LW01.FY0LWSIX = 2; /* Start the index at 2*/

      while (FY0LW01.FY0LWFSS[FY0LWSIX] > " ")

        if (FY0LW01.FY0LWFSS[1] == FY0LW01.FY0LWFSS[FY0LWSIX])

              /* NEXT SENTENCE*/

        else
          converseLib.validationFailed(117); /* Not all colors have the same size range*/
          FY0LW01.FY0LWINF = "N"; /* Turn off hard error*/
          FY0LM002.XXXPRCNM = "FY0L246"; /* Process name*/
          move " " to FY0LW01.FY0LWGCL[1] for all; /* Clear all colors array*/

          exit stack;
        end
        FY0LW01.FY0LWSIX = FY0LW01.FY0LWSIX + 1; /* Add 1 to index*/
      end

    end
  end

end // end FY0L246

// SELECT TABLE ROWS FOR CHECK
Function FY0L250()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWDEF != "Y" /* If data not entered*/
   || converseVar.validationMsgNum != 0) /* Error message*/
    return;
  end

  set FY4REC empty; /* Clear record*/
  set FYCREC empty; /* Clear record*/

  FY4REC.XGPCD = FY0LW01.XGPCD; /* Search key*/
  FY4REC.SY1STNBR = FY0LW01.SY1STNBR; /* Search key*/
  FY4REC.FY1FCTYC = FY0LW01.FY1FCTYC; /* Get factory*/
  FY4REC.XDMCD = FY0LW01.XDMCD; /* Search key*/
  FY4REC.XQACD = FY0LW01.XQACD; /* Search key*/
  FY4REC.PC2INSEG = FY0LW01.PC2INSEG; /* Search key*/
  FY4REC.XPGCD = FY0LW01.XPGCD; /* Search key*/
  FY4REC.XUMCD = FY0LW01.XUMCD; /* Search key*/
  FY4REC.XSECD = FY0LW01.XSECD; /* Search key*/
  FY4REC.XSNYR = FY0LW01.FY0LWFSD; /* Search key*/
  FY4REC.XXXSTAT = "A"; /* Search key*/
  FYCREC.FYC1DATE = 0; /* Search key*/
  FYCREC.FYC2DATE = 999999999; /* Search key*/

  FY0LW01.FY0LWIDX = 1; /* Move 1 to color index*/
  while (FY0LW01.FY0LWCLR[FY0LWIDX] > " " /* While colors exist*/
   && converseVar.validationMsgNum == 0) /* No errors*/

    FY4REC.SY2CLRID = FY0LW01.FY0LWCLR[FY0LWIDX]; /* Search key*/

    FYCREC.FYCFNC = "S4"; /* Function code*/
    try
      call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select set*/
    if (sysVar.errorCode == "00000000" /* Successful call*/
     && SQLCA.VAGen_SQLCODE == 0)      /* Everything OK*/

      FY0LW01.FY0LWSWC = "N"; /* Turn off EOF switch*/
      while (FY0LW01.FY0LWSWC == "N" /* EOF switch off*/
       && converseVar.validationMsgNum == 0) /* and no errors*/
        FY0L251(); /* Fetch rows*/
      end
      FY0L253(); /* Close selected set*/
    else
      if (sysVar.errorCode == "00000000" /* Successful call*/
       && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Post function*/
        FY0LW01.FY0LWINF = "N"; /* Turn off hard error*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        FY0LW01.FY0LWINF = "N"; /* Turn off hard error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0L250"; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
      TA1REC.TA1TBLKE = FY4REC.XGPCD; /* Table key*/

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

      FY0LM001.XXXPRCNM = "FY0L250"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end
    FY0LW01.FY0LWIDX = FY0LW01.FY0LWIDX + 1; /* Increment color index*/
  end

end // end FY0L250

// GET NEXT ROW FOR CHECK
Function FY0L251()

   /* ------------------------------------------------------------*/
   /* This module selects a table row.*/

     /* This alternate select module is designed to return a*/
     /* valid error code whenever  there are overlaps in*/
     /* the data base.  Therefore, if any number of rows are*/
     /* returned from the database a valid error has occurred.*/

   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  FYCREC.FYCFNC = "N4";

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      FY0LW04.FY4GROUP = FY4REC.FY4GROUP; /* Move to working storage*/

      FY0L252(); /* Check date range*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FY0LW01.FY0LWSWC = "Y"; /* Turn on EOF*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0L251"; /* Process name*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0LM002.XXXPRCNM = "FY0L251"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0L251

// CHECK EFFECTIVE DATES
Function FY0L252()

   /* ------------------------------------------------------------*/
   /* CHECK THE P.O. ID DATES TO SEE IF NEW DATE OVERLAPS ANY*/
   /* EXISTING DATES IN THE FOB RECORD.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWBED == FY4REC.FY4FOBED /* Beg. fob date the same*/
   && FY0LW01.FY4FOXED == FY4REC.FY4FOXED) /* End. fob date the same*/

    FY0LW01.FY0LWCLF[FY0LWIDX] = "Y"; /* Turn on non-process flag*/
    converseLib.validationFailed(92); /* One or more rows not added*/
    FY0LM002.XXXPRCNM = "FY0L252"; /* Turn off hard error*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    set FY0LM002.FY0LMBED cursor, modified, bold;

  else
    if (FY0LW01.FY0LWBED > FY4REC.FY4FOBED
     && FY0LW01.FY0LWBED == FY4REC.FY4FOXED)

      FY0LS39(); /* Check for existing prices*/
      FY0LS09(); /* Make date adjustments1*/
      FY0LS11(); /* Delete/Add Row Routine*/

      set FYIREC empty; /* Clear history record*/
      FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
      FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
      FYIREC.FY4FOBED = FY4REC.FY4FOXED; /* Old row ending date*/
      FYIREC.FY4FOXED = FY4REC.FY4FOXED; /* Old row ending date*/
      FY0LS32(); /* Fill new price buckets*/
      FYIREC.FY4QTDPR = FY0LM002.FY4QTDPR; /* New Quoted price*/
      FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/
      FY0LS31(); /* write history*/

    else
      if (FY0LW01.FY0LWBED > FY4REC.FY4FOBED
       && FY0LW01.FY4FOXED == FY4REC.FY4FOXED)

        FY0LS39(); /* Check for existing prices*/
        FY0LS09(); /* Make date adjustments1*/
        FY0LS11(); /* Delete/Add Row Routine*/

        set FYIREC empty; /* Clear history record*/
        FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
        FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
        FYIREC.FY4FOBED = FY0LW01.FY0LWBED; /* New row beginning date*/
        FYIREC.FY4FOXED = FY0LW01.FY4FOXED; /* New row ending date*/
        FY0LS32(); /* Fill new price buckets*/
        FYIREC.FY4QTDPR = FY0LM002.FY4QTDPR; /* New Quoted price*/
        FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/
        FY0LS31(); /* write history*/

      else
        if (FY0LW01.FY0LWBED < FY4REC.FY4FOBED
         && FY0LW01.FY4FOXED == FY4REC.FY4FOXED)

          FY0LS10(); /* Make date adjustments2*/

        else
          if (FY0LW01.FY0LWBED < FY4REC.FY4FOBED
           && FY0LW01.FY4FOXED > FY4REC.FY4FOXED)

            FY0LS10(); /* Make date adjustments2*/

          end
        end
      end
    end
  end


end // end FY0L252

// CLOSE SELECTED SET FOR ADD
Function FY0L253()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  FYCREC.FYCFNC = "C4";

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Everything OK*/

         /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0L253"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
    TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0LM001.XXXPRCNM = "FY0L253"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/

    exit stack; /* Exit to redisplay map*/
  end

end // end FY0L253

// PROCESS VALID INPUT REQUEST
Function FY0L260()

   /* ------------------------------------------------------------*/
   /* PROCESS ANY ADDED DATA.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors found*/
    return;
  end

  if (FY0LW01.FY0LWDEF == "N" /* No Data entered map2*/
   && FY0LW01.FY0LW-MAP3-DEF == "N") /* No Data entered map3*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  FY0LW01.FY0LWIDX = 1; /* Color index*/

  while (FY0LW01.FY0LWCLR[FY0LWIDX] == " " /* No colors present*/
   && FY0LW01.FY0LWIDX != 100)
    FY0LW01.FY0LWIDX = FY0LW01.FY0LWIDX + 1; /* Add 1 to index*/
  end

  while (FY0LW01.FY0LWCLR[FY0LWIDX] > " ") /* Colors present*/
    if (FY0LW01.FY0LWCLF[FY0LWIDX] != "Y") /* Non-process flag on*/

      FY0L261(); /* Form new row*/
      FY0L262(); /* Add new row*/

      FY0LS29(); /* Add tag record*/

      set FYIREC empty; /* Clear history record*/

      FYIREC.FYISZPRC = FY4REC.FY4SZPRC; /* New FOB price*/
      FYIREC.FY4FOBED = FY4REC.FY4FOBED; /* New row beginning date*/
      FYIREC.FY4FOXED = FY4REC.FY4FOXED; /* New row ending date*/
      FYIREC.FY4QTDPR = FY0LM002.FY4QTDPR; /* New Quoted price*/

      FY0LS31();

      if (SQLCA.VAGen_SQLCODE == 0) /* If row exists*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* Commit this add*/
        FY0LW01.FY0LWFCD = FY0LM002.FY1FCTYC; /* Save key*/
        FY0LW01.FY0LWCCD = FY0LW01.FY0LWCLR[FY0LWIDX];
        FY0LW01.FY4FOBED = 0;
        FY0LW01.FY0LMBED = 0;
        FY0LW01.SY2CLRID = " ";
        set FYCREC empty; /* Clear map area*/
        FY0LW01.FY0LWSWR = "Y"; /* Set request for data switch*/
        FY0LW01.FY0LWADD = "Y"; /* ADD SUCCESSFUL*/
        FY0LW01.FY0LWLSF = "Y";
        FY0LW01.FY0LWDEF = "N"; /* Turn off data entered flag*/
        FY0LW01.FY0LW-MAP3-DEF = "N"; /* Turn off data entered flag*/
      else
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.validationFailed(113); /* This P.O. ID already exists*/
        FY0LW01.FY0LWINF = "Y"; /* Turn on hard error*/
        FY0LW01.FY0LWADD = "N"; /* ADD NOT SUCCESSFUL*/
        FY0LM002.XXXPRCNM = "FY0L260"; /* Process name*/
        FY0LW01.FY0LWSWR = "Y"; /* Set request for data switch*/
        set FY0LM002.FY0LMBED cursor, bold;
        set FY0LM002.FY1FCTYC bold;
        exit stack;
      end
    end
    FY0LW01.FY0LWIDX = FY0LW01.FY0LWIDX + 1; /* Add 1 to index*/
  end


end // end FY0L260

// MOVE FOB PRICES TO FY4REC
Function FY0L261()

   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL FILL THE FY4REC AND THE VALID BUCKETS*/
   /* WITHIN THE RECORD.*/
   /* ----------------------------------------------------------*/

  FY0LW01.FY0LWPRE = 0; /* Clear price check field*/
  FY0LW01.FY0LWPIX = 1; /* Saved FY4REC index*/
  FY0LW01.FY0LWMIX = 1; /* Map placement index*/
  FY0LW01.FY0LWRIX = 0; /* FY4REC placement index*/

   /* ------------------------------------------------------------*/
   /* THIS LOOP WILL DETERMINE THE FOB PRICE FOR A GIVEN RANGE*/
   /* IF THE RANGE IS VALID.*/
   /* ------------------------------------------------------------*/

  while (FY0LW03.FY0LWDPS[FY0LWPIX] != 0
   && FY0LW01.FY0LWPIX <= 40
   && FY0LW01.FY0LWMIX <= 40)
    FY0LW01.FY0LWRIX = FY0LW03.FY0LWDPS[FY0LWPIX];
    if (FY0LM002.FY4FOBPR[FY0LWMIX] == 0) /* Nothing in field*/
      FY0LM002.FY4FOBPR[FY0LWMIX] = FY0LW01.FY0LWPRE;
      FY4REC.FY4FOBPR[FY0LWRIX] = FY0LM002.FY4FOBPR[FY0LWMIX];
    else
      FY4REC.FY4FOBPR[FY0LWRIX] = FY0LM002.FY4FOBPR[FY0LWMIX];
    end
    FY0LW01.FY0LWPRE = FY0LM002.FY4FOBPR[FY0LWMIX]; /* Prices equal*/
    FY0LW01.FY0LWMIX = FY0LW01.FY0LWMIX + 1;
    FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1;
  end

  FY4REC.XGPCD = FY0LW01.XGPCD; /* Move in fields*/
  FY4REC.SY1STNBR = FY0LW01.SY1STNBR;
  FY4REC.FY1FCTYC = FY0LM002.FY1FCTYC;
  FY4REC.SY2CLRID = FY0LW01.FY0LWCLR[FY0LWIDX];
  FY4REC.XDMCD = FY0LW01.XDMCD;
  FY4REC.XQACD = FY0LW01.XQACD;
  FY4REC.PC2INSEG = FY0LM002.PC2INSEG;
  FY4REC.XPGCD = FY0LW01.XPGCD;
  FY4REC.XUMCD = FY0LW01.XUMCD;
  FY4REC.XSECD = FY0LW01.XSECD;
  FY4REC.XSNYR = FY0LW01.FY0LWFSD;
  FY4REC.XXXSTAT = "A";
  FY4REC.FY4FOBED = FY0LW01.FY0LWBED;
  FY4REC.FY4FOXED = FY0LW01.FY4FOXED;
  FY4REC.FY4QTDPR = FY0LM002.FY4QTDPR;
  FY4REC.FY4TGTPR = FY0LM002.FY4TGTPR;
  FY4REC.FY4CMNT = FY0LM002.FY4CMNT;
  FY4REC.FY4OGXRF = FY0LM003.FY4OGXRF;
  FY4REC.FY4CCLPC = 0; /* Don't move in cost color percent*/
  FY4REC.FY4LBRCS = FY0LM003.FY4LBRCS;
  FY4REC.FY4FABCS = FY0LM003.FY4FABCS;
  FY4REC.FY4BLNCS = FY0LM003.FY4BLNCS;
  FY4REC.FY4SCNCS = FY0LM003.FY4SCNCS;
  FY4REC.FY4FRGCS = FY0LM002.FY4FRGCS;

  if (FY0LM003.FY4WHLPR > 0 /* something entered*/
   && FY0LM003.FY4WHLPR != FY0LM003.FY0LMPWP) /* Price override*/
    FY4REC.FY4WHLPR = FY0LM003.FY4WHLPR;
  else
    FY4REC.FY4WHLPR = 0;
  end
end // end FY0L261

// ADD NEW ROW
Function FY0L262()

   /* ------------------------------------------------------------*/
   /* This module adds a trade restriction table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FY4REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FY4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FY4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FY4REC.ZZZCHGCT = 0; /* Change count*/
  FY4REC.FY4SMDCT = 1; /* Same day counter*/

  try
    call "IO3000" ("A ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Valid return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0L262"; /* Process name*/
  TA1REC.TA1LOC = "ADD A UNIQUE FOB TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0LM002.XXXPRCNM = "FY0L262"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any updates*/

  exit stack; /* Exit to redisplay map*/

end // end FY0L262

// LIST SCREEN: INQUIRE
Function FY0L400()

   /* ------------------------------------------------------------*/
   /* This is the main process used for the INQUIRY MAP.*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/

   /* "EZEFLO" is used to redisplay the map when any major error*/
   /* occur.*/
   /* ------------------------------------------------------------*/

  FY0L410(); /* Select a unique row*/

  FY0L420(); /* Format and display the map*/

  FY0L430(); /* Check attention identifier*/

  FY0L440(); /* Reset fields to normal intensity*/

  FY0L450(); /* Verify the entered data*/

  FY0L460(); /* Process valid input request*/

end // end FY0L400

// SELECT UNIQUE ROW
Function FY0L410()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/

   /* Use the FY0LS01 and FY0LS02 statement groups to get row.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0
   || FY0LW01.FY0LWINF != "Y")
    return;
  end

  FY0LS01(); /* Get record*/

  FY0LS02(); /* Get sizes*/

end // end FY0L410

// FORMAT AND DISPLAY:INQUIRE MAP
Function FY0L420()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWINF == "Y") /* Soft error*/
    if (converseVar.validationMsgNum == 0) /* No message*/
      set FY0LM002 initial; /* Clear map output area*/
    else
      set FY0LM002 alarm;
    end

    FY0LS18(); /* Get factory info.*/

    set SY5REC empty; /* Clear record*/
    SY5REC.XGPCD = FY0LW01.XGPCD; /* GPC code*/
    SY5REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style code*/
    SY5REC.SY5SZID = 0; /* Size id*/
    SY5REC.XQACD = FY0LW01.XQACD; /* Quality*/
    SY5REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Color code*/
    SY5REC.XDMCD = "00"; /* Dimension code*/
    SY5REC.XPYCD = "01";

    FY0LS99(); /* Get wholsale price for style*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FY0LW01.FY0LWPRC = 0; /* Working storage price*/
      FY0LS96(); /* Get current price*/
      FY0LW01.FY0LMPWP = FY0LW01.FY0LWPRC; /* Wholesale price*/

    else
      FY0LW01.FY0LMPWP = 0; /* Wholesale price*/

    end

    if (PG2REC.SY1BSTNB > " ") /* Blank style code exists*/
      FY0LW01.SY1BSTNB = PG2REC.SY1BSTNB;
      FY0LW01.SY2BCLCD = PG2REC.SY2BCLCD;
      SY5REC.SY1STNBR = PG2REC.SY1BSTNB; /* Blank Style code*/
      SY5REC.SY2CLRID = PG2REC.SY2BCLCD; /* Blank Color code*/

      FY0LS99(); /* Get wholsale price for blank style*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        FY0LW01.FY0LWPRC = 0; /* Working storage price*/
        FY0LS96(); /* Get current price*/
        FY0LW01.FY4BLNCS = FY0LW01.FY0LWPRC; /* Wholesale price*/

      else
        FY0LW01.FY4BLNCS = 0; /* Wholesale price*/

      end

    else
      FY0LW01.SY1BSTNB = " ";
      FY0LW01.SY2BCLCD = " ";
      FY0LW01.FY4BLNCS = 0; /* Blank style price*/

    end

    set AF5REC empty;
    AF5REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style code*/
    AF5REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Color code*/
    AF5REC.XDMCD = FY0LW01.XDMCD; /* Dim code*/
    AF5REC.XDVCD = "01"; /* Div code*/
    AF5REC.XOWCD = "00"; /* Owner group code*/
    AF5REC.XSECD = FY0LW02.FY0LWSNC[FY0LWIXM];
    AF5REC.XSNYR = FY0LW02.FY0LWSNY[FY0LWIXM];

    FY0LS98(); /* Get Color cost percent*/

    FY4REC.FY4CCLPC = AF5REC.AF5FSCPT; /* Cost color percent*/
    FY0LW01.FY4CCLPC = AF5REC.AF5FSCPT; /* Cost color percent*/

    PG2REC.XGPCD = FY0LW01.XGPCD; /* GPC code*/
    PG2REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style code*/
    PG2REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Color code*/
    PG2REC.XDMCD = FY0LW01.XDMCD; /* dim.  code*/

    XSPG201(); /* Get duty rates from vsyclr01*/

    FY0LW01.SY1DURT1 = PG2REC.SY1DURT1; /* Duty rate 1*/
    FY0LW01.SY1DURT2 = PG2REC.SY1DURT2; /* Duty rate 2*/
    FY0LW01.SY1ADON1 = PG2REC.SY1ADON1; /* Duty rate add on 1*/
    FY0LW01.SY1ADON2 = PG2REC.SY1ADON2; /* Duty rate add on 2*/


    FY0LS17(); /* Worksheet calculations*/
    FY0LS15(); /* Format data for map*/

  else
    set FY0LM002 alarm; /* Indicate sound alarm*/
  end

  FY0LS16(); /* Protect map fields*/

  if (FY0LW01.XGPCD > " ") /* If something in GPC code*/
    if (FY0LW01.XGPCD in XGPTBL.XGPCD)
      FY0LM002.XGPCD = FY0LW01.XGPCD; /* Move GPC code to map2*/
      FY0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      FY0LM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    else
      set FY0LM002.XGPCD cursor, bold; /* Highlight error*/
      FY0LM002.XGPDESC = " ";
      converseLib.validationFailed(101); /* Must have valid gpc code*/
      FY0LM002.XXXPRCNM = "FY0L520"; /* Process name*/
    end
  else
    set FY0LM002.XGPCD cursor; /* Place cursor at gpc field*/
    FY0LM002.VAGen_EZEMSG = "ENTER GPC CODE AND NEW FOB ROW INFORMATION";
  end

  set FY0LM002.FY0LMOSL protect, invisible; /* Set to dark*/
  FY0LM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0LM002.FY0LMFNC = "INQUIRY";
                                   /* Move INQUIRY literial to map 2*/

  set FY0LM002.FY4CMNT skip; /* Display cost work info*/
  set FY0LM002.FY4QTDPR skip;
  set FY0LM002.FY4TGTPR skip;
  set FY0LM002.FY4FRGCS skip;

  set FY0LM002.FY0LMCOL skip;
  set FY0LM002.FY0LMQTL skip;
  set FY0LM002.FY0LMTGL skip;
  set FY0LM002.FY0LMFCL skip; /* Display prompts*/


  converse FY0LM002 ;

  FY0LW01.FY0LWINF = "Y"; /* Soft error*/

end // end FY0L420

// CHECK ATTENTION IDENTIFIRES
Function FY0L430()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Rest entered data*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0LM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0LM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FY0LM002.CAITEM; /* Application data*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0LW01.FY0LWINF = "Y"; /* Soft error*/
    end

    set FY0LM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0LM002.XXXPRCNM = "FY0L430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0LW01.FY0LWMAP = "1"; /* Move to map 1*/
    FY0LW01.FY0LWSWR = "Y"; /* Request for data is yes*/

    FY0LW01.FY0LWFCD = FY0LM002.FY1FCTYC; /* Save key*/
    FY0LW01.FY0LWCCD = FY0LM002.SY2CLRID; /* Save key*/

    FY0LW01.FY0LWINQ = "Y"; /* Inquire successful*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0LW01.FY0LWFNC = " "; /* Set function code to spaces*/

    FY0LW01.SY2CLRID = " "; /* Search key*/
    FY0LW01.SY1STNBR = FY0LM002.SY1STNBR;
    FY0LW01.FY0LWFCT = FY0LM002.FY1FCTYC;

    FY0LW01.XSECD = FY0LM002.XSECD;
    FY0LW01.FY0LWFSD = FY0LW02.FY0LWSNY[FY0LWIXM];

    FY0LW01.FY0LMBED = 0; /* Effective date*/
    FY0LW01.FY4FOBED = 0;
    FY0LW01.FY4FOXED = 0;
    FY0LW01.FY0LWBED = 0;
    FY0LW01.FY0LWXED = 0;

    set FY0LM002 initial; /* Clear map area*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* Pf1 pressed*/
      COMMAREA.CAITEM = "FY0LM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0L111(); /* Purge temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM002.XXXPRCNM = "FY0L430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf11) /* PF11 was pressed*/
    FY0LW01.FY0LWMAP = "3"; /* Move to map 3*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0C"; /* Set to factory application*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0F"; /* Set to factory/style*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0LM002.XXXPRCNM = "FY0L430"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    FY0LW01.FY0LWINF = "Y"; /* Soft error*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear map before display*/

    end

    return; /* Exit to redisplay map*/
  end

end // end FY0L430

// RESET HIGHLIGHED FIELDS
Function FY0L440()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0LM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0LM002.CAITEM initialAttributes; /* Commarea application data*/

end // end FY0L440

// VERIFY THE ENTERED DATA
Function FY0L450()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.CAITEM > " ") /* Application data was entered*/
    set FY0LM002.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0LW01.FY0LWINF = "Y"; /* Soft error*/
    FY0LM002.XXXPRCNM = "FY0L450"; /* Process name*/
  end

end // end FY0L450

// PROCESS VALID INPUT REQUEST
Function FY0L460()

   /* ------------------------------------------------------------*/
   /* CREATE SAVE KEY FOR RETURNING TO LIST SCREEN*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No messages*/

    FY0LW01.FY0LWFCD = FY0LM002.FY1FCTYC; /* Save key*/
    FY0LW01.FY0LWCCD = FY0LM002.SY2CLRID; /* Save key*/

    FY0LW01.SY2CLRID = " "; /* Search key*/
    FY0LW01.SY1STNBR = FY0LM002.SY1STNBR;
     /* MOVE FY0LM002.FY1FCTYC TO FY0LW01.FY0LWFCT;*/

    FY0LW01.XSECD = FY0LM002.XSECD;
    FY0LW01.FY0LWFSD = FY0LW02.FY0LWSNY[FY0LWIXM];

    FY0LW01.FY0LWSWR = "Y"; /* Turn on request for data*/
    FY0LW01.FY0LWFNC = " "; /* Clear function code*/
    FY0LM001.FY0LMSEL[FY0LWIXM] = " ";

    FY0LW01.FY0LMBED = 0;
    FY0LW01.FY4FOBED = 0;
    FY0LW01.FY4FOXED = 0;
    FY0LW01.FY0LWBED = 0;
    FY0LW01.FY0LWXED = 0;

    set FY0LM002 initial; /* Clear map area*/
  end

end // end FY0L460

// LIST SCREEN: CHANGE
Function FY0L500()

   /* ------------------------------------------------------------*/
   /* This is the main process used to CHANGE a record.  It will*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/

   /* "EZEFLO" is used to redisplay the map when a major error*/
   /* occurs map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    FY0L510(); /* Obtain the data to display*/
  end

  FY0L520(); /* Format and display the map*/

  FY0L530(); /* Check attention identifier*/

  FY0L540(); /* Reset fields to normal intensity*/

  FY0L550(); /* Verify the entered data*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    FY0L560(); /* Process valid input request*/
  end

end // end FY0L500

// SELECT A UNIQUE ROW: CHANGE
Function FY0L510()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/

   /* Use the FY0LS01 statement group to get the FOB row.*/
   /* Use the FY0LS02 statement group to get the sizes.*/
   /* ------------------------------------------------------------*/


  FY0LS01(); /* Get the FOB row*/

  FY0LS02(); /* Get the sizes*/


end // end FY0L510

// FORMAT AND DISPLAY: Change Map
Function FY0L520()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWINF == "Y") /* No hard error*/
    if (converseVar.validationMsgNum == 0) /* No error*/
      converseLib.validationFailed(93); /* ENTER OR PA2*/
    else
      set FY0LM002 alarm;
    end


    set SY5REC empty; /* Clear record*/
    SY5REC.XGPCD = FY0LW01.XGPCD; /* GPC code*/
    SY5REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style code*/
    SY5REC.SY5SZID = 0; /* Size id*/
    SY5REC.XQACD = FY0LW01.XQACD; /* Quality*/
    SY5REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Color code*/
    SY5REC.XDMCD = "00"; /* Dimension code*/
    SY5REC.XPYCD = "01";

    FY0LS99(); /* Get wholsale price for style*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FY0LW01.FY0LWPRC = 0; /* Working storage price*/
      FY0LS96(); /* Get current price*/
      FY0LW01.FY0LMPWP = FY0LW01.FY0LWPRC; /* Wholesale price*/

    else
      FY0LW01.FY0LMPWP = 0; /* Wholesale price*/

    end

    if (PG2REC.SY1BSTNB > " ") /* Blank style code exists*/
      FY0LW01.SY1BSTNB = PG2REC.SY1BSTNB;
      FY0LW01.SY2BCLCD = PG2REC.SY2BCLCD;
      SY5REC.SY1STNBR = PG2REC.SY1BSTNB; /* Blank Style code*/
      SY5REC.SY2CLRID = PG2REC.SY2BCLCD; /* Blank Color code*/

      FY0LS99(); /* Get wholsale price for blank style*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        FY0LW01.FY0LWPRC = 0; /* Working storage price*/
        FY0LS96(); /* Get current price*/
        FY0LW01.FY4BLNCS = FY0LW01.FY0LWPRC; /* Wholesale price*/

      else
        FY0LW01.FY4BLNCS = 0; /* Wholesale price*/

      end

    else
      FY0LW01.SY1BSTNB = " ";
      FY0LW01.SY2BCLCD = " ";
      FY0LW01.FY4BLNCS = 0; /* Blank style price*/

    end

    set AF5REC empty;
    AF5REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style code*/
    AF5REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Color code*/
    AF5REC.XDMCD = FY0LW01.XDMCD; /* Dim code*/
    AF5REC.XDVCD = "01"; /* Div code*/
    AF5REC.XOWCD = "00"; /* Owner group code*/

    AF5REC.XSECD = FY0LW02.FY0LWSNC[FY0LWIXM]; /* Season code*/
    AF5REC.XSNYR = FY0LW02.FY0LWSNY[FY0LWIXM]; /* season year*/

    FY0LS98(); /* Get Color cost percent*/
    FY4REC.FY4CCLPC = AF5REC.AF5FSCPT; /* Cost color percent*/
    FY0LW01.FY4CCLPC = AF5REC.AF5FSCPT; /* Cost color pct*/

    PG2REC.XGPCD = FY0LW01.XGPCD; /* GPC code*/
    PG2REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style code*/
    PG2REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Color code*/
    PG2REC.XDMCD = FY0LW01.XDMCD; /* dim.  code*/
    XSPG201(); /* Get duty rates from vsyclr01*/

    FY0LW01.SY1DURT1 = PG2REC.SY1DURT1; /* Duty rate 1*/
    FY0LW01.SY1DURT2 = PG2REC.SY1DURT2; /* Duty rate 2*/
    FY0LW01.SY1ADON1 = PG2REC.SY1ADON1; /* Duty rate add on 1*/
    FY0LW01.SY1ADON2 = PG2REC.SY1ADON2; /* Duty rate add on 2*/

    FY0LS18(); /* Get factory info.*/
    FY0LS17(); /* Worksheet calculations*/

    if (FY0LW01.FY0LW-MAP2-1ST-TIME == "Y") /* first time through*/
      FY0LS15(); /* Format data for map 2*/
      FY0LS42(); /* Format data for map3*/
      FY0LW01.FY0LW-MAP2-1ST-TIME = "N";
    end

  else

    set FY0LM002 alarm; /* Indicate sound alarm*/

  end

  set FY0LM002.SY1STNBR protect; /* Set to protect*/
  set FY0LM002.SY2CLRID protect;
  set FY0LM002.FY1FCTYC protect;
  set FY0LM002.XGPCD protect;
  set FY0LM002.XDMCD protect;
  set FY0LM002.XQACD protect;
  set FY0LM002.PC2INSEG protect;
  set FY0LM002.XPGCD protect;
  set FY0LM002.XUMCD protect;
  set FY0LM002.XSECD protect;
  set FY0LM002.XSNYR protect;

  FY0LM002.XGPCD = FY0LW01.XGPCD; /* Move GPC code to map2*/
  FY0LM002.XGPDESC = FY0LW01.XGPDESC; /* Move GPC desc. to map2*/


  if (converseVar.validationMsgNum == 0) /* No messages*/
    if (FY0LW01.FY0LWUPD == "Y") /* Second time around*/
      move " " to FY0LW01.FY0LWGCL[1] for all; /* Clear color array*/
      move " " to FY0LW01.FY0LWSZA[1] for all; /* Clear size array*/
    end
  end

  FY0LM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0LM002.FY0LMFNC = "CHANGE"; /* Move CHANGE literial to map 2*/


  converse FY0LM002 ;

  FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/

end // end FY0L520

// CHECK ATTENTION IDENTIFIERS
Function FY0L530()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Restore map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0LM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0LM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0LM002.CAITEM; /* To application*/
      FY0L111(); /* Purge any temporary storage*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0LW01.FY0LWINF = "Y"; /* Turn on hard error*/
    end

    set FY0LM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0LM002.XXXPRCNM = "FY0L530"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0LM002"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0L111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM002.XXXPRCNM = "FY0L530"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0LW01.FY0LWMAP = "1"; /* Map flag eq 1*/
    FY0LW01.FY0LWSWR = "Y"; /* Request for data*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0LW01.FY0LWFNC = " "; /* Set function code to spaces*/

    FY0LW01.FY0LWFCD = FY0LM002.FY1FCTYC; /* Save key*/
    FY0LW01.FY0LWCCD = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Save key*/

    FY0LW01.FY0LWFCT = FY0LM002.FY1FCTYC; /* Search key*/
    FY0LW01.SY1STNBR = FY0LM002.SY1STNBR; /* Search key*/
    FY0LW01.SY2CLRID = " ";

    FY0LW01.XSECD = FY0LM002.XSECD;
    FY0LW01.FY0LWFSD = FY0LW02.FY0LWSNY[FY0LWIXM];

    FY0LW01.FY4FOBED = 0;
    FY0LW01.FY4FOXED = 0;
    FY0LW01.FY0LMBED = 0;
    FY0LW01.FY0LWBED = 0;
    FY0LW01.FY0LWXED = 0;

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf6) /* PF6 was pressed*/
    FY0LW01.FY0LWPIX = 1; /* Initialize line index*/
    while (FY0LW01.FY0LWPIX <= 40) /* Until end of lines*/
      if (FY0LM002.SY4IDDSC[FY0LWPIX] > " ") /* Something there*/
        set FY0LM002.FY4FOBPR[FY0LWPIX] normal; /* Open price field*/
      else
        FY0LW01.FY0LWPIX = 41; /* Exit*/
      end
      FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Increment line count*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf11) /* PF11 was pressed*/
    FY0LW01.FY0LWMAP = "3"; /* Map flag eq 3*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0C"; /* Set to factory application*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0F"; /* Set to factory/style*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0LM002.XXXPRCNM = "FY0L530"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on hard error*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear page before display*/

    end

    return; /* Exit to redisplay map*/
  end

end // end FY0L530

// RESET HIGHLIGHTED FIELDS
Function FY0L540()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  set FY0LM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0LM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0LM002.XGPDESC initialAttributes;
  set FY0LM002.XGPCD initialAttributes;

  set FY0LM002.SY1STNBR initialAttributes; /* Reset to defined*/
  set FY0LM002.SY2CLRID initialAttributes; /* Reset to defined*/
  set FY0LM002.XDMCD initialAttributes; /* Reset to defined*/
  set FY0LM002.XQACD initialAttributes; /* Reset to defined*/
  set FY0LM002.PC2INSEG initialAttributes; /* Reset to defined*/
  set FY0LM002.XPGCD initialAttributes; /* Reset to defined*/
  set FY0LM002.XUMCD initialAttributes; /* Reset to defined*/
  set FY0LM002.XSECD initialAttributes; /* Reset to defined*/
  set FY0LM002.XSNYR initialAttributes; /* Reset to defined*/
  set FY0LM002.FY0LMBED initialAttributes; /* Reset to defined*/
  set FY0LM002.FY1FCTYC initialAttributes; /* Reset to defined*/

end // end FY0L540

// VERIFY THE ENTERED DATA
Function FY0L550()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.CAITEM > " ") /* Application data was entered*/
    set FY0LM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on hard error*/
    FY0LM002.XXXPRCNM = "FY0L550"; /* Process name*/
  else

    FY0L551(); /* Validate the entered data*/

  end

end // end FY0L550

// VALIDATE RECORD--CHANGE
Function FY0L551()

   /* ----------------------------------------------------*/
   /* VERIFY THAT ANY COST WORKSHEET OR PRICE INFO HAS*/
   /* CHANGED*/
   /* ----------------------------------------------------*/

  FY0LW01.FY0LWPCH = "N"; /* Price change flag turned off*/
  FY0LW01.FY0LWDCH = "N"; /* Date change flag turned off*/
  FY0LW01.FY0LWDEF = "N"; /* Data entered flag turned off*/

   /* ----------------------------------------------------*/
   /* SEE IF ANY ENTERABLE FIELD HAS CHANGED.*/
   /* ----------------------------------------------------*/
  FY0LW01.FY0LWPIX = 1; /* Saved FY4REC index*/
  FY0LW01.FY0LWMIX = 1; /* Map placement index*/
  FY0LW01.FY0LWRIX = 1; /* FY4REC placement index*/

   /* ------------------------------------------------------------*/
   /* THIS LOOP WILL DETERMINE IF THE PRICE FOR A GIVEN RANGE*/
   /* HAS CHANGED.*/
   /* ------------------------------------------------------------*/

  while (FY0LW03.FY0LWDPS[FY0LWPIX] != 0
   && FY0LW01.FY0LWPIX <= 40
   && FY0LW01.FY0LWMIX <= 40)
    FY0LW01.FY0LWRIX = FY0LW03.FY0LWDPS[FY0LWPIX];
    if (FY0LM002.FY4FOBPR[FY0LWMIX] == FY4REC.FY4FOBPR[FY0LWRIX]
     || FY0LM002.FY4FOBPR[FY0LWMIX] == 0)
      if (FY0LWMIX == 1 /* If first map bucket*/
       && FY0LM002.FY4FOBPR[FY0LWMIX] == 0
       && FY4REC.FY4FOBPR[FY0LWRIX] > 0)
        set FY0LM002.FY4FOBPR[FY0LWMIX] cursor, bold;
        FY0LM002.XXXPRCNM = "FY0L551";
        FY0LW01.FY0LWINF = "N"; /* Turn on hard error flag*/
        converseLib.validationFailed(156);
        exit stack;
      else
        FY0LW01.FY0LWMIX = FY0LW01.FY0LWMIX + 1;
      end
    else
      FY0LW01.FY0LWDEF = "Y"; /* Data entered flag turned on*/
      FY0LW01.FY0LWPCH = "Y"; /* Price change flag turned on*/
    end
    FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1;
  end

  if (FY0LM002.FY4QTDPR == FY4REC.FY4QTDPR /* Fields are equal*/
   && FY0LM002.FY4TGTPR == FY4REC.FY4TGTPR 
   && FY0LM002.FY0LMBED == FY0LW01.FY0LMBED
   && FY0LM002.FY4CMNT == FY4REC.FY4CMNT   
   && FY0LM002.FY4FRGCS == FY4REC.FY4FRGCS)

  else
    FY0LW01.FY0LWDEF = "Y"; /* Data entered flag turned on*/
  end

  if (FY0LW01.FY0LWDEF == "Y"
   || FY0LW01.FY0LW-MAP3-DEF == "Y")

    FY0L553(); /* Check Style/Color*/
    FY0LS43(); /* Worksheet calculations*/

  else
    FY0LM001.FY0LMSEL[FY0LWIXM] = " ";
    FY0LW01.FY0LWFCD = FY0LM002.FY1FCTYC; /* Save key*/
    FY0LW01.FY1FCTYC = " ";
    FY0LW01.FY4FOBED = 0;
    FY0LW01.FY4FOXED = 0;
    FY0LW01.FY0LWBED = 0;
    FY0LW01.FY0LWXED = 0;

    exit stack; /* Get back to top of flow*/

  end


end // end FY0L551

// SEE IF STYLE/COLOR CHANGED
Function FY0L553()

   /* ------------------------------------------------------------*/
   /* VALIDATE THE REASON CODE*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.FYITPIND != "1"
   && FY0LM002.FYITPIND != "2"
   && FY0LM002.FYITPIND != "3")
    converseLib.validationFailed(140);
    set FY0LM002.FYITPIND cursor, bold; /* Highlight*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    FY0LM002.XXXPRCNM = "FY0L553"; /* Process name*/
  else
    FY0LW01.FYITPIND = FY0LM002.FYITPIND; /* Save it*/
  end


   /* ------------------------------------------------------------*/
   /* VALIDATE THE UPDATE ALL COLORS FLAG*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.FY0LMUAC == "Y" /* Must equal 'y' or 'n'*/
   || FY0LM002.FY0LMUAC == "N")

    FY0LW01.FY0LMUAC = FY0LM002.FY0LMUAC;

  else
    converseLib.validationFailed(47); /* Must be 'Y' or 'N'*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    FY0LM002.XXXPRCNM = "FY0L553"; /* Process name*/
    set FY0LM002.FY0LMUAC cursor, bold; /* Highlight error*/
    exit stack; /* Flow to converse map*/
  end

  if (FY0LM002.FY0LMBED != FY0LW01.FY0LMBED)

    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
    TA2REC.TA2GRTYP = "A"; /* Move in date type*/
    TA2REC.TA2GRGAN = FY0LM002.FY0LMBED; /* Move in date*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date validation*/

    if (sysVar.errorCode == "00000000") /* Good call*/
      if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
        if (TA2REC.TA2GRGGN > FY0LW02.FY4FOXED[FY0LWIXM])
          set FY0LM002.FY0LMBED cursor, bold; /* Highlight error*/
          converseLib.validationFailed(63); /* Invalid date*/
          FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
          FY0LM002.XXXPRCNM = "FY0L553"; /* Process name*/
        else
          TA2REC.TA2GRGGN = TA2REC.TA2GRGGN + 10000; /* Add 1 year*/
          XX0XS01(); /* Get current date*/
          if (TA2REC.TA2GRGGN < XX0XW01.XX0XWDAT) /* more than 1 year*/
            set FY0LM002.FY0LMBED cursor, bold; /* Highlight error*/
            converseLib.validationFailed(138); /* Invalid date*/
            FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
            FY0LM002.XXXPRCNM = "FY0L553"; /* Process name*/
          else
            TA2REC.TA2GRGGN = TA2REC.TA2GRGGN - 10000; /* Subtract year*/
            FY0LW01.FY0LMBED = FY0LM002.FY0LMBED; /* Save new date*/
            FY0LW01.FY0LWDCH = "Y"; /* Date changed flag*/
            FY0LW01.FY0LWBED = TA2REC.TA2GRGGN;
            FY0LW01.FY4FOBED = TA2REC.TA2GRGGN;
          end
        end
      else
        set FY0LM002.FY0LMBED cursor, bold; /* Highlight error*/
        converseLib.validationFailed(62); /* Invalid date*/
        FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
        FY0LM002.XXXPRCNM = "FY0L553"; /* Process name*/
      end
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0L553"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end
  end

   /* ------------------------------------------------------------*/
   /* LOAD THE COLOR TABLE WITH THE COLOR ON THE SCREEN ONLY*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.FY0LMUAC == "N") /* All colors flag is no*/
    move " " to FY0LW01.FY0LWGCL[1] for all; /* Init color array*/
    FY4REC.SY2CLRID = FY0LM002.SY2CLRID;
    FY0LW01.FY0LWCLR[1] = FY0LM002.SY2CLRID;
  end

   /* ------------------------------------------------------------*/
   /* LOAD THE COLOR TABLE WITH ALL COLORS IN AN ACTIVE LIFCYCLE*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.FY0LMUAC == "Y") /* All colors flag is yes*/

    FY4REC.XGPCD = FY0LM002.XGPCD;
    FY4REC.FY1FCTYC = FY0LM002.FY1FCTYC;
    FY4REC.SY1STNBR = FY0LM002.SY1STNBR;
    FY4REC.SY2CLRID = "*";
    FY4REC.XDMCD = FY0LM002.XDMCD;
    FY4REC.XQACD = FY0LM002.XQACD;
    FY4REC.PC2INSEG = FY0LM002.PC2INSEG;
    FY4REC.XPGCD = FY0LM002.XPGCD;
    FY4REC.XUMCD = FY0LM002.XUMCD;
    FY4REC.XSECD = FY0LM002.XSECD;
    FY4REC.XSNYR = FY0LW02.FY0LWSNY[FY0LWIXM];
    FYCREC.FYCFNC = "S4";
    FYCREC.FYC1DATE = FY0LW02.FY0LWEFD[FY0LWIXM];
    FYCREC.FYC2DATE = FY0LW02.FY4FOXED[FY0LWIXM];
    FY4REC.FY4SMDCT = 1;
    FY4REC.XXXSTAT = "A";

    FY0LW01.FY0LWIDX = 1; /* Set index to 1*/
    FY0LW01.FY0LWSWC = "N"; /* Move 'N' to EOF*/
    move " " to FY0LW01.FY0LWGCL[1] for all; /* Init color array*/

    FY0LS21(); /* Open fy4rec*/
    FY0LS22(); /* Fetch fy4rec*/

    while (FY0LW01.FY0LWSWC == "N" /* Until EOF*/
     && FY0LW01.FY0LWIDX <= 100)

      if (FY0LW02.FY0LWEFD[FY0LWIXM] == FY4REC.FY4FOBED
       && FY0LW02.FY4FOXED[FY0LWIXM] == FY4REC.FY4FOXED)
        FY0LW01.FY0LWCLR[FY0LWIDX] = FY4REC.SY2CLRID;
        FY0LW01.FY0LWIDX = FY0LW01.FY0LWIDX + 1;
      end
      FY0LS22(); /* Fetch fy4rec*/
    end

    FY0LS23(); /* Close fy4rec*/

    if (FY0LW01.FY0LWINF == "Y" /* No hard errors*/
     && FY0LW01.FY0LWSWC == "N" /* Not end of file*/
     && FY0LW01.FY0LWIDX >= 100)
      converseLib.validationFailed(97); /* Not all colors selected*/
      FY0LM002.XXXPRCNM = "FY0L553"; /* Process name*/
    else
      FY0L246(); /* Size translation, size range check*/
    end

  end


end // end FY0L553

// PROCESS CHANGED DATA
Function FY0L560()

   /* ------------------------------------------------------------*/
   /* PROCESS THE CHANGED DATA*/
   /* ------------------------------------------------------------*/


  if (FY0LW01.FY0LWDEF == "N" /* no Data modified map2*/
   && FY0LW01.FY0LW-MAP3-DEF == "N") /* no Data modified map3*/

    return;
  end

  FY0LW01.FY0LWIDX = 1; /* Set color index to 1*/
  while (FY0LW01.FY0LWCLR[FY0LWIDX] > " " /* Color exists*/
   && converseVar.validationMsgNum == 0) /* No errors*/
    if (FY0LW01.FY0LWDCH == "Y") /* Date has been changed*/
      FY0L561(); /* Update with the new effective date*/
    else
      FY0L570(); /* Select table row*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row was not found*/
        FY0LM002.XXXPRCNM = "FY0L560"; /* Process name*/
        converseLib.validationFailed(12); /* Data updated by someone else*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        set FY0LM002.SY2CLRID cursor, bold;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Roll back any changes*/
        exit stack; /* Flow to converse map*/
      end

      set FYIREC empty; /* Clear history record*/

      FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Previous prices*/
      FYIREC.FY4FOBED = FY4REC.FY4FOBED; /* Beginning date*/
      FYIREC.FY4FOXED = FY4REC.FY4FOXED; /* Ending date*/
      FY0LS32(); /* Fill size buckets*/
      FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Previous quoted price*/
      FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Original setup date*/
      FYIREC.FY4QTDPR = FY0LM002.FY4QTDPR; /* Quoted price*/
      FY0LS31(); /* write history*/

      FY0L571(); /* Update table row*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row was not found*/
        FY0LW01.FY0LWPCH = "N"; /* Price change flag off*/
        FY0LM002.XXXPRCNM = "FY0L560"; /* Process name*/
        converseLib.validationFailed(12); /* Data updated by someone else*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        set FY0LM002.SY2CLRID cursor, bold;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Roll back any changes*/
        exit stack; /* Flow to converse map*/
      end

      FY0LS29(); /* Fill tag file*/
    end
    FY0LW01.FY0LWIDX = FY0LW01.FY0LWIDX + 1; /* Increment index*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit the update*/

  FY0LW01.FY0LWDEF = "N"; /* Clear data entered field*/
  FY0LW01.FY0LW-MAP3-DEF = "N"; /* Clear data entered field*/

  FY0LW01.FY0LWFCD = FY0LM002.FY1FCTYC; /* Save key*/
  FY0LW01.FY0LWIDX = FY0LW01.FY0LWIDX - 1; /* Decrement index*/
  FY0LW01.FY0LWCCD = FY0LW01.FY0LWCLR[FY0LWIDX]; /* Save key*/
  FY0LW01.FY4FOBED = 0; /* Move 0 to beg. FOB date*/
  FY0LW01.FY4FOXED = 0; /* Move 0 to end FOB date*/

  FY0LW01.FY0LWPCH = "N"; /* Turn off price change flag*/
  FY0LW01.FY0LWUPD = "Y"; /* Update successful*/
  FY0LW01.FY0LWSWR = "Y"; /* Set request for data switch*/

  FY0LW01.SY1STNBR = FY0LM002.SY1STNBR;
  FY0LW01.SY2CLRID = " ";

  FY0LW01.XSECD = FY0LM002.XSECD;
  FY0LW01.FY0LWFSD = FY0LW02.FY0LWSNY[FY0LWIXM];

  FY0LW01.FY0LWBED = 0; /* Beg. date*/
  FY0LW01.FY0LMBED = 0; /* Beg. date*/
  FY0LW01.FY0LWOBD = 0; /* Old beg. date*/
  FY0LW01.FY0LWOXD = 0; /* Old end date*/

  set FY0LM002 initial; /* Clear map area*/
  set FYCREC empty; /* Clear rec. area*/

end // end FY0L560

// Update with new effective date
Function FY0L561()

   /* ------------------------------------------------------------*/
   /* PROCESS THE NEW EFFECTIVE DATE*/
   /* ------------------------------------------------------------*/

  FY4REC.XGPCD = FY0LM002.XGPCD;
  FY4REC.FY1FCTYC = FY0LM002.FY1FCTYC;
  FY4REC.SY1STNBR = FY0LM002.SY1STNBR;
  FY4REC.SY2CLRID = FY0LW01.FY0LWCLR[FY0LWIDX];
  FY4REC.XDMCD = FY0LM002.XDMCD;
  FY4REC.XQACD = FY0LM002.XQACD;
  FY4REC.PC2INSEG = FY0LM002.PC2INSEG;
  FY4REC.XPGCD = FY0LM002.XPGCD;
  FY4REC.XUMCD = FY0LM002.XUMCD;
  FY4REC.XSECD = FY0LM002.XSECD;
  FY4REC.XSNYR = FY0LW02.FY0LWSNY[FY0LWIXM];
  FY0LW01.FY0LWFSD = FY0LW02.FY0LWSNY[FY0LWIXM];
  FYCREC.FYCFNC = "S4";
  FYCREC.FYC1DATE = 0;
  FYCREC.FYC2DATE = 99999999;
  FY4REC.FY4SMDCT = 1;
  FY4REC.XXXSTAT = "A";

  FY0LS21(); /* Open fy4rec cursor*/

  FY0LW01.FY0LWSWC = "N"; /* Set eof to no*/
  FY0LS22(); /* Fetch fy4rec row*/

  while (FY0LW01.FY0LWSWC == "N") /* Not eof*/
    FY0LS24(); /* Check for existing rows and adjust dates*/
    FY0LS22(); /* Fetch fy4rec row*/
  end

  FY0LS23(); /* Close fy4rec set*/

  FY0L261(); /* Form new row*/

  FY0L262(); /* Add new row*/

  FY0LS29(); /* Fill and add tag rec*/

end // end FY0L561

// SELECT ROW: IF ALL COLORS
Function FY0L570()

   /* ------------------------------------------------------------*/
   /* Select the Factory Office Row if the all color switch*/
   /* is on.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  FY4REC.XGPCD = FY0LM002.XGPCD; /* Move in fields*/
  FY4REC.SY1STNBR = FY0LM002.SY1STNBR;
  FY4REC.FY1FCTYC = FY0LM002.FY1FCTYC;
  FY4REC.SY2CLRID = FY0LW01.FY0LWCLR[FY0LWIDX];
  FY4REC.XDMCD = FY0LM002.XDMCD;
  FY4REC.XQACD = FY0LM002.XQACD;
  FY4REC.PC2INSEG = FY0LM002.PC2INSEG;
  FY4REC.XPGCD = FY0LM002.XPGCD;
  FY4REC.XUMCD = FY0LM002.XUMCD;
  FY4REC.XSECD = FY0LM002.XSECD;
  FY4REC.XSNYR = FY0LW02.FY0LWSNY[FY0LWIXM];
  FY4REC.XXXSTAT = "A";
  FY4REC.FY4FOBED = FY0LW02.FY0LWEFD[FY0LWIXM];
  FY4REC.FY4FOXED = FY0LW02.FY4FOXED[FY0LWIXM];
  FY4REC.FY4SMDCT = FY0LW02.FY4SMDCT;

  try
    call "IO3000" ("S ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Valid return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0L570"; /* Process name*/
  TA1REC.TA1LOC = "SELECT FOB TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0LM002.XXXPRCNM = "FY0L570"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Get the row as it was*/

  exit stack; /* Exit to display map*/

end // end FY0L570

// UPDATE ROW
Function FY0L571()

   /* ------------------------------------------------------------*/
   /* Update the FOB row*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* This module will fill the FY4REC and the valid buckets*/
   /* within the record.*/
   /* ----------------------------------------------------------*/

  FY0LW01.FY0LWPRE = 0; /* Clear price check field*/
  FY0LW01.FY0LWPIX = 1; /* Saved FY4REC index*/
  FY0LW01.FY0LWMIX = 1; /* Map placement index*/
  FY0LW01.FY0LWRIX = 0; /* FY4REC placement index*/

   /* ------------------------------------------------------------*/
     /* THIS LOOP WILL DETERMINE THE FOB PRICE FOR A GIVE RANGE*/
     /* IF THE RANGE IS VALID.*/
   /* ------------------------------------------------------------*/

  while (FY0LW03.FY0LWDPS[FY0LWPIX] != 0
   && FY0LW01.FY0LWPIX <= 40
   && FY0LW01.FY0LWMIX <= 40)
    FY0LW01.FY0LWRIX = FY0LW03.FY0LWDPS[FY0LWPIX];
    if (FY0LM002.FY4FOBPR[FY0LWMIX] == 0) /* Nothing in field*/
      FY0LM002.FY4FOBPR[FY0LWMIX] = FY0LW01.FY0LWPRE;
      FY4REC.FY4FOBPR[FY0LWRIX] = FY0LM002.FY4FOBPR[FY0LWMIX];
    else
      FY4REC.FY4FOBPR[FY0LWRIX] = FY0LM002.FY4FOBPR[FY0LWMIX];
    end
    FY0LW01.FY0LWPRE = FY0LM002.FY4FOBPR[FY0LWMIX]; /* Prices equal*/
    FY0LW01.FY0LWMIX = FY0LW01.FY0LWMIX + 1;
    FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1;
  end

  FY4REC.XGPCD = FY0LM002.XGPCD; /* Move in fields*/
  FY4REC.SY1STNBR = FY0LM002.SY1STNBR;
  FY4REC.FY1FCTYC = FY0LM002.FY1FCTYC;

  if (FY0LM002.FY0LMUAC == "Y") /* All colors eq 'y'*/
    FY4REC.SY2CLRID = FY0LW01.FY0LWCLR[FY0LWIDX];
  end

  FY4REC.XDMCD = FY0LM002.XDMCD;
  FY4REC.XQACD = FY0LM002.XQACD;
  FY4REC.PC2INSEG = FY0LM002.PC2INSEG;
  FY4REC.XPGCD = FY0LM002.XPGCD;
  FY4REC.XUMCD = FY0LM002.XUMCD;
  FY4REC.XSECD = FY0LM002.XSECD;
  FY4REC.XSNYR = FY0LW02.FY0LWSNY[FY0LWIXM];
  FY4REC.XXXSTAT = "A";
  FY4REC.FY4FOBED = FY0LW02.FY0LWEFD[FY0LWIXM];
  FY4REC.FY4FOXED = FY0LW02.FY4FOXED[FY0LWIXM];
  FY4REC.FY4QTDPR = FY0LM002.FY4QTDPR;
  FY4REC.FY4TGTPR = FY0LM002.FY4TGTPR;
  FY4REC.FY4SMDCT = FY0LW02.FY4SMDCT[FY0LWIXM];

  FY4REC.FY4CMNT = FY0LM002.FY4CMNT;
  FY4REC.FY4OGXRF = FY0LM003.FY4OGXRF;
  FY4REC.FY4CCLPC = FY0LM003.FY4CCLPC;
  FY4REC.FY4LBRCS = FY0LM003.FY4LBRCS;
  FY4REC.FY4FABCS = FY0LM003.FY4FABCS;
  FY4REC.FY4BLNCS = FY0LM003.FY4BLNCS;
  FY4REC.FY4SCNCS = FY0LM003.FY4SCNCS;

  if (FY0LM003.FY4WHLPR > 0 /* something entered*/
   && FY0LM003.FY4WHLPR != FY0LM003.FY0LMPWP) /* Price override*/
    FY4REC.FY4WHLPR = FY0LM003.FY4WHLPR;
  else
    FY4REC.FY4WHLPR = 0;
  end

  FY4REC.FY4FRGCS = FY0LM002.FY4FRGCS;

  XX0XS01();

  FY4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FY4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3000" ("U ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Valid return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0LW01.FY0LWDEF = "N"; /* Data entered flag*/
    FY0LW01.FY0LWPCH = "N"; /* Price changed flag*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0L571"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE FOB TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0LM002.XXXPRCNM = "FY0L571"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Get the row as it was*/

  exit stack; /* Exit to display map*/

end // end FY0L571

// DELETE SCREEN: DELETE
Function FY0L600()
   /* ------------------------------------------------------------*/
   /* This is the main process used for the DELETE MAP.*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/

   /* "EZEFLO" is used to redisplay the map when any major error*/
   /* occur.*/
   /* ------------------------------------------------------------*/

  FY0L610(); /* Select a unique row*/

  FY0L620(); /* Format and display the map*/

  FY0L630(); /* Check attention identifier*/

  FY0L640(); /* Reset fields to normal intensity*/

  FY0L650(); /* Verify the entered data*/

  FY0L660(); /* Process valid input request*/

end // end FY0L600

// SELECT UNIQUE ROW
Function FY0L610()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/

   /* Use the FY0LS33 and FY0LS34 statement groups to get row.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0
   || FY0LW01.FY0LWINF != "Y")
    return;
  end

  FY0LS01(); /* Get record*/

  FY0LW04.FY4GROUP = FY4REC.FY4GROUP; /* Save key in working storage*/

  FY0LS02(); /* Get sizes*/

end // end FY0L610

// FORMAT AND DISPLAY:DELETE MAP
Function FY0L620()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWINF == "Y") /* Soft error*/
    if (converseVar.validationMsgNum == 0) /* No message*/
      converseLib.validationFailed(65); /* Set "press 'pa2' or 'enter' message"*/
      set FY0LM002 initial; /* Clear map output area*/
      set FY0LM002.FYITPIND cursor;
    else
      set FY0LM002 alarm;
    end

    FY0LS18(); /* Get factory info.*/

    set SY5REC empty; /* Clear record*/
    SY5REC.XGPCD = FY0LW01.XGPCD; /* GPC code*/
    SY5REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style code*/
    SY5REC.SY5SZID = 0; /* Size id*/
    SY5REC.XQACD = FY0LW01.XQACD; /* Quality*/
    SY5REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Color code*/
    SY5REC.XDMCD = "00"; /* Dimension code*/
    SY5REC.XPYCD = "01";

    FY0LS99(); /* Get wholsale price for style*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FY0LW01.FY0LWPRC = 0; /* Working storage price*/
      FY0LS96(); /* Get current price*/
      FY0LW01.FY0LMPWP = FY0LW01.FY0LWPRC; /* Wholesale price*/

    else
      FY0LW01.FY0LMPWP = 0; /* Wholesale price*/

    end

    if (PG2REC.SY1BSTNB > " ") /* Blank style code exists*/
      FY0LW01.SY1BSTNB = PG2REC.SY1BSTNB;
      FY0LW01.SY2BCLCD = PG2REC.SY2BCLCD;
      SY5REC.SY1STNBR = PG2REC.SY1BSTNB; /* Blank Style code*/
      SY5REC.SY2CLRID = PG2REC.SY2BCLCD; /* Blank Color code*/

      FY0LS99(); /* Get wholsale price for blank style*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        FY0LW01.FY0LWPRC = 0; /* Working storage price*/
        FY0LS96(); /* Get current price*/
        FY0LW01.FY4BLNCS = FY0LW01.FY0LWPRC; /* Wholesale price*/

      else
        FY0LW01.FY4BLNCS = 0; /* Wholesale price*/

      end

    else
      FY0LW01.SY1BSTNB = " ";
      FY0LW01.SY2BCLCD = " ";
      FY0LW01.FY4BLNCS = 0; /* Blank style price*/

    end


    AF5REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style code*/
    AF5REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Color code*/
    AF5REC.XDMCD = FY0LW01.XDMCD; /* Dim code*/
    AF5REC.XDVCD = "01"; /* Div code*/
    AF5REC.XSECD = FY0LW02.FY0LWSNC[FY0LWIXM];
    AF5REC.XSNYR = FY0LW02.FY0LWSNY[FY0LWIXM];

    FY0LS98(); /* Get Color cost percent*/

    FY4REC.FY4CCLPC = AF5REC.AF5FSCPT; /* Cost color percent*/
    FY0LW01.FY4CCLPC = AF5REC.AF5FSCPT; /* Cost color percent*/

    PG2REC.XGPCD = FY0LW01.XGPCD; /* GPC code*/
    PG2REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style code*/
    PG2REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Color code*/
    PG2REC.XDMCD = FY0LW01.XDMCD; /* dim.  code*/

    XSPG201(); /* Get duty rates from vsyclr01*/

    FY0LW01.SY1DURT1 = PG2REC.SY1DURT1; /* Duty rate 1*/
    FY0LW01.SY1DURT2 = PG2REC.SY1DURT2; /* Duty rate 2*/
    FY0LW01.SY1ADON1 = PG2REC.SY1ADON1; /* Duty rate add on 1*/
    FY0LW01.SY1ADON2 = PG2REC.SY1ADON2; /* Duty rate add on 2*/


    FY0LS17(); /* Worksheet calculations*/
    FY0LS15(); /* Format data for map*/

  else
    set FY0LM002 alarm; /* Indicate sound alarm*/
  end

  FY0LS16(); /* Protect map fields*/

  if (FY0LW01.XGPCD in XGPTBL.XGPCD)
    FY0LM002.XGPCD = FY0LW01.XGPCD; /* Move GPC code to map2*/
    FY0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    FY0LM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end

  set FY0LM002.FY0LMOSL protect, invisible; /* Set to dark*/
  set FY0LM002.FY0LMORL protect, invisible; /* Set to dark*/
  FY0LM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0LM002.FY0LMFNC = "DELETE"; /* Move DELETE literial to map 2*/

  set FY0LM002.FY4CMNT skip; /* Display cost work info*/
  set FY0LM002.FY4QTDPR skip;
  set FY0LM002.FY4TGTPR skip;
  set FY0LM002.FY4FRGCS skip;

  set FY0LM002.FY0LMCOL skip;
  set FY0LM002.FY0LMQTL skip;
  set FY0LM002.FY0LMTGL skip;
  set FY0LM002.FY0LMFCL skip; /* Display prompts*/



  converse FY0LM002 ;

  FY0LW01.FY0LWINF = "Y"; /* Soft error*/

end // end FY0L620

// CHECK ATTENTION IDENTIFIRES
Function FY0L630()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    FY0LM001.FY0LMSEL[FY0LWIXM] = " ";
    converseLib.clearScreen();
     /* Rest entered data*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0LM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0LM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FY0LM002.CAITEM; /* Application data*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0LW01.FY0LWINF = "Y"; /* Soft error*/
    end

    set FY0LM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0LM002.XXXPRCNM = "FY0L630"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0LW01.FY0LWMAP = "1"; /* Move to map 1*/
    FY0LW01.FY0LWFNC = " "; /* Set function code to spaces*/
    FY0LW01.FY0LWSWR = "Y"; /* Request for data is yes*/

    FY0LW01.FY0LWFCD = FY0LM002.FY1FCTYC; /* Save key*/
    FY0LW01.FY0LWCCD = FY0LM002.SY2CLRID; /* Save key*/

    FY0LW01.FY0LWINQ = "Y"; /* Inquire successful*/
    COMMAREA.CAITEM = " "; /* Clear item field*/

    FY0LW01.SY2CLRID = " "; /* Search key*/
    FY0LW01.SY1STNBR = FY0LM002.SY1STNBR;
    FY0LW01.FY0LWFCT = FY0LM002.FY1FCTYC;

    FY0LW01.XSECD = FY0LM002.XSECD;
    FY0LW01.FY0LWFSD = FY0LW02.FY0LWSNY[FY0LWIXM];

    FY0LW01.FY0LMBED = 0; /* Effective date*/
    FY0LW01.FY4FOBED = 0;
    FY0LW01.FY4FOXED = 0;
    FY0LW01.FY0LWBED = 0;
    FY0LW01.FY0LWXED = 0;

    set FY0LM002 initial; /* Clear map area*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* Pf1 pressed*/
      COMMAREA.CAITEM = "FY0LM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0L111(); /* Purge temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM002.XXXPRCNM = "FY0L630"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0C"; /* Set to factory application*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0F"; /* Set to factory/style*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0LM002.XXXPRCNM = "FY0L630"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    FY0LW01.FY0LWINF = "Y"; /* Soft error*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear map before display*/

    end

    return; /* Exit to redisplay map*/
  end

end // end FY0L630

// RESET HIGHLIGHED FIELDS
Function FY0L640()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0LM002.FYITPIND initialAttributes; /* Reason type indicator*/
  set FY0LM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0LM002.CAITEM initialAttributes; /* Commarea application data*/

end // end FY0L640

// VERIFY THE ENTERED DATA
Function FY0L650()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.CAITEM > " ") /* Application data was entered*/
    set FY0LM002.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0LW01.FY0LWINF = "Y"; /* Soft error*/
    FY0LM002.XXXPRCNM = "FY0L650"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE THE REASON CODE*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.FYITPIND != "1"
   && FY0LM002.FYITPIND != "2"
   && FY0LM002.FYITPIND != "3")
    converseLib.validationFailed(140);
    set FY0LM002.FYITPIND cursor, bold; /* Highlight*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    FY0LM002.XXXPRCNM = "FY0L650"; /* Process name*/
    return;
  else
    FY0LW01.FYITPIND = FY0LM002.FYITPIND; /* Save it*/
  end

   /* ------------------------------------------------------------*/
   /* Check P.O. for any items.*/
   /* ------------------------------------------------------------*/

  set PC6REC empty; /* Clear p.o. item record*/
  set PCFREC empty; /* Clear p.o. item record*/

   /* ------------------------------------------------------------*/
   /* Obtain the po season code*/
   /* ------------------------------------------------------------*/

  if (FY4REC.XSECD > " " /* Season code and year entered*/
   && FY4REC.XSNYR > 0) 
    FY0L651(); /* Get a row from dprodc.vpovfy01*/

  end

  PC6REC.XGPCD = FY4REC.XGPCD; /* GPC code*/
  PC6REC.FY1FCTYC = FY4REC.FY1FCTYC; /* Factory code*/
  PC6REC.SY1STNBR = FY4REC.SY1STNBR; /* Style*/
  PC6REC.SY2CLRID = FY4REC.SY2CLRID; /* Color*/
  PC6REC.XDMCD = FY4REC.XDMCD; /* Dimension*/
  PC6REC.XQACD = FY4REC.XQACD; /* Quality*/
  if (FY4REC.PC2INSEG == "000")
    PC6REC.PC2INSEG = "*"; /* wildcard Inventory segment code*/
  else
    PC6REC.PC2INSEG = FY4REC.PC2INSEG; /* Inventory segment code*/
  end
  PC6REC.XPGCD = FY4REC.XPGCD; /* Package Type*/
  PC6REC.XUMCD = FY4REC.XUMCD; /* Unit of measure*/

   /* ----- Wildcard the rest of the fields ------*/

  PCYREC.PCYFRDT = -999999999; /* "FROM" P.O. ID month range*/
  PCYREC.PCYTODT = +999999999; /* "TO" P.O. ID month range*/
  PC6REC.PC6ETSDT = -1; /* ETS date*/
  PC6REC.PC6PLAN = -1; /* P.O. plan*/
  PC6REC.PC4ORTYP = "*"; /* Order type code*/
  PC6REC.XOWCD = "*"; /* Owner group code*/
  PC6REC.XWHCD = "*"; /* Warehouse*/
  PC6REC.PC2CUXID = "*"; /* Customer xref*/
  PC6REC.YMTCD = "*"; /* Transportation mode*/
  PC6REC.XDSCD = "*"; /* Direct ship code*/
  PC6REC.YSMXDV = "*"; /* Division summary code*/
  PC6REC.PC6STAT = "*"; /* P.O. status*/

  FY0LS33(); /* Select set (s3) dprodc.vpoitm01*/

  FY0LS34(); /* Fetch next (n3) dprodc.vpoitm01*/

  FY0LW01.FY0LW-EOF-POITM = "N";
  while (SQLCA.VAGen_SQLCODE == 0
   && FY0LW01.FY0LW-EOF-POITM == "N")
    if (PC6REC.PC6STAT == "CX")
      FY0LS34(); /* Fetch next (n3) dprodc.vpoitm01*/
    else
      set FY0LM002.CAITEM cursor; /* Set cursor*/
      converseLib.validationFailed(152); /* P.O.'s exist*/
      FY0LW01.FY0LWINF = "Y"; /* Soft error*/
      FY0LW01.FY0LW-EOF-POITM = "Y"; /* set flag to end of file*/
      FY0LM002.XXXPRCNM = "FY0L650"; /* Process name*/
    end
  end

  FY0LS35(); /* Close set (c3) dprodc.vpoitm01*/


end // end FY0L650

// Obtain the P.O. season code
Function FY0L651()
   /* ------------------------------------------------------------*/
   /* Obtain the po season code from dprodc.vpovfy01 table*/
   /* ------------------------------------------------------------*/

  PCFREC.XSECD = FY4REC.XSECD; /* Season code*/
  PCFREC.PCFSEYR = FY4REC.XSNYR; /* Season year*/
  PCFREC.XXXSTAT = "*"; /* Status*/

  FY0LS36(); /* Select set (s2) dprodc.vpovfy01*/

  FY0LS37(); /* Fetch next (n2) dprodc.vpovfy01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PC6REC.PCFSECD = PCFREC.PCFSECD; /* P.O. season code*/
  else
    PC6REC.PCFSECD = "*"; /* P.O. season code*/
  end

  FY0LS38(); /* Close set (c2) dprodc.vpovfy01*/

end // end FY0L651

// PROCESS VALID INPUT REQUEST
Function FY0L660()

   /* ------------------------------------------------------------*/
   /* CREATE SAVE KEY FOR RETURNING TO LIST SCREEN*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* No messages*/
    return; /* Exit*/
  end

  FY0LS12(); /* Delete the row*/

  if (converseVar.validationMsgNum != 0)
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback the changes*/
    return; /* Exit*/
  end

  set FYIREC empty; /* Clear history record*/

  move 0 to FYIREC.FYIPRFOB[1] for all; /* Show new prices as zero*/
  FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old fob price*/
  FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
  FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
  FYIREC.FY4FOBED = FY4REC.FY4FOBED; /* Beginning date*/
  FYIREC.FY4FOXED = FY4REC.FY4FOXED; /* Ending date*/
  FYIREC.FY4QTDPR = FY4REC.FY4QTDPR; /* New Quoted price*/
  FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/

  FY0LW01.FYITPIND = FY0LW01.FYITPIND; /* Type indicator*/
  FY0LS31(); /* Add dfcty.vhyfob01 row*/


  if (converseVar.validationMsgNum != 0)
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback the changes*/
    return; /* Exit*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit the delete*/

  FY0LW01.FY0LWFCD = FY0LM002.FY1FCTYC; /* Save key*/
  FY0LW01.FY0LWCCD = FY0LM002.SY2CLRID; /* Save key*/

  FY0LW01.SY2CLRID = " "; /* Search key*/
  FY0LW01.SY1STNBR = FY0LM002.SY1STNBR;
    /* MOVE FY0LM002.FY1FCTYC TO FY0LW01.FY0LWFCT;*/

  FY0LW01.XSECD = FY0LM002.XSECD;
  FY0LW01.FY0LWFSD = FY0LW02.FY0LWSNY[FY0LWIXM];

  FY0LW01.FY0LWSWR = "Y"; /* Turn on request for data*/
  FY0LW01.FY0LWUPD = "Y"; /* Update successful*/
  FY0LM001.FY0LMSEL[FY0LWIXM] = " ";

  FY0LW01.FY0LMBED = 0;
  FY0LW01.FY4FOBED = 0;
  FY0LW01.FY4FOXED = 0;
  FY0LW01.FY0LWBED = 0;
  FY0LW01.FY0LWXED = 0;

  set FY0LM002 initial; /* Clear map area*/



end // end FY0L660

// MAP NUMBER 3: ADD
Function FY0L700()

   /* ------------------------------------------------------------*/
   /* This is the main process used to Add a record.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Return to Map 2 to update the records.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/

  FY0L710(); /* Format and display the map*/

  FY0L720(); /* Check attention identifier*/

  FY0L740(); /* Verify the entered data*/

  FY0L750(); /* Verify the entered row*/

end // end FY0L700

// FORMAT AND DISPLAY: ADD MAP 3
Function FY0L710()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWINF == "Y" /* No hard errors*/
   && converseVar.validationMsgNum == 0) /* No messages*/

    if (FY0LW01.FY0LWLSF == "N") /* Second time around*/
      FY0L711(); /* Format data*/
    end
  end

  if (FY0LW01.FY0LWINF == "N" /* A hard error*/
   || converseVar.validationMsgNum != 0) /* No messages*/
    FY0LW01.FY0LWLSF = "Y"; /* Turn on flag*/
    set FY0LM003 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0
   || converseVar.validationMsgNum == 70)
    FY0LM003.SY1STNBR = FY0LM002.SY1STNBR;
    FY0LM003.SY1SSTNM = FY0LM002.SY1SSTNM;
    FY0LM003.SY2CLRID = FY0LM002.SY2CLRID;
    FY0LM003.SY2CLRAB = FY0LM002.SY2CLRAB;
    FY0LM003.FY0LMUAC = FY0LM002.FY0LMUAC;
    FY0LM003.XDMCD = FY0LM002.XDMCD;
    FY0LM003.XQACD = FY0LM002.XQACD;
    FY0LM003.PC2INSEG = FY0LM002.PC2INSEG;
    FY0LM003.XPGCD = FY0LM002.XPGCD;
    FY0LM003.XUMCD = FY0LM002.XUMCD;
    FY0LM003.XSECD = FY0LM002.XSECD;
    FY0LM003.XSNYR = FY0LM002.XSNYR;
    FY0LM003.FY1FCTYC = FY0LM002.FY1FCTYC;
    if (FY0LW01.XGPCD == "03"
     && FY0LW01.FY1FRGN == "Y")
      FY0LM003.FY1MSCPC = FY0LW01.FY1MSCPC / 100;
    else
      FY0LM003.FY1MSCPC = FY0LW01.FY1MSCPC;
    end
    FY0LM003.FY0LMBED = FY0LW01.FY0LMBED; /* Move to map2*/
  end

  FY0LM003.XGPCD = FY0LM002.XGPCD;
  FY0LM003.XGPDESC = FY0LM002.XGPDESC;
  FY0LM003.FYITPIND = FY0LM002.FYITPIND;
  FY0LM003.XXXCURDT = FY0LM002.XXXCURDT;
  FY0LM003.FY0LMFNC = FY0LM002.FY0LMFNC;

  converse FY0LM003 ;

  FY0LW01.FY0LWLSF = "N"; /* Turn off flag*/
  FY0LW01.FY0LWINF = "Y"; /* Turn on soft error flag*/

end // end FY0L710

// FORMAT cost data - map 3
Function FY0L711()

   /* ------------------------------------------------------------*/
    /* MOVE Map 2 fields to map 3*/
   /* ------------------------------------------------------------*/

  FY0LM003.SY1STNBR = FY0LM002.SY1STNBR;
  FY0LM003.SY1SSTNM = FY0LM002.SY1SSTNM;
  FY0LM003.SY2CLRID = FY0LM002.SY2CLRID;
  FY0LM003.SY2CLRAB = FY0LM002.SY2CLRAB;
  FY0LM003.FY0LMUAC = FY0LM002.FY0LMUAC;
  FY0LM003.FYITPIND = FY0LM002.FYITPIND;
  FY0LM003.XDMCD = FY0LM002.XDMCD;
  FY0LM003.XQACD = FY0LM002.XQACD;
  FY0LM003.PC2INSEG = FY0LM002.PC2INSEG;
  FY0LM003.XPGCD = FY0LM002.XPGCD;
  FY0LM003.XUMCD = FY0LM002.XUMCD;
  FY0LM003.XSECD = FY0LM002.XSECD;
  FY0LM003.XSNYR = FY0LM002.XSNYR;
  FY0LM003.FY1FCTYC = FY0LM002.FY1FCTYC;

  if (FY0LW01.XGPCD == "03"
   && FY0LW01.FY1FRGN == "Y")
    FY0LM003.FY1MSCPC = FY0LW01.FY1MSCPC / 100;
  else
    FY0LM003.FY1MSCPC = FY0LW01.FY1MSCPC;
  end

   /* get the wholesale price for display*/

  SY5REC.XGPCD = FY0LW01.XGPCD; /* GPC code*/
  SY5REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style code*/
  SY5REC.SY5SZID = 0; /* Size id*/
  SY5REC.XQACD = FY0LW01.XQACD; /* Quality*/
  SY5REC.SY2CLRID = "***"; /* Splat to color code*/
  SY5REC.XDMCD = "**"; /* Splat to dim code*/
  SY5REC.XPYCD = "01"; /**/
  FY0LS99(); /* Get wholsale price for style*/
  FY0LM003.FY0LMPWP = SY5REC.SY5PRCUN; /* Wholesale price*/
  FY0LW01.FY4WHLPR = SY5REC.SY5PRCUN; /* Wholesale price*/

  FY0LM003.FY0LMBED = FY0LM002.FY0LMBED;

  set FY0LM003.FY1MSCPC skip;
  set FY0LM003.FY4OGXRF normal;
  set FY0LM003.FY4CCLPC skip;
  set FY0LM003.FY4LBRCS normal;
  set FY0LM003.FY4FABCS normal;
  set FY0LM003.FY4SCNCS normal;
  set FY0LM003.FY4WHLPR normal;

  set FY0LM003.FY0LMCLL skip;
  set FY0LM003.FY0LMCPL skip;
  set FY0LM003.FY0LMMSL skip;
  set FY0LM003.FY0LMMPL skip;
  set FY0LM003.FY0LMCFL skip;
  set FY0LM003.FY0LMDAL skip;
  set FY0LM003.FY0LMBLL skip;
  set FY0LM003.FY0LMQ1L skip;
  set FY0LM003.FY0LMBCL skip;
  set FY0LM003.FY0LMLCL skip;
  set FY0LM003.FY0LMQ2L skip;
  set FY0LM003.FY0LMBNL skip;
  set FY0LM003.FY0LMLNL skip;
  set FY0LM003.FY0LMD1L skip;
  set FY0LM003.FY0LMSCL skip;
  set FY0LM003.FY0LMMRL skip;
  set FY0LM003.FY0LMD2L skip;
  set FY0LM003.FY0LMOGL skip;
  set FY0LM003.FY0LMA1L skip;
  set FY0LM003.FY0LMA2L skip;

end // end FY0L711

// CHECK ATTn IDENTIFIERS - map 3
Function FY0L720()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0LM003.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0LM003.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0LM003.CAITEM; /* To application*/
      FY0L111(); /* Purge any temporary storage*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0LW01.FY0LWINF = "N"; /* Turn off hard error*/
    end

    set FY0LM003.CATOAP cursor, modified, bold; /* Highlight*/
    FY0LM003.XXXPRCNM = "FY0L720"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0LM003"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0L111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM003.XXXPRCNM = "FY0L720"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FY0LW01.FY0LWMAP = "1"; /* Map flag eq 1*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0LW01.FY0LWFNC = " "; /* Set function code to spaces*/

    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf10) /* PF10 was pressed*/
    FY0LW01.FY0LWMAP = "2"; /* Map flag eq 2*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0C"; /* Set to factory application*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0F"; /* Set to factory/style*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0LM003.XXXPRCNM = "FY0L720"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    FY0LW01.FY0LWINF = "N"; /* Turn on soft error*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear map before display*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end FY0L720

// VERIFY THE ENTERED DATA - map3
Function FY0L740()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FY0LM003.CAITEM > " ") /* Application data was entered*/
    set FY0LM003.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0LW01.FY0LWINF = "N"; /* Turn on soft error*/
    FY0LM003.XXXPRCNM = "FY0L740"; /* Process name*/
  end

end // end FY0L740

// SEL TABLE ROWS FOR CHECK -map3
Function FY0L750()

   /* ------------------------------------------------------------*/
   /* If errors reprocesses the map.*/
   /* returns to map2 if all data entered.*/
   /* ------------------------------------------------------------*/

  FY0L951();

  if (converseVar.validationMsgNum != 0) /* Error message*/
    return;
  end

  FY0LW01.FY0LWMAP = "2";
  exit stack; /* Exit to redisplay map*/

end // end FY0L750

// LIST SCREEN: INQUIRE - map3
Function FY0L800()

   /* ------------------------------------------------------------*/
   /* This is the main process used for the INQUIRY MAP.*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/

   /* "EZEFLO" is used to redisplay the map when any major error*/
   /* occur.*/
   /* ------------------------------------------------------------*/

  FY0L820(); /* Format and display the map*/

  FY0L830(); /* Check attention identifier*/

  FY0L840(); /* Reset fields to normal intensity*/

  FY0L850(); /* Verify the entered data*/

end // end FY0L800

// FORMAT AND DISPLAY:INQ MAP3
Function FY0L820()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWINF == "Y") /* Soft error*/
    if (converseVar.validationMsgNum == 0) /* No message*/
      set FY0LM003 initial; /* Clear map output area*/
    else
      set FY0LM003 alarm;
    end
  else
    set FY0LM003 alarm; /* Indicate sound alarm*/
  end

  FY0LS41(); /* move map2 header info to map3*/
  FY0LS42(); /* move map3 data in*/


  set FY0LM003.CATOAP cursor; /* Set cursor to option field*/

  set FY0LM003.SY2BCLCD protect; /* Reset to protect*/
  set FY0LM003.FY1MSCPC protect; /* Reset to protect*/
  set FY0LM003.FY4OGXRF protect; /* Reset to protect*/
  set FY0LM003.FY4CCLPC protect; /* Reset to protect*/
  set FY0LM003.FY4LBRCS protect; /* Reset to protect*/
  set FY0LM003.FY4FABCS protect; /* Reset to protect*/
  set FY0LM003.FY4BLNCS protect; /* Reset to protect*/
  set FY0LM003.FY4SCNCS protect; /* Reset to protect*/
  set FY0LM003.FY4WHLPR protect; /* Reset to protect*/
  set FY0LM003.SY1BSTNB protect; /* Reset to protect*/
  set FY0LM003.SY2BCLCD protect; /* Reset to protect*/
  FY0LW01.FY0LWPRO = "Y"; /* Turn protect flag on*/

  set FY0LM003.FY4OGXRF skip;
  set FY0LM003.FY4LBRCS skip;
  set FY0LM003.FY4FABCS skip;
  set FY0LM003.FY4SCNCS skip;
  set FY0LM003.FY4WHLPR skip;

  converse FY0LM003 ;

  FY0LW01.FY0LWINF = "Y"; /* Soft error*/

end // end FY0L820

// CHECK ATTN IDENTIFIRES - map3
Function FY0L830()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Rest entered data*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0LM003.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0LM003.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FY0LM003.CAITEM; /* Application data*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0LW01.FY0LWINF = "Y"; /* Soft error*/
    end

    set FY0LM003.CATOAP cursor, modified, bold; /* Highlight*/
    FY0LM003.XXXPRCNM = "FY0L830"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0LW01.FY0LWMAP = "1"; /* Move to map 1*/
    FY0LW01.FY0LWSWR = "Y"; /* Request for data is yes*/

    FY0LW01.FY0LWFCD = FY0LM003.FY1FCTYC; /* Save key*/
    FY0LW01.FY0LWCCD = FY0LM003.SY2CLRID; /* Save key*/

    FY0LW01.FY0LWINQ = "Y"; /* Inquire successful*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0LW01.FY0LWFNC = " "; /* Set function code to spaces*/

    FY0LW01.SY2CLRID = " "; /* Search key*/
    FY0LW01.SY1STNBR = FY0LM003.SY1STNBR;
    FY0LW01.FY0LWFCT = FY0LM003.FY1FCTYC;

    FY0LW01.XSECD = FY0LM003.XSECD;
    FY0LW01.FY0LWFSD = FY0LW02.FY0LWSNY[FY0LWIXM];

    FY0LW01.FY0LMBED = 0; /* Effective date*/
    FY0LW01.FY4FOBED = 0;
    FY0LW01.FY4FOXED = 0;
    FY0LW01.FY0LWBED = 0;
    FY0LW01.FY0LWXED = 0;

    set FY0LM003 initial; /* Clear map area*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* Pf1 pressed*/
      COMMAREA.CAITEM = "FY0LM003"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0L111(); /* Purge temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM003.XXXPRCNM = "FY0L830"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf10) /* PF10 was pressed*/
    FY0LW01.FY0LWMAP = "2"; /* Move to map 2*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0C"; /* Set to factory application*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0F"; /* Set to factory/style*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0LM003.XXXPRCNM = "FY0L830"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    FY0LW01.FY0LWINF = "Y"; /* Soft error*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear map before display*/

    end

    return; /* Exit to redisplay map*/
  end

end // end FY0L830

// RESET HIGHLIGHED FIELDS- map3
Function FY0L840()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0LM003.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0LM003.CAITEM initialAttributes; /* Commarea application data*/

end // end FY0L840

// VERIFY THE ENTERED DATA - map3
Function FY0L850()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0LM003.CAITEM > " ") /* Application data was entered*/
    set FY0LM003.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0LW01.FY0LWINF = "Y"; /* Soft error*/
    FY0LM003.XXXPRCNM = "FY0L850"; /* Process name*/
  end

end // end FY0L850

// LIST SCREEN: CHANGE -map3
Function FY0L900()

   /* ------------------------------------------------------------*/
   /* This is the main process used to CHANGE a record.  It will*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/

   /* "EZEFLO" is used to redisplay the map when a major error*/
   /* occurs map.*/
   /* ------------------------------------------------------------*/

  FY0L920(); /* Format and display the map*/

  FY0L930(); /* Check attention identifier*/

  FY0L940(); /* Reset fields to normal intensity*/

  FY0L950(); /* Verify the entered data*/

end // end FY0L900

// FORMAT AND DISPY: Change Map3
Function FY0L920()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWINF == "Y") /* No hard error*/
    if (converseVar.validationMsgNum == 0) /* No error*/
      converseLib.validationFailed(93); /* ENTER OR PA2*/
    else
      set FY0LM003 alarm;
    end
  else
    set FY0LM003 alarm; /* Indicate sound alarm*/
  end

  FY0LS41(); /* move map2 header info to map3*/

  if (FY0LW01.FY0LW-MAP3-1ST-TIME == "Y") /* 1st time in*/
    FY0LS42(); /* format map 3 data*/
    FY0LW01.FY0LW-MAP3-1ST-TIME = "N";
  end

  set FY0LM003.FY4OGXRF normal;
  set FY0LM003.FY4LBRCS normal;
  set FY0LM003.FY4FABCS normal;
  set FY0LM003.FY4SCNCS normal;
  set FY0LM003.FY4WHLPR normal;


  converse FY0LM003 ;

  FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/

end // end FY0L920

// CHECK ATTN IDENTIFIERS - map3
Function FY0L930()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Restore map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0LM003.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0LM003.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0LM003.CAITEM; /* To application*/
      FY0L111(); /* Purge any temporary storage*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0LW01.FY0LWINF = "Y"; /* Turn on hard error*/
    end

    set FY0LM003.CATOAP cursor, modified, bold; /* Highlight*/
    FY0LM003.XXXPRCNM = "FY0L930"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0LM003"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0L111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0LM003.XXXPRCNM = "FY0L930"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0LW01.FY0LWMAP = "1"; /* Map flag eq 1*/
    FY0LW01.FY0LWSWR = "Y"; /* Request for data*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0LW01.FY0LWFNC = " "; /* Set function code to spaces*/

    FY0LW01.FY0LWFCD = FY0LM003.FY1FCTYC; /* Save key*/
    FY0LW01.FY0LWCCD = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Save key*/

    FY0LW01.FY0LWFCT = FY0LM003.FY1FCTYC; /* Search key*/
    FY0LW01.SY1STNBR = FY0LM003.SY1STNBR; /* Search key*/
    FY0LW01.SY2CLRID = " ";

    FY0LW01.XSECD = FY0LM003.XSECD;
    FY0LW01.FY0LWFSD = FY0LW02.FY0LWSNY[FY0LWIXM];

    FY0LW01.FY4FOBED = 0;
    FY0LW01.FY4FOXED = 0;
    FY0LW01.FY0LMBED = 0;
    FY0LW01.FY0LWBED = 0;
    FY0LW01.FY0LWXED = 0;

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf10) /* PF10 was pressed*/
    FY0LW01.FY0LWMAP = "2"; /* Map flag eq 2*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0C"; /* Set to factory application*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0F"; /* Set to factory/style*/
    FY0L111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0LM003.XXXPRCNM = "FY0L930"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on hard error*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear page before display*/

    end

    return; /* Exit to redisplay map*/
  end

end // end FY0L930

// RESET HIGHLIGHTED FLDS - map3
Function FY0L940()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  set FY0LM003.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0LM003.CAITEM initialAttributes; /* Commarea application data*/


end // end FY0L940

// VERIFY THE ENTERED DATA -map3
Function FY0L950()

   /* --------------------------------------------------------*/
    /* If errors reprocesses the map.*/
    /* returns to map2 if all data entered.*/
   /* --------------------------------------------------------*/

  FY0L951();

  if (converseVar.validationMsgNum != 0) /* Error message*/
    return;
  end

  FY0LW01.FY0LWMAP = "2";
  exit stack; /* Exit to redisplay map*/

end // end FY0L950

// VALIDATE RECORD--CHANGE -map3
Function FY0L951()

   /* ----------------------------------------------------*/
   /* VERIFY THAT ANY COST WORKSHEET OR PRICE INFO HAS*/
   /* CHANGED*/
   /* ----------------------------------------------------*/

  if (FY0LM003.FY4OGXRF == FY4REC.FY4OGXRF
   && FY0LM003.FY4CCLPC == FY4REC.FY4CCLPC
   && FY0LM003.FY4LBRCS == FY4REC.FY4LBRCS
   && FY0LM003.FY4FABCS == FY4REC.FY4FABCS
   && FY0LM003.FY4SCNCS == FY4REC.FY4SCNCS
   && FY0LM003.FY4WHLPR == FY4REC.FY4WHLPR)

  else
    FY0LW01.FY0LW-MAP3-DEF = "Y"; /* Data entered flag turned on*/
  end

  if (FY0LW01.FY0LW-MAP3-DEF == "Y")
    FY0LS43(); /* Worksheet calculations*/
  end

end // end FY0L951

// FIND A SINGLE FOB ROW
Function FY0LS01()

   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed from selected*/
   /* rows on FOB by P.O. ID List map.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set FY4REC empty; /* Clear record*/

  FY4REC.XGPCD = FY0LW01.XGPCD; /* Search key*/
  FY4REC.FY1FCTYC = FY0LW02.FY0LWFCT[FY0LWIXM]; /* Get factory*/
  FY4REC.SY1STNBR = FY0LW01.SY1STNBR; /* Search key*/
  FY4REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Search key*/
  FY4REC.XDMCD = FY0LW01.XDMCD; /* Search key*/
  FY4REC.XQACD = FY0LW01.XQACD; /* Search key*/
  FY4REC.PC2INSEG = FY0LW02.FY0LWSPC[FY0LWIXM]; /* Search key*/
  FY4REC.XPGCD = FY0LW01.XPGCD; /* Search key*/
  FY4REC.XUMCD = FY0LW01.XUMCD; /* Search key*/

  FY4REC.XSECD = FY0LW02.FY0LWSNC[FY0LWIXM];
  FY4REC.XSNYR = FY0LW02.FY0LWSNY[FY0LWIXM];

  FY4REC.FY4FOBED = FY0LW02.FY0LWEFD[FY0LWIXM];
  FY4REC.FY4FOXED = FY0LW02.FY4FOXED[FY0LWIXM];
  FY4REC.FY4SMDCT = FY0LW02.FY4SMDCT[FY0LWIXM];

  try
    call "IO3000" ("S ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(21); /* Nothing to display*/
      FY0LM002.XXXPRCNM = "FY0LS01"; /* Process name*/
      converseLib.clearScreen();
       /* Clear map*/
      FY0LW02.FY0LMSEL[FY0LWIXM] = " "; /* Clear index*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS01"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE FOB ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  FY0LW01.FY0LWMAP = "1"; /* Reset map*/
  FY0LW01.FY0LWFNC = " "; /* Reset function*/
  FY0LW01.FY0LWSWR = "Y"; /* Reset function*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0LM002.XXXPRCNM = "FY0LS01"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0LS01

// STYLE/COLOR AND SIZES
Function FY0LS02()

   /* ------------------------------------------------------------*/
   /* SEE IF COLOR/STYLE ENTERED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the STYLE/COLOR set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = FY0LW01.XGPCD; /* Search key*/
  PG2REC.SY1STNBR = FY0LW01.SY1STNBR;
  PG2REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM];
  PG2REC.XDMCD = FY0LW01.XDMCD;

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/
      FY0LW01.SY1SSTNM = PG2REC.SY1SSTNM;
      FY0LW01.SY2CLRAB = PG2REC.SY2CLRAB;
      FY0LW01.XQTCD1 = PG2REC.XQTCD1; /* Quota*/
      FY0LW01.XQTCD2 = PG2REC.XQTCD2;
      FY0LW01.SY1BSTNB = PG2REC.SY1BSTNB; /* Blank sty no*/
      FY0LW01.SY2BCLCD = PG2REC.SY2BCLCD; /* Blank clr cd*/

      set PG3REC empty; /* Clear record*/

      PG3REC.XGPCD = FY0LW01.XGPCD; /* GPC code*/
      PG3REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style number*/
      PG3REC.SY2CLRID = FY0LW02.FY0LWCLR[FY0LWIXM]; /* Color id*/
      PG3REC.XDMCD = FY0LW01.XDMCD; /* Dim. code*/
      PG3REC.XQACD = "**"; /* Quality code*/
      PG3REC.PG3RETCD = "00"; /* Translator return code*/

      PG3REC.PG3FUNCD = "PC"; /* Translator fnc.*/
      PG3REC.PG3DATFM = "N"; /* Compressed/Not compressed sw*/

      TA1REC.TA1PGMNM = "FY0LS02"; /* What executes this sgrp*/

      XSPG301(); /* THIS STATEMENT GROUP WILL GET VALID SIZES*/

      if (PG3REC.PG3RETCD == "00")

        return; /* Return to previous process*/

      else
        if (PG3REC.PG3RETCD == "10") /* Resource not found*/
          converseLib.validationFailed(21); /* Data not found*/
          FY0LM002.XXXPRCNM = "FY0LS02"; /* Process name*/
          return; /* Return to previous process*/
        else
          if (PG3REC.PG3RETCD == "09") /* Data in use by someone else*/
            converseLib.validationFailed(11); /* Deadlock*/
            FY0LM002.XXXPRCNM = "FY0LS02"; /* Process name*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
                                                /* High value*/
          else
            converseLib.validationFailed(10); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            converseLib.clearScreen();
             /* Clear screen before redisplay*/
          end
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "FY0LS02"; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE SIZE ROW";
          TA1REC.TA1MAP = "FY0LM002"; /* Map name*/
          TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/

          call "TA0020" (TA1REC, TAEREC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

          FY0LM002.XXXPRCNM = "FY0LS02"; /* Process name*/

          exit stack; /* Exit to redisplay map*/
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row does not exist*/
        converseLib.validationFailed(73); /* Invalid Style/color*/
        set FY0LM002.SY1STNBR cursor, bold; /* Highlight*/
        set FY0LM002.SY2CLRID bold;
        FY0LM002.XXXPRCNM = "FY0LS02"; /* Process name*/
        return; /* Return to previous process*/
      end
    end
  end
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE ROW";
  TA1REC.TA1MAP = "FY0LM002"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0LM002.XXXPRCNM = "FY0LS02"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0LS02

// SELECT UNIQUE FACTORY ROW
Function FY0LS03()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS03"; /* Process name*/
  if (FY0LW01.FY0LWMAP == "1")
    FY0LM001.XXXPRCNM = "FY0LS03"; /* Process name*/
  else
    FY0LM002.XXXPRCNM = "FY0LS03"; /* Process name*/
  end
  TA1REC.TA1LOC = "SELECT UNIQUE FACTORY ROW  ";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    if (FY0LW01.FY0LWMAP == "1")
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    else
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end

  sysVar.errorCode = TA1REC.TA1MAP; /* Csp retrun code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* Sql commarea*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end FY0LS03

// SELECT SET OF STYLE/COLOR ROWS
Function FY0LS06()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000") /* Good call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS06"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF STYLE/COLOR TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FY0LM002.XXXPRCNM = "FY0LS06"; /* Process name*/

  exit stack;

end // end FY0LS06

// FETCH NEXT ROW
Function FY0LS07()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if not end of set*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* and row not found*/

      FY0LW01.FY0LWSWC = "Y"; /* End of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Not available*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* System error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS07"; /* Process name*/
  TA1REC.TA1LOC = "FETCH STYLE NUMBER";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FY0LM002.XXXPRCNM = "FY0LS07"; /* Process name*/

  exit stack;

end // end FY0LS07

// CLOSE TABLE STYLE/COLOR ROWS
Function FY0LS08()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Valid return code*/

    return; /* Return to previous process*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "FY0LS08"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF STYLE/COLOR TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(10); /* Indicate system error*/
  FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
  FY0LM002.XXXPRCNM = "FY0LS08"; /* Process name*/


end // end FY0LS08

// UPDATE THE DATE RANGE1
Function FY0LS09()

   /* ------------------------------------------------------------*/
   /* DATE VALIDATION--Entered date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "G"; /* Move in date type*/
  TA2REC.TA2GRGGN = FY0LW01.FY0LWBED; /* Move in date*/
  TA2REC.TA2DYAOD = -1; /* Move -1 to days to add*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      FY0LW01.FY0LWXED = TA2REC.TA2GRGGN; /* Ending date*/
    else
      converseLib.validationFailed(62); /* Missing date or invalid*/
      FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
      FY0LM002.XXXPRCNM = "FY0LS09"; /* Process name*/
      set FY0LM002.FY0LMBED cursor, bold; /* Highlight*/
    end
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0LS09"; /* Process name*/
    TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    FY0LM002.XXXPRCNM = "FY0LS09"; /* Process name*/

  end

end // end FY0LS09

// UPDATE THE DATE RANGE2
Function FY0LS10()

   /* ------------------------------------------------------------*/
   /* USE THIS STATEMENT GROUP TO UPDATE THE CURRENT FOB ROW,*/
   /* REPLACE THE OLD FOB ENDING DATE WITH A NEW DATE.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "G"; /* Move in date type*/
  TA2REC.TA2GRGGN = FY4REC.FY4FOBED; /* Move in datefrom the record*/
  TA2REC.TA2DYAOD = -1; /* Move -1 to days to add*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      FY0LW01.FY4FOXED = TA2REC.TA2GRGGN; /* Ending date*/
    else
      converseLib.validationFailed(62); /* Missing date or invalid*/
      FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
      FY0LM002.XXXPRCNM = "FY0LS10"; /* Process name*/
      set FY0LM002.FY0LMBED cursor, bold; /* Highlight*/
    end
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0LS10"; /* Process name*/
    TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    FY0LM002.XXXPRCNM = "FY0LS10"; /* Process name*/

  end

end // end FY0LS10

// DELETE/ADD FOB TABLE ROW
Function FY0LS11()

   /* ------------------------------------------------------------*/
   /* IF NO ERRORS THEN DELETE.*/
   /* ------------------------------------------------------------*/

  FY0LS12(); /* Delete table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Row was found*/
   || SQLCA.VAGen_SQLCODE == 100) /* Row was not found*/
    FY0LS13(); /* Add new table row*/
  end

end // end FY0LS11

// DELETE FOB ROW
Function FY0LS12()

   /* ------------------------------------------------------------*/
   /* Delete the FOB table row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  set FY4REC empty; /* Clear record*/

  FY4REC.FY4GROUP = FY0LW04.FY4GROUP;

  try
    call "IO3000" ("D ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/

  if (sysVar.errorCode == "00000000") /* Sucessful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Valid return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Sucessful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn on soft error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS12"; /* Process name*/
  TA1REC.TA1LOC = "DELETE TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0LM002.XXXPRCNM = "FY0LS12"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0LS12

// ADD NEW FOB ROW
Function FY0LS13()

   /* ------------------------------------------------------------*/
   /* PROCESS ANY ADDED DATA--CHANGE*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWINF == "Y") /* No hard errors*/

    /* ------------------------------------------------------------*/
     /* Select the set of table rows.*/
     /* If not available, return an error message to the user.*/
     /* If any other, indicate system error.*/
    /* ------------------------------------------------------------*/

    FY0LS14();

    if (SQLCA.VAGen_SQLCODE == 0) /* If row does not exists*/
      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row was found*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      converseLib.validationFailed(113); /* This P.O. ID already exists*/
      FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
      FY0LM002.XXXPRCNM = "FY0LS13"; /* Process name*/
      set FY0LM002.FY1FCTYC cursor, bold;
      exit stack;
    end
  end

end // end FY0LS13

// ADD THE NEW FOB ROW
Function FY0LS14()

   /* ------------------------------------------------------------*/
   /* This module adds a FOB P.O. ID table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  FY0LW04.FY4FOXED = FY0LW01.FY0LWXED; /* Move in now ending date*/

  FY4REC.FY4GROUP = FY0LW04.FY4GROUP;

  XX0XS01();

  FY4REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FY4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FY4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FY4REC.ZZZCHGCT = 0; /* Change count*/
  FY4REC.FY4SMDCT = 1; /* Same day counter*/

  try
    call "IO3000" ("A ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000") /* Sucessful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Valid return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Valid return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Sucessful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS14"; /* Process name*/
  TA1REC.TA1LOC = "ADD A UNIQUE FOB TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0LM002.XXXPRCNM = "FY0LS14"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0LS14

// MOVE RECORD FIELDS TO MAP 2
Function FY0LS15()

   /* ------------------------------------------------------------*/
   /* MOVE SELECTED LINES TO MAP 2*/
   /* ------------------------------------------------------------*/

  FY0LM002.SY1STNBR = FY4REC.SY1STNBR; /* Move to map2*/
  FY0LM002.SY1SSTNM = FY0LW01.SY1SSTNM; /* Move to map2*/
  FY0LM002.SY2CLRID = FY4REC.SY2CLRID; /* Move to map2*/
  FY0LM002.SY2CLRAB = FY0LW01.SY2CLRAB; /* Move to map2*/
  FY0LM002.XDMCD = FY4REC.XDMCD; /* Move to map2*/
  FY0LM002.XQACD = FY4REC.XQACD; /* Move to map2*/
  FY0LM002.PC2INSEG = FY4REC.PC2INSEG; /* Move to map2*/
  FY0LM002.XPGCD = FY4REC.XPGCD; /* Move to map2*/
  FY0LM002.XUMCD = FY4REC.XUMCD; /* Move to map2*/
  FY0LW01.FY4FOXED = FY4REC.FY4FOXED; /* Move to working storage*/

  if (FY0LW01.FY0LMUAC == " ")
    FY0LM002.FY0LMUAC = "Y"; /* Move 'Y' to all colors*/
  else
    FY0LM002.FY0LMUAC = FY0LW01.FY0LMUAC;
  end

  FY0LM002.XSECD = FY4REC.XSECD; /* Move to map2*/
  FY0LW01.XSECD = FY4REC.XSECD; /* Move to map2*/
  FY0LW01.FY0LWFSD = FY0LW02.FY0LWSNY[FY0LWIXM];
  FY0LM002.XSNYR = FY0LW02.FY0LWSYY[FY0LWIXM]; /* Move to map2*/

  FY0LW01.FY0LMBYY = FY0LW02.FY0LWEYY[FY0LWIXM]; /* Rearange date*/
  FY0LW01.FY0LMBMM = FY0LW02.FY0LWEMM[FY0LWIXM];
  FY0LW01.FY0LMBDD = FY0LW02.FY0LWEDD[FY0LWIXM];
  FY0LM002.FY0LMBED = FY0LW01.FY0LMBED; /* Move to map2*/


  FY0LM002.FY1FCTYC = FY4REC.FY1FCTYC; /* Move to map2*/
  FY0LM002.FY4QTDPR = FY4REC.FY4QTDPR;
  FY0LM002.FY4TGTPR = FY4REC.FY4TGTPR;
  FY0LM002.FY4CMNT = FY4REC.FY4CMNT;
  FY0LM002.FY4FRGCS = FY4REC.FY4FRGCS;

  set FY0LM002.FY4CMNT normal; /* Display cost workwheet information*/
  set FY0LM002.FY4QTDPR normal;
  set FY0LM002.FY4TGTPR normal;
  set FY0LM002.FY4FRGCS normal;

  set FY0LM002.FY0LMCOL skip;
  set FY0LM002.FY0LMQTL skip;
  set FY0LM002.FY0LMTGL skip;
  set FY0LM002.FY0LMFCL skip; /* Display prompts*/


   /* ------------------------------------------------------------*/
   /* GET SIZE BREAKS AND FOB PRICE BREAKS*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* FORMAT THE FOB LINE FROM WORKING STORAGE*/
   /* ------------------------------------------------------------*/

  set FY0LW03 empty; /* Clear W03 record*/
  while (FY0LW01.FY0LWPIX <= 40) /* Until end of lines*/
    FY0LW03.FY0LWMPS[FY0LWPIX] = 0; /* Initialize index*/
    FY0LW03.FY0LWDPS[FY0LWPIX] = 0; /* Initialize index*/
    FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Increment  line index*/
  end
  FY0LW01.FY0LWPIX = 1; /* Initialize line index*/
  FY0LW01.FY0LWMIX = 1; /* Initialize line index*/
  FY0LW01.FY0LWPRE = 0; /* Previous price index*/

  while (FY0LW01.FY0LWPIX <= 40 /* Until end of lines*/
   && FY0LW01.FY0LWMIX <= 40) /* Until end of screen lines*/
    if (PG3REC.SY4IDDSC[FY0LWPIX] > " ") /* Something in code.*/
      FY0LM002.SY4IDDSC[FY0LWMIX] = PG3REC.SY4IDDSC[FY0LWPIX];
      if (FY4REC.FY4FOBPR[FY0LWPIX] == FY0LW01.FY0LWPRE)
        set FY0LM002.FY4FOBPR[FY0LWMIX] skip;
        FY0LW03.FY0LWMPS[FY0LWPIX] = FY0LW01.FY0LWMIX;
        FY0LW03.FY0LWDPS[FY0LWMIX] = FY0LW01.FY0LWPIX;
        FY0LW01.FY0LWDEF = "Y"; /* Turn on data entered flag*/
        FY0LW01.FY0LWMIX = FY0LW01.FY0LWMIX + 1; /* Increment line index*/

      else

        FY0LW01.FY0LWPRE = FY4REC.FY4FOBPR[FY0LWPIX];
        FY0LM002.FY4FOBPR[FY0LWMIX] = FY4REC.FY4FOBPR[FY0LWPIX];
        if (FY0LW01.FY0LWFNC == "C")
          set FY0LM002.FY4FOBPR[FY0LWMIX] normal;
        else
          set FY0LM002.FY4FOBPR[FY0LWMIX] skip;
        end
        FY0LW03.FY0LWMPS[FY0LWPIX] = FY0LW01.FY0LWMIX;
        FY0LW03.FY0LWDPS[FY0LWMIX] = FY0LW01.FY0LWPIX;
        FY0LW01.FY0LWDEF = "Y"; /* Turn on data entered flag*/
        FY0LW01.FY0LWMIX = FY0LW01.FY0LWMIX + 1; /* Increment line index*/
      end
    end
    FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Increment line index*/
  end

  if (FY0LM002.SY4IDDSC[9] > " ")
    set FY0LM002.FY0LMSZL[2] skip; /* Display*/
    set FY0LM002.FY0LMFBL[2] skip; /* Display*/
    if (FY0LM002.SY4IDDSC[17] > " ")
      set FY0LM002.FY0LMSZL[3] skip; /* Display*/
      set FY0LM002.FY0LMFBL[3] skip; /* Display*/
      if (FY0LM002.SY4IDDSC[25] > " ")
        set FY0LM002.FY0LMSZL[4] skip; /* Display*/
        set FY0LM002.FY0LMFBL[4] skip; /* Display*/
        if (FY0LM002.SY4IDDSC[33] > " ")
          set FY0LM002.FY0LMSZL[5] skip; /* Display*/
          set FY0LM002.FY0LMFBL[5] skip; /* Display*/
        end
      end
    end
  end

  if (FY0LM002.SY4IDDSC[1] > " ")
    set FY0LM002.FY0LMSZL[1] skip; /* Display*/
    set FY0LM002.FY0LMFBL[1] skip; /* Display*/
    if (FY0LW01.FY0LWFNC == "C") /* Change function*/
         /* SET FY0LM002.FY4FOBPR(1) CURSOR,NORMAL;*/
      set FY0LM002.FY0LMUAC cursor, normal;
    end
  else
    converseLib.validationFailed(21); /* Nothing to display*/
    FY0LM002.XXXPRCNM = "FY0LS15"; /* Process name*/
    set FY0LM002.SY1STNBR cursor, bold; /* Highlight error*/
  end

end // end FY0LS15

// SET FIELD ATTRIBUTES
Function FY0LS16()

   /* ---------------------------------------------------------*/
   /* SET THE MAP FIELDS*/
   /* ---------------------------------------------------------*/

  if (FY0LW01.FY0LWFNC == "I")
    set FY0LM002.CATOAP cursor; /* Commarea TO application*/
    set FY0LM002.FYITPIND protect; /* Reset to protect*/
  end

  set FY0LM002.XGPCD protect; /* Reset to protect*/
  set FY0LM002.SY1STNBR protect; /* Reset to protect*/
  set FY0LM002.SY2CLRID protect; /* Reset to protect*/
  set FY0LM002.XDMCD protect; /* Reset to protect*/
  set FY0LM002.XQACD protect; /* Reset to protect*/
  set FY0LM002.PC2INSEG protect; /* Reset to protect*/
  set FY0LM002.XPGCD protect; /* Reset to protect*/
  set FY0LM002.XUMCD protect; /* Reset to protect*/
  set FY0LM002.XSECD protect; /* Reset to protect*/
  set FY0LM002.XSNYR protect; /* Reset to protect*/

  set FY0LM002.FY0LMUAC protect; /* Reset to protect*/
  set FY0LM002.FY0LMBED protect; /* Reset to protect*/
  set FY0LM002.FY1FCTYC protect; /* Reset to protect*/

  set FY0LM002.FY4CMNT protect; /* Reset to protect*/
  set FY0LM002.FY4FOBPR protect; /* Reset to protect*/
  set FY0LM002.FY4QTDPR protect; /* Reset to protect*/
  set FY0LM002.FY4TGTPR protect; /* Reset to protect*/
  set FY0LM002.FY4FRGCS protect; /* Reset to protect*/

  FY0LW01.FY0LWPRO = "Y"; /* Turn protect flag on*/

end // end FY0LS16

// WORKSHEET CALCULATIONS
Function FY0LS17()

   /* ------------------------------------------------------------*/
   /* THIS PROCESS WILL PERFORM THE NEEDED COMPUTATIONS FOR THE*/
   /* WORKSHEET SECTION .*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* SEARCH FOR A PRICE THAT IS GREATER THAN ZERO*/
   /* ------------------------------------------------------------*/

  FY0LW01.FY0LWMIX = 1; /* Map placement index*/

  while (FY0LW01.FY0LWMIX <= 40 /* and subscript <  40*/
   && FY4REC.FY4FOBPR[FY0LWMIX] == 0) /* Price equals zero*/
    FY0LW01.FY0LWMIX = FY0LW01.FY0LWMIX + 1;
  end

  if (FY0LW01.FY0LWMIX > 40) /* Prices gt $0.00*/
    FY0LW01.FY0LWMIX = 1; /* Map placement index*/
    if (FY4REC.FY4QTDPR == 0)
      FY0LW01.FY0LWDRA = 0;
      FY0LW01.FY0LMARG = 0;
      FY0LW01.FY0LWMCP = 0;
      FY0LW01.FY0LMLCT = 0;
      FY0LW01.FY0LWFBP = 0;
    else
      FY0LW01.FY0LWFBP = FY4REC.FY4QTDPR;
    end
  else
    FY0LW01.FY0LWFBP = FY4REC.FY4FOBPR[FY0LWMIX];
  end

  if (FY0LW01.FY0LWFBP > 0)

    /* ---------------------------------------------------------*/
     /* CALCULATE THE DUTY AMOUNT*/
     /* DUTY AMOUNT = (DUTY RATE1 * F.O.B.) + (DUTY RATE2 * F.O.B.)*/
                                  /* + (add on amount)*/
    /* ------------------------------------------------------------*/


    FY0LW01.FY0LWDR1 = FY0LW01.SY1DURT1 * FY0LW01.FY0LWFBP; /* Duty rate 1*/
    if (FY0LW01.SY1DURT2 > 0)
      FY0LW01.FY0LWDR1 = FY0LW01.FY0LWDR1 * 0.65;
    end
    FY0LW01.FY0LWDR1 = FY0LW01.SY1ADON1 + FY0LW01.FY0LWDR1;

    FY0LW01.FY0LWDR2 = FY0LW01.SY1DURT2 * FY0LW01.FY0LWFBP; /* Duty rate 2*/
    if (FY0LW01.SY1DURT1 > 0)
      FY0LW01.FY0LWDR2 = FY0LW01.FY0LWDR2 * 0.35;
    end
    FY0LW01.FY0LWDR2 = FY0LW01.SY1ADON2 + FY0LW01.FY0LWDR2;

    FY0LW01.FY0LWDR1 = FY0LW01.FY0LWDR1 + FY0LW01.FY0LWDR2 + 0.005;
    FY0LW01.FY0LWDRA = FY0LW01.FY0LWDR1;


    /* ------------------------------------------------------------*/
     /* CALCULATE THE MISCELANEOUS PERCENT*/
     /* MISC. % = FACTORY MISC. X  / 100 * FOB PRICE USED*/
    /* ------------------------------------------------------------*/

    if (FY0LW01.XGPCD == "03"
     && FY0LW01.FY1FRGN == "Y")
      FY0LW01.FY0LWAR1 = FY0LW01.FY1MSCPC / 10000 * FY0LW01.FY0LWFBP;
    else
      FY0LW01.FY0LWAR1 = FY0LW01.FY1MSCPC / 100 * FY0LW01.FY0LWFBP;
    end
    FY0LW01.FY0LWAR1 = FY0LW01.FY0LWAR1 + 0.0050;
    FY0LW01.FY0LWMCP = FY0LW01.FY0LWAR1;

    /* ------------------------------------------------------------*/
     /* CALCULATE THE LANDED COST*/
     /* LANDED COST = F.O.B. + FRT. COST + MISC. % + DUTY AMT.*/
    /* ------------------------------------------------------------*/

    FY0LW01.FY0LWLC1 = FY0LW01.FY0LWFBP + FY4REC.FY4FRGCS;
    FY0LW01.FY0LWLC2 = FY0LW01.FY0LWMCP + FY0LW01.FY0LWDRA;

    FY0LW01.FY0LMLCT = FY0LW01.FY0LWLC1 + FY0LW01.FY0LWLC2;

    /* ------------------------------------------------------------*/
     /* CALCULATE THE MARGIN PERCENT*/
     /* MARGIN % = ((LANDED COST / WHOLESALE PRICE) * 100) - 100*/
    /* ------------------------------------------------------------*/

    if (FY4REC.FY4WHLPR > 0) /* MAP WHOLESALE PRICE*/
      FY0LW01.FY0LWAR1 = FY0LW01.FY0LMLCT / FY4REC.FY4WHLPR + 0.00005;
      FY0LW01.FY0LMARG = FY0LW01.FY0LWAR1 * 100 - 100;
      FY0LW01.FY0LMARG = FY0LW01.FY0LMARG * -1;
    else
      if (FY0LW01.FY0LWPRC > 0) /* prod Wholesale price*/
        FY0LW01.FY0LWAR1 = FY0LW01.FY0LMLCT / FY0LW01.FY0LWPRC + 0.00005;
        FY0LW01.FY0LMARG = FY0LW01.FY0LWAR1 * 100 - 100;
        FY0LW01.FY0LMARG = FY0LW01.FY0LMARG * -1;
      else
        FY0LW01.FY0LMARG = 0;
      end
    end
  end

end // end FY0LS17

// RETRIVE FACTORY INFORMATION
Function FY0LS18()

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  FY1REC.FY1FCTYC = FY0LW02.FY0LWFCT[FY0LWIXM]; /* Search key*/
  FY1REC.XGPCD = FY0LW01.XGPCD; /* Search key*/

  FY0LS03(); /* Select unique factory*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (FY1REC.XXXSTAT == "A")
      FY0LW01.FY1FRGN = FY1REC.FY1FRGN; /* off-shore flag*/
      FY0LW01.FY1MSCPC = FY1REC.FY1MSCPC; /* Misc.%*/
      FY0LW01.FY1BGDPC = FY1REC.FY1BGDPC; /* B-Grade %*/
    else
      if (FY0LW01.FY0LWFNC == "C")
        converseLib.validationFailed(67); /* Factory inactive*/
        FY0LM001.XXXPRCNM = "FY0LS18"; /* Process name*/
        FY0LW01.FY0LWMAP = "1"; /* map*/
        set FY0LM001.FY0LMSEL[FY0LWIXM] cursor, bold; /* Highlight error*/
        exit stack; /* Exit to display map 1*/
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (FY0LW01.FY0LWFNC == "C")
        converseLib.validationFailed(33); /* Factory code missing/invalid*/
        FY0LM001.XXXPRCNM = "FY0LS18"; /* Process name*/
        FY0LW01.FY0LWMAP = "1"; /* map*/
        set FY0LM001.FY0LMSEL[FY0LWIXM] cursor, bold; /* Highlight error*/
        exit stack; /* Exit to display map 1*/
      end
    end
  end

end // end FY0LS18

// FIND SIZE RANGES
Function FY0LS19()

  FY0LW01.FY0LWPRS = " "; /* Set previous size to spaces*/
  FY0LW01.FY0LWPIX = 1; /* FOB index*/

   /* ------------------------------------------------------------*/
   /* THIS LOOP WILL DETERMINE THE SIZES PRESENT FOR THE COLORS*/
   /* ENTERED. THE SIZES WILL BE MOVED INTO AN ARRAY AND THEN IF*/
   /* ANY SIZE RANGE DIFFERENCE IT WILL BE AN ERROR AND A MESSAGE*/
   /* WILL BE DISPLAYED.*/
   /* ------------------------------------------------------------*/

  while (PG3REC.SY4IDDSC[FY0LWPIX] == " " /* No size present*/
   && FY0LW01.FY0LWPIX <= 40)
    FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Add 1 to index*/
  end

   /* ------------------------------------------------------------*/
   /* THIS LOOP WILL DETERMINE THE SIZE RANGE PRESENT*/

   /* THE FIRST PART OF THE LOOP WILL DETERMINE THE LOW RANGE.*/

   /* THE VALUE OF FY0LPIX AT THIS POINT WILL BE SOME NUMBER*/
   /* GT ZERO AND LE TO 40. THE INDEX WILL BE POINTING TO A*/
   /* VALID SIZE THAT WILL NOT BE SPACES WHEN STARTING THE WHILE*/
   /* LOOP.*/
   /* ------------------------------------------------------------*/

  FY0LW01.FY0LWPRS = " ";

  while (FY0LW01.FY0LWPIX <= 40
   && PG3REC.SY4IDDSC[FY0LWPIX] > " ")

    /* ------------------------------------------------------*/
     /* MOVE THE FIRST SIZE TO THE SIZE ARRAY.*/
    /* ------------------------------------------------------*/

    FY0LW01.FY0LWBSZ[FY0LWSIX] = PG3REC.SY4IDDSC[FY0LWPIX];

    /* ----------------------------------------------------------*/
       /* THIS SECOND PART OF THE LOOP WILL DETERMINE THE HIGH*/
       /* VALUE IN THE RANGE.*/
    /* ----------------------------------------------------------*/

    while (FY0LW01.FY0LWPIX <= 40)
      if (PG3REC.SY4IDDSC[FY0LWPIX] > " ")
        FY0LW01.FY0LWESZ[FY0LWSIX] = PG3REC.SY4IDDSC[FY0LWPIX];
      end
      FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1; /* Add 1 to index*/
    end
  end

end // end FY0LS19

// Select fy4rec (s4)
Function FY0LS21()

   /* ------------------------------------------------------------*/
   /* Select the set of fob table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error flag*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error flag*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS21"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF FOB ROWS";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FY0LM001.XXXPRCNM = "FY0LS21"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0LS21

// Fetch fy4rec (n4)
Function FY0LS22()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3000" ("N4", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Call sucessful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FY0LW01.FY0LWSWC = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
  end


  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0LW01.FY0LWINF = "Y"; /* Turn on soft error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS22"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED FOB ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table view key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0LM001.XXXPRCNM = "FY0LS22"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0LS22

// Close fy4rec (c4)
Function FY0LS23()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3000" ("C4", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (sysVar.errorCode == "00000000" /* Csp return code*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Everything OK*/

        /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Map name*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0LS23"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF FOB TABLE ROWS";
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
    TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/
    converseLib.clearScreen();

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FY0LM001.XXXPRCNM = "FY0LS23"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0LW01.FY0LWINF = "N"; /* Turn off soft error*/

  end

end // end FY0LS23

// Check and update rows
Function FY0LS24()

   /* ------------------------------------------------------------*/
   /* CHECK THE EFFECTIVE DATES TO SEE IF NEW DATE OVERLAPS AND*/
   /* UPDATE OR DELETE THE EXISTING ROWS.*/
   /* ------------------------------------------------------------*/

  if (FY4REC.FY4FOBED >= FY0LW01.FY4FOBED /* From date GE From date*/
   && FY4REC.FY4FOXED <= FY0LW01.FY4FOXED) /* To date LE To date*/

    FY0LS39(); /* Check for existing price*/

    FY0LS25(); /* Delete fy4rec row*/

    set FYIREC empty; /* Clear history record*/

    FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
    FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
    FYIREC.FY4FOBED = FY4REC.FY4FOBED; /* Old row beginning date*/
    FYIREC.FY4FOXED = FY4REC.FY4FOXED; /* Old row ending date*/

    FY0LS32(); /* Fill new price buckets*/
    FYIREC.FY4QTDPR = FY0LM002.FY4QTDPR; /* New Quoted price*/
    FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/
    FY0LS31(); /* write history*/
  else
    if (FY4REC.FY4FOBED < FY0LW01.FY4FOBED  /* From date LT From date*/
     && FY4REC.FY4FOXED >= FY0LW01.FY4FOBED /* To date GE From date*/
     && FY4REC.FY4FOXED <= FY0LW01.FY4FOXED) /* To date LE To date*/

      FY0LS39(); /* Check for existing price*/

      FY0LS25(); /* Delete fy4rec row first*/
      set TA2REC empty;
      TA2REC.TA2GRGGN = FY0LW01.FY4FOBED; /* Set up for adjust*/
      FY0LS26(); /* Adjust 'TO' date*/
      FY4REC.FY4FOXED = TA2REC.TA2GRGGN; /* move in new end date*/
      FY0LS27(); /* Add fy4rec row*/
      set FYIREC empty; /* Clear history record*/

      FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
      FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
      FYIREC.FY4FOBED = FY0LW01.FY4FOBED; /* New row beginning date*/
      FYIREC.FY4FOXED = FY4REC.FY4FOXED; /* Old row ending date*/

      FY0LS32(); /* Fill new price buckets*/
      FYIREC.FY4QTDPR = FY0LM002.FY4QTDPR; /* New Quoted price*/
      FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/
      FY0LS31(); /* write history*/
    else
      if (FY4REC.FY4FOBED >= FY0LW01.FY4FOBED /* From date GE From date*/
       && FY4REC.FY4FOBED < FY0LW01.FY4FOXED  /* From date LT To date*/
       && FY4REC.FY4FOXED > FY0LW01.FY4FOXED) /* To date GT To date*/

        FY0LS39(); /* Check for existing price*/

        FY0LS25(); /* Delete fy4rec row first*/
        FY0LS28(); /* Adjust fy4rec from date*/
        FY0LS27(); /* Add fy4rec row*/

        set FYIREC empty; /* Clear history record*/

        FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
        FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
        FYIREC.FY4FOXED = FY0LW01.FY4FOXED; /* Old row beginning date*/
        FYIREC.FY4FOBED = FY4REC.FY4FOBED; /* New row ending date*/

        FY0LS32(); /* Fill new price buckets*/
        FYIREC.FY4QTDPR = FY0LM002.FY4QTDPR; /* New Quoted price*/
        FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/
        FY0LS31(); /* write history*/
      else
        if (FY4REC.FY4FOBED < FY0LW01.FY4FOBED /* From date LT From date*/
         && FY4REC.FY4FOXED > FY0LW01.FY4FOXED) /* To date GT To date*/

          FY0LS39(); /* Check for existing price*/

          FY0LW01.FY0LWSTD = FY4REC.FY4FOXED; /* Save 'TO' date*/

          FY0LS25(); /* Delete fy4rec row first*/
          set TA2REC empty;
          TA2REC.TA2GRGGN = FY0LW01.FY4FOBED; /* Set up for adjust*/
          FY0LS26(); /* Adjust 'TO' date*/
          FY4REC.FY4FOXED = TA2REC.TA2GRGGN; /* move in new end date*/
          FY0LS27(); /* Add fy4rec row*/

          FY4REC.FY4FOXED = FY0LW01.FY0LWSTD;
                                   /* Restore the 'TO' date*/

          FY0LS28(); /* Adjust fy4rec from date*/
          FY0LS27(); /* Add fy4rec row*/

          set FYIREC empty; /* Clear history record*/

          FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
          FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
          FYIREC.FY4FOXED = FY0LW01.FY4FOXED; /* New row begin date*/
          FYIREC.FY4FOBED = FY0LW01.FY4FOBED; /* New row ending date*/

          FY0LS32(); /* Fill new price buckets*/
          FYIREC.FY4QTDPR = FY0LM002.FY4QTDPR; /* New Quoted price*/
          FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/
          FY0LS31(); /* write history*/
        end
      end
    end
  end


end // end FY0LS24

// Delete fy4rec row
Function FY0LS25()

   /* ------------------------------------------------------------*/
   /* Delete the table row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3000" ("D ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Valid return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS25"; /* Process name*/
  TA1REC.TA1LOC = "DELETE TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* TABLE KEY*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0LM002.XXXPRCNM = "FY0LS25"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any database updates*/

  exit stack;


end // end FY0LS25

// Find previous month
Function FY0LS26()

   /* ------------------------------------------------------------*/
   /* FIND THE PREVIOUS MONTH BY SUBTRACTING THE NUMBER OF DAYS*/
   /* IN THE CURRENT MONTH*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "G"; /* Move in date type*/
  TA2REC.TA2DYAOD = -1; /* Add negative days*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000" /* Good call*/
   && TA2REC.TA2RTNCD == 0000)       /* Valid date*/
     /* next sentence*/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0LS26"; /* Process name*/
    TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0LM002.XXXPRCNM = "FY0LS26"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back any updates*/

    exit stack; /* Flow to converse map*/

  end

end // end FY0LS26

// Add fy4rec row
Function FY0LS27()

   /* ------------------------------------------------------------*/
   /* This module re-adds a row to the dfcty.vfyfob01 table*/
   /* That has had the date range changed.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FY4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FY4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3000" ("A ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Valid return code*/

    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS27"; /* Process name*/
  TA1REC.TA1LOC = "ADD A UNIQUE FOB TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0LM002.XXXPRCNM = "FY0LS27"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any updates*/

  exit stack; /* Exit to redisplay map*/


end // end FY0LS27

// Find the next month
Function FY0LS28()

   /* ------------------------------------------------------------*/
   /* FIND THE NEXT MONTH BY ADDING ONE TO THE NUMBER OF DAYS*/
   /* IN THE CURRENT MONTH*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "G"; /* Move in date type*/
  TA2REC.TA2GRGGN = FY0LW01.FY4FOXED; /* Move in date*/
  TA2REC.TA2DYAOD = 1; /* Days to add*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000" /* Good call*/
   && TA2REC.TA2RTNCD == 0000)       /* Valid date*/
    FY4REC.FY4FOBED = TA2REC.TA2GRGGN; /* Beginning date*/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0LS28"; /* Process name*/
    TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0LM002.XXXPRCNM = "FY0LS28"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back any updates*/

    exit stack; /* Flow to converse map*/

  end

end // end FY0LS28

// Fill and add dfcty.vfytag01
Function FY0LS29()


   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL ADD A ROW TO THE DFCTY.VFYTAG01 TAG*/
   /* RECORD DATABASE FOR LETTER OF CREDIT MEMOS.*/
   /* ----------------------------------------------------------*/

  FYHREC.XGPCD = FY4REC.XGPCD; /* Move in fields*/
  FYHREC.SY1STNBR = FY4REC.SY1STNBR;
  FYHREC.FY1FCTYC = FY4REC.FY1FCTYC;
  FYHREC.XSECD = FY4REC.XSECD;
  FYHREC.XSNYR = FY4REC.XSNYR;
  FYHREC.SY2CLRID = FY4REC.SY2CLRID;
  FYHREC.XDMCD = FY4REC.XDMCD;
  FYHREC.XQACD = FY4REC.XQACD;
  FYHREC.PC2INSEG = FY4REC.PC2INSEG;
  FYHREC.XPGCD = FY4REC.XPGCD;
  FYHREC.XUMCD = FY4REC.XUMCD;
  FYHREC.FY4FOBED = FY4REC.FY4FOBED;
  FYHREC.FY4FOXED = FY4REC.FY4FOXED;
  FYHREC.FYHSZPRC = FY4REC.FY4SZPRC;

  XX0XS01(); /* Date routine*/

  FYHREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FYHREC.ZZHHMMSS = XX0XW01.XX0XWHMS;


   /* ------------------------------------------------------------*/
   /* ADD THE ROW TO THE DATABASE*/
   /* ------------------------------------------------------------*/


  try
    call "IO4550" ("A ", SQLCA, FYHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Valid return code*/

    return; /* Return to previous process*/

  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS04"; /* Process name*/
  TA1REC.TA1LOC = "ADD A TAG RECORD TO TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYTAG01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYHREC.FYHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0LM002.XXXPRCNM = "FY0LS04"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  exit stack; /* Exit to redisplay map*/


end // end FY0LS29

// Obtain valid sizes
Function FY0LS30()

   /* ------------------------------------------------------------*/
   /* THIS PROCESS WILL OBTAIN THE VALID SIZES FOR THE STYLE/COLOR*/
   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Clear record*/

  PG3REC.XGPCD = FY0LW01.XGPCD; /* GPC code*/
  PG3REC.SY1STNBR = FY0LW01.SY1STNBR; /* Style number*/
  PG3REC.SY2CLRID = FY0LW01.SY2CLRID; /* Color id*/
  PG3REC.XDMCD = FY0LW01.XDMCD; /* Dim. code*/
  PG3REC.XQACD = "**"; /* Quality code*/
  PG3REC.PG3RETCD = "00"; /* Translator return code*/

  PG3REC.PG3FUNCD = "PC"; /* Translator fnc.*/
  PG3REC.PG3DATFM = "N"; /* Compressed/Not compressed sw*/

  TA1REC.TA1PGMNM = "FY0LS30"; /* What executes this sgrp*/

  XSPG301(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                   /* SIZE BREAKS.*/

  if (PG3REC.PG3RETCD == "00")

    return; /* Return to previous process*/

  else

    if (PG3REC.PG3RETCD == "09") /* Data in use by someone else*/
      FY0LW01.FY0LWINF = "Y"; /* Turn on soft errror*/
      converseLib.validationFailed(11); /* Deadlock*/
      FY0LM001.XXXPRCNM = "FY0LS30"; /* Process name*/
    else
      FY0LW01.FY0LWINF = "N"; /* Turn off soft errror*/
      converseLib.validationFailed(10); /* Unexpected error*/
      FY0LM001.XXXPRCNM = "FY0LS30"; /* Process name*/
      exit stack;
    end
  end

end // end FY0LS30

// Add dfcty.vhyfob01 row
Function FY0LS31()

   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL ADD A ROW TO THE DFCTY.VHYFOB01 HISTORY*/
   /* RECORD DATABASE.*/
   /* ----------------------------------------------------------*/

  FYIREC.XGPCD = FY4REC.XGPCD; /* Move in fields*/
  FYIREC.FY1FCTYC = FY4REC.FY1FCTYC;
  FYIREC.XSECD = FY4REC.XSECD;
  FYIREC.XSNYR = FY4REC.XSNYR;
  FYIREC.SY1STNBR = FY4REC.SY1STNBR;
  FYIREC.SY2CLRID = FY4REC.SY2CLRID;
  FYIREC.XDMCD = FY4REC.XDMCD;
  FYIREC.XQACD = FY4REC.XQACD;
  FYIREC.PC2INSEG = FY4REC.PC2INSEG;
  FYIREC.XPGCD = FY4REC.XPGCD;
  FYIREC.XUMCD = FY4REC.XUMCD;
  FYIREC.FYITPIND = FY0LW01.FYITPIND;

  XX0XS01(); /* Date routine*/

  FYIREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FYIREC.ZZZSTM = XX0XW01.XX0XWTIM;

   /* ------------------------------------------------------------*/
   /* ADD THE ROW TO THE DATABASE*/
   /* ------------------------------------------------------------*/

  try
    call "IO4790" ("A ", SQLCA, FYIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Valid return code*/

    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0LS31"; /* Process name*/
  TA1REC.TA1LOC = "ADD A HISTORY ROW TO TABLE";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYIREC.FYIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0LM002.XXXPRCNM = "FY0LS31"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  exit stack; /* Exit to redisplay map*/


end // end FY0LS31

// Fill the fyirec buckets
Function FY0LS32()
   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL FILL THE FYIREC AND THE VALID BUCKETS*/
   /* WITHIN THE RECORD.*/
   /* ----------------------------------------------------------*/

  FY0LW01.FY0LWPRE = 0; /* Clear price check field*/
  FY0LW01.FY0LWPIX = 1; /* Saved FY4REC index*/
  FY0LW01.FY0LWMIX = 1; /* Map placement index*/
  FY0LW01.FY0LWRIX = 0; /* FY4REC placement index*/

   /* ------------------------------------------------------------*/
   /* THIS LOOP WILL DETERMINE THE FOB PRICE FOR A GIVEN RANGE*/
   /* IF THE RANGE IS VALID.*/
   /* ------------------------------------------------------------*/

  while (FY0LW03.FY0LWDPS[FY0LWPIX] != 0
   && FY0LW01.FY0LWPIX <= 40
   && FY0LW01.FY0LWMIX <= 40)
    FY0LW01.FY0LWRIX = FY0LW03.FY0LWDPS[FY0LWPIX];
    if (FY0LM002.FY4FOBPR[FY0LWMIX] == 0) /* Nothing in field*/
      FY0LM002.FY4FOBPR[FY0LWMIX] = FY0LW01.FY0LWPRE;
      FYIREC.FY4FOBPR[FY0LWRIX] = FY0LM002.FY4FOBPR[FY0LWMIX];
    else
      FYIREC.FY4FOBPR[FY0LWRIX] = FY0LM002.FY4FOBPR[FY0LWMIX];
    end
    FY0LW01.FY0LWPRE = FY0LM002.FY4FOBPR[FY0LWMIX]; /* Prices equal*/
    FY0LW01.FY0LWMIX = FY0LW01.FY0LWMIX + 1;
    FY0LW01.FY0LWPIX = FY0LW01.FY0LWPIX + 1;
  end


end // end FY0LS32

// (S3) DPRODC.VPOITM01
Function FY0LS33()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S3";

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FY0LM002.XXXPRCNM = "FY0LS33"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "FY0LS33"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of fy0ls33 ***********************/
end // end FY0LS33

// (N3) DPRODC.VPOITM01
Function FY0LS34()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N3";

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FY0LM002.XXXPRCNM = "FY0LS34"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "FY0LS34"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of fy0ls34 ***********************/
end // end FY0LS34

// (C3) DPRODC.VPOITM01
Function FY0LS35()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C3";

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  FY0LM002.XXXPRCNM = "FY0LS35"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "FY0LS35"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of fy0ls35 ***********************/
end // end FY0LS35

// (S2) DPRODC.VPOVFY01
Function FY0LS36()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S2", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FY0LM002.XXXPRCNM = "FY0LS36"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "FY0LS36"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCFREC.PCFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of fy0ls36 ***********************/
end // end FY0LS36

// (N2) DPRODC.VPOVFY01
Function FY0LS37()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("N2", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FY0LM002.XXXPRCNM = "FY0LS37"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "FY0LS37"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = PCFREC.PCFKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of fy0ls37 ***********************/
end // end FY0LS37

// (C2) DPRODC.VPOVFY01
Function FY0LS38()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("C2", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  FY0LM002.XXXPRCNM = "FY0LS38"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "FY0LS38"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of fy0ls38 ***********************/
end // end FY0LS38

// CHECK FOR EXISTING PRICE
Function FY0LS39()
   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL CHECK THE EXISTING ROWS TO INSURE THAT*/
   /* IF A PRICE ALREADY EXISTS, IT WILL NOT BE ZEROED.*/
   /* ----------------------------------------------------------*/

  if (FY0LM002.FY4FOBPR[1] == 0) /* No price entered*/

    FY0LW01.FY0LWIX1 = 1; /* Saved FY4REC index*/

    while (FY0LW01.FY0LWIX1 <= 40) /* while more buckets*/

      if (FY4REC.FY4FOBPR[FY0LWIX1] > 0) /* Price entered*/
        FY0LW01.FY0LWCLF[FY0LWIDX] = "Y"; /* Turn on non-process flag*/
        converseLib.validationFailed(157); /* One or more rows not added*/
        FY0LM002.XXXPRCNM = "FY0LS39"; /* Process in error*/
        FY0LW01.FY0LWINF = "N"; /* Turn on hard error*/
        set FY0LM002.FY4FOBPR[1] cursor, modified, bold;
        exit stack;
      end

      FY0LW01.FY0LWIX1 = FY0LW01.FY0LWIX1 + 1; /* increment index*/
    end
  end

end // end FY0LS39

// Select Region code
Function FY0LS40()
   /* ------------------------------------------------------------*/
   /* Load key fields for table access*/
   /* ------------------------------------------------------------*/

  set TABREC empty;
  set SQLCA empty;
  TABREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0800" (TABREC) {isNoRefresh = yes, isExternal = yes}; /* Select row*/
  SQLCA.SQLCAREC = TABREC.SQLCAREC;

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    return; /* Return to previous process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear map*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0 &&  /* Row found*/
  TAB-RTN-CD != 0)                
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TABREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  if (SQLCA.VAGen_SQLCODE == 0)
    TA1REC.TA1TYPE = "DA  "; /* Type of error*/
  else
    TA1REC.TA1TYPE = TAB-RTN-CD;
  end
  TA1REC.TA1PGMNM = "FY0LS40"; /* Process name*/
  TA1REC.TA1LOC = "SELECT THEATER OF OPER  ";
  TA1REC.TA1DBASE = "TA0800  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end FY0LS40

// move map2 header info to map3
Function FY0LS41()
   /* ------------------------------------------------------------*/
   /* move map 2 fields to map 3*/
   /* ------------------------------------------------------------*/

  FY0LM003.XGPCD = FY0LM002.XGPCD;
  FY0LM003.XGPDESC = FY0LM002.XGPDESC;
  FY0LM003.SY1STNBR = FY0LM002.SY1STNBR;
  FY0LM003.SY1SSTNM = FY0LM002.SY1SSTNM;
  FY0LM003.SY2CLRID = FY0LM002.SY2CLRID;
  FY0LM003.SY2CLRAB = FY0LM002.SY2CLRAB;
  FY0LM003.FY0LMUAC = FY0LM002.FY0LMUAC;
  FY0LM003.FYITPIND = FY0LM002.FYITPIND;
  FY0LM003.XDMCD = FY0LM002.XDMCD;
  FY0LM003.XQACD = FY0LM002.XQACD;
  FY0LM003.PC2INSEG = FY0LM002.PC2INSEG;
  FY0LM003.XPGCD = FY0LM002.XPGCD;
  FY0LM003.XUMCD = FY0LM002.XUMCD;
  FY0LM003.XSECD = FY0LM002.XSECD;
  FY0LM003.XSNYR = FY0LM002.XSNYR;
  FY0LM003.FY1FCTYC = FY0LM002.FY1FCTYC;
  FY0LM003.FY0LMBED = FY0LM002.FY0LMBED;
  FY0LM003.XXXCURDT = FY0LM002.XXXCURDT;
  FY0LM003.FY0LMFNC = FY0LM002.FY0LMFNC;

end // end FY0LS41

// move data to map3
Function FY0LS42()
   /* ------------------------------------------------------------*/
   /* move cost data to map 3*/
   /* ------------------------------------------------------------*/


  if (FY0LW01.XGPCD == "03"
   && FY0LW01.FY1FRGN == "Y")
    FY0LM003.FY1MSCPC = FY0LW01.FY1MSCPC / 100;
  else
    FY0LM003.FY1MSCPC = FY0LW01.FY1MSCPC; /* Move to map2*/
  end

  FY0LM003.XQTCD1 = FY0LW01.XQTCD1; /* Quota1*/
  FY0LM003.XQTCD2 = FY0LW01.XQTCD2; /* Quota2*/
  FY0LM003.SY1BSTNB = FY0LW01.SY1BSTNB; /* Blk sty number*/
  FY0LM003.SY2BCLCD = FY0LW01.SY2BCLCD; /* Blk sty code*/
  FY0LM003.SY1DURT1 = FY0LW01.SY1DURT1; /* Move to map3*/
  FY0LM003.SY1DURT2 = FY0LW01.SY1DURT2; /* Move to map3*/
  FY0LM003.SY1ADON1 = FY0LW01.SY1ADON1; /* Move to map3*/
  FY0LM003.SY1ADON2 = FY0LW01.SY1ADON2; /* Move to map3*/
  FY0LM003.FY0LMDRA = FY0LW01.FY0LWDRA; /* Move to map3*/
  FY0LM003.FY0LMPER = FY0LW01.FY0LWMCP; /* Move to map3*/
  FY0LM003.FY0LMLCT = FY0LW01.FY0LMLCT; /* Move to map3*/
  FY0LM003.FY0LMARG = FY0LW01.FY0LMARG; /* Move to map3*/
  FY0LM003.FY0LMPWP = FY0LW01.FY0LMPWP; /* Move to map3*/
  FY0LM003.FY4CCLPC = FY0LW01.FY4CCLPC;

  FY0LM003.FY4OGXRF = FY4REC.FY4OGXRF;
  FY0LM003.FY4LBRCS = FY4REC.FY4LBRCS;
  FY0LM003.FY4FABCS = FY4REC.FY4FABCS;
  FY0LM003.FY4BLNCS = FY0LW01.FY4BLNCS;
  FY0LM003.FY4SCNCS = FY4REC.FY4SCNCS;
  FY0LM003.FY4WHLPR = FY4REC.FY4WHLPR;

  set FY0LM003.FY0LMCLL skip;
  set FY0LM003.FY0LMCPL skip;
  set FY0LM003.FY0LMMSL skip;
  set FY0LM003.FY0LMMPL skip;
  set FY0LM003.FY0LMCFL skip;
  set FY0LM003.FY0LMDAL skip;
  set FY0LM003.FY0LMBLL skip;
  set FY0LM003.FY0LMQ1L skip;
  set FY0LM003.FY0LMBCL skip;
  set FY0LM003.FY0LMLCL skip;
  set FY0LM003.FY0LMQ2L skip;
  set FY0LM003.FY0LMBNL skip;
  set FY0LM003.FY0LMLNL skip;
  set FY0LM003.FY0LMA1L skip;
  set FY0LM003.FY0LMA2L skip;
  set FY0LM003.FY0LMD1L skip;
  set FY0LM003.FY0LMSCL skip;
  set FY0LM003.FY0LMMRL skip;
  set FY0LM003.FY0LMD2L skip;
  set FY0LM003.FY0LMOGL skip;

  set FY0LM003.FY1MSCPC skip;
  set FY0LM003.FY4CCLPC skip;
  set FY0LM003.FY4BLNCS skip;
  set FY0LM003.FY0LMPWP skip;

end // end FY0LS42

// worksheet computations
Function FY0LS43()

   /* ------------------------------------------------------------*/
   /* THIS PROCESS WILL PERFORM THE NEEDED COMPUTATIONS FOR THE*/
   /* WORKSHEET SECTION .*/
   /* ------------------------------------------------------------*/

  if (FY0LM002.FY4FOBPR[1] == 0 /* Something there*/
   || FY0LM002.FY4FRGCS == 0    /* Freight cost*/
   || FY0LM003.FY0LMPWP == 0)   /* Product file Wholesale price*/

    return; /* Exit to the previous process*/

  end



   /* ------------------------------------------------------------*/
   /* CALCULATE THE DUTY AMOUNT*/
   /* DUTY AMOUNT = (DUTY RATE1 * F.O.B.) + (DUTY RATE2 * F.O.B.)*/
   /* ------------------------------------------------------------*/

  FY0LW01.FY0LWFBP = FY0LM002.FY4FOBPR[1];

  FY0LW01.FY0LWDR1 = FY0LM003.SY1DURT1 * FY0LW01.FY0LWFBP;
  FY0LW01.FY0LWDR1 = FY0LM003.SY1ADON1 + FY0LW01.FY0LWDR1;

  FY0LW01.FY0LWDR2 = FY0LM003.SY1DURT2 * FY0LW01.FY0LWFBP;
  FY0LW01.FY0LWDR2 = FY0LM003.SY1ADON2 + FY0LW01.FY0LWDR2;

  FY0LW01.FY0LWDRA = FY0LW01.FY0LWDR1 + FY0LW01.FY0LWDR2;

   /* ------------------------------------------------------------*/
   /* CALCULATE THE MISCELLANEOUS PERCENT*/
   /* MISC. % = FACTORY MISC. X  / 100*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.XGPCD == "03"
   && FY0LW01.FY1FRGN == "Y")
    FY0LW01.FY0LWMCP = FY0LW01.FY1MSCPC / 10000 * FY0LW01.FY0LWFBP;
  else
    FY0LW01.FY0LWMCP = FY0LW01.FY1MSCPC / 100 * FY0LW01.FY0LWFBP;
  end

   /* ------------------------------------------------------------*/
   /* CALCULATE THE LANDED COST*/
   /* LANDED COST = F.O.B. + FRT. COST + MISC. % + DUTY AMT.*/
   /* ------------------------------------------------------------*/

  FY0LW01.FY0LWLC1 = FY0LW01.FY0LWFBP + FY0LW01.FY4FRGCS;
  FY0LW01.FY0LWLC2 = FY0LW01.FY0LWMCP + FY0LW01.FY0LWDRA;

  FY0LW01.FY0LMLCT = FY0LW01.FY0LWLC1 + FY0LW01.FY0LWLC2;

   /* ------------------------------------------------------------*/
   /* CALCULATE THE MARGIN PERCENT*/
   /* MARGIN % = ((LANDED COST / WHOLESALE PRICE) * 100) - 100*/
   /* ------------------------------------------------------------*/

  if (FY0LM003.FY4WHLPR > 0) /* Something entered*/
    FY0LW01.FY4WHLPR = FY0LM003.FY4WHLPR;
    FY0LW01.FY0LMARG = FY0LW01.FY0LMLCT / FY0LW01.FY4WHLPR * 100 - 100;
  else
    FY0LW01.FY4WHLPR = FY0LM003.FY0LMPWP;
    FY0LW01.FY0LMARG = FY0LW01.FY0LMLCT / FY0LW01.FY4WHLPR * 100 - 100;
    FY0LM003.FY0LMPWP = 0; /* Re-zero field*/
  end

end // end FY0LS43

// Check for current price
Function FY0LS96()

   /* ------------------------------------------------------------*/
   /* Use the current price from the dprod.vprice01 table*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* First, find the current season date from the YSNTBL*/
   /* ------------------------------------------------------------*/

  FY0LW01.FY0LWTRF = "N"; /* Set table row found flag*/
  FY0LW01.FY0LWIXS = 1; /* Set table index to 1*/
  FY0LW01.FY0LWSYR = FY0LW02.FY0LWSNY[FY0LWIXM]; /* Save as binary*/

  while (FY0LW01.FY0LWTRF == "N" /* While row not found*/
   && YSNTBL.XSECD[FY0LWIXS] != "99") /* and not end of table*/
    if (FY0LW01.XGPCD == YSNTBL.XGPCD[FY0LWIXS]
     && TABREC.XDR-PROD-REG-CD == YSNTBL.XDR-PROD-REG-CD[FY0LWIXS]
     && FY0LW02.FY0LWSNC[FY0LWIXM] == YSNTBL.XSECD[FY0LWIXS]
     && FY0LW02.FY0LWSNY[FY0LWIXM] == YSNTBL.XSNYR[FY0LWIXS])
       /* AND FY0LW01.FY0LWSYR EQ YSNTBL.XSNYR(FY0LWIXS);*/
      FY0LW01.FY0LWTRF = "Y";
    end
    FY0LW01.FY0LWIXS = FY0LW01.FY0LWIXS + 1; /* Increment index*/
  end

   /* ------------------------------------------------------------*/
   /* If the season wasn't found, use the first price.*/
   /* ------------------------------------------------------------*/

  if (FY0LW01.FY0LWTRF == "N") /* Season was not found*/
    FY0LW01.FY0LWPRC = 0; /* Zero the price*/
    return; /* and get out*/

  else
    FY0LW01.FY0LWIXS = FY0LW01.FY0LWIXS - 1; /* Decrement index*/
  end

   /* ------------------------------------------------------------*/
   /* If the season was found, use the season beg. date for the*/
   /* price row.*/
   /* ------------------------------------------------------------*/

  if (SY5REC.SY5PCEDT[1] <= YSNTBL.XSN-SESN-BDT[FY0LWIXS]
   && SY5REC.SY5PSIND[1] == "O")
    FY0LW01.FY0LWPRC = SY5REC.SY5PRCUN[1];
    return;
  end

  if (YSNTBL.XSN-SESN-BDT[FY0LWIXS] >= SY5REC.SY5PCEDT[2]
   && SY5REC.SY5PSIND[2] == "O")
    FY0LW01.FY0LWPRC = SY5REC.SY5PRCUN[2];
    return;
  end

  if (YSNTBL.XSN-SESN-BDT[FY0LWIXS] >= SY5REC.SY5PCEDT[3]
   && SY5REC.SY5PSIND[3] == "O")
    FY0LW01.FY0LWPRC = SY5REC.SY5PRCUN[3];
    return;
  end

  if (YSNTBL.XSN-SESN-BDT[FY0LWIXS] >= SY5REC.SY5PCEDT[4]
   && SY5REC.SY5PSIND[4] == "O")
    FY0LW01.FY0LWPRC = SY5REC.SY5PRCUN[4];
    return;
  end

  if (YSNTBL.XSN-SESN-BDT[FY0LWIXS] >= SY5REC.SY5PCEDT[5]
   && SY5REC.SY5PSIND[5] == "O")
    FY0LW01.FY0LWPRC = SY5REC.SY5PRCUN[5];
    return;
  end

  if (YSNTBL.XSN-SESN-BDT[FY0LWIXS] >= SY5REC.SY5PCEDT[6]
   && SY5REC.SY5PSIND[6] == "O")
    FY0LW01.FY0LWPRC = SY5REC.SY5PRCUN[6];
    return;
  end

  FY0LW01.FY0LWPRC = 0;


end // end FY0LS96

// Select dprodc.vprdcu01
Function FY0LS97()
   /* ------------------------------------------------------------*/
   /* Select inventory segment code*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous precess.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user*/
   /* otherwise, indicate that an unexpected error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FY0LM002.XXXPRCNM = "FY0LS97"; /* Process identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/


  else
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  FY0LW01.FY0LWINF = "N"; /* Hard error*/

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S97"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2INSEG; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end FY0LS97

// GET COLOR COST PERCENT
Function FY0LS98()
   /* ------------------------------------------------------------*/
   /* Get the color cost percent from apparel forecast*/
   /* ------------------------------------------------------------*/

  try
    call "IO3520" ("S ", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous precess.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user*/
   /* otherwise, indicate that an unexpected error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FY0LM002.XXXPRCNM = "FY0LS98"; /* Process identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/


  else
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  FY0LW01.FY0LWINF = "N"; /* Hard error*/

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S98"; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF5REC.AF5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end FY0LS98

// GET PRICE DPROD.VPRICE01
Function FY0LS99()
   /* ------------------------------------------------------------*/
   /* Get the product wholesale price.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous precess.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user*/
   /* otherwise, indicate that an unexpected error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FY0LM002.XXXPRCNM = "FY0LS99"; /* Process identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/


  else
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  FY0LW01.FY0LWINF = "N"; /* Hard error*/

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S99"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRICE01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY5REC.SY5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end FY0LS99

//*** RECORD=FY0LW01 ****
// Working storage for FY0L - FOB BY EFF. DATE
// ***********************
Record FY0LW01 type basicRecord
  10 XXXRVNBR XXXRVNBR ; 
  10 FY0LWSWC FY0LWSWC ; 
  10 FY0LW-EOF-POITM FY0LW-EOF-POITM ; 
  10 FY0LWSCD FY0LWSCD ; 
  10 FY0LWTRF FY0LWTRF ; 
  10 FY0LWSWR FY0LWSWR ; 
  10 FY0LWXSF FY0LWXSF ; 
  10 FY0LWWTR FY0LWWTR ; 
  10 FY0LMTSP FY0LMTSP ; 
  10 FY0LWPIX FY0LWPIX ; 
  10 FY0LWIX1 FY0LWIX1 ; 
  10 FY0LWRIX FY0LWRIX ; 
  10 FY0LWSIX FY0LWSIX ; 
  10 FY0LWMIX FY0LWMIX ; 
  10 FY0LWIXM FY0LWIXM ; 
  10 FY0LWIXS FY0LWIXS ; 
  10 FY0LWIDX FY0LWIDX ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FY0LWQIX FY0LWQIX ; 
  10 FY0LWMAP FY0LWMAP ; 
  10 FY4QTDPR FY4QTDPR ; 
  10 FY4TGTPR FY4TGTPR ; 
  10 FY1BGDPC FY1BGDPC ; 
  10 FY0LWFCT FY0LWFCT ; 
  10 FY0LWPFY FY0LWPFY ; 
  10 FY0LWPCL FY0LWPCL ; 
  10 FY0LWPSC FY0LWPSC ; 
  10 FY0LWPSY FY0LWPSY ; 
  10 FY0LWPSP FY0LWPSP ; 
  10 FY0LWPED FY0LWPED ; 
  10 FY4FOBED FY4FOBED ; 
  10 FY0LWFED FY0LWFED ; 
    15 FY0LWFCC FY0LWFCC ; 
    15 FY0LWFYY FY0LWFYY ; 
    15 FY0LWFMM FY0LWFMM ; 
    15 FY0LWFDD FY0LWFDD ; 
  10 FY0LWOBD FY0LWOBD ; 
  10 FY0LWOXD FY0LWOXD ; 
  10 FY0LWBED FY0LWBED ; 
  10 FY0LMBED FY0LMBED ; 
    15 FY0LMBMM FY0LMBMM ; 
    15 FY0LMBDD FY0LMBDD ; 
    15 FY0LMBYY FY0LMBYY ; 
  10 FY0LWPOB FY0LWPOB ; 
  10 FY0LWXED FY0LWXED ; 
  10 FY4FOXED FY4FOXED ; 
  10 FY0LWSTD FY0LWSTD ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 XGPABRV XGPABRV ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XTVCD XTVCD ; 
  10 XSECD XSECD ; 
  10 XSNYR XSNYR ; 
  10 FY0LWSYR FY0LWSYR ; 
  10 FY0LWSNC FY0LWSNC ; 
  10 FY0LWSNY FY0LWSNY ; 
  10 FY0LWFSD FY0LWFSD ; 
    15 FY0LWFSC FY0LWFSC ; 
    15 FY0LWFST FY0LWFST ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 FY0LWPRE FY0LWPRE ; 
  10 FY0LWIND FY0LWIND ; 
  10 FY0LWLSF FY0LWLSF ; 
  10 FY0LW-SAVED-SY2CLRID FY0LW-SAVED-SY2CLRID ; 
  10 FY0LW-RESET-MAP-FLAGS FY0LW-RESET-MAP-FLAGS ; 
  10 FY0LW-MAP2-1ST-TIME FY0LW-MAP2-1ST-TIME ; 
  10 FY0LW-MAP3-1ST-TIME FY0LW-MAP3-1ST-TIME ; 
  10 FY0LWPRO FY0LWPRO ; 
  10 FY0LWDEL FY0LWDEL ; 
  10 FY0LWINQ FY0LWINQ ; 
  10 FY0LWUPD FY0LWUPD ; 
  10 FY0LWADD FY0LWADD ; 
  10 FY0LWCSF FY0LWCSF ; 
  10 FY0LWDCH FY0LWDCH ; 
  10 FY0LWPCH FY0LWPCH ; 
  10 FY0LWSKE FY0LWSKE ; 
    15 FY0LWFCD FY0LWFCD ; 
    15 FY0LWCCD FY0LWCCD ; 
  10 CAITEM CAITEM ; 
    15 FY0LWFNC FY0LWFNC ; 
    15 * char(19) ; 
  10 FY0LW-MAP3-DEF FY0LW-MAP3-DEF ; 
  10 FY0LWDEF FY0LWDEF ; 
  10 FY0LWDFL FY0LWDFL ; 
  10 FY0LWINF FY0LWINF ; 
  10 FY0LMUAC FY0LMUAC ; 
  10 FY0LWGCL FY0LWGCL [100] ; 
    15 FY0LWCLR FY0LWCLR ; 
    15 FY0LWCLF FY0LWCLF ; 
  10 FY0LWPRS FY0LWPRS ; 
  10 FY0LWSZA FY0LWSZA [100] ; 
    15 FY0LWFSS FY0LWFSS ; 
      20 FY0LWBSZ FY0LWBSZ ; 
      20 FY0LWESZ FY0LWESZ ; 
  10 FY0LWFOB FY0LWFOB ; 
  10 FY0LWFBP FY0LWFBP ; 
  10 FY0LWDR1 FY0LWDR1 ; 
  10 FY0LWDR2 FY0LWDR2 ; 
  10 FY0LWDRA FY0LWDRA ; 
  10 FY0LWMCP FY0LWMCP ; 
  10 FY0LMLCT FY0LMLCT ; 
  10 FY0LMARG FY0LMARG ; 
  10 FY0LWAR1 FY0LWAR1 ; 
  10 FY0LWLC1 FY0LWLC1 ; 
  10 FY0LWLC2 FY0LWLC2 ; 
  10 FY0LMPWP FY0LMPWP ; 
  10 FY0LWPRC FY0LWPRC ; 
  10 XQTCD1 XQTCD1 ; 
  10 XQTCD2 XQTCD2 ; 
  10 SY1BSTNB SY1BSTNB ; 
  10 SY2BCLCD SY2BCLCD ; 
  10 SY1ADON1 SY1ADON1 ; 
  10 SY1ADON2 SY1ADON2 ; 
  10 SY1DURT1 SY1DURT1 ; 
  10 SY1DURT2 SY1DURT2 ; 
  10 FY1MSCPC FY1MSCPC ; 
  10 FY4OGXRF FY4OGXRF ; 
  10 FY4CCLPC FY4CCLPC ; 
  10 FY4LBRCS FY4LBRCS ; 
  10 FY4FABCS FY4FABCS ; 
  10 FY4BLNCS FY4BLNCS ; 
  10 FY4SCNCS FY4SCNCS ; 
  10 FY4WHLPR FY4WHLPR ; 
  10 FY4FRGCS FY4FRGCS ; 
  10 FYITPIND FYITPIND ; 
  10 FY0LWDTE FY0LWDTE ; 
  10 FY0LWCEN FY0LWCEN ; 
  10 FY0LWYY FY0LWYY ; 
  10 FY0LWMM FY0LWMM ; 
  10 FY0LWDD FY0LWDD ; 
  10 FY1FRGN FY1FRGN ; 
end // end FY0LW01

//*** RECORD=FY0LW02 ****
// Temporary storage record for FY0L - FOB BY EFF. DATE.
// ***********************
Record FY0LW02 type basicRecord
  10 FY0LWLEN FY0LWLEN ; 
  10 FY0LWLIN FY0LWLIN [11] ; 
    15 FY0LMSEL FY0LMSEL ; 
    15 FY0LWFPO FY0LWFPO ; 
      20 FY0LWFCT FY0LWFCT ; 
      20 FY0LWCLR FY0LWCLR ; 
      20 FY0LWSEA FY0LWSEA ; 
        30 FY0LWSNC FY0LWSNC ; 
        30 FY0LWSNY FY0LWSNY ; 
          40 FY0LWSCC FY0LWSCC ; 
          40 FY0LWSYY FY0LWSYY ; 
      20 FY0LWSPC FY0LWSPC ; 
      20 FY0LWEFD FY0LWEFD ; 
        30 FY0LWECC FY0LWECC ; 
        30 FY0LWEYY FY0LWEYY ; 
        30 FY0LWEMM FY0LWEMM ; 
        30 FY0LWEDD FY0LWEDD ; 
      20 FY0LWXED FY0LWXED ; 
        30 FY0LWXCC FY0LWXCC ; 
        30 FY0LWXYY FY0LWXYY ; 
        30 FY0LWXMM FY0LWXMM ; 
        30 FY0LWXDD FY0LWXDD ; 
      20 FY4QTDPR FY4QTDPR ; 
      20 FY0LWCDT FY0LWCDT ; 
      20 FY0LWSIZ FY0LWSIZ ; 
        25 FY0LWFSZ FY0LWFSZ ; 
        25 FY0LWDSH FY0LWDSH ; 
        25 FY0LWTSZ FY0LWTSZ ; 
      20 FY4FOBPR FY4FOBPR ; 
      20 FY4FOBED FY4FOBED ; 
      20 FY4FOXED FY4FOXED ; 
      20 FY4SMDCT FY4SMDCT ; 
      20 XSECD XSECD ; 
      20 XSNYR XSNYR ; 
end // end FY0LW02

//*** RECORD=FY0LW03 ****
// FOB SIZE LINE FOR MAP 2
// ***********************
Record FY0LW03 type basicRecord
  10 FY0LWMPS FY0LWMPS [40] ; 
  10 FY0LWDPS FY0LWDPS [40] ; 
end // end FY0LW03

//*** RECORD=FY0LW04 ****
// *******************FACTORY TABLE CLONE*********************
// 
// 
// KEY TO DB2 TABLE:    xgpcd,
//                      fy1fctcd,
//                      sy1stnbr,
//                      xdmcd,
//                      xqacd,
//                      xsdcd,
//                      xpgcd,
//                      xumcd,
//                      xsncd,
//                      xsnyr,
//                      fy4fobed,
//                      fy4foxed,
//                      fy4smdct
// 
// THIS IS A CLONE OF THE FY4REC TO BE USED IN THIS PROGRAM.
// THIS IS TO HELP MAKE THE NECESSARY CHANGES TO THE ENDING
// FOB DATE.
// ***********************
Record FY0LW04 type basicRecord
  5 FY4GROUP FY4GROUP ; 
    10 FY4KEY FY4KEY ; 
      15 XGPCD XGPCD ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 FY4FOBED FY4FOBED ; 
      15 FY4FOXED FY4FOXED ; 
      15 FY4SMDCT FY4SMDCT ; 
    10 FY4BRCMO FY4BRCMO ; 
    10 FY4ERCMO FY4ERCMO ; 
    10 FY4CMNT FY4CMNT ; 
    10 FY4OGXRF FY4OGXRF ; 
    10 FY4CCLPC FY4CCLPC ; 
    10 FY4LBRCS FY4LBRCS ; 
    10 FY4FABCS FY4FABCS ; 
    10 FY4BLNCS FY4BLNCS ; 
    10 FY4SCNCS FY4SCNCS ; 
    10 FY4WHLPR FY4WHLPR ; 
    10 FY4FRGCS FY4FRGCS ; 
    10 FY4TGTPR FY4TGTPR ; 
    10 FY4QTDPR FY4QTDPR ; 
    10 FY4SZPRC FY4SZPRC ; 
      15 FY4FOBPR FY4FOBPR [40] ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FY0LW04

//        MARGIN PERCENT
DataItem FY0LMARG num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem FY0LMBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// M001 EFF. DATE
DataItem FY0LMBED num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FY0LMBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FY0LMBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        LANDED COST
DataItem FY0LMLCT num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Wholesale price from prod file
DataItem FY0LMPWP num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line select
DataItem FY0LMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page number
DataItem FY0LMTSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ALL COLORS FLAG
DataItem FY0LMUAC char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FY0LW-EOF-POITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List map flag
DataItem FY0LW-MAP2-1ST-TIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List map flag
DataItem FY0LW-MAP3-1ST-TIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data entered flag
DataItem FY0LW-MAP3-DEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List map flag
DataItem FY0LW-RESET-MAP-FLAGS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List map flag
DataItem FY0LW-SAVED-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Successful add flag
DataItem FY0LWADD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//        MARGIN 1
DataItem FY0LWAR1 num(8,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Beg. group
DataItem FY0LWBED num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First size
DataItem FY0LWBSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color code
DataItem FY0LWCCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date modified
DataItem FY0LWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working century
DataItem FY0LWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// non-process flag
DataItem FY0LWCLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color code
DataItem FY0LWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor set flag
DataItem FY0LWCSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date change flag
DataItem FY0LWDCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working day
DataItem FY0LWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data entered flag
DataItem FY0LWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete complete flag
DataItem FY0LWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save flag
DataItem FY0LWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data base position
DataItem FY0LWDPS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        Duty rate1
DataItem FY0LWDR1 num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        Duty rate2
DataItem FY0LWDR2 num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        DUTY AMOUNT
DataItem FY0LWDRA num(6,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem FY0LWDSH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working date
DataItem FY0LWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Eff. centry
DataItem FY0LWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Eff. day
DataItem FY0LWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Eff. date
DataItem FY0LWEFD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Eff. month
DataItem FY0LWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Second size
DataItem FY0LWESZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Eff. year
DataItem FY0LWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Comp. fob price
DataItem FY0LWFBP num(8,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// centry
DataItem FY0LWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory code
DataItem FY0LWFCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To factory code
DataItem FY0LWFCT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem FY0LWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first date
DataItem FY0LWFED num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FY0LWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Function flag
DataItem FY0LWFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FOB price flag
DataItem FY0LWFOB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From P.O. id
DataItem FY0LWFPO char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// full season centry
DataItem FY0LWFSC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// full season date
DataItem FY0LWFSD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size group
DataItem FY0LWFSS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// full season year
DataItem FY0LWFST num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First size
DataItem FY0LWFSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem FY0LWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Group level color array
DataItem FY0LWGCL char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for colors
DataItem FY0LWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line count flag
DataItem FY0LWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Information error
DataItem FY0LWINF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry complete flag
DataItem FY0LWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size index
DataItem FY0LWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem FY0LWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem FY0LWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//        Landed cost1
DataItem FY0LWLC1 num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        Landed cost2
DataItem FY0LWLC2 num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage length
DataItem FY0LWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// List map line
DataItem FY0LWLIN char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List map flag
DataItem FY0LWLSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem FY0LWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//        Misc. percent
DataItem FY0LWMCP num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index for map2
DataItem FY0LWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working month
DataItem FY0LWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map position
DataItem FY0LWMPS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Old beg. date
DataItem FY0LWOBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Old ending date
DataItem FY0LWOXD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Price change flag
DataItem FY0LWPCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prev. color code
DataItem FY0LWPCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prev. effective date
DataItem FY0LWPED num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Prev. factory code
DataItem FY0LWPFY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size index
DataItem FY0LWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO beg date
DataItem FY0LWPOB num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working storage price
DataItem FY0LWPRC num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Previous price
DataItem FY0LWPRE decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Protect flag
DataItem FY0LWPRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous size
DataItem FY0LWPRS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prev. sesn code
DataItem FY0LWPSC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prev. spec code
DataItem FY0LWPSP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prev. sesn year
DataItem FY0LWPSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Highest page no./index
DataItem FY0LWQIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// FY4REC index
DataItem FY0LWRIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// centry
DataItem FY0LWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Second time thru flag
DataItem FY0LWSCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season/year
DataItem FY0LWSEA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size range index
DataItem FY0LWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size range
DataItem FY0LWSIZ char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change save key
DataItem FY0LWSKE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season code
DataItem FY0LWSNC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season year
DataItem FY0LWSNY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Spec. Diff. code
DataItem FY0LWSPC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved to date
DataItem FY0LWSTD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem FY0LWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FY0LWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Stored season year
DataItem FY0LWSYR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FY0LWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size array
DataItem FY0LWSZA char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Table row found flag
DataItem FY0LWTRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second size
DataItem FY0LWTSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change complete flag
DataItem FY0LWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Write tag record switch
DataItem FY0LWWTR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end centry
DataItem FY0LWXCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end day
DataItem FY0LWXDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending group
DataItem FY0LWXED num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end month
DataItem FY0LWXMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of season table flag
DataItem FY0LWXSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year
DataItem FY0LWXYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working year
DataItem FY0LWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

