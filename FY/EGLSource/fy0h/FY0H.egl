package fy0h;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=FY0H ****
//    THIS PROGRAM WILL ALLOW THE USER TO INQUIRE AS TO WHICH
// FACTORIES ARE MANUFACTURING WHAT ITEMS.  THE DATABASE
// WILL RETURN 0 TO N ROWS BASED UPON THE GPC CODE, STYLE CODE,
// COLOR CODE, SEASON CODE, SEASON YEAR, QUALITY CODE, SPEC.
// DIFF CODE, DIMENSION CODE, PACKAGE TYPE, AND UNIT OF
// MEASURE CODE THAT WERE ENTERED.
// 
//    THE LIST SCREEN WILL SHOW THE FACTORY CODE, FACTORY
// NAME, AND THE COUNTRY NAME BASED UPON THE CODES ENTERED.
// 
//    THE USE OF A POP-UP WINDOW HAS BEEN INCORPORATED SO THE
// USER WILL BE ABLE TO FIND AND ENTER THE CORECT GPC CODE.
// 
// 
//    DATE              NAME          DESCRIPTION OF CHANGE
// __________        __________     _________________________
//  10/13/88           GWITZI       NEW APPLICATION
//  08/08/90           mpisto       added MFG percent
//  08/08/94           SLEWIS       CHANGE XSNTB TO YSNTB TABLE
//  11/05/97           nfield       Y2k compliance - changes to
//                                FY0H502 and FY0HM001.FY0HMSYR
//  12/09/97           rgilli       Y2K MODIFICATIONS MADE TO:
//                                  FY0H502: Add season year  &
//                                           code edit for gpc
//                                           02.
// *********************
Program FY0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY0HW01 FY0HW01; // record
  FY0HW02 FY0HW02; // record
  FY1REC FY1REC; // record
  FY2REC FY2REC; // record
  FY3REC FY3REC; // record
  FYWREC FYWREC; // record
  PC2REC PC2REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TABREC TABREC; // record
  TAEREC TAEREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use FY0HM.FY0HM001,  // forms
      FY0HM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFY001: XPFY001();
     /* ------------------------------------------------------------*/
     /* INITIALIZE WORKING STORAGE AND MAP OUTPUT AREAS.*/
     /* FLOW TO CONVERSE THE MOLD/LAST INQUIRY PROCESS.*/
     /* ------------------------------------------------------------*/

    set FY0HW01 empty; /* Initialize working storage*/
    set FY0HW02 empty; /* Initialize temporary storage*/
    set FYWREC empty; /* Factory common pass area*/
    set FY1REC empty; /* Factory table*/
    set FY2REC empty; /* Factory/style table*/
    set FY3REC empty; /* Factory/style/color table*/
    set PG2REC empty; /* Style/color table*/
    set SQLCA empty; /* Sqlca record*/
    set ERRSQLCA empty; /* Sqlca error record*/
    set TA1REC empty; /* Error Diag. module*/
    set TA5REC empty; /* TA0050 record*/
    set XX0XW02 empty; /* Pop-up Window record*/
    set FY0HM001 initial; /* Clear list screen*/
    set XX0XM001 initial; /* Pop-up window map*/

    FY0HW01.FY0HWIXM = 12; /* List screen lines*/
    FY0HW01.FY0HWSWR = "N"; /* Request for data*/
    FY0HW01.FY0HWMAP = "1"; /* List screen*/
    FY0HW01.XSNYR = 00; /* Default values*/
    FY0HW01.XDMCD = "00"; /* Default values*/
    FY0HW01.PC2INSEG = "000";
    FY0HW01.XQACD = "01";
    FY0HW01.XPGCD = "00";
    FY0HW01.XGPCD = COMMAREA.XGPCD; /* GPC code*/

     /* ------------------------------------------------------------*/
     /* WHEN COMMING INTO THIS PROGRAM VIA FAST PATH CAITEM WILL*/
     /* BE CHECKED FOR THE FUNCTION CODE.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* If item exists*/
      FY0HW01.CAITEM = COMMAREA.CAITEM;
    else
      FY0HW01.CAITEM = " "; /* Clear item field*/
    end

     /* ------------------------------------------------------------*/
     /* THE GPC CODE WILL BE CHECKED WHEN ENTERING VIA FAST PATH*/
     /* FOR VALIDITY.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.XGPCD in XGPTBL.XGPCD) /* If GPC code in table*/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        FY0HM001.XGPCD = COMMAREA.XGPCD; /* Move code to map1*/
        FY0HW01.XGPCD = COMMAREA.XGPCD; /* Move code*/
        FY0HM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC desc. to map1*/
        FY0HW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC desc.*/
      end
    end

    if (FY0HW01.XGPCD == "02")
      FY0HW01.SY2CLRID = "00";
    end


    FY0H001: FY0H001();
    goto FY0H001;
  end // end main
end // end FY0H

// COLOR/STYLE INQUIRY
Function FY0H001()

   /* ------------------------------------------------------------*/
   /* This is the main flow used to display map1.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (FY0HW01.FY0HWMAP == "1") /* Map 1 was requested*/
    FY0H100(); /* Display map 1*/

  else

    /* -----------------------------------------------------------*/
      /* This error routine is executed from the Main Application*/
      /* Flow if an error has occured due to an invalid map number,*/
      /* function code, or major error not covered in the Main*/
      /* Process flow.*/
    /* -----------------------------------------------------------*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0H001"; /* Process name*/
    TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
    TA1REC.TA1MAP = FY0HW01.FY0HWMAP; /* Map name*/
    SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    XSPF4(); /* Exit to master menu*/

  end

end // end FY0H001

// Color/style inquiry List Map
Function FY0H100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 1.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    if (FY0HW01.FY0HWSWR == "Y") /* Request for data turned on*/
      FY0H110(); /* Obtain the data to display*/
    end
  end

  FY0HS02();

  FY0H200(); /* Format and display the map*/

  FY0H300(); /* Check attention identifier*/

  FY0H400(); /* Reset fields to normal intensity*/

  FY0H500(); /* Verify the entered data*/

  FY0H600(); /* Process valid input request*/

end // end FY0H100

// Obtain the COLOR/STYLE data
Function FY0H110()

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  FY0H111(); /* Purge temporary storage*/

  FY0H112(); /* Select set and open the cursor*/

  FY0H113(); /* See if data exists*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    FY0HW01.FY0HWSWC = "N"; /* Initialize end of file switch*/
    FY0HW01.FY0HWIXM = 1; /* Initialize display line number*/
    set FY0HW02 empty; /* Clear temporary storage*/

    while (FY0HW01.FY0HWSWC == "N") /* Until cursor end of file*/
      FY0H114(); /* Obtain unique Factory*/
      FY0H116(); /* Obtain unique Factorystyle*/
      FY0HW01.FY0HWIXM = FY0HW01.FY0HWIXM + 1; /* increment line count*/
      if (FY0HW01.FY0HWIXM > 12) /* Page is full*/
        FY0H118(); /* Add page to temporary storage*/
      end
      FY0H113(); /* Obtain data row*/
    end
    if (FY0HW01.FY0HWSWC == "Y") /* End of file flag*/
      if (FY0HW01.FY0HWIXM > 1) /* And page was formatted*/
        FY0H118(); /* Add page to temporary storage*/
      end
      FY0HW01.FY0HWTSP = 1; /* Initialize page number*/
      FY0HW01.FY0HWSWR = "N"; /* Request for data completed*/
      FY0H119(); /* Close the selected set cursor*/
    end
  end

  if (FY0HW01.TA5TSQIX == 0) /* No data to display*/
    set FY0HM001 initial;
    FY0HM001.XXXPRCNM = "FY0H110"; /* Process name*/
    converseLib.validationFailed(21); /* No data to display*/
    set FY0HM001.SY1STNBR cursor;
  end

end // end FY0H110

// Purge any temporary storage
Function FY0H111()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FY0H"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (FY0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No Error was found*/
    FY0HW01.FY0HWTSP = 0; /* Reset current page number*/
    FY0HW01.TA5TSQIX = 0; /* Reset highest page number*/

  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0H111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0HM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

end // end FY0H111

// Select set and open cursor
Function FY0H112()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  FY3REC.XGPCD = FY0HM001.XGPCD; /* Search key*/
  FY3REC.SY1STNBR = FY0HM001.SY1STNBR; /* Search key*/

  if (FY0HM001.SY2CLRID > " ") /* Search key*/
    FY3REC.SY2CLRID = FY0HM001.SY2CLRID; /* Search key*/
  else
    FY3REC.SY2CLRID = "*"; /* Search key*/
  end

  if (FY0HM001.XDMCD > " ") /* Search key*/
    FY3REC.XDMCD = FY0HM001.XDMCD; /* Search key*/
  else
    FY3REC.XDMCD = "*"; /* Search key*/
  end

  if (FY0HM001.XQACD > " ") /* Search key*/
    FY3REC.XQACD = FY0HM001.XQACD; /* Search key*/
  else
    FY3REC.XQACD = "*"; /* Search key*/
  end

  if (FY0HM001.PC2INSEG > " ") /* Search key*/
    FY3REC.PC2INSEG = FY0HM001.PC2INSEG; /* Search key*/
  else
    FY3REC.PC2INSEG = "*"; /* Search key*/
  end

  if (FY0HM001.XPGCD > " ") /* Search key*/
    FY3REC.XPGCD = FY0HM001.XPGCD; /* Search key*/
  else
    FY3REC.XPGCD = "*"; /* Search key*/
  end

  FY3REC.XUMCD = "*"; /* Search key*/

  if (FY0HM001.XSECD > " ") /* Search key*/
    FY3REC.XSECD = FY0HM001.XSECD; /* Search key*/
  else
    FY3REC.XSECD = "*"; /* Search key*/
  end

  FY3REC.XSNYR = FY0HW01.XSNYR; /* Search key*/

  FY3REC.XXXSTAT = "*"; /* Get all status*/
  FY3REC.FY1FCTYC = "*"; /* Get factory*/
  FY3REC.FY3SFYFL = "*"; /* Factory style priority flag*/
  FY3REC.FY3INPFL = "*"; /* In production flag*/

  call "IO2990" ("S1", SQLCA, FY3REC) {isNoRefresh = yes, isExternal = yes}; /* Select factory-color set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

       /* NEXT SENTENCE*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0H112"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF COLOR/STYLE ROWS";
    TA1REC.TA1MAP = "FY0HM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYCLR01"; /* Table view name*/
    TA1REC.TA1TBLKE = FY3REC.XGPCD; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0HM001.XXXPRCNM = "FY0H112"; /* Process name*/
  end

end // end FY0H112

// Fetch next row
Function FY0H113()

   /* ------------------------------------------------------------*/
   /* Fetch the  row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "IO2990" ("N1", SQLCA, FY3REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

        /* NEXT SENTENCE            ;*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FY0HW01.FY0HWSWC = "Y"; /* Indicate end of file*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0H113"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "FY0HM001"; /* Map name*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFYCLR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      FY0HM001.XXXPRCNM = "FY0H113"; /* Process name*/
    end
  end

end // end FY0H113

// Select unique factory
Function FY0H114()

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  FY1REC.XGPCD = FY3REC.XGPCD; /* Search key*/
  FY1REC.FY1FCTYC = FY3REC.FY1FCTYC;

  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

    FY0H115(); /* Move data to storage*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0H114"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "FY0HM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0HM001.XXXPRCNM = "FY0H114"; /* Process name*/
  end

end // end FY0H114

// Table validation routine
Function FY0H115()

  FY0HW02.FY1FCTYC[FY0HWIXM] = FY1REC.FY1FCTYC; /* Factory Code*/
  FY0HW02.FY1FCTNM[FY0HWIXM] = FY1REC.FY1FCTNM; /* Factory Name*/

   /* --------------------------------------------------------*/
        /* GET COUNTRY NAME FROM COUNTRY TABLE*/
   /* --------------------------------------------------------*/

  if (FY1REC.XCTCD in XCTTBL.XCTCD) /* Country code in table*/
    FY0HW02.XCTDESC[FY0HWIXM] = XCTTBL.XCTDESC[sysVar.arrayIndex];
  else
    FY0HW02.XCTDESC[FY0HWIXM] = "* UNKNOWN *";
  end


end // end FY0H115

// Select unique factory style
Function FY0H116()

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory style set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  FY2REC.XGPCD = FY3REC.XGPCD; /* Search key*/
  FY2REC.FY1FCTYC = FY3REC.FY1FCTYC;
  FY2REC.SY1STNBR = FY3REC.SY1STNBR;
  FY2REC.XSECD = FY3REC.XSECD;
  FY2REC.XSNYR = FY3REC.XSNYR;

  call "IO2980" ("S ", SQLCA, FY2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
    FY0HW02.FY2MFGPC[FY0HWIXM] = FY2REC.FY2MFGPC;
  end

end // end FY0H116

// Add page to temporary storage
Function FY0H118()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FY0HW02.FY0HWLEN = 808; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0H"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (FY0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage*/

  if (TA5REC.TA5RTNCD == 0) /* No error was found*/
    FY0HW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    FY0HW01.FY0HWIXM = 1; /* Reset display line number*/
    set FY0HW02 empty; /* Clears temporary storage record*/
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0H116"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0HM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0HM001.XXXPRCNM = "FY0H116"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end FY0H118

// Close selected set and cursor
Function FY0H119()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2990" ("C1", SQLCA, FY3REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

     /* GO ON*/

  else
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0H117"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "FY0HM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYCLR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0HM001.XXXPRCNM = "FY0H117"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end FY0H119

// Format and display the map
Function FY0H200()

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message to display*/
    set FY0HM001 initial; /* Clear map output area*/
    FY0H221(); /* Format the selected data*/
  else

    FY0H111(); /* Purge temp storage*/

    FY0HM001.SY1STNBR = FY0HW01.SY1STNBR; /* Move Style code*/
    FY0HM001.SY1SSTNM = FY0HW01.SY1SSTNM; /* Move Style desc*/
    FY0HM001.SY2CLRID = FY0HW01.SY2CLRID; /* Move Color code*/
    FY0HM001.SY2CLRAB = FY0HW01.SY2CLRAB; /* Move Color desc*/
    FY0HM001.XDMCD = FY0HW01.XDMCD; /* Move Dimension code*/
    FY0HM001.XQACD = FY0HW01.XQACD; /* Move Quality code*/
    FY0HM001.PC2INSEG = FY0HW01.PC2INSEG; /* Move Spec. code*/
    FY0HM001.XPGCD = FY0HW01.XPGCD; /* Move Packaging Type*/
    FY0HM001.XSECD = FY0HW01.XSECD; /* Move Season code*/
    FY0HM001.FY0HMSYR = FY0HW01.FY0HWSYY; /* Move Season yr*/
    set FY0HM001 alarm; /* Indicate sound alarm*/
  end

  if (COMMAREA.XGPCD in XGPTBL.XGPCD
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
    FY0HM001.XGPCD = COMMAREA.XGPCD; /* GPC Number*/
    FY0HM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  else
    XXXPRCNM = "FY0H200"; /* Process name*/
    converseLib.validationFailed(101); /* Invalid gpc code*/
    set FY0HM001.XGPCD cursor, bold; /* Highlight error*/
    FY0HM001.XGPDESC = " ";
  end

  FY0HM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse FY0HM001 ;

end // end FY0H200

// Format the selected data
Function FY0H221()

   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/


  FY0HM001.SY1STNBR = FY0HW01.SY1STNBR; /* Move Style code to map*/
  FY0HM001.SY1SSTNM = FY0HW01.SY1SSTNM; /* Move Style desc to map*/
  FY0HM001.SY2CLRID = FY0HW01.SY2CLRID; /* Move Color code to map*/
  FY0HM001.SY2CLRAB = FY0HW01.SY2CLRAB; /* Move Color desc to map*/
  FY0HM001.XDMCD = FY0HW01.XDMCD; /* Move Dimension code to map*/
  FY0HM001.XQACD = FY0HW01.XQACD; /* Move Quality code to map*/
  FY0HM001.PC2INSEG = FY0HW01.PC2INSEG; /* Move Spec. code to map*/
  FY0HM001.XPGCD = FY0HW01.XPGCD;
                                   /* Move Packaging Type code to map*/
  FY0HM001.XSECD = FY0HW01.XSECD; /* Move Season code to map*/
  FY0HM001.FY0HMSYR = FY0HW01.FY0HWSYY; /* Move Season Range*/


  if (FY0HW01.TA5TSQIX == 0) /* No data to display*/
    set FY0HM001.SY1STNBR cursor; /* Set cursor at style no.*/

    return;

  else
    FY0H222(); /* Read temp. storage page*/
    set FY0HM001.SY1STNBR cursor; /* Set cursor at style no.*/
  end

  set FY0HM001.FY0HMPGL skip; /* Display "PAGE" literal*/
  set FY0HM001.FY0HMOFL skip; /* Display "OF" literal*/

  FY0HM001.FY0HWTSP = FY0HW01.FY0HWTSP; /* Current page number*/
  set FY0HM001.FY0HWTSP skip; /* Shows current page number*/
  FY0HM001.TA5TSQIX = FY0HW01.TA5TSQIX; /* Highest page number*/
  set FY0HM001.TA5TSQIX skip; /* Shows highest page number*/

  FY0HW01.FY0HWIXM = 1; /* Initialize line index*/

  while (FY0HW01.FY0HWIXM <= 12) /* Until end of lines*/

    if (FY0HW02.FY1FCTYC[FY0HWIXM] > " ") /* Something in code.*/
      FY0HM001.FY1FCTYC[FY0HWIXM] = FY0HW02.FY1FCTYC[FY0HWIXM];
      FY0HM001.FY1FCTNM[FY0HWIXM] = FY0HW02.FY1FCTNM[FY0HWIXM];
      FY0HM001.XCTDESC[FY0HWIXM] = FY0HW02.XCTDESC[FY0HWIXM];
      FY0HM001.FY2MFGPC[FY0HWIXM] = FY0HW02.FY2MFGPC[FY0HWIXM];
    end
    FY0HW01.FY0HWIXM = FY0HW01.FY0HWIXM + 1; /* Increment line index*/
  end

end // end FY0H221

// Read temporary storage page
Function FY0H222()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FY0HW02.FY0HWLEN = 808; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0H"; /* Application identification*/
  TA5REC.TA5TSQIX = FY0HW01.FY0HWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (FY0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No error was found*/

     /* GO ON*/

  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0H222"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0HM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0HM001.XXXPRCNM = "FY0H222"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end FY0H222

// Check attention identifier
Function FY0H300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FY0HM001 initial; /* Clear map before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0HM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FY0H111(); /* Purge any temporary storage*/
      set FY1REC empty; /* Clear record*/
      set FY3REC empty; /* Clear record*/
      set PG2REC empty; /* Clear record*/
      COMMAREA.CATOAP = FY0HM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0HM001.CAITEM; /* To application*/

      XSFY001(); /* Exit to another application*/

      FY3REC.XGPCD = FY0HW01.XGPCD; /* Reset load key*/
      FY3REC.SY1STNBR = FY0HW01.SY1STNBR;
      FY3REC.SY2CLRID = FY0HW01.SY2CLRID;
      FY3REC.XDMCD = FY0HW01.XDMCD;
      FY3REC.XQACD = FY0HW01.XQACD;
      FY3REC.XPGCD = FY0HW01.XPGCD;
      FY3REC.XSECD = FY0HW01.XSECD;
      FY0HW01.FY0HWSWR = "Y"; /* Set request for data to yes*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0HM001.XXXPRCNM = "FY0H300"; /* Process name*/
    end

    set FY0HM001.CATOAP cursor, modified, bold; /* Highlight*/
    FY0HM001.XXXPRCNM = "FY0H300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0HM001"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end
    FY0H111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0HM001.XXXPRCNM = "FY0H300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    FY0H111(); /* Purge temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0HM001.XXXPRCNM = "FY0H300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* PF8 was not pressed*/
    FY0HM001.XXXPRCNM = "FY0H300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/

  end

end // end FY0H300

// Reset highlighted fields
Function FY0H400()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0HM001.XGPCD initialAttributes; /* Gpc code*/
  set FY0HM001.SY1STNBR initialAttributes; /* Style number*/
  set FY0HM001.SY2CLRID initialAttributes; /* Color code*/
  set FY0HM001.XDMCD initialAttributes; /* Dimension code*/
  set FY0HM001.XQACD initialAttributes; /* Quality code*/
  set FY0HM001.PC2INSEG initialAttributes; /* Spec. Diff. code*/
  set FY0HM001.XPGCD initialAttributes; /* Package code*/
  set FY0HM001.XSECD initialAttributes; /* Season Range code*/
  set FY0HM001.FY0HMSYR initialAttributes; /* Season Year*/
  set FY0HM001.CATOAP initialAttributes; /* Commarea option*/
  set FY0HM001.CAITEM initialAttributes; /* Commarea item data*/


   /* ------------------------------------------------------------*/
    /* CHECK AND SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    FY0H410();
  end

end // end FY0H400

// Check for ? by User
Function FY0H410()


   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0HM001.XGPCD == "?" /* if ? in gpc code field*/
   || FY0HM001.XSECD == "?" /* if ? in season code field*/
   || FY0HM001.XQACD == "?" /* if ? in quality code field*/
   || FY0HM001.XDMCD == "?" /* if ? in dim. code field*/
   || FY0HM001.XPGCD == "?") /* if ? in package type code field*/

        /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0HM001.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                GPC CODES "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      COMMAREA.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      set FY0HM001.XGPCD cursor, modified;
    else
      FY0HW01.XGPCD = " "; /* clear fields*/
      FY0HW01.XGPDESC = " ";
      set FY0HM001.XGPCD cursor, modified;
    end
  end

  if (FY0HM001.XSECD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "            SEASON CODES "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXSE01(); /* perform season code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0HW01.XSECD = XSETBL.XSECD[XX0XWPIX]; /* move code*/
      set FY0HM001.XSECD cursor, modified;
    else
      FY0HW01.XSECD = " "; /* clear fields*/
      set FY0HM001.XSECD cursor, modified;
    end
  end

  if (FY0HM001.XQACD == "?") /* if ? in quality code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "          QUALITY CODES "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXQA01(); /* perform season code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0HW01.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      set FY0HM001.XQACD cursor, modified;
    else
      FY0HW01.XQACD = " "; /* clear fields*/
      set FY0HM001.XQACD cursor, modified;
    end
  end


  if (FY0HM001.XDMCD == "?") /* if ? in dimension code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "               DIM. CODES "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXDM01(); /* perform dimension code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0HW01.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      set FY0HM001.XDMCD cursor, modified;
    else
      FY0HW01.XDMCD = " "; /* clear fields*/
      set FY0HM001.XDMCD cursor, modified;
    end
  end

  if (FY0HM001.XPGCD == "?") /* if ? in package type code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "       PACKAGE TYPE CODES "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXPG01(); /* perform dimension code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0HW01.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* move code*/
      set FY0HM001.XPGCD cursor, modified;
    else
      FY0HW01.XPGCD = " "; /* clear fields*/
      set FY0HM001.XPGCD cursor, modified;
    end
  end

  converseLib.clearScreen();
   /* restore the original map*/

  converseLib.validationFailed(121); /* Next request*/

  exit stack; /* Exit to redisplay the map*/

end // end FY0H410

// Verify the entered data
Function FY0H500()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0HM001.CAITEM > " ") /* Application data was entered*/
    set FY0HM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0HM001.XXXPRCNM = "FY0H500"; /* Process name*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      FY0H501(); /* Verify scroll request*/
    else /* Otherwise must be ENTER, so*/
      FY0H502(); /* Verify entered data*/
      FY0H503(); /* Verify STYLE/COLOR*/
    end
  end

end // end FY0H500

// Verify scroll request
Function FY0H501()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FY0HW01.FY0HWTSP < 2)       /* and no previous pages*/
    FY0HM001.XXXPRCNM = "FY0H501"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FY0HW01.FY0HWTSP >= FY0HW01.TA5TSQIX) /* and no more pages*/
    FY0HM001.XXXPRCNM = "FY0H501"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

end // end FY0H501

// Verify any entered data
Function FY0H502()

   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
                 /* SEE IF ANY FIELD CHANGED*/

   /* ------------------------------------------------------------*/

  if (FY0HM001.SY1STNBR == FY0HW01.SY1STNBR /* Check key*/
   && FY0HM001.SY2CLRID == FY0HW01.SY2CLRID /* Check key*/
   && FY0HM001.XDMCD == FY0HW01.XDMCD       /* Check key*/
   && FY0HM001.XGPCD == FY0HW01.XGPCD       /* Check key*/
   && FY0HM001.XQACD == FY0HW01.XQACD       /* Check key*/
   && FY0HM001.PC2INSEG == FY0HW01.PC2INSEG /* Check key*/
   && FY0HM001.XPGCD == FY0HW01.XPGCD       /* Check key*/
   && FY0HM001.XSECD == FY0HW01.XSECD       /* Check key*/
   && FY0HM001.FY0HMSYR == FY0HW01.FY0HWSYY) /* Check key*/

    FY0HW01.FY0HWSWR = "N"; /* Turn off request for data*/
    converseLib.validationFailed(30); /* Data must change*/
    FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/

  else

    /* ============================================================*/
      /* Validation of table items entered will take place in this*/
      /* process: SEASON, QUALITY, SPEC. DIFF., PACKAGE TYPE,*/
      /* UNIT of MEASURE, DIMENSION and GPC CODES.*/

    /* ======================START CHECK===========================*/

    /* ------------------------------------------------------------*/
                   /* PACKAGE TYPE CHECK*/

    /* ------------------------------------------------------------*/

    FY0HW01.XPGCD = FY0HM001.XPGCD;
    if (FY0HM001.XPGCD > " ") /* If something in PACKAGE code*/
      if (FY0HM001.XPGCD in XPGTBL.XPGCD /* If PACKAGE code in table*/
       && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

              /* GO ON*/

      else
        set FY0HM001.XPGCD cursor, bold; /* Highlight PACKAGE code*/
        FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
        converseLib.validationFailed(79); /* Must have valid PACKAGE code*/
      end
    else
      set FY0HM001.XPGCD cursor, bold; /* Highlight PACKAGE code*/
      FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
      converseLib.validationFailed(79); /* Must have valid PACKAGE code*/
    end

    /* ------------------------------------------------------------*/
                     /* DIMENSION CHECK*/

    /* ------------------------------------------------------------*/

    FY0HW01.XDMCD = FY0HM001.XDMCD;
    if (FY0HM001.XDMCD > " ") /* If something in DIMN. code*/
      if (FY0HM001.XDMCD in XDMTBL.XDMCD /* If DIMN. code in table*/
       && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

            /* GO ON*/

      else
        set FY0HM001.XDMCD cursor, bold; /* Highlight DIMN. code*/
        FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
        converseLib.validationFailed(78); /* Must have valid DIMN. code*/
      end
    else
      set FY0HM001.XDMCD cursor, bold; /* Highlight DIMN. code*/
      FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
      converseLib.validationFailed(78); /* Must have valid DIMN. code*/
    end

    /* ------------------------------------------------------------*/
                      /* INVENTORY SEGMENT CODE*/
    /* ------------------------------------------------------------*/

    FY0HW01.PC2INSEG = FY0HM001.PC2INSEG;
    if (FY0HM001.PC2INSEG > " ") /* If something in SPEC code*/
      PC2REC.XGPCD = FY0HM001.XGPCD;
      PC2REC.PC2INSEG = FY0HM001.PC2INSEG;
      FY0HS01();
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        set FY0HM001.PC2INSEG cursor, bold; /* Highlight SPEC code*/
        FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
        converseLib.validationFailed(77); /* Must have valid SPEC code*/
      end
    else
      set FY0HM001.PC2INSEG cursor, bold; /* Highlight SPEC code*/
      FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
      converseLib.validationFailed(77); /* Must have valid SPEC code*/
    end

    /* ------------------------------------------------------------*/
                   /* QUALITY CODE CHECK*/

    /* ------------------------------------------------------------*/

    FY0HW01.XQACD = FY0HM001.XQACD;
    if (FY0HM001.XQACD > " ") /* If something in QUALITY code*/
      if (FY0HM001.XQACD in XQATBL.XQACD /* If QUALITY code in table*/
       && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

              /* GO ON*/

      else
        set FY0HM001.XQACD cursor, bold; /* Highlight QUALITY code*/
        FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
        converseLib.validationFailed(76); /* Must have valid QUALITY code*/
      end
    else
      set FY0HM001.XQACD cursor, bold; /* Highlight QUALITY code*/
      FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
      converseLib.validationFailed(76); /* Must have valid QUALITY code*/
    end

    /* ------------------------------------------------------------*/
                        /* SEASON YEAR CHECK*/

    /* ------------------------------------------------------------*/

    /* -------------------------- y2k out begin ----------------------*/
    /* IF FY0HM001.FY0HMSYR EQ 0;     /* If nothing in SEASON YEAR*/
     /* MOVE 0 TO FY0HW01.XSNYR;*/
     /* MOVE 0 TO FY0HW01.FY0HWSYR;*/
     /* IF FY0HW01.XGPCD EQ '03';*/
       /* SET FY0HM001.FY0HMSYR CURSOR,BRIGHT;/* Highlight SEASON YEAR*/
       /* MOVE 'FY0H502' TO FY0HM001.XXXPRCNM;/* Process name*/
       /* MOVE 75 TO EZEMNO;         /* Must have valid SEASON YEAR*/
     /* END;*/
    /* else;*/
     /* END;*/
    /* -------------------------- y2k out end   ----------------------*/

    if (FY0HM001.FY0HMSYR > 85) /* If something in SEASON YEAR*/
      FY0HW01.FY0HWSYY = FY0HM001.FY0HMSYR; /* Move SEASON YEAR*/
      FY0HW01.FY0HWSCC = 19; /* Move 19 to centry*/
    else
      FY0HW01.FY0HWSYY = FY0HM001.FY0HMSYR; /* Move SEASON YEAR*/
      FY0HW01.FY0HWSCC = 20; /* Move 20 to centry*/
    end

    FY0HW01.XSNYR = FY0HW01.FY0HWSYR;

    /* -------------------------- y2k in begin  ----------------------*/
    if (FY0HM001.XGPCD == "02") /* footwear*/
      if (FY0HM001.FY0HMSYR != 0)
        set FY0HM001.FY0HMSYR cursor, bold; /* Highlight SEASON code*/
        FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
        converseLib.validationFailed(75); /* Must have valid SEASON code*/
      else
        FY0HW01.FY0HWSYR = 0; /* Clear out century value for*/
        FY0HW01.XSNYR = 0; /* footwear. The FOB tables do not*/
      end /* ; carry xsecd or xsnyr for gpc 02.*/
    else
      if (FY0HM001.XGPCD == "03") /* apparel*/
        /* ---------------------- y2k in end    ----------------------*/
        sysVar.arrayIndex = 1;
        FY0HW01.FY0HYSN = "N";
        while (FY0HW01.FY0HYSN == "N")
          if (FY0HM001.XGPCD == YSNTBL.XGPCD[sysVar.arrayIndex]
           && TABREC.XDR-PROD-REG-CD == YSNTBL.XDR-PROD-REG-CD[sysVar.arrayIndex]
           && FY0HW01.XSNYR == YSNTBL.XSNYR[sysVar.arrayIndex]
           && YSNTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If year active*/
            FY0HW01.FY0HYSN = "Y";
          else
            if (YSNTBL.XSECD[sysVar.arrayIndex] == "99")
              FY0HW01.FY0HYSN = "Y";
              set FY0HM001.FY0HMSYR cursor, bold; /* Highlight SEASON YEAR*/
              FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
              converseLib.validationFailed(75); /* Must have valid SEASON YEAR*/
            end
          end
          sysVar.arrayIndex = sysVar.arrayIndex + 1;
        end
        /* ------------------------ y2k in begin  ----------------------*/
      end
    end
    /* -------------------------- y2k in end    ----------------------*/

    /* ------------------------------------------------------------*/
                     /* SEASON CODE CHECK*/

    /* ------------------------------------------------------------*/

    FY0HW01.XSECD = FY0HM001.XSECD;
    /* ----------------------- y2k in begin  ----------------------*/
    if (FY0HM001.XGPCD == "02") /* footwear*/
      if (FY0HM001.XSECD != "  ")
        set FY0HM001.XSECD cursor, bold; /* Highlight SEASON code*/
        FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
        converseLib.validationFailed(74); /* Must have valid SEASON code*/
      end
    else
      /* ----------------------- y2k in end    ----------------------*/
      if (FY0HM001.XGPCD == "03") /* and it's apparel*/
        if (FY0HM001.XSECD == " ") /* If nothing in SEASON code*/
          set FY0HM001.XSECD cursor, bold; /* Highlight SEASON code*/
          FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
          converseLib.validationFailed(74); /* Must have valid SEASON code*/
        else
          FY0HW01.XSNYR = FY0HW01.FY0HWSYR;
          sysVar.arrayIndex = 1;
          FY0HW01.FY0HYSN = "N";
          while (FY0HW01.FY0HYSN == "N")
            if (FY0HM001.XGPCD == YSNTBL.XGPCD[sysVar.arrayIndex]
             && TABREC.XDR-PROD-REG-CD == YSNTBL.XDR-PROD-REG-CD[sysVar.arrayIndex]
             && FY0HW01.XSECD == YSNTBL.XSECD[sysVar.arrayIndex]
             && YSNTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If year active*/
              FY0HW01.FY0HYSN = "Y";
            else
              if (YSNTBL.XSECD[sysVar.arrayIndex] == "99")
                FY0HW01.FY0HYSN = "Y";
                set FY0HM001.XSECD cursor, bold; /* Highlight SEASON code*/
                FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
                converseLib.validationFailed(74); /* Must have valid SEASON code*/
              end
            end
            sysVar.arrayIndex = sysVar.arrayIndex + 1;
          end
        end
      end
      /* ----------------------- y2k in begin  ----------------------*/
    end
    /* ----------------------- y2k in end    ----------------------*/

    /* ------------------------------------------------------------*/
                        /* GPC CODE CHECK*/

    /* ------------------------------------------------------------*/

    if (FY0HM001.XGPCD != COMMAREA.XGPCD)
      COMMAREA.XGPCD = FY0HM001.XGPCD;
    end

    if (FY0HM001.XGPCD > " ") /* If something in GPC code*/
      if (FY0HM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
        COMMAREA.XGPCD = FY0HM001.XGPCD;
        FY0HW01.XGPCD = FY0HM001.XGPCD;
      else
        set FY0HM001.XGPCD cursor, bold; /* Highlight GPC code*/
        FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
        converseLib.validationFailed(101); /* Must have valid GPC code*/
      end
    else
      set FY0HM001.XGPCD cursor, bold; /* Highlight GPC code*/
      FY0HM001.XXXPRCNM = "FY0H502"; /* Process name*/
      converseLib.validationFailed(101); /* Must have valid GPC code*/
    end

    /* ============================================================*/
    /* =======================END CHECK============================*/

  end

end // end FY0H502

// Select Unique STYLE/COLOR
Function FY0H503()

   /* ------------------------------------------------------------*/
             /* See if Color/Style Entered*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/

    if (FY0HM001.SY1STNBR == " " /* Nothing entered*/
     || FY0HM001.SY2CLRID == " ") /* Nothing entered*/
      converseLib.validationFailed(73); /* Data must be entered*/
      FY0HM001.XXXPRCNM = "FY0H503"; /* Process name*/
      set FY0HM001.SY1STNBR cursor, bold; /* Highlight*/
      set FY0HM001.SY2CLRID bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* Fetch the row from the STYLE/COLOR set.*/
     /* If any error, indicate a system error.*/
     /* Format the data in the temporary storage display line.*/
    /* ------------------------------------------------------------*/

    if (FY0HM001.SY1STNBR > " " /* Something entered*/
     && FY0HM001.SY2CLRID > " ")
      PG2REC.XGPCD = FY0HM001.XGPCD; /* Search key*/
      PG2REC.SY1STNBR = FY0HM001.SY1STNBR;
      PG2REC.SY2CLRID = FY0HM001.SY2CLRID;
      PG2REC.XDMCD = FY0HM001.XDMCD;
      FY0HW01.SY1STNBR = FY0HM001.SY1STNBR;
      FY0HW01.SY2CLRID = FY0HM001.SY2CLRID;

      call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/
        FY0HW01.SY1SSTNM = PG2REC.SY1SSTNM;
        FY0HW01.SY2CLRAB = PG2REC.SY2CLRAB;

      else
        if (SQLCA.VAGen_SQLCODE == 100) /* Row does not exist*/
          converseLib.validationFailed(73); /* Invalid Style/color*/
          set FY0HM001.SY1STNBR cursor, bold; /* Highlight*/
          set FY0HM001.SY2CLRID bold;
          FY0HM001.XXXPRCNM = "FY0H503"; /* Process name*/
        else
          if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
            converseLib.validationFailed(11); /* Indicate not available*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
          else
            converseLib.validationFailed(10); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            converseLib.clearScreen();
             /* Clear screen before redisplay*/
          end
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "FY0H503"; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE STYLE/COLOR";
          TA1REC.TA1MAP = "FY0HM001"; /* Map name*/
          TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

          FY0HM001.XXXPRCNM = "FY0H503"; /* Process name*/
        end
      end
    end
  end

  if (FY0HM001.SY1STNBR != FY0HW01.SY1STNBR) /* Codes different*/
    FY0HW01.SY1STNBR = FY0HM001.SY1STNBR; /* Move map Style number*/
  end
  if (FY0HM001.SY2CLRID != FY0HW01.SY2CLRID) /* Codes different*/
    FY0HW01.SY2CLRID = FY0HM001.SY2CLRID; /* Move map Color code*/
  end



  if (converseVar.validationMsgNum == 0) /* No errors*/

    FY0HW01.FY0HWSWR = "Y"; /* Turn on request for data*/

  else
    if (converseVar.validationMsgNum != 30)
      FY0HM001.FY0HWTSP = 0; /* Clear page number*/
      FY0HM001.TA5TSQIX = 0; /* Clear highest page number*/
      FY0HW01.FY0HWIXM = 1; /* Initialize line index*/
      while (FY0HW01.FY0HWIXM <= 12) /* Until end of lines*/
        FY0HM001.FY1FCTYC[FY0HWIXM] = " ";
        FY0HM001.FY1FCTNM[FY0HWIXM] = " ";
        FY0HM001.XCTDESC[FY0HWIXM] = " ";
        FY0HM001.FY2MFGPC[FY0HWIXM] = 0;
        FY0HW01.FY0HWIXM = FY0HW01.FY0HWIXM + 1; /* Increment line index*/
      end
    end
  end

end // end FY0H503

// Process valid input request
Function FY0H600()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (FY0HM001.XGPCD == FY0HW01.XGPCD /* GPC codes match*/
   && converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7) /* Scroll baCk requested*/
      FY0HW01.FY0HWTSP = FY0HW01.FY0HWTSP - 1; /* Decrement page number*/
    end

    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      FY0HW01.FY0HWTSP = FY0HW01.FY0HWTSP + 1; /* Increment page number*/
    end
  else
    FY0HW01.XGPCD = FY0HM001.XGPCD;
  end

end // end FY0H600

// Select row dprodc.vprdcu01
Function FY0HS01()
   /* ------------------------------------------------------------*/
   /* Select inventory segment code*/
   /* ------------------------------------------------------------*/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous precess.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user*/
   /* otherwise, indicate that an unexpected error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  FY0HM001.XXXPRCNM = "FY0HS01"; /* Process identification*/

  if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S01"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2INSEG; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end FY0HS01

// Select Region code
Function FY0HS02()
   /* ------------------------------------------------------------*/
   /* Load key fields for table access*/
   /* ------------------------------------------------------------*/

  set TABREC empty;
  set SQLCA empty;
  TABREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0800" (TABREC) {isNoRefresh = yes, isExternal = yes}; /* Select row*/
  SQLCA.SQLCAREC = TABREC.SQLCAREC;

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    return; /* Return to previous process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear map*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0 &&  /* Row found*/
  TAB-RTN-CD != 0)                
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TABREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  if (SQLCA.VAGen_SQLCODE == 0)
    TA1REC.TA1TYPE = "DA  "; /* Type of error*/
  else
    TA1REC.TA1TYPE = TAB-RTN-CD;
  end
  TA1REC.TA1PGMNM = "FY0HS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT THEATER OF OPER  ";
  TA1REC.TA1DBASE = "TA0800  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end FY0HS02

//*** RECORD=FY0HW01 ****
// Working storage for FY0d - Liaison/Field Office
// ***********************
Record FY0HW01 type basicRecord
  10 FY0HWSWC FY0HWSWC ; 
  10 FY0HWSWR FY0HWSWR ; 
  10 FY0HYSN FY0HYSN ; 
  10 FY0HWTSP FY0HWTSP ; 
  10 FY0HWIXM FY0HWIXM ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FY0HSQIX FY0HSQIX ; 
  10 FY0HWMAP FY0HWMAP ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XSECD XSECD ; 
  10 XSNYR XSNYR ; 
  10 FY0HWSYR FY0HWSYR ; 
    15 FY0HWSCC FY0HWSCC ; 
    15 FY0HWSYY FY0HWSYY ; 
  10 FY0HWIND FY0HWIND ; 
  10 CAITEM CAITEM ; 
    15 FY0HWFNC FY0HWFNC ; 
    15 * char(19) ; 
end // end FY0HW01

//*** RECORD=FY0HW02 ****
// Temporary storage record for fy0k - Mold/Last Inquiry
// ***********************
Record FY0HW02 type basicRecord
  10 FY0HWLEN FY0HWLEN ; 
  10 FY0HWLIN FY0HWLIN [12] ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 FY1FCTNM FY1FCTNM ; 
    15 XCTDESC XCTDESC ; 
    15 FY2MFGPC FY2MFGPC ; 
end // end FY0HW02

// Highest page no./index
DataItem FY0HSQIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Function flag
DataItem FY0HWFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line count flag
DataItem FY0HWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FY0HWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem FY0HWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// List map line
DataItem FY0HWLIN char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem FY0HWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season centry
DataItem FY0HWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem FY0HWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FY0HWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season range
DataItem FY0HWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season year
DataItem FY0HWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Curent page number
DataItem FY0HWTSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FY0HYSN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

