package fy0t;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=FY0T ****
// THIS PROGRAM WILL ALLOW THE USER TO LIST/MAINTAIN
// EXISTING MODE OF TRANSPOTATION TABLE ROWS.
// 
//     THE MODE OF TRANSPORTATION SCREEN (FY0T) FUNCTION
//     IS TO DISPLAY THE MODE OF TRANSPORTATION FOR BOTH
//     FACTORY AND COUNTRY LEVEL FOR A GIVEN GPC CODE.
// 
// BASED UPON THE GPC CODE ENTERED THE DATABASE WILL RETURN
// 0 TO N ROWS.  THESE ROWS WILL BE FORMATTED ON THE LIST
// SCREEN AS INSTRUCTED BY THIS PROGRAM.
// 
// THIS PROGRAM WILL ALLOW THE USER TO DELETE, OR
// CHANGE EXISTING MODE OF TRANSPORTATION ROWS.  THE USER WILL
// ALSO BE ABLE TO ADD NEW ROWS.
// 
// ALL PROGRAM FUNCTIONS CAN EITHER BE IMPLEMENTED FROM THE
// LIST SCREEN OR VIA FAST PATH.
// 
// WHEN SELECTING A FUNCTION FROM THE LIST SCREEN
// THE USER WILL MAKE THE FUCTION SELECTION VIA PF KEYS.
// 
//                     PF13 FOR THE ADD
//                     PF14 FOR THE CHANGE
//                     PF15 FOR THE DELETE
//                     ENTER - NO FUNCTION
// 
// ONLY ROWS THAT HAVE AN ACTIVE STATUS CAN BE CHANGED OR
// DELETED.  AN INQUIRY CAN BE DONE ON ANY ROW SELECTED.
// AS MANY AS 14 ROWS CAN BE SELECTED FROM ANY ONE PAGE.
// 
// 
//                   * FAST PATH *
// 
// WHEN SELECTING A FUNCTION VIA FAST PATH THE USER WILL
// ENTER L,A,C, OR D.
// 
// WHEN DELETING,CHANGING, THE USER HAS TO SELECT 'S' THE
// REQUIRED ROW.
// 
// THE USE OF POP-UP WINDOWS HAS BEEN INCORPORATED INTO THIS
// PROGRAM.  THIS WILL ALLOW THE USER TO FIND AND ENTER THE
// CORRECT GPC CODE, COUNTRY, DESTINATION AND MODE
// 
// 
//   DATE        NAME       DESCRIPTION OF CHANGE
// ________     ______     ___________________________________
// 11/14/97     SBALAS     NEW APPLICATION
// 01/20/98     jniese     change to use vdefmd01 as db2 rec
//                         layout.
// 
// *********************
Program FY0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY0TW01 FY0TW01; // record
  FY0TW02 FY0TW02; // record
  FY0TW04 FY0TW04; // record
  FYWREC FYWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  VDEFMD01 VDEFMD01; // record
  VFCTY002 VFCTY002; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use FY0TM.FY0TM001,  // forms
      FY0TM.FY0TM002, 
      FY0TM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFY001: XPFY001();
     /* ------------------------------------------------------------*/
     /* INITIALIZE WORKING STORAGE AND MAP OUTPUT AREAS.*/
     /* FLOW TO CONVERSE THE LIAISON/FIELD OFFICE PROCESS.*/
     /* ------------------------------------------------------------*/

    set FY0TW01 empty; /* Initialize working storage*/
    set FY0TW02 empty; /* Initialize temporary storage*/
    set VDEFMD01 empty; /* Initialize CSP record*/
    set SQLCA empty; /* Initialize SQL record*/
    set ERRSQLCA empty; /* Initialize SQL error record*/
    set TA1REC empty; /* Initialize error diag. module*/
    set TA5REC empty; /* Initialize ta0050 record*/
    set XX0XW01 empty; /* Initialize date record*/
    set XX0XW02 empty; /* Initialize date record*/
    set XX0XM001 initial; /* Clear pop-up window map*/
    set FY0TM001 initial; /* Clear list screen map*/
    set FY0TM002 initial; /* Clear functions map*/

    FY0TW01.FY0TFLAG = "C"; /* MAP1 DEFAULT SET TO COUNTRY*/
    FY0TM001.FY0TCOL = "COUNTRY"; /* MAP1 DEFAULT SET TO COUNTRY*/
    FY0TWDEL = "N"; /* DELETE FLAG SET TO 'N'*/
    FY0TW01.FY0TWIXM = 14; /* Initialize list screen lines*/
    FY0TW01.FY0TWSWR = "N"; /* Initialize request for data*/
    FY0TW01.FY0TWLSF = "Y"; /* Initialize list map flag*/
    FY0TW01.FY0TWMAP = "1"; /* Initialize list map*/
    FY0TW01.FY0TWFNC = " "; /* Set function code to spaces*/
    FY0TW01.XGPCD = COMMAREA.XGPCD;

     /* ---------------------------------------------------------*/
     /* WHEN COMMING INTO THIS PROGRAM VIA FAST PATH CAITEM WILL*/
     /* BE CHECKED FOR AN ADD, DELETE, INQUIRY, OR CHANGE*/
     /* FUNCTION CODE.*/
     /* ---------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* If item exists*/
      FY0TW01.CAITEM = COMMAREA.CAITEM;
      if (FY0TW01.FY0TWFNC == "A" /* An ADD was requested*/
       || FY0TW01.FY0TWFNC == "C" /* A CHANGE was requested*/
       || FY0TW01.FY0TWFNC == "I") /* An INQUIRY was requested*/
        FY0TW01.FY0TWMAP = "2"; /* Will converse map2*/
        FY0TW01.FY0TWLSF = "N"; /* Turn off list map flag*/
      else
        FY0TW01.FY0TWFNC = " "; /* Clear function code*/
      end
    end

     /* -----------------------------------------------------------*/
     /* THE GPC CODE WILL BE CHECKED WHEN ENTERING VIA FAST PATH*/
     /* FOR VALIDITY.*/
     /* -----------------------------------------------------------*/

    if (COMMAREA.XGPCD in XGPTBL.XGPCD) /* If GPC code in table*/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        FY0TM001.XGPCD = COMMAREA.XGPCD; /* Move code to map1*/
        FY0TW01.XGPCD = COMMAREA.XGPCD; /* Move code to storage*/
        FY0TM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC desc. to map1*/
        FY0TW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC desc.*/
        if (FY0TW01.FY0TWMAP == "1")
          FY0TW01.FY0TWSWR = "Y"; /* Turn on request for data*/
        end
      end
    end


    FY0T001: FY0T001();
    goto FY0T001;
  end // end main
end // end FY0T

// MODE OF TRANSPORTATION
Function FY0T001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

      /* If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (FY0TW01.FY0TWMAP == "1") /* Map 1 was requested*/
    FY0T100(); /* Display map 1*/
  else
    if (FY0TW01.FY0TWMAP == "2") /* Map 2 was requested*/
      if (FY0TW01.FY0TWFNC == "A") /* Add function requested*/
        if (COMMAREA.CAADDFL == "Y") /* User can do adds*/
          FY0TWDEL = "N"; /* INIT. THE DEL FLAG*/
          FY0T200(); /* Display map 2*/
        else
          converseLib.validationFailed(6); /* Request for application invalid*/
          FY0TW01.FY0TWFNC = " "; /* Set function code to spaces*/
          FY0TW01.FY0TWMAP = 1; /* Request for map 1*/
        end
      else
        if (FY0TW01.FY0TWFNC == "I") /* Inquire function requested*/
          if (COMMAREA.CAINQFL == "Y") /* User can do deletes*/
            FY0TWDEL = "N"; /* INIT. THE DEL FLAG*/
            FY0T003(); /* Inquire function not available*/
          else
            converseLib.validationFailed(6); /* Inquire function not available*/
            FY0TW01.FY0TWFNC = " "; /* Set function code spaces*/
            FY0TW01.FY0TWMAP = 1; /* Request for map 1*/
          end
        else
          if (FY0TW01.FY0TWFNC == "C") /* Change function requested*/
            if (COMMAREA.CACHGFL == "Y") /* User can do deletes*/
              FY0TWDEL = "N"; /* INIT. THE DEL FLAG*/
              FY0T004(); /* Change Process*/
            else
              converseLib.validationFailed(6); /* Request for application invalid*/
              FY0TW01.FY0TWFNC = " "; /* Set function code to spaces*/
              FY0TW01.FY0TWMAP = 1; /* Request for map 1*/
            end
          else
            if (FY0TW01.FY0TWFNC == "D") /* delete function requested*/
              if (COMMAREA.CADELFL == "Y") /* User can do deletes*/
                FY0T300(); /* delete Process*/
              else
                converseLib.validationFailed(6); /* Request for application invalid*/
                FY0TW01.FY0TWFNC = " "; /* Set function code to spaces*/
                FY0TW01.FY0TWMAP = 1; /* Request for map 1*/
              end
            else
              SQLCA.SQLCAREC = "INVALID FUNCTION CODE";
              FY0T005(); /* Error routine*/
            end
          end
        end
      end
    else
      SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
      FY0T005(); /* Error routine*/
    end
  end

end // end FY0T001

// Change Screen Options
Function FY0T003()

   /* ----------------------------------------------------------*/
     /* This module will make the determination if:*/
      /* 1) It is being entered via the List Screen*/
      /* 2) or being entered via Fast Path*/
      /* If Fast Path the List Screen will be brought up.*/
   /* ----------------------------------------------------------*/

  if (FY0TW01.FY0TWLSF == "Y") /* Came from list screen*/
    FY0TW01.FY0TWSWR = "N"; /* Request for data key*/
    FY0TW01.FY0TWIXM = 1; /* Initialize line index*/
    while (FY0TWIXM <= 14) /* Until end of lines*/
      if (FY0TM001.FY0TMSEL[FY0TWIXM] == "S") /* Line selected*/
        FY0T500(); /**/
        if (converseVar.validationMsgNum == 0) /* No errors*/
        else
          FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM - 1; /* Decrement line count*/
        end
      end
      FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM + 1; /* Increment line count*/
    end
    FY0TW01.FY0TWMAP = "1"; /* Set map 1*/
    FY0TW01.FY0TWSWR = "Y"; /* Request for data key*/
  end
  if (FY0TW01.FY0TWLSF == "N" /* Came from Fast Path*/
   && FY0TW01.FY0TWSWR == "N") /* Request for data key*/
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set VDEFMD01 empty; /* Clear record*/
    end
    FY0T800(); /* Display Fast Path Change map*/
  end
  if (FY0TW01.FY0TWLSF == "N" /* Came from Fast Path*/
   && FY0TW01.FY0TWSWR == "Y") /* Request for data key*/
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set VDEFMD01 empty;
    end
    FY0T800(); /* Display Fast Path Change map*/
  end

end // end FY0T003

// Change Screen Options
Function FY0T004()

   /* ----------------------------------------------------------*/
      /* This module will make the determination if:*/
      /* 1) It is being entered via the List Screen*/
      /* 2) or being entered via Fast Path*/
      /* If Fast Path the List Screen will be brought up.*/
   /* ----------------------------------------------------------*/

  if (FY0TW01.FY0TWLSF == "Y") /* Came from list screen*/
    FY0TW01.FY0TWSWR = "N"; /* Request for data key*/
    FY0TW01.FY0TWIXM = 1; /* Initialize line index*/
    while (FY0TWIXM <= 14) /* Until end of lines*/
      if (FY0TM001.FY0TMSEL[FY0TWIXM] == "S") /* Line selected*/
        FY0T700(); /* Display Change map*/
        if (converseVar.validationMsgNum == 0) /* No errors*/
        else
          FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM - 1; /* Decrement line count*/
        end
      end
      FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM + 1; /* Increment line count*/
    end
    FY0TW01.FY0TWMAP = "1"; /* Set map 1*/
    FY0TW01.FY0TWSWR = "Y"; /* Request for data key*/
  end
  if (FY0TW01.FY0TWLSF == "N" /* Came from Fast Path*/
   && FY0TW01.FY0TWSWR == "N") /* Request for data key*/
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set VDEFMD01 empty; /* Clear record*/
    end
    FY0T800(); /* Display Fast Path Change map*/
  end
  if (FY0TW01.FY0TWLSF == "N" /* Came from Fast Path*/
   && FY0TW01.FY0TWSWR == "Y") /* Request for data key*/
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set VDEFMD01 empty;
    end
    FY0T800(); /* Display Fast Path Change map*/
  end

end // end FY0T004

// Fast path error routine
Function FY0T005()

   /* -----------------------------------------------------------*/
     /* This error routine is executed from the Main Application*/
     /* Flow if an error has occureddue to an invalid map number,*/
     /* function code, or major error not covered in the Main*/
     /* Process flow.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "FY0T001"; /* Process name*/
  TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
  TA1REC.TA1MAP = FY0TW01.FY0TWMAP; /* Map name*/
  SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  XSPF4(); /* Exit to master menu*/

end // end FY0T005

// mode of transportation lst Map
Function FY0T100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 1.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0TW01.FY0TWSWR == "Y")
    FY0T110(); /* Obtain the data to display*/
  end

  FY0T120(); /* Format and display the map*/

  FY0T130(); /* Check attention identifier*/

  FY0T140(); /* Reset fields to normal intensity*/

  FY0T150(); /* Verify the entered data*/

  FY0T160(); /* Process valid input request*/

end // end FY0T100

// Obtain the data to display
Function FY0T110()

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  FY0T111(); /* Purge any temporary storage*/

  FY0T112(); /* Select set and open the cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/

    FY0TW01.FY0TWSWC = "N"; /* Initialize end of file switch*/
    FY0TW01.FY0TWIXM = 1; /* Initialize display line number*/
    set FY0TW02 empty; /* Clear temporary storage*/

    while (FY0TW01.FY0TWSWC == "N") /* Until cursor end of file*/
      FY0T113(); /* Obtain data and format page*/
      if (FY0TW01.FY0TWIXM > 14) /* Page is full*/
        FY0T114(); /* Add page to temporary storage*/
      end
    end
    if (FY0TW01.FY0TWSWC == "Y") /* End of file flag*/
      if (FY0TW01.FY0TWIXM > 1) /* And page was formatted*/
        FY0T114(); /* Add page to temporary storage*/
      end
      FY0TW01.FY0TMTSP = 1; /* Initialize page number*/
      FY0TW01.FY0TWSWR = "N"; /* Request for data completed*/
      FY0T115(); /* Close the selected set cursor*/
    end
  end

  if (FY0TW01.TA5TSQIX == 0) /* No data to display*/
    FY0TM001.XXXPRCNM = "FY0T110"; /* Process name*/
    if (FY0TW01.FY0TFLAG == "C")
      FY0TM001.FY0TCOL = "COUNTRY";
    else
      FY0TM001.FY0TCOL = "FACTORY";
    end
    converseLib.validationFailed(21); /* No data to display*/
  end

end // end FY0T110

// Purge any temporary storage
Function FY0T111()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FY0T"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (FY0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No Error was found*/
    FY0TW01.FY0TMTSP = 0; /* Reset current page number*/
    FY0TW01.TA5TSQIX = 0; /* Reset highest page number*/

  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0T111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0TM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

end // end FY0T111

// SELECT SET AND OPEN CURSOR
Function FY0T112()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  VDEFMD01.XGPCD = FY0TW01.XGPCD; /* Search key*/
  VDEFMD01.FY1FCTYC = " ";
  VDEFMD01.TSEOXCC = " ";
  if (FY0TW01.FY0TFLAG == "C")
    VDEFMD01.TSEOXCC = "*";
  else
    VDEFMD01.FY1FCTYC = "*";
  end
  call "VDEFMD01" ("SS", SQLCA, VDEFMD01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

       /* GO ON*/


  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0T112"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "FY0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFD0FC01"; /* Table view name*/
    TA1REC.TA1TBLKE = VDEFMD01.XGPCD; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0TM001.XXXPRCNM = "FY0T112"; /* Process name*/
  end
end // end FY0T112

// Fetch next row and format
Function FY0T113()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "VDEFMD01" ("SN", SQLCA, VDEFMD01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

    FY0T13A(); /* Validation check*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FY0TW01.FY0TWSWC = "Y"; /* Indicate end of file*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0T113"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "FY0TM001"; /* Map name*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDEFMD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      FY0TM001.XXXPRCNM = "FY0T113"; /* Process name*/
    end
  end

end // end FY0T113

// Add page to temporary storage
Function FY0T114()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FY0TW02.FY0TWLEN = 1488; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0T"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (FY0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No error was found*/
    FY0TW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    FY0TW01.FY0TWIXM = 1; /* Reset display line number*/
    set FY0TW02 empty; /* Clears temporary storage record*/
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0T114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0TM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0TM001.XXXPRCNM = "FY0T114"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end FY0T114

// Close selected set cursor
Function FY0T115()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "VDEFMD01" ("CS", SQLCA, VDEFMD01) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

     /* GO ON*/

  else
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0T115"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "FY0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFD0FC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0TM001.XXXPRCNM = "FY0T115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end FY0T115

// Format and display the map
Function FY0T120()

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No message to display*/
   || converseVar.validationMsgNum == 53)
    set FY0TM001 initial; /* Clear map output area*/
    FY0TM001.FY0TFLAG = FY0TW01.FY0TFLAG; /* /default value*/
    FY0TM001.VAGen_EZEMSG = "PLEASE MAKE YOUR SELECTION(S)";
    if (FY0TW01.FY0TWADD == "Y") /* Add successful*/
      FY0TM001.VAGen_EZEMSG = "ADD COMPLETE    MAKE NEW SELECTIONS";
      FY0TW01.FY0TWADD = "N";
    end

    if (FY0TW01.FY0TWUPD == "Y") /* Update successful*/
      FY0TM001.VAGen_EZEMSG = "UPDATE COMPLETE    MAKE NEW SELECTIONS";
      FY0TW01.FY0TWUPD = "N";
    end

    if (FY0TW01.FY0TWINQ == "Y") /* Inquire successful*/
      FY0TM001.VAGen_EZEMSG = "INQUIRE COMPLETE    MAKE NEW SELECTIONS";
      FY0TW01.FY0TWINQ = "N";
    end

    if (FY0TWDEL == "D") /* DELETE  successful*/
      FY0TM001.VAGen_EZEMSG = "DELETE  COMPLETE    MAKE NEW SELECTIONS";
      FY0TWDEL = "N";
    end

    FY0T121(); /* Format the selected data*/
  else
    set FY0TM001 alarm; /* Indicate sound alarm*/
  end
  if (COMMAREA.XGPCD == "01"
   || COMMAREA.XGPCD == "02"
   || COMMAREA.XGPCD == "03"
   || COMMAREA.XGPCD == "07")
    if (COMMAREA.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FY0TM001.XGPCD = COMMAREA.XGPCD; /* GPC Number*/
      FY0TW01.XGPCD = COMMAREA.XGPCD; /* GPC Number*/
      FY0TM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      FY0TW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
  else
    XXXPRCNM = "FY0T120"; /* Process name*/
    converseLib.validationFailed(180); /* Invalid gpc code*/
    set FY0TM001.XGPCD cursor, bold; /* Highlight error*/
  end
  FY0TW01.FY0TWLSF = "Y"; /* Sets list screen flag on*/


  FY0TM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (COMMAREA.CAADDFL == "Y") /* User can do adds*/
    FY0TM001.FY0TMADD = "13:ADD";
    set FY0TM001.FY0TMADD bold; /* Display add key*/
  end

  if (COMMAREA.CACHGFL == "Y") /* User can change rows*/
    FY0TM001.FY0TMCHG = "14:CHG";
    set FY0TM001.FY0TMCHG skip; /* Display change key*/
  end

  if (COMMAREA.CADELFL == "Y") /* User can DELETE rows*/
    FY0TM001.FY0TMDEL = "15:DEL";
    set FY0TM001.FY0TMDEL skip; /* Display DELETe key*/
  end


  converse FY0TM001 ;

  if (converseVar.eventKey is enter)
    FY0T124(); /* GPC Pop-up Window*/
  end

end // end FY0T120

// Format the selected data
Function FY0T121()

   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  FY0TW01.FY0TWCSF = "N"; /* Cursor set flag*/

  if (FY0TW01.TA5TSQIX == 0) /* No data to display*/
    set FY0TM001.XGPCD cursor; /* Set cursor top of page*/
    FY0TW01.FY0TWCSK = " "; /* Clear save key*/

     /* Next Sentence*/

  else
    if (FY0TW01.FY0TWCSK > " ") /* Something in key*/
      FY0TW01.FY0TMTSP = 1; /* Search page*/
    end

    FY0TW01.FY0TWCSF = "N"; /* Initialize cursor set flag*/
    FY0TW01.FY0TWDFL = "N"; /* Initialize save flag*/
    while (FY0TW01.FY0TWDFL == "N") /* Save save key not found*/
      FY0T122(); /* Read temp. storage page*/
      FY0T123(); /* Find save key*/
    end

    FY0TW01.FY0TWCSK = " "; /* Clear save key*/

    if (FY0TW01.FY0TMTSP != TA5REC.TA5TSQIX) /* Desired page not*/
      FY0T122(); /* Obtain temporary storage page*/
    end

    set FY0TM001.FY0TMPGL skip; /* Display "PAGE" literal*/
    set FY0TM001.FY0TMOFL skip; /* Display "OF" literal*/

    FY0TM001.FY0TMTSP = FY0TW01.FY0TMTSP; /* Current page number*/
    set FY0TM001.FY0TMTSP skip; /* Shows current page number*/
    FY0TM001.TA5TSQIX = FY0TW01.TA5TSQIX; /* Highest page number*/
    FY0TM001.FY0TFLAG = FY0TW01.FY0TFLAG; /* Highest page number*/
    set FY0TM001.TA5TSQIX skip; /* Shows highest page number*/


    FY0TW01.FY0TWIXM = 1; /* Initialize line index*/

    while (FY0TW01.FY0TWIXM <= 14) /* Until end of lines*/

      set FY0TM001.FY0TMSEL[FY0TWIXM] normal; /* Display select flag*/
      if (FY0TW01.FY0TFLAG == "C")
        FY0TM001.FY0TCOL = "COUNTRY";
        FY0TM001.FY1FCTYC[FY0TWIXM] = FY0TW02.TSEOXCC[FY0TWIXM];
      else
        FY0TM001.FY0TCOL = "FACTORY";
        FY0TM001.FY1FCTYC[FY0TWIXM] = FY0TW02.FY1FCTYC[FY0TWIXM];
      end
      FY0TM001.TSEDXCC[FY0TWIXM] = FY0TW02.TSEDXCC[FY0TWIXM];
      FY0TM001.YMTCD[FY0TWIXM] = FY0TW02.YMTCD[FY0TWIXM];
      FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM + 1; /* Increment line index*/
    end
    if (FY0TW01.FY0TWCSF == "N") /* Cursor set flag is off*/
      set FY0TM001.FY0TMSEL[1] cursor; /* Puts cursor on first line*/
    end
  end

end // end FY0T121

// Read temporary storage page
Function FY0T122()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FY0TW02.FY0TWLEN = 1488; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0T"; /* Application identification*/
  TA5REC.TA5TSQIX = FY0TW01.FY0TMTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (FY0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No error was found*/

     /* GO ON*/

  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0T122"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0TM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0TM001.XXXPRCNM = "FY0T122"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

end // end FY0T122

// LOCATE SAVE KEY
Function FY0T123()

   /* ------------------------------------------------------------*/
   /* Locate the page in which the key is greater than the*/
   /* Save Key.*/
   /* Save Key = FY0TWCSK*/
   /* ------------------------------------------------------------*/

  if (FY0TW01.FY0TWCSK == " ") /* No save key entered*/
    FY0TW01.FY0TWDFL = "Y"; /* Indicate key found*/
  else

    FY0TW01.FY0TWIXM = 1; /* Initialize index*/

    while (FY0TW01.FY0TWIXM <= 14 /* Until key is found*/
     && FY0TW01.FY0TWDFL == "N") /* or page was found*/
      if (FY0TW02.FY1FCTYC[FY0TWIXM] >= FY0TW01.FY0TWCSK)
        set FY0TM001.FY0TMSEL[FY0TWIXM] cursor; /* Initial cursor*/
        FY0TW01.FY0TWCSF = "Y"; /* Turn on cursor set flag*/
        FY0TW01.FY0TWDFL = "Y"; /* Indicate page was found*/
        if (FY0TW01.FY0TWIXM == 1) /* Key not on page*/
          if (FY0TW02.FY1FCTYC[FY0TWIXM] == FY0TW01.FY0TWCSK)

              /* GO ON*/

          else
            FY0TW01.FY0TWIXM = 14; /* Index to last entry*/
            FY0TW01.FY0TMTSP = FY0TW01.FY0TMTSP - 1; /* decrement page*/
          end
        else
          if (FY0TW01.FY0TWIXM > 1) /* Not first key*/
            FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM - 1; /* Decrement index*/
          end
        end
      else
        FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM + 1; /* Increment index*/
      end
    end

    if (FY0TW01.FY0TWDFL == "N") /* Save key not found*/
      if (FY0TW01.FY0TMTSP == FY0TW01.TA5TSQIX) /* Last page*/

           /* GO ON*/

      else
        FY0TW01.FY0TMTSP = FY0TW01.FY0TMTSP + 1; /* Increment page*/
      end
    end
  end

end // end FY0T123

// Check for ? by User
Function FY0T124()


   /* -----------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0TM001.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0TM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0TM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
    else
      FY0TM001.XGPCD = " "; /* clear fields*/
      FY0TM001.XGPDESC = " ";
    end
    converseLib.clearScreen();
     /* restore the original map*/
  end



end // end FY0T124

// Check attention identifier
Function FY0T130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    FY0TW01.FY0TWDEL = "N"; /* SET THE DEL FLAG*/
    set FY0TM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0TM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FY0T111(); /* Purge any temporary storage*/
      set VDEFMD01 empty; /* Clear record*/
      COMMAREA.CATOAP = FY0TM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0TM001.CAITEM; /* To application*/

      XSFY001(); /* Exit to another application*/
      VDEFMD01.XGPCD = COMMAREA.XGPCD; /* Reset load key*/
      FY0TW01.FY0TWSWR = "Y"; /* Set request for data to yes*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    end

    set FY0TM001.CATOAP cursor, modified, bold; /* Highlight*/
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0TM001"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end
    FY0T111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    FY0T111(); /* Purge temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 key pressed*/
   && COMMAREA.CAADDFL == "N")     /* Not able to ADD*/
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 key pressed*/
   && COMMAREA.CACHGFL == "N")     /* Not able to CHANGE*/
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 key pressed*/
   && FY0TM001.XGPCD == " ")       /* Nothing on map1*/
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    converseLib.validationFailed(101); /* Must have valid GPC code*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is enter /* Enter key pressed*/
   && COMMAREA.CAINQFL == "N")      /* User cannot do inquiry*/
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid attention key*/
  end


  if (converseVar.eventKey is pf15
   && COMMAREA.CADELFL == "N") /* User cannot do DELETE*/
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid attention key*/
  end

  if (converseVar.eventKey is pf15 /* PF15 key pressed*/
   && FY0TM001.XGPCD == " ")       /* Nothing on map1*/
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    converseLib.validationFailed(101); /* Must have valid GPC code*/
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is enter /* Enter key pressed*/
   && FY0TM001.XGPCD != "01"        /**/
   && FY0TM001.XGPCD != "02"        /**/
   && FY0TM001.XGPCD != "03"        /**/
   && FY0TM001.XGPCD != "07")       /**/
    COMMAREA.XGPCD = FY0TM001.XGPCD;
    FY0TW01.XGPCD = FY0TM001.XGPCD;
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    set FY0TM001 initial; /**/
    FY0TM001.FY0TFLAG = "C"; /**/
    FY0TM001.XGPCD = FY0TW01.XGPCD; /**/
    converseLib.validationFailed(180); /**/
    exit stack;
  end

  if (converseVar.eventKey is enter /* Enter key pressed*/
   && FY0TM001.FY0TFLAG != "C"      /**/
   && FY0TM001.FY0TFLAG != "F")     /**/
    set FY0TM001 initial; /**/
    set FY0TM001.FY0TFLAG cursor, modified, bold;
    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    converseLib.validationFailed(181); /* Invalid attention key*/
    return;
  end
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* PF15 was not pressed*/

    FY0TM001.XXXPRCNM = "FY0T130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/

  end

end // end FY0T130

// TABLE VALIDATION ROUTINE
Function FY0T13A()
  FY0TW02.FY1FCTYC[FY0TWIXM] = VDEFMD01.FY1FCTYC;
  FY0TW02.TSEOXCC[FY0TWIXM] = VDEFMD01.TSEOXCC;
  FY0TW02.TSEDXCC[FY0TWIXM] = VDEFMD01.TSEDXCC;
  FY0TW02.YMTCD[FY0TWIXM] = VDEFMD01.YMTCD;

  FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM + 1; /* Increment line*/

end // end FY0T13A

// Reset highlighted fields
Function FY0T140()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  FY0TW01.FY0TWIXM = 1; /* Initialize line index*/

  while (FY0TW01.FY0TWIXM <= 14) /* Until end of lines*/

    if (FY0TM001.FY1FCTYC[FY0TWIXM] > " ") /* Line was formatted*/
      set FY0TM001.FY0TMSEL[FY0TWIXM] normal; /* Reset select flag*/
    end

    FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM + 1; /* Increment line index*/

  end

  set FY0TM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0TM001.CAITEM initialAttributes; /* Commarea application data*/

end // end FY0T140

// Verify the entered data
Function FY0T150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0TM001.CAITEM > " ") /* Application data was entered*/

    set FY0TM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0TM001.XXXPRCNM = "FY0T150"; /* Process name*/

  end

  if (converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/

      FY0T151(); /* Verify scroll request*/

    else

      FY0T152(); /* Verify any changed data*/

    end
  end

end // end FY0T150

// Verify scroll request
Function FY0T151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FY0TW01.FY0TMTSP < 2)       /* and no previous pages*/
    FY0TM001.XXXPRCNM = "FY0T151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FY0TW01.FY0TMTSP >= FY0TW01.TA5TSQIX) /* and no more pages*/
    FY0TM001.XXXPRCNM = "FY0T151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  FY0TW01.FY0TWIXM = 14; /* Initialize line index*/

  while (FY0TW01.FY0TWIXM > 0) /* Until end of lines*/
    if (FY0TM001.FY0TMSEL[FY0TWIXM] != FY0TW02.FY0TMSEL[FY0TWIXM])
      set FY0TM001.FY0TMSEL[FY0TWIXM] cursor, modified, bold; /* Highlight*/
      FY0TM001.XXXPRCNM = "FY0T151"; /* Process name*/
      converseLib.validationFailed(14); /* A line may not be selected*/
    end
    FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM - 1; /* Decrement line count*/
  end

end // end FY0T151

// Verify any changed data
Function FY0T152()

   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If enter key is pressed*/
    if (FY0TM001.XGPCD == FY0TW01.XGPCD) /* Existing GPC code same*/
      if (FY0TM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
        FY0TW01.XGPCD = FY0TM001.XGPCD;
        FY0TW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
        FY0TM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
        FY0TM001.XGPCD = FY0TW01.XGPCD;
        FY0TW01.FY0TWSWR = "Y"; /* Turn on request for data*/
      end
    else
      if (FY0TM001.XGPCD != FY0TW01.XGPCD) /* If GPC different*/
        if (FY0TM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
         && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
          COMMAREA.XGPCD = FY0TM001.XGPCD;
          set FY0TM001 initial; /* Clear screen*/
          FY0TM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
          FY0TW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
          FY0TM001.FY0TFLAG = FY0TW01.FY0TFLAG;
          FY0TM001.XGPCD = COMMAREA.XGPCD;
          FY0TW01.FY0TWSWR = "Y"; /* Turn on request for data*/
          FY0TW01.FY0TWCSK = " "; /* Clear save key*/
        else
          COMMAREA.XGPCD = FY0TM001.XGPCD;
          set FY0TM001 initial; /* Clear screen*/
          set FY0TM001.XGPCD cursor, modified, bold; /* Highlight GPC code*/
          FY0TW01.XGPCD = " ";
          FY0TW01.XGPDESC = " "; /* Description*/
          FY0TM001.XXXPRCNM = "FY0T152"; /* Process name*/
          converseLib.validationFailed(101); /* Must have valid GPC code*/
        end
      else
        FY0TM001.XGPDESC = " "; /* Description*/
        set FY0TM001.XGPCD cursor, modified, bold; /* Highlight GPC code*/
        FY0TW01.XGPCD = " ";
        FY0TW01.XGPDESC = " "; /* Description*/
        FY0TM001.XXXPRCNM = "FY0T152"; /* Process name*/
      end
    end
  end

  if (converseVar.eventKey is enter) /* If enter key is pressed*/
    if (FY0TM001.FY0TFLAG != FY0TW01.FY0TFLAG) /**/
      FY0TW01.XGPCD = FY0TM001.XGPCD;
      FY0TW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
      FY0TM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
      FY0TW01.FY0TFLAG = FY0TM001.FY0TFLAG;
      set FY0TM001 initial; /* Clear screen*/
      FY0TM001.XGPCD = FY0TW01.XGPCD;
      FY0TM001.FY0TFLAG = FY0TW01.FY0TFLAG;
      FY0TW01.FY0TWSWR = "Y"; /* Turn on request for data*/
      FY0TW01.FY0TWCSK = " "; /* Clear save key*/
    end
  end

  if (converseVar.eventKey is pf13) /* PF13 key pressed (ADD)*/

     /* NEXT SENTENCE*/

  end
  if (converseVar.eventKey is pf14) /* PF14 key pressed (CHANGE)*/
    FY0T153(); /* Selection check loop*/
  end
  if (converseVar.eventKey is pf15) /* PF15 key pressed (DELETE)*/
    FY0T153(); /* Selection check loop*/
  end
  if (converseVar.eventKey is enter) /* Enter key pressed (INQUIRE)*/
    FY0T153(); /* Selection check loop*/
  end

end // end FY0T152

// Selection Check Loop
Function FY0T153()

   /* ------------------------------------------------------------*/
   /* See if a 'S'election was made*/
   /* ------------------------------------------------------------*/

  if (FY0TM001.XGPCD == FY0TW01.XGPCD) /* Same GPC code*/
    FY0TW01.FY0TWIXM = 14; /* Initialize line index*/

    while (FY0TW01.FY0TWIXM > 0) /* Until end of lines*/
      if (FY0TM001.FY0TMSEL[FY0TWIXM] == " " /* If selection blank*/
       || FY0TM001.FY0TMSEL[FY0TWIXM] == "S") /* (S)election made*/

         /* next sentence*/

      else
        set FY0TM001.FY0TMSEL[FY0TWIXM] cursor, modified, bold;
                                   /* Highlight*/
        FY0TM001.XXXPRCNM = "FY0T153"; /* Process name*/
        converseLib.validationFailed(13); /* Only a 'S' is allowed*/
      end
      FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM - 1; /* Decrement line number*/
    end
    if (converseVar.validationMsgNum == 0) /* No errors*/
      if ("S" in FY0TM001.FY0TMSEL) /* There is a S*/

         /* GO ON*/

      else
        FY0TM001.XXXPRCNM = "FY0T153"; /* Process name*/
        converseLib.validationFailed(53); /* You must make a selection*/
      end
    end
  end

end // end FY0T153

// Process valid input request
Function FY0T160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (FY0TM001.XGPCD == FY0TW01.XGPCD /* GPC codes match*/
   && converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7) /* Scroll back requested*/
      FY0TW01.FY0TMTSP = FY0TW01.FY0TMTSP - 1; /* Decrement page number*/
    end

    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      FY0TW01.FY0TMTSP = FY0TW01.FY0TMTSP + 1; /* Increment page number*/
    end

    if (converseVar.eventKey is enter) /* Enter key pressed*/
      FY0TW01.FY0TWMAP = "2"; /* Map 2 to be displayed*/
      FY0TW01.FY0TWFNC = "I"; /* Function code is inquire*/
    else
      if (converseVar.eventKey is pf13) /* PF13 key pressed (ADD)*/
        FY0TW01.FY0TWMAP = "2"; /* Map 2 to be displayed*/
        FY0TW01.FY0TWFNC = "A"; /* Function code is add*/
      else
        if (converseVar.eventKey is pf14) /* PF14 key pressed (CHANGE)*/
          FY0TW01.FY0TWMAP = "2"; /* Map 2 to be displayed*/
          FY0TW01.FY0TWFNC = "C"; /* Function code is change*/
        else
          if (converseVar.eventKey is pf15) /* PF15 key pressed (DELETE)*/
            FY0TW01.FY0TWMAP = "2"; /* Map 2 to be displayed*/
            FY0TW01.FY0TWFNC = "D"; /* Function code is delete*/

          end
        end
      end
    end
  else
    FY0TW01.XGPCD = FY0TM001.XGPCD;
  end

end // end FY0T160

// MAP NUMBER TWO: ADD
Function FY0T200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to Add a record.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/
   /* ------------------------------------------------------------*/

  FY0T210(); /* Format and display the map*/

  FY0T220(); /* Check attention identifier*/

  FY0T230(); /* Reset fields to normal intensity*/

  FY0T240(); /* Verify the entered data*/

  FY0T250(); /* Process valid input request*/

end // end FY0T200

// FORMAT AND DISPLAY THE MAP
Function FY0T210()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No messages*/
    set FY0TM002 initial; /* Clear map output area*/
    VAGen_EZEMSG = "ENTER YOUR NEW RECORD";
  else
    set FY0TM002 alarm; /* Indicate sound alarm*/
  end
  if (FY0TW01.XGPCD > " ") /* If something in GPC code*/
    if (FY0TW01.XGPCD in XGPTBL.XGPCD)
      FY0TM002.XGPCD = FY0TW01.XGPCD; /* Move GPC code to map2*/
      FY0TW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      FY0TM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    else
      set FY0TM002.XGPCD cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(101); /* Must have valid gpc code*/
      FY0TM002.XXXPRCNM = "FY0T210"; /* Process name*/
    end
  else
    set FY0TM002.XGPCD cursor, modified; /* Place cursor at gpc field*/
    FY0TM002.VAGen_EZEMSG = "ENTER GPC CODE ";
  end


  FY0TM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0TM002.FY0TMFNC = "ADD"; /* Move ADD literial to map 2*/

  converse FY0TM002 ;

end // end FY0T210

// Check attention identifier
Function FY0T220()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FY0TM002 initial; /* Clear the map fields*/
    FY0TW01.FY0TWSWR = "N"; /* Request for data eq yes*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0TM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0TM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0TM002.CAITEM; /* To application*/
      FY0T111(); /* Purge any temporary storage*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0TM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0TM002.XXXPRCNM = "FY0T230"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0TM002"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0T111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0TM002.XXXPRCNM = "FY0T230"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0TW01.FY0TWMAP = "1"; /* Map flag eq 1*/
    FY0TW01.FY0TWSWR = "Y"; /* Request for data*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0TW01.FY0TWFNC = " "; /* Set function code to spaces*/
    FY0TW01.FY0TWCSK = " "; /**/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0T111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0TM002.XXXPRCNM = "FY0T230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

end // end FY0T220

// Reset highlighted fields
Function FY0T230()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0TM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0TM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0TM002.XGPDESC initialAttributes;
  set FY0TM002.XGPCD initialAttributes;
  set FY0TM002.FY1FCTYC initialAttributes; /* Map fields*/
  set FY0TM002.TSEOXCC initialAttributes; /* Map fields*/
  set FY0TM002.TSEDXCC initialAttributes; /* Map fields*/
  set FY0TM002.YMTCD initialAttributes;

   /* ------------------------------------------------------------*/
    /* IF NO LISTS WERE REQUESTED. RETURN TO PREVIOUS PROCESS*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/
    FY0T231();
  end

end // end FY0T230

// Check for ? by User
Function FY0T231()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0TM002.XGPCD == "?" /* if any ? entered*/
   || FY0TM002.TSEOXCC == "?"
   || FY0TM002.TSEDXCC == "?"
   || FY0TM002.YMTCD == "?" 
  )                         /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0TM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0TM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0TM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      set FY0TM002.XGPCD cursor;
    else
      FY0TM002.XGPCD = " "; /* clear fields*/
      FY0TM002.XGPDESC = " ";
      set FY0TM002.XGPCD cursor;
    end
  end

   /* -------------------------------------------------**/
                  /* COUNTRY POP-UP WINDOW*/
   /* -------------------------------------------------**/

  if (FY0TM002.TSEOXCC == "?") /* if ? in ORIGN code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   COUNTRY    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXCT01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0TM002.TSEOXCC = XCTTBL.XCTCD[XX0XWPIX]; /**/
      set FY0TM002.TSEOXCC cursor;
    else
      FY0TM002.TSEOXCC = " "; /* clear fields*/
      set FY0TM002.TSEOXCC cursor;
    end
  end

   /* -------------------------------------------------**/
                  /* DESTINATION POP-UP WINDOW*/
   /* -------------------------------------------------**/

  if (FY0TM002.TSEDXCC == "?") /* if ? in ORIGN code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   DESTINATION"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXCT01(); /* perform COUNTRY  window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0TM002.TSEDXCC = XCTTBL.XCTCD[XX0XWPIX]; /**/
      set FY0TM002.TSEDXCC cursor;
    else
      FY0TM002.TSEDXCC = " "; /* clear fields*/
      set FY0TM002.TSEDXCC cursor;
    end
  end

   /* -------------------------------------------------**/
                  /* MODE OF TRANS POP-UP WINDOW*/
   /* -------------------------------------------------**/

  if (FY0TM002.YMTCD == "?") /* if ? in MODE  code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   TRANS. MODE"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYMT01(); /* perform TRANSPORT window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0TM002.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /**/
      set FY0TM002.YMTCD cursor;
    else
      FY0TM002.YMTCD = " "; /* clear fields*/
      set FY0TM002.YMTCD cursor;
    end
  end


  converseLib.clearScreen();
   /* restore the original map*/
  converseLib.validationFailed(93); /* Press enter to process*/

  exit stack; /* Exit to display map*/

end // end FY0T231

// Verify the entered data
Function FY0T240()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0TM002.CAITEM > " ") /* Application data was entered*/
    set FY0TM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0TM002.XXXPRCNM = "FY0T240"; /* Process name*/
  end

  FY0T241(); /* Check entered data*/

end // end FY0T240

// VALIDATE INPUT DATA
Function FY0T241()

   /* -----------------------------------------------------------*/
    /* Validate the entered data.*/
    /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/

  if (FY0TM002.FY1FCTYC == " " /**/
   && FY0TM002.TSEOXCC == "  ") /**/
    set FY0TM002.FY1FCTYC cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(175); /**/
    FY0TM002.XXXPRCNM = "FY0T241"; /* Process name*/
  end

  if (FY0TM002.FY1FCTYC > " " /* Something in factory code field*/
   && FY0TM002.TSEOXCC == "  ") /* Check DEST. Field empty*/
    VFCTY002.XGPCD = FY0TM002.XGPCD;
    VFCTY002.FY1FCTYC = FY0TM002.FY1FCTYC;

    call "VFCTY002" ("S ", SQLCA, VFCTY002) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/
    if (SQLCA.VAGen_SQLCODE == 0)

    end
  end

  if (FY0TM002.FY1FCTYC > " "  /* Something in factory code field*/
   && FY0TM002.TSEOXCC == "  " /* Check DEST. Field empty*/
   && SQLCA.VAGen_SQLCODE == 100) /* RECORD NOT FOUND*/
    set FY0TM002.FY1FCTYC cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(176); /* DEST. is missing or invalid*/
    FY0TM002.XXXPRCNM = "FY0T241"; /* Process name*/
  end

  if (FY0TM002.FY1FCTYC > " " /* Something in factory code field*/
   && FY0TM002.TSEOXCC != "  ") /* Check DEST. Field NOT BLANK*/
    set FY0TM002.FY1FCTYC cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(179); /* ORIG. is INVALID*/
    FY0TM002.XXXPRCNM = "FY0T241"; /* Process name*/
  end
   /* ------------------------------------------------------------*/
     /* Get COUNTRY from code entered, if active*/
   /* ------------------------------------------------------------*/

  if (FY0TM002.TSEOXCC > " "           /* Something in country code field*/
   && FY0TM002.TSEOXCC in XCTTBL.XCTCD /* Check country content table*/
   && FY0TM002.FY1FCTYC == "  ")       /* Check FACTORY field empty*/
  end

  if (FY0TM002.TSEOXCC > "  ") /**/
    if (FY0TM002.TSEOXCC in XCTTBL.XCTCD)
         /* NEXT SENTENCE*/
    else
      set FY0TM002.TSEOXCC cursor, modified, bold; /* Highlight error*/
      converseLib.validationFailed(177); /* DEST. is missing or invalid*/
      FY0TM002.XXXPRCNM = "FY0T241"; /* Process name*/
    end
  end

  if (FY0TM002.TSEOXCC > "  "          
   && FY0TM002.TSEOXCC in XCTTBL.XCTCD /* Check country content table*/
   && FY0TM002.FY1FCTYC != "  ")       /* Check factory code not blank*/
    set FY0TM002.TSEOXCC cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(182); /* Country is missing or invalid*/
    FY0TM002.XXXPRCNM = "FY0T241"; /* Process name*/
  end
   /* ------------------------------------------------------------*/
     /* Get DEST  from code entered, if active*/
   /* ------------------------------------------------------------*/

  if (FY0TM002.TSEDXCC > " "           /* DEST field has a value*/
   && FY0TM002.TSEDXCC in XCTTBL.XCTCD /* Check country content table*/
   || FY0TM002.TSEDXCC == "ALL")       /* CHECK FOR ALL*/
  else
    set FY0TM002.TSEDXCC cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(174); /* DEST. is missing or invalid*/
    FY0TM002.XXXPRCNM = "FY0T241"; /* Process name*/
    FY0TM002.TSEDXCC = " "; /* Clears dest.*/
  end

   /* ------------------------------------------------------------*/
     /* Mode of trans. code*/
   /* ------------------------------------------------------------*/

  if (FY0TM002.YMTCD > " " /* mode field has a value*/
   && FY0TM002.YMTCD == "AF"
   || FY0TM002.YMTCD == "VL"
   || FY0TM002.YMTCD == "TR")
  else
    set FY0TM002.YMTCD cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(173); /* Code is missing*/
    FY0TM002.XXXPRCNM = "FY0T241"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
     /* Get general product code entered if active*/
   /* ------------------------------------------------------------*/

  if (FY0TM002.XGPCD > " " /* Something in GPC code field*/
   && FY0TM002.XGPCD in XGPTBL.XGPCD) /* Check GPC table*/
    if (FY0TM002.XGPCD == "01" /**/
     || FY0TM002.XGPCD == "02" /**/
     || FY0TM002.XGPCD == "03" /**/
     || FY0TM002.XGPCD == "07") /**/
      FY0TM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Desc.*/
      FY0TW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Desc.*/
      COMMAREA.XGPCD = FY0TM002.XGPCD;
      FY0TW01.XGPCD = FY0TM002.XGPCD;

    else
      set FY0TM002.XGPCD cursor, modified, bold; /* Highlight error*/
      FY0TW01.XGPCD = " ";
      FY0TW01.XGPDESC = " ";
      converseLib.validationFailed(180); /* Must have valid GPC code*/
      FY0TM002.XXXPRCNM = "FY0T241"; /* Process name*/
    end
  else
    set FY0TM002.XGPCD cursor, modified, bold; /* Highlight error*/
    FY0TW01.XGPCD = " ";
    FY0TW01.XGPDESC = " ";
    converseLib.validationFailed(180); /* Must have valid GPC code*/
    FY0TM002.XXXPRCNM = "FY0T241"; /* Process name*/
  end

end // end FY0T241

// Process valid input request
Function FY0T250()

   /* ------------------------------------------------------------*/
   /* Process any added data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No Messages*/
                                  /* Move fields to record*/
    VDEFMD01.XGPCD = FY0TM002.XGPCD; /* GPC code*/
    VDEFMD01.FY1FCTYC = FY0TM002.FY1FCTYC; /* FACTORY CODE*/
    VDEFMD01.TSEOXCC = FY0TM002.TSEOXCC; /* ORIGIN*/
    VDEFMD01.TSEDXCC = FY0TM002.TSEDXCC; /* DESTINATION*/
    VDEFMD01.YMTCD = FY0TM002.YMTCD; /* MODE*/

    FY0T251(); /* Check record*/

    if (SQLCA.VAGen_SQLCODE == 100) /* If row does not exists*/
      FY0T252(); /* Add new row*/
      FY0TW01.FY0TWCSK = FY0TM002.FY1FCTYC; /* Save key*/
      set FY0TM002 initial; /* Clear screen*/
      FY0TW01.FY0TWADD = "Y"; /* ADD Successfulset flag*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* If row does exists*/
        converseLib.validationFailed(178); /* Already exists*/
        FY0TM002.XXXPRCNM = "FY0T250"; /* Process name*/
        FY0TW01.FY0TWSWR = "Y"; /* Request for data eq yes*/
        set FY0TM002.FY1FCTYC cursor, modified, bold; /* highlight error*/
      end
    end
  end

end // end FY0T250

// CHECK TABLE
Function FY0T251()

   /* ------------------------------------------------------------*/
   /* This module selects a table row.*/

     /* This alternate select module is designed to return a*/
     /* valid error code whenever  there are overlaps in*/
     /* the data base.  Therefore, if any number of rows are*/
     /* returned from the database a valid error has occurred.*/

   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "VDEFMD01" ("S ", SQLCA, VDEFMD01) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 100 /* Valid return codes*/
   || SQLCA.VAGen_SQLCODE == 0) 

       /* GO ON*/


  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0T251"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "FY0TM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0TM002.XXXPRCNM = "FY0T251"; /* Process name*/
  end

end // end FY0T251

// ADD NEW ROW
Function FY0T252()

   /* ------------------------------------------------------------*/
   /* This module adds a trade restriction table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  FY0TW01.FY0TWCSK = FY0TM002.FY1FCTYC; /* Save key*/
   /* MOVE 'A' TO FYTREC.XXXSTAT;*/

  XX0XS01();

  VDEFMD01.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VDEFMD01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VDEFMD01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VDEFMD01.ZZZCHGCT = 0; /* Change count*/

  call "VDEFMD01" ("A ", SQLCA, VDEFMD01) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Return code OK*/
   || SQLCA.VAGen_SQLCODE == 100) /* Return code OK*/

     /* GO ON*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0T252"; /* Process name*/
    TA1REC.TA1LOC = "ADD A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "FY0TM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0TM002.XXXPRCNM = "FY0T252"; /* Process name*/
  end

end // end FY0T252

// delete routine call para
Function FY0T300()

   /* ------------------------------------------------------------*/
   /* This is the main process used to DELete a record.*/
   /* ------------------------------------------------------------*/
  if (FY0TW01.FY0TWLSF == "Y") /* Came from list screen*/
    FY0TW01.FY0TWSWR = "N"; /* Request for data key*/
    FY0TW01.FY0TWIXM = 1; /* Initialize line index*/
    while (FY0TWIXM <= 14) /* Until end of lines*/
      if (FY0TM001.FY0TMSEL[FY0TWIXM] == "S") /* Line selected*/
        FY0T310();
      end
      if (converseVar.validationMsgNum == 0 /* No errorserrors*/
       || converseVar.validationMsgNum == 172) /* No errorserrors*/
      else
        FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM - 1; /* Decrement line coun*/
      end
      FY0TW01.FY0TWIXM = FY0TW01.FY0TWIXM + 1; /* Increment line count*/
    end
  end
  FY0TW01.FY0TWMAP = "1"; /* Set map 1*/
  FY0TW01.FY0TWSWR = "Y"; /* Request for data key*/

  if (FY0TW01.FY0TWLSF == "N" /* Came from Fast Path*/
   && FY0TW01.FY0TWSWR == "N") /* Request for data key*/
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set VDEFMD01 empty; /* Clear record*/
    end
    FY0T800(); /* Display Fast Path Change map*/
  end
  if (FY0TW01.FY0TWLSF == "N" /* Came from Fast Path*/
   && FY0TW01.FY0TWSWR == "Y") /* Request for data key*/
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set VDEFMD01 empty;
    end
    FY0T800(); /* Display Fast Path Change map*/
  end

end // end FY0T300

// delete process para
Function FY0T310()

   /* ------------------------------------------------------------*/
   /* This is the main process used to DELete a record.*/
   /* ------------------------------------------------------------*/
  if (FY0TWDEL == "N")
    FY0TW04.XGPCD = FY0TW01.XGPCD; /* GPC code*/
    FY0TW04.FY1FCTYC = FY0TW02.FY1FCTYC[FY0TWIXM]; /**/
    FY0TW04.TSEOXCC = FY0TW02.TSEOXCC[FY0TWIXM]; /**/
    FY0TW04.TSEDXCC = FY0TW02.TSEDXCC[FY0TWIXM]; /**/
  end
  if (FY0TWDEL == "Y")
    VDEFMD01.XGPCD = FY0TW04.XGPCD; /* GPC code*/
    VDEFMD01.FY1FCTYC = FY0TW04.FY1FCTYC; /**/
    VDEFMD01.TSEOXCC = FY0TW04.TSEOXCC; /**/
    VDEFMD01.TSEDXCC = FY0TW04.TSEDXCC; /**/
  end
  if (FY0TWDEL == "N")
    FY0TWDEL = "Y";
    converseLib.validationFailed(172);
  else
    call "VDEFMD01" ("D ", SQLCA, VDEFMD01) {isNoRefresh = yes, isExternal = yes}; /* delete a row*/

    if (SQLCA.VAGen_SQLCODE == 100 /* Valid return codes*/
     || SQLCA.VAGen_SQLCODE == 0) 
      FY0TWDEL = "D";
      set VDEFMD01 empty;
      FY0TW01.FY0TWSWR = "Y";
        /* GO ON*/


    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0T300"; /* Process name*/
      TA1REC.TA1LOC = "DELETE TABLE ROW";
      TA1REC.TA1MAP = "FY0TM001"; /* Map name*/
      TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDEFMD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      FY0TM001.XXXPRCNM = "FY0T300"; /* Process name*/
    end
  end
end // end FY0T310

// Select a unique row: CHANGE
Function FY0T500()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  VDEFMD01.XGPCD = FY0TW01.XGPCD; /* GPC code*/
  VDEFMD01.FY1FCTYC = FY0TW02.FY1FCTYC[FY0TWIXM]; /**/
  VDEFMD01.TSEOXCC = FY0TW02.TSEOXCC[FY0TWIXM]; /**/
  VDEFMD01.TSEDXCC = FY0TW02.TSEDXCC[FY0TWIXM]; /**/

end // end FY0T500

// CHANGE PROCESS: List screen
Function FY0T700()

   /* ------------------------------------------------------------*/
   /* This is the main process used to CHANGE a record.  It will*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  FY0T710(); /* Obtain the data to display*/

  FY0T720(); /* Format and display the map*/

  FY0T730(); /* Check attention identifier*/

  FY0T740(); /* Reset fields to normal intensity*/

  FY0T750(); /* Verify the entered data*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    FY0T760(); /* Process valid input request*/
  end

end // end FY0T700

// Select a unique row: CHANGE
Function FY0T710()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  VDEFMD01.XGPCD = FY0TM001.XGPCD; /* GPC code*/
  if (FY0TM001.FY0TFLAG == "F")
    VDEFMD01.FY1FCTYC = FY0TM001.FY1FCTYC[FY0TWIXM]; /**/
  else
    VDEFMD01.TSEOXCC = FY0TM001.FY1FCTYC[FY0TWIXM]; /**/
  end
  VDEFMD01.TSEDXCC = FY0TM001.TSEDXCC[FY0TWIXM]; /**/
  VDEFMD01.YMTCD = FY0TM001.YMTCD[FY0TWIXM]; /**/

  call "VDEFMD01" ("S ", SQLCA, VDEFMD01) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
   || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

     /* next sentence*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0T710"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE ROW CHANGE";
    TA1REC.TA1MAP = "FY0TM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/
    TA1REC.TA1TBLKE = VDEFMD01.VDEFMD01-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0TM002.XXXPRCNM = "FY0T710"; /* Process name*/
  end

end // end FY0T710

// Format and display map
Function FY0T720()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error*/
    set FY0TM002 initial; /* Clear map output area*/
    VAGen_EZEMSG = "MAKE YOUR CHANGES THEN PRESS \"ENTER\" OR \"PA2\"";

    FY0T721(); /* Format data for map*/

    set FY0TM002.XGPCD blue, noHighLight, skip; /* PROTECT  FIELDS*/
    set FY0TM002.XGPDESC blue, noHighLight, skip;
    set FY0TM002.FY1FCTYC blue, noHighLight, skip;
    set FY0TM002.TSEOXCC blue, noHighLight, skip;
    set FY0TM002.TSEDXCC blue, noHighLight, skip;
    set FY0TM002.YMTCD cursor;

  else
    set FY0TM002 alarm; /* Indicate sound alarm*/
  end

  FY0TM002.XGPCD = FY0TW01.XGPCD; /* Move GPC code to map2*/
  FY0TM002.XGPDESC = FY0TW01.XGPDESC; /* Desc to map2*/
  FY0TM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0TM002.FY0TMFNC = "CHANGE"; /* Move CHANGE literial to map 2*/

  converse FY0TM002 ;


end // end FY0T720

// Obtain Data to Display CHANGE
Function FY0T721()

   /* ------------------------------------------------------------*/
   /* MOVE SELECTED LINES TO MAP*/
   /* ------------------------------------------------------------*/

  if (FY0TW01.FY0TFLAG == "F")
    FY0TM002.FY1FCTYC = VDEFMD01.FY1FCTYC; /* FACTORY CODE*/
  else
    FY0TM002.TSEOXCC = VDEFMD01.TSEOXCC; /* ORIGIN*/
  end
  FY0TM002.TSEDXCC = VDEFMD01.TSEDXCC; /* DEST*/
  FY0TM002.YMTCD = VDEFMD01.YMTCD; /* MODE*/

end // end FY0T721

// Check Attention Identifiers
Function FY0T730()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FY0TM002 initial; /* Clears map 2*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0TM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0TM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FY0TM002.CAITEM; /* TO application*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0TM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0TM002.XXXPRCNM = "FY0T730"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0TW01.FY0TWMAP = "1"; /* Move to map 1*/
    FY0TW01.FY0TWSWR = "Y"; /* Request for data is yes*/
    FY0TW01.FY0TWFNC = " "; /* Clear function flag*/
    FY0TW01.FY0TWCSK = FY0TM002.FY1FCTYC; /* Save key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "FY0TM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    FY0T111(); /* Purge temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0TM002.XXXPRCNM = "FY0T730"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0T111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0TM002.XXXPRCNM = "FY0T730"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

end // end FY0T730

// Reset Highlighted Fields
Function FY0T740()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0TM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0TM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0TM002.FY1FCTYC initialAttributes; /* Map fields*/
  set FY0TM002.TSEOXCC initialAttributes; /* Map fields*/
  set FY0TM002.TSEDXCC initialAttributes; /* Map fields*/
  set FY0TM002.YMTCD initialAttributes;


   /* ------------------------------------------------------------*/
   /* CHECK AND SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    FY0T741();
  end

end // end FY0T740

// Check for ? by User
Function FY0T741()


   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0TM002.XGPCD == "?" /* if any ? entered*/
   || FY0TM002.YMTCD == "?")

       /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0TM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "             GPC CODES    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0TM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0TM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      set FY0TM002.XGPCD cursor;
    else
      FY0TM002.XGPCD = " "; /* clear fields*/
      FY0TM002.XGPDESC = " ";
      set FY0TM002.XGPCD cursor;
    end
  end


  if (FY0TM002.YMTCD == "?") /* if ? i*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "             TRANS. MODE    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYMT01(); /* perform MODE*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0TM002.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /* move code*/
      set FY0TM002.YMTCD cursor;
    else
      FY0TM002.YMTCD = " "; /* clear fields*/
      set FY0TM002.YMTCD cursor;
    end
  end


  converseLib.clearScreen();
   /* restore the original map*/

  set FY0TM002.XGPCD blue, noHighLight, skip;
  set FY0TM002.XGPDESC blue, noHighLight, skip;
  set FY0TM002.FY1FCTYC blue, noHighLight, skip;
  set FY0TM002.TSEOXCC blue, noHighLight, skip;
  set FY0TM002.TSEDXCC blue, noHighLight, skip;
  set FY0TM002.YMTCD cursor;

  converseLib.validationFailed(93);

  exit stack; /* Exit to redisplay map2*/

end // end FY0T741

// Verify the entered data
Function FY0T750()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0TM002.CAITEM > " ") /* Application data was entered*/
    set FY0TM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0TM002.XXXPRCNM = "FY0T750"; /* Process name*/
  end

  if (converseVar.validationMsgNum == 0)
    FY0T751();
  end

end // end FY0T750

// VALIDATE REC CHANGE
Function FY0T751()
   /* -------------------------------------------*/
   /* Validate the Changed record*/
   /* ------------------------------------------*/
  if (FY0TM002.YMTCD == VDEFMD01.YMTCD)
    exit stack;
  else
    FY0T752();
  end

end // end FY0T751

// Validate input data CHANGE
Function FY0T752()

   /* -----------------------------------------------------------*/
    /* Validate the entered data.*/
    /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/
   /* -----------------------------------------------------------*/
     /* Validate the MODE OF TRANS*/
   /* ------------------------------------------------------------*/

  if (FY0TM002.YMTCD > " " /* Sometheing in mode of transfield*/
   && FY0TM002.YMTCD == "AF"
   || FY0TM002.YMTCD == "TR"
   || FY0TM002.YMTCD == "VL")
  else
    set FY0TM002.YMTCD cursor, modified, bold; /* Highlight error*/
    converseLib.validationFailed(173); /* message mode of trans invalid*/
    set FY0TM002.XGPCD blue, noHighLight, skip; /* PROTECT*/
    set FY0TM002.XGPDESC blue, noHighLight, skip;
    set FY0TM002.FY1FCTYC blue, noHighLight, skip;
    set FY0TM002.TSEOXCC blue, noHighLight, skip;
    set FY0TM002.TSEDXCC blue, noHighLight, skip;

    FY0TM002.XXXPRCNM = "FY0T752"; /* Process name*/
   /* OVE ' ' TO FY0TM002.FYTMODE;        /* Clears description*/
  end

end // end FY0T752

Function FY0T760()
   /* ------------------------------------------*/
   /* Process changed data*/
   /* ------------------------------------------*/
  if (converseVar.eventKey is enter)
    VDEFMD01.YMTCD = FY0TM002.YMTCD; /* mode of trans*/

    FY0T761(); /* perform update*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If row does exists*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* Update this row*/
      FY0TW01.FY0TWCSK = FY0TM002.FY1FCTYC; /* Save key*/
      set FY0TM002 initial; /* Clear map2*/
      FY0TW01.FY0TWUPD = "Y"; /* Update successful*/
      FY0TM001.FY0TMSEL[FY0TWIXM] = " "; /* Remove selected line*/
      set VDEFMD01 empty; /* Clear record*/
      FY0TW01.FY0TWSWR = "Y"; /* Request for data turned on*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* If row does not exists*/
        converseLib.validationFailed(12); /* Update done by someone else*/
      end
    end
  end
end // end FY0T760

// Update row
Function FY0T761()

   /* ------------------------------------------------------------*/
   /* Update the Trans. of mode field.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "VDEFMD01" ("U ", SQLCA, VDEFMD01) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Valid return codes*/
   || SQLCA.VAGen_SQLCODE == 100)

       /* GO ON*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0T761"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "FY0TM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FY0TM002.XXXPRCNM = "FY0T761"; /* Process name*/
  end

end // end FY0T761

// CHANGE PROCESS: Fast Path
Function FY0T800()

   /* ------------------------------------------------------------*/
   /* This is the main process used to CHANGE a record.  It will*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0TW01.FY0TWSWR == "Y") /* Request for data is Y*/
    FY0T810(); /* Obtain the data to display*/
  end

  FY0T820(); /* Format and display the map*/

  FY0T830(); /* Check attention identifier*/

  FY0T840(); /* Reset fields to normal intensity*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    FY0T850(); /* Verify the entered data*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors*/
    FY0T860(); /* Process valid input request*/
  end

end // end FY0T800

// Obtain Data To Display
Function FY0T810()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  VDEFMD01.XGPCD = FY0TW01.XGPCD; /* GPC code*/
  VDEFMD01.FY1FCTYC = FY0TM002.FY1FCTYC; /**/

  call "VDEFMD01" ("S ", SQLCA, VDEFMD01) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

     /* next sentence*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(21); /* No data found*/
      FY0TM002.XXXPRCNM = "FY0T810"; /* Process name*/
      set FY0TM002.FY1FCTYC cursor, bold; /* Highlight*/
      FY0TM002.FY1FCTYC = VDEFMD01.FY1FCTYC;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0T810"; /* Process name*/
      TA1REC.TA1LOC = "SELECT UNIQUE ROW CHANGE";
      TA1REC.TA1MAP = "FY0TM002"; /* Map name*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDEFMD01"; /* Table view name*/
      TA1REC.TA1TBLKE = VDEFMD01.VDEFMD01-KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      FY0TM002.XXXPRCNM = "FY0T810"; /* Process name*/

    end
  end

end // end FY0T810

// Format and Display Map2
Function FY0T820()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error*/
    set FY0TM002 initial; /* Clear map output area*/
    if (FY0TW01.XGPCD > " ") /* If something in GPC code*/
      FY0TM002.XGPCD = FY0TW01.XGPCD; /* Move GPC code to map2*/
      FY0TM002.XGPDESC = FY0TW01.XGPDESC;
      if (FY0TW01.FY0TWSWR == "Y") /* Request for data is on*/
        FY0T823(); /* Format data for map*/
      else
        FY0T821(); /* Protect non-key fields*/
      end
    else
      FY0T821(); /* Protect non-key fields*/
    end
  else
    set FY0TM002 alarm; /* Indicate sound alarm*/
  end

  FY0TM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0TM002.FY0TMFNC = "CHANGE"; /* Move CHANGE literial to map 2*/

  converse FY0TM002 ;


end // end FY0T820

// Protect non-key fields
Function FY0T821()

   /* ------------------------------------------------------------*/
   /* Protect non-key fields.*/
   /* ------------------------------------------------------------*/

  set FY0TM002.FY1FCTYC protect; /* Protect Fields*/
  set FY0TM002.TSEOXCC protect;
  set FY0TM002.TSEDXCC protect;

  if (converseVar.validationMsgNum == 0) /* No errors*/
    FY0T822(); /* Check key fields*/
  end

end // end FY0T821

// Validate key fields
Function FY0T822()

   /* -----------------------------------------------------------*/
    /* Validate the entered data.*/
    /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* FCTY CODE*/
   /* ------------------------------------------------------------*/

  if (FY0TM002.FY1FCTYC == " ") /* Nothing in code field*/
    set FY0TM002.FY1FCTYC cursor; /* Position cursor*/
    FY0TM002.VAGen_EZEMSG = "ENTER THE VALUES";
  end
  if (FY0TM002.XGPCD == " ") /* Nothing in code field*/
    set FY0TM002.XGPCD cursor; /* Position cursor*/
    FY0TM002.VAGen_EZEMSG = "ENTER GPC CODE ";
  end

  if (FY0TW01.FY0TWUPD == "Y") /* Update successful*/
    FY0TM002.VAGen_EZEMSG = "UPDATE SUCESSFUL--";
  end

  FY0TW01.FY0TWUPD = "N"; /* Turn off flag*/

end // end FY0T822

Function FY0T823()
end // end FY0T823

Function FY0T830()
end // end FY0T830

// Reset fields to normal
Function FY0T840()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0TM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0TM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0TM002.XGPDESC initialAttributes;
  set FY0TM002.XGPCD initialAttributes;
  set FY0TM002.FY1FCTYC initialAttributes; /* Map fields*/
  set FY0TM002.TSEOXCC initialAttributes; /* Map fields*/
  set FY0TM002.TSEDXCC initialAttributes; /* Map fields*/
  set FY0TM002.YMTCD initialAttributes;

   /* ------------------------------------------------------------*/
   /* CHECK AND SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    FY0T841();
  end

end // end FY0T840

// Check for ? by User
Function FY0T841()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0TM002.XGPCD == "?") /* if any ? entered*/

        /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0TM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "              GPC CODES   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0TM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0TM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      set FY0TM002.XGPCD cursor;
    else
      FY0TM002.XGPCD = " "; /* clear fields*/
      FY0TM002.XGPDESC = " ";
      set FY0TM002.XGPCD cursor;
    end
  end


  converseLib.clearScreen();
   /* restore the original map*/

  converseLib.validationFailed(93); /* Press enter to process*/

  exit stack; /* Exit to redisplay map2*/

end // end FY0T841

Function FY0T850()
end // end FY0T850

Function FY0T860()
end // end FY0T860

//*** RECORD=FY0TW01 ****
// Working storage for FY0T - Liaison/Field Office
// ***********************
Record FY0TW01 type basicRecord
  10 XXXRVNBR XXXRVNBR ; 
  10 FY0TWSWC FY0TWSWC ; 
  10 FY0TWSWR FY0TWSWR ; 
  10 FY0TMTSP FY0TMTSP ; 
  10 FY0TWIXM FY0TWIXM ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FY0TWQIX FY0TWQIX ; 
  10 FY0TWMAP FY0TWMAP ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 FY0TWIND FY0TWIND ; 
  10 FY0TWLSF FY0TWLSF ; 
  10 FY0TWPRO FY0TWPRO ; 
  10 FY0TWDEL FY0TWDEL ; 
  10 FY0TWINQ FY0TWINQ ; 
  10 FY0TWUPD FY0TWUPD ; 
  10 FY0TWADD FY0TWADD ; 
  10 FY0TWCSF FY0TWCSF ; 
  10 FY0TMSGE FY0TMSGE ; 
  10 FY0TWCSK FY0TWCSK ; 
    15 FY6FOCD FY6FOCD ; 
  10 CAITEM CAITEM ; 
    15 FY0TWFNC FY0TWFNC ; 
    15 * char(19) ; 
  10 FY0TWDEF FY0TWDEF ; 
  10 FY0TWDFL FY0TWDFL ; 
  10 FY0TFLAG FY0TFLAG ; 
end // end FY0TW01

//*** RECORD=FY0TW02 ****
// Temporary storage record for FY0T - Liaison/Field Office
// ***********************
Record FY0TW02 type basicRecord
  10 FY0TWLEN FY0TWLEN ; 
  10 FY0TWLIN FY0TWLIN [14] ; 
    15 FY0TMSEL FY0TMSEL ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 TSEOXCC TSEOXCC ; 
    15 TSEDXCC TSEDXCC ; 
    15 YMTCD YMTCD ; 
end // end FY0TW02

//*** RECORD=FY0TW04 ****
// Temporary storage record for FY0T
// ***********************
Record FY0TW04 type basicRecord
  10 XGPCD XGPCD ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 TSEOXCC TSEOXCC ; 
  10 TSEDXCC TSEDXCC ; 
  10 YMTCD YMTCD ; 
end // end FY0TW04

//*** RECORD=VDEFMD01 ****
// *************** MODE OF TRANSPORTATION TABLE****************
// 
// DB2 TABLE VIEW:      DFCTY.VDEFMD01
// 
// COPYLIB MEMBER:      vdefmd01
// 
// I/O MODULE:          VDEFMD01
// 
// KEY TO DB2 TABLE:    xgpcd,
//                      fytfcty,
//                      fytorig,
//                      fytdest.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 11/04/97   sbalas   New table installed
// ************************
Record VDEFMD01 type basicRecord
  5 VDEFMD01-GROUP VDEFMD01-GROUP ; 
    10 VDEFMD01-KEY VDEFMD01-KEY ; 
      15 XGPCD XGPCD ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 TSEOXCC TSEOXCC ; 
      15 TSEDXCC TSEDXCC ; 
    10 YMTCD YMTCD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VDEFMD01

DataItem FY0TFLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection field
DataItem FY0TMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error msg flag
DataItem FY0TMSGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temp.storage page
DataItem FY0TMTSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Successful add flag.
DataItem FY0TWADD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor set flag.
DataItem FY0TWCSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change save key.
DataItem FY0TWCSK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data entered flag.
DataItem FY0TWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete complete flag.
DataItem FY0TWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save flag.
DataItem FY0TWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function flag.
DataItem FY0TWFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line count flag.
DataItem FY0TWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry complete flag.
DataItem FY0TWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields.
DataItem FY0TWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length.
DataItem FY0TWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// List map line
DataItem FY0TWLIN char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List map flag.
DataItem FY0TWLSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed.
DataItem FY0TWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Protect flag.
DataItem FY0TWPRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Highest page no./index.
DataItem FY0TWQIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Cursor end of file switch.
DataItem FY0TWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch.
DataItem FY0TWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change complete flag.
DataItem FY0TWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VDEFMD01-GROUP char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VDEFMD01-KEY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

