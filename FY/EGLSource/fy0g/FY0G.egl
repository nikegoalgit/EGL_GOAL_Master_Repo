package fy0g;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=FY0G ****
// THIS PROGRAM WILL ALLOW THE USER TO INQUIRE/MAINTAIN
// EXISTING FOB TABLE ROWS.
// 
//     THE FOB TABLE CONTAINS PRICE INFORMATION FOR THE
//     PRODUCTS THAT NIKE PRODUCES. THESE INCLUDE TARGET,
//     QUOTED AND CURRENT PRICES.
// 
// BASED UPON THE GPC, FACTORY, STYLE, COLOR, DIMENSION,
// QUALITY, SPEC. DIFF., PACKAGE TYPE, UOM, AND SEASON CODES,
// AS WELL AS, SEASON YEAR, P.O. ID. YEAR,MONTH,REC. MONTH
// ENTERED THE DATABASE WILL RETURN 0 TO N ROWS.
// 
// THIS PROGRAM WILL ALLOW THE USER TO INQUIRE, DELETE, OR
// CHANGE EXISTING LIAISON/FIELD OFFICE ROWS.  THE USER WILL
// ALSO BE ABLE TO ADD NEW ROWS.
// 
// 
// WHEN SELECTING A FUNCTION FROM THE LIST SCREEN
// THE USER WILL MAKE THE FUCTION SELECTION VIA PF KEYS.
// 
//                     PF13 FOR THE ADD
//                     PF14 FOR THE CHANGE
//                     PF15 FOR THE DELETE
//                     ENTER FOR THE INQUIRE
// 
// ONLY ROWS THAT HAVE AN ACTIVE STATUS CAN BE CHANGED OR
// DELETED.  AN INQUIRY CAN BE DONE ON ANY ROW SELECTED.
// 
// 
// THE USE OF POP-UP WINDOWS HAS BEEN INCORPORATED INTO THIS
// PROGRAM.  THIS WILL ALLOW THE USER TO FIND AND ENTER THE
// CORRECT GPC CODE.
// 
// 
//   DATE        NAME       DESCRIPTION OF CHANGE
// ________    ________    ___________________________________
// 11/01/88     GWITZI     NEW APPLICATION
// 07/10/90     Gamen      Change cusror default in change mode
// 07/12/90     Gamen      Application abending in fy0g751 with
//                         subscript error. Put in limit of 40.
// 08/01/90     dmeier     change edit to not allow blanking
//                         out iseg code in fy0gm002 (Add mode)
// 10/02/90     Gamen      Allow application to use color field
// 10/30/90     MPISTO     Do not write tags unless data change
// 11/02/90     Gamen      Don't write unnesecary history.
// 09/10/91     Gamen      Correct history when date changed
// 10/03/91     Gamen      Check change date not change count
//                         when moving date modified to map 1.
// 10/29/91     Gamen      Don't allow price to be zero'd on
//                         existing rows when new row added or
//                         p.o. id range changed and no price
//                         was entered.
// 03/31/92     Gamen      Don't allow factory code to be blank
// 05/21/92     Tlewis     write tag recs for QQ (b-grades)
// 11/06/97     MBURLE     Y2KFIX: modified proc FY0G243 to
//                         use century when performing the
//                         date calculation.
// *********************
Program FY0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY0GW01 FY0GW01; // record
  FY0GW02 FY0GW02; // record
  FY0GW03 FY0GW03; // record
  FY1REC FY1REC; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  FYHREC FYHREC; // record
  FYIREC FYIREC; // record
  FYWREC FYWREC; // record
  PC2REC PC2REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PG6REC PG6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use FY0GM.FY0GM001,  // forms
      FY0GM.FY0GM002, 
      FY0GM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFY001: XPFY001();

     /* ------------------------------------------------------------*/
     /* INITIALIZE WORKING STORAGE AND MAP OUTPUT AREAS.*/
     /* FLOW TO CONVERSE THE LIAISON/FIELD OFFICE PROCESS.*/
     /* ------------------------------------------------------------*/

    set FY0GW01 empty; /* Initialize working storage*/
    set FY0GW02 empty; /* Initialize temporary storage*/
    set FY0GW03 empty; /* Initialize temporary storage*/
    set FY1REC empty; /* Initialize CSP record*/
    set FY4REC empty; /* Initialize CSP record*/
    set FYCREC empty; /* Initialize CSP record*/
    set FYHREC empty; /* Initialize CSP record*/
    set FYIREC empty; /* Initialize CSP record*/
    set PG2REC empty; /* Initialize CSP record*/
    set PG2REC empty; /* Initialize CSP record*/
    set PG3REC empty; /* Initialize CSP record*/
    set TA2REC empty; /* Initialize CSP record*/
    set SQLCA empty; /* Initialize SQL record*/
    set ERRSQLCA empty; /* Initialize SQL error record*/
    set TA1REC empty; /* Initialize error diag. module*/
    set TA5REC empty; /* Initialize ta0050 record*/
    set TAEREC empty; /* Initialize ta0020 record*/
    set XX0XW01 empty; /* Initialize date record*/
    set XX0XW02 empty; /* Initialize date record*/
    set XX0XM001 initial; /* Clear pop-up window map*/
    set FY0GM001 initial; /* Clear list screen map*/
    set FY0GM002 initial; /* Clear functions map*/


    FY0GW01.FY0GWIXM = 12; /* Initialize list screen lines*/
    FY0GW01.FY0GWSWR = "N"; /* Initialize request for data*/
    FY0GW01.FY0GWINF = "Y"; /* Initialize soft error flag*/
    FY0GW01.FY0GWLSF = "Y"; /* Initialize list map flag*/
    FY0GW01.FY0GWMAP = "1"; /* Initialize list map*/
    FY0GW01.FY0GWFNC = " "; /* Set function code to spaces*/
    FY0GW01.XDMCD = "00"; /* Default values*/
    FY0GM001.XDMCD = "00"; /* Default values*/
    FY0GW01.PC2INSEG = "000"; /* Default values*/
    FY0GM001.PC2INSEG = "000"; /* Default values*/
    FY0GW01.XQACD = "01"; /* Default values*/
    FY0GM001.XQACD = "01"; /* Default values*/
    FY0GW01.XPGCD = "00"; /* Default values*/
    FY0GM001.XPGCD = "00"; /* Default values*/
    FY0GW01.SY2CLRID = "00"; /* Default values*/
    FY0GM001.SY2CLRID = "00"; /* Default values*/
    FY0GW01.XGPCD = COMMAREA.XGPCD;

     /* ---------------------------------------------------------*/
     /* WHEN COMMING INTO THIS PROGRAM VIA FAST PATH CAITEM WILL*/
     /* BE CHECKED FOR AN ADD, DELETE, INQUIRY, OR CHANGE*/
     /* FUNCTION CODE.*/
     /* ---------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* If item exists*/
      FY0GW01.CAITEM = COMMAREA.CAITEM;
      if (FY0GW01.FY0GWFNC == "A" /* An ADD was requested*/
       || FY0GW01.FY0GWFNC == "D" /* A DELETE was requested*/
       || FY0GW01.FY0GWFNC == "C" /* A CHANGE was requested*/
       || FY0GW01.FY0GWFNC == "I") /* An INQUIRY was requested*/
        FY0GW01.FY0GWMAP = "2"; /* Will converse map2*/
        FY0GW01.FY0GWLSF = "N"; /* Turn off list map flag*/
      else
        FY0GW01.FY0GWFNC = " "; /* Clear function code*/
      end
    end


    FY0G000: FY0G000();
     /* no flow*/
    FY0G001: FY0G001();
    goto FY0G001;
  end // end main
end // end FY0G

// SPECIAL INITIALIZATION
Function FY0G000()

  if (COMMAREA.XGPCD == "02") /* If footwear*/
     /* next sentence*/
  else
    FYWREC.XXXMSGNO = 131; /* Move in message number*/
    COMMAREA.CAUSERA = FYWREC.CAUSERA; /* Move in user area*/
    COMMAREA.CATOAP = "FY0A"; /* exit to menu*/
    XSFY001();
  end

  FY0GW01.FY0GWSWR = "N"; /* init request for data switch*/

  FY0GW01.FY0GWMAP = 1; /* init to map 1*/

  FY0GW01.XGPCD = COMMAREA.XGPCD; /* Init gpc code*/
  FY0GM001.XGPCD = COMMAREA.XGPCD;

  if (FY0GW01.XGPCD in XGPTBL.XGPCD)
    FY0GW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    FY0GM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    FY0GW01.FY0GWSWR = "Y"; /* Request for data switchon*/

    if (FYWREC.FY1FCTYC > " ")
      FY1REC.XGPCD = COMMAREA.XGPCD;
      FY1REC.FY1FCTYC = FYWREC.FY1FCTYC;

      FY0GS03(); /* Select factory row for name*/

      if (SQLCA.VAGen_SQLCODE == 0)
        FY0GW01.FY1FCTYC = FY1REC.FY1FCTYC;
        FY0GM001.FY1FCTYC = FY1REC.FY1FCTYC;

        if (FYWREC.SY1STNBR > " ")
          FY0GM001.SY1STNBR = FYWREC.SY1STNBR;
          FY0GM001.SY2CLRID = FYWREC.SY2CLRID;
          FY0GM001.XDMCD = FYWREC.XDMCD;

          FY0G154(); /* Get the style, color names*/

          FY0GM001.PC2INSEG = FYWREC.PC2INSEG;
          FY0GM001.XQACD = FYWREC.XQACD;
          FY0GM001.XPGCD = FYWREC.XPGCD;

          FY0GW01.PC2INSEG = FYWREC.PC2INSEG;
          FY0GW01.XQACD = FYWREC.XQACD;
          FY0GW01.XPGCD = FYWREC.XPGCD;

        else

          FY0GW01.FY0GWSWR = "N"; /* Request for data switch on*/

        end
      end

    else

      FY0GW01.FY0GWSWR = "N"; /* Request for data switch on*/

    end
  end

  set FYWREC empty; /* Initialize now that were through with it*/

end // end FY0G000

// FOB by P.O. ID INQUIRY/MAINT.
Function FY0G001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (FY0GW01.FY0GWMAP == "1") /* Map 1 was requested*/
    FY0G100(); /* Display map 1*/
  else
    if (FY0GW01.FY0GWMAP == "2") /* Map 2 was requested*/
      if (FY0GW01.FY0GWFNC == "A") /* Add function requested*/
        if (COMMAREA.CAADDFL == "Y") /* User can do adds*/
          FY0G200(); /* Display map 2*/
        else
          converseLib.validationFailed(6); /* Request for application invalid*/
          FY0GM001.XXXPRCNM = "FY0G001"; /* Process name*/
          FY0GW01.FY0GWFNC = " "; /* Set function code to spaces*/
          FY0GW01.FY0GWMAP = 1; /* Request for map 1*/
          FY0GW01.FY0GWINF = "N"; /* Turn off soft error flag*/
        end
      else
        if (FY0GW01.FY0GWFNC == "I") /* Inquire function requested*/
          if (COMMAREA.CAINQFL == "Y") /* User can do inquiries*/
            FY0G003(); /* Inquire Process*/
          else
            converseLib.validationFailed(6); /* Request for application invalid*/
            FY0GM001.XXXPRCNM = "FY0G001"; /* Process name*/
            FY0GW01.FY0GWINF = "N"; /* Turn off soft error flag*/
            FY0GW01.FY0GWFNC = " "; /* Set function code to spaces*/
            FY0GW01.FY0GWMAP = 1; /* Request for map 1*/
          end
        else
          if (FY0GW01.FY0GWFNC == "C") /* Change function requested*/
            if (COMMAREA.CACHGFL == "Y") /* User can do changes*/
              FY0G004(); /* Change Process*/
            else
              converseLib.validationFailed(6); /* Request for application invalid*/
              FY0GM001.XXXPRCNM = "FY0G001"; /* Process name*/
              FY0GW01.FY0GWINF = "N"; /* Turn off soft error flag*/
              FY0GW01.FY0GWFNC = " "; /* Set function code to spaces*/
              FY0GW01.FY0GWMAP = 1; /* Request for map 1*/
            end
          else
            SQLCA.SQLCAREC = "INVALID FUNCTION CODE";
            FY0G005(); /* Error routine*/
          end
        end
      end
    else
      SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
      FY0G005(); /* Error routine*/
    end
  end

end // end FY0G001

// Inquiry Screen Options
Function FY0G003()

   /* ----------------------------------------------------------*/
   /* This module will cycle the selected rows for the INQUIRY*/
   /* process. If any errors the row will be shown again.*/
   /* ----------------------------------------------------------*/

  if (FY0GW01.FY0GWLSF == "Y") /* Came from list screen*/
    FY0GW01.FY0GWSWR = "Y"; /* Request for data key*/
    FY0GW01.FY0GWIXM = 1; /* Initialize line index*/
    while (FY0GWIXM <= 12) /* Until end of lines*/
      if (FY0GM001.FY0GMSEL[FY0GWIXM] == "S") /* Line selected*/
        FY0G500(); /* Display Inquiry map*/
      end
      if (converseVar.validationMsgNum == 0) /* No errors*/
        FY0GM001.FY0GMSEL[FY0GWIXM] = " "; /* Line selected*/
        FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM + 1; /* Increment line count*/
      end
    end
    FY0GW01.FY0GWMAP = "1"; /* Set map 1*/
    FY0GW01.FY0GWSWR = "Y"; /* Request for data key*/
  end

end // end FY0G003

// Change Screen Options
Function FY0G004()

   /* ----------------------------------------------------------*/
   /* This module will cycle the selected rows for the CHANGE*/
   /* process. If an error occurs it will show the same row.*/
   /* ----------------------------------------------------------*/

  FY0GW01.FY0GWSWR = "N"; /* Request for data key*/
  FY0GW01.FY0GWIXM = 1; /* Initialize line index*/
  while (FY0GWIXM <= 12) /* Until end of lines*/
    if (FY0GM001.FY0GMSEL[FY0GWIXM] == "S") /* Line selected*/
      FY0G700(); /* Display Change map*/
      if (converseVar.validationMsgNum == 0) /* No errors*/
        FY0GM001.FY0GMSEL[FY0GWIXM] = " "; /* Line selected*/
      else
        FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM - 1; /* Decrement line*/
      end
    end
    FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM + 1; /* Increment line count*/
  end
  FY0GW01.FY0GWMAP = "1"; /* Set map 1*/
  FY0GW01.FY0GWSWR = "Y"; /* Request for data key*/

end // end FY0G004

// Fast path error routine
Function FY0G005()
   /* -----------------------------------------------------------*/
     /* This error routine is executed from the Main Application*/
     /* Flow if an error has occureddue to an invalid map number,*/
     /* function code, or major error not covered in the Main*/
     /* Process flow.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "FY0G001"; /* Process name*/
  TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
  TA1REC.TA1MAP = FY0GW01.FY0GWMAP; /* Map name*/
  SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  XSPF4(); /* Exit to master menu*/

end // end FY0G005

// FOB by P.O. ID List Map
Function FY0G100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 1.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (FY0GW01.FY0GWSWR == "Y")
      FY0G110(); /* Obtain the data to display*/
    end
  end

  FY0G120(); /* Format and display the map*/

  FY0G130(); /* Check attention identifier*/

  FY0G140(); /* Reset fields to normal intensity*/

  if (converseVar.validationMsgNum == 0)
    FY0G150(); /* Verify the entered data*/
  end

  if (converseVar.validationMsgNum == 0)
    FY0G160(); /* Process valid input request*/
  end

end // end FY0G100

// Obtain the data to display
Function FY0G110()

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  FY0G111(); /* Purge any temporary storage*/

  FY0G112(); /* Select set and open the cursor*/

  FY0G113(); /* See if data exists*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/

    FY0GW01.FY0GWSWC = "N"; /* Initialize end of file switch*/
    FY0GW01.FY0GWIXM = 1; /* Initialize display line*/
    set FY0GW02 empty; /* Clear temporary storage*/

    while (FY0GW01.FY0GWSWC == "N") /* Until cursor end of file*/
      FY0G116(); /* Obtain size range*/
      if (FY0GW01.FY0GWIXM > 12) /* Page is full*/
        FY0G114(); /* Add page to temporary storage*/
        FY0GW01.FY0GWIXM = 1; /* Move 1 to line index*/
      end
      FY0G113(); /* Obtain data and format page*/
    end
    if (FY0GW01.FY0GWSWC == "Y") /* End of file flag*/
      if (FY0GW01.FY0GWIXM > 0 /* And page was formatted*/
       && FY0GW02.FY0GWBYY[1] > " ") /* Something on line*/
        FY0G114(); /* Add page to temporary storage*/
      end
      FY0GW01.FY0GMTSP = 1; /* Initialize page number*/
      FY0GW01.FY0GWSWR = "N"; /* Request for data completed*/
      FY0G115(); /* Close the selected set cursor*/
    end
  end

  if (FY0GW01.TA5TSQIX == 0) /* No data to display*/
    FY0GM001.XXXPRCNM = "FY0G110"; /* Process name*/
    converseLib.validationFailed(21); /* No data to display*/
  end


end // end FY0G110

// Purge any temporary storage
Function FY0G111()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FY0G"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FY0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && TA5REC.TA5RTNCD == 0)          /* No Error was found*/
    FY0GW01.FY0GMTSP = 0; /* Reset current page number*/
    FY0GW01.TA5TSQIX = 0; /* Reset highest page number*/

  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* Csp return code*/
    converseLib.validationFailed(10); /* System error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0G111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0GM001"; /* Map name*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();
    
  end

end // end FY0G111

// Select set and open cursor
Function FY0G112()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set FY4REC empty; /* Clear record*/
  set FYCREC empty; /* Clear record*/

  FY4REC.XGPCD = FY0GW01.XGPCD; /* Search key*/
  FY4REC.SY1STNBR = FY0GW01.SY1STNBR; /* Search key*/

  if (FY0GW01.FY1FCTYC == " ") /* Nothing in factory*/
    FY4REC.FY1FCTYC = "*"; /* Move in defalut*/
  else
    FY4REC.FY1FCTYC = FY0GW01.FY1FCTYC; /* Get factory*/
  end

  if (FY0GW01.SY2CLRID == " ") /* Nothing in color id*/
    FY4REC.SY2CLRID = "*"; /* Move in default*/
  else
    FY4REC.SY2CLRID = FY0GW01.SY2CLRID; /* Search key*/
  end

  FY4REC.XDMCD = FY0GW01.XDMCD; /* Diminsion*/
  if (FY0GW01.XGPCD == "02" /* If footwear*/
   && FY0GW01.XQACD == "02") /* B-grade asked for*/
    FY4REC.XQACD = "01"; /* Move in '01'*/
  else
    FY4REC.XQACD = FY0GW01.XQACD; /* Quality code*/
  end
  FY4REC.PC2INSEG = FY0GW01.PC2INSEG; /* Spec diff*/
  FY4REC.XPGCD = FY0GW01.XPGCD; /* Package type*/
  FY4REC.XUMCD = FY0GW01.XUMCD; /* Unit of measure*/
  FY4REC.XSECD = " "; /* Season code*/
  FY4REC.XSNYR = 0; /* Season year*/
  FY4REC.XXXSTAT = "A"; /* Status*/

  if (FY0GW01.FY4FOBED == 0) /* Nothing there*/
    FY0GW01.FY0GWBED = 0; /* Nothing there*/
    FY4REC.FY4FOBED = 0; /* Search key*/
    FYCREC.FYCFNC = "S4"; /* Function code*/
  else
    FY4REC.FY4FOBED = FY0GW01.FY4FOBED; /* Search key*/
    FYCREC.FYCFNC = "S4"; /* Function code*/
  end

  if (FY0GW01.FY4FOXED == 0) /* Nothing there*/
    FY0GW01.FY0GWXED = 0; /* Nothing there*/
    FY4REC.FY4FOXED = 999999999; /* Search key*/
  else
    FY4REC.FY4FOXED = FY0GW01.FY4FOXED; /* Search key*/
  end

  if (FY0GW01.FY0GWBED == 0) /* Nothing there*/
    FYCREC.FYC1DATE = 0; /* Search key*/
  else
    FYCREC.FYC1DATE = FY0GW01.FY0GWBED; /* Search key*/
  end

  if (FY0GW01.FY0GWXED == 0) /* Nothing there*/
    FYCREC.FYC2DATE = 999999999; /* Search key*/
  else
    FYCREC.FYC2DATE = FY0GW01.FY0GWXED; /* Search key*/
  end

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error flag*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error flag*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0G112"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF FOB ROWS";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.XGPCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FY0GM001.XXXPRCNM = "FY0G112"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0G112

// Fetch next row and format
Function FY0G113()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  FYCREC.FYCFNC = "N4";

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Call sucessful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FY0GW01.FY0GWSWC = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
  end


  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0G113"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED FOB ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table view key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0GM001.XXXPRCNM = "FY0G113"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0G113

// Add page to temporary storage
Function FY0G114()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FY0GW02.FY0GWLEN = 804; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0G"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  TA5REC.TA5TSQIX = 0; /* Record index*/
  TA5REC.TA5RTNCD = 0; /* Return code*/

  try
    call "TA0050" (FY0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/
    FY0GW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    set FY0GW02 empty; /* Clears temporary storage record*/
  else

    TAEREC.TAEDESC1 = sysVar.errorCode; /* Csp return code*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0G114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0GM001"; /* Map name*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FY0GM001.XXXPRCNM = "FY0G114"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/

  end

end // end FY0G114

// Close selected set cursor
Function FY0G115()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  FYCREC.FYCFNC = "C4";

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (sysVar.errorCode == "00000000" /* Csp return code*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Everything OK*/

        /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Map name*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0G115"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF FOB TABLE ROWS";
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
    TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FY0GM001.XXXPRCNM = "FY0G115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/

  end

end // end FY0G115

// Obtain size range
Function FY0G116()

   /* -----------------------------------------------------------*/
     /* THIS PROCESS WILL ACCESS THE PG3REC, WHICH IS THE SIZE*/
     /* RANGE RECORD.*/
   /* -----------------------------------------------------------*/

  set PG3REC empty; /* Clear record*/

  PG3REC.XGPCD = FY0GW01.XGPCD; /* GPC code*/
  PG3REC.SY1STNBR = FY0GW01.SY1STNBR; /* Style number*/
  PG3REC.SY2CLRID = FY0GW01.SY2CLRID; /* Color id*/
  PG3REC.XDMCD = FY0GW01.XDMCD; /* Dim. code*/
  PG3REC.XQACD = "**"; /* Quality code*/
  PG3REC.PG3RETCD = "00"; /* Translator return code*/

  PG3REC.PG3FUNCD = "PC"; /* Translator fnc.*/
  PG3REC.PG3DATFM = "N"; /* Compressed/Not compressed sw*/

  TA1REC.TA1PGMNM = "FY0G116"; /* What executes this sgrp*/

  XSPG301(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                   /* SIZE BREAKS.*/

  if (PG3REC.PG3RETCD == "00")

    FY0GW01.FY0GWPRE = 0; /* Set previous price to zero*/
    FY0GW01.FY0GWPIX = 1; /* FOB price index*/

    /* ------------------------------------------------------------*/
       /* THIS LOOP WILL DETERMINE IF THERE ARE ANY PRICES PRESENT*/
       /* IN THE FOB ROW FOR THE SIZES.  IF NONE IT WILL BRANCH TO*/
       /* FY0G117 AND FORMAT A ROW WITHOUT FOB PRICES.*/
    /* ------------------------------------------------------------*/

    while (FY4REC.FY4FOBPR[FY0GWPIX] == 0 /* No prices entered*/
     && FY0GW01.FY0GWPIX != 40)
      FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Add 1 to index*/
    end

    if (FY0GW01.FY0GWPIX == 40)
      FY0G117();
    else

      /* ------------------------------------------------------------*/
         /* THIS LOOP WILL DETERMINE THE SIZE RANGE BASED ON THE FOB*/
         /* PRICE GIVEN.*/

         /* THE FIRST PART OF THE LOOP WILL DETERMINE THE LOW RANGE.*/

         /* THE VALUE OF FY0GPIX AT THIS POINT WILL BE SOME NUMBER*/
         /* GT ZERO AND LE TO 40. THE INDEX WILL BE POINTING TO A*/
         /* VALID PRICE THAT WILL NOT BE ZERO WHEN STARTING THE WHILE*/
         /* LOOP.*/
      /* ------------------------------------------------------------*/

      FY0GW01.FY0GWPRE = 0;

      while (FY0GW01.FY0GWPIX != 40)
        while (FY4REC.FY4FOBPR[FY0GWPIX] == FY0GW01.FY0GWPRE
         && FY0GW01.FY0GWPIX != 40)
          FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Add 1 to index*/

          /* ------------------------------------------------------*/
           /* THE FOLLOWING IF STATEMENT WILL HANDLE ALL $0.00*/
           /* PRICES THAT MIGHT BE EMBEDDED WITHIN A SIZE/PRICE*/
           /* RANGE, SUCH AS, 15.5 WHICH MIGHT NOT BE MADE IN THE*/
           /* STYLE ENTERED, WILL ALSO HANDLE THE ZEROS AT THE END*/
           /* OF THE SIZE RANGES.*/
          /* ------------------------------------------------------*/

          if (FY4REC.FY4FOBPR[FY0GWPIX] == 0 /* Price equal $0.00*/
           && FY0GW01.FY0GWPIX != 40)       
            FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Add 1 to index*/
          end
        end

        FY0GW01.FY0GWPRE = FY4REC.FY4FOBPR[FY0GWPIX];
        FY0GW02.FY4FOBPR[FY0GWIXM] = FY4REC.FY4FOBPR[FY0GWPIX];
        FY0GW02.FY4QTDPR[FY0GWIXM] = FY4REC.FY4QTDPR;
        if (FY4REC.ZZZCHGDT > 0)
          FY0GW02.FY0GMCDT[FY0GWIXM] = FY4REC.ZZZCHGDT;
        else
          FY0GW02.FY0GMCDT[FY0GWIXM] = FY4REC.ZZZSDT;
        end
        FY0GW02.FY0GMFSZ[FY0GWIXM] = PG3REC.SY4IDDSC[FY0GWPIX];

        FY0GW01.FY0GWBED = FY4REC.FY4FOBED;
        FY0GW01.FY0GWXED = FY4REC.FY4FOXED;
        FY0GW01.FY4BRCMO = FY4REC.FY4BRCMO;
        FY0GW01.FY4ERCMO = FY4REC.FY4ERCMO;

        FY0GW02.FY0GWBYY[FY0GWIXM] = FY0GW01.FY0GWBYY;
        FY0GW02.FY0GWDH1[FY0GWIXM] = "-";
        FY0GW02.FY0GWXYY[FY0GWIXM] = FY0GW01.FY0GWXYY;
        FY0GW02.FY0GWDH4[FY0GWIXM] = "-";
        FY0GW02.FY0GWBMM[FY0GWIXM] = FY0GW01.FY0GWBMM;
        FY0GW02.FY0GWDH2[FY0GWIXM] = "-";
        FY0GW02.FY0GWXMM[FY0GWIXM] = FY0GW01.FY0GWXMM;
        FY0GW02.FY0GWDH5[FY0GWIXM] = "-";
        FY0GW02.FY4BRCMO[FY0GWIXM] = FY4REC.FY4BRCMO;
        FY0GW02.FY0GWDH3[FY0GWIXM] = "-";
        FY0GW02.FY4ERCMO[FY0GWIXM] = FY4REC.FY4ERCMO;
        FY0GW02.FY0GWDH6[FY0GWIXM] = "-";
        FY0GW02.FY0GWBFY[FY0GWIXM] = FY4REC.FY1FCTYC;
        FY0GW02.FY0GWXFY[FY0GWIXM] = FY4REC.FY1FCTYC;
        FY0GW02.FY4FOBED[FY0GWIXM] = FY4REC.FY4FOBED;
        FY0GW02.FY4FOXED[FY0GWIXM] = FY4REC.FY4FOXED;
        FY0GW02.FY4SMDCT[FY0GWIXM] = FY4REC.FY4SMDCT;
        FY0GW02.XSECD[FY0GWIXM] = FY4REC.XSECD;
        FY0GW02.XSNYR[FY0GWIXM] = FY4REC.XSNYR;

        /* ----------------------------------------------------------*/
           /* THIS SECOND PART OF THE LOOP WILL DETERMINE THE HIGH*/
           /* VALUE IN THE RANGE.*/
        /* ----------------------------------------------------------*/

        while (FY4REC.FY4FOBPR[FY0GWPIX] == FY0GW01.FY0GWPRE
         && FY0GW01.FY0GWPIX != 40)
          FY0GW02.FY0GMTSZ[FY0GWIXM] = PG3REC.SY4IDDSC[FY0GWPIX];
          FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Add 1 to row index*/
          if (FY4REC.FY4FOBPR[FY0GWPIX] == 0
           && FY0GW01.FY0GWPIX != 40)
            FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Add 1 to row index*/
          end
        end
        FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX - 1; /* Sub 1 from row index*/
        FY0GW01.FY0GWPRE = FY4REC.FY4FOBPR[FY0GWPIX];

        /* ----------------------------------------------------------*/
           /* THIS PART OF THE LOOP WILL DETERMINE IF THERE IS ONE*/
           /* VALUE IN THE RANGE AND IF ONE, IT WILL MOVE THAT VALUE*/
           /* TO THE HIGH VALUE.*/
        /* ----------------------------------------------------------*/

        if (FY0GW02.FY0GMFSZ[FY0GWIXM] > " " /* Something in size*/
         && FY0GW02.FY0GMTSZ[FY0GWIXM] == " ") /* Nothing in size*/
          FY0GW02.FY0GMTSZ[FY0GWIXM] = FY0GW02.FY0GMFSZ[FY0GWIXM];
        end
        if (FY0GW02.FY0GMTSZ[FY0GWIXM] == FY0GW02.FY0GMFSZ[FY0GWIXM])
          FY0GW02.FY0GMFSZ[FY0GWIXM] = " ";
        end
        FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Add 1 to row index*/

        /* -----------------------------------------------------------*/
           /* THIS PART OF THE LOOP WILL DETERMINE IF THERE IS NO*/
           /* VALUES IN THE RANGE AND IF NONE, WILL BLANK OUT THE LINE*/
           /* AND DECREASE THE LINE COUNT BY ONE.*/
        /* -----------------------------------------------------------*/

        if (FY0GW02.FY0GMFSZ[FY0GWIXM] == " " /* Nothing in first size*/
         && FY0GW02.FY0GMTSZ[FY0GWIXM] == " ") /* Nothing in last size*/
          FY0GW02.FY0GWLIN[FY0GWIXM] = " ";
          FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM - 1; /* Sub 1 from line index*/
        end
        if (FY0GW01.FY0GWIXM >= 12)
          FY0G114(); /* Add page to temp storage*/
          FY0GW01.FY0GWIXM = 0; /* Clear line index*/
        end /* If page full but not done with*/
        if (FY0GW01.FY0GWPIX != 40) /* all sizes*/
          FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM + 1; /* Add 1 to line index*/
        end
      end
    end
    if (FY0GW01.FY0GWIXM >= 12)
      FY0G114(); /* Add page to temp storage*/
      FY0GW01.FY0GWIXM = 0; /* Set index to 0*/
    end
    FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM + 1; /* Add 1 to line index*/
  else
                                        /* High value*/
    if (PG3REC.PG3RETCD == "09") /* Resource in use*/
      FY0GW01.FY0GWINF = "N"; /* Turn off soft errror*/
      converseLib.validationFailed(11); /* Data not found*/
      FY0GM001.XXXPRCNM = "FY0G116"; /* Process name*/
      return;
    else
      FY0GW01.FY0GWINF = "N"; /* Turn off soft errror*/
      converseLib.validationFailed(10); /* Unexpected error*/
      FY0GM001.XXXPRCNM = "FY0G116"; /* Process name*/
      exit stack;
    end
  end
                                      /* High value*/
end // end FY0G116

// Form line with no prices
Function FY0G117()

   /* -----------------------------------------------------------*/
     /* THIS PROCESS WILL ADD A LINE TO THE W02REC WHEN ALL FOB*/
     /* PRICES ARE EQUAL TO $0.00.*/
   /* -----------------------------------------------------------*/

  FY0GW02.FY4FOBPR[FY0GWIXM] = FY4REC.FY4FOBPR;
  FY0GW02.FY4QTDPR[FY0GWIXM] = FY4REC.FY4QTDPR;
  if (FY4REC.ZZZCHGCT > 0)
    FY0GW02.FY0GMCDT[FY0GWIXM] = FY4REC.ZZZCHGDT;
  else
    FY0GW02.FY0GMCDT[FY0GWIXM] = FY4REC.ZZZSDT;
  end
  FY0GW02.FY0GMFSZ[FY0GWIXM] = PG3REC.SY4IDDSC[FY0GWPIX];

  FY0GW01.FY0GWBED = FY4REC.FY4FOBED;
  FY0GW01.FY0GWXED = FY4REC.FY4FOXED;
  FY0GW01.FY4BRCMO = FY4REC.FY4BRCMO;
  FY0GW01.FY4ERCMO = FY4REC.FY4ERCMO;

  FY0GW02.FY0GWBYY[FY0GWIXM] = FY0GW01.FY0GWBYY;
  FY0GW02.FY0GWDH1[FY0GWIXM] = "-";
  FY0GW02.FY0GWXYY[FY0GWIXM] = FY0GW01.FY0GWXYY;
  FY0GW02.FY0GWDH4[FY0GWIXM] = "-";
  FY0GW02.FY0GWBMM[FY0GWIXM] = FY0GW01.FY0GWBMM;
  FY0GW02.FY0GWDH2[FY0GWIXM] = "-";
  FY0GW02.FY0GWXMM[FY0GWIXM] = FY0GW01.FY0GWXMM;
  FY0GW02.FY0GWDH5[FY0GWIXM] = "-";
  FY0GW02.FY4BRCMO[FY0GWIXM] = FY4REC.FY4BRCMO;
  FY0GW02.FY0GWDH3[FY0GWIXM] = "-";
  FY0GW02.FY4ERCMO[FY0GWIXM] = FY4REC.FY4ERCMO;
  FY0GW02.FY0GWDH6[FY0GWIXM] = "-";
  FY0GW02.FY0GWBFY[FY0GWIXM] = FY4REC.FY1FCTYC;
  FY0GW02.FY0GWXFY[FY0GWIXM] = FY4REC.FY1FCTYC;
  FY0GW02.FY4FOBED[FY0GWIXM] = FY4REC.FY4FOBED;
  FY0GW02.FY4FOXED[FY0GWIXM] = FY4REC.FY4FOXED;
  FY0GW02.FY4SMDCT[FY0GWIXM] = FY4REC.FY4SMDCT;
  FY0GW02.XSECD[FY0GWIXM] = FY4REC.XSECD;
  FY0GW02.XSNYR[FY0GWIXM] = FY4REC.XSNYR;

end // end FY0G117

// FORMAT AND DISPLAY: List Map
Function FY0G120()

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (FY0GW01.FY0GWINF == "Y") /* No hard error to display*/

    set FY0GM001 initial; /* Clear map output area*/

    if (FY0GW01.FY0GWADD == "Y") /* Add successful*/
      converseLib.validationFailed(99);
      FY0GW01.FY0GWADD = "N";
    end

    if (FY0GW01.FY0GWUPD == "Y") /* Update successful*/
      converseLib.validationFailed(1);
      FY0GW01.FY0GWUPD = "N";
    end

    FY0G121(); /* Format the selected data*/

  else

    set FY0GM001 alarm; /* Indicate sound alarm*/

  end


  FY0GW01.FY0GWLSF = "Y"; /* Sets list screen flag on*/

  FY0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse FY0GM001 ;

  FY0GW01.FY0GWINF = "Y"; /* Turn on flag*/

end // end FY0G120

// Format the selected data
Function FY0G121()

   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  FY0GW01.FY0GWCSF = "N"; /* Cursor set flag*/

  if (COMMAREA.CAADDFL == "Y" /* User can do adds*/
   && FY0GW01.XQACD != "02")  /* B-grades not requested*/
    set FY0GM001.FY0GMADD protect; /* Display add key*/
  end

  if (COMMAREA.CACHGFL == "Y" /* User can change rows*/
   && FY0GW01.XQACD != "02")  /* B-grades not requested*/
    set FY0GM001.FY0GMCHG protect; /* Display change key*/
  end

  FY0GM001.XGPCD = FY0GW01.XGPCD;
  FY0GM001.XGPDESC = FY0GW01.XGPDESC;
  FY0GM001.SY1STNBR = FY0GW01.SY1STNBR; /* Move fields back to map1*/
  FY0GM001.SY1SSTNM = FY0GW01.SY1SSTNM; /* Move fields back to map1*/
  FY0GM001.SY2CLRID = FY0GW01.SY2CLRID;
  FY0GM001.SY2CLRAB = FY0GW01.SY2CLRAB;
  FY0GM001.XDMCD = FY0GW01.XDMCD;
  FY0GM001.XQACD = FY0GW01.XQACD;
  FY0GM001.PC2INSEG = FY0GW01.PC2INSEG;
  FY0GM001.XPGCD = FY0GW01.XPGCD;
  FY0GM001.FY1FCTYC = FY0GW01.FY1FCTYC; /* Move factory codes*/
  FY0GM001.FY0GMFCT = FY0GW01.FY0GMFCT;

  if (FY0GW01.FY0GWFMO > 0)
    FY0GM001.FY0GWFYR = FY0GW01.FY0GWFYR; /* Move dates to map1*/
    FY0GM001.FY0GWFMO = FY0GW01.FY0GWFMO;
    FY0GM001.FY0GWFDM = FY0GW01.FY0GWFDM;
  end

  if (FY0GW01.FY0GWMMM > 0)
    FY0GM001.FY0GMPYR = FY0GW01.FY0GWYYY;
    FY0GM001.FY0GMPMO = FY0GW01.FY0GWMMM;
    FY0GM001.FY0GMPDM = FY0GW01.FY0GMPDM;
  end

  if (FY0GW01.TA5TSQIX == 0) /* No data to display*/
    set FY0GM001.SY1STNBR cursor; /* Set cursor at style number*/

       /* NEXT SENTENCE*/

  else
    if (FY0GW01.FY0GWCSK > " ") /* Something in key*/
      FY0GW01.FY0GMTSP = 1; /* Search page*/
    end

    FY0GW01.FY0GWCSF = "N"; /* Initialize cursor set flag*/
    FY0GW01.FY0GWDFL = "N"; /* Initialize save flag*/
    while (FY0GW01.FY0GWDFL == "N") /* Save save key not found*/
      FY0G122(); /* Read temp. storage page*/
      FY0G123(); /* Find save key*/
    end

    FY0GW01.FY0GWCSK = " "; /* Clear save key*/

    if (FY0GW01.FY0GMTSP != TA5REC.TA5TSQIX) /* Not desired page*/
      FY0G122(); /* Obtain temporary storage page*/
    end

    set FY0GM001.FY0GMPGL skip; /* Display "PAGE" literal*/
    set FY0GM001.FY0GMOFL skip; /* Display "OF" literal*/

    FY0GM001.FY0GMTSP = FY0GW01.FY0GMTSP; /* Current page number*/
    set FY0GM001.FY0GMTSP skip; /* Shows current page number*/
    FY0GM001.TA5TSQIX = FY0GW01.TA5TSQIX; /* Highest page number*/
    set FY0GM001.TA5TSQIX skip; /* Shows highest page number*/


    /* ------------------------------------------------------------*/
      /* THIS FORMAT LOOP WILL HANDLE A CONTROL BREAK WHEN LIKE*/
      /* FIRST P.O. IDS ARE PRESENT.  WHEN A PAGE CHANGE OCCURS*/
      /* THE FIRST LINE WILL BE SHOWN.*/
    /* ------------------------------------------------------------*/

    FY0GW01.FY0GWIXM = 1; /* Initialize line index*/

    while (FY0GW01.FY0GWIXM <= 12) /* Until end of lines*/
      if (FY0GW02.FY0GMFPO[FY0GWIXM] > " ") /* Something in code.*/
        if (FY0GW02.FY0GMFPO[FY0GWIXM] != FY0GW01.FY0GWPPO /* Previous PO*/
         || FY0GW01.FY0GWIXM == 1)                         /* First line on page*/
          FY0GW01.FY0GWPPO = FY0GW02.FY0GMFPO[FY0GWIXM];
          set FY0GM001.FY0GMSEL[FY0GWIXM] normal; /* Display select flag*/
          FY0GM001.FY0GMFPO[FY0GWIXM] = FY0GW02.FY0GMFPO[FY0GWIXM];
          set FY0GM001.FY0GMPDS[FY0GWIXM] skip; /* Display dash1*/
          FY0GM001.FY0GMTPO[FY0GWIXM] = FY0GW02.FY0GMTPO[FY0GWIXM];
          if (FY0GW02.FY0GMFSZ[FY0GWIXM] > " ")
            FY0GM001.FY0GMFSZ[FY0GWIXM] = FY0GW02.FY0GMFSZ[FY0GWIXM];
            set FY0GM001.FY0GMSDS[FY0GWIXM] skip; /* Display dash2*/
          else
            set FY0GM001.FY0GMSDS[FY0GWIXM] initialAttributes; /* Don't display dash2*/
          end
          FY0GM001.FY0GMTSZ[FY0GWIXM] = FY0GW02.FY0GMTSZ[FY0GWIXM];
          if (FY0GM001.XQACD == "02"
           && FY0GM001.XGPCD == "02")
            FY1REC.XGPCD = FY0GM001.XGPCD;
            FY1REC.FY1FCTYC = FY0GW02.FY0GWBFY[FY0GWIXM];
            FY0GS03();
            FY0GW01.FY4FOBPR = FY0GW02.FY4FOBPR[FY0GWIXM];
            FY0GW01.FY4FOBPR = FY0GW01.FY4FOBPR * FY0GW01.FY1BGDPC / 100;
            FY0GM001.FY4FOBPR[FY0GWIXM] = FY0GW01.FY4FOBPR;
            FY0GW01.FY4QTDPR = FY0GW02.FY4QTDPR[FY0GWIXM];
            FY0GW01.FY4QTDPR = FY0GW01.FY4QTDPR * FY0GW01.FY1BGDPC / 100;
            FY0GM001.FY4QTDPR[FY0GWIXM] = FY0GW01.FY4QTDPR;
          else
            FY0GM001.FY4FOBPR[FY0GWIXM] = FY0GW02.FY4FOBPR[FY0GWIXM];
            FY0GM001.FY4QTDPR[FY0GWIXM] = FY0GW02.FY4QTDPR[FY0GWIXM];
          end
          FY0GM001.FY0GMCDT[FY0GWIXM] = FY0GW02.FY0GMCDT[FY0GWIXM];
          set FY0GM001.FY0GMCDT[FY0GWIXM] skip;
                                   /* Display date modified*/

        else

          /* ------------------------------------------------*/
            /* THIS PART OF THE LOOP WILL SHOW THE SIZE RANGE*/
            /* FOR THE FOB PRICE PRESENT.*/
          /* ------------------------------------------------*/

          if (FY0GW02.FY0GMFSZ[FY0GWIXM] > " "
           && FY0GW02.FY0GMTSZ[FY0GWIXM] > " ")
            FY0GM001.FY0GMFSZ[FY0GWIXM] = FY0GW02.FY0GMFSZ[FY0GWIXM];
            set FY0GM001.FY0GMSDS[FY0GWIXM] skip; /* Display dash2*/
            FY0GM001.FY0GMTSZ[FY0GWIXM] = FY0GW02.FY0GMTSZ[FY0GWIXM];
            if (FY0GM001.XQACD == "02"
             && FY0GM001.XGPCD == "02")
              FY1REC.XGPCD = FY0GM001.XGPCD;
              FY1REC.FY1FCTYC = FY0GW02.FY0GWBFY[FY0GWIXM];
              FY0GS03();
              FY0GW01.FY4FOBPR = FY0GW02.FY4FOBPR[FY0GWIXM];
              FY0GW01.FY4FOBPR = FY0GW01.FY4FOBPR * FY0GW01.FY1BGDPC / 100;
              FY0GM001.FY4FOBPR[FY0GWIXM] = FY0GW01.FY4FOBPR;
            else
              FY0GM001.FY4FOBPR[FY0GWIXM] = FY0GW02.FY4FOBPR[FY0GWIXM];
            end

          else


            /* ------------------------------------------------------------*/
              /* THIS PART OF THE LOOP WILL BLANK OUT THE DASH IF ONLY*/
              /* ONE SIZE IS PRESENT.*/

            /* ------------------------------------------------------------*/

            if (FY0GW02.FY0GMFSZ[FY0GWIXM] == " "
             && FY0GW02.FY0GMTSZ[FY0GWIXM] > " ")
              set FY0GM001.FY0GMSDS[FY0GWIXM] initialAttributes; /* Display dash2*/
              FY0GM001.FY0GMTSZ[FY0GWIXM] = FY0GW02.FY0GMTSZ[FY0GWIXM];
              if (FY0GM001.XQACD == "02"
               && FY0GM001.XGPCD == "02")
                FY1REC.XGPCD = FY0GM001.XGPCD;
                FY1REC.FY1FCTYC = FY0GW02.FY0GWBFY[FY0GWIXM];
                FY0GS03();
                FY0GW01.FY4FOBPR = FY0GW02.FY4FOBPR[FY0GWIXM];
                FY0GW01.FY4FOBPR = FY0GW01.FY4FOBPR * FY0GW01.FY1BGDPC / 100;
                FY0GM001.FY4FOBPR[FY0GWIXM] = FY0GW01.FY4FOBPR;
              else
                FY0GM001.FY4FOBPR[FY0GWIXM] = FY0GW02.FY4FOBPR[FY0GWIXM];
              end

            end
          end
        end
      else
        FY0GW01.FY0GWIXM = 13; /* Get out of loop*/
      end
      FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM + 1; /* Increment line index*/
    end
    if (FY0GW01.FY0GWCSF == "N") /* Cursor set flag is off*/
      set FY0GM001.FY0GMSEL[1] cursor; /* Puts cursor on first line*/
    end
  end

end // end FY0G121

// Read temporary storage page
Function FY0G122()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FY0GW02.FY0GWLEN = 804; /* Temporary storage length*/
  TA5REC.TA5APPID = "FY0G"; /* Application identification*/
  TA5REC.TA5TSQIX = FY0GW01.FY0GMTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  TA5REC.TA5RTNCD = 0; /* Return code*/

  try
    call "TA0050" (FY0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Sucessful call*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/

       /* NEXT SENTENCE*/

  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* Csp return code*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "FY0G122"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "FY0GM001"; /* Map name*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FY0GM001.XXXPRCNM = "FY0G122"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

  end

end // end FY0G122

// LOCATE SAVE KEY
Function FY0G123()

   /* ------------------------------------------------------------*/
   /* LOCATE THE PAGE IN WHICH THE KEY IS LESS THAN OR*/
   /* EQUAL TO THE SAVE KEY.*/
   /* SAVE KEY = FY0GWCSK*/
   /* ------------------------------------------------------------*/

  if (FY0GW01.FY0GWCSK == " ") /* No key saved*/
    FY0GW01.FY0GWDFL = "Y"; /* Indicate key found*/
  else

    FY0GW01.FY0GWIXM = 1; /* Initialize index*/

    while (FY0GW01.FY0GWIXM <= 12 /* Until key is found*/
     && FY0GW01.FY0GWDFL == "N")
      if (FY0GW02.FY0GMFPO[FY0GWIXM] == FY0GW01.FY0GWCSK
       && FY0GW02.FY0GWBFY[FY0GWIXM] == FY0GW01.FY0GWCFY)
        set FY0GM001.FY0GMSEL[FY0GWIXM] cursor; /* Initial cursor*/
        FY0GW01.FY0GWDFL = "Y"; /* Indicate key was found*/
        FY0GW01.FY0GWCSF = "Y"; /* Turn on cursor set flag*/
        FY0GW01.FY0GWCSK = " "; /* Reset save key*/
      else
        if (FY0GW02.FY0GMFPO[FY0GWIXM] == " ") /* No more P.O ID*/
          if (FY0GW01.FY0GWIXM == 1) /* No data on page*/
            if (FY0GW01.FY0GMTSP == 1) /* first page*/

                 /* NEXT SENTENCE*/

            else
              FY0GW01.FY0GWIXM = 12; /* Index to last entry*/
              FY0GW01.FY0GMTSP = FY0GW01.FY0GMTSP - 1; /* decrement page*/
            end
          else
            FY0GW01.FY0GWIXM = 1; /* Move 1 to index*/
          end
          set FY0GM001.FY0GMSEL[FY0GWIXM] cursor; /* Initial cursor*/
          FY0GW01.FY0GWDFL = "Y"; /* Indicate page was found*/
          FY0GW01.FY0GWCSF = "Y"; /* Turn on cursor set flag*/
          FY0GW01.FY0GWCSK = " "; /* Reset save key*/
        else
          if (FY0GW02.FY0GMFPO[FY0GWIXM] <= FY0GW01.FY0GWCSK
           && FY0GW02.FY0GWBFY[FY0GWIXM] >= FY0GW01.FY0GWCFY)
            if (FY0GW01.FY0GWIXM == 1) /* Key not on page*/
              if (FY0GW01.FY0GMTSP == 1) /* first page*/

                   /* NEXT SENTENCE*/

              else
                FY0GW01.FY0GWIXM = 12; /* Index to last entry*/
                FY0GW01.FY0GMTSP = FY0GW01.FY0GMTSP - 1; /* decrement page*/
              end
            else
            end
            set FY0GM001.FY0GMSEL[FY0GWIXM] cursor; /* Initial cursor*/
            FY0GW01.FY0GWDFL = "Y"; /* Indicate page was found*/
            FY0GW01.FY0GWCSF = "Y"; /* Turn on cursor set flag*/
            FY0GW01.FY0GWCSK = " "; /* Reset save key*/
          else
            FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM + 1; /* Increment index*/
          end
        end
      end
    end

    if (FY0GW01.FY0GWDFL == "Y") /* Key found*/

         /* NEXT SENTENCE*/

    else
      if (FY0GW01.FY0GMTSP == FY0GW01.TA5TSQIX) /* Last page*/
        FY0GW01.FY0GWIXM = 1; /* Set index to last entry*/
        set FY0GM001.FY0GMSEL[FY0GWIXM] cursor; /* Initial cursor*/
        FY0GW01.FY0GWDFL = "Y"; /* Indicate page was found*/
        FY0GW01.FY0GWCSF = "Y"; /* Turn on cursor set flag*/
        FY0GW01.FY0GWCSK = " "; /* Reset save key*/
      else
        FY0GW01.FY0GMTSP = FY0GW01.FY0GMTSP + 1; /* Increment page*/
      end
    end
  end

end // end FY0G123

// Check attention identifier
Function FY0G130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0GM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FY0G111(); /* Purge any temporary storage*/
      COMMAREA.CATOAP = FY0GM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0GM001.CAITEM; /* To application*/

      XSFY001(); /* Exit to another application*/
      set FY4REC empty; /* Clear record*/
      FY4REC.XGPCD = COMMAREA.XGPCD; /* Reset load key*/
      FY0GW01.FY0GWSWR = "Y"; /* Set request for data to yes*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      FY0GW01.FY0GWINF = "Y"; /* Turn on soft errror*/
      FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
    end

    set FY0GM001.CATOAP cursor, modified, bold; /* Highlight*/
    FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0GM001"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end
    FY0G111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    FY0G111(); /* Purge temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf13) /* PF13 key pressed*/
    if (COMMAREA.CAADDFL == "N") /* Not able to ADD*/
      converseLib.validationFailed(4); /* Invalid key*/
      FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
      FY0GW01.FY0GWINF = "Y"; /* Turn on soft errror*/
      exit stack; /* Exit to redisplay map*/
    else
      if (FY0GM001.XQACD == "02") /* or b-grade list showing*/
        converseLib.validationFailed(130); /* Invalid key*/
        FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
        FY0GW01.FY0GWINF = "Y"; /* Turn on soft errror*/
        exit stack; /* Exit to redisplay map*/
      end
    end
  end

  if (converseVar.eventKey is pf14) /* PF14 key pressed*/
    if (COMMAREA.CACHGFL == "N") /* Not able to CHANGE*/
      converseLib.validationFailed(4); /* Invalid key*/
      FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
      FY0GW01.FY0GWINF = "Y"; /* Turn on soft errror*/
      exit stack; /* Exit to redisplay map*/
    else
      if (FY0GM001.XQACD == "02") /* or b-grade list showing*/
        converseLib.validationFailed(130); /* Invalid key*/
        FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
        FY0GW01.FY0GWINF = "Y"; /* Turn on soft errror*/
        exit stack; /* Exit to redisplay map*/
      end
    end
  end

  if (converseVar.eventKey is enter /* ENTER key pressed*/
   && FY0GM001.XQACD == "02"        /* and b-grade list showing*/
   && "S" in FY0GM001.FY0GMSEL)     /* and selection made*/
    converseLib.validationFailed(130); /* Invalid key*/
    FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
    FY0GW01.FY0GWINF = "Y"; /* Turn on soft errror*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0C"; /* Set to factory application*/
    FY0G111(); /* Purge temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0F"; /* Set to factory/style*/
    FY0G111(); /* Purge temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is enter /* Enter key pressed*/
   && COMMAREA.CAINQFL == "N")      /* User cannot do inquiry*/
    FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
    converseLib.validationFailed(4); /* Invalid attention key*/
    FY0GW01.FY0GWINF = "Y"; /* Turn on soft errror*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* PF14 was not pressed*/

    FY0GM001.XXXPRCNM = "FY0G130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    FY0GW01.FY0GWINF = "Y"; /* Turn on soft errror*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/

  end

end // end FY0G130

// Reset highlighted fields
Function FY0G140()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  FY0GW01.FY0GWIXM = 1; /* Initialize line index*/

  while (FY0GW01.FY0GWIXM <= 12) /* Until end of lines*/
    if (FY0GM001.FY0GMFPO[FY0GWIXM] > " ") /* Line was formatted*/
      set FY0GM001.FY0GMSEL[FY0GWIXM] normal; /* Reset select flag*/
    end
    FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM + 1; /* Increment line index*/
  end

  set FY0GM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0GM001.CAITEM initialAttributes; /* Commarea application data*/


  set FY0GM001.XGPCD normal; /* Reset to normal*/
  set FY0GM001.SY1STNBR normal; /* Reset to normal*/
  set FY0GM001.SY2CLRID normal; /* Reset to normal*/
  set FY0GM001.XDMCD normal; /* Reset to normal*/
  set FY0GM001.XQACD normal; /* Reset to normal*/
  set FY0GM001.PC2INSEG normal; /* Reset to normal*/
  set FY0GM001.XPGCD normal; /* Reset to normal*/

  set FY0GM001.FY0GWFYR normal; /* Reset to normal*/
  set FY0GM001.FY0GWFMO normal; /* Reset to normal*/
  set FY0GM001.FY0GWFDM normal; /* Reset to normal*/
  set FY0GM001.FY1FCTYC normal; /* Reset to normal*/

  set FY0GM001.FY0GMPYR normal; /* Reset to normal*/
  set FY0GM001.FY0GMPMO normal; /* Reset to normal*/
  set FY0GM001.FY0GMPDM normal; /* Reset to normal*/
  set FY0GM001.FY0GMFCT normal; /* Reset to normal*/

   /* ------------------------------------------------------------*/
    /* SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/
    FY0G141();
  end

end // end FY0G140

// Check for ? by User
Function FY0G141()


   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0GM001.XGPCD == "?" /* if ? in gpc code field*/
   || FY0GM001.XDMCD == "?" /* if ? in dimension code field*/
   || FY0GM001.XQACD == "?" /* if ? in quality code field*/
   || FY0GM001.XPGCD == "?") /* if ? in package code field*/

       /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (FY0GM001.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                GPC CODES "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0GM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0GM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      set FY0GM001.XGPCD cursor;
    else
      FY0GM001.XGPCD = " "; /* clear fields*/
      FY0GM001.XGPDESC = " ";
      set FY0GM001.XGPCD cursor;
    end
  end

  if (FY0GM001.XDMCD == "?") /* if ? in Dim. code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   DIM    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXDM01(); /* perform Dim. code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Dim.       **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0GW01.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      set FY0GM001.XDMCD cursor, modified;
    else
      FY0GW01.XDMCD = " "; /* clear fields*/
      set FY0GM001.XDMCD cursor, modified;
    end
  end

  if (FY0GM001.XQACD == "?") /* if ? in Quality code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   QLTY   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXQA01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Quality    **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0GW01.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      set FY0GM001.XQACD cursor, modified;
    else
      FY0GW01.XQACD = " "; /* clear fields*/
      set FY0GM001.XQACD cursor, modified;
    end
  end


  if (FY0GM001.XPGCD == "?") /* if ? in Package code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "               PKG TYP      "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXPG01(); /* perform Package code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Package    **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0GW01.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* move code*/
      set FY0GM001.XPGCD cursor, modified;
    else
      FY0GW01.XPGCD = " "; /* clear fields*/
      set FY0GM001.XPGCD cursor, modified;
    end
  end


  converseLib.clearScreen();
   /* Restore the original map*/

  converseLib.validationFailed(121); /* Enter next request*/

  exit stack; /* Exit to redisplay map*/

end // end FY0G141

// Verify the entered data
Function FY0G150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13)
    return;
  end

  if (FY0GM001.CAITEM > " ") /* Application data was entered*/

    set FY0GM001.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
    FY0GM001.XXXPRCNM = "FY0G150"; /* Process name*/
    return;

  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FY0G151(); /* Verify scroll request*/

  else

    FY0G152(); /* Verify any changed data*/
    FY0G156(); /* Verify p.o. id date-optional*/
    FY0G155(); /* Verify p.o. id date-required*/
    FY0G154(); /* Verify style/color data*/
    FY0G153(); /* Verify selection*/
    FY0G157(); /* Clear screen if any hard errors*/

  end

end // end FY0G150

// Verify scroll request
Function FY0G151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FY0GW01.FY0GMTSP < 2)       /* and no previous pages*/
    FY0GM001.XXXPRCNM = "FY0G151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    FY0GW01.FY0GWINF = "Y"; /* Turn on soft error*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FY0GW01.FY0GMTSP >= FY0GW01.TA5TSQIX) /* and no more pages*/
    FY0GM001.XXXPRCNM = "FY0G151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    FY0GW01.FY0GWINF = "Y"; /* Turn on soft error*/
  end

  FY0GW01.FY0GWIXM = 12; /* Initialize line index*/

  while (FY0GW01.FY0GWIXM > 0) /* Until end of lines*/
    if (FY0GM001.FY0GMSEL[FY0GWIXM] != FY0GW02.FY0GMSEL[FY0GWIXM])
      set FY0GM001.FY0GMSEL[FY0GWIXM] cursor, modified, bold; /* Highlight*/
      FY0GM001.XXXPRCNM = "FY0G151"; /* Process name*/
      converseLib.validationFailed(14); /* A line may not be selected*/
      FY0GW01.FY0GWINF = "Y"; /* Turn on soft error*/
    end
    FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM - 1; /* Decrement line count*/
  end

end // end FY0G151

// Verify any changed data
Function FY0G152()

   /* ------------------------------------------------------------*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PACKAGE TYPE CHECK*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.XPGCD != FY0GW01.XPGCD)
    if (FY0GM001.XPGCD in XPGTBL.XPGCD /* If PACKAGE code in table*/
     && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

      FY0GW01.XPGCD = FY0GM001.XPGCD;
      FY0GW01.FY0GWSWR = "Y"; /* Turn on request for data*/

    else
      set FY0GM001.XPGCD cursor, bold; /* Highlight PACKAGE code*/
      FY0GM001.XXXPRCNM = "FY0G152"; /* Process name*/
      FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
      converseLib.validationFailed(79); /* Must have valid PACKAGE code*/
    end
  end

   /* ------------------------------------------------------------*/
   /* INVENTORY SEGMENT CODE*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.PC2INSEG != FY0GW01.PC2INSEG)
    PC2REC.XGPCD = FY0GM001.XGPCD;
    PC2REC.PC2INSEG = FY0GM001.PC2INSEG;
    FY0GS16();
    if (SQLCA.VAGen_SQLCODE == 0)

      FY0GW01.PC2INSEG = FY0GM001.PC2INSEG;
      FY0GW01.FY0GWSWR = "Y"; /* Turn on request for data*/

    else
      set FY0GM001.PC2INSEG cursor, bold; /* Highlight SPEC code*/
      FY0GM001.XXXPRCNM = "FY0G152"; /* Process name*/
      FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
      converseLib.validationFailed(77); /* Must have valid SPEC code*/
    end
  end

   /* ------------------------------------------------------------*/
   /* DIMENSION CHECK*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.XDMCD != FY0GW01.XDMCD)
    if (FY0GM001.XDMCD in XDMTBL.XDMCD /* If DIMN. code in table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

      FY0GW01.XDMCD = FY0GM001.XDMCD;
      FY0GW01.FY0GWSWR = "Y"; /* Turn on request for data*/

    else
      set FY0GM001.XDMCD cursor, bold; /* Highlight DIMN. code*/
      FY0GM001.XXXPRCNM = "FY0G152"; /* Process name*/
      FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
      converseLib.validationFailed(78); /* Must have valid DIMN. code*/
    end
  end

   /* ------------------------------------------------------------*/
   /* QUALITY CODE CHECK*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.XQACD != FY0GW01.XQACD)
    if (FY0GM001.XQACD in XQATBL.XQACD /* If QUALITY code in table*/
     && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

      FY0GW01.XQACD = FY0GM001.XQACD;
      FY0GW01.FY0GWSWR = "Y"; /* Turn on request for data*/

    else
      set FY0GM001.XQACD cursor, bold; /* Highlight QUALITY code*/
      FY0GM001.XXXPRCNM = "FY0G152"; /* Process name*/
      converseLib.validationFailed(76); /* Must have valid QUALITY code*/
      FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
    end
  end


end // end FY0G152

// Selection Check Loop
Function FY0G153()

   /* ------------------------------------------------------------*/
   /* See if a 'S'election was made.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && FY0GW01.FY0GWSWR == "N")          /* Data has not been requested*/

    /* ------------------------------------------------------------*/
     /* See if any field has changed.*/
    /* ------------------------------------------------------------*/


    FY0GW01.FY0GWIXM = 12; /* Initialize line index*/

    while (FY0GW01.FY0GWIXM > 0) /* Until end of lines*/
      if (FY0GM001.FY0GMSEL[FY0GWIXM] == " " /* If selection blank*/
       || FY0GM001.FY0GMSEL[FY0GWIXM] == "S") /* (S)election made*/
         /* next sentence*/
      else
        set FY0GM001.FY0GMSEL[FY0GWIXM] cursor, bold; /* Highlight*/
        FY0GM001.XXXPRCNM = "FY0G153"; /* Process name*/
        FY0GW01.FY0GWINF = "Y"; /* Turn on soft error*/
        converseLib.validationFailed(13); /* Only a 'S' is allowed*/
      end
      FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM - 1; /* Decrement line number*/
    end

    if (converseVar.validationMsgNum == 0) /* No errors*/
      if (FY0GM001.FY0GMTPO[1] > " ") /* There is something there*/
        if ("S" in FY0GM001.FY0GMSEL) /* There is a S*/

             /* NEXT SENTENCE*/

        else
          FY0GW01.FY0GWINF = "Y"; /* Turn on soft error*/
          FY0GM001.XXXPRCNM = "FY0G153"; /* Process name*/
          converseLib.validationFailed(53); /* You must make a selection*/
        end
      end
    end
  end

end // end FY0G153

// VERIFY STYLE/COLOR
Function FY0G154()

   /* ------------------------------------------------------------*/
   /* SEE IF COLOR/STYLE ENTERED*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.SY1STNBR == " " /* Nothing in field*/
   || FY0GM001.SY2CLRID == " ") /* Color not entered*/
    converseLib.validationFailed(73); /* Data must be entered*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
    FY0GM001.XXXPRCNM = "FY0G154"; /* Process name*/
    set FY0GM001.SY1STNBR cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* Select unique STYLE/COLOR row.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = FY0GM001.XGPCD; /* Search key*/
  PG2REC.SY1STNBR = FY0GM001.SY1STNBR;
  PG2REC.SY2CLRID = FY0GM001.SY2CLRID;
  PG2REC.XDMCD = FY0GM001.XDMCD;

  FY0GW01.SY1STNBR = FY0GM001.SY1STNBR;
  FY0GW01.SY2CLRID = FY0GM001.SY2CLRID;

  XSPG202(); /* Get the row for style/color/dim*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/
    FY0GW01.SY1SSTNM = PG2REC.SY1SSTNM;
    FY0GW01.SY2CLRAB = PG2REC.SY2CLRAB;
    FY0GW01.XUMCD = PG2REC.XUMCD;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Does not exist*/
    converseLib.validationFailed(73); /* Invalid Style/color*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
    FY0GW01.SY1STNBR = " ";
    FY0GW01.SY2CLRID = " ";
    set FY0GM001.SY1STNBR cursor, bold; /* Highlight*/
    set FY0GM001.SY2CLRID bold;
    FY0GM001.XXXPRCNM = "FY0G154"; /* Process name*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* Dead-lock*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FY0GW01.FY0GWINF = "N"; /* Turn on soft error*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
  end


end // end FY0G154

// P.O. ID VALIDATION
Function FY0G155()

   /* ------------------------------------------------------------*/
   /* DATE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.FY0GWFYR == " " /* Nothing there*/
   && FY0GM001.FY0GWFMO == " " /* Nothing there*/
   && FY0GM001.FY0GWFDM == " ") /* Nothing there*/

    FY0GW01.FY0GWFYR = 0;
    FY0GW01.FY0GWBYR = " ";
    FY0GW01.FY0GWFMO = 0;
    FY0GW01.FY0GWBMO = " ";
    FY0GW01.FY0GWFDM = 0;
    FY0GW01.FY0GWBDM = " ";
    FY0GW01.FY0GWBED = 0; /* Beginning date*/
    FY0GW01.FY4FOBED = 0; /* Beginning date*/
    FY0GW01.FY0GWSWR = "Y"; /* Set request for data*/

  else

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (FY0GM001.FY0GWFYR >= "00"
     && FY0GM001.FY0GWFYR <= "99")
      FY0GW01.FY0GWFYR = FY0GM001.FY0GWFYR;
      FY0GW01.FY0GWBYR = FY0GM001.FY0GWFYR;
    else
      converseLib.validationFailed(83); /* Must enter month*/
      FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
      FY0GM001.XXXPRCNM = "FY0G155"; /* Process name*/
      FY0GW01.FY0GWFYR = " ";
      set FY0GM001.FY0GWFYR cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (FY0GM001.FY0GWFMO > "00" /* Something there*/
     && FY0GM001.FY0GWFMO <= "12")

      FY0GW01.FY0GWFMO = FY0GM001.FY0GWFMO;
      FY0GW01.FY0GWBMO = FY0GM001.FY0GWFMO;
      FY0GW01.FY0GWDAY = 01;

    else
      converseLib.validationFailed(82); /* Must enter month*/
      FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
      FY0GM001.XXXPRCNM = "FY0G155"; /* Process name*/
      FY0GW01.FY0GWFMO = " ";
      set FY0GM001.FY0GWFMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (FY0GM001.FY0GWFDM > "00" /* Something there*/
     && FY0GM001.FY0GWFDM <= "12")

      FY0GW01.FY0GWFDM = FY0GM001.FY0GWFDM;
      FY0GW01.FY0GWBDM = FY0GM001.FY0GWFDM;

    else
      converseLib.validationFailed(82); /* Must enter month*/
      FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
      FY0GM001.XXXPRCNM = "FY0G155"; /* Process name*/
      FY0GW01.FY0GWFDM = " ";
      set FY0GM001.FY0GWFDM cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* DATE VALIDATION*/
    /* ------------------------------------------------------------*/


    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
    TA2REC.TA2GRTYP = "E"; /* Move in date type*/
    TA2REC.TA2GRGE = FY0GW01.FY0GWPOB; /* Move in date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      FY0GW01.FY0GWBED = TA2REC.TA2GRGGN; /* Beginning date*/
      FY0GW01.FY4FOBED = TA2REC.TA2GRGGN; /* Beginning date*/
      FY0GW01.FY0GWSWR = "Y"; /* Set request for data*/
    else
      set FY0GM001.FY0GWFYR cursor, bold; /* Highlight error*/
      set FY0GM001.FY0GWFMO bold; /* Highlight error*/
      converseLib.validationFailed(62); /* Invalid date*/
      FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
      FY0GM001.XXXPRCNM = "FY0G155"; /* Process name*/
    end

    /* ------------------------------------------------------------*/
     /* CHECK AND SEE IF ENDING DATE LESS THAN BEG. DATE*/
    /* ------------------------------------------------------------*/

    if (FY0GW01.FY4FOXED > 0 /* Date was entered*/
     && FY0GW01.FY4FOXED < FY0GW01.FY4FOBED) /* End date lt beg. date*/
      converseLib.validationFailed(63);
      FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
      FY0GM001.XXXPRCNM = "FY0G156";
      set FY0GM001.FY0GMPYR cursor, bold; /* Highlight error*/
    end
  end

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.FY1FCTYC == " ") /* Nothing there*/
    FY0GW01.FY1FCTYC = FY0GM001.FY1FCTYC; /* Search key*/
    FY0GW01.FY0GWSWR = "Y"; /* Set request for data*/

       /* NEXT SENTENCE*/

  else
    FY1REC.FY1FCTYC = FY0GM001.FY1FCTYC; /* Search key*/
    FY0GW01.FY1FCTYC = FY0GM001.FY1FCTYC; /* Search key*/
    FY1REC.XGPCD = FY0GM001.XGPCD; /* Search key*/

    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
      FY0GW01.FY1FCTYC = FY1REC.FY1FCTYC; /* Search key*/
      FY0GW01.FY0GWSWR = "Y"; /* Set request for data*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/
        converseLib.validationFailed(33); /* Invalid factory*/
        FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
        FY0GM001.XXXPRCNM = "FY0G155"; /* Process name*/
        FY0GW01.FY0GWSWR = "N"; /* Set request for data*/
        set FY0GM001.FY1FCTYC cursor, bold; /* Highlight error*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
          FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
          converseLib.validationFailed(11); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else
          FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
          converseLib.validationFailed(10); /* Indicate system error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        end
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "FY0G155"; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE FACTORY TABLE ROW";
        TA1REC.TA1MAP = "FY0GM001"; /* Map name*/
        TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
        TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

        FY0GM001.XXXPRCNM = "FY0G155"; /* Process name*/

      end
    end
  end


end // end FY0G155

// P.O. ID date-optional
Function FY0G156()

   /* ------------------------------------------------------------*/
   /* DATE CHECK--optional*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.FY0GMPYR == " " /* Nothing entered*/
   && FY0GM001.FY0GMPMO == " " 
   && FY0GM001.FY0GMPDM == " ")

    FY0GW01.FY0GWYYY = 0; /* Set to get all dates*/
    FY0GW01.FY0GWTYR = "  ";
    FY0GW01.FY0GWMMM = 0;
    FY0GW01.FY0GWTMO = "  ";
    FY0GW01.FY0GMPDM = 0;
    FY0GW01.FY0GWTDM = "  ";
    FY0GW01.FY0GWXED = 0; /* Ending date*/
    FY0GW01.FY4FOXED = 0; /* Ending date*/
    FY0GW01.FY0GWSWR = "Y"; /* Set request for data*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* YEAR CHECK--required*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.FY0GMPYR >= "00"
   && FY0GM001.FY0GMPYR <= "99")

    FY0GW01.FY0GWYYY = FY0GM001.FY0GMPYR;
    FY0GW01.FY0GWTYR = FY0GM001.FY0GMPYR;

  else
    converseLib.validationFailed(83); /* Must enter valid month*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
    FY0GM001.XXXPRCNM = "FY0G156"; /* Process name*/
    FY0GW01.FY0GWYYY = " ";
    set FY0GM001.FY0GMPYR cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* MONTH CHECK--required*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.FY0GMPMO > "00" /* Something there*/
   && FY0GM001.FY0GMPMO <= "12")

    FY0GW01.FY0GWMMM = FY0GM001.FY0GMPMO;
    FY0GW01.FY0GWTMO = FY0GM001.FY0GMPMO;

  else
    converseLib.validationFailed(82); /* Must enter valid month*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
    FY0GM001.XXXPRCNM = "FY0G156"; /* Process name*/
    FY0GW01.FY0GWMMM = " ";
    set FY0GM001.FY0GMPMO cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* DELIVERY MONTH CHECK--required*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.FY0GMPDM > "00" /* Something there*/
   && FY0GM001.FY0GMPDM <= "12")

    FY0GW01.FY0GMPDM = FY0GM001.FY0GMPDM;
    FY0GW01.FY0GWTDM = FY0GM001.FY0GMPDM;

  else
    converseLib.validationFailed(82); /* Must enter valid month*/
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
    FY0GM001.XXXPRCNM = "FY0G156"; /* Process name*/
    FY0GW01.FY0GMPDM = " ";
    set FY0GM001.FY0GMPDM cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* DATE VALIDATION*/
   /* ------------------------------------------------------------*/


  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2GRGE = FY0GW01.FY0GWPOX; /* Move in date*/
  TA2REC.TA2DTOPT = "LASTDAY "; /* Move in option*/
  TA2REC.TA2GRTYP = "E"; /* Move in date type*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date Validation*/

  if (TA2REC.TA2RTNCD == 0000) /* Good return*/
    FY0GW01.FY0GWXED = TA2REC.TA2GRGGN; /* Ending P.O. ID*/
    FY0GW01.FY4FOXED = TA2REC.TA2GRGGN; /* Ending P.O. ID*/
    FY0GW01.FY0GWSWR = "Y"; /* Set request for data*/
  else
    set FY0GM001.FY0GMPYR cursor, bold; /* Highlight error*/
    set FY0GM001.FY0GMPMO bold; /* Highlight error*/
    converseLib.validationFailed(62);
    FY0GW01.FY0GWINF = "N"; /* Turn off soft error*/
    FY0GW01.FY0GWSWR = "N"; /* Set request for data*/
    FY0GM001.XXXPRCNM = "FY0G156"; /* Process name*/
  end



end // end FY0G156

// CLEAR SCREEN IF ANY ERRORS
Function FY0G157()

   /* -----------------------------------------------------------*/
    /* IF EZEMNO DOES NOT EQUAL 0,13, OR 53 CLEAR LINES 1-12.*/
   /* -----------------------------------------------------------*/

  if (FY0GW01.FY0GWINF == "Y") /* No hard errors*/

    FY0GW01.FY0GWSWR = "Y"; /* Turn on request for data*/

  else

    FY0GM001.FY0GMTSP = 0; /* Set page no. to 0*/
    FY0GM001.TA5TSQIX = 0; /* Set highest page no. to 0*/
    set FY0GM001.FY0GMPGL invisible;
    set FY0GM001.FY0GMOFL invisible;
    FY0GW01.FY0GWIXM = 1; /* Set line index to 1*/

    while (FY0GW01.FY0GWIXM <= 12) /* Until end of lines*/
      set FY0GM001.FY0GMSEL[FY0GWIXM] initialAttributes; /* Set selection dark*/
      FY0GM001.FY0GMFPO[FY0GWIXM] = " "; /* Move spaces to line*/
      FY0GM001.FY0GMPDS[FY0GWIXM] = " "; /* Move spaces to line*/
      FY0GM001.FY0GMTPO[FY0GWIXM] = " "; /* Move spaces to line*/
      FY0GM001.FY0GMFSZ[FY0GWIXM] = " "; /* Move spaces to line*/
      FY0GM001.FY0GMSDS[FY0GWIXM] = " "; /* Move spaces to line*/
      FY0GM001.FY0GMTSZ[FY0GWIXM] = " "; /* Move spaces to line*/
      FY0GM001.FY4FOBPR[FY0GWIXM] = 0; /* Move zero to line*/
      FY0GM001.FY4QTDPR[FY0GWIXM] = 0; /* Move zero to line*/
      FY0GM001.FY0GMCDT[FY0GWIXM] = 0; /* Move zero to line*/
      set FY0GM001.FY0GMCDT[FY0GWIXM] initialAttributes; /* set date modified dark*/

      FY0GW01.FY0GWIXM = FY0GW01.FY0GWIXM + 1; /* Add 1 to index*/

    end
  end

end // end FY0G157

// Process valid input request
Function FY0G160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (FY0GM001.XGPCD == FY0GW01.XGPCD /* GPC codes match*/
   && converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7) /* Scroll back requested*/
      FY0GW01.FY0GMTSP = FY0GW01.FY0GMTSP - 1; /* Decrement page number*/
    end

    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      FY0GW01.FY0GMTSP = FY0GW01.FY0GMTSP + 1; /* Increment page number*/
    end

    if (converseVar.eventKey is enter) /* Enter key pressed*/
      FY0GW01.FY0GWMAP = "2"; /* Map 2 to be displayed*/
      FY0GW01.FY0GWFNC = "I"; /* Function code is inquire*/
    else
      if (converseVar.eventKey is pf13) /* PF13 key pressed (ADD)*/
        FY0GW01.FY0GWMAP = "2"; /* Map 2 to be displayed*/
        FY0GW01.FY0GWFNC = "A"; /* Function code is add*/
        FY0GW01.FY0GWDEF = "N"; /* Turn off data entered flag*/
        if (FY0GW01.SY1STNBR > " ") /* Style was entered*/
          FY0GS12(); /* Get size range*/
          FY0GW01.FY0GWLSF = "N"; /* Set up for 2nd time through*/
          FY0GW01.FY0GWPOB = " "; /* Zero out from and to p.o.'s*/
          FY0GW01.FY0GWTYR = " ";
          FY0GW01.FY0GWTMO = " ";
          FY0GW01.FY0GWTDM = " ";
          FY0GW01.FY1FCTYC = " "; /* Clear out factory*/
        else
          FY0GW01.FY1FCTYC = " "; /* Clear out factory*/
          FY0GW01.FY0GWLSF = "Y"; /* Set up for 1st time through*/
        end
      else
        if (converseVar.eventKey is pf14) /* PF14 key pressed (CHANGE)*/
          FY0GW01.FY0GWMAP = "2"; /* Map 2 to be displayed*/
          FY0GW01.FY0GWFNC = "C"; /* Function code is change*/
          FY0GW01.FY0GWDEF = "N"; /* Turn off data entered flag*/
        end
      end
    end
  else
    FY0GW01.XGPCD = FY0GM001.XGPCD;
  end


end // end FY0G160

// MAP NUMBER TWO: ADD
Function FY0G200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to Add a record.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/
   /* ------------------------------------------------------------*/

  FY0G210(); /* Format and display the map*/

  FY0G220(); /* Check attention identifier*/

  FY0G230(); /* Reset fields to normal intensity*/

  FY0G240(); /* Verify the entered data*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    FY0G250(); /* Check for existing row*/
  end

  FY0G260(); /* Process valid input request*/

end // end FY0G200

// FORMAT AND DISPLAY: Add Map
Function FY0G210()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No messages*/

    set FY0GM002 initial; /* Clear map output area*/

    if (FY0GW01.FY0GWLSF == "N") /* Second time around*/
      FY0G211(); /* Format data*/
    end

    if (FY0GW01.FY0GWADD == "Y") /* Add flag on*/
      FY0GW01.FY0GWADD = "N"; /* Add flag on*/
      converseLib.validationFailed(99); /* Add sucessful*/
    else
      converseLib.validationFailed(70); /* Please enter new data*/
    end

    if (FY0GW01.FY0GWLSF == "Y") /* First time around*/
      set FY0GM002.SY1STNBR cursor; /* Place cursor*/
    else
      if (FY0GW01.FY0GWPOB == 0) /* If po id not entered*/
        set FY0GM002.FY0GWFYR cursor; /* Place cursor*/
      end
    end

  else /* ezemno not equal to zero*/

    FY0GW01.FY0GWLSF = "Y"; /* Turn on flag*/
    set FY0GM002 alarm; /* Indicate sound alarm*/
  end

  if (FY0GW01.XGPCD > " ") /* If something in GPC code*/
    if (FY0GW01.XGPCD in XGPTBL.XGPCD)
      FY0GM002.XGPCD = FY0GW01.XGPCD; /* Move GPC code to map2*/
      FY0GW01.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      FY0GM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      set FY0GM002.XGPCD cursor, bold; /* Highlight error*/
      converseLib.validationFailed(101); /* Must have valid gpc code*/
      FY0GM002.XXXPRCNM = "FY0G210"; /* Process name*/
    end
  else
    set FY0GM002.XGPCD cursor, modified; /* Place cursor at gpc field*/
    converseLib.validationFailed(101); /* Must have valid gpc code*/
  end

  FY0GM002.SY1STNBR = FY0GW01.SY1STNBR; /* Move to map2*/
  FY0GM002.SY1SSTNM = FY0GW01.SY1SSTNM;
  FY0GM002.SY2CLRID = FY0GW01.SY2CLRID;
  FY0GM002.SY2CLRAB = FY0GW01.SY2CLRAB;

  FY0GM002.XDMCD = FY0GW01.XDMCD;
  FY0GM002.XQACD = "01";
  if (FY0GM002.XGPCD == "02")
    set FY0GM002.XQACD skip;
  end
  FY0GM002.PC2INSEG = FY0GW01.PC2INSEG;
  FY0GM002.XPGCD = FY0GW01.XPGCD;
  FY0GM002.XUMCD = FY0GW01.XUMCD;

  FY0GM002.FYITPIND = "1"; /* Reason type*/
  FY0GW01.FYITPIND = "1"; /* Reason type*/
  set FY0GM002.FYITPIND skip; /* Protect field*/

  if (FY0GW01.FY0GWPOB > 0) /* and po id has been entered*/
    FY0GM002.FY0GWFYR = FY0GW01.FY0GWFYR; /* Move to map2*/
    FY0GM002.FY0GWFMO = FY0GW01.FY0GWFMO;
    FY0GM002.FY0GWFDM = FY0GW01.FY0GWFDM;
    FY0GM002.FY1FCTYC = FY0GW01.FY1FCTYC;

    FY0GM002.FY0GMTYR = FY0GW01.FY0GWYYY;
    FY0GM002.FY0GMTMO = FY0GW01.FY0GWMMM;
    FY0GM002.FY0GMTDM = FY0GW01.FY0GMPDM;
    FY0GM002.FY0GMFCT = FY0GW01.FY1FCTYC;
  end

  if (FY0GW01.FY0GWLSF == "N") /* Second time around*/
    if (FY0GW01.FY0GWPOB > 0) /* and po id has been entered*/
      FY0GM002.FY1BGDPC = FY0GW01.FY1BGDPC;
    end
  end

  FY0GM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0GM002.FY0GMFNC = "ADD"; /* Move ADD literial to map 2*/

  converse FY0GM002 ;

  FY0GW01.FY0GWLSF = "N"; /* Turn off flag*/

end // end FY0G210

// FORMAT FOB LINE
Function FY0G211()


   /* ------------------------------------------------------------*/
   /* FORMAT THE FOB LINE FROM WORKING STORAGE*/
   /* ------------------------------------------------------------*/

  set FY0GW03 empty; /* Clear W03 record*/
  FY0GW01.FY0GWPIX = 1; /* Initialize line index*/
  FY0GW01.FY0GWMIX = 1; /* Initialize line index*/

  while (FY0GW01.FY0GWPIX <= 40) /* Until end of lines*/
    if (PG3REC.SY4IDDSC[FY0GWPIX] > " ") /* Something in code.*/
      FY0GM002.SY4IDDSC[FY0GWMIX] = PG3REC.SY4IDDSC[FY0GWPIX];
      set FY0GM002.FY4FOBPR[FY0GWMIX] skip;
      FY0GW03.FY0GWMPS[FY0GWPIX] = FY0GW01.FY0GWMIX;
      FY0GW03.FY0GWDPS[FY0GWMIX] = FY0GW01.FY0GWPIX;
      FY0GW01.FY0GWMIX = FY0GW01.FY0GWMIX + 1; /* Increment line index*/
    end
    FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Increment line index*/
  end

   /* ------------------------------------------------------------*/
   /* IF ANY LINE FORMED THE FY0GM002 MAP FIELDS WILL BE*/
   /* TURNED ON.*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.SY4IDDSC[33] > " ")
    set FY0GM002.FY0GMSZL[5] skip; /* Display "SIZE" literal*/
    set FY0GM002.FY0GMFBL[5] skip; /* Display "FOB" literal*/
  end

  if (FY0GM002.SY4IDDSC[25] > " ")
    set FY0GM002.FY0GMSZL[4] skip; /* Display "SIZE" literal*/
    set FY0GM002.FY0GMFBL[4] skip; /* Display "FOB" literal*/
  end

  if (FY0GM002.SY4IDDSC[17] > " ")
    set FY0GM002.FY0GMSZL[3] skip; /* Display "SIZE" literal*/
    set FY0GM002.FY0GMFBL[3] skip; /* Display "FOB" literal*/
  end

  if (FY0GM002.SY4IDDSC[9] > " ")
    set FY0GM002.FY0GMSZL[2] skip; /* Display "SIZE" literal*/
    set FY0GM002.FY0GMFBL[2] skip; /* Display "FOB" literal*/
  end

  if (FY0GM002.SY4IDDSC[1] > " ") /* If valid sizes are displayed*/
    set FY0GM002.FY0GMSZL[1] skip; /* Display "SIZE" literal*/
    set FY0GM002.FY0GMFBL[1] skip; /* Display "FOB" literal*/
    set FY0GM002.FY4FOBPR[1] cursor, normal;
    FY0GW01.FY0GWDEF = "Y"; /* Turn on data entered flag*/
  else
    converseLib.validationFailed(21); /* Nothing to display*/
    FY0GM002.XXXPRCNM = "FY0G211"; /* Process name*/
    set FY0GM002.SY1STNBR cursor, bold; /* Highlight error*/
    return;
  end


   /* -----------------------------------------------------------*/
   /* THIS PROCESS WILL GET THE SIZE BREAKS AND SET THE*/
   /* MAP FIELDS WHERE THEY OCCUR TO NORMAL.*/
   /* -----------------------------------------------------------*/

  set PG6REC empty;

  PG6REC.XGACD = PG2REC.XGACD; /* Gender age code*/
  PG6REC.SY4SZSCL = PG2REC.SY4SZSCL; /* Size scale code*/

  FY0GS13(); /* Select pg6rec row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

    FY0GW01.FY0GWSZI = 1; /* Initialize index*/
    while (PG6REC.PG6SZBRK[FY0GWSZI] > 0 /* Size exists*/
     && FY0GW01.FY0GWSZI <= 10)

      FY0GW01.FY0GWPIX = PG6REC.PG6SZBRK[FY0GWSZI];
      if (FY0GW03.FY0GWMPS[FY0GWPIX] > 0)

        FY0GW01.FY0GWMIX = FY0GW03.FY0GWMPS[FY0GWPIX];
        if (FY0GM002.SY4IDDSC[FY0GWMIX] > " ") /* Size exists*/

          set FY0GM002.FY4FOBPR[FY0GWMIX] normal;
        end
      end

      FY0GW01.FY0GWSZI = FY0GW01.FY0GWSZI + 1; /* Increment index*/
    end

  end

   /* ---------------------------------------------------------*/
   /* IF PF6 PRESSED OPEN ALL PRICE FIELDS*/
   /* ---------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* PF6 was pressed*/

    FY0GW01.FY0GWPIX = 1; /* Initialize line index*/
    while (FY0GW01.FY0GWPIX <= 40) /* Until end of lines*/
      if (FY0GM002.SY4IDDSC[FY0GWPIX] > " ") /* Something there*/
        set FY0GM002.FY4FOBPR[FY0GWPIX] normal; /* Open price field*/
      else
        FY0GW01.FY0GWPIX = 41; /* Exit*/
      end
      FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Increment line count*/
    end
    set FY0GM002.FY4FOBPR[1] cursor; /* Open price field*/
  end

end // end FY0G211

// Check attention identifier
Function FY0G220()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0GM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0GM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0GM002.CAITEM; /* To application*/
      FY0G111(); /* Purge any temporary storage*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0GM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0GM002.XXXPRCNM = "FY0G220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0GM002"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0G111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM002.XXXPRCNM = "FY0G220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FY0GW01.FY0GWMAP = "1"; /* Map flag eq 1*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0GW01.FY0GWFNC = " "; /* Set function code to spaces*/

    if (FY0GW01.FY0GWSTY > " ") /* Style entered*/
      FY0GW01.SY1STNBR = FY0GW01.FY0GWSTY; /* Restore style number*/
      FY0GW01.FY0GWSTY = " ";
    else
      if (FY0GW01.SY1STNBR == " ")
        FY0GW01.SY1STNBR = " "; /* Clear style info*/
        FY0GW01.SY1SSTNM = " ";
        FY0GW01.SY2CLRAB = " ";
      end
    end

    FY0GW01.FY4FOBED = 0; /* Clear P.O. Id date range*/
    FY0GW01.FY0GWBED = 0;
    FY0GW01.FY4FOXED = 0;
    FY0GW01.FY0GWXED = 0;
    FY0GW01.FY0GWOBD = 0;
    FY0GW01.FY0GWOXD = 0;

    FY0GW01.FY0GWFYR = 0;
    FY0GW01.FY0GWFMO = 0;
    FY0GW01.FY0GWFDM = 0;

    FY0GW01.FY0GWYYY = 0;
    FY0GW01.FY0GWMMM = 0;
    FY0GW01.FY0GMPDM = 0;

     /* MOVE ' ' TO FY0GW01.FY1FCTYC  ; Clear factory*/
     /* MOVE ' ' TO FY0GW01.FY0GMFCT;*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0G111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf6) /* PF6 was pressed*/

    converseLib.validationFailed(70); /* Enter new data message*/
    FY0GW01.FY0GWPIX = 1; /* Initialize line index*/
    while (FY0GW01.FY0GWPIX <= 40) /* Until end of lines*/
      if (FY0GM002.SY4IDDSC[FY0GWPIX] > " ") /* Something there*/
        set FY0GM002.FY4FOBPR[FY0GWPIX] normal; /* Open price field*/
        set FY0GM002.FY4FOBPR[1] cursor; /* Open price field*/
      else
        FY0GW01.FY0GWPIX = 41; /* Exit*/
      end
      FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Increment line count*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0C"; /* To application*/
    FY0G111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "FY0F"; /* To application*/
    FY0G111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0GM002.XXXPRCNM = "FY0G220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear map before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end FY0G220

// Reset highlighted fields
Function FY0G230()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0GM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0GM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0GM002.XGPABRV initialAttributes;
  set FY0GM002.XGPCD initialAttributes;

  set FY0GM001.SY1STNBR normal; /* Reset to normal*/
  set FY0GM001.SY2CLRID normal; /* Reset to normal*/
  set FY0GM001.XDMCD normal; /* Reset to normal*/
  set FY0GM001.XQACD normal; /* Reset to normal*/
  set FY0GM001.PC2INSEG normal; /* Reset to normal*/
  set FY0GM001.XPGCD normal; /* Reset to normal*/

  set FY0GM001.FY0GWFYR normal; /* Reset to normal*/
  set FY0GM001.FY0GWFMO normal; /* Reset to normal*/
  set FY0GM001.FY0GWFDM normal; /* Reset to normal*/
  set FY0GM001.FY1FCTYC normal; /* Reset to normal*/

  set FY0GM001.FY0GMPYR normal; /* Reset to normal*/
  set FY0GM001.FY0GMPMO normal; /* Reset to normal*/
  set FY0GM001.FY0GMPDM normal; /* Reset to normal*/
  set FY0GM001.FY0GMFCT normal; /* Reset to normal*/

   /* ------------------------------------------------------------*/
     /* CHECK TO SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/
    FY0G231();
  end

end // end FY0G230

// Check for ? by User
Function FY0G231()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0GM002.XGPCD == "?" /* if ? in gpc code field*/
   || FY0GM002.XDMCD == "?" /* if ? in dimension code field*/
   || FY0GM002.XQACD == "?" /* if ? in quality code field*/
   || FY0GM002.XPGCD == "?") /* if ? in package code field*/
       /* NEXT SENTENCE*/

  else

    return; /* Return to previous precess*/

  end

  if (FY0GM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                 GPC CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0GW01.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0GW01.XGPABRV = XGPTBL.XGPABRV[XX0XWPIX]; /* move name*/
      set FY0GM002.XGPCD cursor;
    else
      FY0GW01.XGPCD = " "; /* clear fields*/
      FY0GW01.XGPABRV = " ";
      set FY0GM002.XGPCD cursor;
    end
  end

  if (FY0GM002.XDMCD == "?") /* if ? in Dim. code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   DIM    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXDM01(); /* perform Dim. code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Dim.       **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0GW01.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      set FY0GM002.XDMCD cursor, modified;
    else
      FY0GW01.XDMCD = " "; /* clear fields*/
      set FY0GM002.XDMCD cursor, modified;
    end
  end

  if (FY0GM002.XQACD == "?") /* if ? in Quality code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   QLTY   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXQA01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Quality    **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0GW01.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      set FY0GM002.XQACD cursor, modified;
    else
      FY0GW01.XQACD = " "; /* clear fields*/
      set FY0GM002.XQACD cursor, modified;
    end
  end


  if (FY0GM002.XPGCD == "?") /* if ? in Package code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "               PKG TYPE     "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXPG01(); /* perform Package code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Package    **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0GW01.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* move code*/
      set FY0GM002.XPGCD cursor, modified;
    else
      FY0GW01.XPGCD = " "; /* clear fields*/
      set FY0GM002.XPGCD cursor, modified;
    end
  end


  converseLib.clearScreen();
   /* restore the original map*/

  converseLib.validationFailed(121); /* Next request*/

  exit stack; /* Exit to redisplay map*/

end // end FY0G231

// Verify the entered data
Function FY0G240()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.CAITEM > " ") /* Application data was entered*/
    set FY0GM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0GM002.XXXPRCNM = "FY0G240"; /* Process name*/
  else

    FY0G241(); /* Style/Color check*/
    FY0G242(); /* Check Date 1*/
    FY0G243(); /* Check Date 2*/
    FY0G244(); /* Check entered data*/

  end

end // end FY0G240

// VERIFY COLOR/STYLE-ADD
Function FY0G241()

   /* ------------------------------------------------------------*/
   /* SEE IF COLOR/STYLE ENTERED*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.SY1STNBR == " ") /* Nothing entered*/
    converseLib.validationFailed(73); /* Style must be entered*/
    FY0GM002.XXXPRCNM = "FY0G241"; /* Process name*/
    set FY0GM002.SY1STNBR cursor, bold; /* Highlight*/
    FY0GM002.SY1SSTNM = " ";
  end

  if (FY0GM002.SY2CLRID == " ") /* Nothing in field*/
    converseLib.validationFailed(73); /* Color must be entered*/
    FY0GM002.XXXPRCNM = "FY0G241"; /* Process name*/
    set FY0GM002.SY2CLRID cursor, bold; /* Highlight*/
    FY0GM002.SY2CLRAB = " ";
  end

   /* ------------------------------------------------------------*/
   /* Fetch the row from the STYLE/COLOR set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = FY0GM002.XGPCD; /* Search key*/
  PG2REC.SY1STNBR = FY0GM002.SY1STNBR;
  PG2REC.SY2CLRID = FY0GM002.SY2CLRID;
  PG2REC.XDMCD = FY0GM002.XDMCD;
  if (FY0GM002.SY1STNBR != FY0GW01.SY1STNBR)
    FY0GW01.FY0GWDEF = "N"; /* Turn off data entered flag*/
  end
  FY0GW01.SY1STNBR = FY0GM002.SY1STNBR;
  FY0GW01.SY2CLRID = FY0GM002.SY2CLRID;

  call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/
    FY0GW01.SY1SSTNM = PG2REC.SY1SSTNM;
    FY0GW01.SY2CLRAB = PG2REC.SY2CLRAB;
    FY0GW01.XGACD = PG2REC.XGACD;
    FY0GW01.XUMCD = PG2REC.XUMCD;

    set PG3REC empty; /* Clear record*/

    PG3REC.XGPCD = FY0GM002.XGPCD; /* GPC code*/
    PG3REC.SY1STNBR = FY0GM002.SY1STNBR; /* Style number*/
    PG3REC.SY2CLRID = FY0GM002.SY2CLRID; /* Color id*/
    PG3REC.XDMCD = FY0GM002.XDMCD; /* Dim. code*/
    PG3REC.XQACD = "**"; /* Quality code*/
    PG3REC.PG3RETCD = "00"; /* Translator return code*/

    PG3REC.PG3FUNCD = "PC"; /* Translator fnc.*/
    PG3REC.PG3DATFM = "N"; /* Compressed/Not compressed sw*/

    TA1REC.TA1PGMNM = "FY0G246"; /* What executes this sgrp*/

    XSPG301(); /* Get pg3rec: Size scale record*/

    if (PG3REC.PG3RETCD == "00") /* Sizes found*/

           /* NEXT SENTENCE*/

    else
      if (PG3REC.PG3RETCD == "09") /* resource in use*/
        converseLib.validationFailed(11); /* Deadlock*/
        FY0GM002.XXXPRCNM = "FY0G241"; /* Process name*/
        return;
      else
        converseLib.validationFailed(10); /* Unexpected error*/
        FY0GM002.XXXPRCNM = "FY0G241"; /* Process name*/
        exit stack;
      end
    end
  else

    if (SQLCA.VAGen_SQLCODE == 100) /* Row does not exist*/
      converseLib.validationFailed(73); /* Invalid Style/color*/
      set FY0GM002.SY1STNBR cursor, bold; /* Highlight*/
      FY0GM002.SY1SSTNM = " ";
      set FY0GM002.SY2CLRID bold;
      FY0GM002.SY2CLRAB = " ";
      FY0GM002.XXXPRCNM = "FY0G241"; /* Process name*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0G241"; /* Process name*/
      TA1REC.TA1LOC = "SELECT UNIQUE STYLE/COLOR ROW";
      TA1REC.TA1MAP = "FY0GM002"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
      TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      FY0GM002.XXXPRCNM = "FY0G241"; /* Process name*/

    end
  end

end // end FY0G241

// P.O. ID VAIDATION-ADD
Function FY0G242()

   /* ------------------------------------------------------------*/
   /* DATE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* YEAR CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.FY0GWFYR >= "00" /* Something there*/
   && FY0GM002.FY0GWFYR <= "99")

    FY0GW01.FY0GWFYR = FY0GM002.FY0GWFYR;

  else
    converseLib.validationFailed(83); /* Invalid year*/
    FY0GM002.XXXPRCNM = "FY0G242"; /* Process name*/
    set FY0GM002.FY0GWFYR cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/


  if (FY0GM002.FY0GWFMO > "00" /* Something there*/
   && FY0GM002.FY0GWFMO <= "12")

    FY0GW01.FY0GWFMO = FY0GM002.FY0GWFMO;
    FY0GW01.FY0GWDAY = 01;

  else
    converseLib.validationFailed(82); /* Invalid month*/
    FY0GM002.XXXPRCNM = "FY0G242"; /* Process name*/
    set FY0GM002.FY0GWFMO cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* DELIVERY MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/


  if (FY0GM002.FY0GWFDM > "00" /* Something there*/
   && FY0GM002.FY0GWFDM <= "12")

    FY0GW01.FY0GWFDM = FY0GM002.FY0GWFDM;

  else
    converseLib.validationFailed(82); /* Invalid month*/
    FY0GM002.XXXPRCNM = "FY0G242"; /* Process name*/
    set FY0GM002.FY0GWFDM cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* DATE VALIDATION*/
   /* ------------------------------------------------------------*/


  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "E"; /* Move in date type*/
  TA2REC.TA2GRGE = FY0GW01.FY0GWPOB; /* Move in date*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

  if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
    FY0GW01.FY0GWBED = TA2REC.TA2GRGGN; /* Beginning date*/
    FY0GW01.FY4FOBED = TA2REC.TA2GRGGN; /* Beginning date*/
  else
    converseLib.validationFailed(62); /* Missing date or invalid*/
    FY0GM002.XXXPRCNM = "FY0G242"; /* Process name*/
    set FY0GM002.FY0GWFYR cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  FY1REC.FY1FCTYC = FY0GM002.FY1FCTYC; /* Search key*/
  FY0GW01.FY1FCTYC = FY1REC.FY1FCTYC; /* Search key*/
  FY1REC.XGPCD = FY0GM002.XGPCD; /* Search key*/

  if (FY0GM002.FY1FCTYC == " ") /* Factory NOT entered*/
    converseLib.validationFailed(33); /* Invalid factory*/
    FY0GM002.XXXPRCNM = "FY0G242"; /* Process name*/
    set FY0GM002.FY1FCTYC cursor, bold; /* Highlight error*/
    return;
  end

  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
    if (FY1REC.XXXSTAT == "A") /* active row*/
      FY0GW01.FY1BGDPC = FY1REC.FY1BGDPC; /* B-grade %*/
    else
      converseLib.validationFailed(67); /* Invactive factory*/
      FY0GM002.XXXPRCNM = "FY0G242"; /* Process name*/
      set FY0GM002.FY1FCTYC cursor, bold; /* Highlight error*/
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/
    converseLib.validationFailed(33); /* Invalid factory*/
    FY0GM002.XXXPRCNM = "FY0G242"; /* Process name*/
    set FY0GM002.FY1FCTYC cursor, bold; /* Highlight error*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0G242"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "FY0GM002"; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0GM002.XXXPRCNM = "FY0G242"; /* Process name*/

end // end FY0G242

// P.O. ID DATE-ADD:OPTIONAL
Function FY0G243()

   /* ------------------------------------------------------------*/
   /* DATE CHECK--optional*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.FY0GMTYR == " " /* Nothing entered*/
   && FY0GM002.FY0GMTMO == " " 
   && FY0GM002.FY0GMTDM == " ")

    /* ------------------------------------------------------------*/
    /* ADD 5 MONTHS TO GET A 6 MONTH RANGE*/
    /* ------------------------------------------------------------*/

    /* ------ Y2K OUT BEGIN ------*/
    /* FY0GW01.FY0GWMMM = FY0GW01.FY0GWFMO + 5;/* Add 5 to req. mo.*/
    /* FY0GW01.FY0GMPDM = FY0GW01.FY0GWFDM + 5;/* Add 5 to req. mo.*/
    /* MOVE FY0GW01.FY0GWFYR TO FY0GW01.FY0GWYYY;/* Move in same year*/

    /* IF FY0GW01.FY0GWMMM GT 12;*/
      /* FY0GW01.FY0GWYYY = FY0GW01.FY0GWFYR + 1;/* Add 1 to req. year*/
      /* FY0GW01.FY0GWMMM = FY0GW01.FY0GWMMM - 12;/* Sub 12 from month*/
    /* END;*/
    /* ------ Y2K OUT END --------*/

    /* ------ Y2K IN BEGIN -------*/
    FY0GW01.FY0GWPMM = FY0GW01.FY0GWFMO + 5; /* Add 5 to req. mo.*/
    FY0GW01.FY0GMPDM = FY0GW01.FY0GWFDM + 5; /* Add 5 to req. mo.*/
    FY0GW01.FY0GWPYY = FY0GW01.FY0GWFYR; /* Move in same year*/

    if (FY0GW01.FY0GWPYY > 60) /* Determine century*/
      FY0GW01.FY0GWPCC = 19;
    else
      FY0GW01.FY0GWPCC = 20;
    end

    if (FY0GW01.FY0GWPMM > 12)
      FY0GW01.FY0GWPCY = FY0GW01.FY0GWPCY + 1; /* Add 1 to century/year*/
      FY0GW01.FY0GWPMM = FY0GW01.FY0GWPMM - 12; /* Sub 12 from month*/
    end

    FY0GW01.FY0GWYYY = FY0GW01.FY0GWPYY; /* move back to work area*/
    FY0GW01.FY0GWMMM = FY0GW01.FY0GWPMM; /* move back to work area*/

    /* ------ Y2K IN END ---------*/

    /* ------------------------------------------------------------*/
     /* GET THE LAST DAY OF THE MONTH*/
    /* ------------------------------------------------------------*/

    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2GRGE = FY0GW01.FY0GWPOX; /* Move in date*/
    TA2REC.TA2DTOPT = "LASTDAY "; /* Move in option*/
    TA2REC.TA2GRTYP = "E"; /* Move in date type*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

    if (TA2REC.TA2RTNCD == 0000)
      FY0GW01.FY0GWXED = TA2REC.TA2GRGGN; /* Ending date*/
      FY0GW01.FY4FOXED = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(62); /* Missing or invalid date*/
      FY0GM002.XXXPRCNM = "FY0G243"; /* Process name*/
      set FY0GM002.FY0GMTYR cursor, bold; /* Highlight*/
    end

    if (FY0GW01.FY0GMPDM > 12)
      FY0GW01.FY0GMPDM = FY0GW01.FY0GMPDM - 12; /* Sub 12 from month*/
    end

    FY0GM002.FY0GMFCT = FY0GM002.FY1FCTYC; /* Move in factory*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* YEAR CHECK--optional*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.FY0GMTYR >= "00" /* Something there*/
   && FY0GM002.FY0GMTYR <= "99")

    FY0GW01.FY0GWYYY = FY0GM002.FY0GMTYR;

  else
    converseLib.validationFailed(83); /* Must enter valid year*/
    FY0GM002.XXXPRCNM = "FY0G243"; /* Process name*/
    set FY0GM002.FY0GMTYR cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* MONTH CHECK--optional*/
   /* ------------------------------------------------------------*/


  if (FY0GM002.FY0GMTMO > "00" /* Something there*/
   && FY0GM002.FY0GMTMO <= "12")

    FY0GW01.FY0GWMMM = FY0GM002.FY0GMTMO;

  else
    converseLib.validationFailed(82); /* Must enter valid month*/
    FY0GM002.XXXPRCNM = "FY0G243"; /* Process name*/
    set FY0GM002.FY0GMTMO cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* DELIVERY MONTH CHECK--optional*/
   /* ------------------------------------------------------------*/


  if (FY0GM002.FY0GMTDM > "00" /* Something there*/
   && FY0GM002.FY0GMTDM <= "12")

    FY0GW01.FY0GMPDM = FY0GM002.FY0GMTDM;

  else
    converseLib.validationFailed(82); /* Must enter valid month*/
    FY0GM002.XXXPRCNM = "FY0G243"; /* Process name*/
    set FY0GM002.FY0GMTDM cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* GET THE LAST DAY OF THE MONTH*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2GRGE = FY0GW01.FY0GWPOX; /* Move in date*/
  TA2REC.TA2DTOPT = "LASTDAY "; /* Move in option*/
  TA2REC.TA2GRTYP = "E"; /* Move in date type*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

  if (TA2REC.TA2RTNCD == 0000)
    FY0GW01.FY0GWXED = TA2REC.TA2GRGGN; /* Ending date*/
    FY0GW01.FY4FOXED = TA2REC.TA2GRGGN;
  else
    converseLib.validationFailed(62); /* Missing or invalid date*/
    FY0GM002.XXXPRCNM = "FY0G243"; /* Process name*/
    set FY0GM002.FY0GMTYR cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* CHECK AND SEE IF SECOND DATE IS LESS THAN FIRST DATE.*/
   /* ------------------------------------------------------------*/

  if (FY0GW01.FY4FOXED < FY0GW01.FY4FOBED) /* Second date less than*/
    converseLib.validationFailed(63);
    FY0GM002.XXXPRCNM = "FY0G243"; /* Process name*/
    set FY0GM002.FY0GMTYR cursor, bold; /* Highlight error*/
  end

   /* ------------------------------------------------------------*/
   /* SEE IF FIRST DATE IS LESS ONE YEAR FROM CURRENT DATE*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  XX0XW01.XX0XWDAT = XX0XW01.XX0XWDAT - 10000; /* Subtract 1 year*/

  if (FY0GW01.FY4FOBED < XX0XW01.XX0XWDAT)
    converseLib.validationFailed(134);
    FY0GM002.XXXPRCNM = "FY0G243"; /* Process name*/
    set FY0GM002.FY0GWFYR cursor, bold; /* Highlight error*/
    set FY0GM002.FY0GWFMO bold; /* Highlight error*/
    set FY0GM002.FY0GWFDM bold; /* Highlight error*/
  end


end // end FY0G243

// VALIDATE INPUT DATA
Function FY0G244()

   /* -----------------------------------------------------------*/
   /* Validate the entered data.*/
   /* Verify the data that was changed.*/
   /* If there are errors highlight and exit to redisplay map*/
   /* -----------------------------------------------------------*/

   /* ============================================================*/
   /* Validation of table items entered will take place in this*/
   /* process: SEASON, QUALITY, SPEC. DIFF., PACKAGE TYPE,*/
   /* UNIT of MEASURE, DIMENSION and GPC CODES.*/

   /* ======================START CHECK===========================*/

   /* ------------------------------------------------------------*/
   /* QUALITY CODE CHECK*/
   /* ------------------------------------------------------------*/

  FY0GW01.XQACD = FY0GM002.XQACD;
  FY0GM002.XQACD = FY0GW01.XQACD;
  if (FY0GM002.XQACD > " ") /* If something in QUALITY code*/
    if (FY0GM002.XQACD in XQATBL.XQACD /* If QUALITY code in table*/
     && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

          /* NEXT SENTENCE*/

    else
      set FY0GM002.XQACD cursor, bold; /* Highlight QUALITY code*/
      FY0GM002.XXXPRCNM = "FY0G244"; /* Process name*/
      converseLib.validationFailed(76); /* Must have valid QUALITY code*/
    end
  else
    set FY0GM002.XQACD cursor, bold; /* Highlight QUALITY code*/
    FY0GM002.XXXPRCNM = "FY0G244"; /* Process name*/
    converseLib.validationFailed(76); /* Must have valid QUALITY code*/
  end

   /* ------------------------------------------------------------*/
   /* PACKAGE TYPE CHECK*/
   /* ------------------------------------------------------------*/

  FY0GW01.XPGCD = FY0GM002.XPGCD;
  FY0GM002.XPGCD = FY0GW01.XPGCD;
  if (FY0GM002.XPGCD > " ") /* If something in PACKAGE code*/
    if (FY0GM002.XPGCD in XPGTBL.XPGCD /* If PACKAGE code in table*/
     && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

          /* NEXT SENTENCE*/

    else
      set FY0GM002.XPGCD cursor, bold; /* Highlight PACKAGE code*/
      FY0GM002.XXXPRCNM = "FY0G244"; /* Process name*/
      converseLib.validationFailed(79); /* Must have valid PACKAGE code*/
    end
  else
    set FY0GM002.XPGCD cursor, bold; /* Highlight PACKAGE code*/
    FY0GM002.XXXPRCNM = "FY0G244"; /* Process name*/
    converseLib.validationFailed(79); /* Must have valid PACKAGE code*/
  end

   /* ------------------------------------------------------------*/
   /* SPEC DIFF CHECK*/
   /* ------------------------------------------------------------*/

  FY0GW01.PC2INSEG = FY0GM002.PC2INSEG;
  FY0GM002.PC2INSEG = FY0GW01.PC2INSEG;
  if (FY0GM002.PC2INSEG > " ") /* If something in SPEC code*/
    PC2REC.XGPCD = FY0GM002.XGPCD;
    PC2REC.PC2INSEG = FY0GM002.PC2INSEG;
    FY0GS16();
    if (SQLCA.VAGen_SQLCODE == 0
     && PC2REC.XXXSTAT == "A")
          /* NEXT SENTENCE*/
    else
      set FY0GM002.PC2INSEG cursor, bold; /* Highlight SPEC code*/
      FY0GM002.XXXPRCNM = "FY0G244"; /* Process name*/
      converseLib.validationFailed(77); /* Must have valid SPEC code*/
    end
  else
    set FY0GM002.PC2INSEG cursor, bold; /* Highlight SPEC code*/
    FY0GM002.XXXPRCNM = "FY0G244"; /* Process name*/
    converseLib.validationFailed(77); /* Must have valid SPEC code*/
  end

   /* ------------------------------------------------------------*/
   /* DIMENSION CHECK*/
   /* ------------------------------------------------------------*/

  FY0GW01.XDMCD = FY0GM002.XDMCD;
  FY0GM002.XDMCD = FY0GW01.XDMCD;
  if (FY0GM002.XDMCD > " ") /* If something in DIMN. code*/
    if (FY0GM002.XDMCD in XDMTBL.XDMCD /* If DIMN. code in table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If code active*/

          /* NEXT SENTENCE*/

    else
      set FY0GM002.XDMCD cursor, bold; /* Highlight DIMN. code*/
      FY0GM002.XXXPRCNM = "FY0G244"; /* Process name*/
      converseLib.validationFailed(78); /* Must have valid DIMN. code*/
    end
  else
    set FY0GM002.XDMCD cursor, bold; /* Highlight DIMN. code*/
    FY0GM002.XXXPRCNM = "FY0G244"; /* Process name*/
    converseLib.validationFailed(78); /* Must have valid DIMN. code*/
  end

   /* ============================================================*/
   /* =======================END CHECK============================*/

end // end FY0G244

// SELECT TABLE ROW FOR ADD
Function FY0G250()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row found, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set FY4REC empty; /* Clear record*/

  FY4REC.XGPCD = FY0GW01.XGPCD; /* Search key*/
  FY4REC.SY1STNBR = FY0GW01.SY1STNBR; /* Search key*/
  FY4REC.FY1FCTYC = FY0GW01.FY1FCTYC; /* Get factory*/
  FY4REC.SY2CLRID = FY0GW01.SY2CLRID; /* Search key*/
  FY4REC.XDMCD = FY0GW01.XDMCD; /* Search key*/
  FY4REC.XQACD = FY0GW01.XQACD; /* Search key*/
  FY4REC.PC2INSEG = FY0GW01.PC2INSEG; /* Search key*/
  FY4REC.XPGCD = FY0GW01.XPGCD; /* Search key*/
  FY4REC.XUMCD = FY0GW01.XUMCD; /* Search key*/
  FY4REC.XSECD = " "; /* Search key*/
  FY4REC.XSNYR = 0; /* Search key*/
  FY4REC.FY4SMDCT = 1; /* Same day counter*/

  FY4REC.FY4FOBED = FY0GW01.FY4FOBED; /* Beginning date*/
  FY4REC.FY4FOXED = FY0GW01.FY4FOXED; /* Ending date*/

  try
    call "IO3000" ("S ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select FOB set*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      converseLib.validationFailed(129); /* Row already exists*/
      FY0GM002.XXXPRCNM = "FY0G250"; /* Process name*/
      FY0GW01.FY0GWSWR = "Y"; /* Set request for data switch*/
      set FY0GM002.SY1STNBR cursor, bold; /* Highlight field*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0G250"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0GM001.XXXPRCNM = "FY0G250"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end FY0G250

// Process valid input request
Function FY0G260()

   /* ------------------------------------------------------------*/
   /* PROCESS ANY ADDED DATA.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No Messages*/
   && FY0GW01.FY0GWDEF == "Y")          /* Data entered flag on*/

     /* next sentence*/
  else

    return;
  end

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  FY0GS05(); /* Open fy4rec cursor*/

  FY0GW01.FY0GWSWC = "N"; /* Set eof to no*/
  FY0GS06(); /* Fetch fy4rec row*/

  while (FY0GW01.FY0GWSWC == "N") /* Not eof*/
    FY0G263(); /* Check for existing rows and adjust dates*/
    FY0GS06(); /* Fetch fy4rec row*/
  end

  FY0GS07(); /* Close fy4rec set*/

  FY0G261(); /* Form new row*/

  FY0G262(); /* Add new row*/

  FY0GS04(); /* Add dfcty.vfytag01 row*/

  set FYIREC empty; /* Initialize record*/
  FYIREC.FY4FOBED = FY4REC.FY4FOBED;
  FYIREC.FY4FOXED = FY4REC.FY4FOXED;
  FYIREC.FY4BRCMO = FY4REC.FY4BRCMO;
  FYIREC.FY4ERCMO = FY4REC.FY4ERCMO;
  FYIREC.FY4QTDPR = FY4REC.FY4QTDPR; /* New quoted price*/
  FYIREC.FYISZPRC = FY4REC.FY4SZPRC; /* New size/price*/
  FY0GS14(); /* Add dfcty.vhyfob01 row*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit this add*/
  FY0GW01.FY0GWCYR = FY0GM002.FY0GWFYR; /* Save key*/
  FY0GW01.FY0GWDH1 = "-";
  FY0GW01.FY0GWCMO = FY0GM002.FY0GWFMO; /* Save key*/
  FY0GW01.FY0GWDH2 = "-";
  FY0GW01.FY0GWCDM = FY0GM002.FY0GWFDM; /* Save key*/
  FY0GW01.FY0GWDH3 = "-";

  FY0GWSTY = FY0GW01.SY1STNBR; /* Save style number*/
  FY0GW01.SY1STNBR = " ";
  FY0GW01.SY1SSTNM = " ";
  FY0GW01.SY2CLRAB = " ";

  FY0GW01.FY0GWCFY = FY0GM002.FY1FCTYC; /* Save key*/
  set FYCREC empty; /* Clear db2 area*/
  FY0GW01.FY0GWSWR = "Y"; /* Set request for data switch*/
  set FY0GM002 initial; /* Clear screen*/
  FY0GW01.FY0GWADD = "Y"; /* ADD SUCCESSFUL*/
  FY0GW01.FY0GWLSF = "Y"; /* Turn on list map flag*/
  FY0GW01.FY0GWDEF = "N"; /* Turn off data entered flag*/

end // end FY0G260

// MOVE FOB PRICES TO FY4REC
Function FY0G261()

   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL FILL THE FY4REC AND THE VALID BUCKETS*/
   /* WITHIN THE RECORD.*/
   /* ----------------------------------------------------------*/

  FY0GW01.FY0GWPRE = 0; /* Clear price check field*/
  FY0GW01.FY0GWPIX = 1; /* Saved FY4REC index*/
  FY0GW01.FY0GWMIX = 1; /* Map placement index*/
  FY0GW01.FY0GWRIX = 0; /* FY4REC placement index*/

   /* ------------------------------------------------------------*/
   /* THIS LOOP WILL DETERMINE THE FOB PRICE FOR A GIVEN RANGE*/
   /* IF THE RANGE IS VALID.*/
   /* ------------------------------------------------------------*/

  while (FY0GW03.FY0GWDPS[FY0GWPIX] != 0)
    while (FY0GM002.FY4FOBPR[FY0GWMIX] == FY0GW01.FY0GWPRE /* Prices equal*/
     && FY0GW03.FY0GWDPS[FY0GWPIX] != 0)
      FY0GW01.FY0GWRIX = FY0GW03.FY0GWDPS[FY0GWPIX];
      FY4REC.FY4FOBPR[FY0GWRIX] = FY0GW01.FY0GWPRE;
      FY0GW01.FY0GWPRE = FY0GM002.FY4FOBPR[FY0GWMIX]; /* Prices equal*/
      FY0GW01.FY0GWMIX = FY0GW01.FY0GWMIX + 1;
      FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1;
      if (FY0GM002.FY4FOBPR[FY0GWMIX] == 0) /* Nothing in field*/
        FY0GM002.FY4FOBPR[FY0GWMIX] = FY0GW01.FY0GWPRE;
      else
        FY4REC.FY4FOBPR[FY0GWRIX] = FY0GW01.FY0GWPRE;
      end
    end
    FY0GW01.FY0GWPRE = FY0GM002.FY4FOBPR[FY0GWMIX];
  end


end // end FY0G261

// Add dfcty.vfyfob01
Function FY0G262()

   /* ------------------------------------------------------------*/
   /* This module adds a trade restriction table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  FY4REC.XGPCD = FY0GW01.XGPCD; /* Move in fields*/
  FY4REC.SY1STNBR = FY0GW01.SY1STNBR;
  FY4REC.FY1FCTYC = FY0GW01.FY1FCTYC;
  FY4REC.SY2CLRID = FY0GW01.SY2CLRID;
  FY4REC.XDMCD = FY0GW01.XDMCD;
  FY4REC.XQACD = FY0GW01.XQACD;
  FY4REC.PC2INSEG = FY0GW01.PC2INSEG;
  FY4REC.XPGCD = FY0GW01.XPGCD;
  FY4REC.XUMCD = FY0GW01.XUMCD;
  FY4REC.XSECD = " ";
  FY4REC.XSNYR = 0;
  FY4REC.XXXSTAT = "A";
  FY4REC.FY4FOBED = FY0GW01.FY0GWBED;
  FY4REC.FY4FOXED = FY0GW01.FY0GWXED;
  FY4REC.FY4BRCMO = FY0GW01.FY0GWFDM;
  FY4REC.FY4ERCMO = FY0GW01.FY0GMPDM;
  FY4REC.FY4QTDPR = FY0GM002.FY4QTDPR;
  FY4REC.FY4TGTPR = FY0GM002.FY4TGTPR;

  XX0XS01();

  FY4REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FY4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FY4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FY4REC.ZZZCHGCT = 0; /* Change count*/
  FY4REC.FY4SMDCT = 1; /* Same day counter*/

  try
    call "IO3000" ("A ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Valid return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* valid return code*/

      return; /* Return to previous process*/

    end
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0G262"; /* Process name*/
  TA1REC.TA1LOC = "ADD A UNIQUE FOB TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0GM002.XXXPRCNM = "FY0G262"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  exit stack; /* Exit to redisplay map*/

end // end FY0G262

// Check dates and update rows
Function FY0G263()

   /* ------------------------------------------------------------*/
   /* CHECK THE P.O. ID DATES TO SEE IF NEW DATE OVERLAPS AND*/
   /* UPDATE OR DELETE THE EXISTING ROWS.*/
   /* ------------------------------------------------------------*/

  if (FY4REC.FY4FOBED >= FY0GW01.FY4FOBED /* From date GE From date*/
   && FY4REC.FY4FOXED <= FY0GW01.FY4FOXED) /* To date LE To date*/

    FY0GS17(); /* Check for existin prices*/
    FY0GS08(); /* Delete fy4rec row*/

    set FYIREC empty; /* Clear history record*/

    FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
    FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
    FYIREC.FY4FOBED = FY4REC.FY4FOBED; /* Old row beginning date*/
    FYIREC.FY4FOXED = FY4REC.FY4FOXED; /* Old row ending date*/
    FYIREC.FY4BRCMO = FY4REC.FY4BRCMO; /* Old row beg rcv month*/
    FYIREC.FY4ERCMO = FY4REC.FY4ERCMO; /* Old row end rcv month*/

    FY0GS15(); /* Fill new price buckets*/
    FYIREC.FY4QTDPR = FY0GM002.FY4QTDPR; /* New Quoted price*/
    FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/

    FY0GS14(); /* write history*/

  else
    if (FY4REC.FY4FOBED < FY0GW01.FY4FOBED  /* From date LT From date*/
     && FY4REC.FY4FOXED >= FY0GW01.FY4FOBED /* To date GE From date*/
     && FY4REC.FY4FOXED <= FY0GW01.FY4FOXED) /* To date LE To date*/

      FY0GS17(); /* Check for existin prices*/
      FY0GS08(); /* Delete fy4rec row first*/

      set FYIREC empty; /* Clear history record*/
      FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
      FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
      FYIREC.FY4FOBED = FY0GW01.FY4FOBED; /* New row beginning date*/
      FYIREC.FY4FOXED = FY4REC.FY4FOXED; /* Old row ending date*/
      FYIREC.FY4BRCMO = FY0GW01.FY4BRCMO; /* New row beg rcv month*/
      FYIREC.FY4ERCMO = FY4REC.FY4ERCMO; /* Old row end rcv month*/

      FYIREC.FY4QTDPR = FY0GM002.FY4QTDPR; /* New Quoted price*/

      FY0GS15(); /* Fill new price buckets*/

      FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/

      FY0GS14(); /* write history*/

      FY0GS09(); /* Adjust 'TO' date*/

      if (FY0GM002.FY0GWFDM == "01") /* Adjust delivery month*/
        FY4REC.FY4ERCMO = "12"; /* Move to numeric field*/
      else
        FY0GW01.FY0GWMM = FY0GM002.FY0GWFDM; /* Move to numeric field*/
        FY0GW01.FY0GWMM = FY0GW01.FY0GWMM - 1; /* Subtract one*/
        FY4REC.FY4ERCMO = FY0GW01.FY0GWMM; /* Move to numeric field*/
      end
      FY0GS10(); /* Add fy4rec row*/

    else
      if (FY4REC.FY4FOBED >= FY0GW01.FY4FOBED /* From date GE From date*/
       && FY4REC.FY4FOBED < FY0GW01.FY4FOXED  /* From date LT To date*/
       && FY4REC.FY4FOXED > FY0GW01.FY4FOXED) /* To date GT To date*/

        FY0GS17(); /* Check for existin prices*/
        FY0GS08(); /* Delete fy4rec row first*/

        set FYIREC empty; /* Clear history record*/
        FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
        FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/

        FYIREC.FY4FOBED = FY4REC.FY4FOBED; /* Old row beginning date*/
        FYIREC.FY4BRCMO = FY4REC.FY4BRCMO; /* Old row beg rcv month*/
        FYIREC.FY4FOXED = FY0GW01.FY4FOXED; /* New row ending date*/
        FYIREC.FY4ERCMO = FY0GW01.FY0GMPDM; /* New row end rcv month*/

        FY0GS15(); /* Fill new price buckets*/

        FYIREC.FY4QTDPR = FY0GM002.FY4QTDPR; /* New Quoted price*/
        FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/

        FY0GS14(); /* write history*/

        FY0GS11(); /* Adjust fy4rec from date*/

        if (FY0GM002.FY0GMTDM == "12") /* Adjust delivery month*/
          FY4REC.FY4BRCMO = "01"; /* Move to numeric field*/
        else
          FY0GW01.FY0GWMM = FY0GM002.FY0GMTDM; /* Move to numeric*/
          FY0GW01.FY0GWMM = FY0GW01.FY0GWMM + 1; /* Subtract one*/
          FY4REC.FY4BRCMO = FY0GW01.FY0GWMM; /* Move to fy4rec*/
        end
        FY0GS10(); /* Add fy4rec row*/

      else
        if (FY4REC.FY4FOBED < FY0GW01.FY4FOBED /* From date LT From date*/
         && FY4REC.FY4FOXED > FY0GW01.FY4FOXED) /* To date GT To date*/
          FY0GW01.FY0GWSFD = FY4REC.FY4FOBED; /* Save 'FROM' date*/
          FY0GW01.FY0GWSTD = FY4REC.FY4FOXED; /* Save 'TO' date*/
          FY0GW01.FY0GWSDM = FY4REC.FY4ERCMO;

          FY0GS17(); /* Check for existin prices*/
          FY0GS08(); /* Delete fy4rec row first*/

          set FYIREC empty; /* Clear history record*/
          FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
          FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
          FYIREC.FY4FOBED = FY4REC.FY4FOBED;
                                   /* Old row beginning date*/
          FYIREC.FY4FOXED = FY0GW01.FY4FOBED; /* New row ending date*/
          FYIREC.FY4BRCMO = FY4REC.FY4BRCMO; /* Old row beg rcv month*/
          FYIREC.FY4ERCMO = FY0GW01.FY4BRCMO;
                                   /* New row beg rcv month*/

          FY0GS15(); /* Fill new price buckets*/

          FYIREC.FY4QTDPR = FY0GM002.FY4QTDPR; /* New Quoted price*/
          FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/

          FY0GS14(); /* write history*/

          set FYIREC empty; /* Clear history record*/
          FYIREC.FYIPRQTD = FY4REC.FY4QTDPR; /* Old Quoted price*/
          FYIREC.FYIPSZPR = FY4REC.FY4SZPRC; /* Old FOB price*/
          FYIREC.FY4FOBED = FY0GW01.FY4FOXED; /* New row ending date*/
          FYIREC.FY4FOXED = FY4REC.FY4FOXED; /* Old row ending date*/
          FYIREC.FY4BRCMO = FY0GW01.FY0GMPDM;
                                   /* New row end rcv month*/
          FYIREC.FY4ERCMO = FY4REC.FY4ERCMO; /* Old row end rcv month*/

          FY0GS15(); /* Fill new price buckets*/

          FYIREC.FY4QTDPR = FY0GM002.FY4QTDPR; /* New Quoted price*/
          FYIREC.FYIORSDT = FY4REC.ZZZSDT; /* Old setup date*/

          FY0GS14(); /* write history*/

          FY0GS09(); /* Adjust 'TO' date*/

          if (FY0GM002.FY0GWFDM == "01") /* Adjust delivery month*/
            FY4REC.FY4ERCMO = "12"; /* Move to numeric field*/
          else
            FY0GW01.FY0GWMM = FY0GM002.FY0GWFDM; /* Move to numeric*/
            FY0GW01.FY0GWMM = FY0GW01.FY0GWMM - 1; /* Subtract one*/
            FY4REC.FY4ERCMO = FY0GW01.FY0GWMM; /* Move to numeric*/
          end
          FY0GS10(); /* Add fy4rec row*/

          FY4REC.FY4FOXED = FY0GW01.FY0GWSTD;
                                   /* Restore the 'TO' date*/
          FY0GS11(); /* Adjust fy4rec from date*/

          if (FY0GM002.FY0GMTDM == "12") /* Adjust delivery month*/
            FY4REC.FY4BRCMO = "01"; /* Move to numeric field*/
          else
            FY0GW01.FY0GWMM = FY0GM002.FY0GMTDM; /* Move to numeric*/
            FY0GW01.FY0GWMM = FY0GW01.FY0GWMM + 1; /* Add one*/
            FY4REC.FY4BRCMO = FY0GW01.FY0GWMM;
          end

          FY4REC.FY4ERCMO = FY0GW01.FY0GWSDM; /* Restore end month*/

          FY0GS10(); /* Add fy4rec row*/

        end
      end
    end
  end

end // end FY0G263

// List Screen: Inquire
Function FY0G500()

   /* ------------------------------------------------------------*/
   /* This is the main process used for the INQUIRY MAP.*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  FY0G510(); /* Select a unique row*/

  FY0G520(); /* Format and display the map*/

  FY0G530(); /* Check attention identifier*/

  FY0G540(); /* Reset fields to normal intensity*/

  FY0G550(); /* Verify the entered data*/

  FY0G560(); /* Process valid input request*/

end // end FY0G500

// SELECT UNIQUE ROW
Function FY0G510()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/

   /* Use the FY0GS01 and FY0GS02 statement groups to get row.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/

    FY0GS01(); /* Get the row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row there*/

      FY0GS02(); /* Get the sizes*/

      FY1REC.FY1FCTYC = FY0GW02.FY0GWBFY[FY0GWIXM]; /* Search key*/
      FY0GW01.FY1FCTYC = FY1REC.FY1FCTYC; /* Search key*/
      FY1REC.XGPCD = FY0GW01.XGPCD; /* Search key*/

      FY0GS03(); /* Get B-grade %*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not there*/
        converseLib.validationFailed(69); /* Deleted by another*/
      end
    end
  end

end // end FY0G510

// FORMAT AND DISPLAY:Inquire Map
Function FY0G520()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    set FY0GM002 initial; /* Clear map output area*/

    FY0G521(); /* Format data for map*/

  else

    FY0GM002.SY1STNBR = FY0GW01.SY1STNBR; /* Move to map2*/
    FY0GM002.SY1SSTNM = FY0GW01.SY1SSTNM; /* Move to map2*/
    FY0GM002.SY2CLRID = FY0GW01.SY2CLRID; /* Move to map2*/
    FY0GM002.SY2CLRAB = FY0GW01.SY2CLRAB; /* Move to map2*/
    FY0GM002.XDMCD = FY0GW01.XDMCD; /* Move to map2*/
    FY0GM002.XQACD = FY0GW01.XQACD; /* Move to map2*/
    FY0GM002.PC2INSEG = FY0GW01.PC2INSEG; /* Move to map2*/
    FY0GM002.XPGCD = FY0GW01.XPGCD; /* Move to map2*/
    FY0GM002.XUMCD = FY0GW01.XUMCD; /* Move to map2*/

    set FY0GM002 alarm; /* Indicate sound alarm*/
  end

  set FY0GM002.CATOAP cursor, initialAttributes; /* Commarea TO application*/
  set FY0GM002.CAITEM initialAttributes; /* Commarea application data*/

  set FY0GM002.XGPCD protect; /* Reset to protect*/
  set FY0GM002.SY1STNBR protect; /* Reset to protect*/
  set FY0GM002.SY2CLRID protect; /* Reset to protect*/
  set FY0GM002.XDMCD protect; /* Reset to protect*/
  set FY0GM002.XQACD protect; /* Reset to protect*/
  set FY0GM002.PC2INSEG protect; /* Reset to protect*/
  set FY0GM002.XPGCD protect; /* Reset to protect*/
  set FY0GM002.XUMCD protect; /* Reset to protect*/

  set FY0GM002.FY0GWFYR protect; /* Reset to protect*/
  set FY0GM002.FY0GWFMO protect; /* Reset to protect*/
  set FY0GM002.FY0GWFDM protect; /* Reset to protect*/
  set FY0GM002.FY1FCTYC protect; /* Reset to protect*/

  set FY0GM002.FY0GMTYR protect; /* Reset to protect*/
  set FY0GM002.FY0GMTMO protect; /* Reset to protect*/
  set FY0GM002.FY0GMTDM protect; /* Reset to protect*/
  set FY0GM002.FY0GMFCT protect; /* Reset to protect*/
  set FY0GM002.FY4TGTPR protect; /* Reset to protect*/
  set FY0GM002.FY4QTDPR protect; /* Reset to protect*/
  set FY0GM002.FY1BGDPC protect; /* Reset to protect*/

  if (FY0GW01.XGPCD > " ") /* If something in GPC code*/
    if (FY0GW01.XGPCD in XGPTBL.XGPCD)
      FY0GM002.XGPCD = FY0GW01.XGPCD; /* Move GPC code to map2*/
      FY0GW01.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      FY0GM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      set FY0GM002.XGPCD cursor, bold; /* Highlight error*/
      FY0GM002.XGPABRV = " ";
      converseLib.validationFailed(101); /* Must have valid gpc code*/
      FY0GM002.XXXPRCNM = "FY0G520"; /* Process name*/
    end
  else
    set FY0GM002.XGPCD cursor; /* Place cursor at gpc field*/
    FY0GM002.VAGen_EZEMSG = "ENTER GPC CODE AND NEW FOB ROW INFORMATION";
  end

  set FY0GM002.FY0GMOSL protect, invisible; /* Set to dark*/
  FY0GM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0GM002.FY0GMFNC = "INQUIRY";
                                   /* Move INQUIRY literial to map 2*/

  converse FY0GM002 ;
end // end FY0G520

// OBTAIN DATA TO DISPLAY
Function FY0G521()

   /* ------------------------------------------------------------*/
   /* MOVE SELECTED LINES TO MAP*/
   /* ------------------------------------------------------------*/

  FY0GM002.SY1STNBR = FY4REC.SY1STNBR; /* Move to map2*/
  FY0GM002.SY1SSTNM = FY0GW01.SY1SSTNM; /* Move to map2*/
  FY0GM002.SY2CLRID = FY4REC.SY2CLRID; /* Move to map2*/
  FY0GM002.SY2CLRAB = FY0GW01.SY2CLRAB; /* Move to map2*/
  FY0GM002.XDMCD = FY4REC.XDMCD; /* Move to map2*/
  FY0GM002.XQACD = FY4REC.XQACD; /* Move to map2*/
  FY0GM002.PC2INSEG = FY4REC.PC2INSEG; /* Move to map2*/
  FY0GM002.XPGCD = FY4REC.XPGCD; /* Move to map2*/
  FY0GM002.XUMCD = FY4REC.XUMCD; /* Move to map2*/

  FY0GM002.FY0GWFYR = FY0GW02.FY0GWBYY[FY0GWIXM]; /* Move to map2*/
  FY0GM002.FY0GWFMO = FY0GW02.FY0GWBMM[FY0GWIXM]; /* Move to map2*/
  FY0GM002.FY0GWFDM = FY0GW02.FY4BRCMO[FY0GWIXM]; /* Move to map2*/
  FY0GM002.FY1FCTYC = FY4REC.FY1FCTYC; /* Move to map2*/

  FY0GM002.FY0GMTYR = FY0GW02.FY0GWXYY[FY0GWIXM]; /* Move to map2*/
  FY0GM002.FY0GMTMO = FY0GW02.FY0GWXMM[FY0GWIXM]; /* Move to map2*/
  FY0GM002.FY0GMTDM = FY0GW02.FY4ERCMO[FY0GWIXM]; /* Move to map2*/
  FY0GM002.FY0GMFCT = FY4REC.FY1FCTYC; /* Move to map2*/

  FY0GM002.FY1BGDPC = FY0GW01.FY1BGDPC; /* Move to map2*/
  FY0GM002.FY4QTDPR = FY4REC.FY4QTDPR; /* Move to map2*/
  FY0GM002.FY4TGTPR = FY4REC.FY4TGTPR; /* Move to map2*/

   /* ------------------------------------------------------------*/
   /* FORMAT THE FOB LINE FROM WORKING STORAGE*/
   /* ------------------------------------------------------------*/

  set FY0GW03 empty; /* Clear W03 record*/
  FY0GW01.FY0GWPIX = 1; /* Initialize line index*/
  FY0GW01.FY0GWMIX = 1; /* Initialize line index*/
  FY0GW01.FY0GWPRE = 0; /* Previous price index*/

  while (FY0GW01.FY0GWPIX <= 40) /* Until end of lines*/
    if (PG3REC.SY4IDDSC[FY0GWPIX] > " ") /* Something in code.*/
      FY0GM002.SY4IDDSC[FY0GWMIX] = PG3REC.SY4IDDSC[FY0GWPIX];
      if (FY4REC.FY4FOBPR[FY0GWPIX] == FY0GW01.FY0GWPRE)
        set FY0GM002.FY4FOBPR[FY0GWMIX] skip;
        FY0GW03.FY0GWMPS[FY0GWPIX] = FY0GW01.FY0GWMIX;
        FY0GW03.FY0GWDPS[FY0GWMIX] = FY0GW01.FY0GWPIX;
        FY0GW01.FY0GWDEF = "Y"; /* Turn on data entered flag*/
        FY0GW01.FY0GWMIX = FY0GW01.FY0GWMIX + 1; /* Increment line index*/

      else
        FY0GW01.FY0GWPRE = FY4REC.FY4FOBPR[FY0GWPIX];
        FY0GM002.FY4FOBPR[FY0GWMIX] = FY4REC.FY4FOBPR[FY0GWPIX];
        set FY0GM002.FY4FOBPR[FY0GWMIX] skip;
        FY0GW03.FY0GWMPS[FY0GWPIX] = FY0GW01.FY0GWMIX;
        FY0GW03.FY0GWDPS[FY0GWMIX] = FY0GW01.FY0GWPIX;
        FY0GW01.FY0GWDEF = "Y"; /* Turn on data entered flag*/
        FY0GW01.FY0GWMIX = FY0GW01.FY0GWMIX + 1; /* Increment line index*/
      end
    end
    FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Increment line index*/
  end

  if (FY0GM002.SY4IDDSC[33] > " ")
    set FY0GM002.FY0GMSZL[5] skip; /* Display*/
    set FY0GM002.FY0GMFBL[5] skip; /* Display*/
  end

  if (FY0GM002.SY4IDDSC[25] > " ")
    set FY0GM002.FY0GMSZL[4] skip; /* Display*/
    set FY0GM002.FY0GMFBL[4] skip; /* Display*/
  end

  if (FY0GM002.SY4IDDSC[17] > " ")
    set FY0GM002.FY0GMSZL[3] skip; /* Display*/
    set FY0GM002.FY0GMFBL[3] skip; /* Display*/
  end

  if (FY0GM002.SY4IDDSC[9] > " ")
    set FY0GM002.FY0GMSZL[2] skip; /* Display*/
    set FY0GM002.FY0GMFBL[2] skip; /* Display*/
  end

  if (FY0GM002.SY4IDDSC[1] > " ")
    set FY0GM002.FY0GMSZL[1] skip; /* Display*/
    set FY0GM002.FY0GMFBL[1] skip; /* Display*/
  else
    converseLib.validationFailed(21); /* Nothing to display*/
    FY0GM002.XXXPRCNM = "FY0G521"; /* Process name*/
    set FY0GM002.SY1STNBR cursor, bold; /* Highlight error*/
  end

end // end FY0G521

// CHECK ATTENTION IDENTIFIRES
Function FY0G530()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clears map 2*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0GM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0GM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FY0GM002.CAITEM; /* Application data*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0GM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0GM002.XXXPRCNM = "FY0G530"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0GW01.FY0GWMAP = "1"; /* Move to map 1*/
    FY0GW01.FY0GWSWR = "Y"; /* Request for data is yes*/

    FY0GW01.FY0GWCYR = FY0GM002.FY0GWFYR; /* Save key*/
    FY0GW01.FY0GWDH1 = "-";
    FY0GW01.FY0GWCMO = FY0GM002.FY0GWFMO; /* Save key*/
    FY0GW01.FY0GWDH2 = "-";
    FY0GW01.FY0GWCDM = FY0GM002.FY0GWFDM; /* Save key*/
    FY0GW01.FY0GWDH3 = "-";
    FY0GW01.FY0GWCFY = FY0GM002.FY1FCTYC; /* Save key*/

    FY0GW01.FY0GWINQ = "Y"; /* Inquire successful*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0GW01.FY0GWFNC = " "; /* Set function code to spaces*/

    FY0GW01.SY2CLRID = FY0GM002.SY2CLRID;
    FY0GW01.SY1STNBR = FY0GM002.SY1STNBR;

    FY0GW01.FY0GWFYR = 0;
    FY0GW01.FY0GWFMO = 0;
    FY0GW01.FY0GWFDM = 0;
     /* MOVE ' ' TO FY0GW01.FY1FCTYC;*/

    FY0GW01.FY0GWYYY = 0;
    FY0GW01.FY0GWMMM = 0;
    FY0GW01.FY0GMPDM = 0;
     /* MOVE ' ' TO FY0GW01.FY0GMFCT;*/

    FY0GW01.FY4FOBED = 0;
    FY0GW01.FY4FOXED = 0;
    FY0GW01.FY0GWBED = 0;
    FY0GW01.FY0GWXED = 0;

    set FY0GM002 initial; /* Clear map area*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* Pf1 pressed*/
      COMMAREA.CAITEM = "FY0GM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0G111(); /* Purge temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM002.XXXPRCNM = "FY0G530"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0G111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM002.XXXPRCNM = "FY0G530"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0C"; /* To application*/
    FY0G111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM002.XXXPRCNM = "FY0G530"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    COMMAREA.CATOAP = "FY0F"; /* To application*/
    FY0G111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM002.XXXPRCNM = "FY0G530"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0GM002.XXXPRCNM = "FY0G530"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear map before display*/

    end

    return; /* Exit to redisplay map*/
  end

end // end FY0G530

// RESET HIGHLIGHED FIELDS
Function FY0G540()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FY0GM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0GM002.CAITEM initialAttributes; /* Commarea application data*/

end // end FY0G540

// VERIFY THE ENTERED DATA
Function FY0G550()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.CAITEM > " ") /* Application data was entered*/
    set FY0GM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0GM002.XXXPRCNM = "FY0G550"; /* Process name*/
  end

end // end FY0G550

// PROCESS VALID INPUT REQUEST
Function FY0G560()

   /* ------------------------------------------------------------*/
   /* CREATE SAVE KEY FOR RETURNING TO LIST SCREEN*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No messages*/
   || FY0GM002.SY1STNBR == " ")         /* Nothing there*/

    FY0GW01.FY0GWCYR = FY0GM002.FY0GWFYR; /* Save key*/
    FY0GW01.FY0GWDH1 = "-";
    FY0GW01.FY0GWCMO = FY0GM002.FY0GWFMO; /* Save key*/
    FY0GW01.FY0GWDH2 = "-";
    FY0GW01.FY0GWCDM = FY0GM002.FY0GWFDM; /* Save key*/
    FY0GW01.FY0GWDH3 = "-";
    FY0GW01.FY0GWCFY = FY0GM002.FY1FCTYC; /* Save key*/
      /* MOVE ' ' TO FY0GW01.FY1FCTYC;*/
      /* MOVE ' ' TO FY0GW01.FY0GMFCT;*/
     /* MOVE FY0GM002.SY2CLRID TO FY0GW01.SY2CLRID;*/
     /* MOVE FY0GM002.SY1STNBR TO FY0GW01.SY1STNBR;*/

    FY0GW01.FY0GWSWR = "Y"; /* Turn on request for data*/
    FY0GM001.FY0GMSEL[FY0GWIXM] = " ";

    FY0GW01.FY0GWFYR = 0;
    FY0GW01.FY0GWFMO = 0;
    FY0GW01.FY0GWFDM = 0;

    FY0GW01.FY0GWYYY = 0;
    FY0GW01.FY0GWMMM = 0;
    FY0GW01.FY0GMPDM = 0;

    FY0GW01.FY4FOBED = 0;
    FY0GW01.FY4FOXED = 0;
    FY0GW01.FY0GWBED = 0;
    FY0GW01.FY0GWXED = 0;

    set FY0GM002 initial; /* Clear map area*/
  end

end // end FY0G560

// List Screen: Change
Function FY0G700()

   /* ------------------------------------------------------------*/
   /* This is the main process used to CHANGE a record.  It will*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  FY0G710(); /* Obtain the data to display*/

  FY0G720(); /* Format and display the map*/

  FY0G730(); /* Check attention identifier*/

  FY0G740(); /* Reset fields to normal intensity*/

  FY0G750(); /* Verify the entered data*/

  FY0G760(); /* Process valid input request*/

end // end FY0G700

// Select a unique row: CHANGE
Function FY0G710()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/

   /* Use the FY0GS01 statement group to get the FOB row.*/
   /* Use the FY0GS02 statement group to get the sizes.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    return;
  end

  FY0GS01(); /* Get the row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not there*/
    converseLib.validationFailed(12); /* Deleted by another*/
    FY0GM001.XXXPRCNM = "FY0G710"; /* Process name*/
    FY0GM001.FY0GMSEL = " "; /* Clear line*/
    return;
  end


  FY0GS02(); /* Get the sizes*/

  FY1REC.FY1FCTYC = FY0GW02.FY0GWBFY[FY0GWIXM]; /* Search key*/
  FY0GW01.FY1FCTYC = FY1REC.FY1FCTYC; /* Search key*/
  FY1REC.XGPCD = FY0GW01.XGPCD; /* Search key*/

  FY0GS03(); /* Get B-grade %*/

   /* ------------------------------------------------------------*/
   /* MOVE BOTH BEG. AND END P.O. ID DATE TO THE OLD DATE FIELD*/
   /* IN CASE THE DATES GET CHANGED.*/
   /* ------------------------------------------------------------*/

  FY0GW01.FY0GWOBD = FY4REC.FY4FOBED; /* Old beg. date*/
  FY0GW01.FY0GWOXD = FY4REC.FY4FOXED; /* Old end date*/
  FY0GW01.FY0GWOSP = FY4REC.FY4SZPRC; /* Old size/price*/
  FY0GW01.FY0GWOQP = FY4REC.FY4QTDPR; /* Old qouted price*/
  FY0GW01.ZZZSDT = FY4REC.ZZZSDT; /* Old setup date*/


end // end FY0G710

// FORMAT AND DISPLAY: Change Map
Function FY0G720()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error*/
    set FY0GM002 initial; /* Clear map output area*/
    converseLib.validationFailed(93); /* ENTER OR PA2*/

    FY0G721(); /* Format data for map*/

    set FY0GM002.FY0GWFYR initialAttributes; /* Reset to defined*/
    set FY0GM002.FY0GWFMO initialAttributes; /* Reset to defined*/
    set FY0GM002.FY0GWFDM initialAttributes; /* Reset to defined*/
    set FY0GM002.FY1FCTYC skip; /* Reset to autoskip*/

    set FY0GM002.FY0GMTYR initialAttributes; /* Reset to defined*/
    set FY0GM002.FY0GMTMO initialAttributes; /* Reset to defined*/
    set FY0GM002.FY0GMTDM initialAttributes; /* Reset to defined*/
    set FY0GM002.FY0GMFCT skip; /* Reset to autoskip*/

  else

    set FY0GM002.FY1FCTYC skip;
    set FY0GM002.FY0GMFCT skip;
    set FY0GM002 alarm; /* Indicate sound alarm*/

  end

  if (FY0GW01.XGPCD in XGPTBL.XGPCD)
    FY0GM002.XGPCD = FY0GW01.XGPCD; /* Move GPC code to map2*/
    FY0GW01.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    FY0GM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end

  FY0GM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FY0GM002.FY0GMFNC = "CHANGE"; /* Move CHANGE literial to map 2*/

  set FY0GM002.SY2CLRID skip; /* Protect non-enterable fields*/
  set FY0GM002.SY1STNBR skip;
  set FY0GM002.XGPCD skip;
  set FY0GM002.XDMCD skip;
  set FY0GM002.XQACD skip;
  set FY0GM002.PC2INSEG skip;
  set FY0GM002.XPGCD skip;
  set FY0GM002.XUMCD skip;

  converse FY0GM002 ;

  if (converseVar.eventKey is enter)
    FY0G722(); /* Pop-up Windows for: GPC, STATE, COUNTRY*/
  end

end // end FY0G720

// Obtain Data to Display CHANGE
Function FY0G721()

   /* ------------------------------------------------------------*/
   /* MOVE SELECTED LINES TO MAP*/
   /* ------------------------------------------------------------*/

  FY0GM002.SY1STNBR = FY4REC.SY1STNBR; /* Move to map2*/
  FY0GM002.SY1SSTNM = FY0GW01.SY1SSTNM; /* Move to map2*/
  FY0GM002.SY2CLRID = FY4REC.SY2CLRID; /* Move to map2*/
  FY0GM002.SY2CLRAB = FY0GW01.SY2CLRAB; /* Move to map2*/
  FY0GM002.XDMCD = FY4REC.XDMCD; /* Move to map2*/
  FY0GM002.XQACD = FY4REC.XQACD; /* Move to map2*/
  FY0GM002.PC2INSEG = FY4REC.PC2INSEG; /* Move to map2*/
  FY0GM002.XPGCD = FY4REC.XPGCD; /* Move to map2*/
  FY0GM002.XUMCD = FY4REC.XUMCD; /* Move to map2*/

  FY0GM002.FY0GWFYR = FY0GW02.FY0GWBYY[FY0GWIXM]; /* Move to map2*/
  FY0GW01.FY0GWBYR = FY0GW02.FY0GWBYY[FY0GWIXM];
  FY0GM002.FY0GWFMO = FY0GW02.FY0GWBMM[FY0GWIXM]; /* Move to map2*/
  FY0GW01.FY0GWBMO = FY0GW02.FY0GWBMM[FY0GWIXM];
  FY0GM002.FY0GWFDM = FY0GW02.FY4BRCMO[FY0GWIXM]; /* Move to map2*/
  FY0GW01.FY0GWBDM = FY0GW02.FY4BRCMO[FY0GWIXM];
  FY0GM002.FY1FCTYC = FY4REC.FY1FCTYC; /* Move to map2*/

  FY0GM002.FY0GMTYR = FY0GW02.FY0GWXYY[FY0GWIXM]; /* Move to map2*/
  FY0GW01.FY0GWTYR = FY0GW02.FY0GWXYY[FY0GWIXM];
  FY0GM002.FY0GMTMO = FY0GW02.FY0GWXMM[FY0GWIXM]; /* Move to map2*/
  FY0GW01.FY0GWTMO = FY0GW02.FY0GWXMM[FY0GWIXM]; /* Move to map2*/
  FY0GM002.FY0GMTDM = FY0GW02.FY4ERCMO[FY0GWIXM]; /* Move to map2*/
  FY0GW01.FY0GWTDM = FY0GW02.FY4ERCMO[FY0GWIXM]; /* Move to map2*/
  FY0GM002.FY0GMFCT = FY4REC.FY1FCTYC; /* Move to map2*/

  FY0GM002.FY1BGDPC = FY0GW01.FY1BGDPC; /* Move to map2*/
  FY0GM002.FY4QTDPR = FY4REC.FY4QTDPR; /* Move to map2*/
  FY0GM002.FY4TGTPR = FY4REC.FY4TGTPR; /* Move to map2*/

   /* ------------------------------------------------------------*/
   /* FORMAT THE FOB LINE FROM WORKING STORAGE*/
   /* ------------------------------------------------------------*/

  set FY0GW03 empty; /* Clear W03 record*/
  FY0GW01.FY0GWPIX = 1; /* Initialize line index*/
  FY0GW01.FY0GWMIX = 1; /* Initialize line index*/
  FY0GW01.FY0GWPRE = 0; /* Previous price index*/

  while (FY0GW01.FY0GWPIX <= 40) /* Until end of lines*/
    if (PG3REC.SY4IDDSC[FY0GWPIX] > " ") /* Something in code.*/
      FY0GM002.SY4IDDSC[FY0GWMIX] = PG3REC.SY4IDDSC[FY0GWPIX];
      if (FY4REC.FY4FOBPR[FY0GWPIX] == FY0GW01.FY0GWPRE)
        set FY0GM002.FY4FOBPR[FY0GWMIX] skip;
        FY0GW03.FY0GWMPS[FY0GWPIX] = FY0GW01.FY0GWMIX;
        FY0GW03.FY0GWDPS[FY0GWMIX] = FY0GW01.FY0GWPIX;
        FY0GW01.FY0GWMIX = FY0GW01.FY0GWMIX + 1; /* Increment line index*/

      else
        FY0GW01.FY0GWPRE = FY4REC.FY4FOBPR[FY0GWPIX];
        FY0GM002.FY4FOBPR[FY0GWMIX] = FY4REC.FY4FOBPR[FY0GWPIX];
        set FY0GM002.FY4FOBPR[FY0GWMIX] normal;
        FY0GW03.FY0GWMPS[FY0GWPIX] = FY0GW01.FY0GWMIX;
        FY0GW03.FY0GWDPS[FY0GWMIX] = FY0GW01.FY0GWPIX;
        FY0GW01.FY0GWMIX = FY0GW01.FY0GWMIX + 1; /* Increment line index*/
      end
    end
    FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Increment line index*/
  end

  if (FY0GM002.SY4IDDSC[33] > " ")
    set FY0GM002.FY0GMSZL[5] skip; /* Display*/
    set FY0GM002.FY0GMFBL[5] skip; /* Display*/
  end

  if (FY0GM002.SY4IDDSC[25] > " ")
    set FY0GM002.FY0GMSZL[4] skip; /* Display*/
    set FY0GM002.FY0GMFBL[4] skip; /* Display*/
  end

  if (FY0GM002.SY4IDDSC[17] > " ")
    set FY0GM002.FY0GMSZL[3] skip; /* Display*/
    set FY0GM002.FY0GMFBL[3] skip; /* Display*/
  end

  if (FY0GM002.SY4IDDSC[9] > " ")
    set FY0GM002.FY0GMSZL[2] skip; /* Display*/
    set FY0GM002.FY0GMFBL[2] skip; /* Display*/
  end

  if (FY0GM002.SY4IDDSC[1] > " ")
    set FY0GM002.FY0GMSZL[1] skip; /* Display*/
    set FY0GM002.FY0GMFBL[1] skip; /* Display*/
     /* SET FY0GM002.FY4FOBPR(1) CURSOR,NORMAL;*/
    set FY0GM002.FYITPIND cursor, normal;
  else
    converseLib.validationFailed(21); /* Nothing to display*/
    FY0GM002.XXXPRCNM = "FY0G721"; /* Process name*/
    set FY0GM002.SY1STNBR cursor, modified, bold; /* Highlight error*/
  end

   /* ---------------------------------------------------------*/
   /* IF PF6 PRESSED OPEN ALL PRICE FIELDS*/
   /* ---------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* PF6 was pressed*/
    FY0GW01.FY0GWPIX = 1; /* Initialize line index*/
    while (FY0GW01.FY0GWPIX <= 40) /* Until end of lines*/
      if (FY0GM002.SY4IDDSC[FY0GWPIX] > " ") /* Something there*/
        set FY0GM002.FY4FOBPR[FY0GWPIX] normal; /* Open price field*/
      else
        FY0GW01.FY0GWPIX = 41; /* Exit*/
      end
      FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1; /* Increment line count*/
    end
    set FY0GM002.FY4FOBPR[1] cursor; /* Place cursor*/
  end

end // end FY0G721

// Check for ? by User
Function FY0G722()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (FY0GM002.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                 GPC CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      FY0GW01.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      FY0GW01.XGPABRV = XGPTBL.XGPABRV[XX0XWPIX]; /* move name*/
      set FY0GM002.XGPCD cursor;
    else
      FY0GW01.XGPCD = " "; /* clear fields*/
      FY0GW01.XGPABRV = " ";
      set FY0GM002.XGPCD cursor;
    end
    converseLib.clearScreen();
     /* restore the original map*/
  end

end // end FY0G722

// Check Attention Identifiers
Function FY0G730()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FY0GM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FY0GM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = FY0GM002.CAITEM; /* To application*/
      FY0G111(); /* Purge any temporary storage*/
      XSFY001(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set FY0GM002.CATOAP cursor, modified, bold; /* Highlight*/
    FY0GM002.XXXPRCNM = "FY0G730"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FY0GM002"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end

    FY0G111(); /* Purge any temporary storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM002.XXXPRCNM = "FY0G730"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FY0GW01.FY0GWMAP = "1"; /* Map flag eq 1*/
    FY0GW01.FY0GWSWR = "Y"; /* Request for data*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    FY0GW01.FY0GWFNC = " "; /* Set function code to spaces*/

    FY0GW01.FY0GWCYR = FY0GM002.FY0GWFYR; /* Save key*/
    FY0GW01.FY0GWDH1 = "-";
    FY0GW01.FY0GWCMO = FY0GM002.FY0GWFMO; /* Save key*/
    FY0GW01.FY0GWDH2 = "-";
    FY0GW01.FY0GWCDM = FY0GM002.FY0GWFDM; /* Save key*/
    FY0GW01.FY0GWDH3 = "-";
    FY0GW01.FY0GWCFY = FY0GM002.FY1FCTYC; /* Save key*/

    FY0GW01.FY0GWFYR = 0;
    FY0GW01.FY0GWFMO = 0;
    FY0GW01.FY0GWFDM = 0;
     /* MOVE ' ' TO FY0GW01.FY1FCTYC;*/

    FY0GW01.FY0GWYYY = 0;
    FY0GW01.FY0GWMMM = 0;
    FY0GW01.FY0GMPDM = 0;
     /* MOVE ' ' TO FY0GW01.FY0GMFCT;*/

    FY0GW01.FY4FOBED = 0;
    FY0GW01.FY4FOXED = 0;
    FY0GW01.FY0GWBED = 0;
    FY0GW01.FY0GWXED = 0;

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CATOAP = "FY0A"; /* Set to factory application*/
    COMMAREA.CAITEM = " "; /* Move in item*/
    FY0G111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM002.XXXPRCNM = "FY0G730"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item*/
    COMMAREA.CATOAP = "FY0C"; /* To application*/
    FY0G111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM002.XXXPRCNM = "FY0G730"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item*/
    COMMAREA.CATOAP = "FY0F"; /* To application*/
    FY0G111(); /* Purge Temp. storage*/
    XSFY001(); /* Exit to another application*/
    FY0GM002.XXXPRCNM = "FY0G730"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf6) /* PF6 was pressed*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FY0GM002.XXXPRCNM = "FY0G730"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 pressed*/
     || converseVar.eventKey is pa3) /* PA3 pressed*/

      converseLib.clearScreen();
       /* Clear map before display*/

    end

    return; /* Exit to redisplay map*/
  end

end // end FY0G730

// Reset Highlighted Fields
Function FY0G740()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  set FY0GM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FY0GM002.CAITEM initialAttributes; /* Commarea application data*/
  set FY0GM002.XGPCD initialAttributes;
  set FY0GM002.XGPABRV initialAttributes;

  set FY0GM002.SY1STNBR initialAttributes;
  set FY0GM002.SY2CLRID initialAttributes;
  set FY0GM002.XDMCD initialAttributes;
  set FY0GM002.XQACD initialAttributes;
  set FY0GM002.PC2INSEG initialAttributes;
  set FY0GM002.XPGCD initialAttributes;
  set FY0GM002.XUMCD initialAttributes;

  set FY0GM002.FY0GWFYR initialAttributes;
  set FY0GM002.FY0GWFMO initialAttributes;
  set FY0GM002.FY0GWFDM initialAttributes;
  set FY0GM002.FY1FCTYC initialAttributes;

  set FY0GM002.FY0GMTYR initialAttributes;
  set FY0GM002.FY0GMTMO initialAttributes;
  set FY0GM002.FY0GMTDM initialAttributes;
  set FY0GM002.FY0GMFCT initialAttributes;

end // end FY0G740

// Verify the entered data
Function FY0G750()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.CAITEM > " ") /* Application data was entered*/
    set FY0GM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FY0GM002.XXXPRCNM = "FY0G750"; /* Process name*/
  else

    FY0G751(); /* Validate the entered data*/

  end

end // end FY0G750

// Validate Record-CHANGE
Function FY0G751()

   /* ----------------------------------------------------*/
   /* Validate the entered data.*/
   /* ----------------------------------------------------*/

  FY0GW01.FY0GWPCH = "N"; /* Init price change flag*/
  FY0GW01.FY0GWDCH = "N"; /* Init date changed flag*/

   /* ------------------------------------------------------------*/
              /* CHECK THE TO DELIVERY MONTH*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.FY0GMTDM > "00" /* Check for a valid month*/
   && FY0GM002.FY0GMTDM <= "12")

    FY0GW01.FY0GMPDM = FY0GM002.FY0GMTDM;

  else
    converseLib.validationFailed(82); /* Invalid month entered*/
    FY0GM002.XXXPRCNM = "FY0G751"; /* Process name*/
    set FY0GM002.FY0GMTDM cursor, bold; /* Highlight*/
  end

   /* ----------------------------------------------------*/
   /* CHECK TO SEE IF THE "TO" P.O. ID WAS CHANGED*/
   /* ----------------------------------------------------*/

  if (FY0GW01.FY0GWTYR != FY0GM002.FY0GMTYR /* To year*/
   || FY0GW01.FY0GWTMO != FY0GM002.FY0GMTMO) /* To month*/

    FY0G753(); /* Check the "TO" date*/
  else

    FY0GW01.FY0GWXED = FY0GW01.FY0GWOXD; /* Move in the old date*/
    FY0GW01.FY4FOXED = FY0GW01.FY0GWOXD; /* Move in the old date*/

  end

   /* ------------------------------------------------------------*/
              /* CHECK THE FROM DELIVERY MONTH*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.FY0GWFDM > "00" /* Check for a valid month*/
   && FY0GM002.FY0GWFDM <= "12")

    FY0GW01.FY0GWFDM = FY0GM002.FY0GWFDM;

  else
    converseLib.validationFailed(82); /* Invalid month entered*/
    FY0GM002.XXXPRCNM = "FY0G751"; /* Process name*/
    set FY0GM002.FY0GWFDM cursor, bold; /* Highlight*/
  end

   /* ----------------------------------------------------*/
   /* CHECK TO SEE IF THE "FROM" P.O. ID WAS CHANGED*/
   /* ----------------------------------------------------*/

  if (FY0GW01.FY0GWBYR != FY0GM002.FY0GWFYR /* From year*/
   || FY0GW01.FY0GWBMO != FY0GM002.FY0GWFMO) /* From month*/

    FY0G752(); /* Check the "FROM" date*/
  else

    FY0GW01.FY0GWBED = FY0GW01.FY0GWOBD; /* Move in the old date*/
    FY0GW01.FY4FOBED = FY0GW01.FY0GWOBD; /* Move in the old date*/

  end


  if (converseVar.validationMsgNum == 0) /* If no errors exist*/

    if (FY0GW01.FY0GWBYR != FY0GM002.FY0GWFYR /* Was the p.o. id changed*/
     || FY0GW01.FY0GWBMO != FY0GM002.FY0GWFMO 
     || FY0GW01.FY0GWTYR != FY0GM002.FY0GMTYR 
     || FY0GW01.FY0GWTMO != FY0GM002.FY0GMTMO)

      if (FY0GW01.FY4FOXED < FY0GW01.FY4FOBED) /* "TO" date < "FROM" date*/
        converseLib.validationFailed(63);
        FY0GM002.XXXPRCNM = "FY0G751";
        set FY0GM002.FY0GMTYR cursor, bold;
      else
        FY0GW01.FY0GWDEF = "Y"; /* Data entered flag*/
        FY0GW01.FY0GWDCH = "Y"; /* Date changed flag*/
      end

      if (FY0GW01.FY4FOBED < FY0GW02.FY4FOBED[FY0GWIXM])
        converseLib.validationFailed(133);
        FY0GM002.XXXPRCNM = "FY0G751";
        set FY0GM002.FY0GWFYR cursor, bold;
        set FY0GM002.FY0GWFMO bold;
        set FY0GM002.FY0GWFDM bold;
      else
        FY0GW01.FY0GWDEF = "Y"; /* Data entered flag*/
        FY0GW01.FY0GWDCH = "Y"; /* Date changed flag*/
      end
    end
  end

  if (FY0GW01.FY0GWDCH == "Y") /* Date changed flag*/
    FY0G250(); /* Check for unique row*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/

    return; /* Exit to display map*/

  end


   /* ----------------------------------------------------*/
   /* SEE IF ANY ENTERABLE FIELD HAS CHANGED.*/
   /* ----------------------------------------------------*/

  if (FY0GM002.FY4QTDPR != FY4REC.FY4QTDPR /* Fields are equal*/
   || FY0GM002.FY4TGTPR != FY4REC.FY4TGTPR 
   || FY0GM002.FY0GWFDM != FY4REC.FY4BRCMO /* From delivery month*/
   || FY0GM002.FY0GMTDM != FY4REC.FY4ERCMO) /* To delivery month*/

    FY0GW01.FY0GWDEF = "Y"; /* Data entered flag turned on*/

  end

   /* ------------------------------------------------------------*/
   /* THIS LOOP WILL DETERMINE IF THE PRICE FOR A GIVEN RANGE*/
   /* HAS CHANGED. IT WILL BE BY-PASSED IF THE QUOTED OR TARGET*/
   /* PRICE HAS CHANGED.*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.FY4QTDPR != FY4REC.FY4QTDPR /* Fields not equal*/
   || FY0GM002.FY4TGTPR != FY4REC.FY4TGTPR)
    FY0GW01.FY0GWPCH = "Y"; /* Price change flag turned on*/

  end

  FY0GW01.FY0GWPIX = 1; /* Saved FY4REC index*/

   /* ALL PRICES ZEREOED OUT CHECK*/

  while (FY0GW01.FY0GWPIX <= 40)

    if (FY0GM002.FY4FOBPR[FY0GWPIX] != 0)
      FY0GW01.FY0GWPIX = 41;
      FY0GW01.FY0GWDEF = "Y";
    else
      FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1;
    end
  end

  if (FY0GW01.FY0GWDEF == "Y")
    FY0GW01.FY0GWDEF = "N";
  else
    exit stack; /* CAN'T ZERO OUT ALL PRICES*/
  end

  FY0GW01.FY0GWPIX = 1; /* Saved FY4REC index*/
  FY0GW01.FY0GWMIX = 1; /* Map placement index*/
  FY0GW01.FY0GWRIX = 1; /* FY4REC placement index*/

  while (FY0GW03.FY0GWDPS[FY0GWPIX] != 0
   && FY0GW01.FY0GWPIX <= 40
   && FY0GW01.FY0GWPCH == "N")

    FY0GW01.FY0GWRIX = FY0GW03.FY0GWDPS[FY0GWPIX];
    if (FY0GM002.FY4FOBPR[FY0GWMIX] == FY4REC.FY4FOBPR[FY0GWRIX]
     || FY0GM002.FY4FOBPR[FY0GWMIX] == 0)

      FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1;
      FY0GW01.FY0GWMIX = FY0GW01.FY0GWMIX + 1;
    else
      FY0GW01.FY0GWDEF = "Y"; /* Data entered flag turned on*/
      FY0GW01.FY0GWPCH = "Y"; /* Price change flag turned on*/
    end
  end

  if (FY0GW01.FY0GWDCH == "Y" /* Date changed flag*/
   || FY0GW01.FY0GWPCH == "Y") /* Price changed flag*/
    if (FY0GM002.FYITPIND != "1" /* Check for 1, 2, or 3*/
     && FY0GM002.FYITPIND != "2" /* Check for 1, 2, or 3*/
     && FY0GM002.FYITPIND != "3") /* Check for 1, 2, or 3*/
      converseLib.validationFailed(140);
      FY0GM002.XXXPRCNM = "FY0G751";
      set FY0GM002.FYITPIND cursor, bold;
    else
      FY0GW01.FYITPIND = FY0GM002.FYITPIND;
    end
  end

  if (FY0GW01.FY0GWDEF != "Y") /* No data was changed*/

    FY0GM001.FY0GMSEL[FY0GWIXM] = " ";

    FY0GW01.FY0GWCYR = FY0GM002.FY0GWFYR; /* Save key*/
    FY0GW01.FY0GWDH1 = "-";
    FY0GW01.FY0GWCMO = FY0GM002.FY0GWFMO; /* Save key*/
    FY0GW01.FY0GWDH2 = "-";
    FY0GW01.FY0GWCDM = FY0GM002.FY0GWFDM; /* Save key*/
    FY0GW01.FY0GWDH3 = "-";
    FY0GW01.FY0GWCFY = FY0GM002.FY1FCTYC; /* Save key*/

    FY0GW01.FY0GWFYR = 0;
    FY0GW01.FY0GWFMO = 0;
    FY0GW01.FY0GWFDM = 0;

    FY0GW01.FY0GWYYY = 0;
    FY0GW01.FY0GWMMM = 0;
    FY0GW01.FY0GMPDM = 0;

    FY0GW01.FY4FOBED = 0;
    FY0GW01.FY4FOXED = 0;
    FY0GW01.FY0GWBED = 0;
    FY0GW01.FY0GWXED = 0;

    exit stack; /* Get back to top of flow*/

  end


end // end FY0G751

// P.O. ID VALIDATION-CHANGE
Function FY0G752()

   /* ------------------------------------------------------------*/
   /* This process will validate the "FROM" P.O. ID*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* DATE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (FY0GM002.FY0GWFYR == " " /* Blank "FROM" year*/
   || FY0GM002.FY0GWFMO == " ") /* Blank "FROM" month*/

    if (FY0GM002.FY0GWFYR == " ") /* Blank "FROM" year*/
      converseLib.validationFailed(83); /* Must enter year*/
      FY0GM002.XXXPRCNM = "FY0G752"; /* Process name*/
      set FY0GM002.FY0GWFYR cursor, bold; /* Highlight*/
    end

    if (FY0GM002.FY0GWFMO == " ") /* Blank "FROM" month*/
      converseLib.validationFailed(82); /* Must enter month*/
      FY0GM002.XXXPRCNM = "FY0G752"; /* Process name*/
      set FY0GM002.FY0GWFYR cursor, bold; /* Highlight*/
    end

  else

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (FY0GM002.FY0GWFYR >= "00" /* Something there*/
     && FY0GM002.FY0GWFYR <= "99") /* Something there*/

      FY0GW01.FY0GWFYR = FY0GM002.FY0GWFYR;

    else
      converseLib.validationFailed(83); /* Must enter year*/
      FY0GM002.XXXPRCNM = "FY0G752"; /* Process name*/
      set FY0GM002.FY0GWFYR cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (FY0GM002.FY0GWFMO > "00" /* Something there*/
     && FY0GM002.FY0GWFMO <= "12") /* Something there*/

      FY0GW01.FY0GWFMO = FY0GM002.FY0GWFMO;
      FY0GW01.FY0GWDAY = 01;

    else
      converseLib.validationFailed(82); /* Must enter month*/
      FY0GM002.XXXPRCNM = "FY0G752"; /* Process name*/
      set FY0GM002.FY0GWFMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* DATE VALIDATION*/
    /* ------------------------------------------------------------*/

    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
    TA2REC.TA2GRTYP = "E"; /* Move in date type*/
    TA2REC.TA2GRGE = FY0GW01.FY0GWPOB; /* Move in date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      FY0GW01.FY0GWBED = TA2REC.TA2GRGGN; /* Beginning date*/
      FY0GW01.FY4FOBED = TA2REC.TA2GRGGN; /* Beginning date*/
    else
      converseLib.validationFailed(62); /* Date is missing or invalid*/
      FY0GM002.XXXPRCNM = "FY0G752"; /* Process name*/
      set FY0GM002.FY0GWFYR cursor, bold; /* Highlight*/
    end
  end

end // end FY0G752

// P.O. ID VALIDATION-CHANGE
Function FY0G753()

   /* ------------------------------------------------------------*/
   /* This process will validate the "TO" P.O. ID*/
   /* ------------------------------------------------------------*/


  if (FY0GM002.FY0GMTYR == " " /* Blank "TO" year*/
   || FY0GM002.FY0GMTMO == " ") /* Blank "TO" month*/

    if (FY0GM002.FY0GMTYR == " ") /* Blank "TO" year*/
      converseLib.validationFailed(83); /* Must enter year*/
      FY0GM002.XXXPRCNM = "FY0G752"; /* Process name*/
      set FY0GM002.FY0GMTYR cursor, bold; /* Highlight*/
    end

    if (FY0GM002.FY0GMTMO == " ") /* Blank "TO" month*/
      converseLib.validationFailed(82); /* Must enter month*/
      FY0GM002.XXXPRCNM = "FY0G752"; /* Process name*/
      set FY0GM002.FY0GMTMO cursor, bold; /* Highlight*/
    end

  else
    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (FY0GM002.FY0GMTYR >= "00" /* Something there*/
     && FY0GM002.FY0GMTYR <= "99") /* Something there*/

      FY0GW01.FY0GWYYY = FY0GM002.FY0GMTYR;

    else
      converseLib.validationFailed(83); /* Must enter valid year*/
      FY0GM002.XXXPRCNM = "FY0G753"; /* Process name*/
      set FY0GM002.FY0GMTYR cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (FY0GM002.FY0GMTMO > "00" /* Something there*/
     && FY0GM002.FY0GMTMO <= "12") /* Something there*/

      FY0GW01.FY0GWMMM = FY0GM002.FY0GMTMO;

    else
      converseLib.validationFailed(82); /* Must enter valid month*/
      FY0GM002.XXXPRCNM = "FY0G753"; /* Process name*/
      set FY0GM002.FY0GMTMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* DATE VALIDATION AND GET THE LAST DAY OF THE MONTH*/
    /* ------------------------------------------------------------*/

    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2GRGE = FY0GW01.FY0GWPOX; /* Move in date*/
    TA2REC.TA2DTOPT = "LASTDAY "; /* Move in option*/
    TA2REC.TA2GRTYP = "E"; /* Move in date type*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date edit routine*/

    if (TA2REC.TA2RTNCD == 0000)
      FY0GW01.FY0GWXED = TA2REC.TA2GRGGN; /* Ending date*/
      FY0GW01.FY4FOXED = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(62); /* Date missing or invalid*/
      FY0GM002.XXXPRCNM = "FY0G753"; /* Process name*/
      set FY0GM002.FY0GMTYR cursor, bold; /* Highlight*/
    end
  end


end // end FY0G753

// Process Changed Data
Function FY0G760()

   /* ------------------------------------------------------------*/
   /* PROCESS THE CHANGED DATA*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If errors exist*/
    return; /* Exit*/
  end

  if (FY0GW01.FY0GWDCH == "Y") /* Date change flag on*/

    FY0GS05(); /* Open fy4rec cursor*/

    FY0GW01.FY0GWSWC = "N"; /* Set eof to no*/
    FY0GS06(); /* Fetch fy4rec row*/

    while (FY0GW01.FY0GWSWC == "N") /* Not eof*/
      FY0G263(); /* Check for existing rows and adjust dates*/
      FY0GS06(); /* Fetch fy4rec row*/
    end

    FY0GS07(); /* Close fy4rec set*/

    FY0G768(); /* Form new row*/

    FY0G769(); /* Add new row*/

  else

    FY0GS15(); /* Fill history record row*/
    FY0G770(); /* Update table row*/

  end

  if (FY0GW01.FY0GWPCH == "Y" /* Price change flag on*/
   || FY0GW01.FY0GWDCH == "Y") /* Date change flag on*/

    FY0GS04(); /* Add dfcty.vfytag01 row*/
  end

  if (FY0GW01.FY0GWPCH == "Y" /* Price change flag on*/
   && FY0GW01.FY0GWDCH == "N") /* and date change flag off*/
    set FYIREC empty; /* Initialize record*/
    FYIREC.FY4FOBED = FY4REC.FY4FOBED;
    FYIREC.FY4FOXED = FY4REC.FY4FOXED;
    FYIREC.FY4BRCMO = FY4REC.FY4BRCMO;
    FYIREC.FY4ERCMO = FY4REC.FY4ERCMO;
    FYIREC.FY4QTDPR = FY4REC.FY4QTDPR; /* New quoted price*/
    FYIREC.FYISZPRC = FY4REC.FY4SZPRC; /* New size/price*/
    FYIREC.FYIPRQTD = FY0GW01.FY0GWOQP; /* Old quoted price*/
    FYIREC.FYIPSZPR = FY0GW01.FY0GWOSP; /* New size/price*/
    FYIREC.FYIORSDT = FY0GW01.ZZZSDT; /* Original setup date*/
    FY0GS14(); /* Add dfcty.vhyfob01 row*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit the update*/

  FY0GW01.FY0GWCYR = FY0GM002.FY0GWFYR; /* Save key*/
  FY0GW01.FY0GWDH1 = "-";
  FY0GW01.FY0GWCMO = FY0GM002.FY0GWFMO; /* Save key*/
  FY0GW01.FY0GWDH2 = "-";
  FY0GW01.FY0GWCDM = FY0GM002.FY0GWFDM; /* Save key*/
  FY0GW01.FY0GWDH3 = "-";
  FY0GW01.FY0GWCFY = FY0GM002.FY1FCTYC; /* Save key*/

  FY0GW01.FY4FOBED = 0; /* Move 0 to beg. FOB date*/
  FY0GW01.FY0GWBED = 0; /* Move 0 to beg. FOB date/passed*/
  FY0GW01.FY4FOXED = 0; /* Move 0 to end FOB date*/
  FY0GW01.FY0GWXED = 0; /* Move 0 to end FOB date/passed*/
  FY0GW01.FY0GWOBD = 0; /* Old beg. date*/
  FY0GW01.FY0GWOXD = 0; /* Old end date*/

  FY0GW01.FY0GWDEF = "N"; /* Turn off data entered flag*/
  FY0GW01.FY0GWPCH = "N"; /* Turn off price change flag*/
  FY0GW01.FY0GWUPD = "Y"; /* Update successful*/
  FY0GW01.FY0GWSWR = "Y"; /* Set request for data switch*/

  FY0GW01.FY0GWFYR = 0;
  FY0GW01.FY0GWFMO = 0;
  FY0GW01.FY0GWFDM = 0;

  FY0GW01.FY0GWYYY = 0;
  FY0GW01.FY0GWMMM = 0;
  FY0GW01.FY0GMPDM = 0;

end // end FY0G760

// Form new row--CHANGE
Function FY0G768()

   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL FILL THE FY4REC AND THE VALID BUCKETS*/
   /* WITHIN THE RECORD.*/
   /* ----------------------------------------------------------*/

  FY0GW01.FY0GWPRE = 0; /* Clear price check field*/
  FY0GW01.FY0GWPIX = 1; /* Saved FY4REC index*/
  FY0GW01.FY0GWMIX = 1; /* Map placement index*/
  FY0GW01.FY0GWRIX = 0; /* FY4REC placement index*/

   /* ------------------------------------------------------------*/
   /* THIS LOOP WILL DETERMINE THE FOB PRICE FOR A GIVEN RANGE*/
   /* IF THE RANGE IS VALID.*/
   /* ------------------------------------------------------------*/

  while (FY0GW03.FY0GWDPS[FY0GWPIX] != 0)
    while (FY0GM002.FY4FOBPR[FY0GWMIX] == FY0GW01.FY0GWPRE /* Prices equal*/
     && FY0GW03.FY0GWDPS[FY0GWPIX] != 0)
      FY0GW01.FY0GWRIX = FY0GW03.FY0GWDPS[FY0GWPIX];
      FY4REC.FY4FOBPR[FY0GWRIX] = FY0GW01.FY0GWPRE;
      FY0GW01.FY0GWPRE = FY0GM002.FY4FOBPR[FY0GWMIX]; /* Prices equal*/
      FY0GW01.FY0GWMIX = FY0GW01.FY0GWMIX + 1;
      FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1;
      if (FY0GM002.FY4FOBPR[FY0GWMIX] == 0) /* Nothing in field*/
        FY0GM002.FY4FOBPR[FY0GWMIX] = FY0GW01.FY0GWPRE;
      else
        FY4REC.FY4FOBPR[FY0GWRIX] = FY0GW01.FY0GWPRE;
      end
    end
    FY0GW01.FY0GWPRE = FY0GM002.FY4FOBPR[FY0GWMIX];
  end

  FY4REC.XGPCD = FY0GM002.XGPCD; /* Move in fields*/
  FY4REC.SY1STNBR = FY0GM002.SY1STNBR;
  FY4REC.FY1FCTYC = FY0GM002.FY1FCTYC;
  FY4REC.SY2CLRID = FY0GM002.SY2CLRID;
  FY4REC.XDMCD = FY0GM002.XDMCD;
  FY4REC.XQACD = FY0GM002.XQACD;
  FY4REC.PC2INSEG = FY0GM002.PC2INSEG;
  FY4REC.XPGCD = FY0GM002.XPGCD;
  FY4REC.XUMCD = FY0GM002.XUMCD;
  FY4REC.XSECD = " ";
  FY4REC.XSNYR = 0;
  FY4REC.XXXSTAT = "A";
  FY4REC.FY4FOBED = FY0GW01.FY0GWBED;
  FY4REC.FY4FOXED = FY0GW01.FY0GWXED;
  FY4REC.FY4BRCMO = FY0GM002.FY0GWFDM;
  FY4REC.FY4ERCMO = FY0GM002.FY0GMTDM;
  FY4REC.FY4QTDPR = FY0GM002.FY4QTDPR;
  FY4REC.FY4TGTPR = FY0GM002.FY4TGTPR;

  XX0XS01(); /* Get the current date and time*/

  FY4REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FY4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FY4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FY4REC.ZZZCHGCT = 0; /* Change count*/
  FY4REC.FY4SMDCT = 1; /* Same day counter*/


end // end FY0G768

// Add new row--CHANGE
Function FY0G769()

   /* ------------------------------------------------------------*/
   /* This module adds a FOB P.O. ID table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3000" ("A ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000" /* Sucessful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Valid return code*/

    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000" /* Sucessful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any updates*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0G769"; /* Process name*/
  TA1REC.TA1LOC = "ADD A UNIQUE FOB TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0GM002.XXXPRCNM = "FY0G769"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0G769

// Update row
Function FY0G770()

   /* ------------------------------------------------------------*/
   /* Update the FOB Price Row*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* This module will fill the FY4REC and the valid buckets*/
   /* within the record.*/
   /* ----------------------------------------------------------*/

  FY0GW01.FY0GWPRE = 0; /* Clear price check field*/
  FY0GW01.FY0GWPIX = 1; /* Saved FY4REC index*/
  FY0GW01.FY0GWMIX = 1; /* Map placement index*/
  FY0GW01.FY0GWRIX = 0; /* FY4REC placement index*/

   /* ------------------------------------------------------------*/
     /* THIS LOOP WILL DETERMINE THE FOB PRICE FOR A GIVE RANGE*/
     /* IF THE RANGE IS VALID.*/
   /* ------------------------------------------------------------*/

  while (FY0GW03.FY0GWDPS[FY0GWPIX] != 0)
    while (FY0GM002.FY4FOBPR[FY0GWMIX] == FY0GW01.FY0GWPRE /* Prices equal*/
     && FY0GW03.FY0GWDPS[FY0GWPIX] != 0)
      FY0GW01.FY0GWRIX = FY0GW03.FY0GWDPS[FY0GWPIX];
      FY4REC.FY4FOBPR[FY0GWRIX] = FY0GW01.FY0GWPRE;
      FY0GW01.FY0GWPRE = FY0GM002.FY4FOBPR[FY0GWMIX]; /* Prices equal*/
      FY0GW01.FY0GWMIX = FY0GW01.FY0GWMIX + 1;
      FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1;
      if (FY0GM002.FY4FOBPR[FY0GWMIX] == 0) /* Nothing in field*/
        FY0GM002.FY4FOBPR[FY0GWMIX] = FY0GW01.FY0GWPRE;
      else
        FY4REC.FY4FOBPR[FY0GWRIX] = FY0GW01.FY0GWPRE;
      end
    end
    FY0GW01.FY0GWPRE = FY0GM002.FY4FOBPR[FY0GWMIX];
  end

  FY4REC.XGPCD = FY0GW01.XGPCD; /* Move in fields*/
  FY4REC.SY1STNBR = FY0GW01.SY1STNBR;
  FY4REC.FY1FCTYC = FY0GW01.FY1FCTYC;
  FY4REC.SY2CLRID = FY0GW01.SY2CLRID;
  FY4REC.XDMCD = FY0GW01.XDMCD;
  FY4REC.XQACD = FY0GW01.XQACD;
  FY4REC.PC2INSEG = FY0GW01.PC2INSEG;
  FY4REC.XPGCD = FY0GW01.XPGCD;
  FY4REC.XUMCD = FY0GW01.XUMCD;
  FY4REC.XSECD = " ";
  FY4REC.XSNYR = 0;
  FY4REC.XXXSTAT = "A";
  FY4REC.FY4FOBED = FY0GW01.FY0GWOBD;
  FY4REC.FY4FOXED = FY0GW01.FY0GWOXD;
  FY4REC.FY4BRCMO = FY0GM002.FY0GWFDM;
  FY4REC.FY4ERCMO = FY0GM002.FY0GMTDM;
  FY4REC.FY4QTDPR = FY0GM002.FY4QTDPR;
  FY4REC.FY4TGTPR = FY0GM002.FY4TGTPR;

  XX0XS01(); /* Get the change date and time*/

  FY4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FY4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3000" ("U ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Valid return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any updates*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0G770"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE FOB TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0GM002.XXXPRCNM = "FY0G770"; /* Process name*/

  exit stack; /* Exit to display map*/

end // end FY0G770

// Find the style/color
Function FY0GS01()

   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed from selected*/
   /* rows on FOB by P.O. ID List map.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set FY4REC empty; /* Clear record*/

  FY4REC.XGPCD = FY0GW01.XGPCD; /* Search key*/
  FY4REC.FY1FCTYC = FY0GW02.FY0GWBFY[FY0GWIXM]; /* Get factory*/
  FY4REC.SY1STNBR = FY0GW01.SY1STNBR; /* Search key*/
  FY4REC.SY2CLRID = FY0GW01.SY2CLRID; /* Search key*/
  FY4REC.XDMCD = FY0GW01.XDMCD; /* Search key*/
  if (FY0GW01.XGPCD == "02" /* if footwear*/
   && FY0GW01.XQACD == "02") /* and bgrade asked for*/
    FY4REC.XQACD = "01"; /* Search key*/
  else
    FY4REC.XQACD = FY0GW01.XQACD; /* Search key*/
  end
  FY4REC.PC2INSEG = FY0GW01.PC2INSEG; /* Search key*/
  FY4REC.XPGCD = FY0GW01.XPGCD; /* Search key*/
  FY4REC.XUMCD = FY0GW01.XUMCD; /* Search key*/
  FY4REC.XSECD = FY0GW02.XSECD[FY0GWIXM]; /* Search key*/
  FY4REC.XSNYR = FY0GW02.XSNYR[FY0GWIXM]; /* Search key*/
  FY4REC.FY4FOBED = FY0GW02.FY4FOBED[FY0GWIXM]; /* Search key*/
  FY4REC.FY4FOXED = FY0GW02.FY4FOXED[FY0GWIXM]; /* Search key*/
  FY4REC.FY4BRCMO = FY0GW02.FY4BRCMO[FY0GWIXM]; /* Search key*/
  FY4REC.FY4ERCMO = FY0GW02.FY4ERCMO[FY0GWIXM]; /* Search key*/
  FY4REC.FY4SMDCT = FY0GW02.FY4SMDCT[FY0GWIXM]; /* Search key*/

  try
    call "IO3000" ("S ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0GS01"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE FOB ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  FY0GW01.FY0GWMAP = "1"; /* Reset map*/
  FY0GW01.FY0GWFNC = " "; /* Reset function*/
  FY0GW01.FY0GWSWR = "Y"; /* Reset function*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0GM001.XXXPRCNM = "FY0GS01"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0GS01

// Get size ranges
Function FY0GS02()

   /* ------------------------------------------------------------*/
   /* SEE IF COLOR/STYLE ENTERED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the STYLE/COLOR set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = FY0GW01.XGPCD; /* Search key*/
  PG2REC.SY1STNBR = FY0GW01.SY1STNBR;
  PG2REC.SY2CLRID = FY0GW01.SY2CLRID;
  PG2REC.XDMCD = FY0GW01.XDMCD;

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/
      FY0GW01.SY1SSTNM = PG2REC.SY1SSTNM;
      FY0GW01.SY2CLRAB = PG2REC.SY2CLRAB;
      FY0GW01.XGACD = PG2REC.XGACD;
      /* MOVE PG2REC.XtVCD TO FY0GW01.XtVCD;*/

      set PG3REC empty; /* Clear record*/

      PG3REC.XGPCD = FY0GW01.XGPCD; /* GPC code*/
      PG3REC.SY1STNBR = FY0GW01.SY1STNBR; /* Style number*/
      PG3REC.SY2CLRID = FY0GW01.SY2CLRID; /* Color id*/
      PG3REC.XDMCD = FY0GW01.XDMCD; /* Dim. code*/
      PG3REC.XQACD = "**"; /* Quality code*/
      PG3REC.PG3RETCD = "00"; /* Translator return code*/

      PG3REC.PG3FUNCD = "PC"; /* Translator fnc.*/
      PG3REC.PG3DATFM = "N"; /* Compressed/Not compressed sw*/

      TA1REC.TA1PGMNM = "FY0GS02"; /* What executes this sgrp*/

      XSPG301(); /* THIS STATEMENT GROUP WILL GET VALID SIZES*/

      if (PG3REC.PG3RETCD == "00")

        return; /* Return to previous process*/

      else
        if (PG3REC.PG3RETCD == "09") /* Data in use by someone else*/
          converseLib.validationFailed(11); /* Deadlock*/
          FY0GM002.XXXPRCNM = "FY0GS02"; /* Process name*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
          return; /* Return to previous process*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
          exit stack; /* Exit to redisplay map*/
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row does not exist*/
        converseLib.validationFailed(73); /* Invalid Style/color*/
        set FY0GM002.SY1STNBR cursor, bold; /* Highlight*/
        set FY0GM002.SY2CLRID bold;
        FY0GM002.XXXPRCNM = "FY0GS02"; /* Process name*/
        return; /* Return to previous process*/
      end
    end
  end
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0GS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE ROW";
  TA1REC.TA1MAP = "FY0GM002"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0GM002.XXXPRCNM = "FY0GS02"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end FY0GS02

// Get b-grade % from factory row
Function FY0GS03()

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

    FY0GW01.FY1BGDPC = FY1REC.FY1BGDPC; /* B-grade %*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/
      converseLib.validationFailed(33); /* Invalid factory*/
      FY0GM002.XXXPRCNM = "FY0GS03"; /* Process name*/
      set FY0GM002.FY1FCTYC cursor, bold; /* Highlight error*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "FY0GS03"; /* Process name*/
      TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
      TA1REC.TA1MAP = "FY0GM002"; /* Map name*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/
      TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

      FY0GM002.XXXPRCNM = "FY0GS03"; /* Process name*/
    end
  end


end // end FY0GS03

// Add dfcty.vfytag01 row
Function FY0GS04()

   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL ADD A ROW TO THE DFCTY.VFYTAG01 TAG*/
   /* RECORD DATABASE FOR LETTOR OF CREDIT MEMOS.*/
   /* ----------------------------------------------------------*/

  set FYHREC empty; /* Initialize the record*/

  FYHREC.XGPCD = FY4REC.XGPCD; /* Move in fields*/
  FYHREC.SY1STNBR = FY4REC.SY1STNBR;
  FYHREC.FY1FCTYC = FY4REC.FY1FCTYC;
  FYHREC.XSECD = FY4REC.XSECD;
  FYHREC.XSNYR = FY4REC.XSNYR;
  FYHREC.SY2CLRID = FY4REC.SY2CLRID;
  FYHREC.XDMCD = FY4REC.XDMCD;
  FYHREC.XQACD = FY4REC.XQACD;
  FYHREC.PC2INSEG = FY4REC.PC2INSEG;
  FYHREC.XPGCD = FY4REC.XPGCD;
  FYHREC.XUMCD = FY4REC.XUMCD;
  FYHREC.FY4FOBED = FY4REC.FY4FOBED;
  FYHREC.FY4FOXED = FY4REC.FY4FOXED;
  FYHREC.FYHSZPRC = FY4REC.FY4SZPRC;

  XX0XS01(); /* Date routine*/

  FYHREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FYHREC.ZZHHMMSS = XX0XW01.XX0XWHMS;


   /* ------------------------------------------------------------*/
   /* ADD THE ROW TO THE DATABASE*/
   /* ------------------------------------------------------------*/


  try
    call "IO4550" ("A ", SQLCA, FYHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Valid return code*/

    FY0GS18(); /* TAG REC. FOR B-GRADE PROCESS*/
    return; /* Return to previous process*/

  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0GS04"; /* Process name*/
  TA1REC.TA1LOC = "ADD A TAG RECORD TO TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYTAG01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYHREC.FYHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0GM002.XXXPRCNM = "FY0GS04"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  exit stack; /* Exit to redisplay map*/


end // end FY0GS04

// Select set (s4) dfcty.vfyfob01
Function FY0GS05()

   /* ------------------------------------------------------------*/
   /* Setup and select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set FY4REC empty; /* Clear record*/
  set FYCREC empty; /* Clear record*/

  FY4REC.XGPCD = FY0GW01.XGPCD; /* Search key*/
  FY4REC.SY1STNBR = FY0GW01.SY1STNBR; /* Search key*/
  FY4REC.FY1FCTYC = FY0GW01.FY1FCTYC; /* Get factory*/
  FY4REC.SY2CLRID = FY0GW01.SY2CLRID; /* Search key*/
  FY4REC.XDMCD = FY0GW01.XDMCD; /* Search key*/
  FY4REC.XQACD = FY0GW01.XQACD; /* Search key*/
  FY4REC.PC2INSEG = "*"; /* Move in default*/
  FY4REC.PC2INSEG = FY0GW01.PC2INSEG; /* Search key*/
  FY4REC.XPGCD = FY0GW01.XPGCD; /* Search key*/
  FY4REC.XUMCD = FY0GW01.XUMCD; /* Search key*/
  FY4REC.XSECD = " "; /* Search key*/
  FY4REC.XSNYR = 0; /* Search key*/
  FY4REC.XXXSTAT = "*"; /* Search key*/
  FYCREC.FYC1DATE = 0; /* Search key*/
  FYCREC.FYC2DATE = 999999999; /* Search key*/
  FYCREC.FYCFNC = "S4"; /* Function code*/

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select FOB set*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Everything OK*/

    return; /* Return to calling process*/

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0GS05"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0GM002.XXXPRCNM = "FY0GS05"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end FY0GS05

// Fetch (n4) dfcty.vfyfob01
Function FY0GS06()

   /* ------------------------------------------------------------*/
   /* This module Fetchs thenext table row.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  FYCREC.FYCFNC = "N4";

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FY0GW01.FY0GWSWC = "Y"; /* Turn on EOF*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0GS06"; /* Process name*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0GM002.XXXPRCNM = "FY0GS06"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any database updates*/

  exit stack; /* Exit to redisplay map*/

end // end FY0GS06

// Close (c4) dfcty.vfyfob01
Function FY0GS07()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  FYCREC.FYCFNC = "C4";

  try
    call "IO3000" (FYCREC, SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Everything OK*/

    return;

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "FY0GS07"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FY0GM001.XXXPRCNM = "FY0GS07"; /* Process name*/

  converseLib.validationFailed(10); /* Indicate system error*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any database updates*/

  exit stack; /* Exit to redisplay map*/

end // end FY0GS07

// Delete dfcty.vfyfob01
Function FY0GS08()

   /* ------------------------------------------------------------*/
   /* Delete the table row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3000" ("D ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Valid return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0GS08"; /* Process name*/
  TA1REC.TA1LOC = "DELETE TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* TABLE KEY*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  FY0GM002.XXXPRCNM = "FY0GS08"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any database updates*/

  exit stack;


end // end FY0GS08

// Adjust 'TO' date
Function FY0GS09()

   /* ------------------------------------------------------------*/
   /* FIND THE PREVIOUS MONTH BY SUBTRACTING THE NUMBER OF DAYS*/
   /* IN THE CURRENT MONTH*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "G"; /* Move in date type*/
  FY0GW01.FY0GWDTE = FY0GW01.FY4FOBED; /* Move in date*/
  FY0GW01.FY0GWDD = FY0GW01.FY0GWDD * -1; /* Make days negative*/
  TA2REC.TA2GRGGN = FY0GW01.FY4FOBED; /* Move in date*/
  TA2REC.TA2DYAOD = FY0GW01.FY0GWDD; /* Add negative days*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000" /* Good call*/
   && TA2REC.TA2RTNCD == 0000)       /* Valid date*/
    FY4REC.FY4FOXED = TA2REC.TA2GRGGN; /* Ending date*/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0GS09"; /* Process name*/
    TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

    FY0GM002.XXXPRCNM = "FY0GS09"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back any updates*/

    exit stack; /* Flow to converse map*/

  end

end // end FY0GS09

// Add dfcty.vfyfob01 row
Function FY0GS10()

   /* ------------------------------------------------------------*/
   /* This module re-adds a row to the dfcty.vfyfob01 table*/
   /* That has had the date range changed.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FY4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FY4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3000" ("A ", SQLCA, FY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Valid return code*/

    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0GS10"; /* Process name*/
  TA1REC.TA1LOC = "ADD A UNIQUE FOB TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY4REC.FY4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0GM002.XXXPRCNM = "FY0GS10"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any updates*/

  exit stack; /* Exit to redisplay map*/


end // end FY0GS10

// Adjust 'FROM' date
Function FY0GS11()

   /* ------------------------------------------------------------*/
   /* FIND THE NEXT MONTH BY ADDING ONE TO THE NUMBER OF DAYS*/
   /* IN THE CURRENT MONTH*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "G"; /* Move in date type*/
  TA2REC.TA2GRGGN = FY0GW01.FY4FOXED; /* Move in date*/
  TA2REC.TA2DYAOD = 1; /* Days to add*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000" /* Good call*/
   && TA2REC.TA2RTNCD == 0000)       /* Valid date*/
    FY4REC.FY4FOBED = TA2REC.TA2GRGGN; /* Beginning date*/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FY0GS09"; /* Process name*/
    TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

    FY0GM002.XXXPRCNM = "FY0GS09"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back any updates*/

    exit stack; /* Flow to converse map*/

  end

end // end FY0GS11

// Get valid sizes
Function FY0GS12()

   /* ------------------------------------------------------------*/
   /* THIS PROCESS WILL OBTAIN THE VALID SIZES FOR THE STYLE/COLOR*/
   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Clear record*/

  PG3REC.XGPCD = FY0GW01.XGPCD; /* GPC code*/
  PG3REC.SY1STNBR = FY0GW01.SY1STNBR; /* Style number*/
  PG3REC.SY2CLRID = FY0GW01.SY2CLRID; /* Style color*/
  PG3REC.XDMCD = FY0GW01.XDMCD; /* Dim. code*/

  PG3REC.XQACD = "**"; /* Quality code*/
  PG3REC.PG3RETCD = "00"; /* Translator return code*/

  PG3REC.PG3FUNCD = "PC"; /* Translator fnc.*/
  PG3REC.PG3DATFM = "N"; /* Compressed/Not compressed sw*/

  TA1REC.TA1PGMNM = "FY0GS12"; /* What executes this sgrp*/

  XSPG301(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                   /* SIZE BREAKS.*/

  if (PG3REC.PG3RETCD == "00")

    return; /* Return to previous process*/

  else

    if (PG3REC.PG3RETCD == "09") /* Data in use by someone else*/
      FY0GW01.FY0GWINF = "Y"; /* Turn on soft errror*/
      converseLib.validationFailed(11); /* Deadlock*/
      FY0GM001.XXXPRCNM = "FY0GS12"; /* Process name*/
    else
      FY0GW01.FY0GWINF = "N"; /* Turn off soft errror*/
      converseLib.validationFailed(10); /* Unexpected error*/
      FY0GM001.XXXPRCNM = "FY0GS12"; /* Process name*/
      exit stack;
    end
  end

end // end FY0GS12

// Select dprodg.vgasiz01 row
Function FY0GS13()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  call "IO0960" ("S ", SQLCA, PG6REC) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
   || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    FY0GM001.XXXPRCNM = "FY0GS13"; /* Process name*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0GS13"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";

  TA1REC.TA1MAP = "FY0GM001"; /* Map name*/

  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end FY0GS13

// Add dfcty.vhyfob01 row
Function FY0GS14()

   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL ADD A ROW TO THE DFCTY.VHYFOB01 HISTORY*/
   /* RECORD DATABASE.*/
   /* ----------------------------------------------------------*/

  FYIREC.XGPCD = FY4REC.XGPCD; /* Move in fields*/
  FYIREC.FY1FCTYC = FY4REC.FY1FCTYC;
  FYIREC.XSECD = FY4REC.XSECD;
  FYIREC.XSNYR = FY4REC.XSNYR;
  FYIREC.SY1STNBR = FY4REC.SY1STNBR;
  FYIREC.SY2CLRID = FY4REC.SY2CLRID;
  FYIREC.XDMCD = FY4REC.XDMCD;
  FYIREC.XQACD = FY4REC.XQACD;
  FYIREC.PC2INSEG = FY4REC.PC2INSEG;
  FYIREC.XPGCD = FY4REC.XPGCD;
  FYIREC.XUMCD = FY4REC.XUMCD;
  FYIREC.FYITPIND = FY0GW01.FYITPIND;

  XX0XS01(); /* Date routine*/

  FYIREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FYIREC.ZZZSTM = XX0XW01.XX0XWTIM;


   /* ------------------------------------------------------------*/
   /* ADD THE ROW TO THE DATABASE*/
   /* ------------------------------------------------------------*/


  try
    call "IO4790" ("A ", SQLCA, FYIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Valid return code*/

    return; /* Return to previous process*/

  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0GS14"; /* Process name*/
  TA1REC.TA1LOC = "ADD A HISTORY ROW TO TABLE";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VHYFOB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYIREC.FYIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0GM002.XXXPRCNM = "FY0GS14"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  exit stack; /* Exit to redisplay map*/


end // end FY0GS14

// Fill the fyirec price buckets
Function FY0GS15()

   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL FILL THE FYIREC AND THE VALID BUCKETS*/
   /* WITHIN THE RECORD.*/
   /* ----------------------------------------------------------*/

  FY0GW01.FY0GWPRE = 0; /* Clear price check field*/
  FY0GW01.FY0GWPIX = 1; /* Saved FY4REC index*/
  FY0GW01.FY0GWMIX = 1; /* Map placement index*/
  FY0GW01.FY0GWRIX = 0; /* FY4REC placement index*/

   /* ------------------------------------------------------------*/
   /* THIS LOOP WILL DETERMINE THE FOB PRICE FOR A GIVEN RANGE*/
   /* IF THE RANGE IS VALID.*/
   /* ------------------------------------------------------------*/

  while (FY0GW03.FY0GWDPS[FY0GWPIX] != 0)
    while (FY0GM002.FY4FOBPR[FY0GWMIX] == FY0GW01.FY0GWPRE /* Prices equal*/
     && FY0GW03.FY0GWDPS[FY0GWPIX] != 0)
      FY0GW01.FY0GWRIX = FY0GW03.FY0GWDPS[FY0GWPIX];
      FYIREC.FY4FOBPR[FY0GWRIX] = FY0GW01.FY0GWPRE;
      FY0GW01.FY0GWPRE = FY0GM002.FY4FOBPR[FY0GWMIX]; /* Prices equal*/
      FY0GW01.FY0GWMIX = FY0GW01.FY0GWMIX + 1;
      FY0GW01.FY0GWPIX = FY0GW01.FY0GWPIX + 1;
      if (FY0GM002.FY4FOBPR[FY0GWMIX] == 0) /* Nothing in field*/
        FY0GM002.FY4FOBPR[FY0GWMIX] = FY0GW01.FY0GWPRE;
      else
        FYIREC.FY4FOBPR[FY0GWRIX] = FY0GW01.FY0GWPRE;
      end
    end
    FY0GW01.FY0GWPRE = FY0GM002.FY4FOBPR[FY0GWMIX];
  end


end // end FY0GS15

// Select dprodc.vprdcu01 row
Function FY0GS16()
   /* ------------------------------------------------------------*/
   /* Select inventory segment code*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous precess.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user*/
   /* otherwise, indicate that an unexpected error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (FY0GW01.FY0GWMAP == 1)
    FY0GM001.XXXPRCNM = "FY0GS16"; /* Process identification*/
  else
    FY0GM002.XXXPRCNM = "FY0GS16";
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (FY0GW01.FY0GWMAP == 1)
      converseLib.clearScreen();
       /* Clear screen before display*/
    else
      converseLib.clearScreen();
      
    end

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S16"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2INSEG; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end FY0GS16

// Check for existing prices
Function FY0GS17()
   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL CHECK THE EXISTING ROWS TO INSURE THAT*/
   /* IF A PRICE ALREADY EXISTS, IT WILL NOT BE ZEROED.*/
   /* ----------------------------------------------------------*/

  if (FY0GM002.FY4FOBPR[1] == 0) /* No price entered*/

    FY0GW01.FY0GWIX1 = 1; /* Saved FY4REC index*/

    while (FY0GW01.FY0GWIX1 <= 40) /* while more buckets*/

      if (FY4REC.FY4FOBPR[FY0GWIX1] > 0) /* Price entered*/
        converseLib.validationFailed(158); /* Prices exist for p.o. id entered*/
        FY0GM002.XXXPRCNM = "FY0GS17"; /* Process in error*/
        FY0GW01.FY0GWINF = "N"; /* Turn on hard error*/
        set FY0GM002.FY4FOBPR[1] cursor, modified, bold;
        exit stack;
      end

      FY0GW01.FY0GWIX1 = FY0GW01.FY0GWIX1 + 1; /* increment index*/
    end
  end

end // end FY0GS17

// TAG REC FOR B-GRADE
Function FY0GS18()
   /* ------------------------------------------------------------*/
   /* CREATE TAG RECORD FOR B-GRADE*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* GET B-GRADE %*/
   /* DIVIDE BY 100*/
   /* MULTIPLY EACH PRICE BUCKET BY THAT FIGURE.*/
   /* WRITE OUT TAG RECORD.*/
   /* ------------------------------------------------------------*/

  FY1REC.FY1FCTYC = FY4REC.FY1FCTYC;
  FY1REC.XGPCD = FY4REC.XGPCD;

  FY0GS03(); /* FETCH B-GRADE %*/

  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  else
    FY0GW01.FY0GWPCT = FY1REC.FY1BGDPC / 100;

    FY0GW01.FY0GWIXP = 1;
    while (FY0GW01.FY0GWIXP != 41)
      FYHREC.FY4FOBPR[FY0GWIXP] = FYHREC.FY4FOBPR[FY0GWIXP] * FY0GW01.FY0GWPCT;
      FY0GW01.FY0GWIXP = FY0GW01.FY0GWIXP + 1;
    end

    FYHREC.XQACD = "02";

    FY0GS19(); /* INSERT B-GRDE TAG RECORD*/

    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
  end

end // end FY0GS18

// INSERT B-GRDE TAG RECORD
Function FY0GS19()

   /* ----------------------------------------------------------*/
   /* THIS MODULE WILL ADD A ROW TO THE DFCTY.VFYTAG01 TAG*/
   /* THIS WILL BE A B-GRADE TAG RECORD.*/
   /* ----------------------------------------------------------*/



  XX0XS01(); /* Date routine*/

  FYHREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FYHREC.ZZHHMMSS = XX0XW01.XX0XWHMS;


   /* ------------------------------------------------------------*/
   /* ADD THE ROW TO THE DATABASE*/
   /* ------------------------------------------------------------*/


  try
    call "IO4550" ("A ", SQLCA, FYHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Valid return code*/

    return; /* Return to previous process*/

  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FY0GS19"; /* Process name*/
  TA1REC.TA1LOC = "ADD A B-GRDE TAG RECORD TO TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYTAG01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYHREC.FYHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error  routine*/

  FY0GM002.XXXPRCNM = "FY0GS19"; /* Process name*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  exit stack; /* Exit to redisplay map*/


end // end FY0GS19

//*** RECORD=FY0GW01 ****
// Working storage for FY0G - FOB BY P.O. ID
// ***********************
Record FY0GW01 type basicRecord
  10 XXXRVNBR XXXRVNBR ; 
  10 FY0GWSWC FY0GWSWC ; 
  10 FY0GWSCD FY0GWSCD ; 
  10 FY0GWSWR FY0GWSWR ; 
  10 FY0GMTSP FY0GMTSP ; 
  10 FY0GWPIX FY0GWPIX ; 
  10 FY0GWRIX FY0GWRIX ; 
  10 FY0GWMIX FY0GWMIX ; 
  10 FY0GWIXM FY0GWIXM ; 
  10 FY0GWIX1 FY0GWIX1 ; 
  10 FY0GWSZI FY0GWSZI ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FY0GSQIX FY0GSQIX ; 
  10 FY0GWMAP FY0GWMAP ; 
  10 FY4QTDPR FY4QTDPR ; 
  10 FY0GWOQP FY0GWOQP ; 
  10 FY4TGTPR FY4TGTPR ; 
  10 FY4FOBPR FY4FOBPR ; 
  10 FY0GWOSP FY0GWOSP ; 
    15 FY0GWFOB FY0GWFOB [40] ; 
  10 FY1BGDPC FY1BGDPC ; 
  10 FY4FOXED FY4FOXED ; 
  10 FY0GWSFD FY0GWSFD ; 
  10 FY0GWSTD FY0GWSTD ; 
  10 FY0GWSDM FY0GWSDM ; 
  10 FY0GWOXD FY0GWOXD ; 
  10 FY0GWXED FY0GWXED ; 
    15 FY0GWXCC FY0GWXCC ; 
    15 FY0GWXYY FY0GWXYY ; 
    15 FY0GWXMM FY0GWXMM ; 
    15 FY0GWXDD FY0GWXDD ; 
  10 * char(1) ; // --- Y2K IN BEGIN ---
  10 FY0GWPCX FY0GWPCX ; 
    15 FY0GWPCY FY0GWPCY ; 
      20 FY0GWPCC FY0GWPCC ; 
      20 FY0GWPYY FY0GWPYY ; 
    15 FY0GWPMM FY0GWPMM ; 
    15 FY0GWPDD FY0GWPDD ; 
  10 * char(1) ; // --- Y2K IN END -----
  10 FY0GWPOX FY0GWPOX ; 
    15 FY0GWYYY FY0GWYYY ; 
    15 FY0GWMMM FY0GWMMM ; 
    15 FY0GWDDD FY0GWDDD ; 
  10 FY0GMPDM FY0GMPDM ; 
  10 FY0GMFCT FY0GMFCT ; 
  10 FY4FOBED FY4FOBED ; 
  10 FY0GWOBD FY0GWOBD ; 
  10 FY0GWBED FY0GWBED ; 
    15 FY0GWBCC FY0GWBCC ; 
    15 FY0GWBYY FY0GWBYY ; 
    15 FY0GWBMM FY0GWBMM ; 
    15 FY0GWBDD FY0GWBDD ; 
  10 FY0GWPOB FY0GWPOB ; 
    15 FY0GWFYR FY0GWFYR ; 
    15 FY0GWFMO FY0GWFMO ; 
    15 FY0GWDAY FY0GWDAY ; 
  10 FY0GWFDM FY0GWFDM ; 
  10 FY0GMTYR FY0GMTYR ; 
  10 FY0GMTMO FY0GMTMO ; 
  10 FY0GMTDM FY0GMTDM ; 
  10 FY0GWBYR FY0GWBYR ; 
  10 FY0GWBMO FY0GWBMO ; 
  10 FY0GWBDM FY0GWBDM ; 
  10 FY0GWTYR FY0GWTYR ; 
  10 FY0GWTMO FY0GWTMO ; 
  10 FY0GWTDM FY0GWTDM ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 XGPABRV XGPABRV ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XGACD XGACD ; 
  10 XTVCD XTVCD ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 FY4BRCMO FY4BRCMO ; 
  10 FY4ERCMO FY4ERCMO ; 
  10 SY1STNBR SY1STNBR ; 
  10 FY0GWSTY FY0GWSTY ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 FY0GWPRE FY0GWPRE ; 
  10 FY0GWPPO FY0GWPPO ; 
  10 FY0GWIND FY0GWIND ; 
  10 FYITPIND FYITPIND ; 
  10 FY0GWLSF FY0GWLSF ; 
  10 FY0GWPRO FY0GWPRO ; 
  10 FY0GWDEL FY0GWDEL ; 
  10 FY0GWINQ FY0GWINQ ; 
  10 FY0GWUPD FY0GWUPD ; 
  10 FY0GWADD FY0GWADD ; 
  10 FY0GWCSF FY0GWCSF ; 
  10 FY0GWDCH FY0GWDCH ; 
  10 FY0GWPCH FY0GWPCH ; 
  10 FY0GWCSK FY0GWCSK ; 
    15 FY0GWCYR FY0GWCYR ; 
    15 FY0GWDH1 FY0GWDH1 ; 
    15 FY0GWCMO FY0GWCMO ; 
    15 FY0GWDH2 FY0GWDH2 ; 
    15 FY0GWCDM FY0GWCDM ; 
    15 FY0GWDH3 FY0GWDH3 ; 
    15 FY0GWCFY FY0GWCFY ; 
  10 CAITEM CAITEM ; 
    15 FY0GWFNC FY0GWFNC ; 
    15 * char(19) ; 
  10 FY0GWDEF FY0GWDEF ; 
  10 FY0GWDFL FY0GWDFL ; 
  10 FY0GWINF FY0GWINF ; 
  10 FY0GWDTE FY0GWDTE ; 
    15 FY0GWCEN FY0GWCEN ; 
    15 FY0GWYY FY0GWYY ; 
    15 FY0GWMM FY0GWMM ; 
    15 FY0GWDD FY0GWDD ; 
  10 ZZZSDT ZZZSDT ; 
  10 FY0GWPCT FY0GWPCT ; 
  10 FY0GWIXP FY0GWIXP ; 
end // end FY0GW01

//*** RECORD=FY0GW02 ****
// Temporary storage record for FY0G - FOB BY P.O. ID map line
// ***********************
Record FY0GW02 type basicRecord
  10 FY0GWLEN FY0GWLEN ; 
  10 FY0GWLIN FY0GWLIN [12] ; 
    15 FY0GMSEL FY0GMSEL ; 
    15 FY0GMFPO FY0GMFPO ; 
      20 FY0GWBYY FY0GWBYY ; 
      20 FY0GWDH1 FY0GWDH1 ; 
      20 FY0GWBMM FY0GWBMM ; 
      20 FY0GWDH2 FY0GWDH2 ; 
      20 FY4BRCMO FY4BRCMO ; 
      20 FY0GWDH3 FY0GWDH3 ; 
      20 FY0GWBFY FY0GWBFY ; 
    15 FY0GMPDS FY0GMPDS ; 
    15 FY0GMTPO FY0GMTPO ; 
      20 FY0GWXYY FY0GWXYY ; 
      20 FY0GWDH4 FY0GWDH4 ; 
      20 FY0GWXMM FY0GWXMM ; 
      20 FY0GWDH5 FY0GWDH5 ; 
      20 FY4ERCMO FY4ERCMO ; 
      20 FY0GWDH6 FY0GWDH6 ; 
      20 FY0GWXFY FY0GWXFY ; 
    15 FY4QTDPR FY4QTDPR ; 
    15 FY0GMCDT FY0GMCDT ; 
    15 FY0GMFSZ FY0GMFSZ ; 
    15 FY0GMSDS FY0GMSDS ; 
    15 FY0GMTSZ FY0GMTSZ ; 
    15 FY4FOBPR FY4FOBPR ; 
    15 FY4FOBED FY4FOBED ; 
    15 FY4FOXED FY4FOXED ; 
    15 FY4SMDCT FY4SMDCT ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
end // end FY0GW02

//*** RECORD=FY0GW03 ****
// FOB SIZE LINE FOR MAP 2
// ***********************
Record FY0GW03 type basicRecord
  10 FY0GWLN1 FY0GWLN1 [40] ; 
    15 FY0GWMPS FY0GWMPS ; 
  10 FY0GWLN2 FY0GWLN2 [40] ; 
    15 FY0GWDPS FY0GWDPS ; 
end // end FY0GW03

// Last modified date
DataItem FY0GMCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// To factory code
DataItem FY0GMFCT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From P.O. id
DataItem FY0GMFPO char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First size
DataItem FY0GMFSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To delivery month
DataItem FY0GMPDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem FY0GMPDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem FY0GMSDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection field
DataItem FY0GMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Del. month map2
DataItem FY0GMTDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// To month map2
DataItem FY0GMTMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Ending P.O. id
DataItem FY0GMTPO char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page number
DataItem FY0GMTSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Second size
DataItem FY0GMTSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To year map2
DataItem FY0GMTYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Highest page no./index
DataItem FY0GSQIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Successful add flag
DataItem FY0GWADD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beg. centry
DataItem FY0GWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beg. day
DataItem FY0GWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// From del. month char
DataItem FY0GWBDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beg. group
DataItem FY0GWBED num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory code
DataItem FY0GWBFY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beg. month
DataItem FY0GWBMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From month char
DataItem FY0GWBMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From year char
DataItem FY0GWBYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beg. year
DataItem FY0GWBYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID del. month
DataItem FY0GWCDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working century
DataItem FY0GWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID factory
DataItem FY0GWCFY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID month
DataItem FY0GWCMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor set flag
DataItem FY0GWCSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change save key
DataItem FY0GWCSK char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year
DataItem FY0GWCYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From day
DataItem FY0GWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date change flag
DataItem FY0GWDCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working day
DataItem FY0GWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem FY0GWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data entered flag
DataItem FY0GWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete complete flag
DataItem FY0GWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save flag
DataItem FY0GWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash1
DataItem FY0GWDH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash2
DataItem FY0GWDH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash3
DataItem FY0GWDH3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash4
DataItem FY0GWDH4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash5
DataItem FY0GWDH5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash6
DataItem FY0GWDH6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data base position
DataItem FY0GWDPS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working date
DataItem FY0GWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// From delivery month
DataItem FY0GWFDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_ID_MO
DataItem FY0GWFMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Function flag
DataItem FY0GWFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FOB_PRC
DataItem FY0GWFOB decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_ID_YR
DataItem FY0GWFYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line count flag
DataItem FY0GWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Information error
DataItem FY0GWINF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry complete flag
DataItem FY0GWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage index
DataItem FY0GWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FY0GWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for TAG RECORD
DataItem FY0GWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem FY0GWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// List map line
DataItem FY0GWLIN char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// List map line 1
DataItem FY0GWLN1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// list map line 2
DataItem FY0GWLN2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// List map flag
DataItem FY0GWLSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem FY0GWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size index for map2
DataItem FY0GWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working month
DataItem FY0GWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FY0GWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map position
DataItem FY0GWMPS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Old beg. date
DataItem FY0GWOBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Old qouted price
DataItem FY0GWOQP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size/price group level
DataItem FY0GWOSP char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Old ending date
DataItem FY0GWOXD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem FY0GWPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Price change flag
DataItem FY0GWPCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// B GRDE% / 100
DataItem FY0GWPCT decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO x ccyymmdd date
DataItem FY0GWPCX num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century and year
DataItem FY0GWPCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem FY0GWPDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index
DataItem FY0GWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FY0GWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO beg date
DataItem FY0GWPOB num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO x date
DataItem FY0GWPOX num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous P.O. ID
DataItem FY0GWPPO char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous price
DataItem FY0GWPRE decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Protect flag
DataItem FY0GWPRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem FY0GWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FY4REC index
DataItem FY0GWRIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Second time thru flag
DataItem FY0GWSCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved delivery month
DataItem FY0GWSDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved from date
DataItem FY0GWSFD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved to date
DataItem FY0GWSTD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working storage style number
DataItem FY0GWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FY0GWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FY0GWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for sizes
DataItem FY0GWSZI smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// To del month char
DataItem FY0GWTDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To month char
DataItem FY0GWTMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To year char
DataItem FY0GWTYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change complete flag
DataItem FY0GWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ending centry
DataItem FY0GWXCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending day
DataItem FY0GWXDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending group
DataItem FY0GWXED num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory code
DataItem FY0GWXFY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ending month
DataItem FY0GWXMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ending year
DataItem FY0GWXYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working year
DataItem FY0GWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FY0GWYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

