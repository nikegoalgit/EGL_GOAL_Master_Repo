package in0t;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=IN0T ****
// ************************************************************
// 
//           STOCK TRANSFER INQUIRIES
//           ========================
// 
// ************************************************************
// 
// OVERVIEW: This application displays a menu (or uses PFkeys)
//           to choose the desired stock transfer inquiry.
// 
//           The selection values:PFkeys are:
//           1:13 - Stock Transfer Document Header Inquiry
//           2:14 - Stock Transfer Document Item(s) Inquiry
//           3:15 - Stock Transfer Product Data Inquiry
//           4:16 - Stock Transfer Warehouse Data Inquiry
//           5    - Stock Transfer By Customer Inquiry
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  11/15/86  ward jones  created
// 01  01/??/87  ward jones  added use of in0twx1.in0twmno to
//                           fix loss of ezemno w/'display'
// 03  01/04/87 Rick Connoly added use of in0twx1.in0twmno
// 04  10/05/87 g. amen      activate spec diff for phase 3
// 05  09/13/88 ward jones   rest scrn if fast path error
// 06  11/02/88 john wood    add noncsp opt to calls
// --  04/25/89 john wood    added xssegtr logic
// --  03/09/90 kande1       chged map title special instruct-
//                           ions to special label instructions
// 07  10/12/90 joan moore   display dont ship before and dont
//                           ship after dates on inotm010
// 08  02/18/92 gray         pick and pack code enhancements
// IN#183 04/10/92 DCHIAN    Add new option for Stock Transfer
//                           Inquiry by Customer (IN0Q). Change
//                           all reference in0i___ to in0t___.
// IN#0   10/13/92 dchian    Regenned for table changes.
// IN201  03/15/93 THARR1    Changed stmt grp IN0TSG3 to use
//                           the XWHCD from the commarea to get
//                           the default GPC from the XWHTBL.
// 1H8400 10/12/93 SMACMI    Changed length of IN0TWDL3 (detail
//                           data line ) in IN0TW03 to match
//                           length of IN0TWSL3 (summary data
//                           line). This was causing ASRA in
//                           new 4.1 environment.
// 1H0003 11/18/93 SMACMI    European Phase I changes; enhanced
//                           call to Help (GD01) pgm.
// IN0259 02/15/94 DANNAN    Corrected a problem with option 4.
//                           Floating map overlaying permanent
//                           map selection field.  Column was
//                           being set autoskip dark for
//                           initial display, & not back to DEF
//                           for subsequent displays.  This was
//                           causing a problem because you
//                           could see the selection column
//                           but couldn't get to it to select.
// IN0260 03/22/94 DANNAN    Corrected a problem with option 3.
//                           Working storage fields for date
//                           conversions from the IN7REC, the
//                           stock transfer header, were not
//                           being reinitialized to zero for
//                           multiple rows when building the
//                           TSQ rows. Stmtgrp = IN0TS3G.
// IN0263 05/18/94 DANNAN    Corrected a problem with option 1.
//                           When users were displaying more
//                           than one stock transfer header,
//                           the map was not cleared of the
//                           previous stock transfer values.
//                           Statement group IN0TSC1.
// IN0268 06/14/94 DANNAN    Removed direct calls to VCOLOR01
//                           and VSTYLE01 and replaced with a
//                           call to a product access subr.,
//                           IN8020.  Removed SY1REC and SY2REC
//                           and added INGREC.  Removed SGRPS
//                           IN0TSXA & IN0TSXB that called
//                           those IO mods.
// y2kfix 03/11/98 pharwo    remove hard coded from in0t010 &
//                           remove unnecessary code - in0tsy0
// ************************************************************
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// IO0240    DCUST.VCMPNY01
// IO0340    DCUST.VSTORE01
// IO0720    DINVNT.VTFHDR01
// IO0730    DINVNT.VTFITM01
// IO0860    DPICK.VCARR001
// 
// ************************************************************
// ************************************************************
// *********************
Program IN0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IN00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IN0TW01 IN0TW01; // record
  IN0TW02 IN0TW02; // record
  IN0TW03 IN0TW03; // record
  IN0TW04 IN0TW04; // record
  IN0TWX1 IN0TWX1; // record
  IN0TWXP1 IN0TWXP1; // record
  IN0TWXP2 IN0TWXP2; // record
  IN2REC IN2REC; // record
  IN7REC IN7REC; // record
  IN8REC IN8REC; // record
  INGREC INGREC; // record
  INRREC INRREC; // record
  INRREC08 INRREC08 { redefines = INRREC } ; // record
  INWREC INWREC; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA2REC01 TA2REC01 { redefines = TA2REC } ; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XIRTBL {deleteAfterUse = yes}; // table
  use XISTBL {deleteAfterUse = yes}; // table
  use XIUTBL {deleteAfterUse = yes}; // table
  use XPPTBL {deleteAfterUse = yes}; // table
  use XPATBL; // table
  use XPKTBL; // table
  use IN0TM.IN0TM005,  // forms
      IN0TM.IN0TM010, 
      IN0TM.IN0TM020, 
      IN0TM.IN0TM021, 
      IN0TM.IN0TM022, 
      IN0TM.IN0TM025, 
      IN0TM.IN0TM026, 
      IN0TM.IN0TM029, 
      IN0TM.IN0TM030, 
      IN0TM.IN0TM031, 
      IN0TM.IN0TM032, 
      IN0TM.IN0TM035, 
      IN0TM.IN0TM036, 
      IN0TM.IN0TM039, 
      IN0TM.IN0TM040, 
      IN0TM.IN0TM041, 
      IN0TM.IN0TM045, 
      IN0TM.IN0TM049
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IN0T010: IN0T010();


    IN0TWX1.XXXMODID = "01F";

     /* ************************************************************/
     /* *** flow decisions based on CAITEM as selection         ****/
     /* *** note: invalid values detected when there is NOT     ****/
     /* ***       an equivalent selection                       ****/
     /* *** note: character data is used re: CAITEM = character ****/
     /* ************************************************************/

    if (IN0TM005.IN0TMSNO > " ")
      if (IN0TM005.IN0TMSNO == "1")
        goto IN0T110; /* <=== display document header*/
      end
      if (IN0TM005.IN0TMSNO == "2")
        goto IN0T210; /* <=== display document items*/
      end
      if (IN0TM005.IN0TMSNO == "3")
        goto IN0T310; /* <=== display product data*/
      end
      if (IN0TM005.IN0TMSNO == "4")
        goto IN0T410; /* <=== display warehouse data*/
      end
      if (IN0TM005.IN0TMSNO == "5")
        goto IN0T510; /* <=== transfer to in0q cust data*/
      end
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0010); /* <--- invalid selection passed msg*/
      goto IN0T020; /* <=== display menu screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0T020; /* <=== display menu screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0T020: IN0T020();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWERS == "Y")
      goto IN0T020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if enter: use selection to determine flow           ****/
     /* *** note: invalid values detected when there is NOT     ****/
     /* ***       an equivalent selection                       ****/
     /* *** note: character data is used re: CAITEM = character ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (IN0TM005.IN0TMSNO == "1")
        goto IN0T110; /* <=== display document header*/
      end
      if (IN0TM005.IN0TMSNO == "2")
        goto IN0T210; /* <=== display document items*/
      end
      if (IN0TM005.IN0TMSNO == "3")
        goto IN0T310; /* <=== display product data*/
      end
      if (IN0TM005.IN0TMSNO == "4")
        goto IN0T410; /* <=== display warehouse data*/
      end
      if (IN0TM005.IN0TMSNO == "5")
        goto IN0T510; /* <=== transfer to in0q cust data*/
      end
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
      IN0TWX1.IN0TWMNO = 0011; /* <--- invalid selection value msg*/
      /* MOVE 0011 TO EZEMNO   ; <--- invalid selection value msg*/
      goto IN0T020; /* <=== display menu screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto IN0T110; /* <=== display document header*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0T210; /* <=== display document items*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0T310; /* <=== display product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0T410; /* <=== display whse data*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0T010; /* <=== re-start this function*/
    end

    IN0TWX1.XXXMODID = "02F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
    IN0TWX1.IN0TWMNO = 0008; /* <--- fall thru error msg*/
     /* mOVE 0008 TO EZEMNO             ; <--- fall thru error msg*/
    goto IN0T020; /* <=== display menu screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0T110: IN0T110();


     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    goto IN0T120; /* <=== display screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0T120: IN0T120();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWERS == "Y")
      if (IN0TWX1.IN0TWSES == "Y")
        goto IN0T110; /* <=== re-setup this screen*/
      else
        goto IN0T120; /* <=== re-display this screen*/
      end
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0T120; /* <=== display this screen*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0T110; /* <=== display document header*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0T210; /* <=== display document items*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0T310; /* <=== display product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0T410; /* <=== display whse data*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0T010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0T110; /* <=== re-start this function*/
    end

    IN0TWX1.XXXMODID = "12F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    IN0TWX1.IN0TWMNO = 0008; /* <--- fall thru error msg*/
     /* MOVE 0008 TO EZEMNO            ; <--- fall thru error msg*/
    goto IN0T120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0T210: IN0T210();


     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    goto IN0T225; /* <=== display screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0T220: IN0T220();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWERS == "Y")
      if (IN0TWX1.IN0TWSES == "Y")
        goto IN0T210; /* <=== re-setup this screen*/
      else
        goto IN0T220; /* <=== re-display this screen*/
      end
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (IN0TWX1.IN0TWLPF == "E")
        goto IN0T225; /* <=== disp sum titles*/
      else
        goto IN0T226; /* <=== disp det titles*/
      end
    end

    if (converseVar.eventKey is pf13)
      goto IN0T110; /* <=== display document header*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0T210; /* <=== display document items*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0T310; /* <=== display product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0T410; /* <=== display whse data*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0T010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0T210; /* <=== re-start this function*/
    end

    IN0TWX1.XXXMODID = "22F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    IN0TWX1.IN0TWMNO = 0008; /* <--- fall thru error msg*/
     /* MOVE 0008 TO EZEMNO            ; <--- fall thru error msg*/
    goto IN0T220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0T221: IN0T221();


     /* ************************************************************/
     /* *** if error: display the cleared screen (SES=Y)        ****/
     /* ************************************************************/


    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end

    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      goto IN0T210; /* <=== display cleared screen*/
    end

     /* ************************************************************/
     /* *** if last pfkey was pf6: go back to display detail    ****/
     /* *** note: det disp used this after reading sum record   ****/
     /* ***       and needs control back again                  ****/
     /* ************************************************************/

    if (IN0TWX1.IN0TWLPF == "6")
      goto IN0T222; /* <=== disp det data lf*/
    end

     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      goto IN0T221; /* <=== disp sum data lf*/
    else
      goto IN0T220; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T222: IN0T222();


     /* ************************************************************/
     /* *** if error: display the cleared screen (SES=Y)        ****/
     /* ************************************************************/


    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end

    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      goto IN0T210; /* <=== display cleared screen*/
    end

     /* ************************************************************/
     /* *** if record type is summary: use summary display      ****/
     /* ************************************************************/

    if (IN0TW02.IN0TWDRT == "S")
      goto IN0T221; /* <=== disp sum data lf*/
    end

     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      goto IN0T222; /* <=== disp det data lf*/
    else
      goto IN0T220; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T225: IN0T225();


     /* ************************************************************/
     /* *** if NOT initial pass, go to:  first disp sum data lf ****/
     /* ************************************************************/


    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end

    if (IN0TWX1.IN0TWIPS == "Y")
      IN0TWX1.IN0TWIPS = "N";
      goto IN0T229; /* <=== fill page with blank lines*/
    else
      goto IN0T221; /* <=== disp sum data lf*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T226: IN0T226();


     /* ************************************************************/
     /* *** go to:  first disp det data lf                      ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    goto IN0T222; /* <=== disp det data lf*/

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T229: IN0T229();


     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      goto IN0T229; /* <=== disp blank lines*/
    else
      goto IN0T220; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T310: IN0T310();


     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    goto IN0T325; /* <=== display screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0T320: IN0T320();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWERS == "Y")
      if (IN0TWX1.IN0TWSES == "Y")
        goto IN0T310; /* <=== re-setup this screen*/
      else
        goto IN0T320; /* <=== re-display this screen*/
      end
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (IN0TWX1.IN0TWLPF == "E")
        goto IN0T325; /* <=== disp sum data*/
      else
        goto IN0T326; /* <=== disp det data*/
      end
    end

    if (converseVar.eventKey is pf13)
      goto IN0T110; /* <=== display document header*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0T210; /* <=== display document items*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0T310; /* <=== display product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0T410; /* <=== display whse data*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0T010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0T310; /* <=== re-start this function*/
    end

    IN0TWX1.XXXMODID = "32F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    IN0TWX1.IN0TWMNO = 0008; /* <--- fall thru error msg*/
     /* MOVE 0008 TO EZEMNO             ; <--- fall thru error msg*/
    goto IN0T320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0T321: IN0T321();


     /* ************************************************************/
     /* *** if error: display the cleared screen (SES=Y)        ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      goto IN0T310; /* <=== display cleared screen*/
    end

     /* ************************************************************/
     /* *** if last pfkey was pf6: go back to display detail    ****/
     /* *** note: det disp used this after reading sum record   ****/
     /* ***       and needs control back again                  ****/
     /* ************************************************************/

    if (IN0TWX1.IN0TWLPF == "6")
      goto IN0T322; /* <=== disp det data lf*/
    end

     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      goto IN0T321; /* <=== disp sum data lf*/
    else
      goto IN0T320; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T322: IN0T322();


     /* ************************************************************/
     /* *** if error: display the cleared screen (SES=Y)        ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      goto IN0T310; /* <=== display cleared screen*/
    end

     /* ************************************************************/
     /* *** if record type is summary: use summary display      ****/
     /* ************************************************************/

    if (IN0TW03.IN0TWDRT == "S")
      goto IN0T321; /* <=== disp sum data lf*/
    end

     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      goto IN0T322; /* <=== disp det data lf*/
    else
      goto IN0T320; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T325: IN0T325();


     /* ************************************************************/
     /* *** if NOT initial pass, go to:  first disp sum data lf ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWIPS == "Y")
      IN0TWX1.IN0TWIPS = "N";
      goto IN0T329; /* <=== fill page with blank lines*/
    else
      goto IN0T321; /* <=== disp sum data lf*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T326: IN0T326();


     /* ************************************************************/
     /* *** go to:  first disp det data lf                      ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    goto IN0T322; /* <=== disp det data lf*/

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T329: IN0T329();


     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      goto IN0T329; /* <=== disp blank lines*/
    else
      goto IN0T320; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T410: IN0T410();


     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    goto IN0T425; /* <=== display screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0T420: IN0T420();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWERS == "Y")
      if (IN0TWX1.IN0TWSES == "Y")
        goto IN0T410; /* <=== re-setup this screen*/
      else
        goto IN0T420; /* <=== re-display this screen*/
      end
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (IN0TWX1.IN0TWSXS == "Y")
        goto IN0T110; /* <=== display document header*/
      else
        goto IN0T425; /* <=== disp sum titles*/
      end
    end

    if (converseVar.eventKey is pf13)
      goto IN0T110; /* <=== display document header*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0T210; /* <=== display document items*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0T310; /* <=== display product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0T410; /* <=== display whse data*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0T010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0T410; /* <=== re-start this function*/
    end

    IN0TWX1.XXXMODID = "42F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    IN0TWX1.IN0TWMNO = 0008; /* <--- fall thru error msg*/
     /* MOVE 0008 TO EZEMNO            ; <--- fall thru error msg*/
    goto IN0T420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0T421: IN0T421();


     /* ************************************************************/
     /* *** if error: display the cleared screen (SES=Y)        ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      goto IN0T410; /* <=== display cleared screen*/
    end

     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      goto IN0T421; /* <=== disp sum data lf*/
    else
      goto IN0T420; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T425: IN0T425();


     /* ************************************************************/
     /* *** if NOT initial pass, go to:  first disp sum data lf ****/
     /* ************************************************************/


    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end

    if (IN0TWX1.IN0TWIPS == "Y")
      IN0TWX1.IN0TWIPS = "N";
      goto IN0T429; /* <=== fill page with blank lines*/
    else
      IN0TWX1.IN0TWCTR = 1;
      while (IN0TWX1.IN0TWCTR <= IN0TWX1.IN0TWLPP)
        set IN0TM040.IN0TMSEL[IN0TWCTR] initialAttributes;
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      goto IN0T421; /* <=== disp sum data lf*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T429: IN0T429();


     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/


    if (converseVar.validationMsgNum > 0)
      IN0TWX1.IN0TWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end

    if (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      goto IN0T429; /* <=== disp blank lines*/
    else
      goto IN0T420; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0T510: IN0T510();
  end // end main
end // end IN0T

// IN0t010 - init. for IN0t020
Function IN0T010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();
  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0TM005 initial;
  set IN0TWX1 empty;
  set IN0TW01 empty;
  set IN0TW02 empty;
  set IN0TW03 empty;
  set IN0TW04 empty;
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set IN0TWXP1 empty;
  set IN0TWXP2 empty;
  set INGREC empty;
  set INWREC empty;
  set IN7REC empty;
  set IN8REC empty;
  set KUCREC empty;
  set KUMREC empty;
  set TF1REC empty;
  set SYPREC empty;
  IN0TM005.XXXERRID = "IN0T020 ";
  IN0TM005.XXXMAPNM = "IN0TM005";
  IN0TM005.XXXTITLE = "STOCK TRANSFER INQUIRY MENU";
  IN0TM005.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0TWX1.IN0TWERS = "N";
  IN0TWX1.IN0TWSES = "N";
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE EZEDTE TO IN0TWX1.IN0TWCDT;*/
   /* MOVE 19 TO IN0TWX1.IN0TWCCC;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  IN0TWX1.IN0TWCDT = VGVar.currentGregorianDate;
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  11/14/86  W. Jones      created                ****/
   /* ***  01  01/13/87  W. Jones      misc.                  ****/
   /* ***  02  04/04/87  R. Connoly    created ws for ezemno  ****/
   /* ***  05  09/13/88  W. Jones      reset scrn if fast     ****/
   /* ***                              path error             ****/
   /* ***  06  11/02/88  j. wood       noncsp opt add to calls****/
   /* ***                                                     ****/
   /* *** note: ws field used re: same no. on all in0a maps   ****/
   /* ************************************************************/

  IN0TWX1.XXXRVNBR = "05";
  IN0TM005.XXXRVNBR = IN0TWX1.XXXRVNBR;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0TWX1.IN0TWLPP = 16;

  IN0TWX1.XXXAPPID = "IN0T";
  IN0TWX1.IN0TWLOC = "IN0T010 ";

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    IN0TSY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* *************************************************************/
   /* call in8000 to get theater of operation*/
   /* *************************************************************/

  XSINS-THEATEROPR();

  if (INRREC.INR-RETURN-CODE < 2) /* 0=req rec found, 1=use default*/

    if (INRREC08.INR-EXTRN-DT-FMT[INR-SEARCH-SUB] == "J") /* Europe*/
      IN0TM005.IN0T-STRTDT-HDR = "DDMMYY";
      IN0TM005.IN0T-ENDDT-HDR = "DDMMYY";
    else /* Domestic*/
      IN0TM005.IN0T-STRTDT-HDR = "MMDDYY";
      IN0TM005.IN0T-ENDDT-HDR = "MMDDYY";
    end

  else
    converseLib.validationFailed(39); /* system error occurred*/
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/
end // end IN0T010

// IN0t020 - converse & edits
Function IN0T020()


   /* ************************************************************/
   /* *** check ws for message to be displayed                ****/
   /* ************************************************************/


  if (IN0TWX1.IN0TWMNO > 0)
    if (IN0TWX1.IN0TWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0TWX1.IN0TWMNO);
    end
    IN0TWX1.IN0TWMNO = 0;
  end



  converse IN0TM005 ;


  IN0TWX1.XXXMODID = "020";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0TM005.CATOAP > " ")
    COMMAREA.CATOAP = IN0TM005.CATOAP;
    COMMAREA.CAITEM = IN0TM005.CAITEM;
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM005.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0TM005.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWERS = "N";
  IN0TM005.VAGen_EZEMSG = " ";
  IN0TM005.XXXERRID = "IN0T020 ";
  set IN0TM005.CATOAP initialAttributes;
  set IN0TM005.CAITEM initialAttributes;
  set IN0TM005.IN0TMSNO cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0TM005.IN0TMSNO initialAttributes;
  set IN0TM005.IN0TMSDT initialAttributes;
  set IN0TM005.IN0TMEDT initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0TM005.CAITEM > " ")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0TM005.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process                        ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0TSH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level = inv menu     ****/
   /* *** note: inv menu requires exiting application instead ****/
   /* ***       of the normal ezeflo                          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "C";
    IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "D";
    IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "E";
    IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0T-5";
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "F";
    IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "G";
  IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0T020

// IN0t110 - init. for IN0t120
Function IN0T110()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWSES == "Y")
    converseLib.clearScreen();
    set IN0TM010 empty;
  else
    converseLib.clearScreen();
    set IN0TM010 initial;
  end
  IN0TM010.XXXERRID = "IN0T120 ";
  IN0TM010.XXXMAPNM = "IN0TM010";
  IN0TWX1.IN0TWMAP = "IN0TM010";
  IN0TM010.XXXTITLE = "STOCK TRANSFER INQUIRY BY DOC.";
  IN0TM010.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0TM010.XXXRVNBR = IN0TWX1.XXXRVNBR;
  IN0TSG1(); /* <=== setup map key fields*/
  set IN0TW01 empty;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end IN0T110

// IN0t120 - converse & edits
Function IN0T120()


   /* ************************************************************/
   /* *** check ws for message to be displayed                ****/
   /* ************************************************************/


  if (IN0TWX1.IN0TWMNO > 0)
    if (IN0TWX1.IN0TWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0TWX1.IN0TWMNO);
    end
    IN0TWX1.IN0TWMNO = 0;
  end


  converse IN0TM010 ;


  IN0TWX1.XXXMODID = "120";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0TM010.CATOAP > " ")
    COMMAREA.CATOAP = IN0TM010.CATOAP;
    COMMAREA.CAITEM = IN0TM010.CAITEM;
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0TM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWERS = "N";
  IN0TM010.VAGen_EZEMSG = " ";
  IN0TM010.XXXERRID = "IN0T120 ";
  set IN0TM010.CATOAP initialAttributes;
  set IN0TM010.CAITEM initialAttributes;
  set IN0TM010.IN7STNBR cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0TM010.IN7STNBR initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0TM010.CAITEM > " ")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0TM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0TSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level (in FLOW)      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "C";
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "D";
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0T-10";
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "E";
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "F";
  IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0T120

// IN0t210 - init. for IN0t220
Function IN0T210()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWSES == "Y")
    converseLib.clearScreen();
    set IN0TM020 empty;
  else
    converseLib.clearScreen();
    set IN0TM020 initial;
  end
  set IN0TM021 initial;
  set IN0TM022 initial;
  IN0TM020.XXXERRID = "IN0T220 ";
  IN0TM020.XXXMAPNM = "IN0TM020";
  IN0TWX1.IN0TWMAP = "IN0TM020";
  IN0TM020.XXXTITLE = "STOCK TRANSFER INQ. BY DOC. (ITEMS)";
  IN0TM020.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0TM020.XXXRVNBR = IN0TWX1.XXXRVNBR;
  IN0TSG2(); /* <=== setup map key fields*/
  set IN0TW02 empty;
  IN0TSX2(); /* <=== purge tsq*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0TWXP1.IN0TWXLL = 62;
  IN0TWX1.IN0TWIPS = "Y";
  IN0TWX1.IN0TWIX1 = 1;

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end IN0T210

// IN0t220 - converse & edits
Function IN0T220()


   /* ************************************************************/
   /* *** check ws for message to be displayed                ****/
   /* ************************************************************/


  if (IN0TWX1.IN0TWMNO > 0)
    if (IN0TWX1.IN0TWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0TWX1.IN0TWMNO);
    end
    IN0TWX1.IN0TWMNO = 0;
  end



  converse IN0TM020 ;


  IN0TWX1.XXXMODID = "220";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0TM020.CATOAP > " ")
    COMMAREA.CATOAP = IN0TM020.CATOAP;
    COMMAREA.CAITEM = IN0TM020.CAITEM;
    IN0TSX2(); /* <=== purge tsq*/
    XSEXIT();
    IN0TST2(); /* <=== reset scrn*/
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM020.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0TM020.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWERS = "N";
  IN0TM020.VAGen_EZEMSG = " ";
  IN0TM020.XXXERRID = "IN0T220 ";
  set IN0TM020.CATOAP initialAttributes;
  set IN0TM020.CAITEM initialAttributes;
  set IN0TM020.IN7STNBR cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0TM020.IN7STNBR initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0TM020.CAITEM > " ")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0TM020.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0TWX1.IN0TWIX1 = 1;
    while (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      if (IN0TM020.IN0TMSEL[IN0TWIX1] > " ")
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "C";
        IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0020); /* <--- use pf6 msg*/
        exit stack;
      else
        IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
      end
    end
    IN0TSH2(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* *** note: check first for need to save selected subkey  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (IN0TWX1.IN0TWLPF == "E")
      IN0TWX1.IN0TWIX1 = 1;
      while (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
        if (IN0TM020.IN0TMSEL[IN0TWIX1] > " ")
          IN0TS2A(); /* <=== select processing*/
          IN0TM020.IN0TMSEL[IN0TWIX1] = " ";
          IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
        else
          IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
        end
      end
    end
    IN0TSI2(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = 1;
  while (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
    if (IN0TM020.IN0TMSEL[IN0TWIX1] > " ")
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "D";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0020); /* <--- use pf6 msg*/
      exit stack;
    else
      IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    IN0TSJ2(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    IN0TSK2(); /* <=== PF8 processing*/
    exit stack;
  end

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    exit stack;
  end

  IN0TWX1.XXXMODID = "220";

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    IN0TSX2(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level (in FLOW)      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    IN0TSX2(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    IN0TSX2(); /* <=== purge tsq*/
    XSPF4();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "E";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    IN0TSX2(); /* <=== purge tsq*/
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "F";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0T-15";
    IN0TSX2(); /* <=== purge tsq*/
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "G";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    IN0TSX2(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "H";
  IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0T220

// IN0t221 - display sum float
Function IN0T221()


  IN0TWX1.XXXMODID = "221";

   /* ************************************************************/
   /* *** if last pfkey was PF6 (it should've been ENTER):    ****/
   /* *** disp det is using this after reading a sum tsq line ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWLPF == "6")
     /* ** next sentence ***/
  else
     /* ************************************************************/
     /* *** read the summary tsq by relative record number  and ****/
     /* *** move to ws layout to move specific flds to map      ****/
     /* *** note: parm #2 index computed from summary ptr +     ****/
     /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
     /* ************************************************************/
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWSIX + IN0TWIX1 - 1;
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC == 0)
      IN0TW02.IN0TWSL2 = IN0TWXP1.IN0TWXDL;
    else
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      exit stack;
    end
    if (IN0TWX1.IN0TWIX1 == 1)
      IN0TW02.IN0TWSUM = IN0TW02.XUMCD;
      IN0TW02.IN0TWSPG = IN0TW02.XPGCD;
      IN0TW02.IN0TWSSA = IN0TW02.XSACD;
      IN0TW02.IN0TWSSD = IN0TW02.XSDCD;
      IN0TW02.IN0TWSQA = IN0TW02.XQACD;
      IN0TW02.IN0TWSDM = IN0TW02.XDMCD;
      IN0TW02.IN0TWSCL = IN0TW02.SY2CLRID;
      IN0TW02.IN0TWSST = IN0TW02.SY1STNBR;
      IN0TW02.IN0TWSGP = IN0TW02.XGPCD;
    end
    if (IN0TW02.IN0TWSRT == "B")
      set IN0TM020.IN0TMSEL[IN0TWIX1] skip, invisible;
    else
      set IN0TM020.IN0TMSEL[IN0TWIX1] initialAttributes;
    end
  end

  if (IN0TW02.IN0TWSRT == "B")
    set IN0TM021.XGPCD skip, invisible;
    set IN0TM021.SY1STNBR skip, invisible;
    set IN0TM021.SY2CLRID skip, invisible;
    set IN0TM021.XDMCD skip, invisible;
    set IN0TM021.XQACD skip, invisible;
    set IN0TM021.XLCCD skip, invisible;
    set IN0TM021.XSDCD skip, invisible;
    set IN0TM021.XSACD skip, invisible;
    set IN0TM021.XPGCD skip, invisible;
    set IN0TM021.XUMCD skip, invisible;
    set IN0TM021.IN0TMUPC skip, invisible;
    set IN0TM021.IN0TMSQQ skip, invisible;
    set IN0TM021.IN0TMSIQ skip, invisible;
    set IN0TM021.IN0TMSSQ skip, invisible;
    set IN0TM021.IN0TMSRQ skip, invisible;
  else
    set IN0TM021.XGPCD initialAttributes;
    set IN0TM021.SY1STNBR initialAttributes;
    set IN0TM021.SY2CLRID initialAttributes;
    set IN0TM021.XDMCD initialAttributes;
    set IN0TM021.XQACD initialAttributes;
    set IN0TM021.XLCCD initialAttributes;
    set IN0TM021.XSDCD initialAttributes;
    set IN0TM021.XSACD initialAttributes;
    set IN0TM021.XPGCD initialAttributes;
    set IN0TM021.XUMCD initialAttributes;
    set IN0TM021.IN0TMUPC initialAttributes;
    set IN0TM021.IN0TMSQQ initialAttributes;
    set IN0TM021.IN0TMSIQ initialAttributes;
    set IN0TM021.IN0TMSSQ initialAttributes;
    set IN0TM021.IN0TMSRQ initialAttributes;
    IN0TM021.XGPCD = IN0TW02.XGPCD;
    IN0TM021.SY1STNBR = IN0TW02.SY1STNBR;
    IN0TM021.SY2CLRID = IN0TW02.SY2CLRID;
    IN0TM021.XDMCD = IN0TW02.XDMCD;
    IN0TM021.XQACD = IN0TW02.XQACD;
    IN0TM021.XLCCD = IN0TW02.XLCCD;
    IN0TM021.XSDCD = IN0TW02.XSDCD;
    IN0TM021.XSACD = IN0TW02.XSACD;
    IN0TM021.XPGCD = IN0TW02.XPGCD;
    IN0TM021.XUMCD = IN0TW02.XUMCD;
    IN0TM021.IN0TMUPC = IN0TW02.IN0TWUPC;
    IN0TM021.IN0TMSQQ = IN0TW02.IN0TWSQQ;
    IN0TM021.IN0TMSIQ = IN0TW02.IN0TWSIQ;
    IN0TM021.IN0TMSSQ = IN0TW02.IN0TWSSQ;
    IN0TM021.IN0TMSRQ = IN0TW02.IN0TWSRQ;
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;


  display IN0TM021 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T221

// IN0t222 - display det float
Function IN0T222()


  IN0TWX1.XXXMODID = "222";

   /* ************************************************************/
   /* *** read the detail tsq by relative record number  and  ****/
   /* *** move it to the entire map data line                 ****/
   /* *** note: parm #2 index computed from summary ptr +     ****/
   /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWDIX + IN0TWIX1 - 1;

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    IN0TW02.IN0TWDL2 = IN0TWXP1.IN0TWXDL;
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** set select fld on all (detail map) lines ASKIP,DARK ****/
   /* ************************************************************/

  set IN0TM020.IN0TMSEL[IN0TWIX1] skip, invisible;

   /* ************************************************************/
   /* *** if first line: determine more data msg (if any)     ****/
   /* ***                and/or save subkey values            ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWIX1 == 1)
    IN0TW02.IN0TWSL2 = IN0TW02.IN0TWDL2;
    if (IN0TW02.XUMCD == IN0TW02.IN0TWDUM
     && IN0TW02.XPGCD == IN0TW02.IN0TWDPG
     && IN0TW02.XSACD == IN0TW02.IN0TWDSA
     && IN0TW02.XSDCD == IN0TW02.IN0TWDSD
     && IN0TW02.XQACD == IN0TW02.IN0TWDQA
     && IN0TW02.XDMCD == IN0TW02.IN0TWDDM
     && IN0TW02.SY2CLRID == IN0TW02.IN0TWDCL
     && IN0TW02.SY1STNBR == IN0TW02.IN0TWDST
     && IN0TW02.XGPCD == IN0TW02.IN0TWDGP)
      if (converseVar.eventKey is pf7)
        converseLib.validationFailed(0034); /* <--- more data on next scrn*/
      else
        converseLib.validationFailed(0035); /* <--- more data on prev scrn*/
      end
    else
      IN0TW02.IN0TWDUM = IN0TW02.XUMCD;
      IN0TW02.IN0TWDPG = IN0TW02.XPGCD;
      IN0TW02.IN0TWDSA = IN0TW02.XSACD;
      IN0TW02.IN0TWDSD = IN0TW02.XSDCD;
      IN0TW02.IN0TWDQA = IN0TW02.XQACD;
      IN0TW02.IN0TWDDM = IN0TW02.XDMCD;
      IN0TW02.IN0TWDCL = IN0TW02.SY2CLRID;
      IN0TW02.IN0TWDST = IN0TW02.SY1STNBR;
      IN0TW02.IN0TWDGP = IN0TW02.XGPCD;
    end
    if (converseVar.eventKey is pf7)
      IN0TWXP2.IN0TWXIX = IN0TWXP2.IN0TWXIX - IN0TWX1.IN0TWLPP;
      if (IN0TWXP2.IN0TWXIX <= 0)
        exit stack;
      end
    else
      IN0TWXP2.IN0TWXIX = IN0TWXP2.IN0TWXIX + IN0TWX1.IN0TWLPP;
      if (IN0TWXP2.IN0TWXIX >= IN0TWX1.IN0TWDML)
        exit stack;
      end
    end
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC == 0)
      IN0TW02.IN0TWSL2 = IN0TWXP1.IN0TWXDL;
    else
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "B";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      exit stack;
    end
    if (IN0TW02.XUMCD == IN0TW02.IN0TWDUM
     && IN0TW02.XPGCD == IN0TW02.IN0TWDPG
     && IN0TW02.XSACD == IN0TW02.IN0TWDSA
     && IN0TW02.XSDCD == IN0TW02.IN0TWDSD
     && IN0TW02.XQACD == IN0TW02.IN0TWDQA
     && IN0TW02.XDMCD == IN0TW02.IN0TWDDM
     && IN0TW02.SY2CLRID == IN0TW02.IN0TWDCL
     && IN0TW02.SY1STNBR == IN0TW02.IN0TWDST
     && IN0TW02.XGPCD == IN0TW02.IN0TWDGP)
      if (converseVar.eventKey is pf7)
        converseLib.validationFailed(0035); /* <--- more data on prev scrn*/
      else
        converseLib.validationFailed(0034); /* <--- more data on next scrn*/
      end
    end
    IN0TW02.IN0TWSL2 = IN0TW02.IN0TWDL2;
    exit stack;
  end

   /* ************************************************************/
   /* *** if record type is summary & not first line:         ****/
   /* *** move data to sum ws & ezeflo to use sum display     ****/
   /* ************************************************************/

  if (IN0TW02.IN0TWDRT == "S")
    IN0TW02.IN0TWSL2 = IN0TW02.IN0TWDL2;
    exit stack;
  end

   /* ************************************************************/
   /* *** setup detail line...                                ****/
   /* *** if record type is msg or blank: set flds askip,dark ****/
   /* *** note: setup msg # if msg record type                ****/
   /* ************************************************************/

  if (IN0TW02.IN0TWDRT == "B"
   || IN0TW02.IN0TWDRT == "M")
    if (IN0TW02.IN0TWDRT == "M")
      converseLib.validationFailed(0034); /* <--- more data on next scrn*/
    end
    set IN0TM022.SY4IDDSC skip, invisible;
    set IN0TM022.IN0TMDQQ skip, invisible;
    set IN0TM022.IN0TMDIQ skip, invisible;
    set IN0TM022.IN0TMDSQ skip, invisible;
    set IN0TM022.IN0TMDRQ skip, invisible;
  else
    set IN0TM022.SY4IDDSC initialAttributes;
    set IN0TM022.IN0TMDQQ initialAttributes;
    set IN0TM022.IN0TMDIQ initialAttributes;
    set IN0TM022.IN0TMDSQ initialAttributes;
    set IN0TM022.IN0TMDRQ initialAttributes;
    IN0TM022.SY4IDDSC = IN0TW02.SY4IDDSC;
    IN0TM022.IN0TMDQQ = IN0TW02.IN0TWDQQ;
    IN0TM022.IN0TMDIQ = IN0TW02.IN0TWDIQ;
    IN0TM022.IN0TMDSQ = IN0TW02.IN0TWDSQ;
    IN0TM022.IN0TMDRQ = IN0TW02.IN0TWDRQ;
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;


  display IN0TM022 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T222

// IN0t225 - display sum titles
Function IN0T225()


   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/

  IN0TM020.IN0TMSSS = "S";
  set IN0TM020.IN0TMSSS initialAttributes;


  display IN0TM025 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T225

// IN0t226 - display det titles
Function IN0T226()


   /* ************************************************************/
   /* *** no "before" processing... except to blank "S"       ****/
   /* ************************************************************/

  IN0TM020.IN0TMSSS = " ";
  set IN0TM020.IN0TMSSS skip, invisible;


  display IN0TM026 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T226

// IN0t229 - display blank lines
Function IN0T229()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set IN0TM020.IN0TMSEL[IN0TWIX1] skip, invisible;

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;


  display IN0TM029 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T229

// IN0t310 - init. for IN0t320
Function IN0T310()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWSES == "Y")
    converseLib.clearScreen();
    set IN0TM030 empty;
  else
    converseLib.clearScreen();
    set IN0TM030 initial;
  end
  set IN0TM031 initial;
  set IN0TM032 initial;
  IN0TM030.XXXERRID = "IN0T320 ";
  IN0TM030.XXXMAPNM = "IN0TM030";
  IN0TWX1.IN0TWMAP = "IN0TM030";
  IN0TM030.XXXTITLE = "STOCK TRANSFER INQ. BY PRODUCT";
  IN0TM030.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0TM030.XXXRVNBR = IN0TWX1.XXXRVNBR;
  IN0TSG3(); /* <=== setup map key fields*/
  set IN0TW03 empty;
  IN0TSX3(); /* <=== purge tsqs*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0TWXP1.IN0TWXLL = 62;
  IN0TWX1.IN0TWIPS = "Y";
  IN0TWX1.IN0TWIX1 = 1;

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end IN0T310

// IN0t320 - converse & edits
Function IN0T320()


   /* ************************************************************/
   /* *** check ws for message to be displayed                ****/
   /* ************************************************************/


  if (IN0TWX1.IN0TWMNO > 0)
    if (IN0TWX1.IN0TWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0TWX1.IN0TWMNO);
    end
    IN0TWX1.IN0TWMNO = 0;
  end


  converse IN0TM030 ;


  IN0TWX1.XXXMODID = "320";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0TM030.CATOAP > " ")
    COMMAREA.CATOAP = IN0TM030.CATOAP;
    COMMAREA.CAITEM = IN0TM030.CAITEM;
    IN0TSX3(); /* <=== purge tsq*/
    XSEXIT();
    IN0TST3(); /* <=== reset scrn*/
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM030.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0TM030.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWERS = "N";
  IN0TM030.VAGen_EZEMSG = " ";
  IN0TM030.XXXERRID = "IN0T320 ";
  set IN0TM030.CATOAP initialAttributes;
  set IN0TM030.CAITEM initialAttributes;
  set IN0TM030.XGPCD cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0TM030.XGPCD initialAttributes;
  set IN0TM030.SY1STNBR initialAttributes;
  set IN0TM030.SY2CLRID initialAttributes;
  set IN0TM030.XDMCD initialAttributes;
  set IN0TM030.XQACD initialAttributes;
  set IN0TM030.XSDCD initialAttributes;
  set IN0TM030.IN7STFOW initialAttributes;
  set IN0TM030.IN7STTOW initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0TM030.CAITEM > " ")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0TM030.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0TWX1.IN0TWIX1 = 1;
    while (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      if (IN0TM030.IN0TMSEL[IN0TWIX1] > " ")
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "C";
        IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0020); /* <--- use pf6 msg*/
        exit stack;
      else
        IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
      end
    end
    IN0TSH3(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* *** note: check first for need to save selected subkey  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (IN0TWX1.IN0TWLPF == "E")
      IN0TWX1.IN0TWIX1 = 1;
      while (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
        if (IN0TM030.IN0TMSEL[IN0TWIX1] > " ")
          IN0TS3A(); /* <=== select processing*/
          IN0TM030.IN0TMSEL[IN0TWIX1] = " ";
          IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
        else
          IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
        end
      end
    end
    IN0TSI3(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: dispaly error msg           ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = 1;
  while (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
    if (IN0TM030.IN0TMSEL[IN0TWIX1] > " ")
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "D";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0020); /* <--- use pf6 msg*/
      exit stack;
    else
      IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    IN0TSJ3(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    IN0TSK3(); /* <=== PF8 processing*/
    exit stack;
  end

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    exit stack;
  end

  IN0TWX1.XXXMODID = "320";

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    IN0TSX3(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level (in FLOW)      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    IN0TSX3(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    IN0TSX3(); /* <=== purge tsq*/
    XSPF4();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "E";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    IN0TSX3(); /* <=== purge tsq*/
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "F";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0T-20";
    IN0TSX3(); /* <=== purge tsq*/
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "G";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    IN0TSX3(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "H";
  IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0T320

// IN0t321 - display sum float
Function IN0T321()


  IN0TWX1.XXXMODID = "321";

   /* ************************************************************/
   /* *** if last pfkey was PF6 (it should've been ENTER):    ****/
   /* *** disp det is using this after reading a sum tsq line ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWLPF == "6")
     /* ** next sentence ***/
  else
     /* ************************************************************/
     /* *** read the summary tsq by relative record number  and ****/
     /* *** move to ws layout to move specific flds to map      ****/
     /* *** note: parm #2 index computed from summary ptr +     ****/
     /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
     /* ************************************************************/
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWSIX + IN0TWIX1 - 1;
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC == 0)
      IN0TW03.IN0TWSL3 = IN0TWXP1.IN0TWXDL;
    else
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      exit stack;
    end
    if (IN0TWX1.IN0TWIX1 == 1)
      IN0TW03.IN0TWSRO = IN0TW03.IN0TWROW;
      IN0TW03.IN0TWLXF = IN0TW03.IN7STNBR;
    end
    if (IN0TW03.IN0TWSRT == "B")
      set IN0TM030.IN0TMSEL[IN0TWIX1] skip, invisible;
    else
      set IN0TM030.IN0TMSEL[IN0TWIX1] initialAttributes;
    end
  end

   /* ************************************************************/
   /* *** setup the formatted map line                        ****/
   /* ************************************************************/

  if (IN0TW03.IN0TWSRT == "B")
    set IN0TM031.XSACD skip, invisible;
    set IN0TM031.XPGCD skip, invisible;
    set IN0TM031.XUMCD skip, invisible;
    set IN0TM031.IN7STNBR skip, invisible;
    set IN0TM031.XIUCD skip, invisible;
    set IN0TM031.XISCD skip, invisible;
    set IN0TM031.IN7STFWH skip, invisible;
    set IN0TM031.IN7STTWH skip, invisible;
    set IN0TM031.IN0TMSCD skip, invisible;
    set IN0TM031.IN0TMFOW skip, invisible;
    set IN0TM031.IN0TMTOW skip, invisible;
    set IN0TM031.IN0TMLDT skip, invisible;
    set IN0TM031.IN0TMHDT skip, invisible;
    set IN0TM031.IN0TMETA skip, invisible;
    set IN0TM031.IN0TMRDT skip, invisible;
    set IN0TM031.IN0TMTOT skip, invisible;
  else
    set IN0TM031.XSACD initialAttributes;
    set IN0TM031.XPGCD initialAttributes;
    set IN0TM031.XUMCD initialAttributes;
    set IN0TM031.IN7STNBR initialAttributes;
    set IN0TM031.XIUCD initialAttributes;
    set IN0TM031.XISCD initialAttributes;
    set IN0TM031.IN7STFWH initialAttributes;
    set IN0TM031.IN7STTWH initialAttributes;
    set IN0TM031.IN0TMSCD initialAttributes;
    set IN0TM031.IN0TMFOW initialAttributes;
    set IN0TM031.IN0TMTOW initialAttributes;
    set IN0TM031.IN0TMLDT initialAttributes;
    set IN0TM031.IN0TMHDT initialAttributes;
    set IN0TM031.IN0TMETA initialAttributes;
    set IN0TM031.IN0TMRDT initialAttributes;
    set IN0TM031.IN0TMTOT initialAttributes;
    IN0TM031.XSACD = IN0TW03.XSACD;
    IN0TM031.XPGCD = IN0TW03.XPGCD;
    IN0TM031.XUMCD = IN0TW03.XUMCD;
    IN0TM031.IN7STNBR = IN0TW03.IN7STNBR;
    IN0TM031.XIUCD = IN0TW03.XIUCD;
    IN0TM031.XISCD = IN0TW03.XISCD;
    IN0TM031.IN7STFWH = IN0TW03.IN7STFWH;
    IN0TM031.IN7STTWH = IN0TW03.IN7STTWH;
    IN0TM031.IN0TMSCD = IN0TW03.IN0TWSCD;
    IN0TM031.IN0TMFOW = IN0TW03.IN0TWFOW;
    IN0TM031.IN0TMTOW = IN0TW03.IN0TWTOW;
    IN0TM031.IN0TMLDT = IN0TW03.IN0TWLDT;
    IN0TM031.IN0TMHDT = IN0TW03.IN0TWHDT;
    IN0TM031.IN0TMETA = IN0TW03.IN0TWETA;
    IN0TM031.IN0TMRDT = IN0TW03.IN0TWRDT;
    IN0TM031.IN0TMTOT = IN0TW03.IN0TWTOT;
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;


  display IN0TM031 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T321

// IN0t322 - display det float
Function IN0T322()


  IN0TWX1.XXXMODID = "322";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number  and ****/
   /* *** move it to the entire map data line                 ****/
   /* *** note: parm #2 index computed from summary ptr +     ****/
   /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWDIX + IN0TWIX1 - 1;

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    IN0TW03.IN0TWDL3 = IN0TWXP1.IN0TWXDL;
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** set select fld on all (detail map) lines ASKIP,DARK ****/
   /* ************************************************************/

  set IN0TM030.IN0TMSEL[IN0TWIX1] skip, invisible;

   /* ************************************************************/
   /* *** if first line: save subkey values                   ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWIX1 == 1)
    IN0TW03.IN0TWSL3 = IN0TW03.IN0TWDL3;
    IN0TW03.IN0TWDRO = IN0TW03.IN0TWROW;
    IN0TW03.IN0TWLXF = IN0TW03.IN7STNBR;
    exit stack;
  end

   /* ************************************************************/
   /* *** if record type is summary & not first line:         ****/
   /* *** move data to sum ws & ezeflo to use sum display     ****/
   /* ************************************************************/

  if (IN0TW03.IN0TWDRT == "S")
    IN0TW03.IN0TWSL3 = IN0TW03.IN0TWDL3;
    exit stack;
  end

   /* ************************************************************/
   /* *** setup detail line...                                ****/
   /* *** if record type is msg or blank: set flds askip,dark ****/
   /* *** note: setup msg # if msg record type                ****/
   /* ************************************************************/

  if (IN0TW03.IN0TWDRT == "B"
   || IN0TW03.IN0TWDRT == "M")
    if (IN0TW03.IN0TWDRT == "M")
      converseLib.validationFailed(0034); /* <--- more data on next scrn*/
    end
    IN0TWX1.IN0TWCTR = 1;
    while (IN0TWX1.IN0TWCTR <= 4)
      set IN0TM032.SY4IDDSC[IN0TWCTR] skip, invisible;
      set IN0TM032.IN0TMTQT[IN0TWCTR] skip, invisible;
      IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
    end
  else
    IN0TWX1.IN0TWCTR = 1;
    while (IN0TWX1.IN0TWCTR <= 4)
      if (IN0TW03.SY4IDDSC[IN0TWCTR] > " ")
        set IN0TM032.SY4IDDSC[IN0TWCTR] initialAttributes;
        set IN0TM032.IN0TMTQT[IN0TWCTR] initialAttributes;
        IN0TM032.SY4IDDSC[IN0TWCTR] = IN0TW03.SY4IDDSC[IN0TWCTR];
        IN0TM032.IN0TMTQT[IN0TWCTR] = IN0TW03.IN0TWTQT[IN0TWCTR];
      else
        set IN0TM032.SY4IDDSC[IN0TWCTR] skip, invisible;
        set IN0TM032.IN0TMTQT[IN0TWCTR] skip, invisible;
      end
      IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
    end
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;


  display IN0TM032 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T322

// IN0t325 - display sum titles
Function IN0T325()


   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/

  IN0TM030.IN0TMSSS = "S";
  set IN0TM030.IN0TMSSS initialAttributes;


  display IN0TM035 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T325

// IN0t326 - display det titles
Function IN0T326()


   /* ************************************************************/
   /* *** no "before" processing... except to blank "S"       ****/
   /* ************************************************************/

  IN0TM030.IN0TMSSS = " ";
  set IN0TM030.IN0TMSSS skip, invisible;


  display IN0TM036 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T326

// IN0t329 - display blank lines
Function IN0T329()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set IN0TM030.IN0TMSEL[IN0TWIX1] skip, invisible;

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;


  display IN0TM039 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T329

// IN0t410 - init. for IN0t320
Function IN0T410()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWSES == "Y")
    converseLib.clearScreen();
    set IN0TM040 empty;
  else
    converseLib.clearScreen();
    set IN0TM040 initial;
  end
  set IN0TM041 initial;
  IN0TM040.XXXERRID = "IN0T420 ";
  IN0TM040.XXXMAPNM = "IN0TM040";
  IN0TWX1.IN0TWMAP = "IN0TM040";
  IN0TM040.XXXTITLE = "STOCK TRANSFER INQ. BY WAREHOUSE";
  IN0TM040.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0TM020.XXXRVNBR = IN0TWX1.XXXRVNBR;
  IN0TSG4(); /* <=== setup map key fields*/
  set IN0TW04 empty;
  IN0TSX4(); /* <=== purge tsq*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0TWXP1.IN0TWXLL = 53;
  IN0TWX1.IN0TWIPS = "Y";
  IN0TWX1.IN0TWIX1 = 1;

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end IN0T410

// IN0t420 - converse & edits
Function IN0T420()


   /* ************************************************************/
   /* *** check ws for message to be displayed                ****/
   /* ************************************************************/


  if (IN0TWX1.IN0TWMNO > 0)
    if (IN0TWX1.IN0TWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0TWX1.IN0TWMNO);
    end
    IN0TWX1.IN0TWMNO = 0;
  end



  converse IN0TM040 ;


  IN0TWX1.XXXMODID = "420";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0TM040.CATOAP > " ")
    COMMAREA.CATOAP = IN0TM040.CATOAP;
    COMMAREA.CAITEM = IN0TM040.CAITEM;
    IN0TSX4(); /* <=== purge tsq*/
    XSEXIT();
    IN0TST4(); /* <=== reset scrn*/
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM040.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0TM040.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWERS = "N";
  IN0TM040.VAGen_EZEMSG = " ";
  IN0TM040.XXXERRID = "IN0T420 ";
  set IN0TM040.CATOAP initialAttributes;
  set IN0TM040.CAITEM initialAttributes;
  set IN0TM040.IN7STFWH cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0TM040.IN7STFWH initialAttributes;
  set IN0TM040.IN7STTWH initialAttributes;
  set IN0TM040.SY1STNBR initialAttributes;
  set IN0TM040.SY2CLRID initialAttributes;
  set IN0TM040.XDMCD initialAttributes;
  set IN0TM040.XISCD initialAttributes;
  set IN0TM040.XIUCD initialAttributes;

  IN0TWX1.IN0TWSXS = "N";

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0TM040.CAITEM > " ")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0TM040.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0TWX1.IN0TWIX1 = 1;
    while (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
      if (IN0TM040.IN0TMSEL[IN0TWIX1] > " ")
        IN0TM040.IN0TMSEL[IN0TWIX1] = " ";
        IN0TS4A(); /* <=== read tsq for xfer no.*/
        IN0TWX1.IN0TWSXS = "Y";
        exit stack;
      else
        IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
      end
    end
    IN0TSH4(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = 1;
  while (IN0TWX1.IN0TWIX1 <= IN0TWX1.IN0TWLPP)
    if (IN0TM040.IN0TMSEL[IN0TWIX1] > " ")
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "D";
      IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0020); /* <--- use pf6 msg*/
      exit stack;
    else
      IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    IN0TSJ4(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    IN0TSK4(); /* <=== PF8 processing*/
    exit stack;
  end


  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    exit stack;
  end

  IN0TWX1.XXXMODID = "420";

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    IN0TSX4(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level (in FLOW)      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    IN0TSX4(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    IN0TSX4(); /* <=== purge tsq*/
    XSPF4();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "E";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    IN0TSX4(); /* <=== purge tsq*/
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "F";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0T-30";
    IN0TSX4(); /* <=== purge tsq*/
    XSEXIT();
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "G";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0TM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    IN0TSX4(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "H";
  IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0T420

// IN0t421 - display sum float
Function IN0T421()


  IN0TWX1.XXXMODID = "421";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number  and ****/
   /* *** move to ws layout to move specific flds to map      ****/
   /* *** note: parm #2 index computed from summary ptr +     ****/
   /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWSIX + IN0TWIX1 - 1;

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 4)
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0057);
    exit stack;
  end
  if (IN0TWXP2.IN0TWXRC == 0)
    IN0TW04.IN0TWSL4 = IN0TWXP1.IN0TWXDL;
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    exit stack;
  end

  if (IN0TW04.IN0TWSRT == "B")
    set IN0TM040.IN0TMSEL[IN0TWIX1] skip, invisible;
    set IN0TM041.IN7STNBR skip, invisible;
    set IN0TM041.XISCD skip, invisible;
    set IN0TM041.XIUCD skip, invisible;
    set IN0TM041.IN7STFWH skip, invisible;
    set IN0TM041.IN7STTWH skip, invisible;
    set IN0TM041.IN0TMTWD skip, invisible;
    set IN0TM041.IN0TMLDT skip, invisible;
    set IN0TM041.IN0TMHDT skip, invisible;
    set IN0TM041.IN0TMETA skip, invisible;
    set IN0TM041.KUCCOID skip, invisible;
  else
    set IN0TM041.IN7STNBR initialAttributes;
    set IN0TM041.XISCD initialAttributes;
    set IN0TM041.XIUCD initialAttributes;
    set IN0TM041.IN7STFWH initialAttributes;
    set IN0TM041.IN7STTWH initialAttributes;
    set IN0TM041.IN0TMTWD initialAttributes;
    set IN0TM041.KUCCOID initialAttributes;
    IN0TM041.IN7STNBR = IN0TW04.IN7STNBR;
    IN0TM041.XISCD = IN0TW04.IN0TWIS;
    IN0TM041.XIUCD = IN0TW04.IN0TWIU;
    IN0TM041.IN7STFWH = IN0TW04.IN0TWFWH;
    IN0TM041.IN7STTWH = IN0TW04.IN0TWTWH;
    IN0TM041.IN0TMTWD = IN0TW04.IN0TWTWD;
    IN0TM041.KUCCOID = IN0TW04.KUCCOID;
    if (IN0TW04.IN0TWLDT > 0)
      IN0TM041.IN0TMLDT = IN0TW04.IN0TWLDT;
      set IN0TM041.IN0TMLDT initialAttributes;
    else
      set IN0TM041.IN0TMLDT skip, invisible;
    end
    if (IN0TW04.IN0TWHDT > 0)
      IN0TM041.IN0TMHDT = IN0TW04.IN0TWHDT;
      set IN0TM041.IN0TMHDT initialAttributes;
    else
      set IN0TM041.IN0TMHDT skip, invisible;
    end
    if (IN0TW04.IN0TWETA > 0)
      IN0TM041.IN0TMETA = IN0TW04.IN0TWETA;
      set IN0TM041.IN0TMETA initialAttributes;
    else
      set IN0TM041.IN0TMETA skip, invisible;
    end
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;


  display IN0TM041 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T421

// IN0t425 - display sum titles
Function IN0T425()


   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/

  IN0TM040.IN0TMSSS = "S";
  set IN0TM020.IN0TMSSS initialAttributes;


  display IN0TM045 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T425

// IN0t429 - display blank lines
Function IN0T429()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set IN0TM040.IN0TMSEL[IN0TWIX1] skip, invisible;

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;


  display IN0TM049 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0T429

Function IN0T510()
   /* --------------------------------------------------------------------*/
   /* Transfer control to IN0Q - Stock Transfer Inquiry By Customer*/
   /* --------------------------------------------------------------------*/

  COMMAREA.CAFROMAP = "IN0T";
  COMMAREA.CATOAP = "IN0Q";
  COMMAREA.CAUSERA = INWREC.CAUSERA;
  XSEXIT();
  IN0TM005.VAGen_EZEMSG = COMMAREA.CAMSG;
end // end IN0T510

// Check IN8020 return code
Function IN0TS-IN8020-ERRS()
   /*  */
   /* Check IN8020 return codes.  All return codes except zero (no*/
   /* errors) are posted.  A screen message for DB2 deadlock*/
   /* (8000).*/
   /*  */

  if (INGREC.ING-RETURN-CD == 8000) /* DB2 deadlock*/
    converseLib.validationFailed(136);
    return;
  else
    if (INGREC.ING-RETURN-CD <= 2300) /* Edit error or row not found*/
      converseLib.validationFailed(169);
    end
  end

  TA1REC.TA1-GROUP = INGREC.TA1-GROUP;
  TAEREC.SQLCAREC = INGREC.SQLCAREC;

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TA1REC.TA1TBLKE = INGREC.ING-INPUT-DATA; /* IN8020 parameters*/
  TA1REC.TA1FUNC = "POST";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end IN0TS-IN8020-ERRS

// process selection
Function IN0TS2A()


  IN0TWX1.XXXMODID = "S2A";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number for  ****/
   /* *** the current line & move it to the ws data line      ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "INST";
  IN0TWXP2.IN0TWXFC = "R";

  IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWSIX + IN0TWX1.IN0TWIX1 - 1;

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    IN0TW02.IN0TWSL2 = IN0TWXP1.IN0TWXDL;
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** save this line's summary subkey data                ****/
   /* ************************************************************/

  IN0TW02.IN0TWSUM = IN0TW02.XUMCD;
  IN0TW02.IN0TWSPG = IN0TW02.XPGCD;
  IN0TW02.IN0TWSSA = IN0TW02.XSACD;
  IN0TW02.IN0TWSSD = IN0TW02.XSDCD;
  IN0TW02.IN0TWSQA = IN0TW02.XQACD;
  IN0TW02.IN0TWSDM = IN0TW02.XDMCD;
  IN0TW02.IN0TWSCL = IN0TW02.SY2CLRID;
  IN0TW02.IN0TWSST = IN0TW02.SY1STNBR;
  IN0TW02.IN0TWSGP = IN0TW02.XGPCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TS2A

// setup sum tsq line(s)
Function IN0TS2G()
   /* ************************************************************/
   /* *** setup summary tsq line(s) (if no read next error)   ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  IN0TWX1.XXXMODID = "S2G";

  IN0TWXP2.IN0TWXAP = "INST";

   /* ************************************************************/
   /* *** if no more db2 rows (sqlcode = +100):               ****/
   /* *** write blank lines to tsq until page full            ****/
   /* *** page full = max lines/lines per pg has 0 remainder  ****/
   /* *** note: index set to 01 when page full                ****/
   /* ************************************************************/

  if (IN0TWX1.VAGen_SQLCODE == +100)
    IN0TWXP1.IN0TWXDL = " ";
    IN0TWXP1.IN0TWXRT = "B";
    IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSML % IN0TWX1.IN0TWLPP;
    while (IN0TWX1.IN0TWREM != 0)
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWSML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "A";
        IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSML % IN0TWX1.IN0TWLPP;
    end
    IN0TWX1.IN0TWSIX = 01;
    return;
  end

   /* ************************************************************/
   /* *** If product key values have changed get new:         ****/
   /* ***    units per case, size descriptions, life cycle    ****/
   /* ************************************************************/

  if (IN8REC.XGPCD == IN0TW02.IN0TWLGP
   && IN8REC.SY1STNBR == IN0TW02.IN0TWLST
   && IN8REC.SY2CLRID == IN0TW02.IN0TWLCL
   && IN8REC.XDMCD == IN0TW02.IN0TWLDM)
     /* ** next sentence ***/
  else
    IN0TW02.IN0TWLGP = IN8REC.XGPCD; /* Save key values*/
    IN0TW02.IN0TWLST = IN8REC.SY1STNBR;
    IN0TW02.IN0TWLCL = IN8REC.SY2CLRID;
    IN0TW02.IN0TWLDM = IN8REC.XDMCD;

    set INGREC empty;
    set TA1REC empty;

    INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
    INGREC.XGP-GPC-CD = IN8REC.XGPCD;
    INGREC.SY-STY-NBR = IN8REC.SY1STNBR;
    INGREC.SY-COLR-CD-ID = IN8REC.SY2CLRID;
    INGREC.XDM-DIM-CD = IN8REC.XDMCD;

    TA1REC.TA1PGMNM = "IN0TS2G";
    INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

    XSINS-CALL-IN8020(); /* Call IN8020 subroutine*/

    if (INGREC.ING-RETURN-CD > 0000)
      IN0TS-IN8020-ERRS();
      IN0TW02.IN0TWUPC = 0;
    else
      IN0TW02.IN0TWUPC = INGREC.SY1UNPCS;
    end

    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWERS = "Y";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      return;
    end

    SYPREC.XGPCD = IN8REC.XGPCD;
    SYPREC.SY1STNBR = IN8REC.SY1STNBR;
    SYPREC.SY2CLRID = IN8REC.SY2CLRID;
    SYPREC.XDMCD = IN8REC.XDMCD;
    SYPREC.XQACD = "**";
    IN0TWX1.IN0TWLOC = "IN0TS2G ";
    IN0TSXM(); /* <=== obtain size translations*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      return;
    end
  end

  IN0TWX1.XXXMODID = "S2G";

   /* ************************************************************/
   /* *** if current date greater than effective date:        ****/
   /* *** use the corresponding life cycle code               ****/
   /* *** note: effective dates in ascending order            ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWCDT >= INGREC.SY2CEDT1)
    IN0TW02.XLCCD = INGREC.XLCCD1;
  else
    if (IN0TWX1.IN0TWCDT >= INGREC.SY2CEDT2)
      IN0TW02.XLCCD = INGREC.XLCCD1;
    else
      if (IN0TWX1.IN0TWCDT >= INGREC.SY2CEDT3)
        IN0TW02.XLCCD = INGREC.XLCCD1;
      else
        if (IN0TWX1.IN0TWCDT >= INGREC.SY2CEDT4)
          IN0TW02.XLCCD = INGREC.XLCCD1;
        else
           /* ************************************************************/
           /* *** fall thru error - code shouldn't have been executed ****/
           /* ************************************************************/

          IN0TWX1.IN0TWERS = "Y";
          IN0TWX1.XXXUNQID = "A";
          IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
          converseLib.validationFailed(0008); /* <--- fall thru error msg*/
          return;
        end
      end
    end
  end

   /* ************************************************************/
   /* *** setup the ws formatted line                         ****/
   /* ************************************************************/

  IN0TW02.IN0TWSRT = "S";

  IN0TW02.XUMCD = IN8REC.XUMCD;
  IN0TW02.XPGCD = IN8REC.XPGCD;
  IN0TW02.XSACD = IN8REC.XSACD;
  IN0TW02.XSDCD = IN8REC.XSDCD;
  IN0TW02.XQACD = IN8REC.XQACD;
  IN0TW02.XDMCD = IN8REC.XDMCD;
  IN0TW02.SY2CLRID = IN8REC.SY2CLRID;
  IN0TW02.SY1STNBR = IN8REC.SY1STNBR;
  IN0TW02.XGPCD = IN8REC.XGPCD;

   /* ************************************************************/
   /* *** accumulate all size amounts                         ****/
   /* ************************************************************/

  IN0TW02.IN0TWSQQ = 0;
  IN0TW02.IN0TWSIQ = 0;
  IN0TW02.IN0TWSSQ = 0;
  IN0TW02.IN0TWSRQ = 0;

  IN0TWX1.IN0TWCTR = 1;
  while (IN0TWX1.IN0TWCTR <= 40)
    IN0TW02.IN0TWSQQ = IN0TW02.IN0TWSQQ + IN8REC.IN8SQQ[IN0TWCTR];
    IN0TW02.IN0TWSIQ = IN0TW02.IN0TWSIQ + IN8REC.IN8SIQ[IN0TWCTR];
    IN0TW02.IN0TWSSQ = IN0TW02.IN0TWSSQ + IN8REC.IN8SSQ[IN0TWCTR];
    IN0TW02.IN0TWSRQ = IN0TW02.IN0TWSRQ + IN8REC.IN8SRQ[IN0TWCTR];
    IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
  end

   /* ************************************************************/
   /* *** write the entire ws line to the tsq                 ****/
   /* ************************************************************/

  IN0TWXP1.IN0TWXDL = IN0TW02.IN0TWSL2;

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    IN0TWX1.IN0TWSML = IN0TWXP2.IN0TWXIX;
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TS2G

// setup det tsq line(s)
Function IN0TS2H()


   /* ************************************************************/
   /* *** setup detail tsq line(s) (if no read next error)    ****/
   /* *** note: if no more db2 rows (sqlcode = +100): ezertn  ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  IN0TWX1.XXXMODID = "S2H";

  IN0TWXP2.IN0TWXAP = "INDT";

   /* ************************************************************/
   /* *** if no more db2 rows (sqlcode = +100):               ****/
   /* *** write blank lines to tsq until page full            ****/
   /* *** page full = max lines/lines per pg has 0 remainder  ****/
   /* *** note: index set to 01 when page full                ****/
   /* ************************************************************/

  if (IN0TWX1.VAGen_SQLCODE == +100)
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWDML;
    IN0TWXP1.IN0TWXDL = " ";
    IN0TWXP1.IN0TWXRT = "B";
    IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
    while (IN0TWX1.IN0TWREM != 0)
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "A";
        IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
    end
    IN0TWX1.IN0TWDIX = 01;
    return;
  end

   /* ************************************************************/
   /* *** move the data from each of the size 'buckets' which ****/
   /* *** have any data greater than zero to the tsq          ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = 1;

  while (IN0TWX1.IN0TWIX1 <= 40)
     /* ************************************************************/
     /* *** if 1st line(max lines/lines per pg remainder = 0)   ****/
     /* *** on page is next: write summary line                 ****/
     /* ************************************************************/
    IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
    if (IN0TWX1.IN0TWREM == 0)
      IN0TWXP1.IN0TWXDL = IN0TW02.IN0TWSL2;
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "A";
        IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    if (IN8REC.IN8SQQ[IN0TWIX1] > 0
     || IN8REC.IN8SIQ[IN0TWIX1] > 0
     || IN8REC.IN8SSQ[IN0TWIX1] > 0
     || IN8REC.IN8SRQ[IN0TWIX1] > 0)
      if (SYPREC.SY4IDDSC[IN0TWIX1] > " ")
        IN0TW02.SY4IDDSC = SYPREC.SY4IDDSC[IN0TWIX1];
      else
        IN0TW02.SY4IDDSC = "*****";
      end
      IN0TW02.IN0TWDQQ = IN8REC.IN8SQQ[IN0TWIX1];
      IN0TW02.IN0TWDIQ = IN8REC.IN8SIQ[IN0TWIX1];
      IN0TW02.IN0TWDSQ = IN8REC.IN8SSQ[IN0TWIX1];
      IN0TW02.IN0TWDRQ = IN8REC.IN8SRQ[IN0TWIX1];
      IN0TW02.IN0TWDRT = "D";
      IN0TWXP1.IN0TWXDL = IN0TW02.IN0TWDL2;
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "C";
        IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
  end

   /* ************************************************************/
   /* *** write blank lines to ws until page full             ****/
   /* *** page full = max lines/lines per pg remainder = 0    ****/
   /* ************************************************************/

  IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;

  while (IN0TWX1.IN0TWREM != 0)
    IN0TWXP1.IN0TWXDL = " ";
    IN0TWXP1.IN0TWXRT = "B";
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC == 0)
      IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
    else
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "D";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TS2H

// select processing
Function IN0TS3A()


  IN0TWX1.XXXMODID = "S3A";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number for  ****/
   /* *** the current line & move it to the ws data line      ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "INUT";
  IN0TWXP2.IN0TWXFC = "R";

  IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWSIX + IN0TWX1.IN0TWIX1 - 1;

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    IN0TW03.IN0TWSL3 = IN0TWXP1.IN0TWXDL;
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** save this line's summary subkey data                ****/
   /* ************************************************************/

  IN0TW03.IN0TWSRO = IN0TW03.IN0TWROW;
  IN0TW03.IN0TWLXF = IN0TW03.IN7STNBR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TS3A

// setup format/sum tsq line(s)
Function IN0TS3G()


   /* ************************************************************/
   /* *** setup summary tsq line(s) (if no read next error)   ****/
   /* *** or set/use this function's skip row switch on       ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  IN0TWX1.XXXMODID = "S3G";

  IN0TWXP2.IN0TWXAP = "INUT";

   /* ************************************************************/
   /* *** if no more db2 rows (sqlcode = +100):               ****/
   /* *** write blank lines to tsq until page full            ****/
   /* *** page full = max lines/lines per pg has 0 remainder  ****/
   /* *** note: index set to 01 when page full                ****/
   /* ************************************************************/

  if (IN0TWX1.VAGen_SQLCODE == +100)
    IN0TWXP1.IN0TWXDL = " ";
    IN0TWXP1.IN0TWXRT = "B";
    IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSML % IN0TWX1.IN0TWLPP;
    while (IN0TWX1.IN0TWREM != 0)
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWSML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "A";
        IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSML % IN0TWX1.IN0TWLPP;
    end
    IN0TWX1.IN0TWSIX = 01;
    return;
  end

   /* ************************************************************/
   /* *** if last stock xfer no. different: obtain new hdr    ****/
   /* ************************************************************/

  if (IN8REC.IN7STNBR == IN0TW03.IN0TWLXF)
     /* ** next sentence ***/
  else
    IN0TW03.IN0TWSRS = "N";

    IN0TW03.IN0TWLXF = IN8REC.IN7STNBR;
    IN7REC.IN7STNBR = IN8REC.IN7STNBR;
    IN0TWX1.IN0TWLOC = "IN0TS3G ";
    IN0TSXF(); /* <=== select in7rec row*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      return;
    end
    IN0TW03.XIUCD = IN7REC.XIUCD;
    IN0TW03.XISCD = IN7REC.XISCD;
    IN0TW03.IN7STFWH = IN7REC.IN7STFWH;
    IN0TW03.IN7STTWH = IN7REC.IN7STTWH;
    IN0TW03.IN0TWFOW = IN7REC.IN7STFOW;
    IN0TW03.IN0TWTOW = IN7REC.IN7STTOW;

    if (IN7REC.IN7STLDT == 0)
      IN0TW03.IN0TWLDT = IN7REC.IN7STLDT;
    else
      set TA2REC empty;
      set TA2REC01 empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = INRREC08.INR-INTRN-DT-FMT[INR-SEARCH-SUB];
      TA2REC.TA2GRGGN = IN7REC.IN7STLDT;
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

      if (TA2REC.TA2RTNCD == 0)
        if (INRREC08.INR-EXTRN-DT-FMT[INR-SEARCH-SUB] == "J") /* Europe*/
          IN0TW03.IN0TWLDT = TA2REC01.TA2-GREG-DDMMYY-NUM;
        else /* Domestic*/
          IN0TW03.IN0TWLDT = TA2REC.TA2GRGAN; /* MMDDYY*/
        end
      else
        converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
        exit stack;
      end
    end

    if (IN7REC.IN7STHDT == 0)
      IN0TW03.IN0TWHDT = IN7REC.IN7STHDT;
    else
      set TA2REC empty;
      set TA2REC01 empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = INRREC08.INR-INTRN-DT-FMT[INR-SEARCH-SUB];
      TA2REC.TA2GRGGN = IN7REC.IN7STHDT;
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

      if (TA2REC.TA2RTNCD == 0)
        if (INRREC08.INR-EXTRN-DT-FMT[INR-SEARCH-SUB] == "J") /* Europe*/
          IN0TW03.IN0TWHDT = TA2REC01.TA2-GREG-DDMMYY-NUM;
        else /* Domestic*/
          IN0TW03.IN0TWHDT = TA2REC.TA2GRGAN; /* MMDDYY*/
        end
      else
        converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
        exit stack;
      end
    end

    if (IN7REC.IN7STETA == 0)
      IN0TW03.IN0TWETA = IN7REC.IN7STETA;
    else
      set TA2REC empty;
      set TA2REC01 empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = INRREC08.INR-INTRN-DT-FMT[INR-SEARCH-SUB];
      TA2REC.TA2GRGGN = IN7REC.IN7STETA;
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

      if (TA2REC.TA2RTNCD == 0)
        if (INRREC08.INR-EXTRN-DT-FMT[INR-SEARCH-SUB] == "J") /* Europe*/
          IN0TW03.IN0TWETA = TA2REC01.TA2-GREG-DDMMYY-NUM;
        else /* Domestic*/
          IN0TW03.IN0TWETA = TA2REC.TA2GRGAN; /* MMDDYY*/
        end
      else
        converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
        exit stack;
      end
    end

    if (IN7REC.IN7STRDT == 0)
      IN0TW03.IN0TWRDT = IN7REC.IN7STRDT;
    else
      set TA2REC empty;
      set TA2REC01 empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = INRREC08.INR-INTRN-DT-FMT[INR-SEARCH-SUB];
      TA2REC.TA2GRGGN = IN7REC.IN7STRDT;
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

      if (TA2REC.TA2RTNCD == 0)
        if (INRREC08.INR-EXTRN-DT-FMT[INR-SEARCH-SUB] == "J") /* Europe*/
          IN0TW03.IN0TWRDT = TA2REC01.TA2-GREG-DDMMYY-NUM;
        else /* Domestic*/
          IN0TW03.IN0TWRDT = TA2REC.TA2GRGAN; /* MMDDYY*/
        end
      else
        converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
        exit stack;
      end
    end


    if (IN7REC.IN7STIDT < IN0TWX1.IN0TWSDT
     || IN7REC.IN7STIDT > IN0TWX1.IN0TWEDT)
      IN0TW03.IN0TWSRS = "Y";
    end
    if (IN0TM030.IN7STFOW != "  ")
      if (IN0TM030.IN7STFOW != IN7REC.IN7STFOW)
        IN0TW03.IN0TWSRS = "Y";
      end
    end
    if (IN0TM030.IN7STTOW != "  ")
      if (IN0TM030.IN7STTOW != IN7REC.IN7STTOW)
        IN0TW03.IN0TWSRS = "Y";
      end
    end
  end

  if (IN0TW03.IN0TWSRS == "Y")
    return;
  end

  IN0TW03.IN0TWSRT = "S";

  IN0TW03.IN0TWROW = IN0TW03.IN0TWROW + 1;

  IN0TW03.IN0TWSCD = IN8REC.XSDCD;
  IN0TW03.XSACD = IN8REC.XSACD;
  IN0TW03.XPGCD = IN8REC.XPGCD;
  IN0TW03.XUMCD = IN8REC.XUMCD;
  IN0TW03.IN7STNBR = IN8REC.IN7STNBR;

   /* ************************************************************/
   /* *** accumulate the size amounts by status code          ****/
   /* ************************************************************/

  IN0TW03.IN0TWTOT = 0;

   /* ************************************************************/
   /* *** if issued or released status: use issued qty        ****/
   /* ************************************************************/

  if (IN0TW03.XIUCD == "01"
   || IN0TW03.XIUCD == "02")
    IN0TWX1.IN0TWCTR = 1;
    while (IN0TWX1.IN0TWCTR <= 40)
      IN0TW03.IN0TWTOT = IN0TW03.IN0TWTOT + IN8REC.IN8SIQ[IN0TWCTR];
      IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
    end
  end

   /* ************************************************************/
   /* *** if shipped status: use shipped qty                  ****/
   /* ************************************************************/

  if (IN0TW03.XIUCD == "03")
    IN0TWX1.IN0TWCTR = 1;
    while (IN0TWX1.IN0TWCTR <= 40)
      IN0TW03.IN0TWTOT = IN0TW03.IN0TWTOT + IN8REC.IN8SSQ[IN0TWCTR];
      IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
    end
  end

   /* ************************************************************/
   /* *** if completed status & out only: use shipped qty     ****/
   /* *** if completed status & not out only: use received qty****/
   /* ************************************************************/

  if (IN0TW03.XIUCD == "04")
    if (IN0TW03.XISCD == "Y")
      IN0TWX1.IN0TWCTR = 1;
      while (IN0TWX1.IN0TWCTR <= 40)
        IN0TW03.IN0TWTOT = IN0TW03.IN0TWTOT + IN8REC.IN8SSQ[IN0TWCTR];
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
    else
      IN0TWX1.IN0TWCTR = 1;
      while (IN0TWX1.IN0TWCTR <= 40)
        IN0TW03.IN0TWTOT = IN0TW03.IN0TWTOT + IN8REC.IN8SRQ[IN0TWCTR];
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
    end
  end

   /* ************************************************************/
   /* *** if canceled or new status added: use requested qty  ****/
   /* ************************************************************/

  if (IN0TW03.XIUCD > "04")
    IN0TWX1.IN0TWCTR = 1;
    while (IN0TWX1.IN0TWCTR <= 40)
      IN0TW03.IN0TWTOT = IN0TW03.IN0TWTOT + IN8REC.IN8SQQ[IN0TWCTR];
      IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
    end
  end

   /* ************************************************************/
   /* *** write the entire ws line to the tsq                 ****/
   /* ************************************************************/

  IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWSL3;

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    IN0TWX1.IN0TWSML = IN0TWXP2.IN0TWXIX;
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TS3G

// setup det/format tsq line(s)
Function IN0TS3H()


   /* ************************************************************/
   /* *** setup detail tsq line(s) (if no read next error)    ****/
   /* *** or if this function's skip row switch is on         ****/
   /* *** note: if no more db2 rows (sqlcode = +100): ezertn  ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  IN0TWX1.XXXMODID = "S3H";

  IN0TWXP2.IN0TWXAP = "INET";

   /* ************************************************************/
   /* *** if no more db2 rows (sqlcode = +100):               ****/
   /* *** write blank lines to tsq until page full            ****/
   /* *** page full = max lines/lines per pg has 0 remainder  ****/
   /* *** note: index set to 01 when page full                ****/
   /* ************************************************************/

  if (IN0TWX1.VAGen_SQLCODE == +100)
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWDML;
    IN0TWXP1.IN0TWXDL = " ";
    IN0TWXP1.IN0TWXRT = "B";
    IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
    while (IN0TWX1.IN0TWREM != 0)
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "A";
        IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
    end
    IN0TWX1.IN0TWDIX = 01;
    return;
  end

  if (IN0TW03.IN0TWSRS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** setup this audit item's first/summary line  and     ****/
   /* *** save the returned det max lines values in case this ****/
   /* *** data has to be moved to the next screen             ****/
   /* *** note: summary line was previously setup in in0as1g  ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWDML;
  IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWSL3;
  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
  if (IN0TWXP2.IN0TWXRC == 0)
    IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
    IN0TWX1.IN0TWSDX = IN0TWXP2.IN0TWXIX;
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** if the det max lines / lines per page remainder is  ****/
   /* *** equal to 0, the next line will be on a new screen:  ****/
   /* *** move this data to the next screen before continuing ****/
   /* ************************************************************/

  IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
  if (IN0TWX1.IN0TWREM == 0)
    IN0TS3K(); /* <=== move current data to next scrn*/
    if (IN0TWX1.IN0TWERS == "Y")
      return;
    end
    IN0TWX1.XXXMODID = "S3H";
  end

   /* ************************************************************/
   /* *** move the data from each of the size 'buckets' which ****/
   /* *** have any data greater than zero to the tsq          ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = 1;
  IN0TWX1.IN0TWCTR = 1;

   /* ************************************************************/
   /* *** if issued or released status: use issued qty        ****/
   /* ************************************************************/

  if (IN0TW03.XIUCD == "01"
   || IN0TW03.XIUCD == "02")
    while (IN0TWX1.IN0TWIX1 <= 40)
      if (IN8REC.IN8SIQ[IN0TWIX1] == 0)
         /* ** next sentence ***/
      else
        if (IN0TWX1.IN0TWCTR == 1)
          IN0TWX1.IN0TWLSS = "Y";
           /* ************************************************************/
           /* *** check for the end of page at this point since       ****/
           /* *** another line will be needed.                        ****/
           /* *** if the det max lines / lines per page remainder is  ****/
           /* *** equal to 0, the next line will be on a new screen:  ****/
           /* *** move this data to the next screen before continuing ****/
           /* ************************************************************/
          IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
          if (IN0TWX1.IN0TWREM == 0)
            IN0TS3K(); /* <=== move current data to next scrn*/
            if (IN0TWX1.IN0TWERS == "Y")
              return;
            end
            IN0TWX1.XXXMODID = "S3H";
          end
        end
        if (SYPREC.SY4IDDSC[IN0TWIX1] > " ")
          IN0TW03.SY4IDDSC[IN0TWCTR] = SYPREC.SY4IDDSC[IN0TWIX1];
        else
          IN0TW03.SY4IDDSC[IN0TWCTR] = "*****";
        end
        IN0TW03.IN0TWTQT[IN0TWCTR] = IN8REC.IN8SIQ[IN0TWIX1];
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
       /* ************************************************************/
       /* *** if the field counter per line is greater than 4:    ****/
       /* *** write the current line to the tsq & reset the ctr   ****/
       /* ************************************************************/
      if (IN0TWX1.IN0TWCTR > 4)
        IN0TWX1.IN0TWCTR = 1;
        IN0TW03.IN0TWDRT = "D";
        IN0TWX1.IN0TWLSS = "N";
        IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWDL3;
        call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
        if (IN0TWXP2.IN0TWXRC == 0)
          IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
        else
          IN0TWX1.IN0TWERS = "Y";
          IN0TWX1.XXXUNQID = "C";
          IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
          converseLib.validationFailed(0008); /* <--- tsq error msg*/
          return;
        end
      end
    end
     /* ************************************************************/
     /* *** if the line started switch is on ('Y'):             ****/
     /* *** make the rest of the fields dark  and               ****/
     /* *** write the current line to the tsq                   ****/
     /* ************************************************************/
    if (IN0TWX1.IN0TWLSS == "Y")
      IN0TW03.IN0TWDRT = "D";
      IN0TWX1.IN0TWLSS = "N";
      while (IN0TWX1.IN0TWCTR <= 4)
        IN0TW03.SY4IDDSC[IN0TWCTR] = " ";
        IN0TW03.IN0TWTQT[IN0TWCTR] = 0;
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWDL3;
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "D";
        IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** if shipped status: use shipped qty                  ****/
   /* ************************************************************/

  if (IN0TW03.XIUCD == "03")
    while (IN0TWX1.IN0TWIX1 <= 40)
      if (IN8REC.IN8SSQ[IN0TWIX1] == 0)
         /* ** next sentence ***/
      else
        if (IN0TWX1.IN0TWCTR == 1)
          IN0TWX1.IN0TWLSS = "Y";
           /* ************************************************************/
           /* *** check for the end of page at this point since       ****/
           /* *** another line will be needed.                        ****/
           /* *** if the det max lines / lines per page remainder is  ****/
           /* *** equal to 0, the next line will be on a new screen:  ****/
           /* *** move this data to the next screen before continuing ****/
           /* ************************************************************/
          IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
          if (IN0TWX1.IN0TWREM == 0)
            IN0TS3K(); /* <=== move current data to next scrn*/
            if (IN0TWX1.IN0TWERS == "Y")
              return;
            end
            IN0TWX1.XXXMODID = "S3H";
          end
        end
        if (SYPREC.SY4IDDSC[IN0TWIX1] > " ")
          IN0TW03.SY4IDDSC[IN0TWCTR] = SYPREC.SY4IDDSC[IN0TWIX1];
        else
          IN0TW03.SY4IDDSC[IN0TWCTR] = "*****";
        end
        IN0TW03.IN0TWTQT[IN0TWCTR] = IN8REC.IN8SSQ[IN0TWIX1];
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
       /* ************************************************************/
       /* *** if the field counter per line is greater than 4:    ****/
       /* *** write the current line to the tsq & reset the ctr   ****/
       /* ************************************************************/
      if (IN0TWX1.IN0TWCTR > 4)
        IN0TWX1.IN0TWCTR = 1;
        IN0TW03.IN0TWDRT = "D";
        IN0TWX1.IN0TWLSS = "N";
        IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWDL3;
        call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
        if (IN0TWXP2.IN0TWXRC == 0)
          IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
        else
          IN0TWX1.IN0TWERS = "Y";
          IN0TWX1.XXXUNQID = "C";
          IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
          converseLib.validationFailed(0008); /* <--- tsq error msg*/
          return;
        end
      end
    end
     /* ************************************************************/
     /* *** if the line started switch is on ('Y'):             ****/
     /* *** make the rest of the fields dark  and               ****/
     /* *** write the current line to the tsq                   ****/
     /* ************************************************************/
    if (IN0TWX1.IN0TWLSS == "Y")
      IN0TW03.IN0TWDRT = "D";
      IN0TWX1.IN0TWLSS = "N";
      while (IN0TWX1.IN0TWCTR <= 4)
        IN0TW03.SY4IDDSC[IN0TWCTR] = " ";
        IN0TW03.IN0TWTQT[IN0TWCTR] = 0;
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWDL3;
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "D";
        IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** if completed status & out only: use shipped qty     ****/
   /* ************************************************************/

  if (IN0TW03.XIUCD == "04"
   && IN0TW03.XISCD == "Y")
    while (IN0TWX1.IN0TWIX1 <= 40)
      if (IN8REC.IN8SSQ[IN0TWIX1] == 0)
         /* ** next sentence ***/
      else
        if (IN0TWX1.IN0TWCTR == 1)
          IN0TWX1.IN0TWLSS = "Y";
           /* ************************************************************/
           /* *** check for the end of page at this point since       ****/
           /* *** another line will be needed.                        ****/
           /* *** if the det max lines / lines per page remainder is  ****/
           /* *** equal to 0, the next line will be on a new screen:  ****/
           /* *** move this data to the next screen before continuing ****/
           /* ************************************************************/
          IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
          if (IN0TWX1.IN0TWREM == 0)
            IN0TS3K(); /* <=== move current data to next scrn*/
            if (IN0TWX1.IN0TWERS == "Y")
              return;
            end
            IN0TWX1.XXXMODID = "S3H";
          end
        end
        if (SYPREC.SY4IDDSC[IN0TWIX1] > " ")
          IN0TW03.SY4IDDSC[IN0TWCTR] = SYPREC.SY4IDDSC[IN0TWIX1];
        else
          IN0TW03.SY4IDDSC[IN0TWCTR] = "*****";
        end
        IN0TW03.IN0TWTQT[IN0TWCTR] = IN8REC.IN8SSQ[IN0TWIX1];
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
       /* ************************************************************/
       /* *** if the field counter per line is greater than 4:    ****/
       /* *** write the current line to the tsq & reset the ctr   ****/
       /* ************************************************************/
      if (IN0TWX1.IN0TWCTR > 4)
        IN0TWX1.IN0TWCTR = 1;
        IN0TW03.IN0TWDRT = "D";
        IN0TWX1.IN0TWLSS = "N";
        IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWDL3;
        call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
        if (IN0TWXP2.IN0TWXRC == 0)
          IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
        else
          IN0TWX1.IN0TWERS = "Y";
          IN0TWX1.XXXUNQID = "C";
          IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
          converseLib.validationFailed(0008); /* <--- tsq error msg*/
          return;
        end
      end
    end
     /* ************************************************************/
     /* *** if the line started switch is on ('Y'):             ****/
     /* *** make the rest of the fields dark  and               ****/
     /* *** write the current line to the tsq                   ****/
     /* ************************************************************/
    if (IN0TWX1.IN0TWLSS == "Y")
      IN0TW03.IN0TWDRT = "D";
      IN0TWX1.IN0TWLSS = "N";
      while (IN0TWX1.IN0TWCTR <= 4)
        IN0TW03.SY4IDDSC[IN0TWCTR] = " ";
        IN0TW03.IN0TWTQT[IN0TWCTR] = 0;
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWDL3;
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "D";
        IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** if completed status & not out only: use received qty****/
   /* ************************************************************/

  if (IN0TW03.XIUCD == "04"
   && IN0TW03.XISCD == "N")
    while (IN0TWX1.IN0TWIX1 <= 40)
      if (IN8REC.IN8SRQ[IN0TWIX1] == 0)
         /* ** next sentence ***/
      else
        if (IN0TWX1.IN0TWCTR == 1)
          IN0TWX1.IN0TWLSS = "Y";
           /* ************************************************************/
           /* *** check for the end of page at this point since       ****/
           /* *** another line will be needed.                        ****/
           /* *** if the det max lines / lines per page remainder is  ****/
           /* *** equal to 0, the next line will be on a new screen:  ****/
           /* *** move this data to the next screen before continuing ****/
           /* ************************************************************/
          IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
          if (IN0TWX1.IN0TWREM == 0)
            IN0TS3K(); /* <=== move current data to next scrn*/
            if (IN0TWX1.IN0TWERS == "Y")
              return;
            end
            IN0TWX1.XXXMODID = "S3H";
          end
        end
        if (SYPREC.SY4IDDSC[IN0TWIX1] > " ")
          IN0TW03.SY4IDDSC[IN0TWCTR] = SYPREC.SY4IDDSC[IN0TWIX1];
        else
          IN0TW03.SY4IDDSC[IN0TWCTR] = "*****";
        end
        IN0TW03.IN0TWTQT[IN0TWCTR] = IN8REC.IN8SRQ[IN0TWIX1];
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
       /* ************************************************************/
       /* *** if the field counter per line is greater than 4:    ****/
       /* *** write the current line to the tsq & reset the ctr   ****/
       /* ************************************************************/
      if (IN0TWX1.IN0TWCTR > 4)
        IN0TWX1.IN0TWCTR = 1;
        IN0TW03.IN0TWDRT = "D";
        IN0TWX1.IN0TWLSS = "N";
        IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWDL3;
        call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
        if (IN0TWXP2.IN0TWXRC == 0)
          IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
        else
          IN0TWX1.IN0TWERS = "Y";
          IN0TWX1.XXXUNQID = "C";
          IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
          converseLib.validationFailed(0008); /* <--- tsq error msg*/
          return;
        end
      end
    end
     /* ************************************************************/
     /* *** if the line started switch is on ('Y'):             ****/
     /* *** make the rest of the fields dark  and               ****/
     /* *** write the current line to the tsq                   ****/
     /* ************************************************************/
    if (IN0TWX1.IN0TWLSS == "Y")
      IN0TW03.IN0TWDRT = "D";
      IN0TWX1.IN0TWLSS = "N";
      while (IN0TWX1.IN0TWCTR <= 4)
        IN0TW03.SY4IDDSC[IN0TWCTR] = " ";
        IN0TW03.IN0TWTQT[IN0TWCTR] = 0;
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWDL3;
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "D";
        IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** if canceled or new status added: use requested qty  ****/
   /* ************************************************************/

  if (IN0TW03.XIUCD > "04")
    while (IN0TWX1.IN0TWIX1 <= 40)
      if (IN8REC.IN8SQQ[IN0TWIX1] == 0)
         /* ** next sentence ***/
      else
        if (IN0TWX1.IN0TWCTR == 1)
          IN0TWX1.IN0TWLSS = "Y";
           /* ************************************************************/
           /* *** check for the end of page at this point since       ****/
           /* *** another line will be needed.                        ****/
           /* *** if the det max lines / lines per page remainder is  ****/
           /* *** equal to 0, the next line will be on a new screen:  ****/
           /* *** move this data to the next screen before continuing ****/
           /* ************************************************************/
          IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDML % IN0TWX1.IN0TWLPP;
          if (IN0TWX1.IN0TWREM == 0)
            IN0TS3K(); /* <=== move current data to next scrn*/
            if (IN0TWX1.IN0TWERS == "Y")
              return;
            end
            IN0TWX1.XXXMODID = "S3H";
          end
        end
        if (SYPREC.SY4IDDSC[IN0TWIX1] > " ")
          IN0TW03.SY4IDDSC[IN0TWCTR] = SYPREC.SY4IDDSC[IN0TWIX1];
        else
          IN0TW03.SY4IDDSC[IN0TWCTR] = "*****";
        end
        IN0TW03.IN0TWTQT[IN0TWCTR] = IN8REC.IN8SQQ[IN0TWIX1];
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      IN0TWX1.IN0TWIX1 = IN0TWX1.IN0TWIX1 + 1;
       /* ************************************************************/
       /* *** if the field counter per line is greater than 4:    ****/
       /* *** write the current line to the tsq & reset the ctr   ****/
       /* ************************************************************/
      if (IN0TWX1.IN0TWCTR > 4)
        IN0TWX1.IN0TWCTR = 1;
        IN0TW03.IN0TWDRT = "D";
        IN0TWX1.IN0TWLSS = "N";
        IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWDL3;
        call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
        if (IN0TWXP2.IN0TWXRC == 0)
          IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
        else
          IN0TWX1.IN0TWERS = "Y";
          IN0TWX1.XXXUNQID = "C";
          IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
          converseLib.validationFailed(0008); /* <--- tsq error msg*/
          return;
        end
      end
    end
     /* ************************************************************/
     /* *** if the line started switch is on ('Y'):             ****/
     /* *** make the rest of the fields dark  and               ****/
     /* *** write the current line to the tsq                   ****/
     /* ************************************************************/
    if (IN0TWX1.IN0TWLSS == "Y")
      IN0TW03.IN0TWDRT = "D";
      IN0TWX1.IN0TWLSS = "N";
      while (IN0TWX1.IN0TWCTR <= 4)
        IN0TW03.SY4IDDSC[IN0TWCTR] = " ";
        IN0TW03.IN0TWTQT[IN0TWCTR] = 0;
        IN0TWX1.IN0TWCTR = IN0TWX1.IN0TWCTR + 1;
      end
      IN0TWXP1.IN0TWXDL = IN0TW03.IN0TWDL3;
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "D";
        IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TS3H

// move lines to next screen
Function IN0TS3K()


  IN0TWX1.XXXMODID = "S3K";

   /* ************************************************************/
   /* *** read by the saved detail index to get data          ****/
   /* *** add data just read to next page & save det max lines****/
   /* *** update by the saved detail index as blank line      ****/
   /* *** repeat until remainder indicates last line on page  ****/
   /* *** has been re-written (test rem = 1 re: in0awsdx is   ****/
   /* *** incremented after processing)                       ****/
   /* *** note: the ws fields are set up to continue after    ****/
   /* ***       this completes = don't overlay                ****/
   /* ************************************************************/

  IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSDX % IN0TWX1.IN0TWLPP;

  while (IN0TWX1.IN0TWREM != 1)
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWSDX;
    IN0TWXP2.IN0TWXFC = "R";
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC == 0)
       /* ** next sentence ***/
    else
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWDML;
    IN0TWXP2.IN0TWXFC = "A";
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC == 0)
      IN0TWX1.IN0TWDML = IN0TWXP2.IN0TWXIX;
    else
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "B";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWSDX;
    IN0TWXP2.IN0TWXFC = "U";
    IN0TWXP1.IN0TWXDL = " ";
    IN0TWXP1.IN0TWXRT = "B";
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC == 0)
       /* ** next sentence ***/
    else
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "C";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0TWX1.IN0TWSDX = IN0TWX1.IN0TWSDX + 1;
    IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSDX % IN0TWX1.IN0TWLPP;
  end

  IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWDML;
  IN0TWXP2.IN0TWXFC = "A";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TS3K

// obtain selected xfer no.
Function IN0TS4A()


  IN0TWX1.XXXMODID = "S4A";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number for  ****/
   /* *** the current line & move it to the ws data line      ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "IN4T";
  IN0TWXP2.IN0TWXFC = "R";

  IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWSIX + IN0TWX1.IN0TWIX1 - 1;

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    IN0TW04.IN0TWSL4 = IN0TWXP1.IN0TWXDL;
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** save this line's summary subkey data                ****/
   /* ************************************************************/

  IN0TW01.IN7STNBR = IN0TW04.IN7STNBR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TS4A

// setup/format sum tsq line(s)
Function IN0TS4G()


   /* ************************************************************/
   /* *** setup summary tsq line(s) (if no read next error)   ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  IN0TWX1.XXXMODID = "S4G";

  IN0TWXP2.IN0TWXAP = "IN4T";

   /* ************************************************************/
   /* *** if no more db2 rows (sqlcode = +100):               ****/
   /* *** write blank lines to tsq until page full            ****/
   /* *** page full = max lines/lines per pg has 0 remainder  ****/
   /* *** note: index set to 01 when page full                ****/
   /* ************************************************************/

  if (IN0TWX1.VAGen_SQLCODE == +100)
    IN0TWXP1.IN0TWXDL = " ";
    IN0TWXP1.IN0TWXRT = "B";
    IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSML % IN0TWX1.IN0TWLPP;
    while (IN0TWX1.IN0TWREM != 0)
      call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0TWXP2.IN0TWXRC == 0)
        IN0TWX1.IN0TWSML = IN0TWXP2.IN0TWXIX;
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "A";
        IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSML % IN0TWX1.IN0TWLPP;
    end
    IN0TWX1.IN0TWSIX = 01;
    return;
  end

  IN0TW04.IN0TWSRT = "S";

  IN0TW04.IN7STNBR = IN7REC.IN7STNBR;
  IN0TW04.IN0TWIS = IN7REC.XISCD;
  IN0TW04.IN0TWIU = IN7REC.XIUCD;
  IN0TW04.IN0TWFWH = IN7REC.IN7STFWH;

   /* ************************************************************/
   /* *** if last to whse different: obtain new abrv.         ****/
   /* ************************************************************/

  IN0TW04.IN0TWTWH = IN7REC.IN7STTWH;

  if (IN0TW04.IN0TWTWH == IN0TW04.IN0TWLTW)
    IN0TW04.IN0TWTWD = IN0TW04.IN0TWLTD;
  else
    if (IN0TW04.IN0TWTWH in XWHTBL.XWHCD)
      IN0TW04.IN0TWTWD = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      IN0TW04.IN0TWTWD = "******";
    end
    IN0TW04.IN0TWLTD = IN0TW04.IN0TWTWD;
    IN0TW04.IN0TWLTW = IN0TW04.IN0TWTWH;
  end

  IN0TWX1.IN0TWWDT = IN7REC.IN7STLDT;
  IN0TW04.IN0TWLDT = IN0TWX1.IN0TWWSD;

  IN0TWX1.IN0TWWDT = IN7REC.IN7STHDT;
  IN0TW04.IN0TWHDT = IN0TWX1.IN0TWWSD;

  IN0TWX1.IN0TWWDT = IN7REC.IN7STETA;
  IN0TW04.IN0TWETA = IN0TWX1.IN0TWWSD;

  IN0TW04.KUCCOID = IN7REC.KUCCOID;

   /* ************************************************************/
   /* *** write the entire ws line to the tsq                 ****/
   /* ************************************************************/

  IN0TWXP1.IN0TWXDL = IN0TW04.IN0TWSL4;

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    IN0TWX1.IN0TWSML = IN0TWXP2.IN0TWXIX;
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TS4G

// missing key inputs edits
Function IN0TSA0()


  IN0TWX1.XXXMODID = "SA0";

   /* ************************************************************/
   /* *** setup missing errors:                               ****/
   /* ************************************************************/

  if (IN0TM005.IN0TMSNO > " ")
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- enter required field msg*/
    set IN0TM005.IN0TMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSA0

// missing key inputs edits
Function IN0TSA1()


  IN0TWX1.XXXMODID = "SA1";

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* ************************************************************/

  if (IN0TM010.IN7STNBR > 0)
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM010.IN7STNBR cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSA1

// missing key inputs edits
Function IN0TSA2()


  IN0TWX1.XXXMODID = "SA2";

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* ************************************************************/

  if (IN0TM020.IN7STNBR > 0)
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM020.IN7STNBR cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSA2

// missing key inputs edits
Function IN0TSA3()


  IN0TWX1.XXXMODID = "SA3";

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* ************************************************************/

  if (IN0TM030.XQACD > " ")
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM030.XQACD cursor, bold;
  end

  if (IN0TM030.XDMCD > " ")
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM030.XDMCD cursor, bold;
  end

  if (IN0TM030.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "C";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM030.SY2CLRID cursor, bold;
  end

  if (IN0TM030.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "D";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM030.SY1STNBR cursor, bold;
  end

  if (IN0TM030.XGPCD > " ")
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "E";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM030.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSA3

// missing field edits
Function IN0TSA4()


  IN0TWX1.XXXMODID = "SA2";

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* ************************************************************/

  if (IN0TM040.XIUCD > " ")
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM040.XIUCD cursor, bold;
  end

  if (IN0TM040.XISCD > " ")
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM040.XISCD cursor, bold;
  end

  if (IN0TM040.IN7STTWH > " ")
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "C";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM040.IN7STTWH cursor, bold;
  end

  if (IN0TM040.IN7STFWH > " ")
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "D";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0TM040.IN7STFWH cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSA4

// same key edits
Function IN0TSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (IN0TM010.IN7STNBR != IN0TW01.IN7STNBR)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  IN0TWX1.IN0TWSKS = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSB1

// same key edits
Function IN0TSB2()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (IN0TM020.IN7STNBR != IN0TW02.IN7STNBR)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  IN0TWX1.IN0TWSKS = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSB2

// same key edits
Function IN0TSB3()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (IN0TM030.XSDCD != IN0TW03.XSDCD)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM030.IN7STTOW != IN0TW03.IN7STTOW)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM030.IN7STFOW != IN0TW03.IN7STFOW)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM030.XQACD != IN0TW03.XQACD)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM030.XDMCD != IN0TW03.XDMCD)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM030.SY2CLRID != IN0TW03.SY2CLRID)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM030.SY1STNBR != IN0TW03.SY1STNBR)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM030.XGPCD != IN0TW03.XGPCD)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  IN0TWX1.IN0TWSKS = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSB3

// same key edits
Function IN0TSB4()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (IN0TM040.XIUCD != IN0TW04.XIUCD)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM040.XISCD != IN0TW04.XISCD)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM040.SY1STNBR != IN0TW04.SY1STNBR)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM040.SY2CLRID != IN0TW04.SY2CLRID)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM040.XDMCD != IN0TW04.XDMCD)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM040.IN7STTWH != IN0TW04.IN7STTWH)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  if (IN0TM040.IN7STFWH != IN0TW04.IN7STFWH)
    IN0TWX1.IN0TWSKS = "N";
    return;
  end

  IN0TWX1.IN0TWSKS = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSB4

// individual field edits
Function IN0TSC0()


  IN0TWX1.XXXMODID = "SC0";

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if end date entered: use ta0040 to validate         ****/
   /* ***                      otherwise use current date     ****/
   /* ************************************************************/

  if (IN0TM005.IN0TMEDT > 0)
    set TA2REC empty;
    set TA2REC01 empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = INRREC08.INR-ENTRY6-DT[INR-SEARCH-SUB];

    if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
      TA2REC01.TA2-GREG-DDMMYY = IN0TM005.IN0TMEDT;
    else /* Domestic*/
      TA2REC.TA2GRGAN = IN0TM005.IN0TMEDT;
    end

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      IN0TWX1.IN0TWEDT = TA2REC.TA2GRGGN;
      INWREC.INW-END-ZZZSDT = TA2REC.TA2GRGGN;
    else
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0018); /* <--- invalid date msg*/
      set IN0TM005.IN0TMEDT cursor, bold;
    end
  else
    IN0TWX1.IN0TWEDT = IN0TWX1.IN0TWCDT;
  end

   /* ************************************************************/
   /* *** if start date entered: use ta0040 to validate       ****/
   /* ***                        otherwisw use current date   ****/
   /* ************************************************************/

  if (IN0TM005.IN0TMSDT > 0)
    set TA2REC empty;
    set TA2REC01 empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = INRREC08.INR-ENTRY6-DT[INR-SEARCH-SUB];

    if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
      TA2REC01.TA2-GREG-DDMMYY = IN0TM005.IN0TMSDT;
    else /* Domestic*/
      TA2REC.TA2GRGAN = IN0TM005.IN0TMSDT;
    end

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      IN0TWX1.IN0TWSDT = TA2REC.TA2GRGGN;
      INWREC.INW-START-ZZZSDT = TA2REC.TA2GRGGN;
    else
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0018); /* <--- invalid date msg*/
      set IN0TM005.IN0TMSDT cursor, bold;
    end
  else
    IN0TWX1.IN0TWSDT = IN0TWX1.IN0TWCDT;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSC0

// key field edits
Function IN0TSC1()


  IN0TWX1.XXXMODID = "SC1";

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** use stock transfer header to get data for screen    ****/
   /* ************************************************************/

  IN7REC.IN7STNBR = IN0TM010.IN7STNBR;

  IN0TWX1.IN0TWLOC = "IN0TSC1 ";
  IN0TSXF(); /* <=== select in7rec row*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    set IN0TM010.IN7STNBR bold;
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

  IN0TM010.XISCD = IN7REC.XISCD;
  IN0TM010.XIUCD = IN7REC.XIUCD;
  IN0TM010.IN7STFWH = IN7REC.IN7STFWH;
  IN0TM010.IN7STFOW = IN7REC.IN7STFOW;
  IN0TM010.IN7STTWH = IN7REC.IN7STTWH;
  IN0TM010.IN7STTOW = IN7REC.IN7STTOW;

  if (IN7REC.IN7STIDT != 0)
    IN0TWX1.IN0TWWDT = IN7REC.IN7STIDT;
    IN0TM010.IN0TMIDT = IN0TWX1.IN0TWWSD;
  else
    IN0TM010.IN0TMIDT = 0;
  end

  if (IN7REC.IN7STLDT != 0)
    IN0TWX1.IN0TWWDT = IN7REC.IN7STLDT;
    IN0TM010.IN0TMLDT = IN0TWX1.IN0TWWSD;
  else
    IN0TM010.IN0TMLDT = 0;
  end

  if (IN7REC.IN7STHDT != 0)
    IN0TWX1.IN0TWWDT = IN7REC.IN7STHDT;
    IN0TM010.IN0TMHDT = IN0TWX1.IN0TWWSD;
  else
    IN0TM010.IN0TMHDT = 0;
  end

  if (IN7REC.IN7STRDT != 0)
    IN0TWX1.IN0TWWDT = IN7REC.IN7STRDT;
    IN0TM010.IN0TMRDT = IN0TWX1.IN0TWWSD;
  else
    IN0TM010.IN0TMRDT = 0;
  end

  if (IN7REC.IN7STQDT != 0)
    IN0TWX1.IN0TWWDT = IN7REC.IN7STQDT;
    IN0TM010.IN0TMQDT = IN0TWX1.IN0TWWSD;
  else
    IN0TM010.IN0TMQDT = 0;
  end

  if (IN7REC.IN7STETA != 0)
    IN0TWX1.IN0TWWDT = IN7REC.IN7STETA;
    IN0TM010.IN0TMETA = IN0TWX1.IN0TWWSD;
  else
    IN0TM010.IN0TMETA = 0;
  end

  if (IN7REC.OP1DSADT != 0)
    IN0TWX1.IN0TWWDT = IN7REC.OP1DSADT;
    IN0TM010.OP1DSADT = IN0TWX1.IN0TWWSD;
  else
    IN0TM010.OP1DSADT = 0;
  end

  if (IN7REC.OP1DSBDT != 0)
    IN0TWX1.IN0TWWDT = IN7REC.OP1DSBDT;
    IN0TM010.OP1DSBDT = IN0TWX1.IN0TWWSD;
  else
    IN0TM010.OP1DSBDT = 0;
  end

  IN0TM010.IN7STRNM = IN7REC.IN7STRNM;

  IN0TW01.IN0TWWCO = IN7REC.KUCCOID;
  IN0TW01.IN0TWACO = IN0TW01.IN0TWXCO;
  IN0TW01.IN0TWAST = IN7REC.KUMSTRID;
  IN0TW01.IN0TWWNX = IN7REC.XNXCD;
  IN0TW01.IN0TWANX = IN0TW01.IN0TWXNX;
  IN0TW01.XGPCD = IN7REC.XGPCD;
  IN0TM010.IN0TMANO = IN0TW01.IN0TWANO;

  IN0TM010.IN7STONM = IN7REC.IN7STONM;
  IN0TM010.XPPCD = IN7REC.XPPCD;
  IN0TM010.XPACD = IN7REC.XPACD;
  IN0TM010.XPKCD = IN7REC.XPKCD;
  IN0TM010.IN7STINS = IN7REC.IN7STINS;
  IN0TM010.IN7SPINS = IN7REC.IN7SPINS;
  IN0TM010.TF1CARCD = IN7REC.TF1CARCD;
  IN0TM010.TF2PRONO = IN7REC.TF2PRONO;
  IN0TM010.PK1BLLAD = IN7REC.PK1BLLAD;
  IN0TM010.PK1NBCTN = IN7REC.PK1NBCTN;
  IN0TM010.PK1WT = IN7REC.PK1WT;
  IN0TM010.SL1RCRNO = IN7REC.SL1RCRNO;

  if (IN7REC.IN7STCDT != 0)
    IN0TWX1.IN0TWWDT = IN7REC.IN7STCDT;
    IN0TM010.IN0TMCDT = IN0TWX1.IN0TWWSD;
  else
    IN0TM010.IN0TMCDT = 0;
  end

  IN0TM010.IN7STCRS = IN7REC.IN7STCRS;
  IN0TM010.IN7STCNM = IN7REC.IN7STCNM;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSC1

// key field edits
Function IN0TSC2()


  IN0TWX1.XXXMODID = "SC2";

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** use stock transfer header to get data for screen    ****/
   /* ************************************************************/

  IN7REC.IN7STNBR = IN0TM020.IN7STNBR;

  IN0TWX1.IN0TWLOC = "IN0TSC2 ";
  IN0TSXF(); /* <=== select in7rec row*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    set IN0TM020.IN7STNBR bold;
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

  IN0TM020.XIUCD = IN7REC.XIUCD;
  IN0TM020.IN7STFWH = IN7REC.IN7STFWH;
  IN0TM020.IN7STFOW = IN7REC.IN7STFOW;
  IN0TM020.IN7STTWH = IN7REC.IN7STTWH;
  IN0TM020.IN7STTOW = IN7REC.IN7STTOW;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSC2

// key field edits
Function IN0TSC3()


  IN0TWX1.XXXMODID = "SC3";

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if quality code in table & active: put abrv on map  ****/
   /* ************************************************************/

  if (IN0TM030.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0TM030.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
    else
      IN0TM030.XQAABRV = " ";
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0TM030.XQACD cursor, bold;
    end
  else
    IN0TM030.XQAABRV = " ";
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0TM030.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** dimension code must be in tbl & active              ****/
   /* ************************************************************/

  if (IN0TM030.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "C";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0TM030.XDMCD cursor, bold;
    end
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "D";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0TM030.XDMCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if start & end not present: use current date        ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWSDT > 0)
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWSDT = IN0TWX1.IN0TWCDT;
  end

  if (IN0TWX1.IN0TWEDT > 0)
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWEDT = IN0TWX1.IN0TWCDT;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSC3

// individual field edits
Function IN0TSC4()


  IN0TWX1.XXXMODID = "SC4";

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if status code is all or open: do not use table     ****/
   /* *** if status code in tbl & active: put desc. on map    ****/
   /* ************************************************************/

  if (IN0TM040.XIUCD == "A "
   || IN0TM040.XIUCD == " A")
    IN0TM040.XIUDESC = "ALL       ";
  else
    if (IN0TM040.XIUCD == "O "
     || IN0TM040.XIUCD == " O")
      IN0TM040.XIUDESC = "OPEN      ";
    else
      if (IN0TM040.XIUCD in XIUTBL.XIUCD)
        if (XIUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          IN0TM040.XIUDESC = XIUTBL.XIUDESC[sysVar.arrayIndex];
        else
          IN0TM040.XIUDESC = " ";
          IN0TWX1.IN0TWERS = "Y";
          IN0TWX1.XXXUNQID = "A";
          IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
          converseLib.validationFailed(0012); /* <--- inactive msg*/
          set IN0TM040.XIUCD cursor, bold;
        end
      else
        IN0TM040.XIUDESC = " ";
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "B";
        IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0011); /* <--- invalid value msg*/
        set IN0TM040.XIUCD cursor, bold;
      end
    end
  end

   /* ************************************************************/
   /* *** if type code is all: do not use table               ****/
   /* *** if type code in tbl & active: put desc. on map      ****/
   /* ************************************************************/

  if (IN0TM040.XISCD == "A "
   || IN0TM040.XISCD == " A")
    IN0TM040.XISDESC = "ALL            ";
  else
    if (IN0TM040.XISCD in XISTBL.XISCD)
      if (XISTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        IN0TM040.XISDESC = XISTBL.XISDESC[sysVar.arrayIndex];
      else
        IN0TM040.XISDESC = " ";
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "C";
        IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0012); /* <--- inactive msg*/
        set IN0TM040.XISCD cursor, bold;
      end
    else
      IN0TM040.XISDESC = " ";
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "D";
      IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0TM040.XISCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if to whse code is all: do not use table            ****/
   /* *** if to whse code in tbl & active: put abrv. on map   ****/
   /* ************************************************************/

  if (IN0TM040.IN7STTWH == "A "
   || IN0TM040.IN7STTWH == " A")
    IN0TM040.IN0TMTWD = "ALL         ";
  else
    if (IN0TM040.IN7STTWH in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        IN0TM040.IN0TMTWD = XWHTBL.XWHABRV[sysVar.arrayIndex];
      else
        IN0TM040.IN0TMTWD = " ";
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "E";
        IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0012); /* <--- inactive msg*/
        set IN0TM040.IN7STTWH cursor, bold;
      end
    else
      IN0TM040.IN0TMTWD = " ";
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "F";
      IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0TM040.IN7STTWH cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if from whse code is all: do not use table          ****/
   /* *** if from whse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (IN0TM040.IN7STFWH == "A "
   || IN0TM040.IN7STFWH == " A")
    IN0TM040.IN0TMFWD = "ALL         ";
  else
    if (IN0TM040.IN7STFWH in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        IN0TM040.IN0TMFWD = XWHTBL.XWHABRV[sysVar.arrayIndex];
      else
        IN0TM040.IN0TMFWD = " ";
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "G";
        IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0012); /* <--- inactive msg*/
        set IN0TM040.IN7STFWH cursor, bold;
      end
    else
      IN0TM040.IN0TMFWD = " ";
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "H";
      IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0TM040.IN7STFWH cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSC4

// relational edits
Function IN0TSD0()


  IN0TWX1.XXXMODID = "SD0";

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** start date must be less than or equal end date      ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWSDT > IN0TWX1.IN0TWEDT)
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM005.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0016); /* <--- start > end msg*/
    set IN0TM005.IN0TMSDT cursor, bold;
    set IN0TM005.IN0TMEDT bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSD0

// key relational edits
Function IN0TSD1()


  IN0TWX1.XXXMODID = "SD1";

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** use header data to get related descriptions         ****/
   /* *** note: most not found's or inactive's should NOT     ****/
   /* ***       stop processing                               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if picking PRIORITY code in tbl: put abrv. on map*/
   /* ************************************************************/

  if (IN0TM010.XPPCD > " ")
    if (IN0TM010.XPPCD in XPPTBL.XPPCD)
      IN0TM010.XPPABRV = XPPTBL.XPPABRV[sysVar.arrayIndex];
    else
      IN0TM010.XPPABRV = "******";
    end
  else
    IN0TM010.XPPABRV = " ";
  end

   /* ************************************************************/
   /* *** if picking code in tbl: put abrv. on map            ****/
   /* ************************************************************/

  if (IN0TM010.XPKCD > " ")
    if (IN0TM010.XPKCD in XPKTBL.XPKCD)
      IN0TM010.XPKABRV = XPKTBL.XPKABRV[sysVar.arrayIndex];
    else
      IN0TM010.XPKABRV = "******";
    end
  else
    IN0TM010.XPKABRV = " ";
  end

   /* ************************************************************/
   /* *** if packing code in tbl: put abrv. on map            ****/
   /* ************************************************************/

  if (IN0TM010.XPACD > " ")
    if (IN0TM010.XPACD in XPATBL.XPACD)
      IN0TM010.XPAABRV = XPATBL.XPAABRV[sysVar.arrayIndex];
    else
      IN0TM010.XPAABRV = "******";
    end
  else
    IN0TM010.XPAABRV = " ";
  end

   /* ************************************************************/
   /* *** if xfer type in table: put desc. on map             ****/
   /* ************************************************************/

  if (IN0TM010.XISCD > " ")
    if (IN0TM010.XISCD in XISTBL.XISCD)
      IN0TM010.XISDESC = XISTBL.XISDESC[sysVar.arrayIndex];
    else
      IN0TM010.XISDESC = "***************";
    end
  else
    IN0TM010.XISDESC = " ";
  end

   /* ************************************************************/
   /* *** if xfer status in tbl: put desc. on map             ****/
   /* ************************************************************/

  if (IN0TM010.XIUCD > " ")
    if (IN0TM010.XIUCD in XIUTBL.XIUCD)
      IN0TM010.XIUDESC = XIUTBL.XIUDESC[sysVar.arrayIndex];
    else
      IN0TM010.XIUDESC = "**********";
    end
  else
    IN0TM010.XIUDESC = " ";
  end

   /* ************************************************************/
   /* *** if cancel reason in tbl: put abrv. on map           ****/
   /* ************************************************************/

  if (IN0TM010.IN7STCRS > " ")
    if (IN0TM010.IN7STCRS in XIRTBL.XIRCD)
      IN0TM010.XIRABRV = XIRTBL.XIRABRV[sysVar.arrayIndex];
    else
      IN0TM010.XIRABRV = "********";
    end
  else
    IN0TM010.XIRABRV = " ";
  end

   /* ************************************************************/
   /* *** if from whse code in tbl: put abrv. on map          ****/
   /* ************************************************************/

  if (IN0TM010.IN7STFWH > " ")
    if (IN0TM010.IN7STFWH in XWHTBL.XWHCD)
      IN0TM010.IN0TMFWD = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      IN0TM010.IN0TMFWD = "************";
    end
  else
    IN0TM010.IN0TMFWD = " ";
  end

   /* ************************************************************/
   /* *** if whse owner group flag set (=Y): use ow table     ****/
   /* *** owner group must be zero for all other whses        ****/
   /* ************************************************************/

  if (IN0TM010.IN7STFOW > " "
   && IN0TM010.IN7STFWH > " ")
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
       /* ************************************************************/
       /* *** if owner group cd in tbl: put abrv. on map          ****/
       /* ************************************************************/
      IN0TWX1.XWHCD = IN0TM010.IN7STFWH;
      IN0TWX1.XOWCD = IN0TM010.IN7STFOW;
      if (IN0TWX1.XOWKEY in XOWTBL.XOWKEY)
        IN0TM010.IN0TMFOD = XOWTBL.XOWABRV[sysVar.arrayIndex];
      else
        IN0TM010.IN0TMFOD = "******";
      end
    else
      if (IN0TM010.IN7STFOW == "00")
        IN0TM010.IN0TMFOD = " ";
      else
        IN0TM010.IN0TMFOD = "******";
      end
    end
  else
    if (IN0TM010.IN7STFOW > " ")
      IN0TM010.IN0TMFOD = "******";
    else
      IN0TM010.IN0TMFOD = " ";
    end
  end

   /* ************************************************************/
   /* *** if to whse code in tbl & active: put abrv. on map   ****/
   /* ************************************************************/

  if (IN0TM010.IN7STTWH > " ")
    if (IN0TM010.IN7STTWH in XWHTBL.XWHCD)
      IN0TM010.IN0TMTWD = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      IN0TM010.IN0TMTWD = "******";
    end
  else
    IN0TM010.IN0TMTWD = " ";
  end

   /* ************************************************************/
   /* *** if whse owner group flag set (=Y): use ow table     ****/
   /* *** owner group must be zero for all other whses        ****/
   /* ************************************************************/

  if (IN0TM010.IN7STTOW > " "
   && IN0TM010.IN7STTWH > " ")
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
       /* ************************************************************/
       /* *** if owner group cd in tbl & active: put abrv. on map ****/
       /* ************************************************************/
      IN0TWX1.XWHCD = IN0TM010.IN7STTWH;
      IN0TWX1.XOWCD = IN0TM010.IN7STTOW;
      if (IN0TWX1.XOWKEY in XOWTBL.XOWKEY)
        IN0TM010.IN0TMTOD = XOWTBL.XOWABRV[sysVar.arrayIndex];
      else
        IN0TM010.IN0TMTOD = "******";
      end
    else
      if (IN0TM010.IN7STTOW == "00")
        IN0TM010.IN0TMTOD = " ";
      else
        IN0TM010.IN0TMTOD = "******";
      end
    end
  else
    if (IN0TM010.IN7STTOW > " ")
      IN0TM010.IN0TMTOD = "******";
    else
      IN0TM010.IN0TMTOD = " ";
    end
  end

   /* ************************************************************/
   /* *** use company db view to get the company name         ****/
   /* ************************************************************/

  KUCREC.KUCCOID = IN7REC.KUCCOID;

  IN0TWX1.IN0TWLOC = "IN0TSD1 ";
  IN0TSXU(); /* <=== select kucrec row*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

  IN0TM010.KUCCONM = KUCREC.KUCCONM;

   /* ************************************************************/
   /* *** use store db view to get the store name             ****/
   /* ************************************************************/

  KUMREC.KUMSTRID = IN7REC.KUMSTRID;

  IN0TWX1.IN0TWLOC = "IN0TSD1 ";
  IN0TSXV(); /* <=== select kumrec row*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

  IN0TM010.KUMSTSNM = KUMREC.KUMSTSNM;

   /* ************************************************************/
   /* *** use carrier db view to get the carrier name         ****/
   /* ************************************************************/

  if (IN0TM010.TF1CARCD > " ")
    TF1REC.TF1CARCD = IN0TM010.TF1CARCD;
    IN0TWX1.IN0TWLOC = "IN0TSD1 ";
    IN0TSXZ(); /* <=== select tf1rec row*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
      return;
    end
    IN0TM010.TF1SABRV = TF1REC.TF1SABRV;
  else
    IN0TM010.TF1SABRV = " ";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSD1

// key relational edits
Function IN0TSD2()


  IN0TWX1.XXXMODID = "SD2";

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** use header data to get related descriptions         ****/
   /* *** note: most not found's or inactive's should NOT     ****/
   /* ***       stop processing                               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if xfer status in tbl: put desc. on map             ****/
   /* ************************************************************/

  if (IN0TM020.XIUCD in XIUTBL.XIUCD)
    IN0TM020.XIUDESC = XIUTBL.XIUDESC[sysVar.arrayIndex];
  else
    IN0TM020.XIUDESC = "**********";
  end

   /* ************************************************************/
   /* *** if from whse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (IN0TM020.IN7STFWH > " ")
    if (IN0TM020.IN7STFWH in XWHTBL.XWHCD)
      IN0TM020.IN0TMFWD = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      IN0TM020.IN0TMFWD = "************";
    end
  else
    IN0TM020.IN0TMFWD = " ";
  end

   /* ************************************************************/
   /* *** if whse owner group flag set (=Y): use ow table     ****/
   /* *** owner group must be zero for all other whses        ****/
   /* ************************************************************/

  if (IN0TM020.IN7STFWH > " "
   && IN0TM020.IN7STFOW > " ")
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
       /* ************************************************************/
       /* *** if owner group cd in tbl & active: put abrv. on map ****/
       /* ************************************************************/
      IN0TWX1.XWHCD = IN0TM020.IN7STFWH;
      IN0TWX1.XOWCD = IN0TM020.IN7STFOW;
      if (IN0TWX1.XOWKEY in XOWTBL.XOWKEY)
        IN0TM020.IN0TMFOD = XOWTBL.XOWABRV[sysVar.arrayIndex];
      else
        IN0TM020.IN0TMFOD = "******";
      end
    else
      if (IN0TM020.IN7STFOW == "00")
        IN0TM020.IN0TMFOD = " ";
      else
        IN0TM020.IN0TMFOD = "******";
      end
    end
  else
    if (IN0TM020.IN7STFOW > " ")
      IN0TM020.IN0TMFOD = "******";
    else
      IN0TM020.IN0TMFOD = " ";
    end
  end

   /* ************************************************************/
   /* *** if to whse code in tbl & active: put abrv. on map   ****/
   /* ************************************************************/

  if (IN0TM020.IN7STTWH in XWHTBL.XWHCD)
    if (IN0TM020.IN7STTWH in XWHTBL.XWHCD)
      IN0TM020.IN0TMTWD = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      IN0TM020.IN0TMTWD = "************";
    end
  else
    IN0TM020.IN0TMTWD = " ";
  end

   /* ************************************************************/
   /* *** if whse owner group flag set (=Y): use ow table     ****/
   /* *** owner group must be zero for all other whses        ****/
   /* ************************************************************/

  if (IN0TM020.IN7STTWH > " "
   && IN0TM020.IN7STTOW > " ")
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
       /* ************************************************************/
       /* *** if owner group cd in tbl & active: put abrv. on map ****/
       /* ************************************************************/
      IN0TWX1.XWHCD = IN0TM020.IN7STTWH;
      IN0TWX1.XOWCD = IN0TM020.IN7STTOW;
      if (IN0TWX1.XOWKEY in XOWTBL.XOWKEY)
        IN0TM020.IN0TMTOD = XOWTBL.XOWABRV[sysVar.arrayIndex];
      else
        IN0TM020.IN0TMTOD = "******";
      end
    else
      if (IN0TM020.IN7STTOW == "00")
        IN0TM020.IN0TMTOD = " ";
      else
        IN0TM020.IN0TMTOD = "******";
      end
    end
  else
    if (IN0TM020.IN7STTOW > " ")
      IN0TM020.IN0TMTOD = "******";
    else
      IN0TM020.IN0TMTOD = " ";
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSD2

// key relational edits
Function IN0TSD3()


  IN0TWX1.XXXMODID = "SD3";

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* Use IN8020 to get short style name, units per case,       **/
   /* color abbreviation and life cycle code.                   **/
   /* ************************************************************/

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
  INGREC.XGP-GPC-CD = IN0TM030.XGPCD;
  INGREC.SY-STY-NBR = IN0TM030.SY1STNBR;
  INGREC.SY-COLR-CD-ID = IN0TM030.SY2CLRID;
  INGREC.XDM-DIM-CD = IN0TM030.XDMCD;

  IN0TWX1.IN0TWLOC = "IN0TSD3 ";
  TA1REC.TA1PGMNM = "IN0TSD3 ";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020(); /* Call IN8020 subroutine*/

  if (INGREC.ING-RETURN-CD > 0000)
    IN0TS-IN8020-ERRS();
    IN0TWX1.IN0TWERS = "Y";
  else
    IN0TM030.SY1SSTNM = INGREC.SY1SSTNM;
    IN0TM030.IN0TMUPC = INGREC.SY1UNPCS;
    IN0TM030.SY2CLRAB = INGREC.SY2CLRAB;
  end

   /* ************************************************************/
   /* *** if current date greater than effective date:        ****/
   /* *** use the corresponding life cycle code               ****/
   /* *** note: effective dates in ascending order            ****/
   /* ************************************************************/
  if (IN0TWX1.IN0TWCDT >= INGREC.SY2CEDT1)
    IN0TM030.XLCCD = INGREC.XLCCD1;
  else
    if (IN0TWX1.IN0TWCDT >= INGREC.SY2CEDT2)
      IN0TM030.XLCCD = INGREC.XLCCD2;
    else
      if (IN0TWX1.IN0TWCDT >= INGREC.SY2CEDT3)
        IN0TM030.XLCCD = INGREC.XLCCD3;
      else
        if (IN0TWX1.IN0TWCDT >= INGREC.SY2CEDT4)
          IN0TM030.XLCCD = INGREC.XLCCD4;
        else
           /* ************************************************************/
           /* *** fall thru error - code shouldn't have been executed ****/
           /* ************************************************************/
          IN0TWX1.IN0TWERS = "Y";
          IN0TWX1.XXXUNQID = "A";
          IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
          converseLib.validationFailed(0008); /* <--- fall thru error msg*/
          return;
        end
      end
    end
  end

  if (IN0TWX1.IN0TWERS == "Y")
    set IN0TM030.XGPCD bold;
    set IN0TM030.SY1STNBR bold;
    set IN0TM030.SY2CLRID bold;
    set IN0TM030.XDMCD bold;
    set IN0TM030.XLCCD cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** if life cycle in tbl & active: move abrv. to screen ****/
   /* ************************************************************/

  if (IN0TM030.XLCCD in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0TM030.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      IN0TM030.XLCABRV = " ";
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "D";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0TM030.XLCCD cursor, bold;
      return;
    end
  else
    IN0TM030.XLCABRV = " ";
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "E";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe error msg*/
    set IN0TM030.XLCCD cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSD3

// relational field edits
Function IN0TSD4()


  IN0TWX1.XXXMODID = "SD4";

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if from whse = to whse error except if = 'A'        ****/
   /* ************************************************************/

  if (IN0TM040.IN7STFWH == "A")
     /* ** next sentence ***/
  else
    if (IN0TM040.IN7STFWH == IN0TM040.IN7STTWH)
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0025); /* <--- to can't = from whse msg*/
      set IN0TM040.IN7STFWH cursor, bold;
      set IN0TM040.IN7STTWH bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSD4

// save current key value(s)
Function IN0TSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0TW01.IN7STNBR = IN0TM010.IN7STNBR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSF1

// save current key value(s)
Function IN0TSF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0TW02.IN7STNBR = IN0TM020.IN7STNBR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSF2

// save current key value(s)
Function IN0TSF3()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0TW03.XSDCD = IN0TM030.XSDCD;
  IN0TW03.IN7STTOW = IN0TM030.IN7STTOW;
  IN0TW03.IN7STFOW = IN0TM030.IN7STFOW;
  IN0TW03.XQACD = IN0TM030.XQACD;
  IN0TW03.XDMCD = IN0TM030.XDMCD;
  IN0TW03.SY2CLRID = IN0TM030.SY2CLRID;
  IN0TW03.SY1STNBR = IN0TM030.SY1STNBR;
  IN0TW03.XGPCD = IN0TM030.XGPCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSF3

// save key values
Function IN0TSF4()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0TW04.XIUCD = IN0TM040.XIUCD;
  IN0TW04.XISCD = IN0TM040.XISCD;
  IN0TW04.XDMCD = IN0TM040.XDMCD;
  IN0TW04.SY2CLRID = IN0TM040.SY2CLRID;
  IN0TW04.SY1STNBR = IN0TM040.SY1STNBR;
  IN0TW04.IN7STTWH = IN0TM040.IN7STTWH;
  IN0TW04.IN7STFWH = IN0TM040.IN7STFWH;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSF4

// setup map key fields
Function IN0TSG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* *** depending on which last key has the most related    ****/
   /* *** data, if any  or  use all default values            ****/
   /* *** note: check first for SES=y to resetup scrn         ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWSES == "Y")
    IN0TWX1.IN0TWSES = "N";
    IN0TM010.IN7STNBR = IN0TW01.IN7STNBR;
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

  if (IN0TW02.IN7STNBR > 0)
    IN0TM010.IN7STNBR = IN0TW02.IN7STNBR;
    return;
  end

   /* IF IN0TW03.IN0TWLST GT 0;*/
    /* MOVE IN0TW03.IN0TWLST TO IN0TM010.IN7STNBR;*/
    /* EZERTN;*/
   /* END ;*/

   /* IF IN0TW04.IN0TWLST GT 0;*/
    /* MOVE IN0TW04.IN0TWLST TO IN0TM010.IN7STNBR;*/
    /* EZERTN;*/
   /* END ;*/

  if (IN0TW01.IN7STNBR > 0)
    IN0TM010.IN7STNBR = IN0TW01.IN7STNBR;
    return;
  end

   /* no default value*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSG1

// setup map key fields
Function IN0TSG2()


   /* ************************************************************/
   /* *** use current ws values to the corresponding map flds ****/
   /* *** depending on which last key has the most related    ****/
   /* *** data, if any  or  use all default values            ****/
   /* *** note: check first for SES=y to resetup scrn         ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWSES == "Y")
    IN0TWX1.IN0TWSES = "N";
    IN0TM020.IN7STNBR = IN0TW02.IN7STNBR;
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

  if (IN0TW01.IN7STNBR > 0)
    IN0TM020.IN7STNBR = IN0TW01.IN7STNBR;
    return;
  end

  if (IN0TW02.IN7STNBR > 0)
    IN0TM020.IN7STNBR = IN0TW02.IN7STNBR;
    return;
  end

   /* IF IN0TW03.IN0TWLST GT 0*/
    /* MOVE IN0TW03.IN0TWLST TO IN0TM020.IN7STNBR;*/
    /* EZERTN;*/
   /* END ;*/

   /* IF IN0TW04.IN0TWLST GT 0*/
    /* MOVE IN0TW04.IN0TWLST TO IN0TM020.IN7STNBR;*/
    /* EZERTN;*/
   /* END ;*/

   /* no default value*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSG2

// setup map key fields
Function IN0TSG3()


   /* ************************************************************/
   /* *** use current ws values to the corresponding map flds ****/
   /* *** depending on which last key has the most related    ****/
   /* *** data, if any  or  use all default values            ****/
   /* *** note: check first for SES=y to resetup scrn         ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWSES == "Y")
    IN0TWX1.IN0TWSES = "N";
    IN0TM030.XSDCD = IN0TW03.XSDCD;
    IN0TM030.IN7STTOW = IN0TW03.IN7STTOW;
    IN0TM030.IN7STFOW = IN0TW03.IN7STFOW;
    IN0TM030.XQACD = IN0TW03.XQACD;
    IN0TM030.XDMCD = IN0TW03.XDMCD;
    IN0TM030.SY2CLRID = IN0TW03.SY2CLRID;
    IN0TM030.SY1STNBR = IN0TW03.SY1STNBR;
    IN0TM030.XGPCD = IN0TW03.XGPCD;
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

  if (IN0TW03.IN0TWLK3 > " ")
    IN0TM030.XSDCD = IN0TW03.XSDCD;
    IN0TM030.IN7STTOW = IN0TW03.IN7STTOW;
    IN0TM030.IN7STFOW = IN0TW03.IN7STFOW;
    IN0TM030.XQACD = IN0TW03.XQACD;
    IN0TM030.XDMCD = IN0TW03.XDMCD;
    IN0TM030.SY2CLRID = IN0TW03.SY2CLRID;
    IN0TM030.SY1STNBR = IN0TW03.SY1STNBR;
    IN0TM030.XGPCD = IN0TW03.XGPCD;
    return;
  end

  IN0TM030.XQACD = "01";
  IN0TM030.XDMCD = "00";
  IN0TM030.SY2CLRID = "00 ";
  IN0TM030.SY1STNBR = " ";
  IN0TM030.IN7STFOW = "  ";
  IN0TM030.IN7STTOW = "  ";
  IN0TM030.XSDCD = "  ";

   /* ************************************************************/
   /* *** Get the GPC by using the commarea whse code to look ****/
   /* ***     at the XWHTBL & set the cursor at style.        ****/
   /* *** Else set the cursor at the GPC (key it in).         ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD in XWHTBL.XWHCD
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    IN0TM030.XGPCD = XWHTBL.XGPCD1[sysVar.arrayIndex];
    set IN0TM030.SY1STNBR cursor;
  else
    IN0TM030.XGPCD = " ";
    set IN0TM030.XGPCD cursor;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSG3

// setup map key fields
Function IN0TSG4()


   /* ************************************************************/
   /* *** use current ws values to the corresponding map flds ****/
   /* *** depending on which last key has the most related    ****/
   /* *** data, if any  or  use all default values            ****/
   /* *** note: check first for SES=y to resetup scrn         ****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWSES == "Y")
    IN0TWX1.IN0TWSES = "N";
    IN0TM040.IN7STFWH = IN0TW04.IN7STFWH;
    IN0TM040.IN7STTWH = IN0TW04.IN7STTWH;
    IN0TM040.SY1STNBR = IN0TW04.SY1STNBR;
    IN0TM040.SY2CLRID = IN0TW04.SY2CLRID;
    IN0TM040.XDMCD = IN0TW04.XDMCD;
    IN0TM040.XISCD = IN0TW04.XISCD;
    IN0TM040.XIUCD = IN0TW04.XIUCD;
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

  IN0TM040.IN7STFWH = " ";
  IN0TM040.IN7STTWH = "A ";
  IN0TM040.SY1STNBR = " ";
  IN0TM040.SY2CLRID = " ";
  IN0TM040.XDMCD = "00";
  IN0TM040.XISCD = "A ";
  IN0TM040.XIUCD = "A ";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSG4

// ENTER processing
Function IN0TSH0()


  IN0TWX1.XXXMODID = "SH0";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* *** note: don't care if it is the same key/selection    ****/
   /* *** note: edit/valid value part of decision in flow     ****/
   /* ************************************************************/

  IN0TSA0(); /* <=== missing input edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  IN0TWX1.XXXMODID = "SH0";

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0TSC0(); /* <=== field edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0TSD0(); /* <=== relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSH0

// ENTER processing
Function IN0TSH1()


  IN0TWX1.XXXMODID = "SH1";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0TSA1(); /* <=== missing input edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* *** note: saved keys will be blank & NOT= if first time ****/
   /* ************************************************************/

  IN0TSB1(); /* <=== same key edits*/

  IN0TWX1.XXXMODID = "SH1";

  if (IN0TWX1.IN0TWSKS == "Y")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM010.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0001); /* <--- new input msg*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0TSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0TSC1(); /* <=== field edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0TSD1(); /* <=== relational edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSH1

// ENTER processing
Function IN0TSH2()


  IN0TWX1.XXXMODID = "SH2";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0TSA2(); /* <=== missing input edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  IN0TSB2(); /* <=== same key edits*/

  IN0TWX1.XXXMODID = "SH2";

  if (IN0TWX1.IN0TWSKS == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (IN0TWX1.IN0TWLPF == "E")
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0001); /* <--- new input msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER & key is the same:   ****/
     /* ***   setup last pfkey = ENTER & make sure tsq is setup ****/
     /* ***   find the same subkey as on detail (& top of page) ****/
     /* ***   setup summary data lines for this page            ****/
     /* ***note: last pfkey can't be blank (first time thru)    ****/
     /* ***      re: same key checks will eq 'n'                ****/
     /* ************************************************************/
    IN0TWX1.IN0TWLPF = "E";
    IN0TSS2(); /* <=== setup all summary pages in tsq*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      return;
    end
    IN0TSU2(); /* <=== match detail's subkey*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INST";
    IN0TWXP2.IN0TWXFC = "R";
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  IN0TSF2(); /* <=== save current key value(s)*/

  IN0TWX1.IN0TWLPF = "E";

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0TSC2(); /* <=== field edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0TSD2(); /* <=== relational edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  IN0TSX2(); /* <=== purge both tsqs*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  IN0TSS2(); /* <=== setup all summary pages in tsq*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY procesing                         ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = 1;

  IN0TWXP2.IN0TWXAP = "INST";
  IN0TWXP2.IN0TWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSH2

// ENTER processing
Function IN0TSH3()


  IN0TWX1.XXXMODID = "SH3";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0TSA3(); /* <=== missing input edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  IN0TSB3(); /* <=== same key edits*/

  IN0TWX1.XXXMODID = "SH3";

  if (IN0TWX1.IN0TWSKS == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (IN0TWX1.IN0TWLPF == "E")
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0001); /* <--- new input msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER & key is the same:   ****/
     /* ***   setup last pfkey = ENTER & make sure tsq is setup ****/
     /* ***   find the same subkey as on detail (& top of page) ****/
     /* ***   setup summary data lines for this page            ****/
     /* ***note: last pfkey can't be blank (first time thru)    ****/
     /* ***      re: same key checks will eq 'n'                ****/
     /* ************************************************************/
    IN0TWX1.IN0TWLPF = "E";
    IN0TSS3(); /* <=== setup all summary pages in tsq*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      return;
    end
    IN0TSU3(); /* <=== match detail's subkey*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INUT";
    IN0TWXP2.IN0TWXFC = "R";
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0TSC3(); /* <=== field edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  IN0TSF3(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0TSD3(); /* <=== relational edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  IN0TWX1.IN0TWLPF = "E";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  IN0TSX3(); /* <=== purge both tsqs*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  IN0TSS3(); /* <=== setup all summary pages in tsq*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY procesing                         ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = 1;

  IN0TWXP2.IN0TWXAP = "INUT";
  IN0TWXP2.IN0TWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSH3

// ENTER processing
Function IN0TSH4()


  IN0TWX1.XXXMODID = "SH4";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0TSA4(); /* <=== missing input edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  IN0TSB4(); /* <=== same key edits*/

  IN0TWX1.XXXMODID = "SH4";

  if (IN0TWX1.IN0TWSKS == "Y")
     /* ************************************************************/
     /* *** if same key fields: setup error                     ****/
     /* ************************************************************/
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0001); /* <--- new input msg*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  IN0TSF4(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0TSC4(); /* <=== field edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0TSD4(); /* <=== relational edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  IN0TSX4(); /* <=== purge both tsqs*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  IN0TSS4(); /* <=== setup all summary pages in tsq*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY procesing                         ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = 1;

  IN0TWXP2.IN0TWXAP = "IN4T";
  IN0TWXP2.IN0TWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSH4

// PF6 processing
Function IN0TSI2()


  IN0TWX1.XXXMODID = "SI2";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0TSA2(); /* <=== missing input edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: IN0XWSKS = Y : same keys as last saved        ****/
   /* ************************************************************/

  IN0TSB2(); /* <=== same key edits*/

  IN0TWX1.XXXMODID = "SI2";

  if (IN0TWX1.IN0TWSKS == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (IN0TWX1.IN0TWLPF == "6")
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0001); /* <--- new input msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6 & make sure tsq is setup   ****/
     /* ***   find the same subkey as on summary (& top of page)****/
     /* ***   setup detail data lines for this page             ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    IN0TWX1.IN0TWLPF = "6";
    IN0TSV2(); /* <=== setup all detail pages in tsq*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      return;
    end
    IN0TSW2(); /* <=== match summary's subkey*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INDT";
    IN0TWXP2.IN0TWXFC = "R";
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  IN0TSF2(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0TSC2(); /* <=== field edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0TSD2(); /* <=== relational edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  IN0TWX1.IN0TWLPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  IN0TSX2(); /* <=== purge both tsqs*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq and first page          ****/
   /* ************************************************************/

  IN0TSV2(); /* <=== setup all detail pages in tsq*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY processing                        ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = 1;

  IN0TWXP2.IN0TWXAP = "INDT";
  IN0TWXP2.IN0TWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSI2

// PF6 processing
Function IN0TSI3()


  IN0TWX1.XXXMODID = "SI3";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0TSA3(); /* <=== missing input edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: IN0XWSKS = Y : same keys as last saved        ****/
   /* ************************************************************/

  IN0TSB3(); /* <=== same key edits*/

  IN0TWX1.XXXMODID = "SI3";

  if (IN0TWX1.IN0TWSKS == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (IN0TWX1.IN0TWLPF == "6")
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0001); /* <--- new input msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6 & make sure tsq is setup   ****/
     /* ***   find the same subkey as on summary (& top of page)****/
     /* ***   setup detail data lines for this page             ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    IN0TWX1.IN0TWLPF = "6";
    IN0TSV3(); /* <=== setup all detail pages in tsq*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      return;
    end
    IN0TSW3(); /* <=== match summary's subkey*/
    if (IN0TWX1.IN0TWERS == "Y")
      IN0TWX1.IN0TWSES = "Y";
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INET";
    IN0TWXP2.IN0TWXFC = "R";
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0TSC3(); /* <=== field edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  IN0TSF3(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0TSD3(); /* <=== relational edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  IN0TWX1.IN0TWLPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  IN0TSX3(); /* <=== purge both tsqs*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq and first page          ****/
   /* ************************************************************/

  IN0TSV3(); /* <=== setup all detail pages in tsq*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY processing                        ****/
   /* ************************************************************/

  IN0TWX1.IN0TWIX1 = 1;

  IN0TWXP2.IN0TWXAP = "INET";
  IN0TWXP2.IN0TWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSI3

// PF7 processing
Function IN0TSJ2()


  IN0TWX1.XXXMODID = "SJ2";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0TSB2(); /* <=== same key edits*/

  if (IN0TWX1.IN0TWSKS == "N")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWLPF == "E")
    IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX - IN0TWX1.IN0TWLPP;
    if (IN0TWX1.IN0TWSIX <= 0)
      IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX + IN0TWX1.IN0TWLPP;
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "B";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0003); /* <--- on first page msg*/
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INST";
    IN0TWXP2.IN0TWXFC = "R";
  else
    IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX - IN0TWX1.IN0TWLPP;
    if (IN0TWX1.IN0TWDIX <= 0)
      IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX + IN0TWX1.IN0TWLPP;
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "C";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0003); /* <--- on first page msg*/
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INDT";
    IN0TWXP2.IN0TWXFC = "R";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSJ2

// PF7 processing
Function IN0TSJ3()


  IN0TWX1.XXXMODID = "SJ3";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0TSB3(); /* <=== same key edits*/

  if (IN0TWX1.IN0TWSKS == "N")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWLPF == "E")
    IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX - IN0TWX1.IN0TWLPP;
    if (IN0TWX1.IN0TWSIX <= 0)
      IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX + IN0TWX1.IN0TWLPP;
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "B";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0003); /* <--- on first page msg*/
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INUT";
    IN0TWXP2.IN0TWXFC = "R";
  else
    IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX - IN0TWX1.IN0TWLPP;
    if (IN0TWX1.IN0TWDIX <= 0)
      IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX + IN0TWX1.IN0TWLPP;
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "C";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0003); /* <--- on first page msg*/
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INET";
    IN0TWXP2.IN0TWXFC = "R";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSJ3

// PF7 processing
Function IN0TSJ4()


  IN0TWX1.XXXMODID = "SJ4";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0TSB4(); /* <=== same key edits*/

  if (IN0TWX1.IN0TWSKS == "N")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* ************************************************************/

  IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX - IN0TWX1.IN0TWLPP;
  if (IN0TWX1.IN0TWSIX <= 0)
    IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX + IN0TWX1.IN0TWLPP;
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0003); /* <--- on first page msg*/
    return;
  end
  IN0TWX1.IN0TWIX1 = 1;
  IN0TWXP2.IN0TWXAP = "IN4T";
  IN0TWXP2.IN0TWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSJ4

// PF8 processing
Function IN0TSK2()


  IN0TWX1.XXXMODID = "SK2";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0TSB2(); /* <=== same key edits*/

  if (IN0TWX1.IN0TWSKS == "N")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWLPF == "E")
    IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX + IN0TWX1.IN0TWLPP;
    if (IN0TWX1.IN0TWSIX >= IN0TWX1.IN0TWSML)
      IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX - IN0TWX1.IN0TWLPP;
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "B";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0004); /* <--- on last page msg*/
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INST";
    IN0TWXP2.IN0TWXFC = "R";
  else
    IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX + IN0TWX1.IN0TWLPP;
    if (IN0TWX1.IN0TWDIX >= IN0TWX1.IN0TWDML)
      IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX - IN0TWX1.IN0TWLPP;
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "C";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0004); /* <--- on last page msg*/
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INDT";
    IN0TWXP2.IN0TWXFC = "R";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSK2

// PF8 processing
Function IN0TSK3()


  IN0TWX1.XXXMODID = "SK3";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0TSB3(); /* <=== same key edits*/

  if (IN0TWX1.IN0TWSKS == "N")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (IN0TWX1.IN0TWLPF == "E")
    IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX + IN0TWX1.IN0TWLPP;
    if (IN0TWX1.IN0TWSIX >= IN0TWX1.IN0TWSML)
      IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX - IN0TWX1.IN0TWLPP;
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "B";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0004); /* <--- on last page msg*/
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INUT";
    IN0TWXP2.IN0TWXFC = "R";
  else
    IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX + IN0TWX1.IN0TWLPP;
    if (IN0TWX1.IN0TWDIX >= IN0TWX1.IN0TWDML)
      IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX - IN0TWX1.IN0TWLPP;
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "C";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0004); /* <--- on last page msg*/
      return;
    end
    IN0TWX1.IN0TWIX1 = 1;
    IN0TWXP2.IN0TWXAP = "INET";
    IN0TWXP2.IN0TWXFC = "R";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSK3

// PF8 processing
Function IN0TSK4()


  IN0TWX1.XXXMODID = "SK4";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0TSB4(); /* <=== same key edits*/

  if (IN0TWX1.IN0TWSKS == "N")
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX + IN0TWX1.IN0TWLPP;
  if (IN0TWX1.IN0TWSIX >= IN0TWX1.IN0TWSML)
    IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX - IN0TWX1.IN0TWLPP;
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0004); /* <--- on last page msg*/
    return;
  end
  IN0TWX1.IN0TWIX1 = 1;
  IN0TWXP2.IN0TWXAP = "IN4T";
  IN0TWXP2.IN0TWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSK4

// setup entire sum tsq
Function IN0TSS2()


  IN0TWX1.XXXMODID = "SS2";

   /* ************************************************************/
   /* *** if the first record can be read:                    ****/
   /* ***   the tsq is setup and just ezertn                  ****/
   /* *** else:                                               ****/
   /* ***   use the save key to do the select set             ****/
   /* ***   read each selected row and setup all pages in tsq ****/
   /* ***   set the pointer to 1                              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if first tsq 'line' found: tsq is setup = ezertn    ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "INST";
  IN0TWXP2.IN0TWXIX = 0001;
  IN0TWXP2.IN0TWXFC = "R";

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    return;
  else
    if (IN0TWXP2.IN0TWXRC != 4)
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** use stock xfer item select set to get data          ****/
   /* ************************************************************/

  IN8REC.IN7STNBR = IN0TM020.IN7STNBR;
  IN8REC.XGPCD = " "; /* <--- wild card*/
  IN8REC.SY1STNBR = " "; /* <--- wild card*/
  IN8REC.SY2CLRID = " "; /* <--- wild card*/
  IN8REC.XDMCD = " "; /* <--- wild card*/
  IN8REC.XQACD = " "; /* <--- wild card*/
  IN8REC.XSDCD = " "; /* <--- wild card*/
  IN8REC.XSACD = " "; /* <--- wild card*/
  IN8REC.XPGCD = " "; /* <--- wild card*/
  IN8REC.XUMCD = " "; /* <--- wild card*/

  IN0TWX1.VAGen_SQLCODE = 0;
  IN0TWX1.IN0TWLOC = "IN0TSS2 ";
  IN0TSXG(); /* <=== use stock xfer select set*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWLOC = "IN0TSS2 ";
    IN0TSXI(); /* <=== close stock xfer select set*/
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** select in8rec - next row until all used             ****/
   /* *** note: no selections detected by separate 1st execute****/
   /* ***       and first time switch                         ****/
   /* ************************************************************/

  IN0TWX1.XXXMODID = "SS2";

  IN0TWX1.IN0TWSML = 0;
  IN0TWX1.IN0TWDML = 0;

  IN0TWXP2.IN0TWXFC = "A";
  IN0TW02.IN0TWLS2 = " ";

  IN0TWX1.IN0TWFTS = "Y";
  IN0TWX1.IN0TWLOC = "IN0TSS2 ";
  IN0TSXH(); /* <=== select next stock xfer row*/
  IN0TS2G(); /* <=== setup format/sum tsq line(s)*/
  IN0TS2H(); /* <=== setup format/det tsq line(s)*/
  IN0TWX1.IN0TWFTS = "N";

  while (IN0TWX1.VAGen_SQLCODE == 0
   && IN0TWX1.IN0TWERS == "N")
    IN0TWX1.IN0TWLOC = "IN0TSS2 ";
    IN0TSXH(); /* <=== select next stock xfer row*/
    IN0TS2G(); /* <=== setup format/sum tsq line(s)*/
    IN0TS2H(); /* <=== setup format/det tsq line(s)*/
  end

  IN0TSXI(); /* <=== close stock xfer select*/

  if (IN0TWX1.IN0TWERS == "Y")
    set IN0TM020.IN7STNBR cursor, bold;
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSS2

// setup summary tsq
Function IN0TSS3()


  IN0TWX1.XXXMODID = "SS3";

   /* ************************************************************/
   /* *** if the first record can be read:                    ****/
   /* ***   the tsq is setup and just ezertn                  ****/
   /* *** else:                                               ****/
   /* ***   use the save key to do the select set             ****/
   /* ***   read each selected row and setup all pages in tsq ****/
   /* ***   set the pointer to 1                              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if first tsq 'line' found: tsq is setup = ezertn    ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "INUT";
  IN0TWXP2.IN0TWXIX = 0001;
  IN0TWXP2.IN0TWXFC = "R";

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    return;
  else
    if (IN0TWXP2.IN0TWXRC != 4)
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** use stock xfer item alternate select set to get data****/
   /* ************************************************************/

  IN8REC.XGPCD = IN0TM030.XGPCD;
  IN8REC.SY1STNBR = IN0TM030.SY1STNBR;
  IN8REC.SY2CLRID = IN0TM030.SY2CLRID;
  IN8REC.XDMCD = IN0TM030.XDMCD;
  IN8REC.XQACD = IN0TM030.XQACD;
  IN8REC.XSDCD = IN0TM030.XSDCD;
  IN8REC.IN7STNBR = 0; /* <--- wild card*/
  IN8REC.XSACD = " "; /* <--- wild card*/
  IN8REC.XPGCD = " "; /* <--- wild card*/
  IN8REC.XUMCD = " "; /* <--- wild card*/

  IN0TWX1.VAGen_SQLCODE = 0;
  IN0TWX1.IN0TWLOC = "IN0TSS3 ";
  IN0TSXW(); /* <=== use stock xfer alt select set*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TSXY(); /* <=== close stock xfer alt select set*/
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** obtain the set of 40 size descriptions              ****/
   /* ************************************************************/

  set SYPREC empty;
  SYPREC.XGPCD = IN0TM030.XGPCD;
  SYPREC.SY1STNBR = IN0TM030.SY1STNBR;
  SYPREC.SY2CLRID = IN0TM030.SY2CLRID;
  SYPREC.XDMCD = IN0TM030.XDMCD;
  SYPREC.XQACD = "**";

  IN0TWX1.IN0TWLOC = "IN0TSS3 ";
  IN0TSXM(); /* <=== obtain size translations*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** select in8rec - next row until all used             ****/
   /* *** note: no selections detected by separate 1st execute****/
   /* ***       and first time switch                         ****/
   /* ************************************************************/

  IN0TWX1.XXXMODID = "SS3";

  IN0TWX1.IN0TWSML = 0;
  IN0TWX1.IN0TWDML = 0;
  IN0TWX1.IN0TWSDX = 0;
  IN0TWX1.IN0TWLSS = "N";

  IN0TW03.IN0TWROW = 0;
  IN0TW03.IN0TWLXF = 0;

  IN0TWXP2.IN0TWXFC = "A";

  IN0TWX1.IN0TWFTS = "Y";
  IN0TWX1.IN0TWLOC = "IN0TSS3 ";
  IN0TSXX(); /* <=== select next stock xfer alt. row*/
  IN0TS3G(); /* <=== setup format/sum tsq line(s)*/
  IN0TS3H(); /* <=== setup format/det tsq line(s)*/
  IN0TWX1.IN0TWFTS = "N";

  while (IN0TWX1.VAGen_SQLCODE == 0
   && IN0TWX1.IN0TWERS == "N")
    IN0TWX1.IN0TWLOC = "IN0TSS3 ";
    IN0TSXX(); /* <=== select next stock xfer alt. row*/
    IN0TS3G(); /* <=== setup format/sum tsq line(s)*/
    IN0TS3H(); /* <=== setup format/det tsq line(s)*/
  end

  IN0TSXY(); /* <=== close stock xfer alt. select*/

  if (IN0TWX1.IN0TWERS == "Y")
    set IN0TM030.XGPCD cursor, bold;
    set IN0TM030.SY1STNBR bold;
    set IN0TM030.SY2CLRID bold;
    set IN0TM030.XDMCD bold;
    set IN0TM030.XQACD bold;
    set IN0TM030.IN7STFOW bold;
    set IN0TM030.IN7STTOW bold;
    set IN0TM030.XSDCD bold;
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

  if (IN0TWX1.IN0TWSML == 0
   || IN0TWX1.IN0TWDML == 0)
    IN0TWX1.XXXMODID = "SS3";
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.IN0TWSES = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0060); /* <--- no data per input require msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSS3

// setup entire tsq
Function IN0TSS4()


  IN0TWX1.XXXMODID = "SS4";


   /* ************************************************************/
   /* *** use stock xfer hdr select set to get data           ****/
   /* ************************************************************/

  if (IN0TM040.IN7STFWH == "A "
   || IN0TM040.IN7STFWH == " A")
    IN7REC.IN7STFWH = " "; /* <--- wild card*/
  else
    IN7REC.IN7STFWH = IN0TM040.IN7STFWH;
  end

  if (IN0TM040.IN7STTWH == "A "
   || IN0TM040.IN7STTWH == " A")
    IN7REC.IN7STTWH = " "; /* <--- wild card*/
  else
    IN7REC.IN7STTWH = IN0TM040.IN7STTWH;
  end

  if (IN0TM040.XISCD == "A "
   || IN0TM040.XISCD == " A")
    IN7REC.XISCD = " "; /* <--- wild card*/
  else
    IN7REC.XISCD = IN0TM040.XISCD;
  end

  if (IN0TM040.XIUCD == "A "
   || IN0TM040.XIUCD == " A")
    IN7REC.XIUCD = " "; /* <--- wild card*/
  else
    if (IN0TM040.XIUCD == "O "
     || IN0TM040.XIUCD == " O")
      IN7REC.XIUCD = "$$";
    else
      IN7REC.XIUCD = IN0TM040.XIUCD;
    end
  end

  IN7REC.IN7STNBR = 0; /* <--- wild card*/
  IN7REC.IN7STFOW = " "; /* <--- wild card*/
  IN7REC.IN7STTOW = " "; /* <--- wild card*/

  IN0TWX1.VAGen_SQLCODE = 0;
  IN0TWX1.IN0TWLOC = "IN0TSS4 ";
  IN0TSXN(); /* <=== use stock xfer hdr select set*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWLOC = "IN0TSS4 ";
    IN0TSXP(); /* <=== close stock xfer hdr select set*/
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** select in7rec - next row until all used             ****/
   /* *** note: no selections detected by separate 1st execute****/
   /* ***       and first time switch                         ****/
   /* ************************************************************/

  IN0TWX1.XXXMODID = "SS4";

  IN0TWX1.IN0TWSML = 0;

  IN0TW04.IN0TWLS4 = " ";

  IN0TWXP2.IN0TWXFC = "A";

  IN0TWX1.IN0TWFTS = "Y";
  IN0TWX1.IN0TWLOC = "IN0TSS4 ";
  IN0TSXO(); /* <=== select next stock xfer hdr row*/
  IN0TSS5(); /* <=== in8 selection criteria check*/
  IN0TWX1.IN0TWFTS = "N";

  while (IN0TWX1.VAGen_SQLCODE == 0
   && IN0TWX1.IN0TWERS == "N")
    IN0TWX1.IN0TWLOC = "IN0TSS4 ";
    IN0TSXO(); /* <=== select next stock xfer hdr row*/
    IN0TSS5(); /* <=== in8 selection criteria check*/
  end

  IN0TSXP(); /* <=== close stock xfer hdr select*/

  if (IN0TWX1.IN0TWERS == "Y")
    set IN0TM040.IN7STFWH cursor, bold;
    set IN0TM040.IN7STTWH bold;
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSS4

// in8 selection criteria check
Function IN0TSS5()

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  if (IN0TWX1.VAGen_SQLCODE == +100)
    IN0TS4G();
    return;
  end

  IN0TWX1.XXXMODID = "SS5";

   /* ************************************************************/
   /* *** use stock xfer item alt. select set to get data     ****/
   /* ************************************************************/

  if (IN0TM040.SY1STNBR == " "
   && IN0TM040.SY2CLRID == " "
   && IN0TM040.XDMCD == "00")
    IN0TS4G();
  else
    IN8REC.IN7STNBR = IN7REC.IN7STNBR;
    IN8REC.SY1STNBR = " "; /* <--- wild card*/
    IN8REC.SY2CLRID = " "; /* <--- wild card*/
    IN8REC.XDMCD = " "; /* <--- wild card*/
    IN8REC.XGPCD = " "; /* <--- wild card*/
    IN8REC.XSACD = " "; /* <--- wild card*/
    IN8REC.XPGCD = " "; /* <--- wild card*/
    IN8REC.XUMCD = " "; /* <--- wild card*/
    IN8REC.XQACD = " "; /* <--- wild card*/
    IN8REC.XSDCD = " "; /* <--- wild card*/

    IN0TWX1.VAGen_SQLCODE = 0;
    IN0TWX1.IN0TWLOC = "IN0TSS5 ";
    IN0TSXG(); /* <=== stock xfer item select set*/

    if (IN0TWX1.IN0TWERS == "Y")
      IN0TSXI(); /* <=== close stock xfer item select*/
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      return;
    end

    while (IN0TWX1.VAGen_SQLCODE == 0
     && IN0TWX1.IN0TWERS == "N")
      IN0TWX1.IN0TWLOC = "IN0TSS5";
      IN0TSXH();
      if (IN0TM040.SY1STNBR == " "
       || IN0TM040.SY1STNBR == IN8REC.SY1STNBR)
        if (IN0TM040.SY2CLRID == " "
         || IN0TM040.SY2CLRID == IN8REC.SY2CLRID)
          if (IN0TM040.XDMCD == IN8REC.XDMCD)
            IN0TSXI();
            IN0TS4G();
            return;
          end
        end
      end
    end
    if (IN0TWX1.VAGen_SQLCODE == +100)
      IN0TWX1.VAGen_SQLCODE = 0;
      if (IN0TWX1.IN0TWFTS == "Y")
        IN0TWX1.IN0TWERS = "N";
        converseLib.validationFailed(0);
      end
    end
    IN0TSXI();
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end IN0TSS5

// re-set screen
Function IN0TST2()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0TM020 empty;
  set IN0TM021 initial;
  set IN0TM022 initial;
  IN0TM020.XXXERRID = "IN0T220 ";
  IN0TM020.XXXMAPNM = "IN0TM020";
  IN0TWX1.IN0TWMAP = "IN0TM020";
  IN0TM020.XXXTITLE = "STOCK TRANSFER INQ. BY DOC. (ITEMS)";
  IN0TM020.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0TM020.XXXRVNBR = IN0TWX1.XXXRVNBR;
  IN0TSG2(); /* <=== setup map key fields*/
  set IN0TW02 empty;
  IN0T225(); /* <=== setup titles*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TST2

// re-set screen
Function IN0TST3()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0TM030 empty;
  set IN0TM031 initial;
  set IN0TM032 initial;
  IN0TM030.XXXERRID = "IN0T320 ";
  IN0TM030.XXXMAPNM = "IN0TM030";
  IN0TWX1.IN0TWMAP = "IN0TM030";
  IN0TM030.XXXTITLE = "STOCK TRANSFER INQ. BY PRODUCT";
  IN0TM030.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0TM030.XXXRVNBR = IN0TWX1.XXXRVNBR;
  IN0TSG3(); /* <=== setup map key fields*/
  set IN0TW03 empty;
  IN0T325(); /* <=== setup titles*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TST3

// re-set screen
Function IN0TST4()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0TM040 empty;
  set IN0TM041 initial;
  IN0TM040.XXXERRID = "IN0T420 ";
  IN0TM040.XXXMAPNM = "IN0TM040";
  IN0TWX1.IN0TWMAP = "IN0TM040";
  IN0TM040.XXXTITLE = "STOCK TRANSFER INQ. BY WAREHOUSE";
  IN0TM040.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0TM020.XXXRVNBR = IN0TWX1.XXXRVNBR;
  IN0TSG4(); /* <=== setup map key fields*/
  set IN0TW04 empty;
  IN0T425(); /* <=== setup titles*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TST4

// match detail's subkey
Function IN0TSU2()


  IN0TWX1.XXXMODID = "SU2";

   /* ************************************************************/
   /* *** use the summary pointer to read the tsq until the   ****/
   /* *** summary tsq record's subkey matches detail's  or    ****/
   /* *** if EOF:                                             ****/
   /* ***   reset the pointer to 1                            ****/
   /* ***   set the EOF switch = 'y'                          ****/
   /* ***   continue reading the tsq                          ****/
   /* ***   if EOF and the EOF switch = y:                    ****/
   /* ***     = second time at eof                            ****/
   /* ***     = can't match/major error                       ****/
   /* ************************************************************/

  IN0TWX1.IN0TWEOF = "N";
  IN0TWXP2.IN0TWXAP = "INST";
  IN0TWXP2.IN0TWXFC = "R";

  while (IN0TWX1.IN0TWERS == "N")
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWSIX;
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC != 0)
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0TW02.IN0TWSL2 = IN0TWXP1.IN0TWXDL;
    if (IN0TW02.IN0TWSRT == "S")
      if (IN0TW02.XUMCD == IN0TW02.IN0TWDUM
       && IN0TW02.XPGCD == IN0TW02.IN0TWDPG
       && IN0TW02.XSACD == IN0TW02.IN0TWDSA
       && IN0TW02.XSDCD == IN0TW02.IN0TWDSD
       && IN0TW02.XQACD == IN0TW02.IN0TWDQA
       && IN0TW02.XDMCD == IN0TW02.IN0TWDDM
       && IN0TW02.SY2CLRID == IN0TW02.IN0TWDCL
       && IN0TW02.SY1STNBR == IN0TW02.IN0TWDST
       && IN0TW02.XGPCD == IN0TW02.IN0TWDGP)
        IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSIX % IN0TWX1.IN0TWLPP;
        while (IN0TWX1.IN0TWREM != 1)
          IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX - 1;
          IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSIX % IN0TWX1.IN0TWLPP;
        end
        return;
      end
    end
    IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX + 1;
    if (IN0TWX1.IN0TWSIX > IN0TWX1.IN0TWSML)
      if (IN0TWX1.IN0TWEOF == "N")
        IN0TWX1.IN0TWSIX = 1;
        IN0TWX1.IN0TWEOF = "Y";
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "B";
        IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- severe error msg*/
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSU2

// match detail's subkey
Function IN0TSU3()


  IN0TWX1.XXXMODID = "SU3";

   /* ************************************************************/
   /* *** use the summary pointer to read the tsq until the   ****/
   /* *** summary tsq record's subkey matches detail's  or    ****/
   /* *** if EOF:                                             ****/
   /* ***   reset the pointer to 1                            ****/
   /* ***   set the EOF switch = 'y'                          ****/
   /* ***   continue reading the tsq                          ****/
   /* ***   if EOF and the EOF switch = y:                    ****/
   /* ***     = second time at eof                            ****/
   /* ***     = can't match/major error                       ****/
   /* ************************************************************/

  IN0TWX1.IN0TWEOF = "N";
  IN0TWXP2.IN0TWXAP = "INUT";
  IN0TWXP2.IN0TWXFC = "R";

  while (IN0TWX1.IN0TWERS == "N")
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWSIX;
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC != 0)
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0TW03.IN0TWSL3 = IN0TWXP1.IN0TWXDL;
    if (IN0TW03.IN0TWROW == IN0TW03.IN0TWDRO)
      IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSIX % IN0TWX1.IN0TWLPP;
      while (IN0TWX1.IN0TWREM != 1)
        IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX - 1;
        IN0TWX1.IN0TWREM = IN0TWX1.IN0TWSIX % IN0TWX1.IN0TWLPP;
      end
      return;
    end
    IN0TWX1.IN0TWSIX = IN0TWX1.IN0TWSIX + 1;
    if (IN0TWX1.IN0TWSIX > IN0TWX1.IN0TWSML)
      if (IN0TWX1.IN0TWEOF == "N")
        IN0TWX1.IN0TWSIX = 1;
        IN0TWX1.IN0TWEOF = "Y";
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "B";
        IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- severe error msg*/
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSU3

// setup entire det tsq
Function IN0TSV2()


  IN0TWX1.XXXMODID = "SV1";

   /* ************************************************************/
   /* *** if the first record can be read:                    ****/
   /* ***   the tsq is setup and just ezertn                  ****/
   /* *** else:                                               ****/
   /* ***   use the save key to do the select set             ****/
   /* ***   read each selected row and setup all pages in tsq ****/
   /* ***   set the pointer to 1 & save the first line subkey ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if first tsq 'line' found: tsq is setup = ezertn    ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "INDT";
  IN0TWXP2.IN0TWXIX = 0001;
  IN0TWXP2.IN0TWXFC = "R";

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    return;
  else
    if (IN0TWXP2.IN0TWXRC != 4)
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** use stock transfer select set to get data for scrn  ****/
   /* ************************************************************/

  IN8REC.IN7STNBR = IN0TM020.IN7STNBR;
  IN8REC.XGPCD = " "; /* <--- wild card*/
  IN8REC.SY1STNBR = " "; /* <--- wild card*/
  IN8REC.SY2CLRID = " "; /* <--- wild card*/
  IN8REC.XDMCD = " "; /* <--- wild card*/
  IN8REC.XQACD = " "; /* <--- wild card*/
  IN8REC.XSDCD = " "; /* <--- wild card*/
  IN8REC.XSACD = " "; /* <--- wild card*/
  IN8REC.XPGCD = " "; /* <--- wild card*/
  IN8REC.XUMCD = " "; /* <--- wild card*/

  IN0TWX1.VAGen_SQLCODE = 0;
  IN0TWX1.IN0TWLOC = "IN0TSV1 ";
  IN0TSXG(); /* <=== stock xfer item select set*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TWX1.IN0TWLOC = "IN0TSV1 ";
    IN0TSXI(); /* <=== close stock xfer item select*/
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** select next inv. audit join row                     ****/
   /* *** note: no selections detected by separate 1st execute****/
   /* ***       and first time switch                         ****/
   /* ************************************************************/

  IN0TWX1.IN0TWSML = 0;
  IN0TWX1.IN0TWDML = 0;

  IN0TWXP2.IN0TWXFC = "A";
  IN0TW02.IN0TWLS2 = " ";

  IN0TWX1.IN0TWFTS = "Y";
  IN0TWX1.IN0TWLOC = "IN0TSV1 ";
  IN0TSXH(); /* <=== select next stock xfer item row*/
  IN0TS2G(); /* <=== setup format/sum tsq line(s)*/
  IN0TS2H(); /* <=== setup format/det tsq line(s)*/
  IN0TWX1.IN0TWFTS = "N";

  while (IN0TWX1.VAGen_SQLCODE == 0
   && IN0TWX1.IN0TWERS == "N")
    IN0TWX1.IN0TWLOC = "IN0TSV1 ";
    IN0TSXH(); /* <=== select next inv. audit join row*/
    IN0TS2G(); /* <=== setup format/sum tsq line(s)*/
    IN0TS2H(); /* <=== setup format/det tsq line(s)*/
  end

  IN0TWX1.IN0TWLOC = "IN0TSV2 ";
  IN0TSXI(); /* <=== close inv. audit join select*/

  if (IN0TWX1.IN0TWERS == "Y")
    set IN0TM020.IN7STNBR cursor, bold;
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSV2

// setup detail tsq
Function IN0TSV3()


  IN0TWX1.XXXMODID = "SV3";

   /* ************************************************************/
   /* *** if the first record can be read:                    ****/
   /* ***   the tsq is setup and just ezertn                  ****/
   /* *** else:                                               ****/
   /* ***   use the save key to do the select set             ****/
   /* ***   read each selected row and setup all pages in tsq ****/
   /* ***   set the pointer to 1 & save the first line subkey ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if first tsq 'line' found: tsq is setup = ezertn    ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "INET";
  IN0TWXP2.IN0TWXIX = 0001;
  IN0TWXP2.IN0TWXFC = "R";

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0)
    return;
  else
    if (IN0TWXP2.IN0TWXRC != 4)
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** use stock xfer item alt. select set to get data     ****/
   /* ************************************************************/

  IN8REC.XGPCD = IN0TM030.XGPCD;
  IN8REC.SY1STNBR = IN0TM030.SY1STNBR;
  IN8REC.SY2CLRID = IN0TM030.SY2CLRID;
  IN8REC.XDMCD = IN0TM030.XDMCD;
  IN8REC.XQACD = IN0TM030.XQACD;
  IN8REC.XSDCD = IN0TM030.XSDCD;
  IN8REC.IN7STNBR = 0; /* <--- wild card*/
  IN8REC.XSACD = " "; /* <--- wild card*/
  IN8REC.XPGCD = " "; /* <--- wild card*/
  IN8REC.XUMCD = " "; /* <--- wild card*/

  IN0TWX1.VAGen_SQLCODE = 0;
  IN0TWX1.IN0TWLOC = "IN0TSV3 ";
  IN0TSXW(); /* <=== use stock xfer item alt select set*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TSXY();
                                   /* <=== close stock xfer item alt select*/
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** obtain the set of 40 size descriptions              ****/
   /* ************************************************************/

  set SYPREC empty;
  SYPREC.XGPCD = IN0TM030.XGPCD;
  SYPREC.SY1STNBR = IN0TM030.SY1STNBR;
  SYPREC.SY2CLRID = IN0TM030.SY2CLRID;
  SYPREC.XDMCD = IN0TM030.XDMCD;
  SYPREC.XQACD = "**";

  IN0TWX1.IN0TWLOC = "IN0TSV3 ";
  IN0TSXM(); /* <=== obtain size translations*/

  if (IN0TWX1.IN0TWERS == "Y")
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** select next row until entire tsq setup              ****/
   /* *** note: no selcetions detected by separate 1st execute****/
   /* ***       and first time switch                         ****/
   /* ************************************************************/

  IN0TWX1.IN0TWSML = 0;
  IN0TWX1.IN0TWDML = 0;
  IN0TWX1.IN0TWSDX = 0;
  IN0TWX1.IN0TWLSS = "N";

  IN0TW03.IN0TWROW = 0;
  IN0TW03.IN0TWLXF = 0;

  IN0TWXP2.IN0TWXFC = "A";

  IN0TWX1.IN0TWFTS = "Y";
  IN0TWX1.IN0TWLOC = "IN0TSV3 ";
  IN0TSXX(); /* <=== select next stock xfer alt. row*/
  IN0TS3G(); /* <=== setup format/sum tsq line(s)*/
  IN0TS3H(); /* <=== setup format/det tsq line(s)*/
  IN0TWX1.IN0TWFTS = "N";

  while (IN0TWX1.VAGen_SQLCODE == 0
   && IN0TWX1.IN0TWERS == "N")
    IN0TWX1.IN0TWLOC = "IN0TSV3 ";
    IN0TSXX(); /* <=== select next stock xfer alt. row*/
    IN0TS3G(); /* <=== setup format/sum tsq line(s)*/
    IN0TS3H(); /* <=== setup format/det tsq line(s)*/
  end

  IN0TSXY(); /* <=== close stock xfer alt. select*/

  if (IN0TWX1.IN0TWERS == "Y")
    set IN0TM030.XGPCD cursor, bold;
    set IN0TM030.SY1STNBR bold;
    set IN0TM030.SY2CLRID bold;
    set IN0TM030.XDMCD bold;
    set IN0TM030.XQACD bold;
    set IN0TM030.IN7STFOW bold;
    set IN0TM030.IN7STTOW bold;
    set IN0TM030.XSDCD bold;
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    return;
  end

  if (IN0TWX1.IN0TWSML == 0
   || IN0TWX1.IN0TWDML == 0)
    IN0TWX1.XXXMODID = "SV3";
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.IN0TWSES = "Y";
    IN0TWX1.XXXUNQID = "B";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0060); /* <--- no data per input require msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSV3

// match summary's subkey
Function IN0TSW2()


  IN0TWX1.XXXMODID = "SW2";

   /* ************************************************************/
   /* *** use the detail pointer to read the tsq until the    ****/
   /* *** detail tsq record's subkey matches summary's  or    ****/
   /* *** if EOF:                                             ****/
   /* ***   reset the pointer to 1                            ****/
   /* ***   set the EOF switch = 'y'                          ****/
   /* ***   continue reading the tsq                          ****/
   /* ***   if EOF and the EOF switch = y:                    ****/
   /* ***     = second time at eof                            ****/
   /* ***     = can't match/major error                       ****/
   /* ************************************************************/

  IN0TWX1.IN0TWEOF = "N";
  IN0TWXP2.IN0TWXAP = "INDT";
  IN0TWXP2.IN0TWXFC = "R";

  while (IN0TWX1.IN0TWERS == "N")
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWDIX;
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC != 0)
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0TW02.IN0TWSL2 = IN0TWXP1.IN0TWXDL;
    if (IN0TW02.IN0TWSRT == "S")
      if (IN0TW02.XUMCD == IN0TW02.IN0TWSUM
       && IN0TW02.XPGCD == IN0TW02.IN0TWSPG
       && IN0TW02.XSACD == IN0TW02.IN0TWSSA
       && IN0TW02.XSDCD == IN0TW02.IN0TWSSD
       && IN0TW02.XQACD == IN0TW02.IN0TWSQA
       && IN0TW02.XDMCD == IN0TW02.IN0TWSDM
       && IN0TW02.SY2CLRID == IN0TW02.IN0TWSCL
       && IN0TW02.SY1STNBR == IN0TW02.IN0TWSST
       && IN0TW02.XGPCD == IN0TW02.IN0TWSGP)
        return;
      end
    end
    IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX + IN0TWX1.IN0TWLPP;
    if (IN0TWX1.IN0TWDIX > IN0TWX1.IN0TWDML)
      if (IN0TWX1.IN0TWEOF == "N")
        IN0TWX1.IN0TWDIX = 1;
        IN0TWX1.IN0TWEOF = "Y";
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "B";
        IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- severe error msg*/
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSW2

// match summary subkey
Function IN0TSW3()


  IN0TWX1.XXXMODID = "SW3";

   /* ************************************************************/
   /* *** use the detail pointer to read the tsq until the    ****/
   /* *** detail tsq record's subkey matches summary's  or    ****/
   /* *** if EOF:                                             ****/
   /* ***   reset the pointer to 1                            ****/
   /* ***   set the EOF switch = 'y'                          ****/
   /* ***   continue reading the tsq                          ****/
   /* ***   if EOF and the EOF switch = y:                    ****/
   /* ***     = second time at eof                            ****/
   /* ***     = can't match/major error                       ****/
   /* ************************************************************/

  IN0TWX1.IN0TWEOF = "N";
  IN0TWXP2.IN0TWXAP = "INET";
  IN0TWXP2.IN0TWXFC = "R";

  while (IN0TWX1.IN0TWERS == "N")
    IN0TWXP2.IN0TWXIX = IN0TWX1.IN0TWDIX;
    call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0TWXP2.IN0TWXRC != 0)
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXUNQID = "A";
      IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0TW03.IN0TWSL3 = IN0TWXP1.IN0TWXDL;
    if (IN0TW03.IN0TWSRT == "S")
      if (IN0TW03.IN0TWROW == IN0TW03.IN0TWSRO)
        IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDIX % IN0TWX1.IN0TWLPP;
        while (IN0TWX1.IN0TWREM != 1)
          IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX - 1;
          IN0TWX1.IN0TWREM = IN0TWX1.IN0TWDIX % IN0TWX1.IN0TWLPP;
        end
        return;
      end
    end
    IN0TWX1.IN0TWDIX = IN0TWX1.IN0TWDIX + 1;
    if (IN0TWX1.IN0TWDIX > IN0TWX1.IN0TWDML)
      if (IN0TWX1.IN0TWEOF == "N")
        IN0TWX1.IN0TWDIX = 1;
        IN0TWX1.IN0TWEOF = "Y";
      else
        IN0TWX1.IN0TWERS = "Y";
        IN0TWX1.XXXUNQID = "B";
        IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- severe error msg*/
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSW3

// purge tsq
Function IN0TSX2()


   /* ************************************************************/
   /* *** if first time processing or if the key has changed: ****/
   /* *** purge both the summary and detail tsq using ta0050  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** purge summary tsq                                   ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "INST";
  IN0TWXP2.IN0TWXFC = "P";

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0
   || IN0TWXP2.IN0TWXRC == 4)
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXMODID = "SX1";
    IN0TWX1.XXXUNQID = "A";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** purge detail tsq (even if error)                    ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "INDT";
  IN0TWXP2.IN0TWXFC = "P";

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0
   || IN0TWXP2.IN0TWXRC == 4)
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXMODID = "SX1";
    IN0TWX1.XXXUNQID = "B";
    IN0TM020.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSX2

// purge both tsqs
Function IN0TSX3()


   /* ************************************************************/
   /* *** if first time processing or if the key has changed: ****/
   /* *** purge both the summary and detail tsq using ta0050  ****/
   /* *** note: if tsq missing, rc=0 instead of expected 4    ****/
   /* *** note: as of 10-10-86, ta0050 purge doesn't change rc****/
   /* ***       therefore, added move 0 to rc first ('P' only)****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** purge summary tsq                                   ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "INUT";
  IN0TWXP2.IN0TWXFC = "P";

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0
   || IN0TWXP2.IN0TWXRC == 4)
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXMODID = "SX3";
    IN0TWX1.XXXUNQID = "A";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** purge detail tsq (even if error)                    ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "INET";
  IN0TWXP2.IN0TWXFC = "P";

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0
   || IN0TWXP2.IN0TWXRC == 4)
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXMODID = "SX3";
    IN0TWX1.XXXUNQID = "B";
    IN0TM030.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSX3

// purge tsq
Function IN0TSX4()


   /* ************************************************************/
   /* *** if first time processing or if the key has changed: ****/
   /* *** purge both the summary and detail tsq using ta0050  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** purge summary tsq                                   ****/
   /* ************************************************************/

  IN0TWXP2.IN0TWXAP = "IN4T";
  IN0TWXP2.IN0TWXFC = "P";

  call "TA0050" (IN0TWXP1, IN0TWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0TWXP2.IN0TWXRC == 0
   || IN0TWXP2.IN0TWXRC == 4)
     /* ** next sentence ***/
  else
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXMODID = "SX1";
    IN0TWX1.XXXUNQID = "A";
    IN0TM040.XXXERRID = IN0TWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSX4

// select in7rec row
Function IN0TSXF()


   /* ************************************************************/
   /* *** select in7rec row                                   ****/
   /* ************************************************************/

  call "IO0720" ("S ", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0TWX1.XXXMODID = "SXF";

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    converseLib.validationFailed(0057); /* <--- invalid xfer no. msg*/
    return;
  end

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- severe error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IO0720  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXF ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "IN7REC  ";
  TA1REC.TA1TBLVU = "VTFHDR01";
  TA1REC.TA1TBLKE = IN7REC.IN7KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXF

// select in8rec set
Function IN0TSXG()


   /* ************************************************************/
   /* *** use stock xfer item select set                      ****/
   /* *** note: no rows still returns a 0                     ****/
   /* ************************************************************/

  call "IO0730" ("SS", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0TWX1.XXXMODID = "SXG";

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "A";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "SS      ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IN0730  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXG ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VTFITM01";
  TA1REC.TA1TBLKE = IN8REC.IN8KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXG

// select next in8rec row
Function IN0TSXH()


   /* ************************************************************/
   /* *** select next stock transfer item row                 ****/
   /* ************************************************************/

  call "IO0730" ("SN", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0TWX1.VAGen_SQLCODE = +100;
    if (IN0TWX1.IN0TWFTS == "Y")
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXMODID = "SXH";
      IN0TWX1.XXXUNQID = "A";
      converseLib.validationFailed(0057); /* <--- not on db msg*/
    end
    return;
  end

  IN0TWX1.XXXMODID = "SXH";

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "SN      ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IO0730  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXH ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VTFITM01";
  TA1REC.TA1TBLKE = IN8REC.IN8KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXH

// close in8rec select set
Function IN0TSXI()


   /* ************************************************************/
   /* *** close stock transfer item select set                ****/
   /* ************************************************************/

  call "IO0730" ("CS", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    return;
  end

  IN0TWX1.XXXMODID = "SXI";

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "CS      ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IO0730  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXI ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VTFITM01";
  TA1REC.TA1TBLKE = IN8REC.IN8KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXI

// obtain size translations
Function IN0TSXM()


   /* ************************************************************/
   /* *** use size translator to valid translations           ****/
   /* ************************************************************/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";

  call "SY1120" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  IN0TWX1.XXXMODID = "SXM";

  if (SYPREC.SYPRC < 99)
    IN0TWX1.IN0TWERS = "Y";
    IN0TWX1.XXXUNQID = "A";
    converseLib.validationFailed(0067); /* <--- not on db msg*/
    return;
  end

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "PC      ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "SY1120  ";
  TA1REC.TA1LOCAT[4] = SYPREC.SYPRC;
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "SYPREC  ";
  TA1REC.TA1TBLVU = "SZ XLATE";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXM

// select stock xfer hdr set
Function IN0TSXN()


   /* ************************************************************/
   /* *** use stock xfer hdr select set                       ****/
   /* *** note: no rows still returns a 0                     ****/
   /* ************************************************************/

  call "IO0720" ("SS", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0TWX1.XXXMODID = "SXN";

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "A";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "SS      ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IN0720  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXN ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VTFHDR01";
  TA1REC.TA1TBLKE = IN7REC.IN7KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXN

// select next stock xfer hdr row
Function IN0TSXO()


   /* ************************************************************/
   /* *** select next stock transfer hdr row                  ****/
   /* ************************************************************/

  call "IO0720" ("SN", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0TWX1.VAGen_SQLCODE = +100;
    if (IN0TWX1.IN0TWFTS == "Y")
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXMODID = "SXO";
      IN0TWX1.XXXUNQID = "A";
      converseLib.validationFailed(0060); /* <--- not on db msg*/
    end
    return;
  end

  IN0TWX1.XXXMODID = "SXO";

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "SN      ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IO0720  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXO ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VTFHDR01";
  TA1REC.TA1TBLKE = IN7REC.IN7KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXO

// close stock xfer hdr select
Function IN0TSXP()


   /* ************************************************************/
   /* *** close stock transfer hdr select set                 ****/
   /* ************************************************************/

  call "IO0720" ("CS", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    return;
  end

  IN0TWX1.XXXMODID = "SXP";

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "CS      ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IO0720  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXP ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VTFHDR01";
  TA1REC.TA1TBLKE = IN7REC.IN7KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXP

// select KUCREC row
Function IN0TSXU()


   /* ************************************************************/
   /* *** select kucrec row                                   ****/
   /* ************************************************************/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0TWX1.XXXMODID = "SXU";

  if (SQLCA.VAGen_SQLCODE == +100)
    KUCREC.KUCCONM = "******************************";
    return;
  end

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- severe error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IO0240  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXU ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "KUCREC  ";
  TA1REC.TA1TBLVU = "VCMPNY01";
  TA1REC.TA1TBLKE = KUCREC.KUCGRP;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXU

// select KUMREC row
Function IN0TSXV()


   /* ************************************************************/
   /* *** select kumrec row                                   ****/
   /* ************************************************************/

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0TWX1.XXXMODID = "SXV";

  if (SQLCA.VAGen_SQLCODE == +100)
    KUMREC.KUMSTSNM = "**********";
    return;
  end

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- severe error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IO0340  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXV ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "KUMREC  ";
  TA1REC.TA1TBLVU = "VSTORE01";
  TA1REC.TA1TBLKE = KUMREC.KUMGRP;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXV

// in8rec select alt set
Function IN0TSXW()


   /* ************************************************************/
   /* *** use stock xfer item select set                      ****/
   /* *** note: no rows still returns a 0                     ****/
   /* ************************************************************/

  call "IO0730" ("S2", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0TWX1.XXXMODID = "SXW";

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "A";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "S2      ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IN0730  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXW ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VTFITM01";
  TA1REC.TA1TBLKE = IN8REC.IN8KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXW

// select next in8rec alt row
Function IN0TSXX()


   /* ************************************************************/
   /* *** select next stock transfer item row                 ****/
   /* ************************************************************/

  call "IO0730" ("2N", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0TWX1.VAGen_SQLCODE = +100;
    if (IN0TWX1.IN0TWFTS == "Y")
      IN0TWX1.IN0TWERS = "Y";
      IN0TWX1.XXXMODID = "SXX";
      IN0TWX1.XXXUNQID = "A";
      converseLib.validationFailed(0057); /* <--- not on db msg*/
    end
    return;
  end

  IN0TWX1.XXXMODID = "SXX";

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "2N      ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IO0730  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXX ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VTFITM01";
  TA1REC.TA1TBLKE = IN8REC.IN8KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXX

// close in8rec select alt set
Function IN0TSXY()


   /* ************************************************************/
   /* *** close stock transfer item select set                ****/
   /* ************************************************************/

  call "IO0730" ("C2", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    return;
  end

  IN0TWX1.XXXMODID = "SXY";

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "C2      ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IO0730  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXY ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VTFITM01";
  TA1REC.TA1TBLKE = IN8REC.IN8KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXY

// select tf1REC row
Function IN0TSXZ()


   /* ************************************************************/
   /* *** select tf1rec row                                   ****/
   /* ************************************************************/

  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0TWX1.XXXMODID = "SXZ";

  if (SQLCA.VAGen_SQLCODE == +100)
    TF1REC.TF1SABRV = "*****";
    return;
  end

  IN0TWX1.IN0TWERS = "Y";
  IN0TWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- severe error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0T    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = IN0TWX1.IN0TWLOC;
  TA1REC.TA1LOCAT[3] = "IO0860  ";
  TA1REC.TA1LOCAT[4] = "IN0TSXZ ";
  TA1REC.TA1MAP = IN0TWX1.IN0TWMAP;
  TA1REC.TA1DBASE = "TF1REC  ";
  TA1REC.TA1TBLVU = "VCARR001";
  TA1REC.TA1TBLKE = TF1REC.TF1GRP;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSXZ

// CAITEM processing
Function IN0TSY0()

  if (COMMAREA.CAFROMAP == "IN0Q")
    INWREC.CAUSERA = COMMAREA.CAUSERA;
    IN0TW01.IN7STNBR = INWREC.IN7STNBR;
  end

   /* ************************************************************/
   /* *** if entered, use CAITEM data as the selection no.:   ****/
   /* *** valid values checked as part of flow decision(s)    ****/
   /* *** and setup dates from passed or current if not       ****/
   /* *** note: CAITEM = character data                       ****/
   /* ************************************************************/

  IN0TWX1.IN0TWCAI = COMMAREA.CAITEM;
  IN0TM005.IN0TMSNO = IN0TWX1.IN0TWCAN;
   /* MOVE IN0TWX1.IN0TWCAS TO IN0TM005.IN0TMSDT;*/
   /* MOVE IN0TWX1.IN0TWCAE TO IN0TM005.IN0TMEDT;*/

  IN0TSC0(); /* <=== field edits*/

  if (IN0TWX1.IN0TWERS == "Y")
    return;
  end

  IN0TSD0(); /* <=== relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0TSY0

//*** RECORD=IN0TW01 ****
// ************************************************************
// 
//         STOCK TRANSFER DOCUMENT HEADER INQUIRY - #1
//         ===========================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are initialized in
//           in0t110 and used by in0t120.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 11-15-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0TW01 type basicRecord
  10 IN0TWLK1 IN0TWLK1 ; 
    15 IN7STNBR IN7STNBR ; 
  10 IN0TWWCO IN0TWWCO ; 
    15 * num(2) ; 
    15 IN0TWXCO IN0TWXCO ; 
  10 IN0TWWNX IN0TWWNX ; 
    15 * num(2) ; 
    15 IN0TWXNX IN0TWXNX ; 
  10 IN0TWANO IN0TWANO ; 
    15 IN0TWACO IN0TWACO ; 
    15 IN0TWAST IN0TWAST ; 
    15 IN0TWANX IN0TWANX ; 
    15 XGPCD XGPCD ; 
end // end IN0TW01

//*** RECORD=IN0TW02 ****
// ************************************************************
// 
//           STOCK TRANSFER INQ BY DOCUMENT  - #2
//           ====================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are initialized in
//           in0t210 and used by in0t220 (i.e. scrolling)
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 11-18-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0TW02 type basicRecord
  10 IN0TWWSD IN0TWWSD ; 
    15 IN0TWWMM IN0TWWMM ; 
    15 IN0TWWDD IN0TWWDD ; 
    15 IN0TWWYY IN0TWWYY ; 
  10 IN0TWLK2 IN0TWLK2 ; 
    15 IN7STNBR IN7STNBR ; 
  10 IN0TWSL2 IN0TWSL2 ; 
    15 IN0TWSRT IN0TWSRT ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XLCCD XLCCD ; 
    15 XSDCD XSDCD ; 
    15 XSACD XSACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 IN0TWUPC IN0TWUPC ; 
    15 IN0TWSQQ IN0TWSQQ ; 
    15 IN0TWSIQ IN0TWSIQ ; 
    15 IN0TWSSQ IN0TWSSQ ; 
    15 IN0TWSRQ IN0TWSRQ ; 
  10 IN0TWDL2 IN0TWDL2 ; 
    15 IN0TWDRT IN0TWDRT ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 IN0TWDQQ IN0TWDQQ ; 
    15 IN0TWDIQ IN0TWDIQ ; 
    15 IN0TWDSQ IN0TWDSQ ; 
    15 IN0TWDRQ IN0TWDRQ ; 
    15 * char(24) ; 
  10 IN0TWSS2 IN0TWSS2 ; 
    15 IN0TWSGP IN0TWSGP ; 
    15 IN0TWSST IN0TWSST ; 
    15 IN0TWSCL IN0TWSCL ; 
    15 IN0TWSDM IN0TWSDM ; 
    15 IN0TWSQA IN0TWSQA ; 
    15 IN0TWSSD IN0TWSSD ; 
    15 IN0TWSSA IN0TWSSA ; 
    15 IN0TWSPG IN0TWSPG ; 
    15 IN0TWSUM IN0TWSUM ; 
  10 IN0TWDS2 IN0TWDS2 ; 
    15 IN0TWDGP IN0TWDGP ; 
    15 IN0TWDST IN0TWDST ; 
    15 IN0TWDCL IN0TWDCL ; 
    15 IN0TWDDM IN0TWDDM ; 
    15 IN0TWDQA IN0TWDQA ; 
    15 IN0TWDSD IN0TWDSD ; 
    15 IN0TWDSA IN0TWDSA ; 
    15 IN0TWDPG IN0TWDPG ; 
    15 IN0TWDUM IN0TWDUM ; 
  10 IN0TWLS2 IN0TWLS2 ; 
    15 IN0TWLGP IN0TWLGP ; 
    15 IN0TWLST IN0TWLST ; 
    15 IN0TWLCL IN0TWLCL ; 
    15 IN0TWLDM IN0TWLDM ; 
    15 IN0TWLQA IN0TWLQA ; 
    15 IN0TWLSD IN0TWLSD ; 
    15 IN0TWLSA IN0TWLSA ; 
    15 IN0TWLPG IN0TWLPG ; 
    15 IN0TWLUM IN0TWLUM ; 
end // end IN0TW02

//*** RECORD=IN0TW03 ****
// ************************************************************
// 
//           stock transfer inq by prod - #3
//           ===============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are initialized in
//           in0t310 and used by in0t320 (i.e. scrolling)
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 11-18-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0TW03 type basicRecord
  10 IN0TWSRS IN0TWSRS ; 
  10 IN0TWLK3 IN0TWLK3 ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 IN7STFOW IN7STFOW ; 
    15 IN7STTOW IN7STTOW ; 
    15 XSDCD XSDCD ; 
  10 IN0TWSL3 IN0TWSL3 ; 
    15 IN0TWSL3-WDL3 IN0TWSL3-WDL3 ; 
      20 IN0TWSRT IN0TWSRT ; 
      20 IN0TWROW IN0TWROW ; 
      20 IN0TWSCD IN0TWSCD ; 
      20 XSACD XSACD ; 
      20 XUMCD XUMCD ; 
      20 XPGCD XPGCD ; 
      20 IN7STNBR IN7STNBR ; 
      20 XIUCD XIUCD ; 
      20 XISCD XISCD ; 
      20 IN7STFWH IN7STFWH ; 
      20 IN7STTWH IN7STTWH ; 
      20 IN0TWFOW IN0TWFOW ; 
      20 IN0TWTOW IN0TWTOW ; 
      20 IN0TWLDT IN0TWLDT ; 
      20 IN0TWHDT IN0TWHDT ; 
      20 IN0TWETA IN0TWETA ; 
      20 IN0TWRDT IN0TWRDT ; 
    15 IN0TWTOT IN0TWTOT ; 
  10 IN0TWDL3 IN0TWDL3 ; 
    15 IN0TWDRT IN0TWDRT ; 
    15 SY4IDDSC SY4IDDSC [4] ; 
    15 IN0TWTQT IN0TWTQT [4] ; 
    15 IN0TWDL3-WTOT IN0TWDL3-WTOT ; 
    15 * char(1) ; 
  10 IN0TWSS3 IN0TWSS3 ; 
    15 IN0TWSRO IN0TWSRO ; 
  10 IN0TWDS3 IN0TWDS3 ; 
    15 IN0TWDRO IN0TWDRO ; 
  10 IN0TWLS3 IN0TWLS3 ; 
    15 IN0TWLRO IN0TWLRO ; 
    15 IN0TWLXF IN0TWLXF ; 
  10 IN0TWWSD IN0TWWSD ; 
    15 IN0TWWMM IN0TWWMM ; 
    15 IN0TWWDD IN0TWWDD ; 
    15 IN0TWWYY IN0TWWYY ; 
end // end IN0TW03

//*** RECORD=IN0TW04 ****
// ************************************************************
// 
//           stock transfer inq by whse - #4
//           ===============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are initialized in
//           in0t410 and used by in0t420 (i.e. scrolling)
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 11-24-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0TW04 type basicRecord
  10 IN0TWLK4 IN0TWLK4 ; 
    15 IN7STFWH IN7STFWH ; 
    15 IN7STTWH IN7STTWH ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XISCD XISCD ; 
    15 XIUCD XIUCD ; 
  10 IN0TWSL4 IN0TWSL4 ; 
    15 IN0TWSRT IN0TWSRT ; 
    15 IN7STNBR IN7STNBR ; 
    15 IN0TWIS IN0TWIS ; 
    15 IN0TWIU IN0TWIU ; 
    15 IN0TWFWH IN0TWFWH ; 
    15 IN0TWFWD IN0TWFWD ; 
    15 IN0TWTWH IN0TWTWH ; 
    15 IN0TWTWD IN0TWTWD ; 
    15 IN0TWLDT IN0TWLDT ; 
    15 IN0TWHDT IN0TWHDT ; 
    15 IN0TWETA IN0TWETA ; 
    15 KUCCOID KUCCOID ; 
  10 IN0TWLS4 IN0TWLS4 ; 
    15 IN0TWLCR IN0TWLCR ; 
    15 IN0TWLCA IN0TWLCA ; 
    15 IN0TWLFW IN0TWLFW ; 
    15 IN0TWLFD IN0TWLFD ; 
    15 IN0TWLTW IN0TWLTW ; 
    15 IN0TWLTD IN0TWLTD ; 
end // end IN0TW04

//*** RECORD=IN0TWX1 ****
// ************************************************************
// 
//            COMMON WORKING STORAGE FIELDS
//            =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are generally used
//           by all applications.
// 
//           The name of this record and its fields will still
//           require application uniqueness (customization).
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 11-15-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0TWX1 type basicRecord
  10 IN0TWERS IN0TWERS ; 
  10 IN0TWSES IN0TWSES ; 
  10 IN0TWSKS IN0TWSKS ; 
  10 IN0TWFTS IN0TWFTS ; 
  10 IN0TWIPS IN0TWIPS ; 
  10 IN0TWEOF IN0TWEOF ; 
  10 IN0TWSXS IN0TWSXS ; 
  10 IN0TWLPF IN0TWLPF ; 
  10 IN0TWLRL IN0TWLRL ; 
  10 IN0TWIX1 IN0TWIX1 ; 
  10 IN0TWCTR IN0TWCTR ; 
  10 IN0TWSDX IN0TWSDX ; 
  10 IN0TWLSS IN0TWLSS ; 
  10 IN0TWREM IN0TWREM ; 
  10 IN0TWWCF IN0TWWCF ; 
  10 VAGen_SQLCODE VAGen_SQLCODE ; 
  10 XXXRVNBR XXXRVNBR ; 
  10 XXXERRID XXXERRID ; 
    15 XXXAPPID XXXAPPID ; 
    15 XXXMODID XXXMODID ; 
    15 XXXUNQID XXXUNQID ; 
  10 IN0TWLPP IN0TWLPP ; 
  10 IN0TWSIX IN0TWSIX ; 
  10 IN0TWDIX IN0TWDIX ; 
  10 IN0TWSML IN0TWSML ; 
  10 IN0TWDML IN0TWDML ; 
  10 IN0TWCDT IN0TWCDT ; 
    15 IN0TWCCC IN0TWCCC ; 
    15 IN0TWCSD IN0TWCSD ; 
      20 IN0TWCYY IN0TWCYY ; 
      20 IN0TWCMM IN0TWCMM ; 
      20 IN0TWCDD IN0TWCDD ; 
  10 IN0TWWDT IN0TWWDT ; 
    15 IN0TWWCC IN0TWWCC ; 
    15 IN0TWWSD IN0TWWSD ; 
      20 IN0TWWYY IN0TWWYY ; 
      20 IN0TWWMM IN0TWWMM ; 
      20 IN0TWWDD IN0TWWDD ; 
  10 IN0TWLOC IN0TWLOC ; 
  10 IN0TWMAP IN0TWMAP ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 IN0TWCAI IN0TWCAI ; 
    15 IN0TWCAN IN0TWCAN ; 
    15 IN0TWCAS IN0TWCAS ; 
    15 IN0TWCAE IN0TWCAE ; 
  10 IN0TWSDT IN0TWSDT ; 
  10 IN0TWEDT IN0TWEDT ; 
  10 IN0TWMNO IN0TWMNO ; 
end // end IN0TWX1

//*** RECORD=IN0TWXP1 ****
// ************************************************************
// 
//           TA0050  PARAMTER #1:
//           ===================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used each time
//           TA0050 is called in order to pass the:
//             LL = line length
//             DL = data line
//           note: the first byte is usually reserved for the
//                 record type (RT): S = summary
//                                   D = detail
//                                   B = blank (even no.s)
//                                   M = message trigger
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 10-10-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ************************
Record IN0TWXP1 type basicRecord
  10 IN0TWXLL IN0TWXLL ; 
  10 IN0TWXDL IN0TWXDL ; 
    15 IN0TWXRT IN0TWXRT ; 
    15 * char(394) ; 
end // end IN0TWXP1

//*** RECORD=IN0TWXP2 ****
// ************************************************************
// 
//           TA0050  PARAMTER #2:
//           ===================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used each time
//           TA0050 is called in order to pass the:
//             AP = application ID
//             IX = tsq record no.
//             FC = function code
//             RC = return code
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 09-19-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ************************
Record IN0TWXP2 type basicRecord
  10 IN0TWXAP IN0TWXAP ; 
  10 IN0TWXIX IN0TWXIX ; 
  10 IN0TWXFC IN0TWXFC ; 
  10 IN0TWXRC IN0TWXRC ; 
end // end IN0TWXP2

// acct. id company
DataItem IN0TWACO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// complete account id
DataItem IN0TWANO char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// acct. id dept
DataItem IN0TWANX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// acct. id store
DataItem IN0TWAST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ca end date (MMDDYY)
DataItem IN0TWCAE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// commarea user area items
DataItem IN0TWCAI char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ca selection number
DataItem IN0TWCAN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ca start date (MMDDYY)
DataItem IN0TWCAS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (CC)
DataItem IN0TWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (DD)
DataItem IN0TWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (CCYYMMDD)
DataItem IN0TWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (MM)
DataItem IN0TWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (YYMMDD)
DataItem IN0TWCSD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work counter
DataItem IN0TWCTR num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// current date (YY)
DataItem IN0TWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// det subkey color id
DataItem IN0TWDCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det subkey dimension code
DataItem IN0TWDDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det subkey gen prod class
DataItem IN0TWDGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det stock transfer issue
DataItem IN0TWDIQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// det data tsq rel rec nbr
DataItem IN0TWDIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// detail line
DataItem IN0TWDL2 char(62)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// detail data line
DataItem IN0TWDL3 char(62)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// total of all sizes
DataItem IN0TWDL3-WTOT num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// det max lines in tsq
DataItem IN0TWDML num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// det subkey pack code
DataItem IN0TWDPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det subkey quality code
DataItem IN0TWDQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det stock transfer req
DataItem IN0TWDQQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// det subkey row no.
DataItem IN0TWDRO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// det stock transfer rcv
DataItem IN0TWDRQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// det record type
DataItem IN0TWDRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete det subkey key
DataItem IN0TWDS2 char(25)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end
// detail subkey
DataItem IN0TWDS3 char(3)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// det subkey shade code
DataItem IN0TWDSA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det subkey spec code
DataItem IN0TWDSD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det stock transfer ship
DataItem IN0TWDSQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// det subkey style number
DataItem IN0TWDST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det subkey uom code
DataItem IN0TWDUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end date (CCYYMMDD)
DataItem IN0TWEDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EOF (=y) switch
DataItem IN0TWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general error switch
DataItem IN0TWERS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stk trnsfr eta
DataItem IN0TWETA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from owner group
DataItem IN0TWFOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time (=y) switch
DataItem IN0TWFTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stk trnsfr from whse desc
DataItem IN0TWFWD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stk trnsfr from whse
DataItem IN0TWFWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stk trnsfr ship date
DataItem IN0TWHDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// initial pass (=y) switch
DataItem IN0TWIPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inv stock transfer type code
DataItem IN0TWIS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stock transfer status code
DataItem IN0TWIU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'while' counter/index
DataItem IN0TWIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last tf-carr-sabrv
DataItem IN0TWLCA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last subkey color id
DataItem IN0TWLCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last tf-carr-cd
DataItem IN0TWLCR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last subkey dimension code
DataItem IN0TWLDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stk trnsfr release date
DataItem IN0TWLDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// last stk xfer from whse desc
DataItem IN0TWLFD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last stk xfer from whse
DataItem IN0TWLFW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last subkey gen prod class
DataItem IN0TWLGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem IN0TWLK1 char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem IN0TWLK2 char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem IN0TWLK3 char(22)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem IN0TWLK4 char(19)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// TA #1 last process/sgrp
DataItem IN0TWLOC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last pfkey (E or 6)
DataItem IN0TWLPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last subkey packing type code
DataItem IN0TWLPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lines per page
DataItem IN0TWLPP num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// last subkey quality code
DataItem IN0TWLQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last rt/lft pfkey(10or11)
DataItem IN0TWLRL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row number
DataItem IN0TWLRO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// complete last subkey
DataItem IN0TWLS2 char(25)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// last subkey
DataItem IN0TWLS3 char(7)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// last subkey
DataItem IN0TWLS4 char(26)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// last subkey shade code
DataItem IN0TWLSA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last subkey spec diff code
DataItem IN0TWLSD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line started switch (Y/N)
DataItem IN0TWLSS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last subkey style number
DataItem IN0TWLST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last stk xfer to whse desc
DataItem IN0TWLTD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last stk xfer to whse
DataItem IN0TWLTW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last subkey unit of measure
DataItem IN0TWLUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last stock xfer number
DataItem IN0TWLXF int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TA #1 last map
DataItem IN0TWMAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws for ezemno
DataItem IN0TWMNO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// stk trnsfr receive date
DataItem IN0TWRDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work remainder field
DataItem IN0TWREM num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// row number
DataItem IN0TWROW num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// spec difference code
DataItem IN0TWSCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum subkey color ID
DataItem IN0TWSCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum subkey dimension code
DataItem IN0TWSDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start date (CCYYMMDD)
DataItem IN0TWSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved detail index
DataItem IN0TWSDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// special error switch
DataItem IN0TWSES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum subkey gen prod class
DataItem IN0TWSGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum stock transfer issue
DataItem IN0TWSIQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum data tsq rel rec nbr
DataItem IN0TWSIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// same key (=y) switch
DataItem IN0TWSKS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary line
DataItem IN0TWSL2 char(62)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// summary data line
DataItem IN0TWSL3 char(62)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

//  overlay area for IN0TWDL3
DataItem IN0TWSL3-WDL3 char(54)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// summary data line
DataItem IN0TWSL4 char(47)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum max lines in tsq
DataItem IN0TWSML num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum subkey pack code
DataItem IN0TWSPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum subkey quality code
DataItem IN0TWSQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum stock transfer req
DataItem IN0TWSQQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum subkey row no.
DataItem IN0TWSRO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum stock transfer rcv
DataItem IN0TWSRQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// skip row switch (y/n)
DataItem IN0TWSRS char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum record type
DataItem IN0TWSRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete sum subkey
DataItem IN0TWSS2 char(25)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// summary subkey
DataItem IN0TWSS3 char(3)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum subkey shade code
DataItem IN0TWSSA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum subkey spec code
DataItem IN0TWSSD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum stock transfer ship
DataItem IN0TWSSQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum subkey style number
DataItem IN0TWSST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum subkey uom code
DataItem IN0TWSUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special exit switch
DataItem IN0TWSXS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total of all sizes
DataItem IN0TWTOT num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// to owner group
DataItem IN0TWTOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map size quantity
DataItem IN0TWTQT num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// stk trnsfr to whse desc
DataItem IN0TWTWD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stk trnsfr to whse
DataItem IN0TWTWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// units per case
DataItem IN0TWUPC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work date (CC)
DataItem IN0TWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work conversion factor
DataItem IN0TWWCF num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete work company
DataItem IN0TWWCO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date (DD)
DataItem IN0TWWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// complete work date
DataItem IN0TWWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date (MM)
DataItem IN0TWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// complete work dept
DataItem IN0TWWNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// short work date (YYMMDD)
DataItem IN0TWWSD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work date (YY)
DataItem IN0TWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// application ID
DataItem IN0TWXAP char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// short co. for acct. id
DataItem IN0TWXCO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work data line
DataItem IN0TWXDL char(395)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// function code
DataItem IN0TWXFC char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// rel rec no./index
DataItem IN0TWXIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// data (line) length
DataItem IN0TWXLL num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// short dept for acct. id
DataItem IN0TWXNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem IN0TWXRC num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum record type
DataItem IN0TWXRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

