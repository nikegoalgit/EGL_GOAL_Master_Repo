package in0i;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=IN0I ****
// ************************************************************
// 
//           INVENTORY INQUIRIES
//           ===================
// 
// ************************************************************
// 
// OVERVIEW: This application displays a menu (or used PFkeys)
//           to choose the desired inventory inquiry.
// 
//           The selection values:PFkeys are:
//           1:13 - Inventory Inquiry Detail - Header Detail
//           2:14 - Inventory Inquiry Detail - Size Detail
//           3:15 - Inventory Inquiry Summary by Warehouse
//                  and Product
//           4:16 - Inventory Inquiry Detail by Style
//                  (all warehouses)
//           5:17 - Inventory Inquiry for All Owner Groups
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// IO0580    DINVNT.VINHDR01
// IO3340    dprodc.vprdcu01
// DB1030    inventory item formatter
// SY1120    size description translator
// 
// MAINTENANCE HISTORY:
// ===================
// CNTL
// NBR    DATE      NAME         DESCRIPTION OF CAHNGE
// _____  ________  ___________  ______________________________
// IN#00  11/07/86  w. jones     application created
// IN#01  01/??/87  w. jones     changed detection of some
//                               quantity from ge 0 to ne 0
//                               in order to see only neg. no.s
//                               w/0 change counts, and added
//                               use of in0iwx1.in0iwmno to fix
//                               loss of ezemno w.'display'
// IN#02  02/23/87   l. deluhery changed logic to consider
//                               possible negative inventory
//                               quantities
// IN#03  02/27/87   l. deluhery change to not allow net inven-
//                               tory to go negative per proj-
//                               ect lead
// IN#04  03/05/87   l. deluhery reverse change to IN#03.
// IN#05  03/06/87   l. deluhery fix option 4 problem when try
//                               to enter a second gpc/style
// IN#06  04/01/87   r. connoly  added ws for ezemno
// IN#07  07/13/87   j. campbell bypass styles not on the style
//                               db
// IN#08  10/05/87   g. amen     activate spec diff for pahse 3
// IN#09  10/05/87   j. campbell calc net on prod summ same as
//                               det
// IN#10  09/13/88   w. jones    reset scrn if test path error
// IN#11  11/02/88   j. wood     noncsp opt added on calls
// IN#12  11/08/88   l. deluhery in#35 - change unit per price
//                               calculations in levels 1,3 & 5
// IN#10  01/11/89   w. jones    init. new inv item eom fld
// IN#11  02/03/89   w. jones    fix typo sd1 = chng 3 to 4 lif
//                               cyc
//   ?    04/25/89   j. wood     xssegtr logic added
// IN#12  08/21/89   e. smith    remove code relating to shade
//                               and spec cntl: in0ist3, st5,
//                               sxe, s1b, s1d, 110, 310, 510,
//                               sxd, s1a
//   ?    04/05/90   j. campbell structure change (xsd) etc
// 
// IN#18  09/12/90   rvakel      update cursor processing on
//                               maps in0i010, in0i020,
//                               in0i030, in0i050
// TBL CHG 2/13/91   CENGEL      IN0ISD1, IN0ISD3 & IN0ISD5
//                               statement groups were modified
//                               to accomodate scheduled table
//                               changes.  In this, case data
//                               item SY5PRCFL was renamed to
//                               XQACD in SY5REC.
// IN#0   10/13/92   dchian      Regenned for table changes.
// 1H0003 11/16/93 smacmi  European Phase I changes.  Also
//                         enhanced call to Help (GD01) pgm.
// 1H8000 03/01/94 DANNAN  Table Changes.  Increased the size
//                         of unit price and wholesale price,
//                         everywhere it occurs in IN0ISD1,
//                         IN0ISD3, IN0ISD5, records & maps.
//                         Added currency code and country code
//                         to call using IO0380, DPROD.VPRICE01
//                         ZFC-CRCY-CD & XCT-CTRY-CD of SY5REC.
// IN268  06/15/94 DANNAN  Removed direct calls to VCOLOR01,
//                         VPRICE01, and replaced it with a
//                         call to a product access subroutine
//                         IN8020.  Removed SY2REC & SY5REC,
//                         then added INGREC.  Removed SGRPS
//                         that called those IO mods, IN0ISXB
//                         & IN0ISXV.  Left a call to VSTYLE01
//                         intact in option 4 because IN8020
//                         doesn't handle a style level record
//                         get and the map for option 4 doesn't
//                         require entry of color & dimension.
// IN268  06/30/94 DANNAN  Modified IN0IS-IN8020-ERRS to NOT
//                         post a 'not found' error from IN8020
// Canada 08/03/95 mmcgol  Modified in0isc1, in0isc3 & in0isc5
//                         to get currency code from the xwhtbl
//                         warehouse table.  Removed call to
//                         in8000 from in0i010.
// Canada 01/10/96 Pjames  Modified IN0ISC2 to pick up country
//                         code and IN0ISd2 to pass to IN8020.
// Canada 01/29/96 Pjames  Added code so that canadian inventor
//                         can not be viewed by US and US
//                         inventory will not show for Canada.
// SK8    09/17/96 GCULLY  Modified IN0ISC1, IN0ISC2, IN0ISC3,
//                         and IN0ISC5.  Replaced hard-coded
//                         US/Canada inventory view logic with
//                         logic that will examine country code
//                         from the XWHTBL and XSOTBL.
// y2kfix 02/02/98 pharwo  year 2000 changes to in0i010.
// ************************************************************
// *********************
Program IN0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IN00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IN0IW00 IN0IW00; // record
  IN0IW01 IN0IW01; // record
  IN0IW02 IN0IW02; // record
  IN0IW03 IN0IW03; // record
  IN0IW04 IN0IW04; // record
  IN0IW05 IN0IW05; // record
  IN0IWX1 IN0IWX1; // record
  IN0IWXP1 IN0IWXP1; // record
  IN0IWXP2 IN0IWXP2; // record
  IN2REC IN2REC; // record
  IN9REC IN9REC; // record
  INGREC INGREC; // record
  INQREC INQREC; // record
  INRREC INRREC; // record
  INRREC08 INRREC08 { redefines = INRREC } ; // record
  PC2REC PC2REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use IN0IM.IN0IM005,  // forms
      IN0IM.IN0IM010, 
      IN0IM.IN0IM020, 
      IN0IM.IN0IM021, 
      IN0IM.IN0IM030, 
      IN0IM.IN0IM031, 
      IN0IM.IN0IM032, 
      IN0IM.IN0IM040, 
      IN0IM.IN0IM041, 
      IN0IM.IN0IM050, 
      IN0IM.IN0IM051, 
      IN0IM.IN0IM052
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IN0I010: IN0I010();


    IN0IWX1.XXXMODID = "01F";

     /* ************************************************************/
     /* *** flow decisions based on CAITEM as selection         ****/
     /* *** note: invalid values detected when there is NOT     ****/
     /* ***       an equivalent selection                       ****/
     /* *** note: character data is used re: CAITEM = character ****/
     /* ************************************************************/

    if (IN0IM005.IN0IMSNO > " ")
      if (IN0IM005.IN0IMSNO == "1")
        goto IN0I110; /* <=== display header detail data*/
      end
      if (IN0IM005.IN0IMSNO == "2")
        goto IN0I210; /* <=== display size detail data*/
      end
      if (IN0IM005.IN0IMSNO == "3")
        goto IN0I310;
                                     /* <=== display warehouse & product data*/
      end
      if (IN0IM005.IN0IMSNO == "4")
        goto IN0I410; /* <=== display style data*/
      end
      if (IN0IM005.IN0IMSNO == "5")
        goto IN0I510; /* <=== display owner group data*/
      end
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0010); /* <--- invalid selection passed msg*/
      goto IN0I020; /* <=== display menu screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0I020; /* <=== display menu screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0I020: IN0I020();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0IWX1.IN0IWERS == "Y")
      goto IN0I020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if enter: use selection to determine flow           ****/
     /* *** note: invalid values detected when there is NOT     ****/
     /* ***       an equivalent selection                       ****/
     /* *** note: character data is used re: CAITEM = character ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (IN0IM005.IN0IMSNO == "1")
        goto IN0I110; /* <=== display header detail data*/
      end
      if (IN0IM005.IN0IMSNO == "2")
        goto IN0I210; /* <=== display size detail data*/
      end
      if (IN0IM005.IN0IMSNO == "3")
        goto IN0I310;
                                     /* <=== display warehouse & product data*/
      end
      if (IN0IM005.IN0IMSNO == "4")
        goto IN0I410; /* <=== display style data*/
      end
      if (IN0IM005.IN0IMSNO == "5")
        goto IN0I510; /* <=== display owner group data*/
      end
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
      IN0IWX1.IN0IWMNO = 0011; /* <--- invalid selection value msg*/
      /* MOVE 0011 TO EZEMNO  ; <--- invalid selection value msg*/
      goto IN0I020; /* <=== display menu screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto IN0I110; /* <=== display header detail data*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0I210; /* <=== display size detail data*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0I310;
                                     /* <=== display warehouse & product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0I410; /* <=== display style data*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0I510; /* <=== display owner group data*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0I010; /* <=== re-start this function*/
    end

    IN0IWX1.XXXMODID = "02F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
    IN0IWX1.IN0IWMNO = 0008; /* <--- fall thru error msg*/
     /* MOVE 0008 TO EZEMNO             ; <--- fall thru error msg*/
    goto IN0I020; /* <=== display menu screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0I110: IN0I110();


     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end

    goto IN0I120; /* <=== display screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0I120: IN0I120();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end

    if (IN0IWX1.IN0IWERS == "Y")
      if (IN0IWX1.IN0IWSES == "Y")
        goto IN0I110; /* <=== re-setup this screen*/
      else
        goto IN0I120; /* <=== re-display this screen*/
      end
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0I120; /* <=== display this screen*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0I110; /* <=== display header detail data*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0I210; /* <=== display size detail data*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0I310;
                                     /* <=== display warehouse & product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0I410; /* <=== display style data*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0I510; /* <=== display owner group data*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0I010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0I110; /* <=== re-start this function*/
    end

    IN0IWX1.XXXMODID = "12F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    IN0IWX1.IN0IWMNO = 0008; /* <--- fall thru error msg*/
     /* MOVE 0008 TO EZEMNO             ; <--- fall thru error msg*/
    goto IN0I120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0I210: IN0I210();


     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    goto IN0I220; /* <=== display screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0I220: IN0I220();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0IWX1.IN0IWERS == "Y")
      if (IN0IWX1.IN0IWSES == "Y")
        goto IN0I210; /* <=== re-setup this screen*/
      else
        goto IN0I220; /* <=== re-display this screen*/
      end
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto IN0I221; /* <=== display sum floating map*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0I110; /* <=== display header detail data*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0I210; /* <=== display size detail data*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0I310;
                                     /* <=== display warehouse & product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0I410; /* <=== display style data*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0I510; /* <=== display owner group data*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0I010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0I210; /* <=== re-start this function*/
    end

    IN0IWX1.XXXMODID = "22F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    IN0IWX1.IN0IWMNO = 0008; /* <--- fall thru error msg*/
     /* MOVE 0008 TO EZEMNO             ; <--- fall thru error msg*/
    goto IN0I220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0I221: IN0I221();


     /* ************************************************************/
     /* *** if error: display cleared screen ('SES' = Y)        ****/
     /* ************************************************************/


    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end

    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      goto IN0I210; /* <=== re-set this screen*/
    end

     /* ************************************************************/
     /* *** if page not full: re-display next sum floating map  ****/
     /* ************************************************************/

    if (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
      goto IN0I221; /* <=== display sum floating map*/
    else
      goto IN0I220; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0I310: IN0I310();


     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    goto IN0I320; /* <=== display screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0I320: IN0I320();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/


    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0IWX1.IN0IWERS == "Y")
      if (IN0IWX1.IN0IWSES == "Y")
        goto IN0I310; /* <=== re-setup this screen*/
      else
        goto IN0I320; /* <=== re-display this screen*/
      end
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (IN0IWX1.IN0IWLPF == "E")
        goto IN0I321; /* <=== display sum floating map*/
      else
        goto IN0I322; /* <=== display det floating map*/
      end
    end

    if (converseVar.eventKey is pf13)
      goto IN0I110; /* <=== display header detail data*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0I210; /* <=== display size detail data*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0I310;
                                     /* <=== display warehouse & product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0I410; /* <=== display style data*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0I510; /* <=== display onwer group data*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0I010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0I310; /* <=== re-start this function*/
    end

    IN0IWX1.XXXMODID = "32F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    IN0IWX1.IN0IWMNO = 0008; /* <--- fall thru error msg*/
     /* MOVE 0008 TO EZEMNO             ; <--- fall thru error msg*/
    goto IN0I320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0I321: IN0I321();


     /* ************************************************************/
     /* *** if error: display the cleared screen (SES=Y)        ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end

    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      goto IN0I310; /* <=== display cleared screen*/
    end

     /* ************************************************************/
     /* *** if last pfkey was pf6: go back to display detail    ****/
     /* *** note: det disp used this after reading sum record   ****/
     /* ***       and needs control back again                  ****/
     /* ************************************************************/

    if (IN0IWX1.IN0IWLPF == "6")
      goto IN0I322; /* <=== display det floating map*/
    end

     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
      goto IN0I321; /* <=== display sum floating map*/
    else
      goto IN0I320; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0I322: IN0I322();


     /* ************************************************************/
     /* *** if error: display the cleared screen (SES=Y)        ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end

    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      goto IN0I310; /* <=== display cleared screen*/
    end

     /* ************************************************************/
     /* *** if record type is summary: use summary display      ****/
     /* ************************************************************/

    if (IN0IW03.IN0IWDRT == "S")
      goto IN0I321; /* <=== display sum floating map*/
    end

     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
      goto IN0I322; /* <=== display det floating map*/
    else
      goto IN0I320; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0I410: IN0I410();


     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    goto IN0I420; /* <=== display screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0I420: IN0I420();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0IWX1.IN0IWERS == "Y")
      if (IN0IWX1.IN0IWSES == "Y")
        IN0IWX1.IN0IWSES = "N";
        goto IN0I410; /* <=== re-setup this screen*/
      else
        goto IN0I420; /* <=== re-display this screen*/
      end
    end

     /* ************************************************************/
     /* *** if special exit switch = Y:  display owner data     ****/
     /* ************************************************************/

    if (IN0IWX1.IN0IWSXS == "Y")
      IN0IWX1.IN0IWSXS = "N";
      goto IN0I510; /* <=== display onwer group data*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto IN0I421; /* <=== display sum floating map*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0I110; /* <=== display header detail data*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0I210; /* <=== display size detail data*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0I310;
                                     /* <=== display warehouse & product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0I410; /* <=== display style data*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0I510; /* <=== display onwer group data*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0I010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0I410; /* <=== re-start this function*/
    end

    IN0IWX1.XXXMODID = "42F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    IN0IWX1.IN0IWMNO = 0008; /* <--- fall thru error msg*/
     /* MOVE 0008 TO EZEMNO             ; <--- fall thru error msg*/
    goto IN0I420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0I421: IN0I421();


     /* ************************************************************/
     /* *** if error: display cleared screen ('SES' = Y)        ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      goto IN0I410; /* <=== re-set this screen*/
    end

     /* ************************************************************/
     /* *** if page not full: re-display next sum floating map  ****/
     /* ************************************************************/

    if (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
      goto IN0I421; /* <=== display sum floating map*/
    else
      goto IN0I420; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0I510: IN0I510();


     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    goto IN0I520; /* <=== display screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    IN0I520: IN0I520();


     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0IWX1.IN0IWERS == "Y")
      if (IN0IWX1.IN0IWSES == "Y")
        goto IN0I510; /* <=== re-setup this screen*/
      else
        goto IN0I520; /* <=== re-display this screen*/
      end
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (IN0IWX1.IN0IWLPF == "E")
        goto IN0I521; /* <=== display sum floating map*/
      else
        goto IN0I522; /* <=== display det floating map*/
      end
    end

    if (converseVar.eventKey is pf13)
      goto IN0I110; /* <=== display header detail data*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0I210; /* <=== display size detail data*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0I310;
                                     /* <=== display warehouse & product data*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0I410; /* <=== display style data*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0I510; /* <=== display onwer group data*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0I010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0I510; /* <=== re-start this function*/
    end

    IN0IWX1.XXXMODID = "52F";

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    IN0IWX1.IN0IWMNO = 0008; /* <--- fall thru error msg*/
     /* MOVE 0008 TO EZEMNO             ; <--- fall thru error msg*/
    goto IN0I520; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    IN0I521: IN0I521();


     /* ************************************************************/
     /* *** if error: display the cleared screen (SES=Y)        ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      goto IN0I510; /* <=== display cleared screen*/
    end

     /* ************************************************************/
     /* *** if last pfkey was pf6: go back to display detail    ****/
     /* *** note: det disp used this after reading sum record   ****/
     /* ***       and needs control back again                  ****/
     /* ************************************************************/

    if (IN0IWX1.IN0IWLPF == "6")
      goto IN0I522; /* <=== display det floating map*/
    end

     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
      goto IN0I521; /* <=== display sum floating map*/
    else
      goto IN0I520; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


    IN0I522: IN0I522();


     /* ************************************************************/
     /* *** if error: display the cleared screen (SES=Y)        ****/
     /* ************************************************************/

    if (converseVar.validationMsgNum > 0)
      IN0IWX1.IN0IWMNO = converseVar.validationMsgNum;
      converseLib.validationFailed(0);
    end


    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      goto IN0I510; /* <=== display cleared screen*/
    end

     /* ************************************************************/
     /* *** if record type is summary: use summary display      ****/
     /* ************************************************************/

    if (IN0IW05.IN0IWDRT == "S")
      goto IN0I521; /* <=== display sum floating map*/
    end

     /* ************************************************************/
     /* *** if page full: converse map                          ****/
     /* ************************************************************/

    if (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
      goto IN0I522; /* <=== display det floating map*/
    else
      goto IN0I520; /* <=== converse this screen*/
    end

     /* ************************************************************/
     /* *** end of DISPLAY FLOW section                         ****/
     /* ************************************************************/


  end // end main
end // end IN0I

// IN0I010 - init. for IN0I020
Function IN0I010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();
  XSSEGTR(); /* set segmented transaction id*/


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0IM005 initial;
  set IN0IWX1 empty;
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set IN0IWXP1 empty;
  set IN0IWXP2 empty;
  set INQREC empty;
  set IN2REC empty;
  IN0IM005.XXXERRID = "IN0I020 ";
  IN0IM005.XXXMAPNM = "IN0IM005";
  IN0IM005.XXXTITLE = "INVENTORY INQUIRY MENU";
  IN0IM005.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0IWX1.IN0IWERS = "N";
  IN0IWX1.IN0IWSES = "N";
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE EZEDTE TO IN0IWX1.IN0IWCDT;*/
   /* MOVE 19 TO IN0IWX1.IN0IWCCC;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  IN0IWX1.IN0IWCDT = VGVar.currentGregorianDate;
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  11/07/86  W. Jones      created                ****/
   /* ***  01  01/13/87  W. Jones      misc.                  ****/
   /* ***  02  04/01/87  R. Connoly    ws for ezemno          ****/
   /* ***  10  09/13/88  W. Jones      reset scrn if fast     ****/
   /* ***                              path error             ****/
   /* ***  11  11/02/88  j. wood       noncsp opt added (calls****/
   /* ***  12  11/08/88  l. deluhery   in#35 fix.             ****/
   /* ***  13  01/11/89  W. Jones      init. new initm eom fld****/
   /* *** note: ws field used re: same no. on all in0i maps   ****/
   /* ***      08/02/95  mmcgol        removed call to in8000 ****/
   /* ************************************************************/

  IN0IWX1.XXXRVNBR = "13";
  IN0IM005.XXXRVNBR = IN0IWX1.XXXRVNBR;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0IWX1.IN0IWLPP = 15;

  IN0IWX1.XXXAPPID = "IN0I";
  IN0IWX1.IN0IWLOC = "IN0I010 ";

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    IN0ISY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end IN0I010

// IN0I020 - converse & edits
Function IN0I020()


   /* ************************************************************/
   /* *** check ws for messages to be displayed               ****/
   /* ************************************************************/


  if (IN0IWX1.IN0IWMNO > 0)
    if (IN0IWX1.IN0IWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0IWX1.IN0IWMNO);
    end
    IN0IWX1.IN0IWMNO = 0;
  end



  converse IN0IM005 ;


  IN0IWX1.XXXMODID = "020";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0IM005.CATOAP > " ")
    COMMAREA.CATOAP = IN0IM005.CATOAP;
    COMMAREA.CAITEM = IN0IM005.CAITEM;
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM005.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0IM005.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "N";
  IN0IM005.VAGen_EZEMSG = " ";
  IN0IM005.XXXERRID = "IN0I020 ";
  set IN0IM005.CATOAP initialAttributes;
  set IN0IM005.CAITEM initialAttributes;
  set IN0IM005.IN0IMSNO cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0IM005.IN0IMSNO initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0IM005.CAITEM > " ")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0IM005.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process                        ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0ISH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level = inv menu     ****/
   /* *** note: inv menu requires exiting application instead ****/
   /* ***       of the normal ezeflo                          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "C";
    IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0I-5";
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "G";
  IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0I020

// IN0I110 - init. for IN0I120
Function IN0I110()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSES == "Y")
    converseLib.clearScreen();
    set IN0IM010 empty;
  else
    converseLib.clearScreen();
    set IN0IM010 initial;
  end
  IN0IM010.XXXERRID = "IN0I120 ";
  IN0IM010.XXXMAPNM = "IN0IM010";
  IN0IWX1.IN0IWMAP = "IN0IM010";
  IN0IM010.XXXTITLE = "INVENTORY INQUIRY (HEADER)";
  IN0IM010.IN0I-ZFC-HDR = IN0I-WRK-CUR-HDR-CLN;
  IN0IM010.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0IM010.XXXRVNBR = IN0IWX1.XXXRVNBR;
  IN0ISG1(); /* <=== setup map key fields*/
  set IN0IW01 empty;
  set IN2REC empty;
  set IN9REC empty;
  set INGREC empty;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0IW01.IN0IWNMD = 09;

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end IN0I110

// IN0I120 - converse & edits
Function IN0I120()


   /* ************************************************************/
   /* *** check ws for messages to be displayed               ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWMNO > 0)
    if (IN0IWX1.IN0IWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0IWX1.IN0IWMNO);
    end
    IN0IWX1.IN0IWMNO = 0;
  end

   /* ************************************************************/
   /* *** temp darking of spec & shade related flds           ****/
   /* ************************************************************/

  IN0IM010.XSACD = "000";

  set IN0IM010.IN4SPCSP skip, invisible;
  set IN0IM010.IN0IMDPR skip, invisible;
  set IN0IM010.XSACD skip, invisible;
  set IN0IM010.XSADESC skip, invisible;
  set IN0IM010.IN3SHDSP skip, invisible;
  set IN0IM010.IN0IMAPR skip, invisible;
  IN0IWX1.IN0IWIX1 = 1;
  while (IN0IWX1.IN0IWIX1 <= IN0IW01.IN0IWNMD)
    set IN0IM010.IN0IMDCD[IN0IWIX1] skip, invisible;
    set IN0IM010.IN0IMDDS[IN0IWIX1] skip, invisible;
    set IN0IM010.IN0IMACD[IN0IWIX1] skip, invisible;
    set IN0IM010.IN0IMADS[IN0IWIX1] skip, invisible;
    IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
  end


  converse IN0IM010 ;


  IN0IWX1.XXXMODID = "120";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0IM010.CATOAP > " ")
    COMMAREA.CATOAP = IN0IM010.CATOAP;
    COMMAREA.CAITEM = IN0IM010.CAITEM;
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0IM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "N";
  IN0IM010.VAGen_EZEMSG = " ";
  IN0IM010.XXXERRID = "IN0I120 ";
  set IN0IM010.CATOAP initialAttributes;
  set IN0IM010.CAITEM initialAttributes;
  set IN0IM010.XWHCD cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0IM010.XWHCD initialAttributes;
  set IN0IM010.XOWCD initialAttributes;
  set IN0IM010.XGPCD initialAttributes;
  set IN0IM010.SY1STNBR initialAttributes;
  set IN0IM010.SY2CLRID initialAttributes;
  set IN0IM010.XDMCD initialAttributes;
  set IN0IM010.XQACD initialAttributes;
  set IN0IM010.XSDCD initialAttributes;
  set IN0IM010.XSACD initialAttributes;
  set IN0IM010.XPGCD initialAttributes;
  set IN0IM010.XUMCD initialAttributes;

   /* ************************************************************/
   /* *** if more than one style inquiry per warehouse, set   ****/
   /* *** the cursor to the style field after the first       ****/
   /* *** inquiry                                             ****/
   /* ***Requester: ZAK  Change Programmer: RVAKEL  09/11/90  ****/
   /* ************************************************************/

  if (IN0IM010.XWHCD > "  ")
    set IN0IM010.SY1STNBR cursor;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0IM010.CAITEM > " ")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0IM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0ISH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level (in FLOW)      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "C";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0I-10";
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "F";
  IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0I120

// IN0I210 - init. for IN0I220
Function IN0I210()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSES == "Y")
    converseLib.clearScreen();
    set IN0IM020 empty;
  else
    converseLib.clearScreen();
    set IN0IM020 initial;
  end
  set IN0IM021 initial;
  IN0IM020.XXXERRID = "IN0I220 ";
  IN0IM020.XXXMAPNM = "IN0IM020";
  IN0IWX1.IN0IWMAP = "IN0IM020";
  IN0IM020.XXXTITLE = "INVENTORY INQUIRY (SIZE DETAIL)";
  IN0IM020.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0IM020.XXXRVNBR = IN0IWX1.XXXRVNBR;
  IN0ISG2(); /* <=== setup map key fields*/
  set IN0IW02 empty;
  set IN0IWXP1 empty;
  set IN0IWXP2 empty;
  set IN9REC empty;
  set INGREC empty;
  IN0ISX2(); /* <=== purge tsq*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXLL = 62;

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end IN0I210

// IN0I220 - converse & edits
Function IN0I220()


   /* ************************************************************/
   /* *** check ws for messages to be displayed               ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWMNO > 0)
    if (IN0IWX1.IN0IWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0IWX1.IN0IWMNO);
    end
    IN0IWX1.IN0IWMNO = 0;
  end

   /* ************************************************************/
   /* *** temp darking of spec & shade related flds           ****/
   /* ************************************************************/

  IN0IM020.XSACD = "000";

  set IN0IM020.XSACD skip, invisible;


  converse IN0IM020 ;


  IN0IWX1.XXXMODID = "220";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0IM020.CATOAP > " ")
    COMMAREA.CATOAP = IN0IM020.CATOAP;
    COMMAREA.CAITEM = IN0IM020.CAITEM;
    IN0ISX2(); /* <=== purge tsq*/
    XSEXIT();
    IN0IST2(); /* <=== reset scrn*/
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM020.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0IM020.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "N";
  IN0IM020.VAGen_EZEMSG = " ";
  IN0IM020.XXXERRID = "IN0I220 ";
  set IN0IM020.CATOAP initialAttributes;
  set IN0IM020.CAITEM initialAttributes;
  set IN0IM020.XWHCD cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0IM020.XWHCD initialAttributes;
  set IN0IM020.XOWCD initialAttributes;
  set IN0IM020.XGPCD initialAttributes;
  set IN0IM020.SY1STNBR initialAttributes;
  set IN0IM020.SY2CLRID initialAttributes;
  set IN0IM020.XDMCD initialAttributes;
  set IN0IM020.XQACD initialAttributes;
  set IN0IM020.XSDCD initialAttributes;
  set IN0IM020.XSACD initialAttributes;
  set IN0IM020.XPGCD initialAttributes;
  set IN0IM020.XUMCD initialAttributes;

   /* ************************************************************/
   /* *** if more than one style number inquiry per warehouse ****/
   /* *** set the cursor to the style field after the first   ****/
   /* *** Inquiry                                             ****/
   /* *** Requester:ZAK   Change Programmer: RVAKEL 09/11/90  ****/
   /* ************************************************************/

  if (IN0IM020.XWHCD > "  ")
    set IN0IM020.SY1STNBR cursor;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0IM020.CAITEM > " ")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0IM020.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0ISH2(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    IN0ISJ2(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    IN0ISK2(); /* <=== PF8 processing*/
    exit stack;
  end


  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    exit stack;
  end

  IN0IWX1.XXXMODID = "220";

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    IN0ISX2(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level (in FLOW)      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    IN0ISX2(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    IN0ISX2(); /* <=== purge tsq*/
    XSPF4();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "C";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    IN0ISX2(); /* <=== purge tsq*/
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0I-20";
    IN0ISX2(); /* <=== purge tsq*/
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    IN0ISX2(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "F";
  IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0I220

// IN0I221 - display sum float
Function IN0I221()


  IN0IWX1.XXXMODID = "221";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number  and ****/
   /* *** move to ws layout to move specific flds to map      ****/
   /* *** note: parm #2 index computed from summary ptr +     ****/
   /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWSIX + IN0IWIX1 - 1;

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    IN0IW02.IN0IWSL2 = IN0IWXP1.IN0IWXDL;
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    exit stack;
  end

  if (IN0IW02.IN0IWSRT == "B")
    set IN0IM021.SY4IDDSC skip, invisible;
    set IN0IM021.IN0IMZAV skip, invisible;
    set IN0IM021.IN0IMZAL skip, invisible;
    set IN0IM021.IN0IMZRS skip, invisible;
    set IN0IM021.IN0IMZSE skip, invisible;
    set IN0IM021.IN0IMZXO skip, invisible;
    set IN0IM021.IN0IMZOH skip, invisible;
    set IN0IM021.IN0IMZXI skip, invisible;
  else
    IN0IM021.SY4IDDSC = IN0IW02.SY4IDDSC;
    IN0IM021.IN0IMZAV = IN0IW02.IN0IWZAV;
    IN0IM021.IN0IMZAL = IN0IW02.IN0IWZAL;
    IN0IM021.IN0IMZRS = IN0IW02.IN0IWZRS;
    IN0IM021.IN0IMZSE = IN0IW02.IN0IWZSE;
    IN0IM021.IN0IMZXO = IN0IW02.IN0IWZXO;
    IN0IM021.IN0IMZOH = IN0IW02.IN0IWZOH;
    IN0IM021.IN0IMZXI = IN0IW02.IN0IWZXI;
    set IN0IM021.SY4IDDSC initialAttributes;
    set IN0IM021.IN0IMZAV initialAttributes;
    set IN0IM021.IN0IMZAL initialAttributes;
    set IN0IM021.IN0IMZRS initialAttributes;
    set IN0IM021.IN0IMZSE initialAttributes;
    set IN0IM021.IN0IMZXO initialAttributes;
    set IN0IM021.IN0IMZOH initialAttributes;
    set IN0IM021.IN0IMZXI initialAttributes;
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;


  display IN0IM021 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0I221

// IN0I310 - init. for IN0I320
Function IN0I310()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSES == "Y")
    converseLib.clearScreen();
    set IN0IM030 empty;
  else
    converseLib.clearScreen();
    set IN0IM030 initial;
  end
  set IN0IM031 initial;
  set IN0IM032 initial;
  IN0IM030.XXXERRID = "IN0I320 ";
  IN0IM030.XXXMAPNM = "IN0IM030";
  IN0IWX1.IN0IWMAP = "IN0IM030";
  IN0IM030.XXXTITLE = "INVENTORY INQUIRY (SUMMARY)";
  IN0IM030.IN0I-ZFC-HDR = IN0I-WRK-HDR;
  IN0IM030.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0IM030.XXXRVNBR = IN0IWX1.XXXRVNBR;
  IN0ISG3(); /* <=== setup map key fields*/
  set IN0IW03 empty;
  set IN0IWXP1 empty;
  set IN0IWXP2 empty;
  set IN2REC empty;
  set IN9REC empty;
  set INGREC empty;
  set SYPREC empty;
  IN0ISX3(); /* <=== purge tsqs*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXLL = 51;

   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;
  while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
    set IN0IM030.IN0IMSEL[IN0IWIX1] skip, invisible;
    IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end IN0I310

// IN0I320 - converse & edits
Function IN0I320()


   /* ************************************************************/
   /* *** no "before" processing...                           ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWMNO > 0)
    if (IN0IWX1.IN0IWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0IWX1.IN0IWMNO);
    end
    IN0IWX1.IN0IWMNO = 0;
  end


  converse IN0IM030 ;


  IN0IWX1.XXXMODID = "320";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0IM030.CATOAP > " ")
    COMMAREA.CATOAP = IN0IM030.CATOAP;
    COMMAREA.CAITEM = IN0IM030.CAITEM;
    IN0ISX3(); /* <=== purge tsq*/
    XSEXIT();
    IN0IST3(); /* <=== reset scrn*/
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM030.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0IM030.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "N";
  IN0IM030.VAGen_EZEMSG = " ";
  IN0IM030.XXXERRID = "IN0I320 ";
  set IN0IM030.CATOAP initialAttributes;
  set IN0IM030.CAITEM initialAttributes;
  set IN0IM030.XWHCD cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0IM030.XWHCD initialAttributes;
  set IN0IM030.XOWCD initialAttributes;
  set IN0IM030.XGPCD initialAttributes;
  set IN0IM030.SY1STNBR initialAttributes;
  set IN0IM030.SY2CLRID initialAttributes;
  set IN0IM030.XDMCD initialAttributes;
  set IN0IM030.XQACD initialAttributes;

   /* ************************************************************/
   /* *** if more than one style number inquiry per warehouse ****/
   /* *** set the cursor to the style field after the first   ****/
   /* *** inquiry                                             ****/
   /* *** Requester: ZAK   Change Programmer: RVAKEL 09/11/90 ****/
   /* ************************************************************/

  if (IN0IM030.XWHCD > "  ")
    set IN0IM030.SY1STNBR cursor;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0IM030.CAITEM > " ")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0IM030.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0IWX1.IN0IWIX1 = 1;
    while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
      if (IN0IM030.IN0IMSEL[IN0IWIX1] > " ")
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "C";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0020); /* <--- use pf6 msg*/
        exit stack;
      else
        IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
      end
    end
    IN0ISH3(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* *** note: check first for need to save selected subkey  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (IN0IWX1.IN0IWLPF == "E")
      IN0IWX1.IN0IWIX1 = 1;
      while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
        if (IN0IM030.IN0IMSEL[IN0IWIX1] > " ")
          IN0IS3A(); /* <=== select processing*/
          IN0IM030.IN0IMSEL[IN0IWIX1] = " ";
          IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
        else
          IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
        end
      end
    end
    IN0ISI3(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: dispaly error msg           ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;
  while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
    if (IN0IM030.IN0IMSEL[IN0IWIX1] > " ")
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "D";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0020); /* <--- use pf6 msg*/
      exit stack;
    else
      IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    IN0ISJ3(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    IN0ISK3(); /* <=== PF8 processing*/
    exit stack;
  end


  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    exit stack;
  end

  IN0IWX1.XXXMODID = "320";

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    IN0ISX3(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level (in FLOW)      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    IN0ISX3(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM030.VAGen_EZEMSG = CAMSG;
    IN0ISX3(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM030.VAGen_EZEMSG = CAMSG;
    IN0ISX3(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0I-30";
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "G";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM030.VAGen_EZEMSG = CAMSG;
    IN0ISX3(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    IN0ISX3(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "H";
  IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0I320

// IN0I321 - display sum float
Function IN0I321()


  IN0IWX1.XXXMODID = "321";

   /* ************************************************************/
   /* *** if last pfkey was PF6 (it should've been ENTER):    ****/
   /* *** disp det is using this after reading a sum tsq line ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWLPF == "6")
     /* ** next sentence ***/
  else
     /* ************************************************************/
     /* *** read the summary tsq by relative record number  and ****/
     /* *** move to ws layout to move specific flds to map      ****/
     /* *** note: parm #2 index computed from summary ptr +     ****/
     /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
     /* *** note: check for blank line to skip setting up subkey****/
     /* ************************************************************/
    IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWSIX + IN0IWIX1 - 1;
    call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0IWXP2.IN0IWXRC == 0)
      IN0IW03.IN0IWSL3 = IN0IWXP1.IN0IWXDL;
      set IN0IM030.IN0IMSEL[IN0IWIX1] initialAttributes;
      if (IN0IW03.IN0IWSRT == "B")
         /* ** next sentence ***/
      else
        if (IN0IWX1.IN0IWIX1 == 1)
          IN0IW03.IN0IWSSD = IN0IW03.XSDCD;
          IN0IW03.IN0IWSPG = IN0IW03.XPGCD;
          IN0IW03.IN0IWSUM = IN0IW03.XUMCD;
        end
      end
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      exit stack;
    end
  end

   /* ************************************************************/
   /* *** setup the formatted map line                        ****/
   /* ************************************************************/

  if (IN0IW03.IN0IWSRT == "B")
    set IN0IM030.IN0IMSEL[IN0IWIX1] skip, invisible;
    set IN0IM031.XSDCD skip, invisible;
    set IN0IM031.XPGCD skip, invisible;
    set IN0IM031.IN0IMWPC skip, invisible;
    set IN0IM031.XUMCD skip, invisible;
    set IN0IM031.IN0IMSAV skip, invisible;
    set IN0IM031.IN0IMSOH skip, invisible;
    set IN0IM031.IN0IMSRS skip, invisible;
    set IN0IM031.IN0IMSSE skip, invisible;
  else
    set IN0IM031.XSDCD initialAttributes;
    set IN0IM031.XPGCD initialAttributes;
    set IN0IM031.IN0IMWPC initialAttributes;
    set IN0IM031.XUMCD initialAttributes;
    set IN0IM031.IN0IMSAV initialAttributes;
    set IN0IM031.IN0IMSOH initialAttributes;
    set IN0IM031.IN0IMSRS initialAttributes;
    set IN0IM031.IN0IMSSE initialAttributes;
    IN0IM031.XSDCD = IN0IW03.XSDCD;
    IN0IM031.XPGCD = IN0IW03.XPGCD;
    IN0IM031.IN0IMWPC = IN0IW03.IN0IWWPC;
    IN0IM031.XUMCD = IN0IW03.XUMCD;
    IN0IM031.IN0IMSAV = IN0IW03.IN0IWSAV;
    IN0IM031.IN0IMSOH = IN0IW03.IN0IWSOH;
    IN0IM031.IN0IMSRS = IN0IW03.IN0IWSRS;
    IN0IM031.IN0IMSSE = IN0IW03.IN0IWSSE;
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;


  display IN0IM031 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0I321

// IN0I322 - display det float
Function IN0I322()


  IN0IWX1.XXXMODID = "322";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number  and ****/
   /* *** move it to the entire map data line                 ****/
   /* *** note: parm #2 index computed from summary ptr +     ****/
   /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWDIX + IN0IWIX1 - 1;

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    IN0IW03.IN0IWDL3 = IN0IWXP1.IN0IWXDL;
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** set select fld on all (detail map) lines ASKIP,DARK ****/
   /* ************************************************************/

  set IN0IM030.IN0IMSEL[IN0IWIX1] skip, invisible;

   /* ************************************************************/
   /* *** if first line: determine more data msg (if any)     ****/
   /* ***                and/or save subkey values            ****/
   /* *** note: check for blank line to prevent overlay of    ****/
   /* ***       msg and subkey setup                          ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWIX1 == 1)
    IN0IW03.IN0IWSL3 = IN0IW03.IN0IWDL3;
    if (IN0IW03.IN0IWSRT == "B")
       /* ** next sentence ***/
    else
      if (IN0IW03.XSDCD == IN0IW03.IN0IWDSD
       && IN0IW03.XPGCD == IN0IW03.IN0IWDPG
       && IN0IW03.XUMCD == IN0IW03.IN0IWDUM)
        if (converseVar.eventKey is pf7)
          converseLib.validationFailed(0034); /* <--- more data on next scrn*/
        else
          converseLib.validationFailed(0035); /* <--- more data on prev scrn*/
        end
      else
        IN0IW03.IN0IWDSD = IN0IW03.XSDCD;
        IN0IW03.IN0IWDPG = IN0IW03.XPGCD;
        IN0IW03.IN0IWDUM = IN0IW03.XUMCD;
      end
      if (converseVar.eventKey is pf7)
        IN0IWXP2.IN0IWXIX = IN0IWXP2.IN0IWXIX - IN0IWX1.IN0IWLPP;
        if (IN0IWXP2.IN0IWXIX <= 0)
          exit stack;
        end
      else
        IN0IWXP2.IN0IWXIX = IN0IWXP2.IN0IWXIX + IN0IWX1.IN0IWLPP;
        if (IN0IWXP2.IN0IWXIX >= IN0IWX1.IN0IWDML)
          exit stack;
        end
      end
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IW03.IN0IWSL3 = IN0IWXP1.IN0IWXDL;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        exit stack;
      end
      if (IN0IW03.XSDCD == IN0IW03.IN0IWDSD
       && IN0IW03.XPGCD == IN0IW03.IN0IWDPG
       && IN0IW03.XUMCD == IN0IW03.IN0IWDUM)
        if (converseVar.eventKey is pf7)
          converseLib.validationFailed(0035); /* <--- more data on prev scrn*/
        else
          converseLib.validationFailed(0034); /* <--- more data on next scrn*/
        end
      end
      IN0IW03.IN0IWSL3 = IN0IW03.IN0IWDL3;
      exit stack;
    end
  end

   /* ************************************************************/
   /* *** if record type is summary & not first line:         ****/
   /* *** move data to sum ws & ezeflo to use sum display     ****/
   /* *** note: won't use=for multiple groups of data/scrn    ****/
   /* ************************************************************/

  if (IN0IW03.IN0IWDRT == "S")
    IN0IW03.IN0IWSL3 = IN0IW03.IN0IWDL3;
    exit stack;
  end

   /* ************************************************************/
   /* *** setup detail line...                                ****/
   /* *** if record type is msg or blank: use blanks or zeroes****/
   /* *** note: setup msg # if msg record type                ****/
   /* ************************************************************/

  if (IN0IW03.IN0IWDRT == "B"
   || IN0IW03.IN0IWDRT == "M")
    if (IN0IW03.IN0IWDRT == "M")
      converseLib.validationFailed(0034); /* <--- more data on next scrn*/
    end
    set IN0IM032.SY4IDDSC skip, invisible;
    set IN0IM032.IN0IMDAV skip, invisible;
    set IN0IM032.IN0IMDRS skip, invisible;
    set IN0IM032.IN0IMDOH skip, invisible;
    set IN0IM032.IN0IMDSE skip, invisible;
  else
    IN0IM032.SY4IDDSC = IN0IW03.SY4IDDSC;
    IN0IM032.IN0IMDAV = IN0IW03.IN0IWDAV;
    IN0IM032.IN0IMDRS = IN0IW03.IN0IWDRS;
    IN0IM032.IN0IMDOH = IN0IW03.IN0IWDOH;
    IN0IM032.IN0IMDSE = IN0IW03.IN0IWDSE;
    set IN0IM032.SY4IDDSC initialAttributes;
    set IN0IM032.IN0IMDAV initialAttributes;
    set IN0IM032.IN0IMDRS initialAttributes;
    set IN0IM032.IN0IMDOH initialAttributes;
    set IN0IM032.IN0IMDSE initialAttributes;
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;


  display IN0IM032 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0I322

// IN0I410 - init. for IN0I420
Function IN0I410()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSES == "Y")
    converseLib.clearScreen();
    set IN0IM040 empty;
  else
    converseLib.clearScreen();
    set IN0IM040 initial;
  end
  set IN0IM041 initial;
  IN0IM040.XXXERRID = "IN0I420 ";
  IN0IM040.XXXMAPNM = "IN0IM040";
  IN0IWX1.IN0IWMAP = "IN0IM040";
  IN0IM040.XXXTITLE = "INVENTORY INQUIRY  (STYLE)";
  IN0IM040.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0IM040.XXXRVNBR = IN0IWX1.XXXRVNBR;
  IN0ISG4(); /* <=== setup map key fields*/
  set IN0IW04 empty;
  set IN0IWXP1 empty;
  set IN0IWXP2 empty;
  set IN2REC empty;
  set INGREC empty;
  IN0ISX4(); /* <=== purge tsq*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXLL = 35;
  IN0IW04.IN0IWNWH = 7;

   /* ************************************************************/
   /* *** set selection field ASKIP,DARK                      ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;
  while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
    set IN0IM040.IN0IMSWH[IN0IWIX1] skip, invisible;
    IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end IN0I410

// IN0I420 - converse & edits
Function IN0I420()


   /* ************************************************************/
   /* *** check ws for masseages to be displayed              ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWMNO > 0)
    if (IN0IWX1.IN0IWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0IWX1.IN0IWMNO);
    end
    IN0IWX1.IN0IWMNO = 0;
  end



  converse IN0IM040 ;


  IN0IWX1.XXXMODID = "420";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0IM040.CATOAP > " ")
    COMMAREA.CATOAP = IN0IM040.CATOAP;
    COMMAREA.CAITEM = IN0IM040.CAITEM;
    IN0ISX4(); /* <=== purge tsq*/
    XSEXIT();
    IN0IST4(); /* <=== reset scrn*/
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM040.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0IM040.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "N";
  IN0IM040.VAGen_EZEMSG = " ";
  IN0IM040.XXXERRID = "IN0I420 ";
  set IN0IM040.CATOAP initialAttributes;
  set IN0IM040.CAITEM initialAttributes;
  set IN0IM040.XGPCD cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0IM040.XGPCD initialAttributes;
  set IN0IM040.SY1STNBR initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0IM040.CAITEM > " ")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0IM040.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered             ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0IWX1.IN0IWIX1 = 1;
    while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
      if (IN0IM040.IN0IMSWH[IN0IWIX1] > " ")
        IN0IS4A(); /* <--- process warehouse selection*/
        exit stack;
      else
        IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
      end
    end
    IN0ISH4(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: dispaly error msg           ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;
  while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
    if (IN0IM040.IN0IMSWH[IN0IWIX1] > " ")
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "C";
      IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0033); /* <--- use enter msg*/
      exit stack;
    else
      IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    IN0ISJ4(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    IN0ISK4(); /* <=== PF8 processing*/
    exit stack;
  end


  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    exit stack;
  end

  IN0IWX1.XXXMODID = "420";

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    IN0ISX4(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level (in FLOW)      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    IN0ISX4(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    IN0ISX4(); /* <=== purge tsq*/
    XSPF4();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    IN0ISX4(); /* <=== purge tsq*/
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0I-40";
    IN0ISX4(); /* <=== purge tsq*/
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    IN0ISX4(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "G";
  IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0I420

// IN0I421 - display sum float
Function IN0I421()


  IN0IWX1.XXXMODID = "421";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number  and ****/
   /* *** move it to the map data line                        ****/
   /* *** note: parm #2 index computed from summary ptr +     ****/
   /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWIX1 - 1;

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    IN0IW04.IN0IWSL4 = IN0IWXP1.IN0IWXDL;
  else
    if (IN0IWXP2.IN0IWXRC == 4)
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0013); /* <--- no records in temp storage*/
      exit stack;
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      exit stack;
    end
  end

   /* ************************************************************/
   /* *** setup the map formatted line                        ****/
   /* ************************************************************/

  if (IN0IW04.IN0IWSRT == "B")
    set IN0IM040.IN0IMSWH[IN0IWIX1] skip, invisible;
    set IN0IM041.SY2CLRID skip, invisible;
    set IN0IM041.XDMCD skip, invisible;
    set IN0IM041.SY2CLRAB skip, invisible;
    set IN0IM041.XQACD skip, invisible;
    IN0IWX1.IN0IWCTR = 1;
    while (IN0IWX1.IN0IWCTR <= IN0IW04.IN0IWNWH)
      set IN0IM041.XWHCD[IN0IWCTR] skip, invisible;
      IN0IWX1.IN0IWCTR = IN0IWX1.IN0IWCTR + 1;
    end
  else
    set IN0IM040.IN0IMSWH[IN0IWIX1] initialAttributes;
    set IN0IM041.SY2CLRID initialAttributes;
    set IN0IM041.XDMCD initialAttributes;
    set IN0IM041.SY2CLRAB initialAttributes;
    set IN0IM041.XQACD initialAttributes;
    IN0IM041.SY2CLRID = IN0IW04.SY2CLRID;
    IN0IM041.XDMCD = IN0IW04.XDMCD;
    IN0IM041.SY2CLRAB = IN0IW04.SY2CLRAB;
    IN0IM041.XQACD = IN0IW04.XQACD;
    IN0IWX1.IN0IWCTR = 1;
    while (IN0IWX1.IN0IWCTR <= IN0IW04.IN0IWNWH)
      IN0IM041.XWHCD[IN0IWCTR] = IN0IW04.XWHCD[IN0IWCTR];
      set IN0IM041.XWHCD[IN0IWCTR] initialAttributes;
      IN0IWX1.IN0IWCTR = IN0IWX1.IN0IWCTR + 1;
    end
    if (IN0IWX1.IN0IWIX1 == 1)
      IN0IW04.IN0IWSWH = IN0IW04.XWHCD[1];
      IN0IW04.IN0IWSCL = IN0IW04.SY2CLRID;
      IN0IW04.IN0IWSDM = IN0IW04.XDMCD;
      IN0IW04.IN0IWSQA = IN0IW04.XQACD;
    end
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;


  display IN0IM041 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0I421

// IN0I510 - init. for IN0I520
Function IN0I510()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSES == "Y")
    converseLib.clearScreen();
    set IN0IM050 empty;
  else
    converseLib.clearScreen();
    set IN0IM050 initial;
  end
  set IN0IM051 initial;
  set IN0IM052 initial;
  IN0IM050.XXXERRID = "IN0I520 ";
  IN0IM050.XXXMAPNM = "IN0IM050";
  IN0IWX1.IN0IWMAP = "IN0IM050";
  IN0IM050.XXXTITLE = "INVENTORY INQUIRY (OWNER GROUP)";
  IN0IM050.IN0I-ZFC-HDR = IN0I-WRK-HDR;
  IN0IM050.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0IM050.XXXRVNBR = IN0IWX1.XXXRVNBR;
  IN0ISG5(); /* <=== setup map key fields*/
  set IN0IW05 empty;
  set IN0IWXP1 empty;
  set IN0IWXP2 empty;
  set IN9REC empty;
  set INGREC empty;
  set SYPREC empty;
  IN0ISX5(); /* <=== purge tsqs*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXLL = 53;

   /* ************************************************************/
   /* *** set selection field ASKIP,DARK                      ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;
  while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
    set IN0IM050.IN0IMSEL[IN0IWIX1] skip, invisible;
    IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end IN0I510

// IN0I520 - converse & edits
Function IN0I520()


   /* ************************************************************/
   /* *** check ws for messages to be displayed               ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWMNO > 0)
    if (IN0IWX1.IN0IWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IN0IWX1.IN0IWMNO);
    end
    IN0IWX1.IN0IWMNO = 0;
  end



  converse IN0IM050 ;


  IN0IWX1.XXXMODID = "520";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0IM050.CATOAP > " ")
    COMMAREA.CATOAP = IN0IM050.CATOAP;
    COMMAREA.CAITEM = IN0IM050.CAITEM;
    IN0ISX5(); /* <=== purge tsq*/
    XSEXIT();
    IN0IST5(); /* <=== reset scrn*/
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM050.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0IM050.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "N";
  IN0IM050.VAGen_EZEMSG = " ";
  IN0IM050.XXXERRID = "IN0I520 ";
  set IN0IM050.CATOAP initialAttributes;
  set IN0IM050.CAITEM initialAttributes;
  set IN0IM050.XWHCD cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set IN0IM050.XWHCD initialAttributes;
  set IN0IM050.XGPCD initialAttributes;
  set IN0IM050.SY1STNBR initialAttributes;
  set IN0IM050.SY2CLRID initialAttributes;
  set IN0IM050.XDMCD initialAttributes;

   /* ************************************************************/
   /* ***  if more than one style code inquiry per wharehouse,****/
   /* ***  set the cursor to the style code field after the   ****/
   /* ***  first inquiry.    Change Request:  ZAK             ****/
   /* ***             Change Programmer:  RVAKEL  09/11/90    ****/
   /* ************************************************************/

  if (IN0IM050.XWHCD > "  ")
    set IN0IM050.SY1STNBR cursor;
  end
   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0IM050.CAITEM > " ")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0005); /* <--- option required msg*/
    set IN0IM050.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    IN0IWX1.IN0IWIX1 = 1;
    while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
      if (IN0IM050.IN0IMSEL[IN0IWIX1] > " ")
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "C";
        IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0020); /* <--- use pf6 msg*/
        exit stack;
      else
        IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
      end
    end
    IN0ISH5(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* *** note: check first for need to save selected subkey  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (IN0IWX1.IN0IWLPF == "E")
      IN0IWX1.IN0IWIX1 = 1;
      while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
        if (IN0IM050.IN0IMSEL[IN0IWIX1] > " ")
          IN0IS5A(); /* <=== process selection*/
          IN0IM050.IN0IMSEL[IN0IWIX1] = " ";
          IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
        else
          IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
        end
      end
    end
    IN0ISI5(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: dispaly error msg           ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;
  while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
    if (IN0IM050.IN0IMSEL[IN0IWIX1] > " ")
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "D";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0020); /* <--- use pf6 msg*/
      exit stack;
    else
      IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    IN0ISJ5(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    IN0ISK5(); /* <=== PF8 processing*/
    exit stack;
  end


  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    exit stack;
  end

  IN0IWX1.XXXMODID = "520";

   /* ************************************************************/
   /* *** if one of the following: go to flow for decisions   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    IN0ISX5(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level (in FLOW)      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    IN0ISX5(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    IN0ISX5(); /* <=== purge tsq*/
    XSPF4();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM050.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory main menu                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    IN0ISX5(); /* <=== purge tsq*/
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM050.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0I-50";
    IN0ISX5(); /* <=== purge tsq*/
    XSEXIT();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "G";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0);
    IN0IM050.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    IN0ISX5(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "H";
  IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
  converseLib.validationFailed(0007); /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end IN0I520

// IN0I521 - display sum float
Function IN0I521()


  IN0IWX1.XXXMODID = "521";

   /* ************************************************************/
   /* *** if last pfkey was PF6 (it should be ENTER):         ****/
   /* *** the detail display module is using this sum module  ****/
   /* *** to put the summary line it read on the screen       ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWLPF == "6")
     /* ** next sentence ***/
  else
     /* ************************************************************/
     /* *** read the summary tsq by relative record number  and ****/
     /* *** move to ws layout to move specific flds to map      ****/
     /* *** note: parm #2 index computed from summary ptr +     ****/
     /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
     /* ************************************************************/
    IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWSIX + IN0IWIX1 - 1;
    call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0IWXP2.IN0IWXRC == 0)
      IN0IW05.IN0IWSL5 = IN0IWXP1.IN0IWXDL;
      set IN0IM050.IN0IMSEL[IN0IWIX1] initialAttributes;
      if (IN0IW05.IN0IWSRT == "B")
         /* ** next sentence ***/
      else
        if (IN0IWX1.IN0IWIX1 == 1)
          IN0IW05.IN0IWSSD = IN0IW05.XSDCD;
          IN0IW05.IN0IWSPG = IN0IW05.XPGCD;
          IN0IW05.IN0IWSUM = IN0IW05.XUMCD;
          IN0IW05.IN0IWSOW = IN0IW05.XOWCD;
        end
      end
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      exit stack;
    end
  end

   /* ************************************************************/
   /* *** setup the formatted map line                        ****/
   /* ************************************************************/

  if (IN0IW05.IN0IWSRT == "B")
    set IN0IM050.IN0IMSEL[IN0IWIX1] skip, invisible;
    set IN0IM051.XOWCD skip, invisible;
    set IN0IM051.XSDCD skip, invisible;
    set IN0IM051.XPGCD skip, invisible;
    set IN0IM051.XUMCD skip, invisible;
    set IN0IM051.IN0IMWPC skip, invisible;
    set IN0IM051.IN0IMSAV skip, invisible;
    set IN0IM051.IN0IMSOH skip, invisible;
    set IN0IM051.IN0IMSRS skip, invisible;
    set IN0IM051.IN0IMSSE skip, invisible;
  else
    set IN0IM051.XOWCD initialAttributes;
    set IN0IM051.XSDCD initialAttributes;
    set IN0IM051.XPGCD initialAttributes;
    set IN0IM051.XUMCD initialAttributes;
    set IN0IM051.IN0IMWPC initialAttributes;
    set IN0IM051.IN0IMSAV initialAttributes;
    set IN0IM051.IN0IMSOH initialAttributes;
    set IN0IM051.IN0IMSRS initialAttributes;
    set IN0IM051.IN0IMSSE initialAttributes;
    IN0IM051.XOWCD = IN0IW05.XOWCD;
    IN0IM051.XSDCD = IN0IW05.XSDCD;
    IN0IM051.XPGCD = IN0IW05.XPGCD;
    IN0IM051.XUMCD = IN0IW05.XUMCD;
    IN0IM051.IN0IMWPC = IN0IW05.IN0IWWPC;
    IN0IM051.IN0IMSAV = IN0IW05.IN0IWSAV;
    IN0IM051.IN0IMSOH = IN0IW05.IN0IWSOH;
    IN0IM051.IN0IMSRS = IN0IW05.IN0IWSRS;
    IN0IM051.IN0IMSSE = IN0IW05.IN0IWSSE;
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;


  display IN0IM051 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0I521

// IN0I522 - display det float
Function IN0I522()


  IN0IWX1.XXXMODID = "522";

   /* ************************************************************/
   /* *** read the detail tsq by relative record number  and ****/
   /* *** move it to the entire map data line                 ****/
   /* *** note: parm #2 index computed from summary ptr +     ****/
   /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWDIX + IN0IWIX1 - 1;

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    IN0IW05.IN0IWDL5 = IN0IWXP1.IN0IWXDL;
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** set select fld on all (detail map) lines ASKIP,DARK ****/
   /* ************************************************************/

  set IN0IM050.IN0IMSEL[IN0IWIX1] skip, invisible;

   /* ************************************************************/
   /* *** if first line: determine more data msg (if any)     ****/
   /* ***                and/or save subkey values            ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWIX1 == 1)
    IN0IW05.IN0IWSL5 = IN0IW05.IN0IWDL5;
    if (IN0IW05.IN0IWSRT == "B")
       /* ** next sentence ***/
    else
      if (IN0IW05.XSDCD == IN0IW05.IN0IWDSD
       && IN0IW05.XPGCD == IN0IW05.IN0IWDPG
       && IN0IW05.XUMCD == IN0IW05.IN0IWDUM
       && IN0IW05.XOWCD == IN0IW05.IN0IWDOW)
        if (converseVar.eventKey is pf7)
          converseLib.validationFailed(0034); /* <--- more data on next scrn*/
        else
          converseLib.validationFailed(0035); /* <--- more data on prev scrn*/
        end
      else
        IN0IW05.IN0IWDSD = IN0IW05.XSDCD;
        IN0IW05.IN0IWDPG = IN0IW05.XPGCD;
        IN0IW05.IN0IWDUM = IN0IW05.XUMCD;
        IN0IW05.IN0IWDOW = IN0IW05.XOWCD;
      end
      if (converseVar.eventKey is pf7)
        IN0IWXP2.IN0IWXIX = IN0IWXP2.IN0IWXIX - IN0IWX1.IN0IWLPP;
        if (IN0IWXP2.IN0IWXIX <= 0)
          exit stack;
        end
      else
        IN0IWXP2.IN0IWXIX = IN0IWXP2.IN0IWXIX + IN0IWX1.IN0IWLPP;
        if (IN0IWXP2.IN0IWXIX >= IN0IWX1.IN0IWDML)
          exit stack;
        end
      end
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IW05.IN0IWSL5 = IN0IWXP1.IN0IWXDL;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        exit stack;
      end
      if (IN0IW05.XSDCD == IN0IW05.IN0IWDSD
       && IN0IW05.XPGCD == IN0IW05.IN0IWDPG
       && IN0IW05.XUMCD == IN0IW05.IN0IWDUM
       && IN0IW05.XOWCD == IN0IW05.IN0IWDOW)
        if (converseVar.eventKey is pf7)
          converseLib.validationFailed(0035); /* <--- more data on prev scrn*/
        else
          converseLib.validationFailed(0034); /* <--- more data on next scrn*/
        end
      end
      IN0IW05.IN0IWSL5 = IN0IW05.IN0IWDL5;
      exit stack;
    end
  end

   /* ************************************************************/
   /* *** if record type is summary & not first line:         ****/
   /* *** move data to sum ws & ezeflo to use sum display     ****/
   /* *** note: won't use=for multiple groups of data/scrn    ****/
   /* ************************************************************/

  if (IN0IW05.IN0IWDRT == "S")
    IN0IW05.IN0IWSL5 = IN0IW05.IN0IWDL5;
    exit stack;
  end

   /* ************************************************************/
   /* *** setup detail line...                                ****/
   /* *** if record type is msg or blank: use blanks or zeroes****/
   /* *** note: setup msg # if msg record type                ****/
   /* ************************************************************/

  if (IN0IW05.IN0IWDRT == "B"
   || IN0IW05.IN0IWDRT == "M")
    if (IN0IW05.IN0IWDRT == "M")
      converseLib.validationFailed(0034); /* <--- more data on next scrn*/
    end
    set IN0IM052.SY4IDDSC skip, invisible;
    set IN0IM052.IN0IMDAV skip, invisible;
    set IN0IM052.IN0IMDRS skip, invisible;
    set IN0IM052.IN0IMDOH skip, invisible;
    set IN0IM052.IN0IMDSE skip, invisible;
  else
    IN0IM052.SY4IDDSC = IN0IW05.SY4IDDSC;
    IN0IM052.IN0IMDAV = IN0IW05.IN0IWDAV;
    IN0IM052.IN0IMDRS = IN0IW05.IN0IWDRS;
    IN0IM052.IN0IMDOH = IN0IW05.IN0IWDOH;
    IN0IM052.IN0IMDSE = IN0IW05.IN0IWDSE;
    set IN0IM052.SY4IDDSC initialAttributes;
    set IN0IM052.IN0IMDAV initialAttributes;
    set IN0IM052.IN0IMDRS initialAttributes;
    set IN0IM052.IN0IMDOH initialAttributes;
    set IN0IM052.IN0IMDSE initialAttributes;
  end

   /* ************************************************************/
   /* *** increment the while / line index                    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;


  display IN0IM052 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end IN0I522

// Check IN8020 return code
Function IN0IS-IN8020-ERRS()
   /*  */
   /* Check IN8020 return codes.  All return codes except zero (no*/
   /* errors) are posted.  A screen message for DB2 deadlock*/
   /* (8000).*/
   /*  */

  if (INGREC.ING-RETURN-CD == 8000) /* DB2 deadlock*/
    converseLib.validationFailed(136);
    return;
  else
    if (INGREC.ING-RETURN-CD <= 2300) /* Edit error or row not found*/
      converseLib.validationFailed(169);
      return;
    end
  end

  TA1REC.TA1-GROUP = INGREC.TA1-GROUP;
  TAEREC.SQLCAREC = INGREC.SQLCAREC;

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TA1REC.TA1TBLKE = INGREC.ING-INPUT-DATA; /* IN8020 parameters*/
  TA1REC.TA1FUNC = "POST";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end IN0IS-IN8020-ERRS

// shd & spc rec access
Function IN0IS1D()


  IN0IWX1.XXXMODID = "S1D";

   /* ************************************************************/
   /* *** if spec diff in table & active: put desc. on map    ****/
   /* ************************************************************/
  set PC2REC empty;
  PC2REC.XGPCD = IN0IM010.XGPCD;
  PC2REC.PC2INSEG = IN0IM010.XSDCD;
  IN0ISXW();
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
      IN0IM010.XSDDESC = PC2REC.PC2SEGDE;
    else
      IN0IM010.XSDDESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "F";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XSDCD cursor, bold;
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0IM010.XSDDESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "G";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- severe error msg*/
      set IN0IM010.XSDCD cursor, bold;
      return;
    else
      return;
    end
  end


   /* ************************************************************/
   /* *** use shade table to get data for screen              ****/
   /* ************************************************************/

  IN0IWX1.XXXMODID = "S1D";

   /* ************************************************************/
   /* *** if shade in table & active: put desc. on map        ****/
   /* ************************************************************/

  if (IN0IM010.XSACD in XSATBL.XSACD)
    if (XSATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM010.XSADESC = XSATBL.XSADESC[sysVar.arrayIndex];
    else
      IN0IM010.XSADESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "H";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XSACD cursor, bold;
      return;
    end
  else
    IN0IM010.XSADESC = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "I";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe error msg*/
    set IN0IM010.XSACD cursor, bold;
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS1D

// checking for negative inv qtys
Function IN0IS24()
  IN0IW02.IN0IWZAV = IN9REC.IN1ONHND[IN0IWIX1];
  if (IN9REC.IN1RSRVD[IN0IWIX1] < 0)
    IN0IW02.IN0IWZAV = IN0IW02.IN0IWZAV + IN9REC.IN1RSRVD[IN0IWIX1];
  else
    IN0IW02.IN0IWZAV = IN0IW02.IN0IWZAV - IN9REC.IN1RSRVD[IN0IWIX1];
  end
  if (IN9REC.IN1ALOCD[IN0IWIX1] < 0)
    IN0IW02.IN0IWZAV = IN0IW02.IN0IWZAV + IN9REC.IN1ALOCD[IN0IWIX1];
  else
    IN0IW02.IN0IWZAV = IN0IW02.IN0IWZAV - IN9REC.IN1ALOCD[IN0IWIX1];
  end
  if (IN9REC.IN1STASD[IN0IWIX1] < 0)
    IN0IW02.IN0IWZAV = IN0IW02.IN0IWZAV + IN9REC.IN1STASD[IN0IWIX1];
  else
    IN0IW02.IN0IWZAV = IN0IW02.IN0IWZAV - IN9REC.IN1STASD[IN0IWIX1];
  end
  if (IN9REC.IN1XFERO[IN0IWIX1] < 0)
    IN0IW02.IN0IWZAV = IN0IW02.IN0IWZAV + IN9REC.IN1XFERO[IN0IWIX1];
  else
    IN0IW02.IN0IWZAV = IN0IW02.IN0IWZAV - IN9REC.IN1XFERO[IN0IWIX1];
  end
end // end IN0IS24

// setup sum tsq line(s)
Function IN0IS2G()


  IN0IWX1.XXXMODID = "S2G";

   /* ************************************************************/
   /* *** setup summary tsq line(s)                           ****/
   /* ************************************************************/

  if (IN9REC.ZZZCHGCT[IN0IWIX1] != 0
   || IN9REC.IN1ONHND[IN0IWIX1] != 0
   || IN9REC.IN1ALOCD[IN0IWIX1] != 0
   || IN9REC.IN1STASD[IN0IWIX1] != 0
   || IN9REC.IN1RSRVD[IN0IWIX1] != 0
   || IN9REC.IN1XFERO[IN0IWIX1] != 0
   || IN9REC.IN1XFERI[IN0IWIX1] != 0
   || IN9REC.IN1EOMOH[IN0IWIX1] != 0)
    if (SYPREC.SY4IDDSC[IN0IWIX1] > " ")
      IN0IW02.SY4IDDSC = SYPREC.SY4IDDSC[IN0IWIX1];
    else
      IN0IW02.SY4IDDSC = "*****";
    end
    IN0IW02.IN0IWSRT = "S";
    IN0IS24();
    IN0IW02.IN0IWZAL = IN9REC.IN1ALOCD[IN0IWIX1];
    IN0IW02.IN0IWZRS = IN9REC.IN1RSRVD[IN0IWIX1];
    IN0IW02.IN0IWZSE = IN9REC.IN1STASD[IN0IWIX1];
    IN0IW02.IN0IWZXO = IN9REC.IN1XFERO[IN0IWIX1];
    IN0IW02.IN0IWZOH = IN9REC.IN1ONHND[IN0IWIX1];
    IN0IW02.IN0IWZXI = IN9REC.IN1XFERI[IN0IWIX1];
     /* ************************************************************/
     /* *** write the entire ws line to the tsq                 ****/
     /* ************************************************************/
    IN0IWXP1.IN0IWXDL = IN0IW02.IN0IWSL2;
    call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0IWXP2.IN0IWXRC == 0)
      IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "B";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS2G

// select processing
Function IN0IS3A()


  IN0IWX1.XXXMODID = "S3A";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number for  ****/
   /* *** the current line & move it to the ws data line      ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "INSI";
  IN0IWXP2.IN0IWXFC = "R";

  IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWIX1 - 1;

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    IN0IW03.IN0IWSL3 = IN0IWXP1.IN0IWXDL;
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** if not blank: save this line's summary subkey data  ****/
   /* ************************************************************/

  if (IN0IW03.IN0IWSRT == "B")
    /* ** next sentence ***/
  else
    IN0IW03.IN0IWSSD = IN0IW03.XSDCD;
    IN0IW03.IN0IWSPG = IN0IW03.XPGCD;
    IN0IW03.IN0IWSUM = IN0IW03.XUMCD;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS3A

// setup format/sum tsq line(s)
Function IN0IS3G()


   /* ************************************************************/
   /* *** setup summary tsq line(s) (if no read next error)   ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

  IN0IWX1.XXXMODID = "S3G";

   /* ************************************************************/
   /* *** if no more db2 rows (sqlcode = +100):               ****/
   /* *** write blank lines to tsq until page full            ****/
   /* *** page full = max lines/lines per pg has 0 remainder  ****/
   /* *** note: index set to 01 when page full                ****/
   /* ************************************************************/

  if (IN0IWX1.VAGen_SQLCODE == +100)
    IN0IWXP1.IN0IWXDL = " ";
    IN0IWXP1.IN0IWXRT = "B";
    IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;
    while (IN0IWX1.IN0IWREM != 0)
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "A";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;
    end
    IN0IWX1.IN0IWSIX = 01;
    return;
  end

   /* ************************************************************/
   /* *** setup the ws formatted line                         ****/
   /* ************************************************************/

  IN0IW03.IN0IWSRT = "S";

  IN0IW03.XSDCD = IN9REC.XSDCD;
  IN0IW03.XPGCD = IN9REC.XPGCD;
  IN0IW03.XUMCD = IN9REC.XUMCD;

   /* *** calculate actual price if product uom ne inventory uom*/

  if (IN9REC.XUMCD in XUMTBL.XUMCD)
    IN0IW03.IN0IWIUM = XUMTBL.XUMCD[sysVar.arrayIndex];
    IN0IW03.IN0IWICF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
  else
    IN0IW03.IN0IWIUM = "  ";
    IN0IW03.IN0IWICF = 0;
  end

  IN0IW03.IN0IWWPC = IN0IW03.IN0IWSPC;

  if (IN0IW03.IN0IWPUM != "  ")
    if (IN0IW03.IN0IWPUM != IN0IW03.IN0IWIUM)
      IN0IW03.IN0IWWPC = IN0IW03.IN0IWWPC / IN0IW03.IN0IWPCF;
      IN0IW03.IN0IWWPC = IN0IW03.IN0IWWPC * IN0IW03.IN0IWICF;
    end
  end

  IN0IW03.IN0IWSOH = IN9REC.IN9TSZOH;
  IN0IW03.IN0IWSSE = IN9REC.IN9TSZSA;

  if (IN9REC.IN9TSZRS < 0)
    IN0IW03.IN0IWSAV = IN9REC.IN9TSZOH + IN9REC.IN9TSZRS;
  else
    IN0IW03.IN0IWSAV = IN9REC.IN9TSZOH - IN9REC.IN9TSZRS;
  end

  if (IN9REC.IN9TSZAL < 0)
    IN0IW03.IN0IWSAV = IN0IW03.IN0IWSAV + IN9REC.IN9TSZAL;
  else
    IN0IW03.IN0IWSAV = IN0IW03.IN0IWSAV - IN9REC.IN9TSZAL;
  end

  if (IN9REC.IN9TSZSA < 0)
    IN0IW03.IN0IWSAV = IN0IW03.IN0IWSAV + IN9REC.IN9TSZSA;
  else
    IN0IW03.IN0IWSAV = IN0IW03.IN0IWSAV - IN9REC.IN9TSZSA;
  end

  if (IN9REC.IN9TSZXO < 0)
    IN0IW03.IN0IWSAV = IN0IW03.IN0IWSAV - IN9REC.IN9TSZXO;
  else
    IN0IW03.IN0IWSAV = IN0IW03.IN0IWSAV - IN9REC.IN9TSZXO;
  end

  IN0IW03.IN0IWSRS = IN9REC.IN9TSZRS + IN9REC.IN9TSZAL;
  IN0IW03.IN0IWSRS = IN0IW03.IN0IWSRS + IN9REC.IN9TSZXO;

   /* ************************************************************/
   /* *** write the entire ws line to the tsq                 ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXDL = IN0IW03.IN0IWSL3;

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS3G

// setup det/format tsq line(s)
Function IN0IS3H()


   /* ************************************************************/
   /* *** setup detail tsq line(s) (if no read next error)    ****/
   /* *** note: if no more db2 rows (sqlcode = +100): ezertn  ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

  if (IN0IWX1.VAGen_SQLCODE == +100)
    IN0IWX1.IN0IWDIX = 01;
    return;
  end

  IN0IWX1.XXXMODID = "S3H";

   /* ************************************************************/
   /* *** setup summary line                                  ****/
   /* ************************************************************/

  IN0IW03.IN0IWSRT = "S";

  IN0IW03.XSDCD = IN9REC.XSDCD;
  IN0IW03.XPGCD = IN9REC.XPGCD;
  IN0IW03.XUMCD = IN9REC.XUMCD;
  IN0IW03.XOWCD = IN9REC.XOWCD;

   /* *** calculate actual price if product uom ne inventory uom*/

  if (IN9REC.XUMCD in XUMTBL.XUMCD)
    IN0IW03.IN0IWIUM = XUMTBL.XUMCD[sysVar.arrayIndex];
    IN0IW03.IN0IWICF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
  else
    IN0IW03.IN0IWIUM = "  ";
    IN0IW03.IN0IWICF = 0;
  end

  IN0IW03.IN0IWWPC = IN0IW03.IN0IWSPC;

  if (IN0IW03.IN0IWPUM != "  ")
    if (IN0IW03.IN0IWPUM != IN0IW03.IN0IWIUM)
      IN0IW03.IN0IWWPC = IN0IW03.IN0IWWPC / IN0IW03.IN0IWPCF;
      IN0IW03.IN0IWWPC = IN0IW03.IN0IWWPC * IN0IW03.IN0IWICF;
    end
  end

   /* ************************************************************/
   /* *** use passed size totals                              ****/
   /* ************************************************************/

  IN0IW03.IN0IWSAV = IN9REC.IN9TSZOH - IN9REC.IN9TSZRS;
  IN0IW03.IN0IWSAV = IN0IW03.IN0IWSAV - IN9REC.IN9TSZAL;
  IN0IW03.IN0IWSAV = IN0IW03.IN0IWSAV - IN9REC.IN9TSZSA;
  IN0IW03.IN0IWSAV = IN0IW03.IN0IWSAV - IN9REC.IN9TSZXO;

  IN0IW03.IN0IWSRS = IN9REC.IN9TSZRS + IN9REC.IN9TSZAL;
  IN0IW03.IN0IWSRS = IN0IW03.IN0IWSRS + IN9REC.IN9TSZXO;

  IN0IW03.IN0IWSOH = IN9REC.IN9TSZOH;
  IN0IW03.IN0IWSSE = IN9REC.IN9TSZSA;

   /* ************************************************************/
   /* *** move the data from each of the size 'buckets' which ****/
   /* *** have any data greater than zero to the tsq          ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  while (IN0IWX1.IN0IWIX1 <= 40)
     /* ************************************************************/
     /* *** if 1st line(max lines/lines per pg remainder = 0)   ****/
     /* *** on page is next: write summary line                 ****/
     /* ************************************************************/
    IN0IWX1.IN0IWREM = IN0IWX1.IN0IWDML % IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWREM == 0)
      IN0IWXP1.IN0IWXDL = IN0IW03.IN0IWSL3;
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWDML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "A";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    if (IN9REC.ZZZCHGCT[IN0IWIX1] != 0
     || IN9REC.IN1ONHND[IN0IWIX1] != 0
     || IN9REC.IN1ALOCD[IN0IWIX1] != 0
     || IN9REC.IN1STASD[IN0IWIX1] != 0
     || IN9REC.IN1RSRVD[IN0IWIX1] != 0
     || IN9REC.IN1XFERO[IN0IWIX1] != 0
     || IN9REC.IN1XFERI[IN0IWIX1] != 0
     || IN9REC.IN1EOMOH[IN0IWIX1] != 0)
      if (SYPREC.SY4IDDSC[IN0IWIX1] > " ")
        IN0IW03.SY4IDDSC = SYPREC.SY4IDDSC[IN0IWIX1];
      else
        IN0IW03.SY4IDDSC = "*****";
      end
      IN0IW03.IN0IWDRT = "D";
      IN0IW03.IN0IWDAV = IN9REC.IN1ONHND[IN0IWIX1];
      IN0IW03.IN0IWDAV = IN0IW03.IN0IWDAV - IN9REC.IN1RSRVD[IN0IWIX1];
      IN0IW03.IN0IWDAV = IN0IW03.IN0IWDAV - IN9REC.IN1ALOCD[IN0IWIX1];
      IN0IW03.IN0IWDAV = IN0IW03.IN0IWDAV - IN9REC.IN1STASD[IN0IWIX1];
      IN0IW03.IN0IWDAV = IN0IW03.IN0IWDAV - IN9REC.IN1XFERO[IN0IWIX1];
      IN0IW03.IN0IWDSE = IN9REC.IN1STASD[IN0IWIX1];
      IN0IW03.IN0IWDRS = IN9REC.IN1RSRVD[IN0IWIX1];
      IN0IW03.IN0IWDRS = IN0IW03.IN0IWDRS + IN9REC.IN1ALOCD[IN0IWIX1];
      IN0IW03.IN0IWDRS = IN0IW03.IN0IWDRS + IN9REC.IN1XFERO[IN0IWIX1];
      IN0IW03.IN0IWDOH = IN9REC.IN1ONHND[IN0IWIX1];
      IN0IWXP1.IN0IWXDL = IN0IW03.IN0IWDL3;
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWDML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "C";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
  end

   /* ************************************************************/
   /* *** write blank lines to ws until page full             ****/
   /* *** page full = max lines/lines per pg remainder = 0    ****/
   /* ************************************************************/

  IN0IWX1.IN0IWREM = IN0IWX1.IN0IWDML % IN0IWX1.IN0IWLPP;

  while (IN0IWX1.IN0IWREM != 0)
    IN0IWXP1.IN0IWXDL = " ";
    IN0IWXP1.IN0IWXRT = "B";
    call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0IWXP2.IN0IWXRC == 0)
      IN0IWX1.IN0IWDML = IN0IWXP2.IN0IWXIX;
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "D";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0IWX1.IN0IWREM = IN0IWX1.IN0IWDML % IN0IWX1.IN0IWLPP;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS3H

// process warehouse selection
Function IN0IS4A()


  IN0IWX1.XXXMODID = "S4A";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number for  ****/
   /* *** the current line & move it to the ws data line      ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "IN4I";
  IN0IWXP2.IN0IWXFC = "R";

  IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWIX1 - 1;

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    IN0IW04.IN0IWSL4 = IN0IWXP1.IN0IWXDL;
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** warehouse selected must match one of those listed   ****/
   /* *** on the same line:  save it & other line data        ****/
   /* ************************************************************/

  IN0IWX1.IN0IWCTR = 1;

  while (IN0IWX1.IN0IWCTR <= IN0IW04.IN0IWNWH)
    if (IN0IM040.IN0IMSWH == IN0IW04.XWHCD[IN0IWCTR])
      IN0IW04.IN0IWSWH = IN0IM040.IN0IMSWH;
      IN0IW04.IN0IWSCL = IN0IW04.SY2CLRID;
      IN0IW04.IN0IWSDM = IN0IW04.XDMCD;
      IN0IW04.IN0IWSQA = IN0IW04.XQACD;
      IN0IWX1.IN0IWSXS = "Y";
      return;
    else
      IN0IWX1.IN0IWCTR = IN0IWX1.IN0IWCTR + 1;
    end
  end

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "B";
  IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
  converseLib.validationFailed(0032); /* <--- invalid warehouse code msg*/
  set IN0IM040.IN0IMSWH[IN0IWIX1] cursor, bold;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS4A

// setup whse in ws line
Function IN0IS4B()
   /* ************************************************************/
   /* *** setup warehouse in ws line (if no read next error)  ****/
   /* ************************************************************/

  IN0IWX1.XXXMODID = "S4B";
  IN0IWX1.IN0IWLOC = "IN0IS4B ";

   /* ************************************************************/
   /* *** check for more than the max no. of warehouses       ****/
   /* ************************************************************/

  if (COMMAREA.XSOCD == "42")
    if (IN2REC.XWHCD == "42")

      if (IN0IWX1.IN0IWCTR > IN0IW04.IN0IWNWH)
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- severe error msg*/
        return;
      end
      /* ************************************************************/
      /* *** use style color table to get the color abbreviation ****/
      /* *** if style record not on file bypass invitm record.*/
      /* ************************************************************/

      IN0IWX1.IN0IWERS = "N";
      if (IN2REC.XGPCD != INGREC.XGP-GPC-CD
       || IN2REC.SY1STNBR != INGREC.SY-STY-NBR
       || IN2REC.SY2CLRID != INGREC.SY-COLR-CD-ID
       || IN2REC.XDMCD != INGREC.XDM-DIM-CD)

        set INGREC empty;
        set TA1REC empty;

        INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
        INGREC.XGP-GPC-CD = IN2REC.XGPCD;
        INGREC.SY-STY-NBR = IN2REC.SY1STNBR;
        INGREC.SY-COLR-CD-ID = IN2REC.SY2CLRID;
        INGREC.XDM-DIM-CD = IN2REC.XDMCD;

        XSINS-CALL-IN8020();

        if (INGREC.ING-RETURN-CD > 0000)
          IN0IS-IN8020-ERRS();
          IN0IWX1.IN0IWERS = "X";
          converseLib.validationFailed(0);
          IN0IWX1.XXXUNQID = " ";
        end
      end

      /* ************************************************************/
      /* *** if current warehouse not = last warehouse           ****/
      /* ***    setup whse code in the next map fld & last whse  ****/
      /* ***    & increment the warehouse counter                ****/
      /* ************************************************************/

      if (IN0IWX1.IN0IWERS == "N"
       && IN2REC.XWHCD != IN0IW04.IN0IWLWH)
        IN0IW04.XWHCD[IN0IWCTR] = IN2REC.XWHCD;
        IN0IW04.IN0IWLWH = IN2REC.XWHCD;
        IN0IWX1.IN0IWCTR = IN0IWX1.IN0IWCTR + 1;
      end
    end
  else
    if (IN2REC.XWHCD != "42")

      if (IN0IWX1.IN0IWCTR > IN0IW04.IN0IWNWH)
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- severe error msg*/
        return;
      end
      /* ************************************************************/
      /* *** use style color table to get the color abbreviation ****/
      /* *** if style record not on file bypass invitm record.*/
      /* ************************************************************/

      IN0IWX1.IN0IWERS = "N";
      if (IN2REC.XGPCD != INGREC.XGP-GPC-CD
       || IN2REC.SY1STNBR != INGREC.SY-STY-NBR
       || IN2REC.SY2CLRID != INGREC.SY-COLR-CD-ID
       || IN2REC.XDMCD != INGREC.XDM-DIM-CD)

        set INGREC empty;
        set TA1REC empty;

        INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
        INGREC.XGP-GPC-CD = IN2REC.XGPCD;
        INGREC.SY-STY-NBR = IN2REC.SY1STNBR;
        INGREC.SY-COLR-CD-ID = IN2REC.SY2CLRID;
        INGREC.XDM-DIM-CD = IN2REC.XDMCD;

        XSINS-CALL-IN8020();

        if (INGREC.ING-RETURN-CD > 0000)
          IN0IS-IN8020-ERRS();
          IN0IWX1.IN0IWERS = "X";
          converseLib.validationFailed(0);
          IN0IWX1.XXXUNQID = " ";
        end
      end

      /* ************************************************************/
      /* *** if current warehouse not = last warehouse           ****/
      /* ***    setup whse code in the next map fld & last whse  ****/
      /* ***    & increment the warehouse counter                ****/
      /* ************************************************************/

      if (IN0IWX1.IN0IWERS == "N"
       && IN2REC.XWHCD != IN0IW04.IN0IWLWH)
        IN0IW04.XWHCD[IN0IWCTR] = IN2REC.XWHCD;
        IN0IW04.IN0IWLWH = IN2REC.XWHCD;
        IN0IWX1.IN0IWCTR = IN0IWX1.IN0IWCTR + 1;
      end
    end
  end

  IN0ISXO(); /* <== select next alternate row*/
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS4B

// setup format/sum tsq line(s)
Function IN0IS4G()


   /* ************************************************************/
   /* *** setup the ws formatted summary tsq line             ****/
   /* ************************************************************/

  IN0IWX1.XXXMODID = "S4G";

  IN0IW04.SY2CLRID = IN0IW04.IN0IWLCL;
  IN0IW04.XDMCD = IN0IW04.IN0IWLDM;
  IN0IW04.XQACD = IN0IW04.IN0IWLQA;
  IN0IWX1.XXXMODID = "S4G";
  IN0IW04.SY2CLRAB = INGREC.SY2CLRAB;

  while (IN0IWX1.IN0IWCTR <= IN0IW04.IN0IWNWH)
    IN0IW04.XWHCD[IN0IWCTR] = " ";
    IN0IWX1.IN0IWCTR = IN0IWX1.IN0IWCTR + 1;
  end

  IN0IWX1.IN0IWCTR = 1;

   /* ************************************************************/
   /* *** write the entire ws line to the tsq                 ****/
   /* ************************************************************/

  IN0IW04.IN0IWSRT = "S";
  IN0IWXP1.IN0IWXDL = IN0IW04.IN0IWSL4;

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** save current values as last & exit to setup whse    ****/
   /* ************************************************************/

  IN0IW04.IN0IWLCL = IN2REC.SY2CLRID;
  IN0IW04.IN0IWLDM = IN2REC.XDMCD;
  IN0IW04.IN0IWLQA = IN2REC.XQACD;
  IN0IW04.IN0IWLWH = "  ";

   /* ************************************************************/
   /* *** clear the whse values                               ****/
   /* ************************************************************/
  while (IN0IWX1.IN0IWCTR <= IN0IW04.IN0IWNWH)
    IN0IW04.XWHCD[IN0IWCTR] = " ";
    IN0IWX1.IN0IWCTR = IN0IWX1.IN0IWCTR + 1;
  end
  IN0IWX1.IN0IWCTR = 1;
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS4G

// process selection
Function IN0IS5A()


  IN0IWX1.XXXMODID = "S5A";

   /* ************************************************************/
   /* *** read the summary tsq by relative record number for  ****/
   /* *** the current line & move it to the ws data line      ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "INUI";
  IN0IWXP2.IN0IWXFC = "R";

  IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWIX1 - 1;

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    IN0IW05.IN0IWSL5 = IN0IWXP1.IN0IWXDL;
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** if not blank: save this line's summary subkey data  ****/
   /* ************************************************************/

  if (IN0IW05.IN0IWSRT == "B")
     /* ** next sentnece ***/
  else
    IN0IW05.IN0IWSOW = IN0IW05.XOWCD;
    IN0IW05.IN0IWSSD = IN0IW05.XSDCD;
    IN0IW05.IN0IWSPG = IN0IW05.XPGCD;
    IN0IW05.IN0IWSUM = IN0IW05.XUMCD;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS5A

// setup format/sum tsq line(s)
Function IN0IS5G()


   /* ************************************************************/
   /* *** setup summary tsq line(s) (if no read next error)   ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

  IN0IWX1.XXXMODID = "S5G";

   /* ************************************************************/
   /* *** if no more db2 rows (sqlcode = +100):               ****/
   /* *** write blank lines to tsq until page full            ****/
   /* *** page full = max lines/lines per pg has 0 remainder  ****/
   /* *** note: index set to 01 when page full                ****/
   /* ************************************************************/

  if (IN0IWX1.VAGen_SQLCODE == +100)
    IN0IWXP1.IN0IWXDL = " ";
    IN0IWXP1.IN0IWXRT = "B";
    IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;
    while (IN0IWX1.IN0IWREM != 0)
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "A";
        IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;
    end
    IN0IWX1.IN0IWSIX = 01;
    return;
  end

   /* ************************************************************/
   /* *** setup the ws formatted line                         ****/
   /* ************************************************************/

  IN0IW05.IN0IWSRT = "S";

  IN0IW05.XSDCD = IN9REC.XSDCD;
  IN0IW05.XPGCD = IN9REC.XPGCD;
  IN0IW05.XUMCD = IN9REC.XUMCD;
  IN0IW05.XOWCD = IN9REC.XOWCD;

   /* *** calculate actual price if product uom ne inventory uom*/

  if (IN9REC.XUMCD in XUMTBL.XUMCD)
    IN0IW05.IN0IWIUM = XUMTBL.XUMCD[sysVar.arrayIndex];
    IN0IW05.IN0IWICF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
  else
    IN0IW05.IN0IWIUM = "  ";
    IN0IW05.IN0IWICF = 0;
  end

  IN0IW05.IN0IWWPC = IN0IW05.IN0IWSPC;

  if (IN0IW05.IN0IWPUM != "  ")
    if (IN0IW05.IN0IWPUM != IN0IW05.IN0IWIUM)
      IN0IW05.IN0IWWPC = IN0IW05.IN0IWWPC / IN0IW05.IN0IWPCF;
      IN0IW05.IN0IWWPC = IN0IW05.IN0IWWPC * IN0IW05.IN0IWICF;
    end
  end

  IN0IW05.IN0IWSOH = IN9REC.IN9TSZOH;
  IN0IW05.IN0IWSAV = IN9REC.IN9TSZOH;
  IN0IW05.IN0IWSSE = IN9REC.IN9TSZSA;

  if (IN9REC.IN9TSZRS < 0)
    IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV + IN9REC.IN9TSZRS;
  else
    IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV - IN9REC.IN9TSZRS;
  end

  if (IN9REC.IN9TSZAL < 0)
    IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV + IN9REC.IN9TSZAL;
  else
    IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV - IN9REC.IN9TSZAL;
  end

  if (IN9REC.IN9TSZSA < 0)
    IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV + IN9REC.IN9TSZSA;
  else
    IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV - IN9REC.IN9TSZSA;
  end

  if (IN9REC.IN9TSZXO < 0)
    IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV + IN9REC.IN9TSZXO;
  else
    IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV - IN9REC.IN9TSZXO;
  end

  IN0IW05.IN0IWSRS = IN9REC.IN9TSZRS + IN9REC.IN9TSZAL + IN9REC.IN9TSZXO;

   /* ************************************************************/
   /* *** write the entire ws line to the tsq                 ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXDL = IN0IW05.IN0IWSL5;

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS5G

// write detail tsq line(s)
Function IN0IS5H()


   /* ************************************************************/
   /* *** setup detail tsq line(s) (if no read next error)    ****/
   /* *** note: if no more db2 rows (sqlcode = +100): ezertn  ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

  if (IN0IWX1.VAGen_SQLCODE == +100)
    IN0IWX1.IN0IWDIX = 01;
    return;
  end

  IN0IWX1.XXXMODID = "S5H";

   /* ************************************************************/
   /* *** setup summary line                                  ****/
   /* ************************************************************/

  IN0IW05.IN0IWSRT = "S";

  IN0IW05.XSDCD = IN9REC.XSDCD;
  IN0IW05.XPGCD = IN9REC.XPGCD;
  IN0IW05.XUMCD = IN9REC.XUMCD;
  IN0IW05.XOWCD = IN9REC.XOWCD;

   /* *** calculate actual price if product uom ne inventory uom*/

  if (IN9REC.XUMCD in XUMTBL.XUMCD)
    IN0IW05.IN0IWIUM = XUMTBL.XUMCD[sysVar.arrayIndex];
    IN0IW05.IN0IWICF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
  else
    IN0IW05.IN0IWIUM = "  ";
    IN0IW05.IN0IWICF = 0;
  end

  IN0IW05.IN0IWWPC = IN0IW05.IN0IWSPC;

  if (IN0IW05.IN0IWPUM != "  ")
    if (IN0IW05.IN0IWPUM != IN0IW05.IN0IWIUM)
      IN0IW05.IN0IWWPC = IN0IW05.IN0IWWPC / IN0IW05.IN0IWPCF;
      IN0IW05.IN0IWWPC = IN0IW05.IN0IWWPC * IN0IW05.IN0IWICF;
    end
  end

   /* ************************************************************/
   /* *** use passed size totals                              ****/
   /* ************************************************************/

  IN0IW05.IN0IWSAV = IN9REC.IN9TSZOH - IN9REC.IN9TSZRS;
  IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV - IN9REC.IN9TSZAL;
  IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV - IN9REC.IN9TSZSA;
  IN0IW05.IN0IWSAV = IN0IW05.IN0IWSAV - IN9REC.IN9TSZXO;

  IN0IW05.IN0IWSRS = IN9REC.IN9TSZRS + IN9REC.IN9TSZAL;
  IN0IW05.IN0IWSRS = IN0IW05.IN0IWSRS + IN9REC.IN9TSZXO;

  IN0IW05.IN0IWSOH = IN9REC.IN9TSZOH;
  IN0IW05.IN0IWSSE = IN9REC.IN9TSZSA;

   /* ************************************************************/
   /* *** move the data from each of the size 'buckets' which ****/
   /* *** have any data greater than zero to the tsq          ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  while (IN0IWX1.IN0IWIX1 <= 40)
     /* ************************************************************/
     /* *** if 1st line(max lines/lines per pg remainder = 0)   ****/
     /* *** on page is next: write summary line                 ****/
     /* ************************************************************/
    IN0IWX1.IN0IWREM = IN0IWX1.IN0IWDML % IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWREM == 0)
      IN0IWXP1.IN0IWXDL = IN0IW05.IN0IWSL5;
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWDML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "A";
        IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    if (IN9REC.ZZZCHGCT[IN0IWIX1] != 0
     || IN9REC.IN1ONHND[IN0IWIX1] != 0
     || IN9REC.IN1ALOCD[IN0IWIX1] != 0
     || IN9REC.IN1STASD[IN0IWIX1] != 0
     || IN9REC.IN1RSRVD[IN0IWIX1] != 0
     || IN9REC.IN1XFERO[IN0IWIX1] != 0
     || IN9REC.IN1XFERI[IN0IWIX1] != 0
     || IN9REC.IN1EOMOH[IN0IWIX1] != 0)
      if (SYPREC.SY4IDDSC[IN0IWIX1] > " ")
        IN0IW05.SY4IDDSC = SYPREC.SY4IDDSC[IN0IWIX1];
      else
        IN0IW05.SY4IDDSC = "*****";
      end
      IN0IW05.IN0IWDRT = "D";
      IN0IW05.IN0IWDAV = IN9REC.IN1ONHND[IN0IWIX1];
      IN0IW05.IN0IWDAV = IN0IW05.IN0IWDAV - IN9REC.IN1RSRVD[IN0IWIX1];
      IN0IW05.IN0IWDAV = IN0IW05.IN0IWDAV - IN9REC.IN1ALOCD[IN0IWIX1];
      IN0IW05.IN0IWDAV = IN0IW05.IN0IWDAV - IN9REC.IN1STASD[IN0IWIX1];
      IN0IW05.IN0IWDAV = IN0IW05.IN0IWDAV - IN9REC.IN1XFERO[IN0IWIX1];
      IN0IW05.IN0IWDRS = IN9REC.IN1RSRVD[IN0IWIX1];
      IN0IW05.IN0IWDRS = IN0IW05.IN0IWDRS + IN9REC.IN1ALOCD[IN0IWIX1];
      IN0IW05.IN0IWDRS = IN0IW05.IN0IWDRS + IN9REC.IN1XFERO[IN0IWIX1];
      IN0IW05.IN0IWDOH = IN9REC.IN1ONHND[IN0IWIX1];
      IN0IW05.IN0IWDSE = IN9REC.IN1STASD[IN0IWIX1];
      IN0IWXP1.IN0IWXDL = IN0IW05.IN0IWDL5;
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWDML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "C";
        IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
    end
    IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
  end

   /* ************************************************************/
   /* *** write blank lines to ws until page full             ****/
   /* *** page full = max lines/lines per pg remainder = 0    ****/
   /* *** note: remainder in index (temp.ly used as work fld) ****/
   /* ************************************************************/

  IN0IWX1.IN0IWREM = IN0IWX1.IN0IWDML % IN0IWX1.IN0IWLPP;

  while (IN0IWX1.IN0IWREM != 0)
    IN0IWXP1.IN0IWXDL = " ";
    IN0IWXP1.IN0IWXRT = "B";
    call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0IWXP2.IN0IWXRC == 0)
      IN0IWX1.IN0IWDML = IN0IWXP2.IN0IWXIX;
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "D";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0IWX1.IN0IWREM = IN0IWX1.IN0IWDML % IN0IWX1.IN0IWLPP;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IS5H

// missing key inputs edits
Function IN0ISA0()


  IN0IWX1.XXXMODID = "SA0";

   /* ************************************************************/
   /* *** setup missing errors:                               ****/
   /* ************************************************************/

  if (IN0IM005.IN0IMSNO > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM005.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- enter required field msg*/
    set IN0IM005.IN0IMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISA0

// missing key inputs edits
Function IN0ISA1()


  IN0IWX1.XXXMODID = "SA1";

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if UOM missing (blank):                             ****/
   /* *** relational edits will lookup standard in product DB ****/
   /* ************************************************************/

  if (IN0IM010.XPGCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM010.XPGCD cursor, bold;
  end

  if (IN0IM010.XSACD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM010.XSACD cursor, bold;
  end

  if (IN0IM010.XSDCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM010.XSDCD cursor, bold;
  end

  if (IN0IM010.XQACD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "C";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM010.XQACD cursor, bold;
  end

  if (IN0IM010.XDMCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM010.XDMCD cursor, bold;
  end

  if (IN0IM010.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM010.SY2CLRID cursor, bold;
  end

  if (IN0IM010.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM010.SY1STNBR cursor, bold;
  end

  if (IN0IM010.XGPCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "G";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM010.XGPCD cursor, bold;
  end

  if (IN0IM010.XOWCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "H";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM010.XOWCD cursor, bold;
  end

  if (IN0IM010.XWHCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "I";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM010.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISA1

// missing key inputs edits
Function IN0ISA2()


  IN0IWX1.XXXMODID = "SA2";

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if UOM missing (blank):                             ****/
   /* *** relational edits will lookup standard in product DB ****/
   /* ************************************************************/

  if (IN0IM020.XPGCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM020.XPGCD cursor, bold;
  end

  if (IN0IM020.XSACD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM020.XSACD cursor, bold;
  end

  if (IN0IM020.XSDCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "C";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM020.XSDCD cursor, bold;
  end

  if (IN0IM020.XQACD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM020.XQACD cursor, bold;
  end

  if (IN0IM020.XDMCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM020.XDMCD cursor, bold;
  end

  if (IN0IM020.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM020.SY2CLRID cursor, bold;
  end

  if (IN0IM020.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "G";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM020.SY1STNBR cursor, bold;
  end

  if (IN0IM020.XGPCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "H";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM020.XGPCD cursor, bold;
  end

  if (IN0IM020.XOWCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "I";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM020.XOWCD cursor, bold;
  end

  if (IN0IM020.XWHCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "J";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM020.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISA2

// missing key inputs edits
Function IN0ISA3()


  IN0IWX1.XXXMODID = "SA3";

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* ************************************************************/

  if (IN0IM030.XQACD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM030.XQACD cursor, bold;
  end

  if (IN0IM030.XDMCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM030.XDMCD cursor, bold;
  end

  if (IN0IM030.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "C";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM030.SY2CLRID cursor, bold;
  end

  if (IN0IM030.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM030.SY1STNBR cursor, bold;
  end

  if (IN0IM030.XGPCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM030.XGPCD cursor, bold;
  end

  if (IN0IM030.XOWCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM030.XOWCD cursor, bold;
  end

  if (IN0IM030.XWHCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "G";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM030.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISA3

// missing key inputs edits
Function IN0ISA4()


  IN0IWX1.XXXMODID = "SA4";

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* ************************************************************/

  if (IN0IM040.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM040.SY1STNBR cursor, bold;
  end

  if (IN0IM040.XGPCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM040.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISA4

// missing key inputs edits
Function IN0ISA5()


  IN0IWX1.XXXMODID = "SA5";

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* ************************************************************/

  if (IN0IM050.XQACD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM050.XQACD cursor, bold;
  end

  if (IN0IM050.XDMCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM050.XDMCD cursor, bold;
  end

  if (IN0IM050.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "C";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM050.SY2CLRID cursor, bold;
  end

  if (IN0IM050.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM050.SY1STNBR cursor, bold;
  end

  if (IN0IM050.XGPCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM050.XGPCD cursor, bold;
  end

  if (IN0IM050.XWHCD > " ")
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0IM050.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISA5

// same key edits
Function IN0ISB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (IN0IM010.XPGCD != IN0IW01.XPGCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM010.XUMCD != IN0IW01.XUMCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM010.XSACD != IN0IW01.XSACD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM010.XSDCD != IN0IW01.XSDCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM010.XQACD != IN0IW01.XQACD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM010.XDMCD != IN0IW01.XDMCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM010.SY2CLRID != IN0IW01.SY2CLRID)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM010.SY1STNBR != IN0IW01.SY1STNBR)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM010.XGPCD != IN0IW01.XGPCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM010.XOWCD != IN0IW01.XOWCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM010.XWHCD != IN0IW01.XWHCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  IN0IWX1.IN0IWSKS = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISB1

// same key edits
Function IN0ISB2()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (IN0IM020.XPGCD != IN0IW02.XPGCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM020.XUMCD != IN0IW02.XUMCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM020.XSACD != IN0IW02.XSACD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM020.XSDCD != IN0IW02.XSDCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM020.XQACD != IN0IW02.XQACD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM020.XDMCD != IN0IW02.XDMCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM020.SY2CLRID != IN0IW02.SY2CLRID)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM020.SY1STNBR != IN0IW02.SY1STNBR)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM020.XGPCD != IN0IW02.XGPCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM020.XOWCD != IN0IW02.XOWCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM020.XWHCD != IN0IW02.XWHCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  IN0IWX1.IN0IWSKS = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISB2

// same key edits
Function IN0ISB3()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (IN0IM030.XQACD != IN0IW03.XQACD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM030.XDMCD != IN0IW03.XDMCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM030.SY2CLRID != IN0IW03.SY2CLRID)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM030.SY1STNBR != IN0IW03.SY1STNBR)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM030.XGPCD != IN0IW03.XGPCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM030.XOWCD != IN0IW03.XOWCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM030.XWHCD != IN0IW03.XWHCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  IN0IWX1.IN0IWSKS = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISB3

// same key edits
Function IN0ISB4()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (IN0IM040.SY1STNBR != IN0IW04.SY1STNBR)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM040.XGPCD != IN0IW04.XGPCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  IN0IWX1.IN0IWSKS = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISB4

// same key edits
Function IN0ISB5()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (IN0IM050.XQACD != IN0IW05.XQACD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM050.XDMCD != IN0IW05.XDMCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM050.SY2CLRID != IN0IW05.SY2CLRID)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM050.SY1STNBR != IN0IW05.SY1STNBR)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM050.XGPCD != IN0IW05.XGPCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  if (IN0IM050.XWHCD != IN0IW05.XWHCD)
    IN0IWX1.IN0IWSKS = "N";
    return;
  end

  IN0IWX1.IN0IWSKS = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISB5

// key field edits
Function IN0ISC1()


  IN0IWX1.XXXMODID = "SC1";

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if unit of measure not blank: put desc. on map      ****/
   /* *** and save the input uom conversion factor            ****/
   /* *** note: rel. edits will setup from prod.db if blank   ****/
   /* ************************************************************/

  if (IN0IM010.XUMCD > " ")
    if (IN0IM010.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        IN0IM010.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
        IN0IW01.IN0IWMCF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
      else
        IN0IM010.XUMDESC = " ";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "A";
        IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0012); /* <--- inactive msg*/
        set IN0IM010.XUMCD cursor, bold;
      end
    else
      IN0IM010.XPGDESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "B";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0IM010.XUMCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if packaging code in tbl & active: put desc. on map ****/
   /* ************************************************************/

  if (IN0IM010.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM010.XPGDESC = XPGTBL.XPGDESC[sysVar.arrayIndex];
    else
      IN0IM010.XPGDESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "C";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XPGCD cursor, bold;
    end
  else
    IN0IM010.XPGDESC = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM010.XPGCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if shade in table & active: put desc. on map        ****/
   /* ************************************************************/

  if (IN0IM010.XSACD in XSATBL.XSACD)
    if (XSATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM010.XSADESC = XSATBL.XSADESC[sysVar.arrayIndex];
    else
      IN0IM010.XSADESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "E";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XSACD cursor, bold;
    end
  else
    IN0IM010.XSADESC = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM010.XSACD cursor, bold;
  end

   /* ************************************************************/
   /* *** if spec diff in table & active: put desc. on map    ****/
   /* ************************************************************/

  set PC2REC empty;
  PC2REC.XGPCD = IN0IM010.XGPCD;
  PC2REC.PC2INSEG = IN0IM010.XSDCD;
  IN0ISXW(); /* get dprod.vprdcu01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    if (PC2REC.XXXSTAT == "A")
      IN0IM010.XSDDESC = PC2REC.PC2SEGDE;
    else
      IN0IM010.XSDDESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "G";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XSDCD cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      IN0IM010.XSDDESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "H";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0IM010.XSDCD cursor, bold;
    else
      return;
    end
  end

   /* ************************************************************/
   /* *** if quality code in tbe & active: put desc. on map   ****/
   /* ************************************************************/

  if (IN0IM010.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM010.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    else
      IN0IM010.XQADESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "I";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XQACD cursor, bold;
    end
  else
    IN0IM010.XQADESC = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "J";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM010.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** dimension code must be in table & active            ****/
   /* ************************************************************/

  if (IN0IM010.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "K";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XDMCD cursor, bold;
    end
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "L";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM010.XDMCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if gen. prod. class in tbl & act.: put abrv. on map ****/
   /* ************************************************************/

  if (IN0IM010.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM010.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      IN0IM010.XGPABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "M";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XGPCD cursor, bold;
    end
  else
    IN0IM010.XGPABRV = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "N";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM010.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (COMMAREA.XSOCD in XSOTBL.XSOCD)
    if (XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IW01.XCT-CTRY-CD = XSOTBL.XCTCD[sysVar.arrayIndex]; /* sale offc cntry*/
    else
      IN0IW01.XCT-CTRY-CD = "USA"; /* default to USA*/
    end
  else
    IN0IW01.XCT-CTRY-CD = "USA"; /* default to USA*/
  end

  if (IN0IM010.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM010.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      if (XWHTBL.XCTCD[sysVar.arrayIndex] != IN0IW01.XCT-CTRY-CD) /* different cntries*/
        converseLib.validationFailed(082); /* invalid warehouse*/
        IN0IM010.XWHABRV = " ";
        IN0IW01.XCT-CTRY-CD = " ";
        IN0IW01.ZFC-CRCY-CD = " ";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "T";
        IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
        set IN0IM010.XWHCD cursor, bold;
        return; /* <=== ** exception ***/
      end

      IN0IW01.ZFC-CRCY-CD = XWHTBL.ZFC-CRCY-CD[sysVar.arrayIndex];
  /* added at time of Canadian conversion*/
      IN0IW00.IN0I-WRK-PRICE = "PRICE ";
      IN0IW00.IN0I-WRK-LPRN = "(";
      IN0IW00.IN0I-WRK-RPRN = ")";
      IN0IW00.IN0I-WRK-ZFC = XWHTBL.ZFC-CRCY-CD[sysVar.arrayIndex];
      IN0IW00.IN0I-WRK-CURRENCY = IN0IW00.IN0I-WRK-CUR-HDR;
      IN0IW00.IN0I-WRK-COLON = ":";
      IN0IM010.IN0I-ZFC-HDR = IN0I-WRK-CUR-HDR-CLN;
    else
      IN0IM010.XWHABRV = " ";
      IN0IW01.XCT-CTRY-CD = " ";
      IN0IW01.ZFC-CRCY-CD = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "O";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XWHCD cursor, bold;
      return; /* <=== ** execption ***/
    end
  else
    IN0IM010.XWHABRV = " ";
    IN0IW01.XCT-CTRY-CD = " ";
    IN0IW01.ZFC-CRCY-CD = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "P";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM010.XWHCD cursor, bold;
    return; /* <=== ** execption ***/
  end

   /* ************************************************************/
   /* *** if whse owner group flag set (=Y): use ow table     ****/
   /* *** owner group must be zero for all other whses        ****/
   /* ************************************************************/

  if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
     /* ************************************************************/
     /* *** if owner group cd in tbl & active: put abrv. on map ****/
     /* ************************************************************/
    IN0IWX1.XWHCD = IN0IM010.XWHCD;
    IN0IWX1.XOWCD = IN0IM010.XOWCD;
    if (IN0IWX1.XOWKEY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        IN0IM010.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
      else
        IN0IM010.XOWABRV = " ";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "Q";
        IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0012); /* <--- inactive msg*/
        set IN0IM010.XOWCD cursor, bold;
      end
    else
      IN0IM010.XOWABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "R";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0IM010.XOWCD cursor, bold;
    end
  else
    if (IN0IM010.XOWCD != "00")
      IN0IM010.XOWABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "S";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0IM010.XOWCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISC1

// key field edits
Function IN0ISC2()


  IN0IWX1.XXXMODID = "SC2";

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** unit of measure must be in tbl & active, if entered ****/
   /* *** note: rel edits will find in prod.db if blank       ****/
   /* ************************************************************/

  if (IN0IM020.XUMCD > " ")
    if (IN0IM020.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "A";
        IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0012); /* <--- inactive msg*/
        set IN0IM020.XUMCD cursor, bold;
      end
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "B";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0IM020.XUMCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** packaging code must be in tbl & active              ****/
   /* ************************************************************/

  if (IN0IM020.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "C";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM020.XPGCD cursor, bold;
    end
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "C";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM020.XPGCD cursor, bold;
  end

   /* ************************************************************/
   /* *** shade must be in table & active                     ****/
   /* ************************************************************/

  if (IN0IM020.XSACD in XSATBL.XSACD)
    if (XSATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "D";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM020.XSACD cursor, bold;
    end
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM020.XSACD cursor, bold;
  end

   /* ************************************************************/
   /* *** spec diff must be in table & active                 ****/
   /* ************************************************************/
  set PC2REC empty;
  PC2REC.XGPCD = IN0IM020.XGPCD;
  PC2REC.PC2INSEG = IN0IM020.XSDCD;
  IN0ISXW();
  if (SQLCA.VAGen_SQLCODE == 0)
    if (PC2REC.XXXSTAT == "A")
       /* ** next sentence ***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "F";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM020.XSDCD cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "G";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0IM020.XSDCD cursor, bold;
    else
      return;
    end
  end

   /* ************************************************************/
   /* *** quality code must be in table & active              ****/
   /* ************************************************************/

  if (IN0IM020.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "H";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM020.XQACD cursor, bold;
    end
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "I";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM020.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** dimension code must be in tbl & active              ****/
   /* ************************************************************/

  if (IN0IM020.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "J";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM020.XDMCD cursor, bold;
    end
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "K";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM020.XDMCD cursor, bold;
  end

   /* ************************************************************/
   /* *** gen. prod. class must be in tbl & act.              ****/
   /* ************************************************************/

  if (IN0IM020.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM020.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      IN0IM020.XGPABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "L";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM020.XGPCD cursor, bold;
    end
  else
    IN0IM020.XGPABRV = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "M";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM020.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (COMMAREA.XSOCD in XSOTBL.XSOCD)
    if (XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IW02.XCT-CTRY-CD = XSOTBL.XCTCD[sysVar.arrayIndex]; /* sale offc cntry*/
    else
      IN0IW02.XCT-CTRY-CD = "USA"; /* default to USA*/
    end
  else
    IN0IW02.XCT-CTRY-CD = "USA"; /* default to USA*/
  end

  if (IN0IM020.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM020.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      if (XWHTBL.XCTCD[sysVar.arrayIndex] != IN0IW02.XCT-CTRY-CD) /* different cntries*/
        converseLib.validationFailed(082); /* invalid warehouse*/
        IN0IM020.XWHABRV = " ";
        IN0IW02.XCT-CTRY-CD = " ";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "T";
        IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
        set IN0IM020.XWHCD cursor, bold;
        return; /* <=== ** execption ***/
      end
    else
      IN0IM020.XWHABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "N";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM020.XWHCD cursor, bold;
      return; /* <=== ** execption ***/
    end
  else
    IN0IM020.XWHABRV = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "O";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM020.XWHCD cursor, bold;
    return; /* <=== ** execption ***/
  end

   /* ************************************************************/
   /* *** if whse owner group flag set (=Y): use ow table     ****/
   /* *** owner group must be zero for all other whses        ****/
   /* ************************************************************/

  if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
     /* ************************************************************/
     /* *** if owner group cd in tbl & active: put abrv. on map ****/
     /* ************************************************************/
    IN0IWX1.XWHCD = IN0IM020.XWHCD;
    IN0IWX1.XOWCD = IN0IM020.XOWCD;
    if (IN0IWX1.XOWKEY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        IN0IM020.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
      else
        IN0IM020.XOWABRV = " ";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "P";
        IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0012); /* <--- inactive msg*/
        set IN0IM020.XOWCD cursor, bold;
      end
    else
      IN0IM020.XOWABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "Q";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0IM020.XOWCD cursor, bold;
    end
  else
    if (IN0IM020.XOWCD != "00")
      IN0IM020.XOWABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "R";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0IM020.XOWCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISC2

// key field edits
Function IN0ISC3()


  IN0IWX1.XXXMODID = "SC3";

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** quality code must be in table & active              ****/
   /* ************************************************************/

  if (IN0IM030.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM030.XQACD cursor, bold;
    end
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM030.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** dimension code must be in tbl & active              ****/
   /* ************************************************************/

  if (IN0IM030.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "C";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM030.XDMCD cursor, bold;
    end
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM030.XDMCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if gen. prod. class in tbl & act.: put abrv. on map ****/
   /* ************************************************************/

  if (IN0IM030.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM030.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      IN0IM030.XGPABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "E";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM030.XGPCD cursor, bold;
    end
  else
    IN0IM030.XGPABRV = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM030.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (COMMAREA.XSOCD in XSOTBL.XSOCD)
    if (XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IW03.XCT-CTRY-CD = XSOTBL.XCTCD[sysVar.arrayIndex]; /* sale offc cntry*/
    else
      IN0IW03.XCT-CTRY-CD = "USA"; /* default to USA*/
    end
  else
    IN0IW03.XCT-CTRY-CD = "USA"; /* default to USA*/
  end

  if (IN0IM030.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM030.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      if (XWHTBL.XCTCD[sysVar.arrayIndex] != IN0IW03.XCT-CTRY-CD) /* different cntries*/
        converseLib.validationFailed(082); /* invalid warehouse*/
        IN0IM030.XWHABRV = " ";
        IN0IW03.XCT-CTRY-CD = " ";
        IN0IW03.ZFC-CRCY-CD = " ";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "T";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        set IN0IM030.XWHCD cursor, bold;
        return; /* <=== ** execption ***/
      end
      IN0IW03.ZFC-CRCY-CD = XWHTBL.ZFC-CRCY-CD[sysVar.arrayIndex];
  /* added at time of Canadian conversion*/
      IN0IW00.IN0I-WRK-PRICE = "PRICE ";
      IN0IW00.IN0I-WRK-LPRN = "(";
      IN0IW00.IN0I-WRK-RPRN = ")";
      IN0IW00.IN0I-WRK-ZFC = XWHTBL.ZFC-CRCY-CD[sysVar.arrayIndex];
      IN0IW00.IN0I-WRK-CURRENCY = IN0IW00.IN0I-WRK-CUR-HDR;
      IN0IW00.IN0I-WRK-COLON = ":";
      IN0IM030.IN0I-ZFC-HDR = IN0I-WRK-HDR;
    else
      IN0IM030.XWHABRV = " ";
      IN0IW03.XCT-CTRY-CD = " ";
      IN0IW03.ZFC-CRCY-CD = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "G";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM030.XWHCD cursor, bold;
      return; /* <=== ** execption ***/
    end
  else
    IN0IM030.XWHABRV = " ";
    IN0IW03.XCT-CTRY-CD = " ";
    IN0IW03.ZFC-CRCY-CD = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "H";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM030.XWHCD cursor, bold;
    return; /* <=== ** execption ***/
  end

   /* ************************************************************/
   /* *** if whse owner group flag set (=Y): use ow table     ****/
   /* *** owner group must be zero for all other whses        ****/
   /* ************************************************************/

  if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
     /* ************************************************************/
     /* *** if owner group cd in tbl & active: put abrv. on map ****/
     /* ************************************************************/
    IN0IWX1.XWHCD = IN0IM030.XWHCD;
    IN0IWX1.XOWCD = IN0IM030.XOWCD;
    if (IN0IWX1.XOWKEY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        IN0IM030.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
      else
        IN0IM010.XOWABRV = " ";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "I";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0012); /* <--- inactive msg*/
        set IN0IM030.XOWCD cursor, bold;
      end
    else
      IN0IM030.XOWABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "J";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0IM030.XOWCD cursor, bold;
    end
  else
    if (IN0IM030.XOWCD != "00")
      IN0IM030.XOWABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "K";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0IM030.XOWCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISC3

// key field edits
Function IN0ISC4()


  IN0IWX1.XXXMODID = "SC4";

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if gen. prod. class in tbl & act.: put abrv. on map ****/
   /* ************************************************************/

  if (IN0IM040.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM040.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      IN0IM040.XGPABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM040.XGPCD cursor, bold;
    end
  else
    IN0IM040.XGPABRV = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM040.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end IN0ISC4

// key field edits
Function IN0ISC5()


  IN0IWX1.XXXMODID = "SC5";

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** quality code must be in table & active              ****/
   /* ************************************************************/

  if (IN0IM050.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM050.XQACD cursor, bold;
    end
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM050.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** dimension code must be in tbl & active              ****/
   /* ************************************************************/

  if (IN0IM050.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "C";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM050.XDMCD cursor, bold;
    end
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "D";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM050.XDMCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if gen. prod. class in tbl & act.: put abrv. on map ****/
   /* ************************************************************/

  if (IN0IM050.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM050.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      IN0IM050.XGPABRV = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "E";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM050.XGPCD cursor, bold;
    end
  else
    IN0IM050.XGPABRV = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "F";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM050.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (COMMAREA.XSOCD in XSOTBL.XSOCD)
    if (XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IW05.XCT-CTRY-CD = XSOTBL.XCTCD[sysVar.arrayIndex]; /* sale offc cntry*/
    else
      IN0IW05.XCT-CTRY-CD = "USA"; /* default to 'USA'*/
    end
  else
    IN0IW05.XCT-CTRY-CD = "USA"; /* default to 'USA'*/
  end

  if (IN0IM050.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM050.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      if (XWHTBL.XCTCD[sysVar.arrayIndex] != IN0IW05.XCT-CTRY-CD) /* different cntries*/
        converseLib.validationFailed(082); /* invalid warehouse*/
        IN0IM050.XWHABRV = " ";
        IN0IW05.XCT-CTRY-CD = " ";
        IN0IW05.ZFC-CRCY-CD = " ";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "T";
        IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
        set IN0IM050.XWHCD cursor, bold;
        return; /* <=== ** execption ***/
      end
      IN0IW05.ZFC-CRCY-CD = XWHTBL.ZFC-CRCY-CD[sysVar.arrayIndex];
  /* added at time of Canadian conversion*/
      IN0IW00.IN0I-WRK-PRICE = "PRICE ";
      IN0IW00.IN0I-WRK-LPRN = "(";
      IN0IW00.IN0I-WRK-RPRN = ")";
      IN0IW00.IN0I-WRK-ZFC = XWHTBL.ZFC-CRCY-CD[sysVar.arrayIndex];
      IN0IW00.IN0I-WRK-CURRENCY = IN0IW00.IN0I-WRK-CUR-HDR;
      IN0IW00.IN0I-WRK-COLON = ":";
      IN0IM050.IN0I-ZFC-HDR = IN0I-WRK-HDR;
    else
      IN0IM050.XWHABRV = " ";
      IN0IW05.XCT-CTRY-CD = " ";
      IN0IW05.ZFC-CRCY-CD = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "G";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM050.XWHCD cursor, bold;
    end
  else
    IN0IM050.XWHABRV = " ";
    IN0IW05.XCT-CTRY-CD = " ";
    IN0IW05.ZFC-CRCY-CD = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "H";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0IM050.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISC5

// key relational edits
Function IN0ISD1()


  IN0IWX1.XXXMODID = "SD1";
  IN0IWX1.IN0IWLOC = "IN0ISD1 ";

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* Use IN8020 to get short style name, units per case, and ****/
   /* if blank, the default unit of measure, the color        ****/
   /* abbreviation, and life cycle code.  The 'PR' process    ****/
   /* code will also return price data.                       ****/
   /* ************************************************************/

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PR";
                                   /* 'PR' will return product & price data*/
  INGREC.XGP-GPC-CD = IN0IM010.XGPCD;
  INGREC.SY-STY-NBR = IN0IM010.SY1STNBR;
  INGREC.SY-COLR-CD-ID = IN0IM010.SY2CLRID;
  INGREC.XDM-DIM-CD = IN0IM010.XDMCD;
  INGREC.XUM-UOM-CD = IN0IM010.XUMCD;
  INGREC.SY-SZ-ID = 0;
  INGREC.XPYCD = "01";
  INGREC.XQA-QUAL-CD = IN0IM010.XQACD;
  INGREC.XCT-CTRY-CD = IN0IW01.XCT-CTRY-CD;
  INGREC.ZFC-CRCY-CD = IN0IW01.ZFC-CRCY-CD;
  INGREC.ING-EFFECTIVE-DT = IN0IWX1.IN0IWCDT;

  TA1REC.TA1PGMNM = "IN0ISD1";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020();

  if (INGREC.ING-RETURN-CD > 0000)
    IN0IS-IN8020-ERRS();
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.IN0IWSES = "Y";
    set IN0IM010.XGPCD bold;
    set IN0IM010.SY1STNBR cursor, bold;
    set IN0IM010.SY2CLRID cursor, bold;
    set IN0IM010.XDMCD bold;
    set IN0IM010.XQACD cursor, bold;
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    IN0ISF1(); /* <=== save key values*/
    return;
  else
    IN0IM010.SY1SSTNM = INGREC.SY1SSTNM;
    IN0IM010.IN0IMUPC = INGREC.SY1UNPCS;
    IN0IM010.SY2CLRAB = INGREC.SY2CLRAB;
    if (IN0IM010.XUMCD != INGREC.XUM-UOM-CD)
      IN0IWX1.IN0IWWCF = IN0IM010.XUMCD;
      IN0IM010.IN0IMWPC = INGREC.ING-CALC-PRC-PER-UNIT * IN0IWX1.IN0IWWCF;
    else
      IN0IM010.IN0IMWPC = INGREC.ING-CALC-PRC-PER-UNIT;
    end
  end

   /* ************************************************************/
   /* *** Get std uom description & conversion factor         ****/
   /* ************************************************************/

  if (INGREC.XUM-UOM-CD in XUMTBL.XUMCD)
    if (XUMTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      IN0IM010.XUMDESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XUMCD cursor, bold;
      return;
    end
     /* ************************************************************/
     /* *** only if the unit of measure was left blank:         ****/
     /* *** use the std prod uom & get its desc from its table  ****/
     /* ************************************************************/
    if (IN0IM010.XUMCD > " ")
       /* next sentence*/
    else
      IN0IM010.XUMCD = INGREC.XUM-UOM-CD;
      IN0IM010.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end
  else
    IN0IM010.XUMCD = INGREC.XUM-UOM-CD;
    IN0IM010.XUMDESC = "<===";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe error msg*/
    set IN0IM010.XUMCD cursor, bold;
    return;
  end


   /* ************************************************************/
   /* *** if current date greater than effective date:        ****/
   /* *** use the corresponding life cycle code               ****/
   /* *** note: effective dates in ascending order            ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT1)
    IN0IM010.XLCCD = INGREC.XLCCD1;
  else
    if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT2)
      IN0IM010.XLCCD = INGREC.XLCCD2;
    else
      if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT3)
        IN0IM010.XLCCD = INGREC.XLCCD3;
      else
        if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT4)
          IN0IM010.XLCCD = INGREC.XLCCD4;
        else
           /* ************************************************************/
           /* *** fall thru error - code shouldn't have been executed ****/
           /* ************************************************************/
          IN0IWX1.IN0IWERS = "Y";
          IN0IWX1.XXXUNQID = "C";
          converseLib.validationFailed(0008); /* <--- fall thru error msg*/
          IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
          return;
        end
      end
    end
  end

  if (IN0IWX1.IN0IWERS == "Y")
    set IN0IM010.XGPCD bold;
    set IN0IM010.SY1STNBR bold;
    set IN0IM010.SY2CLRID bold;
    set IN0IM010.XDMCD bold;
    set IN0IM010.XLCCD cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** if life cycle in tbl & active: put desc. on map     ****/
   /* ************************************************************/

  if (IN0IM010.XLCCD in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0IM010.XLCDESC = XLCTBL.XLCDESC[sysVar.arrayIndex];
    else
      IN0IM010.XLCDESC = " ";
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "D";
      IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM010.XLCCD cursor, bold;
      return;
    end
  else
    IN0IM010.XLCDESC = " ";
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe error msg*/
    set IN0IM010.XLCCD cursor, bold;
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISD1

// key relational edits
Function IN0ISD2()


  IN0IWX1.XXXMODID = "SD2";

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* Use IN8020 to get short style name, color abbreviation,   **/
   /* life cycle code, and if blank, the default unit of        **/
   /* measure.                                                  **/
   /* *** note: sy1szscl size scale code will be used later   ****/
   /* ************************************************************/

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
  INGREC.XGP-GPC-CD = IN0IM020.XGPCD;
  INGREC.SY-STY-NBR = IN0IM020.SY1STNBR;
  INGREC.SY-COLR-CD-ID = IN0IM020.SY2CLRID;
  INGREC.XDM-DIM-CD = IN0IM020.XDMCD;
  INGREC.XCT-CTRY-CD = IN0IW01.XCT-CTRY-CD;

  TA1REC.TA1PGMNM = "IN0ISD2";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020();

  if (INGREC.ING-RETURN-CD > 0000)
    IN0IS-IN8020-ERRS();
    IN0IWX1.IN0IWERS = "Y";
    set IN0IM020.XGPCD bold;
    set IN0IM020.SY1STNBR bold;
    set IN0IM020.SY2CLRID cursor, bold;
    set IN0IM020.XDMCD bold;
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    return;
  else
    IN0IM020.SY1SSTNM = INGREC.SY1SSTNM;
    IN0IM020.SY2CLRAB = INGREC.SY2CLRAB;
  end

   /* ************************************************************/
   /* *** only if the unit of measure was left blank:         ****/
   /* *** use the std prod uom & make sure it is active       ****/
   /* ************************************************************/

  if (IN0IM020.XUMCD > " ")
     /* ** next sentence ***/
  else
    IN0IM020.XUMCD = INGREC.XUM-UOM-CD;
    if (IN0IM020.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentnece ***/
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "A";
        IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0012); /* <--- inactive msg*/
        set IN0IM020.XUMCD cursor, bold;
        return;
      end
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "B";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- severe error msg*/
      set IN0IM020.XUMCD cursor, bold;
      return;
    end
  end


   /* ************************************************************/
   /* *** if current date greater than effective date:        ****/
   /* *** use the corresponding life cycle code               ****/
   /* *** note: effective dates in ascending order            ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT1)
    IN0IM020.XLCCD = INGREC.XLCCD1;
  else
    if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT2)
      IN0IM020.XLCCD = INGREC.XLCCD2;
    else
      if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT3)
        IN0IM020.XLCCD = INGREC.XLCCD3;
      else
        if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT4)
          IN0IM020.XLCCD = INGREC.XLCCD4;
        else
           /* ************************************************************/
           /* *** fall thru error - code shouldn't have been executed ****/
           /* ************************************************************/
          IN0IWX1.IN0IWERS = "Y";
          IN0IWX1.XXXUNQID = "C";
          IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
          converseLib.validationFailed(0008); /* <--- fall thru error msg*/
          return;
        end
      end
    end
  end

  if (IN0IWX1.IN0IWERS == "Y")
    set IN0IM020.XGPCD bold;
    set IN0IM020.SY1STNBR bold;
    set IN0IM020.SY2CLRID bold;
    set IN0IM020.XDMCD bold;
    set IN0IM020.XLCCD cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** life cycle must be in tbl & active                  ****/
   /* ************************************************************/

  if (IN0IM020.XLCCD in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** NEXT SENTENCE ***/
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "D";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0012); /* <--- inactive msg*/
      set IN0IM020.XLCCD cursor, bold;
      return;
    end
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "E";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe error msg*/
    set IN0IM020.XLCCD cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISD2

// key relational edits
Function IN0ISD3()


  IN0IWX1.XXXMODID = "SD3";

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* Use IN8020 to get short style name, units per case,       **/
   /* color abbreviation, unit of measure, and life cycle code. **/
   /* Unit price will also be calculated and retrieved from     **/
   /* the call to the subroutine.                               **/
   /* ************************************************************/

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PR";
                                   /* 'PR' will return product & price data*/
  INGREC.XGP-GPC-CD = IN0IM030.XGPCD;
  INGREC.SY-STY-NBR = IN0IM030.SY1STNBR;
  INGREC.SY-COLR-CD-ID = IN0IM030.SY2CLRID;
  INGREC.XDM-DIM-CD = IN0IM030.XDMCD;
  INGREC.SY-SZ-ID = 0;
  INGREC.XPYCD = "01";
  INGREC.XQA-QUAL-CD = IN0IM030.XQACD;
  INGREC.XUM-UOM-CD = "01";
  INGREC.XCT-CTRY-CD = IN0IW03.XCT-CTRY-CD;
  INGREC.ZFC-CRCY-CD = IN0IW03.ZFC-CRCY-CD;
  INGREC.ING-EFFECTIVE-DT = IN0IWX1.IN0IWCDT;

  TA1REC.TA1PGMNM = "IN0ISD3";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020();

  if (INGREC.ING-RETURN-CD > 0000)
    IN0IS-IN8020-ERRS();
    IN0IWX1.IN0IWERS = "Y";
    set IN0IM030.XGPCD bold;
    set IN0IM030.SY1STNBR bold;
    set IN0IM030.SY2CLRID bold;
    set IN0IM030.XDMCD cursor, bold;
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    return;
  else
    IN0IM030.SY1SSTNM = INGREC.SY1SSTNM;
    IN0IM030.IN0IMUPC = INGREC.SY1UNPCS;
    IN0IM030.SY2CLRAB = INGREC.SY2CLRAB;
    IN0IW03.IN0IWSPC = INGREC.ING-CALC-PRC-PER-UNIT;
  end


   /* **********************************************************/
   /* *** get product uom conversion factor & save.         ****/
   /* **********************************************************/

  if (INGREC.XUM-UOM-CD in XUMTBL.XUMCD)
    IN0IW03.IN0IWPUM = XUMTBL.XUMCD[sysVar.arrayIndex];
    IN0IW03.IN0IWPCF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
  else
    IN0IW03.IN0IWPUM = "  ";
    IN0IW03.IN0IWPCF = 0;
  end

   /* ************************************************************/
   /* *** if current date greater than effective date:        ****/
   /* *** use the corresponding life cycle code               ****/
   /* *** note: effective dates in ascending order            ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT1)
    IN0IM030.XLCCD = INGREC.XLCCD1;
  else
    if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT2)
      IN0IM030.XLCCD = INGREC.XLCCD2;
    else
      if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT3)
        IN0IM030.XLCCD = INGREC.XLCCD3;
      else
        if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT4)
          IN0IM030.XLCCD = INGREC.XLCCD4;
        else
           /* ************************************************************/
           /* *** fall thru error - code shouldn't have been executed ****/
           /* ************************************************************/

          IN0IWX1.IN0IWERS = "Y";
          IN0IWX1.XXXUNQID = "A";
          IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
          converseLib.validationFailed(0008); /* <--- fall thru error msg*/
          return;
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end IN0ISD3

// key relational edits
Function IN0ISD4()


  IN0IWX1.XXXMODID = "SD4";

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** use style tbl for short style name                  ****/
   /* ************************************************************/

  SY1REC.XGPCD = IN0IM040.XGPCD;
  SY1REC.SY1STNBR = IN0IM040.SY1STNBR;

  IN0IWX1.IN0IWLOC = "IN0ISD4 ";
  IN0ISXA(); /* <=== select sy1rec row*/

  if (IN0IWX1.IN0IWERS == "Y")
    set IN0IM040.XGPCD bold;
    set IN0IM040.SY1STNBR cursor, bold;
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

  IN0IM040.SY1SSTNM = SY1REC.SY1SSTNM;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISD4

// key relational edits
Function IN0ISD5()

  IN0IWX1.XXXMODID = "SD5";

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** use style tbl for short style name & units per case ****/
   /* *** use style color table to get the color abbreviation ****/
   /* *** and life cycle code                                 ****/
   /* ************************************************************/

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PR";
                                   /* 'PR' will return product & price data*/
  INGREC.XGP-GPC-CD = IN0IM050.XGPCD;
  INGREC.SY-STY-NBR = IN0IM050.SY1STNBR;
  INGREC.SY-COLR-CD-ID = IN0IM050.SY2CLRID;
  INGREC.XDM-DIM-CD = IN0IM050.XDMCD;
  INGREC.XUM-UOM-CD = "01";
  INGREC.SY-SZ-ID = 0;
  INGREC.XPYCD = "01";
  INGREC.XQA-QUAL-CD = IN0IM050.XQACD;
  INGREC.XCT-CTRY-CD = IN0IW05.XCT-CTRY-CD;
  INGREC.ZFC-CRCY-CD = IN0IW05.ZFC-CRCY-CD;
  INGREC.ING-EFFECTIVE-DT = IN0IWX1.IN0IWCDT;

  TA1REC.TA1PGMNM = "IN0ISD5";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020();

  if (INGREC.ING-RETURN-CD > 0000)
    IN0IS-IN8020-ERRS();
    if (INGREC.ING-RETURN-CD == 2200)
      converseLib.validationFailed(0068);
    end
    IN0IWX1.IN0IWERS = "Y";
    set IN0IM050.XGPCD bold;
    set IN0IM050.SY1STNBR cursor, bold;
    set IN0IM050.SY2CLRID bold;
    set IN0IM050.XDMCD cursor, bold;
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    return;
  else
    IN0IM050.SY1SSTNM = INGREC.SY1SSTNM;
    IN0IM050.IN0IMUPC = INGREC.SY1UNPCS;
    IN0IM050.SY2CLRAB = INGREC.SY2CLRAB;
    IN0IW05.IN0IWSPC = INGREC.ING-CALC-PRC-PER-UNIT;
  end


   /* *******************************************************/
   /* *** get product uom conversion factor & save.      ****/
   /* *******************************************************/

  if (INGREC.XUM-UOM-CD in XUMTBL.XUMCD)
    IN0IW05.IN0IWPUM = XUMTBL.XUMCD[sysVar.arrayIndex];
    IN0IW05.IN0IWPCF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
  else
    IN0IW05.IN0IWPUM = "  ";
    IN0IW05.IN0IWPCF = 0;
  end


   /* ************************************************************/
   /* *** if current date greater than effective date:        ****/
   /* *** use the corresponding life cycle code               ****/
   /* *** note: effective dates in ascending order            ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT1)
    IN0IM050.XLCCD = INGREC.XLCCD1;
  else
    if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT2)
      IN0IM050.XLCCD = INGREC.XLCCD2;
    else
      if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT3)
        IN0IM050.XLCCD = INGREC.XLCCD3;
      else
        if (IN0IWX1.IN0IWCDT >= INGREC.SY2CEDT4)
          IN0IM050.XLCCD = INGREC.XLCCD4;
        else
           /* ************************************************************/
           /* *** fall thru error - code shouldn't have been executed ****/
           /* ************************************************************/
          IN0IWX1.IN0IWERS = "Y";
          IN0IWX1.XXXUNQID = "A";
          IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
          converseLib.validationFailed(0008); /* <--- fall thru error msg*/
          return;
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end IN0ISD5

// save current key value(s)
Function IN0ISF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0IW01.XUMCD = IN0IM010.XUMCD;
  IN0IW01.XPGCD = IN0IM010.XPGCD;
  IN0IW01.XSACD = IN0IM010.XSACD;
  IN0IW01.XSDCD = IN0IM010.XSDCD;
  IN0IW01.XQACD = IN0IM010.XQACD;
  IN0IW01.XDMCD = IN0IM010.XDMCD;
  IN0IW01.SY2CLRID = IN0IM010.SY2CLRID;
  IN0IW01.SY1STNBR = IN0IM010.SY1STNBR;
  IN0IW01.XGPCD = IN0IM010.XGPCD;
  IN0IW01.XOWCD = IN0IM010.XOWCD;
  IN0IW01.XWHCD = IN0IM010.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISF1

// save current key value(s)
Function IN0ISF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0IW02.XPGCD = IN0IM020.XPGCD;
  IN0IW02.XUMCD = IN0IM020.XUMCD;
  IN0IW02.XSACD = IN0IM020.XSACD;
  IN0IW02.XSDCD = IN0IM020.XSDCD;
  IN0IW02.XQACD = IN0IM020.XQACD;
  IN0IW02.XDMCD = IN0IM020.XDMCD;
  IN0IW02.SY2CLRID = IN0IM020.SY2CLRID;
  IN0IW02.SY1STNBR = IN0IM020.SY1STNBR;
  IN0IW02.XGPCD = IN0IM020.XGPCD;
  IN0IW02.XOWCD = IN0IM020.XOWCD;
  IN0IW02.XWHCD = IN0IM020.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISF2

// save current key value(s)
Function IN0ISF3()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0IW03.XQACD = IN0IM030.XQACD;
  IN0IW03.XDMCD = IN0IM030.XDMCD;
  IN0IW03.SY2CLRID = IN0IM030.SY2CLRID;
  IN0IW03.SY1STNBR = IN0IM030.SY1STNBR;
  IN0IW03.XGPCD = IN0IM030.XGPCD;
  IN0IW03.XOWCD = IN0IM030.XOWCD;
  IN0IW03.XWHCD = IN0IM030.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISF3

// save current key value(s)
Function IN0ISF4()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0IW04.SY1STNBR = IN0IM040.SY1STNBR;
  IN0IW04.XGPCD = IN0IM040.XGPCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISF4

// save current key value(s)
Function IN0ISF5()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0IW05.XQACD = IN0IM050.XQACD;
  IN0IW05.XDMCD = IN0IM050.XDMCD;
  IN0IW05.SY2CLRID = IN0IM050.SY2CLRID;
  IN0IW05.SY1STNBR = IN0IM050.SY1STNBR;
  IN0IW05.XGPCD = IN0IM050.XGPCD;
  IN0IW05.XWHCD = IN0IM050.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISF5

// setup map key fields
Function IN0ISG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* *** depending on which last key has the most related    ****/
   /* *** data, if any  or  use all default values            ****/
   /* *** note: check first for SES=y to resetup scrn         ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSES == "Y")
    IN0IWX1.IN0IWSES = "N";
    IN0IM010.XUMCD = IN0IW01.XUMCD;
    IN0IM010.XPGCD = IN0IW01.XPGCD;
    IN0IM010.XSACD = IN0IW01.XSACD;
    IN0IM010.XSDCD = IN0IW01.XSDCD;
    IN0IM010.XQACD = IN0IW01.XQACD;
    IN0IM010.XDMCD = IN0IW01.XDMCD;
    IN0IM010.SY2CLRID = IN0IW01.SY2CLRID;
    IN0IM010.SY1STNBR = IN0IW01.SY1STNBR;
    IN0IM010.XGPCD = IN0IW01.XGPCD;
    IN0IM010.XOWCD = IN0IW01.XOWCD;
    IN0IM010.XWHCD = IN0IW01.XWHCD;
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

  IN0IM010.XUMCD = "01";
  IN0IM010.XPGCD = "00";
  IN0IM010.XSACD = "000";
  IN0IM010.XSDCD = "000";
  IN0IM010.XQACD = "01";
  IN0IM010.XDMCD = "00";
  IN0IM010.SY2CLRID = "00 ";
  IN0IM010.SY1STNBR = " ";
  IN0IM010.XGPCD = " ";
  IN0IM010.XOWCD = "00";
  IN0IM010.XWHCD = " ";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISG1

// setup map key fields
Function IN0ISG2()


   /* ************************************************************/
   /* *** use current ws values to the corresponding map flds ****/
   /* *** depending on which last key has the most related    ****/
   /* *** data, if any  or  use all default values            ****/
   /* *** note: check first for SES=y to resetup scrn         ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSES == "Y")
    IN0IWX1.IN0IWSES = "N";
    IN0IM020.XPGCD = IN0IW02.XPGCD;
    IN0IM020.XUMCD = IN0IW02.XUMCD;
    IN0IM020.XSACD = IN0IW02.XSACD;
    IN0IM020.XSDCD = IN0IW02.XSDCD;
    IN0IM020.XQACD = IN0IW02.XQACD;
    IN0IM020.XDMCD = IN0IW02.XDMCD;
    IN0IM020.SY2CLRID = IN0IW02.SY2CLRID;
    IN0IM020.SY1STNBR = IN0IW02.SY1STNBR;
    IN0IM020.XGPCD = IN0IW02.XGPCD;
    IN0IM020.XOWCD = IN0IW02.XOWCD;
    IN0IM020.XWHCD = IN0IW02.XWHCD;
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

  IN0IM020.XPGCD = "00";
  IN0IM020.XUMCD = "01";
  IN0IM020.XSACD = "000";
  IN0IM020.XSDCD = "000";
  IN0IM020.XQACD = "01";
  IN0IM020.XDMCD = "00";
  IN0IM020.SY2CLRID = "00 ";
  IN0IM020.SY1STNBR = " ";
  IN0IM020.XGPCD = " ";
  IN0IM020.XOWCD = "00";
  IN0IM020.XWHCD = " ";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISG2

// setup map key fields
Function IN0ISG3()


   /* ************************************************************/
   /* *** use current ws values to the corresponding map flds ****/
   /* *** depending on which last key has the most related    ****/
   /* *** data, if any  or  use all default values            ****/
   /* *** note: check first for SES=y to resetup scrn         ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSES == "Y")
    IN0IWX1.IN0IWSES = "N";
    IN0IM030.XQACD = IN0IW03.XQACD;
    IN0IM030.XDMCD = IN0IW03.XDMCD;
    IN0IM030.SY2CLRID = IN0IW03.SY2CLRID;
    IN0IM030.SY1STNBR = IN0IW03.SY1STNBR;
    IN0IM030.XGPCD = IN0IW03.XGPCD;
    IN0IM030.XOWCD = IN0IW03.XOWCD;
    IN0IM030.XWHCD = IN0IW03.XWHCD;
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

  IN0IM030.XQACD = "01";
  IN0IM030.XDMCD = "00";
  IN0IM030.SY2CLRID = "00 ";
  IN0IM030.SY1STNBR = " ";
  IN0IM030.XGPCD = " ";
  IN0IM030.XOWCD = "00";
  IN0IM030.XWHCD = " ";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISG3

// setup map key fields
Function IN0ISG4()


   /* ************************************************************/
   /* *** use current ws values to the corresponding map flds ****/
   /* *** depending on which last key has the most related    ****/
   /* *** data, if any  or  use all default values            ****/
   /* *** note: check first for SES=y to resetup scrn         ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSES == "Y")
    IN0IWX1.IN0IWSES = "N";
    IN0IM040.SY1STNBR = IN0IW04.SY1STNBR;
    IN0IM040.XGPCD = IN0IW04.XGPCD;
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

  IN0IM040.SY1STNBR = " ";
  IN0IM040.XGPCD = " ";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISG4

// setup map key fields
Function IN0ISG5()


   /* ************************************************************/
   /* *** use current ws values to the corresponding map flds ****/
   /* *** depending on which last key has the most related    ****/
   /* *** data, if any  or  use all default values            ****/
   /* *** note: check first for SES=y to resetup scrn         ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSES == "Y")
    IN0IWX1.IN0IWSES = "N";
    IN0IM050.XQACD = IN0IW05.XQACD;
    IN0IM050.XDMCD = IN0IW05.XDMCD;
    IN0IM050.SY2CLRID = IN0IW05.SY2CLRID;
    IN0IM050.SY1STNBR = IN0IW05.SY1STNBR;
    IN0IM050.XGPCD = IN0IW05.XGPCD;
    IN0IM050.XWHCD = IN0IW05.XWHCD;
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

  IN0IM050.XQACD = "01";
  IN0IM050.XDMCD = "00";
  IN0IM050.SY2CLRID = "00 ";
  IN0IM050.SY1STNBR = " ";
  IN0IM050.XGPCD = " ";
  IN0IM050.XWHCD = " ";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISG5

// ENTER processing
Function IN0ISH0()


  IN0IWX1.XXXMODID = "SH0";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* *** note: don't care if it is the same key/selection    ****/
   /* *** note: edit/valid value part of decision in flow     ****/
   /* ************************************************************/

  IN0ISA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISH0

// ENTER processing
Function IN0ISH1()


  IN0IWX1.XXXMODID = "SH1";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0ISA1(); /* <=== missing input edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* *** note: saved keys will be blank & NOT= if first time ****/
   /* ************************************************************/

  IN0ISB1(); /* <=== same key edits*/

  IN0IWX1.XXXMODID = "SH1";

  if (IN0IWX1.IN0IWSKS == "Y")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0001); /* <--- new input msg*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0ISC1(); /* <=== field edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0ISD1(); /* <=== relational edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0ISF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** use inventory header to get data for screen         ****/
   /* ************************************************************/

  IN2REC.XWHCD = IN0IM010.XWHCD;
  IN2REC.XOWCD = IN0IM010.XOWCD;
  IN2REC.XGPCD = IN0IM010.XGPCD;
  IN2REC.SY1STNBR = IN0IM010.SY1STNBR;
  IN2REC.SY2CLRID = IN0IM010.SY2CLRID;
  IN2REC.XDMCD = IN0IM010.XDMCD;
  IN2REC.XQACD = IN0IM010.XQACD;

  IN0IWX1.IN0IWLOC = "IN0ISH1 ";
  IN0ISXC(); /* <=== select in2rec row*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    set IN0IM010.XWHCD bold;
    set IN0IM010.XOWCD bold;
    set IN0IM010.XGPCD bold;
    set IN0IM010.SY1STNBR cursor, bold;
    set IN0IM010.SY2CLRID bold;
    set IN0IM010.XDMCD bold;
    set IN0IM010.XQACD bold;
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

  IN0IM010.IN0IMDNP = IN2REC.IN2SCDNP;
  IN0IM010.IN2ALCFL = IN2REC.IN2ALCFL;
  IN0IM010.IN0IMADT = IN2REC.IN2DNADT;
  IN0IM010.IN2RSVFL = IN2REC.IN2RSVFL;
  IN0IM010.IN-DNT-RSRV-XDT = IN2REC.IN-DNT-RSRV-XDT;
  IN0IM010.IN0IMFRD = IN2REC.IN2FRCDT;
  IN0IM010.IN0IMLRD = IN2REC.IN2LRCDT;
  IN0IM010.IN0IMFSD = IN2REC.IN2FSPDT;
  IN0IM010.IN0IMLSD = IN2REC.IN2LSPDT;

   /* ************************************************************/
   /* *** use inventory formatter to get size totals          ****/
   /* ************************************************************/

  set IN9REC empty;
  IN9REC.XWHCD = IN0IM010.XWHCD;
  IN9REC.XOWCD = IN0IM010.XOWCD;
  IN9REC.XGPCD = IN0IM010.XGPCD;
  IN9REC.SY1STNBR = IN0IM010.SY1STNBR;
  IN9REC.SY2CLRID = IN0IM010.SY2CLRID;
  IN9REC.XDMCD = IN0IM010.XDMCD;
  IN9REC.XQACD = IN0IM010.XQACD;
  IN9REC.XSDCD = IN0IM010.XSDCD;
  IN9REC.XSACD = IN0IM010.XSACD;
  IN9REC.XPGCD = IN0IM010.XPGCD;
  IN9REC.XUMCD = IN0IM010.XUMCD;

  IN0IWX1.IN0IWLOC = "IN0ISH1 ";
  IN0ISXT(); /* <=== inv. formatter select row*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    set IN0IM010.XWHCD bold;
    set IN0IM010.XOWCD bold;
    set IN0IM010.XGPCD bold;
    set IN0IM010.SY1STNBR cursor, bold;
    set IN0IM010.SY2CLRID bold;
    set IN0IM010.XDMCD bold;
    set IN0IM010.XQACD bold;
    set IN0IM010.XSDCD bold;
    set IN0IM010.XSACD bold;
    set IN0IM010.XPGCD bold;
    set IN0IM010.XUMCD bold;
    IN0IM010.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

  IN0IM010.IN0IMTAV = IN9REC.IN9TSZOH;

  if (IN9REC.IN9TSZAL < 0)
    IN0IM010.IN0IMTAV = IN0IM010.IN0IMTAV + IN9REC.IN9TSZAL;
  else
    IN0IM010.IN0IMTAV = IN0IM010.IN0IMTAV - IN9REC.IN9TSZAL;
  end

  if (IN9REC.IN9TSZRS < 0)
    IN0IM010.IN0IMTAV = IN0IM010.IN0IMTAV + IN9REC.IN9TSZRS;
  else
    IN0IM010.IN0IMTAV = IN0IM010.IN0IMTAV - IN9REC.IN9TSZRS;
  end

  if (IN9REC.IN9TSZSA < 0)
    IN0IM010.IN0IMTAV = IN0IM010.IN0IMTAV + IN9REC.IN9TSZSA;
  else
    IN0IM010.IN0IMTAV = IN0IM010.IN0IMTAV - IN9REC.IN9TSZSA;
  end

  if (IN9REC.IN9TSZXO < 0)
    IN0IM010.IN0IMTAV = IN0IM010.IN0IMTAV + IN9REC.IN9TSZXO;
  else
    IN0IM010.IN0IMTAV = IN0IM010.IN0IMTAV - IN9REC.IN9TSZXO;
  end

  IN0IM010.IN0IMTAL = IN9REC.IN9TSZAL;
  IN0IM010.IN0IMTRE = IN9REC.IN9TSZRS;
  IN0IM010.IN0IMTSA = IN9REC.IN9TSZSA;
  IN0IM010.IN0IMTXO = IN9REC.IN9TSZXO;
  IN0IM010.IN0IMTOH = IN9REC.IN9TSZOH;
  IN0IM010.IN0IMTXI = IN9REC.IN9TSZXI;

   /* ************************************************************/
   /* *** if special exit switch = 'y': skip the shade and    ****/
   /* *** spec diff control record reads which normally       ****/
   /* *** would have been done in rel. edits                  ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSXS == "Y")
    return;
  end

  IN0IS1D(); /* <=== shd & spc ctl rec access*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISH1

// ENTER processing
Function IN0ISH2()


  IN0IWX1.XXXMODID = "SH2";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0ISA2(); /* <=== missing input edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  IN0ISB2(); /* <=== same key edits*/

  IN0IWX1.XXXMODID = "SH2";

  if (IN0IWX1.IN0IWSKS == "Y")
     /* ************************************************************/
     /* *** if same key fields: setup error                     ****/
     /* ************************************************************/
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0001); /* <--- new input msg*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0ISC2(); /* <=== field edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0ISD2(); /* <=== relational edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0ISF2(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** no errors & new key: purge tsq                      ****/
   /* ************************************************************/

  IN0ISX2(); /* <=== purge tsq*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup all summary tsq pages              ****/
   /* ************************************************************/

  IN0ISS2(); /* <=== setup all summary pages in tsq*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for page DISPLAY processing                   ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "IN2I";
  IN0IWXP2.IN0IWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISH2

// ENTER processing
Function IN0ISH3()


  IN0IWX1.XXXMODID = "SH3";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0ISA3(); /* <=== missing input edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  IN0ISB3(); /* <=== same key edits*/

  IN0IWX1.XXXMODID = "SH3";

  if (IN0IWX1.IN0IWSKS == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (IN0IWX1.IN0IWLPF == "E")
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0001); /* <--- new input msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER & key is the same:   ****/
     /* ***   setup last pfkey = ENTER & make sure tsq is setup ****/
     /* ***   find the same subkey as on detail (& top of page) ****/
     /* ***   setup summary data lines for this page            ****/
     /* ***note: last pfkey can't be blank (first time thru)    ****/
     /* ***      re: same key checks will eq 'n'                ****/
     /* ************************************************************/
    IN0IWX1.IN0IWLPF = "E";
    IN0ISS3(); /* <=== setup all summary pages in tsq*/
    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      return;
    end
    IN0ISU3(); /* <=== match detail's subkey*/
    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INSI";
    IN0IWXP2.IN0IWXFC = "R";
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0ISC3(); /* <=== field edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0ISD3(); /* <=== relational edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  IN0ISF3(); /* <=== save current key value(s)*/

  IN0IWX1.IN0IWLPF = "E";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  IN0ISX3(); /* <=== purge both tsqs*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** use inventory header to get data for screen         ****/
   /* ************************************************************/

  IN2REC.XWHCD = IN0IM030.XWHCD;
  IN2REC.XOWCD = IN0IM030.XOWCD;
  IN2REC.XGPCD = IN0IM030.XGPCD;
  IN2REC.SY1STNBR = IN0IM030.SY1STNBR;
  IN2REC.SY2CLRID = IN0IM030.SY2CLRID;
  IN2REC.XDMCD = IN0IM030.XDMCD;
  IN2REC.XQACD = IN0IM030.XQACD;

  IN0IWX1.IN0IWLOC = "IN0ISH3 ";
  IN0ISXC(); /* <=== select in2rec row*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    set IN0IM030.XWHCD bold;
    set IN0IM030.XOWCD bold;
    set IN0IM030.XGPCD bold;
    set IN0IM030.SY1STNBR cursor, bold;
    set IN0IM030.SY2CLRID bold;
    set IN0IM030.XDMCD bold;
    set IN0IM030.XQACD bold;
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

  IN0IM030.IN2ALCFL = IN2REC.IN2ALCFL;
  IN0IM030.IN2RSVFL = IN2REC.IN2RSVFL;

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  IN0ISS3(); /* <=== setup all summary pages in tsq*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY processing                        ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "INSI";
  IN0IWXP2.IN0IWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISH3

// ENTER processing
Function IN0ISH4()


  IN0IWX1.XXXMODID = "SH4";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0ISA4(); /* <=== missing input edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  IN0ISB4(); /* <=== same key edits*/

  IN0IWX1.XXXMODID = "SH4";

  if (IN0IWX1.IN0IWSKS == "Y")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0001); /* <--- new input msg*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0ISC4(); /* <=== field edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0ISD4(); /* <=== relational edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0ISF4(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** data present & changed: purge tsq                   ****/
   /* ************************************************************/

  IN0ISX4(); /* <=== purge tsq*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  IN0ISS4(); /* <=== setup all summary pages in tsq*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY processing                        ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "IN4I";
  IN0IWXP2.IN0IWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISH4

// ENTER processing
Function IN0ISH5()


  IN0IWX1.XXXMODID = "SH5";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0ISA5(); /* <=== missing input edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  IN0ISB5(); /* <=== same key edits*/

  IN0IWX1.XXXMODID = "SH5";

  if (IN0IWX1.IN0IWSKS == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (IN0IWX1.IN0IWLPF == "E")
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0001); /* <--- new input msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER & key is the same:   ****/
     /* ***   setup last pfkey = ENTER & make sure tsq is setup ****/
     /* ***   find the same subkey as on detail (& top of page) ****/
     /* ***   setup summary data lines for this page            ****/
     /* ***note: last pfkey can't be blank (first time thru)    ****/
     /* ***      re: same key checks will eq 'n'                ****/
     /* ************************************************************/
    IN0IWX1.IN0IWLPF = "E";
    IN0ISS5(); /* <=== setup all summary pages in tsq*/
    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      return;
    end
    IN0ISU5(); /* <=== match detail's subkey*/
    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INUI";
    IN0IWXP2.IN0IWXFC = "R";
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0ISC5(); /* <=== field edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0ISD5(); /* <=== relational edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  IN0ISF5(); /* <=== save current key value(s)*/

  IN0IWX1.IN0IWLPF = "E";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  IN0ISX5(); /* <=== purge both tsqs*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end


   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  IN0ISS5(); /* <=== setup all summary pages in tsq*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY processing                        ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "INUI";
  IN0IWXP2.IN0IWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISH5

// PF6 processing
Function IN0ISI3()


  IN0IWX1.XXXMODID = "SI3";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0ISA3(); /* <=== missing input edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: IN0XWSKS = Y : same keys as last saved        ****/
   /* ************************************************************/

  IN0ISB3(); /* <=== same key edits*/

  IN0IWX1.XXXMODID = "SI3";

  if (IN0IWX1.IN0IWSKS == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (IN0IWX1.IN0IWLPF == "6")
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0001); /* <--- new input msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6 & make sure tsq is setup   ****/
     /* ***   find the same subkey as on summary (& top of page)****/
     /* ***   setup detail data lines for this page             ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    IN0IWX1.IN0IWLPF = "6";
    IN0ISV3(); /* <=== setup all detail pages in tsq*/
    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      return;
    end
    IN0ISW3(); /* <=== match summary's subkey*/
    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INDI";
    IN0IWXP2.IN0IWXFC = "R";
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0ISC3(); /* <=== field edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0ISD3(); /* <=== relational edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  IN0ISF3(); /* <=== save current key value(s)*/

  IN0IWX1.IN0IWLPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  IN0ISX3(); /* <=== purge both tsqs*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq and first page          ****/
   /* ************************************************************/

  IN0ISV3(); /* <=== setup all detail pages in tsq*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY processing                        ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "INDI";
  IN0IWXP2.IN0IWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISI3

// PF6 processing
Function IN0ISI5()


  IN0IWX1.XXXMODID = "SI5";

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0ISA5(); /* <=== missing input edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: IN0XWSKS = Y : same keys as last saved        ****/
   /* ************************************************************/

  IN0ISB5(); /* <=== same key edits*/

  IN0IWX1.XXXMODID = "SI5";

  if (IN0IWX1.IN0IWSKS == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (IN0IWX1.IN0IWLPF == "6")
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0001); /* <--- new input msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6 & make sure tsq is setup   ****/
     /* ***   find the same subkey as on summary (& top of page)****/
     /* ***   setup detail data lines for this page             ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    IN0IWX1.IN0IWLPF = "6";
    IN0ISV5(); /* <=== setup all detail pages in tsq*/
    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      return;
    end
    IN0ISW5(); /* <=== match summary's subkey*/
    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWSES = "Y";
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INEI";
    IN0IWXP2.IN0IWXFC = "R";
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0ISC5(); /* <=== field edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0ISD5(); /* <=== relational edits*/

  if (IN0IWX1.IN0IWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  IN0ISF5(); /* <=== save current key value(s)*/

  IN0IWX1.IN0IWLPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  IN0ISX5(); /* <=== purge both tsqs*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq and first page          ****/
   /* ************************************************************/

  IN0ISV5(); /* <=== setup all detail pages in tsq*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWSES = "Y";
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY processing                        ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "INEI";
  IN0IWXP2.IN0IWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISI5

// PF7 processing
Function IN0ISJ2()


  IN0IWX1.XXXMODID = "SJ2";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0ISB2(); /* <=== same key edits*/

  if (IN0IWX1.IN0IWSKS == "N")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and check for less than zero for first page         ****/
   /* ************************************************************/

  IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX - IN0IWX1.IN0IWLPP;

  if (IN0IWX1.IN0IWSIX <= 0)
    IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWLPP;
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0003); /* <--- on first page msg*/
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPALY processing                        ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "IN2I";
  IN0IWXP2.IN0IWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISJ2

// PF7 processing
Function IN0ISJ3()


  IN0IWX1.XXXMODID = "SJ3";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0ISB3(); /* <=== same key edits*/

  if (IN0IWX1.IN0IWSKS == "N")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWLPF == "E")
    IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX - IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWSIX <= 0)
      IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWLPP;
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "B";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0003); /* <--- on first page msg*/
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INSI";
    IN0IWXP2.IN0IWXFC = "R";
  else
    IN0IWX1.IN0IWDIX = IN0IWX1.IN0IWDIX - IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWDIX <= 0)
      IN0IWX1.IN0IWDIX = IN0IWX1.IN0IWDIX + IN0IWX1.IN0IWLPP;
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "C";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0003); /* <--- on first page msg*/
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INDI";
    IN0IWXP2.IN0IWXFC = "R";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISJ3

// PF7 processing
Function IN0ISJ4()


  IN0IWX1.XXXMODID = "SJ4";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0ISB4(); /* <=== same key edits*/

  if (IN0IWX1.IN0IWSKS == "N")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* ************************************************************/

  IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX - IN0IWX1.IN0IWLPP;

  if (IN0IWX1.IN0IWSIX <= 0)
    IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWLPP;
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0003); /* <--- on first page msg*/
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY processing                        ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "IN4I";
  IN0IWXP2.IN0IWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISJ4

// PF7 processing
Function IN0ISJ5()


  IN0IWX1.XXXMODID = "SJ5";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0ISB5(); /* <=== same key edits*/

  if (IN0IWX1.IN0IWSKS == "N")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWLPF == "E")
    IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX - IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWSIX <= 0)
      IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWLPP;
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "B";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0003); /* <--- on first page msg*/
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INUI";
    IN0IWXP2.IN0IWXFC = "R";
  else
    IN0IWX1.IN0IWDIX = IN0IWX1.IN0IWDIX - IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWDIX <= 0)
      IN0IWX1.IN0IWDIX = IN0IWX1.IN0IWDIX + IN0IWX1.IN0IWLPP;
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "C";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0003); /* <--- on first page msg*/
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INEI";
    IN0IWXP2.IN0IWXFC = "R";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISJ5

// PF8 processing
Function IN0ISK2()


  IN0IWX1.XXXMODID = "SK2";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0ISB2(); /* <=== same key edits*/

  if (IN0IWX1.IN0IWSKS == "N")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and check for greater than max lines for last page  ****/
   /* ************************************************************/

  IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWLPP;

  if (IN0IWX1.IN0IWSIX >= IN0IWX1.IN0IWSML)
    IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX - IN0IWX1.IN0IWLPP;
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0004); /* <--- on last page msg*/
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY processing                        ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "IN2I";
  IN0IWXP2.IN0IWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISK2

// PF8 processing
Function IN0ISK3()


  IN0IWX1.XXXMODID = "SK3";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0ISB3(); /* <=== same key edits*/

  if (IN0IWX1.IN0IWSKS == "N")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWLPF == "E")
    IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWSIX >= IN0IWX1.IN0IWSML)
      IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX - IN0IWX1.IN0IWLPP;
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "B";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0004); /* <--- on last page msg*/
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INSI";
    IN0IWXP2.IN0IWXFC = "R";
  else
    IN0IWX1.IN0IWDIX = IN0IWX1.IN0IWDIX + IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWDIX >= IN0IWX1.IN0IWDML)
      IN0IWX1.IN0IWDIX = IN0IWX1.IN0IWDIX - IN0IWX1.IN0IWLPP;
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "C";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0004); /* <--- on last page msg*/
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INDI";
    IN0IWXP2.IN0IWXFC = "R";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISK3

// PF8 processing
Function IN0ISK4()


  IN0IWX1.XXXMODID = "SK4";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0ISB4(); /* <=== same key edits*/

  if (IN0IWX1.IN0IWSKS == "N")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* ************************************************************/

  IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWLPP;

  if (IN0IWX1.IN0IWSIX >= IN0IWX1.IN0IWSML)
    IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX - IN0IWX1.IN0IWLPP;
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "B";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0004); /* <--- on last page msg*/
    return;
  end

   /* ************************************************************/
   /* *** setup for DISPLAY processing                        ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "IN4I";
  IN0IWXP2.IN0IWXFC = "R";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISK4

// PF8 processing
Function IN0ISK5()


  IN0IWX1.XXXMODID = "SK5";

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  IN0ISB5(); /* <=== same key edits*/

  if (IN0IWX1.IN0IWSKS == "N")
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0002); /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWLPF == "E")
    IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX + IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWSIX >= IN0IWX1.IN0IWSML)
      IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX - IN0IWX1.IN0IWLPP;
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "B";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0004); /* <--- on last page msg*/
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INUI";
    IN0IWXP2.IN0IWXFC = "R";
  else
    IN0IWX1.IN0IWDIX = IN0IWX1.IN0IWDIX + IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWDIX >= IN0IWX1.IN0IWDML)
      IN0IWX1.IN0IWDIX = IN0IWX1.IN0IWDIX - IN0IWX1.IN0IWLPP;
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "C";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0004); /* <--- on last page msg*/
      return;
    end
    IN0IWX1.IN0IWIX1 = 1;
    IN0IWXP2.IN0IWXAP = "INEI";
    IN0IWXP2.IN0IWXFC = "R";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISK5

// setup entire tsq
Function IN0ISS2()


  IN0IWX1.XXXMODID = "SS2";

   /* ************************************************************/
   /* *** use inventory formatter to get a row of all sizes   ****/
   /* ************************************************************/

  IN9REC.XWHCD = IN0IM020.XWHCD;
  IN9REC.XOWCD = IN0IM020.XOWCD;
  IN9REC.XGPCD = IN0IM020.XGPCD;
  IN9REC.SY1STNBR = IN0IM020.SY1STNBR;
  IN9REC.SY2CLRID = IN0IM020.SY2CLRID;
  IN9REC.XDMCD = IN0IM020.XDMCD;
  IN9REC.XQACD = IN0IM020.XQACD;
  IN9REC.XSDCD = IN0IM020.XSDCD;
  IN9REC.XSACD = IN0IM020.XSACD;
  IN9REC.XPGCD = IN0IM020.XPGCD;
  IN9REC.XUMCD = IN0IM020.XUMCD;

  IN0IWX1.IN0IWSXS = "N ";
  IN0IWX1.IN0IWLOC = "IN0ISS2 ";
  IN0ISXT(); /* <=== inv. formatter select row*/

  if (IN0IWX1.IN0IWERS == "Y")
    set IN0IM020.XWHCD bold;
    set IN0IM020.XOWCD bold;
    set IN0IM020.XGPCD bold;
    set IN0IM020.SY1STNBR cursor, bold;
    set IN0IM020.SY2CLRID bold;
    set IN0IM020.XDMCD bold;
    set IN0IM020.XQACD bold;
    set IN0IM020.XSDCD bold;
    set IN0IM020.XSACD bold;
    set IN0IM020.XPGCD bold;
    set IN0IM020.XUMCD bold;
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** if the special exit switch = 'y': read the header   ****/
   /* *** if there is a hdr, use the no size data msg already ****/
   /* *** setup and just setup the blank page --- otherwise,  ****/
   /* *** the header's not on db error & msg will take over   ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSXS == "Y")
    IN2REC.XWHCD = IN0IM020.XWHCD;
    IN2REC.XOWCD = IN0IM020.XOWCD;
    IN2REC.XGPCD = IN0IM020.XGPCD;
    IN2REC.SY1STNBR = IN0IM020.SY1STNBR;
    IN2REC.SY2CLRID = IN0IM020.SY2CLRID;
    IN2REC.XDMCD = IN0IM020.XDMCD;
    IN2REC.XQACD = IN0IM020.XQACD;
    IN0IWX1.IN0IWLOC = "IN0ISS2 ";
    IN0ISXC(); /* <=== select in2rec row*/
    if (IN0IWX1.IN0IWERS == "Y")
      set IN0IM020.XWHCD bold;
      set IN0IM020.XOWCD bold;
      set IN0IM020.XGPCD bold;
      set IN0IM020.SY1STNBR cursor, bold;
      set IN0IM020.SY2CLRID bold;
      set IN0IM020.XDMCD bold;
      set IN0IM020.XQACD bold;
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      return;
    end
     /* ************************************************************/
     /* *** write blank lines to tsq until page full            ****/
     /* *** page full = max lines/lines per pg remainder = 0    ****/
     /* ************************************************************/
    IN0IWXP2.IN0IWXAP = "IN2I";
    IN0IWXP2.IN0IWXFC = "A";
    IN0IWXP1.IN0IWXDL = " ";
    IN0IWXP1.IN0IWXRT = "B";
    IN0IWX1.IN0IWREM = 1;
    while (IN0IWX1.IN0IWREM != 0)
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "A";
        IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;
    end
    IN0IWX1.IN0IWSIX = 01;
    return;
  end

   /* ************************************************************/
   /* *** obtain all valid size translations for use as each  ****/
   /* *** summary line is setup from one of the 40 buckets    ****/
   /* ************************************************************/

  set SYPREC empty;
  SYPREC.XGPCD = IN0IM020.XGPCD;
  SYPREC.SY1STNBR = IN0IM020.SY1STNBR;
  SYPREC.SY2CLRID = IN0IM020.SY2CLRID;
  SYPREC.XDMCD = IN0IM020.XDMCD;
  SYPREC.XQACD = "**";

  IN0IWX1.IN0IWLOC = "IN0ISS2 ";
  IN0ISXM(); /* <=== obtain size translations*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** move the data from each of the size 'buckets' which ****/
   /* *** have any data greater than zero to the tsq          ****/
   /* ************************************************************/

  IN0IWX1.IN0IWSML = 0;
  IN0IWX1.IN0IWIX1 = 1;

  IN0IWXP2.IN0IWXAP = "IN2I";
  IN0IWXP2.IN0IWXFC = "A";

  while (IN0IWX1.IN0IWIX1 <= 40
   && IN0IWX1.IN0IWERS == "N")
    IN0IS2G(); /* <=== setup tsq line(s)*/
    IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
  end

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

  IN0IWX1.XXXMODID = "SS2";

   /* ************************************************************/
   /* *** write blank lines to tsq until page full            ****/
   /* *** page full = max lines/lines per pg remainder = 0    ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXDL = " ";
  IN0IWXP1.IN0IWXRT = "B";

  IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;

  while (IN0IWX1.IN0IWREM != 0)
    call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0IWXP2.IN0IWXRC == 0)
      IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
    else
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "B";
      IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;
  end

  IN0IWX1.IN0IWSIX = 01;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISS2

// setup summary tsq
Function IN0ISS3()


  IN0IWX1.XXXMODID = "SS3";

   /* ************************************************************/
   /* *** if the first record can be read:                    ****/
   /* ***   the tsq is setup and just ezertn                  ****/
   /* *** else:                                               ****/
   /* ***   use the save key to do the select set             ****/
   /* ***   read each selected row and setup all pages in tsq ****/
   /* ***   set the pointer to 1                              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if first tsq 'line' found: tsq is setup = ezertn    ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "INSI";
  IN0IWXP2.IN0IWXIX = 0001;
  IN0IWXP2.IN0IWXFC = "R";

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    return;
  else
    if (IN0IWXP2.IN0IWXRC != 4)
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** use inventory formatter to get size totals          ****/
   /* ************************************************************/

  IN9REC.XWHCD = IN0IM030.XWHCD;
  IN9REC.XOWCD = IN0IM030.XOWCD;
  IN9REC.XGPCD = IN0IM030.XGPCD;
  IN9REC.SY1STNBR = IN0IM030.SY1STNBR;
  IN9REC.SY2CLRID = IN0IM030.SY2CLRID;
  IN9REC.XDMCD = IN0IM030.XDMCD;
  IN9REC.XQACD = IN0IM030.XQACD;
  IN9REC.XSDCD = " "; /* <--- wild card*/
  IN9REC.XSACD = " "; /* <--- wild card*/
  IN9REC.XPGCD = " "; /* <--- wild card*/
  IN9REC.XUMCD = " "; /* <--- wild card*/

  IN0IWX1.IN0IWSXS = "N";
  IN0IWX1.VAGen_SQLCODE = 0;
  IN0IWX1.IN0IWLOC = "IN0ISS3 ";
  IN0ISXJ(); /* <=== use inventory formatter*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWLOC = "IN0ISS3 ";
    IN0ISXL(); /* <=== close inventory formatter*/
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** select in9rec - next row until all used             ****/
   /* *** note: no selections detected by separate 1st execute****/
   /* ***       and first time switch                         ****/
   /* ************************************************************/

  IN0IWX1.IN0IWSML = 0;

  IN0IWXP2.IN0IWXAP = "INSI";
  IN0IWXP2.IN0IWXFC = "A";

  IN0IW03.IN0IWSSK = " ";

  IN0IWX1.IN0IWFTS = "Y";
  IN0IWX1.IN0IWLOC = "IN0ISS3 ";
  IN0ISXK(); /* <=== select next inv. formatter row*/
  IN0IS3G(); /* <=== setup format/sum tsq line(s)*/
  IN0IWX1.IN0IWFTS = "N";

   /* ************************************************************/
   /* *** if special exit switch = y: setup blank page & exit ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSXS == "Y")
    IN0IWX1.IN0IWLOC = "IN0ISS3 ";
    IN0ISXL(); /* <=== close inventory formatter*/
    IN0IWXP2.IN0IWXAP = "INSI";
    IN0IWXP2.IN0IWXFC = "A";
    IN0IWXP1.IN0IWXDL = " ";
    IN0IWXP1.IN0IWXRT = "B";
    IN0IWX1.IN0IWREM = 1;
    while (IN0IWX1.IN0IWREM != 0)
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.XXXMODID = "SS3";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;
    end
    IN0IWX1.IN0IWSIX = 01;
    return;
  end

  while (IN0IWX1.VAGen_SQLCODE == 0
   && IN0IWX1.IN0IWERS == "N")
    IN0IWX1.IN0IWLOC = "IN0ISS3 ";
    IN0ISXK(); /* <=== select next inv. formatter row*/
    IN0IS3G(); /* <=== setup format/sum tsq line(s)*/
  end

  IN0IWX1.IN0IWLOC = "IN0ISS3 ";
  IN0ISXL(); /* <=== close inventory formatter*/

  if (IN0IWX1.IN0IWERS == "Y")
    set IN0IM030.XWHCD bold;
    set IN0IM030.XOWCD bold;
    set IN0IM030.XGPCD bold;
    set IN0IM030.SY1STNBR cursor, bold;
    set IN0IM030.SY2CLRID bold;
    set IN0IM030.XDMCD bold;
    set IN0IM030.XQACD bold;
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISS3

// setup summary tsq
Function IN0ISS4()


  IN0IWX1.XXXMODID = "SS4";

   /* ************************************************************/
   /* *** use alternate select set with blank warehouse       ****/
   /* ************************************************************/

  IN2REC.XWHCD = " "; /* <--- wild card*/
  IN2REC.XOWCD = " "; /* <--- wild card*/
  IN2REC.XGPCD = IN0IM040.XGPCD;
  IN2REC.SY1STNBR = IN0IM040.SY1STNBR;
  IN2REC.SY2CLRID = " "; /* <--- wild card*/
  IN2REC.XDMCD = " "; /* <--- wild card*/
  IN2REC.XQACD = " "; /* <--- wild card*/

  IN0IWX1.VAGen_SQLCODE = 0;
  IN0IWX1.IN0IWLOC = "IN0ISS4 ";
  IN0ISXN(); /* <=== use alternate warehouse select*/
                                   /* set*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWLOC = "IN0ISS4 ";
    IN0ISXP(); /* <=== close alternate warehouse select*/
                                   /* set*/
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    return;
  else
     /* ************************************************************/
     /* *** select next warehouse row until all used            ****/
     /* *** note: no selections detected by separate 1st execute****/
     /* ***       and first time switch                         ****/
     /* ************************************************************/
    IN0IWX1.IN0IWSML = 0;
    IN0IWX1.IN0IWCTR = 1;
    IN0IWXP2.IN0IWXAP = "IN4I";
    IN0IWXP2.IN0IWXFC = "A";
    IN0IWX1.IN0IWFTS = "Y";
    IN0IWX1.IN0IWLOC = "IN0ISS4 ";
    IN0ISXO(); /* <=== select next alternate row*/
    IN0IWX1.IN0IWFTS = "N";
    IN0IW04.IN0IWLWH = "  ";
    IN0IW04.IN0IWLCL = IN2REC.SY2CLRID;
    IN0IW04.IN0IWLDM = IN2REC.XDMCD;
    IN0IW04.IN0IWLQA = IN2REC.XQACD;
  end

  IN0IWX1.IN0IWLOC = "IN0ISS4 ";
  while (IN0IWX1.VAGen_SQLCODE == 0
   && IN0IWX1.IN0IWERS != "Y")
    IN0IS4B(); /* <=== setup whse code in ws line*/
    if (IN0IWX1.IN0IWERS == "N")
      if (IN2REC.SY2CLRID != IN0IW04.IN0IWLCL
       || IN2REC.XDMCD != IN0IW04.IN0IWLDM
       || IN2REC.XQACD != IN0IW04.IN0IWLQA)
        if (IN0IW04.XWHCD[1] > 0)
          IN0IS4G(); /* <=== setup format/sum tsq line(s)*/
        else
          IN0IW04.IN0IWLCL = IN2REC.SY2CLRID;
          IN0IW04.IN0IWLDM = IN2REC.XDMCD;
          IN0IW04.IN0IWLQA = IN2REC.XQACD;
          IN0IW04.IN0IWLWH = " ";
        end
      end
    else
      IN0IW04.IN0IWLCL = IN2REC.SY2CLRID;
      IN0IW04.IN0IWLDM = IN2REC.XDMCD;
      IN0IW04.IN0IWLQA = IN2REC.XQACD;
    end
  end
  if (IN0IWX1.IN0IWERS != "Y"
   && IN0IWX1.VAGen_SQLCODE == +100)
    if (IN0IW04.XWHCD[1] > 0)
      IN0IS4G(); /* <=== setup format/sum tsq line(s)*/
    end
    IN0IWX1.XXXMODID = "SS4";
    IN0IWXP1.IN0IWXDL = " ";
    IN0IWXP1.IN0IWXRT = "B";
    IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;
    while (IN0IWX1.IN0IWREM != 0)
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "A";
        IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008);
      end
      IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;
    end
    IN0IWX1.IN0IWSIX = 01;
  end

  IN0IWX1.IN0IWLOC = "IN0ISS4 ";
  IN0ISXP(); /* <=== close alternate warehouse select*/
                                   /* set*/

  if (IN0IWX1.IN0IWERS == "Y")
    set IN0IM040.XGPCD bold;
    set IN0IM040.SY1STNBR cursor, bold;
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISS4

// setup summary tsq
Function IN0ISS5()


  IN0IWX1.XXXMODID = "SS5";

   /* ************************************************************/
   /* *** if the first record can be read:                    ****/
   /* ***   the tsq is setup and just ezertn                  ****/
   /* *** else:                                               ****/
   /* ***   use the save key to do the select set             ****/
   /* ***   read each selected row and setup all pages in tsq ****/
   /* ***   set the pointer to 1                              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if first tsq 'line' found: tsq is setup = ezertn    ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "INUI";
  IN0IWXP2.IN0IWXIX = 0001;
  IN0IWXP2.IN0IWXFC = "R";

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    return;
  else
    if (IN0IWXP2.IN0IWXRC != 4)
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** use inventory formatter to get size total per row   ****/
   /* ************************************************************/

  IN9REC.XWHCD = IN0IM050.XWHCD;
  IN9REC.XOWCD = " "; /* <--- wild card*/
  IN9REC.XGPCD = IN0IM050.XGPCD;
  IN9REC.SY1STNBR = IN0IM050.SY1STNBR;
  IN9REC.SY2CLRID = IN0IM050.SY2CLRID;
  IN9REC.XDMCD = IN0IM050.XDMCD;
  IN9REC.XQACD = IN0IM050.XQACD;
  IN9REC.XSDCD = " "; /* <--- wild card*/
  IN9REC.XSACD = " "; /* <--- wild card*/
  IN9REC.XPGCD = " "; /* <--- wild card*/
  IN9REC.XUMCD = " "; /* <--- wild card*/

  IN0IWX1.IN0IWSXS = "N";
  IN0IWX1.VAGen_SQLCODE = 0;
  IN0IWX1.IN0IWLOC = "IN0ISS5 ";
  IN0ISXQ(); /* <=== use inv. formatter alt. select*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWLOC = "IN0ISS5 ";
    IN0ISXS();
                                   /* <=== close inv. formatter alt. select*/
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** select formatter rows until all used                ****/
   /* *** note: no selections detected by separate 1st execute****/
   /* ***       and first time switch                         ****/
   /* ************************************************************/

  IN0IWX1.IN0IWSML = 0;

  IN0IWXP2.IN0IWXAP = "INUI";
  IN0IWXP2.IN0IWXFC = "A";

  IN0IWX1.IN0IWFTS = "Y";
  IN0IWX1.IN0IWLOC = "IN0ISS5 ";
  IN0ISXR(); /* <=== select next inv. alt. formatter*/
  IN0IS5G(); /* <=== setup format/sum tsq line(s)*/
  IN0IWX1.IN0IWFTS = "N";

   /* ************************************************************/
   /* *** if special exit switch = 'y': setup blank page      ****/
   /* *** if the special exit switch = 'y': read the header   ****/
   /* *** if there is a hdr, use the no size data msg already ****/
   /* *** setup and just setup the blank page --- otherwise,  ****/
   /* *** the header's not on db error & msg will take over   ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSXS == "Y")
    IN0IWX1.IN0IWLOC = "IN0ISS5 ";
    IN0ISXS();
                                   /* <=== close inv. formatter alt. select*/
    IN2REC.XWHCD = IN0IM050.XWHCD;
    IN2REC.XOWCD = " ";
    IN2REC.XGPCD = IN0IM050.XGPCD;
    IN2REC.SY1STNBR = IN0IM050.SY1STNBR;
    IN2REC.SY2CLRID = IN0IM050.SY2CLRID;
    IN2REC.XDMCD = IN0IM050.XDMCD;
    IN2REC.XQACD = IN0IM050.XQACD;
    IN0IWX1.IN0IWLOC = "IN0ISS5 ";
    IN0ISXN(); /* <=== select in2rec alt set*/
    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWLOC = "IN0ISS5 ";
      IN0ISXP(); /* <=== close in2rec alt select*/
      set IN0IM050.XWHCD bold;
      set IN0IM050.XGPCD bold;
      set IN0IM050.SY1STNBR cursor, bold;
      set IN0IM050.SY2CLRID bold;
      set IN0IM050.XDMCD bold;
      set IN0IM050.XQACD bold;
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      return;
    end
    IN0IWX1.IN0IWFTS = "Y";
    IN0IWX1.IN0IWLOC = "IN0ISS5 ";
    IN0ISXO(); /* <=== select next in2rec alt set row*/
    IN0IWX1.IN0IWLOC = "IN0ISS5 ";
    IN0ISXP(); /* <=== close in2rec alt select*/
    if (IN0IWX1.IN0IWERS == "Y")
      set IN0IM050.XWHCD bold;
      set IN0IM050.XGPCD bold;
      set IN0IM050.SY1STNBR cursor, bold;
      set IN0IM050.SY2CLRID bold;
      set IN0IM050.XDMCD bold;
      set IN0IM050.XQACD bold;
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      return;
    end
     /* ************************************************************/
     /* *** write blank lines to tsq until page full            ****/
     /* *** page full = max lines/lines per pg remainder = 0    ****/
     /* ************************************************************/
    IN0IWXP2.IN0IWXAP = "INUI";
    IN0IWXP2.IN0IWXFC = "A";
    IN0IWXP1.IN0IWXDL = " ";
    IN0IWXP1.IN0IWXRT = "B";
    IN0IWX1.IN0IWREM = 1;
    while (IN0IWX1.IN0IWREM != 0)
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWSML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.XXXMODID = "SS5";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSML % IN0IWX1.IN0IWLPP;
    end
    IN0IWX1.IN0IWSIX = 01;
    return;
  end

  while (IN0IWX1.VAGen_SQLCODE == 0
   && IN0IWX1.IN0IWERS == "N")
    IN0IWX1.IN0IWLOC = "IN0ISS5 ";
    IN0ISXR(); /* <=== select next inv. alt. formatter*/
    IN0IS5G(); /* <=== setup format/sum tsq line(s)*/
  end

  IN0IWX1.IN0IWLOC = "IN0ISS5 ";
  IN0ISXS();
                                   /* <=== close inv. formatter alt. select*/

  if (IN0IWX1.IN0IWERS == "Y")
    set IN0IM050.XWHCD bold;
    set IN0IM050.XGPCD bold;
    set IN0IM050.SY1STNBR cursor, bold;
    set IN0IM050.SY2CLRID bold;
    set IN0IM050.XDMCD bold;
    set IN0IM050.XQACD bold;
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISS5

// re-set screen
Function IN0IST2()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0IM020 empty;
  set IN0IM021 initial;
  IN0IM020.XXXERRID = "IN0I220 ";
  IN0IM020.XXXMAPNM = "IN0IM020";
  IN0IWX1.IN0IWMAP = "IN0IM020";
  IN0IM020.XXXTITLE = "INVENTORY INQUIRY (SIZE DETAIL)";
  IN0IM020.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0IM020.XXXRVNBR = IN0IWX1.XXXRVNBR;
  IN0ISG2(); /* <=== setup map key fields*/
  set IN0IW02 empty;
  set IN0IWXP1 empty;
  set IN0IWXP2 empty;
  set IN9REC empty;
  set INGREC empty;
  set SYPREC empty;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXLL = 62;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IST2

// re-set screen
Function IN0IST3()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0IM030 empty;
  set IN0IM031 initial;
  set IN0IM032 initial;
  IN0IM030.XXXERRID = "IN0I320 ";
  IN0IM030.XXXMAPNM = "IN0IM030";
  IN0IWX1.IN0IWMAP = "IN0IM030";
  IN0IM030.XXXTITLE = "INVENTORY INQUIRY (SUMMARY)";
  IN0IM030.IN0I-ZFC-HDR = IN0I-WRK-HDR;
  IN0IM030.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0IM030.XXXRVNBR = IN0IWX1.XXXRVNBR;
  IN0ISG3(); /* <=== setup map key fields*/
  set IN0IW03 empty;
  set IN0IWXP1 empty;
  set IN0IWXP2 empty;
  set IN2REC empty;
  set IN9REC empty;
  set INGREC empty;
  set SYPREC empty;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXLL = 51;

   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;
  while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
    set IN0IM030.IN0IMSEL[IN0IWIX1] skip, invisible;
    IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IST3

// re-set scrn
Function IN0IST4()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0IM040 empty;
  set IN0IM041 initial;
  IN0IM040.XXXERRID = "IN0I420 ";
  IN0IM040.XXXMAPNM = "IN0IM040";
  IN0IWX1.IN0IWMAP = "IN0IM040";
  IN0IM040.XXXTITLE = "INVENTORY INQUIRY  (STYLE)";
  IN0IM040.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0IM040.XXXRVNBR = IN0IWX1.XXXRVNBR;
  IN0ISG4(); /* <=== setup map key fields*/
  set IN0IW04 empty;
  set IN0IWXP1 empty;
  set IN0IWXP2 empty;
  set IN2REC empty;
  set SY1REC empty;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXLL = 35;
  IN0IW04.IN0IWNWH = 7;

   /* ************************************************************/
   /* *** set selection field ASKIP,DARK                      ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;
  while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
    set IN0IM040.IN0IMSWH[IN0IWIX1] skip, invisible;
    IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IST4

// re-set screen
Function IN0IST5()


   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0IM050 empty;
  set IN0IM051 initial;
  set IN0IM052 initial;
  IN0IM050.XXXERRID = "IN0I520 ";
  IN0IM050.XXXMAPNM = "IN0IM050";
  IN0IWX1.IN0IWMAP = "IN0IM050";
  IN0IM050.IN0I-ZFC-HDR = IN0I-WRK-HDR;
  IN0IM050.XXXTITLE = "INVENTORY INQUIRY (OWNER GROUP)";
  IN0IM050.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0IM050.XXXRVNBR = IN0IWX1.XXXRVNBR;
  IN0ISG5(); /* <=== setup map key fields*/
  set IN0IW05 empty;
  set IN0IWXP1 empty;
  set IN0IWXP2 empty;
  set IN9REC empty;
  set INGREC empty;
  set SYPREC empty;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  IN0IWXP1.IN0IWXLL = 53;

   /* ************************************************************/
   /* *** set selection field ASKIP,DARK                      ****/
   /* ************************************************************/

  IN0IWX1.IN0IWIX1 = 1;
  while (IN0IWX1.IN0IWIX1 <= IN0IWX1.IN0IWLPP)
    set IN0IM050.IN0IMSEL[IN0IWIX1] skip, invisible;
    IN0IWX1.IN0IWIX1 = IN0IWX1.IN0IWIX1 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0IST5

// match detail's subkey
Function IN0ISU3()


  IN0IWX1.XXXMODID = "SU3";

   /* ************************************************************/
   /* *** use the summary pointer to read the tsq until the   ****/
   /* *** summary tsq record's subkey matches detail's  or    ****/
   /* *** if EOF:                                             ****/
   /* ***   reset the pointer to 1                            ****/
   /* ***   set the EOF switch = 'y'                          ****/
   /* ***   continue reading the tsq                          ****/
   /* ***   if EOF and the EOF switch = y:                    ****/
   /* ***     = second time at eof                            ****/
   /* ***     = can't match/major error                       ****/
   /* ************************************************************/

  IN0IWX1.IN0IWEOF = "N";
  IN0IWXP2.IN0IWXAP = "INSI";
  IN0IWXP2.IN0IWXFC = "R";

  while (IN0IWX1.IN0IWERS == "N")
    IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWSIX;
    call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0IWXP2.IN0IWXRC != 0)
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0IW03.IN0IWSL3 = IN0IWXP1.IN0IWXDL;
    if (IN0IW03.XSDCD == IN0IW03.IN0IWDSD
     && IN0IW03.XPGCD == IN0IW03.IN0IWDPG
     && IN0IW03.XUMCD == IN0IW03.IN0IWDUM)
      IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSIX % IN0IWX1.IN0IWLPP;
      while (IN0IWX1.IN0IWREM != 1)
        IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX - 1;
        IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSIX % IN0IWX1.IN0IWLPP;
      end
      return;
    end
    IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX + 1;
    if (IN0IWX1.IN0IWSIX > IN0IWX1.IN0IWSML)
      if (IN0IWX1.IN0IWEOF == "N")
        IN0IWX1.IN0IWSIX = 1;
        IN0IWX1.IN0IWEOF = "Y";
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- severe error msg*/
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISU3

// match detail's subkey
Function IN0ISU5()


  IN0IWX1.XXXMODID = "SU5";

   /* ************************************************************/
   /* *** use the summary pointer to read the tsq until the   ****/
   /* *** summary tsq record's subkey matches detail's  or    ****/
   /* *** if EOF:                                             ****/
   /* ***   reset the pointer to 1                            ****/
   /* ***   set the EOF switch = 'y'                          ****/
   /* ***   continue reading the tsq                          ****/
   /* ***   if EOF and the EOF switch = y:                    ****/
   /* ***     = second time at eof                            ****/
   /* ***     = can't match/major error                       ****/
   /* ************************************************************/

  IN0IWX1.IN0IWEOF = "N";
  IN0IWXP2.IN0IWXAP = "INUI";
  IN0IWXP2.IN0IWXFC = "R";

  while (IN0IWX1.IN0IWERS == "N")
    IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWSIX;
    call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0IWXP2.IN0IWXRC != 0)
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0IW05.IN0IWSL5 = IN0IWXP1.IN0IWXDL;
    if (IN0IW05.XSDCD == IN0IW05.IN0IWDSD
     && IN0IW05.XPGCD == IN0IW05.IN0IWDPG
     && IN0IW05.XUMCD == IN0IW05.IN0IWDUM
     && IN0IW05.XOWCD == IN0IW05.IN0IWDOW)
      IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSIX % IN0IWX1.IN0IWLPP;
      while (IN0IWX1.IN0IWREM != 1)
        IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX - 1;
        IN0IWX1.IN0IWREM = IN0IWX1.IN0IWSIX % IN0IWX1.IN0IWLPP;
      end
      return;
    end
    IN0IWX1.IN0IWSIX = IN0IWX1.IN0IWSIX + 1;
    if (IN0IWX1.IN0IWSIX > IN0IWX1.IN0IWSML)
      if (IN0IWX1.IN0IWEOF == "N")
        IN0IWX1.IN0IWSIX = 1;
        IN0IWX1.IN0IWEOF = "Y";
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- severe error msg*/
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISU5

// setup detail tsq
Function IN0ISV3()


  IN0IWX1.XXXMODID = "SV3";

   /* ************************************************************/
   /* *** if the first record can be read:                    ****/
   /* ***   the tsq is setup and just ezertn                  ****/
   /* *** else:                                               ****/
   /* ***   use the save key to do the select set             ****/
   /* ***   read each selected row and setup all pages in tsq ****/
   /* ***   set the pointer to 1 & save the first line subkey ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if first tsq 'line' found: tsq is setup = ezertn    ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "INDI";
  IN0IWXP2.IN0IWXIX = 0001;
  IN0IWXP2.IN0IWXFC = "R";

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    return;
  else
    if (IN0IWXP2.IN0IWXRC != 4)
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** obtain all valid size translations for use by each  ****/
   /* *** of the 40 buckets which have data                   ****/
   /* ************************************************************/

  set SYPREC empty;
  SYPREC.XGPCD = IN0IM030.XGPCD;
  SYPREC.SY1STNBR = IN0IM030.SY1STNBR;
  SYPREC.SY2CLRID = IN0IM030.SY2CLRID;
  SYPREC.XDMCD = IN0IM030.XDMCD;
  SYPREC.XQACD = "**";

  IN0IWX1.IN0IWLOC = "IN0ISV3 ";
  IN0ISXM(); /* <=== obtain size translations*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** use inventory formatter to get rows of all sizes    ****/
   /* ************************************************************/

  IN9REC.XWHCD = IN0IM030.XWHCD;
  IN9REC.XOWCD = IN0IM030.XOWCD;
  IN9REC.XGPCD = IN0IM030.XGPCD;
  IN9REC.SY1STNBR = IN0IM030.SY1STNBR;
  IN9REC.SY2CLRID = IN0IM030.SY2CLRID;
  IN9REC.XDMCD = IN0IM030.XDMCD;
  IN9REC.XQACD = IN0IM030.XQACD;
  IN9REC.XSDCD = " "; /* <--- wild card*/
  IN9REC.XSACD = " "; /* <--- wild card*/
  IN9REC.XPGCD = " "; /* <--- wild card*/
  IN9REC.XUMCD = " "; /* <--- wild card*/

  IN0IWX1.IN0IWSXS = "N";
  IN0IWX1.VAGen_SQLCODE = 0;
  IN0IWX1.IN0IWLOC = "IN0ISV3 ";
  IN0ISXJ(); /* <=== use inv. formatter select*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWLOC = "IN0ISV3 ";
    IN0ISXL(); /* <=== close inv. formatter select*/
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** select next row until entire tsq setup              ****/
   /* *** note: no selcetions detected by separate 1st execute****/
   /* ***       and first time switch                         ****/
   /* ************************************************************/

  IN0IWX1.IN0IWDML = 0;

  IN0IWXP2.IN0IWXAP = "INDI";
  IN0IWXP2.IN0IWXFC = "A";

  IN0IW03.IN0IWDSK = " ";

  IN0IWX1.IN0IWFTS = "Y";
  IN0IWX1.IN0IWLOC = "IN0ISV3 ";
  IN0ISXK(); /* <=== select next inv. formatter row*/
  IN0IS3H(); /* <=== setup det/format tsq line(s)*/
  IN0IWX1.IN0IWFTS = "N";

   /* ************************************************************/
   /* *** if special exit switch = y: setup blank page & exit ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSXS == "Y")
    IN0IWX1.IN0IWLOC = "IN0ISV3 ";
    IN0ISXL(); /* <=== close inv. formatter select*/
    IN0IWXP2.IN0IWXAP = "INDI";
    IN0IWXP2.IN0IWXFC = "A";
    IN0IWXP1.IN0IWXDL = " ";
    IN0IWXP1.IN0IWXRT = "B";
    IN0IWX1.IN0IWREM = 1;
    while (IN0IWX1.IN0IWREM != 0)
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWDML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0IWX1.IN0IWREM = IN0IWX1.IN0IWDML % IN0IWX1.IN0IWLPP;
    end
    IN0IWX1.IN0IWDIX = 01;
    return;
  end

  while (IN0IWX1.VAGen_SQLCODE == 0
   && IN0IWX1.IN0IWERS == "N")
    IN0IWX1.IN0IWLOC = "IN0ISV3 ";
    IN0ISXK(); /* <=== select next inv. formatter row*/
    IN0IS3H(); /* <=== setup det/format tsq line(s)*/
  end

  IN0IWX1.IN0IWLOC = "IN0ISV3 ";
  IN0ISXL(); /* <=== close inv. formatter select*/

  if (IN0IWX1.IN0IWERS == "Y")
    set IN0IM030.XWHCD bold;
    set IN0IM030.XOWCD bold;
    set IN0IM030.XGPCD bold;
    set IN0IM030.SY1STNBR cursor, bold;
    set IN0IM030.SY2CLRID bold;
    set IN0IM030.XDMCD bold;
    set IN0IM030.XQACD bold;
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISV3

// setup detail tsq
Function IN0ISV5()


  IN0IWX1.XXXMODID = "SV5";

   /* ************************************************************/
   /* *** if the first record can be read:                    ****/
   /* ***   the tsq is setup and just ezertn                  ****/
   /* *** else:                                               ****/
   /* ***   use the save key to do the select set             ****/
   /* ***   read each selected row and setup all pages in tsq ****/
   /* ***   set the pointer to 1 & save the first line subkey ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if first tsq 'line' found: tsq is setup = ezertn    ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "INEI";
  IN0IWXP2.IN0IWXIX = 0001;
  IN0IWXP2.IN0IWXFC = "R";

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
    return;
  else
    if (IN0IWXP2.IN0IWXRC != 4)
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** obtain all valid size translations for use by each  ****/
   /* *** of the 40 buckets which contain data                ****/
   /* ************************************************************/

  set SYPREC empty;
  SYPREC.XGPCD = IN0IM050.XGPCD;
  SYPREC.SY1STNBR = IN0IM050.SY1STNBR;
  SYPREC.SY2CLRID = IN0IM050.SY2CLRID;
  SYPREC.XDMCD = IN0IM050.XDMCD;
  SYPREC.XQACD = "**";

  IN0IWX1.IN0IWLOC = "IN0XSV5 ";
  IN0ISXM(); /* <=== obtain size translations*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** use inventory formatter to get multiple size records****/
   /* ************************************************************/

  IN9REC.XWHCD = IN0IM050.XWHCD;
  IN9REC.XOWCD = " "; /* <--- wild card*/
  IN9REC.XGPCD = IN0IM050.XGPCD;
  IN9REC.SY1STNBR = IN0IM050.SY1STNBR;
  IN9REC.SY2CLRID = IN0IM050.SY2CLRID;
  IN9REC.XDMCD = IN0IM050.XDMCD;
  IN9REC.XQACD = IN0IM050.XQACD;
  IN9REC.XSDCD = " "; /* <--- wild card*/
  IN9REC.XSACD = " "; /* <--- wild card*/
  IN9REC.XPGCD = " "; /* <--- wild card*/
  IN9REC.XUMCD = " "; /* <--- wild card*/

  IN0IWX1.VAGen_SQLCODE = 0;
  IN0IWX1.IN0IWSXS = "N";

  IN0IWX1.IN0IWLOC = "IN0XSV5 ";
  IN0ISXQ(); /* <=== use inv. formatter alt. select*/

  if (IN0IWX1.IN0IWERS == "Y")
    IN0IWX1.IN0IWLOC = "IN0XSV5 ";
    IN0ISXS();
                                   /* <=== close inv. formatter alt. select*/
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** select next formatted row until entire tsq setup    ****/
   /* *** note: no selections detected by separate 1st execute****/
   /* ***       and first time switch                         ****/
   /* ************************************************************/

  IN0IWX1.IN0IWDML = 0;

  IN0IWXP2.IN0IWXAP = "INEI";
  IN0IWXP2.IN0IWXFC = "A";

  IN0IWX1.IN0IWFTS = "Y";
  IN0IWX1.IN0IWLOC = "IN0XSV5 ";
  IN0ISXR(); /* <=== select next inv. alt. formatter*/
  IN0IS5H(); /* <=== write detail tsq line(s)*/
  IN0IWX1.IN0IWFTS = "N";

   /* ************************************************************/
   /* *** if special exit switch = 'y': setup blank page      ****/
   /* *** if the special exit switch = 'y': read the header   ****/
   /* *** if there is a hdr, use the no size data msg already ****/
   /* *** setup and just setup the blank page --- otherwise,  ****/
   /* *** the header's not on db error & msg will take over   ****/
   /* ************************************************************/

  if (IN0IWX1.IN0IWSXS == "Y")
    IN0IWX1.IN0IWLOC = "IN0XSV5 ";
    IN0ISXS();
                                   /* <=== close inv. formatter alt. select*/
    IN2REC.XWHCD = IN0IM050.XWHCD;
    IN2REC.XOWCD = " ";
    IN2REC.XGPCD = IN0IM050.XGPCD;
    IN2REC.SY1STNBR = IN0IM050.SY1STNBR;
    IN2REC.SY2CLRID = IN0IM050.SY2CLRID;
    IN2REC.XDMCD = IN0IM050.XDMCD;
    IN2REC.XQACD = IN0IM050.XQACD;
    IN0IWX1.IN0IWLOC = "IN0ISV5 ";
    IN0ISXN(); /* <=== select in2rec alt set*/
    if (IN0IWX1.IN0IWERS == "Y")
      IN0IWX1.IN0IWLOC = "IN0ISV5 ";
      IN0ISXP(); /* <=== close in2rec alt select*/
      set IN0IM050.XWHCD bold;
      set IN0IM050.XGPCD bold;
      set IN0IM050.SY1STNBR cursor, bold;
      set IN0IM050.SY2CLRID bold;
      set IN0IM050.XDMCD bold;
      set IN0IM050.XQACD bold;
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      return;
    end
    IN0IWX1.IN0IWFTS = "Y";
    IN0IWX1.IN0IWLOC = "IN0ISV5 ";
    IN0ISXO(); /* <=== select next in2rec alt set row*/
    IN0IWX1.IN0IWLOC = "IN0ISV5 ";
    IN0ISXP(); /* <=== close in2rec alt select*/
    if (IN0IWX1.IN0IWERS == "Y")
      set IN0IM050.XWHCD bold;
      set IN0IM050.XGPCD bold;
      set IN0IM050.SY1STNBR cursor, bold;
      set IN0IM050.SY2CLRID bold;
      set IN0IM050.XDMCD bold;
      set IN0IM050.XQACD bold;
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      return;
    end
     /* ************************************************************/
     /* *** write blank lines to tsq until page full            ****/
     /* *** page full = max lines/lines per pg remainder = 0    ****/
     /* ************************************************************/
    IN0IWXP2.IN0IWXAP = "INEI";
    IN0IWXP2.IN0IWXFC = "A";
    IN0IWXP1.IN0IWXDL = " ";
    IN0IWXP1.IN0IWXRT = "B";
    IN0IWX1.IN0IWREM = 1;
    while (IN0IWX1.IN0IWREM != 0)
      call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
      if (IN0IWXP2.IN0IWXRC == 0)
        IN0IWX1.IN0IWDML = IN0IWXP2.IN0IWXIX;
      else
        IN0IWX1.XXXMODID = "SV5";
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- tsq error msg*/
        return;
      end
      IN0IWX1.IN0IWREM = IN0IWX1.IN0IWDML % IN0IWX1.IN0IWLPP;
    end
    IN0IWX1.IN0IWDML = 01;
    return;
  end

  while (IN0IWX1.VAGen_SQLCODE == 0
   && IN0IWX1.IN0IWERS == "N")
    IN0IWX1.IN0IWLOC = "IN0XSV5 ";
    IN0ISXR(); /* <=== select next inv. alt. formatter*/
    IN0IS5H(); /* <=== write detail tsq line(s)*/
  end

  IN0IWX1.IN0IWLOC = "IN0XSV5 ";
  IN0ISXS();
                                   /* <=== close inv. formatter alt. select*/

  if (IN0IWX1.IN0IWERS == "Y")
    set IN0IM050.XWHCD bold;
    set IN0IM050.XGPCD bold;
    set IN0IM050.SY1STNBR cursor, bold;
    set IN0IM050.SY2CLRID bold;
    set IN0IM050.XDMCD bold;
    set IN0IM050.XQACD bold;
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISV5

// match summary subkey
Function IN0ISW3()


  IN0IWX1.XXXMODID = "SW3";

   /* ************************************************************/
   /* *** use the detail pointer to read the tsq until the    ****/
   /* *** detail tsq record's subkey matches summary's  or    ****/
   /* *** if EOF:                                             ****/
   /* ***   reset the pointer to 1                            ****/
   /* ***   set the EOF switch = 'y'                          ****/
   /* ***   continue reading the tsq                          ****/
   /* ***   if EOF and the EOF switch = y:                    ****/
   /* ***     = second time at eof                            ****/
   /* ***     = can't match/major error                       ****/
   /* *** note: incremetn det. ptr by lines per page          ****/
   /* ***       re: only top lines have sum/subkey data       ****/
   /* ************************************************************/

  IN0IWX1.IN0IWEOF = "N";
  IN0IWXP2.IN0IWXAP = "INDI";
  IN0IWXP2.IN0IWXFC = "R";

  while (IN0IWX1.IN0IWERS == "N")
    IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWDIX;
    call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0IWXP2.IN0IWXRC != 0)
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0IW03.IN0IWSL3 = IN0IWXP1.IN0IWXDL;
    if (IN0IW03.XSDCD == IN0IW03.IN0IWSSD
     && IN0IW03.XPGCD == IN0IW03.IN0IWSPG
     && IN0IW03.XUMCD == IN0IW03.IN0IWSUM)
      return;
    end
    IN0IWX1.IN0IWDIX = IN0IWX1.IN0IWDIX + IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWDIX > IN0IWX1.IN0IWDML)
      if (IN0IWX1.IN0IWEOF == "N")
        IN0IWX1.IN0IWDIX = 1;
        IN0IWX1.IN0IWEOF = "Y";
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- severe error msg*/
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISW3

// match summary subkey
Function IN0ISW5()


  IN0IWX1.XXXMODID = "SW5";

   /* ************************************************************/
   /* *** use the detail pointer to read the tsq until the    ****/
   /* *** detail tsq record's subkey matches summary's  or    ****/
   /* *** if EOF:                                             ****/
   /* ***   reset the pointer to 1                            ****/
   /* ***   set the EOF switch = 'y'                          ****/
   /* ***   continue reading the tsq                          ****/
   /* ***   if EOF and the EOF switch = y:                    ****/
   /* ***     = second time at eof                            ****/
   /* ***     = can't match/major error                       ****/
   /* *** note: incremetn det. ptr by lines per page          ****/
   /* ***       re: only top lines have sum/subkey data       ****/
   /* ************************************************************/

  IN0IWX1.IN0IWEOF = "N";
  IN0IWXP2.IN0IWXAP = "INEI";
  IN0IWXP2.IN0IWXFC = "R";

  while (IN0IWX1.IN0IWERS == "N")
    IN0IWXP2.IN0IWXIX = IN0IWX1.IN0IWDIX;
    call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};
    if (IN0IWXP2.IN0IWXRC != 0)
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXUNQID = "A";
      IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
      converseLib.validationFailed(0008); /* <--- tsq error msg*/
      return;
    end
    IN0IW05.IN0IWSL5 = IN0IWXP1.IN0IWXDL;
    if (IN0IW05.XSDCD == IN0IW05.IN0IWSSD
     && IN0IW05.XPGCD == IN0IW05.IN0IWSPG
     && IN0IW05.XUMCD == IN0IW05.IN0IWSUM
     && IN0IW05.XOWCD == IN0IW05.IN0IWSOW)
      return;
    end
    IN0IWX1.IN0IWDIX = IN0IWX1.IN0IWDIX + IN0IWX1.IN0IWLPP;
    if (IN0IWX1.IN0IWDIX > IN0IWX1.IN0IWDML)
      if (IN0IWX1.IN0IWEOF == "N")
        IN0IWX1.IN0IWDIX = 1;
        IN0IWX1.IN0IWEOF = "Y";
      else
        IN0IWX1.IN0IWERS = "Y";
        IN0IWX1.XXXUNQID = "B";
        IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
        converseLib.validationFailed(0008); /* <--- severe error msg*/
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISW5

// purge tsq
Function IN0ISX2()


   /* ************************************************************/
   /* *** if first time processing or if the key has changed: ****/
   /* *** purge tsq using ta0050                              ****/
   /* *** note: if tsq missing, rc=0 instead of expected 4    ****/
   /* *** note: as of 10-10-86, ta0050 purge doesn't change rc****/
   /* ***       therefore, added move 0 to rc first ('P' only)****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXRC = 0;

  IN0IWXP2.IN0IWXAP = "IN2I";
  IN0IWXP2.IN0IWXFC = "P";

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0)
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXMODID = "SX2";
    IN0IWX1.XXXUNQID = "A";
    IN0IM020.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISX2

// purge both tsqs
Function IN0ISX3()


   /* ************************************************************/
   /* *** if first time processing or if the key has changed: ****/
   /* *** purge both the summary and detail tsq using ta0050  ****/
   /* *** note: if tsq missing, rc=0 instead of expected 4    ****/
   /* *** note: as of 10-10-86, ta0050 purge doesn't change rc****/
   /* ***       therefore, added move 0 to rc first ('P' only)****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** purge summary tsq                                   ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "INSI";
  IN0IWXP2.IN0IWXFC = "P";

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0
   || IN0IWXP2.IN0IWXRC == 4)
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXMODID = "SX3";
    IN0IWX1.XXXUNQID = "A";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** purge detail tsq (even if error)                    ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "INDI";
  IN0IWXP2.IN0IWXFC = "P";

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0
   || IN0IWXP2.IN0IWXRC == 4)
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXMODID = "SX3";
    IN0IWX1.XXXUNQID = "B";
    IN0IM030.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISX3

// purge tsq
Function IN0ISX4()


   /* ************************************************************/
   /* *** if first time processing or if the key has changed: ****/
   /* *** purge both the summary and detail tsq using ta0050  ****/
   /* *** note: if tsq missing, rc=0 instead of expected 4    ****/
   /* *** note: as of 10-10-86, ta0050 purge doesn't change rc****/
   /* ***       therefore, added move 0 to rc first ('P' only)****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** purge summary tsq                                   ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "IN4I";
  IN0IWXP2.IN0IWXFC = "P";

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0
   || IN0IWXP2.IN0IWXRC == 4)
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXMODID = "SX4";
    IN0IWX1.XXXUNQID = "A";
    IN0IM040.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISX4

// purge both tsqs
Function IN0ISX5()


   /* ************************************************************/
   /* *** if first time processing or if the key has changed: ****/
   /* *** purge both the summary and detail tsq using ta0050  ****/
   /* *** note: if tsq missing, rc=0 instead of expected 4    ****/
   /* *** note: as of 10-10-86, ta0050 purge doesn't change rc****/
   /* ***       therefore, added move 0 to rc first ('P' only)****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** purge summary tsq                                   ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "INUI";
  IN0IWXP2.IN0IWXFC = "P";

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0
   || IN0IWXP2.IN0IWXRC == 4)
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXMODID = "SX5";
    IN0IWX1.XXXUNQID = "A";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** purge detail tsq (even if error)                    ****/
   /* ************************************************************/

  IN0IWXP2.IN0IWXAP = "INEI";
  IN0IWXP2.IN0IWXFC = "P";

  call "TA0050" (IN0IWXP1, IN0IWXP2) {isNoRefresh = yes, isExternal = yes};

  if (IN0IWXP2.IN0IWXRC == 0
   || IN0IWXP2.IN0IWXRC == 4)
     /* ** next sentence ***/
  else
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXMODID = "SX5";
    IN0IWX1.XXXUNQID = "B";
    IN0IM050.XXXERRID = IN0IWX1.XXXERRID;
    converseLib.validationFailed(0008); /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISX5

// select SY1REC row
Function IN0ISXA()


   /* ************************************************************/
   /* *** select sy1rec row                                   ****/
   /* ************************************************************/

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0IWX1.XXXMODID = "SXA";

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    converseLib.validationFailed(0013); /* <--- invalid value msg*/
    return;
  end

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- style table error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "IO0120  ";
  TA1REC.TA1LOCAT[4] = "IN0ISXA ";
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "SY1REC  ";
  TA1REC.TA1TBLVU = "VSTYLE01";
  TA1REC.TA1TBLKE = SY1REC.SY1KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXA

// select IN2REC row
Function IN0ISXC()


   /* ************************************************************/
   /* *** select in2rec row                                   ****/
   /* ************************************************************/

  call "IO0580" ("S ", SQLCA, IN2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0IWX1.XXXMODID = "SXC";

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    converseLib.validationFailed(0063); /* <--- not on db msg*/
    return;
  end

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "IO0580  ";
  TA1REC.TA1LOCAT[4] = "IN0ISXC ";
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN2REC  ";
  TA1REC.TA1TBLVU = "VINHDR01";
  TA1REC.TA1TBLKE = IN2REC.IN2KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXC

// inventory formatter select set
Function IN0ISXJ()


   /* ************************************************************/
   /* *** use inventory formatter select set                  ****/
   /* *** note: no rows still returns a 0                     ****/
   /* ************************************************************/

  call "DB1030" ("SS", INQREC, IN9REC) {isNoRefresh = yes, isExternal = yes};

  SQLCA.SQLCAREC = INQREC.INQSQLCA;

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0IWX1.XXXMODID = "SXJ";

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "A";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "SS      ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "DB1030  ";
  TA1REC.TA1LOCAT[4] = INQREC.INQFAILR;
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN9REC  ";
  TA1REC.TA1TBLVU = "4MATTER ";
  TA1REC.TA1TBLKE = IN9REC.IN9KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXJ
// select next inv. formatter row
Function IN0ISXK()


   /* ************************************************************/
   /* *** select next inventory formatter row                 ****/
   /* ************************************************************/

  call "DB1030" ("SN", INQREC, IN9REC) {isNoRefresh = yes, isExternal = yes};

  SQLCA.SQLCAREC = INQREC.INQSQLCA;

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0IWX1.VAGen_SQLCODE = +100;
    if (IN0IWX1.IN0IWFTS == "Y")
       /* ************************************************************/
       /* *** setup special exit switch: not error switch         ****/
       /* ************************************************************/
      IN0IWX1.IN0IWSXS = "Y";
      IN0IWX1.XXXMODID = "SXK";
      IN0IWX1.XXXUNQID = "A";
      converseLib.validationFailed(0015); /* <--- no size data msg*/
    end
    return;
  end

  IN0IWX1.XXXMODID = "SXK";

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "SN      ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "DB1030  ";
  TA1REC.TA1LOCAT[4] = INQREC.INQFAILR;
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN9REC  ";
  TA1REC.TA1TBLVU = "4MATTER ";
  TA1REC.TA1TBLKE = IN9REC.IN9KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXK

// close inv. formatter select
Function IN0ISXL()


   /* ************************************************************/
   /* *** close inventory formatter select set                ****/
   /* ************************************************************/

  call "DB1030" ("CS", INQREC, IN9REC) {isNoRefresh = yes, isExternal = yes};

  SQLCA.SQLCAREC = INQREC.INQSQLCA;

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    return;
  end

  IN0IWX1.XXXMODID = "SXL";

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "A";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "CS      ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "DB1030  ";
  TA1REC.TA1LOCAT[4] = INQREC.INQFAILR;
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN9REC  ";
  TA1REC.TA1TBLVU = "4MATTER ";
  TA1REC.TA1TBLKE = IN9REC.IN9KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXL

// obtain size translations
Function IN0ISXM()


   /* ************************************************************/
   /* *** use size translator to valid translations           ****/
   /* ************************************************************/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";

  call "SY1120" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  IN0IWX1.XXXMODID = "SXM";

  if (SYPREC.SYPRC < 99)
    IN0IWX1.IN0IWERS = "Y";
    IN0IWX1.XXXUNQID = "A";
    converseLib.validationFailed(0067); /* <--- not on db msg*/
    return;
  end

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "PC      ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "SY1120  ";
  TA1REC.TA1LOCAT[4] = SYPREC.SYPRC;
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "SYPREC  ";
  TA1REC.TA1TBLVU = "SZ XLATE";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXM

// special warehouse select
Function IN0ISXN()


   /* ************************************************************/
   /* *** use alternate inventory header select set           ****/
   /* *** with warehouse as a wildcard                        ****/
   /* *** note: no rows still returns a 0                     ****/
   /* ************************************************************/

  call "IO0580" ("S2", SQLCA, IN2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0IWX1.XXXMODID = "SXN";

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "A";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "S2      ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "IO0580  ";
  TA1REC.TA1LOCAT[4] = "IN0ISXN ";
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN2REC  ";
  TA1REC.TA1TBLVU = "VINHDR01";
  TA1REC.TA1TBLKE = IN2REC.IN2KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXN

// select next row of warehouses
Function IN0ISXO()


   /* ************************************************************/
   /* *** select next alterante warehoues row                 ****/
   /* ************************************************************/

  call "IO0580" ("2N", SQLCA, IN2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0IWX1.VAGen_SQLCODE = +100;
    if (IN0IWX1.IN0IWFTS == "Y")
      IN0IWX1.IN0IWERS = "Y";
      IN0IWX1.XXXMODID = "SXO";
      IN0IWX1.XXXUNQID = "A";
      converseLib.validationFailed(0066); /* <--- not on db msg*/
    end
    return;
  end

  IN0IWX1.XXXMODID = "SXO";

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "2N      ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "IO0580  ";
  TA1REC.TA1LOCAT[4] = "IN0ISXO ";
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN2REC  ";
  TA1REC.TA1TBLVU = "VINHDR01";
  TA1REC.TA1TBLKE = IN2REC.IN2KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXO

// close warehouses select
Function IN0ISXP()


   /* ************************************************************/
   /* *** close alternate warehouse select                    ****/
   /* ************************************************************/

  call "IO0580" ("C2", SQLCA, IN2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    return;
  end

  IN0IWX1.XXXMODID = "SXP";

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "A";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "C2      ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "IO0580  ";
  TA1REC.TA1LOCAT[4] = "IN0ISXP ";
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN2REC  ";
  TA1REC.TA1TBLVU = "VINHDR01";
  TA1REC.TA1TBLKE = IN2REC.IN2KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXP

// inv. formatter alt. select
Function IN0ISXQ()


   /* ************************************************************/
   /* *** use inventory formatter alternative select          ****/
   /* *** note: no rows still returns a 0                     ****/
   /* ************************************************************/

  call "DB1030" ("SA", INQREC, IN9REC) {isNoRefresh = yes, isExternal = yes};

  SQLCA.SQLCAREC = INQREC.INQSQLCA;

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0IWX1.XXXMODID = "SXQ";

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "A";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "SA      ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "DB1030  ";
  TA1REC.TA1LOCAT[4] = INQREC.INQFAILR;
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN9REC  ";
  TA1REC.TA1TBLVU = "4MATTER ";
  TA1REC.TA1TBLKE = IN9REC.IN9KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXQ

// next inv. alt. formatter
Function IN0ISXR()


   /* ************************************************************/
   /* *** select next inventory formatter row                 ****/
   /* ************************************************************/

  call "DB1030" ("FA", INQREC, IN9REC) {isNoRefresh = yes, isExternal = yes};

  SQLCA.SQLCAREC = INQREC.INQSQLCA;

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0IWX1.VAGen_SQLCODE = +100;
    if (IN0IWX1.IN0IWFTS == "Y")
       /* ************************************************************/
       /* *** setup special exit switch: not error switch         ****/
       /* ************************************************************/
      IN0IWX1.IN0IWSXS = "Y";
      IN0IWX1.XXXMODID = "SXR";
      IN0IWX1.XXXUNQID = "A";
      converseLib.validationFailed(0066); /* <--- not on db msg*/
    end
    return;
  end

  IN0IWX1.XXXMODID = "SXR";

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "FA      ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "DB1030  ";
  TA1REC.TA1LOCAT[4] = INQREC.INQFAILR;
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN9REC  ";
  TA1REC.TA1TBLVU = "4MATTER ";
  TA1REC.TA1TBLKE = IN9REC.IN9KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXR

// close inv. alt. formatter
Function IN0ISXS()


   /* ************************************************************/
   /* *** close inventory formatter select set                ****/
   /* ************************************************************/

  call "DB1030" ("CA", INQREC, IN9REC) {isNoRefresh = yes, isExternal = yes};

  SQLCA.SQLCAREC = INQREC.INQSQLCA;

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    return;
  end

  IN0IWX1.XXXMODID = "SXS";

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "A";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "CS      ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "DB1030  ";
  TA1REC.TA1LOCAT[4] = INQREC.INQFAILR;
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN9REC  ";
  TA1REC.TA1TBLVU = "4MATTER ";
  TA1REC.TA1TBLKE = IN9REC.IN9KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXS

// inv. formatter select row
Function IN0ISXT()


   /* ************************************************************/
   /* *** use inventory formatter select row                  ****/
   /* *** note: no rows returns  +100                         ****/
   /* ************************************************************/

  call "DB1030" ("S ", INQREC, IN9REC) {isNoRefresh = yes, isExternal = yes};

  SQLCA.SQLCAREC = INQREC.INQSQLCA;

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0IWX1.XXXMODID = "SXT";

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** set special exit switch - not error switch          ****/
     /* ************************************************************/
    IN0IWX1.IN0IWSXS = "Y";
    IN0IWX1.XXXUNQID = "A";
    converseLib.validationFailed(0015); /* <--- no size data msg*/
    return;
  end

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = IN0IWX1.IN0IWLOC;
  TA1REC.TA1LOCAT[3] = "DB1030  ";
  TA1REC.TA1LOCAT[4] = INQREC.INQFAILR;
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "IN9REC  ";
  TA1REC.TA1TBLVU = "4MATTER ";
  TA1REC.TA1TBLKE = IN9REC.IN9KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXT

// select dprodc.vprdcu01
Function IN0ISXW()
   /* ************************************************************/
   /* *** select dprodc.vprdcu01                              ****/
   /* ************************************************************/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  IN0IWX1.XXXMODID = "SXW";

  IN0IWX1.IN0IWERS = "Y";
  IN0IWX1.XXXUNQID = "B";
  converseLib.validationFailed(0008); /* <--- style table error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0I    ";
  TA1REC.TA1LOCAT[1] = "SG      ";
  TA1REC.TA1LOCAT[2] = "        ";
  TA1REC.TA1LOCAT[3] = "IO3340  ";
  TA1REC.TA1LOCAT[4] = "IN0ISXW ";
  TA1REC.TA1MAP = IN0IWX1.IN0IWMAP;
  TA1REC.TA1DBASE = "PC2REC  ";
  TA1REC.TA1TBLVU = "VPRDCU01";
  TA1REC.TA1TBLKE = PC2REC.PC2KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISXW

// CAITEM processing
Function IN0ISY0()


   /* ************************************************************/
   /* *** if entered, use CAITEM data as the selection no.:   ****/
   /* *** valid values checked as part of flow decision(s)    ****/
   /* *** note: CAITEM = character data                       ****/
   /* ************************************************************/

  IN0IM005.IN0IMSNO = COMMAREA.CAITEM;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0ISY0

//*** RECORD=IN0IW00 ****
// ************************************************************
// 
//           These working storage fields are initialized in
//           entry to pgm and not erased
// 
// ************************************************************
// ***********************
Record IN0IW00 type basicRecord
  10 IN0I-WRK-HDR IN0I-WRK-HDR ; 
    15 IN0I-WRK-PRICE IN0I-WRK-PRICE ; 
    15 IN0I-WRK-CUR-HDR IN0I-WRK-CUR-HDR ; 
      20 IN0I-WRK-LPRN IN0I-WRK-LPRN ; 
      20 IN0I-WRK-ZFC IN0I-WRK-ZFC ; 
      20 IN0I-WRK-RPRN IN0I-WRK-RPRN ; 
  10 IN0I-WRK-CUR-HDR-CLN IN0I-WRK-CUR-HDR-CLN ; 
    15 IN0I-WRK-CURRENCY IN0I-WRK-CURRENCY ; 
    15 IN0I-WRK-COLON IN0I-WRK-COLON ; 
end // end IN0IW00

//*** RECORD=IN0IW01 ****
// ************************************************************
// 
//           INVENTORY INQUIRY DOC. HEADER - #1
//           ==================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are initialized in
//           in0i110 and used by in0i120.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 09-08-86  Ward Jones   created
// 03-01-94  DANNAN       Added country code and currency
//                        code.  Both fields will be populated
//                        during initial edits and used in
//                        call to IO0380.
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0IW01 type basicRecord
  10 IN0IWNMD IN0IWNMD ; 
  10 IN0IWLK1 IN0IWLK1 ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSACD XSACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
  10 IN0IWMCF IN0IWMCF ; 
  10 IN0IWPCF IN0IWPCF ; 
  10 XCT-CTRY-CD XCT-CTRY-CD ; 
  10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
end // end IN0IW01

//*** RECORD=IN0IW02 ****
// ************************************************************
// 
//           INVENTORY INQUIRY (SIZE DETAIL) - #2
//           ====================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are initialized in
//           in0i210 and used by in0i220 (i.e. scrolling)
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 09-08-86  Ward Jones   created
// 09-18-96  GCULLY       Added XCT-CTRY-CD.  Used to determine
//                        authorization for viewing Canada/US
//                        inventories on the basis of sales
//                        office and warehouse location.
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0IW02 type basicRecord
  10 IN0IWLK2 IN0IWLK2 ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSACD XSACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
  10 IN0IWSL2 IN0IWSL2 ; 
    15 IN0IWSRT IN0IWSRT ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 IN0IWZAV IN0IWZAV ; 
    15 IN0IWZAL IN0IWZAL ; 
    15 IN0IWZRS IN0IWZRS ; 
    15 IN0IWZSE IN0IWZSE ; 
    15 IN0IWZXO IN0IWZXO ; 
    15 IN0IWZOH IN0IWZOH ; 
    15 IN0IWZXI IN0IWZXI ; 
  10 XCT-CTRY-CD XCT-CTRY-CD ; 
end // end IN0IW02

//*** RECORD=IN0IW03 ****
// ************************************************************
// 
//           INVENTORY INQUIRY (SUMMARY) - #3
//           ================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are initialized in
//           in0i310 and used by in0i320 (i.e. scrolling)
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 09-15-86  Ward Jones   created
// 03-01-94  DANNAN       Table Changes.
//                        Added country code and currency code.
//                        Both will be populated during initial
//                        edits and used in call to IO0380.
//                        Increased the size of the two price
//                        fields contained in this record.
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0IW03 type basicRecord
  10 IN0IWLK3 IN0IWLK3 ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
  10 IN0IWSL3 IN0IWSL3 ; 
    15 IN0IWSRT IN0IWSRT ; 
    15 XSDCD XSDCD ; 
    15 IN0IWWPC IN0IWWPC ; 
    15 XUMCD XUMCD ; 
    15 XPGCD XPGCD ; 
    15 IN0IWSAV IN0IWSAV ; 
    15 IN0IWSSE IN0IWSSE ; 
    15 IN0IWSRS IN0IWSRS ; 
    15 IN0IWSOH IN0IWSOH ; 
  10 IN0IWDL3 IN0IWDL3 ; 
    15 IN0IWDRT IN0IWDRT ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 IN0IWDAV IN0IWDAV ; 
    15 IN0IWDSE IN0IWDSE ; 
    15 IN0IWDRS IN0IWDRS ; 
    15 IN0IWDOH IN0IWDOH ; 
    15 * char(13) ; 
  10 IN0IWSSK IN0IWSSK ; 
    15 IN0IWSSD IN0IWSSD ; 
    15 IN0IWSPG IN0IWSPG ; 
    15 IN0IWSUM IN0IWSUM ; 
  10 IN0IWDSK IN0IWDSK ; 
    15 IN0IWDSD IN0IWDSD ; 
    15 IN0IWDPG IN0IWDPG ; 
    15 IN0IWDUM IN0IWDUM ; 
  10 IN0IWIUM IN0IWIUM ; 
  10 IN0IWICF IN0IWICF ; 
  10 IN0IWPUM IN0IWPUM ; 
  10 IN0IWPCF IN0IWPCF ; 
  10 IN0IWSPC IN0IWSPC ; 
  10 XCT-CTRY-CD XCT-CTRY-CD ; 
  10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
end // end IN0IW03

//*** RECORD=IN0IW04 ****
// ************************************************************
// 
//           INVENTORY INQUIRY (Style) - #4
//           ==============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are initialized in
//           in0i410 and used by in0i420 (i.e. scrolling)
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 09-27-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0IW04 type basicRecord
  10 IN0IWNWH IN0IWNWH ; 
  10 IN0IWLK4 IN0IWLK4 ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
  10 IN0IWSL4 IN0IWSL4 ; 
    15 IN0IWSRT IN0IWSRT ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 SY2CLRAB SY2CLRAB ; 
    15 XQACD XQACD ; 
    15 IN0IWWHS IN0IWWHS [7] ; 
      20 XWHCD XWHCD ; 
  10 IN0IWSK4 IN0IWSK4 ; 
    15 IN0IWSWH IN0IWSWH ; 
    15 IN0IWSCL IN0IWSCL ; 
    15 IN0IWSDM IN0IWSDM ; 
    15 IN0IWSQA IN0IWSQA ; 
  10 IN0IWLCL IN0IWLCL ; 
  10 IN0IWLDM IN0IWLDM ; 
  10 IN0IWLQA IN0IWLQA ; 
  10 IN0IWLWH IN0IWLWH ; 
end // end IN0IW04

//*** RECORD=IN0IW05 ****
// ************************************************************
// 
//           INVENTORY INQUIRY (OWNER GROUP) - #5
//           ====================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are initialized in
//           in0i510 and used by in0i520 (i.e. scrolling)
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 09-22-86  Ward Jones   created
// 03-01-94  Dannan       Table changes.
//                        Added country code and currency code
//                        to be populated in initial edits and
//                        used in call to IO0380.
//                        Increased the size of the two price
//                        fields contained in this record.
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0IW05 type basicRecord
  10 IN0IWLK5 IN0IWLK5 ; 
    15 XWHCD XWHCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
  10 IN0IWSL5 IN0IWSL5 ; 
    15 IN0IWSRT IN0IWSRT ; 
    15 XOWCD XOWCD ; 
    15 XSDCD XSDCD ; 
    15 IN0IWWPC IN0IWWPC ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 IN0IWSAV IN0IWSAV ; 
    15 IN0IWSSE IN0IWSSE ; 
    15 IN0IWSRS IN0IWSRS ; 
    15 IN0IWSOH IN0IWSOH ; 
  10 IN0IWDL5 IN0IWDL5 ; 
    15 IN0IWDRT IN0IWDRT ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 IN0IWDAV IN0IWDAV ; 
    15 IN0IWDSE IN0IWDSE ; 
    15 IN0IWDRS IN0IWDRS ; 
    15 IN0IWDOH IN0IWDOH ; 
    15 * char(15) ; 
  10 IN0IWSS5 IN0IWSS5 ; 
    15 IN0IWSOW IN0IWSOW ; 
    15 IN0IWSSD IN0IWSSD ; 
    15 IN0IWSPG IN0IWSPG ; 
    15 IN0IWSUM IN0IWSUM ; 
  10 IN0IWDS5 IN0IWDS5 ; 
    15 IN0IWDOW IN0IWDOW ; 
    15 IN0IWDSD IN0IWDSD ; 
    15 IN0IWDPG IN0IWDPG ; 
    15 IN0IWDUM IN0IWDUM ; 
  10 IN0IWIUM IN0IWIUM ; 
  10 IN0IWICF IN0IWICF ; 
  10 IN0IWPUM IN0IWPUM ; 
  10 IN0IWPCF IN0IWPCF ; 
  10 IN0IWSPC IN0IWSPC ; 
  10 XCT-CTRY-CD XCT-CTRY-CD ; 
  10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
end // end IN0IW05

//*** RECORD=IN0IWX1 ****
// ************************************************************
// 
//            COMMON WORKING STORAGE FIELDS
//            =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are generally used
//           by all applications.
// 
//           The name of this record and its fields will still
//           require customization for application uniqueness.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 09-04-86  Ward Jones   created
// 
// 04-01-87 Rick Connoly  add ws for ezemno
// 
// ************************************************************
// ************************************************************
// ***********************
Record IN0IWX1 type basicRecord
  10 IN0IWERS IN0IWERS ; 
  10 IN0IWSES IN0IWSES ; 
  10 IN0IWSKS IN0IWSKS ; 
  10 IN0IWFTS IN0IWFTS ; 
  10 IN0IWEOF IN0IWEOF ; 
  10 IN0IWSXS IN0IWSXS ; 
  10 IN0IWLPF IN0IWLPF ; 
  10 IN0IWLRL IN0IWLRL ; 
  10 IN0IWIX1 IN0IWIX1 ; 
  10 IN0IWCTR IN0IWCTR ; 
  10 IN0IWREM IN0IWREM ; 
  10 IN0IWWCF IN0IWWCF ; 
  10 VAGen_SQLCODE VAGen_SQLCODE ; 
  10 XXXRVNBR XXXRVNBR ; 
  10 XXXERRID XXXERRID ; 
    15 XXXAPPID XXXAPPID ; 
    15 XXXMODID XXXMODID ; 
    15 XXXUNQID XXXUNQID ; 
  10 IN0IWLPP IN0IWLPP ; 
  10 IN0IWSIX IN0IWSIX ; 
  10 IN0IWDIX IN0IWDIX ; 
  10 IN0IWSML IN0IWSML ; 
  10 IN0IWDML IN0IWDML ; 
  10 IN0IWCDT IN0IWCDT ; 
    15 IN0IWCCC IN0IWCCC ; 
    15 IN0IWCSD IN0IWCSD ; 
      20 IN0IWCYY IN0IWCYY ; 
      20 IN0IWCMM IN0IWCMM ; 
      20 IN0IWCDD IN0IWCDD ; 
  10 IN0IWLOC IN0IWLOC ; 
  10 IN0IWMAP IN0IWMAP ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 IN0IWMNO IN0IWMNO ; 
end // end IN0IWX1

//*** RECORD=IN0IWXP1 ****
// ************************************************************
// 
//           TA0050  PARAMTER #1:
//           ===================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used each time
//           TA0050 is called in order to pass the:
//             LL = line length
//             DL = data line
//           note: the first byte is usually reserved for the
//                 record type (RT): S = summary
//                                   D = detail
//                                   B = blank (even no.s)
//                                   M = message trigger
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 10-10-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ************************
Record IN0IWXP1 type basicRecord
  10 IN0IWXLL IN0IWXLL ; 
  10 IN0IWXDL IN0IWXDL ; 
    15 IN0IWXRT IN0IWXRT ; 
    15 * char(394) ; 
end // end IN0IWXP1

//*** RECORD=IN0IWXP2 ****
// ************************************************************
// 
//           TA0050  PARAMTER #2:
//           ===================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used each time
//           TA0050 is called in order to pass the:
//             AP = application ID
//             IX = tsq record no.
//             FC = function code
//             RC = return code
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 09-19-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ************************
Record IN0IWXP2 type basicRecord
  10 IN0IWXAP IN0IWXAP ; 
  10 IN0IWXIX IN0IWXIX ; 
  10 IN0IWXFC IN0IWXFC ; 
  10 IN0IWXRC IN0IWXRC ; 
end // end IN0IWXP2

//     colon
DataItem IN0I-WRK-COLON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   currency field
DataItem IN0I-WRK-CUR-HDR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   currency hdr m030
DataItem IN0I-WRK-CUR-HDR-CLN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     currency
DataItem IN0I-WRK-CURRENCY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w/s for price & currency hdr
DataItem IN0I-WRK-HDR char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     left paren
DataItem IN0I-WRK-LPRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   price field
DataItem IN0I-WRK-PRICE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     right paren
DataItem IN0I-WRK-RPRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     zfc code
DataItem IN0I-WRK-ZFC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date (CC)
DataItem IN0IWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (DD)
DataItem IN0IWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (CCYYMMDD)
DataItem IN0IWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (MM)
DataItem IN0IWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (YYMMDD)
DataItem IN0IWCSD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work counter
DataItem IN0IWCTR num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// current date (YY)
DataItem IN0IWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail available
DataItem IN0IWDAV num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// det data tsq rel rec nbr
DataItem IN0IWDIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// detail data line
DataItem IN0IWDL3 char(51)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// detail data line
DataItem IN0IWDL5 char(53)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// det max lines in tsq
DataItem IN0IWDML num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// detail on-hand
DataItem IN0IWDOH num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// det subkey owner group
DataItem IN0IWDOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det subkey pack code
DataItem IN0IWDPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail reserved, etc.
DataItem IN0IWDRS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// det record type
DataItem IN0IWDRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail subkey
DataItem IN0IWDS5 char(9)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// det subkey spec code
DataItem IN0IWDSD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail setaside
DataItem IN0IWDSE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// detail subkey
DataItem IN0IWDSK char(7)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// det subkey uom code
DataItem IN0IWDUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EOF (=y) switch
DataItem IN0IWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general error switch
DataItem IN0IWERS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time (=y) switch
DataItem IN0IWFTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invent uom conv fctr
DataItem IN0IWICF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inventory uom
DataItem IN0IWIUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'while' counter/index
DataItem IN0IWIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last subkey color id
DataItem IN0IWLCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last subkey dimension code
DataItem IN0IWLDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem IN0IWLK1 char(29)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem IN0IWLK2 char(29)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem IN0IWLK3 char(19)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem IN0IWLK4 char(8)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem IN0IWLK5 char(17)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// TA #1 last process/sgrp
DataItem IN0IWLOC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last pfkey (E or 6)
DataItem IN0IWLPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lines per page
DataItem IN0IWLPP num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// last subkey quality code
DataItem IN0IWLQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last rt/lft pfkey(10or11)
DataItem IN0IWLRL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last whse for owner break
DataItem IN0IWLWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TA #1 last map
DataItem IN0IWMAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map uom conversion factor
DataItem IN0IWMCF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws for ezemno
DataItem IN0IWMNO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no. of mix desc.s
DataItem IN0IWNMD num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// number of warehouses
DataItem IN0IWNWH num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// product uom conversn fctr
DataItem IN0IWPCF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product uom
DataItem IN0IWPUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work remainder field
DataItem IN0IWREM num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum available **
DataItem IN0IWSAV num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selected color ID
DataItem IN0IWSCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selected dimension code
DataItem IN0IWSDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special error switch
DataItem IN0IWSES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum data tsq rel rec nbr
DataItem IN0IWSIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// selected key
DataItem IN0IWSK4 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// same key (=y) switch
DataItem IN0IWSKS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary line
DataItem IN0IWSL2 char(62)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// summary data line
DataItem IN0IWSL3 char(51)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// summary line
DataItem IN0IWSL4 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary data line
DataItem IN0IWSL5 char(53)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum max lines in tsq
DataItem IN0IWSML num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum on-hand
DataItem IN0IWSOH num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum subkey owner group
DataItem IN0IWSOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved wholesale base price
DataItem IN0IWSPC num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum subkey pack code
DataItem IN0IWSPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selected quality code
DataItem IN0IWSQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum reserved+alocd+xfero
DataItem IN0IWSRS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum record type
DataItem IN0IWSRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary subkey
DataItem IN0IWSS5 char(9)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum subkey spec code
DataItem IN0IWSSD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum set aside
DataItem IN0IWSSE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summary subkey
DataItem IN0IWSSK char(7)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum subkey uom code
DataItem IN0IWSUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selected warehouse code
DataItem IN0IWSWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special exit switch
DataItem IN0IWSXS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work conversion factor
DataItem IN0IWWCF num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// all warehouses
DataItem IN0IWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wholesale price
DataItem IN0IWWPC num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// application ID
DataItem IN0IWXAP char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// work data line
DataItem IN0IWXDL char(395)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// function code
DataItem IN0IWXFC char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// rel rec no./index
DataItem IN0IWXIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// data (line) length
DataItem IN0IWXLL num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// return code
DataItem IN0IWXRC num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum record type
DataItem IN0IWXRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum allocated
DataItem IN0IWZAL num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sum available
DataItem IN0IWZAV num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sum on-hand
DataItem IN0IWZOH num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sum reserved
DataItem IN0IWZRS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sum setaside
DataItem IN0IWZSE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sum xfer in
DataItem IN0IWZXI num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sum xfer out
DataItem IN0IWZXO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

