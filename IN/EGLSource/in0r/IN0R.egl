package in0r;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=IN0R ****
// This application displays the Report Request Menu screen and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Reports are printed overnight and the printer
// and destination can not be changed.  A row is created for
// each report request on the dcorp.vparm101 database.  A parm
// is identified by a id code.  Batch jobs which have content-
// ion and/or other requirements can read the vparm101 datebase
// for needed parameters.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/04/89  kande1  New application.
//          02/21/90  djeran  change gpc field to alpha on map
// fix      09/10/90  cepple  Swap options 1 and 2 for month
//                            end or current on map.
// Fix      09/21/93  Hkempe  Revised INWREC, changed XXXMSGNO
//                            to XXX-MSG-NBR.
//          11/17/93  aivers  European Phase I changes.  Also
//                            enhanced call to help(Gd01).
// Canada   08/04/95  mmcgol  Added select field for warehouse
//                            to map IN0RM001, added code to
//                            edit new field to in0r015, to get
//                            new field to in0r017, & to add to
//                            in0r019. Added xwhtbl to appl and
//                            changed in0r014 to edit xwhcd
// y2kfix   01/29/98  pharwo  regen to pick up xx0xs01 changes.
// *********************
Program IN0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IN00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  IN0RW00 IN0RW00; // record
  IN0RW01 IN0RW01; // record
  INWREC INWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use IN0RM.IN0RM001,  // forms
      IN0RM.IN0RM099
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IN0R001: IN0R001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto IN0R002; /* Converse the main process*/


    IN0R002: IN0R002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto IN0R002; /* Converse the main process*/


  end // end main
end // end IN0R

// Report Requests initialization
Function IN0R001()
   /* ------------------------------------------------------------*/
   /* Perform application initialization.*/
   /* ------------------------------------------------------------*/

  XPIN001(); /* Application initialization*/

   /* ------------------------------------------------------------*/
   /* Initialize the working storage areas and variables.*/
   /* ------------------------------------------------------------*/

  set IN0RM001 initial; /* M001 input/output*/
  set IN0RM099 initial; /* M099 input/output*/
  set IN0RW00 empty; /* Working storage*/
  set IN0RW01 empty; /* Working storage*/
  set SQLCA empty; /* SQL communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set XX0XW01 empty; /* date/time subroutine parameters*/

  IN0RW00.IN0RWIXL = 1; /* Number of menu selection lines*/

end // end IN0R001

// Report Requests main process
Function IN0R002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (IN0RW00.IN0RWSWX != "Y") /* EXIT not requested*/

    if (IN0RW00.IN0RMSEL[1] == "S") /* Line 1 was selected*/
      IN0R010(); /* overnight batch inaud report req*/
    end

  end

  IN0RW00.IN0RWSWX = "N"; /* Reset exit requested switch*/

  IN0R990(); /* Report Request Menu*/


end // end IN0R002

// INAUD REPORT
Function IN0R010()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  IN0R011(); /* Format and display the map*/

  IN0R012(); /* Check attention identifier*/

  IN0R013(); /* Reset fields to normal intensity*/

  IN0R014(); /* Verify the data that was entered*/

  IN0R015(); /* Process valid input request*/


end // end IN0R010

// Format and display the map
Function IN0R011()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    INWREC.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date.*/
   /* ------------------------------------------------------------*/

  IN0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (INWREC.XXX-MSG-NBR != 0) /* Message to display*/

    if (INWREC.XXX-MSG-NBR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(INWREC.XXX-MSG-NBR);
    end /* Message number*/
    set IN0RM001 alarm; /* Indicate sound alarm*/

  end

  converse IN0RM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  INWREC.XXX-MSG-NBR = 0; /* Message number*/
  IN0RM001.XXXMODID = " "; /* Module identification*/


end // end IN0R011

// Check attention identifier
Function IN0R012()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    IN0RW00.IN0RMSEL[1] = "C"; /* Indicate selection cancelled*/

    set IN0RM001 initial; /* M001 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    IN0RW00.IN0RWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    IN0RM001.XXXMODID = "012"; /* Module identification*/
    converseLib.validationFailed(7); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end IN0R012

// Reset highlighted fields
Function IN0R013()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set IN0RM001.IN0RMINV initialAttributes; /* inventory type*/
  set IN0RM001.XGPCD initialAttributes; /* GPC*/
  set IN0RM001.IN0RMCST initialAttributes; /* cost time frame*/
  set IN0RM001.IN0RMOGP initialAttributes; /* owner group consolidation flag*/
  set IN0RM001.IN0RMRP1 initialAttributes; /* report1*/
  set IN0RM001.IN0RMRP2 initialAttributes; /* report2*/


end // end IN0R013

// Verify the entered data
Function IN0R014()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (IN0RM001.IN0RMRP2 != "Y" /* report 2 flag yes - print*/
   && IN0RM001.IN0RMRP2 != "N") /* report 2 flag no  - print*/

    IN0RM001.XXXMODID = "014"; /* Module identification*/
    set IN0RM001.IN0RMRP2 cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Indicate missing or invalid*/

  end

  if (IN0RM001.IN0RMRP1 != "Y" /* report 1 flag - yes print*/
   && IN0RM001.IN0RMRP1 != "N") /* report 1 flag - no print*/

    IN0RM001.XXXMODID = "014"; /* Module identification*/
    set IN0RM001.IN0RMRP1 cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Indicate missing or invalid*/

  end

  if (IN0RM001.IN0RMOGP != "1" /* Owner group 1 is consolidated*/
   && IN0RM001.IN0RMOGP != "2") /* Owner group 2 not consolidated*/

    IN0RM001.XXXMODID = "014"; /* Module identification*/
    set IN0RM001.IN0RMOGP cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Indicate missing or invalid*/

  end

  if (IN0RM001.IN0RMCST != "1" /* Cost Time Frame not current*/
   && IN0RM001.IN0RMCST != "2" /* Cost Time Frame not previous*/
   && IN0RM001.IN0RMCST != "3" /* Cost Time Frame not future*/
   && IN0RM001.IN0RMCST != "4" /* Cost Time Frame cur/previous*/
   && IN0RM001.IN0RMCST != "5") /* Cost Time Frame cur/future*/

    IN0RM001.XXXMODID = "014"; /* Module identification*/
    set IN0RM001.IN0RMCST cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Indicate missing or invalid*/

  end

  if (IN0RM001.XGPCD == "**") /* gpc ** for all was entered or*/
     /* next sentence*/

  else
    if (IN0RM001.XGPCD in XGPTBL.XGPCD /* code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and in active status*/

       /* next sentence*/
    else

      IN0RM001.XXXMODID = "014"; /* Module identification*/
      set IN0RM001.XGPCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(6); /* Indicate missing or invalid*/

    end
  end

    /* added 8/22/95 with Canadian project---*/

  if (IN0RM001.XWHCD == "**") /* xwh ** for all was entered*/
     /* next sentence*/

  else
    if (IN0RM001.XWHCD in XWHTBL.XWHCD /* code in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and in active status*/

       /* next sentence*/
    else

      IN0RM001.XXXMODID = "014"; /* Module identification*/
      set IN0RM001.XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(6); /* Indicate missing or invalid*/

    end
  end

  if (IN0RM001.IN0RMINV != "1" /* inventory type not current and*/
   && IN0RM001.IN0RMINV != "2") /* inventory type not month end*/

    IN0RM001.XXXMODID = "014"; /* Module identification*/
    set IN0RM001.IN0RMINV cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end IN0R014

// Process valid input request
Function IN0R015()
   /* ------------------------------------------------------------*/
   /* Format the parameter variables in working storage.*/
   /* ------------------------------------------------------------*/

  set IN0RW01 empty; /* Parameters work area*/

  if (IN0RM001.IN0RMINV == "1") /* Inventory type equal month end*/
    IN0RW01.IN0RMINV = "1"; /* 1 for month end to Inventory type*/

  else
    if (IN0RM001.IN0RMINV == "2") /* Inventory type equal current*/
      IN0RW01.IN0RMINV = "2"; /* 2 for current to Inventory type*/
    end
  end

  if (IN0RM001.XGPCD == "**") /* ** for all GPC*/
    IN0RW01.XGPCD = "99"; /* GPC*/

  else
    IN0RW01.XGPCD = IN0RM001.XGPCD; /* GPC*/
  end

   /* Added 8/3/95 with Canadian Project*/

  if (IN0RM001.XWHCD == "**") /* ** for all warehouses*/
    IN0RW01.XWHCD = "99"; /**/

  else
    IN0RW01.XWHCD = IN0RM001.XWHCD; /* selected warehouse*/
  end

  IN0RW01.IN0RMCST = IN0RM001.IN0RMCST; /* cost time frame*/
  IN0RW01.IN0RMOGP = IN0RM001.IN0RMOGP; /* owner group flag*/
  IN0RW01.IN0RMRP1 = IN0RM001.IN0RMRP1; /* report1 yes/no*/
  IN0RW01.IN0RMRP2 = IN0RM001.IN0RMRP2; /* report2 yes/no*/

   /* ------------------------------------------------------------*/
   /* declare cursor on dcorp.vparm101 and open.*/
   /* ------------------------------------------------------------*/

  IN0R016(); /* declare cursor on vparm101*/

   /* ------------------------------------------------------------*/
   /* fetch next on vparm101 until like row is found or*/
   /* end-of-table.*/
   /* ------------------------------------------------------------*/

  while (IN0RW01.IN0RWSWC != "Y") /* Until end of cursor or*/
                                  /* like row found*/

    IN0R017(); /* fetch next vparm101 row*/

  end

   /* ------------------------------------------------------------*/
   /* close cursor on dcorp.vparm101.*/
   /* ------------------------------------------------------------*/

  IN0R018(); /* close cursor on vparm101*/

   /* ------------------------------------------------------------*/
   /* if no error found, add a vparm101 row.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* error was found*/
    exit stack; /* exit to display map*/
  else
    IN0R019(); /* add a vparm101 row*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  INWREC.XXX-MSG-NBR = 135; /* Job was submitted*/
  IN0RW00.IN0RMSEL[1] = "*"; /* Indicate function completed*/

  set IN0RM001 initial; /* Clear map output area*/


end // end IN0R015

// declare cursor on vparm101
Function IN0R016()
   /* ------------------------------------------------------------*/
   /* declare cursor on the dcorp.vparm101 database using the*/
   /* i/o module   IO1000*/
   /* ------------------------------------------------------------*/

  IN0RW01.IN0RWSWC = "N"; /* end of cursor switch*/

  set XZZREC empty; /* Initialize subroutine parameters*/

  XZZREC.XZZQRYID = "IN1420"; /* query  identification*/
  XZZREC.XZZQRYRN = 0; /* query  request number*/

   /* ------------------------------------------------------------*/
   /* select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1000" ("SS", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* select table set*/

   /* ------------------------------------------------------------*/
   /* if successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call was successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* if data not available, return an error message to the user.*/
   /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  IN0RM001.XXXMODID = "016"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call was successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(136); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(8); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = IN0RM001.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* date base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* table view name*/
  TA1REC.TA1TBLKE = XZZREC.XZZQRYID; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/

end // end IN0R016

// fetch next row and process
Function IN0R017()

   /* ------------------------------------------------------------*/
   /* fetch the next row using i/o module  IO1000 , then check*/
   /* the returned row to see if it matches the entered*/
   /* parameters.  If like row, set switch to found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1000" ("SN", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch next row*/

   /* ------------------------------------------------------------*/
   /* if successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call was successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/


      /* --------------------------------------------------------*/
       /* if like row, set found switch*/
      /* --------------------------------------------------------*/

      if (XZZREC.XZZ1CHR1 == IN0RW01.IN0RMINV /* same inv type*/
       && XZZREC.XZZ1CHR2 == IN0RW01.IN0RMCST /* same time frame*/
       && XZZREC.XZZ2CHR1 == IN0RW01.XGPCD    /* same gpc*/
       && XZZREC.XZZ4CHR1 == IN0RW01.XWHCD    /* same whse Added 8/95 cana*/
       && XZZREC.XZZ2CHR2 == IN0RW01.IN0RMOGP /* same owner group*/
       && XZZREC.XZZ3CHR1 == IN0RW01.IN0RMRP1 /* same report 1*/
       && XZZREC.XZZ3CHR2 == IN0RW01.IN0RMRP2) /* same report 2*/

        IN0RW01.IN0RWSWC = "Y"; /* like row found set end cursor*/
        IN0RM001.XXXMODID = "017"; /* module identification*/
        converseLib.validationFailed(79); /* indicate like row exists*/

      end

      return;
    end

    /* ------------------------------------------------------------*/
     /* if end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* end of selected set*/

      IN0RW01.IN0RWSWC = "Y"; /* indicate end of cursor*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* if data not available, return an error message to the user.*/
   /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  IN0RM001.XXXMODID = "017"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call was successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(136); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(8); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = IN0RM001.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* date base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* table view name*/
  TA1REC.TA1TBLKE = XZZREC.XZZQRYID; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/

end // end IN0R017

// close selected set cursor
Function IN0R018()
   /* ------------------------------------------------------------*/
   /* close cursor on the dcorp.vparm101 database using the*/
   /* i/o module   IO1000*/
   /* ------------------------------------------------------------*/

  try
    call "IO1000" ("CS", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* close table set*/

   /* ------------------------------------------------------------*/
   /* if successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call was successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  IN0RM001.XXXMODID = "018"; /* module identification*/
  converseLib.validationFailed(8); /* indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = IN0RM001.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* date base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* table view name*/
  TA1REC.TA1TBLKE = XZZREC.XZZQRYID; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end IN0R018

// add report request
Function IN0R019()
   /* ------------------------------------------------------------*/
   /* add row to the dcorp.vparm101 database using the*/
   /* i/o module   IO1000*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* obtain the current date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* obtain date and time*/

  XZZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  XZZREC.ZZZSTM = XX0XW01.XX0XWTIM; /* setup time*/
   /* ------------------------------------------------------------*/
  XZZREC.XZZQRYID = "IN1420"; /* query  identification*/
  XZZREC.XZZQRYRN = 0; /* query  request number*/
  XZZREC.XZZQRYLN = 0; /* line number*/

  XZZREC.XZZCHRGP = " "; /* set group char spaces*/
  XZZREC.XZZ1CHR1 = IN0RW01.IN0RMINV; /* inventory type*/
  XZZREC.XZZ1CHR2 = IN0RW01.IN0RMCST; /* cost time frame*/
  XZZREC.XZZ2CHR1 = IN0RW01.XGPCD; /* gpc*/
  XZZREC.XZZ2CHR2 = IN0RW01.IN0RMOGP; /* owner group*/
  XZZREC.XZZ3CHR1 = IN0RW01.IN0RMRP1; /* report 1*/
  XZZREC.XZZ3CHR2 = IN0RW01.IN0RMRP2; /* report 1*/
     /* Added for Canada Project 8/03/95*/
  XZZREC.XZZ4CHR1 = IN0RW01.XWHCD; /* warehouse*/

   /* ------------------------------------------------------------*/
   /* zero the numeric parameters not used.*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZSINT1 = 0;
  XZZREC.XZZSINT2 = 0;
  XZZREC.XZZINT1 = 0;
  XZZREC.XZZINT2 = 0;
  XZZREC.XZZDECIM = 0;

   /* ------------------------------------------------------------*/
   /* add the report request row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* add a row*/

   /* ------------------------------------------------------------*/
   /* if successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call was successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* if data not available, return an error message to the user.*/
   /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  IN0RM001.XXXMODID = "019"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call was successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(136); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(8); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "ADD A ROW TO THE TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = IN0RM001.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* date base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* table view name*/
  TA1REC.TA1TBLKE = XZZREC.XZZQRYID; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/

end // end IN0R019

// Report Request Menu
Function IN0R990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  IN0R991(); /* Format and display the map*/

  IN0R992(); /* Check attention identifier*/

  IN0R993(); /* Reset fields to normal intensity*/

  IN0R994(); /* Verify the data that was entered*/

  IN0R995(); /* Process valid input request*/


end // end IN0R990

// Format and display the map
Function IN0R991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    INWREC.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set IN0RM099 initial; /* M099 input/output*/

    IN0RW00.IN0RWIXM = 1; /* Initialize map index*/

    while (IN0RW00.IN0RWIXM <= IN0RW00.IN0RWIXL) /* Until end of array*/

      IN0RM099.IN0RMSEL = IN0RW00.IN0RMSEL[IN0RWIXM];
       /* *** when more report requests added replace the above ***/
       /* *** line with the 2 following lines after combining   ***/
       /* MOVE IN0RW01.IN0RMSEL(IN0RWIXM) TO*/
                                  /* IN0RM099.IN0RMSEL(IN0RWIXM);*/

      IN0RW00.IN0RWIXM = IN0RW00.IN0RWIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  IN0RM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  IN0RM099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  IN0RM099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (INWREC.XXX-MSG-NBR != 0) /* Message to display*/

    if (INWREC.XXX-MSG-NBR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(INWREC.XXX-MSG-NBR);
    end /* Message number*/
    set IN0RM099 alarm; /* Indicate sound alarm*/

  end

  converse IN0RM099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  INWREC.XXX-MSG-NBR = 0; /* Message number*/
  IN0RM099.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = IN0RM099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = IN0RM099.CAITEM; /* Application data*/


end // end IN0R991

// Check attention identifier
Function IN0R992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set IN0RM099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    IN0RS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSINS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(137); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    IN0RM099.XXXMODID = "992"; /* Module identification*/
    set IN0RM099.CATOAP cursor, bold; /* Highlight*/

    IN0RS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "GD0L"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "IN0F"; /* TO application*/
    end

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      XSINS02(); /* Exit to help.  Using GD00.*/
    else
      XSINS01(); /* Exit to another app. Using GD01.*/
    end

    IN0RM099.XXXMODID = "992"; /* Module identification*/

    IN0RS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    IN0RM099.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(7); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    IN0RS99(); /* Exit to display map*/

  end


end // end IN0R992

// Reset highlighted fields
Function IN0R993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  IN0RW00.IN0RWIXM = 1; /* Initialize index*/

  while (IN0RW00.IN0RWIXM <= IN0RW00.IN0RWIXL) /* Until all lines are reset*/

    set IN0RM099.IN0RMSEL initialAttributes; /* Reset select field*/
     /* *** when more report requests added, replace the above *****/
     /* *** line with the following line                       *****/
     /* SET IN0RM099.IN0RMSEL(IN0RWIXM) DEFINED; Reset select field*/

    IN0RW00.IN0RWIXM = IN0RW00.IN0RWIXM + 1; /* Increment line index*/

  end

  set IN0RM099.CATOAP initialAttributes; /* TO application*/
  set IN0RM099.CAITEM initialAttributes; /* Application data*/


end // end IN0R993

// Verify the entered data
Function IN0R994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    IN0RM099.XXXMODID = "994"; /* Module identification*/
    set IN0RM099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(138); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  IN0RW00.IN0RWIXM = IN0RW00.IN0RWIXL; /* Initialize line index*/

  while (IN0RW00.IN0RWIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    /* ************************************************************/
    /* IF IN0RM099.IN0RMSEL(IN0RWIXM) NE*/
                                    /* IN0RW01.IN0RMSEL(IN0RWIXM);*/
      /* AND IN0RM099.IN0RMSEL(IN0RWIXM) NE*/
                                         /* ' '; Line was selected*/
      /* AND IN0RM099.IN0RMSEL(IN0RWIXM) NE*/
                                      /* 'S'; and not with an "S"*/
      /* ;*/
      /* SET IN0RM099.IN0RMSEL(IN0RWIXM) CURSOR,BRIGHT; Highlight*/
    /* *** when more report requests added replace the following****/
    /* *** 5 lines with the above lines after recombining them. ****/
    /* *************************************************************/
    if (IN0RM099.IN0RMSEL != IN0RW00.IN0RMSEL[IN0RWIXM]
     && IN0RM099.IN0RMSEL != " " /* Line was selected*/
     && IN0RM099.IN0RMSEL != "S") /* and not with an "S"*/

      set IN0RM099.IN0RMSEL cursor, bold; /* Highlight*/
      IN0RM099.XXXMODID = "994"; /* Module identification*/
      converseLib.validationFailed(139); /* Only "S" is valid*/

    end

    IN0RW00.IN0RWIXM = IN0RW00.IN0RWIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    IN0RS99(); /* Exit to display map*/
  end


end // end IN0R994

// Process valid input request
Function IN0R995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  IN0RW00.IN0RWIXM = 1; /* Initialize map line index*/

  while (IN0RW00.IN0RWIXM <= IN0RW00.IN0RWIXL) /* Until end of array*/

    IN0RW00.IN0RMSEL[IN0RWIXM] = IN0RM099.IN0RMSEL;
     /* *** the above line will be replaced with the following ****/
     /* *** line when more report request selection are added  ****/
     /* MOVE IN0RM099.IN0RMSEL(IN0RWIXM) TO*/
                    /* IN0RW01.IN0RMSEL(IN0RWIXM)*/

    IN0RW00.IN0RWIXM = IN0RW00.IN0RWIXM + 1; /* Increment line number*/

  end

end // end IN0R995

// Clear selections and exit
Function IN0RS99()
   /* ------------------------------------------------------------*/
   /* Reset any selections in working storage.*/
   /* ------------------------------------------------------------*/

  IN0RW00.IN0RWIXM = 1; /* Initialize map index*/

  while (IN0RW00.IN0RWIXM <= IN0RW00.IN0RWIXL) /* Until end of array*/

    if (IN0RW00.IN0RMSEL[IN0RWIXM] == "S") /* Entry is selected*/
      IN0RW00.IN0RMSEL[IN0RWIXM] = " "; /* Reset entry*/
    end

    IN0RW00.IN0RWIXM = IN0RW00.IN0RWIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end IN0RS99

// Exit to another application
Function XSINS01()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Indicate Goal Documentation*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/
  end

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

    COMMAREA.CAUSERA = INWREC.CAUSERA; /* Save user area*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    INWREC.XXXMODID = "X01"; /* Module identification*/

    converseLib.validationFailed(140); /* Indicate not allowed*/
  else
    converseLib.validationFailed(8); /* Indicate system error*/

  end


end // end XSINS01

// Exit to another application
Function XSINS02()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = "GD00"; /* Indicate Goal Documentation*/

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

    COMMAREA.CAUSERA = INWREC.CAUSERA; /* Save user area*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    INWREC.XXXMODID = "S02"; /* Module identification*/

    converseLib.validationFailed(140); /* Indicate not allowed*/
  else
    converseLib.validationFailed(8); /* Indicate system error*/

  end


end // end XSINS02

//*** RECORD=IN0RW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record IN0RW00 type basicRecord
  10 IN0RMSEL IN0RMSEL [98] ; 
  10 IN0RWIXL IN0RWIXL ; 
  10 IN0RWIXM IN0RWIXM ; 
  10 IN0RWSWX IN0RWSWX ; 
end // end IN0RW00

//*** RECORD=IN0RW01 ****
// ------------------------------------------------------------
// Parameters for in0r010 - inv overnight inaud report request
// ------------------------------------------------------------
// ***********************
Record IN0RW01 type basicRecord
  10 IN0RMINV IN0RMINV ; 
  10 XGPCD XGPCD ; 
  10 IN0RMCST IN0RMCST ; 
  10 IN0RMOGP IN0RMOGP ; 
  10 IN0RMRP1 IN0RMRP1 ; 
  10 IN0RMRP2 IN0RMRP2 ; 
  10 IN0RWSWC IN0RWSWC ; 
  10 XWHCD XWHCD ; 
end // end IN0RW01

// cost time frame
DataItem IN0RMCST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = yes
}
end

// inventory type
DataItem IN0RMINV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner group consolidated
DataItem IN0RMOGP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = yes
}
end

// report 1 gpc/whse/div/prod
DataItem IN0RMRP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report 2 gpc/prod
DataItem IN0RMRP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Menu selection field
DataItem IN0RMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem IN0RWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem IN0RWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of cursor switch
DataItem IN0RWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem IN0RWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

