package in0h;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=IN0H ****
// ************************************************************
//                  set aside inquiry
//                  =================
// ************************************************************
// 
// overview: this application allows inquiring by set aside
//           id or whse/product set aside headers and their
//           items.
//              pf1 - help system
//              pf3 - exit to previous screen
//              pf4 - return to main menu
//              pf5 - return to header browse screen
//              pf6 - jump to item browse for this header
//              pf7 - scroll back
//              pf8 - scroll forward
//              pa2 - re-display screen with no entered info
// 
// db2 tables         io/mod          csp name
// ==========         ======          ========
// 
// dinvnt.vashdr01     io0940         inarec  set aside header
// dinvnt.vasitm01     io0950         inbrec  set aside item
// dinvnt.vinitm01     io0590         in1rec  inventory item
// dprodc.vprdcu01     io3340         pc2rec
// size scale          io0040         sy4rec
// 
// maintenance history:
// ===================
// rvn
// nbr    date     by whom          overview of changes:
// ---  --------  ----------------  --------------------------
// 00   10/22/86  mark christensen  created
// 
// 01   07/21/87  j. campbell    show negative signs and expand
//                               item brouse arrays to 900.
// 
// 01   10/09/87  m. christensen added spec code to maps 30 &40
// 
// 01   05/26/88  W. Jones       deleted pf15 ezeclos(s) &
//                               made all pa2 1st in flow &
//                               made all pa2 restart appl
// 
// 02   11/02/88  j. wood        call noncsp opt added
// 
// --   04/25/89  j. wood        added xssegtr logic
// --   04/05/90  jcampb         remove xsdtbl (tbl changes)
// IN#0 10/13/92  dchian         Regenned for table changes.
// IN#0 04/19/93  tharr1         SR IN227 change abend of +100
//                               sql return code to error msg.
// IN#0 09/07/93  smacmi         made PF3 exit to alloc menu
//                               (AL0M)
// 1H0003 111693 SMACMI  European Phase I changes. Enhanced
//                       call to Help (GD01) pgm.
// IN268 06/13/94 DANNAN  Removed direct call to VCOLOR02 and
//                        replaced it with a call to a product
//                        access subroutine, IN8020.  Removed
//                        SYCREC, added INGREC.  Removed SGRP
//                        IN0HSXR.
// *********************
Program IN0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IN00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IN0HW1 IN0HW1; // record
  IN0HW2 IN0HW2; // record
  IN0HW3 IN0HW3; // record
  INAREC INAREC; // record
  INBREC INBREC; // record
  INGREC INGREC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XIRTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use IN0HM.IN0HM005,  // forms
      IN0HM.IN0HM010, 
      IN0HM.IN0HM020, 
      IN0HM.IN0HM030, 
      IN0HM.IN0HM040, 
      IN0HM.IN0HM050
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IN0H000: IN0H000();


    IN0HW1.IN0HWLPR = "IN0H000"; /* <=document last process*/

    goto IN0H005; /* <=== flow to main menu*/

     /* ------------------------------------------------------*/
     /* --- end in0h000 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0H005: IN0H005();


    if (converseVar.eventKey is pa2)
      goto IN0H000;
    end /* <=== restart appl*/

    IN0HW1.IN0HWLPR = "IN0H005"; /* <== document last process*/

     /* *******************************************************/
     /* *** if error: re-display the screen                ****/
     /* *******************************************************/

    if (IN0HW1.IN0HWERS == "Y")
      goto IN0H005; /* <=== redisplay this screen*/
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

     /* *******************************************************/
     /* *** enter  branch                                  ****/
     /* *******************************************************/

    if (converseVar.eventKey is enter)
      if (IN0HM005.IN0HMSEL == "1")
        goto IN0H008; /* <=== branch to sas id browse*/
      end
      if (IN0HM005.IN0HMSEL == "2")
        goto IN0H050; /* <=== branch to whse/prod brwse*/
      end
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/
      goto IN0H005; /* <=== redisplay this screen*/
    end

     /* *******************************************************/
     /* *** fall thru error - code shouldn't be executed   ****/
     /* *******************************************************/

    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/
    goto IN0H005; /* <=== redisplay this screen*/


     /* ------------------------------------------------------*/
     /* --- end in0h005 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0H008: IN0H008();


    IN0HW1.IN0HWLPR = "IN0H005"; /* <== document last process*/

    goto IN0H010; /* <=== flow to header browse process*/

     /* ---------------------------------------------------------*/
     /* --- end of in0h005 flow                              ---*/
     /* ---------------------------------------------------------*/
    IN0H010: IN0H010();


    if (converseVar.eventKey is pa2)
      goto IN0H000;
    end /* <=== restart appl*/

    IN0HW1.IN0HWLPR = "IN0H010"; /* <== document last process*/

     /* *******************************************************/
     /* *** if error: re-display the screen                ****/
     /* *******************************************************/

    if (IN0HW1.IN0HWERS == "Y")
      goto IN0H010; /* <=== redisplay this screen*/
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is pf3)
      goto IN0H005;
    end /* <=== go back one level*/
    if (converseVar.eventKey is pf7)
      goto IN0H010;
    end /* <=== reshow screen for scroll back*/
    if (converseVar.eventKey is pf8)
      goto IN0H010;
    end /* <=== reshow screen for scroll fwrd*/
    if (converseVar.eventKey is pf6)
      goto IN0H025;
    end /* <=== item browse screen*/

     /* *******************************************************/
     /* *** enter  branch                                  ****/
     /* *******************************************************/

    if (converseVar.eventKey is enter)
      if (IN0HW1.IN0HWBRP == "IN0H010")
        goto IN0H010; /* <=== return to this process*/
      else
        goto IN0H020; /* <=== go to header inquiry*/
      end
    end

     /* *******************************************************/
     /* *** fall thru error - code shouldn't be executed   ****/
     /* *******************************************************/

    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0008); /* <=== severe error msg*/
    goto IN0H010; /* <=== redisplay this screen*/


     /* ------------------------------------------------------*/
     /* --- end in0h010 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0H020: IN0H020();


    if (converseVar.eventKey is pa2)
      goto IN0H000;
    end /* <=== restart appl*/

     /* *******************************************************/
     /* *** if error: re-display the screen                ****/
     /* *******************************************************/

    if (IN0HW1.IN0HWERS == "Y")
      goto IN0H020; /* <=== redisplay this screen*/
      IN0HW1.IN0HWERS = "N";
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is pf3)
      if (IN0HW1.IN0HWLPR == "IN0H050")
        IN0HW1.IN0HWLPR = "IN0H020"; /* <== document last process*/
        goto IN0H050; /* <=== return to last screen*/
      else
        IN0HW1.IN0HWLPR = "IN0H020"; /* <== document last process*/
        goto IN0H010; /* <=== return to last screen*/
      end
    end

    IN0HW1.IN0HWLPR = "IN0H020"; /* <== document last process*/

     /* *******************************************************/
     /* *** enter  branch                                  ****/
     /* *******************************************************/

    if (converseVar.eventKey is enter)
      goto IN0H025;
    end /* <=== item browse*/

     /* *******************************************************/
     /* *** fall thru error - code shouldn't be executed   ****/
     /* *******************************************************/

    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0008); /* <=== severe error msg*/
    goto IN0H010; /* <=== redisplay this screen*/


     /* ------------------------------------------------------*/
     /* --- end in0h020 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0H025: IN0H025();


     /* *******************************************************/
     /* *** flow to item browse converse                   ****/
     /* *******************************************************/

    goto IN0H030;


     /* ------------------------------------------------------*/
     /* --- end in0h025 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0H030: IN0H030();


    if (converseVar.eventKey is pa2)
      goto IN0H000;
    end /* <=== restart appl*/

     /* *******************************************************/
     /* *** if error: re-display the screen                ****/
     /* *******************************************************/

    if (IN0HW1.IN0HWERS == "Y")
      goto IN0H030; /* <=== redisplay this screen*/
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is pf3)
      if (IN0HW1.IN0HWLPR != "IN0H020")
        IN0HW1.IN0HWLPR = "IN0H030";
        goto IN0H010; /* <=== return to header browse*/
      else
        IN0HW1.IN0HWLPR = "IN0H030";
        goto IN0H020; /* <=== go back one level to hdr inq*/
      end
    end
    IN0HW1.IN0HWLPR = "IN0H030"; /* <== document last process*/
    if (converseVar.eventKey is pf5)
      goto IN0H010;
    end /* <=== go back to hdr browse*/
    if (converseVar.eventKey is pf7)
      goto IN0H030;
    end /* <=== reshow screen for scroll back*/
    if (converseVar.eventKey is pf8)
      goto IN0H030;
    end /* <=== reshow screen for scroll fwrd*/

     /* *******************************************************/
     /* *** enter  branch                                  ****/
     /* *******************************************************/

    if (converseVar.eventKey is enter)
      goto IN0H040;
    end /* <=== go to item inquiry*/

     /* *******************************************************/
     /* *** fall thru error - code shouldn't be executed   ****/
     /* *******************************************************/

    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0008); /* <=== severe error msg*/
    goto IN0H030; /* <=== redisplay this screen*/


     /* ------------------------------------------------------*/
     /* --- end in0h030 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0H040: IN0H040();


    if (converseVar.eventKey is pa2)
      goto IN0H000;
    end /* <=== restart appl*/

    if (IN0HW1.IN0HWERS == "Y")
      goto IN0H040; /* <=== reshow screen if errors*/
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is pf3) /* <=== return to last logical process*/
      if (IN0HW1.IN0HWLPR == "IN0H010")
        IN0HW1.IN0HWLPR = "IN0H040";
        goto IN0H010;
      else
        if (IN0HW1.IN0HWLPR == "IN0H020")
          IN0HW1.IN0HWLPR = "IN0H040";
          goto IN0H020;
        else
          if (IN0HW1.IN0HWLPR == "IN0H050")
            IN0HW1.IN0HWLPR = "IN0H040";
            goto IN0H050;
          else
            IN0HW1.IN0HWLPR = "IN0H040";
            goto IN0H030;
          end
        end
      end
    end

    IN0HW1.IN0HWLPR = "IN0H040"; /* <=== document last process*/

    if (converseVar.eventKey is pf5) /* <=== return to header browse*/
      goto IN0H010;
    end

     /* *******************************************************/
     /* *** enter  branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is enter)
      converseLib.validationFailed(0084); /* <=== no fastpath selection made*/
      goto IN0H040; /* <=== repeat screen*/
    end

     /* ------------------------------------------------------*/
     /* --- end in0h040 flow                               ---*/
     /* ------------------------------------------------------*/


    IN0H050: IN0H050();


    if (converseVar.eventKey is pa2)
      goto IN0H000;
    end /* <=== restart appl*/

    IN0HW1.IN0HWLPR = "IN0H050"; /* <== document last process*/

     /* *******************************************************/
     /* *** if error: re-display the screen                ****/
     /* *******************************************************/

    if (IN0HW1.IN0HWERS == "Y")
      goto IN0H050; /* <=== redisplay this screen*/
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is pf3)
      goto IN0H005;
    end /* <=== exit to setaside menu*/
    if (converseVar.eventKey is pf7)
      goto IN0H050;
    end /* <=== reshow screen for scroll back*/
    if (converseVar.eventKey is pf8)
      goto IN0H050;
    end /* <=== reshow screen for scroll fwrd*/
    if (converseVar.eventKey is pf5)
      goto IN0H020;
    end /* <=== header inquiry*/
    if (converseVar.eventKey is pf6)
      goto IN0H040;
    end /* <=== item inquiry*/

     /* *******************************************************/
     /* *** enter  branch                                  ****/
     /* *******************************************************/

    if (converseVar.eventKey is enter)
      goto IN0H050;
    end /* <=== reshow this screen*/

     /* *******************************************************/
     /* *** fall thru error - code shouldn't be executed   ****/
     /* *******************************************************/

    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0008); /* <=== severe error msg*/
    goto IN0H050; /* <=== redisplay this screen*/


     /* ------------------------------------------------------*/
     /* --- end in0h050 flow                               ---*/
     /* ------------------------------------------------------*/
  end // end main
end // end IN0H

// initialize
Function IN0H000()

   /* ******************************************************/
   /* *** standard security checking                    ****/
   /* ******************************************************/
      /* check entry security*/

  XSENTRY();

  XSSEGTR(); /* set segmented transaction id*/

   /* ******************************************************/
   /* *** initialize records                            ****/
   /* ******************************************************/

  set IN0HW1 empty;
  set IN0HW2 empty;
  set IN0HW3 empty;
  set INAREC empty;
  set INBREC empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  set INGREC empty;
  set SY4REC empty;
  set TA1REC empty;


   /* ******************************************************/
   /* *** initialize current date field to include cent.****/
   /* ******************************************************/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = VGVar.currentShortGregorianDate;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0HW1.IN0HWCDT = TA2REC.TA2GRGGN;
  else
    converseLib.validationFailed(17); /* <=== internal date error msg*/
    exit stack;
  end

   /* ******************************************************/
   /* *** init indexes                                  ****/
   /* ******************************************************/

  IN0HW2.IN0HWHIX = 1;
  IN0HW2.IN0HWIIX = 1;
  IN0HW2.IN0HWHMX = 500; /* <=== max entries for hdr array*/
  IN0HW2.IN0HWIMX = 990; /* <=== max entries for itm array*/
  IN0HW3.IN0HWWMX = 500; /* <=== max entries for whse/prod array*/

   /* -----------------------------------------------------*/
   /* --- end of in0h000 process                        ---*/
   /* -----------------------------------------------------*/

end // end IN0H000

// main menu
Function IN0H005()
   /* **********************************************************/
   /* *** format set aside inquiry main menu                ****/
   /* **********************************************************/

  IN0HS02();

  converse IN0HM005 ;
   /* **********************************************************/
   /* *** edit for main menu                                ****/
   /* **********************************************************/

  IN0HS05();

   /* ---------------------------------------------------------*/
   /* --- end of in0h005 process                            ---*/
   /* ---------------------------------------------------------*/

end // end IN0H005

// build header array for browse
Function IN0H008()
   /* ******************************************************/
   /* *** build header array for browse - 1st time thru ****/
   /* ******************************************************/

  set IN0HM010 initial; /* <=== init header browse map*/

  set INAREC empty;
  IN0HSXA(); /* <=== select header set all*/

  IN0HW1.IN0HWFTS = "Y"; /* <=== set first time thru switch*/
  IN0HSXB(); /* <=== first select next*/
  if (IN0HW1.IN0HWERS == "Y") /* <=== db error - no sas hdrs*/
    exit stack;
  end


  IN0HW1.IN0HWFTS = "N";

  IN0HW2.IN0HWHIX = 1;
  IN0HW1.IN0HWIX1 = 1;
  while (SQLCA.VAGen_SQLCODE == 0 /* <=== loop to fill browse array*/
   && IN0HW1.IN0HWIX1 <= IN0HW2.IN0HWHMX) /* <=== le max entries*/
    IN0HW2.INASAID[IN0HWHIX] = INAREC.INASAID; /* <=== save hdr key*/
    IN0HSXB(); /* <=== select next header*/
    IN0HW2.IN0HWHIX = IN0HW2.IN0HWHIX + 1;
    IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 + 1;
  end
  IN0HSXC(); /* <=== close set aside header db*/

  IN0HW2.IN0HWHPP = 1; /* <=== initialize page pointer*/
  IN0HW2.IN0HWHIX = IN0HW2.IN0HWHIX - 1;
  IN0HW2.IN0HWHAB = IN0HW2.IN0HWHIX; /* <=== set array bottom ptr*/
  IN0HW2.IN0HWHIX = 1; /* <=== initialize array index*/

   /* -----------------------------------------------------*/
   /* --- end of in0h005 process                        ---*/
   /* -----------------------------------------------------*/

end // end IN0H008

// browse set aside headers
Function IN0H010()
   /* **********************************************************/
   /* *** format header browse map                          ****/
   /* **********************************************************/

  IN0HS10();

  converse IN0HM010 ;
   /* **********************************************************/
   /* *** edit header browse map                            ****/
   /* **********************************************************/

  IN0HS50();

   /* ---------------------------------------------------------*/
   /* --- end of in0h010 process                            ---*/
   /* ---------------------------------------------------------*/

end // end IN0H010

// inquiry  set aside header
Function IN0H020()
   /* **********************************************************/
   /* *** format in0hm020 map - header inquiry screen    *******/
   /* **********************************************************/

  IN0HS12();

  converse IN0HM020 ;

   /* **********************************************************/
   /* *** edit in0hm020 map - header maintenance screen  *******/
   /* **********************************************************/

  IN0HS54();


   /* ---------------------------------------------------------*/
   /* --- end of in0hm020 process                        ------*/
   /* ---------------------------------------------------------*/
end // end IN0H020

// build item array for browse
Function IN0H025()


   /* ********************************************************/
   /* *** build item array for item browse screen         ****/
   /* ********************************************************/

  set IN0HM030 initial; /* <=== init item browse map*/

  set INBREC empty;
  INBREC.INASAID = IN0HW2.INASAID[IN0HWHIX];
  IN0HSXE(); /* <=== select item set*/
  if (IN0HW1.IN0HWERS == "Y")
    exit stack;
  end

  IN0HSXF(); /* <=== first select next*/
  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(0069);
    IN0HW1.IN0HWERS = "Y";
    exit stack;
  end


  IN0HW2.IN0HWIIX = 1;
  IN0HW1.IN0HWIX1 = 1;
  while (SQLCA.VAGen_SQLCODE == 0 /* <=== loop to fill browse array*/
   && IN0HW1.IN0HWIX1 <= IN0HW2.IN0HWIMX) /* <=== le max entries*/
    IN0HW2.IN0HWSAI[IN0HWIIX] = INBREC.INASAID; /* <=== save itm key*/
    IN0HW2.XWHCD[IN0HWIIX] = INBREC.XWHCD;
    IN0HW2.XOWCD[IN0HWIIX] = INBREC.XOWCD;
    IN0HW2.XGPCD[IN0HWIIX] = INBREC.XGPCD;
    IN0HW2.SY1STNBR[IN0HWIIX] = INBREC.SY1STNBR;
    IN0HW2.SY2CLRID[IN0HWIIX] = INBREC.SY2CLRID;
    IN0HW2.XDMCD[IN0HWIIX] = INBREC.XDMCD;
    IN0HW2.XQACD[IN0HWIIX] = INBREC.XQACD;
    IN0HW2.XSDCD[IN0HWIIX] = INBREC.XSDCD;
    IN0HW2.XSACD[IN0HWIIX] = INBREC.XSACD;
    IN0HW2.XPGCD[IN0HWIIX] = INBREC.XPGCD;
    IN0HW2.XUMCD[IN0HWIIX] = INBREC.XUMCD;
    IN0HW2.INBSATOT[IN0HWIIX] = INBREC.INBSATOT;
    IN0HSXF(); /* <=== select next item*/
    IN0HW2.IN0HWIIX = IN0HW2.IN0HWIIX + 1;
    IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 + 1;
  end
  IN0HSXG(); /* <=== close set aside items*/

  IN0HW2.IN0HWIPP = 1; /* <=== initialize page pointer*/
  IN0HW2.IN0HWIIX = IN0HW2.IN0HWIIX - 1;
  IN0HW2.IN0HWIAB = IN0HW2.IN0HWIIX; /* <=== set array bottom ptr*/
  IN0HW2.IN0HWIIX = 1; /* <=== initialize array index*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


   /* -------------------------------------------------------*/
   /* --- end of in0h025 - prepare item browse process    ---*/
   /* -------------------------------------------------------*/


end // end IN0H025

// browse set aside items
Function IN0H030()
   /* **********************************************************/
   /* *** format in0hm030 - item browse screen              ****/
   /* **********************************************************/

  IN0HS16();


  converse IN0HM030 ;

   /* **********************************************************/
   /* *** main edit                                         ****/
   /* **********************************************************/

  IN0HS57();


   /* ---------------------------------------------------------*/
   /* --- end of in0h030 - item browse process              ---*/
   /* ---------------------------------------------------------*/
end // end IN0H030

// inquiry set aside item
Function IN0H040()
   /* **********************************************************/
   /* *** format in0hm040 map to show size information      ****/
   /* **********************************************************/

  IN0HS18();

  converse IN0HM040 ;

   /* **********************************************************/
   /* *** edit in0hm040 map - validate input set aside   *******/
   /* *** quantities                                     *******/
   /* **********************************************************/

  IN0HS67();


   /* ---------------------------------------------------------*/
   /* --- end of in0h040 process                         ------*/
   /* ---------------------------------------------------------*/
end // end IN0H040

// warehouse/product itm brwse
Function IN0H050()
   /* **********************************************************/
   /* *** format whse/prod browse map                       ****/
   /* **********************************************************/

  IN0HS30();

  converse IN0HM050 ;
   /* **********************************************************/
   /* *** edit whse/prod browse map                         ****/
   /* **********************************************************/

  IN0HS70();

  if (IN0HW1.IN0HWERS == "Y")
    exit stack;
  end

   /* **********************************************************/
   /* *** build whse/prod browse array                      ****/
   /* *** - only branch to building array if new item indexes **/
   /* ***   were chosen                                     ****/
   /* **********************************************************/

  if (IN0HW1.IN0HWBRP == "IN0HS90")
    IN0HS90();
  end

   /* ---------------------------------------------------------*/
   /* --- end of in0h050 process                            ---*/
   /* ---------------------------------------------------------*/

end // end IN0H050

// Check IN8020 return code
Function IN0HS-IN8020-ERRS()
   /*  */
   /* Check IN8020 return codes.  All return codes except zero (no*/
   /* errors) are posted.  A screen message for DB2 deadlock*/
   /* (8000).*/
   /*  */

  if (INGREC.ING-RETURN-CD == 8000) /* DB2 deadlock*/
    converseLib.validationFailed(136);
    return;
  else
    if (INGREC.ING-RETURN-CD <= 2300) /* Edit error or row not found*/
      converseLib.validationFailed(169);
    end
  end

  TA1REC.TA1-GROUP = INGREC.TA1-GROUP;
  TAEREC.SQLCAREC = INGREC.SQLCAREC;

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TA1REC.TA1TBLKE = INGREC.ING-INPUT-DATA; /* IN8020 parameters*/
  TA1REC.TA1FUNC = "POST";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end IN0HS-IN8020-ERRS

// format main menu
Function IN0HS02()


   /* *******************************************************/
   /* *** format main menu screen                        ****/
   /* *******************************************************/

  if (IN0HW1.IN0HWERS == "Y") /* <=== db or edit errors*/
    IN0HW1.IN0HWERS = "N";
    return;
  end

  set IN0HM005 initial;
  IN0HM005.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0HM005.IN0HMSEL = " ";

   /* *******************************************************/
   /* *** initialize whse/prod browse pointers           ****/
   /* *******************************************************/

  IN0HW3.IN0HWWPP = 1;
  IN0HW3.IN0HWWAB = 0;
  IN0HW1.IN0HWBRP = " ";

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HS02

// pfkey/fast path edit
Function IN0HS05()

   /* ******************************************************/
   /* *** if fast path entered: exit immediately        ****/
   /* ******************************************************/

  if (IN0HM005.CATOAP > " ")
    COMMAREA.CATOAP = IN0HM005.CATOAP;
    COMMAREA.CAITEM = IN0HM005.CAITEM;
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM005.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0HM005.CATOAP cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** reset error switch, std fields & cursor position**/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "N";
  IN0HM005.VAGen_EZEMSG = " ";
  set IN0HM005.CATOAP initialAttributes;
  set IN0HM005.CAITEM initialAttributes;
  set IN0HM005.IN0HMSEL cursor;

   /* ******************************************************/
   /* *** if item data entered: error (option not entered)**/
   /* ******************************************************/

  if (IN0HM005.CAITEM > " ")
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0005); /* <=== option required msg*/
    set IN0HM005.CAITEM cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf3: go to previous logical level          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf3)
  /* MOVE COMMAREA.CAFROMAP TO COMMAREA.CATOAP;*/
    COMMAREA.CATOAP = "AL0M"; /* exit to alloc menu*/
    COMMAREA.CAITEM = " ";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM005.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf1: go to help application                ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "ALSC IN0HM005";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf4: go to main menu                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf4)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/


end // end IN0HS05

// build header browse screen
Function IN0HS10()


   /* *******************************************************/
   /* *** build set aside header browse screen for       ****/
   /* *** header array from page pointer position        ****/
   /* *******************************************************/

  if (IN0HW1.IN0HWERS == "Y") /* <=== db or edit errors*/
    return;
  end

   /* ******* start building map from array index position*/
  set IN0HM010 initial;
  IN0HM010.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0HM010.IN0HMSID = 0; /* <=== init set aside key fld on map*/
  if (IN0HW1.IN0HWUPD == "DEL")
    converseLib.validationFailed(0090); /* <=== successful delete msg*/
    IN0HW1.IN0HWUPD = " ";
  end


  IN0HW2.IN0HWHIX = IN0HW2.IN0HWHPP; /* <=== set to top of page*/
  INAREC.INASAID = IN0HW2.INASAID[IN0HWHIX]; /* <=== init 's ' read*/
  IN0HSXD(); /* <=== first select unique*/
  if (SQLCA.VAGen_SQLCODE != 0)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0071); /* <=== database error*/
    return;
  end

  IN0HW1.IN0HWIX1 = 1;
  while (IN0HW1.IN0HWIX1 <= 13
   && IN0HW2.IN0HWHIX <= IN0HW2.IN0HWHAB) /* <=== not past array bottom*/
    IN0HS80(); /* <=== build map line*/
    IN0HW2.IN0HWHIX = IN0HW2.IN0HWHIX + 1;
    if (IN0HW2.IN0HWHIX <= IN0HW2.IN0HWHAB)
      set INAREC empty;
      INAREC.INASAID = IN0HW2.INASAID[IN0HWHIX];
      IN0HSXD(); /* <=== select unique on sas hdr*/
      IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 + 1;
    end
  end


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HS10

// format in0hm020 - header inq.
Function IN0HS12()


   /* ***********************************************************/
   /* *** format in0hm020 - header maintenance screen        ****/
   /* ***********************************************************/

  if (IN0HW1.IN0HWERS == "Y") /* <=== db or edit errors*/
    return;
  end

  if (IN0HW1.IN0HWLPR == "IN0H030") /* <=== leave screen as was*/
    return;
  end

  set IN0HM020 initial; /* <=== coming in from browse*/
  IN0HM020.XXXCURDT = VGVar.currentShortGregorianDate;


  set INAREC empty;
  if (IN0HW1.IN0HWLPR == "IN0H010") /* <=== coming from hdr id browse*/
    INAREC.INASAID = IN0HW2.INASAID[IN0HWHIX];
  else /* <=== coming from whse/prod browse*/
    converseLib.validationFailed(0089); /* <=== exit to see items msg*/
    INAREC.INASAID = IN0HW3.INASAID[IN0HWWIX];
  end
  IN0HSXD(); /* <=== read header for display*/
  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end


  set IN0HM020.CATOAP cursor;

  IN0HM020.INASAID = INAREC.INASAID;
  IN0HM020.INASAOWN = INAREC.INASAOWN;
  IN0HM020.XNDCD = INAREC.XNDCD;

  if (INAREC.XNDCD in XNDTBL.XNDCD)
    IN0HM020.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
  else
    IN0HM020.XNDDESC = " ";
  end

  IN0HM020.XIRCD = INAREC.XIRCD;

  if (INAREC.XIRCD in XIRTBL.XIRCD)
    IN0HM020.XIRDESC = XIRTBL.XIRDESC[sysVar.arrayIndex];
  else
    IN0HM020.XIRDESC = " ";
  end

  IN0HM020.INAPRGDT = INAREC.INAPRGDT;

  if (INAREC.ZZZSDT != 0)
    IN0HM020.ZZZSDT = INAREC.ZZZSDT;
  end

  IN0HM020.INASADC1 = INAREC.INASADC1;
  IN0HM020.INASADC2 = INAREC.INASADC2;
  IN0HM020.INASADC3 = INAREC.INASADC3;
  IN0HM020.INASADC4 = INAREC.INASADC4;


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0HS12

// format in0hm030 - item browse
Function IN0HS16()


   /* *******************************************************/
   /* *** build set aside item browse screen for         ****/
   /* *** item array from page pointer position          ****/
   /* *******************************************************/

  if (IN0HW1.IN0HWERS == "Y") /* <=== db or edit errors*/
    if (IN0HW1.IN0H-SEARCH-KEY-FL == "Y") /* <=== search key entered?*/
      IN0HW1.IN0HWERS = "N"; /* reset switch*/
    else
      return;
    end
  end


   /* ******* start building map from array index position*/
  set IN0HM030 initial;

  IN0HM030.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0HM030.INASAID = IN0HW2.INASAID[IN0HWHIX];
                                   /* <== move said to map*/
  IN0HW2.IN0HWIIX = IN0HW2.IN0HWIPP;
  INBREC.INBKEY = IN0HW2.IN0HWIBK[IN0HWIIX];
  IN0HSXH(); /* <=== first set aside row return*/
  if (SQLCA.VAGen_SQLCODE == +100)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0080);
    return;
  end


  /* ********************************************************************/
  /* if search key was entered, find the index where it*/
  /* occurs and display the items forward from that point*/
  /* ********************************************************************/

  if (IN0HW1.IN0H-SEARCH-KEY-FL == "Y") /* search key entered?*/
    IN0HW1.IN0HWIX1 = 1;
    IN0HW2.IN0HWIIX = 0;

    while (IN0HW1.IN0HWIX1 <= IN0HW2.IN0HWIAB) /* <=== not past array bottom*/
      IN0HW1.IN0H-OG-KEY = IN0HW2.XOWCD[IN0HWIX1]; /* this will*/
                                 /* eliminate owner group from the search*/
      if (IN0HW2.IN0H-SEARCH-KEY[IN0HWIX1] == IN0HW1.IN0H-SEARCH-KEY) /* ;*/
        IN0HW2.IN0HWIIX = IN0HW1.IN0HWIX1; /* we have a hit -*/
        IN0HW1.IN0HWIX1 = IN0HW2.IN0HWIAB + 1; /* get out of loop*/
      else
        if (IN0HW2.IN0H-SEARCH-KEY[IN0HWIX1] < IN0HW1.IN0H-SEARCH-KEY)
                                /* still less than, continue to loop*/
        else /* greater than - passed it,*/
          IN0HW2.IN0HWIIX = IN0HW1.IN0HWIX1; /* close as possible -*/
          IN0HW1.IN0HWIX1 = IN0HW2.IN0HWIAB + 1; /* get out of loop*/
        end
      end
      IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 + 1;
    end

    if (IN0HW2.IN0HWIIX == 0) /* search-key was not in the range*/
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(174); /* out of range*/
      set IN0HM030.IN0H-WHSE-KEY cursor, bold;
      set IN0HM030.IN0H-GPC-KEY bold;
      set IN0HM030.IN0H-STYLE-KEY bold;
      return; /* get out & display error*/
    end

    IN0HW1.IN0H-SEARCH-KEY = " "; /* reset key*/
    IN0HW1.IN0H-SEARCH-KEY-FL = "N"; /* reset flag*/

    IN0HW2.IN0HWIPP = IN0HW2.IN0HWIIX; /* save top of page*/

  else /* no search key entered  -*/

    IN0HW2.IN0HWIIX = IN0HW2.IN0HWIPP; /* use next one in sequence*/

  end

  IN0HW1.IN0HWIX1 = 1;
  while (IN0HW1.IN0HWIX1 <= 13
   && IN0HW2.IN0HWIIX <= IN0HW2.IN0HWIAB) /* <=== not past array bottom*/
    IN0HS87(); /* <=== build item browse line*/
    IN0HW2.IN0HWIIX = IN0HW2.IN0HWIIX + 1;
    if (IN0HW2.IN0HWIIX <= IN0HW2.IN0HWIAB) /* don't go past last item*/
      IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 + 1;
    end
  end

   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0HS16

// format in0hm040 for size info
Function IN0HS18()


   /* ***********************************************************/
   /* *** format in0hm040 - with size/set aside information  ****/
   /* ***********************************************************/

  if (IN0HW1.IN0HWERS == "Y") /* <=== db or edit errors*/
    return;
  end

  set IN0HM040 initial;
  IN0HM040.XXXCURDT = VGVar.currentShortGregorianDate;

   /* *******************************************************/
   /* *** obtain all valid size translations             ****/
   /* *******************************************************/

  set INBREC empty;
  if (IN0HW1.IN0HWLPR == "IN0H050") /* <=== coming from whse/prod brwse*/
    IN0HM040.IN0HMPFK = " "; /* <=== don't allow pf5 key*/
    INBREC.INBKEY = IN0HW3.IN0HWWBK[IN0HWWIX]; /* <= get array key*/
  else /* <=== coming from sas id brwse*/
    IN0HM040.IN0HMPFK = "5:BROWSE HEADERS";
    INBREC.INBKEY = IN0HW2.IN0HWIBK[IN0HWIIX]; /* <= get array key*/
  end
  IN0HSXH(); /* <=== get set aside item row*/

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0080);
    return;
  end

  IN0HM040.INASAID = INBREC.INASAID;
  IN0HM040.XWHCD = INBREC.XWHCD;
  IN0HM040.XOWCD = INBREC.XOWCD;
  IN0HM040.XGPCD = INBREC.XGPCD;
  IN0HM040.SY1STNBR = INBREC.SY1STNBR;
  IN0HM040.SY2CLRID = INBREC.SY2CLRID;
  IN0HM040.XDMCD = INBREC.XDMCD;
  IN0HM040.XQACD = INBREC.XQACD;
  IN0HM040.XSDCD = INBREC.XSDCD;
  IN0HM040.XSACD = INBREC.XSACD;
  IN0HM040.XPGCD = INBREC.XPGCD;
  IN0HM040.XUMCD = INBREC.XUMCD;

  IN0HS66(); /* <=== get size/scale descrips & life cycle code*/

  set SY4REC empty;
  SY4REC.SY4SZSCL = INGREC.SY4SZSCL;

  IN0HSXS(); /* <=== obtain size scale*/

  if (IN0HW1.IN0HWERS == "Y")
    return;
  end


  IN0HW1.IN0HWCTR = 0;
  IN0HW1.IN0HWIX1 = 1;
  while (IN0HW1.IN0HWIX1 <= 40)
    if (SY4REC.SY4IDDSC[IN0HWIX1] > " ")
      IN0HW1.IN0HWCTR = IN0HW1.IN0HWCTR + 1;
       /* ** move size description & make qty flds modifiable ***/
       /* ** also move in current set aside item qtys         ***/
      IN0HM040.SY4IDDSC[IN0HWIX1] = SY4REC.SY4IDDSC[IN0HWIX1];
      IN0HM040.INBSAQTY[IN0HWIX1] = INBREC.INBSAQTY[IN0HWIX1];
      set IN0HM040.SY4IDDSC[IN0HWIX1] skip;
      set IN0HM040.INBSAQTY[IN0HWIX1] skip;
      set IN0HM040.IN0HMAQT[IN0HWIX1] skip, invisible;
    end
    IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 + 1;
  end

   /* *******************************************************/
   /* *** move literals to map                           ****/
   /* ***  - only show if detail qtys are on this line   ****/
   /* *******************************************************/

  if (IN0HW1.IN0HWCTR > 0)
    set IN0HM040.IN0HMSLT[1] skip;
    set IN0HM040.IN0HMCLT[1] skip;
    set IN0HM040.IN0HMALT[1] skip, invisible;
  else
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0067);
    return;
  end

  if (IN0HW1.IN0HWCTR > 8)
    set IN0HM040.IN0HMSLT[2] skip;
    set IN0HM040.IN0HMCLT[2] skip;
    set IN0HM040.IN0HMALT[2] skip, invisible;
  end

  if (IN0HW1.IN0HWCTR > 16)
    set IN0HM040.IN0HMSLT[3] skip;
    set IN0HM040.IN0HMCLT[3] skip;
    set IN0HM040.IN0HMALT[3] skip, invisible;
  end

  if (IN0HW1.IN0HWCTR > 24)
    set IN0HM040.IN0HMSLT[4] skip;
    set IN0HM040.IN0HMCLT[4] skip;
    set IN0HM040.IN0HMALT[4] skip, invisible;
  end

  if (IN0HW1.IN0HWCTR > 32)
    set IN0HM040.IN0HMSLT[5] skip;
    set IN0HM040.IN0HMCLT[5] skip;
    set IN0HM040.IN0HMALT[5] skip, invisible;
  end


  set IN0HM040.CATOAP cursor;


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/
end // end IN0HS18

// format in0hm050 screen
Function IN0HS30()


   /* *******************************************************/
   /* *** build whse/prod browse screen for              ****/
   /* *** item array from page pointer position          ****/
   /* *******************************************************/

  if (IN0HW1.IN0HWERS == "Y")
    return; /* <=== show screen with errors*/
  end

  if (IN0HW1.IN0HWLPR == "IN0H005") /* <=== if coming from menu*/
    set IN0HM050 initial;
    IN0HM050.XXXCURDT = VGVar.currentShortGregorianDate;
    return;
  end

   /* ******* start building map from array if array was built*/
  if (IN0HW1.IN0HWBRP == "IN0HS90")
     /* ** next sentence ***/
  else
    return; /* <==== show screen as it was*/
  end

   /* ******* start building map from array index position*/
  set IN0HM050 initial;
  IN0HM050.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0HW3.IN0HWWIX = IN0HW3.IN0HWWPP;

  if (IN0HW3.IN0HWWAB == 0) /* <=== no entries in array so get out*/
    return;
  end

  set INAREC empty;
  INAREC.INASAID = IN0HW3.INASAID[IN0HWWIX];
  IN0HSXD(); /* <=== first header row return*/
  if (SQLCA.VAGen_SQLCODE != 0)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0071);
    return;
  end
  set INBREC empty;
  INBREC.INBKEY = IN0HW3.IN0HWWBK[IN0HWWIX];
  IN0HSXH(); /* <=== first item row return*/
  if (SQLCA.VAGen_SQLCODE == +100)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0080);
    return;
  end

  IN0HW1.IN0HWIX1 = 1;
  while (IN0HW1.IN0HWIX1 <= 14              
   && IN0HW3.IN0HWWIX <= IN0HW3.IN0HWWAB /* <=== not past array bottom*/
   && SQLCA.VAGen_SQLCODE == 0)
    IN0HS31(); /* <=== build item browse line*/
    IN0HW3.IN0HWWIX = IN0HW3.IN0HWWIX + 1;
    if (IN0HW3.IN0HWWIX <= IN0HW3.IN0HWWAB)
      set INAREC empty;
      INAREC.INASAID = IN0HW3.INASAID[IN0HWWIX];
      IN0HSXD(); /* <=== select unique sas hdr.*/
      set INBREC empty;
      INBREC.INBKEY = IN0HW3.IN0HWWBK[IN0HWWIX];
      IN0HSXH(); /* <=== select unique sas item*/
      IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0071); /* <=== database error*/
    IN0HM050.XXXMSG = "EXIT - AND TRY AGAIN LATER";
    return;
  end

   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0HS30

// format detail line
Function IN0HS31()


   /* *******************************************************/
   /* *** setup individual item browse map detail lines   ***/
   /* *******************************************************/

  if (IN0HW1.IN0HWERS == "Y"
   || SQLCA.VAGen_SQLCODE != 0)
    return;
  end

  set IN0HM050.IN0HMSEL[IN0HWIX1] normal;
  set IN0HM050.XWHCD[IN0HWIX1] skip;
  set IN0HM050.XOWCD[IN0HWIX1] skip;
  set IN0HM050.XGPCD[IN0HWIX1] skip;
  set IN0HM050.SY1STNBR[IN0HWIX1] skip;
  set IN0HM050.SY2CLRID[IN0HWIX1] skip;
  set IN0HM050.INASAID[IN0HWIX1] skip;
  set IN0HM050.XNDCD[IN0HWIX1] skip;
  set IN0HM050.INASAOWN[IN0HWIX1] skip;
  set IN0HM050.INBSATOT[IN0HWIX1] skip;

  IN0HM050.IN0HMSEL[IN0HWIX1] = " ";
  IN0HM050.XWHCD[IN0HWIX1] = INBREC.XWHCD;
  IN0HM050.XOWCD[IN0HWIX1] = INBREC.XOWCD;
  IN0HM050.XGPCD[IN0HWIX1] = INBREC.XGPCD;
  IN0HM050.SY1STNBR[IN0HWIX1] = INBREC.SY1STNBR;
  IN0HM050.SY2CLRID[IN0HWIX1] = INBREC.SY2CLRID;
  IN0HM050.INASAID[IN0HWIX1] = INAREC.INASAID;
  IN0HM050.XNDCD[IN0HWIX1] = INAREC.XNDCD;
  IN0HM050.INASAOWN[IN0HWIX1] = INAREC.INASAOWN;
  IN0HM050.INBSATOT[IN0HWIX1] = INBREC.INBSATOT;


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HS31

// main edit
Function IN0HS50()


   /* ******************************************************/
   /* *** main edit for header browse screen            ****/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "N";

   /* ******************************************************/
   /* *** pfkey/ fast path edit                         ****/
   /* ***    - always do fast path if valid pfkey       ****/
   /* ***      except with a pa2 key                    ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is enter)
    IN0HS51();
  end

   /* ******************************************************/
   /* *** validate set aside id;  also check for scrolling**/
   /* ******************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    IN0HS52();
  end

   /* ******************************************************/
   /* *** selection edit                                ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf6)
    IN0HS53();
  end


   /* ******************************************************/
   /* *** if pa2:  regardless of status - restart appl. ****/
   /* ******************************************************/

  if (converseVar.eventKey is pa2)
    set IN0HM010 initial;
    IN0HW1.IN0HWERS = "N";
    exit stack;
  end


   /* ******************************************************/
   /* *** invalid  pfkey was pressed                    ****/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0HS50

// pf/fast edit
Function IN0HS51()


   /* ******************************************************/
   /* *** if fast path entered: exit immediately        ****/
   /* ******************************************************/

  if (IN0HM010.CATOAP > " ")
    COMMAREA.CATOAP = IN0HM010.CATOAP;
    COMMAREA.CAITEM = IN0HM010.CAITEM;
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0HM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** reset error switch, std fields & cursor position**/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "N";
  IN0HM010.VAGen_EZEMSG = " ";
  set IN0HM010.CATOAP initialAttributes;
  set IN0HM010.CAITEM initialAttributes;
  set IN0HM010.IN0HMSID cursor;

   /* ******************************************************/
   /* *** if item data entered: error (option not entered)**/
   /* ******************************************************/

  if (IN0HM010.CAITEM > " ")
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0005); /* <=== option required msg*/
    set IN0HM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf3: go to previous logical level          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf1: go to help application                ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "ALSC IN0HM010";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf4: go to main menu                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf4)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0HS51

// valid. map key/scroll edit
Function IN0HS52()
   /* *******************************************************/
   /* *** validate the startkey parameter field on the map***/
   /* *******************************************************/

  if (converseVar.eventKey is enter)
    if (IN0HM010.IN0HMSID > 0)
      IN0HW1.IN0HWBRP = "IN0H010"; /* <=== branch back to process*/
      if (IN0HW2.IN0HWHAB == 0)
        IN0HW1.IN0HWERS = "Y"; /* <=== array is empty*/
        converseLib.validationFailed(0072); /* <=== id out of range msg*/
        exit stack;
      end
      if (IN0HM010.IN0HMSID > IN0HW2.INASAID[IN0HWHAB])
        IN0HW1.IN0HWERS = "Y"; /* <=== we are past array end*/
        converseLib.validationFailed(0072); /* <=== id out of range msg*/
        exit stack;
      end
      IN0HW1.IN0HWIX1 = 1;
      while (IN0HW1.IN0HWIX1 <= 500 /* <=== srch for startkey pos.*/
       && IN0HW1.IN0HWIX1 < IN0HW2.IN0HWHAB
       && IN0HW2.INASAID[IN0HWIX1] < IN0HM010.IN0HMSID)
        IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 + 1;
      end
      IN0HW2.IN0HWHIX = IN0HW1.IN0HWIX1; /* <== set ptrs*/
      IN0HW2.IN0HWHPP = IN0HW1.IN0HWIX1;
      exit stack;
    else
      IN0HW1.IN0HWBRP = " "; /* <=== initialize branch to proc.*/
    end
  end

   /* *******************************************************/
   /* *** setup scroll for forwards                      ****/
   /* *******************************************************/

  if (converseVar.eventKey is pf8)
    if (IN0HW2.IN0HWHPP < IN0HW2.IN0HWHAB) /* <== page ptr < array bottom*/
      IN0HW1.IN0HWCTR = IN0HW2.IN0HWHPP + 12;
      if (IN0HW1.IN0HWCTR >= IN0HW2.IN0HWHAB)
        IN0HW1.IN0HWERS = "Y";
        converseLib.validationFailed(0004); /* <== bottom of data msg*/
      else
        IN0HW2.IN0HWHPP = IN0HW2.IN0HWHPP + 13; /* <== set page forwards*/
        IN0HW2.IN0HWHIX = IN0HW2.IN0HWHPP; /* <== set arr. indx @ top*/
        IN0HW1.IN0HWCTR = IN0HW2.IN0HWHPP + 12;
        if (IN0HW1.IN0HWCTR >= IN0HW2.IN0HWHAB) /* <==are we at array bot*/
          converseLib.validationFailed(0004); /* <== bottom of data msg*/
        end
      end
    else
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0004); /* <== bottom of data msg*/
    end
    exit stack;
  end


   /* *******************************************************/
   /* *** setup scroll for backwards                     ****/
   /* *******************************************************/

  if (converseVar.eventKey is pf7)
    /* **********  no scrolling since we are at the top*/
    if (IN0HW2.IN0HWHPP == 1
     || IN0HW2.IN0HWHPP == 0) /* <=== no headers on db*/
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0003); /* <=== top of data msg*/
    else
      /* **********  move page ptr to top of array since we*/
      /* **********  can't move back a complete page*/
      if (IN0HW2.IN0HWHPP <= 14)
        IN0HW2.IN0HWHPP = 1;
        IN0HW2.IN0HWHIX = IN0HW2.IN0HWHPP;
        converseLib.validationFailed(0003); /* <=== top of data msg*/
      else
        /* **********  scroll back one page*/
        if (IN0HW2.IN0HWHPP > 14)
          IN0HW2.IN0HWHPP = IN0HW2.IN0HWHPP - 13;
        end
      end
    end
    exit stack;
  end


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0HS52

// selection edit
Function IN0HS53()

   /* ******************************************************/
   /* *** edit selection field for pfkeys 6 & enter     ****/
   /* ******************************************************/

  IN0HW1.IN0HWCTR = 0;
  IN0HW1.IN0HWIX1 = 13;
  while (IN0HW1.IN0HWIX1 > 0)
    if (IN0HM010.IN0HMSEL[IN0HWIX1] > " ")
      if (IN0HM010.IN0HMSEL[IN0HWIX1] == "S")
        set IN0HM010.IN0HMSEL[IN0HWIX1] normal; /* <=== no error*/
        IN0HW1.IN0HWCTR = IN0HW1.IN0HWCTR + 1;
         /* *** set array index to selected map header position ****/
        IN0HW2.IN0HWHIX = IN0HW2.IN0HWHPP + IN0HW1.IN0HWIX1 - 1;
      else
        IN0HW1.IN0HWCTR = IN0HW1.IN0HWCTR + 1;
        IN0HW1.IN0HWERS = "Y";
        converseLib.validationFailed(0010); /* <=== bad sel char msg*/
        set IN0HM010.IN0HMSEL[IN0HWIX1] cursor, bold;
      end
    end
    IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 - 1;
  end

  if (IN0HW1.IN0HWCTR > 1)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0073); /* <=== too many sel. msg*/
    set IN0HM010.IN0HMSEL[1] cursor;
    exit stack;
  end

  if (IN0HW1.IN0HWCTR == 0)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0074); /* <=== no sel made msg*/
    exit stack;
  end

  if (IN0HW1.IN0HWERS == "Y")
    exit stack;
  end

   /* ******************************************************/
   /* *** pfkey enter                                   ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    exit stack;
  end

   /* ******************************************************/
   /* *** pfkey 6                                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf6)
    set INBREC empty;
    INBREC.INASAID = IN0HW2.INASAID[IN0HWHIX];
    IN0HSXE(); /* <=== select scan for items*/
    if (SQLCA.VAGen_SQLCODE == 0)
      IN0HSXF(); /* <=== fetch first row of scan*/
      if (SQLCA.VAGen_SQLCODE == 0)
        IN0HSXG(); /* <=== close set*/
        exit stack;
      else
        IN0HSXG(); /* <=== close set*/
        IN0HW1.IN0HWERS = "Y";
        converseLib.validationFailed(0080); /* <=== no items found for set aside*/
        exit stack;
      end
    end
  end

   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0HS53

// main edit for in0hm020 map
Function IN0HS54()


   /* ********************************************************/
   /* *** main edit for header inquiry screen             ****/
   /* ********************************************************/

  IN0HW1.IN0HWERS = "N";

   /* ******************************************************/
   /* *** pfkey/ fast path edit                         ****/
   /* ***    - always do fast path if valid pfkey       ****/
   /* ***      except with a pa2 key                    ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is enter)
    IN0HS55();
  end

   /* ******************************************************/
   /* *** check to see if items exist for this set aside ***/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    if (IN0HW1.IN0HWLPR == "IN0H050") /* <=== came from whse/prod inquiry*/
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0088);
      exit stack;
    else /* <=== came from sas id inquiry*/
      set INBREC empty;
      INBREC.INASAID = IN0HM020.INASAID;
      IN0HSXE(); /* <=== select scan for items*/
      if (SQLCA.VAGen_SQLCODE == 0)
        IN0HSXF(); /* <=== fetch first row of scan*/
        if (SQLCA.VAGen_SQLCODE == 0)
          IN0HSXG(); /* <=== close set*/
          exit stack;
        else
          IN0HSXG(); /* <=== close set*/
          IN0HW1.IN0HWERS = "Y";
          converseLib.validationFailed(0080); /* <=== no items found for set aside*/
          exit stack;
        end
      end
    end
  end

   /* ******************************************************/
   /* *** if pa2:  regardless of status - restart appl. ****/
   /* ******************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end


   /* ******************************************************/
   /* *** invalid  pfkey was pressed                    ****/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0HS54

// pfkey/fast path edit
Function IN0HS55()


   /* ******************************************************/
   /* *** if fast path entered: exit immediately        ****/
   /* ******************************************************/

  if (IN0HM020.CATOAP > " ")
    COMMAREA.CATOAP = IN0HM020.CATOAP;
    COMMAREA.CAITEM = IN0HM020.CAITEM;
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM020.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0HM020.CATOAP cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** reset error switch, std fields & cursor position**/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "N";
  IN0HM020.VAGen_EZEMSG = " ";
  set IN0HM020.CATOAP initialAttributes;
  set IN0HM020.CAITEM initialAttributes;

   /* ******************************************************/
   /* *** if item data entered: error (option not entered)**/
   /* ******************************************************/

  if (IN0HM020.CAITEM > " ")
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0005); /* <=== option required msg*/
    set IN0HM020.CAITEM cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf3: go to previous logical level          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf1: go to help application                ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "ALSC IN0HM020";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf4: go to main menu                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf4)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0HS55

// main edit for in0hm030
Function IN0HS57()


   /* ******************************************************/
   /* *** main edit for item browse screen              ****/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "N";

   /* ******************************************************/
   /* *** pfkey/ fast path edit                         ****/
   /* ***    - always do fast path if valid pfkey       ****/
   /* ***      except with a pa2 key                    ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is enter)
    IN0HS58();
  end

   /* ******************************************************/
   /* *** check for scrolling                           ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    IN0HS59();
  end

   /* ******************************************************/
   /* *** selection edit for in0gm030                   ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    IN0HS60();
  end


   /* ******************************************************/
   /* *** if pa2:  regardless of status - restart appl. ****/
   /* ******************************************************/

  if (converseVar.eventKey is pa2)
    set IN0HM030 initial;
    IN0HW1.IN0HWERS = "N";
    exit stack;
  end


   /* ******************************************************/
   /* *** invalid  pfkey was pressed                    ****/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0HS57

// pfkey/ fast path edit
Function IN0HS58()


   /* ******************************************************/
   /* *** if fast path entered: exit immediately        ****/
   /* ******************************************************/

  if (IN0HM030.CATOAP > " ")
    COMMAREA.CATOAP = IN0HM030.CATOAP;
    COMMAREA.CAITEM = IN0HM030.CAITEM;
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM030.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0HM030.CATOAP cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** reset error switch, std fields & cursor position**/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "N";
  IN0HM030.VAGen_EZEMSG = " ";
  set IN0HM030.CATOAP initialAttributes;
  set IN0HM030.CAITEM initialAttributes;

   /* ******************************************************/
   /* *** if item data entered: error (option not entered)**/
   /* ******************************************************/

  if (IN0HM030.CAITEM > " ")
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0005); /* <=== option required msg*/
    set IN0HM030.CAITEM cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf3: go to previous logical level          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf5: go back to header browse              ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf5)
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf1: go to help application                ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "ALSC IN0HM030";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf4: go to main menu                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf4)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0HS58

// edit for scrolling
Function IN0HS59()

   /* *******************************************************/
   /* *** setup scroll for forwards                      ****/
   /* *******************************************************/

  if (converseVar.eventKey is pf8)
    if (IN0HW2.IN0HWIPP < IN0HW2.IN0HWIAB) /* <== page ptr < array bottom*/
      IN0HW1.IN0HWCTR = IN0HW2.IN0HWIPP + 12;
      if (IN0HW1.IN0HWCTR >= IN0HW2.IN0HWIAB)
        IN0HW1.IN0HWERS = "Y";
        converseLib.validationFailed(0004); /* <== bottom of data msg*/
      else
        IN0HW2.IN0HWIPP = IN0HW2.IN0HWIPP + 13; /* <== set page forwards*/
        IN0HW2.IN0HWIIX = IN0HW2.IN0HWIPP; /* <== set arr. indx @ top*/
        IN0HW1.IN0HWCTR = IN0HW2.IN0HWIPP + 12;
        if (IN0HW1.IN0HWCTR >= IN0HW2.IN0HWIAB) /* <==are we at array bot*/
          converseLib.validationFailed(0004); /* <== bottom of data msg*/
        end
      end
    else
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0004); /* <== bottom of data msg*/
    end
    exit stack;
  end


   /* *******************************************************/
   /* *** setup scroll for backwards                     ****/
   /* *******************************************************/

  if (converseVar.eventKey is pf7)
    /* **********  no scrolling since we are at the top*/
    if (IN0HW2.IN0HWIPP == 1
     || IN0HW2.IN0HWIPP == 0) /* <=== no items on db*/
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0003); /* <=== top of data msg*/
    else
      /* **********  move page ptr to top of array since we*/
      /* **********  can't move back a complete page*/
      if (IN0HW2.IN0HWIPP <= 14)
        IN0HW2.IN0HWIPP = 1;
        IN0HW2.IN0HWIIX = IN0HW2.IN0HWIPP;
        converseLib.validationFailed(0003); /* <=== top of data msg*/
      else
        /* **********  scroll back one page*/
        if (IN0HW2.IN0HWIPP > 14)
          IN0HW2.IN0HWIPP = IN0HW2.IN0HWIPP - 13;
        end
      end
    end
    exit stack;
  end


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0HS59

// in0hm030 selection edit
Function IN0HS60()

   /* ******************************************************/
   /* *** edit selection field for enter key            ****/
   /* ******************************************************/

  if (IN0HM030.IN0H-WHSE-KEY > " " /* search key entered?*/
   || IN0HM030.IN0H-GPC-KEY > " "  
   || IN0HM030.IN0H-STYLE-KEY > " ")
    IN0HW1.IN0H-SEARCH-KEY = "000000000000"; /**/
    if (IN0HM030.IN0H-WHSE-KEY > " ") /**/
      IN0HW1.IN0H-WHSE-KEY = IN0HM030.IN0H-WHSE-KEY;
                                                        /* set it up in w/s*/
    end
    if (IN0HM030.IN0H-GPC-KEY > " ")
      IN0HW1.IN0H-GPC-KEY = IN0HM030.IN0H-GPC-KEY; /**/
    end
    if (IN0HM030.IN0H-STYLE-KEY > " ")
      IN0HW1.IN0H-STYLE-KEY = IN0HM030.IN0H-STYLE-KEY; /**/
    end
    IN0HW1.IN0H-SEARCH-KEY-FL = "Y"; /* set the chnage flag*/
    IN0HW1.IN0HWERS = "Y"; /* this flag will cause screen*/
                                   /* re-display*/
  else
    IN0HW1.IN0HWCTR = 0;
    IN0HW1.IN0HWIX1 = 13;
    while (IN0HW1.IN0HWIX1 > 0)
      if (IN0HM030.IN0HMSEL[IN0HWIX1] > " ")
        if (IN0HM030.IN0HMSEL[IN0HWIX1] == "S")
          set IN0HM030.IN0HMSEL[IN0HWIX1] normal; /* <=== no error*/
          IN0HW1.IN0HWCTR = IN0HW1.IN0HWCTR + 1;
          /* *** set array index to selected map header position ****/
          IN0HW2.IN0HWIIX = IN0HW2.IN0HWIPP + IN0HW1.IN0HWIX1 - 1;
        else
          IN0HW1.IN0HWCTR = IN0HW1.IN0HWCTR + 1;
          IN0HW1.IN0HWERS = "Y";
          converseLib.validationFailed(0010); /* <=== bad sel char msg*/
          set IN0HM030.IN0HMSEL[IN0HWIX1] cursor, bold;
        end
      end
      IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 - 1;
    end

    if (IN0HW1.IN0HWCTR > 1)
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0099); /* <=== too many sel. msg*/
      set IN0HM030.IN0HMSEL[1] cursor;
      exit stack;
    end

    if (IN0HW1.IN0HWCTR == 0)
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0100); /* <=== no sel made msg*/
      exit stack;
    end

  end

   /* ******************************************************/
   /* *** always go to ezeflo from this sgrp            ****/
   /* ******************************************************/

  exit stack;

   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0HS60

// pfkey /fast path edit
Function IN0HS62()


   /* ******************************************************/
   /* *** if fast path entered: exit immediately        ****/
   /* ******************************************************/

  if (IN0HM040.CATOAP > " ")
    COMMAREA.CATOAP = IN0HM040.CATOAP;
    COMMAREA.CAITEM = IN0HM040.CAITEM;
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM040.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0HM040.CATOAP cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** reset error switch, std fields & cursor position**/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "N";
  IN0HM040.VAGen_EZEMSG = " ";
  set IN0HM040.CATOAP initialAttributes;
  set IN0HM040.CAITEM initialAttributes;

   /* ******************************************************/
   /* *** if item data entered: error (option not entered)**/
   /* ******************************************************/

  if (IN0HM040.CAITEM > " ")
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0005); /* <=== option required msg*/
    set IN0HM040.CAITEM cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** if enter and no fast path then set error      ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    if (IN0HM040.CAITEM > " "
     || IN0HM040.CATOAP > " ")
       /* ** next sentence ***/
    else
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0088); /* <=== must hit pf3 to exit msg*/
    end
  end

   /* ******************************************************/
   /* *** if pf3: go to previous logical level          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf1: go to help application                ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "ALSC IN0HM040";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf4: go to main menu                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf4)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0HS62

// key relational edits
Function IN0HS66()

   /* ************************************************************/
   /* *** Use IN8020 to get size & style descriptions and     ****/
   /* *** life cycle code                                     ****/
   /* ************************************************************/

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
  INGREC.XGP-GPC-CD = IN0HM040.XGPCD; /* GPC code*/
  INGREC.SY-STY-NBR = IN0HM040.SY1STNBR; /* Style number*/
  INGREC.SY-COLR-CD-ID = IN0HM040.SY2CLRID; /* Color code*/
  INGREC.XDM-DIM-CD = IN0HM040.XDMCD; /* Dimension code*/

  TA1REC.TA1PGMNM = "IN0HS66";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020(); /* Call IN8020*/

  if (INGREC.ING-RETURN-CD > 0000)
    IN0HS-IN8020-ERRS(); /* Post warning message*/
    IN0HM040.SY1SSTNM = " ";
    IN0HM040.SY2CLRAB = " ";
    IN0HM040.XLCCD = " ";
    return;
  else
    IN0HM040.SY1SSTNM = INGREC.SY1SSTNM;
    IN0HM040.SY2CLRAB = INGREC.SY2CLRAB;
  end

   /* ************************************************************/
   /* *** if current date greater than effective date:        ****/
   /* *** use the corresponding life cycle code               ****/
   /* *** note: effective dates in ascending order            ****/
   /* ************************************************************/

  if (IN0HW1.IN0HWCDT >= INGREC.SY2CEDT1)
    IN0HM040.XLCCD = INGREC.XLCCD1;
  else
    if (IN0HW1.IN0HWCDT >= INGREC.SY2CEDT2)
      IN0HM040.XLCCD = INGREC.XLCCD2;
    else
      if (IN0HW1.IN0HWCDT >= INGREC.SY2CEDT3)
        IN0HM040.XLCCD = INGREC.XLCCD3;
      else
        if (IN0HW1.IN0HWCDT >= INGREC.SY2CEDT3)
          IN0HM040.XLCCD = INGREC.XLCCD4;
        else
           /* ************************************************************/
           /* *** fall thru error - code shouldn't have been executed ****/
           /* ************************************************************/
          IN0HW1.IN0HWERS = "Y";
          converseLib.validationFailed(0008); /* <--- fall thru error msg*/
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0HS66

// main edit for in0h040 process
Function IN0HS67()


   /* ********************************************************/
   /* *** main edit for item maintenance screen           ****/
   /* ********************************************************/

  IN0HW1.IN0HWERS = "N";

   /* ******************************************************/
   /* *** pfkey/ fast path edit                         ****/
   /* ***    - always do fast path if valid pfkey       ****/
   /* ***      EXCEPT WITH PA2 KEY                      ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is enter)
    IN0HS62();
  end

   /* ******************************************************/
   /* *** no processing for pf5  or enter ( go to flow )****/
   /* ******************************************************/

  if (IN0HW1.IN0HWLPR != "IN0H050") /* <==did not come from prod brwse*/
    if (converseVar.eventKey is pf5) /* <==so allow pf5*/
      exit stack;
    end
  end

  if (converseVar.eventKey is enter)
    exit stack;
  end


   /* ******************************************************/
   /* *** if pa2:  regardless of status - restart appl. ****/
   /* ******************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end


   /* ******************************************************/
   /* *** invalid  pfkey was pressed                    ****/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0HS67

// in0hm050 main edit
Function IN0HS70()


   /* ******************************************************/
   /* *** main edit for whse/prod browse screen         ****/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "N";

   /* ******************************************************/
   /* *** pfkey/ fast path edit                         ****/
   /* ***    - always do fast path if valid pfkey       ****/
   /* ***      except with a pa2 key                    ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is enter)
    IN0HS72();
  end

   /* ******************************************************/
   /* *** check for scrolling                           ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    IN0HS74();
    IN0HW1.IN0HWBRP = "IN0HS90"; /* <=== do build map from array*/
    exit stack;
  end

   /* ******************************************************/
   /* *** key edit                                      ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    IN0HW1.IN0HWBRP = " "; /* <=== init. bld array sw*/
    if (IN0HM050.IN0HMWH > " "
     || IN0HM050.IN0HMOW > " "
     || IN0HM050.IN0HMGP > " "
     || IN0HM050.IN0HMS1 > " "
     || IN0HM050.IN0HMS2 > " ")
      IN0HS76(); /* <==== key validity edit*/
      IN0HS75(); /* <==== key relational edit*/
      if (IN0HW1.IN0HWERS == "Y")
        exit stack;
      else
        IN0HS77(); /* <=== select of item rows for given indexes*/
        if (IN0HW1.IN0HWERS == "Y")
          converseLib.validationFailed(0100); /* <=== no items selected msg*/
          exit stack;
        else
          IN0HW1.IN0HWBRP = "IN0HS90"; /* <=== set sw to bld array*/
          return;
        end
      end
    else
      converseLib.validationFailed(0086); /* <=== must enter at least one field*/
                                   /* msg*/
      IN0HW1.IN0HWERS = "Y";
      set IN0HM050.IN0HMWH cursor;
    end
    exit stack;
  end

   /* ******************************************************/
   /* *** header/item selection edit                    ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf6)
    IN0HS78();
    exit stack;
  end


   /* ******************************************************/
   /* *** if pa2:  regardless of status - restart appl. ****/
   /* ******************************************************/

  if (converseVar.eventKey is pa2)
    set IN0HM050 initial;
    IN0HW1.IN0HWERS = "N";
    exit stack;
  end


   /* ******************************************************/
   /* *** invalid  pfkey was pressed                    ****/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0HS70

// pfkey/fast path edit
Function IN0HS72()


   /* ******************************************************/
   /* *** if fast path entered: exit immediately        ****/
   /* ******************************************************/

  if (IN0HM050.CATOAP > " ")
    COMMAREA.CATOAP = IN0HM050.CATOAP;
    COMMAREA.CAITEM = IN0HM050.CAITEM;
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM050.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0HM050.CATOAP cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** reset error switch, std fields & cursor position**/
   /* ******************************************************/

  IN0HW1.IN0HWERS = "N";
  IN0HM050.VAGen_EZEMSG = " ";
  set IN0HM050.CATOAP initialAttributes;
  set IN0HM050.CAITEM initialAttributes;

   /* ******************************************************/
   /* *** if item data entered: error (option not entered)**/
   /* ******************************************************/

  if (IN0HM050.CAITEM > " ")
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0005); /* <=== option required msg*/
    set IN0HM050.CAITEM cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf3: go to previous logical level          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf1: go to help application                ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "ALSC IN0HM050";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM050.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf4: go to main menu                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf4)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0);
    IN0HM050.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0HS72

// scrolling
Function IN0HS74()

   /* *******************************************************/
   /* *** setup scroll for forwards                      ****/
   /* *******************************************************/

  if (converseVar.eventKey is pf8)
    if (IN0HW3.IN0HWWPP < IN0HW3.IN0HWWAB) /* <== page ptr < array bottom*/
      IN0HW1.IN0HWCTR = IN0HW3.IN0HWWPP + 13;
      if (IN0HW1.IN0HWCTR >= IN0HW3.IN0HWWAB)
        IN0HW1.IN0HWERS = "Y";
        converseLib.validationFailed(0004); /* <== bottom of data msg*/
      else
        IN0HW3.IN0HWWPP = IN0HW3.IN0HWWPP + 14; /* <== set page forwards*/
        IN0HW3.IN0HWWIX = IN0HW3.IN0HWWPP; /* <== set arr. indx @ top*/
        IN0HW1.IN0HWCTR = IN0HW3.IN0HWWPP + 13;
        if (IN0HW1.IN0HWCTR >= IN0HW3.IN0HWWAB) /* <==are we at array bot*/
          converseLib.validationFailed(0004); /* <== bottom of data msg*/
        end
      end
    else
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0004); /* <== bottom of data msg*/
    end
    return;
  end


   /* *******************************************************/
   /* *** setup scroll for backwards                     ****/
   /* *******************************************************/

  if (converseVar.eventKey is pf7)
    /* **********  no scrolling since we are at the top*/
    if (IN0HW3.IN0HWWPP == 1
     || IN0HW3.IN0HWWPP == 0) /* <=== no rows on db*/
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0003); /* <=== top of data msg*/
    else
      /* **********  move page ptr to top of array since we*/
      /* **********  can't move back a complete page*/
      if (IN0HW3.IN0HWWPP <= 15)
        IN0HW3.IN0HWWPP = 1;
        IN0HW3.IN0HWWIX = IN0HW3.IN0HWWPP;
        converseLib.validationFailed(0003); /* <=== top of data msg*/
      else
        /* **********  scroll back one page*/
        if (IN0HW3.IN0HWWPP > 15)
          IN0HW3.IN0HWWPP = IN0HW3.IN0HWWPP - 14;
        end
      end
    end
  end


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0HS74

// key relational edit
Function IN0HS75()

  if (IN0HW1.IN0HWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** must at least enter gpc and style                   ****/
   /* ************************************************************/

  if (IN0HM050.IN0HMGP > " "
   && IN0HM050.IN0HMS1 > " ")
    set IN0HM050.IN0HMGP normal;
    set IN0HM050.IN0HMS1 normal;
  else
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0086);
    set IN0HM050.IN0HMGP cursor, bold;
    set IN0HM050.IN0HMS1 bold;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0HS75

// key validity edit
Function IN0HS76()


   /* ************************************************************/
   /* *** gen. prod. class edit                               ****/
   /* ************************************************************/

  if (IN0HM050.IN0HMGP > " ")
    if (IN0HM050.IN0HMGP in XGPTBL.XGPCD)
      set IN0HM050.IN0HMGP normal;
    else
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0HM050.IN0HMGP cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** warehouse code edit                                 ****/
   /* ************************************************************/

  if (IN0HM050.IN0HMWH > " ")
    if (IN0HM050.IN0HMWH in XWHTBL.XWHCD)
      set IN0HM050.IN0HMWH normal;
    else
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0HM050.IN0HMWH cursor, bold;
      return; /* <=== ** exception ***/
    end
  else
    return; /* <=== ** exception ***/
  end

   /* ************************************************************/
   /* *** if whse owner group flag set (=Y): use ow table     ****/
   /* *** owner group must be zero for all other whses        ****/
   /* ************************************************************/

  if (IN0HM050.IN0HMOW > " ")
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
       /* ************************************************************/
       /* *** owner group edit                                    ****/
       /* ************************************************************/
      IN0HW1.XWHCD = IN0HM050.IN0HMWH;
      IN0HW1.XOWCD = IN0HM050.IN0HMOW;
      if (IN0HW1.XOWKEY in XOWTBL.XOWKEY)
        set IN0HM050.IN0HMOW normal;
      else
        IN0HW1.IN0HWERS = "Y";
        converseLib.validationFailed(0011); /* <--- invalid value msg*/
        set IN0HM050.IN0HMOW cursor, bold;
      end
    else
      if (IN0HM050.IN0HMOW != "00")
        IN0HW1.IN0HWERS = "Y";
        converseLib.validationFailed(0011); /* <--- invalid value msg*/
        set IN0HM050.IN0HMOW cursor, bold;
      else
        set IN0HM050.IN0HMOW normal;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0HS76

// get matching item rows
Function IN0HS77()

   /* ********************************************************/
   /* *** get all item rows that match indexes entered    ****/
   /* ********************************************************/

  set INBREC empty;
  INBREC.XWHCD = IN0HM050.IN0HMWH;
  INBREC.XOWCD = IN0HM050.IN0HMOW;
  INBREC.XGPCD = IN0HM050.IN0HMGP;
  INBREC.SY1STNBR = IN0HM050.IN0HMS1;
  INBREC.SY2CLRID = IN0HM050.IN0HMS2;
  IN0HSXT(); /* <=== select scan for items*/
  if (SQLCA.VAGen_SQLCODE == 0)
    IN0HSXU(); /* <=== fetch first row of scan*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentence ***/
    else
      IN0HSXV(); /* <=== close set*/
      IN0HW1.IN0HWERS = "Y";
    end
  end

   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0HS77

// selection edit
Function IN0HS78()

   /* ******************************************************/
   /* *** edit selection field for pfkeys 5 & 6        ****/
   /* ******************************************************/

  IN0HW1.IN0HWCTR = 0;
  IN0HW1.IN0HWIX1 = 14;
  while (IN0HW1.IN0HWIX1 > 0)
    if (IN0HM050.IN0HMSEL[IN0HWIX1] > " ")
      if (IN0HM050.IN0HMSEL[IN0HWIX1] == "S")
        set IN0HM050.IN0HMSEL[IN0HWIX1] normal; /* <=== no error*/
        IN0HW1.IN0HWCTR = IN0HW1.IN0HWCTR + 1;
         /* *** set array index to selected map header position ****/
        IN0HW3.IN0HWWIX = IN0HW3.IN0HWWPP + IN0HW1.IN0HWIX1 - 1;
      else
        IN0HW1.IN0HWCTR = IN0HW1.IN0HWCTR + 1;
        IN0HW1.IN0HWERS = "Y";
        converseLib.validationFailed(0010); /* <=== bad sel char msg*/
        set IN0HM050.IN0HMSEL[IN0HWIX1] cursor, bold;
      end
    end
    IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 - 1;
  end

  if (IN0HW1.IN0HWCTR > 1)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0099); /* <=== too many sel. msg*/
    set IN0HM050.IN0HMSEL[1] cursor;
    exit stack;
  end

  if (IN0HW1.IN0HWCTR == 0)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0100); /* <=== no sel made msg*/
    exit stack;
  end

  if (IN0HW1.IN0HWERS == "Y")
    exit stack;
  end

   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0HS78

// set up individual hdr br lines
Function IN0HS80()


   /* *******************************************************/
   /* *** setup individual header browse map detail lines ***/
   /* *******************************************************/

  if (IN0HW1.IN0HWERS == "Y"
   || SQLCA.VAGen_SQLCODE != 0)
    return;
  end

  set IN0HM010.IN0HMSEL[IN0HWIX1] normal;

  IN0HM010.IN0HMSEL[IN0HWIX1] = " ";
  IN0HM010.INASAID[IN0HWIX1] = INAREC.INASAID;
  IN0HM010.INASAOWN[IN0HWIX1] = INAREC.INASAOWN;
  IN0HM010.XNDCD[IN0HWIX1] = INAREC.XNDCD;

  IN0HM010.INAPRGDT[IN0HWIX1] = INAREC.INAPRGDT;

  if (INAREC.XIRCD in XIRTBL.XIRCD)
                                   /* <=== get reason code abrv. from tbl*/
    IN0HM010.XIRABRV[IN0HWIX1] = XIRTBL.XIRABRV[sysVar.arrayIndex];
  else
    IN0HM010.XIRABRV[IN0HWIX1] = " ";
  end

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HS80

// build item browse line
Function IN0HS87()


   /* *******************************************************/
   /* *** setup individual item browse map detail lines   ***/
   /* *******************************************************/

  if (IN0HW1.IN0HWERS == "Y"
   || SQLCA.VAGen_SQLCODE != 0)
    return;
  end

  set IN0HM030.IN0HMSEL[IN0HWIX1] normal;

  IN0HM030.IN0HMSEL[IN0HWIX1] = " ";
  IN0HM030.XWHCD[IN0HWIX1] = IN0HW2.XWHCD[IN0HWIIX];
  IN0HM030.XOWCD[IN0HWIX1] = IN0HW2.XOWCD[IN0HWIIX];
  IN0HM030.XGPCD[IN0HWIX1] = IN0HW2.XGPCD[IN0HWIIX];
  IN0HM030.SY1STNBR[IN0HWIX1] = IN0HW2.SY1STNBR[IN0HWIIX];
  IN0HM030.SY2CLRID[IN0HWIX1] = IN0HW2.SY2CLRID[IN0HWIIX];
  IN0HM030.XDMCD[IN0HWIX1] = IN0HW2.XDMCD[IN0HWIIX];
  IN0HM030.XQACD[IN0HWIX1] = IN0HW2.XQACD[IN0HWIIX];
  IN0HM030.XSDCD[IN0HWIX1] = IN0HW2.XSDCD[IN0HWIIX];
  IN0HM030.XSACD[IN0HWIX1] = IN0HW2.XSACD[IN0HWIIX];
  IN0HM030.XPGCD[IN0HWIX1] = IN0HW2.XPGCD[IN0HWIIX];
  IN0HM030.XUMCD[IN0HWIX1] = IN0HW2.XUMCD[IN0HWIIX];
  IN0HM030.INBSATOT[IN0HWIX1] = IN0HW2.INBSATOT[IN0HWIIX];


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HS87

// build whse/prod item array
Function IN0HS90()

   /* ********************************************************/
   /* *** build item array for in0hm050 screen            ****/
   /* ********************************************************/

   /* ********************************************************/
   /* *** get all item rows that match indexes entered    ****/
   /* *** - the select set and first fetch of a row was   ****/
   /* *** - performed in the s77 statement group          ****/
   /* ********************************************************/


  IN0HW3.IN0HWWIX = 1;
  IN0HW1.IN0HWIX1 = 1;
  while (SQLCA.VAGen_SQLCODE == 0 /* <=== loop to fill browse array*/
   && IN0HW1.IN0HWIX1 <= IN0HW3.IN0HWWMX) /* <=== le max entries*/
    IN0HW3.INASAID[IN0HWWIX] = INBREC.INASAID; /* <=== save itm key*/
    IN0HW3.XWHCD[IN0HWWIX] = INBREC.XWHCD;
    IN0HW3.XOWCD[IN0HWWIX] = INBREC.XOWCD;
    IN0HW3.XGPCD[IN0HWWIX] = INBREC.XGPCD;
    IN0HW3.SY1STNBR[IN0HWWIX] = INBREC.SY1STNBR;
    IN0HW3.SY2CLRID[IN0HWWIX] = INBREC.SY2CLRID;
    IN0HW3.XDMCD[IN0HWWIX] = INBREC.XDMCD;
    IN0HW3.XQACD[IN0HWWIX] = INBREC.XQACD;
    IN0HW3.XSDCD[IN0HWWIX] = INBREC.XSDCD;
    IN0HW3.XSACD[IN0HWWIX] = INBREC.XSACD;
    IN0HW3.XPGCD[IN0HWWIX] = INBREC.XPGCD;
    IN0HW3.XUMCD[IN0HWWIX] = INBREC.XUMCD;
    IN0HSXU(); /* <=== select next item*/
    IN0HW3.IN0HWWIX = IN0HW3.IN0HWWIX + 1;
    IN0HW1.IN0HWIX1 = IN0HW1.IN0HWIX1 + 1;
  end
  IN0HSXV(); /* <=== close set aside items*/

  IN0HW3.IN0HWWPP = 1; /* <=== initialize page pointer*/
  IN0HW3.IN0HWWIX = IN0HW3.IN0HWWIX - 1;
  IN0HW3.IN0HWWAB = IN0HW3.IN0HWWIX; /* <=== set array bottom ptr*/
  IN0HW3.IN0HWWIX = 1; /* <=== initialize array index*/


   /* ********************************************************/
   /* *** end of statement group                          ****/
   /* ********************************************************/

end // end IN0HS90

// select header set inarec
Function IN0HSXA()


   /* *******************************************************/
   /* *** get set aside header set based on set aside    ****/
   /* *** save key:                                      ****/
   /* ***     - this save key is the first set aside id  ****/
   /* ***       on the last page the user looked at or   ****/
   /* ***     - this save key is the set aside position  ****/
   /* ***       key entered on the top of the screen     ****/
   /* *******************************************************/

  call "IO0940" ("SS", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0HW1.IN0HWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0HW1.IN0HWLOP <= 10)
      call "IO0940" ("SS", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
      IN0HW1.IN0HWLOP = IN0HW1.IN0HWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0070); /* <=== not on db msg*/
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0071); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "SS      ";
  TA1REC.TA1LOCAT[2] = "IO0940  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXA ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASHDR01";
  IN0HW1.IN0HWSSI = INAREC.INASAID;
  TA1REC.TA1TBLKE = IN0HW1.IN0HWSSI;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXA

// return set aside header record
Function IN0HSXB()


   /* *******************************************************/
   /* *** return set aside header record after a good    ****/
   /* *** select scan                                    ****/
   /* *******************************************************/

  call "IO0940" ("SN", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0HW1.IN0HWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0HW1.IN0HWLOP <= 10)
      call "IO0940" ("SN", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
      IN0HW1.IN0HWLOP = IN0HW1.IN0HWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    if (IN0HW1.IN0HWFTS == "Y")
      IN0HW1.IN0HWERS = "Y";
      converseLib.validationFailed(0070); /* <=== not on db msg*/
    end
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "SN      ";
  TA1REC.TA1LOCAT[2] = "IO0940  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXB ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASHDR01";
  IN0HW1.IN0HWSSI = INAREC.INASAID;
  TA1REC.TA1TBLKE = IN0HW1.IN0HWSSI;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXB

// close inarec select set
Function IN0HSXC()


   /* *******************************************************/
   /* *** close the set aside header record set          ****/
   /* *******************************************************/

  call "IO0940" ("CS", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "CS      ";
  TA1REC.TA1LOCAT[2] = "IO0940  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXC ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASHDR01";
  IN0HW1.IN0HWSSI = INAREC.INASAID;
  TA1REC.TA1TBLKE = IN0HW1.IN0HWSSI;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXC

// unique select of set aside hdr
Function IN0HSXD()


   /* *******************************************************/
   /* *** select one set aside header record that has    ****/
   /* *** a unique set aside id                          ****/
   /* *******************************************************/

  call "IO0940" ("S ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0HW1.IN0HWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0HW1.IN0HWLOP <= 10)
      call "IO0940" ("S ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
      IN0HW1.IN0HWLOP = IN0HW1.IN0HWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = "IO0940  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXD ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASHDR01";
  IN0HW1.IN0HWSSI = INAREC.INASAID;
  TA1REC.TA1TBLKE = IN0HW1.IN0HWSSI;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXD

// select item set inbrec
Function IN0HSXE()


   /* *******************************************************/
   /* *** get set aside item set based on set aside id   ****/
   /* *******************************************************/

  call "IO0950" ("SS", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0HW1.IN0HWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0HW1.IN0HWLOP <= 10)
      call "IO0950" ("SS", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
      IN0HW1.IN0HWLOP = IN0HW1.IN0HWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0080); /* <=== no items 4 this sas*/
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== call programmer msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "SS      ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXE ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXE

// select next set aside item
Function IN0HSXF()


   /* *******************************************************/
   /* *** return next set aside item                     ****/
   /* *******************************************************/

  call "IO0950" ("SN", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0HW1.IN0HWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0HW1.IN0HWLOP <= 10)
      call "IO0950" ("SN", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
      IN0HW1.IN0HWLOP = IN0HW1.IN0HWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "SN      ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXF ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXF

// close set aside item set
Function IN0HSXG()


   /* *******************************************************/
   /* *** close the set aside item record set            ****/
   /* *******************************************************/

  call "IO0950" ("CS", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "CS      ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXG ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = " ";

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXG

// select set aside item row
Function IN0HSXH()


   /* *******************************************************/
   /* *** select one set aside item record that has      ****/
   /* *** a unique item key                              ****/
   /* *******************************************************/

  call "IO0950" ("S ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0HW1.IN0HWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0HW1.IN0HWLOP <= 10)
      call "IO0950" ("S ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
      IN0HW1.IN0HWLOP = IN0HW1.IN0HWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE >= 0)
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXH ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXH

// select size scale row
Function IN0HSXS()


   /* *******************************************************/
   /* *** use size scale for valid sizes                 ****/
   /* *******************************************************/

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0HW1.IN0HWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0HW1.IN0HWLOP <= 10)
      call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
      IN0HW1.IN0HWLOP = IN0HW1.IN0HWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0015);
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = "IO0040  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXS ";
  TA1REC.TA1DBASE = "DPROD   ";
  TA1REC.TA1TBLVU = "VSCALE01";
  TA1REC.TA1TBLKE = SY4REC.SY4SZSCL;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXS

// select item set inbrec
Function IN0HSXT()


   /* *******************************************************/
   /* *** get set aside item set based on wild cards     ****/
   /* *******************************************************/

  call "IO0950" ("S2", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0HW1.IN0HWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0HW1.IN0HWLOP <= 10)
      call "IO0950" ("S2", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
      IN0HW1.IN0HWLOP = IN0HW1.IN0HWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0HW1.IN0HWERS = "Y";
    converseLib.validationFailed(0071); /* <=== sas db error msg*/
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== call programmer msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "S2      ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXT ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXT

// select next set aside item
Function IN0HSXU()


   /* *******************************************************/
   /* *** return next set aside item                     ****/
   /* *******************************************************/

  call "IO0950" ("N2", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0HW1.IN0HWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0HW1.IN0HWLOP <= 10)
      call "IO0950" ("N2", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
      IN0HW1.IN0HWLOP = IN0HW1.IN0HWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "N2      ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXU ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXU

// close set aside item set
Function IN0HSXV()


   /* *******************************************************/
   /* *** close the set aside item record set            ****/
   /* *******************************************************/

  call "IO0950" ("C2", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0HW1.IN0HWERS = "Y";
  converseLib.validationFailed(0008); /* <=== severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0H    ";
  TA1REC.TA1LOCAT[1] = "C2      ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0HSXV ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = " ";

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0HSXV

//*** RECORD=IN0HW1 ****
// ********************* working storage common fields ********
// 
// purpose:          these working storage fields are generally
//                   used by all applications.
// 
//                   the name of this record and its fields
//                   will still require customization for
//                   application uniqueness.
// 
// 
// maintenance log:
// 
// date      init    comments
// --------  ----    -------------------------------------
// 10-23-86  mgc
// ************************************************************
// **********************
Record IN0HW1 type basicRecord
  10 IN0HWERS IN0HWERS ; 
  10 IN0HWSES IN0HWSES ; 
  10 IN0HWFTS IN0HWFTS ; 
  10 IN0HWEOF IN0HWEOF ; 
  10 IN0HWIX1 IN0HWIX1 ; 
  10 IN0HWIX2 IN0HWIX2 ; 
  10 IN0HWLOP IN0HWLOP ; 
  10 IN0HWCTR IN0HWCTR ; 
  10 IN0HWCT2 IN0HWCT2 ; 
  10 IN0HWLPP IN0HWLPP ; 
  10 IN0HWCDT IN0HWCDT ; 
    15 IN0HWCCC IN0HWCCC ; 
    15 IN0HWCYY IN0HWCYY ; 
    15 IN0HWCMM IN0HWCMM ; 
    15 IN0HWCDD IN0HWCDD ; 
  10 IN0HWLPR IN0HWLPR ; 
  10 IN0HWLMP IN0HWLMP ; 
  10 IN0HWUPD IN0HWUPD ; 
  10 IN0HWINQ IN0HWINQ ; 
  10 IN0HWSSI IN0HWSSI ; 
  10 IN0HWIOM IN0HWIOM ; 
  10 IN0HWBRP IN0HWBRP ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 INBSAQTG INBSAQTG ; 
    15 INBSAQTY INBSAQTY [40] ; 
  10 IN0HWWK1 IN0HWWK1 ; 
  10 IN0HWWK2 IN0HWWK2 ; 
  10 IN0H-SEARCH-KEY-FL IN0H-SEARCH-KEY-FL ; 
  10 IN0H-SEARCH-KEY IN0H-SEARCH-KEY ; 
    15 IN0H-WHSE-KEY IN0H-WHSE-KEY ; 
    15 IN0H-OG-KEY IN0H-OG-KEY ; 
    15 IN0H-GPC-KEY IN0H-GPC-KEY ; 
    15 IN0H-STYLE-KEY IN0H-STYLE-KEY ; 
end // end IN0HW1

//*** RECORD=IN0HW2 ****
// ********************* screen array fields ******************
// 
// purpose:          save header and item information from the
//                   screen to allow for scrolling.
// 
// maintenance log:
// 
// date      init    comments
// --------  ----    -------------------------------------
// 10-23-86  mgc
// 07-23-87  jbc     increased item browse array to 900.
// ************************************************************
// **********************
Record IN0HW2 type basicRecord
  5 IN0HWHPP IN0HWHPP ; 
  5 IN0HWHAB IN0HWHAB ; 
  5 IN0HWHMX IN0HWHMX ; 
  5 IN0HWHIX IN0HWHIX ; 
  5 IN0HWHBA IN0HWHBA [500] ; 
    10 INASAID INASAID ; 
  5 IN0HWIPP IN0HWIPP ; 
  5 IN0HWIAB IN0HWIAB ; 
  5 IN0HWIMX IN0HWIMX ; 
  5 IN0HWIIX IN0HWIIX ; 
  5 IN0HWIBA IN0HWIBA [990] ; 
    10 IN0HWIBK IN0HWIBK ; 
      15 IN0HWSAI IN0HWSAI ; 
      15 IN0H-SEARCH-KEY IN0H-SEARCH-KEY ; 
        20 XWHCD XWHCD ; 
        20 XOWCD XOWCD ; 
        20 XGPCD XGPCD ; 
        20 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XSDCD XSDCD ; 
      15 XSACD XSACD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 INBSATOT INBSATOT ; 
end // end IN0HW2

//*** RECORD=IN0HW3 ****
// ******************* whse/prod screen array indexes *********
// 
// PURPOSE:       SAVE HDR AND ITEM KEYS FOR USE IN BUILDING
//                A WAREHOUSE/PRODUCT SCREEN
// 
// MAINTENANCE LOG:
// 
// DATE       INIT     COMMENTS
// ---------  ----     -------------------------------------
// 11-14-86   MGC
// 07-23-87   JBC      INCREASED ITEM/PRD ARRAY TO 900.
// **********************
Record IN0HW3 type basicRecord
  5 IN0HWWPP IN0HWWPP ; 
  5 IN0HWWAB IN0HWWAB ; 
  5 IN0HWWMX IN0HWWMX ; 
  5 IN0HWWIX IN0HWWIX ; 
  5 IN0HWWBA IN0HWWBA [500] ; 
    10 IN0HWWBK IN0HWWBK ; 
      15 INASAID INASAID ; 
      15 XWHCD XWHCD ; 
      15 XOWCD XOWCD ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XSDCD XSDCD ; 
      15 XSACD XSACD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
end // end IN0HW3

//   gpc
DataItem IN0H-GPC-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   owner-group
DataItem IN0H-OG-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search key for m030
DataItem IN0H-SEARCH-KEY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search key flag
DataItem IN0H-SEARCH-KEY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   style
DataItem IN0H-STYLE-KEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   whse
DataItem IN0H-WHSE-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process to branch to
DataItem IN0HWBRP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date (cc)
DataItem IN0HWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (dd)
DataItem IN0HWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (ccyymmdd)
DataItem IN0HWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (mm)
DataItem IN0HWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work counter 2
DataItem IN0HWCT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work counter
DataItem IN0HWCTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (yy)
DataItem IN0HWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// eof switch (=y)
DataItem IN0HWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general error switch
DataItem IN0HWERS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time switch (=y)
DataItem IN0HWFTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header browse array bottom
DataItem IN0HWHAB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header browse array
DataItem IN0HWHBA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header browse array index
DataItem IN0HWHIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header browse array max ent.
DataItem IN0HWHMX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header browse page pointer
DataItem IN0HWHPP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item browse array bottom
DataItem IN0HWIAB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item browse array
DataItem IN0HWIBA char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item browse key
DataItem IN0HWIBK char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item browse array index
DataItem IN0HWIIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item browse array max ent.
DataItem IN0HWIMX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map inquiry flag (id,whse)
DataItem IN0HWINQ char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// io mod update flag (a,u,d)
DataItem IN0HWIOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item browse page pointer
DataItem IN0HWIPP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'while' counter/index1
DataItem IN0HWIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'while' index for map
DataItem IN0HWIX2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last map
DataItem IN0HWLMP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// loop counter
DataItem IN0HWLOP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lines per page
DataItem IN0HWLPP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last process/sgrp
DataItem IN0HWLPR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item set aside id
DataItem IN0HWSAI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// special error switch
DataItem IN0HWSES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved set aside id
DataItem IN0HWSSI num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map update flag (add,chg,del)
DataItem IN0HWUPD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse/prod brwse array bottom
DataItem IN0HWWAB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// whse/prod array
DataItem IN0HWWBA char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse/prod browse key
DataItem IN0HWWBK char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse/prod array index
DataItem IN0HWWIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// computation work field
DataItem IN0HWWK1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// computation work field
DataItem IN0HWWK2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// whse/prod brwse array max ent
DataItem IN0HWWMX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// whse/prod brwse page pointer
DataItem IN0HWWPP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

