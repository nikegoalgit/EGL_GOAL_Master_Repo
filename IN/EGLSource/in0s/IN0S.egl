package in0s;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=IN0S ****
// overview: process and statement group names follow naming
//           conventions in order to identify common6
//           used in multiple applications or multiple times
//           within the application.
// 
//           process and statement group names contain one
//           character identified in the following examples as
//           'n'.
//           i.e. in0sn20 for a process
//                in0ssan for a statement group
// 
//           the 'n' would then be incremented to indicate the
//           'level' or specific function within the applica-
//           tion.  e.g. if a single application began with a
//           menu (n=0) and had 3 menu selections: 'n' would
//           equal 1 for the first function,equal 2 for the
//           second function and 3 for the third function.
// 
//           each function makes use of an execute (name
//           ending in 'n10') to do one time initializations.
// 
//           maintenance also uses a converse (name ending in
//           'n20') to input and display key field values.
// 
//           it also makes use of an execute (name ending in
//           'n30') to edit the key inputs and obtain table
//           data.
// 
//           the next converse (name ending in 'n40') is used
//           to display and edit the data related to the key
//           (or new data to be added).
// 
//           the final execute (name ending in 'n50') updates
//           the related row(s) and prepares for the main-
//           tenance of the next record.
// 
//           the last three characters of statement group names
//           always start with an 's' and use the following
//           naming convention in the last 2 positions.
// 
//           common statement groups (whose functions are found
//           in other applications) are named with a letter
//           followed by the level number.  the letter cor-
//           reponds to function as follows:
// 
//           a - missing key inputs edits
//           b - same key edits (has the key been changed?)
//           c - key field edits
//           d - key relational edits
//           e - obtain table data
//           f - save current key value(s)
//           o - data field edits
//           p - data relational edits
//           t - enter/pf12 processing
// 
//           the level number corresponds to the function
//           within the application.
// 
//           common statement groups used by more than 1 func-
//           tion within the application are named with the
//           same letter or number in the last two positions.
//           i.e. in0ssaa,in0ssbb,in0ss11,etc.
// 
//           statement groups used in only one function are
//           named with the level number corresponding to that
//           function followed by a letter.
//           i.e. in0ss1a,in0ss2c,in0ss3f,etc.
// ------------------------------------------------------------
// i/o modules     table views
// -----------   ---------------
// sy1120        size verification
//                  dprod.vscale01
//                  dprod.vstyle01
//                  dprod.vsize001
// io0590        dinvnt.vinitm01
// io0760        dinvnt.viahdr01
// io0770        dinvnt.viaitm01
// in9050        update thru availability module
// io0810        dinvnt.vinctl01
// io0240        dcust.vcmpny01
// io0340        dcust.vstore01
// io0720        dinvnt.vtfhdr01
// io0730        dinvnt.vtfitm01
// io0910        dpick.vpktrn01
// io0960        shade/spec/hdr
// io0580        dinvnt.vinhdr01
// io0880        davail.vavitm01
// io0860        dpick.vcarr001
// sr0o          shiprec update
// io0790        dship.vsrhdr01
// sr1011        dship.vsritm01
// io0800        dship.vsrord01
// io1020        dpick.vdaloc01
// io1670        dorder.voppkt01
// io2370        davail.vavqty02
// io3120        dprodg.vsyclr01 (pg2rec)
// io3340        dprodc.vprdcu01 (pc2rec)
// io0200        dcust.vhndlx01  (kufrec)
// ------------------------------------------------------------
// maitenance history:
// 
// revision    date     by whom       description of change
// --------  -------- ------------  -------------------------
//    01     11/19/86  j.brady      created
//    02     03/03/87  j.campbell   fix 2 errors.
//    03     03/26/87  l.deluhery   fixed abort on whse 32 sea-
//                                  son code in s4f.
//    04     04/02/87  l.deluhery   another fix to in0ss4f to
//                                  increment "while" for whse
//                                  32. fix loop and add mis-
//                                  sing in1rec select in s4g.
//    05     04/14/87  g. amen      limit application to 200
//                                  line items in in0ss4u and
//                                  in0s195.
//    06     04/20/87  g. amen      fixed 4 bugs.
//                                  IN0SST1-going thru in0ss1q
//                                  2nd time.
//                                  IN0SS1M-display a message
//                                  when avail qty less than
//                                  units/case.
//                                  IN0SS1J-check xcdtbl for
//                                  good retrn code.
//                                  IN0SS4F-fixed while loop to
//                                  use correct xcdtbl ret code
//                                  by using ezetst subscript.
//    07     04/22/87  g. amen      add availability override
//    08     10/05/87  g. amen      activate spec diff for ph3
//    09     11/13/88  j. campbell  changes for new avaiability
//    10     02/15/88  j. campbell  remove hardcode of whse 32
//                                  for avail lookup.
//  sr#26    06/30/88  m. blailock  deleted sr3rec from table
//                                  list as it is not used.
//    12     11/02/88  j. wood      add noncsp opt on calls
//    13     12/02/88  W. Jones     use partition value
//    14     01/11/89  W. Jones     init. new initm eom fld
//    --     04/25/89  jwood        added xssegtr logic
//    --     05/05/89  jcampb       release stktf: dont write
//                                  to pktrn if issued qty 0.
//    --     07/06/89  jcampb       enhance to post directly to
//                                  dorder.voppkxxx, dont allow
//                                  cancel if picking running,
//                                  and add security for cancel
//                                  if in shiprec.
//  in37     08/21/89  esmith       remove shade and spec cntl
//                                  logic
//  a0010    08/31/89  esmith       fix sql bug in in0ssy3
//     16    11/14/89  ryonke       removed reference to parent
//                                  warehouse code.
//           02/06/90  kande1       added write and delete of
//                                  dorder.voppkt01.
//           03/09/90  kande1       fixed dorder.voppkh01 flags
//                                  for special instructions
//                                  and packing instructions.
//                                  changed map titles for the
//                                  same fields.
//           06/13/90  kande1       add xobcd, xdscd, op1ftind
//                                  to the update of ophrec
//                                  during table changes
//     17    10/14/90  jmoore       added DONT SHIP BEFORE
//                                        DONT SHIP AFTER
//     18    10/15/90  jmoore       dont check DONT SHIP BEFORE
//                                        DONT SHIP AFTER
//                                  if not entered.
//     19    10/17/90  jmoore       removed some commarea flags
//                                  set for testing.
// tbl chgs  02/13/91  cengel       IN0SS2F (SGRP) was changed
//                                  for OPIREC change: XSACD
//                                  renamed to XEGCD, and XSDCD
//                                  renamed to PC2INSEG.
//                                  IN0SS1E modified to look at
//                                  XEGTBL instead of XSATBL.
//                                  XEGTBL added to IN0S and
//                                  XSATBL was dropped.
//     20    02/27/91  tdmiller     updates made to allow use
//                                  of alternate inventory db
//                                  for t-shirts project
// in1058    06/04/91  rvakel       modified code in IN0SSO3
//                                  to allow current date entry
//                                  for OP1DSBDT
//                                  (VTFHDR01 update).
//     21    03/27/92  DPETTI       modified code in IN0S550
//                                  WHEN ERROR PRESENT DON'T
//                                  READ NEXT IN8REC
//                                  (DINVNT.VTFITM01).
//     22    03/20/92  DPETTI       modified code in IN0SSO3
//                                  PACK CODE VALID IF BLANK
// IN#0      10/13/92  dchian       Regenned for table changes.
// IN219     10/29/92  Dannan       Removed code referring to
//                                  whse 32.  Also, removed
//                                  reference to PK1REC.  Chg'd
//                                  the reference in IN0SS88 to
//                                  PK2REC.
// IN214     11/10/92  Dannan     1.Removed edits for family
//                                  code 21.
//                                2.Added call to IO3120 to
//                                  get DPRODG.VSYCLR01 row.
//                                3.Added record PG2REC for new
//                                  I/O mentioned above.
//                                4.Added edits for XISCD = 05,
//                                  using PG2SCRFL.
// IN220     12/04/92  Dannan     1.Removed XSNTBL, season
//                                  table.
//                                2.Added comment for IO2370.
//                                  This IO mod was being used
//                                  but wasn't noted in the
//                                  list.
// IN223     12/16/92  Dannan     Modified moves to time fields
//                                for inventory databases.
//                                Found that the fields were
//                                getting truncated.
// IN222     12/28/92  Dannan     1.Added KUFREC and IO Mod
//                                  IO0200 to allow the use of
//                                  table DCUST.VHNDLX01.
//                                2.Created new statement group
//                                  IN0SSCC to do select.
//                                3.Modified logic in IN0S150
//                                  and IN0S350 to use IN0SSCC.
//                                4.Corrected error in stmt
//                                  group IN0SS1C to move
//                                  IN0SS1C instead of IN0MS1C
//                                  to TA1REC.TA1LOCAT(4).
//                                5.Added error description
//                                  field to IN0SW01 record.
// IN189     02/08/93  Dannan   1.Changed the program so that
// IN191                          for whse to whse, type 10,
// IN205                          the process will not edit for
//                                Available inventory.  Instead
//                                the program will test alt.
//                                inventory and real inventory.
//                              2.Corrected error reporting
//                                in statement group IN0SS14.
//                                Added message 171 when a
//                                SQL +100 occurs on DPRODC.
//                                VPRDCU01.  The program used
//                                to abend.
//                              3.Changed any comments for
//                                IN9010 to IN9050.
//                              4.Completed change requested
//                                by # IN191.  This changed
//                                included conditional logic
//                                to be added to IN0S195,
//                                IN0S450, and IN0SS5F to not
//                                check or update alternate
//                                inventory when the quality
//                                code is not 01.
// IN189     03/04/93  Dannan   1.Corrected a problem with this
//                                original change.  Found that
//                                type 10 transfers should not
//                                update alternate inventory
//                                for the 'to' portion of the
//                                stock transfer.  Users were
//                                receiving error 171 when the
//                                program tried to get the ISEG
//                                from DPRODC.VPRDCU01.  Change
//                                IN0SS12, IN0SS4W, & IN0SS5F.
// IN#0      04/27/93  Dannan   1.Added an edit to statement
//                                group IN0SSC1 to dis-allow
//                                entry of warehouse 25 as a
//                                from warehouse.  This is a
//                                temporary change waiting for
//                                NSG install.  It will be
//                                removed at that time.
// IN#0      04/28/93  Dannan   1.Made necessary changes to
// IN232                          accommodate NSG, whse 25,
// IN1064                         install.  Put hard coded whse
//                                checks for 25 everywhere whse
//                                51 is.
//                              2.The IN232 change will issue
//                                error message 159 when there
//                                is no XIATBL entry.
//                              3.The IN1064 change is to fix
//                                the wrong error message nbr
//                                which was being moved in
//                                statement group IN0SS4E.
//                              4.Also, removed edit from
//                                IN0SSC1 to not allow whse 25
//                                as a 'from' warehouse.
// IN#0      05/14/93  Dannan   1.Modified program to remove
//                                hard code.  Added INRREC,
//                                INRREC02, and common stmt
//                                group XSINS-PROCESS-RULE to
//                                call subroutine IN8000.
// IN#0      06/30/93  Dannan   1.Correct problem with state-
//                                ment group IN0SSD1.  Unable
//                                to key stock transfer type 05
//                                because of edit for 'to'
//                                owner group.
// IN241    07/06/93  Dannan   1.Modified statement group
//                               IN0SS1F to allow blank finish
//                               indicator of 'I', interim.
//                               Also, check indicator when
//                               stock transfer type is 10.
//                               Program was already checking
//                               when type was 05.  Will change
//                               message 170 text.
//                             2.Found that logic contained in
//                               IN0SS1F wasn't included in the
//                               stock transfer maintenance
//                               portion of this program, so
//                               after checking with the users
//                               determined that it needed to
//                               be added.  Logic from IN0SS1F
//                               was added to IN0SSE4.
// IN249    09/10/93  Hkempe     Corrected IN0S550 to move XIR
//                               code to in0m035.xircd.
// IN239    09/13/93  Hkempe     Included an edit in IN0SSE4 to
//                               check for the existency of the
//                               inventory header (IN0SSKK).
// IN242    09/15/93  Hkempe     Set a 5000 limit per stock
//                               transfer for whse 15 on rqstd/
//                               issued qtys.  Added a new stmt
//                               grp (IN0SS-IN8000-STLMT) in
//                               IN0SS11 (Add ST item) and
//                               IN0SSSS (Update ST item).
// IN245    09/20/93  Hkempe     Inconsistencies in logic when
//                               negative qtys.  Added a qty
//                               check in IN0SS1M, moving zero
//                               when the qty is negative.
// IN253    10/26/93  Hkempe   . DB2 error: IN0SS-IO0730-S1/N1/
//                               C1 changed to IN0SS-IO0730-SS/
//                               SN/CS in IN0SS-IN8000-STLMT;
//                             . Change ST item maintenance to
//                               update ZZ change control flds
//                               in IN0SS4T;
//                             . ST header and item maintenance
//                               not allow when header status
//                               is cancelled in IN0SSE3/SE4;
//                             . Update ZZ change control flds
//                               when updating invnt item and
//                               be consistent in inserting
//                               invnt audit header and item -
//                               IN0SS1N, IN0SS4J/S4L/S4M/S4N,
//                               IN0SS5F, IN0SS6E
// 1H0003   11/17/93  Hkempe   . Changed date conversion (thru
//                               TA0040) to use date format
//                               based upon the theater of
//                               operation- IN0SSC1, IN0SSE2,
//                               IN0SSE3, IN0SSE5, IN0SSO3,
//                               IN0S010, IN0S150, IN0S350
// 1H0003   12/20/93  DANNAN   . Created common statement group
//                               IN0SS-IO3120-S and replaced
//                               calls using XSPG202 with the
//                               new statement group in IN0SS1F
//                               and IN0SSE4.
// 1H8000   03/01/94  DANNAN   . Table changes.  Populated the
//                               ZFC-CRCY-CD of OPHREC with the
//                               currency code from XWHTBL.
//                               Statement group IN0SS2H.
// IN254    05/11/94  DANNAN   . Modified program to only
//                               update the 'to' portion of
//                               alternate inventory when
//                               the stock transfer type is 05
//                               and the blank finish indicator
//                               is a 'U'.
// IN268    06/14/94  DANNAN  Removed direct calls to VCOLOR01
//                            and VSTYLE01, and replaced with
//                            a call to a product access subr.,
//                            IN8020.  Removed SY1REC & SY2REC,
//                            added INGREC.  Removed SGRPS
//                            IN0SSAA & IN0SSBB that called
//                            those IO mods.
// RETROFIT 04/30/98  MARBUC  Added logic for whse 51 that a
//                            stock xfer can not be cancelled
//                            if it is on the VMPOLH01
// RETROFIT 12/03/98  ESMIT2  Temporarily allow stock xfers
//                            in VMPOLH01 to be cancelled.
// RETROFIT 04/06/98  ESMIT2  Restore restriction on cancel of
//                            stock xfers already in mpool.
// memphis  05/04/00  sjohn6  change the total to match the
//                            sizes instead of erroring.
// ------------------------------------------------------------
// *********************
Program IN0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IN00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV7REC AV7REC; // record
  AVJREC AVJREC; // record
  AVKREC AVKREC; // record
  AVLREC AVLREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IN0SW01 IN0SW01; // record
  IN0SW02 IN0SW02; // record
  IN1REC IN1REC; // record
  IN2REC IN2REC; // record
  IN5REC IN5REC; // record
  IN6REC IN6REC; // record
  IN7REC IN7REC; // record
  IN8REC IN8REC; // record
  INEREC INEREC; // record
  INGREC INGREC; // record
  INRREC INRREC; // record
  INRREC02 INRREC02 { redefines = INRREC } ; // record
  INRREC08 INRREC08 { redefines = INRREC } ; // record
  INXREC INXREC; // record
  INZREC INZREC; // record
  KUCREC KUCREC; // record
  KUFREC KUFREC; // record
  KUMREC KUMREC; // record
  OPGREC OPGREC; // record
  OPHREC OPHREC; // record
  OPIREC OPIREC; // record
  PC2REC PC2REC; // record
  PG2REC PG2REC; // record
  PK2REC PK2REC; // record
  PWHREC PWHREC; // record
  SQLCA SQLCA; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SR8REC SR8REC; // record
  SRCREC SRCREC; // record
  SY4REC SY4REC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA2REC01 TA2REC01 { redefines = TA2REC } ; // record
  TA8REC TA8REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  VMPOLH01 VMPOLH01; // record
  XOWREC XOWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCDTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XEGTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XIATBL {deleteAfterUse = yes}; // table
  use XIFTBL {deleteAfterUse = yes}; // table
  use XIRTBL {deleteAfterUse = yes}; // table
  use XISTBL {deleteAfterUse = yes}; // table
  use XITTBL {deleteAfterUse = yes}; // table
  use XIUTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPATBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XPKTBL {deleteAfterUse = yes}; // table
  use XPPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use IN0SM.IN0SM005,  // forms
      IN0SM.IN0SM010, 
      IN0SM.IN0SM015, 
      IN0SM.IN0SM018, 
      IN0SM.IN0SM020, 
      IN0SM.IN0SM025, 
      IN0SM.IN0SM030, 
      IN0SM.IN0SM035
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IN0S010: IN0S010();
     /* ****************************************************/
     /* *** BEGINNING OF FLOW LOGIC FOR PROCESS IN0s010 ****/
     /* ****************************************************/


    if (IN0SM005.IN0SMOPT == "1")
      goto IN0S110;
    else
      if (IN0SM005.IN0SMOPT == "2")
        goto IN0S210;
      else
        if (IN0SM005.IN0SMOPT == "3")
          goto IN0S310;
        else
          if (IN0SM005.IN0SMOPT == "4")
            goto IN0S410;
          else
            if (IN0SM005.IN0SMOPT == "5")
              goto IN0S510;
            else
              if (IN0SM005.IN0SMOPT == "6")
                goto IN0S610;
              else
                if (IN0SM005.IN0SMOPT == " ")
                  goto IN0S020;
                else
                  converseLib.validationFailed(10); /* invalid value*/
                  goto IN0S020;
                end
              end
            end
          end
        end
      end
    end


     /* ****************************************************/
     /* ***     end of FLOW LOGIC FOR PROCESS IN0s010   ****/
     /* ****************************************************/
    IN0S020: IN0S020();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0m020 ****/
     /* *******************************************************/


    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S020;
    end

    if (converseVar.eventKey is enter)
      if (IN0SM005.IN0SMOPT == "1")
        goto IN0S110;
      else
        if (IN0SM005.IN0SMOPT == "2")
          goto IN0S210;
        else
          if (IN0SM005.IN0SMOPT == "3")
            goto IN0S310;
          else
            if (IN0SM005.IN0SMOPT == "4")
              goto IN0S410;
            else
              if (IN0SM005.IN0SMOPT == "5")
                goto IN0S510;
              else
                if (IN0SM005.IN0SMOPT == "6")
                  goto IN0S610;
                else
                  converseLib.validationFailed(10); /* invalid value in selection fld*/
                  goto IN0S020;
                end
              end
            end
          end
        end
      end
    end

    if (converseVar.eventKey is pa2)
      goto IN0S010;
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110;
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210;
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310;
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410;
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510;
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610;
    end


     /* ****************************************************/
     /* ***     end of FLOW LOGIC FOR PROCESS IN0s020   ****/
     /* ****************************************************/
    IN0S110: IN0S110();
     /* ************************************************************/
     /* *** normal flow  (or error)                             ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S020;
    else
      goto IN0S120;
    end

     /* ************************************************************/
     /* *** end of:  IN0s110 - FLOW section                     ****/
     /* ************************************************************/
    IN0S120: IN0S120();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0s120 ****/
     /* *******************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0S130; /* <=== edit key inputs*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf12)
      goto IN0S130; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S110; /* <=== resart this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0m120 - FLOW section                     ****/
     /* ************************************************************/
    IN0S130: IN0S130();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s130    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf12)
      converseLib.validationFailed(21);
      goto IN0S120;
    else
      goto IN0S150; /* insert new tf header*/
    end

     /* ************************************************************/
     /* *** end of:  IN0s130 - FLOW section                     ****/
     /* ************************************************************/


    IN0S150: IN0S150();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s150    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y"
     || IN0SW01.IN0SWSES == "Y")
      goto IN0S120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S160;

     /* ************************************************************/
     /* *** end of:  IN0s150 - FLOW section                     ****/
     /* ************************************************************/
    IN0S160: IN0S160();
     /* ************************************************************/
     /* *** normal flow  (or error)                             ****/
     /* ************************************************************/

    goto IN0S170;

     /* ************************************************************/
     /* *** end of:  IN0s160 - FLOW section                     ****/
     /* ************************************************************/
    IN0S170: IN0S170();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0m170 ****/
     /* *******************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S170; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0S180; /* <=== edit key inputs*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S110; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/
    goto IN0S170;

     /* ************************************************************/
     /* *** end of:  IN0m170 - FLOW section                     ****/
     /* ************************************************************/
    IN0S180: IN0S180();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s180    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S170; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S190;

     /* ************************************************************/
     /* *** end of:  IN0s180 - FLOW section                     ****/
     /* ************************************************************/


    IN0S190: IN0S190();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s190    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if NOT the same key: go back to 180 to edit key     ****/
     /* *** IN0sWSKS = 'N' : for diffenent key                  ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWSKS == "N")
      goto IN0S180; /* <=== re-edit new key*/
    end

     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S190; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf19) /* availability override*/
      goto IN0S195; /* <=== update data*/
    end

    if (converseVar.eventKey is pf12)
      converseLib.validationFailed(21);
      goto IN0S190; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S110; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0f190 - FLOW section                     ****/
     /* ************************************************************/
    IN0S195: IN0S195();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s195    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S170; /* <=== re-display this screen*/
    else
      if (IN0SW01.IN0SWSES == "Y") /* either '-803' or '+100' on update*/
        goto IN0S180; /* <=== re-display this screen after new select*/
      end
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S160;

     /* ************************************************************/
     /* *** end of:  IN0s195 - FLOW section                     ****/
     /* ************************************************************/
    IN0S210: IN0S210();
     /* ************************************************************/
     /* *** normal flow  (or error)                             ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S020;
    else
      goto IN0S220;
    end


     /* ************************************************************/
     /* *** end of:  IN0s220 - FLOW section                     ****/
     /* ************************************************************/
    IN0S220: IN0S220();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0s220 ****/
     /* *******************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0S230; /* <=== edit key inputs*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S210; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0s220 - FLOW section                     ****/
     /* ************************************************************/
    IN0S230: IN0S230();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s230    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S240;

     /* ************************************************************/
     /* *** end of:  IN0m230 - FLOW section                     ****/
     /* ************************************************************/
    IN0S240: IN0S240();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s240    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if no release wanted restart transaction            ****/
     /* ************************************************************/

    if (IN0SM018.IN0SMREL == "N")
      goto IN0S210; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      set IN0SM018 alarm;
      goto IN0S240; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if NOT the same key: go back to 230 to edit key     ****/
     /* *** IN0sWSKS = 'N' : for diffenent key                  ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWSKS == "N")
      goto IN0S230; /* <=== re-edit new key*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0S250; /* <=== perform updates*/
    end

    if (converseVar.eventKey is pf12)
      goto IN0S240; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S210; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0s240 - FLOW section                     ****/
     /* ************************************************************/
    IN0S250: IN0S250();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s250    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S240; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S220;

     /* ************************************************************/
     /* *** end of:  IN0s250 - FLOW section                     ****/
     /* ************************************************************/
    IN0S310: IN0S310();
     /* ************************************************************/
     /* *** normal flow  (or error)                             ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S020;
    else
      goto IN0S320;
    end

     /* ************************************************************/
     /* *** end of:  IN0s310 - FLOW section                     ****/
     /* ************************************************************/
    IN0S320: IN0S320();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0m320 ****/
     /* *******************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S320; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0S330; /* <=== edit key inputs*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S310; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0s320 - FLOW section                     ****/
     /* ************************************************************/
    IN0S330: IN0S330();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s330    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S320; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S340;

     /* ************************************************************/
     /* *** end of:  IN0s330 - FLOW section                     ****/
     /* ************************************************************/
    IN0S340: IN0S340();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0m340    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S340; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if NOT the same key: go back to 330 to edit key     ****/
     /* *** IN0mWSKS = 'N' : for diffenent key                  ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWSKS == "N")
      goto IN0S330; /* <=== re-edit new key*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0S350; /* <=== edit data inputs*/
    end

    if (converseVar.eventKey is pf12)
      goto IN0S340; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S310; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0m340 - FLOW section                     ****/
     /* ************************************************************/
    IN0S350: IN0S350();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0m350    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S340; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S320;

     /* ************************************************************/
     /* *** end of:  IN0m350 - FLOW section                     ****/
     /* ************************************************************/
    IN0S410: IN0S410();
     /* ************************************************************/
     /* *** normal flow  (or error)                             ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S020;
    else
      goto IN0S420;
    end

     /* ************************************************************/
     /* *** end of:  IN0s410 - FLOW section                     ****/
     /* ************************************************************/
    IN0S420: IN0S420();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0s420 ****/
     /* *******************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S420; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0S430; /* <=== edit key inputs*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S410; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0s420 - FLOW section                     ****/
     /* ************************************************************/
    IN0S430: IN0S430();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s430    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S420; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S440;

     /* ************************************************************/
     /* *** end of:  IN0s430 - FLOW section                     ****/
     /* ************************************************************/
    IN0S440: IN0S440();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s440    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S440; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if NOT the same key: go back to 430 to edit key     ****/
     /* *** IN0mWSKS = 'N' : for diffenent key                  ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWSKS == "N")
      goto IN0S430; /* <=== re-edit new key*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf19)
      goto IN0S450; /* <=== update data*/
    end

    if (converseVar.eventKey is pf12)
      goto IN0S440; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S410; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0s440 - FLOW section                     ****/
     /* ************************************************************/
    IN0S450: IN0S450();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0m450    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y"
     || IN0SW01.IN0SWSES == "Y")
      goto IN0S440; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S420;

     /* ************************************************************/
     /* *** end of:  IN0m450 - FLOW section                     ****/
     /* ************************************************************/
    IN0S510: IN0S510();
     /* ************************************************************/
     /* *** normal flow  (or error)                             ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S020;
    else
      goto IN0S520;
    end

     /* ************************************************************/
     /* *** end of:  IN0s510 - FLOW section                     ****/
     /* ************************************************************/
    IN0S520: IN0S520();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0s520 ****/
     /* *******************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S520; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0S530; /* <=== edit key inputs*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S510; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0s520 - FLOW section                     ****/
     /* ************************************************************/
    IN0S530: IN0S530();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s530    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S520; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S540;

     /* ************************************************************/
     /* *** end of:  IN0s530 - FLOW section                     ****/
     /* ************************************************************/
    IN0S540: IN0S540();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s540    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S540; /* <=== re-display this screen*/
    else
      if (IN0SM030.IN0SMCFM == "N")
        goto IN0S510;
      end
    end

     /* ************************************************************/
     /* *** if NOT the same key: go back to 330 to edit key     ****/
     /* *** IN0mWSKS = 'N' : for diffenent key                  ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWSKS == "N")
      goto IN0S530; /* <=== re-edit new key*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0S550; /* <=== edit data inputs*/
    end

    if (converseVar.eventKey is pf12)
      goto IN0S540; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S510; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0s540 - FLOW section                     ****/
     /* ************************************************************/
    IN0S550: IN0S550();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s550    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S540; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S520;

     /* ************************************************************/
     /* *** end of:  IN0s550 - FLOW section                     ****/
     /* ************************************************************/
    IN0S610: IN0S610();
     /* ************************************************************/
     /* *** normal flow  (or error)                             ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S020;
    else
      goto IN0S620;
    end

     /* ************************************************************/
     /* *** end of:  IN0s610 - FLOW section                     ****/
     /* ************************************************************/
    IN0S620: IN0S620();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0s620 ****/
     /* *******************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S620; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf12)
      goto IN0S630; /* <=== edit key inputs*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S610; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0s620 - FLOW section                     ****/
     /* ************************************************************/
    IN0S630: IN0S630();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s630    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S620; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S640;

     /* ************************************************************/
     /* *** end of:  IN0s630 - FLOW section                     ****/
     /* ************************************************************/
    IN0S640: IN0S640();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s640    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S640; /* <=== re-display this screen*/
    else
      if (IN0SM035.IN0SMCFM == "N")
        goto IN0S610;
      end
    end

     /* ************************************************************/
     /* *** if NOT the same key: go back to 630 to edit key     ****/
     /* *** IN0mWSKS = 'N' : for diffenent key                  ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWSKS == "N")
      goto IN0S630; /* <=== re-edit new key*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0S650; /* <=== edit data inputs*/
    end

    if (converseVar.eventKey is pf12)
      goto IN0S640; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0S010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0S110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      goto IN0S210; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      goto IN0S310; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0S410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf17)
      goto IN0S510; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf18)
      goto IN0S610; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0S610; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0s640 - FLOW section                     ****/
     /* ************************************************************/
    IN0S650: IN0S650();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0s550    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0SW01.IN0SWERS == "Y")
      goto IN0S640; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0S620;

     /* ************************************************************/
     /* *** end of:  IN0s650 - FLOW section                     ****/
     /* ************************************************************/
  end // end main
end // end IN0S

// IN0s010 - init. for IN0s020
Function IN0S010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();
  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** get theater of operation                            ****/
   /* ************************************************************/

  XSINS-THEATEROPR();
  IN0SW02.INR-ENTRY6-DT = INRREC08.INR-ENTRY6-DT[INR-SEARCH-SUB];

   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set SQLCA empty; /* initialize sql commnunication area*/

  set IN0SM005 initial;
  IN0SM005.XXXTITLE = " STOCK TRANSFER ENTRY     ";
  IN0SM005.XXXCURDT = VGVar.currentShortGregorianDate;

   /* ************************************************************/
   /* *** initialize current date field to include century    ****/
   /* *** and put in non-reinitialized working storage area   ****/
   /* *** in0sw02.                                            ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = VGVar.currentShortGregorianDate;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0SW02.IN0SWCDT = TA2REC.TA2GRGGN;
    /* calculate max basics eta date*/
    set TA8REC empty;
    TA8REC.TA8-OPTION = "CALWRKDT";
    TA8REC.TA8-HOLIDAY-TYPE = "NIKE";
    TA8REC.TA8-COUNTRY = "USA ";
    TA8REC.TA8-WORKWEEK = 6;
    TA8REC.TA8-BEG-DATE = TA2REC.TA2GRGGN;
    TA8REC.TA8-OFFSET = +3;
    call "TA0100" (TA8REC) {isNoRefresh = yes, isExternal = yes};
    if (TA8REC.TA8-RETURN-CODE == 0)
      IN0SW02.MAX-BASIC-ETA = TA8REC.TA8-RETURN-DATE;
    else
      IN0SW02.MAX-BASIC-ETA = 0;
    end
  else
    converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
    exit stack;
  end

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** ver#   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  01  08/06/86  j. brady      created                ****/
   /* ***  12  11/02/88  j. wood       add noncsp opt to calls****/
   /* ***  13  12/02/88  W. Jones      use partition value    ****/
   /* ***  14  01/11/89  W. Jones      init. new initm eom fld****/
   /* ***  17  02/06/90  kande1        added write and delete ****/
   /* ***                              of dorder.voppkt01     ****/
   /* ***  20  03/15/91  tmiller       t-shirts updates       ****/
   /* *** revision number same on all maps and is saved in    ****/
   /* *** the non-reinitialized working storage area in0sw02. ****/
   /* ************************************************************/

  IN0SW02.IN0SWRVN = "20";
  IN0SM005.XXXRVNBR = IN0SW02.IN0SWRVN;

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to set working storage & map fields         ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM != " ")
    IN0SM005.IN0SMOPT = COMMAREA.CAITEM;
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of:  IN0s010 - EXECUTE section                  ****/
   /* ************************************************************/


end // end IN0S010

// IN0m020 - invt.maint menu
Function IN0S020()


  IN0SM005.XXXPRCNM = "IN0S020";

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM005 ;


   /* ************************************************************/
   /* *** if pf9: for prototype only = emergency escape       ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf9)
    exit program;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM005.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM005.CATOAP;
    COMMAREA.CAITEM = IN0SM005.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM005.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM005.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM005.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item fld requires option*/
    set IN0SM005.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switchs, fields,and attributes          ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  set IN0SM005.CATOAP initialAttributes;
  set IN0SM005.CAITEM initialAttributes;
  set IN0SM005.IN0SMOPT initialAttributes;

   /* ************************************************************/
   /* *** if one of the following go to flow immediately      ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)
    exit stack;
  end


   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* *** note: do NOT setup causrea                          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5 or pf3 go inventory menu                     ****/
   /* *** note: do NOT setup causrea                          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-5"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported on this screen*/

   /* ************************************************************/
   /* *** end of:  IN0s020 - AFTER section                    ****/
   /* ************************************************************/


end // end IN0S020

// init. stk trnsfr (hdr) entry
Function IN0S110()
   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set IN0SM010 initial;
  set IN0SW01 empty;
  IN0SW01.IN0SWFST = "Y"; /* init. first time switch*/
  IN0SM010.XXXTITLE = " STOCK TRANSFER ENTRY  (HEADER)";
  IN0SM010.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM010.XXXRVNBR = IN0SW02.IN0SWRVN;

   /* ****** check security *******/

  if (COMMAREA.CAADDFL != "Y")
    converseLib.validationFailed(82); /* not authorized to perform this*/
    IN0SW01.IN0SWERS = "Y";
  end

   /* ***** enter default values ******/

  IN0SM010.IN7STFOW = "00";
  IN0SM010.IN7STTOW = "00";
  IN0SM010.XPPCD = "30";
  IN0SM010.XPACD = "  ";
  IN0SM010.XPKCD = "00";



   /* ************************************************************/
   /* *** end of:  IN0s110 - EXECUTE section                  ****/
   /* ************************************************************/


end // end IN0S110

// display stk trnsfr hdr entry
Function IN0S120()
   /* ************************************************************/
   /* *** setup process name on map                           ****/
   /* ************************************************************/

  IN0SM010.XXXPRCNM = "IN0S120";

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM010 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM010.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM010.CATOAP;
    COMMAREA.CAITEM = IN0SM010.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM010.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item fld requires option*/
    set IN0SM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switches                                ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N"; /* normal error switch*/

   /* ************************************************************/
   /* *** reset map fields                                    ****/
   /* ************************************************************/

  set IN0SM010.XISCD initialAttributes;
  set IN0SM010.IN7STFWH initialAttributes;
  set IN0SM010.IN7STTWH initialAttributes;
  set IN0SM010.IN7STFOW initialAttributes;
  set IN0SM010.IN7STTOW initialAttributes;
  set IN0SM010.IN0SMACT initialAttributes;
  set IN0SM010.IN7STRNM initialAttributes;
  set IN0SM010.IN7STONM initialAttributes;
  set IN0SM010.IN7STQDT initialAttributes;
  set IN0SM010.OP1DSADT initialAttributes;
  set IN0SM010.OP1DSBDT initialAttributes;
  set IN0SM010.XPPCD initialAttributes;
  set IN0SM010.XPACD initialAttributes;
  set IN0SM010.XPKCD initialAttributes;
  set IN0SM010.IN7STINS initialAttributes;
  set IN0SM010.CATOAP initialAttributes;
  set IN0SM010.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if one of the following: go to flow to determine    ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-10"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported on this screen*/

   /* ************************************************************/
   /* *** end of:  IN0s120 - AFTER section                    ****/
   /* ************************************************************/


end // end IN0S120

// edit and obtain table data
Function IN0S130()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA1(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** keys present: edit individual key fields            ****/
   /* ************************************************************/

  IN0SSC1(); /* <=== key field edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: check relational key field edits         ****/
   /* ************************************************************/

  IN0SSD1(); /* <=== key relational edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: process the key fields                   ****/
   /* ************************************************************/

  IN0SSE1(); /* <=== obtain table data*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** end of:  IN0s130 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S130

// update logic for stk tfr hdr
Function IN0S150()
   /* ************************************************************/
   /* *** no edit errors: process the data adds/changes       ****/
   /* ************************************************************/


  IN0SW01.IN0SWSES = "N"; /* special error on update*/

  IN0SW01.IN0SWLOC = "IN0S150 ";
  IN0SW01.IN0SWMAP = "IN0SM010";

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0SW01.IN0SWTIM = TA2REC.TA2TIMEN;
  else
    converseLib.validationFailed(17); /* internal date error*/
    IN0SW01.IN0SWERS = "Y";
    exit stack;
  end

  set IN7REC empty;

  IN7REC.IN7STNBR = IN0SM010.IN7STNBR;

  IN7REC.XISCD = IN0SM010.XISCD;
  IN7REC.XIUCD = "01";

   /* *** convert date to add century ****/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
  if (IN0SW02.INR-ENTRY6-DT == "A")
    TA2REC.TA2GRGAN = IN0SM010.IN7STQDT; /* us date format*/
  else
    TA2REC01.TA2-GREG-DDMMYY = IN0SM010.IN7STQDT; /* eur date format*/
  end
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN7REC.IN7STQDT = TA2REC.TA2GRGGN;
  else
    converseLib.validationFailed(18); /* internal date error - contact sys.*/
                                   /* support*/
    IN0SW01.IN0SWERS = "Y";
    exit stack;
  end

   /* *** convert dont ship after date to add century ****/

  if (IN0SM010.OP1DSADT > 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
    if (IN0SW02.INR-ENTRY6-DT == "A")
      TA2REC.TA2GRGAN = IN0SM010.OP1DSADT; /* us date format*/
    else
      TA2REC01.TA2-GREG-DDMMYY = IN0SM010.OP1DSADT; /* eur date format*/
    end
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN7REC.OP1DSADT = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(18); /* internal date error - contact sys.*/
                                   /* support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end


   /* *** convert dont ship before date to add century ****/

  if (IN0SM010.OP1DSBDT > 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
    if (IN0SW02.INR-ENTRY6-DT == "A")
      TA2REC.TA2GRGAN = IN0SM010.OP1DSBDT; /* us date format*/
    else
      TA2REC01.TA2-GREG-DDMMYY = IN0SM010.OP1DSBDT; /* eur date format*/
    end
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN7REC.OP1DSBDT = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(18); /* internal date error - contact sys.*/
                                   /* support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  IN7REC.IN7STIDT = IN0SW02.IN0SWCDT;
  IN7REC.IN7STRNM = IN0SM010.IN7STRNM;
  IN7REC.IN7STFWH = IN0SM010.IN7STFWH;
  IN7REC.IN7STFOW = IN0SM010.IN7STFOW;
  IN7REC.IN7STTWH = IN0SM010.IN7STTWH;
  IN7REC.IN7STTOW = IN0SM010.IN7STTOW;
  IN0SW01.IN0SWACT = IN0SM010.IN0SMACT;
  IN7REC.KUCCOID = IN0SW01.IN0SWCOI;
  IN7REC.KUMSTRID = IN0SW01.IN0SWSTO;
  IN7REC.XNXCD = IN0SW01.IN0SWDPT;
  IN7REC.XGPCD = IN0SW01.IN0SWGPC;
  IN7REC.IN7STONM = IN0SM010.IN7STONM;
  IN7REC.XPPCD = IN0SM010.XPPCD;
  IN7REC.XPKCD = IN0SM010.XPKCD;
  IN7REC.IN7STINS = IN0SM010.IN7STINS;
  IN7REC.ZZZSDT = IN0SW02.IN0SWCDT;
  IN7REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
  IN7REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
  IN7REC.ZZZCHGCT = 0;

  if (IN0SM010.XPACD > "  ")
    IN7REC.XPACD = IN0SM010.XPACD; /* move value entered from map*/
  else
    set KUFREC empty; /* record for DCUST.VHNDLX01*/
    KUFREC.KUCCOID = IN0SW01.IN0SWCOI;
    KUFREC.KUMSTRID = IN0SW01.IN0SWSTO;
    KUFREC.XNXCD = IN0SW01.IN0SWDPT;
    KUFREC.XGPCD = IN0SW01.IN0SWGPC;

    IN0SSCC(); /* 'S' call customer handling exception*/

    if (SQLCA.VAGen_SQLCODE == 0)
      IN7REC.XPACD = KUFREC.XPACD;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        IN7REC.XPACD = "  ";
      else
        exit stack;
      end
    end
  end

  IN0SSEE(); /* 's' call trnsfr hdr db (in7rec)*/

  if (SQLCA.VAGen_SQLCODE == 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.validationFailed(22);
    IN0SW01.IN0SWSES = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0SS1C(); /* add stk trnsfr hdr row*/
    else
      exit stack;
    end
  end

   /* ************************************************************/
   /* *** if error (not special update error get out now      ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** if special error get out now                        ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSES == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** commit calls                                        ****/
   /* ************************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* ************************************************************/
   /* *** end of:  IN0s150 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S150

// init for map in0sm015
Function IN0S160()
   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set IN0SM015 initial;
  set IN0SW01 empty;
  IN0SM015.XXXTITLE = " STOCK TRANSFER ENTRY  (ITEM)  ";
  IN0SM015.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM015.XXXRVNBR = IN0SW02.IN0SWRVN;

   /* ****** initialize default fields *******/

  IN0SM015.IN7STNBR = IN0SM010.IN7STNBR;
  IN0SM015.SY2CLRID = "00 ";
  IN0SM015.XDMCD = "00";
  IN0SM015.XSDCD = "000";
  IN0SM015.XSACD = "000";
  IN0SM015.XPGCD = "00";
  IN0SM015.XQACD = "01";

   /* ************************************************************/
   /* *** end of:  IN0s160 - EXECUTE section                  ****/
   /* ************************************************************/


end // end IN0S160

// display stk trnsfr item
Function IN0S170()
   /* ************************************************************/
   /* *** setup process name on map                           ****/
   /* ************************************************************/

  IN0SM015.XXXPRCNM = "IN0S170";

   /* ************************************************************/
   /* *** protect data input fields                           ****/
   /* ************************************************************/

  IN0SW01.IN0SWIX1 = 1;
  while (IN0SWIX1 <= 40)
    set IN0SM015.IN8SQQ[IN0SWIX1] protect;
    IN0SWIX1 = IN0SWIX1 + 1;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM015 ;


   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM015.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM015.CATOAP;
    COMMAREA.CAITEM = IN0SM015.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM015.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM015.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM015.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data initem field requires option*/
    set IN0SM015.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switches                                ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N"; /* normal error switch*/

   /* ************************************************************/
   /* *** reset map fields                                    ****/
   /* ************************************************************/

  set IN0SM015.XGPCD initialAttributes;
  set IN0SM015.SY1STNBR initialAttributes;
  set IN0SM015.SY2CLRID initialAttributes;
  set IN0SM015.XDMCD initialAttributes;
  set IN0SM015.XQACD initialAttributes;
  set IN0SM015.XUMCD initialAttributes;
  IN0SW01.IN0SWIX1 = 1;
  while (IN0SWIX1 <= 40)
    set IN0SM015.IN8SQQ[IN0SWIX1] initialAttributes;
    IN0SWIX1 = IN0SWIX1 + 1;
  end
  set IN0SM015.CATOAP initialAttributes;
  set IN0SM015.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if one of the following: go to flow to determine    ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM015.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM015.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-15"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM015.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0s170 - AFTER section                    ****/
   /* ************************************************************/


end // end IN0S170

// edit obtain table data
Function IN0S180()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SS1D(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** keys present: edit individual key fields            ****/
   /* ************************************************************/

  IN0SS1E(); /* <=== key field edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: process the key fields                   ****/
   /* ************************************************************/

  IN0SS1F(); /* <=== obtain table data*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0SS1G(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of:  IN0s180 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S180

// display stk trsfr entry (item)
Function IN0S190()
   /* ************************************************************/
   /* *** setup new process name on map                       ****/
   /* ************************************************************/

  IN0SM015.XXXPRCNM = "IN0S190";

   /* ************************************************************/
   /* *** set cursor to first data input field                ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS != "Y")
    set IN0SM015.IN8SQQ[1] cursor;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM015 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM015.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM015.CATOAP;
    COMMAREA.CAITEM = IN0SM015.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM015.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM015.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM015.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5);
    set IN0SM015.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switches & fields                             ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  IN0SW01.IN0SWSES = "N";
  set IN0SM015.XGPCD initialAttributes;
  set IN0SM015.SY1STNBR initialAttributes;
  set IN0SM015.SY2CLRID initialAttributes;
  set IN0SM015.XDMCD initialAttributes;
  set IN0SM015.XQACD initialAttributes;
  set IN0SM015.XUMCD initialAttributes;
  IN0SW01.IN0SWIX1 = 1;
  while (IN0SWIX1 <= 40)
    set IN0SM015.IN8SQQ[IN0SWIX1] initialAttributes;
    IN0SWIX1 = IN0SWIX1 + 1;
  end
  set IN0SM015.CATOAP initialAttributes;
  set IN0SM015.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if ENTER, PF12 or pf19: edit key & data inputs      ****/
   /* ************************************************************/
  if (converseVar.eventKey is pf19)
    IN0SW01.IN0SWSW1 = "Y"; /* reset first time switches*/
    IN0SW01.IN0SWSW2 = "Y";
    IN0SW01.IN0SWSW3 = "Y";
    IN0SW01.IN0SWOVR = "Y"; /* override availability*/
    IN0SST1(); /* <=== ENTER/PF12 editing*/
    exit stack;
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    IN0SST1(); /* <=== ENTER/PF12 editing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM015.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM015.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-15"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM015.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0s190 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S190

// update stk trnsfr item db
Function IN0S195()
   /* -----------------------------------------------------------*/
   /* *** no edit errors: process the data adds/changes       ****/
   /* -----------------------------------------------------------*/

   /* *** if product is shippable call availability module to do*/
   /* *** all updating, if not shippable perform updates to in6rec*/
   /* *** in8rec*/

  IN0SW01.IN0SWLOC = "IN0S195 "; /* save map and process in*/
  IN0SW01.IN0SWMAP = "IN0SM015"; /* case of abend*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0SW01.IN0SWTIM = TA2REC.TA2TIMEN;
  else
    converseLib.validationFailed(17); /* internal date error*/
    IN0SW01.IN0SWERS = "Y";
    exit stack;
  end
    /*  */
    /* Alternate Inventory Update Logic*/
    /* --------------------------------*/
    /* Note: some of this logic exists in IN0SS12.*/
    /*  */
    /* If the stock transfer type is a 05 or 10*/
    /* If the quality code = 01*/
    /* If the blank finish indicator is a B or I  (PG2REC.PG2SCRFL)*/
    /* Update both the 'from' & 'to' portions for a type 05*/
    /* Update only the 'from'        portion  for a type 10*/
    /* else*/
    /* If the blank finish indicator is a U*/
    /* Update only the 'to' portion for a type 05*/
    /* No update at all if type 10*/
    /*  */

  if (IN0SM010.XISCD == "05"
   || IN0SM010.XISCD == "10")
    if (IN0SM015.XQACD == "01")
      IN0SS12(); /* Update?  Alternate Inventory*/
    end
  end

  if (IN0SW01.IN0SWERS == "N")
    if (IN0SW01.IN0SWSHP == "Y"
     && IN0SM010.XISCD != "05" /* do not do avail check for type 05*/
     && IN0SM010.XISCD != "10") /* do not do avail check for type 10*/
      IN0SS1L(); /* perform updating through in9050*/
    else
      IN0SS1N(); /* update inventory & audit dbs*/
    end
  end

  if (IN0SW01.IN0SWERS == "N")
    IN0SWIX1 = 1;
    IN0SWIX3 = 0;

    set IN8REC empty;

    while (IN0SWIX1 <= 40)
      if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
        IN0SWIX3 = IN0SWIX3 + 1;
        IN8REC.IN8SQQ[IN0SWIX1] = IN0SM015.IN8SQQ[IN0SWIX3];
        IN8REC.IN8SIQ[IN0SWIX1] = IN0SM015.IN8SIQ[IN0SWIX3];
      end
      IN0SWIX1 = IN0SWIX1 + 1;
    end

    if (IN0SW01.IN0SWERS == "N")
      if (IN0SW01.IN0SWOVR == "Y")
        IN8REC.IN8AVOVR = "Y";
                                   /* set availability override flag*/
      else
        IN8REC.IN8AVOVR = " ";
      end
      IN8REC.IN7STNBR = IN0SM015.IN7STNBR;
      IN8REC.XGPCD = IN0SM015.XGPCD;
      IN8REC.SY1STNBR = IN0SM015.SY1STNBR;
      IN8REC.SY2CLRID = IN0SM015.SY2CLRID;
      IN8REC.XDMCD = IN0SM015.XDMCD;
      IN8REC.XQACD = IN0SM015.XQACD;
      IN8REC.XSACD = IN0SM015.XSACD;
      IN8REC.XSDCD = IN0SM015.XSDCD;
      IN8REC.XPGCD = IN0SM015.XPGCD;
      IN8REC.XUMCD = IN0SM015.XUMCD;
      IN0SSVV(); /* obtain stk trnsfr line number*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (IN8REC.IN8STLNE > 199) /* only 200 line items allowed*/
          converseLib.validationFailed(129);
          IN0SW01.IN0SWERS = "Y";
          exit stack;
        else
          IN8REC.IN8STLNE = IN8REC.IN8STLNE + 1;
          IN8REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
          IN8REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
          IN8REC.ZZZCHGCT = 0;
          IN0SS11(); /* add tfr item db row (in8rec)*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == -305)
          IN8REC.IN8STLNE = 1;
          IN8REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
          IN8REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
          IN8REC.ZZZCHGCT = 0;
          IN0SS11(); /* add tfr item db row (in8rec)*/
        end
      end
    end
  end

   /* ************************************************************/
   /* *** if error: call reset to backout any updates         ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** if special update error get out now                 ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSES == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** initialize specific input & working stg fields      ****/
   /* ************************************************************/

  IN0SSQ1(); /* <=== blank data input fields*/

   /* ************************************************************/
   /* *** no errors: call commit to make updates permanent    ****/
   /* ************************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* ************************************************************/
   /* *** end of:  IN0s195 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S195

// init stock release
Function IN0S210()
   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set IN0SM018 initial;
  set IN0SW01 empty;
  IN0SM018.XXXTITLE = "    STOCK TRANSFER RELEASE     ";
  IN0SM018.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM018.XXXRVNBR = IN0SW02.IN0SWRVN;

   /* ************************************************************/
   /* *** check security                                      ****/
   /* ************************************************************/

  if (COMMAREA.CAADDFL == "Y"
   && COMMAREA.CAALVL[1] == "Y")
    /* next sentence*/
  else
    if (COMMAREA.CACHGFL == "Y"
     && COMMAREA.CACLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(82); /* not authorized*/
      IN0SW01.IN0SWERS = "Y";
    end
  end

   /* ************************************************************/
   /* *** end of:  IN0s210 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S210

// display stock release
Function IN0S220()
   /* ************************************************************/
   /* *** setup process name on map                           ****/
   /* ************************************************************/

  IN0SM018.XXXPRCNM = "IN0S220";

   /* ************************************************************/
   /* *** protect data input fields                           ****/
   /* ************************************************************/

  if (converseVar.validationMsgNum == 0)
    set IN0SM018.IN0SMREL protect;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM018 ;


   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM018.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM018.CATOAP;
    COMMAREA.CAITEM = IN0SM018.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM018.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM018.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM018.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0SM018.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switches                                ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";

   /* ************************************************************/
   /* *** reset map field attributes                          ****/
   /* ************************************************************/

  set IN0SM018.IN7STNBR initialAttributes;
  set IN0SM018.IN0SMREL initialAttributes;
  set IN0SM018.CATOAP initialAttributes;
  set IN0SM018.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if one of the following: go to flow to determine    ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM018.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM018.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-18"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM018.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0s220 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S220

// edit and obtain table data
Function IN0S230()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA2(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end


   /* ************************************************************/
   /* *** no errors: process the key fields                   ****/
   /* ************************************************************/

  IN0SSE2(); /* <=== obtain table data*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0SSF2(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of:  IN0s230 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S230

// display stock release
Function IN0S240()
   /* ************************************************************/
   /* *** setup new process name on map                       ****/
   /* ************************************************************/

  IN0SM018.XXXPRCNM = "IN0S240";

   /* ************************************************************/
   /* *** set cursor to first data input field                ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS != "Y")
    set IN0SM018.IN0SMREL cursor;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM018 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM018.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM018.CATOAP;
    COMMAREA.CAITEM = IN0SM018.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM018.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM018.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM018.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0SM018.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switches & fields                             ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  set IN0SM018.IN7STNBR initialAttributes;
  set IN0SM018.IN0SMREL initialAttributes;
  set IN0SM018.CATOAP initialAttributes;
  set IN0SM018.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if ENTER or PF12: edit key & data inputs            ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    IN0SST2(); /* <=== ENTER/PF12 editing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM018.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM018.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-18"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM018.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0s240 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S240

// update stk trnsfr hdr db
Function IN0S250()
   /* *************************************************************/
   /* ***         in0s250 - update stktf data base             ****/
   /* *************************************************************/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0SW01.IN0SWTIM = TA2REC.TA2TIMEN;
  else
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(17); /* internal date error*/
    exit stack;
  end

   /* *** obtain & write picking data ****/

  set IN8REC empty;
  set OPGREC empty; /* dorder.voppkt01*/
  set OPHREC empty; /* dorder.voppkh01*/

  IN8REC.IN7STNBR = IN0SM018.IN7STNBR;

  IN0SS55(); /* select set of stk trnfr items*/

  while (SQLCA.VAGen_SQLCODE == 0
   && converseVar.validationMsgNum == 0)
    IN0SS2F(); /* read each stktf itm & add to oppki01*/
  end

  IN0SS77(); /* 'cs' call to stk trnfr itm db*/
                                  /* (in8rec)*/

   /* ************************************************************/
   /* *** if error: call reset to backout any updates         ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS == "Y")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    exit stack;
  end

  if (OPHREC.PK4ITEMS == 0) /* if no items written stktf not*/
                                   /* released*/
    converseLib.validationFailed(134); /* qty issued is zero - not released*/
    IN0SW01.IN0SWERS = "Y";
  else
    IN0SS2H(); /* add order oppkh01*/
    if (OPHREC.OP1SPINF == "Y" /* if special instructions*/
     || OPHREC.OP1SPLBF == "Y") /* or shipping instructions*/
      IN0SS2I(); /* add order oppkt01*/
    end
    IN7REC.XIUCD = "02"; /* stktf released code/date*/
    IN7REC.IN7STLDT = IN0SW02.IN0SWCDT;
    IN7REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
    IN7REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
    IN0SSQQ(); /* update stk trnsfr hdr*/
    if (SQLCA.VAGen_SQLCODE != 0)
      exit stack;
    end
  end

   /* ************************************************************/
   /* *** if error: call reset to backout any updates         ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS == "Y")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    exit stack;
  end

   /* ************************************************************/
   /* *** initialize specific input & working stg fields      ****/
   /* ************************************************************/

  IN0SSQ2(); /* <=== blank data input fields*/

   /* ************************************************************/
   /* *** if special update error get out now                 ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSES == "Y")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: call commit to make updates permanent    ****/
   /* ************************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* ************************************************************/
   /* *** setup successful message                            ****/
   /* ************************************************************/

  converseLib.validationFailed(9); /* update successful*/

   /* *************************************************************/
   /* *** end of: in0s250 - update stktf data base             ****/
   /* *************************************************************/
end // end IN0S250

// init stk trnsfr maint (hdr)
Function IN0S310()
   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set IN0SM020 initial;
  set IN0SW01 empty;
  IN0SM020.XXXTITLE = "STOCK TRANSFER MAINTENANCE(HEADER)";
  IN0SM020.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SW01.IN0SWERS = "N";
  IN0SM020.XXXRVNBR = IN0SW02.IN0SWRVN;

   /* ************************************************************/
   /* *** test security                                       ****/
   /* ************************************************************/

  if (COMMAREA.CACHGFL != "Y")
    converseLib.validationFailed(82); /* not authorized*/
    IN0SW01.IN0SWERS = "Y";
  end


   /* ************************************************************/
   /* *** end of:  IN0s310 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S310

// display stk trnsfr maint (hdr)
Function IN0S320()
   /* ************************************************************/
   /* *** setup process name on map                           ****/
   /* ************************************************************/

  IN0SM020.XXXPRCNM = "IN0S320";

   /* ************************************************************/
   /* *** protect data input fields                           ****/
   /* ************************************************************/

  set IN0SM020.IN0SMACT protect;
  set IN0SM020.IN7STRNM protect;
  set IN0SM020.IN7STONM protect;
  set IN0SM020.IN7STETA protect;
  set IN0SM020.XPPCD protect;
  set IN0SM020.TF1CARCD protect;
  set IN0SM020.TF2PRONO protect;
  set IN0SM020.PK1BLLAD protect;
  set IN0SM020.PK1WT protect;
  set IN0SM020.PK1NBCTN protect;
  set IN0SM020.IN7STINS protect;
  set IN0SM020.IN7SPINS protect;
  set IN0SM020.OP1DSADT protect;
  set IN0SM020.OP1DSBDT protect;

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM020 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM020.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM020.CATOAP;
    COMMAREA.CAITEM = IN0SM020.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM020.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM020.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM020.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0SM020.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch and map fields                   ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  set IN0SM020.IN7STNBR initialAttributes;
  set IN0SM020.IN0SMACT initialAttributes;
  set IN0SM020.IN7STRNM initialAttributes;
  set IN0SM020.IN7STONM initialAttributes;
  set IN0SM020.IN7STETA initialAttributes;
  set IN0SM020.XPPCD initialAttributes;
  set IN0SM020.TF1CARCD initialAttributes;
  set IN0SM020.TF2PRONO initialAttributes;
  set IN0SM020.PK1BLLAD initialAttributes;
  set IN0SM020.PK1WT initialAttributes;
  set IN0SM020.PK1NBCTN initialAttributes;
  set IN0SM020.IN7STINS initialAttributes;
  set IN0SM020.IN7SPINS initialAttributes;
  set IN0SM020.OP1DSADT initialAttributes;
  set IN0SM020.OP1DSBDT initialAttributes;
  set IN0SM020.CATOAP initialAttributes;
  set IN0SM020.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-20"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0s320 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S320

// edit & obtain table data
Function IN0S330()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA3(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: process the key fields                   ****/
   /* ************************************************************/

  IN0SSE3(); /* <=== obtain table data*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0SSF3(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of:  IN0s330 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S330

// display stk trnsfr maint (hdr)
Function IN0S340()
   /* ************************************************************/
   /* *** setup new process name on map                       ****/
   /* ************************************************************/

  IN0SM020.XXXPRCNM = "IN0S340";


   /* ************************************************************/
   /* *** set cursor to first data input field                ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS != "Y")
    set IN0SM020.IN0SMACT cursor;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM020 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM020.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM020.CATOAP;
    COMMAREA.CAITEM = IN0SM020.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM020.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM020.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM020.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0SM020.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switches & fields                             ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  set IN0SM020.IN7STNBR initialAttributes;
  set IN0SM020.IN0SMACT initialAttributes;
  set IN0SM020.IN7STRNM initialAttributes;
  set IN0SM020.IN7STONM initialAttributes;
  set IN0SM020.IN7STETA initialAttributes;
  set IN0SM020.XPPCD initialAttributes;
  set IN0SM020.TF1CARCD initialAttributes;
  set IN0SM020.TF2PRONO initialAttributes;
  set IN0SM020.PK1BLLAD initialAttributes;
  set IN0SM020.PK1WT initialAttributes;
  set IN0SM020.PK1NBCTN initialAttributes;
  set IN0SM020.IN7STINS initialAttributes;
  set IN0SM020.IN7SPINS initialAttributes;
  set IN0SM020.OP1DSADT initialAttributes;
  set IN0SM020.OP1DSBDT initialAttributes;
  set IN0SM020.CATOAP initialAttributes;
  set IN0SM020.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if ENTER or PF12: edit key & data inputs            ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    IN0SST3(); /* <=== ENTER/PF12 editing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-20"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* error - notify programming*/

   /* ************************************************************/
   /* *** end of:  IN0s340 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S340

// update stk trnsfr hdr db
Function IN0S350()
   /* ************************************************************/
   /* *** no edit errors: process the data adds/changes       ****/
   /* ************************************************************/


   /* **** set up abend areas in case of and abend *****/

  IN0SW01.IN0SWLOC = "IN0S350 ";
  IN0SW01.IN0SWMAP = "IN0SM020";

   /* **** set up acct num and eta for their compares *****/

  IN0SW01.IN0SWCOI = IN7REC.KUCCOID;
  IN0SW01.IN0SWSTO = IN7REC.KUMSTRID;
  IN0SW01.IN0SWDPT = IN7REC.XNXCD;
  IN0SW01.IN0SWGPC = IN7REC.XGPCD;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0SW01.IN0SWTIM = TA2REC.TA2TIMEN;
  else
    converseLib.validationFailed(17); /* time is incorrect*/
    IN0SW01.IN0SWERS = "Y";
  end

  if (IN0SM020.IN7STETA != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
    if (IN0SW02.INR-ENTRY6-DT == "A")
      TA2REC.TA2GRGAN = IN0SM020.IN7STETA; /* us date format*/
    else
      TA2REC01.TA2-GREG-DDMMYY = IN0SM020.IN7STETA;
                                   /* eur date format*/
    end
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SW01.IN0SWDTE = TA2REC.TA2GRGGN;
   /* check the eta date for basics*/
      if (IN0SM020.IN7STFWH == "93"
       || IN0SM020.IN7STTWH == "93")
        if (TA2REC.TA2GRGGN > IN0SW02.MAX-BASIC-ETA)
          converseLib.validationFailed(18); /* INVALID DATE ENTERED*/
          set IN0SM020.IN7STETA cursor, bold;
          IN0SW01.IN0SWERS = "Y";
        end
      end
    else
      converseLib.validationFailed(18); /* date entered is incorrect*/
      set IN0SM020.IN7STETA cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    IN0SW01.IN0SWDTE = 0;
  end

  if (IN0SM020.OP1DSADT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
    if (IN0SW02.INR-ENTRY6-DT == "A")
      TA2REC.TA2GRGAN = IN0SM020.OP1DSADT; /* us date format*/
    else
      TA2REC01.TA2-GREG-DDMMYY = IN0SM020.OP1DSADT;
                                   /* eur date format*/
    end
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SW01.IN0SWADT = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(18); /* date entered is incorrect*/
      set IN0SM020.OP1DSADT cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    IN0SW01.IN0SWADT = 0;
  end

  if (IN0SM020.OP1DSBDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
    if (IN0SW02.INR-ENTRY6-DT == "A")
      TA2REC.TA2GRGAN = IN0SM020.OP1DSBDT; /* us date format*/
    else
      TA2REC01.TA2-GREG-DDMMYY = IN0SM020.OP1DSBDT;
                                   /* eur date format*/
    end
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SW01.IN0SWBDT = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(18); /* date entered is incorrect*/
      set IN0SM020.OP1DSBDT cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    IN0SW01.IN0SWBDT = 0;
  end

  if (IN0SW01.IN0SWERS == "N")
    if (IN0SW01.IN0SWACT == IN0SM020.IN0SMACT
     && IN7REC.IN7STRNM == IN0SM020.IN7STRNM
     && IN7REC.IN7STONM == IN0SM020.IN7STONM
     && IN7REC.IN7STETA == IN0SM020.IN7STETA
     && IN7REC.OP1DSADT == IN0SW01.IN0SWADT
     && IN7REC.OP1DSBDT == IN0SW01.IN0SWBDT
     && IN7REC.XPPCD == IN0SM020.XPPCD
     && IN7REC.XPKCD == IN0SM020.XPKCD
     && IN7REC.XPACD == IN0SM020.XPACD
     && IN7REC.TF1CARCD == IN0SM020.TF1CARCD
     && IN7REC.TF2PRONO == IN0SM020.TF2PRONO
     && IN7REC.PK1WT == IN0SM020.PK1WT
     && IN7REC.PK1NBCTN == IN0SM020.PK1NBCTN
     && IN7REC.PK1BLLAD == IN0SM020.PK1BLLAD
     && IN7REC.IN7STINS == IN0SM020.IN7STINS
     && IN7REC.IN7SPINS == IN0SM020.IN7SPINS)
      converseLib.validationFailed(51); /* nothing changed - no update*/
      IN0SW01.IN0SWERS = "Y";
    else
      IN0SW01.IN0SWACT = IN0SM020.IN0SMACT;
      IN7REC.KUCCOID = IN0SW01.IN0SWCOI;
      IN7REC.KUMSTRID = IN0SW01.IN0SWSTO;
      IN7REC.XNXCD = IN0SW01.IN0SWDPT;
      IN7REC.XGPCD = IN0SW01.IN0SWGPC;
      IN7REC.IN7STRNM = IN0SM020.IN7STRNM;
      IN7REC.IN7STONM = IN0SM020.IN7STONM;
      IN7REC.IN7STETA = IN0SW01.IN0SWDTE;
      IN7REC.OP1DSBDT = IN0SW01.IN0SWBDT;
      IN7REC.OP1DSADT = IN0SW01.IN0SWADT;
      IN7REC.XPPCD = IN0SM020.XPPCD;
      IN7REC.XPKCD = IN0SM020.XPKCD;
      IN7REC.TF1CARCD = IN0SM020.TF1CARCD;
      IN7REC.TF2PRONO = IN0SM020.TF2PRONO;
      IN7REC.PK1WT = IN0SM020.PK1WT;
      IN7REC.PK1NBCTN = IN0SM020.PK1NBCTN;
      IN7REC.PK1BLLAD = IN0SM020.PK1BLLAD;
      IN7REC.IN7STINS = IN0SM020.IN7STINS;
      IN7REC.IN7SPINS = IN0SM020.IN7SPINS;
      IN7REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
      IN7REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
      if (IN0SM020.XPACD > "  ")
        IN7REC.XPACD = IN0SM020.XPACD;
      else
        set KUFREC empty;
        KUFREC.KUCCOID = IN0SW01.IN0SWCOI;
        KUFREC.KUMSTRID = IN0SW01.IN0SWSTO;
        KUFREC.XNXCD = IN0SW01.IN0SWDPT;
        KUFREC.XGPCD = IN0SW01.IN0SWGPC;
        IN0SSCC(); /* 'S'  CALL TO DCUST.VHNDLX01*/
        if (SQLCA.VAGen_SQLCODE == 0)
          IN7REC.XPACD = KUFREC.XPACD;
        else
          if (SQLCA.VAGen_SQLCODE == +100)
            IN7REC.XPACD = "  ";
          else
            exit stack;
          end
        end
      end
      IN0SSQQ(); /* 'u ' call to stk trnsfr db (in7rec)*/
    end
  end


   /* ************************************************************/
   /* *** if error: call reset to backout any updates         ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** initialize specific input & working stg fields      ****/
   /* ************************************************************/

  IN0SSQ3(); /* <=== blank data input fields*/

   /* ************************************************************/
   /* *** if special update error get out now                 ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSES == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: call commit to make updates permanent    ****/
   /* ************************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* ************************************************************/
   /* *** setup successful message                            ****/
   /* ************************************************************/

  converseLib.validationFailed(9); /* update successful*/

   /* ************************************************************/
   /* *** end of:  IN0s350 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S350

// init stk trnsfr maint (item)
Function IN0S410()
   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set IN0SM025 initial;
  set IN0SW01 empty;
  IN0SM025.XXXTITLE = "STOCK TRANSFER MAINTENANCE (ITEM) ";
  IN0SM025.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM025.XXXRVNBR = IN0SW02.IN0SWRVN;

   /* ****** move default values to the map *******/

  IN0SM025.SY2CLRID = "00 ";
  IN0SM025.XDMCD = "00";
  IN0SM025.XQACD = "01";
  IN0SM025.XPGCD = "00";
  IN0SM025.XSDCD = "000";
  IN0SM025.XSACD = "000";

  if (COMMAREA.CACHGFL != "Y")
    converseLib.validationFailed(82); /* not authorized*/
    IN0SW01.IN0SWERS = "Y";
  end

   /* ************************************************************/
   /* *** end of:  IN0s410 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S410

// dsply stk trnsfr maint (item)
Function IN0S420()
   /* ************************************************************/
   /* *** setup process name on map                           ****/
   /* ************************************************************/

  IN0SM025.XXXPRCNM = "IN0S420";

   /* ************************************************************/
   /* *** protect data input fields                           ****/
   /* ************************************************************/

  IN0SWIX1 = 1;

  while (IN0SWIX1 <= 40)
    set IN0SM025.IN0SMAQY[IN0SWIX1] protect;
    IN0SWIX1 = IN0SWIX1 + 1;
  end


   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM025 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM025.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM025.CATOAP;
    COMMAREA.CAITEM = IN0SM025.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM025.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM025.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM025.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0SM025.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switchs & fields                              ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  IN0SW01.IN0SWSES = "N";
  set IN0SM025.IN7STNBR initialAttributes;
  set IN0SM025.XIRCD initialAttributes;
  set IN0SM025.XGPCD initialAttributes;
  set IN0SM025.SY1STNBR initialAttributes;
  set IN0SM025.SY2CLRID initialAttributes;
  set IN0SM025.XDMCD initialAttributes;
  set IN0SM025.XQACD initialAttributes;
  set IN0SM025.XUMCD initialAttributes;
  set IN0SM025.IN0SMSEL initialAttributes;
  IN0SWIX1 = 1;

  while (IN0SWIX1 <= 40)
    set IN0SM025.IN0SMAQY[IN0SWIX1] initialAttributes;
    IN0SWIX1 = IN0SWIX1 + 1;
  end
  set IN0SM025.CATOAP initialAttributes;
  set IN0SM025.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM025.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM025.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-25"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM025.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* error - notify programming*/

   /* ************************************************************/
   /* *** end of:  IN0s420 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S420

// edit and obtain table data
Function IN0S430()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA4(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** keys present: edit individual key fields            ****/
   /* ************************************************************/

  IN0SSC4(); /* <=== key field edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: process the key fields                   ****/
   /* ************************************************************/

  IN0SSE4(); /* <=== obtain table data*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0SSD4(); /* <=== key relational edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: obtain data for data protion of screen   ****/
   /* ************************************************************/

  IN0SS4B(); /* obtain data for lower half of screen*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0SSF4(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of:  IN0s430 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S430

// dsply stk trnsfr maint (item)
Function IN0S440()
   /* ************************************************************/
   /* *** setup new process name on map                       ****/
   /* ************************************************************/

  IN0SM025.XXXPRCNM = "IN0S440";


   /* ************************************************************/
   /* *** set cursor to first data input field                ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS != "Y")
    set IN0SM025.IN0SMAQY[1] cursor;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM025 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM025.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM025.CATOAP;
    COMMAREA.CAITEM = IN0SM025.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM025.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM025.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM025.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0SM025.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switches & fields                             ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  IN0SW01.IN0SWSES = "N";
  set IN0SM025.IN7STNBR initialAttributes;
  set IN0SM025.XIRCD initialAttributes;
  set IN0SM025.XGPCD initialAttributes;
  set IN0SM025.SY1STNBR initialAttributes;
  set IN0SM025.SY2CLRID initialAttributes;
  set IN0SM025.XDMCD initialAttributes;
  set IN0SM025.XQACD initialAttributes;
  set IN0SM025.XUMCD initialAttributes;
  set IN0SM025.IN0SMSEL initialAttributes;

  IN0SW01.IN0SWIX1 = 1;
  while (IN0SWIX1 <= 40)
    set IN0SM025.IN0SMAQY[IN0SWIX1] initialAttributes;
    IN0SWIX1 = IN0SWIX1 + 1;
  end
  set IN0SM025.CATOAP initialAttributes;
  set IN0SM025.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if ENTER, PF12 or pf19: edit key & data inputs      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf19) /* availability override*/
    IN0SW01.IN0SWOVR = "Y"; /* set override flag*/
    IN8REC.IN8AVOVR = "Y"; /* set override flag*/
    IN0SST4(); /* <=== ENTER/PF12 editing*/
    exit stack;
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    IN0SST4(); /* <=== ENTER/PF12 editing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM025.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM025.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-25"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM025.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0s440 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S440

// updt stk trnsfr maint (item)
Function IN0S450()
   /* -----------------------------------------------------------*/
   /* *** no edit errors: process the data adds/changes       ****/
   /* -----------------------------------------------------------*/

  IN0SW01.IN0SWLOC = "IN0S450 "; /* save map and process in*/
  IN0SW01.IN0SWMAP = "IN0SM025"; /* case of abend*/
  IN0SW01.IN0SWERS = "N";

  set TA2REC empty; /* get date for db insert*/
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    IN0SW01.IN0SWTIM = TA2REC.TA2TIMEN;
  else
    converseLib.validationFailed(17); /* internal date error*/
    IN0SW01.IN0SWERS = "Y";
    exit stack;
  end

  IN8REC.IN7STNBR = IN0SM025.IN7STNBR;
   /* ----------------------------------------------------*/
   /* *** process updates depending on transfer status ****/
   /*  */
   /* *** 3/17/97 add logic for warehouse 93 not to    ****/
   /* ***         check availability table             ****/
   /* ----------------------------------------------------*/
  if (IN7REC.XIUCD == "01")
    if (IN0SM025.IN0SMSEL == "1")
      IN0SS4T(); /* calc requested qtys*/
      if (IN0SW01.IN0SWITM == "U")
        IN0SSSS(); /* 'u ' call to stk trnsfr itm db*/
      else
        IN0SS4U(); /* format/add stk tf item db (in8rec)*/
      end
    else
      if (IN0SM025.IN0SMSEL == "2")
        IN0SS4E(); /* determine if product is shippable*/
        if (IN0SW01.IN0SWSHP == "Y" 
         && IN7REC.IN7STFWH != "93" /* do not do warehouse 93*/
         && IN7REC.XISCD != "05"    /* do not do type 05*/
         && IN7REC.XISCD != "10"    /* do not do type 10*/
         && IN0SW01.IN0SWOVR != "Y") /* override availability flag*/
          IN0SS4F(); /* call av7rec and get quantities*/
        else
          IN0SS4G(); /* calculate available qtys (in1rec)*/
        end
        IN0SWIX1 = 40;
        move IN0SWIX2 to IN0SWIX3 withV60Compat;
        while (IN0SWIX1 >= 1)
          IN0SS4H(); /* adjust map quantities*/
          IN0SWIX1 = IN0SWIX1 - 1;
        end
        if (IN7REC.XISCD == "05" /* PLEASE SEE IN0S195 FOR PSUEDO*/
         || IN7REC.XISCD == "10") /* CODE STATEMENTS DESCRIBING*/
          if (IN0SM025.XQACD == "01") /* ALTERNATE INVENTORY UPDATING*/
            IN0SS4W(); /* Update Alternate Inventory?*/
          end
        end
        if (IN0SW01.IN0SWERS == "N")
          if (IN0SW01.IN0SWSHP == "Y"
           && IN7REC.XISCD != "05" /* do not do type 05*/
           && IN7REC.XISCD != "10") /* do not do type 10*/
            IN0SS4I(); /* update through availability*/
          else
            IN0SS4J(); /* update:st=01, adj to issued qty*/
          end
          if (SQLCA.VAGen_SQLCODE == 0)
            IN0SS4T(); /* calc requested qtys*/
            if (IN0SW01.IN0SWITM == "U")
              IN0SSSS(); /* 'u ' call to stk trnsfr itm db*/
            else
              IN0SS4U(); /* format/add stk tf item db (in8rec)*/
            end
          end
        end
      end
    end
  end

  if (IN7REC.XIUCD == "02")
    if (IN0SM025.IN0SMSEL == "1")
      IN0SS4T(); /* calc requested qtys*/
      if (IN0SW01.IN0SWITM == "U")
        IN0SSSS(); /* 'u ' call to stk trnsfr itm db*/
      else
        IN0SS4U(); /* format/add stk tf item db (in8rec)*/
      end
    end
  end

  if (IN7REC.XIUCD == "03")
    if (IN0SM025.IN0SMSEL == "1")
      IN0SS4T(); /* calc requested qtys*/
      if (IN0SW01.IN0SWITM == "U")
        IN0SSSS(); /* 'u ' call to stk trnsfr itm db*/
      else
        IN0SS4U(); /* format/add stk tf item db (in8rec)*/
      end
    else
      if (IN0SM025.IN0SMSEL == "2")
        IN0SS4T(); /* calc requested qtys*/
        if (IN0SW01.IN0SWITM == "U")
          IN0SSSS(); /* 'u ' call to stk trnsfr itm db*/
        else
          IN0SS4U(); /* format/add stk tf item db (in8rec)*/
        end
      else
        if (IN0SM025.IN0SMSEL == "3")
          IN0SS4E(); /* determine if product is shippable*/
          if (IN0SW01.IN0SWSHP == "Y"
           && IN7REC.XISCD != "05" /* do not do type 05*/
           && IN7REC.XISCD != "10") /* do not do type 10*/
            IN0SS4I(); /* update through availability*/
            if (SQLCA.VAGen_SQLCODE == 0)
              if (IN7REC.XISCD in XISTBL.XISCD)
                if (XISTBL.XISOUT[sysVar.arrayIndex] == "N")
                  IN0SS4K(); /* update:st=03, adj to ship,shippable*/
                end
              else
                converseLib.validationFailed(8);
                IN0SW01.IN0SWERS = "Y";
                exit stack;
              end
            else
              exit stack;
            end
          else
            IN0SS4L();
                                   /* updt:st=03, adj to ship,not shippable*/
          end
          IN0SS4T(); /* calc requested qtys*/
          if (IN0SW01.IN0SWITM == "U")
            IN0SSSS(); /* 'u ' call to stk trnsfr itm db*/
          else
            IN0SS4U(); /* format/add stk tf item db (in8rec)*/
          end
        end
      end
    end
  end

  if (IN7REC.XIUCD == "04")
    if (IN0SM025.IN0SMSEL == "1")
      IN0SS4T(); /* calc requested qtys*/
      if (IN0SW01.IN0SWITM == "U")
        IN0SSSS(); /* 'u ' call to stk trnsfr itm db*/
      else
        IN0SS4U(); /* format/add stk tf item db (in8rec)*/
      end
    else
      if (IN0SM025.IN0SMSEL == "2")
        IN0SS4T(); /* calc requested qtys*/
        if (IN0SW01.IN0SWITM == "U")
          IN0SSSS(); /* 'u ' call to stk trnsfr itm db*/
        else
          IN0SS4U(); /* format/add stk tf item db (in8rec)*/
        end
      else
        if (IN0SM025.IN0SMSEL == "3")
          IN0SS4E(); /* determine shippability*/
          if (IN0SW01.IN0SWSHP == "Y"
           && IN7REC.XISCD != "05" /* do not do type 05*/
           && IN7REC.XISCD != "10") /* do not do type 10*/
            IN0SS4I(); /* update through availability*/
          else
            IN0SS4M();
                                   /* update:st=shipped, adj to shipped qty*/
          end
          if (SQLCA.VAGen_SQLCODE == 0)
            IN0SS4T(); /* calc requested qtys*/
            if (IN0SW01.IN0SWITM == "U")
              IN0SSSS(); /* 'u ' call to stk trnsfr itm db*/
            else
              IN0SS4U(); /* format/add stk tf item db (in8rec)*/
            end
          end
        else
          if (IN0SM025.IN0SMSEL == "4")
            IN0SS4E(); /* determine shippability*/
            if (IN0SW01.IN0SWSHP == "Y"
             && IN7REC.XISCD != "05" /* do not do type 05*/
             && IN7REC.XISCD != "10") /* do not do type 10*/
              IN0SS4I(); /* update through availability*/
            else
              IN0SS4N(); /* update:st=shipped, adj to recd qty*/
            end
            if (SQLCA.VAGen_SQLCODE == 0)
              IN0SS4T(); /* calc requested qtys*/
              if (IN0SW01.IN0SWITM == "U")
                IN0SSSS(); /* 'u ' call to stk trnsfr itm db*/
              else
                IN0SS4U(); /* format/add stk tf item db (in8rec)*/
              end
            end
          end
        end
      end
    end
  end

   /* -----------------------------------------------------------*/
   /* *** if error: call reset to backout any updates         ****/
   /* -----------------------------------------------------------*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* -----------------------------------------------------------*/
   /* *** if special update error get out now                 ****/
   /* -----------------------------------------------------------*/

  if (IN0SW01.IN0SWSES == "Y")
    exit stack;
  end

   /* -----------------------------------------------------------*/
   /* *** initialize specific input & working stg fields      ****/
   /* -----------------------------------------------------------*/

  IN0SSQ4(); /* blank data input fields*/

   /* -----------------------------------------------------------*/
   /* *** no errors: call commit to make updates permanent    ****/
   /* -----------------------------------------------------------*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* -----------------------------------------------------------*/
   /* *** end of:  IN0S450 - EXECUTE section                  ****/
   /* -----------------------------------------------------------*/
end // end IN0S450

// init. cancel stk trnsfr
Function IN0S510()
   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set IN0SM030 initial;
  set IN0SW01 empty;
  IN0SM030.XXXTITLE = "  STOCK TRANSFER CANCEL (HEADER)  ";
  IN0SM030.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM030.XXXRVNBR = IN0SW02.IN0SWRVN;

   /* ************************************************************/
   /* *** test security                                       ****/
   /* ************************************************************/

   /* IF COMMAREA.CADELFL NE 'Y';*/
    /* MOVE 82 TO EZEMNO             ; not authorized*/
    /* MOVE 'Y' TO IN0SW01.IN0SWERS;*/
   /* END ;*/

   /* ************************************************************/
   /* *** end of:  IN0s510 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S510

// display in0sm030
Function IN0S520()
   /* ************************************************************/
   /* *** setup process name on map                           ****/
   /* ************************************************************/

  IN0SM030.XXXPRCNM = "IN0S520";

   /* ************************************************************/
   /* *** protect data input fields                           ****/
   /* ************************************************************/

  set IN0SM030.IN0SMCFM protect;


   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM030 ;



   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM030.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM030.CATOAP;
    COMMAREA.CAITEM = IN0SM030.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM030.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM030.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM030.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0SM030.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switchs & fields                              ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  set IN0SM030.IN7STNBR initialAttributes;
  set IN0SM030.IN7STCNM initialAttributes;
  set IN0SM030.XIRCD initialAttributes;
  set IN0SM030.IN0SMCFM initialAttributes;
  set IN0SM030.CATOAP initialAttributes;
  set IN0SM030.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-30"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported on this screen*/

   /* ************************************************************/
   /* *** end of:  IN0s520 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S520

// edit & obtain table data
Function IN0S530()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA5(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: process the key fields                   ****/
   /* ************************************************************/

  IN0SSE5(); /* <=== obtain table data*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0SSF5(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of:  IN0s530 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S530

// display stk trnsfr cancel
Function IN0S540()
   /* ************************************************************/
   /* *** setup new process name on map                       ****/
   /* ************************************************************/

  IN0SM030.XXXPRCNM = "IN0S540";


   /* ************************************************************/
   /* *** set cursor to first data input field                ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS != "Y")
    set IN0SM030.IN0SMCFM cursor;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM030 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM030.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM030.CATOAP;
    COMMAREA.CAITEM = IN0SM030.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM030.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM030.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM030.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0SM030.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switches & fields                             ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  set IN0SM030.IN7STNBR initialAttributes;
  set IN0SM030.IN7STCNM initialAttributes;
  set IN0SM030.XIRCD initialAttributes;
  set IN0SM030.IN0SMCFM initialAttributes;
  set IN0SM030.CATOAP initialAttributes;
  set IN0SM030.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if ENTER or PF12: edit key & data inputs            ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    IN0SST5(); /* <=== ENTER/PF12 editing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-30";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* error - notify programming*/

   /* ************************************************************/
   /* *** end of:  IN0s540 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S540

// updt stk trnsfr hdr
Function IN0S550()
   /* ************************************************************/
   /* ***          IN0s550 - EXECUTE section                  ****/
   /* ************************************************************/

   /* ** save map and process in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0S550 ";
  IN0SW01.IN0SWMAP = "IN0SM030";

   /* *** get date for db insert ****/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0SW01.IN0SWTIM = TA2REC.TA2TIMEN;
  else
    converseLib.validationFailed(17); /* internal date error*/
    IN0SW01.IN0SWERS = "Y";
    exit stack;
  end

  IN7REC.XIUCD = "05";
  IN7REC.IN7STCNM = IN0SM030.IN7STCNM;
  IN7REC.IN7STCRS = IN0SM030.XIRCD;
  IN0SM035.XIRCD = IN0SM030.XIRCD;
  IN7REC.IN7STCDT = IN0SW02.IN0SWCDT;
  IN7REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
  IN7REC.ZZZCHGTM = IN0SW01.IN0SWHMM;

  IN0SSQQ(); /* update stk transfer hdr rec*/

  if (SQLCA.VAGen_SQLCODE != 0)
    exit stack;
  end

  if (IN0SM030.XIUCD == "02" /* if status is released*/
   && IN0SW01.IN0SWORD == "Y") /* and in shiprec - dealocate*/
    set SR8REC empty;
    SR8REC.XWHCD = IN7REC.IN7STFWH;
    SR8REC.PK1PKSCH = SR1REC.PK1PKSCH;
    SR8REC.OP1CUOID = IN0SM030.IN7STNBR;
    SR8REC.SR8FUNC = "O";

    IN0SS22(); /* call sr0o (sr8rec)*/
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != +100)
      exit stack;
    end
  end

  set IN8REC empty;
  IN0SW01.IN0SWAIT = 0;
  IN8REC.IN7STNBR = IN0SM030.IN7STNBR;
  IN0SS55(); /* 'ss' call io0730 (in8rec)*/
  if (SQLCA.VAGen_SQLCODE != 0)
    exit stack;
  else
    while (SQLCA.VAGen_SQLCODE == 0
     && IN0SW01.IN0SWERS == "N")
      IN0SS5C(); /* 'sn' processing each in8rec*/
    end
    if (IN0SW01.IN0SWERS == "Y")
      exit stack;
    end
    IN0SM035.XIRCD = IN0SM030.XIRCD;
  end

  set OPHREC empty;
  OPHREC.XWHCD = IN0SM030.IN7STFWH;
  OPHREC.OP1CUOID = IN0SM030.IN7STNBR; /* stocktransfer number*/
  OPHREC.OP1NORID = 0; /* nike-ord-id*/

  IN0SSY1(); /* delete dorder.voppkh01*/

  set OPGREC empty;
  OPGREC.XWHCD = IN0SM030.IN7STFWH;
  OPGREC.OP1CUOID = IN0SM030.IN7STNBR; /* stocktransfer number*/
  OPGREC.OP1NORID = 0; /* nike-ord-id*/

  IN0SSF1(); /* delete dorder.voppkt01*/

  IN0SS77(); /* 'cs' call io0730 (in8rec)*/

   /* ************************************************************/
   /* *** if error: call reset to backout any updates         ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** if special update error get out now                 ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSES == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** initialize specific input & working stg fields      ****/
   /* ************************************************************/

  IN0SSQ5(); /* <=== blank data input fields*/

   /* ************************************************************/
   /* *** no errors: call commit to make updates permanent    ****/
   /* ************************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* ************************************************************/
   /* *** setup successful message                            ****/
   /* ************************************************************/

  converseLib.validationFailed(9); /* update successful*/

   /* ************************************************************/
   /* *** end of:  IN0s550 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S550

// init stk trfr cncl (prod)
Function IN0S610()
   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set IN0SM035 initial;
  set IN0SW01 empty;
  IN0SM035.XXXTITLE = "  STOCK TRANSFER CANCEL (PRODUCT) ";
  IN0SM035.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM035.XXXRVNBR = IN0SW02.IN0SWRVN;
  IN0SM035.SY2CLRID = "00 ";
  IN0SM035.XSDCD = "000";
  IN0SM035.XSACD = "000";
  IN0SM035.XQACD = "01";
  IN0SM035.XDMCD = "00";
  IN0SM035.XPGCD = "00";

   /* ************************************************************/
   /* *** test security                                       ****/
   /* ************************************************************/

  if (COMMAREA.CADELFL != "Y")
    converseLib.validationFailed(82); /* not authorized*/
    IN0SW01.IN0SWERS = "Y";
  end

   /* ************************************************************/
   /* *** end of:  IN0s610 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S610

// display stk tfr cancl (prod)
Function IN0S620()
   /* ************************************************************/
   /* *** setup process name on map                           ****/
   /* ************************************************************/

  IN0SM035.XXXPRCNM = "IN0S620";

   /* ************************************************************/
   /* *** protect fields                                      ****/
   /* ************************************************************/

  set IN0SM035.IN0SMCFM protect;


   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM035 ;



   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM035.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM035.CATOAP;
    COMMAREA.CAITEM = IN0SM035.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM035.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM035.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0SM035.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switchs & fields                              ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  set IN0SM035.IN7STNBR initialAttributes;
  set IN0SM035.XIRCD initialAttributes;
  set IN0SM035.XGPCD initialAttributes;
  set IN0SM035.SY1STNBR initialAttributes;
  set IN0SM035.SY2CLRID initialAttributes;
  set IN0SM035.XDMCD initialAttributes;
  set IN0SM035.XQACD initialAttributes;
  set IN0SM035.XPGCD initialAttributes;
  set IN0SM035.XUMCD initialAttributes;
  set IN0SM035.IN0SMCFM initialAttributes;
  set IN0SM035.CATOAP initialAttributes;
  set IN0SM035.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-35"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supprorted*/

   /* ************************************************************/
   /* *** end of:  IN0s620 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S620

// obtain table date & edit
Function IN0S630()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA6(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** keys present: edit individual key fields            ****/
   /* ************************************************************/

  IN0SSC6(); /* <=== key field edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: process the key fields                   ****/
   /* ************************************************************/

  IN0SSE6(); /* <=== obtain table data*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0SSF6(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of:  IN0s630 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S630

// display stk tfr cancl(prod)
Function IN0S640()
   /* ************************************************************/
   /* *** setup new process name on map                       ****/
   /* ************************************************************/

  IN0SM035.XXXPRCNM = "IN0S640";

   /* ************************************************************/
   /* *** set cursor to first data input field                ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS != "Y")
    set IN0SM035.IN0SMCFM cursor;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0SM035 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0SM035.CATOAP > " ")
    COMMAREA.CATOAP = IN0SM035.CATOAP;
    COMMAREA.CAITEM = IN0SM035.CAITEM;
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0SM035.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0SM035.CAITEM > " ")
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0SM035.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switches & fields                             ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "N";
  set IN0SM035.IN7STNBR initialAttributes;
  set IN0SM035.XIRCD initialAttributes;
  set IN0SM035.XGPCD initialAttributes;
  set IN0SM035.SY1STNBR initialAttributes;
  set IN0SM035.SY2CLRID initialAttributes;
  set IN0SM035.XDMCD initialAttributes;
  set IN0SM035.XQACD initialAttributes;
  set IN0SM035.XPGCD initialAttributes;
  set IN0SM035.XUMCD initialAttributes;
  set IN0SM035.IN0SMCFM initialAttributes;
  set IN0SM035.CATOAP initialAttributes;
  set IN0SM035.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if ENTER or PF12: edit key & data inputs            ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    IN0SST6(); /* <=== ENTER/PF12 editing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0S-35"; /* application find code*/
    XSEXIT();
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0s640 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0S640

// update stk tfr cancel (prod)
Function IN0S650()
   /* ************************************************************/
   /* *** no edit errors: process the data adds/changes       ****/
   /* ************************************************************/


   /* ** save map and process in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0S650 ";
  IN0SW01.IN0SWMAP = "IN0SM035";

   /* *** get date for db insert ****/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0SW01.IN0SWTIM = TA2REC.TA2TIMEN;
  else
    converseLib.validationFailed(17); /* internal date error*/
    IN0SW01.IN0SWERS = "Y";
    exit stack;
  end

  if (IN7REC.XIUCD == "02") /* if status is released*/
    set SR8REC empty;
    SR8REC.XWHCD = IN7REC.IN7STFWH;
    SR8REC.PK1PKSCH = SR1REC.PK1PKSCH;
    SR8REC.OP1CUOID = IN0SM035.IN7STNBR;
    SR8REC.OP2LNINB = IN8REC.IN8STLNE;
    SR8REC.SR8FUNC = "I";

    IN0SS22(); /* 'u ' call sr0o (sr8rec)*/
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != +100)
      exit stack;
    end

    IN0SS6I(); /* process oppk records*/

    if (IN0SW01.IN0SWERS == "Y")
      exit stack;
    end
  end

  IN0SS6E(); /* update inv itm and aud d/b*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

  IN8REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
  IN8REC.ZZZCHGTM = IN0SW01.IN0SWHMM;

  IN0SSSS(); /* update stk transfer itm rec*/

  if (SQLCA.VAGen_SQLCODE != 0)
    exit stack;
  end


   /* ************************************************************/
   /* *** if error: call reset to backout any updates         ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** if special update error get out now                 ****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSES == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** initialize specific input & working stg fields      ****/
   /* ************************************************************/

  IN0SSQ6(); /* <=== blank data input fields*/

   /* ************************************************************/
   /* *** no errors: call commit to make updates permanent    ****/
   /* ************************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* ************************************************************/
   /* *** setup successful message                            ****/
   /* ************************************************************/

  converseLib.validationFailed(9); /* update successful*/

   /* ************************************************************/
   /* *** end of:  IN0s650 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0S650

// check if whse 15 limit check
Function IN0SS-IN8000-STLMT()
   /* -----------------------------------------------------------*/
   /* Check limit processing.*/
   /* -----------------------------------------------------------*/

  set IN2REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute IN0SS-IN8000-STLMT to determine if stock transfer*/
   /* limit needs to be checked.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN8000  ";
  TA1REC.TA1LOC = "DETERMINE STKTF LIMIT";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XWH-STKTF-LIMIT-FL[INR-SEARCH-SUB] == "Y")
      /* next sentence*/
    else
      return;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      exit stack;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      exit stack;
    end
  end

   /* -----------------------------------------------------------*/
   /* Check requested qty's for the current item.*/
   /* -----------------------------------------------------------*/

  if (IN0SW01.IN0SWSUM <= 5000) /* If within limit*/
    /* next sentence*/
  else
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(177); /* Limit exceeded, create a new*/
                                   /* stock transfer*/
    exit stack;
  end

   /* -----------------------------------------------------------*/
   /* Sum up qty's of all items under the same stock transfer.*/
   /* -----------------------------------------------------------*/

  IN0SW02.IN8DATA = IN8REC.IN8DATA; /* Save current item*/

  set IN8REC empty;

  IN8REC.IN7STNBR = IN7REC.IN7STNBR;

  IN0SS-IO0730-SS(); /* Select/open cursor dinvnt.vtfitm01*/
  IN0SS-IO0730-SN(); /* Select next cursor dinvnt.vtfitm01*/

  while (SQLCA.VAGen_SQLCODE == 0)

    IN0SWIX1 = 1;

    while (IN0SWIX1 <= 40)

      IN0SW01.IN0SWSUM = IN0SW01.IN0SWSUM + IN8REC.IN8SIQ[IN0SWIX1];

      if (IN0SW01.IN0SWSUM <= 5000) /* If within limit*/
        /* next sentence*/
      else
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(177); /* Limit exceeded, create a new*/
                                   /* stock transfer*/
        IN0SS-IO0730-CS(); /* Select/close cursor dinvnt.vtfitm01*/
        IN8REC.IN8DATA = IN0SW02.IN8DATA;
        return;
      end

      IN0SWIX1 = IN0SWIX1 + 1;

    end

    IN0SS-IO0730-SN(); /* Select next cursor dinvnt.vtfitm01*/

  end

  IN0SS-IO0730-CS(); /* Select/close cursor dinvnt.vtfitm01*/

  IN8REC.IN8DATA = IN0SW02.IN8DATA;


end // end IN0SS-IN8000-STLMT

// Check IN8020 return code
Function IN0SS-IN8020-ERRS()
   /*  */
   /* Check IN8020 return codes.  All return codes except zero (no*/
   /* errors) are posted.  A screen message for DB2 deadlock*/
   /* (8000).*/
   /*  */

  if (INGREC.ING-RETURN-CD == 8000) /* DB2 deadlock*/
    converseLib.validationFailed(136);
    return;
  else
    if (INGREC.ING-RETURN-CD <= 2300) /* Edit error or row not found*/
      converseLib.validationFailed(169);
    end
  end

  TA1REC.TA1-GROUP = INGREC.TA1-GROUP;
  TAEREC.SQLCAREC = INGREC.SQLCAREC;

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TA1REC.TA1TBLKE = INGREC.ING-INPUT-DATA; /* IN8020 parameters*/
  TA1REC.TA1FUNC = "POST";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end IN0SS-IN8020-ERRS

// Close selected set cursor
Function IN0SS-IO0730-CS()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0730" ("CS", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  IN0SW01.IN0SWLOC = "IO0730CS"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(8); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = IN0SW01.IN0SWLOC; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTFITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end IN0SS-IO0730-CS

// Fetch next row in cursor
Function IN0SS-IO0730-SN()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0730" ("SN", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  IN0SW01.IN0SWLOC = "IO0730SN"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(136); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(8); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = IN0SW01.IN0SWLOC; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTFITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = IN8REC.IN8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end IN0SS-IO0730-SN

// Select set and open cursor
Function IN0SS-IO0730-SS()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0730" ("SS", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  IN0SW01.IN0SWLOC = "IO0730SS"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(136); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(8); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = IN0SW01.IN0SWLOC; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTFITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = IN8REC.IN8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end IN0SS-IO0730-SS

// Select row in DPRODG.VSYCLR01
Function IN0SS-IO3120-S()

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine accesses the Production Style/Color Table*/
   /* and returns the row for a GPC/Style/Color/Dimension.*/

   /* XGPCD, SY1STNBR, SY2CLRID and XDMCD must be specified by*/
   /* the calling process in PG2REC.  The name of the calling*/
   /* process must be moved to TA1PGMNM in TA1REC, for Error*/
   /* Diagnosis Reporting.*/

   /* This subroutine will return the CSP return code in EZERT8,*/
   /* the DB2 return code in SQLCA.SQLCODE and, if a normal*/
   /* return, the table row in PG2REC.*/

   /* This subroutine will do any required Error Diagnosis*/
   /* Reporting to TA0020.  The calling process must check the*/
   /* return codes and take the appropriate action relating to*/
   /* its terminal output.  The calling process does not need to*/
   /* do any Error Diagnosis Reporting.*/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Select the row from Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IN0SS-IO3120-S";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/


end // end IN0SS-IO3120-S

// Item check VMPOLH01
Function IN0SS-ITM-CK-MPOLH()
   /* ************************************************************/
   /* ***        IN0SS-SEL-VMPOLH01 obtain table data         ****/
   /* ************************************************************/

   /* ** save statement group and map names in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0SS-SEL-VMPOLH01";
  IN0SW01.IN0SWMAP = "IN0SM035";

  set VMPOLH01 empty;

  VMPOLH01.XWH-WHSE-CD = IN7REC.IN7STFWH;
  VMPOLH01.PK-ORD-STKTF-ID = IN0SM035.IN7STNBR;
  VMPOLH01.PK-NIKE-ORD-ID = 0;
  VMPOLH01.PK-NBR-TIMES-ALOC = 0;

   /* 's ' call to Mirror Pool Hdr (VMPOLH01)*/
  IN0SS-VMPOLH01-S();
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(181); /* stk trnsfr needs cancel DCMS*/
    IN0SW01.IN0SWERS = "Y";
    return;
  end

   /* ************************************************************/
   /* *** end of: IN0SS-SEL-VMPOLH01 obtain table data        ****/
   /* ************************************************************/
end // end IN0SS-ITM-CK-MPOLH

// Order check VMPOLH01
Function IN0SS-ORD-CK-MPOLH()
   /* ************************************************************/
   /* ***        IN0SS-SEL-VMPOLH01 obtain table data         ****/
   /* ************************************************************/

   /* ** save statement group and map names in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0SS-SEL-VMPOLH01";
  IN0SW01.IN0SWMAP = "IN0SM030";

  set VMPOLH01 empty;

  VMPOLH01.XWH-WHSE-CD = IN7REC.IN7STFWH;
  VMPOLH01.PK-ORD-STKTF-ID = IN0SM030.IN7STNBR;
  VMPOLH01.PK-NIKE-ORD-ID = 0;
  VMPOLH01.PK-NBR-TIMES-ALOC = 0;

   /* 's ' call to Mirror Pool Hdr (VMPOLH01)*/
  IN0SS-VMPOLH01-S();
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(181); /* stk trnsfr needs cancel DCMS*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM030.IN7STNBR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** end of: IN0SS-SEL-VMPOLH01 obtain table data        ****/
   /* ************************************************************/
end // end IN0SS-ORD-CK-MPOLH

// Select row in DPICK.VMPOLH01
Function IN0SS-VMPOLH01-S()

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine accesses the Production Mirror Pool header*/
   /* Table and returns a row for warehouse/order id/nike order id/*/
   /* number times allocated.*/

   /* XWH-WHSE-CD, PK-ORD-STKTF-ID, PK-NIKE-ORD-ID, and*/
   /* PK-NBR-TIMES-ALOC must be specified by the calling process*/
   /* in VMPOLH01. The name of the calling process must be moved*/
   /* to TA1PGMNM in TA1REC, for Error Diagnosis Reporting*/

   /* This subroutine will return the CSP return code in EZERT8,*/
   /* the DB2 return code in SQLCA.SQLCODE and, if a normal*/
   /* return, the table row in VMPOLH01.*/

   /* This subroutine will query the mirror pool header, to see*/
   /* if the stock transfer (for warehouse 51 only) has been*/
   /* pick up by orders*/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Select the row from the mirror pool table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMPOLH01" ("S ", SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IN0SS-VMPOLH01-S";
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/


end // end IN0SS-VMPOLH01-S

// 'a' call tf itm db (in8rec)
Function IN0SS11()
   /* *********************************/
   /* add a row to transfer item table*/
   /* *********************************/


  if (IN8REC.IN7STNBR == 0)
    IN0SW01.IN0SWSES = "Y";
    converseLib.validationFailed(22); /* unable to update - try again*/
    return;
  end

  call "IO0730" ("A ", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != +0)
    if (SQLCA.VAGen_SQLCODE == -803)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* unable to update - try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(23); /* trnsfr itm table error*/
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0730  ";
    TA1REC.TA1LOCAT[4] = "IN0SS11 ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "IN8REC  ";
    TA1REC.TA1TBLVU = "VTFITM01";
    TA1TBLKE = IN8REC.IN8KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end


end // end IN0SS11

// update alt inv db (avlrec)
Function IN0SS12()
   /* ------------------------------------------------*/
   /* *** update alternate inventory db (avlrec)  ****/
   /* ------------------------------------------------*/
  if (IN0SW01.IN0SWERS == "N")

    /* ***************************************************/
    /* *** update 'from' portion of alt inventory (-) ****/
    /* ***************************************************/
    if (PG2REC.PG2SCRFL == "B"
     || PG2REC.PG2SCRFL == "I")
      set AVLREC empty;

      AVLREC.XWHCD = IN0SM010.IN7STFWH;
      AVLREC.XOWCD = IN0SM010.IN7STFOW;
      AVLREC.XDMCD = IN0SM015.XDMCD;
      AVLREC.XQACD = IN0SM015.XQACD;
      AVLREC.XPGCD = IN0SM015.XPGCD;
      AVLREC.SY1STNBR = IN0SM015.SY1STNBR;
      AVLREC.SY2CLRID = IN0SM015.SY2CLRID;
      AVLREC.PC2INSEG = IN0SM015.XSDCD;
      AVLREC.ZZZCHGDT = IN0SW02.IN0SWCDT;
      AVLREC.ZZZCHGTM = IN0SW01.IN0SWHMM;
      AVLREC.XXXUSER = "IN0SS12";
      TA1REC.TA1PGMNM = "IN0S    ";

      IN0SWIX1 = 1;
      IN0SWIX3 = 0;
      while (IN0SWIX1 <= 40)
        if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
          IN0SWIX3 = IN0SWIX3 + 1;
          if (IN0SM015.IN8SIQ[IN0SWIX3] > 0)
            AVLREC.AVLADJQT[IN0SWIX1] = IN0SM015.IN8SIQ[IN0SWIX3] * -1;
          else
            AVLREC.AVLADJQT[IN0SWIX1] = 0;
          end
        end
        IN0SWIX1 = IN0SWIX1 + 1;
      end

      XSAVS10(); /* access alternate inventory db*/
      if (AVLREC.AVLRTNCD != 0)
        IN0SS13(); /* process return code*/
        IN0SWIX1 = 1;
        while (IN0SWIX1 <= 40)
          set IN0SM015.IN8SIQ[IN0SWIX1] skip, invisible;
          IN0SWIX1 = IN0SWIX1 + 1;
        end
        IN0SWIX1 = IN0SWIX2 + 2;
        while (IN0SWIX1 <= 40)
          set IN0SM015.IN8SQQ[IN0SWIX1] skip, invisible;
          IN0SWIX1 = IN0SWIX1 + 1;
        end
      end

      if (IN0SW01.IN0SWERS == "Y")
        return;
      end
    end

    /* ***************************************************/
    /* *** update 'to' portion of alt inventory   (+) ****/
    /* ***************************************************/
    if (IN7REC.XISCD == "05")
      set AVLREC empty;

      AVLREC.XWHCD = IN0SM010.IN7STTWH;
      AVLREC.XOWCD = IN0SM010.IN7STTOW;
      AVLREC.XDMCD = IN0SM015.XDMCD;
      AVLREC.XQACD = IN0SM015.XQACD;
      AVLREC.XPGCD = IN0SM015.XPGCD;
      AVLREC.SY1STNBR = IN0SM015.SY1STNBR;
      AVLREC.SY2CLRID = IN0SM015.SY2CLRID;
      set PC2REC empty; /* ISEG DERIVED FROM ACCOUNT NUMBER*/
      IN0SW01.IN0SWACT = IN0SM010.IN0SMACT;
      PC2REC.KUCCOID = IN0SW01.IN0SWCOI;
      PC2REC.KUMSTRID = IN0SW01.IN0SWSTO;
      PC2REC.XNXCD = IN0SW01.IN0SWDPT;
      PC2REC.XGPCD = IN0SW01.IN0SWGPC;
      IN0SS14();
      if (SQLCA.VAGen_SQLCODE == 0)
        AVLREC.PC2INSEG = PC2REC.PC2INSEG;
      else
        if (SQLCA.VAGen_SQLCODE == +100) /* no DPRODC.VPRDCU01 found*/
          converseLib.validationFailed(171);
          IN0SW01.IN0SWERS = "Y";
          return;
        end
      end
      AVLREC.ZZZCHGDT = IN0SW02.IN0SWCDT;
      AVLREC.ZZZCHGTM = IN0SW01.IN0SWHMM;
      AVLREC.XXXUSER = "IN0SS12";
      TA1REC.TA1PGMNM = "IN0S    ";

      IN0SWIX1 = 1;
      IN0SWIX3 = 0;
      while (IN0SWIX1 <= 40)
        if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
          IN0SWIX3 = IN0SWIX3 + 1;
          if (IN0SM015.IN8SIQ[IN0SWIX3] > 0)
            AVLREC.AVLADJQT[IN0SWIX1] = IN0SM015.IN8SIQ[IN0SWIX3];
          else
            AVLREC.AVLADJQT[IN0SWIX1] = 0;
          end
        end
        IN0SWIX1 = IN0SWIX1 + 1;
      end

      XSAVS10(); /* access alternate inventory db*/
      if (AVLREC.AVLRTNCD != 0)
        IN0SS13(); /* process return code*/
        IN0SWIX1 = 1;
        while (IN0SWIX1 <= 40)
          set IN0SM015.IN8SIQ[IN0SWIX1] skip, invisible;
          IN0SWIX1 = IN0SWIX1 + 1;
        end
        IN0SWIX1 = IN0SWIX2 + 2;
        while (IN0SWIX1 <= 40)
          set IN0SM015.IN8SQQ[IN0SWIX1] skip, invisible;
          IN0SWIX1 = IN0SWIX1 + 1;
        end
      end
    end
  end

   /* --------------------------------------------------------*/
   /* ***                 END OF IN0SS12                   ****/
   /* --------------------------------------------------------*/
end // end IN0SS12

// process xsavs10 return codes
Function IN0SS13()
   /* ---------------------------------------------------*/
   /* *** check return codes for alternate inventory ****/
   /* ---------------------------------------------------*/

  if (AVLREC.AVLRTNCD == 1) /* required parms not passed by program*/
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(08); /* error - call programming*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1LOCAT[1] = "SUBROUTINE IN0SS13 (1)";
    TA1REC.TA1LOCAT[2] = "RETURNING FROM XSAVS10";
    TA1REC.TA1LOCAT[3] = "REQUIRED PARMS MISSING";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
    return;
  end

  if (AVLREC.AVLRTNCD == 2) /* insufficient stock in alternate inv*/
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(162);
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  end

  if (AVLREC.AVLRTNCD == 3 /* intervening update has occurred*/
   || AVLREC.AVLRTNCD == 4) /* data base resource is unavailable*/
    IN0SW01.IN0SWSES = "Y";
    converseLib.validationFailed(22);
    return;
  end

  if (AVLREC.AVLRTNCD > 4) /* system error has occurred*/
    IN0SW01.IN0SWERS = "Y";
    return;
  end

   /* ---------------------------------------------------*/
   /* ***              end of in0ss13                 ****/
   /* ---------------------------------------------------*/
end // end IN0SS13

// select dprodc.vprdcu01 'sa'
Function IN0SS14()

   /* ************************************************************/
   /* *** select dprodc.vprdcu01  'sa'                        ****/
   /* ************************************************************/

  call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(8); /* severe table error*/
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0S    ";
  TA1REC.TA1LOCAT[1] = "SA      ";
  TA1REC.TA1LOCAT[2] = "IN0SS14 ";
  TA1REC.TA1LOCAT[3] = "IO3340  ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPRDCU01";
  IN0SW01.IN0SWSTN = IN7REC.IN7STNBR;
  TA1REC.TA1TBLKE = IN0SW01.IN0SWSTN;
  move SQLCA to ERRSQLCA withV60Compat;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  return;

   /* ***********************************/
   /* *** end of statement group in0ss14*/
   /* ***********************************/

end // end IN0SS14

// obtain co. & store names
Function IN0SS1A()


  IN0SW01.IN0SWLOC = "IN0SS1A";
  IN0SW01.IN0SWMAP = "IN0SM010";

  IN0SW01.IN0SWACT = IN0SM010.IN0SMACT;

  set KUCREC empty;

  KUCREC.KUCCOID = IN0SW01.IN0SWCOI;

  IN0SSHH(); /* 's ' call to the company table*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SM010.KUCCONM = KUCREC.KUCCONM;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(45); /* company not found*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM010.IN0SMACT cursor, bold;
      return;
    else
      return;
    end
  end

  set KUMREC empty;

  KUMREC.KUCCOID = IN0SW01.IN0SWCOI;
  KUMREC.KUMSTRID = IN0SW01.IN0SWSTO;

  IN0SSFF(); /* 's ' call to the store table*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SM010.KUMSTSNM = KUMREC.KUMSTSNM;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(46); /* store not found*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM010.IN0SMACT cursor, bold;
      return;
    else
      return;
    end
  end


end // end IN0SS1A

// find eff life cyc & mve to map
Function IN0SS1B()


   /* ************************************************************/
   /* *** find effective life cycle and perform data moves    ****/
   /* ************************************************************/


  if (IN0SW02.IN0SWCDT >= INGREC.SY2CEDT1)
    IN0SM015.XLCCD = INGREC.XLCCD1;
  else
    if (IN0SW02.IN0SWCDT >= INGREC.SY2CEDT2)
      IN0SM015.XLCCD = INGREC.XLCCD2;
    else
      if (IN0SW02.IN0SWCDT >= INGREC.SY2CEDT3)
        IN0SM015.XLCCD = INGREC.XLCCD3;
      else
        IN0SM015.XLCCD = INGREC.XLCCD4;
      end
    end
  end


   /* ************************************************************/
   /* *** end of statement group in0ss1b                      ****/
   /* ************************************************************/


end // end IN0SS1B

// add stk trnsfr entry (hdr)
Function IN0SS1C()
   /* **********************************/
   /* add a row to stk trnsfr hdr table*/
   /* **********************************/


  call "IO0720" ("A ", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != +0)
    if (SQLCA.VAGen_SQLCODE == -803)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* unable to update - try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(23); /* header table error*/
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0720  ";
    TA1REC.TA1LOCAT[4] = "IN0SS1C ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "IN7REC  ";
    TA1REC.TA1TBLVU = "VTFHDR01";
    TA1TBLKE = IN7REC.IN7KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end
end // end IN0SS1C

// missing key input edits
Function IN0SS1D()


   /* ************************************************************/
   /* *** make sure all required inputs are present           ****/
   /* ************************************************************/


  if (IN0SM015.XQACD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM015.XQACD cursor, bold;
  end

  if (IN0SM015.XDMCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM015.XDMCD cursor, bold;
  end

  if (IN0SM015.SY2CLRID == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM015.SY2CLRID cursor, bold;
  end

  if (IN0SM015.SY1STNBR == "      ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM015.SY1STNBR cursor, bold;
  end

  if (IN0SM015.XGPCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM015.XGPCD cursor, bold;
  end



   /* ************************************************************/
   /* *** end of:  IN0sS1d - missing input edits              ****/
   /* ************************************************************/


end // end IN0SS1D

// key field edits
Function IN0SS1E()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & map   ****/
   /* ***       and do not test for modified fields           ****/
   /* ***       re: CSP resets the mdt on every converse      ****/
   /* ************************************************************/


   /* **** verify uom if entered ****/


  if (IN0SM015.XUMCD != "  ")
    if (IN0SM015.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        converseLib.validationFailed(12); /* status is inactive*/
        set IN0SM015.XUMCD cursor, bold;
        IN0SW01.IN0SWERS = "Y";
      end
    else
      converseLib.validationFailed(11); /* invalid value*/
      set IN0SM015.XUMCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  end


   /* **** verify pkg type ****/


  if (IN0SM015.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0SM015.XPGCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM015.XPGCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify shade ****/


  if (IN0SM015.XSACD in XEGTBL.XEGCD)
    if (XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0SM015.XSACD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM015.XSACD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify spec difference ****/
  set PC2REC empty;
  PC2REC.XGPCD = IN0SM015.XGPCD;
  PC2REC.PC2INSEG = IN0SM015.XSDCD;
  IN0SSY5();
  if (SQLCA.VAGen_SQLCODE == 0)
    if (PC2REC.XXXSTAT == "A")
       /* next sentence*/
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0SM015.XSDCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(11); /* invalid value*/
      set IN0SM015.XSDCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    else
      return;
    end
  end


   /* **** verify quality code *****/


  if (IN0SM015.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0SM015.XQACD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM015.XQACD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify dimension code *****/


  if (IN0SM015.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0SM015.XDMCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM015.XDMCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify gpc code *****/


  if (IN0SM015.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0SM015.XGPCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM015.XGPCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* ************************************************************/
   /* *** end of:  IN0sS1e - field edits                      ****/
   /* ************************************************************/
end // end IN0SS1E

// obtain table data
Function IN0SS1F()

  IN0SW01.IN0SWLOC = "IN0SS1F "; /* save group and map info in*/
  IN0SW01.IN0SWMAP = "IN0SM015"; /* case of abend*/

  set PG2REC empty;

  if (IN0SM010.XISCD == "05"
   || IN0SM010.XISCD == "10")
    PG2REC.XGPCD = IN0SM015.XGPCD;
    PG2REC.SY1STNBR = IN0SM015.SY1STNBR;
    PG2REC.SY2CLRID = IN0SM015.SY2CLRID;
    PG2REC.XDMCD = IN0SM015.XDMCD;
    TA1REC.TA1PGMNM = "IN0S    ";

    IN0SS-IO3120-S(); /* OBTAIN GPC/STYLE/COLOR/DIM ROW*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (PG2REC.PG2SCRFL == "B"
       || PG2REC.PG2SCRFL == "U"
       || PG2REC.PG2SCRFL == "I")
            /* NEXT SENTENCE*/
      else
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(170); /* BLANK FINISH IND MUST BE B,U,I*/
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        converseLib.validationFailed(169); /* GPC/STYLE/COLOR/DIM NOT ON DB*/
        set IN0SM015.XGPCD cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        return;
      else
        if (SQLCA.VAGen_SQLCODE != 0)
          IN0SW01.IN0SWERS = "Y";
          converseLib.validationFailed(8); /* ERROR - NOTIFY PROGRAMMING*/
          return;
        end
      end
    end
  end

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
  INGREC.XGP-GPC-CD = IN0SM015.XGPCD;
  INGREC.SY-STY-NBR = IN0SM015.SY1STNBR;
  INGREC.SY-COLR-CD-ID = IN0SM015.SY2CLRID;
  INGREC.XDM-DIM-CD = IN0SM015.XDMCD;

  TA1REC.TA1PGMNM = "IN0SS1F";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020(); /* obtain style row*/

  if (INGREC.ING-RETURN-CD > 0000)
    IN0SS-IN8020-ERRS();
    IN0SM015.SY1SSTNM = " ";
    IN0SM015.SY2CLRAB = " ";
    converseLib.validationFailed(13); /* style not on db*/
    set IN0SM015.SY1STNBR cursor, bold;
    set IN0SM015.SY2CLRAB cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    return;
  else
    IN0SM015.SY1SSTNM = INGREC.SY1SSTNM;
    IN0SM015.SY2CLRAB = INGREC.SY2CLRAB;
    IN0SS1B();
    if (IN0SM015.XUMCD == "  ")
      IN0SM015.XUMCD = INGREC.XUM-UOM-CD;
    end
  end

  set SYPREC empty;

  SYPREC.XGPCD = IN0SM015.XGPCD;
  SYPREC.SY1STNBR = IN0SM015.SY1STNBR;
  SYPREC.SY2CLRID = IN0SM015.SY2CLRID;
  SYPREC.XDMCD = IN0SM015.XDMCD;
  SYPREC.XQACD = "**";

  IN0SSRR(); /* obtain size scale data*/

  if (IN0SW01.IN0SWERS == "Y")
    return;
  end

  set IN8REC empty; /* verify stk trans item not exist*/

  IN8REC.IN7STNBR = IN0SM015.IN7STNBR;
  IN8REC.XGPCD = IN0SM015.XGPCD;
  IN8REC.SY1STNBR = IN0SM015.SY1STNBR;
  IN8REC.SY2CLRID = IN0SM015.SY2CLRID;
  IN8REC.XDMCD = IN0SM015.XDMCD;
  IN8REC.XQACD = IN0SM015.XQACD;
  IN8REC.XSDCD = IN0SM015.XSDCD;
  IN8REC.XSACD = IN0SM015.XSACD;
  IN8REC.XPGCD = IN0SM015.XPGCD;
  IN8REC.XUMCD = IN0SM015.XUMCD;

  IN0SSDD();

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(38); /* stk trnsfr item exists*/
    IN0SW01.IN0SWERS = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != +100)
      return;
    end
  end

  IN0SWIX1 = 1; /* look at each size bucket*/
  IN0SWIX2 = 0; /* total of buckets w/ size data*/
  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX2 = IN0SWIX2 + 1;
      IN0SM015.SY4IDDSC[IN0SWIX2] = SYPREC.SY4IDDSC[IN0SWIX1];
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SWIX2 == 0)
     /* set input fields dark*/
    IN0SWIX1 = 1;
    while (IN0SWIX1 <= 40)
      set IN0SM015.IN8SQQ[IN0SWIX1] skip, invisible;
      IN0SWIX1 = IN0SWIX1 + 1;
    end
    converseLib.validationFailed(67); /* no size descs.*/
    IN0SW01.IN0SWERS = "Y";
  else
    IN0SWIX1 = IN0SWIX2 + 1;

    IN0SM015.SY4IDDSC[IN0SWIX1] = "TOTAL";
    /* --------------------------------------*/
     /* ** set remaining input fields dark ***/
    /* --------------------------------------*/
    IN0SWIX1 = IN0SWIX2 + 2;

    while (IN0SWIX1 <= 40)
      set IN0SM015.IN8SQQ[IN0SWIX1] skip, invisible;
      IN0SWIX1 = IN0SWIX1 + 1;
    end
  end

  IN0SS1O(); /* determine shipability*/

   /* ************************************************************/
   /* *** end of:  IN0sS1f - obtain table data                ****/
   /* ************************************************************/
end // end IN0SS1F

// save current key value
Function IN0SS1G()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/


  IN0SW01.IN7STNBR = IN0SM015.IN7STNBR;
  IN0SW01.XGPCD = IN0SM015.XGPCD;
  IN0SW01.SY1STNBR = IN0SM015.SY1STNBR;
  IN0SW01.SY2CLRID = IN0SM015.SY2CLRID;
  IN0SW01.XDMCD = IN0SM015.XDMCD;
  IN0SW01.XQACD = IN0SM015.XQACD;
  IN0SW01.XSACD = IN0SM015.XSACD;
  IN0SW01.XSDCD = IN0SM015.XSDCD;
  IN0SW01.XPGCD = IN0SM015.XPGCD;
  IN0SW01.XUMCD = IN0SM015.XUMCD;


   /* ************************************************************/
   /* *** end of:  IN0ss1g - save current key value(s)        ****/
   /* ************************************************************/


end // end IN0SS1G

// call io2370 for avail. qtys
Function IN0SS1J()

  IN0SW01.IN0SWLOC = "IN0SS1J ";
  IN0SW01.IN0SWMAP = "IN0SM015";

   /* *** format av7rec for call ****/

  set AV7REC empty;
  set SQLCA empty; /* initialize sql communication area*/

  if (IN0SM010.IN7STFWH in XWHTBL.XWHCD)
    AV7REC.XWHCD = IN0SM010.IN7STFWH;
  else
    converseLib.validationFailed(8); /* error - notify programming*/
    IN0SW01.IN0SWERS = "Y";
    return;
  end

  AV7REC.XGPCD = IN0SM015.XGPCD;
  AV7REC.SY1STNBR = IN0SM015.SY1STNBR;
  AV7REC.SY2CLRID = IN0SM015.SY2CLRID;
  AV7REC.XDMCD = IN0SM015.XDMCD;
  AV7REC.XQACD = IN0SM015.XQACD;
  AV7REC.XOWCD = IN0SM010.IN7STFOW;
  AV7REC.XSDCD = IN0SM015.XSDCD;
  AV7REC.XSACD = IN0SM015.XSACD;
  AV7REC.XPGCD = IN0SM015.XPGCD;
  AV7REC.XUMCD = IN0SM015.XUMCD;
  AV7REC.AV6RECTY = "F";
  AV7REC.AV4PRDBD = 0;
  IN0SW01.IN0SWSCD = " ";
  IN0SW01.IN0SWSYR = 0;

  call "IO2370" ("S ", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(105);
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "        ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO2370  ";
      TA1REC.TA1LOCAT[4] = "IN0SS1J ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "AV7REC  ";
      TA1REC.TA1TBLVU = "        ";
      TA1TBLKE = AV7REC.AV7KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end


  IN0SWIX1 = 1;
  while (IN0SWIX1 <= 40)
    if (AV7REC.XCDCD[IN0SWIX1] in XCDTBL.XCDCD)
      if (XCDTBL.XCDOALOC[sysVar.arrayIndex] != "Y")
        AV7REC.AV1AVQTY[IN0SWIX1] = 0;
      end
    else
      AV7REC.AV1AVQTY[IN0SWIX1] = 0;
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end
end // end IN0SS1J

// calc avail. from onhand qty
Function IN0SS1K()

  set IN1REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the*/
   /* proper owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS1K ";
  TA1REC.TA1LOC = "CALC AVAIL. FROM ONHAND QTY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN0SM010.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN1REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN1REC.XOWCD = IN0SM010.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN1REC.XWHCD = IN0SM010.IN7STFWH;
  IN1REC.XGPCD = IN0SM015.XGPCD;
  IN1REC.SY1STNBR = IN0SM015.SY1STNBR;
  IN1REC.SY2CLRID = IN0SM015.SY2CLRID;
  IN1REC.XDMCD = IN0SM015.XDMCD;
  IN1REC.XQACD = IN0SM015.XQACD;
  IN1REC.XSACD = IN0SM015.XSACD;
  IN1REC.XSDCD = IN0SM015.XSDCD;
  IN1REC.XPGCD = IN0SM015.XPGCD;
  IN1REC.XUMCD = IN0SM015.XUMCD;

  IN0SWIX1 = 40;
  move IN0SWIX2 to IN0SWIX3 withV60Compat;

  while (IN0SWIX1 >= 1)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      if (IN0SM015.IN8SQQ[IN0SWIX3] == 0)
        AV7REC.AV1AVQTY[IN0SWIX1] = 0;
      else
        IN1REC.SY5SZID = IN0SWIX1;
        IN0SSUU(); /* call to invt. item db (in1rec)*/
        if (SQLCA.VAGen_SQLCODE == 0)
          IN0SW01.IN0SWONH = IN1REC.IN1ONHND;
          IN0SW01.IN0SWRSR = IN1REC.IN1RSRVD;
          IN0SW01.IN0SWALO = IN1REC.IN1ALOCD;
          IN0SW01.IN0SWSTA = IN1REC.IN1STASD;
          IN0SW01.IN0SWXFO = IN1REC.IN1XFERO;
          IN0SW01.IN0SWONH = IN0SW01.IN0SWONH - IN0SW01.IN0SWRSR;
          IN0SW01.IN0SWONH = IN0SW01.IN0SWONH - IN0SW01.IN0SWALO;
          IN0SW01.IN0SWONH = IN0SW01.IN0SWONH - IN0SW01.IN0SWSTA;
          IN0SW01.IN0SWONH = IN0SW01.IN0SWONH - IN0SW01.IN0SWXFO;
          AV7REC.AV1AVQTY[IN0SWIX1] = IN0SW01.IN0SWONH;
        else
          if (SQLCA.VAGen_SQLCODE == +100)
            if (IN0SW01.IN0SWSW3 == "Y")
              converseLib.validationFailed(66); /* invty itm rec not on db*/
              IN0SW01.IN0SWERS = "Y";
              set IN0SM015.IN8SQQ[IN0SWIX3] cursor, bold;
            end
            AV7REC.AV1AVQTY[IN0SWIX1] = 0;
          else
            return;
          end
        end
      end
      IN0SWIX3 = IN0SWIX3 - 1;
    end
    IN0SWIX1 = IN0SWIX1 - 1;
  end
   /* ************************************************************/
   /* *** end of:  IN0sS1k - calc avail from onhand qty       ****/
   /* ************************************************************/


end // end IN0SS1K

// update through availability
Function IN0SS1L()

  set INZREC empty;

  INZREC.XWHCD = IN0SM010.IN7STFWH;
  INZREC.XOWCD = IN0SM010.IN7STFOW;
  INZREC.XGPCD = IN0SM015.XGPCD;
  INZREC.SY1STNBR = IN0SM015.SY1STNBR;
  INZREC.SY2CLRID = IN0SM015.SY2CLRID;
  INZREC.XDMCD = IN0SM015.XDMCD;
  INZREC.XQACD = IN0SM015.XQACD;
  INZREC.XSACD = IN0SM015.XSACD;
  INZREC.XSDCD = IN0SM015.XSDCD;
  INZREC.XPGCD = IN0SM015.XPGCD;
  INZREC.XUMCD = IN0SM015.XUMCD;
  INZREC.IN5TRDCD = "T";
  INZREC.IN5TRDOC = IN0SM015.IN7STNBR;
  IN0SW01.IN0SWDOC = INZREC.IN5TRDOC;
  INZREC.IN5TRPRT = IN0SW01.IN0SWPRT;
  INZREC.IN5TRSUB = 0;
  INZREC.IN5TRDTE = IN0SW02.IN0SWCDT;
  INZREC.IN5TRTIM = IN0SW01.IN0SWTIM;
  INZREC.XITCD = "51";

  INZREC.XSECD = IN0SW01.IN0SWSCD;
  INZREC.XSNYR = IN0SW01.IN0SWSYR;

  INZREC.XIRCD = "904";
  INZREC.IN5USRID = COMMAREA.CAUSERID;
  INZREC.IN5TRDDT = IN0SW02.IN0SWCDT;

  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the*/
   /* proper owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS1L ";
  TA1REC.TA1LOC = "UPDATE THROUGH AVAILABILITY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN0SM010.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      INZREC.IN5TRREF = "NO OWNER GRP ";
    else
      INZREC.IN5TRREF = "  ";
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  INZREC.XIFCD = "05";

  INZREC.INZALNGQ = "N";

  IN0SWIX1 = 1;
  IN0SWIX3 = 0;
  IN0SW01.IN0SWTIQ = 0;

  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX3 = IN0SWIX3 + 1;
      if (IN0SM015.IN8SIQ[IN0SWIX3] != 0)
           /* *** set up audit record ****/
        INZREC.INZQTYCH[IN0SWIX1] = IN0SM015.IN8SIQ[IN0SWIX3];
        IN0SW01.IN0SWTIQ = IN0SW01.IN0SWTIQ + IN0SM015.IN8SIQ[IN0SWIX3];
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWTIQ > 0)
    IN0SS9A(); /* call IN9050 to update qtys if issued qty gt zero*/
  end
  return;


end // end IN0SS1L

// adjust map quantities
Function IN0SS1M()

  if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
    if (IN0SM015.IN8SQQ[IN0SWIX3] > AV7REC.AV1AVQTY[IN0SWIX1])
      if (AV7REC.AV1AVQTY[IN0SWIX1] > 0)
        IN0SM015.IN8SIQ[IN0SWIX3] = AV7REC.AV1AVQTY[IN0SWIX1];
      else
        IN0SM015.IN8SIQ[IN0SWIX3] = 0;
      end
    else
      IN0SM015.IN8SIQ[IN0SWIX3] = IN0SM015.IN8SQQ[IN0SWIX3];
    end
    if (IN0SM015.XGPCD == "02") /* calc full case qtys*/
      if (IN0SM015.IN8SIQ[IN0SWIX3] != 0
       && INGREC.SY1UNPCS != 0)
        if (IN0SM015.IN8SIQ[IN0SWIX3] < INGREC.SY1UNPCS)
          if (INGREC.SY1UNPCS <= AV7REC.AV1AVQTY[IN0SWIX1])
            IN0SM015.IN8SIQ[IN0SWIX3] = INGREC.SY1UNPCS;
            converseLib.validationFailed(104); /* iss qty change to full case qty*/
            IN0SW01.IN0SWERS = "Y";
            set IN0SM015.IN8SQQ[IN0SWIX3] cursor, bold;
          else
            IN0SM015.IN8SIQ[IN0SWIX3] = 0;
            converseLib.validationFailed(130);
                                   /* available qty less then full case qty*/
            IN0SW01.IN0SWERS = "Y";
            set IN0SM015.IN8SQQ[IN0SWIX3] cursor, bold;
          end
        else
          IN0SW01.IN0SWNUM = IN0SM015.IN8SIQ[IN0SWIX3] % INGREC.SY1UNPCS;
          IN0SW01.IN0SWPOS = 0;
          IN0SW01.IN0SWNEG = 0;
          IN0SW01.IN0SWNVA = IN0SM015.IN8SIQ[IN0SWIX3];
          while (IN0SW01.IN0SWNUM != 0)
            converseLib.validationFailed(104); /* iss qty changed to full case qty*/
            IN0SW01.IN0SWERS = "Y";
            set IN0SM015.IN8SQQ[IN0SWIX3] cursor, bold;
            IN0SW01.IN0SWNVA = IN0SW01.IN0SWNVA - 1;
            IN0SW01.IN0SWNUM = IN0SW01.IN0SWNVA % INGREC.SY1UNPCS;
            IN0SW01.IN0SWNEG = IN0SW01.IN0SWNEG + 1;
          end
          IN0SW01.IN0SWNUM = IN0SM015.IN8SIQ[IN0SWIX3] % INGREC.SY1UNPCS;
          IN0SW01.IN0SWPVA = IN0SM015.IN8SIQ[IN0SWIX3];
          while (IN0SW01.IN0SWNUM != 0)
            IN0SW01.IN0SWPVA = IN0SW01.IN0SWPVA + 1;
            IN0SW01.IN0SWNUM = IN0SW01.IN0SWPVA % INGREC.SY1UNPCS;
            IN0SW01.IN0SWPOS = IN0SW01.IN0SWPOS + 1;
          end
          if (IN0SW01.IN0SWNEG <= IN0SW01.IN0SWPOS)
            IN0SM015.IN8SIQ[IN0SWIX3] = IN0SW01.IN0SWNVA;
          else
            if (IN0SW01.IN0SWPVA > AV7REC.AV1AVQTY[IN0SWIX1])
              IN0SM015.IN8SIQ[IN0SWIX3] = IN0SW01.IN0SWNVA;
            else
              IN0SM015.IN8SIQ[IN0SWIX3] = IN0SW01.IN0SWPVA;
            end
          end
        end
      end
    end
    IN0SWIX3 = IN0SWIX3 - 1;
  end
end // end IN0SS1M

// update inventory and audit dbs
Function IN0SS1N()

  IN0SW01.IN0SWLOC = "IN0SS1N "; /* save map and process in*/
  IN0SW01.IN0SWMAP = "IN0MS015"; /* case of abend*/

  set IN6REC empty;

  IN0SWIX1 = 1;
  IN0SWIX3 = 0;

  IN0SW01.IN0SWAIT = 0;
  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX3 = IN0SWIX3 + 1;
      IN1REC.SY5SZID = IN0SWIX1;
      if (IN0SM015.IN8SIQ[IN0SWIX3] != 0)
        IN0SSUU(); /* 's ' call to invt itm db (to init*/
                                   /* zzzchgct)*/
        if (SQLCA.VAGen_SQLCODE != 0)
          converseLib.validationFailed(66); /* invnt item not on db*/
          IN0SW01.IN0SWERS = "Y";
          return;
        else
          IN1REC.IN1XFERO = IN1REC.IN1XFERO + IN0SM015.IN8SIQ[IN0SWIX3];
          IN1REC.ZZ-CHNG-PGM-ID = "IN0S";
          IN1REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
          IN1REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
          IN0SSTT(); /* update invt item db row (in1rec)*/
          if (SQLCA.VAGen_SQLCODE == 0)
            IN6REC.IN6TQT[IN0SWIX1] = IN0SM015.IN8SIQ[IN0SWIX3];
            IN0SW01.IN0SWAIT = IN0SW01.IN0SWAIT + IN6REC.IN6TQT[IN0SWIX1];
          else
            IN0SWIX1 = 99;
          end
        end
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWERS == "N" /* add audit header row*/
   && IN0SW01.IN0SWSES == "N")
    set IN5REC empty;
    set TA1REC empty;
    set TAEREC empty;
    set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the*/
   /* proper owner group.*/
   /* -----------------------------------------------------------*/

    TA1REC.TA1PGMNM = "IN0SS1N ";
    TA1REC.TA1LOC = "UPDATE INVENTORY & AUDIT DB";
    INRREC.INR-RULE-TYPE = "WHSECODE";
    INRREC02.XWH-WHSE-CD = IN0SM010.IN7STFWH;
    INRREC02.INR-SEARCH-FL = "Y";

    XSINS-PROCESS-RULE(); /* CALL IN8000*/

    if (INRREC.INR-RETURN-CODE == 0)
      if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
        IN5REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
      else
        IN5REC.XOWCD = IN0SM010.IN7STFOW;
      end
    else
      if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1MAP = sysVar.errorCode;
        TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
        TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        return;
      else /* UNEXPECTED ERROR OCCURRED*/
        IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS*/
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        return;
      end
    end

    IN5REC.XWHCD = IN0SM010.IN7STFWH;
    IN5REC.IN5TRDCD = "T";
    IN5REC.IN5TRDOC = IN0SM010.IN7STNBR;
    IN0SW01.IN0SWDOC = IN5REC.IN5TRDOC;
    IN5REC.IN5TRPRT = IN0SW01.IN0SWPRT;
    IN5REC.IN5TRSUB = 0;
    IN5REC.IN5TRDTE = IN0SW02.IN0SWCDT;
    IN5REC.IN5TRTIM = TA2REC.TA2TIMEN;
    IN5REC.XITCD = "36";
    if (IN5REC.XITCD in XITTBL.XITCD)
      IN5REC.XIGCD = XITTBL.XIGCD[sysVar.arrayIndex];
    end
    IN5REC.XIRCD = "904";
    IN5REC.IN5USRID = COMMAREA.CAUSERID;
    IN5REC.IN5TRDDT = IN0SW02.IN0SWCDT;
    IN5REC.ZZ-CHNG-PGM-ID = "IN0S";
    IN5REC.ZZZSDT = IN0SW02.IN0SWCDT;
    IN5REC.ZZZSTM = IN0SW01.IN0SWHMM;
    IN0SSNN(); /* perform 'a' call to aud. hdr tbl*/

    if (SQLCA.VAGen_SQLCODE == 0) /* add audit item row*/

      set TA1REC empty;
      set TAEREC empty;
      set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the*/
   /* proper owner group.*/
   /* -----------------------------------------------------------*/

      TA1REC.TA1PGMNM = "IN0SS1N ";
      TA1REC.TA1LOC = "UPDATE INVENTORY & AUDIT DB";
      INRREC.INR-RULE-TYPE = "WHSECODE";
      INRREC02.XWH-WHSE-CD = IN0SM010.IN7STFWH;
      INRREC02.INR-SEARCH-FL = "Y";

      XSINS-PROCESS-RULE(); /* CALL IN8000*/

      if (INRREC.INR-RETURN-CODE == 0)
        if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
          IN6REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
        else
          IN6REC.XOWCD = IN0SM010.IN7STFOW;
        end
      else
        if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
          IN0SW01.IN0SWERS = "Y";
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "POST";
          TA1REC.TA1MAP = sysVar.errorCode;
          TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
          TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
          return;
        else /* UNEXPECTED ERROR OCCURRED*/
          IN0SW01.IN0SWERS = "Y";
                                   /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          return;
        end
      end

      IN6REC.XWHCD = IN0SM010.IN7STFWH;
      IN6REC.IN5TRDCD = "T";
      IN6REC.IN5TRDOC = IN0SM015.IN7STNBR;
      IN0SW01.IN0SWDOC = IN6REC.IN5TRDOC;
      IN6REC.IN5TRPRT = IN0SW01.IN0SWPRT;
      IN6REC.IN5TRSUB = 0;
      IN6REC.IN5TRDTE = IN0SW02.IN0SWCDT;
      IN6REC.IN5TRTIM = IN0SW01.IN0SWTIM;
      IN6REC.XGPCD = IN0SM015.XGPCD;
      IN6REC.SY1STNBR = IN0SM015.SY1STNBR;
      IN6REC.SY2CLRID = IN0SM015.SY2CLRID;
      IN6REC.XDMCD = IN0SM015.XDMCD;
      IN6REC.XQACD = IN0SM015.XQACD;
      IN6REC.XSACD = IN0SM015.XSACD;
      IN6REC.XSDCD = IN0SM015.XSDCD;
      IN6REC.XPGCD = IN0SM015.XPGCD;
      IN6REC.XUMCD = IN0SM015.XUMCD;
      IN6REC.XIFCD = "05";
      IN6REC.ZZ-CHNG-PGM-ID = "IN0S";
      IN6REC.ZZZSDT = IN0SW02.IN0SWCDT;
      IN6REC.ZZZSTM = IN0SW01.IN0SWHMM;
      IN0SSOO(); /* 'a ' call to audit item table*/
    end
  end

   /* ---------------------- end in0ss1n -------------------------*/
end // end IN0SS1N

// determine shipability
Function IN0SS1O()
   /* ** save map and process in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0SS1O ";
  IN0SW01.IN0SWMAP = "IN0SM015";

  set IN2REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS1O ";
  TA1REC.TA1LOC = "DETERMINE SHIPPABILITY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN0SM010.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN2REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN2REC.XOWCD = IN0SM010.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN2REC.XWHCD = IN0SM010.IN7STFWH;
  IN2REC.XGPCD = IN0SM015.XGPCD;
  IN2REC.SY1STNBR = IN0SM015.SY1STNBR;
  IN2REC.SY2CLRID = IN0SM015.SY2CLRID;
  IN2REC.XDMCD = IN0SM015.XDMCD;
  IN2REC.XQACD = IN0SM015.XQACD;

  IN0SSKK(); /* 's ' invnt hdr db (in2rec)*/

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(63); /* invnt hdr rec not on db*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* error - notify programming*/
      return;
    end
  end

  if (IN2REC.IN2ALCFL == "N")
    IN0SW01.IN0SWSHP = "N";
    return;
  end



  if (IN2REC.IN2ALCFL == "Y")
    IN0SW01.IN0SWSHP = "Y";
  else
    IN0SW01.IN0SWSHP = "N";
  end


end // end IN0SS1O

// chk for adj qty change
Function IN0SS1P()


  IN0SWIX1 = 1;

  while (IN0SWIX1 <= IN0SWIX2)
    if (IN0SM015.IN8SQQ[IN0SWIX1] != IN0SW01.IN0SWADJ[IN0SWIX1])
      IN0SW01.IN0SWADJ[IN0SWIX1] = IN0SM015.IN8SQQ[IN0SWIX1];
      IN0SW01.IN0SWSW1 = "Y"; /* msg 54 1st time*/
      IN0SW01.IN0SWSW2 = "Y"; /* msg 104 1st time*/
      IN0SW01.IN0SWSW3 = "Y"; /* msg 67 1st time*/
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end


end // end IN0SS1P

// check adj qty for availability
Function IN0SS1Q()

  if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
    if (IN0SM015.IN8SQQ[IN0SWIX3] > AV7REC.AV1AVQTY[IN0SWIX1])
      if (AV7REC.AV1AVQTY[IN0SWIX1] > 0)
        IN0SM015.IN8SIQ[IN0SWIX3] = AV7REC.AV1AVQTY[IN0SWIX1];
      else
        IN0SM015.IN8SIQ[IN0SWIX3] = 0;
      end
      converseLib.validationFailed(54); /* iss qty changed to max available*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM015.IN8SQQ[IN0SWIX3] cursor, bold;
    else
      IN0SM015.IN8SIQ[IN0SWIX3] = IN0SM015.IN8SQQ[IN0SWIX3];
    end
    IN0SWIX3 = IN0SWIX3 - 1;
  end


end // end IN0SS1Q

// call sr0o (sr8rec)
Function IN0SS22()
   /* *****************************/
   /* obtain ship rec order row*/
   /* *****************************/

  call "SR0O" (SR8REC, SQLCA) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "U       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "SR0O    ";
    TA1REC.TA1LOCAT[4] = "IN0SS22 ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "SR8REC  ";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1TBLKE = SR8REC.SR8KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ss22*/
   /* ***********************************/
end // end IN0SS22

// obtain co. & store names
Function IN0SS2A()


  IN0SW01.IN0SWLOC = "IN0SS2A";
  IN0SW01.IN0SWMAP = "IN0SM018";

  IN0SW01.IN0SWACT = IN0SM018.IN0SMACT;

  set KUCREC empty;

  KUCREC.KUCCOID = IN0SW01.IN0SWCOI;

  IN0SSHH(); /* 's ' call to the company table*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SM018.KUCCONM = KUCREC.KUCCONM;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(45); /* company not on db*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM018.IN0SMACT cursor, bold;
      return;
    else
      return;
    end
  end

  set KUMREC empty;

  KUMREC.KUCCOID = IN0SW01.IN0SWCOI;
  KUMREC.KUMSTRID = IN0SW01.IN0SWSTO;

  IN0SSFF(); /* 's ' call to the store table*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SM018.KUMSTSNM = KUMREC.KUMSTSNM;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(46); /* store not on db*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM018.IN0SMACT cursor, bold;
      return;
    else
      return;
    end
  end


end // end IN0SS2A

// process each in8rec
Function IN0SS2F()
   /* *************************************************************/
   /* *** IN0SS2F - create opirec from in8rec data             ****/
   /* *************************************************************/

  IN0SS66(); /* 'sn' call to stk trnsfr db (in8rec)*/

  IN0SW01.IN0SWSIQ = 0;
  if (SQLCA.VAGen_SQLCODE == 0)

    set OPIREC empty;
    OPIREC.XWHCD = IN0SM018.IN7STFWH;
    OPIREC.OP1CUOID = IN0SM018.IN7STNBR;
    IN0SW01.IN0SWDOC = OPIREC.OP1CUOID;
    OPIREC.OP1PARTN = IN0SW01.IN0SWPRT;
    OPIREC.OP2LNINB = IN8REC.IN8STLNE;
    OPIREC.XGPCD = IN8REC.XGPCD;
    OPIREC.SY1STNBR = IN8REC.SY1STNBR;
    OPIREC.SY2CLRID = IN8REC.SY2CLRID;
    OPIREC.XDMCD = IN8REC.XDMCD;
    OPIREC.XQACD = IN8REC.XQACD;
    OPIREC.XEGCD = IN8REC.XSACD;
    OPIREC.PC2INSEG = IN8REC.XSDCD;
    OPIREC.XPGCD = IN8REC.XPGCD;
    OPIREC.XUMCD = IN8REC.XUMCD;

    set TA1REC empty;
    set TAEREC empty;
    set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

    TA1REC.TA1PGMNM = "IN0SS2F ";
    TA1REC.TA1LOC = "PROCESS EACH IN8REC";
    INRREC.INR-RULE-TYPE = "WHSECODE";
    INRREC02.XWH-WHSE-CD = IN0SM018.IN7STFWH;
    INRREC02.INR-SEARCH-FL = "Y";

    XSINS-PROCESS-RULE(); /* CALL IN8000*/

    if (INRREC.INR-RETURN-CODE == 0)
      if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
        OPIREC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
      else
        OPIREC.XOWCD = IN7REC.IN7STFOW;
      end
    else
      if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1MAP = sysVar.errorCode;
        TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
        TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        return;
      else /* UNEXPECTED ERROR OCCURRED*/
        IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        return;
      end
    end

    OPIREC.ZZZSDT = IN0SW02.IN0SWCDT;
    OPIREC.ZZZCHGDT = IN0SW02.IN0SWCDT;
    OPIREC.ZZZCHGTM = IN0SW01.IN0SWHMM;
    OPIREC.ZZZCHGCT = 0;

    IN0SWIX1 = 1;
    while (IN0SWIX1 <= 40)
      OPIREC.OP3ALQT[IN0SWIX1] = IN8REC.IN8SIQ[IN0SWIX1];
      OPIREC.PK5TIQTY = OPIREC.PK5TIQTY + IN8REC.IN8SIQ[IN0SWIX1];
      IN0SWIX1 = IN0SWIX1 + 1;
    end
    if (OPIREC.PK5TIQTY > 0)
      OPHREC.PK4ITEMS = OPHREC.PK4ITEMS + 1;
      OPHREC.OP1OTUNT = OPHREC.OP1OTUNT + OPIREC.PK5TIQTY;
      IN0SS2G(); /* insert into dorder.voppki01*/
    end
  else
    return;
  end


end // end IN0SS2F

// insert into dorder.voppki01
Function IN0SS2G()
   /* ***************************************/
   /* add row to dorder.voppki01    (opirec)*/
   /* ***************************************/


  call "IO1660" ("A ", SQLCA, OPIREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO1660  ";
    TA1REC.TA1LOCAT[4] = "IN0SS2G ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "OPIREC  ";
    TA1REC.TA1TBLVU = "VOPPKI01";
    TA1TBLKE = OPIREC.OPIGROUP;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* **************************************/
   /* *** end of statment group in0ss2g ****/
   /* **************************************/
end // end IN0SS2G

// insert into dorder.voppkh01
Function IN0SS2H()
   /* ------------------------------------------------------------*/
     /* insert dorder.voppkh01 (orders to post header)*/
   /* ------------------------------------------------------------*/

  OPHREC.XWHCD = IN0SM018.IN7STFWH;
  OPHREC.OP1CUOID = IN0SM018.IN7STNBR;
  IN0SW01.IN0SWDOC = IN0SM018.IN7STNBR;
  OPHREC.OP1PARTN = IN0SW01.IN0SWPRT;
  OPHREC.OP1NORID = 0;
  OPHREC.PK4STKTF = "Y";
  OPHREC.OP11TMSF = "N";
  OPHREC.OP1SPHDF = "N";
  OPHREC.OP1SGPAO = "N";
  OPHREC.OP1EXPDF = "N";
  OPHREC.OP1NTMAL = 0;
  OPHREC.OPHALOPF = "N";
  OPHREC.XDVCD = "01";
  OPHREC.KUCCOID = IN7REC.KUCCOID;
  OPHREC.KUMSTRID = IN7REC.KUMSTRID;
  OPHREC.XNXCD = IN7REC.XNXCD;
  OPHREC.XGPCD = IN7REC.XGPCD;
  OPHREC.XPPCD = IN7REC.XPPCD;
  OPHREC.XPACD = IN7REC.XPACD;
  OPHREC.XPKCD = IN7REC.XPKCD;

  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS2H ";
  TA1REC.TA1LOC = "INSERT INTO DORDER.VOPPKH01";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN0SM018.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      OPHREC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      OPHREC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  OPHREC.IN7STQDT = IN7REC.IN7STQDT;
  OPHREC.IN7STLDT = IN7REC.IN7STLDT;
  OPHREC.OP1DSBDT = IN7REC.OP1DSBDT;
  OPHREC.OP1DSADT = IN7REC.OP1DSADT;
  OPHREC.IN7STTWH = IN7REC.IN7STTWH;
  OPHREC.TF1CARCD = IN7REC.TF1CARCD;
  OPHREC.XOBCD = "  "; /* initialize xob_base_ot_cd*/
  OPHREC.XDSCD = " "; /* initialize direct ship code*/
  OPHREC.OP1FTIND = "N"; /* INITIALIZE OP-FRGT-PPD-FL*/
  if (IN7REC.IN7STINS > "  ")
    OPHREC.OP1SPLBF = "Y";
  else
    OPHREC.OP1SPLBF = "N";
  end
  if (IN7REC.IN7SPINS > "  ")
    OPHREC.OP1SPINF = "Y";
  else
    OPHREC.OP1SPINF = "N";
  end
  if (OPHREC.TF1CARCD > "  ")
    OPHREC.PK4CARSP = "10";
  end
  if (IN0SM018.IN7STFWH in XWHTBL.XWHCD)
    OPHREC.ZFC-CRCY-CD = XWHTBL.ZFC-CRCY-CD;
  end
  OPHREC.ZZZSDT = IN0SW02.IN0SWCDT;
  OPHREC.ZZZCHGDT = IN0SW02.IN0SWCDT;
  OPHREC.ZZZCHGTM = IN0SW01.IN0SWHMM;
  OPHREC.ZZZCHGCT = 0;

  call "IO1650" ("A ", SQLCA, OPHREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO1650  ";
    TA1REC.TA1LOCAT[4] = "IN0SS2H ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "OPHREC  ";
    TA1REC.TA1TBLVU = "VOPPKH01";
    TA1TBLKE = OPHREC.OP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* **************************************/
   /* *** end of statment group in0ss2g ****/
   /* **************************************/

end // end IN0SS2H

// setup add into dorder.voppkt01
Function IN0SS2I()
   /* ------------------------------------------------------------*/
     /* insert dorder.voppkt01 (orders to post text)*/
   /* ------------------------------------------------------------*/

  OPGREC.XWHCD = IN0SM018.IN7STFWH;
  OPGREC.OP1CUOID = IN0SM018.IN7STNBR;
  IN0SW01.IN0SWDOC = IN0SM018.IN7STNBR;
  OPGREC.OP1PARTN = IN0SW01.IN0SWPRT;
  OPGREC.OP1NORID = 0;
  OPGREC.OP1NTMAL = 0;
  OPGREC.OP4TRSEQ = 1;
  OPGREC.OP4TXTOF = "N";
  OPGREC.ZZZCHGCT = 0;

  if (IN7REC.IN7STINS > " ") /* if stock transfer special instrctns*/
    OPGREC.OP4TRTYP = "L"; /* set record type*/
    OPGREC.OP4TXT = IN7REC.IN7STINS; /* move to text*/
    OPGREC.XNDCD = "DIST"; /* set department code*/
    IN0SS2J();
  end

  if (IN0SW01.IN0SWSES == "Y"
   || IN0SW01.IN0SWERS == "Y")
    return;
  end

  if (IN7REC.IN7SPINS > " ") /* if stock transfer ship instrctns*/
    OPGREC.OP4TRTYP = "I"; /* set record type*/
    OPGREC.OP4TXT = IN7REC.IN7SPINS; /* move to text*/
    OPGREC.XNDCD = "TRAF"; /* set department code*/
    IN0SS2J();
  end

   /* **************************************/
   /* *** end of statment group in0ss2i ****/
   /* **************************************/

end // end IN0SS2I

// insert into dorder.voppkt01
Function IN0SS2J()
   /* ------------------------------------------------------------*/
     /* insert dorder.voppkt01 (orders to post text)*/
   /* ------------------------------------------------------------*/

  call "IO1670" ("A ", SQLCA, OPGREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO1670  ";
    TA1REC.TA1LOCAT[4] = "IN0SS2J ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "OPGREC  ";
    TA1REC.TA1TBLVU = "VOPPKT01";
    TA1TBLKE = " ";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* **************************************/
   /* *** end of statment group in0ss2j ****/
   /* **************************************/

end // end IN0SS2J

// 'sn' call shiprec db (sr2rec)
Function IN0SS33()
   /* *******************************/
   /* obtain transfer item row*/
   /* *******************************/


  call "IO0800" ("SN", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "SN      ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0800  ";
      TA1REC.TA1LOCAT[4] = "IN0SS33 ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "SR2REC  ";
      TA1REC.TA1TBLVU = "VSRORD01";
      TA1TBLKE = SR2REC.SR2KEYS;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ss33*/
   /* ***********************************/
end // end IN0SS33

// obtain comp. and store names
Function IN0SS3A()


  IN0SW01.IN0SWLOC = "IN0SS3A";
  IN0SW01.IN0SWMAP = "IN0SM020";

  IN0SW01.IN0SWACT = IN0SM020.IN0SMACT;

  set KUCREC empty;

  KUCREC.KUCCOID = IN0SW01.IN0SWCOI;

  IN0SSHH(); /* 's ' call to the company table*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SM020.KUCCONM = KUCREC.KUCCONM;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(45); /* company not on db*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.IN0SMACT cursor, bold;
      return;
    else
      return;
    end
  end

  set KUMREC empty;

  KUMREC.KUCCOID = IN0SW01.IN0SWCOI;
  KUMREC.KUMSTRID = IN0SW01.IN0SWSTO;

  IN0SSFF(); /* 's ' call to the store table*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SM020.KUMSTSNM = KUMREC.KUMSTSNM;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(46); /* store not on db*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.IN0SMACT cursor, bold;
      return;
    else
      return;
    end
  end


end // end IN0SS3A

// obtain eff life cycle
Function IN0SS4A()


   /* ************************************************************/
   /* *** find effective life cycle and perform data moves    ****/
   /* ************************************************************/


  if (IN0SW02.IN0SWCDT >= INGREC.SY2CEDT1)
    IN0SM025.XLCCD = INGREC.XLCCD1;
  else
    if (IN0SW02.IN0SWCDT >= INGREC.SY2CEDT2)
      IN0SM025.XLCCD = INGREC.XLCCD2;
    else
      if (IN0SW02.IN0SWCDT >= INGREC.SY2CEDT3)
        IN0SM025.XLCCD = INGREC.XLCCD3;
      else
        IN0SM025.XLCCD = INGREC.XLCCD4;
      end
    end
  end


   /* ************************************************************/
   /* *** end of statement group in0ss4a                      ****/
   /* ************************************************************/


end // end IN0SS4A

// get data portion of map
Function IN0SS4B()


   /* **** set up abend areas *****/

  IN0SW01.IN0SWLOC = "IN0SS4B ";
  IN0SW01.IN0SWMAP = "IN0SM025";

  set SYPREC empty;

  SYPREC.XGPCD = IN0SM025.XGPCD;
  SYPREC.SY1STNBR = IN0SM025.SY1STNBR;
  SYPREC.SY2CLRID = IN0SM025.SY2CLRID;
  SYPREC.XDMCD = IN0SM025.XDMCD;
  SYPREC.XQACD = "**";

  IN0SSRR(); /* perform size scale call (syprec)*/

  if (IN0SW01.IN0SWERS == "Y")
    return;
  end

  set IN8REC empty;

  IN8REC.IN7STNBR = IN0SM025.IN7STNBR;
  IN8REC.XGPCD = IN0SM025.XGPCD;
  IN8REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN8REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN8REC.XDMCD = IN0SM025.XDMCD;
  IN8REC.XQACD = IN0SM025.XQACD;
  IN8REC.XSACD = IN0SM025.XSACD;
  IN8REC.XSDCD = IN0SM025.XSDCD;
  IN8REC.XPGCD = IN0SM025.XPGCD;
  IN8REC.XUMCD = IN0SM025.XUMCD;

  IN0SSDD(); /* perform 's' call to stk trnsfr item db (in8rec)*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SW01.IN0SWITM = "U";
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0SW01.IN0SWITM = "A";
    else
      return;
    end
  end

  IN0SWIX1 = 1; /* look at each size bucket*/
  IN0SWIX2 = 0; /* total of buckets w/ size data*/
  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX2 = IN0SWIX2 + 1;
      IN0SM025.SY4IDDSC[IN0SWIX2] = SYPREC.SY4IDDSC[IN0SWIX1];
      if (SQLCA.VAGen_SQLCODE == 0)
        IN0SS4C(); /* determine which quantity going to screen*/
      else
        IN0SM025.IN0SMQTY[IN0SWIX2] = 0;
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  IN0SWIX1 = IN0SWIX2 + 1;

  IN0SM025.SY4IDDSC[IN0SWIX1] = "TOTAL";

   /* ** set remaining input fields dark ***/

  IN0SWIX1 = IN0SWIX2 + 2;

  while (IN0SWIX1 <= 40)
    set IN0SM025.IN0SMAQY[IN0SWIX1] skip, invisible;
    IN0SWIX1 = IN0SWIX1 + 1;
  end


   /* ************************************************************/
   /* *** end of:  IN0sS4b - process key changes              ****/
   /* ************************************************************/
end // end IN0SS4B

// determine qty going to screen
Function IN0SS4C()


  if (IN0SM025.IN0SMSEL == "1")
    IN0SM025.IN0SMQTY[IN0SWIX2] = IN8REC.IN8SQQ[IN0SWIX1];
  else
    if (IN0SM025.IN0SMSEL == "2")
      IN0SM025.IN0SMQTY[IN0SWIX2] = IN8REC.IN8SIQ[IN0SWIX1];
    else
      if (IN0SM025.IN0SMSEL == "3")
        IN0SM025.IN0SMQTY[IN0SWIX2] = IN8REC.IN8SSQ[IN0SWIX1];
      else
        if (IN0SM025.IN0SMSEL == "4")
          IN0SM025.IN0SMQTY[IN0SWIX2] = IN8REC.IN8SRQ[IN0SWIX1];
        else
        end
      end
    end
  end


   /* ***************************************************/
   /* *** this is the end of statement group in0ss4c ****/
   /* ***************************************************/


end // end IN0SS4C

// determine if prod is shipable
Function IN0SS4E()
   /* ** save map and process in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0SS4E ";
  IN0SW01.IN0SWMAP = "IN0SM025";

  set IN2REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS4E ";
  TA1REC.TA1LOC = "DETERMINE IF PROD SHIPABLE";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN2REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN2REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN2REC.XWHCD = IN7REC.IN7STFWH;
  IN2REC.XGPCD = IN0SM025.XGPCD;
  IN2REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN2REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN2REC.XDMCD = IN0SM025.XDMCD;
  IN2REC.XQACD = IN0SM025.XQACD;

  IN0SSKK(); /* 's ' invnt hdr db (in2rec)*/

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(63); /* invnty hdr rec not on db*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* error - notify programming*/
      return;
    end
  end

  if (IN2REC.IN2ALCFL == "N")
    IN0SW01.IN0SWSHP = "N";
    return;
  end


  if (IN2REC.IN2ALCFL == "Y")
    IN0SW01.IN0SWSHP = "Y";
  else
    IN0SW01.IN0SWSHP = "N";
  end


end // end IN0SS4E

// call io2370 for avail. qtys
Function IN0SS4F()

  IN0SW01.IN0SWLOC = "IN0SS4F ";
  IN0SW01.IN0SWMAP = "IN0SM025";

   /* *** format av7rec for call ****/

  set AV7REC empty;

  if (IN7REC.IN7STFWH in XWHTBL.XWHCD)
    AV7REC.XWHCD = IN7REC.IN7STFWH;
  else
    converseLib.validationFailed(8); /* error - notify programming*/
    IN0SW01.IN0SWERS = "Y";
    return;
  end

  AV7REC.XGPCD = IN0SM025.XGPCD;
  AV7REC.SY1STNBR = IN0SM025.SY1STNBR;
  AV7REC.SY2CLRID = IN0SM025.SY2CLRID;
  AV7REC.XDMCD = IN0SM025.XDMCD;
  AV7REC.XQACD = IN0SM025.XQACD;
  AV7REC.XOWCD = IN7REC.IN7STFOW;
  AV7REC.XSDCD = IN0SM025.XSDCD;
  AV7REC.XSACD = IN0SM025.XSACD;
  AV7REC.XPGCD = IN0SM025.XPGCD;
  AV7REC.XUMCD = IN0SM025.XUMCD;
  AV7REC.AV6RECTY = "F";
  AV7REC.AV4PRDBD = 0;
  IN0SW01.IN0SWSCD = " ";
  IN0SW01.IN0SWSYR = 0;

  call "IO2370" ("S ", SQLCA, AV7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(105);
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "        ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO2370  ";
      TA1REC.TA1LOCAT[4] = "IN0SS4F ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "AV7REC  ";
      TA1REC.TA1TBLVU = "        ";
      TA1TBLKE = AV7REC.AV7KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end


  IN0SWIX1 = 1;
  while (IN0SWIX1 <= 40)
    if (AV7REC.XCDCD[IN0SWIX1] in XCDTBL.XCDCD)
      if (XCDTBL.XCDOALOC[sysVar.arrayIndex] != "Y")
        AV7REC.AV1AVQTY[IN0SWIX1] = 0;
      end
    else
      AV7REC.AV1AVQTY[IN0SWIX1] = 0;
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end
end // end IN0SS4F

// calc.avail. qty from in1rec
Function IN0SS4G()
  set IN1REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS4G ";
  TA1REC.TA1LOC = "CALC AVAIL. FROM IN1REC QTY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN1REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN1REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN1REC.XWHCD = IN7REC.IN7STFWH;
  IN1REC.XGPCD = IN0SM025.XGPCD;
  IN1REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN1REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN1REC.XDMCD = IN0SM025.XDMCD;
  IN1REC.XQACD = IN0SM025.XQACD;
  IN1REC.XSACD = IN0SM025.XSACD;
  IN1REC.XSDCD = IN0SM025.XSDCD;
  IN1REC.XPGCD = IN0SM025.XPGCD;
  IN1REC.XUMCD = IN0SM025.XUMCD;

  IN0SWIX1 = 1;

  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN1REC.SY5SZID = IN0SWIX1;
      IN0SSUU(); /* perform 's' call using in1rec*/
      if (SQLCA.VAGen_SQLCODE == 0)
        IN0SW01.IN0SWONH = IN1REC.IN1ONHND;
        IN0SW01.IN0SWRSR = IN1REC.IN1RSRVD;
        IN0SW01.IN0SWALO = IN1REC.IN1ALOCD;
        IN0SW01.IN0SWSTA = IN1REC.IN1STASD;
        IN0SW01.IN0SWXFO = IN1REC.IN1XFERO;
        IN0SW01.IN0SWONH = IN0SW01.IN0SWONH - IN0SW01.IN0SWRSR;
        IN0SW01.IN0SWONH = IN0SW01.IN0SWONH - IN0SW01.IN0SWALO;
        IN0SW01.IN0SWONH = IN0SW01.IN0SWONH - IN0SW01.IN0SWSTA;
        IN0SW01.IN0SWONH = IN0SW01.IN0SWONH - IN0SW01.IN0SWXFO;
        if (IN0SW01.IN0SWONH > 0)
          AV7REC.AV1AVQTY[IN0SWIX1] = IN0SW01.IN0SWONH;
        else
          AV7REC.AV1AVQTY[IN0SWIX1] = 0;
        end
      else
        AV7REC.AV1AVQTY[IN0SWIX1] = 0;
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end
end // end IN0SS4G

// adjust map request quantities
Function IN0SS4H()

  if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
    if (IN0SM025.IN0SMAQY[IN0SWIX3] < 0)
      if (IN0SM025.IN0SMAQY[IN0SWIX3] > AV7REC.AV1AVQTY[IN0SWIX1])
        IN0SM025.IN0SMAQY[IN0SWIX3] = AV7REC.AV1AVQTY[IN0SWIX1];
        converseLib.validationFailed(54); /* iss qty changed to max avail. qty*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM025.IN0SMAQY[IN0SWIX3] cursor, bold;
      end
    else
      if (IN0SM025.IN0SMAQY[IN0SWIX3] > AV7REC.AV1AVQTY[IN0SWIX1])
        IN0SM025.IN0SMAQY[IN0SWIX3] = AV7REC.AV1AVQTY[IN0SWIX1];
        converseLib.validationFailed(54); /* iss qty changed to max avail. qty*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM025.IN0SMAQY[IN0SWIX3] cursor, bold;
      end
    end
    IN0SWIX3 = IN0SWIX3 - 1;
  end
end // end IN0SS4H

// update through availability
Function IN0SS4I()

  set INZREC empty;
  INZREC.XWHCD = IN7REC.IN7STFWH;
  INZREC.XOWCD = IN7REC.IN7STFOW;
  INZREC.XGPCD = IN0SM025.XGPCD;
  INZREC.SY1STNBR = IN0SM025.SY1STNBR;
  INZREC.SY2CLRID = IN0SM025.SY2CLRID;
  INZREC.XDMCD = IN0SM025.XDMCD;
  INZREC.XQACD = IN0SM025.XQACD;
  INZREC.XSACD = IN0SM025.XSACD;
  INZREC.XSDCD = IN0SM025.XSDCD;
  INZREC.XPGCD = IN0SM025.XPGCD;
  INZREC.XUMCD = IN0SM025.XUMCD;

  INZREC.IN5TRDCD = "T";
  INZREC.IN5TRDOC = IN0SM025.IN7STNBR;
  IN0SW01.IN0SWDOC = INZREC.IN5TRDOC;
  INZREC.IN5TRPRT = IN0SW01.IN0SWPRT;
  INZREC.IN5TRSUB = 0;
  INZREC.IN5TRDTE = IN0SW02.IN0SWCDT;
  INZREC.IN5TRTIM = IN0SW01.IN0SWTIM;

  if (IN0SM025.IN0SMSEL == "2")
    INZREC.XITCD = "51";
  else
    if (IN0SM025.IN0SMSEL == "3")
      INZREC.XITCD = "24";
    else
      if (IN0SM025.IN0SMSEL == "4")
        INZREC.XITCD = "14";
      else
        converseLib.validationFailed(8); /* error - notify programming*/
        IN0SW01.IN0SWERS = "Y";
        return;
      end
    end
  end

  INZREC.XSECD = IN0SW01.IN0SWSCD;
  INZREC.XSNYR = IN0SW01.IN0SWSYR;

  INZREC.XIRCD = IN0SM025.XIRCD;
  INZREC.IN5USRID = COMMAREA.CAUSERID;
  INZREC.IN5TRDDT = IN0SW02.IN0SWCDT;

  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS4I ";
  TA1REC.TA1LOC = "UPDATE THROUGH AVAILABILITY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      INZREC.IN5TRREF = "NO OWNER GRP ";
    else
      INZREC.IN5TRREF = " ";
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  if (IN7REC.XIUCD == "01")
    INZREC.XIFCD = "05";
  else
    if (IN7REC.XIUCD == "03")
      INZREC.XIFCD = "01";
    else
      if (IN7REC.XIUCD == "04")
        INZREC.XIFCD = "01";
      else
        converseLib.validationFailed(8); /* error - notify programming*/
        IN0SW01.IN0SWERS = "Y";
        return;
      end
    end
  end

  INZREC.INZALNGQ = "N";

  if (IN0SM025.IN0SMSEL == "3")
    if (IN7REC.XIUCD == "03"
     || IN7REC.XIUCD == "04")
      IN0SWIX1 = 1;
      IN0SWIX3 = 0;
      while (IN0SWIX1 <= 40)
        if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
          IN0SWIX3 = IN0SWIX3 + 1;
          if (IN0SM025.IN0SMAQY[IN0SWIX3] != 0)
            IN0SM025.IN0SMAQY[IN0SWIX3] = IN0SM025.IN0SMAQY[IN0SWIX3] * -1;
          end
        end
        IN0SWIX1 = IN0SWIX1 + 1;
      end
    end
  end

  IN0SWIX1 = 1;
  IN0SWIX3 = 0;

  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX3 = IN0SWIX3 + 1;
      if (IN0SM025.IN0SMAQY[IN0SWIX3] != 0)
        INZREC.INZQTYCH[IN0SWIX1] = IN0SM025.IN0SMAQY[IN0SWIX3];
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end
  IN0SS9A(); /* call IN9050 to update inventory*/

  if (IN0SM025.IN0SMSEL == "3")
    if (IN7REC.XIUCD == "03"
     || IN7REC.XIUCD == "04")
      IN0SWIX1 = 1;
      IN0SWIX3 = 0;
      while (IN0SWIX1 <= 40)
        if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
          IN0SWIX3 = IN0SWIX3 + 1;
          if (IN0SM025.IN0SMAQY[IN0SWIX3] != 0)
            IN0SM025.IN0SMAQY[IN0SWIX3] = IN0SM025.IN0SMAQY[IN0SWIX3] * -1;
          end
        end
        IN0SWIX1 = IN0SWIX1 + 1;
      end
    end
  end

  return;


   /* --------------- end of: in0ss4i ----------------------------*/
end // end IN0SS4I

// update;stat=01,adj to iss qty
Function IN0SS4J()
  IN0SW01.IN0SWLOC = "IN0SS4J "; /* save map and process in*/
  IN0SW01.IN0SWMAP = "IN0SM025"; /* case of abend*/

  IN0SWIX1 = 1;
  IN0SWIX3 = 0;

  set IN1REC empty;
  set IN6REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS4J ";
  TA1REC.TA1LOC = "UPDATE - ADJ TO ISSUE QTY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN1REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN1REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN1REC.XWHCD = IN7REC.IN7STFWH;
  IN1REC.XGPCD = IN0SM025.XGPCD;
  IN1REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN1REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN1REC.XDMCD = IN0SM025.XDMCD;
  IN1REC.XQACD = IN0SM025.XQACD;
  IN1REC.XSACD = IN0SM025.XSACD;
  IN1REC.XSDCD = IN0SM025.XSDCD;
  IN1REC.XPGCD = IN0SM025.XPGCD;
  IN1REC.XUMCD = IN0SM025.XUMCD;


  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX3 = IN0SWIX3 + 1;
      if (IN0SM025.IN0SMAQY[IN0SWIX3] != 0)
        IN1REC.SY5SZID = IN0SWIX1;
        IN0SSUU(); /* perform 's ' call using in1rec*/
        if (SQLCA.VAGen_SQLCODE == 0)
          IN1REC.IN1XFERO = IN1REC.IN1XFERO + IN0SM025.IN0SMAQY[IN0SWIX3];
          IN1REC.ZZ-CHNG-PGM-ID = "IN0S";
          IN1REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
          IN1REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
          IN0SSTT(); /* update item db (in1rec)*/
          if (SQLCA.VAGen_SQLCODE == 0)
               /* *** set up audit record ****/
            IN6REC.IN6TQT[IN0SWIX1] = IN0SM025.IN0SMAQY[IN0SWIX3];
          else
            IN0SWIX1 = 99;
          end
        else
          converseLib.validationFailed(66); /* invnt item not on db*/
          IN0SW01.IN0SWERS = "Y";
          return;
        end
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWERS == "N"
   && IN0SW01.IN0SWSES != "Y")
    set IN5REC empty;
    set TA1REC empty;
    set TAEREC empty;
    set INRREC empty;
    IN5REC.XWHCD = IN7REC.IN7STFWH;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

    TA1REC.TA1PGMNM = "IN0SS4J ";
    TA1REC.TA1LOC = "UPDATE - ADJ TO ISSUE QTY";
    INRREC.INR-RULE-TYPE = "WHSECODE";
    INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
    INRREC02.INR-SEARCH-FL = "Y";

    XSINS-PROCESS-RULE(); /* CALL IN8000*/

    if (INRREC.INR-RETURN-CODE == 0)
      if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
        IN5REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
      else
        IN5REC.XOWCD = IN7REC.IN7STFOW;
      end
    else
      if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1MAP = sysVar.errorCode;
        TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
        TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        return;
      else /* UNEXPECTED ERROR OCCURRED*/
        IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        return;
      end
    end

    IN0SS4R(); /* format audit header record*/
    IN0SSNN(); /* add audit header record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      IN6REC.XWHCD = IN7REC.IN7STFWH;
      set TA1REC empty;
      set TAEREC empty;
      set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

      TA1REC.TA1PGMNM = "IN0SS4J ";
      TA1REC.TA1LOC = "UPDATE - ADJ TO ISSUE QTY";
      INRREC.INR-RULE-TYPE = "WHSECODE";
      INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
      INRREC02.INR-SEARCH-FL = "Y";

      XSINS-PROCESS-RULE(); /* CALL IN8000*/

      if (INRREC.INR-RETURN-CODE == 0)
        if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
          IN6REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
        else
          IN6REC.XOWCD = IN7REC.IN7STFOW;
        end
      else
        if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
          IN0SW01.IN0SWERS = "Y";
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "POST";
          TA1REC.TA1MAP = sysVar.errorCode;
          TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
          TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
          return;
        else /* UNEXPECTED ERROR OCCURRED*/
          IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS*/
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          return;
        end
      end

      IN6REC.XIFCD = "05";
       /* the quantities are formatted above*/
      IN0SS4S(); /* format audit item record*/
      IN0SSOO(); /* add audit item record*/
    end
  end


end // end IN0SS4J

// updt:stat=03,adj to shp
Function IN0SS4K()
   /*  */
  IN0SW01.IN0SWLOC = "IN0SS4K "; /* save map and process in*/
  IN0SW01.IN0SWMAP = "IN0SM025"; /* case of abend*/

  set IN1REC empty;
  set IN6REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS4K ";
  TA1REC.TA1LOC = "UPDATE - ADJ TO SHIPPED QTY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STTWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN1REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN1REC.XOWCD = IN7REC.IN7STTOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN1REC.XWHCD = IN7REC.IN7STTWH;
  IN1REC.XGPCD = IN0SM025.XGPCD;
  IN1REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN1REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN1REC.XDMCD = IN0SM025.XDMCD;
  IN1REC.XQACD = IN0SM025.XQACD;
  IN1REC.XSACD = IN0SM025.XSACD;
  IN1REC.XSDCD = IN0SM025.XSDCD;
  IN1REC.XPGCD = IN0SM025.XPGCD;
  IN1REC.XUMCD = IN0SM025.XUMCD;

  IN0SWIX1 = 1;
  IN0SWIX3 = 0;

  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX3 = IN0SWIX3 + 1;
      if (IN0SM025.IN0SMAQY[IN0SWIX3] != 0)
        IN1REC.SY5SZID = IN0SWIX1;
        IN0SSUU(); /* perform 's ' call using in1rec*/
        if (SQLCA.VAGen_SQLCODE == 0)
          IN1REC.IN1XFERI = IN1REC.IN1XFERI + IN0SM025.IN0SMAQY[IN0SWIX3];
          IN1REC.ZZ-CHNG-PGM-ID = "IN0S";
          IN1REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
          IN1REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
          IN0SSTT(); /* update item db (in1rec)*/
          if (SQLCA.VAGen_SQLCODE == 0)
               /* *** set up audit record ****/
            IN6REC.IN6TQT[IN0SWIX1] = IN0SM025.IN0SMAQY[IN0SWIX3];
          else
            IN0SWIX1 = 99;
          end
        else
          if (SQLCA.VAGen_SQLCODE == +100)
            IN1REC.IN1XFERI = IN0SM025.IN0SMAQY[IN0SWIX3];
            IN1REC.IN1ONHND = 0;
            IN1REC.IN1RSRVD = 0;
            IN1REC.IN1ALOCD = 0;
            IN1REC.IN1STASD = 0;
            IN1REC.IN1XFERO = 0;
            IN1REC.IN1EOMOH = 0;
            IN1REC.ZZ-CHNG-PGM-ID = "IN0S";
            IN1REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
            IN1REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
            IN1REC.ZZZCHGCT = 0;
            IN0SS4V(); /* add invt itm rec (in1rec)*/
            if (SQLCA.VAGen_SQLCODE == 0)
                 /* *** set up audit record ****/
              IN6REC.IN6TQT[IN0SWIX1] = IN0SM025.IN0SMAQY[IN0SWIX3];
            else
              IN0SWIX1 = 99;
            end
          else
            IN0SWIX1 = 99;
          end
        end
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWERS == "N"
   && IN0SW01.IN0SWSES != "Y")
    set IN5REC empty;
    set TA1REC empty;
    set TAEREC empty;
    set INRREC empty;
    IN5REC.XWHCD = IN7REC.IN7STTWH;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

    TA1REC.TA1PGMNM = "IN0SS4K ";
    TA1REC.TA1LOC = "UPDATE - ADJ TO SHIPPED QTY";
    INRREC.INR-RULE-TYPE = "WHSECODE";
    INRREC02.XWH-WHSE-CD = IN7REC.IN7STTWH;
    INRREC02.INR-SEARCH-FL = "Y";

    XSINS-PROCESS-RULE(); /* CALL IN8000*/

    if (INRREC.INR-RETURN-CODE == 0)
      if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
        IN5REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
      else
        IN5REC.XOWCD = IN7REC.IN7STTOW;
      end
    else
      if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1MAP = sysVar.errorCode;
        TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
        TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        return;
      else /* UNEXPECTED ERROR OCCURRED*/
        IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        return;
      end
    end

    IN0SS4R(); /* format audit header record*/
    IN0SSNN(); /* add audit header record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      IN6REC.XWHCD = IN7REC.IN7STTWH;
      set TA1REC empty;
      set TAEREC empty;
      set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

      TA1REC.TA1PGMNM = "IN0SS4K ";
      TA1REC.TA1LOC = "UPDATE - ADJ TO SHIPPED QTY";
      INRREC.INR-RULE-TYPE = "WHSECODE";
      INRREC02.XWH-WHSE-CD = IN7REC.IN7STTWH;
      INRREC02.INR-SEARCH-FL = "Y";

      XSINS-PROCESS-RULE(); /* CALL IN8000*/

      if (INRREC.INR-RETURN-CODE == 0)
        if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
          IN6REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
        else
          IN6REC.XOWCD = IN7REC.IN7STTOW;
        end
      else
        if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
          IN0SW01.IN0SWERS = "Y";
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "POST";
          TA1REC.TA1MAP = sysVar.errorCode;
          TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
          TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
          return;
        else /* UNEXPECTED ERROR OCCURRED*/
          IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS*/
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          return;
        end
      end

      IN6REC.XIFCD = "06";
       /* the qtys are formatted above*/
      IN0SS4S(); /* format audit item record*/
      IN0SSOO(); /* add audit item record*/
    end
  end


end // end IN0SS4K

// UPDATE - ADJ TO SHIPPED QTY
Function IN0SS4L()
   /*  */
  IN0SW01.IN0SWLOC = "IN0SS4L "; /* save map and process in*/
  IN0SW01.IN0SWMAP = "IN0SM025"; /* case of abend*/

  set IN1REC empty;
  set IN6REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS4L ";
  TA1REC.TA1LOC = "UPDATE - ADJ TO SHIPPED QTY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN1REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN1REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN1REC.XWHCD = IN7REC.IN7STFWH;
  IN1REC.XGPCD = IN0SM025.XGPCD;
  IN1REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN1REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN1REC.XDMCD = IN0SM025.XDMCD;
  IN1REC.XQACD = IN0SM025.XQACD;
  IN1REC.XSACD = IN0SM025.XSACD;
  IN1REC.XSDCD = IN0SM025.XSDCD;
  IN1REC.XPGCD = IN0SM025.XPGCD;
  IN1REC.XUMCD = IN0SM025.XUMCD;

  IN0SWIX1 = 1;
  IN0SWIX3 = 0;

  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX3 = IN0SWIX3 + 1;
      if (IN0SM025.IN0SMAQY[IN0SWIX3] != 0)
        IN1REC.SY5SZID = IN0SWIX1;
        IN0SSUU(); /* perform 's ' call using in1rec*/
        if (SQLCA.VAGen_SQLCODE == 0)
          IN1REC.IN1ONHND = IN1REC.IN1ONHND - IN0SM025.IN0SMAQY[IN0SWIX3];
          IN1REC.ZZ-CHNG-PGM-ID = "IN0S";
          IN1REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
          IN1REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
          IN0SSTT(); /* update item db (in1rec)*/
          if (SQLCA.VAGen_SQLCODE == 0)
               /* *** set up audit record ****/
            IN6REC.IN6TQT[IN0SWIX1] = IN0SM025.IN0SMAQY[IN0SWIX2];
          else
            IN0SWIX1 = 99;
          end
        else
          converseLib.validationFailed(66); /* invnt item not on db*/
          IN0SW01.IN0SWERS = "Y";
          return;
        end
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWERS == "N"
   && IN0SW01.IN0SWSES != "Y")
    set IN5REC empty;
    set TA1REC empty;
    set TAEREC empty;
    set INRREC empty;
    IN5REC.XWHCD = IN7REC.IN7STFWH;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

    TA1REC.TA1PGMNM = "IN0SS4L ";
    TA1REC.TA1LOC = "UPDATE - ADJ TO SHIPPED QTY";
    INRREC.INR-RULE-TYPE = "WHSECODE";
    INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
    INRREC02.INR-SEARCH-FL = "Y";

    XSINS-PROCESS-RULE(); /* CALL IN8000*/

    if (INRREC.INR-RETURN-CODE == 0)
      if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
        IN5REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
      else
        IN5REC.XOWCD = IN7REC.IN7STFOW;
      end
    else
      if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1MAP = sysVar.errorCode;
        TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
        TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        return;
      else /* UNEXPECTED ERROR OCCURRED*/
        IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        return;
      end
    end

    IN0SS4R(); /* format audit header record*/
    IN0SSNN(); /* add audit header record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      IN6REC.XWHCD = IN7REC.IN7STFWH;

      set TA1REC empty;
      set TAEREC empty;
      set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

      TA1REC.TA1PGMNM = "IN0SS4L ";
      TA1REC.TA1LOC = "UPDATE - ADJ TO SHIPPED QTY";
      INRREC.INR-RULE-TYPE = "WHSECODE";
      INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
      INRREC02.INR-SEARCH-FL = "Y";

      XSINS-PROCESS-RULE(); /* CALL IN8000*/

      if (INRREC.INR-RETURN-CODE == 0)
        if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
          IN6REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
        else
          IN6REC.XOWCD = IN7REC.IN7STFOW;
        end
      else
        if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
          IN0SW01.IN0SWERS = "Y";
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "POST";
          TA1REC.TA1MAP = sysVar.errorCode;
          TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
          TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
          return;
        else /* UNEXPECTED ERROR OCCURRED*/
          IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS*/
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          return;
        end
      end

      IN6REC.XIFCD = "01";
       /* the qtys are formatted above*/
      IN0SS4S(); /* format audit item record*/
      IN0SSOO(); /* add audit item record*/
    end
  end

   /* *** check trnsfr out only flag, will NOT process type 05 ****/

  if (IN7REC.XISCD in XISTBL.XISCD)
    if (XISTBL.XISOUT[sysVar.arrayIndex] == "Y")
      return;
    end
  end

  set IN1REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS4L ";
  TA1REC.TA1LOC = "UPDATE - ADJ TO SHIPPED QTY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STTWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN1REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN1REC.XOWCD = IN7REC.IN7STTOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN1REC.XWHCD = IN7REC.IN7STTWH;
  IN1REC.XGPCD = IN0SM025.XGPCD;
  IN1REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN1REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN1REC.XDMCD = IN0SM025.XDMCD;
  IN1REC.XQACD = IN0SM025.XQACD;
  IN1REC.XSACD = IN0SM025.XSACD;
  IN1REC.XSDCD = IN0SM025.XSDCD;
  IN1REC.XPGCD = IN0SM025.XPGCD;
  IN1REC.XUMCD = IN0SM025.XUMCD;

  IN0SWIX1 = 1;
  IN0SWIX3 = 0;

  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX3 = IN0SWIX3 + 1;
      if (IN0SM025.IN0SMAQY[IN0SWIX3] != 0)
        IN1REC.SY5SZID = IN0SWIX1;
        IN0SSUU(); /* perform 's ' call using in1rec*/
        if (SQLCA.VAGen_SQLCODE == 0)
          IN1REC.IN1XFERI = IN1REC.IN1XFERI + IN0SM025.IN0SMAQY[IN0SWIX3];
          IN1REC.ZZ-CHNG-PGM-ID = "IN0S";
          IN1REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
          IN1REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
          IN0SSTT(); /* update item db (in1rec)*/
          if (SQLCA.VAGen_SQLCODE != 0)
            IN0SWIX1 = 99;
          end
        else
          converseLib.validationFailed(66); /* invnt item not on db*/
          IN0SW01.IN0SWERS = "Y";
          return;
        end
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWERS == "N"
   && IN0SW01.IN0SWSES == "N")
    set IN5REC empty;
    set TA1REC empty;
    set TAEREC empty;
    set INRREC empty;
    IN5REC.XWHCD = IN7REC.IN7STTWH;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

    TA1REC.TA1PGMNM = "IN0SS4L ";
    TA1REC.TA1LOC = "UPDATE - ADJ TO SHIPPED QTY";
    INRREC.INR-RULE-TYPE = "WHSECODE";
    INRREC02.XWH-WHSE-CD = IN7REC.IN7STTWH;
    INRREC02.INR-SEARCH-FL = "Y";

    XSINS-PROCESS-RULE(); /* CALL IN8000*/

    if (INRREC.INR-RETURN-CODE == 0)
      if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
        IN5REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
      else
        IN5REC.XOWCD = IN7REC.IN7STTOW;
      end
    else
      if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1MAP = sysVar.errorCode;
        TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
        TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        return;
      else /* UNEXPECTED ERROR OCCURRED*/
        IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        return;
      end
    end

    IN0SS4R(); /* format audit header record*/
    IN0SSNN(); /* add audit header record*/
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    set IN6REC empty;
    set TA1REC empty;
    set TAEREC empty;
    set INRREC empty;
    IN6REC.XWHCD = IN7REC.IN7STTWH;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

    TA1REC.TA1PGMNM = "IN0SS4L ";
    TA1REC.TA1LOC = "UPDATE - ADJ TO SHIPPED QTY";
    INRREC.INR-RULE-TYPE = "WHSECODE";
    INRREC02.XWH-WHSE-CD = IN7REC.IN7STTWH;
    INRREC02.INR-SEARCH-FL = "Y";

    XSINS-PROCESS-RULE(); /* CALL IN8000*/

    if (INRREC.INR-RETURN-CODE == 0)
      if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
        IN6REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
      else
        IN6REC.XOWCD = IN7REC.IN7STTOW;
      end
    else
      if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1MAP = sysVar.errorCode;
        TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
        TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        return;
      else /* UNEXPECTED ERROR OCCURRED*/
        IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        return;
      end
    end

    IN6REC.XIFCD = "06";
     /* the qtys are formatted above*/
    IN0SS4S(); /* format audit item record*/
    IN0SSOO(); /* add audit item record*/
  end


end // end IN0SS4L

// UPDATE - SHIPPED, ADJ TO SHIP
Function IN0SS4M()
   /*  */
  IN0SW01.IN0SWLOC = "IN0SS4M "; /* save map and process in*/
  IN0SW01.IN0SWMAP = "IN0SM025"; /* case of abend*/

  set IN1REC empty;
  set IN6REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS4M ";
  TA1REC.TA1LOC = "UPDATE - SHIPPED, ADJ TO SHIP";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN1REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN1REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN1REC.XWHCD = IN7REC.IN7STFWH;
  IN1REC.XGPCD = IN0SM025.XGPCD;
  IN1REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN1REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN1REC.XDMCD = IN0SM025.XDMCD;
  IN1REC.XQACD = IN0SM025.XQACD;
  IN1REC.XSACD = IN0SM025.XSACD;
  IN1REC.XSDCD = IN0SM025.XSDCD;
  IN1REC.XPGCD = IN0SM025.XPGCD;
  IN1REC.XUMCD = IN0SM025.XUMCD;

  IN0SWIX1 = 1;
  IN0SWIX3 = 0;

  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX3 = IN0SWIX3 + 1;
      if (IN0SM025.IN0SMAQY[IN0SWIX3] != 0)
        IN1REC.SY5SZID = IN0SWIX1;
        IN0SSUU(); /* perform 's ' call using in1rec*/
        if (SQLCA.VAGen_SQLCODE == 0)
          IN1REC.IN1ONHND = IN1REC.IN1ONHND - IN0SM025.IN0SMAQY[IN0SWIX3];
          IN1REC.ZZ-CHNG-PGM-ID = "IN0S";
          IN1REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
          IN1REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
          IN0SSTT(); /* update item db (in1rec)*/
          if (SQLCA.VAGen_SQLCODE == 0)
               /* *** set up audit record ****/
            IN6REC.IN6TQT[IN0SWIX1] = IN0SM025.IN0SMAQY[IN0SWIX3];
          else
            IN0SWIX1 = 99;
          end
        else
          converseLib.validationFailed(66); /* invnt item not on db*/
          IN0SW01.IN0SWERS = "Y";
          return;
        end
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWERS == "N"
   && IN0SW01.IN0SWSES != "Y")
    set IN5REC empty;
    set TA1REC empty;
    set TAEREC empty;
    set INRREC empty;
    IN5REC.XWHCD = IN7REC.IN7STFWH;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

    TA1REC.TA1PGMNM = "IN0SS4M ";
    TA1REC.TA1LOC = "UPDATE - SHIPPED, ADJ TO SHIP";
    INRREC.INR-RULE-TYPE = "WHSECODE";
    INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
    INRREC02.INR-SEARCH-FL = "Y";

    XSINS-PROCESS-RULE(); /* CALL IN8000*/

    if (INRREC.INR-RETURN-CODE == 0)
      if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
        IN5REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
      else
        IN5REC.XOWCD = IN7REC.IN7STFOW;
      end
    else
      if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1MAP = sysVar.errorCode;
        TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
        TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        return;
      else /* UNEXPECTED ERROR OCCURRED*/
        IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        return;
      end
    end

    IN0SS4R(); /* format audit header record*/
    IN0SSNN(); /* add audit header record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      IN6REC.XWHCD = IN7REC.IN7STFWH;
      set TA1REC empty;
      set TAEREC empty;
      set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

      TA1REC.TA1PGMNM = "IN0SS4M ";
      TA1REC.TA1LOC = "UPDATE - SHIPPED, ADJ TO SHIP";
      INRREC.INR-RULE-TYPE = "WHSECODE";
      INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
      INRREC02.INR-SEARCH-FL = "Y";

      XSINS-PROCESS-RULE(); /* CALL IN8000*/

      if (INRREC.INR-RETURN-CODE == 0)
        if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
          IN6REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
        else
          IN6REC.XOWCD = IN7REC.IN7STFOW;
        end
      else
        if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
          IN0SW01.IN0SWERS = "Y";
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "POST";
          TA1REC.TA1MAP = sysVar.errorCode;
          TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
          TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
          return;
        else /* UNEXPECTED ERROR OCCURRED*/
          IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS*/
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          return;
        end
      end

      IN6REC.XIFCD = "01";
       /* the qtys are formatted above*/
      IN0SS4S(); /* format audit item record*/
      IN0SSOO(); /* add audit item record*/
    end
  end


end // end IN0SS4M

// UPDATE - SHIPPED, ADJ TO RECVD
Function IN0SS4N()
   /*  */
  IN0SW01.IN0SWLOC = "IN0SS4N "; /* save map and process in*/
  IN0SW01.IN0SWMAP = "IN0SM025"; /* case of abend*/

  set IN1REC empty;
  set IN6REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS4N ";
  TA1REC.TA1LOC = "UPDATE - SHIPPED, ADJ TO RECVD";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STTWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN1REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN1REC.XOWCD = IN7REC.IN7STTOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN1REC.XWHCD = IN7REC.IN7STTWH;
  IN1REC.XGPCD = IN0SM025.XGPCD;
  IN1REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN1REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN1REC.XDMCD = IN0SM025.XDMCD;
  IN1REC.XQACD = IN0SM025.XQACD;
  IN1REC.XSACD = IN0SM025.XSACD;
  IN1REC.XSDCD = IN0SM025.XSDCD;
  IN1REC.XPGCD = IN0SM025.XPGCD;
  IN1REC.XUMCD = IN0SM025.XUMCD;

  IN0SWIX1 = 1;
  IN0SWIX3 = 0;

  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX3 = IN0SWIX3 + 1;
      if (IN0SM025.IN0SMAQY[IN0SWIX3] != 0)
        IN1REC.SY5SZID = IN0SWIX1;
        IN0SSUU(); /* perform 's ' call using in1rec*/
        if (SQLCA.VAGen_SQLCODE == 0)
          IN1REC.IN1ONHND = IN1REC.IN1ONHND + IN0SM025.IN0SMAQY[IN0SWIX3];
          IN1REC.ZZ-CHNG-PGM-ID = "IN0S";
          IN1REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
          IN1REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
          IN0SSTT(); /* update item db (in1rec)*/
          if (SQLCA.VAGen_SQLCODE == 0)
               /* *** set up audit record ****/
            IN6REC.IN6TQT[IN0SWIX1] = IN0SM025.IN0SMAQY[IN0SWIX3];
          else
            IN0SWIX1 = 99;
          end
        else
          converseLib.validationFailed(66); /* invnt item not on db*/
          IN0SW01.IN0SWERS = "Y";
          return;
        end
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWERS == "N"
   && IN0SW01.IN0SWSES != "Y")
    set IN5REC empty;
    set TA1REC empty;
    set TAEREC empty;
    set INRREC empty;
    IN5REC.XWHCD = IN7REC.IN7STTWH;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

    TA1REC.TA1PGMNM = "IN0SS4N ";
    TA1REC.TA1LOC = "UPDATE - SHIPPED, ADJ TO RECVD";
    INRREC.INR-RULE-TYPE = "WHSECODE";
    INRREC02.XWH-WHSE-CD = IN7REC.IN7STTWH;
    INRREC02.INR-SEARCH-FL = "Y";

    XSINS-PROCESS-RULE(); /* CALL IN8000*/

    if (INRREC.INR-RETURN-CODE == 0)
      if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
        IN5REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
      else
        IN5REC.XOWCD = IN7REC.IN7STTOW;
      end
    else
      if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1MAP = sysVar.errorCode;
        TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
        TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        return;
      else /* UNEXPECTED ERROR OCCURRED*/
        IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
        converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
        return;
      end
    end

    IN0SS4R(); /* format audit header record*/
    IN0SSNN(); /* add audit header record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      IN6REC.XWHCD = IN7REC.IN7STTWH;
      set TA1REC empty;
      set TAEREC empty;
      set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

      TA1REC.TA1PGMNM = "IN0SS4N ";
      TA1REC.TA1LOC = "UPDATE - SHIPPED, ADJ TO RECVD";
      INRREC.INR-RULE-TYPE = "WHSECODE";
      INRREC02.XWH-WHSE-CD = IN7REC.IN7STTWH;
      INRREC02.INR-SEARCH-FL = "Y";

      XSINS-PROCESS-RULE(); /* CALL IN8000*/

      if (INRREC.INR-RETURN-CODE == 0)
        if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
          IN6REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
        else
          IN6REC.XOWCD = IN7REC.IN7STTOW;
        end
      else
        if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
          IN0SW01.IN0SWERS = "Y";
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "POST";
          TA1REC.TA1MAP = sysVar.errorCode;
          TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
          TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
          return;
        else /* UNEXPECTED ERROR OCCURRED*/
          IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS*/
          converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
          return;
        end
      end

      IN6REC.XIFCD = "01";
       /* the qtys are formatted above*/
      IN0SS4S(); /* format audit item record*/
      IN0SSOO(); /* add audit item record*/
    end
  end


end // end IN0SS4N

// format audit header record
Function IN0SS4R()


   /* ** format key ***/

   /* xwhcd & xowcd formatted in calling statement group*/

  IN5REC.IN5TRDCD = "T";
  IN5REC.IN5TRDOC = IN7REC.IN7STNBR;
  IN0SW01.IN0SWDOC = IN5REC.IN5TRDOC;
  IN5REC.IN5TRPRT = IN0SW01.IN0SWPRT;
  IN5REC.IN5TRSUB = 0;
  IN5REC.IN5TRDTE = IN0SW02.IN0SWCDT;
  IN5REC.IN5TRTIM = IN0SW01.IN0SWTIM;

  if (IN0SM025.IN0SMSEL == "2")
    IN5REC.XITCD = "51";
  else
    if (IN0SM025.IN0SMSEL == "3")
      IN5REC.XITCD = "24";
    else
      if (IN0SM025.IN0SMSEL == "4")
        IN5REC.XITCD = "14";
      else
        converseLib.validationFailed(8); /* error - notify programming*/
        IN0SW01.IN0SWERS = "Y";
      end
    end
  end

  if (IN5REC.XITCD in XITTBL.XITCD)
    IN5REC.XIGCD = XITTBL.XIGCD[sysVar.arrayIndex];
  else
    converseLib.validationFailed(8); /* notify programming*/
    IN0SW01.IN0SWERS = "Y";
  end

  IN5REC.XIRCD = IN0SM025.XIRCD;
  IN5REC.IN5USRID = COMMAREA.CAUSERID;
  IN5REC.IN5TRDDT = IN0SW02.IN0SWCDT;
  IN5REC.IN5TRREF = " ";
  IN5REC.ZZ-CHNG-PGM-ID = "IN0S";
  IN5REC.ZZZSDT = IN0SW02.IN0SWCDT;
  IN5REC.ZZZSTM = IN0SW01.IN0SWHMM;


end // end IN0SS4R

// format audit item record
Function IN0SS4S()

   /* xwhcd & xowcd  formatted from where this is performed*/
   /* xifcd & in6qty formatted from where this is performed*/

  IN6REC.IN5TRDCD = "T";
  IN6REC.IN5TRDOC = IN0SM025.IN7STNBR;
  IN0SW01.IN0SWDOC = IN6REC.IN5TRDOC;
  IN6REC.IN5TRPRT = IN0SW01.IN0SWPRT;
  IN6REC.IN5TRSUB = 0;
  IN6REC.IN5TRDTE = IN0SW02.IN0SWCDT;
  IN6REC.IN5TRTIM = IN0SW01.IN0SWTIM;
  IN6REC.XGPCD = IN0SM025.XGPCD;
  IN6REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN6REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN6REC.XDMCD = IN0SM025.XDMCD;
  IN6REC.XQACD = IN0SM025.XQACD;
  IN6REC.XSACD = IN0SM025.XSACD;
  IN6REC.XSDCD = IN0SM025.XSDCD;
  IN6REC.XPGCD = IN0SM025.XPGCD;
  IN6REC.XUMCD = IN0SM025.XUMCD;
  IN6REC.ZZ-CHNG-PGM-ID = "IN0S";
  IN6REC.ZZZSDT = IN0SW02.IN0SWCDT;
  IN6REC.ZZZSTM = IN0SW01.IN0SWHMM;


end // end IN0SS4S

// calc. request quantities
Function IN0SS4T()

  IN0SWIX1 = 1;
  IN0SWIX3 = 0;

  IN8REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
  IN8REC.ZZZCHGTM = IN0SW01.IN0SWHMM;

  if (IN0SW01.IN0SWITM == "A") /* must add a transfer item record*/
    IN8REC.ZZZCHGCT = 0;
  end

  while (IN0SWIX1 <= 40)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SWIX3 = IN0SWIX3 + 1;
      if (IN0SM025.IN0SMSEL == "1")
        IN0SW01.IN0SWSQQ = IN8REC.IN8SQQ[IN0SWIX1];
        IN0SW01.IN0SWAQY = IN0SM025.IN0SMAQY[IN0SWIX3];
        IN8REC.IN8SQQ[IN0SWIX1] = IN0SW01.IN0SWSQQ + IN0SW01.IN0SWAQY;
        if (IN8REC.IN8SQQ[IN0SWIX1] < 0)
          IN8REC.IN8SQQ[IN0SWIX1] = 0;
        end
      else
        if (IN0SM025.IN0SMSEL == "2")
          IN0SW01.IN0SWSIQ = IN8REC.IN8SIQ[IN0SWIX1];
          IN0SW01.IN0SWAQY = IN0SM025.IN0SMAQY[IN0SWIX3];
          IN8REC.IN8SIQ[IN0SWIX1] = IN0SW01.IN0SWSIQ + IN0SW01.IN0SWAQY;
          if (IN8REC.IN8SIQ[IN0SWIX1] < 0)
            IN8REC.IN8SIQ[IN0SWIX1] = 0;
          end
        else
          if (IN0SM025.IN0SMSEL == "3")
            IN0SW01.IN0SWSSQ = IN8REC.IN8SSQ[IN0SWIX1];
            IN0SW01.IN0SWAQY = IN0SM025.IN0SMAQY[IN0SWIX3];
            IN8REC.IN8SSQ[IN0SWIX1] = IN0SW01.IN0SWSSQ + IN0SW01.IN0SWAQY;
            if (IN8REC.IN8SSQ[IN0SWIX1] < 0)
              IN8REC.IN8SSQ[IN0SWIX1] = 0;
            end
          else
            if (IN0SM025.IN0SMSEL == "4")
              IN0SW01.IN0SWSRQ = IN8REC.IN8SRQ[IN0SWIX1];
              IN0SW01.IN0SWAQY = IN0SM025.IN0SMAQY[IN0SWIX3];
              IN8REC.IN8SRQ[IN0SWIX1] = IN0SW01.IN0SWSRQ + IN0SW01.IN0SWAQY;
              if (IN8REC.IN8SRQ[IN0SWIX1] < 0)
                IN8REC.IN8SRQ[IN0SWIX1] = 0;
              end
            end
          end
        end
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end


end // end IN0SS4T

// format in8rec and add record
Function IN0SS4U()


  IN0SSVV(); /* obtain stk trnsfr line number*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (IN8REC.IN8STLNE > 199) /* only 200 line items allowed*/
      converseLib.validationFailed(129);
      IN0SW01.IN0SWERS = "Y";
      return;
    else
      IN8REC.IN8STLNE = IN8REC.IN8STLNE + 1;
      IN8REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
      IN8REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
      IN8REC.ZZZCHGCT = 0;
      IN0SS11();
    end
  else
    if (SQLCA.VAGen_SQLCODE == -305)
      IN8REC.IN8STLNE = 1;
      IN8REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
      IN8REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
      IN8REC.ZZZCHGCT = 0;
      IN0SS11();
    end
  end


end // end IN0SS4U

// add invnt item rec (in1rec)
Function IN0SS4V()
   /* *********************************/
   /* add a row to inventory item table*/
   /* *********************************/


  call "IO0590" ("A ", SQLCA, IN1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != +0)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(23); /* header table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0590  ";
    TA1REC.TA1LOCAT[4] = "IN0SS4V ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "IN1REC  ";
    TA1REC.TA1TBLVU = "VINITM01";
    TA1TBLKE = IN1REC.IN1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end


end // end IN0SS4V

// update alt inv db (avlrec)
Function IN0SS4W()
   /* ------------------------------------------------*/
   /* *** determine if enough alternate inventory  ****/
   /* ------------------------------------------------*/
  if (IN0SW01.IN0SWERS == "N")
     /*  */
    /* ***************************************************/
    /* *** update 'from' portion of alt invventory (-)****/
    /* ***************************************************/
    if (PG2REC.PG2SCRFL == "B"
     || PG2REC.PG2SCRFL == "I")
      set AVLREC empty;

      AVLREC.XWHCD = IN7REC.IN7STFWH;
      AVLREC.XOWCD = IN7REC.IN7STFOW;
      AVLREC.XDMCD = IN0SM025.XDMCD;
      AVLREC.XQACD = IN0SM025.XQACD;
      AVLREC.XPGCD = IN0SM025.XPGCD;
      AVLREC.SY1STNBR = IN0SM025.SY1STNBR;
      AVLREC.SY2CLRID = IN0SM025.SY2CLRID;
      AVLREC.PC2INSEG = IN0SM025.XSDCD;
      AVLREC.ZZZCHGDT = IN0SW02.IN0SWCDT;
      AVLREC.ZZZCHGTM = IN0SW01.IN0SWHMM;
      AVLREC.XXXUSER = "IN0SS4W";
      TA1REC.TA1PGMNM = "IN0S    ";

      IN0SWIX1 = 1;
      IN0SWIX3 = 0;
      while (IN0SWIX1 <= 40)
        if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
          IN0SWIX3 = IN0SWIX3 + 1;
          if (IN0SM025.IN0SMAQY[IN0SWIX3] == 0)
            AVLREC.AVLADJQT[IN0SWIX1] = 0;
          else
            AVLREC.AVLADJQT[IN0SWIX1] = IN0SM025.IN0SMAQY[IN0SWIX3] * -1;
          end
        end
        IN0SWIX1 = IN0SWIX1 + 1;
      end

      XSAVS10(); /* process alternate inventory*/
      if (AVLREC.AVLRTNCD != 0)
        IN0SS13(); /* process return code*/
      end

      if (IN0SW01.IN0SWERS == "Y")
        return;
      end
    end

    /* ***************************************************/
    /* *** update 'to' portion of alt inventory    (+)****/
    /* ***************************************************/
    if (IN7REC.XISCD == "05")
      set AVLREC empty;

      AVLREC.XWHCD = IN7REC.IN7STTWH;
      AVLREC.XOWCD = IN7REC.IN7STTOW;
      AVLREC.XDMCD = IN0SM025.XDMCD;
      AVLREC.XQACD = IN0SM025.XQACD;
      AVLREC.XPGCD = IN0SM025.XPGCD;
      AVLREC.SY1STNBR = IN0SM025.SY1STNBR;
      AVLREC.SY2CLRID = IN0SM025.SY2CLRID;
      set PC2REC empty; /* ISEG DERIVED FROM ACCOUNT NUMBER*/
      PC2REC.KUCCOID = IN7REC.KUCCOID;
      PC2REC.KUMSTRID = IN7REC.KUMSTRID;
      PC2REC.XNXCD = IN7REC.XNXCD;
      PC2REC.XGPCD = IN7REC.XGPCD;
      IN0SS14();
      if (SQLCA.VAGen_SQLCODE == 0)
        AVLREC.PC2INSEG = PC2REC.PC2INSEG;
      else
        if (SQLCA.VAGen_SQLCODE == +100) /* no DPRODC.VPRDCU01 found*/
          converseLib.validationFailed(171);
          IN0SW01.IN0SWERS = "Y";
          return;
        end
      end
      AVLREC.ZZZCHGDT = IN0SW02.IN0SWCDT;
      AVLREC.ZZZCHGTM = IN0SW01.IN0SWHMM;
      AVLREC.XXXUSER = "IN0SS4W";
      TA1REC.TA1PGMNM = "IN0S    ";

      IN0SWIX1 = 1;
      IN0SWIX3 = 0;
      while (IN0SWIX1 <= 40)
        if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
          IN0SWIX3 = IN0SWIX3 + 1;
          if (IN0SM025.IN0SMAQY[IN0SWIX3] == 0)
            AVLREC.AVLADJQT[IN0SWIX1] = 0;
          else
            AVLREC.AVLADJQT[IN0SWIX1] = IN0SM025.IN0SMAQY[IN0SWIX3];
          end
        end
        IN0SWIX1 = IN0SWIX1 + 1;
      end

      XSAVS10(); /* process alternate inventory*/
      if (AVLREC.AVLRTNCD != 0)
        IN0SS13(); /* process return code*/
      end
    end
  end

   /* --------------------------------------------------------*/
   /* ***                 END OF IN0SS4W                   ****/
   /* --------------------------------------------------------*/
end // end IN0SS4W

// 'ss' call to stk trnfr db (in8
Function IN0SS55()
   /* *******************************/
   /* obtain transfer item row*/
   /* *******************************/


  call "IO0730" ("SS", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "SS      ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0730  ";
    TA1REC.TA1LOCAT[4] = "IN0SS55 ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "IN8REC  ";
    TA1REC.TA1TBLVU = "VTFITM01";
    TA1TBLKE = IN8REC.IN8KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ss55*/
   /* ***********************************/
end // end IN0SS55

// get co. & store names
Function IN0SS5A()


  IN0SW01.IN0SWLOC = "IN0SS5A";
  IN0SW01.IN0SWMAP = "IN0SM030";

  IN0SW01.IN0SWACT = IN0SM030.IN0SMACT;

  set KUCREC empty;

  KUCREC.KUCCOID = IN0SW01.IN0SWCOI;

  IN0SSHH(); /* 's ' call to the company table*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SM030.KUCCONM = KUCREC.KUCCONM;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(45); /* company rec not on db*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM030.IN0SMACT cursor, bold;
      return;
    else
      return;
    end
  end

  set KUMREC empty;

  KUMREC.KUCCOID = IN0SW01.IN0SWCOI;
  KUMREC.KUMSTRID = IN0SW01.IN0SWSTO;

  IN0SSFF(); /* 's ' call to the store table*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SM030.KUMSTSNM = KUMREC.KUMSTSNM;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(46); /* store rec not on db*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM030.IN0SMACT cursor, bold;
      return;
    else
      return;
    end
  end


end // end IN0SS5A

// process sr2rec data
Function IN0SS5B()
   /* *************************************************************/
   /* ***          IN0sS5b - check shiprec for scheduling     ****/
   /* *************************************************************/

  IN0SS33(); /* 'sn' call using io0800 (sr2rec)*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SW01.IN0SWORD = "Y";
    if (SR2REC.PK1PKSCH != SR1REC.PK1PKSCH)
      SR1REC.PK1PKSCH = SR2REC.PK1PKSCH;
      IN0SSWW(); /* 's ' call using io0790 (sr1rec)*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (SR1REC.SR1BTST == "B"
         || SR1REC.SR1BTST == "R")
          converseLib.validationFailed(102); /* transfer cannot be canceled*/
          IN0SW01.IN0SWERS = "Y";
        else
          if (COMMAREA.CADLVL[1] != "Y")
            converseLib.validationFailed(141); /* not authorized when in shiprec*/
            IN0SW01.IN0SWERS = "Y";
          else
            converseLib.validationFailed(143); /* warning - stktf in shiprec*/
          end
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of:  IN0sS5b - check shiprec for scheduling     ****/
   /* ************************************************************/


end // end IN0SS5B

// process 'sn' call w/ in8rec
Function IN0SS5C()
   /* *************************************************************/
   /* ***         in0ss5c - dealocate stktf item               ****/
   /* ***                                                      ****/
   /* *** 03/17/97  Added logic to not add entry to IO1020     ****/
   /* ***           for warehouse 93                           ****/
   /* *************************************************************/

  IN0SS66(); /* 'sn' call io0730 with in8rec*/

  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end

  if (IN0SM030.XIUCD == "02")

    set OPIREC empty;
    OPIREC.XWHCD = IN0SM030.IN7STFWH;
    OPIREC.OP1CUOID = IN0SM030.IN7STNBR; /* stocktransfer number*/
    IN0SW01.IN0SWDOC = OPIREC.OP1CUOID; /* part char work*/
    OPIREC.OP1PARTN = IN0SW01.IN0SWPRT; /* part char*/
    OPIREC.OP2LNINB = IN8REC.IN8STLNE; /* line item*/

    IN0SSYY(); /* delete dorder.voppki01 (opirec)*/

    if (IN0SW01.IN0SWERS == "Y")
      return;
    end
    if (IN0SM030.IN7STFWH != "93")
      set PK2REC empty;

      PK2REC.PK1CUOID = IN0SM030.IN7STNBR;
      IN0SW01.IN0SWDOC = PK2REC.PK1CUOID;
      PK2REC.PK1PRTN = IN0SW01.IN0SWPRT;
      PK2REC.PK1NORID = 0;
      PK2REC.PK1LNINB = IN8REC.IN8STLNE;
      PK2REC.XWHCD = IN0SM030.IN7STFWH;
      PK2REC.PK2SCHNO = SR1REC.PK1PKSCH;
      if (SR1REC.PK1PKSCH > 0)
        PK2REC.PK2SCHFL = "Y";
      else
        PK2REC.PK2SCHFL = "N";
      end
      PK2REC.ZZZSDT = IN0SW02.IN0SWCDT;
      PK2REC.ZZZSTM = IN0SW01.IN0SWHMM;
      PK2REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
      PK2REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
      PK2REC.ZZZCHGCT = 0;

      IN0SS88(); /* 'a ' call io1020 (pk2rec)*/

      if (IN0SW01.IN0SWERS == "Y")
        return;
      end
    end
  end

  IN0SS5D(); /* determine shippability*/

  if (IN0SW01.IN0SWERS == "Y")
    return;
  end

  IN0SS5F(); /* update dinvnt.viadit01*/

   /* *************************************************************/
   /* *** end of: in0ss5c - dealocate stktf item               ****/
   /* *************************************************************/
end // end IN0SS5C

// DETERMINE SHIPPABILITY
Function IN0SS5D()
   /* ** save map and process in case of abend ***/
   /*  */
  IN0SW01.IN0SWLOC = "IN0SS5D ";
  IN0SW01.IN0SWMAP = "IN0SM030";

  set IN2REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS5D ";
  TA1REC.TA1LOC = "DETERMINE SHIPPABILITY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN2REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN2REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN2REC.XWHCD = IN7REC.IN7STFWH;
  IN2REC.XGPCD = IN8REC.XGPCD;
  IN2REC.SY1STNBR = IN8REC.SY1STNBR;
  IN2REC.SY2CLRID = IN8REC.SY2CLRID;
  IN2REC.XDMCD = IN8REC.XDMCD;
  IN2REC.XQACD = IN8REC.XQACD;

  IN0SSKK(); /* 's ' invnt hdr db (in2rec)*/

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(63); /* invntry hdr rec not on db*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8);
      return;
    end
  end

  if (IN2REC.IN2ALCFL == "N")
    IN0SW01.IN0SWSHP = "N";
    return;
  end


  if (IN2REC.IN2ALCFL == "Y")
    IN0SW01.IN0SWSHP = "Y";
  else
    IN0SW01.IN0SWSHP = "N";
  end


end // end IN0SS5D

// UPDT INVNT/AUDIT DB & ALT INVN
Function IN0SS5F()
  IN0SW01.IN0SWLOC = "IN0SS5F "; /* save map and process in*/
  IN0SW01.IN0SWMAP = "IN0SM030"; /* case of abend*/
  IN0SW01.IN0SWTIQ = 0;

   /* --------------------------------------------------------------------*/
   /* GET THE BLANK SCREEN INDICATOR BEFORE UPDATING ALTERNATE INVENTORY*/
   /* --------------------------------------------------------------------*/

  set PG2REC empty;

  if (IN7REC.XISCD == "05"
   || IN7REC.XISCD == "10")
    PG2REC.XGPCD = IN8REC.XGPCD;
    PG2REC.SY1STNBR = IN8REC.SY1STNBR;
    PG2REC.SY2CLRID = IN8REC.SY2CLRID;
    PG2REC.XDMCD = IN8REC.XDMCD;
    TA1REC.TA1PGMNM = "IN0S    ";

    IN0SS-IO3120-S(); /* OPTAIN GPC/STYLE/COLOR/DIM ROW*/

    if (SQLCA.VAGen_SQLCODE != 0)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR - NOTIFY PROGRAMMING*/
      return;
    end
  end
   /* --------------------------------------------------*/
   /* *** update 'from' portion of alt inventory (+) ****/
   /* --------------------------------------------------*/

  if (IN7REC.XISCD != "01")
    if (IN8REC.XQACD == "01")
      if (PG2REC.PG2SCRFL == "B"
       || PG2REC.PG2SCRFL == "I")
        set AVLREC empty;

        AVLREC.XWHCD = IN7REC.IN7STFWH;
        AVLREC.XOWCD = IN7REC.IN7STFOW;
        AVLREC.XDMCD = IN8REC.XDMCD;
        AVLREC.XQACD = IN8REC.XQACD;
        AVLREC.XPGCD = IN8REC.XPGCD;
        AVLREC.PC2INSEG = IN8REC.XSDCD;
        AVLREC.SY1STNBR = IN8REC.SY1STNBR;
        AVLREC.SY2CLRID = IN8REC.SY2CLRID;
        AVLREC.ZZZCHGDT = IN0SW02.IN0SWCDT;
        AVLREC.ZZZCHGTM = IN0SW01.IN0SWHMM;
        AVLREC.XXXUSER = "IN0SS5F";
        TA1REC.TA1PGMNM = "IN0S    ";

        IN0SWIX1 = 1;
        while (IN0SWIX1 <= 40)
          if (IN8REC.IN8SIQ[IN0SWIX1] > 0)
            AVLREC.AVLADJQT[IN0SWIX1] = IN8REC.IN8SIQ[IN0SWIX1];
          else
            AVLREC.AVLADJQT[IN0SWIX1] = 0;
          end
          IN0SWIX1 = IN0SWIX1 + 1;
        end

        XSAVS10(); /* access alternate inventory db*/
        if (AVLREC.AVLRTNCD != 0)
          IN0SS13(); /* process return code*/
        end

        if (IN0SW01.IN0SWERS == "Y")
          return;
        end
      end
    end
  end

   /* --------------------------------------------------*/
   /* *** update 'to' portion of alt inventory   (-) ****/
   /* --------------------------------------------------*/
  if (IN7REC.XISCD == "05")
    if (IN8REC.XQACD == "01")
      if (PG2REC.PG2SCRFL == "B"
       || PG2REC.PG2SCRFL == "I"
       || PG2REC.PG2SCRFL == "U")
        set AVLREC empty;

        AVLREC.XWHCD = IN7REC.IN7STTWH;
        AVLREC.XOWCD = IN7REC.IN7STTOW;
        AVLREC.XDMCD = IN8REC.XDMCD;
        AVLREC.XQACD = IN8REC.XQACD;
        AVLREC.XPGCD = IN8REC.XPGCD;
        AVLREC.SY1STNBR = IN8REC.SY1STNBR;
        AVLREC.SY2CLRID = IN8REC.SY2CLRID;
        set PC2REC empty; /* ISEG DERIVED FROM ACCOUNT NUMBER*/
        PC2REC.KUCCOID = IN7REC.KUCCOID;
        PC2REC.KUMSTRID = IN7REC.KUMSTRID;
        PC2REC.XNXCD = IN7REC.XNXCD;
        PC2REC.XGPCD = IN7REC.XGPCD;
        IN0SS14();
        if (SQLCA.VAGen_SQLCODE == 0)
          AVLREC.PC2INSEG = PC2REC.PC2INSEG;
        else
          if (SQLCA.VAGen_SQLCODE == +100) /* no DPRODC.VPRDCU01 found*/
            converseLib.validationFailed(171);
            IN0SW01.IN0SWERS = "Y";
            return;
          end
        end
        AVLREC.ZZZCHGDT = IN0SW02.IN0SWCDT;
        AVLREC.ZZZCHGTM = IN0SW01.IN0SWHMM;
        AVLREC.XXXUSER = "IN0SS5F";
        TA1REC.TA1PGMNM = "IN0S    ";

        IN0SWIX1 = 1;
        while (IN0SWIX1 <= 40)
          if (IN8REC.IN8SIQ[IN0SWIX1] > 0)
            AVLREC.AVLADJQT[IN0SWIX1] = IN8REC.IN8SIQ[IN0SWIX1] * -1;
          else
            AVLREC.AVLADJQT[IN0SWIX1] = 0;
          end
          IN0SWIX1 = IN0SWIX1 + 1;
        end

        XSAVS10(); /* access alternate inventory db*/
        if (AVLREC.AVLRTNCD != 0)
          IN0SS13(); /* process return code*/
        end

        if (IN0SW01.IN0SWERS == "Y")
          return;
        end
      end
    end
  end

   /* ---------------------------------------------------*/
   /* *** update the inventory and inventory audit db ****/
   /* ---------------------------------------------------*/
  set IN1REC empty;
  set IN6REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS5F ";
  TA1REC.TA1LOC = "UPDT INVNT/AUDIT DB & ALT INVN";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN1REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN1REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN1REC.XWHCD = IN7REC.IN7STFWH;
  IN1REC.XGPCD = IN8REC.XGPCD;
  IN1REC.SY1STNBR = IN8REC.SY1STNBR;
  IN1REC.SY2CLRID = IN8REC.SY2CLRID;
  IN1REC.XDMCD = IN8REC.XDMCD;
  IN1REC.XQACD = IN8REC.XQACD;
  IN1REC.XSACD = IN8REC.XSACD;
  IN1REC.XSDCD = IN8REC.XSDCD;
  IN1REC.XPGCD = IN8REC.XPGCD;
  IN1REC.XUMCD = IN8REC.XUMCD;

  IN0SWIX1 = 1;
  while (IN0SWIX1 <= 40)
    if (IN8REC.IN8SIQ[IN0SWIX1] != 0)
      IN0SW01.IN0SWTIQ = IN0SW01.IN0SWTIQ + IN8REC.IN8SIQ[IN0SWIX1];
      IN1REC.SY5SZID = IN0SWIX1;
      IN0SSUU(); /* select dinvnt.vinitm01(in1rec)*/
      if (SQLCA.VAGen_SQLCODE == 0)
        IN1REC.IN1XFERO = IN1REC.IN1XFERO - IN8REC.IN8SIQ[IN0SWIX1];
        IN1REC.ZZ-CHNG-PGM-ID = "IN0S";
        IN1REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
        IN1REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
        IN0SSTT(); /* update dinvnt.vinitm01(in1rec)*/
        if (SQLCA.VAGen_SQLCODE == 0)
             /* *** set up audit record ****/
          IN6REC.IN6TQT[IN0SWIX1] = IN8REC.IN8SIQ[IN0SWIX1] * -1;
          IN8REC.IN8SIQ[IN0SWIX1] = 0;
        else
          IN0SWIX1 = 99;
        end
      else
        if (SQLCA.VAGen_SQLCODE != +100)
          converseLib.validationFailed(66);
          IN0SW01.IN0SWERS = "Y";
          return;
        end
      end
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWERS == "N"
   && IN0SW01.IN0SWSES != "Y")
    IN0SS5G(); /* format audit header record*/
    IN0SSNN(); /* add audit header record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      IN0SW01.IN0SWAIT = IN0SW01.IN0SWAIT + IN0SW01.IN0SWTIQ;
      IN0SS5H(); /* format audit item record*/
      IN0SSOO(); /* add audit item record*/
    end
  end

end // end IN0SS5F

// format audit hdr record
Function IN0SS5G()

  set IN5REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS5G ";
  TA1REC.TA1LOC = "FORMAT AUDIT HEADER RECORD";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN5REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN5REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN5REC.XWHCD = IN7REC.IN7STFWH;
  IN5REC.IN5TRDCD = "T";
  IN5REC.IN5TRDOC = IN7REC.IN7STNBR;
  IN0SW01.IN0SWDOC = IN5REC.IN5TRDOC;
  IN5REC.IN5TRPRT = IN0SW01.IN0SWPRT;
  IN5REC.IN5TRSUB = 0;
  IN5REC.IN5TRDTE = IN0SW02.IN0SWCDT;
  IN5REC.IN5TRTIM = IN0SW01.IN0SWTIM;

  IN5REC.XITCD = "51";
  IN5REC.XIRCD = IN0SM035.XIRCD;
  if (IN5REC.XITCD in XITTBL.XITCD)
    IN5REC.XIGCD = XITTBL.XIGCD[sysVar.arrayIndex];
  else
    converseLib.validationFailed(8); /* error - notify programming*/
    IN0SW01.IN0SWERS = "Y";
  end

  IN5REC.IN5USRID = COMMAREA.CAUSERID;
  IN5REC.IN5TRDDT = IN0SW02.IN0SWCDT;
  IN5REC.IN5TRREF = " ";
  IN5REC.ZZ-CHNG-PGM-ID = "IN0S";
  IN5REC.ZZZSDT = IN0SW02.IN0SWCDT;
  IN5REC.ZZZSTM = IN0SW01.IN0SWHMM;


end // end IN0SS5G

// format audit item record
Function IN0SS5H()

  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS5H ";
  TA1REC.TA1LOC = "FORMAT AUDIT ITEM RECORD";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN6REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN6REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN6REC.XWHCD = IN7REC.IN7STFWH;
  IN6REC.IN5TRDCD = "T";
  IN6REC.IN5TRDOC = IN7REC.IN7STNBR;
  IN0SW01.IN0SWDOC = IN6REC.IN5TRDOC;
  IN6REC.IN5TRPRT = IN0SW01.IN0SWPRT;
  IN6REC.IN5TRSUB = 0;
  IN6REC.IN5TRDTE = IN0SW02.IN0SWCDT;
  IN6REC.IN5TRTIM = IN0SW01.IN0SWTIM;
  IN6REC.XGPCD = IN8REC.XGPCD;
  IN6REC.SY1STNBR = IN8REC.SY1STNBR;
  IN6REC.SY2CLRID = IN8REC.SY2CLRID;
  IN6REC.XDMCD = IN8REC.XDMCD;
  IN6REC.XQACD = IN8REC.XQACD;
  IN6REC.XSACD = IN8REC.XSACD;
  IN6REC.XSDCD = IN8REC.XSDCD;
  IN6REC.XPGCD = IN8REC.XPGCD;
  IN6REC.XUMCD = IN8REC.XUMCD;

   /* in6tqt formatted from where this is performed*/

  IN6REC.XIFCD = "05";

  IN6REC.ZZ-CHNG-PGM-ID = "IN0S";
  IN6REC.ZZZSDT = IN0SW02.IN0SWCDT;
  IN6REC.ZZZSTM = IN0SW01.IN0SWHMM;


end // end IN0SS5H

// 'sn' call stk trnsfr db (in8
Function IN0SS66()
   /* *******************************/
   /* obtain transfer item row*/
   /* *******************************/


  call "IO0730" ("SN", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "SN      ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0730  ";
      TA1REC.TA1LOCAT[4] = "IN0SS66 ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "IN8REC  ";
      TA1REC.TA1TBLVU = "VTFITM01";
      TA1TBLKE = IN8REC.IN8KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ss66*/
   /* ***********************************/
end // end IN0SS66

// obtain eff. life cycle
Function IN0SS6A()


   /* ************************************************************/
   /* *** find effective life cycle and perform data moves    ****/
   /* ************************************************************/


  if (IN0SW02.IN0SWCDT >= INGREC.SY2CEDT1)
    IN0SM035.XLCCD = INGREC.XLCCD1;
  else
    if (IN0SW02.IN0SWCDT >= INGREC.SY2CEDT2)
      IN0SM035.XLCCD = INGREC.XLCCD2;
    else
      if (IN0SW02.IN0SWCDT >= INGREC.SY2CEDT3)
        IN0SM035.XLCCD = INGREC.XLCCD3;
      else
        IN0SM035.XLCCD = INGREC.XLCCD4;
      end
    end
  end

  if (IN0SM035.XLCCD in XLCTBL.XLCCD)
    IN0SM035.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
  else
    IN0SM035.XLCABRV = " ";
  end


   /* ************************************************************/
   /* *** end of statement group in0ss6a                      ****/
   /* ************************************************************/


end // end IN0SS6A

// calc data portion; move to map
Function IN0SS6B()


   /* **** set up abend areas *****/


  IN0SWIX1 = 1; /* look at each size bucket*/

  while (IN0SWIX1 <= 40)
    IN0SW01.IN0SWSQQ = IN0SW01.IN0SWSQQ + IN8REC.IN8SQQ[IN0SWIX1];
    IN0SW01.IN0SWSIQ = IN0SW01.IN0SWSIQ + IN8REC.IN8SIQ[IN0SWIX1];
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  IN0SM035.IN0SMRQT = IN0SW01.IN0SWSQQ;
  IN0SM035.IN0SMISS = IN0SW01.IN0SWSIQ;


   /* ************************************************************/
   /* *** end of:  IN0sS6b - process key changes              ****/
   /* ************************************************************/
end // end IN0SS6B

// determine shippability
Function IN0SS6D()
   /* ** save map and process in case of abend ***/
  IN0SW01.IN0SWLOC = "IN0SS6D ";
  IN0SW01.IN0SWMAP = "IN0SM035";

  set IN2REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SS6D ";
  TA1REC.TA1LOC = "DETERMINE SHIPPABILITY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN2REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN2REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN2REC.XWHCD = IN7REC.IN7STFWH;
  IN2REC.XGPCD = IN8REC.XGPCD;
  IN2REC.SY1STNBR = IN8REC.SY1STNBR;
  IN2REC.SY2CLRID = IN8REC.SY2CLRID;
  IN2REC.XDMCD = IN8REC.XDMCD;
  IN2REC.XQACD = IN8REC.XQACD;

  IN0SSKK(); /* 's ' invnt hdr db (in2rec)*/

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(63); /* invntry hdr record not on db*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* error - notify programming*/
      return;
    end
  end


  if (IN2REC.IN2ALCFL == "Y")
    IN0SW01.IN0SWSHP = "Y";
  else
    IN0SW01.IN0SWSHP = "N";
  end


end // end IN0SS6D

// update inventory & audit d/b's
Function IN0SS6E()
   /* *************************************************************/
   /* ***         in0ss6e - dealocate stktf item               ****/
   /* ***                                                      ****/
   /* *** 03/17/97  Added logic to not add entry to IO1020     ****/
   /* ***           for warehouse 93                           ****/
   /* *************************************************************/


  if (IN7REC.IN7STFWH != "93")
    set PK2REC empty;

    PK2REC.PK1CUOID = IN7REC.IN7STNBR;
    IN0SW01.IN0SWDOC = PK2REC.PK1CUOID;
    PK2REC.PK1PRTN = IN0SW01.IN0SWPRT;
    PK2REC.PK1NORID = 0;
    PK2REC.PK1LNINB = IN8REC.IN8STLNE;
    PK2REC.XWHCD = IN7REC.IN7STFWH;
    PK2REC.PK2SCHNO = SR1REC.PK1PKSCH;
    if (SR1REC.PK1PKSCH > 0)
      PK2REC.PK2SCHFL = "Y";
    else
      PK2REC.PK2SCHFL = "N";
    end
    PK2REC.ZZZSDT = IN0SW02.IN0SWCDT;
    PK2REC.ZZZSTM = IN0SW01.IN0SWHMM;
    PK2REC.ZZZCHGDT = IN0SW02.IN0SWCDT;
    PK2REC.ZZZCHGTM = IN0SW01.IN0SWHMM;
    PK2REC.ZZZCHGCT = 0;

    IN0SS88(); /* 'a ' call io1020 (pk2rec)*/

    if (IN0SW01.IN0SWERS == "Y")
      return;
    end
  end

  IN0SS6D(); /* determine shippability*/

  if (IN0SW01.IN0SWERS == "Y")
    return;
  end

  IN0SW01.IN0SWAIT = 0;

  IN0SS5F(); /* update dinvnt.viadit01*/

   /* *************************************************************/
   /* *** end of: in0ss5c - dealocate stktf item               ****/
   /* *************************************************************/
end // end IN0SS6E

// process oppk data
Function IN0SS6I()
   /* ************************************************************/
   /* ***         in0ss61 - orders to post item cancel        ****/
   /* ************************************************************/

   /* ** save map and process in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0SS6I ";
  IN0SW01.IN0SWMAP = "IN0SM035";

  set OPHREC empty;
  OPHREC.XWHCD = IN7REC.IN7STFWH;
  OPHREC.OP1CUOID = IN0SM035.IN7STNBR;
  OPHREC.OP1NORID = 0; /* nike-ord-id*/
  IN0SSY3();
  if (SQLCA.VAGen_SQLCODE == 0
   && IN0SW01.IN0SWERS != "Y")

    set OPIREC empty;
    OPIREC.XWHCD = IN7REC.IN7STFWH;
    OPIREC.OP1CUOID = IN0SM035.IN7STNBR;
    IN0SW01.IN0SWDOC = OPHREC.OP1CUOID;
    OPIREC.OP1PARTN = IN0SW01.IN0SWPRT;
    OPIREC.OP2LNINB = IN8REC.IN8STLNE;

    IN0SSY4(); /* select dorder.voppki01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      OPHREC.PK4ITEMS = OPHREC.PK4ITEMS - 1;
      sysVar.arrayIndex = 1;
      while (sysVar.arrayIndex <= 40)
        OPHREC.OP1OTUNT = OPHREC.OP1OTUNT - OPIREC.OP3ALQT[sysVar.arrayIndex];
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    end

    IN0SSYY(); /* delete dorder.voppki01*/
    if (OPHREC.PK4ITEMS > 0)
      IN0SSY2(); /* update dorder.voppkh01*/
    else
      IN0SSY1();
      if (OPHREC.OP1SPINF == "Y" /* if spec inst flag yes*/
       || OPHREC.OP1SPLBF == "Y") /* or ship inst flag yes*/
        set OPGREC empty; /* delete the text rows*/
        OPGREC.XWHCD = IN7REC.IN7STFWH;
        OPGREC.OP1CUOID = IN0SM035.IN7STNBR;
        OPGREC.OP1NORID = 0; /* nike-ord-id*/
        IN0SSF1();
      end
    end

  end

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** end of: in0ss61 - orders to post item cancel        ****/
   /* ************************************************************/
end // end IN0SS6I

// 'cs' call stk trnsfr db (in8re
Function IN0SS77()
   /* *******************************/
   /* obtain transfer item row*/
   /* *******************************/


  call "IO0730" ("CS", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != -501) /* already closed*/
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "CS      ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0730  ";
    TA1REC.TA1LOCAT[4] = "IN0SS77 ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "IN8REC  ";
    TA1REC.TA1TBLVU = "VTFITM01";
    TA1TBLKE = IN8REC.IN8KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ss2e*/
   /* ***********************************/
end // end IN0SS77

// 'a ' call io1020 (pk2rec)
Function IN0SS88()


   /* ***************************************/
   /* add row to picking db (pk2rec)*/
   /* ***************************************/


  call "IO1020" ("A ", SQLCA, PK2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -806)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO1020  ";
      TA1REC.TA1LOCAT[4] = "IN0SS88 ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "PK2REC  ";
      TA1REC.TA1TBLVU = "VDALOC01";
      TA1TBLKE = PK2REC.PK2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* **************************************/
   /* *** end of statment group in0ss88 ****/
   /* **************************************/
end // end IN0SS88

// Call I/O module in9050
Function IN0SS9A()

  call "IN9050" (SQLCA, INZREC) {isNoRefresh = yes, isExternal = yes};
  if (INZREC.INZRTNCD >= 1020
   && INZREC.INZRTNCD <= 1029)
     /* next sentence*/
  else
    if (INZREC.INZRTNCD > 1000)
      IN0SW01.IN0SWERS = "Y";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      if (INZREC.INZRTNCD == 1010)
        converseLib.validationFailed(118);
      end
      if (INZREC.INZRTNCD == 1030)
        converseLib.validationFailed(115);
      end
      if (INZREC.INZRTNCD == 1040)
        converseLib.validationFailed(116);
      end
      if (INZREC.INZRTNCD == 1050)
        converseLib.validationFailed(110);
      end
      if (INZREC.INZRTNCD == 1060)
        converseLib.validationFailed(111);
      end
      if (INZREC.INZRTNCD == 1070)
        converseLib.validationFailed(112);
      end
      if (INZREC.INZRTNCD == 1080)
        converseLib.validationFailed(113);
      end
      if (INZREC.INZRTNCD == 1090)
        converseLib.validationFailed(114);
      end
      if (INZREC.INZRTNCD == 7020)
        converseLib.validationFailed(66);
      end
      if (INZREC.INZRTNCD >= 7050)
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(8); /* severe table error*/
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "IN0S    ";
        TA1REC.TA1LOCAT[1] = "        ";
        TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
        TA1REC.TA1LOCAT[3] = "IN9050  ";
        TA1REC.TA1LOCAT[4] = "IN0SS9A ";
        TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
        TA1REC.TA1DBASE = "INZREC  ";
        TA1REC.TA1TBLVU = "        ";
        TA1TBLKE = INZREC.INZDATA;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        return;
      end
    end
  end


end // end IN0SS9A

// vfy key input has been entered
Function IN0SSA1()


   /* ************************************************************/
   /* *** make sure all required inputs are present           ****/
   /* ************************************************************/


  if (IN0SM010.OP1DSADT == 0)
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM010.OP1DSADT cursor, bold;
  end

  if (IN0SM010.OP1DSBDT == 0)
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM010.OP1DSBDT cursor, bold;
  end

  if (IN0SM010.XPPCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM010.XPPCD cursor, bold;
  end

  if (IN0SM010.IN7STQDT == 0)
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM010.IN7STQDT cursor, bold;
  end

  if (IN0SM010.IN7STFWH == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM010.IN7STFWH cursor, bold;
  end

  if (IN0SM010.XISCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM010.XISCD cursor, bold;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSA1 - missing input edits              ****/
   /* ************************************************************/


end // end IN0SSA1

// missing key input edits
Function IN0SSA2()


   /* ************************************************************/
   /* *** make sure all required inputs are present           ****/
   /* ************************************************************/


  if (IN0SM018.IN7STNBR == 0)
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM018.IN7STNBR cursor, bold;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSA2 - missing input edits              ****/
   /* ************************************************************/


end // end IN0SSA2

// missing key input edit
Function IN0SSA3()


   /* ************************************************************/
   /* *** make sure all required inputs are present           ****/
   /* ************************************************************/


  if (IN0SM020.IN7STNBR == 0)
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM020.IN7STNBR cursor, bold;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSA3 - missing input edits              ****/
   /* ************************************************************/


end // end IN0SSA3

// missing data check
Function IN0SSA4()
   /* ************************************************************/
   /* *** make sure all required inputs are present           ****/
   /* ************************************************************/


  if (IN0SM025.IN0SMSEL == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.IN0SMSEL cursor, bold;
  end

  if (IN0SM025.XPGCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.XPGCD cursor, bold;
  end

  if (IN0SM025.XQACD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.XQACD cursor, bold;
  end

  if (IN0SM025.XDMCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.XDMCD cursor, bold;
  end

  if (IN0SM025.SY2CLRID == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.SY2CLRID cursor, bold;
  end

  if (IN0SM025.SY1STNBR == "      ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.SY1STNBR cursor, bold;
  end

  if (IN0SM025.XGPCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.XGPCD cursor, bold;
  end

  if (IN0SM025.XIRCD == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.XIRCD cursor, bold;
  end

  if (IN0SM025.IN7STNBR == 0)
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.IN7STNBR cursor, bold;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSA4 - missing input edits              ****/
   /* ************************************************************/
end // end IN0SSA4

// edit for required input
Function IN0SSA5()


   /* ************************************************************/
   /* *** make sure all required inputs are present           ****/
   /* ************************************************************/


  if (IN0SM030.XIRCD == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM030.XIRCD cursor, bold;
  else
    if (IN0SM030.XIRCD in XIRTBL.XIRCD)
      IN0SM030.XIRDESC = XIRTBL.XIRDESC[sysVar.arrayIndex];
    else
      IN0SM030.XIRDESC = " ";
      converseLib.validationFailed(11); /* invalid value*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM030.XIRCD cursor, bold;
    end
  end

  if (IN0SM030.IN7STCNM == "                    ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM030.IN7STCNM cursor, bold;
  end

  if (IN0SM030.IN7STNBR == 0)
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM030.IN7STNBR cursor, bold;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSA5 - missing input edits              ****/
   /* ************************************************************/


end // end IN0SSA5

// chk for required inputs
Function IN0SSA6()
   /* ************************************************************/
   /* *** make sure all required inputs are present           ****/
   /* ************************************************************/


  if (IN0SM035.XPGCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM035.XPGCD cursor, bold;
  end

  if (IN0SM035.XQACD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM035.XQACD cursor, bold;
  end

  if (IN0SM035.XDMCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM035.XDMCD cursor, bold;
  end

  if (IN0SM035.SY2CLRID == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM035.SY2CLRID cursor, bold;
  end

  if (IN0SM035.SY1STNBR == "      ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM035.SY1STNBR cursor, bold;
  end

  if (IN0SM035.XGPCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM035.XGPCD cursor, bold;
  end

  if (IN0SM035.XIRCD == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM035.XIRCD cursor, bold;
  end

  if (IN0SM035.IN7STNBR == 0)
    converseLib.validationFailed(6); /* required field*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM035.IN7STNBR cursor, bold;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSA6 - missing input edits              ****/
   /* ************************************************************/
end // end IN0SSA6

// same key edits
Function IN0SSB1()
   /* ************************************************************/
   /* *** check individual key fields for the same value as   ****/
   /* *** the corresponding working storage last saved value: ****/
   /* *** set same key switch (IN0mWSKS) to 'N' if any differ ****/
   /* *** and make sure to set it to 'Y' in case it was 'N'   ****/
   /* *** when this statement group was started.              ****/
   /* ************************************************************/


  IN0SW01.IN0SWSKS = "Y";

  if (IN0SM015.XGPCD != IN0SW01.XGPCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM015.SY1STNBR != IN0SW01.SY1STNBR)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM015.SY2CLRID != IN0SW01.SY2CLRID)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM015.XDMCD != IN0SW01.XDMCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM015.XQACD != IN0SW01.XQACD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM015.XSACD != IN0SW01.XSACD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM015.XSDCD != IN0SW01.XSDCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM015.XPGCD != IN0SW01.XPGCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM015.XUMCD != IN0SW01.XUMCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SW01.IN0SWSKS == "N")
    IN0SS1G(); /* save upper part of screen*/

    set IN0SM015 initial;

    IN0SM015.IN7STNBR = IN0SW01.IN7STNBR;
    IN0SM015.XGPCD = IN0SW01.XGPCD;
    IN0SM015.SY1STNBR = IN0SW01.SY1STNBR;
    IN0SM015.SY2CLRID = IN0SW01.SY2CLRID;
    IN0SM015.XDMCD = IN0SW01.XDMCD;
    IN0SM015.XQACD = IN0SW01.XQACD;
    IN0SM015.XSACD = IN0SW01.XSACD;
    IN0SM015.XSDCD = IN0SW01.XSDCD;
    IN0SM015.XPGCD = IN0SW01.XPGCD;
    IN0SM015.XUMCD = IN0SW01.XUMCD;

    IN0SM015.XXXTITLE = " STOCK TRANSFER ENTRY  (ITEM)  ";
    IN0SM015.XXXCURDT = VGVar.currentShortGregorianDate;
    IN0SM015.XXXRVNBR = IN0SW02.IN0SWRVN;
  end

  IN0SW01.IN0SWFST = "Y"; /* set first time switch*/

   /* ************************************************************/
   /* *** end of:  IN0sSB1 - same key edits                   ****/
   /* ************************************************************/


end // end IN0SSB1

// same key edit
Function IN0SSB2()
   /* ************************************************************/
   /* *** check individual key fields for the same value as   ****/
   /* *** the corresponding working storage last saved value: ****/
   /* *** set same key switch (IN0mWSKS) to 'N' if any differ ****/
   /* *** and make sure to set it to 'Y' in case it was 'N'   ****/
   /* *** when this statement group was started.              ****/
   /* ************************************************************/


  IN0SW01.IN0SWSKS = "Y";

  if (IN0SM018.IN7STNBR != IN0SW01.IN7STNBR)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SW01.IN0SWSKS == "N")
    IN0SSF2(); /* save key*/

    set IN0SM018 initial;

    IN0SM018.IN7STNBR = IN0SW01.IN7STNBR;

    IN0SM018.XXXTITLE = "    STOCK TRANSFER RELEASE     ";
    IN0SM018.XXXCURDT = VGVar.currentShortGregorianDate;
    IN0SM018.XXXRVNBR = IN0SW02.IN0SWRVN;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSB2 - same key edits                   ****/
   /* ************************************************************/


end // end IN0SSB2

// check for key change
Function IN0SSB3()
   /* ************************************************************/
   /* *** check individual key fields for the same value as   ****/
   /* *** the corresponding working storage last saved value: ****/
   /* *** set same key switch (IN0sWSKS) to 'N' if any differ ****/
   /* *** and make sure to set it to 'Y' in case it was 'N'   ****/
   /* *** when this statement group was started.              ****/
   /* ************************************************************/


  IN0SW01.IN0SWSKS = "Y";

  if (IN0SM020.IN7STNBR != IN0SW01.IN7STNBR)
    IN0SW01.IN0SWSKS = "N";
  end


  if (IN0SW01.IN0SWSKS == "N")
    IN0SSF3(); /* save key*/

    set IN0SM020 initial;

    IN0SM020.IN7STNBR = IN0SW01.IN7STNBR;

    IN0SM020.XXXTITLE = "STOCK TRANSFER MAINTENANCE(HEADER)";
    IN0SM020.XXXCURDT = VGVar.currentShortGregorianDate;
    IN0SM020.XXXRVNBR = IN0SW02.IN0SWRVN;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSB3 - same key edits                   ****/
   /* ************************************************************/


end // end IN0SSB3

// check for change in key
Function IN0SSB4()
   /* ************************************************************/
   /* *** check individual key fields for the same value as   ****/
   /* *** the corresponding working storage last saved value: ****/
   /* *** set same key switch (IN0sWSKS) to 'N' if any differ ****/
   /* *** and make sure to set it to 'Y' in case it was 'N'   ****/
   /* *** when this statement group was started.              ****/
   /* ************************************************************/


  IN0SW01.IN0SWSKS = "Y";

  if (IN0SM025.IN7STNBR != IN0SW01.IN7STNBR)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.XIRCD != IN0SW01.XIRCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.XGPCD != IN0SW01.XGPCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.SY1STNBR != IN0SW01.SY1STNBR)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.SY2CLRID != IN0SW01.SY2CLRID)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.XDMCD != IN0SW01.XDMCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.XQACD != IN0SW01.XQACD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.XSDCD != IN0SW01.XSDCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.XSACD != IN0SW01.XSACD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.XPGCD != IN0SW01.XPGCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.XUMCD != IN0SW01.XUMCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM025.IN0SMSEL != IN0SW01.IN0SWSEL)
    IN0SW01.IN0SWSKS = "N";
  end


  if (IN0SW01.IN0SWSKS == "N")
    IN0SSF4(); /* save key*/

    set IN0SM025 initial;

    IN0SM025.IN7STNBR = IN0SW01.IN7STNBR;
    IN0SM025.XIRCD = IN0SW01.XIRCD;
    IN0SM025.XGPCD = IN0SW01.XGPCD;
    IN0SM025.SY1STNBR = IN0SW01.SY1STNBR;
    IN0SM025.SY2CLRID = IN0SW01.SY2CLRID;
    IN0SM025.XDMCD = IN0SW01.XDMCD;
    IN0SM025.XQACD = IN0SW01.XQACD;
    IN0SM025.XSDCD = IN0SW01.XSDCD;
    IN0SM025.XSACD = IN0SW01.XSACD;
    IN0SM025.XPGCD = IN0SW01.XPGCD;
    IN0SM025.XUMCD = IN0SW01.XUMCD;
    IN0SM025.IN0SMSEL = IN0SW01.IN0SWSEL;

    IN0SM025.XXXTITLE = "STOCK TRANSFER MAINTENANCE (ITEM) ";
    IN0SM025.XXXCURDT = VGVar.currentShortGregorianDate;
    IN0SM025.XXXRVNBR = IN0SW02.IN0SWRVN;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSB4 - same key edits                   ****/
   /* ************************************************************/


end // end IN0SSB4

// check for key change
Function IN0SSB5()
   /* ************************************************************/
   /* *** check individual key fields for the same value as   ****/
   /* *** the corresponding working storage last saved value: ****/
   /* *** set same key switch (IN0sWSKS) to 'N' if any differ ****/
   /* *** and make sure to set it to 'Y' in case it was 'N'   ****/
   /* *** when this statement group was started.              ****/
   /* ************************************************************/


  IN0SW01.IN0SWSKS = "Y";

  if (IN0SM030.IN7STNBR != IN0SW01.IN7STNBR)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM030.IN7STCNM != IN0SW01.IN7STCNM)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM030.XIRCD != IN0SW01.XIRCD)
    IN0SW01.IN0SWSKS = "N";
  end


  if (IN0SW01.IN0SWSKS == "N")
    IN0SSF5(); /* save key*/

    set IN0SM030 initial;

    IN0SM030.IN7STNBR = IN0SW01.IN7STNBR;
    IN0SM030.IN7STCNM = IN0SW01.IN7STCNM;
    IN0SM030.XIRCD = IN0SW01.XIRCD;

    IN0SM030.XXXTITLE = "STOCK TRANSFER CANCEL (HEADER)    ";
    IN0SM030.XXXCURDT = VGVar.currentShortGregorianDate;
    IN0SM030.XXXRVNBR = IN0SW02.IN0SWRVN;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSB5 - same key edits                   ****/
   /* ************************************************************/


end // end IN0SSB5

// check for key change
Function IN0SSB6()
   /* ************************************************************/
   /* *** check individual key fields for the same value as   ****/
   /* *** the corresponding working storage last saved value: ****/
   /* *** set same key switch (IN0sWSKS) to 'N' if any differ ****/
   /* *** and make sure to set it to 'Y' in case it was 'N'   ****/
   /* *** when this statement group was started.              ****/
   /* ************************************************************/


  IN0SW01.IN0SWSKS = "Y";

  if (IN0SM035.IN7STNBR != IN0SW01.IN7STNBR)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM035.XIRCD != IN0SW01.XIRCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM035.XGPCD != IN0SW01.XGPCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM035.SY1STNBR != IN0SW01.SY1STNBR)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM035.SY2CLRID != IN0SW01.SY2CLRID)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM035.XDMCD != IN0SW01.XDMCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM035.XQACD != IN0SW01.XQACD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM035.XSDCD != IN0SW01.XSDCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM035.XSACD != IN0SW01.XSACD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM035.XPGCD != IN0SW01.XPGCD)
    IN0SW01.IN0SWSKS = "N";
  end

  if (IN0SM035.XUMCD != IN0SW01.XUMCD)
    IN0SW01.IN0SWSKS = "N";
  end


  if (IN0SW01.IN0SWSKS == "N")
    IN0SSF6(); /* save key*/

    set IN0SM035 initial;

    IN0SM035.IN7STNBR = IN0SW01.IN7STNBR;
    IN0SM035.XIRCD = IN0SW01.XIRCD;
    IN0SM035.XGPCD = IN0SW01.XGPCD;
    IN0SM035.SY1STNBR = IN0SW01.SY1STNBR;
    IN0SM035.SY2CLRID = IN0SW01.SY2CLRID;
    IN0SM035.XDMCD = IN0SW01.XDMCD;
    IN0SM035.XQACD = IN0SW01.XQACD;
    IN0SM035.XSDCD = IN0SW01.XSDCD;
    IN0SM035.XSACD = IN0SW01.XSACD;
    IN0SM035.XPGCD = IN0SW01.XPGCD;
    IN0SM035.XUMCD = IN0SW01.XUMCD;

    IN0SM035.XXXTITLE = "   STOCK TRANSFER CANCEL (PRODUCT)";
    IN0SM035.XXXCURDT = VGVar.currentShortGregorianDate;
    IN0SM035.XXXRVNBR = IN0SW02.IN0SWRVN;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSB4 - same key edits                   ****/
   /* ************************************************************/


end // end IN0SSB6

// field edits
Function IN0SSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & map   ****/
   /* ***       and do not test for modified fields           ****/
   /* ***       re: CSP resets the mdt on every converse      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** date conversion through TA0040 will consider the    ****/
   /* *** theater of operation (inr-entry6-dt) in order to    ****/
   /* *** determine which format the input date is using     ****/
   /* ************************************************************/

   /* **** verify dont ship after *****/

  IN0SW01.IN0SWADT = 0; /* zero out dont ship after work date*/
  if (IN0SM010.OP1DSADT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
    if (IN0SW02.INR-ENTRY6-DT == "A")
      TA2REC.TA2GRGAN = IN0SM010.OP1DSADT; /* us date format*/
    else
      TA2REC01.TA2-GREG-DDMMYY = IN0SM010.OP1DSADT;
                                   /* eur date format*/
    end
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SW01.IN0SWADT = TA2REC.TA2GRGGN; /* HOLD SHIP AFTER DATE YYMMDD*/
      if (TA2REC.TA2GRGGN > IN0SW02.IN0SWCDT)
        /* NEXT SENTENCE*/
      else
        converseLib.validationFailed(154); /* date must be greater than today*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM010.OP1DSADT cursor, bold;
      end
      IN0SW01.IN0SWNUM = IN0SW02.IN0SWCDT + 20000;
                                   /* wk-dt = curr-dt + 2 yrs*/
      if (TA2REC.TA2GRGGN > IN0SW01.IN0SWNUM)
        converseLib.validationFailed(155); /* date is greater than 1 yr in future*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM010.OP1DSADT cursor, bold;
      else
        /* **** determine weekend check*/
        if (TA2REC.TA2DYWK == "SUNDAY"
         || TA2REC.TA2DYWK == "SATURDAY")
          converseLib.validationFailed(156); /* date falls on a weekend*/
          IN0SW01.IN0SWERS = "Y";
          set IN0SM010.OP1DSADT cursor, bold;
        end
      end
    else
      converseLib.validationFailed(18); /* invalid date entered*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM010.OP1DSADT cursor, bold;
    end
  end

   /* **** verify dont ship before *****/

  IN0SW01.IN0SWBDT = 0; /* zero out dont ship before work date*/
  if (IN0SM010.OP1DSBDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
    if (IN0SW02.INR-ENTRY6-DT == "A")
      TA2REC.TA2GRGAN = IN0SM010.OP1DSBDT; /* us date format*/
    else
      TA2REC01.TA2-GREG-DDMMYY = IN0SM010.OP1DSBDT;
                                   /* eur date format*/
    end
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SW01.IN0SWBDT = TA2REC.TA2GRGGN; /* HOLD SHIP BEFORE DATE YYMMDD*/
      /* rnv*/
      if (TA2REC.TA2GRGGN < IN0SW02.IN0SWCDT)
        converseLib.validationFailed(018); /* date must be eq or gt than today*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM010.OP1DSBDT cursor, bold;
      end
      /* rnv*/
      IN0SW01.IN0SWNUM = IN0SW02.IN0SWCDT + 20000;
                                   /* wk-dt = curr-dt + 2 yrs*/
      if (TA2REC.TA2GRGGN > IN0SW01.IN0SWNUM)
        converseLib.validationFailed(155); /* date is greater than 1 yr in future*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM010.OP1DSBDT cursor, bold;
      else
        /* **** determine weekend check*/
        if (TA2REC.TA2DYWK == "SUNDAY"
         || TA2REC.TA2DYWK == "SATURDAY")
          converseLib.validationFailed(156); /* date falls on a weekend*/
          IN0SW01.IN0SWERS = "Y";
          set IN0SM010.OP1DSBDT cursor, bold;
        end
      end
    else
      converseLib.validationFailed(18); /* invalid date entered*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM010.OP1DSBDT cursor, bold;
    end
  end

   /* **** dont ship before must not be > dont ship after date*/

  if (IN0SW01.IN0SWBDT > 0 /* dont ship before is a valid date*/
   && IN0SW01.IN0SWADT > 0) /* dont ship after is a valid date*/
    if (IN0SW01.IN0SWBDT <= IN0SW01.IN0SWADT)
      /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(157); /* ship before cannot be later than ship*/
                                   /* after*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM010.OP1DSBDT cursor, bold;
    end
  end

   /* **** verify pack code if one was entered ********/

  if (IN0SM010.XPACD != "  ")
    if (IN0SM010.XPACD in XPATBL.XPACD)
      if (XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
        IN0SM010.XPAABRV = XPATBL.XPAABRV[sysVar.arrayIndex]; /* XPACD IS OK*/
      else
        converseLib.validationFailed(12); /* status is inactive*/
        set IN0SM010.XPACD cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        IN0SM010.XPAABRV = " ";
      end
    else
      converseLib.validationFailed(11); /* invalid value*/
      set IN0SM010.XPACD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM010.XPAABRV = " ";
    end
  end

   /* **** verify picking code *****/

  if (IN0SM010.XPKCD in XPKTBL.XPKCD)
    if (XPKTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0SM010.XPKABRV = XPKTBL.XPKABRV[sysVar.arrayIndex]; /* XPACD IS OK*/
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0SM010.XPKCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM010.XPKABRV = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM010.XPKCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    IN0SM010.XPKABRV = " ";
  end

   /* **** verify pick priority code *****/


  if (IN0SM010.XPPCD in XPPTBL.XPPCD)
    if (XPPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0SM010.XPPABRV = XPPTBL.XPPABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0SM010.XPPCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM010.XPPABRV = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM010.XPPCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    IN0SM010.XPPABRV = " ";
  end


   /* **** verify requested eta *****/


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
  if (IN0SW02.INR-ENTRY6-DT == "A")
    TA2REC.TA2GRGAN = IN0SM010.IN7STQDT; /* us date format*/
  else
    TA2REC01.TA2-GREG-DDMMYY = IN0SM010.IN7STQDT; /* eur date format*/
  end
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2GRGGN < IN0SW02.IN0SWCDT)
      converseLib.validationFailed(18); /* invalid date entered*/
      set IN0SM010.IN7STQDT cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    else
      if (IN0SM010.IN7STFWH == "93"
       || IN0SM010.IN7STTWH == "93")
        if (TA2REC.TA2GRGGN > IN0SW02.MAX-BASIC-ETA)
          converseLib.validationFailed(18); /* invalid date entered*/
          set IN0SM010.IN7STQDT cursor, bold;
          IN0SW01.IN0SWERS = "Y";
        end
      end
    end
  else
    converseLib.validationFailed(18); /* invalid date entered*/
    set IN0SM010.IN7STQDT cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify from warehouse code *****/


  if (IN0SM010.IN7STFWH in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0SM010.IN0SMFWA = XWHTBL.XWHABRV[sysVar.arrayIndex];
      IN0SW01.IN0SWFOG = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0SM010.IN7STFWH cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM010.IN0SMFWA = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM010.IN7STFWH cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    IN0SM010.IN0SMFWA = " ";
  end


   /* **** verify transfer type code *****/


  if (IN0SM010.XISCD in XISTBL.XISCD)
    if (XISTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0SM010.XISDESC = XISTBL.XISDESC[sysVar.arrayIndex];
      IN0SW01.IN0SWOUT = XISTBL.XISOUT[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0SM010.XISCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM010.XISDESC = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM010.XISCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    IN0SM010.XISDESC = " ";
  end


   /* ************************************************************/
   /* *** end of:  IN0sSC1 - field edits                      ****/
   /* ************************************************************/


end // end IN0SSC1

// key field edits
Function IN0SSC4()
   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & map   ****/
   /* ***       and do not test for modified fields           ****/
   /* ***       re: CSP resets the mdt on every converse      ****/
   /* ************************************************************/



   /* **** verify field selection *****/


  if (IN0SM025.IN0SMSEL == "1")
    IN0SM025.IN0SMFLD[1] = "REQST";
    IN0SM025.IN0SMFLD[2] = "REQST";
    IN0SM025.IN0SMFLD[3] = "REQST";
    IN0SM025.IN0SMFLD[4] = "REQST";
    IN0SM025.IN0SMFLD[5] = "REQST";
  else
    if (IN0SM025.IN0SMSEL == "2")
      IN0SM025.IN0SMFLD[1] = "ISSUE";
      IN0SM025.IN0SMFLD[2] = "ISSUE";
      IN0SM025.IN0SMFLD[3] = "ISSUE";
      IN0SM025.IN0SMFLD[4] = "ISSUE";
      IN0SM025.IN0SMFLD[5] = "ISSUE";
    else
      if (IN0SM025.IN0SMSEL == "3")
        IN0SM025.IN0SMFLD[1] = "SHIP";
        IN0SM025.IN0SMFLD[2] = "SHIP";
        IN0SM025.IN0SMFLD[3] = "SHIP";
        IN0SM025.IN0SMFLD[4] = "SHIP";
        IN0SM025.IN0SMFLD[5] = "SHIP";
      else
        if (IN0SM025.IN0SMSEL == "4")
          IN0SM025.IN0SMFLD[1] = "RECVD";
          IN0SM025.IN0SMFLD[2] = "RECVD";
          IN0SM025.IN0SMFLD[3] = "RECVD";
          IN0SM025.IN0SMFLD[4] = "RECVD";
          IN0SM025.IN0SMFLD[5] = "RECVD";
        else
          converseLib.validationFailed(11); /* invalid value*/
          IN0SW01.IN0SWERS = "Y";
          set IN0SM025.IN0SMSEL cursor, bold;
        end
      end
    end
  end


   /* **** verify unit of measure if entered *****/


  if (IN0SM025.XUMCD != "  ")
    if (IN0SM025.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
      else
        converseLib.validationFailed(12); /* inactive status*/
        set IN0SM025.XUMCD cursor, bold;
        IN0SW01.IN0SWERS = "Y";
      end
    else
      converseLib.validationFailed(11); /* invalid value*/
      set IN0SM025.XUMCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  end


   /* **** verify pkg type code *****/


  if (IN0SM025.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM025.XPGCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM025.XPGCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify spec diff code *****/

  set PC2REC empty;
  PC2REC.XGPCD = IN0SM025.XGPCD;
  PC2REC.PC2INSEG = IN0SM025.XSDCD;
  IN0SSY5();
  if (SQLCA.VAGen_SQLCODE == 0)
    if (PC2REC.XXXSTAT == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM025.XSDCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(11); /* invalid value*/
      set IN0SM025.XSDCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    else
      return;
    end
  end


   /* **** verify quality code *****/


  if (IN0SM025.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM025.XQACD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM025.XQACD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify dimension code *****/


  if (IN0SM025.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM025.XDMCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM025.XDMCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify gpc code *****/


  if (IN0SM025.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM025.XGPCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM025.XGPCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify reason code *****/


  if (IN0SM025.XIRCD in XIRTBL.XIRCD)
    if (XIRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XIRTBL.XIRADJ[sysVar.arrayIndex] == "Y")
        IN0SM025.XIRDESC = XIRTBL.XIRDESC[sysVar.arrayIndex];
      else
        converseLib.validationFailed(11); /* invalid value*/
        set IN0SM025.XIRCD cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        IN0SM025.XIRDESC = " ";
      end
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM025.XIRCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM025.XIRDESC = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM025.XIRCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    IN0SM025.XIRDESC = " ";
  end


   /* ************************************************************/
   /* *** end of:  IN0sSC4 - field edits                      ****/
   /* ************************************************************/
end // end IN0SSC4

// field edits
Function IN0SSC6()
   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & map   ****/
   /* ***       and do not test for modified fields           ****/
   /* ***       re: CSP resets the mdt on every converse      ****/
   /* ************************************************************/


   /* **** verify unit of measure if entered *****/


  if (IN0SM035.XUMCD != "  ")
    if (IN0SM035.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        IN0SM035.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
      else
        converseLib.validationFailed(12); /* inactive status*/
        set IN0SM035.XUMCD cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        IN0SM035.XUMDESC = " ";
      end
    else
      converseLib.validationFailed(11); /* invalid value*/
      set IN0SM035.XUMCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM035.XUMDESC = " ";
    end
  end


   /* **** verify pkg type code *****/


  if (IN0SM035.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0SM035.XPGDESC = XPGTBL.XPGDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM035.XPGCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM035.XPGDESC = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM035.XPGCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.XPGDESC = " ";
  end


   /* **** verify quality code *****/


  if (IN0SM035.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0SM035.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM035.XQACD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM035.XQADESC = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid status*/
    set IN0SM035.XQACD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.XQADESC = " ";
  end


   /* **** verify dimension code *****/


  if (IN0SM035.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM035.XDMCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM035.XDMCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify gpc code *****/


  if (IN0SM035.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM035.XGPCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM035.XGPCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end


   /* **** verify reason code *****/


  if (IN0SM035.XIRCD in XIRTBL.XIRCD)
    if (XIRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XIRTBL.XIRADJ[sysVar.arrayIndex] == "Y")
        IN0SM035.XIRDESC = XIRTBL.XIRDESC[sysVar.arrayIndex];
      else
        converseLib.validationFailed(11); /* inactive status*/
        set IN0SM035.XIRCD cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        IN0SM035.XIRDESC = " ";
      end
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0SM035.XIRCD cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM035.XIRDESC = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM035.XIRCD cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    IN0SM035.XIRDESC = " ";
  end


   /* ************************************************************/
   /* *** end of:  IN0sSC6 - field edits                      ****/
   /* ************************************************************/
end // end IN0SSC6

// 'S ' Call For DCUST.VHNDLX01
Function IN0SSCC()
   /* ************************************/
   /* obtain customer handling exception*/
   /* ************************************/


  call "IO0200" ("S ", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0200  ";
    TA1REC.TA1LOCAT[4] = "IN0SSCC ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VHNDLX01";
    TA1TBLKE = KUFREC.KUFGRP;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end
   /* ***********************************/
   /* *** end of statement group IN0SSCC*/
   /* ***********************************/
end // end IN0SSCC

// key relational edits
Function IN0SSD1()


   /* **** to warehouse verification *****/

  if (IN0SW01.IN0SWOUT == "Y")
    if (IN0SM010.IN7STTWH == "  ")
      IN0SM010.IN0SMTWA = " ";
    else
      converseLib.validationFailed(42); /* trnsfr type req. field= spaces*/
      set IN0SM010.IN7STTWH cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM010.IN0SMTWA = " ";
      return;
    end
  else
    if (IN0SM010.IN7STTWH == "  ")
      converseLib.validationFailed(6); /* required field*/
      set IN0SM010.IN7STTWH cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM010.IN0SMTWA = " ";
      return;
    else
      if (IN0SM010.IN7STTWH in XWHTBL.XWHCD)
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          IN0SM010.IN0SMTWA = XWHTBL.XWHABRV[sysVar.arrayIndex];
          IN0SW01.IN0SWTOG = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
        else
          converseLib.validationFailed(12); /* status is inactive*/
          set IN0SM010.IN7STTWH cursor, bold;
          IN0SW01.IN0SWERS = "Y";
          IN0SM010.IN0SMTWA = " ";
          return;
        end
      else
        converseLib.validationFailed(11); /* invalid value*/
        set IN0SM010.IN7STTWH cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        IN0SM010.IN0SMTWA = " ";
        return;
      end
    end
  end


   /* **** verify from owner group code *****/

  if (IN0SW01.IN0SWFOG == "N")
    if (IN0SM010.IN7STFOW == "  ")
      IN0SM010.IN7STFOW = "00";
      IN0SM010.IN0SMFOA = " ";
    else
      if (IN0SM010.IN7STFOW == "00")
        IN0SM010.IN0SMFOA = " ";
      else
        converseLib.validationFailed(43); /* owner must be zero*/
        set IN0SM010.IN7STFOW cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        IN0SM010.IN0SMFOA = " ";
        return;
      end
    end
  else
    if (IN0SM010.IN7STFOW == "  ")
      converseLib.validationFailed(6); /* required field*/
      set IN0SM010.IN7STFOW cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM010.IN0SMFOA = " ";
      return;
    else
      XOWREC.XWHCD = IN0SM010.IN7STFWH;
      XOWREC.XOWCD = IN0SM010.IN7STFOW;
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          IN0SM010.IN0SMFOA = XOWTBL.XOWABRV[sysVar.arrayIndex];
        else
          converseLib.validationFailed(12); /* status is inactive*/
          set IN0SM010.IN7STFOW cursor, bold;
          IN0SW01.IN0SWERS = "Y";
          IN0SM010.IN0SMFOA = " ";
          return;
        end
      else
        converseLib.validationFailed(11); /* invalid value*/
        set IN0SM010.IN7STFOW cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        IN0SM010.IN0SMFOA = " ";
        return;
      end
    end
  end


   /* **** verify 'to owner group' code *****/


  if (IN0SW01.IN0SWTOG == "N")
    if (IN0SM010.IN7STTOW == "  ")
      IN0SM010.IN7STTOW = "00";
      IN0SM010.IN0SMTOA = " ";
    else
      if (IN0SM010.IN7STTOW == "00")
        IN0SM010.IN0SMTOA = " ";
      else
        converseLib.validationFailed(11); /* invalid value*/
        set IN0SM010.IN7STTOW cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        IN0SM010.IN0SMTOA = " ";
        return;
      end
    end
  else
    if (IN0SM010.IN7STTOW == "  ")
      converseLib.validationFailed(6); /* required field*/
      set IN0SM010.IN7STTOW cursor, bold;
      IN0SW01.IN0SWERS = "Y";
      IN0SM010.IN0SMTOA = " ";
      return;
    else
      if (IN0SM010.IN7STTWH == "  "
       && IN0SM010.XISCD == "05")
        IN0SM010.IN0SMTOA = "N/A";
      else
        XOWREC.XWHCD = IN0SM010.IN7STTWH;
        XOWREC.XOWCD = IN0SM010.IN7STTOW;
        if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            IN0SM010.IN0SMTOA = XOWTBL.XOWABRV[sysVar.arrayIndex];
          else
            converseLib.validationFailed(12); /* status is inactive*/
            set IN0SM010.IN7STTOW cursor, bold;
            IN0SW01.IN0SWERS = "Y";
            IN0SM010.IN0SMTOA = " ";
            return;
          end
        else
          converseLib.validationFailed(11); /* invalid value*/
          set IN0SM010.IN7STTOW cursor, bold;
          IN0SW01.IN0SWERS = "Y";
          IN0SM010.IN0SMTOA = " ";
          return;
        end
      end
    end
  end

   /* **** do we need to get the account number ? *****/

  if (IN0SW01.IN0SWOUT == "N"
   && IN0SW01.IN0SWFST == "Y")
    if (IN0SM010.IN0SMACT == 0)
      IN0SW01.IN0SWFWH = IN0SM010.IN7STFWH;
      IN0SW01.IN0SWTWH = IN0SM010.IN7STTWH;
      if (IN0SW01.IN0SWFTW in XIATBL.XIAWHCDS)
        IN0SW01.IN0SWCOI = XIATBL.KUCCOID[sysVar.arrayIndex];
        IN0SW01.IN0SWSTO = XIATBL.KUMSTRID[sysVar.arrayIndex];
        IN0SW01.IN0SWDPT = XIATBL.XNXCD[sysVar.arrayIndex];
        IN0SW01.IN0SWGPC = XIATBL.XGPCD[sysVar.arrayIndex];
        IN0SM010.IN0SMACT = IN0SW01.IN0SWACT;
      else
        IN0SW01.IN0SWFST = "N"; /* set first time switch*/
        converseLib.validationFailed(159); /* XIATBL ENTRY NOT FOUND*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM010.IN0SMACT cursor, bold;
        return;
      end
    else
      IN0SW01.IN0SWFST = "N"; /* set first time switch*/
      converseLib.validationFailed(47); /* do not enter acct #*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM010.IN0SMACT cursor, bold;
      return;
    end
  else
    if (IN0SM010.IN0SMACT == 0)
      converseLib.validationFailed(6); /* required field*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM010.IN0SMACT cursor, bold;
      return;
    else
      IN0SW01.IN0SWACT = IN0SM010.IN0SMACT;
      if (IN0SW01.IN0SWDPT in XNXTBL.XNXCD)
        if (XNXTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(12); /* status is inactive*/
          set IN0SM010.IN0SMACT cursor, bold;
          IN0SW01.IN0SWERS = "Y";
          return;
        end
      else
        converseLib.validationFailed(11); /* invalid value*/
        set IN0SM010.IN0SMACT cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        return;
      end
      if (IN0SW01.IN0SWGPC in XGPTBL.XGPCD)
        if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(12); /* status is inactive*/
          set IN0SM010.IN0SMACT cursor, bold;
          IN0SW01.IN0SWERS = "Y";
          return;
        end
      else
        converseLib.validationFailed(11); /* invalid value*/
        set IN0SM010.IN0SMACT cursor, bold;
        IN0SW01.IN0SWERS = "Y";
        return;
      end
    end
  end


   /* ************************************************************/
   /* *** end of:  IN0sSd1 - field edits                      ****/
   /* ************************************************************/


end // end IN0SSD1

// relational edits
Function IN0SSD4()


   /* **** verify 'field to adjust' field *****/

  if (IN0SM025.IN0SMSEL != "1")
    if (IN0SM025.IN0SMSEL != "2")
      if (IN0SM025.IN0SMSEL != "3")
        if (IN0SM025.IN0SMSEL != "4")
          converseLib.validationFailed(11); /* invalid value*/
          IN0SW01.IN0SWERS = "Y";
          set IN0SM025.IN0SMSEL cursor, bold;
          return;
        end
      end
    end
  end

  if (IN7REC.XIUCD == "01")
    if (IN0SM025.IN0SMSEL == "3"
     || IN0SM025.IN0SMSEL == "4")
      converseLib.validationFailed(108); /* invalid value*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM025.IN0SMSEL cursor, bold;
      return;
    end
  end

  if (IN7REC.XIUCD == "02")
    if (IN0SM025.IN0SMSEL == "2"
     || IN0SM025.IN0SMSEL == "3"
     || IN0SM025.IN0SMSEL == "4")
      converseLib.validationFailed(108); /* invalid value*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM025.IN0SMSEL cursor, bold;
      return;
    end
  end

  if (IN7REC.XIUCD == "03")
    if (IN0SM025.IN0SMSEL == "4")
      converseLib.validationFailed(108); /* invalid value*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM025.IN0SMSEL cursor, bold;
      return;
    end
  end

  if (IN0SM025.IN0SMSEL == "3"
   || IN0SM025.IN0SMSEL == "4")
    if (COMMAREA.CACLVL[1] == "N")
      converseLib.validationFailed(52); /* not autorized*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM025.IN0SMSEL cursor, bold;
      return;
    end
  end

  if (IN0SM025.IN0SMSEL == "2")
    if (IN7REC.XIUCD == "02")
      if (COMMAREA.CACLVL[1] == "N")
        converseLib.validationFailed(52); /* not autorized*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM025.IN0SMSEL cursor, bold;
        return;
      end
    end
  end

  if (IN0SM025.IN0SMSEL == "1")
    IN0SM025.IN0SMFLD[1] = "REQST";
    IN0SM025.IN0SMFLD[2] = "REQST";
    IN0SM025.IN0SMFLD[3] = "REQST";
    IN0SM025.IN0SMFLD[4] = "REQST";
    IN0SM025.IN0SMFLD[5] = "REQST";
  else
    if (IN0SM025.IN0SMSEL == "2")
      IN0SM025.IN0SMFLD[1] = "ISSUE";
      IN0SM025.IN0SMFLD[2] = "ISSUE";
      IN0SM025.IN0SMFLD[3] = "ISSUE";
      IN0SM025.IN0SMFLD[4] = "ISSUE";
      IN0SM025.IN0SMFLD[5] = "ISSUE";
    else
      if (IN0SM025.IN0SMSEL == "3")
        IN0SM025.IN0SMFLD[1] = "SHIP";
        IN0SM025.IN0SMFLD[2] = "SHIP";
        IN0SM025.IN0SMFLD[3] = "SHIP";
        IN0SM025.IN0SMFLD[4] = "SHIP";
        IN0SM025.IN0SMFLD[5] = "SHIP";
      else
        if (IN0SM025.IN0SMSEL == "4")
          IN0SM025.IN0SMFLD[1] = "RECVD";
          IN0SM025.IN0SMFLD[2] = "RECVD";
          IN0SM025.IN0SMFLD[3] = "RECVD";
          IN0SM025.IN0SMFLD[4] = "RECVD";
          IN0SM025.IN0SMFLD[5] = "RECVD";
        else
          converseLib.validationFailed(11); /* invalid value*/
          IN0SW01.IN0SWERS = "Y";
          set IN0SM025.IN0SMSEL cursor, bold;
        end
      end
    end
  end


end // end IN0SSD4

// 's ' call to tf itm table
Function IN0SSDD()
   /* *******************************/
   /* obtain transfer item row*/
   /* *******************************/


  call "IO0730" ("S ", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0730  ";
      TA1REC.TA1LOCAT[4] = "IN0SSDD ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "IN8REC  ";
      TA1REC.TA1TBLVU = "VTFITM01";
      TA1TBLKE = IN8REC.IN8KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ssdd*/
   /* ***********************************/
end // end IN0SSDD

// obtain table data
Function IN0SSE1()


   /* ** save statement group and map names in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0SSE1 ";
  IN0SW01.IN0SWMAP = "IN0SM010";


  IN0SS1A(); /* *** OBTAIN comp. and store names*/

  if (IN0SW01.IN0SWERS == "Y")
    return;
  end

   /* **** GET CURRENT DATE & TIME *****/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0SW01.IN0SWTIM = TA2REC.TA2TIMEN;
  else
    converseLib.validationFailed(17);
    IN0SW01.IN0SWERS = "Y";
    exit stack;
  end

   /* **** get new transfer number *****/

  set INEREC empty;

  IN0SSGG(); /* 's ' call to the transfer control table*/

  if (SQLCA.VAGen_SQLCODE == 0)
    INEREC.INENXTST = INEREC.INENXTST + 1;
    INEREC.ZZZCHGDT = IN0SW02.IN0SWCDT;
    INEREC.ZZZCHGTM = IN0SW01.IN0SWHMM;
    IN0SSJJ();
    if (SQLCA.VAGen_SQLCODE == 0)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      IN0SM010.IN7STNBR = INEREC.INENXTST;
    else
      return;
    end
  else
    return;
  end


   /* ************************************************************/
   /* *** end of:  IN0sSE1 - obtain table data                ****/
   /* ************************************************************/


end // end IN0SSE1

// obtain table data
Function IN0SSE2()


   /* ** save statement group and map names in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0SSE1 ";
  IN0SW01.IN0SWMAP = "IN0SM018";


  set IN7REC empty;

  IN7REC.IN7STNBR = IN0SM018.IN7STNBR;

  IN0SSEE(); /* 's ' call to stk trnsfr item db (in7rec)*/

  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(39); /* stk trnsfr hdr rec not on db*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
  end

  if (IN7REC.XIUCD == "06")
    converseLib.validationFailed(56); /* reported to profitability*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM018.IN7STNBR cursor, bold;
    return;
  end

  if (IN7REC.XIUCD == "02")
    converseLib.validationFailed(40); /* trnsfr in release status*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM018.IN7STNBR cursor, bold;
    return;
  end

  if (IN7REC.XIUCD != "01")
    converseLib.validationFailed(41); /* trnsfr is not is issue status*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM018.IN7STNBR cursor, bold;
    return;
  end

  IN0SM018.XISCD = IN7REC.XISCD;
  IN0SM018.IN7STFWH = IN7REC.IN7STFWH;
  IN0SM018.IN7STTWH = IN7REC.IN7STTWH;
  IN0SM018.IN7STFOW = IN7REC.IN7STFOW;
  IN0SM018.IN7STTOW = IN7REC.IN7STTOW;
  IN0SW01.IN0SWCOI = IN7REC.KUCCOID;
  IN0SW01.IN0SWSTO = IN7REC.KUMSTRID;
  IN0SW01.IN0SWDPT = IN7REC.XNXCD;
  IN0SW01.IN0SWGPC = IN7REC.XGPCD;
  IN0SM018.IN0SMACT = IN0SW01.IN0SWACT;
  IN0SM018.IN7STRNM = IN7REC.IN7STRNM;
  IN0SM018.IN7STONM = IN7REC.IN7STONM;

   /* *** convert each date ***/

  if (IN7REC.IN7STQDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STQDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM018.IN7STQDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.IN7STETA != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STETA;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM018.IN7STETA = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.IN7STIDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STIDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM018.IN7STIDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.OP1DSADT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.OP1DSADT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM018.OP1DSADT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.OP1DSBDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.OP1DSBDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM018.OP1DSBDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  IN0SM018.XIUCD = IN7REC.XIUCD;
  IN0SM018.XPPCD = IN7REC.XPPCD;
  IN0SM018.XPACD = IN7REC.XPACD;
  IN0SM018.XPKCD = IN7REC.XPKCD;
  IN0SM018.IN7STINS = IN7REC.IN7STINS;
  IN0SM018.IN7SPINS = IN7REC.IN7SPINS;

   /* *** perform corporate table lookups ****/

  if (IN0SM018.IN7STFWH in XWHTBL.XWHCD)
    IN0SM018.IN0SMFWA = XWHTBL.XWHABRV[sysVar.arrayIndex];
  else
    IN0SM018.IN0SMFWA = " ";
  end

  if (IN0SM018.IN7STTWH in XWHTBL.XWHCD)
    IN0SM018.IN0SMTWA = XWHTBL.XWHABRV[sysVar.arrayIndex];
  else
    IN0SM018.IN0SMTWA = " ";
  end

  XOWREC.XWHCD = IN0SM018.IN7STFWH;
  XOWREC.XOWCD = IN0SM018.IN7STFOW;
  if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
    IN0SM018.IN0SMFOA = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
    IN0SM018.IN0SMFOA = " ";
  end

  XOWREC.XWHCD = IN0SM018.IN7STTWH;
  XOWREC.XOWCD = IN0SM018.IN7STTOW;
  if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
    IN0SM018.IN0SMTOA = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
    IN0SM018.IN0SMTOA = " ";
  end

  if (IN0SM018.XISCD in XISTBL.XISCD)
    IN0SM018.XISDESC = XISTBL.XISDESC[sysVar.arrayIndex];
  else
    IN0SM018.XISDESC = " ";
  end

  IN0SS2A(); /* obtain descriptions for account #*/

  if (IN0SM018.XIUCD in XIUTBL.XIUCD)
    IN0SM018.XIUDESC = XIUTBL.XIUDESC[sysVar.arrayIndex];
  else
    IN0SM018.XIUDESC = " ";
  end

  if (IN0SM018.XPPCD in XPPTBL.XPPCD)
    IN0SM018.XPPABRV = XPPTBL.XPPABRV[sysVar.arrayIndex];
  else
    IN0SM018.XPPABRV = " ";
  end

  if (IN0SM018.XPACD in XPATBL.XPACD)
    IN0SM018.XPAABRV = XPATBL.XPAABRV[sysVar.arrayIndex];
  else
    IN0SM018.XPAABRV = " ";
  end


  if (IN0SM018.XPKCD in XPKTBL.XPKCD)
    IN0SM018.XPKABRV = XPKTBL.XPKABRV[sysVar.arrayIndex];
  else
    IN0SM018.XPKABRV = " ";
  end

   /* ************************************************************/
   /* *** end of:  IN0sSE2 - obtain table data                ****/
   /* ************************************************************/


end // end IN0SSE2

// obtain table data
Function IN0SSE3()


   /* ** save statement group and map names in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0SSE3 ";
  IN0SW01.IN0SWMAP = "IN0SM020";


  set IN7REC empty;

  IN7REC.IN7STNBR = IN0SM020.IN7STNBR;

  IN0SSEE(); /* 's ' call to stk trnsfr hdr db*/
                                   /* (in7rec)*/

  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(39); /* stk trnsfr hdr not on db*/
    IN0SW01.IN0SWERS = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
  end


  if (IN7REC.XIUCD == "06")
    converseLib.validationFailed(56); /* reported to profitability*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM020.IN7STNBR cursor, bold;
    return;
  end

  if (IN7REC.XIUCD == "05")
    converseLib.validationFailed(50); /* no maintenance when cancelled*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM020.IN7STNBR cursor, bold;
    return;
  end


   /* **** obtain transfer type desc *****/


  IN0SM020.XISCD = IN7REC.XISCD;
  if (IN0SM020.XISCD in XISTBL.XISCD)
    IN0SM020.XISDESC = XISTBL.XISDESC[sysVar.arrayIndex];
    IN0SW01.IN0SWOUT = XISTBL.XISOUT[sysVar.arrayIndex];
  else
    IN0SM020.XISDESC = " ";
  end


   /* **** obtain from warehouse abbrv *****/


  IN0SM020.IN7STFWH = IN7REC.IN7STFWH;
  if (IN7REC.IN7STFWH in XWHTBL.XWHCD)
    IN0SM020.IN0SMFWA = XWHTBL.XWHABRV[sysVar.arrayIndex];
    IN0SW01.IN0SWOGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
  else
    IN0SM020.IN0SMFWA = " ";
  end


   /* **** obtain to warehouse abbrv *****/


  IN0SM020.IN7STTWH = IN7REC.IN7STTWH;
  if (IN7REC.IN7STTWH in XWHTBL.XWHCD)
    IN0SM020.IN0SMTWA = XWHTBL.XWHABRV[sysVar.arrayIndex];
  else
    IN0SM020.IN0SMTWA = " ";
  end


   /* **** obtain to owner group *****/


  IN0SM020.IN7STTOW = IN7REC.IN7STTOW;
  if (IN0SM020.IN7STTOW == "00")
    IN0SM020.IN0SMTOA = " ";
  else
    XOWREC.XWHCD = IN7REC.IN7STTWH;
    XOWREC.XOWCD = IN7REC.IN7STTOW;
    if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
      IN0SM020.IN0SMTOA = XOWTBL.XOWABRV[sysVar.arrayIndex];
    else
      IN0SM020.IN0SMTOA = " ";
    end
  end


   /* **** obtain from owner group *****/


  IN0SM020.IN7STFOW = IN7REC.IN7STFOW;
  if (IN0SM020.IN7STFOW == "00")
    IN0SM020.IN0SMTOA = " ";
  else
    XOWREC.XWHCD = IN7REC.IN7STFWH;
    XOWREC.XOWCD = IN7REC.IN7STFOW;
    if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
      IN0SM020.IN0SMFOA = XOWTBL.XOWABRV[sysVar.arrayIndex];
    else
      IN0SM020.IN0SMFOA = " ";
    end
  end


   /* **** obtain account number *****/


  IN0SW01.IN0SWCOI = IN7REC.KUCCOID;
  IN0SW01.IN0SWSTO = IN7REC.KUMSTRID;
  IN0SW01.IN0SWDPT = IN7REC.XNXCD;
  IN0SW01.IN0SWGPC = IN7REC.XGPCD;

  IN0SM020.IN0SMACT = IN0SW01.IN0SWACT;

  IN0SS3A(); /* obtain comp. and store names*/

   /* **** obtain requestor name *****/

  IN0SM020.IN7STRNM = IN7REC.IN7STRNM;

   /* **** obtain original xfer number *****/

  IN0SM020.IN7STONM = IN7REC.IN7STONM;

   /* **** obtain transfer status *****/


  IN0SM020.XIUCD = IN7REC.XIUCD;
  if (IN7REC.XIUCD in XIUTBL.XIUCD)
    IN0SM020.XIUDESC = XIUTBL.XIUDESC[sysVar.arrayIndex];
  else
    IN0SM020.XIUDESC = " ";
  end

   /* *** convert each date ***/

  if (IN7REC.IN7STQDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STQDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM020.IN7STQDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

   /* *** convert each date ***/

  if (IN7REC.IN7STETA != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STETA;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      if (IN0SW02.INR-ENTRY6-DT == "A")
        IN0SM020.IN7STETA = TA2REC.TA2GRGAN; /* us date format*/
      else
        IN0SM020.IN7STETA = TA2REC01.TA2-GREG-DDMMYY; /* eur date format*/
      end
    else
      converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.IN7STIDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STIDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM020.IN7STIDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.OP1DSADT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.OP1DSADT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      if (IN0SW02.INR-ENTRY6-DT == "A")
        IN0SM020.OP1DSADT = TA2REC.TA2GRGAN; /* us date format*/
      else
        IN0SM020.OP1DSADT = TA2REC01.TA2-GREG-DDMMYY; /* eur date format*/
      end
    else
      converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.OP1DSBDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.OP1DSBDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      if (IN0SW02.INR-ENTRY6-DT == "A")
        IN0SM020.OP1DSBDT = TA2REC.TA2GRGAN; /* us date format*/
      else
        IN0SM020.OP1DSBDT = TA2REC01.TA2-GREG-DDMMYY; /* eur date format*/
      end
    else
      converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.IN7STLDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STLDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM020.IN7STLDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.IN7STHDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STHDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM020.IN7STHDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.IN7STRDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STRDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM020.IN7STRDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

   /* **** MOVE PICK PRIORITY CODE  *****/

  IN0SM020.XPPCD = IN7REC.XPPCD;
  if (IN7REC.XPPCD in XPPTBL.XPPCD)
    IN0SM020.XPPABRV = XPPTBL.XPPABRV[sysVar.arrayIndex];
  else
    IN0SM020.XPPABRV = " ";
  end

   /* **** MOVE PICKING CODE        *****/

  IN0SM020.XPKCD = IN7REC.XPKCD;
  if (IN7REC.XPKCD in XPKTBL.XPKCD)
    IN0SM020.XPKABRV = XPKTBL.XPKABRV[sysVar.arrayIndex];
  else
    IN0SM020.XPKABRV = " ";
  end

   /* **** MOVE PACKING CODE        *****/

  IN0SM020.XPACD = IN7REC.XPACD;
  if (IN7REC.XPACD in XPATBL.XPACD)
    IN0SM020.XPAABRV = XPATBL.XPAABRV[sysVar.arrayIndex];
  else
    IN0SM020.XPAABRV = " ";
  end

  IN0SM020.TF1CARCD = IN7REC.TF1CARCD;

   /* **** obtain carrier code name *****/

  if (IN0SM020.TF1CARCD != "    ")
    IN0SW01.IN0SWLOC = "IN0SSE3 ";

    set TF1REC empty;

    TF1REC.TF1CARCD = IN0SM020.TF1CARCD;

    IN0SSPP(); /* perform 's ' call to tf1rec*/

    if (SQLCA.VAGen_SQLCODE == 0)
      IN0SM020.TF1ABRV = TF1REC.TF1ABRV;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        IN0SM020.TF1ABRV = " ";
      else
        return;
      end
    end
  else
    IN0SM020.TF1ABRV = " ";
  end

   /* **** perform the rest of the moves *****/

  IN0SM020.TF2PRONO = IN7REC.TF2PRONO;

  IN0SM020.SL1RCRNO = IN7REC.SL1RCRNO;

  IN0SM020.PK1BLLAD = IN7REC.PK1BLLAD;

  IN0SM020.PK1WT = IN7REC.PK1WT;

  IN0SM020.PK1NBCTN = IN7REC.PK1NBCTN;

  IN0SM020.IN7STINS = IN7REC.IN7STINS;

  IN0SM020.IN7SPINS = IN7REC.IN7SPINS;


   /* ************************************************************/
   /* *** end of:  IN0sSE3 - obtain table data                ****/
   /* ************************************************************/


end // end IN0SSE3

// obtain table data
Function IN0SSE4()


   /* **********************************/
   /* *** perform db2 table lookups ****/
   /* **********************************/

   /* **** set up abend areas *****/

  IN0SW01.IN0SWLOC = "IN0SSE4 ";
  IN0SW01.IN0SWMAP = "IN0SM025";


  IN7REC.IN7STNBR = IN0SM025.IN7STNBR;

  IN0SSEE(); /* 's ' call to stk trnsfr hdr db*/
                                   /* (in7rec)*/

  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(39); /* stk trnsfr hdr not on db*/
    set IN0SM025.IN7STNBR cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
  end


  if (IN7REC.XIUCD == "06")
    converseLib.validationFailed(56); /* reported to profitability*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.IN7STNBR cursor, bold;
    return;
  end

  if (IN7REC.XIUCD == "05")
    converseLib.validationFailed(50); /* no maintenance when cancelled*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM025.IN7STNBR cursor, bold;
    return;
  end

  set PG2REC empty;

  if (IN7REC.XISCD == "05"
   || IN7REC.XISCD == "10")
    PG2REC.XGPCD = IN0SM025.XGPCD;
    PG2REC.SY1STNBR = IN0SM025.SY1STNBR;
    PG2REC.SY2CLRID = IN0SM025.SY2CLRID;
    PG2REC.XDMCD = IN0SM025.XDMCD;
    TA1REC.TA1PGMNM = "IN0S    ";

    IN0SS-IO3120-S(); /* OBTAIN GPC/STYLE/COLOR/DIM ROW*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (PG2REC.PG2SCRFL == "B"
       || PG2REC.PG2SCRFL == "U"
       || PG2REC.PG2SCRFL == "I")
            /* NEXT SENTENCE*/
      else
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(170); /* BLANK FINISH IND MUST BE B,U,I*/
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        IN0SW01.IN0SWERS = "Y";
        converseLib.validationFailed(169);
        set IN0SM025.XGPCD cursor, bold;
        return;
      else
        if (SQLCA.VAGen_SQLCODE != 0)
          IN0SW01.IN0SWERS = "Y"; /* ERROR - NOTIFY PROGRAMMING*/
          converseLib.validationFailed(8);
          return;
        end
      end
    end
  end

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
  INGREC.XGP-GPC-CD = IN0SM025.XGPCD;
  INGREC.SY-STY-NBR = IN0SM025.SY1STNBR;
  INGREC.SY-COLR-CD-ID = IN0SM025.SY2CLRID;
  INGREC.XDM-DIM-CD = IN0SM025.XDMCD;

  TA1REC.TA1PGMNM = "IN0SSE4";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020();

  if (INGREC.ING-RETURN-CD > 0000)
    IN0SS-IN8020-ERRS();
    converseLib.validationFailed(13); /* style rec not on db*/
    set IN0SM025.SY1STNBR cursor, bold;
    set IN0SM025.SY2CLRAB cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    return;
  else
    IN0SM025.SY1SSTNM = INGREC.SY1SSTNM;
    IN0SM025.SY2CLRAB = INGREC.SY2CLRAB;
    IN0SS4A(); /* obtain effective life cycle*/
    if (IN0SM025.XUMCD == "  ")
      IN0SM025.XUMCD = INGREC.XUM-UOM-CD;
    end
  end

   /* ** save map and process in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0SSE4 ";
  IN0SW01.IN0SWMAP = "IN0SM025";

  set IN2REC empty;
  set TA1REC empty;
  set TAEREC empty;
  set INRREC empty;

   /* -----------------------------------------------------------*/
   /* Execute XSINS-PROCESS-RULE to identify and move the proper*/
   /* owner group.*/
   /* -----------------------------------------------------------*/

  TA1REC.TA1PGMNM = "IN0SSE4 ";
  TA1REC.TA1LOC = "DETERMINE SHIPPABILITY";
  INRREC.INR-RULE-TYPE = "WHSECODE";
  INRREC02.XWH-WHSE-CD = IN7REC.IN7STFWH;
  INRREC02.INR-SEARCH-FL = "Y";

  XSINS-PROCESS-RULE(); /* CALL IN8000*/

  if (INRREC.INR-RETURN-CODE == 0)
    if (INRREC02.INR-XOW-ALTER-FL[INR-SEARCH-SUB] == "Y")
      IN2REC.XOWCD = INRREC02.XOW-OWN-GRP-CD[INR-SEARCH-SUB];
    else
      IN2REC.XOWCD = IN7REC.IN7STFOW;
    end
  else
    if (INRREC.INR-RETURN-CODE == 1) /* ENTRY NOT FOUND*/
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD = 1";
      TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      return;
    else /* UNEXPECTED ERROR OCCURRED*/
      IN0SW01.IN0SWERS = "Y"; /* TA0020 CALL DONE XSINS-PROCESS-RULE*/
      converseLib.validationFailed(8); /* ERROR, PLEASE NOTIFY PGM'G*/
      return;
    end
  end

  IN2REC.XWHCD = IN7REC.IN7STFWH;
  IN2REC.XGPCD = IN0SM025.XGPCD;
  IN2REC.SY1STNBR = IN0SM025.SY1STNBR;
  IN2REC.SY2CLRID = IN0SM025.SY2CLRID;
  IN2REC.XDMCD = IN0SM025.XDMCD;
  IN2REC.XQACD = IN0SM025.XQACD;

  IN0SSKK(); /* 's ' invnt hdr db (in2rec)*/

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(63); /* invnty hdr rec not on db*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* error - notify programming*/
      return;
    end
  end


   /* ************************************************************/
   /* *** end of:  IN0sSE4 - process key changes              ****/
   /* ************************************************************/
end // end IN0SSE4

// table lookups and edits
Function IN0SSE5()
   /* ************************************************************/
   /* ***          IN0sSE5 - obtain table data                ****/
   /* ************************************************************/

   /* ** save statement group and map names in case of abend ***/

  IN0SW01.IN0SWLOC = "IN0SSE5 ";
  IN0SW01.IN0SWMAP = "IN0SM030";


   /* *** get time for db insert ****/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0SW01.IN0SWTIM = TA2REC.TA2TIMEN;
  else
    converseLib.validationFailed(17); /* internal date error*/
    IN0SW01.IN0SWERS = "Y";
    return;
  end

   /* *** is if too late to process cancellation ? ****/

  if (IN0SM030.IN7STFWH == "02")
    if (IN0SW01.IN0SWTIM > 140000)
      converseLib.validationFailed(103); /* too late for cancellation*/
      IN0SW01.IN0SWERS = "Y";
      return;
    end
  else
    if (IN0SM030.IN7STFWH == "04")
      if (IN0SW01.IN0SWTIM > 150000)
        converseLib.validationFailed(103); /* too late for cancellation*/
        IN0SW01.IN0SWERS = "Y";
        return;
      end
    else
      if (IN0SW01.IN0SWTIM > 170000)
        converseLib.validationFailed(103); /* too late for cancellation*/
        IN0SW01.IN0SWERS = "Y";
        return;
      end
    end
  end

  set IN7REC empty;

  IN7REC.IN7STNBR = IN0SM030.IN7STNBR;

  IN0SSEE(); /* 's ' call to stk trnsfr hdr db (in7rec)*/

  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(39); /* stk trnsfr hdr not on db*/
    IN0SW01.IN0SWERS = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    else
   /* ************************************************************/
   /* *** check warehouse 51 for stock transfer number on     ****/
   /* ***  VMPOLH01; if the stock transfer number is found    ****/
   /* ***  then the cancellation has to be done as a void on  ****/
   /* ***  DCMS and as a cancel in IN0S.                      ****/
   /* ************************************************************/

      if (IN7REC.IN7STFWH == "51")
        IN0SS-ORD-CK-MPOLH(); /* <=== order check VMPOLH01*/

        if (IN0SW01.IN0SWERS == "Y")
          return;
        end
      end

      if (IN7REC.XIUCD == "03" /* shipped*/
       || IN7REC.XIUCD == "04" /* complete*/
       || IN7REC.XIUCD == "05") /* canceled*/
        converseLib.validationFailed(101);
        IN0SW01.IN0SWERS = "Y";
        return;
      end

      if (IN7REC.XIUCD == "06") /* complete with descreptancies*/
        converseLib.validationFailed(056);
        IN0SW01.IN0SWERS = "Y";
        return;
      end
    end
  end


   /* **** obtain transfer type desc *****/

  IN0SM030.XISCD = IN7REC.XISCD;
  if (IN0SM030.XISCD in XISTBL.XISCD)
    IN0SM030.XISDESC = XISTBL.XISDESC[sysVar.arrayIndex];
    IN0SW01.IN0SWOUT = XISTBL.XISOUT[sysVar.arrayIndex];
  else
    IN0SM030.XISDESC = " ";
  end


   /* **** obtain from warehouse abbrv *****/


  IN0SM030.IN7STFWH = IN7REC.IN7STFWH;
  if (IN7REC.IN7STFWH in XWHTBL.XWHCD)
    IN0SM030.IN0SMFWA = XWHTBL.XWHABRV[sysVar.arrayIndex];
    IN0SW01.IN0SWOGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
  else
    IN0SM030.IN0SMFWA = " ";
  end


   /* **** obtain to warehouse abbrv *****/


  IN0SM030.IN7STTWH = IN7REC.IN7STTWH;
  if (IN7REC.IN7STTWH in XWHTBL.XWHCD)
    IN0SM030.IN0SMTWA = XWHTBL.XWHABRV[sysVar.arrayIndex];
  else
    IN0SM030.IN0SMTWA = " ";
  end


   /* **** obtain to owner group *****/


  IN0SM030.IN7STTOW = IN7REC.IN7STTOW;
  XOWREC.XWHCD = IN7REC.IN7STTWH;
  XOWREC.XOWCD = IN7REC.IN7STTOW;
  if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
    IN0SM030.IN0SMTOA = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
    IN0SM030.IN0SMTOA = " ";
  end


   /* **** obtain from owner group *****/


  IN0SM030.IN7STFOW = IN7REC.IN7STFOW;
  XOWREC.XWHCD = IN7REC.IN7STFWH;
  XOWREC.XOWCD = IN7REC.IN7STFOW;
  if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
    IN0SM030.IN0SMFOA = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
    IN0SM030.IN0SMFOA = " ";
  end


   /* **** obtain account number *****/


  IN0SW01.IN0SWCOI = IN7REC.KUCCOID;
  IN0SW01.IN0SWSTO = IN7REC.KUMSTRID;
  IN0SW01.IN0SWDPT = IN7REC.XNXCD;
  IN0SW01.IN0SWGPC = IN7REC.XGPCD;

  IN0SM030.IN0SMACT = IN0SW01.IN0SWACT;

  IN0SS5A(); /* obtain comp. and store names*/

   /* **** obtain requestor name *****/

  IN0SM030.IN7STRNM = IN7REC.IN7STRNM;

   /* **** obtain original xfer number *****/

  IN0SM030.IN7STONM = IN7REC.IN7STONM;

   /* **** obtain transfer status *****/


  IN0SM030.XIUCD = IN7REC.XIUCD;
  if (IN7REC.XIUCD in XIUTBL.XIUCD)
    IN0SM030.XIUDESC = XIUTBL.XIUDESC[sysVar.arrayIndex];
  else
    IN0SM030.XIUDESC = " ";
  end

   /* *** convert each date ***/

  if (IN7REC.IN7STQDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STQDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM030.IN7STQDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.IN7STETA != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STETA;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM030.IN7STETA = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.IN7STIDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STIDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM030.IN7STIDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.OP1DSADT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.OP1DSADT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM030.OP1DSADT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.OP1DSBDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.OP1DSBDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM030.OP1DSBDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  if (IN7REC.IN7STLDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = IN7REC.IN7STLDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SM030.IN7STLDT = TA2REC.TA2GRGEN;
    else
      converseLib.validationFailed(17); /* internal date error - contact sys. support*/
      IN0SW01.IN0SWERS = "Y";
      exit stack;
    end
  end

  IN0SM030.XPPCD = IN7REC.XPPCD;
  if (IN7REC.XPPCD in XPPTBL.XPPCD)
    IN0SM030.XPPABRV = XPPTBL.XPPABRV[sysVar.arrayIndex];
  else
    IN0SM030.XPPABRV = " ";
  end
   /* MOVE PICKING CODE TO SCREEN*/
  IN0SM030.XPKCD = IN7REC.XPKCD;
  if (IN7REC.XPKCD in XPKTBL.XPKCD)
    IN0SM030.XPKABRV = XPKTBL.XPKABRV[sysVar.arrayIndex];
  else
    IN0SM030.XPKABRV = " ";
  end

   /* MOVE PACKING CODE TO SCREEN*/
  IN0SM030.XPACD = IN7REC.XPACD;
  if (IN7REC.XPACD in XPATBL.XPACD)
    IN0SM030.XPAABRV = XPATBL.XPAABRV[sysVar.arrayIndex];
  else
    IN0SM030.XPAABRV = " ";
  end

  IN0SM030.TF1CARCD = IN7REC.TF1CARCD;

   /* **** obtain carrier code name *****/

  IN0SW01.IN0SWLOC = "IN0SSE5 ";

  set TF1REC empty;

  TF1REC.TF1CARCD = IN0SM030.TF1CARCD;

  IN0SSPP(); /* perform 's ' call to tf1rec*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SM030.TF1ABRV = TF1REC.TF1ABRV;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0SM030.TF1ABRV = " ";
    else
      return;
    end
  end

  IN0SM030.TF2PRONO = IN7REC.TF2PRONO;

  set SR1REC empty;
  set SR2REC empty;

  SR2REC.XWHCD = IN0SM030.IN7STFWH;
  SR1REC.XWHCD = IN0SM030.IN7STFWH;
  SR2REC.PK1PKSCH = -1;
  SR2REC.OP1CUOID = IN0SM030.IN7STNBR;
  IN0SSES(); /* check shiprec for schedule*/

   /* ************ check to see if picking running ***************/
   /* * CANCEL FOR SAME/RUSH/?? NOT ALLOWED if PICKING IS RUNNING*/
  if (IN7REC.XPPCD == "10"
   || IN7REC.XPPCD == "20")
    IN0SSE7();
    if (IN0SW01.IN0SWERS == "Y")
      return;
    end
  end

   /* ************************************************************/
   /* *** end of:  IN0sSE5 - obtain table data                ****/
   /* ************************************************************/
end // end IN0SSE5

// obtain table data and edit
Function IN0SSE6()
   /* ************************************************************/
   /* ***          IN0sSE6 - process key changes              ****/
   /* ************************************************************/

   /* *** perform db2 table lookups ****/

   /* **** set up abend areas *****/

  IN0SW01.IN0SWLOC = "IN0SSE6 ";
  IN0SW01.IN0SWMAP = "IN0SM035";


   /* *** get time for db insert ****/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    IN0SW01.IN0SWTIM = TA2REC.TA2TIMEN;
  else
    converseLib.validationFailed(17); /* internal date error*/
    IN0SW01.IN0SWERS = "Y";
    return;
  end

   /* *** is if too late to process cancellation ? ****/

  if (IN7REC.IN7STFWH == "02")
    if (IN0SW01.IN0SWTIM > 140000)
      converseLib.validationFailed(103); /* too late for cancellation*/
      IN0SW01.IN0SWERS = "Y";
      return;
    end
  else
    if (IN7REC.IN7STFWH == "04")
      if (IN0SW01.IN0SWTIM > 150000)
        converseLib.validationFailed(103); /* too late for cancellation*/
        IN0SW01.IN0SWERS = "Y";
        return;
      end
    else
      if (IN0SW01.IN0SWTIM > 170000)
        converseLib.validationFailed(103); /* too late for cancellation*/
        IN0SW01.IN0SWERS = "Y";
        return;
      end
    end
  end


  IN7REC.IN7STNBR = IN0SM035.IN7STNBR;
  IN0SSEE(); /* 's ' call to stk trnsfr hdr db (in7rec)*/
  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(39); /* stk trnsfr hdr not on db*/
    set IN0SM035.IN7STNBR cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    else
  /* *********************************************************/
  /* Check warehouse 51 for stock xfer number on VMPOLH01 **/
  /* If it is found then the cancellation has to be done  **/
  /* on DCMS and not on IN0S                              **/
      if (IN7REC.IN7STFWH == "51")
        IN0SS-ITM-CK-MPOLH(); /* Item check VMPOLH01*/
        if (IN0SW01.IN0SWERS == "Y")
          set IN0SM035.IN7STNBR cursor, bold;
          return;
        end
      end
  /* **/
  /* *********************************************************/
      if (IN7REC.XIUCD != "01"
       && IN7REC.XIUCD != "02")
        converseLib.validationFailed(102); /* transfer cannot be cancelled*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM035.IN7STNBR cursor, bold;
        return;
      else
        if (IN7REC.XIUCD == "03" /* shipped*/
         || IN7REC.XIUCD == "04" /* complete*/
         || IN7REC.XIUCD == "05") /* canceled*/
          converseLib.validationFailed(101);
          IN0SW01.IN0SWERS = "Y";
          return;
        else
          if (IN7REC.XIUCD == "06") /* complete with descreptancies*/
            converseLib.validationFailed(056);
            IN0SW01.IN0SWERS = "Y";
            return;
          end
        end
      end
    end
  end

   /* ************ check to see if picking running ***************/
   /* * CANCEL FOR SAMEDAY NOT ALLOWED WHILE PICKING IS RUNNING **/

  if (IN7REC.XPPCD == "  "
   || IN7REC.XPPCD == "10"
   || IN7REC.XPPCD == "20")
    IN0SSE7();
    if (IN0SW01.IN0SWERS == "Y")
      return;
    end
  end


   /* ***** verify that product does exist ******/

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
  INGREC.XGP-GPC-CD = IN0SM035.XGPCD;
  INGREC.SY-STY-NBR = IN0SM035.SY1STNBR;
  INGREC.SY-COLR-CD-ID = IN0SM035.SY2CLRID;
  INGREC.XDM-DIM-CD = IN0SM035.XDMCD;

  TA1REC.TA1PGMNM = "IN0SSE6";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020();

  if (INGREC.ING-RETURN-CD > 0000)
    IN0SS-IN8020-ERRS();
    converseLib.validationFailed(13); /* style record not on db*/
    set IN0SM035.SY1STNBR cursor, bold;
    set IN0SM035.SY2CLRAB cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    return;
  else
    IN0SM035.SY1SSTNM = INGREC.SY1SSTNM;
    IN0SM035.SY2CLRAB = INGREC.SY2CLRAB;
    IN0SS6A(); /* obtain effective life cycle*/
    if (IN0SM035.XUMCD == "  ")
      IN0SM035.XUMCD = INGREC.XUM-UOM-CD;
    end
  end


   /* make sure the stktf itm exists and has correct status*/

  set IN8REC empty;
  IN8REC.IN7STNBR = IN0SM035.IN7STNBR;
  IN8REC.XGPCD = IN0SM035.XGPCD;
  IN8REC.SY1STNBR = IN0SM035.SY1STNBR;
  IN8REC.SY2CLRID = IN0SM035.SY2CLRID;
  IN8REC.XDMCD = IN0SM035.XDMCD;
  IN8REC.XQACD = IN0SM035.XQACD;
  IN8REC.XSDCD = IN0SM035.XSDCD;
  IN8REC.XSACD = IN0SM035.XSACD;
  IN8REC.XPGCD = IN0SM035.XPGCD;
  IN8REC.XUMCD = IN0SM035.XUMCD;
  IN0SSDD(); /* 's ' call io0730 using in8rec*/
  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(57); /* stk trnsfr itm record not on db*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM035.XGPCD cursor, bold;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      IN0SS6B(); /* calc. data portion & move to map*/
    else
      return;
    end
  end

   /* determine if in shiprec and ok to cancel*/

  set SR1REC empty;
  set SR2REC empty;
  SR2REC.XWHCD = IN7REC.IN7STFWH;
  SR1REC.XWHCD = IN7REC.IN7STFWH;
  SR2REC.OP1CUOID = IN0SM035.IN7STNBR;
  SR2REC.PK1PKSCH = -1;
  IN0SSES(); /* check shiprec for schedule*/


   /* ************************************************************/
   /* *** end of:  IN0sSE6 - process key changes              ****/
   /* ************************************************************/
end // end IN0SSE6

// get pk & sr pgm start/end time
Function IN0SSE7()
   /* ************ check to see if picking running ***************/
   /* * CANCEL FOR SAMEDAY NOT ALLOWED WHILE PICKING IS RUNNING **/


  set PWHREC empty;
  PWHREC.XWHCD = IN7REC.IN7STFWH;
  PWHREC.XXXPGMNO = "PK121S"; /* sameday run*/
  IN0SSE8(); /* get dpick.vpkpgm01*/
  if (PWHREC.XXXCMTCT == 1)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(142); /* picking running no cancel for 5 min*/
    return;
  end

  set PWHREC empty;
  PWHREC.XWHCD = IN7REC.IN7STFWH;
  PWHREC.XXXPGMNO = "PK121R"; /* rush run*/
  IN0SSE8(); /* get dpick.vpkpgm01*/

  if (PWHREC.XXXCMTCT == 1)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(142); /* picking running no cancel for 5 min*/
    return;
  end

   /* ************************************************************/
   /* *** end of:  IN0sSE7 - obtain vxxpgm01 data             ****/
   /* ************************************************************/
end // end IN0SSE7

// select dpick.vpkpgm01
Function IN0SSE8()
   /* *******************************/
    /* obtain dpick.vpkpgm01 row*/
   /* *******************************/

  call "IO4240" ("S ", SQLCA, PWHREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(999); /* table busy error*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO4240  ";
      TA1REC.TA1LOCAT[4] = "IN0SSE8 ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "DPICK   ";
      TA1REC.TA1TBLVU = "VPKPGM01";
      TA1TBLKE = PWHREC.PWHKEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0sse8*/
   /* ***********************************/
end // end IN0SSE8

// 's ' call to trnsfr hdr db
Function IN0SSEE()
   /* *******************************/
   /* obtain transfer header row*/
   /* *******************************/


  call "IO0720" ("S ", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0720  ";
      TA1REC.TA1LOCAT[4] = "IN0SSEE ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "IN7REC  ";
      TA1REC.TA1TBLVU = "VTFHDR01";
      TA1TBLKE = IN7REC.IN7KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ssee*/
   /* ***********************************/
end // end IN0SSEE

// check to see if in shiprec
Function IN0SSES()
   /* ------------- in0sses - check shiprec --------------------*/

  IN0SSXX(); /* 'ss' call using io0800 (sr2rec)*/

  if (SQLCA.VAGen_SQLCODE == 0)
    IN0SW01.IN0SWORD = "N";
    while (SQLCA.VAGen_SQLCODE == 0
     && IN0SW01.IN0SWERS == "N")
      IN0SS5B(); /* 'sn' call using io0800 (sr2rec)*/
    end
  else
    return;
  end

  IN0SSZZ(); /* 'cs' call using io0800 (sr2rec)*/


   /* ************************************************************/
   /* *** end of:  IN0sSEs - check shiprec for scheduling     ****/
   /* ************************************************************/


end // end IN0SSES

// delete dorder.voppkt01(opgrec)
Function IN0SSF1()
   /* *****************************/
   /* delete dorder.voppkt01 row*/
   /* *****************************/

  OPGREC.OP4TRTYP = "*"; /* for all record types*/
  OPGREC.OP4TRSEQ = -1; /* for all record seqs*/

  call "IO1670" ("D ", SQLCA, OPGREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "D       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO1670  ";
    TA1REC.TA1LOCAT[4] = "IN0SSF1 ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VOPPKT01";
    TA1TBLKE = "   ";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ssf1*/
   /* ***********************************/
end // end IN0SSF1

// save current key values
Function IN0SSF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0SW01.IN7STNBR = IN0SM018.IN7STNBR;

   /* ************************************************************/
   /* *** end of:  IN0sSF2 - save current key value(s)        ****/
   /* ************************************************************/


end // end IN0SSF2

// save current key value
Function IN0SSF3()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0SW01.IN7STNBR = IN0SM020.IN7STNBR;

   /* ************************************************************/
   /* *** end of:  IN0sSF3 - save current key value(s)        ****/
   /* ************************************************************/


end // end IN0SSF3

// save key fields
Function IN0SSF4()
   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/


  IN0SW01.IN7STNBR = IN0SM025.IN7STNBR;
  IN0SW01.XIRCD = IN0SM025.XIRCD;
  IN0SW01.XGPCD = IN0SM025.XGPCD;
  IN0SW01.SY1STNBR = IN0SM025.SY1STNBR;
  IN0SW01.SY2CLRID = IN0SM025.SY2CLRID;
  IN0SW01.XDMCD = IN0SM025.XDMCD;
  IN0SW01.XQACD = IN0SM025.XQACD;
  IN0SW01.XSACD = IN0SM025.XSACD;
  IN0SW01.XSDCD = IN0SM025.XSDCD;
  IN0SW01.XPGCD = IN0SM025.XPGCD;
  IN0SW01.XUMCD = IN0SM025.XUMCD;
  IN0SW01.IN0SWSEL = IN0SM025.IN0SMSEL;


   /* ************************************************************/
   /* *** end of:  IN0sSF4 - save current key value(s)        ****/
   /* ************************************************************/


end // end IN0SSF4

// save current key values
Function IN0SSF5()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0SW01.IN7STNBR = IN0SM030.IN7STNBR;
  IN0SW01.IN7STCNM = IN0SM030.IN7STCNM;
  IN0SW01.XIRCD = IN0SM030.XIRCD;

   /* ************************************************************/
   /* *** end of:  IN0sSF5 - save current key value(s)        ****/
   /* ************************************************************/


end // end IN0SSF5

// save current keys
Function IN0SSF6()
   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/


  IN0SW01.IN7STNBR = IN0SM035.IN7STNBR;
  IN0SW01.XIRCD = IN0SM035.XIRCD;
  IN0SW01.XGPCD = IN0SM035.XGPCD;
  IN0SW01.SY1STNBR = IN0SM035.SY1STNBR;
  IN0SW01.SY2CLRID = IN0SM035.SY2CLRID;
  IN0SW01.XDMCD = IN0SM035.XDMCD;
  IN0SW01.XQACD = IN0SM035.XQACD;
  IN0SW01.XSACD = IN0SM035.XSACD;
  IN0SW01.XSDCD = IN0SM035.XSDCD;
  IN0SW01.XPGCD = IN0SM035.XPGCD;
  IN0SW01.XUMCD = IN0SM035.XUMCD;


   /* ************************************************************/
   /* *** end of:  IN0sSF6 - save current key value(s)        ****/
   /* ************************************************************/


end // end IN0SSF6

// 's ' call to store table
Function IN0SSFF()
   /* *******************************/
   /* obtain store row*/
   /* *******************************/


  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0340  ";
      TA1REC.TA1LOCAT[4] = "IN0SSFF ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "KUMREC  ";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1TBLKE = KUMREC.KUMGRP;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ssff*/
   /* ***********************************/
end // end IN0SSFF

// 's ' call to invt. control db
Function IN0SSGG()
   /* *************************************************/
   /* obtain inventory control row for transfer number*/
   /* *************************************************/


  call "IO0810" ("S ", SQLCA, INEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0810  ";
    TA1REC.TA1LOCAT[4] = "IN0SSGG ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "INEREC  ";
    TA1REC.TA1TBLVU = "VINCTL01";
    TA1TBLKE = INEREC.INEDATA;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ssgg*/
   /* ***********************************/
end // end IN0SSGG

// 's ' call to company table
Function IN0SSHH()
   /* *******************************/
   /* obtain company row*/
   /* *******************************/


  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0240  ";
      TA1REC.TA1LOCAT[4] = "IN0SSHH ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "KUCREC  ";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1TBLKE = KUCREC.KUCGRP;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0sshh*/
   /* ***********************************/
end // end IN0SSHH

// 'u1' call to invt cntl db
Function IN0SSJJ()
   /* *************************************************/
   /* update inventory control row for transfer number*/
   /* *************************************************/


  call "IO0810" ("U1", SQLCA, INEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "U1      ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0810  ";
    TA1REC.TA1LOCAT[4] = "IN0SSJJ ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "INEREC  ";
    TA1REC.TA1TBLVU = "VINCTL01";
    TA1TBLKE = INEREC.INEDATA;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ssjj*/
   /* ***********************************/
end // end IN0SSJJ

// 's ' call for invtry hdr rec
Function IN0SSKK()
   /* *****************************/
   /* obtain inventory header row*/
   /* *****************************/


  call "IO0580" ("S ", SQLCA, IN2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0580  ";
    TA1REC.TA1LOCAT[4] = "IN0SSKK ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "IN2REC  ";
    TA1REC.TA1TBLVU = "VINHDR01";
    TA1TBLKE = IN2REC.IN2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0sskk*/
   /* ***********************************/
end // end IN0SSKK

// insert dinvnt.viadhd01
Function IN0SSNN()


   /* ****************************************/
   /* add row to audit header table (in5rec)*/
   /* ****************************************/


  call "IO0760" ("A ", SQLCA, IN5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -806)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0760  ";
      TA1REC.TA1LOCAT[4] = "IN0SSNN ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "IN5REC  ";
      TA1REC.TA1TBLVU = "VIAHDR01";
      TA1TBLKE = IN5REC.IN5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* **************************************/
   /* *** end of statment group in0ssnn ****/
   /* **************************************/
end // end IN0SSNN

// edit data field
Function IN0SSO2()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & map   ****/
   /* ***       and do not test for modified fields           ****/
   /* ***       re: CSP resets the mdt on every converse      ****/
   /* ************************************************************/


  if (IN0SM018.IN0SMREL != "Y"
   && IN0SM018.IN0SMREL != "N")
    converseLib.validationFailed(11); /* invalid value*/
    set IN0SM018.IN0SMREL cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end

   /* ************************************************************/
   /* *** end of:  IN0sso2 - data field edits                 ****/
   /* ************************************************************/


end // end IN0SSO2

// data field edits
Function IN0SSO3()

   /* **** VERIFY PACK CODE *****/

  if (IN0SM020.XPACD == "  ") /* VALID IF BLANK*/
     /* NEXT SENTENCE*/
  else
    if (IN0SM020.XPACD in XPATBL.XPACD)
      if (XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
        IN0SM020.XPAABRV = XPATBL.XPAABRV[sysVar.arrayIndex];
      else
        converseLib.validationFailed(12); /* inactive status*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM020.XPACD cursor, bold;
      end
    else
      converseLib.validationFailed(11); /* invalid value*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.XPACD cursor, bold;
    end
  end

   /* **** VERIFY PICK CODE *****/

  if (IN0SM020.XPKCD in XPKTBL.XPKCD)
    if (XPKTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0SM020.XPKABRV = XPKTBL.XPKABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* inactive status*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.XPKCD cursor, bold;
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM020.XPKCD cursor, bold;
  end

   /* **** verify dont ship after *****/

  IN0SW01.IN0SWADT = 0; /* zero out dont ship after work date*/
  if (IN0SM020.OP1DSADT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
    if (IN0SW02.INR-ENTRY6-DT == "A")
      TA2REC.TA2GRGAN = IN0SM020.OP1DSADT; /* us date format*/
    else
      TA2REC01.TA2-GREG-DDMMYY = IN0SM020.OP1DSADT;
                                   /* eur date format*/
    end
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SW01.IN0SWADT = TA2REC.TA2GRGGN; /* HOLD SHIP AFTER DATE YYMMDD*/
      if (TA2REC.TA2GRGGN > IN0SW02.IN0SWCDT)
        /* NEXT SENTENCE*/
      else
        converseLib.validationFailed(154); /* date must be greater than today*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM020.OP1DSADT cursor, bold;
      end
      IN0SW01.IN0SWNUM = IN0SW02.IN0SWCDT + 20000;
                                   /* wk-dt = curr-dt + 2 yrs*/
      if (TA2REC.TA2GRGGN > IN0SW01.IN0SWNUM)
        converseLib.validationFailed(155); /* date is greater than 1 yr in future*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM020.OP1DSADT cursor, bold;
      else
        /* **** determine weekend check*/
        if (TA2REC.TA2DYWK == "SUNDAY"
         || TA2REC.TA2DYWK == "SATURDAY")
          converseLib.validationFailed(156); /* date falls on a weekend*/
          IN0SW01.IN0SWERS = "Y";
          set IN0SM020.OP1DSADT cursor, bold;
        end
      end
    else
      converseLib.validationFailed(18); /* invalid date entered*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.OP1DSADT cursor, bold;
    end
  end

   /* **** verify dont ship before *****/

  IN0SW01.IN0SWBDT = 0; /* zero out dont ship before work date*/
  if (IN0SM020.OP1DSBDT != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
    if (IN0SW02.INR-ENTRY6-DT == "A")
      TA2REC.TA2GRGAN = IN0SM020.OP1DSBDT; /* us date format*/
    else
      TA2REC01.TA2-GREG-DDMMYY = IN0SM020.OP1DSBDT;
                                   /* eur date format*/
    end
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN0SW01.IN0SWBDT = TA2REC.TA2GRGGN; /* HOLD SHIP BEFORE DATE YYMMDD*/
      /* rnv*/
      if (TA2REC.TA2GRGGN < IN0SW02.IN0SWCDT)
        converseLib.validationFailed(018); /* date must be greater than today*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM020.OP1DSBDT cursor, bold;
      end
      /* rnv*/
      IN0SW01.IN0SWNUM = IN0SW02.IN0SWCDT + 20000;
                                   /* wk-dt = curr-dt + 2 yrs*/
      if (TA2REC.TA2GRGGN > IN0SW01.IN0SWNUM)
        converseLib.validationFailed(155); /* date is greater than 1 yr in future*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM020.OP1DSBDT cursor, bold;
      else
        /* **** determine weekend check*/
        if (TA2REC.TA2DYWK == "SUNDAY"
         || TA2REC.TA2DYWK == "SATURDAY")
          converseLib.validationFailed(156); /* date falls on a weekend*/
          IN0SW01.IN0SWERS = "Y";
          set IN0SM020.OP1DSBDT cursor, bold;
        end
      end
    else
      converseLib.validationFailed(18); /* invalid date entered*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.OP1DSBDT cursor, bold;
    end
  end

   /* **** dont ship before must not be > dont ship after date*/

  if (IN0SW01.IN0SWBDT > 0 /* dont ship before is a valid date*/
   && IN0SW01.IN0SWADT > 0) /* dont ship after is a valid date*/
    if (IN0SW01.IN0SWBDT <= IN0SW01.IN0SWADT)
      /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(157); /* ship before cannot be later than ship*/
                                   /* after*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.OP1DSBDT cursor, bold;
    end
  end

   /* **** verify carrier code *****/

  if (IN0SM020.TF1CARCD != "    ")
    set TF1REC empty;

    TF1REC.TF1CARCD = IN0SM020.TF1CARCD;

    IN0SSPP(); /* 's ' call to get tf1rec*/

    if (SQLCA.VAGen_SQLCODE == 0)
      IN0SM020.TF1ABRV = TF1REC.TF1ABRV;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        converseLib.validationFailed(48); /* carrier code not on db*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM020.TF1CARCD cursor, bold;
      else
        return;
      end
    end
  end

   /* **** verify pick code *****/

  if (IN0SM020.XPPCD in XPPTBL.XPPCD)
    if (XPPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0SM020.XPPABRV = XPPTBL.XPPABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* inactive status*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.XPPCD cursor, bold;
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM020.XPPCD cursor, bold;
  end

   /* **** verify eta code *****/

  if (IN0SM020.IN7STETA != 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = IN0SW02.INR-ENTRY6-DT;
    if (IN0SW02.INR-ENTRY6-DT == "A")
      TA2REC.TA2GRGAN = IN0SM020.IN7STETA; /* us date format*/
    else
      TA2REC01.TA2-GREG-DDMMYY = IN0SM020.IN7STETA;
                                   /* eur date format*/
    end
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      if (IN0SM020.XIUCD == "01")
        if (TA2REC.TA2GRGGN > IN7REC.IN7STIDT)
          /* next sentence*/
        else
          converseLib.validationFailed(18); /* invalid date entered*/
          IN0SW01.IN0SWERS = "Y";
          set IN0SM020.IN7STETA cursor, bold;
        end
      else
        if (IN0SM020.XIUCD == "02")
          if (TA2REC.TA2GRGGN > IN7REC.IN7STLDT)
            /* next sentence*/
          else
            converseLib.validationFailed(18); /* invalid date entered*/
            IN0SW01.IN0SWERS = "Y";
            set IN0SM020.IN7STETA cursor, bold;
          end
        else
          if (IN0SM020.XIUCD == "03")
            if (TA2REC.TA2GRGGN > IN7REC.IN7STHDT)
              /* next sentence*/
            else
              converseLib.validationFailed(18); /* invalid date entered*/
              IN0SW01.IN0SWERS = "Y";
              set IN0SM020.IN7STETA cursor, bold;
            end
          else
            if (IN0SM020.XIUCD == "04")
              if (TA2REC.TA2GRGGN > IN7REC.IN7STHDT)
                /* next sentence*/
              else
                converseLib.validationFailed(18); /* invalid date entered*/
                IN0SW01.IN0SWERS = "Y";
                set IN0SM020.IN7STETA cursor, bold;
              end
            end
          end
        end
      end
    end
  end


   /* **** verify account number *****/

  if (IN0SW01.IN0SWOUT == "Y")
    if (IN0SW01.IN0SWACT != IN0SM020.IN0SMACT)
      converseLib.validationFailed(47); /* do not enter acct #*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.IN0SMACT cursor, bold;
    else
      /* next sentence*/
    end
  else
     /* *** verify dept. and gpc ****/
    IN0SW01.IN0SWACT = IN0SM020.IN0SMACT;
    IN0SS3A(); /* obtain company store names*/
    if (IN0SW01.IN0SWDPT in XNXTBL.XNXCD)
      /* next sentence*/
    else
      converseLib.validationFailed(11); /* invalid value*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.IN0SMACT cursor, bold;
    end
    if (IN0SW01.IN0SWGPC in XGPTBL.XGPCD)
      /* next sentence*/
    else
      converseLib.validationFailed(11); /* invalid value*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM020.IN0SMACT cursor, bold;
    end
  end



end // end IN0SSO3

// edit data fields
Function IN0SSO5()


  if (IN0SM030.IN0SMCFM == "N"
   || IN0SM030.IN0SMCFM == "Y")
     /* check this in flow area*/
    return;
  else
    converseLib.validationFailed(11); /* invalid value*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM030.IN0SMCFM cursor, bold;
    return;
  end


end // end IN0SSO5

// data field edits
Function IN0SSO6()


  if (IN0SM035.IN0SMCFM == "N"
   || IN0SM035.IN0SMCFM == "Y")
     /* check this in flow area*/
    return;
  else
    converseLib.validationFailed(11); /* invalid value*/
    IN0SW01.IN0SWERS = "Y";
    set IN0SM035.IN0SMCFM cursor, bold;
    return;
  end


end // end IN0SSO6

// insert dinvnt.viadit01
Function IN0SSOO()


   /* ***************************************/
   /* add row to audit item table (in6rec)*/
   /* ***************************************/

  set INXREC empty;
  INXREC.INXFC = "A";

  call "IO0770" (INXREC, SQLCA, IN6REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -806)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0770  ";
    TA1REC.TA1LOCAT[4] = "IN0SSOO ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "IN6REC  ";
    TA1REC.TA1TBLVU = "VIAITM01";
    TA1TBLKE = IN6REC.IN6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* **************************************/
   /* *** end of statment group in0ssoo ****/
   /* **************************************/
end // end IN0SSOO

// field relational edits
Function IN0SSP1()

   /* ** in0swix2 is total number of sizes on screen ***/

   /* ***** has anything been entered ? ******/

  IN0SW01.IN0SWENT = "N";
  IN0SW01.IN0SWSUM = 0;
  IN0SWIX1 = 1;
  while (IN0SWIX1 <= IN0SWIX2)
    if (IN0SM015.IN8SQQ[IN0SWIX1] != 0)
      IN0SW01.IN0SWENT = "Y";
      IN0SWIX1 = 40;
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWENT == "N")
    converseLib.validationFailed(51); /* no update - nothing entered*/
    set IN0SM015.IN8SQQ[1] cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    return;
  end

   /* ***** does total match sum of requested qtys ? ******/

  IN0SW01.IN0SWSUM = 0;
  IN0SWIX1 = 1;
  while (IN0SWIX1 <= IN0SWIX2)
    IN0SW01.IN0SWSUM = IN0SW01.IN0SWSUM + IN0SM015.IN8SQQ[IN0SWIX1];
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWSUM != IN0SM015.IN8SQQ[IN0SWIX1])
    IN0SM015.IN8SQQ[IN0SWIX1] = IN0SW01.IN0SWSUM;
    converseLib.validationFailed(36); /* total must = sum of parts*/
    set IN0SM015.IN8SQQ[IN0SWIX1] cursor, bold;
    IN0SW01.IN0SWERS = "Y";
  end

  IN0SWIX1 = IN0SWIX2 + 2;

  while (IN0SWIX1 <= 40)
    set IN0SM015.IN8SQQ[IN0SWIX1] skip, invisible;
    IN0SWIX1 = IN0SWIX1 + 1;
  end

   /* ************************************************************/
   /* *** end of:  IN0ssp1 - data field edits                 ****/
   /* ************************************************************/


end // end IN0SSP1

// relational edits
Function IN0SSP3()


   /* **** determnine which fields can be changed *****/

  if (IN0SM020.XIUCD == "02" /* status is released*/
   || IN0SM020.XIUCD == "03" /* status is shipped*/
   || IN0SM020.XIUCD == "04") /* status is complete*/
    converseLib.validationFailed(151); /* maintenance not allowed*/
    IN0SW01.IN0SWERS = "Y";
  end

  if (IN0SM020.XIUCD == "05") /* status is canceled*/
    converseLib.validationFailed(50); /* maintenance not allowed*/
    IN0SW01.IN0SWERS = "Y";
  end


end // end IN0SSP3

// relative data field edits
Function IN0SSP4()
   /* ** in0swix2 is total number of sizes on screen ***/

   /* ***** darken remaining size fields ******/

  IN0SWIX1 = IN0SWIX2 + 2;

  while (IN0SWIX1 <= 40)
    set IN0SM025.IN0SMAQY[IN0SWIX1] skip, invisible;
    IN0SWIX1 = IN0SWIX1 + 1;
  end


   /* ** was data entered ? ******/

  IN0SW01.IN0SWSUM = 0;
  IN0SWIX1 = 1;
  IN0SW01.IN0SWENT = "N";
  while (IN0SWIX1 <= IN0SWIX2)
    if (IN0SM025.IN0SMAQY[IN0SWIX1] != 0)
      IN0SW01.IN0SWENT = "Y";
      IN0SWIX1 = 99;
    end
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWENT == "N")
    converseLib.validationFailed(51); /* total must = sum of parts*/
    set IN0SM025.IN0SMAQY[1] cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    return;
  end

   /* ** does total equal sum of parts ? ***/

  IN0SW01.IN0SWSUM = 0;
  IN0SWIX1 = 1;
  while (IN0SWIX1 <= IN0SWIX2)
    IN0SW01.IN0SWSUM = IN0SW01.IN0SWSUM + IN0SM025.IN0SMAQY[IN0SWIX1];
    IN0SWIX1 = IN0SWIX1 + 1;
  end

  if (IN0SW01.IN0SWSUM != IN0SM025.IN0SMAQY[IN0SWIX1])
    IN0SM025.IN0SMAQY[IN0SWIX1] = IN0SW01.IN0SWSUM;
    converseLib.validationFailed(36); /* total must = sum of parts*/
    set IN0SM025.IN0SMAQY[IN0SWIX1] cursor, bold;
    IN0SW01.IN0SWERS = "Y";
    return;
  end

   /* ***** check for enough qty on stk trnsfr db ******/

  move IN0SWIX2 to IN0SWIX3 withV60Compat;
  IN0SWIX1 = 40;
  while (IN0SWIX1 >= 1)
    if (SYPREC.SY4IDDSC[IN0SWIX1] != "     ")
      IN0SW01.IN0SWAQY = IN0SM025.IN0SMAQY[IN0SWIX3];
      IN0SW01.IN0SWAQY = IN0SW01.IN0SWAQY + IN0SM025.IN0SMQTY[IN0SWIX3];
      if (IN0SW01.IN0SWAQY < 0)
        converseLib.validationFailed(107); /* insufficient stock*/
        IN0SW01.IN0SWERS = "Y";
        set IN0SM025.IN0SMAQY[IN0SWIX3] cursor, bold;
      end
      IN0SWIX3 = IN0SWIX3 - 1;
    end
    IN0SWIX1 = IN0SWIX1 - 1;
  end


   /* ************************************************************/
   /* *** end of:  IN0ssp4 - data field edits                 ****/
   /* ************************************************************/


end // end IN0SSP4

// relational edits
Function IN0SSP5()


   /* **** enter key relational edits here *****/

end // end IN0SSP5

// 's ' call to using tf1rec
Function IN0SSPP()


   /* *****************************/
   /* obtain tf1rec data*/
   /* *****************************/


  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0860  ";
      TA1REC.TA1LOCAT[4] = "IN0SSPP ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "TF1REC  ";
      TA1REC.TA1TBLVU = "        ";
      TA1TBLKE = TF1REC.TF1KEYS;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0sspp*/
   /* ***********************************/
end // end IN0SSPP

// blank map in0sm010 fields
Function IN0SSQ1()
   /* ************************************************************/
   /* *** reset map and working storage area                  ****/
   /* ************************************************************/


  converseLib.clearScreen();
  set IN0SM015 initial;

  IN0SM015.IN7STNBR = IN0SW01.IN7STNBR;
  IN0SM015.XGPCD = IN0SW01.XGPCD;
  IN0SM015.SY1STNBR = IN0SW01.SY1STNBR;
  IN0SM015.SY2CLRID = IN0SW01.SY2CLRID;
  IN0SM015.XDMCD = IN0SW01.XDMCD;
  IN0SM015.XQACD = IN0SW01.XQACD;
  IN0SM015.XSACD = IN0SW01.XSACD;
  IN0SM015.XSDCD = IN0SW01.XSDCD;
  IN0SM015.XPGCD = IN0SW01.XPGCD;
  IN0SM015.XUMCD = IN0SW01.XUMCD;

  IN0SM015.XXXTITLE = " STOCK TRANSFER ENTRY   (ITEM) ";
  IN0SM015.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM015.XXXRVNBR = IN0SW02.IN0SWRVN;

  if (IN0SW01.IN0SWOVR == "Y") /* availibility override successful*/
    converseLib.validationFailed(131);
  else
    converseLib.validationFailed(9);
                                   /* ; normal update successful*/
  end

  set IN0SW01 empty;

  IN0SW01.IN0SWFST = "Y"; /* set first time switch*/

   /* ************************************************************/
   /* *** end of:  IN0sSq1 - blank out fields                 ****/
   /* ************************************************************/
end // end IN0SSQ1

// reset data portion of map
Function IN0SSQ2()
   /* ************************************************************/
   /* *** reset map and working storage area                  ****/
   /* ************************************************************/


  converseLib.clearScreen();
  set IN0SM018 initial;

  IN0SM018.IN7STNBR = IN0SW01.IN7STNBR;

  IN0SM018.XXXTITLE = " STOCK TRANSFER RELEASE        ";
  IN0SM018.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM018.XXXRVNBR = IN0SW02.IN0SWRVN;

  set IN0SW01 empty;


   /* ************************************************************/
   /* *** end of:  IN0sSq2 - blank out fields                 ****/
   /* ************************************************************/
end // end IN0SSQ2

// reset map & working storage
Function IN0SSQ3()
   /* ************************************************************/
   /* *** reset map and working storage area                  ****/
   /* ************************************************************/


  converseLib.clearScreen();
  set IN0SM020 initial;

  IN0SM020.IN7STNBR = IN0SW01.IN7STNBR;

  IN0SM020.XXXTITLE = "STOCK TRANSFER MAINTENANCE(HEADER) ";
  IN0SM020.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM020.XXXRVNBR = IN0SW02.IN0SWRVN;

  set IN0SW01 empty;


   /* ************************************************************/
   /* *** end of:  IN0sSq3 - blank out fields                 ****/
   /* ************************************************************/
end // end IN0SSQ3

// reset map in0sm025
Function IN0SSQ4()
   /* ************************************************************/
   /* *** reset map and working storage area                  ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0SM025 initial;

  IN0SM025.IN7STNBR = IN0SW01.IN7STNBR;
  IN0SM025.XIRCD = IN0SW01.XIRCD;
  IN0SM025.XGPCD = IN0SW01.XGPCD;
  IN0SM025.SY1STNBR = IN0SW01.SY1STNBR;
  IN0SM025.SY2CLRID = IN0SW01.SY2CLRID;
  IN0SM025.XDMCD = IN0SW01.XDMCD;
  IN0SM025.XQACD = IN0SW01.XQACD;
  IN0SM025.XSACD = IN0SW01.XSACD;
  IN0SM025.XSDCD = IN0SW01.XSDCD;
  IN0SM025.XPGCD = IN0SW01.XPGCD;
  IN0SM025.XUMCD = IN0SW01.XUMCD;

  IN0SM025.XXXTITLE = "STOCK TRANSFER MAINTENANCE(ITEM)";
  IN0SM025.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM025.XXXRVNBR = IN0SW02.IN0SWRVN;

  if (IN0SW01.IN0SWOVR == "Y") /* set up for availability override msg*/
    converseLib.validationFailed(131);
  else
    converseLib.validationFailed(9); /* normal update*/
  end

  set IN0SW01 empty;

   /* ************************************************************/
   /* *** end of:  IN0sSq4 - blank out fields                 ****/
   /* ************************************************************/
end // end IN0SSQ4

// reset map & working storage
Function IN0SSQ5()
   /* ************************************************************/
   /* *** reset map and working storage area                  ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0SM030 initial;

  IN0SM030.IN7STNBR = IN0SW01.IN7STNBR;

  IN0SM030.XXXTITLE = "STOCK TRANSFER CANCEL (HEADER)  ";
  IN0SM030.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM030.XXXRVNBR = IN0SW02.IN0SWRVN;

  set IN0SW01 empty;

   /* ************************************************************/
   /* *** end of:  IN0sSq5 - blank out fields                 ****/
   /* ************************************************************/
end // end IN0SSQ5

// reset map and working storage
Function IN0SSQ6()
   /* ************************************************************/
   /* *** reset map and working storage area                  ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0SM035 initial;

  IN0SM035.IN7STNBR = IN0SW01.IN7STNBR;
  IN0SM035.XIRCD = IN0SW01.XIRCD;
  IN0SM035.XDMCD = IN0SW01.XDMCD;
  IN0SM035.XQACD = IN0SW01.XQACD;
  IN0SM035.XSACD = IN0SW01.XSACD;
  IN0SM035.XSDCD = IN0SW01.XSDCD;
  IN0SM035.XPGCD = IN0SW01.XPGCD;

  IN0SM035.XXXTITLE = "   STOCK TRANSFER CANCEL (PRODUCT)";
  IN0SM035.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0SM035.XXXRVNBR = IN0SW02.IN0SWRVN;

  set IN0SW01 empty;

   /* ************************************************************/
   /* *** end of:  IN0sSq6 - blank out fields                 ****/
   /* ************************************************************/
end // end IN0SSQ6

// 'u' call to skt trnsfr db
Function IN0SSQQ()
   /* *******************************/
   /* update stock transfer db*/
   /* *******************************/


  call "IO0720" ("U ", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "U       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0720  ";
      TA1REC.TA1LOCAT[4] = "IN0SSQQ ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "IN7REC  ";
      TA1REC.TA1TBLVU = "VTFHDR01";
      TA1TBLKE = IN7REC.IN7KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ssqq*/
   /* ***********************************/


end // end IN0SSQQ

// call for size scale data
Function IN0SSRR()


   /* ************************************************************/
   /* *** use size translator to valid translations           ****/
   /* ************************************************************/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";

  call "SY1120" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 14)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(0025); /* <--- not on db msg*/
    return;
  end

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0S    ";
  TA1REC.TA1LOCAT[1] = "PC      ";
  TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
  TA1REC.TA1LOCAT[3] = "SY1120  ";
  TA1REC.TA1LOCAT[4] = SYPREC.SYPRC;
  TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
  TA1REC.TA1DBASE = "SYPREC  ";
  TA1REC.TA1TBLVU = "SZ XLATE";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0SSRR

// 'u' call tf itm db (in8rec)
Function IN0SSSS()
   /* *******************************/
   /* update item table row*/
   /* *******************************/

  call "IO0730" ("U ", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "U       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0730  ";
      TA1REC.TA1LOCAT[4] = "IN0SSSS ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "IN8REC  ";
      TA1REC.TA1TBLVU = "VTFITM01";
      TA1TBLKE = IN8REC.IN8KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ssss*/
   /* ***********************************/


end // end IN0SSSS

// enter/pf12 processing
Function IN0SST1()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SS1D(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: IN0mWSKS=N; if fields changed (=different key)****/
   /* ************************************************************/

  IN0SSB1(); /* <=== same key edits*/

   /* ************************************************************/
   /* *** if NOT same key fields: exit to go to 180 to re-edit****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSKS == "N")
    return;
  end

   /* ************************************************************/
   /* *** data present: perform relational edits              ****/
   /* ************************************************************/

  IN0SSP1(); /* <=== relational edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** determine issued data and put to screen             ****/
   /* ***                                                     ****/
   /* *** 3/17/97 add logic for warehouse 93 not to           ****/
   /* ***         check availability table                    ****/
   /* ************************************************************/

  IN0SS1P(); /* set first time switches*/

  if (IN0SW01.IN0SWSHP == "Y"   
   && IN0SM010.IN7STFWH != "93" /* do not process warehouse 93*/
   && IN0SM010.XISCD != "05"    /* do not process type 05*/
   && IN0SM010.XISCD != "10"    /* do not process type 10*/
   && IN0SW01.IN0SWOVR != "Y")  /* availability override*/
    IN0SS1J(); /* CALL IO2370 TO DETERMINE AVAILABILITY*/
                                   /* & GET QTYS*/
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(105); /* no availability record*/
      IN0SW01.IN0SWERS = "Y";
      set IN0SM015.XGPCD cursor;
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        return;
      end
    end
  else
    IN0SS1K();
                                   /* determine available qtys from net qty*/
  end

  if (IN0SW01.IN0SWERS == "Y")
    IN0SW01.IN0SWSW3 = "N"; /* no longer first time*/
    return;
  end

  if (IN0SW01.IN0SWSW1 == "Y")
    IN0SWIX1 = 40;
    IN0SW01.IN0SWSW1 = "N"; /* no longer first time*/
    move IN0SWIX2 to IN0SWIX3 withV60Compat;

    while (IN0SWIX1 >= 1)
      IN0SS1Q(); /* is adj qty > availabilty ?*/
      IN0SWIX1 = IN0SWIX1 - 1;
    end
  end

  if (IN0SW01.IN0SWERS == "Y"
   && IN0SM015.XGPCD != "02") /* need to determine full case qtys*/
    return;
  end

  if (IN0SW01.IN0SWSW2 == "Y")
    IN0SW01.IN0SWSW2 = "N"; /* no longer first time*/
    IN0SWIX1 = 40;
    move IN0SWIX2 to IN0SWIX3 withV60Compat;

    while (IN0SWIX1 >= 1)
      IN0SS1M(); /* adjust map quantities*/
      IN0SWIX1 = IN0SWIX1 - 1;
    end
  end

  IN0SS-IN8000-STLMT(); /* check st limit for whse 15*/

   /* ************************************************************/
   /* *** end of:  IN0sSt1 - ENTER/PF12 edits                 ****/
   /* ************************************************************/
end // end IN0SST1

// enter/pf12 processing
Function IN0SST2()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA2(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: IN0mWSKS=N; if fields changed (=different key)****/
   /* ************************************************************/

  IN0SSB2(); /* <=== same key edits*/

   /* ************************************************************/
   /* *** if NOT same key fields: exit to go to 180 to re-edit****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSKS == "N")
    return;
  end

   /* ************************************************************/
   /* *** data present: edit data fields                      ****/
   /* ************************************************************/

  IN0SSO2(); /* data field edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** end of:  IN0sSt2 - ENTER/PF12 edits                 ****/
   /* ************************************************************/
end // end IN0SST2

// enter/pf12 processing
Function IN0SST3()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA3(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: IN0mWSKS=N; if fields changed (=different key)****/
   /* ************************************************************/

  IN0SSB3(); /* <=== same key edits*/

   /* ************************************************************/
   /* *** if NOT same key fields: exit to go to 330 to re-edit****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSKS == "N")
    return;
  end

   /* ************************************************************/
   /* *** data present: relational edits                      ****/
   /* ************************************************************/

  IN0SSP3(); /* <=== relational edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** data present: edit individual data fields           ****/
   /* ************************************************************/

  IN0SSO3(); /* <=== data field edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** end of:  IN0sST3 - ENTER/PF12 edits                 ****/
   /* ************************************************************/
end // end IN0SST3

// enter/pf12 processing
Function IN0SST4()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA4(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: IN0sWSKS=N; if fields changed (=different key)****/
   /* ************************************************************/

  IN0SSB4(); /* <=== same key edits*/

   /* ************************************************************/
   /* *** if NOT same key fields: exit to go to 430 to re-edit****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSKS == "N")
    return;
  end

   /* ************************************************************/
   /* *** data present: edit individual data fields           ****/
   /* ************************************************************/

   /* IN0sSO4                         ; <=== data field edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** data present: perform relational edits              ****/
   /* ************************************************************/

  IN0SSP4(); /* <=== relational edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

  IN0SS-IN8000-STLMT(); /* check st limit for whse 15*/

   /* ************************************************************/
   /* *** end of:  IN0sST4 - ENTER/PF12 edits                 ****/
   /* ************************************************************/
end // end IN0SST4

// edit all input data
Function IN0SST5()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA5(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: IN0mWSKS=N; if fields changed (=different key)****/
   /* ************************************************************/

  IN0SSB5(); /* <=== same key edits*/

   /* ************************************************************/
   /* *** if NOT same key fields: exit to go to 530 to re-edit****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSKS == "N")
    return;
  end

   /* ************************************************************/
   /* *** data present: relational edits                      ****/
   /* ************************************************************/

  IN0SSP5(); /* <=== relational edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** data present: edit individual data fields           ****/
   /* ************************************************************/

  IN0SSO5(); /* <=== data field edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** end of:  IN0sST5 - ENTER/PF12 edits                 ****/
   /* ************************************************************/
end // end IN0SST5

// enter/pf12 processing
Function IN0SST6()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0SSA6(); /* <=== missing key input edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: IN0mWSKS=N; if fields changed (=different key)****/
   /* ************************************************************/

  IN0SSB6(); /* <=== same key edits*/

   /* ************************************************************/
   /* *** if NOT same key fields: exit to go to 530 to re-edit****/
   /* ************************************************************/

  if (IN0SW01.IN0SWSKS == "N")
    return;
  end

   /* ************************************************************/
   /* *** data present: edit individual data fields           ****/
   /* ************************************************************/

  IN0SSO6(); /* <=== data field edits*/

  if (IN0SW01.IN0SWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** end of:  IN0sST6 - ENTER/PF12 edits                 ****/
   /* ************************************************************/
end // end IN0SST6

// 'u' call invt item db (in1rec)
Function IN0SSTT()
   /* *******************************/
   /* update inventory item db*/
   /* *******************************/


  call "IO0590" ("U ", SQLCA, IN1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0SW01.IN0SWSES = "Y";
      converseLib.validationFailed(22); /* try again*/
    else
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "U       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0590  ";
      TA1REC.TA1LOCAT[4] = "IN0SSTT ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "IN1REC  ";
      TA1REC.TA1TBLVU = "VINITM01";
      TA1TBLKE = IN1REC.IN1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0sstt*/
   /* ***********************************/


end // end IN0SSTT

// 's' call invt item db (in1rec)
Function IN0SSUU()
   /* *******************************/
   /* obtain inventory item row*/
   /* *******************************/


  call "IO0590" ("S ", SQLCA, IN1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0590  ";
      TA1REC.TA1LOCAT[4] = "IN0SSUU ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "IN1REC  ";
      TA1REC.TA1TBLVU = "VINITM01";
      TA1TBLKE = IN1REC.IN1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ssuu*/
   /* ***********************************/
end // end IN0SSUU

// 'sm' call tf itm db (in8rec)
Function IN0SSVV()
   /* ********************************/
   /* perform 'sm' call for line item*/
   /* ********************************/


  call "IO0730" ("SM", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != -305)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0730  ";
      TA1REC.TA1LOCAT[4] = "IN0SSVV ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "IN8REC  ";
      TA1REC.TA1TBLVU = "VTFITM01";
      TA1TBLKE = IN8REC.IN8KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ssvv*/
   /* ***********************************/
end // end IN0SSVV

// 's ' call io0790 (sr1rec)
Function IN0SSWW()
   /* *******************************/
   /* obtain ship rec shed hdr row*/
   /* *******************************/


  call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0SW01.IN0SWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0S    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
      TA1REC.TA1LOCAT[3] = "IO0790  ";
      TA1REC.TA1LOCAT[4] = "IN0SSWW ";
      TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
      TA1REC.TA1DBASE = "SR1REC  ";
      TA1REC.TA1TBLVU = "VSRHDR01";
      TA1TBLKE = SR1REC.SR1KEYS;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ssww*/
   /* ***********************************/
end // end IN0SSWW

// 'ss' call io0800 (sr2rec)
Function IN0SSXX()
   /* *******************************/
   /* obtain ship rec order row*/
   /* *******************************/


  call "IO0800" ("SS", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "SS      ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0800  ";
    TA1REC.TA1LOCAT[4] = "IN0SSXX ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "SR2REC  ";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1TBLKE = SR2REC.SR2KEYS;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ssxx*/
   /* ***********************************/
end // end IN0SSXX

// delete dorder.voppkh01(ophrec)
Function IN0SSY1()
   /* *****************************/
   /* delete dorder.voppkh01 row*/
   /* *****************************/

  call "IO1650" ("D ", SQLCA, OPHREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "D       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO1650  ";
    TA1REC.TA1LOCAT[4] = "IN0SSY1 ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VOPPKH01";
    TA1TBLKE = OPHREC.OPHGROUP;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ssy1*/
   /* ***********************************/
end // end IN0SSY1

// update dorder.voppkh01(ophrec)
Function IN0SSY2()
   /* *****************************/
   /* update dorder.voppkh01 row*/
   /* *****************************/

  call "IO1650" ("U ", SQLCA, OPHREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "U       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO1650  ";
    TA1REC.TA1LOCAT[4] = "IN0SSY2 ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VOPPKH01";
    TA1TBLKE = OPHREC.OPHGROUP;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ssy1*/
   /* ***********************************/
end // end IN0SSY2

// select dorder.voppkh01(ophrec)
Function IN0SSY3()
   /* *****************************/
   /* select dorder.voppkh01 row*/
   /* *****************************/

  call "IO1650" ("S ", SQLCA, OPHREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO1650  ";
    TA1REC.TA1LOCAT[4] = "IN0SSY2 ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VOPPKH01";
    TA1TBLKE = OPHREC.OPHGROUP;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ssy1*/
   /* ***********************************/
end // end IN0SSY3

// select dorder.voppki01
Function IN0SSY4()
   /* *****************************/
   /* select dorder.voppki01 row*/
   /* *****************************/

  call "IO1660" ("S ", SQLCA, OPIREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO1660  ";
    TA1REC.TA1LOCAT[4] = "IN0SSY4 ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VOPPKI01";
    TA1TBLKE = OPIREC.OPIGROUP;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ssy4*/
   /* ***********************************/
end // end IN0SSY4

// select dprodc.vprdcu01
Function IN0SSY5()
   /* ************************************************************/
   /* *** select dprodc.vprdcu01                              ****/
   /* ************************************************************/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  IN0SW01.IN0SWERS = "Y";
  converseLib.validationFailed(8); /* severe table error*/
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0S    ";
  TA1REC.TA1LOCAT[1] = "SG      ";
  TA1REC.TA1LOCAT[2] = "IN0SSY5 ";
  TA1REC.TA1LOCAT[3] = "IO3340  ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
  TA1REC.TA1DBASE = "PC2REC  ";
  TA1REC.TA1TBLVU = "VORDCU01";
  TA1TBLKE = PC2REC.PC2KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  return;

   /* ***********************************/
   /* *** end of statement group in0ssY5*/
   /* ***********************************/

end // end IN0SSY5

// delete dorder.voppki01
Function IN0SSYY()
   /* *****************************/
   /* delete dorder.voppki01 row*/
   /* *****************************/

  call "IO1660" ("D ", SQLCA, OPIREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "D       ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO1660  ";
    TA1REC.TA1LOCAT[4] = "IN0SSYY ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VOPPKI01";
    TA1TBLKE = OPIREC.OPIGROUP;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0ssyy*/
   /* ***********************************/
end // end IN0SSYY

// 'cs' call io0800 (sr2rec)
Function IN0SSZZ()
   /* *******************************/
   /* obtain ship rec order row*/
   /* *******************************/


  call "IO0800" ("CS", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    IN0SW01.IN0SWERS = "Y";
    converseLib.validationFailed(8); /* severe table error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0S    ";
    TA1REC.TA1LOCAT[1] = "CS      ";
    TA1REC.TA1LOCAT[2] = IN0SW01.IN0SWLOC;
    TA1REC.TA1LOCAT[3] = "IO0800  ";
    TA1REC.TA1LOCAT[4] = "IN0SSZZ ";
    TA1REC.TA1MAP = IN0SW01.IN0SWMAP;
    TA1REC.TA1DBASE = "SR2REC  ";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1TBLKE = SR2REC.SR2KEYS;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ***********************************/
   /* *** end of statement group in0sszz*/
   /* ***********************************/
end // end IN0SSZZ

//*** RECORD=IN0SW01 ****
// ************************************************************
// These are the standard working storage fields for the model.
// ************************************************************
// ***********************
Record IN0SW01 type basicRecord
  10 IN0SWERS IN0SWERS ; 
  10 IN0SWSES IN0SWSES ; 
  10 IN0SWTIM IN0SWTIM ; 
    15 IN0SWHMM IN0SWHMM ; 
    15 IN0SWSSS IN0SWSSS ; 
  10 IN0SWADJ IN0SWADJ [40] ; 
  10 IN0SWLCY IN0SWLCY ; 
  10 IN0SWORD IN0SWORD ; 
  10 IN0SWENT IN0SWENT ; 
  10 IN0SWFST IN0SWFST ; 
  10 IN0SWSW1 IN0SWSW1 ; 
  10 IN0SWSW2 IN0SWSW2 ; 
  10 IN0SWSW3 IN0SWSW3 ; 
  10 IN0SWSW4 IN0SWSW4 ; 
  10 IN0SWTOG IN0SWTOG ; 
  10 IN0SWFOG IN0SWFOG ; 
  10 IN0SWSYR IN0SWSYR ; 
    15 IN0SWCCC IN0SWCCC ; 
    15 IN0SWYYY IN0SWYYY ; 
  10 IN0SWSQQ IN0SWSQQ ; 
  10 IN0SWAQY IN0SWAQY ; 
  10 IN0SWSIQ IN0SWSIQ ; 
  10 IN0SWAIT IN0SWAIT ; 
  10 IN0SWAIF IN0SWAIF ; 
  10 IN0SWSSQ IN0SWSSQ ; 
  10 IN0SWSRQ IN0SWSRQ ; 
  10 IN0SWRSR IN0SWRSR ; 
  10 IN0SWALO IN0SWALO ; 
  10 IN0SWSTA IN0SWSTA ; 
  10 IN0SWXFO IN0SWXFO ; 
  10 IN0SWIFV IN0SWIFV ; 
  10 IN0SWSKS IN0SWSKS ; 
  10 IN0SWRVN IN0SWRVN ; 
  10 IN0SWPOS IN0SWPOS ; 
  10 IN0SWNEG IN0SWNEG ; 
  10 IN0SWNUM IN0SWNUM ; 
  10 IN0SWSUM IN0SWSUM ; 
  10 IN0SWADT IN0SWADT ; 
  10 IN0SWBDT IN0SWBDT ; 
  10 IN0SWOUT IN0SWOUT ; 
  10 IN0SWOGF IN0SWOGF ; 
  10 IN0SWHDR IN0SWHDR ; 
  10 IN0SWITM IN0SWITM ; 
  10 IN0SWSHP IN0SWSHP ; 
  10 IN0SWNVA IN0SWNVA ; 
  10 IN0SWPVA IN0SWPVA ; 
  10 IN0SWONH IN0SWONH ; 
  10 IN0SWFTW IN0SWFTW ; 
    15 IN0SWFWH IN0SWFWH ; 
    15 IN0SWTWH IN0SWTWH ; 
  10 IN0SWACT IN0SWACT ; 
    15 IN0SWCOI IN0SWCOI ; 
    15 IN0SWSTO IN0SWSTO ; 
    15 IN0SWDPT IN0SWDPT ; 
    15 IN0SWGPC IN0SWGPC ; 
  10 IN0SWIX1 IN0SWIX1 ; 
  10 IN0SWIX2 IN0SWIX2 ; 
  10 IN0SWIX3 IN0SWIX3 ; 
  10 IN0SWLOC IN0SWLOC ; 
  10 IN0SWMAP IN0SWMAP ; 
  10 IN0SWDTE IN0SWDTE ; 
  10 IN0SWSEL IN0SWSEL ; 
  10 IN7STNBR IN7STNBR ; 
  10 XWHCD XWHCD ; 
  10 XOWCD XOWCD ; 
  10 IN0SWTRD IN0SWTRD ; 
  10 XITCD XITCD ; 
  10 IN5TRREF IN5TRREF ; 
  10 XIRCD XIRCD ; 
  10 IN7STCNM IN7STCNM ; 
  10 XIFCD XIFCD ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XSDCD XSDCD ; 
  10 XSACD XSACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 IN0SWOVR IN0SWOVR ; 
  10 IN0SWSCD IN0SWSCD ; 
  10 IN0SWTIQ IN0SWTIQ ; 
  10 IN0SWDOC IN0SWDOC ; 
    15 * num(8) ; 
    15 IN0SWPRT IN0SWPRT ; 
  10 IN0SWDES IN0SWDES ; 
    15 IN0SWMSG IN0SWMSG ; 
    15 IN0SWSTN IN0SWSTN ; 
end // end IN0SW01

Record IN0SW02 type basicRecord
  10 IN0SWCDT IN0SWCDT ; 
  10 IN0SWTIM IN0SWTIM ; 
  10 IN0SWRVN IN0SWRVN ; 
  10 IN8DATA IN8DATA ; 
  10 INR-ENTRY6-DT INR-ENTRY6-DT ; 
  10 MAX-BASIC-ETA MAX-BASIC-ETA ; 
end // end IN0SW02

//*** RECORD=INRREC02 ****
// ---- Distribution Systems Processing Rules Information ----
// 
// This record redefines record INRREC used for the 'WHSECODE'
// rule type call to subroutine IN8000.
// 
// -------  --------  ------  --------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  --------------------------------
// NEW      05/13/93  JCOUSS  NEW RECORD
// 1H0002   07/09/93  DANNAN  ADD INR-XWH-COLEHAAN-FL TO MATCH
//                            WIN8002 COPYBOOK.
// IN0242   09/15/93  DANNAN  ADD INR-XWH-STKTF-LIMIT-FL.
// ************************
Record INRREC02 type basicRecord // VAGen Info - redefined INRREC
  5 INR-PARAMETERS INR-PARAMETERS ; 
    10 * num(2) ; // FILLER
    10 * char(10) ; // FILLER
    10 INR-INPUT INR-INPUT ; 
      15 XWH-WHSE-CD XWH-WHSE-CD ; 
      15 INR-SEARCH-FL INR-SEARCH-FL ; 
      15 * char(67) ; // FILLER
    10 * num(6) ; // FILLER
    10 * char(12) ; // FILLER
    10 INR-TABLE INR-TABLE ; 
      15 INR-RULES INR-RULES [80] ; 
        20 INR-WHSECODE-KEY INR-WHSECODE-KEY ; 
        20 INR-XOW-ALTER-FL INR-XOW-ALTER-FL ; 
        20 XOW-OWN-GRP-CD XOW-OWN-GRP-CD ; 
        20 INR-XWH-PI-GPC02-FL INR-XWH-PI-GPC02-FL ; 
        20 INR-XWH-PI-GPC03-FL INR-XWH-PI-GPC03-FL ; 
        20 INR-XWH-COLEHAAN-FL INR-XWH-COLEHAAN-FL ; 
        20 INR-XWH-STKTF-LIMIT-FL INR-XWH-STKTF-LIMIT-FL ; 
        20 * char(21) ; // FILLER
end // end INRREC02

// account number
DataItem IN0SWACT num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work adjustment field
DataItem IN0SWADJ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work dont ship after date
DataItem IN0SWADT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// audit item written flag
DataItem IN0SWAIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work audit qty field
DataItem IN0SWAIT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work allocated field
DataItem IN0SWALO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work adust qty field
DataItem IN0SWAQY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work dont ship before date
DataItem IN0SWBDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century field
DataItem IN0SWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (ccYYMMDD)
DataItem IN0SWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu_co_id
DataItem IN0SWCOI num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error description field
DataItem IN0SWDES char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit tran doc nbr
DataItem IN0SWDOC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// xnxcd
DataItem IN0SWDPT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date field ccyymmdd
DataItem IN0SWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data entered ?
DataItem IN0SWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general error switch
DataItem IN0SWERS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from owner group flag
DataItem IN0SWFOG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time switch
DataItem IN0SWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from/to warehouse
DataItem IN0SWFTW char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from warehouse
DataItem IN0SWFWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xgpcd
DataItem IN0SWGPC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// write header flag
DataItem IN0SWHDR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hour and minute
DataItem IN0SWHMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// internal function variable
DataItem IN0SWIFV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// write item flag
DataItem IN0SWITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'while' counter
DataItem IN0SWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'total number' counter
DataItem IN0SWIX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work counter
DataItem IN0SWIX3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work life cycle
DataItem IN0SWLCY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stmt grp. or process
DataItem IN0SWLOC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current map in process
DataItem IN0SWMAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message text
DataItem IN0SWMSG char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field
DataItem IN0SWNEG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem IN0SWNUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work numeric field
DataItem IN0SWNVA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// owner group flag
DataItem IN0SWOGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work on hand field
DataItem IN0SWONH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// does sr2rec exist ?
DataItem IN0SWORD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// out only flag
DataItem IN0SWOUT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// availability override flag
DataItem IN0SWOVR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field
DataItem IN0SWPOS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// audit tran part
DataItem IN0SWPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work numeric field
DataItem IN0SWPVA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work reserved field
DataItem IN0SWRSR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// application revision no.
DataItem IN0SWRVN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work season code
DataItem IN0SWSCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save selected value
DataItem IN0SWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update error switch
DataItem IN0SWSES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shippability flag
DataItem IN0SWSHP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work issue qty field
DataItem IN0SWSIQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// same key (=y) switch
DataItem IN0SWSKS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work request qty field
DataItem IN0SWSQQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work receive qty field
DataItem IN0SWSRQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ship qty field
DataItem IN0SWSSQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second
DataItem IN0SWSSS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work set aside field
DataItem IN0SWSTA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// stock trans.nbr w/error
DataItem IN0SWSTN num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu_stor_id
DataItem IN0SWSTO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum quantities in in0mso4
DataItem IN0SWSUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time switch
DataItem IN0SWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time switch
DataItem IN0SWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time switch
DataItem IN0SWSW3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time switch
DataItem IN0SWSW4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work season year
DataItem IN0SWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time (hhmmss)
DataItem IN0SWTIM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total issue qty field
DataItem IN0SWTIQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to owner group flag
DataItem IN0SWTOG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit tran doc nbr
DataItem IN0SWTRD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to warehouse
DataItem IN0SWTWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work transfer out field
DataItem IN0SWXFO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year field
DataItem IN0SWYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WHSECODE TABLE KEY (XWH)
DataItem INR-WHSECODE-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ALTER XOW FLAG ('Y' OR 'N')
DataItem INR-XOW-ALTER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COLEHAAN FLAG ('Y' OR 'N')
DataItem INR-XWH-COLEHAAN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PAIRCOUNT FOOTWEAR FL (Y OR N)
DataItem INR-XWH-PI-GPC02-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PAIRCOUNT APPAREL  FL (Y OR N)
DataItem INR-XWH-PI-GPC03-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STOCK TRANSFER LIMIT EDIT REQD
DataItem INR-XWH-STKTF-LIMIT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date (ccYYMMDD)
DataItem MAX-BASIC-ETA num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

