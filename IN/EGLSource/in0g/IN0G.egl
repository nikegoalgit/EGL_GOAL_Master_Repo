package in0g;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=IN0G ****
// ************************************************************
//                  set aside maintenance
//                  =====================
// ************************************************************
// 
// overview: this application allows adding, changing and
//           deleting of set aside headers and set aside items.
//           set aside headers contain owner/creation infor-
//           mation relative to an item which contain set aside
//           quantities for all valid sizes of a product
//           the pfkeys are:
//              pf1 - help system
//              pf3 - exit to previous screen
//              pf4 - return to main menu
//              pf5 - return to header browse screen
//              pf6 - jump to item browse for this header
//              pf7 - scroll back
//              pf8 - scroll forward
//              pf9 - proceed to add screen
//              pa2 - re-display screen with no entered info
// 
// i/o module    table view     record name
// ===========   ==========     ===========
// 
// dinvnt.vashdr01  io0940   inarec <=== set aside header
// dinvnt.vasitm01  io0950   inbrec <=== set aside item
// dinvnt.vinitm01  io0590   in1rec <=== inventory item
// dinvnt.vinctl01  io0810   inerec <=== inventory control rec
// dinvnt.viadhd01  io0760   in5rec <=== inven. hdr audit
// dinvnt.viadit01  io0770   in6rec <=== inven. itm audit
// dprodc.vprdcu01  io3340   pc2rec <=== seg code(xsd) validat
// inv.formatter    db1030   in9rec <=== return all invnt. item
// size scale       io0040   sy4rec <=== size scale table
// 
// maintenance history:
// ===================
// rvn
// nbr    date     by whom          overview of changes:
// ---  --------  ----------------  --------------------------
// 00   10/22/86  mark christensen  created
// 
// 01   02/20/87  leslie deluhery   added logic for possible
//                                  negative quantities.
// 02   05/18/87  j. campbell       remove unused in2rec.
// 
// 03   06/18/87  mark christensen  updated sgrp 71 to not use
//                                  xfer in to calculate netinv
// 
// 03   06/18/87  mark christensen  updated sgrp 71 to not use
//                                  xfer in to calculate netinv
// 
// 04   07/21/87  j. campbell       show negative signs and
//                                  increase item display to
//                                  990 items.
// 05   10/09/87  m. christensen    added spec code to screens
//                                  30 and 40.
// 06   02/01/88  j. campbell       fix to display only those
//                                  sizes with a valid fg flag
// 06   05/26/88  W. Jones          deleted pf15 ezeclos(s)
// 
// 07   11/02/88  j. wood           add noncsp opt to calls
// 
// --   04/25/89  j. wood           added xssegtr logic
// 
// in17 02/27/90  kande1          1.change setaside header
//                                  delete logic to delete only
//                                  when no setaside item rows
//                                2.change setaside item logic
//                                  to not add or delete item
//                                  rows during chgs when all
//                                  size setaside qtys are zero
//                                3.do not allow maintenance of
//                                  production setaside id's
//                                  this is hardcoded to be chg
//                                  when prod.setaside id's are
//                                  added to the warehouse tbl
// --   04/05/90  jcampb            remove xsd table str chng
// 
// pk159 11/27/90 kande1          during memphis apparel whse
//                                add production setaside code
//                                69 to hardcoded tests in
//                                in0gs81 and in0gs90 which do
//                                not allow maintenance for
//                                production setaside.
// IN#0  10/13/92 dchian          Regenned for table changes.
// 
// IN#0  04/19/93 tharr1          added chg minor sec flag (1).
// 
// IN247 08/31/93 Dannan          Added chg minor sec flag (2)
//                                to statement group IN0GS90
//                                to allow setaside item maint.
//                                for prod setaside ids 62-69.
// 
// IN1051, 9/01/03 smacmi         write inventory audit hdr &
// IN248                          itm rows when set-aside qty
//                                is changed to zero (vasitm01
//                                row is already being deleted)
//                                Changed PF3 to exit to alloc
//                                menu (AL0M). Changed inv qty
//                                msg (92) and inv not < 0 msg
//                                (93) to display ahead of sum
//                                qty msg (36). Added sty/clr/
//                                dim paging function to map
//                                IN0GM030. Changed item browse
//                                to only fetch data on initial
//                                display or when item was
//                                added or updated, not on
//                                every display of the map.  .
// 
// 1H8000 11/08/93 SMACMI            TABLE CHANGES:
//                                POPULATED ZZ-CHNG-PGM-ID FLD
//                                IN IN5REC & IN6REC.
//                                POPULATED ZZZCHGDT & ZZZCHGTM
//                                IN INEREC.
// 1H8003 11/16/93 SMACMI         European Phase I changes.
//                                Enhanced call to help (GD01).
// 1H0007 12/21/93 jricha         replaced all calls to the
//                                the dinvnt.vinitm01
//                                the dinvnt.viadhd01
//                                the dinvnt.viadit01 tables,
//                                with in9060 sub program.
//                                removed in0gs86, in0gs93,
//                                in0gsxm, in0gsxn, in0gsxp
// 1H0007 01/31/94 HKEMPE         Clean up IN0G - delete stmt
//                                group and copybook no longer
//                                used.
// 1H8000 02/28/94 DANNAN         Table Changes.
// 1H0007 03/24/94 DANNAN     1)  Changed statment group
//                                IN0GS-IN9060-ERRS to 'not'
//                                post error rc=130.
//                            2)  Corrected a number of
//                                internal date errors and
//                                data type conflicts.
// 1H0007 04/20/94 HKEMPE         Changed stmt grp IN0GS-IN9060
//                                -ERRS to not post 2010 and
//                                0300 series return codes.
// IN268  06/13/94 DANNAN         Removed direct calls to
//                                VCOLOR02 and replaced with a
//                                call to a product access subr
//                                instead, IN8020.  Removed
//                                SYCREC, added INGREC.
//                                Removed SGRP IN0GSXR which
//                                called IO0560.
// GDS4NSC 05/02/00 MARBUC        Modify so Canada would not
//                                reference or update inventory
//                                item.
// ************************************************************
// *********************
Program IN0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IN00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IN0GW1 IN0GW1; // record
  IN0GW2 IN0GW2; // record
  IN1REC IN1REC; // record
  IN9REC IN9REC; // record
  INAREC INAREC; // record
  INBREC INBREC; // record
  INEREC INEREC; // record
  INFREC INFREC; // record
  INGREC INGREC; // record
  INQREC INQREC; // record
  INRREC INRREC; // record
  INRREC08 INRREC08 { redefines = INRREC } ; // record
  PC2REC PC2REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA2REC01 TA2REC01 { redefines = TA2REC } ; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XIRTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use IN0GM.IN0GM010,  // forms
      IN0GM.IN0GM020, 
      IN0GM.IN0GM030, 
      IN0GM.IN0GM040
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IN0G000: IN0G000();


    IN0GW1.IN0GWLPR = "IN0G000"; /* <=document last process*/

    goto IN0G005; /* <=== flow to setup header browse*/
                                     /* array*/

     /* ------------------------------------------------------*/
     /* --- end in0g000 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0G005: IN0G005();


    IN0GW1.IN0GWLPR = "IN0G005"; /* <== document last process*/

    goto IN0G010; /* <=== flow to header browse process*/

     /* ---------------------------------------------------------*/
     /* --- end of in0g005 flow                              ---*/
     /* ---------------------------------------------------------*/
    IN0G010: IN0G010();


    IN0GW1.IN0GWLPR = "IN0G010"; /* <== document last process*/

     /* *******************************************************/
     /* *** if error: re-display the screen                ****/
     /* *******************************************************/

    if (IN0GW1.IN0GWERS == "Y")
      goto IN0G010; /* <=== redisplay this screen*/
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is pa2)
      goto IN0G010;
    end /* <=== refresh and reshow screen*/
    if (converseVar.eventKey is pf7)
      goto IN0G010;
    end /* <=== reshow screen for scroll back*/
    if (converseVar.eventKey is pf8)
      goto IN0G010;
    end /* <=== reshow screen for scroll fwrd*/
    if (converseVar.eventKey is pf9)
      goto IN0G020;
    end /* <=== header add screen*/
    if (converseVar.eventKey is pf6)
      IN0GW1.IN0GWUPD = " ";
      if (IN0GW1.IN0GWBRP == "IN0G025")
        goto IN0G025; /* <=== item browse screen*/
      end
      if (IN0GW1.IN0GWBRP == "IN0G040")
        goto IN0G040; /* <=== item maintenance screen*/
      end
    end

     /* *******************************************************/
     /* *** enter  branch                                  ****/
     /* *******************************************************/

    if (converseVar.eventKey is enter)
      if (IN0GW1.IN0GWBRP == "IN0G010")
        goto IN0G010; /* <=== return to this process*/
      else
        goto IN0G020; /* <=== go to header maintenance process*/
      end
    end

     /* *******************************************************/
     /* *** fall thru error - code shouldn't be executed   ****/
     /* *******************************************************/

    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0008); /* <=== severe error msg*/
    goto IN0G010; /* <=== redisplay this screen*/


     /* ------------------------------------------------------*/
     /* --- end in0g000 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0G020: IN0G020();


    IN0GW1.IN0GWLPR = "IN0G020"; /* <== document last process*/

     /* *******************************************************/
     /* *** if error: re-display the screen                ****/
     /* *******************************************************/

    if (IN0GW1.IN0GWERS == "Y")
      if (IN0GW1.IN0GWBRP == "IN0G010")
        goto IN0G010; /* <=== return to last process*/
      else
        goto IN0G020; /* <=== redisplay this screen*/
      end
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is pa2)
      IN0GW1.IN0GWSES = "N"; /* <=== init contention error sw*/
      if (IN0GW1.IN0GWBRP == "IN0G010")
        goto IN0G010; /* <=== return to hdr browse when*/
           /* a delete is canceled*/
      else
        goto IN0G020; /* <=== restart add/chg screen*/
      end
    end

    if (converseVar.eventKey is pf3)
      IN0GW1.IN0GWSES = "N"; /* <=== init contention error sw*/
      goto IN0G010; /* <=== return to last screen*/
    end
     /* *******************************************************/
     /* *** enter  branch                                  ****/
     /* *******************************************************/

    if (IN0GW1.IN0GWSES == "Y")
      goto IN0G020;
    end
    if (converseVar.eventKey is enter)
      if (IN0GW1.IN0GWSES == "Y")
        goto IN0G020; /* <=== contention error reshow scr.*/
      else
        if (IN0GW1.IN0GWUPD == "DEL")
          goto IN0G010; /* <=== return to last process*/
        end
        IN0GW1.IN0GWUPD = " ";
        if (IN0GW1.IN0GWBRP == "IN0G040")
          goto IN0G040; /* <=== go to item maintenance*/
        else
          goto IN0G025; /* <=== go to item browse process*/
        end
      end
    end

     /* *******************************************************/
     /* *** fall thru error - code shouldn't be executed   ****/
     /* *******************************************************/

    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0008); /* <=== severe error msg*/
    goto IN0G010; /* <=== redisplay this screen*/


     /* ------------------------------------------------------*/
     /* --- end in0g020 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0G025: IN0G025();


    IN0GW1.IN0GWLPR = "IN0G025"; /* <== document last process*/

     /* *******************************************************/
     /* *** flow to item browse converse                   ****/
     /* *******************************************************/

    goto IN0G030;


     /* ------------------------------------------------------*/
     /* --- end in0g025 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0G030: IN0G030();


    IN0GW1.IN0GWLPR = "IN0G030"; /* <== document last process*/

     /* *******************************************************/
     /* *** if error: re-display the screen                ****/
     /* *******************************************************/

    if (IN0GW1.IN0GWERS == "Y")
      goto IN0G030; /* <=== redisplay this screen*/
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is pa2)
      goto IN0G025;
    end /* <=== refresh and reshow screen*/
    if (converseVar.eventKey is pf3)
      IN0GW1.IN0GWUPD = " ";
      goto IN0G010; /* <=== exit to header browse process*/
    end
    if (converseVar.eventKey is pf5)
      IN0GW1.IN0GWUPD = " ";
      goto IN0G010; /* <=== exit to header browse process*/
    end
    if (converseVar.eventKey is pf7)
      goto IN0G030;
    end /* <=== reshow screen for scroll back*/
    if (converseVar.eventKey is pf8)
      goto IN0G030;
    end /* <=== reshow screen for scroll fwrd*/
    if (converseVar.eventKey is pf9)
      goto IN0G040;
    end /* <=== header add screen*/

     /* *******************************************************/
     /* *** enter  branch                                  ****/
     /* *******************************************************/

    if (converseVar.eventKey is enter)
      if (IN0GW1.IN0GWUPD == "DEL"
       || IN0GW1.IN0GWUPD == "CHG")
        goto IN0G045; /* <=== go to item maintenance process*/
      end
      goto IN0G040; /* <=== go to find item key process*/
    end

     /* *******************************************************/
     /* *** fall thru error - code shouldn't be executed   ****/
     /* *******************************************************/

    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0008); /* <=== severe error msg*/
    goto IN0G030; /* <=== redisplay this screen*/


     /* ------------------------------------------------------*/
     /* --- end in0g030 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0G040: IN0G040();


    if (IN0GW1.IN0GWERS == "Y"
     || COMMAREA.CAMSG != " ") /* ERROR REDISPLAY SCREEN*/
      IN0GM040.VAGen_EZEMSG = COMMAREA.CAMSG; /* MOVE MESSAGE TO SCREEN*/
      goto IN0G040; /* <=== reshow screen*/
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is pa2)
      goto IN0G040;
    end /* <=== refresh and reshow screen*/
    if (converseVar.eventKey is pf3) /* <=== return to last logical process*/
      if (IN0GW1.IN0GWLPR == "IN0G010")
        IN0GW1.IN0GWLPR = "IN0G040";
        goto IN0G010;
      else
        if (IN0GW1.IN0GWLPR == "IN0G020")
          IN0GW1.IN0GWLPR = "IN0G040";
          goto IN0G020;
        else
          IN0GW1.IN0GWLPR = "IN0G040";
          goto IN0G025;
        end
      end
    end

    if (converseVar.eventKey is pf5) /* <=== return to header browse*/
      IN0GW1.IN0GWLPR = "IN0G040";
      goto IN0G010;
    end

     /* *******************************************************/
     /* *** enter  branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is enter)
      IN0GW1.IN0GWLPR = "IN0G040";
      IN0GW1.IN0GWUPD = "ADD";
      goto IN0G045; /* <=== good edit- go to next process*/
    end


     /* ------------------------------------------------------*/
     /* --- end in0g040 flow                               ---*/
     /* ------------------------------------------------------*/
    IN0G045: IN0G045();


    if (IN0GW1.IN0GWERS == "Y"
     || COMMAREA.CAMSG != " ") /* / redisplay error message.*/
      IN0GM040.VAGen_EZEMSG = COMMAREA.CAMSG; /* move message to screen*/
      goto IN0G045; /* <=== reshow screen if errors*/
    end

     /* *******************************************************/
     /* *** pf key branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is pa2)
      IN0GW1.IN0GWSES = "N"; /* <===init contention error sw*/
      goto IN0G030; /* <=== return to item browse*/
    end

    if (converseVar.eventKey is pf3) /* <=== return to last logical process*/
      IN0GW1.IN0GWSES = "N"; /* <===init contention error sw*/
      if (IN0GW1.IN0GWLPR == "IN0G010")
        IN0GW1.IN0GWLPR = "IN0G045";
        goto IN0G010;
      else
        if (IN0GW1.IN0GWLPR == "IN0G020")
          IN0GW1.IN0GWLPR = "IN0G045";
          goto IN0G020;
        else
          IN0GW1.IN0GWLPR = "IN0G045";
          goto IN0G030;
        end
      end
    end

    if (converseVar.eventKey is pf5) /* <=== return to header browse*/
      IN0GW1.IN0GWSES = "N"; /* <===init contention error sw*/
      IN0GW1.IN0GWLPR = "IN0G045";
      goto IN0G010;
    end

     /* *******************************************************/
     /* *** enter  branches                                ****/
     /* *******************************************************/

    if (converseVar.eventKey is enter)
      if (IN0GW1.IN0GWSES == "Y") /* <=== contention error reshow scr.*/
        goto IN0G045;
      else
        if (IN0GW1.IN0GWUPD == "DEL")
          IN0GW1.IN0GWLPR = "IN0G045";
          IN0GW1.IN0G-FETCH-NEW = "Y"; /* <=== fetch new data*/
          goto IN0G025; /* <=== go back to itm brw after delete*/
        end
        if (IN0GW1.IN0GWUPD == "ADD")
          IN0GW1.IN0GWLPR = "IN0G045";
          IN0GW1.IN0G-FETCH-NEW = "Y"; /* <=== fetch new data*/
          goto IN0G040; /* <=== go back to find a new item*/
        end
        if (IN0GW1.IN0GWUPD == "CHG")
          IN0GW1.IN0GWLPR = "IN0G045";
          IN0GW1.IN0G-FETCH-NEW = "Y"; /* <=== fetch new data*/
          goto IN0G025; /* <=== go back to itm brw after change*/
        end
      end
    end


     /* ------------------------------------------------------*/
     /* --- end in0g045 flow                               ---*/
     /* ------------------------------------------------------*/


  end // end main
end // end IN0G

// initialize
Function IN0G000()

   /* ******************************************************/
   /* *** standard security checking                    ****/
   /* ******************************************************/
      /* check entry security*/


  XSENTRY();

  XSSEGTR(); /* set segmented transaction id*/

   /* ******************************************************/
   /* *** initialize records                            ****/
   /* ******************************************************/

  set IN0GW1 empty;
  set IN0GW2 empty;
  set INAREC empty;
  set INBREC empty;
  set IN1REC empty;
  set IN9REC empty;
  set INQREC empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  set INGREC empty;
  set SY4REC empty;
  set TA1REC empty;

   /* ******************************************************/
   /* *** initialize current date field to include cent.****/
   /* ******************************************************/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = VGVar.currentShortGregorianDate;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0GW1.IN0GWCDT = TA2REC.TA2GRGGN;
  else
    converseLib.validationFailed(17); /* <=== internal date error msg*/
    exit stack;
  end

   /* ******************************************************/
   /* *** init indexes and array # of entries           ****/
   /* ******************************************************/

  IN0GW2.IN0GWHIX = 1;
  IN0GW2.IN0GWIIX = 1;
  IN0GW2.IN0GWHMX = 200; /* <=== set hdr array max entries*/
  IN0GW2.IN0GWIMX = 990; /* <=== SET ITM ARRAY MAX ENTRIES*/

   /* *************************************************************/
   /* call in8000 to get theater of operation*/
   /* *************************************************************/

  XSINS-THEATEROPR();

  if (INRREC.INR-RETURN-CODE < 2) /* 0=req rec found, 1=use default*/
   /* next sentence*/
  else
    converseLib.validationFailed(39); /* system error occurred*/
  end

   /* -----------------------------------------------------*/
   /* --- end of in0g000 process                        ---*/
   /* -----------------------------------------------------*/

end // end IN0G000

// build header array for browse
Function IN0G005()
   /* ******************************************************/
   /* *** build header array for browse - 1st time thru ****/
   /* ******************************************************/

  set IN0GM010 initial; /* <=== init header browse map*/

  set INAREC empty;
  IN0GSXA(); /* <=== select header set all*/

  IN0GW1.IN0GWFTS = "Y"; /* <=== set first time thru switch*/
  IN0GSXB(); /* <=== first select next*/
  if (IN0GW1.IN0GWERS == "Y") /* <=== db error - no sas hdrs*/
    exit stack;
  end


  IN0GW1.IN0GWFTS = "N";

  IN0GW2.IN0GWHIX = 1;
  IN0GW1.IN0GWIX1 = 1;
  while (SQLCA.VAGen_SQLCODE == 0 /* <=== loop to fill browse array*/
   && IN0GW1.IN0GWIX1 <= IN0GW2.IN0GWHMX) /* <=== le max entries*/
    IN0GW2.INASAID[IN0GWHIX] = INAREC.INASAID; /* <=== save hdr key*/
    IN0GSXB(); /* <=== select next header*/
    IN0GW2.IN0GWHIX = IN0GW2.IN0GWHIX + 1;
    IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
  end
  IN0GSXC(); /* <=== close set aside header db*/

  IN0GW2.IN0GWHPP = 1; /* <=== initialize page pointer*/
  IN0GW2.IN0GWHIX = IN0GW2.IN0GWHIX - 1;
  IN0GW2.IN0GWHAB = IN0GW2.IN0GWHIX; /* <=== set array bottom ptr*/
  IN0GW2.IN0GWHIX = 1; /* <=== initialize array index*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* -----------------------------------------------------*/
   /* --- end of in0g005 process                        ---*/
   /* -----------------------------------------------------*/

end // end IN0G005

// browse set aside headers
Function IN0G010()
   /* **********************************************************/
   /* *** format header browse map - in0gm010               ****/
   /* **********************************************************/

  IN0GS10();

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  converse IN0GM010 ;
   /* **********************************************************/
   /* *** edit header browse map - in0gm010                 ****/
   /* **********************************************************/

  IN0GS50();

   /* ---------------------------------------------------------*/
   /* --- end of in0g010 process                            ---*/
   /* ---------------------------------------------------------*/

end // end IN0G010

// maintain set aside header
Function IN0G020()
   /* **********************************************************/
   /* *** format in0gm020 map - header maintenance screen*******/
   /* **********************************************************/

  IN0GS12();

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  converse IN0GM020 ;

   /* **********************************************************/
   /* *** edit in0gm020 map - header maintenance screen  *******/
   /* **********************************************************/

  IN0GS54();


   /* ---------------------------------------------------------*/
   /* --- end of in0gm020 process                        ------*/
   /* ---------------------------------------------------------*/
end // end IN0G020

// build item array for browse
Function IN0G025()


   /* ********************************************************/
   /* *** build item array for item browse screen         ****/
   /* ********************************************************/

  if (IN0GW2.IN0GWIPP < 1 /* screen has not been displayed or*/
   || IN0GW1.IN0G-FETCH-NEW == "Y") /* update was made; get new data*/

    set IN0GM030 initial; /* <=== init item browse map*/

    set INBREC empty;
    INBREC.INASAID = IN0GW2.INASAID[IN0GWHIX];
    IN0GSXE(); /* <=== select item set*/

    IN0GSXF(); /* <=== first select next*/
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(0069);
      IN0GW1.IN0GWERS = "Y";
      exit stack;
    end


    IN0GW2.IN0GWIIX = 1;
    IN0GW1.IN0GWIX1 = 1;
    while (SQLCA.VAGen_SQLCODE == 0 /* <=== loop to fill browse array*/
     && IN0GW1.IN0GWIX1 <= IN0GW2.IN0GWIMX) /* <=== le max entries*/
      IN0GW2.IN0GWSAI[IN0GWIIX] = INBREC.INASAID; /* <=== save itm key*/
      IN0GW2.XWHCD[IN0GWIIX] = INBREC.XWHCD;
      IN0GW2.XOWCD[IN0GWIIX] = INBREC.XOWCD;
      IN0GW2.XGPCD[IN0GWIIX] = INBREC.XGPCD;
      IN0GW2.SY1STNBR[IN0GWIIX] = INBREC.SY1STNBR;
      IN0GW2.SY2CLRID[IN0GWIIX] = INBREC.SY2CLRID;
      IN0GW2.XDMCD[IN0GWIIX] = INBREC.XDMCD;
      IN0GW2.XQACD[IN0GWIIX] = INBREC.XQACD;
      IN0GW2.XSDCD[IN0GWIIX] = INBREC.XSDCD;
      IN0GW2.XSACD[IN0GWIIX] = INBREC.XSACD;
      IN0GW2.XPGCD[IN0GWIIX] = INBREC.XPGCD;
      IN0GW2.XUMCD[IN0GWIIX] = INBREC.XUMCD;
      IN0GW2.INBSATOT[IN0GWIIX] = INBREC.INBSATOT;
      IN0GSXF(); /* <=== select next item*/
      IN0GW2.IN0GWIIX = IN0GW2.IN0GWIIX + 1;
      IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
    end
    IN0GSXG(); /* <=== close set aside items*/

    if (IN0GW2.IN0GWIPP == 0) /* <=== don't erase the page unless*/
      IN0GW2.IN0GWIPP = 1; /* <=== first time thru*/
    end /**/

    IN0GW2.IN0GWIIX = IN0GW2.IN0GWIIX - 1;
    IN0GW2.IN0GWIAB = IN0GW2.IN0GWIIX; /* <=== set array bottom ptr*/
    IN0GW2.IN0GWIIX = 1; /* <=== initialize array index*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  else /* skip above and use previously stored*/
    IN0GS16(); /* items from previous point of display*/
  end

   /* -------------------------------------------------------*/
   /* --- end of in0g025 - prepare item browse process    ---*/
   /* -------------------------------------------------------*/


end // end IN0G025

// browse set aside items
Function IN0G030()
   /* **********************************************************/
   /* *** format in0gm030 - item browse screen              ****/
   /* **********************************************************/

  IN0GS16();

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


  converse IN0GM030 ;

   /* **********************************************************/
   /* *** main edit                                         ****/
   /* **********************************************************/

  IN0GS57();


   /* ---------------------------------------------------------*/
   /* --- end of in0g030 - item browse process              ---*/
   /* ---------------------------------------------------------*/
end // end IN0G030

// find inven. item for add
Function IN0G040()

   /* **********************************************************/
   /* *** format in0gm040 map to find inventory item        ****/
   /* **********************************************************/

  IN0GS17();
  IN0GM040.XXXPRCNM = "IN0G040";
   /* MOVE ' ' TO COMMAREA.CAMSG;/**/

  converse IN0GM040 ;

   /* **********************************************************/
   /* *** edit in0gm040 map - find item for add          *******/
   /* **********************************************************/

  IN0GS61();


   /* ---------------------------------------------------------*/
   /* --- end of in0g040 process                         ------*/
   /* ---------------------------------------------------------*/
end // end IN0G040

// maintain set aside item
Function IN0G045()

   /* **********************************************************/
   /* *** format in0gm040 map to show size information      ****/
   /* **********************************************************/

  IN0GS18();
  IN0GM040.XXXPRCNM = "IN0G045";

  converse IN0GM040 ;

   /* **********************************************************/
   /* *** edit in0gm040 map - validate input set aside   *******/
   /* *** quantities                                     *******/
   /* **********************************************************/

  IN0GS67();


   /* ---------------------------------------------------------*/
   /* --- end of in0g045 process                         ------*/
   /* ---------------------------------------------------------*/
end // end IN0G045

// Check IN8020 return code
Function IN0GS-IN8020-ERRS()
   /*  */
   /* Check IN8020 return codes.  All return codes except zero (no*/
   /* errors) are posted.  A screen message for DB2 deadlock*/
   /* (8000).*/
   /*  */

  if (INGREC.ING-RETURN-CD == 8000) /* DB2 deadlock*/
    converseLib.validationFailed(136);
    return;
  else
    if (INGREC.ING-RETURN-CD <= 2300) /* Edit error or row not found*/
      converseLib.validationFailed(169);
    end
  end

  TA1REC.TA1-GROUP = INGREC.TA1-GROUP;
  TAEREC.SQLCAREC = INGREC.SQLCAREC;

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TA1REC.TA1TBLKE = INGREC.ING-INPUT-DATA; /* IN8020 parameters*/
  TA1REC.TA1FUNC = "POST";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end IN0GS-IN8020-ERRS

// Verify inv upd (IN9060) rtn cd
Function IN0GS-IN9060-ERRS()
   /*  */
   /* Verify IN9060 return codes.  All return codes except zero (no*/
   /* errors) are posted for now. A screen message for DB2 deadlock*/
   /* is displayed.*/
   /*  */
   /* Do not post rc 0130 - XIR_TRN_RSN_SET_FL not set for setaside*/
   /* 2010 - Invalid XIT-XIR code combination*/
   /* 0300 series - Negative qty's*/
   /*  */

  if (INF-RETURN-CODE == 0130  /* Do not post error 0130*/
   || INF-RETURN-CODE == 2010  /* 2010*/
   || (INF-RETURN-CODE >= 0300 /* 0300 series*/
   && INF-RETURN-CODE <= 0390))
    return;
  end

  if (INF-RETURN-CODE == 8000) /* DB2 deadlock*/
    converseLib.validationFailed(94); /* Inv database in use*/
    IN0GW1.IN0GWERS = "Y"; /* Set error switch to yes*/
    return;
  end

  TA1REC.TA1-GROUP = INFREC.TA1-GROUP;
  TAEREC.SQLCAREC = INFREC.SQLCAREC;
  TA1REC.TA1FUNC = "POST";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};


end // end IN0GS-IN9060-ERRS

// Format inv upd (IN9060) parm
Function IN0GS-LOAD-INFREC()
   /*  */
   /* Format INFREC for IN9060 processing.*/
   /*  */

  INFREC.INF-PROCESS-CODE = "80"; /* 80 - SET ASIDE*/
  INFREC.XWH-WHSE-CD = IN0GM040.XWHCD; /* WAREHOUSE CODE*/
  INFREC.XOW-OWN-GRP-CD = IN0GM040.XOWCD; /* OWNER GROUP CODE*/
  INFREC.XGP-GPC-CD = IN0GM040.XGPCD; /* GPC CODE*/
  INFREC.SY-STY-NBR = IN0GM040.SY1STNBR; /* STYLE NUMBER*/
  INFREC.SY-COLR-CD-ID = IN0GM040.SY2CLRID; /* COLOR ID*/
  INFREC.XDM-DIM-CD = IN0GM040.XDMCD; /* DIMINISION CODE*/
  INFREC.XQA-QUAL-CD = IN0GM040.XQACD; /* QUALITY CODE*/
  INFREC.XSD-SPEC-CD = IN0GM040.XSDCD; /* SPEC CODE*/
  INFREC.XSA-SHD-CD = IN0GM040.XSACD; /* SHADE CODE*/
  INFREC.XPG-PKG-TYP-CD = IN0GM040.XPGCD; /* PACKAGE CODE*/
  INFREC.XUM-UOM-CD = IN0GM040.XUMCD; /* UNIT OF MEASURE CODE*/
  INFREC.IN-AUD-TRN-DOC-CD = "S"; /**/
  INFREC.IN-AUD-TRN-DOC-NBR = IN0GM040.INASAID; /**/
  INFREC.IN-AUD-TRN-DT = TA2REC.TA2GRGGN; /* CURRENT DATE*/
  INFREC.IN-AUD-TRN-HHMMSS = TA2REC.TA2TIMEN; /* TIME*/
  INFREC.XIT-TRN-TYP-CD = "80"; /**/
  INFREC.XIR-TRN-RSN-CD = "908"; /* SEE COMMENTS ABOVE*/
  INFREC.XIF-TRN-FLD-CD = "04"; /* UPDATE SETA SIDE QTY BUCKETS*/
  INFREC.IN-AUD-TRN-USER-ID = COMMAREA.CAUSERID; /* USER ID*/
  INFREC.IN-AUD-TRN-DOC-DT = TA2REC.TA2GRGGN; /* DATE*/
  INFREC.ZZ-CHNG-PGM-ID = "IN0G"; /* PROGRAM ID*/
  INFREC.ZZ-CHNG-DT = TA2REC.TA2GRGGN; /**/
  INFREC.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM; /**/
  INFREC.TA1-GROUP = TA1REC.TA1-GROUP;
end // end IN0GS-LOAD-INFREC

// update inventory items
Function IN0GS-LOAD-QTYS()

   /* *****************************************************/
   /* *** Load quantity to update set aside            ****/
   /* ***  note: USE THE SIDE ID AS AN INDEX FOR UPDATING **/
   /* ***  THE INF-CHG-QTY BUCKET.                     ****/
   /* *****************************************************/

  if (IN0GW1.IN0GWUPD == "ADD"
   || IN0GW1.IN0GWUPD == "CHG")
    IN0GW1.IN0GWSIX = IN0GW1.IN0GWSID[IN0GWIX1]; /* USE RIGHT BUCKET*/
    INFREC.INF-CHG-QTY[IN0GWSIX] = IN0GM040.IN0GMAQT[IN0GWIX1];
  end

   /* *****************************************************/
   /* *** update inventory item for a deleted sas item ****/
   /* *****************************************************/

  if (IN0GW1.IN0GWUPD == "DEL")
    IN0GW1.IN0GWSIX = IN0GW1.IN0GWSID[IN0GWIX1];
    INFREC.INF-CHG-QTY[IN0GWSIX] = IN0GM040.INBSAQTY[IN0GWIX1] * -1;
  end

   /* *********************************************************/
   /* *** end of statement group                           ****/
   /* *********************************************************/

end // end IN0GS-LOAD-QTYS

// build header browse screen
Function IN0GS10()


   /* *******************************************************/
   /* *** build set aside header browse screen for       ****/
   /* *** header array from page pointer position        ****/
   /* *******************************************************/

  if (IN0GW1.IN0GWERS == "Y") /* <=== db or edit errors*/
    return;
  end

   /* ******* start building map from array index position*/
  set IN0GM010 initial;
  IN0GM010.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0GM010.IN0GMSID = 0; /* <=== init set aside key fld on map*/
   /* ****************************************************************/
   /* if returning from a delete in in0gs81 the following will*/
   /* allow the deletion message to be displaied.*/
   /* ==> the prod sas-id check was added to allow the 'can't do prod*/
   /* ==> deletions' message to be displayed, if one was attempted.*/
   /* ****************************************************************/
  if (IN0GW1.IN0GWUPD == "DEL")
    if (IN0GM020.INASAID == 62 /* production sas-ids cannot*/
     || IN0GM020.INASAID == 63 /* be deleted by this application*/
     || IN0GM020.INASAID == 64 /* under any circumstances.*/
     || IN0GM020.INASAID == 65 /* prod ids 62 - 69.*/
     || IN0GM020.INASAID == 66 
     || IN0GM020.INASAID == 67 
     || IN0GM020.INASAID == 68 
     || IN0GM020.INASAID == 69)
        /* next sentence*/
    else
      converseLib.validationFailed(0090); /* <=== successful delete msg*/
      IN0GW1.IN0GWUPD = " ";
    end
  end

  if (IN0GW2.IN0GWHAB == 0) /* <=== array is empty*/
    converseLib.validationFailed(0070); /* <=== no set aside hdrs msg*/
    return;
  end

  if (IN0GW2.IN0GWHPP > IN0GW2.IN0GWHAB) /* <=== deleted only hdr on*/
    return; /* this screen*/
  end


  IN0GW2.IN0GWHIX = IN0GW2.IN0GWHPP; /* <=== set to top of page*/
  INAREC.INASAID = IN0GW2.INASAID[IN0GWHIX]; /* <=== init 's ' read*/
  IN0GSXD(); /* <=== first select unique*/
  if (SQLCA.VAGen_SQLCODE != 0)
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0071); /* <=== database error*/
    return;
  end

  IN0GW1.IN0GWIX1 = 1;
  while (IN0GW1.IN0GWIX1 <= 13
   && IN0GW2.IN0GWHIX <= IN0GW2.IN0GWHAB) /* <=== not past array bottom*/
    IN0GS80(); /* <=== build map line*/
    IN0GW2.IN0GWHIX = IN0GW2.IN0GWHIX + 1;
    if (IN0GW2.IN0GWHIX <= IN0GW2.IN0GWHAB)
      set INAREC empty;
      INAREC.INASAID = IN0GW2.INASAID[IN0GWHIX];
      IN0GSXD(); /* <=== select unique on sas hdr*/
      IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
    end
  end


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GS10

// format in0gm020 - header main.
Function IN0GS12()


   /* ***********************************************************/
   /* *** format in0gm020 - header maintenance screen        ****/
   /* ***********************************************************/

  if (IN0GW1.IN0GWERS == "Y") /* <=== db or edit errors*/
    return;
  end

  if (IN0GW1.IN0GWSES == "Y") /* <=== contention error*/
    converseLib.validationFailed(0083);
    return;
  end

  if (IN0GW1.IN0GWLPR == "IN0G030" /* <=== leave screen as was*/
   || IN0GW1.IN0GWLPR == "IN0G040" /* <=== leave screen as was*/
   || IN0GW1.IN0GWLPR == "IN0G045") /* <=== leave screen as was*/
    return;
  end

  set IN0GM020 initial; /* <=== coming in from hdr browse*/
  IN0GM020.XXXCURDT = VGVar.currentShortGregorianDate;

  if (IN0GW1.IN0GWUPD == "ADD")
    IN0GS13(); /* <=== setup add screen*/
    return;
  end

  if (IN0GW1.IN0GWUPD == "CHG")
    IN0GS14(); /* <=== setup change screen*/
    return;
  end

  if (IN0GW1.IN0GWUPD == "DEL")
    IN0GS15(); /* <=== setup delete screen*/
    return;
  end


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0GS12

// prepare add screen
Function IN0GS13()


   /* ***********************************************************/
   /* *** format for an add screen                           ****/
   /* ***********************************************************/

  IN0GSXI(); /* <=== get next set aside id control*/
                                   /* rec*/
  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end

  IN0GM020.INASAID = INEREC.INENSAID;
                                   /* <=== move set aside id to map*/

  IN0GM020.ZZZSDT = VGVar.currentShortGregorianDate; /* <=== initialize setup date on map*/


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0GS13

// build change screen
Function IN0GS14()


   /* ***********************************************************/
   /* *** format for a change screen                         ****/
   /* ***********************************************************/

  INAREC.INASAID = IN0GW2.INASAID[IN0GWHIX];
  IN0GSXD(); /* <=== read header for change*/
  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end

  set IN0GM020.INASAOWN cursor, normal;
  set IN0GM020.XNDCD normal;
  set IN0GM020.XIRCD normal;
  set IN0GM020.INAPRGDT normal;
  set IN0GM020.INASADC1 normal;
  set IN0GM020.INASADC2 normal;
  set IN0GM020.INASADC3 normal;
  set IN0GM020.INASADC4 normal;

  IN0GM020.INASAID = INAREC.INASAID;

  IN0GM020.INASAOWN = INAREC.INASAOWN;
  IN0GW1.INASAOWN = INAREC.INASAOWN;

  IN0GM020.XNDCD = INAREC.XNDCD;
  IN0GW1.XNDCD = INAREC.XNDCD;

  if (INAREC.XNDCD in XNDTBL.XNDCD)
    IN0GM020.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
  else
    IN0GM020.XNDDESC = " ";
  end

  IN0GM020.XIRCD = INAREC.XIRCD;
  IN0GW1.XIRCD = INAREC.XIRCD;

  if (INAREC.XIRCD in XIRTBL.XIRCD)
    IN0GM020.XIRDESC = XIRTBL.XIRDESC[sysVar.arrayIndex];
  else
    IN0GM020.XIRDESC = " ";
  end

   /* ***** translate purge date into proper format*/
  set TA2REC empty;
  set TA2REC01 empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = INRREC08.INR-INTRN-DT-FMT[INR-SEARCH-SUB]; /* from IN8000*/
  TA2REC.TA2GRGGN = INAREC.INAPRGDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)

    if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* If Europe:*/
      IN0GM020.INAPRGDT = TA2REC01.TA2-GREG-DDMMYY; /* use DDMMYY*/
      IN0GW1.IN0GWPRG = TA2REC01.TA2-GREG-DDMMYY; /* store DDMMYY*/
    else /* If Domestic*/
      IN0GM020.INAPRGDT = TA2REC.TA2GRGA; /* use MMDDYY*/
      IN0GW1.IN0GWPRG = TA2REC.TA2GRGA; /* store MMDDYY*/
    end

  else
    IN0GM020.INAPRGDT = " ";
  end
   /* ***************************************************/

  if (INAREC.ZZZSDT != 0)
    IN0GM020.ZZZSDT = INAREC.ZZZSDT;
  end

  IN0GM020.INASADC1 = INAREC.INASADC1;
  IN0GW1.INASADC1 = INAREC.INASADC1;

  IN0GM020.INASADC2 = INAREC.INASADC2;
  IN0GW1.INASADC2 = INAREC.INASADC2;

  IN0GM020.INASADC3 = INAREC.INASADC3;
  IN0GW1.INASADC3 = INAREC.INASADC3;

  IN0GM020.INASADC4 = INAREC.INASADC4;
  IN0GW1.INASADC4 = INAREC.INASADC4;


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0GS14

// build delete screen
Function IN0GS15()


   /* ***********************************************************/
   /* *** format for a delete screen                         ****/
   /* ***********************************************************/

  INAREC.INASAID = IN0GW2.INASAID[IN0GWHIX];
  IN0GSXD(); /* <=== read header for delete*/
  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end


  set IN0GM020.CATOAP cursor;
  set IN0GM020.INASAOWN protect;
  set IN0GM020.XNDCD protect;
  set IN0GM020.XIRCD protect;
  set IN0GM020.INAPRGDT protect;
  set IN0GM020.INASADC1 protect;
  set IN0GM020.INASADC2 protect;
  set IN0GM020.INASADC3 protect;
  set IN0GM020.INASADC4 protect;

  IN0GM020.INASAID = INAREC.INASAID;
  IN0GM020.INASAOWN = INAREC.INASAOWN;
  IN0GM020.XNDCD = INAREC.XNDCD;

  if (INAREC.XNDCD in XNDTBL.XNDCD)
    IN0GM020.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
  else
    IN0GM020.XNDDESC = " ";
  end

  IN0GM020.XIRCD = INAREC.XIRCD;

  if (INAREC.XIRCD in XIRTBL.XIRCD)
    IN0GM020.XIRDESC = XIRTBL.XIRDESC[sysVar.arrayIndex];
  else
    IN0GM020.XIRDESC = " ";
  end

   /* ***** translate purge date into proper format*/
  set TA2REC empty;
  set TA2REC01 empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = INRREC08.INR-INTRN-DT-FMT[INR-SEARCH-SUB]; /* from IN8000*/
  TA2REC.TA2GRGGN = INAREC.INAPRGDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)

    if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* If Europe:*/
      IN0GM020.INAPRGDT = TA2REC01.TA2-GREG-DDMMYY; /* DDMMYY*/
    else /* IF Domestic:*/
      IN0GM020.INAPRGDT = TA2REC.TA2GRGA; /* MMDDYY*/
    end

  else
    IN0GM020.INAPRGDT = " ";
  end
   /* ***************************************************/

  if (INAREC.ZZZSDT != 0)
    IN0GM020.ZZZSDT = INAREC.ZZZSDT;
  end

  IN0GM020.INASADC1 = INAREC.INASADC1;
  IN0GM020.INASADC2 = INAREC.INASADC2;
  IN0GM020.INASADC3 = INAREC.INASADC3;
  IN0GM020.INASADC4 = INAREC.INASADC4;

   /* ***********************************************************/
   /* check if no set aside items to allow delete of header*/

  set INBREC empty;
  INBREC.INASAID = INAREC.INASAID;
  IN0GSXE(); /* select scan on set aside items*/
  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  else
    IN0GSXF(); /* select next set aside item*/
    if (SQLCA.VAGen_SQLCODE == 0) /* set aside items found*/
      converseLib.validationFailed(0152); /* delete of set aside header not*/
                                   /* allowed*/
      IN0GW1.IN0GWUPD = "CAN"; /* cancel delete*/
      IN0GW1.IN0GWERS = "Y";
      IN0GSXG(); /* close for items set*/
      return;
    else /* could only be sqlcode 100 not found*/
      IN0GSXG(); /* close for items set*/
    end
  end
   /* ***********************************************************/

  converseLib.validationFailed(0076); /* <=== confirm delete message*/

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0GS15

// format in0gm030 - item browse
Function IN0GS16()


   /* *******************************************************/
   /* *** build set aside item browse screen for         ****/
   /* *** item array from page pointer position          ****/
   /* *******************************************************/

  if (IN0GW1.IN0GWERS == "Y") /* <=== db or edit errors*/
    if (IN0GW1.IN0G-SEARCH-KEY-FL == "Y" /* <=== search key entered or*/
     || IN0GW1.IN0G-FETCH-NEW == "Y")    /* <=== new data acquired - go on*/
      IN0GW1.IN0GWERS = "N"; /* <=== reset error switch*/
      IN0GW1.IN0G-FETCH-NEW = "N"; /* <=== reset fetch new switch*/
    else
      return;
    end
  end

   /* ******* start building map from array index position*/
  set IN0GM030 initial;

  if (IN0GW1.IN0GWUPD == "CHG"
   && converseVar.eventKey is enter)
    converseLib.validationFailed(0095); /* <=== successful update msg*/
  end

  if (IN0GW1.IN0GWUPD == "DEL"
   && converseVar.eventKey is enter)
    converseLib.validationFailed(0091); /* <=== successful delete msg*/
    if (IN0GW2.IN0GWIIX == 0) /* <=== item array is now empty*/
      return;
    end
  end

  IN0GW1.IN0GWUPD = " "; /* reset update switch*/

  IN0GM030.XXXCURDT = VGVar.currentShortGregorianDate;

  if (IN0GW1.IN0GWLPR == "IN0G040"
   || IN0GW1.IN0GWLPR == "IN0G045") /**/
    IN0GM030.INASAID = IN0GM040.INASAID; /**/
  else /**/
    if (IN0GW1.IN0GWLPR == "IN0G020") /**/
      IN0GM030.INASAID = IN0GM020.INASAID; /**/
    else
      if (IN0GW2.IN0GWHAB > 0) /* <=== header array is not empty use it*/
        IN0GM030.INASAID = IN0GW2.INASAID[IN0GWHIX];
                                   /* <== move said to map*/
      end /**/
    end /**/
  end /**/

  if (IN0GW2.IN0GWIAB == 0) /* <=== don't build map if array empty*/
    return;
  end


  /* ********************************************************************/
  /* if search key was entered, find the index where it*/
  /* occurs and display the items forward from that point*/
  /* ********************************************************************/

  if (IN0GW1.IN0G-SEARCH-KEY-FL == "Y") /* search key entered?*/
    IN0GW1.IN0GWIX1 = 1;
    IN0GW2.IN0GWIIX = 0;

    while (IN0GW1.IN0GWIX1 <= IN0GW2.IN0GWIAB) /* <=== not past array bottom*/
      IN0GW1.IN0G-OG-KEY = IN0GW2.XOWCD[IN0GWIX1]; /* this will*/
                                 /* eliminate owner group from the search*/
      if (IN0GW2.IN0G-SEARCH-KEY[IN0GWIX1] == IN0GW1.IN0G-SEARCH-KEY) /* ;*/
        IN0GW2.IN0GWIIX = IN0GW1.IN0GWIX1; /* we have a hit -*/
        IN0GW1.IN0GWIX1 = IN0GW2.IN0GWIAB + 1; /* get out of loop*/
      else
        if (IN0GW2.IN0G-SEARCH-KEY[IN0GWIX1] < IN0GW1.IN0G-SEARCH-KEY)
                                /* still less than, continue to loop*/
        else /* greater than - passed it,*/
          IN0GW2.IN0GWIIX = IN0GW1.IN0GWIX1; /* close as possible -*/
          IN0GW1.IN0GWIX1 = IN0GW2.IN0GWIAB + 1; /* get out of loop*/
        end
      end
      IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
    end

    if (IN0GW2.IN0GWIIX == 0) /* search-key was not in the range*/
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(174); /* out of range*/
      set IN0GM030.IN0G-WHSE-KEY cursor, bold;
      set IN0GM030.IN0G-GPC-KEY bold;
      set IN0GM030.IN0G-STYLE-KEY bold;
      return; /* get out & display error*/
    end

    IN0GW1.IN0G-SEARCH-KEY = " "; /* reset key*/
    IN0GW1.IN0G-SEARCH-KEY-FL = "N"; /* reset flag*/

    IN0GW2.IN0GWIPP = IN0GW2.IN0GWIIX; /* save top of page*/

  else /* no search key entered  -*/

    IN0GW2.IN0GWIIX = IN0GW2.IN0GWIPP; /* use next one in sequence*/

  end

  IN0GW1.IN0GWIX1 = 1;
  while (IN0GW1.IN0GWIX1 <= 13
   && IN0GW2.IN0GWIIX <= IN0GW2.IN0GWIAB) /* <=== not past array bottom*/
    IN0GS87(); /* <=== build item browse line*/
    IN0GW2.IN0GWIIX = IN0GW2.IN0GWIIX + 1;
    if (IN0GW2.IN0GWIIX <= IN0GW2.IN0GWIAB) /* don't go past last item*/
      IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
    end
  end

   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0GS16

// format in0gm040 to find item
Function IN0GS17()


   /* ***********************************************************/
   /* *** format in0gm040 for finding an inventory item      ****/
   /* ***********************************************************/

  if (IN0GW1.IN0GWERS == "Y"
   || COMMAREA.CAMSG != " ") /* db or edit errors.*/
    return;
  end

  if (IN0GW1.IN0GWLPR == "IN0G045")
    converseLib.validationFailed(0096); /* <===item successfully added msg*/
  end

  set IN0GM040 initial;
  IN0GM040.XXXCURDT = VGVar.currentShortGregorianDate;

  if (IN0GW1.IN0GWLPR == "IN0G020")
    IN0GM040.INASAID = IN0GM020.INASAID; /**/
  else /**/
    if (IN0GW1.IN0GWLPR == "IN0G030")
      IN0GM040.INASAID = IN0GM030.INASAID; /**/
    else /**/
      if (IN0GW2.IN0GWHAB > 0) /* item array is empty*/
        IN0GM040.INASAID = IN0GW2.INASAID[IN0GWHIX]; /**/
      end /**/
    end /**/
  end /**/

  IN0GM040.XOWCD = "00";
  IN0GM040.XGPCD = " ";
  IN0GM040.XDMCD = "00";
  IN0GM040.XQACD = "01";
  IN0GM040.XSDCD = "000";
  IN0GM040.XSACD = "000";
  IN0GM040.XPGCD = "00";
  IN0GM040.XUMCD = "01";


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0GS17

// format in0gm040 for size info
Function IN0GS18()


   /* ***********************************************************/
   /* *** format in0gm040 - with size/set aside information  ****/
   /* ***********************************************************/

  if (IN0GW1.IN0GWERS == "Y"
   || COMMAREA.CAMSG != " ") /* db or edit errors*/
    return;
  end

  if (IN0GW1.IN0GWSES == "Y")
    converseLib.validationFailed(0085); /* <=== IN USE ERROR*/
    return;
  end

  if (IN0GW1.IN0GWUPD == "CHG" /* <=== add was cleared in 40 process*/
   || IN0GW1.IN0GWUPD == "DEL")
    set IN0GM040 initial;
    IN0GM040.XXXCURDT = VGVar.currentShortGregorianDate;
  end

  set IN0GM040.INASAID skip;
  set IN0GM040.XWHCD skip;
  set IN0GM040.XOWCD skip;
  set IN0GM040.XGPCD skip;
  set IN0GM040.SY1STNBR skip;
  set IN0GM040.SY2CLRID skip;
  set IN0GM040.XDMCD skip;
  set IN0GM040.XQACD skip;
  set IN0GM040.XPGCD skip;
  set IN0GM040.XUMCD skip;

  if (IN0GW1.IN0GWUPD == "ADD")
    IN0GS19(); /* <=== setup add screen*/
  else
    if (IN0GW1.IN0GWUPD == "CHG")
      IN0GS20(); /* <=== setup change screen*/
    else
      if (IN0GW1.IN0GWUPD == "DEL")
        IN0GS21(); /* <=== setup delete screen*/
      end
    end
  end


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/
end // end IN0GS18

// format in0gm040 for add
Function IN0GS19()


   /* ***********************************************************/
   /* *** format for an add screen                           ****/
   /* ***********************************************************/

   /* *******************************************************/
   /* *** obtain all valid size translations             ****/
   /* *******************************************************/

  set SY4REC empty;
  SY4REC.SY4SZSCL = INGREC.SY4SZSCL;

  IN0GSXS(); /* <=== obtain size scale*/

  if (IN0GW1.IN0GWERS == "Y")
    return;
  end

  set INBREC empty; /* <=== initialize sas item*/

  IN0GW1.IN0GWCTR = 0;
  IN0GW1.IN0GWIX1 = 1;
  while (IN0GW1.IN0GWIX1 <= 40)
    IN0GM040.INBSAQTY[IN0GWIX1] = 0;
    if (INGREC.SY3FRGUT[IN0GWIX1] > " ")
      IN0GW1.IN0GWCTR = IN0GW1.IN0GWCTR + 1;
       /* ** move size description & make qty flds modifiable ***/
      IN0GM040.SY4IDDSC[IN0GWCTR] = SY4REC.SY4IDDSC[IN0GWIX1];
      IN0GW1.IN0GWSID[IN0GWCTR] = IN0GW1.IN0GWIX1;
      set IN0GM040.SY4IDDSC[IN0GWCTR] skip;
      set IN0GM040.INBSAQTY[IN0GWCTR] skip;
      set IN0GM040.IN0GMAQT[IN0GWCTR] normal;
    end
    IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
  end

   /* ******* setup hash total fields ************************/
  IN0GW1.IN0GWCTR = IN0GW1.IN0GWCTR + 1;
  IN0GM040.INBSAQTY[IN0GWCTR] = 0;
  IN0GM040.SY4IDDSC[IN0GWCTR] = "TOTAL";
  set IN0GM040.SY4IDDSC[IN0GWCTR] skip;
  set IN0GM040.INBSAQTY[IN0GWCTR] skip, invisible;
  set IN0GM040.IN0GMAQT[IN0GWCTR] normal;

   /* *******************************************************/
   /* *** move literals to map                           ****/
   /* ***  - only show if detail qtys are on this line   ****/
   /* *******************************************************/

  if (IN0GW1.IN0GWIX1 > 0)
    set IN0GM040.IN0GMSLT[1] skip;
    set IN0GM040.IN0GMCLT[1] skip;
    set IN0GM040.IN0GMALT[1] skip;
  else
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0067);
    return;
  end

  if (IN0GW1.IN0GWIX1 > 8)
    set IN0GM040.IN0GMSLT[2] skip;
    set IN0GM040.IN0GMCLT[2] skip;
    set IN0GM040.IN0GMALT[2] skip;
  end

  if (IN0GW1.IN0GWIX1 > 16)
    set IN0GM040.IN0GMSLT[3] skip;
    set IN0GM040.IN0GMCLT[3] skip;
    set IN0GM040.IN0GMALT[3] skip;
  end

  if (IN0GW1.IN0GWIX1 > 24)
    set IN0GM040.IN0GMSLT[4] skip;
    set IN0GM040.IN0GMCLT[4] skip;
    set IN0GM040.IN0GMALT[4] skip;
  end

  if (IN0GW1.IN0GWIX1 > 32)
    set IN0GM040.IN0GMSLT[5] skip;
    set IN0GM040.IN0GMCLT[5] skip;
    set IN0GM040.IN0GMALT[5] skip;
  end

  set IN0GM040.IN0GMAQT[1] cursor;

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0GS19

// format in0gm040 for change
Function IN0GS20()

   /* ***********************************************************/
   /* *** format for a change screen                         ****/
   /* ***********************************************************/

   /* *******************************************************/
   /* *** obtain all valid size translations             ****/
   /* *******************************************************/

  if (IN0GW1.IN0GWLPR == "IN0G040")
     /* ** next sentence            <=== inbrec read in 40 process*/
  else
    set INBREC empty; /* <=== initialize sas item*/
    INBREC.INBKEY = IN0GW2.IN0GWIBK[IN0GWIIX]; /* <= get array key*/
    IN0GSXH(); /* <=== get set aside item row*/
    if (SQLCA.VAGen_SQLCODE != 0) /* <=== db error*/
      converseLib.validationFailed(0071); /* <=== set aside db2 error*/
      IN0GW1.IN0GWERS = "Y";
      return;
    end
  end

  IN0GM040.INASAID = INBREC.INASAID;
  IN0GM040.XWHCD = INBREC.XWHCD;
  IN0GM040.XOWCD = INBREC.XOWCD;
  IN0GM040.XGPCD = INBREC.XGPCD;
  IN0GM040.SY1STNBR = INBREC.SY1STNBR;
  IN0GM040.SY2CLRID = INBREC.SY2CLRID;
  IN0GM040.XDMCD = INBREC.XDMCD;
  IN0GM040.XQACD = INBREC.XQACD;
  IN0GM040.XSDCD = INBREC.XSDCD;
  IN0GM040.XSACD = INBREC.XSACD;
  IN0GM040.XPGCD = INBREC.XPGCD;
  IN0GM040.XUMCD = INBREC.XUMCD;

  IN0GS66(); /* <=== get size/scale descrips & life cycle code*/

  set SY4REC empty;
  SY4REC.SY4SZSCL = INGREC.SY4SZSCL;

  IN0GSXS(); /* <=== obtain size scale*/

  if (IN0GW1.IN0GWERS == "Y")
    return;
  end

  IN0GW1.IN0GWCTR = 0;
  IN0GW1.IN0GWIX1 = 1;
  while (IN0GW1.IN0GWIX1 <= 40)
    if (INGREC.SY3FRGUT[IN0GWIX1] > " "
     || INBREC.INBSAQTY[IN0GWIX1] != 0)
      IN0GW1.IN0GWCTR = IN0GW1.IN0GWCTR + 1;
       /* ** move size description & make qty flds modifiable ***/
       /* ** also move in current set aside item qtys         ***/
      IN0GM040.SY4IDDSC[IN0GWCTR] = SY4REC.SY4IDDSC[IN0GWIX1];
      IN0GM040.INBSAQTY[IN0GWCTR] = INBREC.INBSAQTY[IN0GWIX1];
      IN0GW1.IN0GWSID[IN0GWCTR] = IN0GW1.IN0GWIX1;
      set IN0GM040.SY4IDDSC[IN0GWCTR] skip;
      set IN0GM040.INBSAQTY[IN0GWCTR] skip;
      set IN0GM040.IN0GMAQT[IN0GWCTR] normal;
    end
    IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
  end

   /* ******* setup hash total fields ************************/
  IN0GW1.IN0GWCTR = IN0GW1.IN0GWCTR + 1;
  IN0GM040.INBSAQTY[IN0GWCTR] = 0;
  IN0GM040.SY4IDDSC[IN0GWCTR] = "TOTAL";
  set IN0GM040.SY4IDDSC[IN0GWCTR] skip;
  set IN0GM040.INBSAQTY[IN0GWCTR] skip, invisible;
  set IN0GM040.IN0GMAQT[IN0GWCTR] normal;


   /* *******************************************************/
   /* *** move literals to map                           ****/
   /* ***  - only show if detail qtys are on this line   ****/
   /* *******************************************************/

  if (IN0GW1.IN0GWIX1 > 0)
    set IN0GM040.IN0GMSLT[1] skip;
    set IN0GM040.IN0GMCLT[1] skip;
    set IN0GM040.IN0GMALT[1] skip;
  else
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0067);
    return;
  end

  if (IN0GW1.IN0GWIX1 > 8)
    set IN0GM040.IN0GMSLT[2] skip;
    set IN0GM040.IN0GMCLT[2] skip;
    set IN0GM040.IN0GMALT[2] skip;
  end

  if (IN0GW1.IN0GWIX1 > 16)
    set IN0GM040.IN0GMSLT[3] skip;
    set IN0GM040.IN0GMCLT[3] skip;
    set IN0GM040.IN0GMALT[3] skip;
  end

  if (IN0GW1.IN0GWIX1 > 24)
    set IN0GM040.IN0GMSLT[4] skip;
    set IN0GM040.IN0GMCLT[4] skip;
    set IN0GM040.IN0GMALT[4] skip;
  end

  if (IN0GW1.IN0GWIX1 > 32)
    set IN0GM040.IN0GMSLT[5] skip;
    set IN0GM040.IN0GMCLT[5] skip;
    set IN0GM040.IN0GMALT[5] skip;
  end

  set IN0GM040.IN0GMAQT[1] cursor;

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0GS20

// format in0gm040 for delete
Function IN0GS21()

   /* ***********************************************************/
   /* *** format for a delete screen                         ****/
   /* ***********************************************************/

   /* *******************************************************/
   /* *** obtain all valid size translations             ****/
   /* *******************************************************/

  set INBREC empty; /* <=== initialize sas item*/
  INBREC.INBKEY = IN0GW2.IN0GWIBK[IN0GWIIX]; /* <= get array key*/
  IN0GSXH(); /* <=== get set aside item row*/

  if (SQLCA.VAGen_SQLCODE != 0)
    converseLib.validationFailed(0071); /* <=== set aside db2 error*/
    IN0GW1.IN0GWERS = "Y";
    return;
  end

  IN0GM040.INASAID = INBREC.INASAID;
  IN0GM040.XWHCD = INBREC.XWHCD;
  IN0GM040.XOWCD = INBREC.XOWCD;
  IN0GM040.XGPCD = INBREC.XGPCD;
  IN0GM040.SY1STNBR = INBREC.SY1STNBR;
  IN0GM040.SY2CLRID = INBREC.SY2CLRID;
  IN0GM040.XDMCD = INBREC.XDMCD;
  IN0GM040.XQACD = INBREC.XQACD;
  IN0GM040.XSDCD = INBREC.XSDCD;
  IN0GM040.XSACD = INBREC.XSACD;
  IN0GM040.XPGCD = INBREC.XPGCD;
  IN0GM040.XUMCD = INBREC.XUMCD;

  IN0GS66(); /* <=== get size/scale descrips & life cycle code*/

  set SY4REC empty;
  SY4REC.SY4SZSCL = INGREC.SY4SZSCL;

  IN0GSXS(); /* <=== obtain size scale*/

  if (IN0GW1.IN0GWERS == "Y")
    return;
  end


  IN0GW1.IN0GWCTR = 0;
  IN0GW1.IN0GWIX1 = 1;
  while (IN0GW1.IN0GWIX1 <= 40)
    if (INGREC.SY3FRGUT[IN0GWIX1] > " ")
      IN0GW1.IN0GWCTR = IN0GW1.IN0GWCTR + 1;
       /* ** move size description & make qty flds modifiable ***/
       /* ** also move in current set aside item qtys         ***/
      IN0GM040.SY4IDDSC[IN0GWCTR] = SY4REC.SY4IDDSC[IN0GWIX1];
      IN0GM040.INBSAQTY[IN0GWCTR] = INBREC.INBSAQTY[IN0GWIX1];
      IN0GW1.IN0GWSID[IN0GWCTR] = IN0GW1.IN0GWIX1;
      set IN0GM040.SY4IDDSC[IN0GWCTR] skip;
      set IN0GM040.INBSAQTY[IN0GWCTR] skip;
      set IN0GM040.IN0GMAQT[IN0GWCTR] skip, invisible;
    end
    IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
  end

   /* *******************************************************/
   /* *** move literals to map                           ****/
   /* ***  - only show if detail qtys are on this line   ****/
   /* *******************************************************/

  if (IN0GW1.IN0GWCTR > 0)
    set IN0GM040.IN0GMSLT[1] skip;
    set IN0GM040.IN0GMCLT[1] skip;
    set IN0GM040.IN0GMALT[1] skip, invisible;
  else
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0067);
    return;
  end

  if (IN0GW1.IN0GWCTR > 8)
    set IN0GM040.IN0GMSLT[2] skip;
    set IN0GM040.IN0GMCLT[2] skip;
    set IN0GM040.IN0GMALT[2] skip, invisible;
  end

  if (IN0GW1.IN0GWCTR > 16)
    set IN0GM040.IN0GMSLT[3] skip;
    set IN0GM040.IN0GMCLT[3] skip;
    set IN0GM040.IN0GMALT[3] skip, invisible;
  end

  if (IN0GW1.IN0GWCTR > 24)
    set IN0GM040.IN0GMSLT[4] skip;
    set IN0GM040.IN0GMCLT[4] skip;
    set IN0GM040.IN0GMALT[4] skip, invisible;
  end

  if (IN0GW1.IN0GWCTR > 32)
    set IN0GM040.IN0GMSLT[5] skip;
    set IN0GM040.IN0GMCLT[5] skip;
    set IN0GM040.IN0GMALT[5] skip, invisible;
  end


  converseLib.validationFailed(0076); /* <=== press enter for delete msg*/

  set IN0GM040.CATOAP cursor;


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0GS21

// main edit for in0gm010
Function IN0GS50()


   /* ******************************************************/
   /* *** main edit for header browse screen            ****/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "N";

   /* ******************************************************/
   /* *** pfkey/ fast path edit                         ****/
   /* ***    - always do fast path if valid pfkey       ****/
   /* ***      except with a pa2 key                    ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is enter)
    IN0GS51();
  end

   /* ******************************************************/
   /* *** validate set aside id;  also check for scrolling**/
   /* ******************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    IN0GS52();
  end

   /* ******************************************************/
   /* *** selection edit for in0gm010                   ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf9)
    IN0GS53();
  end


   /* ******************************************************/
   /* *** if pa2:  regardless of status - restart appl. ****/
   /* ******************************************************/

  if (converseVar.eventKey is pa2)
    set IN0GM010 initial;
    IN0GW1.IN0GWERS = "N";
    exit stack;
  end


   /* ******************************************************/
   /* *** invalid  pfkey was pressed                    ****/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0GS50

// pf/fast edit - in0gm010
Function IN0GS51()


   /* ******************************************************/
   /* *** if fast path entered: exit immediately        ****/
   /* ******************************************************/

  if (IN0GM010.CATOAP > " ")
    COMMAREA.CATOAP = IN0GM010.CATOAP;
    COMMAREA.CAITEM = IN0GM010.CAITEM;
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0GM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** reset error switch, std fields & cursor position**/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "N";
  IN0GM010.VAGen_EZEMSG = " ";
  set IN0GM010.CATOAP initialAttributes;
  set IN0GM010.CAITEM initialAttributes;
  set IN0GM010.IN0GMSID cursor;

   /* ******************************************************/
   /* *** if item data entered: error (option not entered)**/
   /* ******************************************************/

  if (IN0GM010.CAITEM > " ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0005); /* <=== option required msg*/
    set IN0GM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf3: go to previous logical level          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "AL0M"; /* exit to alloc menu*/
    COMMAREA.CAITEM = " ";
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf1: go to help application                ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "ALSC IN0GM010";
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf4: go to main menu                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf4)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0GS51

// valid. map key/scroll edit
Function IN0GS52()
   /* *******************************************************/
   /* *** validate the startkey parameter field on the map***/
   /* *******************************************************/

  if (converseVar.eventKey is enter)
    if (IN0GM010.IN0GMSID > 0)
      IN0GW1.IN0GWBRP = "IN0G010"; /* <=== branch back to process*/
      if (IN0GW2.IN0GWHAB == 0)
        IN0GW1.IN0GWERS = "Y"; /* <=== array is empty*/
        converseLib.validationFailed(0072); /* <=== id out of range msg*/
        exit stack;
      end
      if (IN0GM010.IN0GMSID > IN0GW2.INASAID[IN0GWHAB])
        IN0GW1.IN0GWERS = "Y"; /* <=== we are past array end*/
        converseLib.validationFailed(0072); /* <=== id out of range msg*/
        exit stack;
      end
      IN0GW1.IN0GWIX1 = 1;
      while (IN0GW1.IN0GWIX1 <= 500 /* <=== srch for startkey pos.*/
       && IN0GW1.IN0GWIX1 < IN0GW2.IN0GWHAB
       && IN0GW2.INASAID[IN0GWIX1] < IN0GM010.IN0GMSID)
        IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
      end
      IN0GW2.IN0GWHIX = IN0GW1.IN0GWIX1; /* <== set ptrs*/
      IN0GW2.IN0GWHPP = IN0GW1.IN0GWIX1;
      exit stack;
    else
      IN0GW1.IN0GWBRP = " "; /* <=== initialize branch to proc.*/
    end
  end

   /* *******************************************************/
   /* *** setup scroll for forwards                      ****/
   /* *******************************************************/

  if (converseVar.eventKey is pf8)
    if (IN0GW2.IN0GWHPP < IN0GW2.IN0GWHAB) /* <== page ptr < array bottom*/
      IN0GW1.IN0GWCTR = IN0GW2.IN0GWHPP + 12;
      if (IN0GW1.IN0GWCTR >= IN0GW2.IN0GWHAB)
        IN0GW1.IN0GWERS = "Y";
        converseLib.validationFailed(0004); /* <== bottom of data msg*/
      else
        IN0GW2.IN0GWHPP = IN0GW2.IN0GWHPP + 13; /* <== set page forwards*/
        IN0GW2.IN0GWHIX = IN0GW2.IN0GWHPP; /* <== set arr. indx @ top*/
        IN0GW1.IN0GWCTR = IN0GW2.IN0GWHPP + 12;
        if (IN0GW1.IN0GWCTR >= IN0GW2.IN0GWHAB) /* <==are we at array bot*/
          converseLib.validationFailed(0004); /* <== bottom of data msg*/
        end
      end
    else
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0004); /* <== bottom of data msg*/
    end
    exit stack;
  end


   /* *******************************************************/
   /* *** setup scroll for backwards                     ****/
   /* *******************************************************/

  if (converseVar.eventKey is pf7)
    /* **********  no scrolling since we are at the top*/
    if (IN0GW2.IN0GWHPP == 1
     || IN0GW2.IN0GWHPP == 0) /* <=== no headers on database*/
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0003); /* <=== top of data msg*/
    else
      /* **********  move page ptr to top of array since we*/
      /* **********  can't move back a complete page*/
      if (IN0GW2.IN0GWHPP <= 14)
        IN0GW2.IN0GWHPP = 1;
        IN0GW2.IN0GWHIX = IN0GW2.IN0GWHPP;
        converseLib.validationFailed(0003); /* <=== top of data msg*/
      else
        /* **********  scroll back one page*/
        IN0GW2.IN0GWHPP = IN0GW2.IN0GWHPP - 13;
      end
    end
    exit stack;
  end


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0GS52

// selection edit -in0gm010
Function IN0GS53()

   /* ******************************************************/
   /* *** get out if pf9 - add new header               ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf9)
    IN0GW1.IN0GWUPD = "ADD";
    exit stack;
  end

   /* ******************************************************/
   /* *** edit selection field for pfkeys 6 & enter     ****/
   /* ******************************************************/

  IN0GW1.IN0GWCTR = 0;
  IN0GW1.IN0GWIX1 = 13;
  while (IN0GW1.IN0GWIX1 > 0)
    if (IN0GM010.IN0GMSEL[IN0GWIX1] > " ")
      if (IN0GM010.IN0GMSEL[IN0GWIX1] == "D"
       || IN0GM010.IN0GMSEL[IN0GWIX1] == "S")
        set IN0GM010.IN0GMSEL[IN0GWIX1] normal; /* <=== no error*/
        IN0GW1.IN0GWCTR = IN0GW1.IN0GWCTR + 1;
         /* *** set array index to selected map header position ****/
        IN0GW2.IN0GWHIX = IN0GW2.IN0GWHPP + IN0GW1.IN0GWIX1 - 1;
        if (IN0GM010.IN0GMSEL[IN0GWIX1] == "D")
          IN0GW1.IN0GWUPD = "DEL";
        end
        if (IN0GM010.IN0GMSEL[IN0GWIX1] == "S")
          IN0GW1.IN0GWUPD = "CHG";
          IN0GW2.IN0GWIPP = 0; /* page pos- this will get new data*/
        end
      else
        IN0GW1.IN0GWCTR = IN0GW1.IN0GWCTR + 1;
        IN0GW1.IN0GWERS = "Y";
        converseLib.validationFailed(0010); /* <=== bad sel char msg*/
        set IN0GM010.IN0GMSEL[IN0GWIX1] cursor, bold;
      end
    end
    IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 - 1;
  end

  if (IN0GW1.IN0GWCTR > 1)
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0073); /* <=== too many sel. msg*/
    set IN0GM010.IN0GMSEL[1] cursor;
    exit stack;
  end

  if (IN0GW1.IN0GWCTR == 0)
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0074); /* <=== no sel made msg*/
    exit stack;
  end

  if (IN0GW1.IN0GWERS == "Y")
    exit stack;
  end

   /* ******************************************************/
   /* *** pfkey enter                                   ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    exit stack;
  end

   /* ******************************************************/
   /* *** pfkey 6                                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf6)
    IN0GW1.IN0GWUPD = " ";
    set INBREC empty;
    INBREC.INASAID = IN0GW2.INASAID[IN0GWHIX];
    IN0GSXE(); /* <=== get item set for this header*/
    IN0GSXF(); /* <=== do first read-next of items*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    if (SQLCA.VAGen_SQLCODE == 0)
      IN0GW1.IN0GWBRP = "IN0G025"; /* <=== branch to item browse*/
            /* if items exist*/
      exit stack;
    else
      IN0GW1.IN0GWBRP = "IN0G040"; /* <=== branch to item add*/
            /* no items exist*/
      exit stack;
    end
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0GS53

// main edit for in0gm020 map
Function IN0GS54()


   /* ********************************************************/
   /* *** main edit for header maintenance screen         ****/
   /* ********************************************************/

  IN0GW1.IN0GWERS = "N";

   /* ******************************************************/
   /* *** pfkey/ fast path edit                         ****/
   /* ***    - always do fast path if valid pfkey       ****/
   /* ***      except with a pa2 key                    ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is enter)
    IN0GS55();
  end

   /* ******************************************************/
   /* *** update for a setaside delete                  ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter
   && IN0GW1.IN0GWUPD == "DEL")
    IN0GS81(); /* <=== delete set aside hdr w/ items*/
    if (IN0GW1.IN0GWERS == "Y"
     || IN0GW1.IN0GWSES == "Y")
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    end
    exit stack;
  end

   /* ******************************************************/
   /* *** no update if nothing entered new on a change  ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter
   && IN0GW1.IN0GWUPD == "CHG")
    if (IN0GM020.INASAOWN == IN0GW1.INASAOWN
     && IN0GM020.XNDCD == IN0GW1.XNDCD
     && IN0GM020.XIRCD == IN0GW1.XIRCD
     && IN0GM020.INAPRGDT == IN0GW1.IN0GWPRG
     && IN0GM020.INASADC1 == IN0GW1.INASADC1
     && IN0GM020.INASADC2 == IN0GW1.INASADC2
     && IN0GM020.INASADC3 == IN0GW1.INASADC3
     && IN0GM020.INASADC4 == IN0GW1.INASADC4)
      set INBREC empty;
      INBREC.INASAID = IN0GM020.INASAID;
      IN0GSXE(); /* <=== select set of set aside items*/
      IN0GSXF(); /* <=== select first item*/
      if (SQLCA.VAGen_SQLCODE != 0)
        IN0GW1.IN0GWBRP = "IN0G040"; /* <=== go to item maint to*/
        /* <=== add if no items exist*/
      else
        IN0GW1.IN0GWBRP = "IN0G030"; /* <==go to item browse*/
      end
      IN0GSXG(); /* <=== close item set*/
      return;
    end
  end

   /* ******************************************************/
   /* *** cancel delete of header - items exist         ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    if (IN0GW1.IN0GWUPD == "CAN") /* if delete of header cancel - items exist*/
      IN0GW1.IN0GWUPD = " ";
      IN0GW1.IN0GWBRP = "IN0G010";
      exit stack;
    end
  end

   /* ******************************************************/
   /* *** validate all fields                           ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    IN0GS56(); /* <=== perform field edits*/
    if (IN0GW1.IN0GWERS == "Y")
      return;
    else
      if (IN0GW1.IN0GWUPD == "ADD"
       || IN0GW1.IN0GWUPD == "CHG")
        set INBREC empty;
        INBREC.INASAID = IN0GM020.INASAID;
        IN0GSXE(); /* <=== select set of set aside items*/
        IN0GSXF(); /* <=== select first item*/
        if (SQLCA.VAGen_SQLCODE != 0)
          IN0GW1.IN0GWBRP = "IN0G040"; /* <=== go to item maint to*/
          /* <=== add if no items exist*/
        else
          IN0GW1.IN0GWBRP = "IN0G030"; /* <==go to item browse*/
        end
        IN0GSXG(); /* <=== close item set*/
      end
    end
  end

   /* ******************************************************/
   /* *** update set aside header module                ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter
   && IN0GW1.IN0GWERS != "Y")
    IN0GS81();
    if (IN0GW1.IN0GWERS == "Y"
     || IN0GW1.IN0GWSES == "Y")
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    end
    exit stack;
  end


   /* ******************************************************/
   /* *** if pa2:  regardless of status - restart appl. ****/
   /* ******************************************************/

  if (converseVar.eventKey is pa2)
    if (IN0GW1.IN0GWUPD == "DEL")
      IN0GW1.IN0GWUPD = " ";
      IN0GW1.IN0GWBRP = "IN0G010";
    else
      set IN0GM020 initial;
    end
    exit stack;
  end


   /* ******************************************************/
   /* *** invalid  pfkey was pressed                    ****/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0GS54

// pfkey/fast path edit
Function IN0GS55()


   /* ******************************************************/
   /* *** if fast path entered: exit immediately        ****/
   /* ******************************************************/

  if (IN0GM020.CATOAP > " ")
    COMMAREA.CATOAP = IN0GM020.CATOAP;
    COMMAREA.CAITEM = IN0GM020.CAITEM;
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM020.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0GM020.CATOAP cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** reset error switch, std fields & cursor position**/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "N";
  IN0GM020.VAGen_EZEMSG = " ";
  set IN0GM020.CATOAP initialAttributes;
  set IN0GM020.CAITEM initialAttributes;

   /* ******************************************************/
   /* *** if item data entered: error (option not entered)**/
   /* ******************************************************/

  if (IN0GM020.CAITEM > " ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0005); /* <=== option required msg*/
    set IN0GM020.CAITEM cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf3: go to previous logical level          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf1: go to help application                ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "ALSC IN0GM020";
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf4: go to main menu                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf4)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM020.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0GS55

// validate fields
Function IN0GS56()


   /* ******************************************************/
   /* *** edit description line 1                       ****/
   /* ******************************************************/

  if (IN0GM020.INASADC1 > " ")
    INAREC.INASADC1 = IN0GM020.INASADC1;
    INAREC.INASADC2 = IN0GM020.INASADC2;
    INAREC.INASADC3 = IN0GM020.INASADC3;
    INAREC.INASADC4 = IN0GM020.INASADC4;
    set IN0GM020.INASADC1 normal;
  else
    converseLib.validationFailed(0075); /* <=== must enter desc. msg*/
    IN0GW1.IN0GWERS = "Y";
    set IN0GM020.INASADC1 cursor, bold;
  end


   /* ******************************************************/
   /* *** edit purge date                               ****/
   /* ******************************************************/

  if (IN0GM020.INAPRGDT > 0)
    set TA2REC empty;
    set TA2REC01 empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = INRREC08.INR-ENTRY6-DT[INR-SEARCH-SUB]; /* from IN8000*/

    if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
      TA2REC01.TA2-GREG-DDMMYY = IN0GM020.INAPRGDT;
    else /* Domestic*/
      TA2REC.TA2GRGA = IN0GM020.INAPRGDT;
    end

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      if (TA2REC.TA2GRGGN > IN0GW1.IN0GWCDT)

        if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
          IN0GM020.INAPRGDT = TA2REC01.TA2-GREG-DDMMYY;
        else /* Domestic*/
          IN0GM020.INAPRGDT = TA2REC.TA2GRGA;
        end

        INAREC.INAPRGDT = TA2REC.TA2GRGGN;
        set IN0GM020.INAPRGDT normal;
      else
        converseLib.validationFailed(0018); /* <=== invalid date entered msg*/
        IN0GW1.IN0GWERS = "Y";
        set IN0GM020.INAPRGDT cursor, bold;
      end
    else
      converseLib.validationFailed(0018); /* <=== invalid date entered msg*/
      IN0GW1.IN0GWERS = "Y";
      set IN0GM020.INAPRGDT cursor, bold;
    end
  else
    converseLib.validationFailed(0018); /* <=== invalid date entered msg*/
    IN0GW1.IN0GWERS = "Y";
    set IN0GM020.INAPRGDT cursor, bold;
  end


   /* ******************************************************/
   /* *** edit reason code - return reason description  ****/
   /* ******************************************************/

  if (IN0GM020.XIRCD in XIRTBL.XIRCD)
    if (XIRTBL.XIRSETAS[sysVar.arrayIndex] == "Y")
      IN0GM020.XIRDESC = XIRTBL.XIRDESC[sysVar.arrayIndex];
      INAREC.XIRCD = IN0GM020.XIRCD;
      set IN0GM020.XIRCD normal;
    else
      converseLib.validationFailed(0077); /* <=== reason code invalid msg*/
      IN0GW1.IN0GWERS = "Y";
      set IN0GM020.XIRCD cursor, bold;
      IN0GM020.XIRDESC = " ";
    end
  else
    converseLib.validationFailed(0077); /* <=== reason code invalid msg*/
    IN0GW1.IN0GWERS = "Y";
    set IN0GM020.XIRCD cursor, bold;
    IN0GM020.XIRDESC = " ";
  end


   /* ******************************************************/
   /* *** edit department code - return description     ****/
   /* ******************************************************/

  if (IN0GM020.XNDCD in XNDTBL.XNDCD)
    IN0GM020.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
    INAREC.XNDCD = IN0GM020.XNDCD;
    set IN0GM020.XNDCD normal;
  else
    converseLib.validationFailed(0078); /* <=== department code invalid msg*/
    IN0GW1.IN0GWERS = "Y";
    set IN0GM020.XNDCD cursor, bold;
    IN0GM020.XNDDESC = " ";
  end


   /* ******************************************************/
   /* *** edit owner                                    ****/
   /* ******************************************************/

  if (IN0GM020.INASAOWN > " ")
    INAREC.INASAOWN = IN0GM020.INASAOWN;
    set IN0GM020.INASAOWN normal;
  else
    converseLib.validationFailed(0006); /* <=== must enter valid value msg*/
    IN0GW1.IN0GWERS = "Y";
    set IN0GM020.INASAOWN cursor, bold;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0GS56

// main edit for in0gm030
Function IN0GS57()


   /* ******************************************************/
   /* *** main edit for item browse screen              ****/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "N";

   /* ******************************************************/
   /* *** pfkey/ fast path edit                         ****/
   /* ***    - always do fast path if valid pfkey       ****/
   /* ***      except with a pa2 key                    ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is enter)
    IN0GS58();
  end

   /* ******************************************************/
   /* *** check for scrolling                           ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    IN0GS59();
  end

   /* ******************************************************/
   /* *** selection edit for in0gm030                   ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf9)
    IN0GS60();
  end


   /* ******************************************************/
   /* *** if pa2:  regardless of status - restart appl. ****/
   /* ******************************************************/

  if (converseVar.eventKey is pa2)
    set IN0GM030 initial;
    IN0GW1.IN0GWERS = "N";
    exit stack;
  end


   /* ******************************************************/
   /* *** invalid  pfkey was pressed                    ****/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0GS57

// pfkey/ fast path edit
Function IN0GS58()


   /* ******************************************************/
   /* *** if fast path entered: exit immediately        ****/
   /* ******************************************************/

  if (IN0GM030.CATOAP > " ")
    COMMAREA.CATOAP = IN0GM030.CATOAP;
    COMMAREA.CAITEM = IN0GM030.CAITEM;
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM030.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0GM030.CATOAP cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** reset error switch, std fields & cursor position**/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "N";
  IN0GM030.VAGen_EZEMSG = " ";
  set IN0GM030.CATOAP initialAttributes;
  set IN0GM030.CAITEM initialAttributes;

   /* ******************************************************/
   /* *** if item data entered: error (option not entered)**/
   /* ******************************************************/

  if (IN0GM030.CAITEM > " ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0005); /* <=== option required msg*/
    set IN0GM030.CAITEM cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf3: go to previous logical level          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf5: go back to header browse              ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf5)
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf1: go to help application                ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "ALSC IN0GM030";
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf4: go to main menu                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf4)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0GS58

// scrolling
Function IN0GS59()

   /* *******************************************************/
   /* *** setup scroll for forwards                      ****/
   /* *******************************************************/

  if (converseVar.eventKey is pf8)
    if (IN0GW2.IN0GWIPP < IN0GW2.IN0GWIAB) /* <== page ptr < array bottom*/
      IN0GW1.IN0GWCTR = IN0GW2.IN0GWIPP + 12;
      if (IN0GW1.IN0GWCTR >= IN0GW2.IN0GWIAB)
        converseLib.validationFailed(0004); /* <== bottom of data msg*/
        IN0GW1.IN0GWERS = "Y";
      else
        IN0GW2.IN0GWIPP = IN0GW2.IN0GWIPP + 13; /* <== set page forwards*/
        IN0GW2.IN0GWIIX = IN0GW2.IN0GWIPP; /* <== set arr. indx @ top*/
        IN0GW1.IN0GWCTR = IN0GW2.IN0GWIPP + 12;
        if (IN0GW1.IN0GWCTR >= IN0GW2.IN0GWIAB) /* <==are we at array bot*/
          converseLib.validationFailed(0004); /* <== bottom of data msg*/
        end
      end
    else
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0004); /* <== bottom of data msg*/
    end
    exit stack;
  end


   /* *******************************************************/
   /* *** setup scroll for backwards                     ****/
   /* *******************************************************/

  if (converseVar.eventKey is pf7)
    /* **********  no scrolling since we are at the top*/
    if (IN0GW2.IN0GWIPP == 1
     || IN0GW2.IN0GWIPP == 0) /* <=== no items on database*/
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0003); /* <=== top of data msg*/
    else
      /* **********  move page ptr to top of array since we*/
      /* **********  can't move back a complete page*/
      if (IN0GW2.IN0GWIPP <= 14)
        IN0GW2.IN0GWIPP = 1;
        IN0GW2.IN0GWIIX = IN0GW2.IN0GWIPP;
        converseLib.validationFailed(0003); /* <=== top of data msg*/
      else
        /* **********  scroll back one page*/
        if (IN0GW2.IN0GWIPP > 14)
          IN0GW2.IN0GWIPP = IN0GW2.IN0GWIPP - 13;
        end
      end
    end
    exit stack;
  end


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/

end // end IN0GS59

// in0gm030 selection edit
Function IN0GS60()

   /* ******************************************************/
   /* *** get out if pf9 - add new item                 ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf9)
    IN0GW1.IN0GWUPD = "ADD";
    exit stack;
  end

   /* ******************************************************/
   /* *** edit selection field for enter key            ****/
   /* ******************************************************/


  if (IN0GM030.IN0G-WHSE-KEY > " " /* search key entered?*/
   || IN0GM030.IN0G-GPC-KEY > " "  
   || IN0GM030.IN0G-STYLE-KEY > " ")
    IN0GW1.IN0G-SEARCH-KEY = "000000000000"; /**/
    if (IN0GM030.IN0G-WHSE-KEY > " ") /**/
      IN0GW1.IN0G-WHSE-KEY = IN0GM030.IN0G-WHSE-KEY;
                                                        /* set it up in w/s*/
    end
    if (IN0GM030.IN0G-GPC-KEY > " ")
      IN0GW1.IN0G-GPC-KEY = IN0GM030.IN0G-GPC-KEY; /**/
    end
    if (IN0GM030.IN0G-STYLE-KEY > " ")
      IN0GW1.IN0G-STYLE-KEY = IN0GM030.IN0G-STYLE-KEY; /**/
    end
    IN0GW1.IN0G-SEARCH-KEY-FL = "Y"; /* set the chnage flag*/
    IN0GW1.IN0GWERS = "Y"; /* this flag will cause screen*/
                                   /* re-display*/
  else
    IN0GW1.IN0GWCTR = 0;
    IN0GW1.IN0GWIX1 = 13;
    while (IN0GW1.IN0GWIX1 > 0)
      if (IN0GM030.IN0GMSEL[IN0GWIX1] > " ")
        if (IN0GM030.IN0GMSEL[IN0GWIX1] == "D"
         || IN0GM030.IN0GMSEL[IN0GWIX1] == "S")
          set IN0GM030.IN0GMSEL[IN0GWIX1] normal; /* <=== no error*/
          IN0GW1.IN0GWCTR = IN0GW1.IN0GWCTR + 1;
          /* *** set array index to selected map header position ****/
          IN0GW2.IN0GWIIX = IN0GW2.IN0GWIPP + IN0GW1.IN0GWIX1 - 1;
          if (IN0GM030.IN0GMSEL[IN0GWIX1] == "D")
            IN0GW1.IN0GWUPD = "DEL";
          end
          if (IN0GM030.IN0GMSEL[IN0GWIX1] == "S")
            IN0GW1.IN0GWUPD = "CHG";
          end
        else
          IN0GW1.IN0GWCTR = IN0GW1.IN0GWCTR + 1;
          IN0GW1.IN0GWERS = "Y";
          converseLib.validationFailed(0010); /* <=== bad sel char msg*/
          set IN0GM030.IN0GMSEL[IN0GWIX1] cursor, bold;
        end
      end
      IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 - 1;
    end

    if (IN0GW1.IN0GWCTR > 1)
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0099); /* <=== too many sel. msg*/
      set IN0GM030.IN0GMSEL[1] cursor;
      exit stack;
    end

    if (IN0GW1.IN0GWCTR == 0)
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0100); /* <=== no sel made msg*/
      exit stack;
    end

  end

  if (IN0GW1.IN0GWERS == "Y")
    exit stack;
  end

   /* ******************************************************/
   /* *** pfkey enter                                   ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0GS60

// main edit for in0g040
Function IN0GS61()


   /* ********************************************************/
   /* *** main edit for header maintenance screen         ****/
   /* ********************************************************/

  IN0GW1.IN0GWERS = "N";
  COMMAREA.CAMSG = " "; /* INITIALIZE ERROR & MSG FIELDS*/

   /* ******************************************************/
   /* *** pfkey/ fast path edit                         ****/
   /* ***    - always do fast path if valid pfkey       ****/
   /* ***      except with a pa2 key                    ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is enter)
    IN0GS62();
  end

   /* ******************************************************/
   /* *** validate all fields                           ****/
   /* ***  - if no errors check to see if inventory item****/
   /* ***    exists                                     ****/
   /* ***    -  if item found set key fields protected  ****/
   /* ***       and highlighted                         ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    IN0GS63(); /* <=== perform field edits*/
    if (IN0GW1.IN0GWERS == "Y")
      return;
    end
    set IN9REC empty;
    IN9REC.XWHCD = IN0GM040.XWHCD;
    IN9REC.XOWCD = IN0GM040.XOWCD;
    IN9REC.XGPCD = IN0GM040.XGPCD;
    IN9REC.SY1STNBR = IN0GM040.SY1STNBR;
    IN9REC.SY2CLRID = IN0GM040.SY2CLRID;
    IN9REC.XDMCD = IN0GM040.XDMCD;
    IN9REC.XQACD = IN0GM040.XQACD;
    IN9REC.XSDCD = IN0GM040.XSDCD;
    IN9REC.XSACD = IN0GM040.XSACD;
    IN9REC.XPGCD = IN0GM040.XPGCD;
    IN9REC.XUMCD = IN0GM040.XUMCD;
     /* Start add 5/2/00 SAP - SAP contains the inventory for Canada*/
    if (IN0GM040.XWHCD == "42")
      SQLCA.VAGen_SQLCODE = 0; /* Bypass inventory item look up*/
    else
      IN0GSXQ(); /* <=== select in9rec row (item/sizes)*/
    end
     /* End add 5/2/00 SAP - SAP contains the inventory for Canada*/
    if (SQLCA.VAGen_SQLCODE != 0)
      IN0GW1.IN0GWERS = "Y";
      set IN0GM040.XWHCD cursor;
      converseLib.validationFailed(0066); /* <=== inventory item not on db*/
    else
      set INBREC empty;
      INBREC.INASAID = IN0GM040.INASAID;
      INBREC.XWHCD = IN0GM040.XWHCD;
      INBREC.XOWCD = IN0GM040.XOWCD;
      INBREC.XGPCD = IN0GM040.XGPCD;
      INBREC.SY1STNBR = IN0GM040.SY1STNBR;
      INBREC.SY2CLRID = IN0GM040.SY2CLRID;
      INBREC.XDMCD = IN0GM040.XDMCD;
      INBREC.XQACD = IN0GM040.XQACD;
      INBREC.XSDCD = IN0GM040.XSDCD;
      INBREC.XSACD = IN0GM040.XSACD;
      INBREC.XPGCD = IN0GM040.XPGCD;
      INBREC.XUMCD = IN0GM040.XUMCD;
      IN0GSXH(); /* <=== select in1rec row (sas item)*/
      if (SQLCA.VAGen_SQLCODE == 0)
        converseLib.validationFailed(0098);
        IN0GW1.IN0GWERS = "Y";
      end
    end
    exit stack;
  end

   /* ******************************************************/
   /* *** if pa2:  regardless of status - restart proc. ****/
   /* ******************************************************/

  if (converseVar.eventKey is pa2)
    set IN0GM040 initial;
    exit stack;
  end


   /* *******************************************/
   /* *** if pf5:  - go back to header browse****/
   /* *******************************************/

  if (converseVar.eventKey is pf5)
    exit stack;
  end


   /* ******************************************************/
   /* *** invalid  pfkey was pressed                    ****/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0GS61

// pfkey /fast path edit
Function IN0GS62()


   /* ******************************************************/
   /* *** if fast path entered: exit immediately        ****/
   /* ******************************************************/

  if (IN0GM040.CATOAP > " ")
    COMMAREA.CATOAP = IN0GM040.CATOAP;
    COMMAREA.CAITEM = IN0GM040.CAITEM;
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM040.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0GM040.CATOAP cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** reset error switch, std fields & cursor position**/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "N";
  IN0GM040.VAGen_EZEMSG = " ";
  set IN0GM040.CATOAP initialAttributes;
  set IN0GM040.CAITEM initialAttributes;

   /* ******************************************************/
   /* *** if item data entered: error (option not entered)**/
   /* ******************************************************/

  if (IN0GM040.CAITEM > " ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0005); /* <=== option required msg*/
    set IN0GM040.CAITEM cursor, bold;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf3: go to previous logical level          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf1: go to help application                ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "ALSC IN0GM040";
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ******************************************************/
   /* *** if pf4: go to main menu                       ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf4)
    COMMAREA.CATOAP = "MN0M";
    XSEXIT();
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0);
    IN0GM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0GS62

// validate key fields
Function IN0GS63()


   /* ************************************************************/
   /* *** initialize key field attributes                     ****/
   /* ************************************************************/

  set IN0GM040.XWHCD normal;
  set IN0GM040.XOWCD normal;
  set IN0GM040.XGPCD normal;
  set IN0GM040.SY1STNBR normal;
  set IN0GM040.SY2CLRID normal;
  set IN0GM040.XDMCD normal;
  set IN0GM040.XQACD normal;
  set IN0GM040.XSDCD normal;
  set IN0GM040.XSACD normal;
  set IN0GM040.XPGCD normal;
  set IN0GM040.XUMCD normal;

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  IN0GS64(); /* <=== missing input edits*/

  if (IN0GW1.IN0GWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  IN0GS65(); /* <=== field edits*/

  if (IN0GW1.IN0GWERS == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  IN0GS66(); /* <=== relational edits*/

  if (IN0GW1.IN0GWERS == "Y")
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0GS63

// missing key inputs edits
Function IN0GS64()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* ************************************************************/

  if (IN0GM040.XUMCD == "  ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.XUMCD cursor, bold;
  end

  if (IN0GM040.XPGCD == "  ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.XPGCD cursor, bold;
  end

  if (IN0GM040.XSACD == "   ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.XSACD cursor, bold;
  end

  if (IN0GM040.XSDCD == "   ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.XSDCD cursor, bold;
  end

  if (IN0GM040.XQACD == "  ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.XQACD cursor, bold;
  end

  if (IN0GM040.XDMCD == "  ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.XDMCD cursor, bold;
  end

  if (IN0GM040.SY2CLRID == "   ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.SY2CLRID cursor, bold;
  end

  if (IN0GM040.SY1STNBR == "      ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.SY1STNBR cursor, bold;
  end

  if (IN0GM040.XGPCD == "  ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.XGPCD cursor, bold;
  end

  if (IN0GM040.XOWCD == "  ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.XOWCD cursor, bold;
  end

  if (IN0GM040.XWHCD == "  ")
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0006); /* <--- missing required field msg*/
    set IN0GM040.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0GS64

// key field edits
Function IN0GS65()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if unit of measure not blank: put desc. on map      ****/
   /* *** and save the input uom conversion factor            ****/
   /* ************************************************************/

  if (IN0GM040.XUMCD == " ")
     /* ** next sentence ***/
  else
    if (IN0GM040.XUMCD in XUMTBL.XUMCD)
       /* ** next sentence*/
    else
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0GM040.XUMCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** packaging code edit                                 ****/
   /* ************************************************************/

  if (IN0GM040.XPGCD in XPGTBL.XPGCD)
      /* ** next sentence ***/
  else
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0GM040.XPGCD cursor, bold;
  end

   /* ************************************************************/
   /* *** shade code edit                                     ****/
   /* ************************************************************/

  if (IN0GM040.XSACD in XSATBL.XSACD)
     /* ** next sentence ***/
  else
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0GM040.XSACD cursor, bold;
  end

   /* ************************************************************/
   /* *** spec difference code edit                           ****/
   /* ************************************************************/
  set PC2REC empty;
  PC2REC.XGPCD = IN0GM040.XGPCD;
  PC2REC.PC2INSEG = IN0GM040.XSDCD;
  IN0GSXT();
  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0GM040.XSDCD cursor, bold;
    else
      return;
    end
  end

   /* ************************************************************/
   /* *** quality code edit                                   ****/
   /* ************************************************************/

  if (IN0GM040.XQACD in XQATBL.XQACD)
     /* ** next sentence ***/
  else
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0GM040.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** dimension code edit                                 ****/
   /* ************************************************************/

  if (IN0GM040.XDMCD in XDMTBL.XDMCD)
     /* ** next sentence ***/
  else
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0GM040.XDMCD cursor, bold;
  end

   /* ************************************************************/
   /* *** gen. prod. class edit                               ****/
   /* ************************************************************/

  if (IN0GM040.XGPCD in XGPTBL.XGPCD)
     /* ** next sentence ***/
  else
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0GM040.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** warehouse code edit                                 ****/
   /* ************************************************************/

  if (IN0GM040.XWHCD in XWHTBL.XWHCD)
     /* ** next sentence ***/
  else
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0011); /* <--- invalid value msg*/
    set IN0GM040.XWHCD cursor, bold;
    return; /* <=== ** execption ***/
  end

   /* ************************************************************/
   /* *** if whse owner group flag set (=Y): use ow table     ****/
   /* *** owner group must be zero for all other whses        ****/
   /* ************************************************************/

  if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
     /* ************************************************************/
     /* *** owner group edit                                    ****/
     /* ************************************************************/
    IN0GW1.XWHCD = IN0GM040.XWHCD;
    IN0GW1.XOWCD = IN0GM040.XOWCD;
    if (IN0GW1.XOWKEY in XOWTBL.XOWKEY)
    else
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0GM040.XOWCD cursor, bold;
    end
  else
    if (IN0GM040.XOWCD != "00")
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0011); /* <--- invalid value msg*/
      set IN0GM040.XOWCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0GS65

// key relational edits
Function IN0GS66()

   /* ************************************************************/
   /* *** Use IN8020 to get size & style descriptions and     ****/
   /* *** life cycle code                                     ****/
   /* ************************************************************/

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
  INGREC.XGP-GPC-CD = IN0GM040.XGPCD; /* GPC code*/
  INGREC.SY-STY-NBR = IN0GM040.SY1STNBR; /* Style number*/
  INGREC.SY-COLR-CD-ID = IN0GM040.SY2CLRID; /* Color Id*/
  INGREC.XDM-DIM-CD = IN0GM040.XDMCD; /* Dimension code*/

  TA1REC.TA1PGMNM = "IN0GS66";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020(); /* Get product data*/

  if (INGREC.ING-RETURN-CD > 0000)
    IN0GS-IN8020-ERRS(); /* Post warning*/
    IN0GM040.SY1SSTNM = " ";
    IN0GM040.SY2CLRAB = " ";
    IN0GM040.XLCCD = " ";
    return;
  else
    IN0GM040.SY1SSTNM = INGREC.SY1SSTNM;
    IN0GM040.SY2CLRAB = INGREC.SY2CLRAB;
  end

   /* ************************************************************/
   /* *** if current date greater than effective date:        ****/
   /* *** use the corresponding life cycle code               ****/
   /* *** note: effective dates in ascending order            ****/
   /* ************************************************************/

  if (IN0GW1.IN0GWCDT >= INGREC.SY2CEDT1)
    IN0GM040.XLCCD = INGREC.XLCCD1;
  else
    if (IN0GW1.IN0GWCDT >= INGREC.SY2CEDT2)
      IN0GM040.XLCCD = INGREC.XLCCD2;
    else
      if (IN0GW1.IN0GWCDT >= INGREC.SY2CEDT3)
        IN0GM040.XLCCD = INGREC.XLCCD3;
      else
        if (IN0GW1.IN0GWCDT >= INGREC.SY2CEDT3)
          IN0GM040.XLCCD = INGREC.XLCCD4;
        else
           /* ************************************************************/
           /* *** fall thru error - code shouldn't have been executed ****/
           /* ************************************************************/
          IN0GW1.IN0GWERS = "Y";
          converseLib.validationFailed(0008); /* <--- fall thru error msg*/
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0GS66

// main edit for in0g045 process
Function IN0GS67()


   /* ********************************************************/
   /* *** main edit for item maintenance screen           ****/
   /* ********************************************************/

  IN0GW1.IN0GWERS = "N";
  COMMAREA.CAMSG = " ";

   /* ********************************************************/
   /* *** get time and date info for updating purposes    ****/
   /* ********************************************************/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = VGVar.currentShortGregorianDate;
  TA2REC.TA2TIME = " ";
                                   /* <=== this will force pgm to send time*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD != 0)
    converseLib.validationFailed(17); /* <===internal date error*/
    IN0GW1.IN0GWERS = "Y";
    return;
  end

   /* ******************************************************/
   /* *** pfkey/ fast path edit                         ****/
   /* ***    - always do fast path if valid pfkey       ****/
   /* ***      EXCEPT WITH PA2 KEY                      ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is enter)
    IN0GS62();
  end

   /* ******************************************************/
   /* *** go to flow if contention error has been set   ****/
   /* ***  to avoid going through all the edits again   ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter
   && IN0GW1.IN0GWSES == "Y")
    exit stack;
  end


   /* ******************************************************/
   /* *** delete function                               ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter
   && IN0GW1.IN0GWUPD == "DEL")
    IN0GS90(); /* <=== delete set aside item*/
    if (IN0GW1.IN0GWERS == "Y"
     || IN0GW1.IN0GWSES == "Y")
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    end
    exit stack;
  end
   /* ******************************************************/
   /* *** validate all fields for change/add            ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    IN0GS69(); /* <=== perform field edits*/
    if (IN0GW1.IN0GWERS == "Y") /* <===  and update inventory*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      return;
    end
  end

   /* ******************************************************/
   /* *** update set aside item module                  ****/
   /* ******************************************************/

  if (converseVar.eventKey is enter)
    IN0GS90();
    if (IN0GW1.IN0GWERS == "Y"
     || IN0GW1.IN0GWSES == "Y")
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    end
    exit stack;
  end


   /* ******************************************************/
   /* *** no processing for pf5 ( go to flow )          ****/
   /* ******************************************************/

  if (converseVar.eventKey is pf5)
    exit stack;
  end


   /* ******************************************************/
   /* *** if pa2:  regardless of status - restart appl. ****/
   /* ******************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end


   /* ******************************************************/
   /* *** invalid  pfkey was pressed                    ****/
   /* ******************************************************/

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0007); /* <=== invalid pfkey msg*/


   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/
end // end IN0GS67

// validate fields
Function IN0GS69()


   /* ******************************************************/
   /* *** edit map array for valid sizes                ****/
   /* ***  - ctr has number of valid sizes from when    ****/
   /* ***    screen was formatted                       ****/
   /* ******************************************************/

  IN0GW1.IN0GWIX1 = IN0GW1.IN0GWCTR - 1; /* <=== SET INDEX at last size*/
  IN0GW1.IN0GWCT2 = 0;
  IN0GW1.IN0GWWK3 = 0;

  set INFREC empty; /* SET INFREC qty fields EMPTY before*/
                                   /* filling qtys.*/
  set TA1REC empty;

  TA1REC.TA1PGMNM = "IN0GS69";

  while (IN0GW1.IN0GWIX1 > 0)
    set IN0GM040.IN0GMAQT[IN0GWIX1] normal; /* <=== set default*/
    if (IN0GM040.IN0GMAQT[IN0GWIX1] != 0)
      IN0GW1.IN0GWWK3 = IN0GW1.IN0GWWK3 + IN0GM040.IN0GMAQT[IN0GWIX1];
      IN0GW1.IN0GWCT2 = IN0GW1.IN0GWCT2 + 1;
      IN0GS70(); /* <=== edit map set aside adjustments*/
    end
    IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 - 1;
  end

  IN0GW1.IN0GWIX1 = IN0GW1.IN0GWCTR; /* <=== set index to hash total*/

  if (IN0GW1.IN0GWWK3 != IN0GM040.IN0GMAQT[IN0GWIX1])
    if (converseVar.validationMsgNum == 92 /* <=== don't erase set-aside*/
     || converseVar.validationMsgNum == 93 /* qty edit msgs with the*/
     || converseVar.validationMsgNum == 66 /* total sum edit msg*/
     || converseVar.validationMsgNum == 176) /**/
         /* next sentence*/
    else
      converseLib.validationFailed(0036); /* <=== total must eq sum of adj. msg*/
      set IN0GM040.IN0GMAQT[IN0GWIX1] cursor;
    end
    IN0GW1.IN0GWERS = "Y";
    set IN0GM040.IN0GMAQT[IN0GWIX1] bold;
  end

  if (IN0GW1.IN0GWCT2 == 0)
    converseLib.validationFailed(0097); /* <=== no adjustments entered msg*/
    IN0GW1.IN0GWERS = "Y";
  end

   /* ******************************/
   /* SKIP ALL OF THE BELOW IF THERE IS AN ERROR*/
   /* ADD LOGIC TO FILL INFREC HEADERS*/
   /* CALL IN9060*/
   /* HANDEL ERROR CONDITION FROM IN9060*/
   /* ******************************/

  if (IN0GW1.IN0GWERS == "N") /* no errors*/
   /* Start add  04/28/00  SAP Do not updt sum inventory for Canada*/
    if (IN0GM040.XWHCD == "42") /* Canada*/

    else
      IN0GS-LOAD-INFREC(); /* load everything except qtsy.*/
      XSINS-UPD-INV-ITEM(); /* update inventory & header, item*/
                                   /* audits.*/
      if (INFREC.INF-RETURN-CODE > 0) /* no errors*/
        IN0GS-IN9060-ERRS(); /* POSTS ERRORS FROM IN9060*/
      end /**/
    end
   /* End add  04/28/00  SAP Do not updt sum inventory for Canada*/
  else /* next sentence*/
  end

   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0GS69

// edit set aside adjustments
Function IN0GS70()

   /* ******************************************************/
   /* *** edit for valid set aside quantities           ****/
   /* ******************************************************/

   /* ******************************************************/
   /* *** cannot adjust set aside quantity less than zero **/
   /* ******************************************************/

  IN0GW1.IN0GWSIX = IN0GW1.IN0GWSID[IN0GWIX1];
  IN0GWWK1 = IN0GM040.IN0GMAQT[IN0GWIX1] + INBREC.INBSAQTY[IN0GWSIX];
  if (IN0GW1.IN0GWWK1 < 0)
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0093); /* <=== sas qty can't be lt 0*/
    set IN0GM040.IN0GMAQT[IN0GWIX1] cursor, bold;
    return;
  end

   /* Start add  4/28/00  SAP Sum Inventory does not exist*/
  if (IN0GM040.XWHCD == "42") /* Canada*/
    IN0GS-LOAD-QTYS(); /* <== move qtys to GN1000-qty buckets*/
    return;
  end
   /* End add  4/28/00  SAP Sum Inventory does not exist*/

   /* ******************************************************/
   /* *** see if there are enough of this size on the   ****/
   /* *** inventory item available to set aside         ****/
   /* ******************************************************/

  set IN1REC empty;
  IN1REC.XWHCD = IN0GM040.XWHCD;
  IN1REC.XOWCD = IN0GM040.XOWCD;
  IN1REC.XGPCD = IN0GM040.XGPCD;
  IN1REC.SY1STNBR = IN0GM040.SY1STNBR;
  IN1REC.SY2CLRID = IN0GM040.SY2CLRID;
  IN1REC.XDMCD = IN0GM040.XDMCD;
  IN1REC.XQACD = IN0GM040.XQACD;
  IN1REC.XSDCD = IN0GM040.XSDCD;
  IN1REC.XSACD = IN0GM040.XSACD;
  IN1REC.XPGCD = IN0GM040.XPGCD;
  IN1REC.XUMCD = IN0GM040.XUMCD;
  IN1REC.SY5SZID = IN0GW1.IN0GWSID[IN0GWIX1];
  IN0GSXO(); /* <=== select inventory item-size row*/
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(0066); /* <=== invnt. item not on db*/
      IN0GM040.IN0GMAQT[IN0GWIX1] = 0;
      IN0GW1.IN0GWERS = "Y";
      set IN0GM040.IN0GMAQT[IN0GWIX1] cursor, bold;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911
       || SQLCA.VAGen_SQLCODE == -913)
        converseLib.validationFailed(0094); /* <=== invnt. item in use*/
        IN0GM040.IN0GMAQT[IN0GWIX1] = 0;
        IN0GW1.IN0GWERS = "Y";
        set IN0GM040.IN0GMAQT[IN0GWIX1] cursor, bold;
        return;
      end
    end
  end

   /* ******************************************************/
   /* *** update if adjustment ok                       ****/
   /* ******************************************************/

   /* <=== compute available onhand inventory units*/
  if (IN1REC.IN1ONHND < 0)
    IN0GW1.IN0GWWK1 = 0;
  else
    IN0GW1.IN0GWWK1 = IN1REC.IN1ONHND;
    IN0GS71();
  end

  if (converseVar.validationMsgNum != 176) /* edit already flagged - skip around*/
    if (IN0GM040.IN0GMAQT[IN0GWIX1] > IN0GW1.IN0GWWK1)
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0092); /* <=== not enough qty to set aside*/
      set IN0GM040.IN0GMAQT[IN0GWIX1] cursor, bold;
      IN0GM040.IN0GMAQT[IN0GWIX1] = IN0GW1.IN0GWWK1;
    else
      set IN0GM040.IN0GMAQT[IN0GWIX1] normal;
      IN0GS94(); /* <=== move qtys to in9061-qty buckets*/
                                   /* quantity*/
    end
  end

   /* ******************************************************/
   /* *** end of statement group                        ****/
   /* ******************************************************/

end // end IN0GS70

// calculate net inventory qty
Function IN0GS71()
  if (IN1REC.IN1RSRVD > 0)
    IN0GW1.IN0GWWK1 = IN0GW1.IN0GWWK1 - IN1REC.IN1RSRVD;
  end

  if (IN1REC.IN1ALOCD > 0)
    IN0GW1.IN0GWWK1 = IN0GW1.IN0GWWK1 - IN1REC.IN1ALOCD;
  end

  IN0GW1.IN0GWWK1 = IN0GW1.IN0GWWK1 - IN1REC.IN1STASD;

  if (IN1REC.IN1XFERO > 0)
    IN0GW1.IN0GWWK1 = IN0GW1.IN0GWWK1 - IN1REC.IN1XFERO;
  end

  if (IN0GW1.IN0GWWK1 == 0
   && IN0GM040.IN0GMAQT[IN0GWIX1] > 0)
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0176); /* no qty avail to set-aside*/
    set IN0GM040.IN0GMAQT[IN0GWIX1] cursor, bold;
    IN0GM040.IN0GMAQT[IN0GWIX1] = IN0GW1.IN0GWWK1;
  end


   /* *********************************************************/
   /* *** end of statement group                           ****/
   /* *********************************************************/
end // end IN0GS71

// set up individual hdr br lines
Function IN0GS80()


   /* *******************************************************/
   /* *** setup individual header browse map detail lines ***/
   /* *******************************************************/

  if (IN0GW1.IN0GWERS == "Y"
   || SQLCA.VAGen_SQLCODE != 0)
    return;
  end

  set IN0GM010.IN0GMSEL[IN0GWIX1] normal;

  IN0GM010.IN0GMSEL[IN0GWIX1] = " ";
  IN0GM010.INASAID[IN0GWIX1] = INAREC.INASAID;
  IN0GM010.INASAOWN[IN0GWIX1] = INAREC.INASAOWN;
  IN0GM010.XNDCD[IN0GWIX1] = INAREC.XNDCD;
  IN0GM010.INAPRGDT[IN0GWIX1] = INAREC.INAPRGDT;

  if (INAREC.XIRCD in XIRTBL.XIRCD)
                                   /* <=== get reason code abrv. from tbl*/
    IN0GM010.XIRABRV[IN0GWIX1] = XIRTBL.XIRABRV[sysVar.arrayIndex];
  else
    IN0GM010.XIRABRV[IN0GWIX1] = " ";
  end

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GS80

// set aside header i/o
Function IN0GS81()

   /* ********************************************************/
   /* *** get time and date info for updating purposes    ****/
   /* ********************************************************/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = VGVar.currentShortGregorianDate;
  TA2REC.TA2TIME = " ";
                                   /* <=== this will force pgm to send time*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    /* ** next sentence ***/
  else
    converseLib.validationFailed(17); /* <===internal date error*/
    IN0GW1.IN0GWERS = "Y";
    return;
  end
  if (IN0GW1.IN0GWERS == "Y")
    return;
  end

   /* ********************************************************/
   /* *** change, add or delete set aside headers         ****/
   /* ********************************************************/

   /* ********************************************************/
   /* *** hardcoded test for production setaside id's to  ****/
   /* *** changed when production setaside id's are added ****/
   /* *** to the warehouse table                          ****/
   /* ********************************************************/
  if (IN0GW1.IN0GWUPD == "ADD")
     /* next sentence*/
  else
    if (IN0GM020.INASAID == 62
     || IN0GM020.INASAID == 63
     || IN0GM020.INASAID == 64
     || IN0GM020.INASAID == 65
     || IN0GM020.INASAID == 66
     || IN0GM020.INASAID == 67
     || IN0GM020.INASAID == 68
     || IN0GM020.INASAID == 69) /* memphis appl whse added 11/90*/
      if (IN0GW1.IN0GWUPD == "CHG")
        if (COMMAREA.CACLVL[1] == "Y")
             /* next sentence*/
        else
          converseLib.validationFailed(153); /* cannot maintance prod. setaside*/
          IN0GW1.IN0GWERS = "Y";
        end
      else /* ==> delete*/
        converseLib.validationFailed(153); /* cannot delete prod. setaside*/
        IN0GW1.IN0GWERS = "Y";
      end
    end
  end
   /* ********************************************************/

  if (IN0GW1.IN0GWERS == "Y")
    return;
  end

  if (IN0GW1.IN0GWUPD == "DEL")
    IN0GW1.IN0GWIOM = "D";
    set INAREC empty;
    INAREC.INASAID = IN0GM020.INASAID;
    IN0GSXL(); /* <=== delete set aside hdr*/
    if (SQLCA.VAGen_SQLCODE == 100
     || SQLCA.VAGen_SQLCODE == -911
     || SQLCA.VAGen_SQLCODE == -913)
      converseLib.validationFailed(0083); /* <=== header in use msg*/
      IN0GW1.IN0GWERS = "Y";
      IN0GW1.IN0GWSES = "Y";
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        converseLib.validationFailed(0071); /* <=== db2 error*/
        IN0GW1.IN0GWERS = "Y";
        return;
      end
    end
    IN0GS82(); /* <=== reset hdr array after delete*/
    return;
  end


  if (IN0GW1.IN0GWUPD == "CHG")
    IN0GW1.IN0GWIOM = "U";
    INAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    INAREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    IN0GSXL(); /* <=== update set aside header*/
    if (SQLCA.VAGen_SQLCODE == 100
     || SQLCA.VAGen_SQLCODE == -911
     || SQLCA.VAGen_SQLCODE == -913)
      converseLib.validationFailed(0083); /* <=== header in use msg*/
      IN0GW1.IN0GWERS = "Y";
      IN0GW1.IN0GWSES = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        converseLib.validationFailed(0071); /* <=== db2 error*/
        IN0GW1.IN0GWERS = "Y";
      end
    end
    return;
  end


  if (IN0GW1.IN0GWUPD == "ADD")
    IN0GW1.IN0GWIOM = "A";

    set INAREC empty;
    INAREC.INASAID = IN0GM020.INASAID;
    IN0GSXD();
                                   /* <=== does header record already exist*/
    if (SQLCA.VAGen_SQLCODE == 0)
      converseLib.validationFailed(0079);
                                   /* <=== header to add already exists msg*/
      IN0GW1.IN0GWERS = "Y";
      return;
    else
      set INAREC empty;
      INAREC.INASAID = IN0GM020.INASAID;
      INAREC.XIRCD = IN0GM020.XIRCD;
      INAREC.XNDCD = IN0GM020.XNDCD;
      INAREC.INASAOWN = IN0GM020.INASAOWN;
      INAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
      INAREC.ZZZSDT = TA2REC.TA2GRGGN;
      INAREC.ZZZCHGTM = TA2REC.TA2TIMHM;
      INAREC.ZZZSTM = TA2REC.TA2TIMHM;
  /* set up INEREC date & time before next call to TA0040*/
      INEREC.ZZZCHGDT = TA2REC.TA2GRGGN;
      INEREC.ZZZCHGTM = TA2REC.TA2TIMHM;
                 /* ** reformat purge date for update*/
      set TA2REC empty;
      set TA2REC01 empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = INRREC08.INR-ENTRY6-DT[INR-SEARCH-SUB]; /* from IN8000*/

      if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
        TA2REC01.TA2-GREG-DDMMYY = IN0GM020.INAPRGDT;
      else /* Domestic*/
        TA2REC.TA2GRGA = IN0GM020.INAPRGDT;
      end

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
      if (TA2REC.TA2RTNCD == 0)
        INAREC.INAPRGDT = TA2REC.TA2GRGGN;
      else
        converseLib.validationFailed(0017); /* <=== internal date error msg*/
        IN0GW1.IN0GWERS = "Y";
        set IN0GM020.INAPRGDT cursor, bold;
        return;
      end

      INAREC.INASADC1 = IN0GM020.INASADC1;
      INAREC.INASADC2 = IN0GM020.INASADC2;
      INAREC.INASADC3 = IN0GM020.INASADC3;
      INAREC.INASADC4 = IN0GM020.INASADC4;

      IN0GSXL(); /* <=== add header to database*/
      IN0GS85(); /* <=== add new hdr id to end of hdr*/
                                   /* array*/
      INEREC.INENSAID = IN0GM020.INASAID;
      INEREC.INENSAID = INEREC.INENSAID + 1;

      IN0GSXJ();
                                   /* <=== update invnt ctl rec with nxt id*/
    end
    return;
  end

   /* ********************************************************/
   /* *** end of statement group                          ****/
   /* ********************************************************/

end // end IN0GS81

// reset hdr br array after delet
Function IN0GS82()


   /* ********************************************************/
   /* *** move hdr br array id's up due to delete         ****/
   /* ********************************************************/

  if (IN0GW2.IN0GWHAB == 1) /* <=== only entry in array is deleted*/
    IN0GW2.IN0GWHAB = 0;
    return;
  end

  IN0GW1.IN0GWIX1 = IN0GW2.IN0GWHIX + 1;
  while (IN0GW2.IN0GWHIX <= IN0GW2.IN0GWHMX /* <== loop to move id's up*/
   && IN0GW2.IN0GWHIX < IN0GW2.IN0GWHAB)
    IN0GW2.INASAID[IN0GWHIX] = IN0GW2.INASAID[IN0GWIX1];
    IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
    IN0GW2.IN0GWHIX = IN0GW2.IN0GWHIX + 1;
  end
  IN0GW2.IN0GWHIX = IN0GW2.IN0GWHIX - 1;
  IN0GW2.IN0GWHAB = IN0GW2.IN0GWHIX; /* <== array bot ptr moved up*/
  IN0GW2.IN0GWHIX = IN0GW2.IN0GWHPP; /* <== array ptr becomes top*/


   /* ********************************************************/
   /* *** end of statement group                          ****/
   /* ********************************************************/


end // end IN0GS82

// reset hdr br array after add
Function IN0GS85()

   /* ********************************************************/
   /* *** reset pointers in array due to add              ****/
   /* ********************************************************/

  IN0GW2.IN0GWHAB = IN0GW2.IN0GWHAB + 1;
  if (IN0GW2.IN0GWHAB > IN0GW2.IN0GWHMX)
    IN0GW1.IN0GWERS = "Y";
    IN0GM020.XXXMSG = "HEADER ARRAY IS FULL - CALL PROGRAMMER";
    exit stack;
  end
     /* ******    add new id to bottom of header array*/
  IN0GW2.INASAID[IN0GWHAB] = IN0GM020.INASAID;
     /* ******    if first entry then set page pointer to 1*/
  if (IN0GW2.IN0GWHAB == 1)
    IN0GW2.IN0GWHPP = 1;
  end

  IN0GW2.IN0GWHIX = IN0GW2.IN0GWHAB; /* set the pointer to the new add*/

   /* ********************************************************/
   /* *** end of statement group                          ****/
   /* ********************************************************/


end // end IN0GS85

// build item browse line
Function IN0GS87()


   /* *******************************************************/
   /* *** setup individual item browse map detail lines   ***/
   /* *******************************************************/

  if (IN0GW1.IN0GWERS == "Y")
    return;
  end

  set IN0GM030.IN0GMSEL[IN0GWIX1] normal;

  IN0GM030.IN0GMSEL[IN0GWIX1] = " ";
  IN0GM030.XWHCD[IN0GWIX1] = IN0GW2.XWHCD[IN0GWIIX];
  IN0GM030.XOWCD[IN0GWIX1] = IN0GW2.XOWCD[IN0GWIIX];
  IN0GM030.XGPCD[IN0GWIX1] = IN0GW2.XGPCD[IN0GWIIX];
  IN0GM030.SY1STNBR[IN0GWIX1] = IN0GW2.SY1STNBR[IN0GWIIX];
  IN0GM030.SY2CLRID[IN0GWIX1] = IN0GW2.SY2CLRID[IN0GWIIX];
  IN0GM030.XDMCD[IN0GWIX1] = IN0GW2.XDMCD[IN0GWIIX];
  IN0GM030.XQACD[IN0GWIX1] = IN0GW2.XQACD[IN0GWIIX];
  IN0GM030.XSDCD[IN0GWIX1] = IN0GW2.XSDCD[IN0GWIIX];
  IN0GM030.XSACD[IN0GWIX1] = IN0GW2.XSACD[IN0GWIIX];
  IN0GM030.XPGCD[IN0GWIX1] = IN0GW2.XPGCD[IN0GWIIX];
  IN0GM030.XUMCD[IN0GWIX1] = IN0GW2.XUMCD[IN0GWIIX];
  IN0GM030.INBSATOT[IN0GWIX1] = IN0GW2.INBSATOT[IN0GWIIX];


   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GS87

// update for add/chg/delete
Function IN0GS90()

   /* ********************************************************/
   /* *** hardcoded test for production setaside id's to  ****/
   /* *** be changed when production setaside id's are    ****/
   /* *** added to the warehouse table                    ****/
   /* ********************************************************/

  if (IN0GM040.INASAID == 62
   || IN0GM040.INASAID == 63
   || IN0GM040.INASAID == 64
   || IN0GM040.INASAID == 65
   || IN0GM040.INASAID == 66
   || IN0GM040.INASAID == 67
   || IN0GM040.INASAID == 68
   || IN0GM040.INASAID == 69)
    if (COMMAREA.CACLVL[2] == "Y")
          /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(153); /* can't maint. prod. setaside 62-69*/
      IN0GW1.IN0GWERS = "Y";
      return;
    end
  end

  if (IN0GW1.IN0GWUPD == "DEL")
    IN0GW1.IN0GWIOM = "D";
    IN0GSXK(); /* <=== delete set aside item*/
    set INFREC empty; /* set inventory,HEAD & ITEM AUDITS*/
                                   /* EMPTY*/
    set TA1REC empty;
    TA1REC.TA1PGMNM = "IN0GS90";
    if (SQLCA.VAGen_SQLCODE == 0)
      /* Start add  04/28/00  SAP Do not updt sum inventory for Canada*/
      if (IN0GM040.XWHCD == "42") /* Canada*/

      else
        set IN1REC empty; /* set inventory recd empty*/
        IN0GW1.IN0GWIX1 = 1;
        while (IN0GW1.IN0GWIX1 <= 40)
          if (IN0GM040.INBSAQTY[IN0GWIX1] > 0)
            set IN1REC empty; /**/
            IN1REC.XWHCD = IN0GM040.XWHCD; /* NEED TO POPULATE*/
            IN1REC.XOWCD = IN0GM040.XOWCD; /* AND CHECK INVENTORY*/
            IN1REC.XGPCD = IN0GM040.XGPCD; /* PRIOR TO PERFORMING*/
            IN1REC.XDMCD = IN0GM040.XDMCD; /* THE DELETE.*/
            IN1REC.SY1STNBR = IN0GM040.SY1STNBR; /**/
            IN1REC.SY2CLRID = IN0GM040.SY2CLRID; /**/
            IN1REC.XQACD = IN0GM040.XQACD; /**/
            IN1REC.XSDCD = IN0GM040.XSDCD; /**/
            IN1REC.XSACD = IN0GM040.XSACD; /**/
            IN1REC.XPGCD = IN0GM040.XPGCD; /**/
            IN1REC.XUMCD = IN0GM040.XUMCD; /**/
            IN1REC.SY5SZID = IN0GW1.IN0GWSID[IN0GWIX1]; /**/
            IN0GSXO(); /* <=== return invnt item row*/
            IN0GS94(); /* <=== MOVE QTY FROM SCREEN TO INFREC*/
          end
          IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
        end
        /* handle error messages ...*/
        /* HANDle 0130 INF-RETURN-CODE AS OK. THE XIR-TRN-RSN-SET-FL*/
        /* IS HANDled SPECIAL IN IN0G. BECAUSE THE XIR IS PROVIDED*/
        /* BY IN0G AND NOT DERIVED FROM THE TABLE.*/
        /*  */
        /* 0330 - NEGATIVE SET ASIDE QTY. IS NOW ALLOWABLE.*/
        /* 0360 - NEGATIVE NET INVENTORY QUANTITY. IS NOW ALLOWABle*/
        /*  */
        /*  */
        if (IN0GW1.IN0GWERS == "N") /* no errors.*/
          IN0GS-LOAD-INFREC(); /* load inventory/audit record*/
          XSINS-UPD-INV-ITEM(); /* update inventory & header, item*/

          if (INFREC.INF-RETURN-CODE > 0) /* error found*/
            IN0GS-IN9060-ERRS(); /* post errors*/
          end /**/
        end /**/
      end
      /* End add  04/28/00  SAP Do not updt sum inventory for Canada*/
      /*  */
      /*  */
      if (IN0GW1.IN0GWERS != "Y")
        IN0GS91(); /* <=== reset item arr. after delete*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100
       || SQLCA.VAGen_SQLCODE == -911
       || SQLCA.VAGen_SQLCODE == -913)
        converseLib.validationFailed(0085); /* <=== item in use msg*/
        IN0GW1.IN0GWERS = "Y";
        IN0GW1.IN0GWSES = "Y";
      else
        IN0GW1.IN0GWERS = "Y";
        converseLib.validationFailed(0071); /* <=== sas db2 error*/
      end
    end
    return;
  end


   /* ********************************************************/
   /* *** add set aside item                              ****/
   /* ********************************************************/

  if (IN0GW1.IN0GWUPD == "ADD")
    IN0GW1.IN0GWSFL = "N"; /* set add setaside flag to no*/
    set INBREC empty;
    INBREC.INASAID = IN0GM040.INASAID;
    INBREC.XWHCD = IN0GM040.XWHCD;
    INBREC.XOWCD = IN0GM040.XOWCD;
    INBREC.XGPCD = IN0GM040.XGPCD;
    INBREC.SY1STNBR = IN0GM040.SY1STNBR;
    INBREC.SY2CLRID = IN0GM040.SY2CLRID;
    INBREC.XDMCD = IN0GM040.XDMCD;
    INBREC.XQACD = IN0GM040.XQACD;
    INBREC.XSDCD = IN0GM040.XSDCD;
    INBREC.XSACD = IN0GM040.XSACD;
    INBREC.XPGCD = IN0GM040.XPGCD;
    INBREC.XUMCD = IN0GM040.XUMCD;
    IN0GW1.IN0GWIX1 = 1;
    while (IN0GW1.IN0GWIX1 <= 40)
      if (IN0GM040.SY4IDDSC[IN0GWIX1] == "TOTAL"
       || IN0GM040.SY4IDDSC[IN0GWIX1] == "     ")
        /* ** next sentence ***/
      else /* <=== add up adjustments into total*/
        IN0GWWK2 = IN0GM040.INBSAQTY[IN0GWIX1] +         IN0GM040.IN0GMAQT[IN0GWIX1];
        IN0GW1.IN0GWSIX = IN0GW1.IN0GWSID[IN0GWIX1];
        INBREC.INBSAQTY[IN0GWSIX] = IN0GW1.IN0GWWK2;
        INBREC.INBSATOT = INBREC.INBSATOT + INBREC.INBSAQTY[IN0GWSIX];
      end
      if (IN0GW1.IN0GWWK2 > 0)
        IN0GW1.IN0GWSFL = "Y"; /* set add flay to yes*/
      end
      IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
    end
    INBREC.ZZZSDT = TA2REC.TA2GRGGN;
    INBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    INBREC.ZZZSTM = TA2REC.TA2TIMHM;
    INBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    IN0GSXH(); /* <=== make sure item doesn't exist*/
    if (SQLCA.VAGen_SQLCODE == 0)
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0079); /* <=== record already exists*/
      return;
    end
    if (IN0GW1.IN0GWSFL == "Y") /* add flag equals yes*/
      IN0GW1.IN0GWIOM = "A";
      IN0GSXK(); /* <=== add set aside item*/
      if (SQLCA.VAGen_SQLCODE == 0)
        IN0GS95(); /* <=== reset item arr. after add*/
      else
        IN0GW1.IN0GWERS = "Y";
        converseLib.validationFailed(0071); /* <=== sas db2 error*/
      end
    end
    return;
  end

   /* ********************************************************/
   /* *** change set aside item                           ****/
   /* ********************************************************/

  if (IN0GW1.IN0GWUPD == "CHG")
    IN0GW1.IN0GWSFL = "N"; /* set chg setaside flag to no*/
    IN0GW1.INBSAQTG = INBREC.INBSAQTG; /* <=== save orig qtys*/
    INBREC.INBSATOT = 0;
    IN0GW1.IN0GWIX1 = 1;
    while (IN0GW1.IN0GWIX1 <= 40)
      if (IN0GM040.SY4IDDSC[IN0GWIX1] == "TOTAL"
       || IN0GM040.SY4IDDSC[IN0GWIX1] == "     ")
        /* ** next sentence ***/
      else /* <=== add up adjustments into total*/
        IN0GWWK2 = IN0GM040.INBSAQTY[IN0GWIX1] +         IN0GM040.IN0GMAQT[IN0GWIX1];
        IN0GW1.IN0GWSIX = IN0GW1.IN0GWSID[IN0GWIX1];
        INBREC.INBSAQTY[IN0GWSIX] = IN0GW1.IN0GWWK2;
        INBREC.INBSATOT = INBREC.INBSATOT + INBREC.INBSAQTY[IN0GWSIX];
      end
      if (IN0GW1.IN0GWWK2 > 0)
         /* a setaside item greater than zero*/
        IN0GW1.IN0GWSFL = "Y"; /* set update setaside flag to yes*/
      end
      IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
    end
    INBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    INBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    if (IN0GW1.IN0GWSFL == "Y") /* if setaside flag yes do update*/
      IN0GW1.IN0GWIOM = "U";
      IN0GSXK(); /* <=== change set aside item*/
      if (SQLCA.VAGen_SQLCODE == 0)
        /* next sentence, audit updates handled in in9060.*/
      else
        if (SQLCA.VAGen_SQLCODE == 100
         || SQLCA.VAGen_SQLCODE == -911
         || SQLCA.VAGen_SQLCODE == -913)
          converseLib.validationFailed(0085); /* <=== item in use msg*/
          IN0GW1.IN0GWERS = "Y";
          IN0GW1.IN0GWSES = "Y";
        else
          converseLib.validationFailed(0071); /* <=== sas db2 error*/
          IN0GW1.IN0GWERS = "Y";
        end
      end
    else /* if setaside flag no - no item qty*/
                                   /* greater than zero*/
      IN0GW1.IN0GWIOM = "D";
      IN0GSXK(); /* <=== delete set aside item*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (IN0GW1.IN0GWERS != "Y")
          IN0GS91(); /* <=== reset item arr. after delete*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100
         || SQLCA.VAGen_SQLCODE == -911
         || SQLCA.VAGen_SQLCODE == -913)
          converseLib.validationFailed(0085); /* <=== item in use msg*/
          IN0GW1.IN0GWERS = "Y";
          IN0GW1.IN0GWSES = "Y";
        else
          IN0GW1.IN0GWERS = "Y";
          converseLib.validationFailed(0071); /* <=== sas db2 error*/
        end
      end
    end
    return;
  end



   /* ********************************************************/
   /* *** end of statement group                          ****/
   /* ********************************************************/


end // end IN0GS90

// reset item br arr. after delet
Function IN0GS91()


   /* ********************************************************/
   /* *** move item br array id's up due to delete        ****/
   /* ********************************************************/

  if (IN0GW2.IN0GWIIX == 1 /* <=== if the only item was deleted*/
   && IN0GW2.IN0GWIAB == 1)
    IN0GW2.IN0GWIIX = 0; /* - then array is now empty*/
    IN0GW2.IN0GWIAB = 0;
    IN0GW2.IN0GWIPP = 0;
    return;
  end

  IN0GW1.IN0GWIX1 = IN0GW2.IN0GWIIX + 1;
  while (IN0GW2.IN0GWIIX <= 200 /* <== loop to move item keys up*/
   && IN0GW2.IN0GWIIX < IN0GW2.IN0GWIAB)
    IN0GW2.IN0GWIBK[IN0GWIIX] = IN0GW2.IN0GWIBK[IN0GWIX1];
    IN0GW1.IN0GWIX1 = IN0GW1.IN0GWIX1 + 1;
    IN0GW2.IN0GWIIX = IN0GW2.IN0GWIIX + 1;
  end
  IN0GW2.IN0GWIIX = IN0GW2.IN0GWIIX - 1;
  IN0GW2.IN0GWIAB = IN0GW2.IN0GWIIX; /* <== array bot ptr moved up*/
  IN0GW2.IN0GWIIX = IN0GW2.IN0GWIPP; /* <== array ptr becomes top*/


   /* ********************************************************/
   /* *** end of statement group                          ****/
   /* ********************************************************/


end // end IN0GS91

// update inventory items
Function IN0GS94()

   /* *****************************************************/
   /* *** update inventory item for an added sas item  ****/
   /* ***  or a changed sas item                       ****/
   /* ***  note: USE THE SIDE ID AS AN INDEX FOR UPDATING **/
   /* ***  THE INF-CHG-QTY BUCKET.                     ****/
   /* *****************************************************/

  if (IN0GW1.IN0GWUPD == "ADD"
   || IN0GW1.IN0GWUPD == "CHG")
    IN0GW1.IN0GWSIX = IN0GW1.IN0GWSID[IN0GWIX1]; /* USE RIGHT BUCKET*/
    INFREC.INF-CHG-QTY[IN0GWSIX] = IN0GM040.IN0GMAQT[IN0GWIX1];
    if (IN0GW1.IN0GWUPD == "CHG")
      INFREC.ZZ-CHNG-CNT[IN0GWSIX] = IN1REC.ZZZCHGCT;
    end
  end

   /* *****************************************************/
   /* *** update inventory item for a deleted sas item ****/
   /* *****************************************************/

  if (IN0GW1.IN0GWUPD == "DEL")
    if (SQLCA.VAGen_SQLCODE == 0)
      IN0GW1.IN0GWSIX = IN0GW1.IN0GWSID[IN0GWIX1]; /**/
      INFREC.INF-CHG-QTY[IN0GWSIX] = IN0GM040.INBSAQTY[IN0GWIX1] * -1; /**/
      INFREC.ZZ-CHNG-CNT[IN0GWSIX] = IN1REC.ZZZCHGCT;
    else
      converseLib.validationFailed(0066); /* <=== invnt item not on db*/
      IN0GW1.IN0GWERS = "Y";
      set IN0GM040.INBSAQTY[IN0GWIX1] skip, bold;
    end
  end

   /* *********************************************************/
   /* *** end of statement group                           ****/
   /* *********************************************************/


end // end IN0GS94

// reset item br arr. after add
Function IN0GS95()


   /* ********************************************************/
   /* *** reset pointers in array due to add              ****/
   /* ********************************************************/

  IN0GW2.IN0GWIAB = IN0GW2.IN0GWIAB + 1;
  if (IN0GW2.IN0GWIAB > 990)
    IN0GW1.IN0GWERS = "Y";
    IN0GM040.XXXMSG = "ITEM ARRAY IS FULL - CALL PROGRAMMER";
    exit stack;
  end
     /* ******    add new id to bottom of header array*/
  IN0GW2.IN0GWIBK[IN0GWIAB] = INBREC.INBKEY;
     /* ******    set page pointer to 1 if first entry in array*/
  if (IN0GW2.IN0GWIPP == 0)
    IN0GW2.IN0GWIPP = 1;
  end
  IN0GW2.IN0GWIIX = IN0GW2.IN0GWIPP;


   /* ********************************************************/
   /* *** end of statement group                          ****/
   /* ********************************************************/


end // end IN0GS95

// select header set inarec
Function IN0GSXA()


   /* *******************************************************/
   /* *** get set aside header set based on set aside    ****/
   /* *** save key:                                      ****/
   /* ***     - this save key is the first set aside id  ****/
   /* ***       on the last page the user looked at or   ****/
   /* ***     - this save key is the set aside position  ****/
   /* ***       key entered on the top of the screen     ****/
   /* *******************************************************/

  call "IO0940" ("SS", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "IO0940" ("SS", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0070); /* <=== not on db msg*/
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0071); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "SS      ";
  TA1REC.TA1LOCAT[2] = "IO0940  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXA ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASHDR01";
  IN0GW1.IN0GWSSI = INAREC.INASAID;
  TA1REC.TA1TBLKE = IN0GW1.IN0GWSSI;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXA

// return set aside header record
Function IN0GSXB()


   /* *******************************************************/
   /* *** return set aside header record after a good    ****/
   /* *** select scan                                    ****/
   /* *******************************************************/

  call "IO0940" ("SN", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "IO0940" ("SN", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end


  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    if (IN0GW1.IN0GWFTS == "Y")
      IN0GW1.IN0GWERS = "Y";
      converseLib.validationFailed(0070); /* <=== not on db msg*/
    end
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "SN      ";
  TA1REC.TA1LOCAT[2] = "IO0940  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXB ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASHDR01";
  IN0GW1.IN0GWSSI = INAREC.INASAID;
  TA1REC.TA1TBLKE = IN0GW1.IN0GWSSI;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXB

// close inarec select set
Function IN0GSXC()


   /* *******************************************************/
   /* *** close the set aside header record set          ****/
   /* *******************************************************/

  call "IO0940" ("CS", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "CS      ";
  TA1REC.TA1LOCAT[2] = "IO0940  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXC ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASHDR01";
  IN0GW1.IN0GWSSI = INAREC.INASAID;
  TA1REC.TA1TBLKE = IN0GW1.IN0GWSSI;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXC

// unique select of a header rec
Function IN0GSXD()


   /* *******************************************************/
   /* *** select one set aside header record that has    ****/
   /* *** a unique set aside id                          ****/
   /* *******************************************************/

  call "IO0940" ("S ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "IO0940" ("S ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = "IO0940  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXD ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASHDR01";
  IN0GW1.IN0GWSSI = INAREC.INASAID;
  TA1REC.TA1TBLKE = IN0GW1.IN0GWSSI;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXD

// select item set inbrec
Function IN0GSXE()


   /* *******************************************************/
   /* *** get set aside item set based on set aside id   ****/
   /* *******************************************************/

  call "IO0950" ("SS", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "IO0950" ("SS", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0GW1.IN0GWERS = "Y";
    converseLib.validationFailed(0071); /* <=== sas db error msg*/
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== call programmer msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "SS      ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXE ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXE

// select next set aside item
Function IN0GSXF()


   /* *******************************************************/
   /* *** return next set aside item                     ****/
   /* *******************************************************/

  call "IO0950" ("SN", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "IO0950" ("SN", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "SN      ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXF ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXF

// close set aside item set
Function IN0GSXG()


   /* *******************************************************/
   /* *** close the set aside item record set            ****/
   /* *******************************************************/

  call "IO0950" ("CS", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "CS      ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXG ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = " ";

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXG

// select set aside item row
Function IN0GSXH()


   /* *******************************************************/
   /* *** select one set aside item record that has      ****/
   /* *** a unique item key                              ****/
   /* *******************************************************/

  call "IO0950" ("S ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "IO0950" ("S ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXH ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXH

// unique sel. of inven. ctl rec
Function IN0GSXI()


   /* *******************************************************/
   /* *** select inventory control record to get next    ****/
   /* *** set aside id*/
   /* *******************************************************/

  call "IO0810" ("S ", SQLCA, INEREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "IO0810" ("S ", SQLCA, INEREC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0GW1.IN0GWERS = "Y";
    IN0GM020.XXXMSG = "INVENTORY CONTROL REC NOT ON DB";
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = "IO0810  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXI ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VINCTL01";
  TA1REC.TA1TBLKE = " ";

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXI

// change inventory control rec
Function IN0GSXJ()


   /* *******************************************************/
   /* *** change the inventory control record            ****/
   /* *******************************************************/

  call "IO0810" ("U ", SQLCA, INEREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "IO0810" ("U ", SQLCA, INEREC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    IN0GW1.IN0GWERS = "Y";
    IN0GM020.XXXMSG = "INVENTORY CONTROL REC NOT ON DB";
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "U       ";
  TA1REC.TA1LOCAT[2] = "IO0810  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXJ ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VINCTL01";
  TA1REC.TA1TBLKE = " ";

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXJ

// update set aside items
Function IN0GSXK()


   /* *******************************************************/
   /* *** update a set aside item record : add, change   ****/
   /* *** or delete                                      ****/
   /* *******************************************************/

  if (IN0GW1.IN0GWIOM == "A")
    call "IO0950" ("A ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if*/
                                   /* contention*/
      IN0GW1.IN0GWLOP = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && IN0GW1.IN0GWLOP <= 10)
        call "IO0950" ("A ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
        IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
      end
    end
  end

  if (IN0GW1.IN0GWIOM == "U")
    call "IO0950" ("U ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if*/
                                   /* contention*/
      IN0GW1.IN0GWLOP = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && IN0GW1.IN0GWLOP <= 10)
        call "IO0950" ("U ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
        IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
      end
    end
  end

  if (IN0GW1.IN0GWIOM == "D")
    call "IO0950" ("D ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if*/
                                   /* contention*/
      IN0GW1.IN0GWLOP = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && IN0GW1.IN0GWLOP <= 10)
        call "IO0950" ("D ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
        IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = IN0GW1.IN0GWIOM;
  TA1REC.TA1LOCAT[2] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXK ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXK

// update set aside header rec
Function IN0GSXL()

   /* *******************************************************/
   /* *** update a set aside header record : add, change ****/
   /* *** or delete                                      ****/
   /* *******************************************************/

  if (IN0GW1.IN0GWIOM == "A")
    call "IO0940" ("A ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if*/
                                   /* contention*/
      IN0GW1.IN0GWLOP = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && IN0GW1.IN0GWLOP <= 10)
        call "IO0940" ("A ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
        IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
      end
    end
  end

  if (IN0GW1.IN0GWIOM == "U")
    call "IO0940" ("U ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if*/
                                   /* contention*/
      IN0GW1.IN0GWLOP = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && IN0GW1.IN0GWLOP <= 10)
        call "IO0940" ("U ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
        IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
      end
    end
  end

  if (IN0GW1.IN0GWIOM == "D")
    call "IO0940" ("D ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if*/
                                   /* contention*/
      IN0GW1.IN0GWLOP = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && IN0GW1.IN0GWLOP <= 10)
        call "IO0940" ("D ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
        IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = IN0GW1.IN0GWIOM;
  TA1REC.TA1LOCAT[2] = "IO0940  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXL ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASHDR01";
  IN0GW1.IN0GWSSI = INAREC.INASAID;
  TA1REC.TA1TBLKE = IN0GW1.IN0GWSSI;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXL

// select unique invnt. item
Function IN0GSXO()


   /* *******************************************************/
   /* *** select an inventory item                       ****/
   /* *******************************************************/

  call "IO0590" ("S ", SQLCA, IN1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "IO0590" ("S ", SQLCA, IN1REC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "S      ";
  TA1REC.TA1LOCAT[2] = "IO0590  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXO ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VINITM01";
  TA1REC.TA1TBLKE = IN1REC.IN1KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXO

// this stgp get the invent. rec.
Function IN0GSXQ()



    /* ***********************************************************/
    /* **/
    /* *  this iomod checks to see if inventory item exists     **/
    /* *                                                        **/
    /* ***********************************************************/


  call "DB1030" ("S ", INQREC, IN9REC) {isNoRefresh = yes, isExternal = yes};
  SQLCA.SQLCAREC = INQREC.INQSQLCA;

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "DB1030" ("S ", INQREC, IN9REC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)

  else

    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0G   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "IN0GSXQ ";
    TA1REC.TA1LOCAT[3] = "DB1030  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "        ";
    TA1REC.TA1DBASE = "DINVNT";
    TA1REC.TA1TBLVU = "VINITM01";
    move SQLCA to ERRSQLCA withV60Compat;

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

    XSPF4();

  end



end // end IN0GSXQ

// select size scale row
Function IN0GSXS()


   /* *******************************************************/
   /* *** use size scale for valid sizes                 ****/
   /* *******************************************************/

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== loop at least 10 times if contention*/
    IN0GW1.IN0GWLOP = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && IN0GW1.IN0GWLOP <= 10)
      call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
      IN0GW1.IN0GWLOP = IN0GW1.IN0GWLOP + 1;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = "IO0040  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXS ";
  TA1REC.TA1DBASE = "DPROD   ";
  TA1REC.TA1TBLVU = "VSCALE01";
  TA1REC.TA1TBLKE = SY4REC.SY4SZSCL;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXS

// select size scale row
Function IN0GSXT()


   /* *******************************************************/
   /* *** get (xsd) now pc2inseg code*/
   /* *******************************************************/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  end

  IN0GW1.IN0GWERS = "Y";
  converseLib.validationFailed(0008); /* <=== db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0G    ";
  TA1REC.TA1LOCAT[1] = "S       ";
  TA1REC.TA1LOCAT[2] = "IO3340  ";
  TA1REC.TA1LOCAT[3] = "IN0GSXT ";
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPRDCU01";
  TA1REC.TA1TBLKE = PC2REC.PC2KEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *******************************************************/
   /* *** end of statement group                         ****/
   /* *******************************************************/


end // end IN0GSXT

//*** RECORD=IN0GW1 ****
// ********************* working storage common fields ********
// 
// purpose:          these working storage fields are generally
//                   used by all applications.
// 
//                   the name of this record and its fields
//                   will still require customization for
//                   application uniqueness.
// 
// 
// maintenance log:
// 
// date      init    comments
// --------  ----    -------------------------------------
// 10-23-86  mgc
// 02-01-88  jbc     add internal size array for updates
// 02-27-90  kande1  added a flag for setaside item updates
// 03-24-94  Dannan  Changed length of IN0GW1.IN0GWPRG to be 6
//                   so that compare in stmtgrp IN0GS54 would
//                   not result in a 'data type conflict' error
//                   Also, changed the field from CHA to NUM.
// ************************************************************
// **********************
Record IN0GW1 type basicRecord
  10 IN0GWERS IN0GWERS ; 
  10 IN0GWSES IN0GWSES ; 
  10 IN0GWFTS IN0GWFTS ; 
  10 IN0GWEOF IN0GWEOF ; 
  10 IN0GWSFL IN0GWSFL ; 
  10 IN0GWIX1 IN0GWIX1 ; 
  10 IN0GWIX2 IN0GWIX2 ; 
  10 IN0GWLOP IN0GWLOP ; 
  10 IN0GWCTR IN0GWCTR ; 
  10 IN0GWCT2 IN0GWCT2 ; 
  10 IN0GWSIX IN0GWSIX ; 
  10 IN0GWSID IN0GWSID [40] ; 
  10 IN0GWLPP IN0GWLPP ; 
  10 IN0GWCDT IN0GWCDT ; 
    15 IN0GWCCC IN0GWCCC ; 
    15 IN0GWCYY IN0GWCYY ; 
    15 IN0GWCMM IN0GWCMM ; 
    15 IN0GWCDD IN0GWCDD ; 
  10 IN0GWLPR IN0GWLPR ; 
  10 IN0GWLMP IN0GWLMP ; 
  10 IN0GWUPD IN0GWUPD ; 
  10 IN0GWINQ IN0GWINQ ; 
  10 IN0GWSSI IN0GWSSI ; 
  10 IN0GWIOM IN0GWIOM ; 
  10 IN0GWBRP IN0GWBRP ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 INBSAQTG INBSAQTG ; 
    15 INBSAQTY INBSAQTY [40] ; 
  10 IN0GWWK1 IN0GWWK1 ; 
  10 IN0GWWK2 IN0GWWK2 ; 
  10 IN0GWWK3 IN0GWWK3 ; 
  10 INASAOWN INASAOWN ; 
  10 XNDCD XNDCD ; 
  10 XIRCD XIRCD ; 
  10 IN0GWPRG IN0GWPRG ; 
  10 INASADC1 INASADC1 ; 
  10 INASADC2 INASADC2 ; 
  10 INASADC3 INASADC3 ; 
  10 INASADC4 INASADC4 ; 
  10 IN0G-FETCH-NEW IN0G-FETCH-NEW ; 
  10 IN0G-SEARCH-KEY-FL IN0G-SEARCH-KEY-FL ; 
  10 IN0G-SEARCH-KEY IN0G-SEARCH-KEY ; 
    15 IN0G-WHSE-KEY IN0G-WHSE-KEY ; 
    15 IN0G-OG-KEY IN0G-OG-KEY ; 
    15 IN0G-GPC-KEY IN0G-GPC-KEY ; 
    15 IN0G-STYLE-KEY IN0G-STYLE-KEY ; 
end // end IN0GW1

//*** RECORD=IN0GW2 ****
// ********************* screen array fields ******************
// 
// purpose:          save header and item information from the
//                   screen to allow for scrolling.
// 
// maintenance log:
// 
// date      init    comments
// --------  ----    -------------------------------------
// 10-23-86  mgc
// 07-23-87  jbc     increased item br array from 200 to 900
// 03-24-94  Dannan  Corrected truncation problem when moving
//                   IN0GW2.IN0GWIBK(INDEX) TO INBREC.INBKEY.
//                   Changed the LVL for INBSATOT from 15 to
//                   10.
// ************************************************************
// **********************
Record IN0GW2 type basicRecord
  5 IN0GWHPP IN0GWHPP ; 
  5 IN0GWHAB IN0GWHAB ; 
  5 IN0GWHMX IN0GWHMX ; 
  5 IN0GWHIX IN0GWHIX ; 
  5 IN0GWHBA IN0GWHBA [200] ; 
    10 INASAID INASAID ; 
  5 IN0GWIPP IN0GWIPP ; 
  5 IN0GWIAB IN0GWIAB ; 
  5 IN0GWIMX IN0GWIMX ; 
  5 IN0GWIIX IN0GWIIX ; 
  5 IN0GWIBA IN0GWIBA [990] ; 
    10 IN0GWIBK IN0GWIBK ; 
      15 IN0GWSAI IN0GWSAI ; 
      15 IN0G-SEARCH-KEY IN0G-SEARCH-KEY ; 
        20 XWHCD XWHCD ; 
        20 XOWCD XOWCD ; 
        20 XGPCD XGPCD ; 
        20 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XSDCD XSDCD ; 
      15 XSACD XSACD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
    10 INBSATOT INBSATOT ; 
end // end IN0GW2

// get new data flag
DataItem IN0G-FETCH-NEW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   gpc
DataItem IN0G-GPC-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   owner-group
DataItem IN0G-OG-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search key for m030
DataItem IN0G-SEARCH-KEY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search key flag
DataItem IN0G-SEARCH-KEY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   style
DataItem IN0G-STYLE-KEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   whse
DataItem IN0G-WHSE-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process to branch to
DataItem IN0GWBRP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date (cc)
DataItem IN0GWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (dd)
DataItem IN0GWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (ccyymmdd)
DataItem IN0GWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (mm)
DataItem IN0GWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work counter 2
DataItem IN0GWCT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work counter
DataItem IN0GWCTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (yy)
DataItem IN0GWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// eof switch (=y)
DataItem IN0GWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general error switch
DataItem IN0GWERS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time switch (=y)
DataItem IN0GWFTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header browse array bottom
DataItem IN0GWHAB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header browse array
DataItem IN0GWHBA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header browse array index
DataItem IN0GWHIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header browse array max ent.
DataItem IN0GWHMX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header browse page pointer
DataItem IN0GWHPP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item browse array bottom
DataItem IN0GWIAB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item browse array
DataItem IN0GWIBA char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item browse key
DataItem IN0GWIBK char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item browse array index
DataItem IN0GWIIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item browse array max ent.
DataItem IN0GWIMX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map inquiry flag (id,whse)
DataItem IN0GWINQ char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// io mod update flag (a,u,d)
DataItem IN0GWIOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item browse page pointer
DataItem IN0GWIPP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'while' counter/index1
DataItem IN0GWIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'while' index for map
DataItem IN0GWIX2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last map
DataItem IN0GWLMP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// while loop counter
DataItem IN0GWLOP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lines per page
DataItem IN0GWLPP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last process/sgrp
DataItem IN0GWLPR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set aside purge date
DataItem IN0GWPRG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item set aside id
DataItem IN0GWSAI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// special error switch
DataItem IN0GWSES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// setaside add/delete flag
DataItem IN0GWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal size id
DataItem IN0GWSID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index to internal size id
DataItem IN0GWSIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved set aside id
DataItem IN0GWSSI num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map update flag (add,chg,del)
DataItem IN0GWUPD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// computation work field
DataItem IN0GWWK1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// computation work field
DataItem IN0GWWK2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// computation work field
DataItem IN0GWWK3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

