package in0q;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=IN0Q ****
// IN0Q - STOCK TRANSFER INQUIRY BY CUSTOMER
// 
// THIS PROGRAM WILL ALLOW THE USERS TO INQUIRY ON STOCK
// TRANSFERS BY CUSTOMER NUMBER.  WHEN A TRANSFER IS SELECTED
// FOR INQUIRY, THIS PROGRAM WILL TRANSFER CONTROL TO IN0T -
// INQUIRY BY DOCUMENT (HEADER) SCREEN.
// 
// THE USER CAN TRANSFER OUT OF THIS APPLICATION BY USING ONE
// OF THE PF KEYS DISPLAYED AT THE BOTTOM OF THE MAP, OR BY
// ENTERING FAST-PATH INFORMATION (ALSO AT THE BOTTOM OF THE
// MAP).
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      04/02/92  DCHIAN  New application.
// 1H0003   11/17/93  SMACMI  European Phase I changes; enhancd
//                            call to Help (GD01) pgm.
//          05/14/96  mleyth  increased in0qw02 table size.
// ************************************************************
// *********************
Program IN0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IN00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  IN0QW01 IN0QW01; // record
  IN0QW02 IN0QW02; // record
  IN7REC IN7REC; // record
  IN8REC IN8REC; // record
  INWREC INWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XGPTBL; // table
  use IN0QM.IN0QM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPIN001: XPIN001();
     /* ------------------------------------------------------------*/
     /* INITIALIZE WORKING STORAGE AND DISPLAY STORAGE AREAS.*/
     /* ------------------------------------------------------------*/

    set IN0QM001 initial; /* CLEAR THE MAP*/
    set IN0QW01 empty; /* INITIALIZE WORKING STORAGE*/
    set IN0QW02 empty; /* INITIALIZE WORKING STORAGE*/
    set IN7REC empty; /* INITIALIZE STOCK TRANSFER HEADER TBL*/
    set IN8REC empty; /* INITIALIZE STOCK TRANSFER ITEM TBL*/
    set SQLCA empty; /* SQL COMMUNICATION AREA*/
    set TAEREC empty; /* ERROR DIAGNOSIS INFORMATION*/
    set TA1REC empty; /* ERROR DIAGNOSIS PARAMETERS*/


    IN0QW-REQ-DATA = "N";

     /* ------------------------------------------------------------*/
     /* FLOW TO CONVERSE THE MAIN PROCESS USED TO DISPLAY A MAP.*/
     /* ------------------------------------------------------------*/

    goto IN0Q-001; /* Converse the main process*/

    IN0Q-001: IN0Q-001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto IN0Q-001; /* Converse the main process*/


  end // end main
end // end IN0Q

// INQUIRE STOCK TRANSFER BY CUST
Function IN0Q-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  IN0Q-100(); /* Obtain the data to display*/

  IN0Q-200(); /* Format and display the map*/

  IN0Q-300(); /* Check attention identifier*/

  IN0Q-400(); /* Reset fields to normal intensity*/

  IN0Q-500(); /* Verify the entered data*/

  IN0Q-600(); /* Process valid input request*/


end // end IN0Q-001

// Obtain the data to display
Function IN0Q-100()
   /* --------------------------------------------------------------------*/
   /* OBTAIN DATA TO DISPLAY AND STORE IN W/S TABLE*/
   /* --------------------------------------------------------------------*/

   /* --------------------------------------------------------------------*/
   /* IF FIRST TIME, THERE IS NO CUSTOMER NUMBER FROM MAP TO OBTAIN DATA*/
   /* --------------------------------------------------------------------*/

  if (IN0QW-REQ-DATA == "N")
    return; /* RETURN TO PREVIOUS PROCESS(IN0Q-001)*/
  end

  if (converseVar.validationMsgNum == 0)
     /* NEXT SENTENCE*/
  else
    return;
  end


   /* --------------------------------------------------------------------*/
   /* SELECT ON THE STOCK TRANSFER HEADER TABLE.*/
   /* CUSTOMER NUMBER IS REQUIRED, STORE, DEPT, FROM/TO WHSE ARE OPTIONAL*/
   /* --------------------------------------------------------------------*/

  set IN7REC empty;

  IN7REC.KUCCOID = IN0QW01.KUCCOID;

  if (IN0QW01.KUMSTRID == 0)
    IN7REC.KUMSTRID = -1;
  else
    IN7REC.KUMSTRID = IN0QW01.KUMSTRID;
  end

  if (IN0QW01.XNXCD > 0)
    IN7REC.XNXCD = IN0QW01.XNXCD;
  else
    IN7REC.XNXCD = -1;
  end

  if (IN0QW01.IN7STFWH != " ")
    IN7REC.IN7STFWH = IN0QW01.IN7STFWH;
  end

  if (IN0QW01.IN7STTWH != " ")
    IN7REC.IN7STTWH = IN0QW01.IN7STTWH;
  end

  if (IN0QW01.XIUCD != " ")
    IN7REC.XIUCD = IN0QW01.XIUCD;
  end

  if (IN0QW01.IN7STFOW != " ")
    IN7REC.IN7STFOW = IN0QW01.IN7STFOW;
  end

  if (IN0QW01.IN7STTOW != " ")
    IN7REC.IN7STTOW = IN0QW01.IN7STTOW;
  end

  if (INWREC.INW-START-ZZZSDT == 0)
    IN7REC.ZZZSDT = -1;
  else
    IN7REC.ZZZSDT = INWREC.INW-START-ZZZSDT;
  end

   /* SELECT BY CUSTOMER FROM DINVNT.VTFHDR01*/

  call "IO0720" ("S2", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* NORMAL RETURN*/
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* CONTENTION FOR DATA BASE RESOURCE*/
      converseLib.validationFailed(166);
      return;
    else
      converseLib.validationFailed(168); /* FATAL ERROR*/
      TA1REC.TA1PGMNO = "IN0Q"; /* MODULE ID*/
      TA1REC.TA1TYPE = "DB2"; /* TYPE OF ERROR*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* PROGRAM APPLICATION*/
      TA1REC.TA1DBASE = "DINVNT  "; /* DATABASE NAME*/
      TA1REC.TA1TBLVU = "VTFHDR01"; /* TABLE VIEW NAME*/
      TA1REC.TA1TBLKE = IN7REC.IN7KEY; /* TABLE KEY*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC;
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* ERROR DIAG RTN*/
      return;
    end
  end

   /* --------------------------------------------------------------------*/
   /* PROCESS ALL VTFHDR01 FOR THE CUSTOMER*/
   /* --------------------------------------------------------------------*/

  IN0QW-NDX = 1;

  IN0QW-END-VTFHDR01 = "N";

  while (IN0QW-END-VTFHDR01 == "N")
    IN0Q-110();
  end

   /* --------------------------------------------------------------------*/
   /* CLOSE STOCK TRANSFER HEADER TABLE*/
   /* --------------------------------------------------------------------*/

  call "IO0720" ("C2", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};

end // end IN0Q-100

// Select the requested table row
Function IN0Q-110()
   /* ------------------------------------------------------------*/
   /* READ STOCK TRANSFER HEADER TABLE*/
   /* ------------------------------------------------------------*/

  call "IO0720" ("N2", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes}; /* GET EACH ROW*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (INWREC.INW-END-ZZZSDT > 0)
      if (IN7REC.ZZZSDT <= INWREC.INW-END-ZZZSDT)
         /* next sentence*/
      else
        return;
      end
    else
       /* next sentence*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* CONTENTION FOR DATA BASE RESOURCE*/
      converseLib.validationFailed(166);
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* END OF FILE*/
        IN0QW-END-VTFHDR01 = "Y";
        move IN0QW-NDX to IN0QW-TOT-REC-READ withV60Compat;
        IN0QW-TOT-REC-READ = IN0QW-TOT-REC-READ - 1;
        return;
      else
        converseLib.validationFailed(166); /* FATAL ERROR*/
        TA1REC.TA1PGMNO = "IN0Q";
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1LOC = "GET NEXT TABLE ROW";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1DBASE = "DINVNT  ";
        TA1REC.TA1TBLVU = "VTFHDR01";
        TA1REC.TA1TBLKE = IN7REC.IN7KEY;
        TAEREC.SQLCAREC = SQLCA.SQLCAREC;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
        return;
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* SELECT STOCK TRANSFER ITEM TABLE*/
   /* STOCK TRANSFER NUMBER IS REQUIRED, FROM HDR TO GET ITEM*/
   /* ALL OTHER FIELDS ARE OPTIONAL.*/
   /* ------------------------------------------------------------*/

  set IN8REC empty;

  IN8REC.IN7STNBR = IN7REC.IN7STNBR;

  if (IN0QW01.XGPCD != " ")
    IN8REC.XGPCD = IN0QW01.XGPCD;
  end

  if (IN0QW01.SY1STNBR != " ")
    IN8REC.SY1STNBR = IN0QW01.SY1STNBR;
  end

  if (IN0QW01.SY2CLRID != " ")
    IN8REC.SY2CLRID = IN0QW01.SY2CLRID;
  end

  if (IN0QW01.XDMCD != " ")
    IN8REC.XDMCD = IN0QW01.XDMCD;
  end

  if (IN0QW01.XSDCD != " ")
    IN8REC.XSDCD = IN0QW01.XSDCD;
  end

  call "IO0730" ("SS", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* NORMAL RETURN*/
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* CONTENTION FOR DATA BASE RESOURCE*/
      converseLib.validationFailed(164);
    else
      converseLib.validationFailed(167); /* FATAL ERROR*/
      TA1REC.TA1PGMNO = "IN0Q";
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1LOC = "GET NEXT TABLE ROW";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
      TA1REC.TA1DBASE = "DINVNT  ";
      TA1REC.TA1TBLVU = "VTFITM01";
      TA1REC.TA1TBLKE = IN8REC.IN8KEY;
      TAEREC.SQLCAREC = SQLCA.SQLCAREC;
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* LOAD INTO W/S TABLE AND ALSO CHECK FOR TABLE OVERFLOW*/
   /* ------------------------------------------------------------*/

  IN0QW-END-VTFITM01 = "N";

  while (IN0QW-END-VTFITM01 == "N")
    IN0Q-120();
  end

   /* ------------------------------------------------------------------*/
   /* CLOSE STOCK TRANSFER ITEM TABLE*/
   /* ------------------------------------------------------------------*/

  call "IO0730" ("CS", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};

end // end IN0Q-110

// PROCESS STOCK TRANSTER ITEMS
Function IN0Q-120()
  call "IO0730" ("SN", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes}; /* GET EACH ITEM ROW*/

  if (SQLCA.VAGen_SQLCODE == 0) /* NORMAL RETURN*/
     /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* CONTENTION FOR DATA BASE RESOURCE*/
      converseLib.validationFailed(167);
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* END OF FILE*/
        IN0QW-END-VTFITM01 = "Y";
        return;
      else
        converseLib.validationFailed(167); /* FATAL ERROR*/
        TA1REC.TA1PGMNO = "IN0Q";
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1LOC = "GET NEXT TABLE ROW";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1DBASE = "DINVNT";
        TA1REC.TA1TBLVU = "VTFITM01";
        TA1REC.TA1TBLKE = IN8REC.IN8KEY;
        TAEREC.SQLCAREC = SQLCA.SQLCAREC;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
        return;
      end
    end
  end

   /* -------------------------------------------------------------*/
   /* LOAD INTO W/S TABLE AND ALSO CHECK FOR TABLE OVERFLOW*/
   /* -------------------------------------------------------------*/

  if (IN0QW-NDX < 751)
    IN0QW02.IN7STNBR[IN0QW-NDX] = IN7REC.IN7STNBR;
    IN0QW02.IN7STFWH[IN0QW-NDX] = IN7REC.IN7STFWH;
    IN0QW02.IN7STTWH[IN0QW-NDX] = IN7REC.IN7STTWH;
    IN0QW02.XISCD[IN0QW-NDX] = IN7REC.XISCD;
    IN0QW02.XIUCD[IN0QW-NDX] = IN7REC.XIUCD;
    IN0QW02.IN7STLDT[IN0QW-NDX] = IN7REC.IN7STLDT;
    IN0QW02.IN7STHDT[IN0QW-NDX] = IN7REC.IN7STHDT;
    IN0Q-130(); /* ACCUMULATE 1-40 ISSUED QTY*/
  else
    converseLib.validationFailed(163); /* TABLE OVERFLOW*/
    return;
  end

  IN0QW-NDX = IN0QW-NDX + 1;

end // end IN0Q-120

// ACCUMULATE 1-40 ISSUED QTY
Function IN0Q-130()
   /* ------------------------------------------------------------------*/
   /* ACCUMULATE ISSUED QTY 1-40 FROM EACH ROW DINVNT.VTFITM01*/
   /* ------------------------------------------------------------------*/
  IN0QW02.IN8SIQ[IN0QW-NDX] = IN8REC.IN8SIQ[1] + IN8REC.IN8SIQ[2]                           + IN8REC.IN8SIQ[3] + IN8REC.IN8SIQ[4]                           + IN8REC.IN8SIQ[5] + IN8REC.IN8SIQ[6]                           + IN8REC.IN8SIQ[7] + IN8REC.IN8SIQ[8]                           + IN8REC.IN8SIQ[9] + IN8REC.IN8SIQ[10]                           + IN8REC.IN8SIQ[11] + IN8REC.IN8SIQ[12]                           + IN8REC.IN8SIQ[13] + IN8REC.IN8SIQ[14]                           + IN8REC.IN8SIQ[15] + IN8REC.IN8SIQ[16]                           + IN8REC.IN8SIQ[17] + IN8REC.IN8SIQ[18]                           + IN8REC.IN8SIQ[19] + IN8REC.IN8SIQ[20]                           + IN8REC.IN8SIQ[21] + IN8REC.IN8SIQ[22]                           + IN8REC.IN8SIQ[23] + IN8REC.IN8SIQ[24]                           + IN8REC.IN8SIQ[25] + IN8REC.IN8SIQ[26]                           + IN8REC.IN8SIQ[27] + IN8REC.IN8SIQ[28]                           + IN8REC.IN8SIQ[29] + IN8REC.IN8SIQ[30]                           + IN8REC.IN8SIQ[31] + IN8REC.IN8SIQ[32]                           + IN8REC.IN8SIQ[33] + IN8REC.IN8SIQ[34]                           + IN8REC.IN8SIQ[35] + IN8REC.IN8SIQ[36]                           + IN8REC.IN8SIQ[37] + IN8REC.IN8SIQ[38]                           + IN8REC.IN8SIQ[39] + IN8REC.IN8SIQ[40];
end // end IN0Q-130

// Format and converse the map
Function IN0Q-200()
   /* -------------------------------------------------------------------*/
   /* IF DATA WAS REQUESTED, FORMAT KEY INFORMATION SAVED AND LINE ITEMS*/
   /* -------------------------------------------------------------------*/

  IN0QM001.XXXCURDT = VGVar.currentShortGregorianDate;

  if (IN0QW-REQ-DATA == "N"
  ) /* NEXT SENTENCE*/
  else
    IN0QW-REQ-DATA = "N";
    IN0QM001.KUCCOID = IN0QW01.KUCCOID;
    IN0QM001.KUMSTRID = IN0QW01.KUMSTRID;
    IN0QM001.XNXCD = IN0QW01.XNXCD;
    IN0QM001.IN7STFWH = IN0QW01.IN7STFWH;
    IN0QM001.IN7STTWH = IN0QW01.IN7STTWH;
    IN0QM001.XIUCD = IN0QW01.XIUCD;
    IN0QM001.IN7STFOW = IN0QW01.IN7STFOW;
    IN0QM001.IN7STTOW = IN0QW01.IN7STTOW;
    IN0QM001.XGPCD = IN0QW01.XGPCD;
    IN0QM001.SY1STNBR = IN0QW01.SY1STNBR;
    IN0QM001.SY2CLRID = IN0QW01.SY2CLRID;
    IN0QM001.XDMCD = IN0QW01.XDMCD;
    IN0QM001.XSDCD = IN0QW01.XSDCD;
    if (IN0QW-TOT-REC-READ > 0)
      IN0QW-NDX = 1;
      IN0QW-NX2 = 1;
      IN0QW-BAS = 1;
      IN0QW-END = 13;
      IN0QW-BLD-MAP-SW = "Y";
      while (IN0QW-BLD-MAP-SW == "Y")
        IN0Q-210();
      end
    else
      converseLib.validationFailed(60); /* NO STOCK TRANSFERS FOUND FOR THIS CUSTOMER*/
    end
  end

  converse IN0QM001 ;

  converseLib.validationFailed(0);

end // end IN0Q-200

// Format the display data
Function IN0Q-210()
   /* ------------------------------------------------------------*/
   /* Format the map fields from the working storage area.*/
   /* ------------------------------------------------------------*/

  if (IN0QW-NDX > IN0QW-TOT-REC-READ
   || IN0QW-NDX > IN0QW-END)
    IN0QW-BLD-MAP-SW = "N";
    return;
  else
    IN0QM-IN7STNBR[IN0QW-NX2] = IN0QW02.IN7STNBR[IN0QW-NDX];
    IN0QM-IN7STFWH[IN0QW-NX2] = IN0QW02.IN7STFWH[IN0QW-NDX];
    IN0QM-IN7STTWH[IN0QW-NX2] = IN0QW02.IN7STTWH[IN0QW-NDX];
    IN0QM-XISCD[IN0QW-NX2] = IN0QW02.XISCD[IN0QW-NDX];
    IN0QM-XIUCD[IN0QW-NX2] = IN0QW02.XIUCD[IN0QW-NDX];
    if (IN0QW02.IN7STLDT[IN0QW-NDX] != 0)
      IN0QM-IN7STLDT[IN0QW-NX2] = IN0QW02.IN7STLDT[IN0QW-NDX];
    end
    if (IN0QW02.IN7STHDT[IN0QW-NDX] != 0)
      IN0QM-IN7STHDT[IN0QW-NX2] = IN0QW02.IN7STHDT[IN0QW-NDX];
    end
    IN0QM-IN8SIQ[IN0QW-NX2] = IN0QW02.IN8SIQ[IN0QW-NDX];
  end

  IN0QW-NDX = IN0QW-NDX + 1;
  IN0QW-NX2 = IN0QW-NX2 + 1;

end // end IN0Q-210

// Check attention identifier
Function IN0Q-300()
   /* ------------------------------------------------------------*/
   /* CHECK PF KEYS/USER INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16
   || converseVar.eventKey is enter)
     /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(7); /* INVALID PF KEY*/
    return; /* EXIT TO REDISPLAY MAP*/
  end

   /* ------------------------------------------------------------*/
   /* TRANSFER TO REQUESTED APPLICATION VIA FAST PATH*/
   /* ------------------------------------------------------------*/

  if (IN0QM001.CATOAP is modified)
    if (IN0QM001.CATOAP != " ")
      IN0Q-310();
    end
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0T-5";
    XSEXIT();
    IN0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end

   /* ------------------------------------------------------------*/
   /* CANCEL*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2)
    set IN0QM001 initial;
    IN0QM001.XXXCURDT = VGVar.currentShortGregorianDate;
    IN0QM001.KUCCOID = IN0QW01.KUCCOID;
    IN0QM001.KUMSTRID = IN0QW01.KUMSTRID;
    IN0QM001.XNXCD = IN0QW01.XNXCD;
    IN0QM001.IN7STFWH = IN0QW01.IN7STFWH;
    IN0QM001.IN7STTWH = IN0QW01.IN7STTWH;
    IN0QM001.XIUCD = IN0QW01.XIUCD;
    IN0QM001.IN7STFOW = IN0QW01.IN7STFOW;
    IN0QM001.IN7STTOW = IN0QW01.IN7STTOW;
    IN0QM001.XGPCD = IN0QW01.XGPCD;
    IN0QM001.SY1STNBR = IN0QW01.SY1STNBR;
    IN0QM001.SY2CLRID = IN0QW01.SY2CLRID;
    IN0QM001.XDMCD = IN0QW01.XDMCD;
    IN0QM001.XSDCD = IN0QW01.XSDCD;
    IN0QW-NDX = 1;
    IN0QW-NX2 = 1;
    IN0QW-YES-NO-SW = "N";
    while (IN0QW-YES-NO-SW == "N")
      IN0Q-320(); /* REFRESH SCREEN*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* GO TO STOCK TRANSFER MASTER MENU*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3)
    set INWREC empty;
    COMMAREA.CAFROMAP = "IN0Q";
    COMMAREA.CATOAP = "IN0T";
    COMMAREA.CAUSERA = INWREC.CAUSERA;
    XSEXIT();
    IN0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end


   /* ------------------------------------------------------------*/
   /* GO TO MASTER MENU*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end


   /* ------------------------------------------------------------*/
   /* GO TO INVENTORY MENU*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5)
    set INWREC empty;
    COMMAREA.CAFROMAP = "IN0Q";
    COMMAREA.CATOAP = "IN0F";
    COMMAREA.CAUSERA = INWREC.CAUSERA;
    XSEXIT();
    IN0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end

   /* ------------------------------------------------------------*/
   /* GO TO STOCK TRANSFER HEADER INQUIRY*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "IN0T";
    COMMAREA.CAFROMAP = "IN0Q";
    IN0QW-CAI-OPT = "1";
    COMMAREA.CAITEM = IN0QW-CAITEM;
    COMMAREA.CAUSERA = INWREC.CAUSERA;
    XSEXIT();
    IN0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end

   /* ------------------------------------------------------------*/
   /* GO TO STOCK TRANSFER ITEM INQUIRY*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "IN0T";
    COMMAREA.CAFROMAP = "IN0Q";
    IN0QW-CAI-OPT = "2";
    COMMAREA.CAITEM = IN0QW-CAITEM;
    COMMAREA.CAUSERA = INWREC.CAUSERA;
    XSEXIT();
    IN0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end

   /* ------------------------------------------------------------*/
   /* GO TO STOCK TRANSFER WAREHOUSE INQUIRY*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "IN0T";
    COMMAREA.CAFROMAP = "IN0Q";
    IN0QW-CAI-OPT = "4";
    COMMAREA.CAITEM = IN0QW-CAITEM;
    COMMAREA.CAUSERA = INWREC.CAUSERA;
    XSEXIT();
    IN0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR FORWARD AND BACKWARD PAGING*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   && IN0QW-BAS == 1)
    converseLib.validationFailed(3);
    exit stack;
  end


  if (converseVar.eventKey is pf8
   && IN0QW-END >= IN0QW-TOT-REC-READ)
    converseLib.validationFailed(4);
    exit stack;
  end



  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    if (IN0QW-TOT-REC-READ < 14)
       /* NEXT SENTENCE*/
    else

  /* CLEAR AND RESTORE THE MAP HEADER*/

      set IN0QM001 initial;

      IN0QM001.KUCCOID = IN0QW01.KUCCOID;
      IN0QM001.KUMSTRID = IN0QW01.KUMSTRID;
      IN0QM001.XNXCD = IN0QW01.XNXCD;
      IN0QM001.IN7STFWH = IN0QW01.IN7STFWH;
      IN0QM001.IN7STTWH = IN0QW01.IN7STTWH;
      IN0QM001.XIUCD = IN0QW01.XIUCD;
      IN0QM001.IN7STFOW = IN0QW01.IN7STFOW;
      IN0QM001.IN7STTOW = IN0QW01.IN7STTOW;
      IN0QM001.XGPCD = IN0QW01.XGPCD;
      IN0QM001.SY1STNBR = IN0QW01.SY1STNBR;
      IN0QM001.SY2CLRID = IN0QW01.SY2CLRID;
      IN0QM001.XDMCD = IN0QW01.XDMCD;
      IN0QM001.XSDCD = IN0QW01.XSDCD;
  /*  */
      if (converseVar.eventKey is pf8 /* PAGE FORWARD*/
       && IN0QW-END < IN0QW-TOT-REC-READ)
        IN0QW-END = IN0QW-END + 13;
        IN0QW-BAS = IN0QW-BAS + 13;
        IN0QW-NDX = 1;
        IN0QW-NX2 = 1;
        IN0QW-YES-NO-SW = "N";
        while (IN0QW-YES-NO-SW == "N")
          IN0Q-330();
        end
      else
        if (converseVar.eventKey is pf7 /* PAGE BACKWARD*/
         && IN0QW-BAS > 1)             
          IN0QW-END = IN0QW-END - 13;
          IN0QW-BAS = IN0QW-BAS - 13;
          if (IN0QW-BAS < 1)
            IN0QW-END = 13;
            IN0QW-NDX = 1;
            IN0QW-NX2 = 1;
            IN0QW-BAS = 1;
            IN0QW-YES-NO-SW = "N";
            while (IN0QW-YES-NO-SW == "N")
              IN0Q-330();
            end
          else
            IN0QW-NDX = 1;
            IN0QW-NX2 = 1;
            IN0QW-YES-NO-SW = "N";
            while (IN0QW-YES-NO-SW == "N")
              IN0Q-330();
            end
          end
        end
      end
    end
  end
end // end IN0Q-300

// VALIDATE FAST PATH ROUTINE
Function IN0Q-310()
   /* ---------------------------------------------------------------------*/
   /* CHECK FAST PATH IS VALIDATE*/
   /* ---------------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (IN0QM001.CATOAP == COMMAREA.CACURRAP)
      set IN0QM001.CATOAP cursor, modified, bold;
      converseLib.validationFailed(84); /* INVALID FAST PATH OPTION*/
      return;
    else
      COMMAREA.CATOAP = IN0QM001.CATOAP; /* TO APPLICATION*/
      COMMAREA.CAITEM = IN0QM001.CAITEM; /* APPLICATION DATA*/
      COMMAREA.CAUSERA = INWREC.CAUSERA; /* APPLICATION USER AREA*/
      XSEXIT(); /* TRANSTER TO REQ APPL*/
      IN0QM001.CATOAP = COMMAREA.CATOAP; /* TO APPLICATION*/
      set IN0QM001.CATOAP cursor, bold; /* HIGHLIGHT TO APPL*/
      IN0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* RETURN ERROR MSG*/
      converseLib.validationFailed(); /* FORCE ALARM TO SOUND*/
      COMMAREA.CATOAP = " "; /* CLEAR APPLICATION*/
      exit stack;
    end
  end

end // end IN0Q-310

// REFRESH MAP SCREEN
Function IN0Q-320()
   /* -------------------------------------------------------------------*/
   /* REFRESH SCREEN*/
   /* -------------------------------------------------------------------*/

  if (IN0QW-NDX > IN0QW-END)
    IN0QW-YES-NO-SW = "Y";
  else
    if (IN0QW-NDX >= IN0QW-BAS)
      IN0QM-ACT[IN0QW-NX2] = " ";
      IN0QM-IN7STNBR[IN0QW-NX2] = IN0QW02.IN7STNBR[IN0QW-NDX];
      IN0QM-IN7STFWH[IN0QW-NX2] = IN0QW02.IN7STFWH[IN0QW-NDX];
      IN0QM-IN7STTWH[IN0QW-NX2] = IN0QW02.IN7STTWH[IN0QW-NDX];
      IN0QM-XISCD[IN0QW-NX2] = IN0QW02.XISCD[IN0QW-NDX];
      IN0QM-XIUCD[IN0QW-NX2] = IN0QW02.XIUCD[IN0QW-NDX];
      if (IN0QW02.IN7STLDT[IN0QW-NDX] != 0)
        IN0QM-IN7STLDT[IN0QW-NX2] = IN0QW02.IN7STLDT[IN0QW-NDX];
      end
      if (IN0QW02.IN7STHDT[IN0QW-NDX] != 0)
        IN0QM-IN7STHDT[IN0QW-NX2] = IN0QW02.IN7STHDT[IN0QW-NDX];
      end
      IN0QM-IN8SIQ[IN0QW-NX2] = IN0QW02.IN8SIQ[IN0QW-NDX];
      IN0QW-NX2 = IN0QW-NX2 + 1;
    end
  end


  IN0QW-NDX = IN0QW-NDX + 1;

end // end IN0Q-320

// PAGING FORWARD OR BACKWARD
Function IN0Q-330()
   /* --------------------------------------------------------------------*/
   /* PAGING FORWARD OR BACKWARD*/
   /* --------------------------------------------------------------------*/

  if (IN0QW-NDX > IN0QW-END)
    IN0QW-YES-NO-SW = "Y";
  else
    if (IN0QW-NDX >= IN0QW-BAS)
      IN0QM-ACT[IN0QW-NX2] = IN0QW-ACT[IN0QW-NDX];
      IN0QM-IN7STNBR[IN0QW-NX2] = IN0QW02.IN7STNBR[IN0QW-NDX];
      IN0QM-IN7STFWH[IN0QW-NX2] = IN0QW02.IN7STFWH[IN0QW-NDX];
      IN0QM-IN7STTWH[IN0QW-NX2] = IN0QW02.IN7STTWH[IN0QW-NDX];
      IN0QM-XISCD[IN0QW-NX2] = IN0QW02.XISCD[IN0QW-NDX];
      IN0QM-XIUCD[IN0QW-NX2] = IN0QW02.XIUCD[IN0QW-NDX];
      if (IN0QW02.IN7STLDT[IN0QW-NDX] != 0)
        IN0QM-IN7STLDT[IN0QW-NX2] = IN0QW02.IN7STLDT[IN0QW-NDX];
      end
      if (IN0QW02.IN7STHDT[IN0QW-NDX] != 0)
        IN0QM-IN7STHDT[IN0QW-NX2] = IN0QW02.IN7STHDT[IN0QW-NDX];
      end
      IN0QM-IN8SIQ[IN0QW-NX2] = IN0QW02.IN8SIQ[IN0QW-NDX];
      set IN0QM-ACT[IN0QW-NX2] normal;
      set IN0QM-IN7STNBR[IN0QW-NX2] normal;
      set IN0QM-IN7STFWH[IN0QW-NX2] normal;
      set IN0QM-IN7STTWH[IN0QW-NX2] normal;
      set IN0QM-XISCD[IN0QW-NX2] normal;
      set IN0QM-XIUCD[IN0QW-NX2] normal;
      set IN0QM-IN7STLDT[IN0QW-NX2] normal;
      set IN0QM-IN7STHDT[IN0QW-NX2] normal;
      set IN0QM-IN8SIQ[IN0QW-NX2] normal;
      IN0QW-NX2 = IN0QW-NX2 + 1;
    end
  end


  IN0QW-NDX = IN0QW-NDX + 1;

end // end IN0Q-330

// Reset highlighted fields
Function IN0Q-400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set IN0QM001.KUCCOID initialAttributes;
  set IN0QM001.KUMSTRID initialAttributes;
  set IN0QM001.XNXCD initialAttributes;
  set IN0QM001.IN7STFWH initialAttributes;
  set IN0QM001.IN7STTWH initialAttributes;
  set IN0QM001.XIUCD initialAttributes;
  set IN0QM001.IN7STFOW initialAttributes;
  set IN0QM001.IN7STTOW initialAttributes;
  set IN0QM001.XGPCD initialAttributes;
  set IN0QM001.SY1STNBR initialAttributes;
  set IN0QM001.SY2CLRID initialAttributes;
  set IN0QM001.XDMCD initialAttributes;
  set IN0QM001.XSDCD initialAttributes;

  IN0QW-NX2 = 1;
  while (IN0QW-NX2 <= 13)
    set IN0QM-ACT[IN0QW-NX2] initialAttributes;
    set IN0QM-IN7STNBR[IN0QW-NX2] initialAttributes;
    set IN0QM-IN7STFWH[IN0QW-NX2] initialAttributes;
    set IN0QM-IN7STTWH[IN0QW-NX2] initialAttributes;
    set IN0QM-XISCD[IN0QW-NX2] initialAttributes;
    set IN0QM-XIUCD[IN0QW-NX2] initialAttributes;
    set IN0QM-IN7STLDT[IN0QW-NX2] initialAttributes;
    set IN0QM-IN7STHDT[IN0QW-NX2] initialAttributes;
    set IN0QM-IN8SIQ[IN0QW-NX2] initialAttributes;
    IN0QW-NX2 = IN0QW-NX2 + 1;
  end


  set IN0QM001.CATOAP initialAttributes;
  set IN0QM001.CAITEM initialAttributes;


end // end IN0Q-400

// Verify data that was entered
Function IN0Q-500()
   /* ---------------------------------------------------------------*/
   /* IF EZEAID IS ENTER - VERIFY DATA ENTERED*/
   /* ---------------------------------------------------------------*/

   /* VALIDATE KEY INFORMATION USED TO OBTAIN ROWS*/

  if (converseVar.eventKey is enter)
    IN0QW-KEY-ERR-SW = "N";
    IN0Q-510();
    if (IN0QW-KEY-ERR-SW == "Y")
      return;
    end
  end

   /* IF KEYS FIELDS HAS BEEN MODIFIED,*/
   /* SET IN0QW-REQ-DATA FLAG AND OBTAIN NEW DATA.*/

  if (converseVar.eventKey is enter)
    if (IN0QM001.KUCCOID is modified
     || IN0QM001.KUMSTRID is modified
     || IN0QM001.XNXCD is modified
     || IN0QM001.IN7STFWH is modified
     || IN0QM001.IN7STTWH is modified
     || IN0QM001.XIUCD is modified
     || IN0QM001.IN7STFOW is modified
     || IN0QM001.IN7STTOW is modified
     || IN0QM001.XGPCD is modified
     || IN0QM001.SY1STNBR is modified
     || IN0QM001.SY2CLRID is modified
     || IN0QM001.XDMCD is modified
     || IN0QM001.XSDCD is modified)
      IN0QW01.KUCCOID = IN0QM001.KUCCOID;
      IN0QW01.KUMSTRID = IN0QM001.KUMSTRID;
      IN0QW01.XNXCD = IN0QM001.XNXCD;
      IN0QW01.IN7STFWH = IN0QM001.IN7STFWH;
      IN0QW01.IN7STTWH = IN0QM001.IN7STTWH;
      IN0QW01.XIUCD = IN0QM001.XIUCD;
      IN0QW01.IN7STFOW = IN0QM001.IN7STFOW;
      IN0QW01.IN7STTOW = IN0QM001.IN7STTOW;
      IN0QW01.XGPCD = IN0QM001.XGPCD;
      IN0QW01.SY1STNBR = IN0QM001.SY1STNBR;
      IN0QW01.SY2CLRID = IN0QM001.SY2CLRID;
      IN0QW01.XDMCD = IN0QM001.XDMCD;
      IN0QW01.XSDCD = IN0QM001.XSDCD;
      set IN0QM001 initial;
      set IN0QW02 empty;
      IN0QW-REQ-DATA = "Y";
      exit stack;
    end
  end

   /* VERIFY IF VALID SELECTION WAS MADE*/

  if (converseVar.eventKey is enter)
    IN0QW-NX2 = 13;
    IN0QW-INQ-SW = "N";
    IN0QW-YES-NO-SW = "N";
    while (IN0QW-YES-NO-SW == "N")
      IN0Q-520();
    end
  end
end // end IN0Q-500

// EDIT KEY INFO TO OBTAIN ROWS
Function IN0Q-510()

   /* KUCCOID IS A REQUIRED FIELD, ALL OTHERS ARE OPTIONAL TO OBTAIN DATA*/

  if (converseVar.eventKey is enter)
    if (IN0QM001.KUCCOID == 0)
      converseLib.validationFailed(6);
      set IN0QM001.KUCCOID cursor, bold;
      IN0QW-KEY-ERR-SW = "Y";
    end
  end

   /* VERIFY FROM WHSE CD*/

  if (converseVar.eventKey is enter)
    if (IN0QM001.IN7STFWH != " ")
      if (IN0QM001.IN7STFWH in XWHTBL.XWHCD)
        set IN0QM001.IN7STFWH normal;
      else
        converseLib.validationFailed(11); /* INVALID VALUE ENTERED, WHSE NOT FOUND*/
        set IN0QM001.IN7STFWH cursor, bold;
        IN0QW-KEY-ERR-SW = "Y";
      end
    end
  end

   /* VERIFY TO WHSE CD*/

  if (converseVar.eventKey is enter)
    if (IN0QM001.IN7STTWH != " ")
      if (IN0QM001.IN7STTWH in XWHTBL.XWHCD)
        set IN0QM001.IN7STTWH normal;
      else
        converseLib.validationFailed(11); /* INVALID VALUE ENTERED, WHSE NOT FOUND*/
        set IN0QM001.IN7STTWH cursor, bold;
        IN0QW-KEY-ERR-SW = "Y";
      end
    end
  end

   /* VERIFY GPC CD*/

  if (converseVar.eventKey is enter)
    if (IN0QM001.XGPCD != " ")
      if (IN0QM001.XGPCD in XWHTBL.XWHCD)
        set IN0QM001.XGPCD normal;
      else
        converseLib.validationFailed(11); /* INVALID VALUE ENTERED, WHSE NOT FOUND*/
        set IN0QM001.XGPCD cursor, bold;
        IN0QW-KEY-ERR-SW = "Y";
      end
    end
  end
end // end IN0Q-510

// EDIT LINE ITEMS ON MAP
Function IN0Q-520()
  IN0QW-ACT-ERR-SW = "N";

  if (IN0QW-NX2 < 1) /* NO MORE ITEMS ON SCREEN TO CHECK*/
    IN0QW-YES-NO-SW = "Y";
    return;
  end

   /* --------------------------------------------------------------------*/
   /* IF INQUIRY SELECTION AND NULL STOCK TRANSFER NUMBER - ERROR*/
   /* --------------------------------------------------------------------*/

  if (IN0QM-ACT[IN0QW-NX2] == "S")
    if (IN0QM-IN7STNBR[IN0QW-NX2] == 0)
      set IN0QM-ACT[IN0QW-NX2] cursor, bold;
      IN0QW-ACT-ERR-SW = "Y";
      converseLib.validationFailed(10);
    end
  end

   /* --------------------------------------------------------------------*/
   /* IF ACTION NOT 'S' OR ' '  -  ACTION ERROR HAS OCCURRED*/
   /* --------------------------------------------------------------------*/

  if (IN0QM-ACT[IN0QW-NX2] == "S")
    IN0QW-INQ-SW = "Y";
  else
    if (IN0QM-ACT[IN0QW-NX2] == " "
    ) /* NEXT SENTENCE*/
    else
      set IN0QM-ACT[IN0QW-NX2] cursor, bold;
      IN0QW-ACT-ERR-SW = "Y";
      converseLib.validationFailed(139);
    end
  end

   /* --------------------------------------------------------------------*/
   /* RESET FIELDS - MULTIPLY PASS UNTIL ERRORS ARE CORRECTED*/
   /* --------------------------------------------------------------------*/


  if (IN0QW-ACT-ERR-SW == "N")
    set IN0QM-ACT[IN0QW-NX2] normal;
  end


  IN0QW01.IN0QW-NX2 = IN0QW01.IN0QW-NX2 - 1; /* DECREMENT MAP INDEX*/

end // end IN0Q-520

// Process valid input request
Function IN0Q-600()

   /* --------------------------------------------------------------------*/
   /* THE ONLY VALID REQUEST TO PROCESS AT THIS POINT SHOULD BE*/
   /* ENTER - SELECTION MADE, TRANSFER CONTROL TO IN0T OPTION 1*/
   /* STOCK TRANSFER INQUIRY BY DOC. HEADER*/
   /* ENTER - NO SELECTION MADE GO TO TOP*/
   /* --------------------------------------------------------------------*/

  if (converseVar.eventKey is enter
   && IN0QW-INQ-SW == "Y"
   && converseVar.validationMsgNum == 0)
    IN0QW-NX2 = 0;
    IN0QW-YES-NO-SW = "N";
    while (IN0QW-NX2 < 13
     && IN0QW-YES-NO-SW == "N")
      IN0Q-610();
    end
    if (IN0QW-YES-NO-SW == "N")
      converseLib.validationFailed(8);
    else
      INWREC.IN7STNBR = IN0QM-IN7STNBR[IN0QW-NX2];
      COMMAREA.CAUSERA = INWREC.CAUSERA;
      IN0QW-CAI-OPT = "1";
      COMMAREA.CAITEM = IN0QW-CAITEM;
      COMMAREA.CAFROMAP = "IN0Q";
      COMMAREA.CATOAP = "IN0T";
      XSEXIT();
      IN0QM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
  end
end // end IN0Q-600

// FIND FIRST SELECTION MADE
Function IN0Q-610()

   /* FIND FIRST SELECTION ON MAP*/

  IN0QW-NX2 = IN0QW-NX2 + 1;

  if (IN0QM-ACT[IN0QW-NX2] == "S")
    IN0QW-YES-NO-SW = "Y";
  end
end // end IN0Q-610

//*** RECORD=IN0QW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record IN0QW01 type basicRecord
  3 IN0QW-GROUP IN0QW-GROUP ; 
    5 IN0QW-BLD-MAP-SW IN0QW-BLD-MAP-SW ; 
    5 IN0QW-YES-NO-SW IN0QW-YES-NO-SW ; 
    5 IN0QW-INQ-SW IN0QW-INQ-SW ; 
    5 IN0QW-REQ-DATA IN0QW-REQ-DATA ; 
    5 IN0QW-ACT-ERR-SW IN0QW-ACT-ERR-SW ; 
    5 IN0QW-KEY-ERR-SW IN0QW-KEY-ERR-SW ; 
    5 IN0QW-END-VTFHDR01 IN0QW-END-VTFHDR01 ; 
    5 IN0QW-END-VTFITM01 IN0QW-END-VTFITM01 ; 
    5 IN0QW-NDX IN0QW-NDX ; 
    5 IN0QW-NX2 IN0QW-NX2 ; 
    5 IN0QW-ND3 IN0QW-ND3 ; 
    5 IN0QW-BAS IN0QW-BAS ; 
    5 IN0QW-END IN0QW-END ; 
    5 IN0QW-TOT-REC-READ IN0QW-TOT-REC-READ ; 
    5 IN0QW-CAITEM IN0QW-CAITEM ; 
      10 IN0QW-CAI-OPT IN0QW-CAI-OPT ; 
      10 IN0QW-CAI-SDT IN0QW-CAI-SDT ; 
      10 IN0QW-CAI-EDT IN0QW-CAI-EDT ; 
    5 IN0QW-CCCYYMMDD IN0QW-CCCYYMMDD ; 
      10 IN0QW-CCC IN0QW-CCC ; 
      10 IN0QW-YYMMDD IN0QW-YYMMDD ; 
    5 KUCCOID KUCCOID ; 
    5 KUMSTRID KUMSTRID ; 
    5 XNXCD XNXCD ; 
    5 IN7STFWH IN7STFWH ; 
    5 IN7STTWH IN7STTWH ; 
    5 XIUCD XIUCD ; 
    5 IN7STFOW IN7STFOW ; 
    5 IN7STTOW IN7STTOW ; 
    5 XGPCD XGPCD ; 
    5 SY1STNBR SY1STNBR ; 
    5 SY2CLRID SY2CLRID ; 
    5 XDMCD XDMCD ; 
    5 XSDCD XSDCD ; 
end // end IN0QW01

//*** RECORD=IN0QW02 ****
// WORKING STORAGE TABLE FOR CUSTOMER STOCK TRANSFERS
// ***********************
Record IN0QW02 type basicRecord
  5 IN0QW-CUST-XFER-TABLE IN0QW-CUST-XFER-TABLE ; 
    10 IN0QW-ACT IN0QW-ACT [750] ; 
    10 IN7STNBR IN7STNBR [750] ; 
    10 IN7STFWH IN7STFWH [750] ; 
    10 IN7STTWH IN7STTWH [750] ; 
    10 XISCD XISCD [750] ; 
    10 XIUCD XIUCD [750] ; 
    10 IN7STLDT IN7STLDT [750] ; 
    10 IN7STHDT IN7STHDT [750] ; 
    10 IN8SIQ IN8SIQ [750] ; 
end // end IN0QW02

// order action field
DataItem IN0QW-ACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-ACT-ERR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-BAS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IN0QW-BLD-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-CAI-EDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-CAI-OPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-CAI-SDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-CAITEM char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-CCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IN0QW-CCCYYMMDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IN0QW-CUST-XFER-TABLE char(18750)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-END smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IN0QW-END-VTFHDR01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-END-VTFITM01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IN0QW01 group level
DataItem IN0QW-GROUP char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-INQ-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-KEY-ERR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-ND3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IN0QW-NDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IN0QW-NX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IN0QW-REQ-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-TOT-REC-READ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IN0QW-YES-NO-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IN0QW-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

