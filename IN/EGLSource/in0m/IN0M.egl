package in0m;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=IN0M ****
// ************************************************************
//                     application in0m
// ************************************************************
// special notes:
//           this application will no longer allow on-hand
//           adjustments to be made. however it is sometimes
//           nessary to allow a whse to do so. to allow this
//           to happen enter exception whse and date in process
//           in0m420(flow) and in0m440(flow).
// 
// overview: process and statement group names follow naming
//           conventions in order to identify common routines
//           used in multiple applications or multiple times
//           within the application.
//           process and statement group names contain one
//           character identified in the following examples as
//           'n'.
//           i.e. in0mn20 for a process
//                in0msan for a statement group
// 
//           the 'n' would then be incremented to indicate the
//           'level' or specific function within the applica-
//           tion.  e.g. if a single application began with a
//           menu (n=0) and had 3 menu selections: 'n' would
//           equal 1 for the first function,equal 2 for the
// 
//           second function and 3 for the third function.
//           each function makes use of an execute (name
//           ending in 'n10') to do one time initalizations.
// 
//           maintenance also uses a converse (name ending in
//           'n20') to input and display key field values.
//           it also makes use of an execute (name ending in
//           'n30') to edit the key inputs and obtain table
//           data.
// 
//           the next converse (name ending in 'n40') is used
//           to display and edit the data related to the key
//           (or new data to be added).
// 
//           the final execute (name ending in 'n50') updates
//           the related row(s) and prepares for the main-
//           tenance of the next record.
//           the last three characters of statement group names
//           always start with an 's' and use the following
//           naming convention in the last 2 characters.
//           common statement groups (whose funtions are found
//           in other applications) are named with a letter
//           followed by the level number.  the letter cor-
//           responds to function as follows:
// 
//           a - missing key inputs edits
//           b - same key edits(has the key been changed?)
//           c - key field edits
//           d - key relational edits
//           e - obtain table data
//           f - save current key value(s)
//           o - data field edits
//           p - data relational edit
//           t - enter/pf12 processing
// 
//           the level number corresponds to the function
//           within the application.
// 
//           common statement groups used by more than 1 func-
//           tion within the application are named with the
//           same letter or number in the last two positions.
//           i.e. in0msaa,in0msbb,in0ms11,etc.
// 
//           statement groups used in only one function are
//           named with the level number corresponding to that
//           function followed by a letter.
//           i.e. in0ms1a,in0ms2c,in0ms3f,etc.
// 
// ------------------------------------------------------------
// i/o modules     table views
// -----------   ---------------
// sy1120        size verification
//                  dprod.vscale
//                  dprod.vstyle01
//                  dprod.vsize001
// io0590        dinvnt.vinitm01
// io0580        dinvnt.vinhdr01
// io0760        dinvnt.viahdr01
// io0770        dinvnt.viaitm01
// io4430        dprodc.vprdcu01
// 
// ============================================================
// 
// MAINTENANCE HISTORY:
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//     01      11/19/86  j.brady          created
//     02      01/16/87  j.brady      allow maintenance to
//                                    invalid sizes.
//     03      03/10/86  j.campbell   disallow negative qtys
//                                    when found after initial
//                                    check(in9010), add error
//                                    messages. bypass update
//                                    if error found.
//     04      05/18/87  j.campbell   add new field to in2rec
//     05      10/05/87  g. amen      activate spec diff
//                                    for phase 3
//     06      01/13/88  j.campbell   change in9010 to in9020
//                                    for new avail system
//     06      04/23/88  j.campbell   disable on-hand field
//                                    adjustments.
//     07      08/11/88  w. jones     add 'c' doc. code
//     08      11/02/88  j. wood      add noncsp opt to calls
//     09      12/12/88  j. campbell  allow adjustment of on
//                                    hand qtys for today only
//                                    and only for whse 07
//     10      12/22/88  j. campbell  allow adjustment of on
//                                    hand qtys for 12/27 only
//                                    and only for whse 09
//     11      01/04/89  w. jones     allow adjustment of on
//                                    hand qtys for 01/04 only
//                                    and only for whse 07
//     12      01/09/89     jcampb    allow adjustment of on
//                                    hand qtys for 01/09 only
//                                    and only for whse 07
//     13      01/11/89  w. jones     init. new initm eom fld
//     14      01/17/89  w. jones     allow adjustment of on
//                                    hand qtys for 01/18 only
//                                    and only for whse 07
//     15      03/31/89  jcampb       allow adjustment of on
//                                    hand qtys for 03/31 only
//                                    and only for whse 04&32
//     --      04/15/89  jwood        added xssegtr logic
//     16      05/17/89  ryonke       deleted whse parent logic
//     17      08/21/89  esmith       removed shade and spec
//                                    cntl logic: functions 2
//                                    and 3 removed from map
//                                    and pertinent modules,
//                                    edits to in0msdd, see,
//                                    s4n, 450, s4m
//     18      10/16/89  ryonke       allow adjustment of on
//                                    hand qtys for 10/17 only
//                                    and only for whse 07
//     19      01/26/90  ryonke       allow adjustment of on
//                                    hand qtys for 01/27 only
//                                    and only for whse 04
//     --      04/05/90  jcampb       remove xsd table (str chg
//     20      04/09/90  ryonke       allow adjustment of on
//                                    hand qtys for 04/10 only
//                                    and for whse 02,04,07,32
//     21      04/10/90  ryonke       same as above for 4/11
//     22      05/02/90  ryonke       allow adjustment of on
//                                    hand qtys for 05/03 only
//                                    and only for whse 07
//     23      05/31/90  ryonke       allow adjustment of on
//                                    hand qtys for 05/31 only
//                                    and only for whse 04
//     24      06/05/90  ryonke       allow adjustment of on
//                                    hand qtys for 06/05 only
//                                    and for whse 07,09,32
//     25      06/05/90  ryonke       allow adjustment of on
//                                    hand qtys for 06/06 only
//                                    and for whse 04
//     26      06/15/90  ryonke       allow adjustment of on
//                                    hand qtys for 06/19 only
//                                    and for whse 09
//     27      06/19/90  ryonke       allow adjustment of on
//                                    hand qtys for 06/20 only
//                                    and for whse 03
//     28      06/22/90  ryonke       allow adjustment of on
//                                    hand qtys for 06/23 only
//                                    and for whse 32
//     28      07/16/90  ryonke       allow adjustment of on
//                                    hand qtys for 07/17 only
//                                    and for whse 07
//     29      09/19/90  ryonke       allow adjustment of on
//                                    hand qtys for 09/20 only
//                                    and for whse 09
// FIX      01/03/91  SPOPA   Allow on-hand quantity update on
//                            910104 for warehouse 02.
//          05/08/91  jlucas  validate trans cd against fld cd
//          05/08/91  jcampb  allow on-hand qty update on 5/30
//                            and 5/31 for whse02 only.
//          08/02/91  shende  allow on-hand qty update on 8/05
//                            for whse04 only.
//          08/26/91  shende  allow on-hand qty update on 8/27
//                            for whse51 only.
//          10/14/91  shende  allow on-hand qty update on 10/15
//                            for whse04 only.
//          11/20/91  shende  allow on-hand qty update on 11/21
//                            for whse02 only.
//          12/02/91  shende  allow on-hand qty update on 12/03
//                            for whse51 only.
//          12/05/91  shende  allow on-hand qty update on 12/06
//                            for whse51 only.
//          12/16/91  shende  allow on-hand qty update on 12/17
//                            -18 for whse07 only.
//          12/19/91  shende  allow on-hand qty update on 12/20
//                            for whse07 only.
//          12/30/91  shende  allow update on 12/31 for whse 07
//          01/07/92  shende  allow update on 01/08 for whse 03
//          01/08/92  shende  allow update on 01/08 thru 01/10
//                            for whse 07 and 03.
//          01/09/92  shende  allow update on 01/10 for whse 04
//          01/14/92  shende  allow update on 01/15 for whse 03
//                            04, 09, and 51.
//          01/16/92  shende  allow update on 01/17 for whse 07
//          01/21/92  shende  allow update on 01/22 - 01/24
//                            for whse 07
//          01/22/92  shende  allow update on 01/23 - 01/24
//                            for whse 04
//          01/27/92  shende  allow update on 01/28 for whse 07
//          01/29/92  shende  allow update on 01/30 for whse 04
//          01/31/92  shende  allow update on 02/03 for whse 07
//          02/20/92  shende  allow update on 02/21 for whse 04
//          02/25/92  shende  allow update on 02/26 for whse 07
//          03/16/92  DPETTI  allow update on 03/17 for whse 07
//                            and whse 51
//          03/17/92  DPETTI  allow update on 03/18 for whse 51
//          03/17/92  DPETTI  allow update on 03/31 for whse 51
//          04/01/92  DPETTI  allow update on 04/02 for whse 51
//          04/02/92  DPETTI  allow update on 04/03 for whse 07
//          04/03/92  DPETTI  allow update on 04/06 for whse 51
//          04/15/92  MCHOW   allow update on 04/16 for whse 04
//          04/21/92  DPETTI  allow update on 04/22 for whse 51
// in#1066  05/28/92  jlucas  do not allow scaledown pct gt 100
//          06/02/92  DPETTI  allow update on 06/03 for whse 04
//          06/02/92  DPETTI  allow update on 06/03 for whse 07
//          06/16/92  dchian  allow designated user(s), ability
//                            inv. adj. (IN0M220, IN0M440).
// IN#0     10/13/92  dchian  Regenned for table changes.
// IN223    12/16/92  Dannan  Added a field to IN0MW01 to allow
//                            for a 4 byte time field, HHMM.
//                            Modified moves of time fields to
//                            inventory databases.  Found that
//                            the fields were getting truncated
// IN1051,  09/01/93  smacmi  no longer allow set aside adjs to
// IN187                      be made with this appl unless
//                            user has authority (COMMAREA.
//                            CACLVL(3) = 'Y'). Also added edit
//                            to check gpc entered against the
//                            whse entered (xwhtbl) to verify
//                            that the gpc can logically be in
//                            that warehouse.
// 1H8000   11/08/93  SMACMI    TABLE CHANGES:
//                            POPULATED ZZ-CHNG-PGM-ID IN
//                            IN5REC, IN6REC, IN2REC & IN1REC.
// 1H8000   11/15/93  DANNAN  Regen'd to get IN0MMFM in sync.
// IN194    11/24/93  SMACMI  ADDED RESERVATION HOLD FLAG AND
//                            RESERVATION HOLD EXPIRATION DATE
// IN0257   01/19/94  DANNAN  Changed map IN0MM030 to allow for
//                            a 9 digit order number to be
//                            entered as the document number.
//                            Changed two working storage
//                            fields in IN0MW01 for change
//                            to map IN0MM030.  Two fields are:
//                            IN0MWTRD & IN0MWDOC (both were 8)
// 1H0007   02/02/95  HKEMPE  Install IN9060 and AV2200 subrtns
//                            to perform inv item and audit
//                            updates and to perform availablty
//                            updates respectively.
//                            Delete IN0MS4R, IN0MS4D, IN0MS4E,
//                            IN0MS4J, IN0MS4F/G/H/I.
// 1H0007   04/04/94  HKEMPE  Check for zero return code & post
//                            warning only in IN0MS4K & IN0MS4L
//                            Do not post warnings about negatv
//                            qtys.
// 1H0007   04/05/94  HKEMPE  Save change count only when inv
//                            item is found in IN0MSP4.  Move
//                            stmt grp name in IN0MS4K and
//                            IN0MS4L.  Ignore av hdr & av qty
//                            not found return code in XSAVS-
//                            UPD-AV-QTY and IN0MS4K.
// 1H0007   04/20/94  HKEMPE  Changed IN0MS4L, IN0MS4K, IN0MS-
//                            IN9060-ERRS, IN0MS-AV2200-ERRS to
//                            standardized return code checking
//                            Added a display message to IN9060
//                            2010.
// IN268    06/14/94  DANNAN  Removed direct calls to VCOLOR01
//                            and VSTYLE01, and replaced with
//                            a call to a product access subr.,
//                            IN8020.  Removed SY1REC & SY2REC,
//                            added INGREC.  Removed SGRPS
//                            IN0MSAA & IN0MSBB.
// IN268    07/05/94  DANNAN  Changed IN0MS-IN8020-ERRS to not
//                            post an error for return codes
//                            2000 thru 2300.  The application
//                            does issue message 169 to the
//                            user.
// in#00    04/25/95  jlucas  in0msd4, add another xigcd for
//                            xif adj of '05' or '06'
//          12/20/97  wleong  default reservation hold flag and
//                            expiration date to those of alloc
// ************************************************************
// *********************
Program IN0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IN00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AVPREC AVPREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IN0MW01 IN0MW01; // record
  IN0MW02 IN0MW02; // record
  IN1REC IN1REC; // record
  IN2REC IN2REC; // record
  IN9REC IN9REC; // record
  INFREC INFREC; // record
  INGREC INGREC; // record
  INPREC INPREC; // record
  INQREC INQREC; // record
  INRREC INRREC; // record
  INRREC08 INRREC08 { redefines = INRREC } ; // record
  INXREC INXREC; // record
  INZREC INZREC; // record
  PC2REC PC2REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA2REC01 TA2REC01 { redefines = TA2REC } ; // record
  TAEREC TAEREC; // record
  XOWREC XOWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XIFTBL {deleteAfterUse = yes}; // table
  use XIRTBL {deleteAfterUse = yes}; // table
  use XISTBL {deleteAfterUse = yes}; // table
  use XITTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XPKTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use IN0MM.IN0MM005,  // forms
      IN0MM.IN0MM010, 
      IN0MM.IN0MM030
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IN0M010: IN0M010();
     /* ****************************************************/
     /* *** BEGINNING OF FLOW LOGIC FOR PROCESS IN0M010 ****/
     /* ****************************************************/


    if (IN0MM005.IN0MMOPT == "1")
      goto IN0M110;
    else
      if (IN0MM005.IN0MMOPT == "2")
        goto IN0M410;
      else
        if (IN0MM005.IN0MMOPT == " ")
          goto IN0M020;
        else
          converseLib.validationFailed(10); /* invalid value in item field*/
          goto IN0M020;
        end
      end
    end


     /* ****************************************************/
     /* ***     end of FLOW LOGIC FOR PROCESS IN0M010   ****/
     /* ****************************************************/
    IN0M020: IN0M020();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0m020 ****/
     /* *******************************************************/


    if (IN0MW01.IN0MWERS == "Y")
      goto IN0M020;
    end

    if (converseVar.eventKey is enter)
      if (IN0MM005.IN0MMOPT == "1")
        goto IN0M110;
      else
        if (IN0MM005.IN0MMOPT == "2")
          goto IN0M410;
        else
          converseLib.validationFailed(11); /* invalid value*/
          goto IN0M020;
        end
      end
    end

    if (converseVar.eventKey is pa2)
      goto IN0M010;
    end

    if (converseVar.eventKey is pf13)
      goto IN0M110;
    end

    if (converseVar.eventKey is pf14)
      converseLib.validationFailed(62); /* function not available*/
      goto IN0M020;
    end

    if (converseVar.eventKey is pf15)
      converseLib.validationFailed(62); /* function not available*/
      goto IN0M020;
    end

    if (converseVar.eventKey is pf16)
      goto IN0M410;
    end


     /* ****************************************************/
     /* ***     end of FLOW LOGIC FOR PROCESS IN0M020   ****/
     /* ****************************************************/
    IN0M110: IN0M110();
     /* ************************************************************/
     /* *** normal flow  (or error)                             ****/
     /* ************************************************************/

    goto IN0M120;

     /* ************************************************************/
     /* *** end of:  IN0m110 - FLOW section                     ****/
     /* ************************************************************/
    IN0M120: IN0M120();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0m120 ****/
     /* *******************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0MW01.IN0MWERS == "Y")
      goto IN0M120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0M130; /* <=== edit key inputs*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0M010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0M110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      converseLib.validationFailed(62);
      goto IN0M020; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      converseLib.validationFailed(62);
      goto IN0M020; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0M410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0M110; /* <=== resart this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(8); /* errror - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0m120 - FLOW section                     ****/
     /* ************************************************************/
    IN0M130: IN0M130();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0m130    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0MW01.IN0MWERS == "Y")
      goto IN0M120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0M140;

     /* ************************************************************/
     /* *** end of:  IN0m130 - FLOW section                     ****/
     /* ************************************************************/


    IN0M140: IN0M140();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0m140    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0MW01.IN0MWERS == "Y")
      goto IN0M140; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if NOT the same key: go back to 130 to edit key     ****/
     /* *** IN0mWSKS = 'N' : for diffenent key                  ****/
     /* ************************************************************/

    if (IN0MW01.IN0MWSKS == "N")
      goto IN0M130; /* <=== re-edit new key*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0M150; /* <=== perform updating*/
    end

    if (converseVar.eventKey is pf12)
      converseLib.validationFailed(21);
      goto IN0M140; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0M010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0M110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      converseLib.validationFailed(62);
      goto IN0M020; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      converseLib.validationFailed(62);
      goto IN0M020; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0M410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0M110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0m140 - FLOW section                     ****/
     /* ************************************************************/
    IN0M150: IN0M150();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0m150    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0MW01.IN0MWERS == "Y")
      goto IN0M140; /* <=== re-display this screen*/
    else
      if (IN0MW01.IN0MWSES == "Y") /* either '-803' or '+100' on update*/
        goto IN0M130; /* <=== re-display this screen after new select*/
      end
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0M120;

     /* ************************************************************/
     /* *** end of:  IN0m150 - FLOW section                     ****/
     /* ************************************************************/
    IN0M410: IN0M410();
     /* ************************************************************/
     /* *** normal flow  (or error)                             ****/
     /* ************************************************************/

    goto IN0M420;

     /* ************************************************************/
     /* *** end of:  IN0m410 - FLOW section                     ****/
     /* ************************************************************/
    IN0M420: IN0M420();
     /* *******************************************************/
     /* *** this begins the flow logic for process in0m420 ****/
     /* *******************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0MW01.IN0MWERS == "Y")
      goto IN0M420; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if trying to update on-hand tell user to use sl0k   ****/
     /* *** except for the whse and date entered below          ****/
     /* ***                                                     ****/
     /* *** if trying to update set-aside tell user to use IN0G ****/
     /* *** unless user has specific security clearance to use  ****/
     /* *** this screen                                         ****/
     /* ************************************************************/
    if (converseVar.eventKey is enter)
      if (IN0MM030.XIFCD == "01") /* on-hand indicator*/
        IN0MW01.XWHSTKLF = "N";
        if (IN0MM030.XWHCD in XWHTBL.XWHCD)
          IN0MW01.XWHSTKLF = XWHTBL.XWHSTKLF[sysVar.arrayIndex];
        end
        if (IN0MW01.XWHSTKLF == "Y")
          if (COMMAREA.CACLVL[2] == "Y")
            /* next sentence*/
          else
            set IN0MM030.XIFCD cursor, bold;
            set IN0MM030 alarm;
            converseLib.validationFailed(133);
            goto IN0M420; /* re-display this screen*/
          end
        end
      else
        if (IN0MM030.XIFCD == "04") /* set-aside indicator*/
          if (COMMAREA.CACLVL[3] == "Y") /* authority to proceed?*/
            /* next sentence*/
          else
            set IN0MM030.XIFCD cursor, bold; /* no - IN0G msg*/
            set IN0MM030 alarm;
            converseLib.validationFailed(172);
            goto IN0M420; /* re-display this screen*/
          end
        end
      end
    end


     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0M430; /* <=== edit key inputs*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0M010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0M110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      converseLib.validationFailed(62); /* function not available*/
      goto IN0M020; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      converseLib.validationFailed(62); /* function not available*/
      goto IN0M020; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0M410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0M410; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0m420 - FLOW section                     ****/
     /* ************************************************************/
    IN0M430: IN0M430();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0m430    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0MW01.IN0MWERS == "Y")
      goto IN0M420; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0M440;

     /* ************************************************************/
     /* *** end of:  IN0m430 - FLOW section                     ****/
     /* ************************************************************/
    IN0M440: IN0M440();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0m440    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0MW01.IN0MWERS == "Y")
      goto IN0M440; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if trying to update on-hand tell user to use sl0k   ****/
     /* *** except for the warehouse and date entered below     ****/
     /* ************************************************************/
    if (converseVar.eventKey is enter)
      IN0MW01.XWHSTKLF = "N";
      if (IN0MM030.XWHCD in XWHTBL.XWHCD)
        IN0MW01.XWHSTKLF = XWHTBL.XWHSTKLF[sysVar.arrayIndex];
      end
      if (IN0MM030.XIFCD == "01" /* on-hand adjustment indicator*/
       && IN0MW01.XWHSTKLF == "Y")
        if (COMMAREA.CACLVL[2] == "Y")
           /* NEXT SENTENCE*/
        else
          set IN0MM030.XIFCD cursor, bold;
          set IN0MM030 alarm;
          converseLib.validationFailed(133);
          goto IN0M440; /* <=== re-display this screen*/
        end
      end
    end
     /* ************************************************************/
     /* *** if NOT the same key: go back to 430 to edit key     ****/
     /* *** IN0mWSKS = 'N' : for diffenent key                  ****/
     /* ************************************************************/

    if (IN0MW01.IN0MWSKS == "N")
      goto IN0M430; /* <=== re-edit new key*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto IN0M450; /* <=== update data*/
    end

    if (converseVar.eventKey is pf12)
      converseLib.validationFailed(21);
      goto IN0M440; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is pf3)
      goto IN0M010; /* <=== re-start this application*/
    end

    if (converseVar.eventKey is pf13)
      goto IN0M110; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf14)
      converseLib.validationFailed(62); /* function not available*/
      goto IN0M020; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf15)
      converseLib.validationFailed(62); /* function not available*/
      goto IN0M020; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pf16)
      goto IN0M410; /* <=== go to this function*/
    end

    if (converseVar.eventKey is pa2)
      goto IN0M410; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(8); /* error - notify programming*/

     /* ************************************************************/
     /* *** end of:  IN0m440 - FLOW section                     ****/
     /* ************************************************************/
    IN0M450: IN0M450();
     /* ************************************************************/
     /* ***   this begins the flow logic for process in0m450    ****/
     /* ************************************************************/


     /* ************************************************************/
     /* *** if error: re-display the screen                     ****/
     /* ************************************************************/

    if (IN0MW01.IN0MWERS == "Y"
     || IN0MW01.IN0MWSES == "Y")
      goto IN0M440; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto IN0M420;

     /* ************************************************************/
     /* *** end of:  IN0m450 - FLOW section                     ****/
     /* ************************************************************/
  end // end main
end // end IN0M

// IN0m010 - init. for IN0m020
Function IN0M010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();
  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set IN0MM005 initial;
  IN0MM005.XXXTITLE = "  INVENTORY MAINTENANCE   ";
  IN0MM005.XXXCURDT = VGVar.currentShortGregorianDate;
   /* ************************************************************/
   /* *** initialize current date field to include century    ****/
   /* *** and put in non-reinitialized working storage area   ****/
   /* *** in0mw02.                                            ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = VGVar.currentShortGregorianDate;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0MW02.IN0MWCDT = TA2REC.TA2GRGGN;
  else
    converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
    IN0MW01.IN0MWERS = "Y";
    exit stack;
  end

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** ver#   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  01  08/06/86  j. brady      created                ****/
   /* ***  07  08/11/88  w. jones      add 'c' doc. code      ****/
   /* ***  08  11/02/88  j. wood       add noncsp opt on calls****/
   /* ***  11  01/04/89  w. jones      allow 1 day udp onhnd  ****/
   /* ***  12  01/09/89  j campbell    allow 1 day udp onhnd  ****/
   /* ***  13  01/11/89  w. jones      init. new initm eom fld****/
   /* ***                                                     ****/
   /* *** revision number same on all maps and is saved in    ****/
   /* *** the non-reinitialized working storage area in0mw02. ****/
   /* ************************************************************/

  IN0MW02.IN0MWRVN = "15";
  IN0MM005.XXXRVNBR = IN0MW02.IN0MWRVN;

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to set working storage & map fields         ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM != " ")
    IN0MM005.IN0MMOPT = COMMAREA.CAITEM;
    COMMAREA.CAITEM = " ";
  end

   /* *************************************************************/
   /* call in8000 to get theater of operation*/
   /* *************************************************************/

  XSINS-THEATEROPR();

  if (INRREC.INR-RETURN-CODE < 2) /* 0=req rec found, 1=use default*/
  else
    converseLib.validationFailed(39); /* system error occurred*/
  end

   /* ************************************************************/
   /* *** end of:  IN0m010 - EXECUTE section                  ****/
   /* ************************************************************/


end // end IN0M010

// IN0m020 - invt.maint menu
Function IN0M020()


  IN0MM005.XXXPRCNM = "IN0M020";

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0MM005 ;


   /* ************************************************************/
   /* *** if pf9: for prototype only = emergency escape       ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf9)
    exit program;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0MM005.CATOAP > " ")
    COMMAREA.CATOAP = IN0MM005.CATOAP;
    COMMAREA.CAITEM = IN0MM005.CAITEM;
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM005.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0MM005.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0MM005.CAITEM > " ")
    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(5); /* data in item fild requires option*/
    set IN0MM005.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switchs, fields,and attributes          ****/
   /* ************************************************************/

  IN0MW01.IN0MWERS = "N";
  set IN0MM005.CATOAP initialAttributes;
  set IN0MM005.CAITEM initialAttributes;
  set IN0MM005.IN0MMOPT initialAttributes;

   /* ************************************************************/
   /* *** if one of the following go to flow immediately      ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf16)
    exit stack;
  end


   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* *** note: do NOT setup causrea                          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0MW01.IN0MWERS = "Y";
    IN0MM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5 or pf3 go inventory menu                     ****/
   /* *** note: do NOT setup causrea                          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0M-5";
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM005.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0MW01.IN0MWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0m020 - AFTER section                    ****/
   /* ************************************************************/


end // end IN0M020

// init. for inventory maint.
Function IN0M110()
   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set IN0MM010 initial;
  set IN0MW01 empty;
  IN0MM010.XXXTITLE = "INVENTORY MAINTENANCE    (QLTY)";
  IN0MM010.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0MM010.XXXRVNBR = IN0MW02.IN0MWRVN;

   /* ****** initialize default fields *******/

  IN0MM010.XOWCD = "00";
  IN0MM010.SY2CLRID = "00 ";
  IN0MM010.XDMCD = "00";
  IN0MM010.XQACD = "01";

   /* ************************************************************/
   /* *** end of:  IN0m110 - EXECUTE section                  ****/
   /* ************************************************************/


end // end IN0M110

// display invt.maint (qlty) map
Function IN0M120()
   /* ************************************************************/
   /* *** setup process name on map                           ****/
   /* ************************************************************/

  IN0MM010.XXXPRCNM = "IN0M120";

   /* ************************************************************/
   /* *** protect data input fields                           ****/
   /* ************************************************************/

  set IN0MM010.IN2ALCFL protect;
  set IN0MM010.IN0MMDNA protect;
  set IN0MM010.IN2RSVFL protect;
  set IN0MM010.IN-DNT-RSRV-XDT protect;
  set IN0MM010.IN0MMSDP protect;

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0MM010 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0MM010.CATOAP > " ")
    COMMAREA.CATOAP = IN0MM010.CATOAP;
    COMMAREA.CAITEM = IN0MM010.CAITEM;
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0MM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0MM010.CAITEM > " ")
    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0MM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switches                                ****/
   /* ************************************************************/

  IN0MW01.IN0MWERS = "N"; /* normal error switch*/

   /* ************************************************************/
   /* *** reset map fields                                    ****/
   /* ************************************************************/

  set IN0MM010.XWHCD initialAttributes;
  set IN0MM010.XOWCD initialAttributes;
  set IN0MM010.XGPCD initialAttributes;
  set IN0MM010.SY1STNBR initialAttributes;
  set IN0MM010.SY2CLRID initialAttributes;
  set IN0MM010.XDMCD initialAttributes;
  set IN0MM010.XQACD initialAttributes;
  set IN0MM010.IN2ALCFL initialAttributes;
  set IN0MM010.IN0MMDNA initialAttributes;
  set IN0MM010.IN2RSVFL initialAttributes;
  set IN0MM010.IN-DNT-RSRV-XDT initialAttributes;
  set IN0MM010.IN0MMSDP initialAttributes;
  set IN0MM010.CATOAP initialAttributes;
  set IN0MM010.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if one of the following: go to flow to determine    ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0M-10";
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0MW01.IN0MWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0m120 - AFTER section                    ****/
   /* ************************************************************/


end // end IN0M120

// edit and obtain table data
Function IN0M130()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0MSA1(); /* <=== missing key input edits*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** keys present: edit individual key fields            ****/
   /* ************************************************************/

  IN0MSC1(); /* <=== key field edits*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: process the key fields                   ****/
   /* ************************************************************/

  IN0MSE1(); /* <=== obtain table data*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0MSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of:  IN0m130 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0M130

// display table data
Function IN0M140()
   /* ************************************************************/
   /* *** setup new process name on map                       ****/
   /* ************************************************************/

  IN0MM010.XXXPRCNM = "IN0M140";

   /* ************************************************************/
   /* *** set cursor to first data input field                ****/
   /* ************************************************************/

  if (IN0MW01.IN0MWERS != "Y")
    set IN0MM010.IN2ALCFL cursor;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0MM010 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0MM010.CATOAP > " ")
    COMMAREA.CATOAP = IN0MM010.CATOAP;
    COMMAREA.CAITEM = IN0MM010.CAITEM;
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0MM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0MM010.CAITEM > " ")
    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0MM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switches                                      ****/
   /* ************************************************************/

  IN0MW01.IN0MWERS = "N";
  IN0MW01.IN0MWSKS = "Y";

   /* ************************************************************/
   /* *** reset map field attributes                          ****/
   /* ************************************************************/

  set IN0MM010.XWHCD initialAttributes;
  set IN0MM010.XOWCD initialAttributes;
  set IN0MM010.XGPCD initialAttributes;
  set IN0MM010.SY1STNBR initialAttributes;
  set IN0MM010.SY2CLRID initialAttributes;
  set IN0MM010.XDMCD initialAttributes;
  set IN0MM010.XQACD initialAttributes;
  set IN0MM010.IN2ALCFL initialAttributes;
  set IN0MM010.IN2RSVFL initialAttributes;
  set IN0MM010.IN0MMDNA initialAttributes;
  set IN0MM010.IN-DNT-RSRV-XDT initialAttributes;
  set IN0MM010.IN0MMSDP initialAttributes;
  set IN0MM010.CATOAP initialAttributes;
  set IN0MM010.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if ENTER or PF12: edit key & data inputs            ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    IN0MST1(); /* <=== ENTER/PF12 editing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0M-10";
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0MW01.IN0MWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0m140 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0M140

// update logic for invt. maint.
Function IN0M150()
   /* ************************************************************/
   /* *** no edit errors: process the data adds/changes       ****/
   /* ************************************************************/


  IN0MW01.IN0MWLOC = "IN0M150 ";
  IN0MW01.IN0MWMAP = "IN0MM010";

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0MW01.IN0MWTIM = TA2REC.TA2TIMEN;
  else
    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
    exit stack;
  end


  IN2REC.IN2RSVFL = IN0MM010.IN2RSVFL;
  if (IN0MM010.IN-DNT-RSRV-XDT == 0)
    IN2REC.IN-DNT-RSRV-XDT = IN0MM010.IN-DNT-RSRV-XDT;
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = INRREC08.INR-ENTRY6-DT[INR-SEARCH-SUB];

    if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
      TA2REC01.TA2-GREG-DDMMYY = IN0MM010.IN-DNT-RSRV-XDT;
    else /* Domestic*/
      TA2REC.TA2GRGAN = IN0MM010.IN-DNT-RSRV-XDT;
    end

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN2REC.IN-DNT-RSRV-XDT = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(18); /* invalid date entered - contact sys.*/
                                   /* support*/
      IN0MW01.IN0MWERS = "Y";
      set IN0MM010.IN-DNT-RSRV-XDT cursor, bold;
      exit stack;
    end
  end



  IN2REC.IN2ALCFL = IN0MM010.IN2ALCFL;
  if (IN0MM010.IN0MMDNA == 0)
    IN2REC.IN2DNADT = IN0MM010.IN0MMDNA;
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = INRREC08.INR-ENTRY6-DT[INR-SEARCH-SUB];

    if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
      TA2REC01.TA2-GREG-DDMMYY = IN0MM010.IN0MMDNA;
    else /* Domestic*/
      TA2REC.TA2GRGAN = IN0MM010.IN0MMDNA;
    end

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      IN2REC.IN2DNADT = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(18); /* invalid date entered - contact sys.*/
                                   /* support*/
      IN0MW01.IN0MWERS = "Y";
      set IN0MM010.IN0MMDNA cursor, bold;
      exit stack;
    end
  end

  if (IN0MM010.IN0MMSDP < 100.01)
    IN2REC.IN2SCDNP = IN0MM010.IN0MMSDP;
  else
    converseLib.validationFailed(168); /* cannot enter scaledow pct gt 100*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM010.IN0MMSDP cursor, bold;
    exit stack;
  end

  IN0MW01.IN0MWSES = "N"; /* special error on update*/

  if (IN0MW01.IN0MWIFV == "U")
    IN0MS1E(); /* update header table*/
  else
    IN0MSCC(); /* 's' call to invntry hdr db (in2rec)*/
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0MSFF(); /* add row to header table*/
      if (SQLCA.VAGen_SQLCODE == 0)
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
      else
        exit stack;
      end
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        converseLib.validationFailed(8);
        IN0MW01.IN0MWSES = "Y";
        exit stack;
      end
    end
  end

   /* ************************************************************/
   /* *** if error (not special update error get out now      ****/
   /* ************************************************************/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** initialize specific input & working stg fields      ****/
   /* ************************************************************/

  IN0MSQ1(); /* <=== blank data input fields*/

   /* ************************************************************/
   /* *** if special error get out now                        ****/
   /* ************************************************************/

  if (IN0MW01.IN0MWSES == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: call commit to make updates permanent    ****/
   /* ************************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* ************************************************************/
   /* *** setup successful message                            ****/
   /* ************************************************************/

  converseLib.validationFailed(9); /* update successful*/

   /* ************************************************************/
   /* *** end of:  IN0m150 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0M150

// initialize invt. maint. (item)
Function IN0M410()
   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set IN0MM030 initial;
  set IN0MW01 empty;
  IN0MM030.XXXTITLE = "INVENTORY MAINTENANCE   (ITEM) ";
  IN0MM030.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0MM030.XXXRVNBR = IN0MW02.IN0MWRVN;

   /* ****** move default values to the map *******/

  IN0MM030.SY2CLRID = "00 ";
  IN0MM030.XIFCD = "01";
  IN0MM030.XDMCD = "00";
  IN0MM030.XQACD = "01";
  IN0MM030.XSDCD = "000";
  IN0MM030.XSACD = "000";
  IN0MM030.XPGCD = "00";

   /* ************************************************************/
   /* *** end of:  IN0m410 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0M410

// display invt. maint. (item)
Function IN0M420()
   /* ************************************************************/
   /* *** setup process name on map                           ****/
   /* ************************************************************/

  IN0MM030.XXXPRCNM = "IN0M420";

   /* ************************************************************/
   /* *** display error message if there is any               ****/
   /* ************************************************************/

  if (COMMAREA.CAMSG != " ")
    VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* ************************************************************/
   /* *** protect data input fields                           ****/
   /* ************************************************************/

  IN0MW01.IN0MWIX1 = 1;

  while (IN0MWIX1 <= 40)
    set IN0MM030.IN0MMAQY[IN0MWIX1] protect;
    IN0MWIX1 = IN0MWIX1 + 1;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0MM030 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0MM030.CATOAP > " ")
    COMMAREA.CATOAP = IN0MM030.CATOAP;
    COMMAREA.CAITEM = IN0MM030.CAITEM;
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0MM030.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0MM030.CAITEM > " ")
    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0MM030.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switchs & fields                              ****/
   /* ************************************************************/

  IN0MW01.IN0MWERS = "N";
  set IN0MM030.XWHCD initialAttributes;
  set IN0MM030.XOWCD initialAttributes;
  set IN0MM030.IN5TRDCD initialAttributes;
  set IN0MM030.IN5TRDOC initialAttributes;
  set IN0MM030.IN5TRSUB initialAttributes;
  set IN0MM030.XITCD initialAttributes;
  set IN0MM030.IN5TRREF initialAttributes;
  set IN0MM030.XIRCD initialAttributes;
  set IN0MM030.XIFCD initialAttributes;
  set IN0MM030.XGPCD initialAttributes;
  set IN0MM030.SY1STNBR initialAttributes;
  set IN0MM030.SY2CLRID initialAttributes;
  set IN0MM030.XDMCD initialAttributes;
  set IN0MM030.XQACD initialAttributes;
  set IN0MM030.XSDCD initialAttributes;
  set IN0MM030.XSACD initialAttributes;
  set IN0MM030.XPGCD initialAttributes;
  set IN0MM030.XUMCD initialAttributes;
  IN0MW01.IN0MWIX1 = 1;

  while (IN0MWIX1 <= 40)
    set IN0MM030.IN0MMAQY[IN0MWIX1] initialAttributes;
    IN0MWIX1 = IN0MWIX1 + 1;
  end

  set IN0MM030.CATOAP initialAttributes;
  set IN0MM030.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0M-30";
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0MW01.IN0MWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0m420 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0M420

// edit and obtain table data
Function IN0M430()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0MSA4(); /* <=== missing key input edits*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** keys present: edit individual key fields            ****/
   /* ************************************************************/

  IN0MSC4(); /* <=== key field edits*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: check relational key field edits         ****/
   /* ************************************************************/

  IN0MSD4(); /* <=== key relational edits*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: process the key fields                   ****/
   /* ************************************************************/

  IN0MSE4(); /* <=== obtain table data*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  IN0MSF4(); /* <=== save current key value(s)*/
   /* ************************************************************/
   /* *** set error msg switches                              ****/
   /* ************************************************************/

  IN0MW01.IN0MWSW1 = "N";
  IN0MW01.IN0MWSW2 = "N";
  IN0MW01.IN0MWSW3 = "N";

   /* ************************************************************/
   /* *** end of:  IN0m430 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0M430

// display invt. maint. (item)
Function IN0M440()
   /* ************************************************************/
   /* *** setup new process name on map                       ****/
   /* ************************************************************/

  IN0MM030.XXXPRCNM = "IN0M440";

   /* ************************************************************/
   /* *** set cursor to first data input field                ****/
   /* ************************************************************/

  if (IN0MW01.IN0MWERS != "Y")
    set IN0MM030.IN0MMAQY[1] cursor;
  end

   /* ************************************************************/
   /* *** display message from in9060 or av2200.              ****/
   /* ************************************************************/

  if (COMMAREA.CAMSG != " ")
    VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* ************************************************************/
   /* *** force segmented converse                            ****/
   /* ************************************************************/

  converseVar.segmentedMode = 1;


  converse IN0MM030 ;

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (IN0MM030.CATOAP > " ")
    COMMAREA.CATOAP = IN0MM030.CATOAP;
    COMMAREA.CAITEM = IN0MM030.CAITEM;
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.VAGen_EZEMSG = COMMAREA.CAMSG;
    set IN0MM030.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (IN0MM030.CAITEM > " ")
    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(5); /* data in item field requires option*/
    set IN0MM030.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset switches & fields                             ****/
   /* ************************************************************/

  IN0MW01.IN0MWERS = "N";
  set IN0MM030.XWHCD initialAttributes;
  set IN0MM030.XOWCD initialAttributes;
  set IN0MM030.IN5TRDOC initialAttributes;
  set IN0MM030.XITCD initialAttributes;
  set IN0MM030.IN5TRREF initialAttributes;
  set IN0MM030.XIRCD initialAttributes;
  set IN0MM030.XIFCD initialAttributes;
  set IN0MM030.XGPCD initialAttributes;
  set IN0MM030.SY1STNBR initialAttributes;
  set IN0MM030.SY2CLRID initialAttributes;
  set IN0MM030.XDMCD initialAttributes;
  set IN0MM030.XQACD initialAttributes;
  set IN0MM030.XSDCD initialAttributes;
  set IN0MM030.XSACD initialAttributes;
  set IN0MM030.XPGCD initialAttributes;
  set IN0MM030.XUMCD initialAttributes;
  IN0MW01.IN0MWIX1 = 1;
  while (IN0MWIX1 <= 40)
    set IN0MM030.IN0MMAQY[IN0MWIX1] initialAttributes;
    IN0MWIX1 = IN0MWIX1 + 1;
  end
  set IN0MM030.CATOAP initialAttributes;
  set IN0MM030.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** if ENTER or PF12: edit key & data inputs            ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    IN0MST4(); /* <=== ENTER/PF12 editing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if one of the following: go to flow to detemine     ****/
   /* ***                          which process to do next   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to inventory master menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "IN0F";
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD01";
    COMMAREA.CAITEM = "IN0M-30";
    XSEXIT();
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use non-valid pfkey was pressed msg            ****/
   /* ************************************************************/

  IN0MW01.IN0MWERS = "Y";
  converseLib.validationFailed(7); /* pfkey not supported*/

   /* ************************************************************/
   /* *** end of:  IN0m440 - AFTER section                    ****/
   /* ************************************************************/
end // end IN0M440

// update invt.maint. (item)
Function IN0M450()
   /* ************************************************************/
   /* *** no edit errors: process the data adds/changes       ****/
   /* ************************************************************/


   /* ** save map and process in case of abend ***/

  IN0MW01.IN0MWLOC = "IN0M450 ";
  IN0MW01.IN0MWMAP = "IN0MM030";

  IN0MW01.IN0MWSES = "N";

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    IN0MW01.IN0MWTIM = TA2REC.TA2TIMEN;
    IN0MW01.IN0MWTRT = TA2REC.TA2TIMEN;
  else
    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(17); /* internal date error*/
    exit stack;
  end

  if (IN0MW01.IN0MWHDR == "Y")
    IN0MSCC(); /* 's' call to invt hdr db to make sure it wasn't added*/
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0MSFF(); /* 'a' call to invt hdr db*/
      if (SQLCA.VAGen_SQLCODE == 0)
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
      else
        exit stack;
      end
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        exit stack;
      end
    end
  end


  if (IN2REC.IN2ALCFL == "Y")
    IN0MW01.IN0MWSHP = "Y";
  else
    IN0MW01.IN0MWSHP = "N";
  end

  if (IN0MM030.XIFCD == "06")
    IN0MS4L(); /* update inventory databases*/
  else
    if (IN0MW01.IN0MWSHP == "Y")
      IN0MS4L(); /* update inventory databases*/
      IN0MS4K(); /* update availability*/
    else
      IN0MS4L(); /* update inventory databases*/
    end
  end

   /* ************************************************************/
   /* *** if error: call reset to backout any updates         ****/
   /* ************************************************************/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** if special update error get out now                 ****/
   /* ************************************************************/

  if (IN0MW01.IN0MWSES == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** initialize specific input & working stg fields      ****/
   /* ************************************************************/

  IN0MSQ4(); /* <=== blank data input fields*/

   /* ************************************************************/
   /* *** no errors: call commit to make updates permanent    ****/
   /* ************************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* ************************************************************/
   /* *** setup successful message                            ****/
   /* ************************************************************/

  converseLib.validationFailed(9); /* update successful*/

   /* ************************************************************/
   /* *** end of:  IN0m450 - EXECUTE section                  ****/
   /* ************************************************************/
end // end IN0M450

// Verify av upd (AV2200) rtn cd
Function IN0MS-AV2200-ERRS()
   /*  */
   /* Verify AV2200 return codes.  All return codes except zero (no*/
   /* errors) are posted for now.  A screen message for DB2 deadlock*/
   /* is displayed.*/
   /*  */
   /* Do not post rc 13 - Negative qty*/
   /* 71 - Av hdr not found*/
   /* 72 - Av qty not found*/

  if (AVP-RTN-CD == "13"
   || AVP-RTN-CD == "71"
   || AVP-RTN-CD == "72")
    return;
  end

  if (AVP-RTN-CD == "80") /* DB2 deadlock*/
    converseLib.validationFailed(94); /* Inv database in use*/
    IN0MW01.IN0MWERS = "Y"; /* Set error switch to yes*/
    return;
  end

  TA1REC.TA1-GROUP = AVPREC.TA1-GROUP;
  TAEREC.SQLCAREC = AVPREC.SQLCAREC;
  TA1REC.TA1FUNC = "POST";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};


end // end IN0MS-AV2200-ERRS

// data field edits
Function IN0MS-CHK-ALLOC-DT()


   /* ************************************************************/
   /* *** checks to see if do not allocate expiration date    ****/
   /* *** was changed                                         ****/
   /* ************************************************************/


  if (IN0MM010.IN0MMDNA != 0)
    set TA2REC empty;
    set TA2REC01 empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = INRREC08.INR-ENTRY6-DT[INR-SEARCH-SUB];

    if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
      TA2REC01.TA2-GREG-DDMMYY = IN0MM010.IN0MMDNA;
    else /* Domestic*/
      TA2REC.TA2GRGAN = IN0MM010.IN0MMDNA;
    end

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD != 0)
      converseLib.validationFailed(18); /* invalid date entered*/
      set IN0MM010.IN0MMDNA cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  else
    TA2REC.TA2GRGGN = 0;
  end


end // end IN0MS-CHK-ALLOC-DT

// Check IN8020 return code
Function IN0MS-IN8020-ERRS()
   /*  */
   /* Check IN8020 return codes.  All return codes except zero (no*/
   /* errors) are posted.  A screen message for DB2 deadlock*/
   /* (8000).*/
   /*  */

  if (INGREC.ING-RETURN-CD == 8000) /* DB2 deadlock*/
    converseLib.validationFailed(136);
    return;
  else
    if (INGREC.ING-RETURN-CD <= 2300) /* Edit error or row not found*/
      converseLib.validationFailed(169);
      return;
    end
  end

  TA1REC.TA1-GROUP = INGREC.TA1-GROUP;
  TAEREC.SQLCAREC = INGREC.SQLCAREC;

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TA1REC.TA1TBLKE = INGREC.ING-INPUT-DATA; /* IN8020 parameters*/
  TA1REC.TA1FUNC = "POST";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

end // end IN0MS-IN8020-ERRS

// Verify inv upd (IN9060) rtn cd
Function IN0MS-IN9060-ERRS()
   /*  */
   /* Verify IN9060 return codes.  All return codes except zero (no*/
   /* errors) are posted for now.  A screen message for DB2 deadlock*/
   /* (8000) and for XIT-XIR error combination (2010).  Also, rollback*/
   /* updates made in IN9060 for 2010.*/
   /*  */
   /* Do not post rc 0300 series - Negative qtys*/

  if (INFREC.INF-RETURN-CODE >= 0300
   && INFREC.INF-RETURN-CODE <= 0390)
    return;
  end

  if (INF-RETURN-CODE == 2010) /* XIT-XIR error combination*/
    set IN0MM030.XITCD cursor, bold;
    set IN0MM030.XIRCD bold;
    converseLib.validationFailed(180);
    IN0MW01.IN0MWERS = "Y"; /* Set error switch to yes*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back updates made in IN9060*/
    return;
  end

  if (INF-RETURN-CODE == 8000) /* DB2 deadlock*/
    converseLib.validationFailed(94);
    IN0MW01.IN0MWERS = "Y"; /* Set error switch to yes*/
    return;
  end

  TA1REC.TA1-GROUP = INFREC.TA1-GROUP;
  TAEREC.SQLCAREC = INFREC.SQLCAREC;
  TA1REC.TA1FUNC = "POST";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};


end // end IN0MS-IN9060-ERRS

// Format av upd (AV2200) parm
Function IN0MS-LOAD-AVPREC()
   /*  */
   /* Format AVPREC for AV2200 processing.*/
   /*  */

  AVPREC.AVP-PROC-CD = "01";

  AVPREC.XWH-WHSE-CD = IN0MM030.XWHCD;
  AVPREC.XGP-GPC-CD = IN0MM030.XGPCD;
  AVPREC.SY-STY-NBR = IN0MM030.SY1STNBR;
  AVPREC.SY-COLR-CD-ID = IN0MM030.SY2CLRID;
  AVPREC.XDM-DIM-CD = IN0MM030.XDMCD;
  AVPREC.XQA-QUAL-CD = IN0MM030.XQACD;
  AVPREC.XOW-OWN-GRP-CD = IN0MM030.XOWCD;
  AVPREC.XUM-UOM-CD = IN0MM030.XUMCD;

  AVPREC.ZZ-CHNG-PGM-ID = "IN0M";
  AVPREC.ZZ-CHNG-DT = IN0MW02.IN0MWCDT;
  AVPREC.ZZ-CHNG-HHMM = IN0MW01.IN0MWHMM;

  AVPREC.TA1-GROUP = TA1REC.TA1-GROUP;


end // end IN0MS-LOAD-AVPREC

// Format inv upd (IN9060) parm
Function IN0MS-LOAD-INFREC()
   /*  */
   /* Format INFREC for IN9060 processing.*/
   /*  */

  if (IN0MM030.XIFCD == "01")
    INFREC.INF-PROCESS-CODE = "31"; /* On hand qty adj*/
  end

  if (IN0MM030.XIFCD == "02")
    INFREC.INF-PROCESS-CODE = "32"; /* Rsrv qty adj*/
  end

  if (IN0MM030.XIFCD == "03")
    INFREC.INF-PROCESS-CODE = "33"; /* Alloc qty adj*/
  end

  if (IN0MM030.XIFCD == "04")
    INFREC.INF-PROCESS-CODE = "34"; /* Setaside qty adj*/
  end

  if (IN0MM030.XIFCD == "05")
    INFREC.INF-PROCESS-CODE = "35"; /* Xfer out qty adj*/
  end

  if (IN0MM030.XIFCD == "06")
    INFREC.INF-PROCESS-CODE = "36"; /* Xfer in qty adj*/
  end

  INFREC.XWH-WHSE-CD = IN0MM030.XWHCD; /* Warehouse code*/
  INFREC.XOW-OWN-GRP-CD = IN0MM030.XOWCD; /* Owner group code*/
  INFREC.XGP-GPC-CD = IN0MM030.XGPCD; /* GPC code*/
  INFREC.SY-STY-NBR = IN0MM030.SY1STNBR; /* Style nbr*/
  INFREC.SY-COLR-CD-ID = IN0MM030.SY2CLRID; /* Coloc code id*/
  INFREC.XDM-DIM-CD = IN0MM030.XDMCD; /* Dimension code*/
  INFREC.XQA-QUAL-CD = IN0MM030.XQACD; /* Quality code*/
  INFREC.XSD-SPEC-CD = IN0MM030.XSDCD; /* Spec diff code*/
  INFREC.XSA-SHD-CD = IN0MM030.XSACD; /* Shade code*/
  INFREC.XPG-PKG-TYP-CD = IN0MM030.XPGCD; /* Package code*/
  INFREC.XUM-UOM-CD = IN0MM030.XUMCD; /* Unit of measure code*/

  INFREC.IN-AUD-TRN-DOC-CD = IN0MM030.IN5TRDCD;
  INFREC.IN-AUD-TRN-DOC-NBR = IN0MM030.IN5TRDOC;
  INFREC.IN-AUD-TRN-DOC-SUB = IN0MM030.IN5TRSUB;

  if (IN0MM030.IN5TRDCD == "O")
    IN0MW01.IN0MWDOC = IN0MM030.IN5TRDOC;
    INFREC.IN-AUD-TRN-PART = IN0MW01.IN0MWDLT;
  else
    INFREC.IN-AUD-TRN-PART = " ";
  end

  INFREC.IN-AUD-TRN-DT = IN0MW02.IN0MWCDT;
  INFREC.IN-AUD-TRN-HHMMSS = IN0MW01.IN0MWTRT;

  INFREC.XIT-TRN-TYP-CD = IN0MM030.XITCD;
  INFREC.XIR-TRN-RSN-CD = IN0MM030.XIRCD;
  INFREC.XIF-TRN-FLD-CD = IN0MM030.XIFCD;

  INFREC.IN-AUD-TRN-USER-ID = COMMAREA.CAUSERID;
  INFREC.IN-AUD-TRN-DOC-DT = IN0MW02.IN0MWCDT;
  INFREC.IN-AUD-TRN-XREFNBR = IN0MM030.IN5TRREF;

  INFREC.ZZ-CHNG-PGM-ID = "IN0M";
  INFREC.ZZ-CHNG-DT = IN0MW02.IN0MWCDT;
  INFREC.ZZ-CHNG-HHMM = IN0MW01.IN0MWHMM;

  INFREC.TA1-GROUP = TA1REC.TA1-GROUP;
end // end IN0MS-LOAD-INFREC

// calc eff. l/c & perform moves
Function IN0MS1C()


   /* ************************************************************/
   /* *** find effective life cycle and perform data moves    ****/
   /* ************************************************************/


  if (IN0MW02.IN0MWCDT >= INGREC.SY2CEDT1)
    IN0MW01.IN0MWLCY = INGREC.XLCCD1;
  else
    if (IN0MW02.IN0MWCDT >= INGREC.SY2CEDT2)
      IN0MW01.IN0MWLCY = INGREC.XLCCD2;
    else
      if (IN0MW02.IN0MWCDT >= INGREC.SY2CEDT3)
        IN0MW01.IN0MWLCY = INGREC.XLCCD3;
      else
        IN0MW01.IN0MWLCY = INGREC.XLCCD4;
      end
    end
  end

  if (IN0MW01.IN0MWLCY in XLCTBL.XLCCD)
    IN0MM010.XLCCD = IN0MW01.IN0MWLCY;
    IN0MM010.XLCDESC = XLCTBL.XLCDESC[sysVar.arrayIndex];
  else
    IN0MM010.XLCCD = 0;
    IN0MM010.XLCDESC = " ";
  end


   /* ************************************************************/
   /* *** end of statement group in0ms1c                      ****/
   /* ************************************************************/


end // end IN0MS1C

// move hdr. tbl. date to screen
Function IN0MS1D()


   /* **********************************************************/
   /* *** this statement group performs the moves of data   ****/
   /* *** from the header database to the fields on the     ****/
   /* *** in0mm010 screen.                                  ****/
   /* **********************************************************/


  IN0MM010.IN2ALCFL = IN2REC.IN2ALCFL;
  IN0MM010.IN2RSVFL = IN2REC.IN2RSVFL;
  IN0MM010.IN0MMSDP = IN2REC.IN2SCDNP;

  if (IN2REC.IN-DNT-RSRV-XDT != 0)
    set TA2REC empty;
    set TA2REC01 empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = INRREC08.INR-INTRN-DT-FMT[INR-SEARCH-SUB];
    TA2REC.TA2GRGGN = IN2REC.IN-DNT-RSRV-XDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)

      if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
        IN0MM010.IN-DNT-RSRV-XDT = TA2REC01.TA2-GREG-DDMMYY;
      else /* Domestic*/
        IN0MM010.IN-DNT-RSRV-XDT = TA2REC.TA2GRGAN;
      end

    else
      converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
      exit stack;
    end
  end

  if (IN2REC.IN2DNADT != 0)
    set TA2REC empty;
    set TA2REC01 empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = INRREC08.INR-INTRN-DT-FMT[INR-SEARCH-SUB];
    TA2REC.TA2GRGGN = IN2REC.IN2DNADT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)

      if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
        IN0MM010.IN0MMDNA = TA2REC01.TA2-GREG-DDMMYY;
      else /* Domestic*/
        IN0MM010.IN0MMDNA = TA2REC.TA2GRGAN;
      end

    else
      converseLib.validationFailed(17); /* internal date error - contact sys.*/
                                   /* support*/
      exit stack;
    end
  end

  if (IN2REC.IN2FRCDT != 0)
    IN0MM010.IN0MMFRD = IN2REC.IN2FRCDT;
  end

  if (IN2REC.IN2FSPDT != 0)
    IN0MM010.IN0MMFSD = IN2REC.IN2FSPDT;
  end

  if (IN2REC.IN2LRCDT != 0)
    IN0MM010.IN0MMLRD = IN2REC.IN2LRCDT;
  end

  if (IN2REC.IN2LSPDT != 0)
    IN0MM010.IN0MMLSD = IN2REC.IN2LSPDT;
  end


  if (IN0MM010.IN2RSVFL == "Y"
   && IN0MM010.IN-DNT-RSRV-XDT != 0)
    converseLib.validationFailed(178); /* exp date not allowed w/alloc flg='n'*/
    set IN0MM010.IN-DNT-RSRV-XDT cursor, bold;
  end

  if (IN0MM010.IN2RSVFL == "N"
   && IN0MM010.IN-DNT-RSRV-XDT == 0)
    converseLib.validationFailed(179); /* exp date req w/alloc flg='n'*/
    set IN0MM010.IN-DNT-RSRV-XDT cursor, bold;
  end

  if (IN0MM010.IN2ALCFL == "Y"
   && IN0MM010.IN0MMDNA != 0)
    converseLib.validationFailed(27); /* exp date not allowed w/alloc flg='n'*/
    set IN0MM010.IN0MMDNA cursor, bold;
  end

  if (IN0MM010.IN2ALCFL == "N"
   && IN0MM010.IN0MMDNA == 0)
    converseLib.validationFailed(28); /* exp date req w/alloc flg='n'*/
    set IN0MM010.IN0MMDNA cursor, bold;
  end


   /* ************************************************************/
   /* ***       end of statement group in0ms1d                ****/
   /* ************************************************************/
end // end IN0MS1D

// update header table
Function IN0MS1E()
   /* *******************************/
   /* update header table*/
   /* *******************************/


  IN2REC.ZZ-CHNG-PGM-ID = "IN0M";
  IN2REC.ZZZCHGDT = IN0MW02.IN0MWCDT;
  IN2REC.ZZZCHGTM = IN0MW01.IN0MWHMM;

  call "IO0580" ("U ", SQLCA, IN2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != +0)
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0MW01.IN0MWSES = "Y";
      converseLib.validationFailed(22); /* unable to update - try again*/
    else
      IN0MW01.IN0MWERS = "Y";
      converseLib.validationFailed(8); /* header table error*/
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0M    ";
    TA1REC.TA1LOCAT[1] = "U       ";
    TA1REC.TA1LOCAT[2] = IN0MW01.IN0MWLOC;
    TA1REC.TA1LOCAT[3] = "IO0580  ";
    TA1REC.TA1LOCAT[4] = "IN0MS1E ";
    TA1REC.TA1MAP = IN0MW01.IN0MWMAP;
    TA1REC.TA1DBASE = "IN2REC  ";
    TA1REC.TA1TBLVU = "VINHDR01";
    TA1TBLKE = IN2REC.IN2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end
end // end IN0MS1E

// 's ' call to sz. scale db
Function IN0MS4A()


   /* ************************************************************/
   /* *** use size translator to valid translations           ****/
   /* ************************************************************/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";

  call "SY1120" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 14)
    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(0025); /* <--- not on db msg*/
    return;
  end

  IN0MW01.IN0MWERS = "Y";
  converseLib.validationFailed(0008); /* <--- severe db error msg*/

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "IN0M    ";
  TA1REC.TA1LOCAT[1] = "PC      ";
  TA1REC.TA1LOCAT[2] = IN0MW01.IN0MWLOC;
  TA1REC.TA1LOCAT[3] = "SY1120  ";
  TA1REC.TA1LOCAT[4] = SYPREC.SYPRC;
  TA1REC.TA1MAP = IN0MW01.IN0MWMAP;
  TA1REC.TA1DBASE = "SYPREC  ";
  TA1REC.TA1TBLVU = "SZ XLATE";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;

  move SQLCA to ERRSQLCA withV60Compat;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end IN0MS4A

// 's ' call to item tbl (in1rec)
Function IN0MS4B()
   /* *******************************/
   /* obtain item table row*/
   /* *******************************/


  call "IO0590" ("S ", SQLCA, IN1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0MW01.IN0MWERS = "Y";
      converseLib.validationFailed(8); /* severe table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0M    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0MW01.IN0MWLOC;
      TA1REC.TA1LOCAT[3] = "IO0590  ";
      TA1REC.TA1LOCAT[4] = "IN0MS4B ";
      TA1REC.TA1MAP = IN0MW01.IN0MWMAP;
      TA1REC.TA1DBASE = "IN1REC  ";
      TA1REC.TA1TBLVU = "VINITM01";
      TA1TBLKE = IN1REC.IN1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* ***********************************/
   /* *** end of statement group in0ms4b*/
   /* ***********************************/
end // end IN0MS4B

// determine qty going to screen
Function IN0MS4C()


  if (IN0MM030.XIFCD == "01")
    IN0MM030.IN0MMIFC[IN0MWIX2] = IN1REC.IN1ONHND;
  else
    if (IN0MM030.XIFCD == "02")
      IN0MM030.IN0MMIFC[IN0MWIX2] = IN1REC.IN1RSRVD;
    else
      if (IN0MM030.XIFCD == "03")
        IN0MM030.IN0MMIFC[IN0MWIX2] = IN1REC.IN1ALOCD;
      else
        if (IN0MM030.XIFCD == "04")
          IN0MM030.IN0MMIFC[IN0MWIX2] = IN1REC.IN1STASD;
        else
          if (IN0MM030.XIFCD == "05")
            IN0MM030.IN0MMIFC[IN0MWIX2] = IN1REC.IN1XFERO;
          else
            if (IN0MM030.XIFCD == "06")
              IN0MM030.IN0MMIFC[IN0MWIX2] = IN1REC.IN1XFERI;
            end
          end
        end
      end
    end
  end


   /* ***************************************************/
   /* *** this is the end of statement group in0ms4c ****/
   /* ***************************************************/


end // end IN0MS4C

// update through availability
Function IN0MS4K()
   /*  */
   /* Update availability ('F' and 'N' record) through AV2200.*/
   /*  */

  TA1REC.TA1PGMNM = "IN0MS4K ";
  TA1REC.TA1MAP = "IN0MM030";

  set AVPREC empty;

  IN0MWIX1 = 1;
  IN0MWIX3 = 0;

  while (IN0MWIX1 <= 40)

    if (IN9REC.IN1ONHND[IN0MWIX1] != 0
     || IN9REC.IN1ALOCD[IN0MWIX1] != 0
     || IN9REC.IN1STASD[IN0MWIX1] != 0
     || IN9REC.IN1RSRVD[IN0MWIX1] != 0
     || IN9REC.IN1XFERO[IN0MWIX1] != 0
     || IN9REC.IN1XFERI[IN0MWIX1] != 0
     || IN9REC.IN1EOMOH[IN0MWIX1] != 0
     || IN9REC.ZZZCHGCT[IN0MWIX1] != 0
     || SYPREC.SY4IDDSC[IN0MWIX1] != "     ")

      IN0MWIX3 = IN0MWIX3 + 1;

      if (IN0MM030.IN0MMAQY[IN0MWIX3] != 0)

        if (IN0MM030.XIFCD == "01") /* if on hand qty adj*/
          AVPREC.AVP-CHNG-QTY[IN0MWIX1] = IN0MM030.IN0MMAQY[IN0MWIX3];
        else
          AVPREC.AVP-CHNG-QTY[IN0MWIX1] = IN0MM030.IN0MMAQY[IN0MWIX3] * -1;
        end

      end

    end
    IN0MWIX1 = IN0MWIX1 + 1;

  end

  IN0MS-LOAD-AVPREC(); /* populate avprec*/

  XSAVS-UPD-AV-QTY(); /* call av2200 to perform update*/

  if (AVPREC.AVP-RTN-CD > "00")
    IN0MS-AV2200-ERRS(); /* post warning*/
  end


end // end IN0MS4K

// update inventory databases
Function IN0MS4L()
   /*  */
   /* Update inv item and inv audit through IN9060.*/
   /*  */

  TA1REC.TA1PGMNM = "IN0MS4L ";
  TA1REC.TA1MAP = "IN0MM030";

  IN0MWIX1 = 1;
  IN0MWIX3 = 0;

  while (IN0MWIX1 <= 40)

    if (IN9REC.IN1ONHND[IN0MWIX1] != 0
     || IN9REC.IN1ALOCD[IN0MWIX1] != 0
     || IN9REC.IN1STASD[IN0MWIX1] != 0
     || IN9REC.IN1RSRVD[IN0MWIX1] != 0
     || IN9REC.IN1XFERO[IN0MWIX1] != 0
     || IN9REC.IN1XFERI[IN0MWIX1] != 0
     || IN9REC.IN1EOMOH[IN0MWIX1] != 0
     || IN9REC.ZZZCHGCT[IN0MWIX1] != 0
     || SYPREC.SY4IDDSC[IN0MWIX1] != "     ")

      IN0MWIX3 = IN0MWIX3 + 1;

      if (IN0MM030.IN0MMAQY[IN0MWIX3] != 0)
        INFREC.INF-CHG-QTY[IN0MWIX1] = IN0MM030.IN0MMAQY[IN0MWIX3];
      end

    end
    IN0MWIX1 = IN0MWIX1 + 1;

  end

  IN0MS-LOAD-INFREC(); /* populate infrec*/

  XSINS-UPD-INV-ITEM(); /* call in9060 to perform update*/

  if (INFREC.INF-RETURN-CODE > 0000)
    IN0MS-IN9060-ERRS(); /* post warning*/
  end


end // end IN0MS4L

// calc l/c and make moves
Function IN0MS4O()


   /* ************************************************************/
   /* *** find effective life cycle and perform data moves    ****/
   /* ************************************************************/


  if (IN0MW02.IN0MWCDT >= INGREC.SY2CEDT1)
    IN0MM030.XLCCD = INGREC.XLCCD1;
  else
    if (IN0MW02.IN0MWCDT >= INGREC.SY2CEDT2)
      IN0MM030.XLCCD = INGREC.XLCCD2;
    else
      if (IN0MW02.IN0MWCDT >= INGREC.SY2CEDT3)
        IN0MM030.XLCCD = INGREC.XLCCD3;
      else
        IN0MM030.XLCCD = INGREC.XLCCD4;
      end
    end
  end


   /* ************************************************************/
   /* *** end of statement group in0ms4O                      ****/
   /* ************************************************************/


end // end IN0MS4O

// use formatter to get invt itms
Function IN0MS4Q()


  call "DB1030" ("S ", INQREC, IN9REC) {isNoRefresh = yes, isExternal = yes};

  SQLCA.SQLCAREC = INQREC.INQSQLCA;

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
    return;
  else
    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(8);
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0M    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = IN0MW01.IN0MWLOC;
    TA1REC.TA1LOCAT[3] = "DB1030  ";
    TA1REC.TA1LOCAT[4] = INQREC.INQFAILR;
    TA1REC.TA1MAP = IN0MW01.IN0MWMAP;
    TA1REC.TA1DBASE = "IN9REC  ";
    TA1REC.TA1TBLVU = "4MATTER ";
    TA1REC.TA1TBLKE = IN9REC.IN9KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end


end // end IN0MS4Q

// missing input edits
Function IN0MSA1()


   /* ************************************************************/
   /* *** make sure all required inputs are present           ****/
   /* ************************************************************/


  if (IN0MM010.XQACD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM010.XQACD cursor, bold;
  end

  if (IN0MM010.XDMCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM010.XDMCD cursor, bold;
  end

  if (IN0MM010.SY2CLRID == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM010.SY2CLRID cursor, bold;
  end

  if (IN0MM010.SY1STNBR == "      ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM010.SY1STNBR cursor, bold;
  end

  if (IN0MM010.XGPCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM010.XGPCD cursor, bold;
  end

  if (IN0MM010.XOWCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM010.XOWCD cursor, bold;
  end

  if (IN0MM010.XWHCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM010.XWHCD cursor, bold;
  end


   /* ************************************************************/
   /* *** end of:  IN0mSA1 - missing input edits              ****/
   /* ************************************************************/


end // end IN0MSA1

// edit for missing key fields
Function IN0MSA4()
   /* ************************************************************/
   /* *** make sure all required inputs are present           ****/
   /* ************************************************************/


  if (IN0MM030.XPGCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XPGCD cursor, bold;
  end

  if (IN0MM030.XSACD == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XSACD cursor, bold;
  end

  if (IN0MM030.XSDCD == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XSDCD cursor, bold;
  end

  if (IN0MM030.XQACD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XQACD cursor, bold;
  end

  if (IN0MM030.XDMCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XDMCD cursor, bold;
  end

  if (IN0MM030.SY2CLRID == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.SY2CLRID cursor, bold;
  end

  if (IN0MM030.SY1STNBR == "      ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.SY1STNBR cursor, bold;
  end

  if (IN0MM030.XGPCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XGPCD cursor, bold;
  end

  if (IN0MM030.XIFCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XIFCD cursor, bold;
  end

  if (IN0MM030.XIRCD == "   ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XIRCD cursor, bold;
  end

  if (IN0MM030.XITCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XITCD cursor, bold;
  end

  if (IN0MM030.IN5TRDOC == 0)
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.IN5TRDOC cursor, bold;
  end

  if (IN0MM030.XOWCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XOWCD cursor, bold;
  end

  if (IN0MM030.XWHCD == "  ")
    converseLib.validationFailed(6); /* required field*/
    IN0MW01.IN0MWERS = "Y";
    set IN0MM030.XWHCD cursor, bold;
  end


   /* ************************************************************/
   /* *** end of:  IN0mSA4 - missing input edits              ****/
   /* ************************************************************/
end // end IN0MSA4

// same key edits
Function IN0MSB1()


   /* ************************************************************/
   /* *** check individual key fields for the same value as   ****/
   /* *** the corresponding working storage last saved value: ****/
   /* *** set same key switch (IN0mWSKS) to 'N' if any differ ****/
   /* *** and make sure to set it to 'Y' in case it was 'N'   ****/
   /* *** when this statement group was started.              ****/
   /* ************************************************************/

  IN0MW01.IN0MWSKS = "Y";

  if (IN0MM010.XWHCD != IN0MW01.XWHCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM010.XOWCD != IN0MW01.XOWCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM010.XGPCD != IN0MW01.XGPCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM010.SY1STNBR != IN0MW01.SY1STNBR)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM010.SY2CLRID != IN0MW01.SY2CLRID)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM010.XDMCD != IN0MW01.XDMCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM010.XQACD != IN0MW01.XQACD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MW01.IN0MWSKS == "N")
    IN0MSF1(); /* save key*/

    set IN0MM010 initial;

    IN0MM010.XWHCD = IN0MW01.XWHCD;
    IN0MM010.XOWCD = IN0MW01.XOWCD;
    IN0MM010.XGPCD = IN0MW01.XGPCD;
    IN0MM010.SY1STNBR = IN0MW01.SY1STNBR;
    IN0MM010.SY2CLRID = IN0MW01.SY2CLRID;
    IN0MM010.XDMCD = IN0MW01.XDMCD;
    IN0MM010.XQACD = IN0MW01.XQACD;

    IN0MM010.XXXTITLE = "INVENTORY MAINTENANCE    (QLTY)";
    IN0MM010.XXXCURDT = VGVar.currentShortGregorianDate;
    IN0MM010.XXXRVNBR = IN0MW02.IN0MWRVN;
  end

   /* ************************************************************/
   /* *** end of:  IN0mSB1 - same key edits                   ****/
   /* ************************************************************/


end // end IN0MSB1

// edit for changed key
Function IN0MSB4()
   /* ************************************************************/
   /* *** check individual key fields for the same value as   ****/
   /* *** the corresponding working storage last saved value: ****/
   /* *** set same key switch (IN0mWSKS) to 'N' if any differ ****/
   /* *** and make sure to set it to 'Y' in case it was 'N'   ****/
   /* *** when this statement group was started.              ****/
   /* ************************************************************/


  IN0MW01.IN0MWSKS = "Y";

  if (IN0MM030.XWHCD != IN0MW01.XWHCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.XOWCD != IN0MW01.XOWCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.XIFCD != IN0MW01.XIFCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.XGPCD != IN0MW01.XGPCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.SY1STNBR != IN0MW01.SY1STNBR)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.SY2CLRID != IN0MW01.SY2CLRID)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.XDMCD != IN0MW01.XDMCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.XQACD != IN0MW01.XQACD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.XSDCD != IN0MW01.XSDCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.XSACD != IN0MW01.XSACD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.XPGCD != IN0MW01.XPGCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.XUMCD != IN0MW01.XUMCD)
    IN0MW01.IN0MWSKS = "N";
  end

  if (IN0MM030.XITCD != IN0MW01.XITCD)
    if (IN0MM030.XITCD in XITTBL.XITCD)
      if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (XITTBL.XITADJFL[sysVar.arrayIndex] == "Y")
          IN0MM030.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
          IN0MW01.XITCD = IN0MM030.XITCD;
        else
          converseLib.validationFailed(11); /* invalid value*/
          set IN0MM030.XITCD cursor, bold;
          IN0MW01.IN0MWERS = "Y";
          IN0MM030.XITABRV = " ";
        end
      else
        converseLib.validationFailed(12); /* inactive status*/
        set IN0MM030.XITCD cursor, bold;
        IN0MW01.IN0MWERS = "Y";
        IN0MM030.XITABRV = " ";
      end
    else
      converseLib.validationFailed(11); /* invalid value*/
      set IN0MM030.XITCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MM030.XITABRV = " ";
    end
  end

  if (IN0MM030.XIRCD != IN0MW01.XIRCD)
    if (IN0MM030.XIRCD in XIRTBL.XIRCD)
      if (XIRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (XIRTBL.XIRADJ[sysVar.arrayIndex] == "Y")
          IN0MM030.XIRABRV = XIRTBL.XIRABRV[sysVar.arrayIndex];
          IN0MW01.XIRCD = IN0MM030.XIRCD;
        else
          converseLib.validationFailed(11); /* invalid value*/
          set IN0MM030.XIRCD cursor, bold;
          IN0MW01.IN0MWERS = "Y";
          IN0MM030.XIRABRV = " ";
        end
      else
        converseLib.validationFailed(12); /* inactive status*/
        set IN0MM030.XIRCD cursor, bold;
        IN0MW01.IN0MWERS = "Y";
        IN0MM030.XIRABRV = " ";
      end
    else
      converseLib.validationFailed(11); /* invalid value*/
      set IN0MM030.XIRCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MM030.XIRABRV = " ";
    end
  end

  if (IN0MW01.IN0MWSKS == "N")
    IN0MSF4(); /* save uppper part of screen*/

    set IN0MM030 initial;

    IN0MM030.XWHCD = IN0MW01.XWHCD;
    IN0MM030.XOWCD = IN0MW01.XOWCD;
    IN0MM030.IN5TRDCD = IN0MW01.IN5TRDCD;
    IN0MM030.IN5TRDOC = IN0MW01.IN0MWTRD;
    IN0MM030.IN5TRSUB = IN0MW01.IN0MWTRS;
    IN0MM030.XITCD = IN0MW01.XITCD;
    IN0MM030.IN5TRREF = IN0MW01.IN5TRREF;
    IN0MM030.XIRCD = IN0MW01.XIRCD;
    IN0MM030.XIFCD = IN0MW01.XIFCD;
    IN0MM030.XGPCD = IN0MW01.XGPCD;
    IN0MM030.SY1STNBR = IN0MW01.SY1STNBR;
    IN0MM030.SY2CLRID = IN0MW01.SY2CLRID;
    IN0MM030.XDMCD = IN0MW01.XDMCD;
    IN0MM030.XQACD = IN0MW01.XQACD;
    IN0MM030.XSACD = IN0MW01.XSACD;
    IN0MM030.XSDCD = IN0MW01.XSDCD;
    IN0MM030.XPGCD = IN0MW01.XPGCD;
    IN0MM030.XUMCD = IN0MW01.XUMCD;

    IN0MM030.XXXTITLE = "INVENTORY MAINTENANCE    (ITEM)";
    IN0MM030.XXXCURDT = VGVar.currentShortGregorianDate;
    IN0MM030.XXXRVNBR = IN0MW02.IN0MWRVN;
  end


   /* ************************************************************/
   /* *** end of:  IN0mSB4 - same key edits                   ****/
   /* ************************************************************/


end // end IN0MSB4

// field edits
Function IN0MSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & map   ****/
   /* ***       and do not test for modified fields           ****/
   /* ***       re: CSP resets the mdt on every converse      ****/
   /* ************************************************************/


   /* **** verify quality code *****/


  if (IN0MM010.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0MM010.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* status is inactive*/
      set IN0MM010.XQACD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MM010.XQADESC = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM010.XQACD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.XQADESC = " ";
  end


   /* **** verify gpc code *****/


  if (IN0MM010.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0MM010.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM010.XGPCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MM010.XGPABRV = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM010.XGPCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.XGPABRV = " ";
  end


   /* **** verify warehouse code *****/


  if (IN0MM010.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0MM010.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM010.XWHCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MM010.XWHABRV = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM010.XWHCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    IN0MM010.XWHABRV = " ";
  end


   /* **** verify gpc is valid for warehouse ********/


  if (sysVar.arrayIndex == 0 /* if gpc or whse not valid,*/
   || IN0MM010.XGPABRV == " ") /* skip this edit*/
     /* next SENTENCE*/
  else
    if (XWHTBL.XGPCD1[sysVar.arrayIndex] == IN0MM010.XGPCD /* gpc is one of the 8*/
     || XWHTBL.XGPCD2[sysVar.arrayIndex] == IN0MM010.XGPCD /* valid gpc's for this*/
     || XWHTBL.XGPCD3[sysVar.arrayIndex] == IN0MM010.XGPCD /* whse*/
     || XWHTBL.XGPCD4[sysVar.arrayIndex] == IN0MM010.XGPCD 
     || XWHTBL.XGPCD5[sysVar.arrayIndex] == IN0MM010.XGPCD 
     || XWHTBL.XGPCD6[sysVar.arrayIndex] == IN0MM010.XGPCD 
     || XWHTBL.XGPCD7[sysVar.arrayIndex] == IN0MM010.XGPCD 
     || XWHTBL.XGPCD8[sysVar.arrayIndex] == IN0MM010.XGPCD)
                                  /* continue*/
    else
      converseLib.validationFailed(173); /* otherwise - invalid value*/
      set IN0MM010.XGPCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MM010.XGPABRV = " ";
    end
  end

   /* *** verify owner group code *****/

  if (sysVar.arrayIndex != 0)
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
      XOWREC.XWHCD = IN0MM010.XWHCD;
      XOWREC.XOWCD = IN0MM010.XOWCD;
      if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
        if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          IN0MM010.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
        else
          converseLib.validationFailed(12); /* inactive status*/
          set IN0MM010.XOWCD cursor, bold;
          IN0MW01.IN0MWERS = "Y";
          IN0MM010.XOWABRV = " ";
        end
      else
        converseLib.validationFailed(11); /* invalid value*/
        set IN0MM010.XOWCD cursor, bold;
        IN0MW01.IN0MWERS = "Y";
        IN0MM010.XOWABRV = " ";
      end
    else
      if (IN0MM010.XOWCD != "00")
        converseLib.validationFailed(11); /* invalid value*/
        set IN0MM010.XOWCD cursor, bold;
        IN0MW01.IN0MWERS = "Y";
        IN0MM010.XOWABRV = " ";
      end
    end
  end


   /* ************************************************************/
   /* *** end of:  IN0mSC1 - field edits                      ****/
   /* ************************************************************/


end // end IN0MSC1

// key field edits
Function IN0MSC4()
   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & map   ****/
   /* ***       and do not test for modified fields           ****/
   /* ***       re: CSP resets the mdt on every converse      ****/
   /* ************************************************************/


   /* **** verify unit of measure if entered *****/


  if (IN0MM030.XUMCD != "  ")
    if (IN0MM030.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
      else
        converseLib.validationFailed(12); /* inactive status*/
        set IN0MM030.XUMCD cursor, bold;
        IN0MW01.IN0MWERS = "Y";
      end
    else
      converseLib.validationFailed(11); /* invalid value*/
      set IN0MM030.XUMCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  end


   /* **** verify pkg type code *****/


  if (IN0MM030.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM030.XPGCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM030.XPGCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
  end


   /* **** verify shade code *****/


  if (IN0MM030.XSACD in XSATBL.XSACD)
    if (XSATBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM030.XSACD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM030.XSACD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
  end


   /* **** verify spec diff code *****/

  set PC2REC empty;
  PC2REC.XGPCD = IN0MM030.XGPCD;
  PC2REC.PC2INSEG = IN0MM030.XSDCD;
  IN0MSDD();
  if (SQLCA.VAGen_SQLCODE == 0)
    if (PC2REC.XXXSTAT == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM030.XSDCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(11); /* invalid value*/
      set IN0MM030.XSDCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    else
      return;
    end
  end


   /* **** verify quality code *****/


  if (IN0MM030.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM030.XQACD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM030.XQACD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
  end


   /* **** verify dimension code *****/


  if (IN0MM030.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM030.XDMCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM030.XDMCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
  end


   /* **** verify gpc code *****/


  if (IN0MM030.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0MW01.IN0MW-GPC-VALID-FL = "Y";
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM030.XGPCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MW01.IN0MW-GPC-VALID-FL = "N";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM030.XGPCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    IN0MW01.IN0MW-GPC-VALID-FL = "N";
  end


   /* **** verify field code *****/


  if (IN0MM030.XIFCD in XIFTBL.XIFCD)
    if (XIFTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (IN0MM030.XIFCD == "01")
        IN0MM030.XIFABRV = XIFTBL.XIFABRV[sysVar.arrayIndex];
        IN0MM030.IN0MMCT1 = XIFTBL.XIFABRV[sysVar.arrayIndex];
        IN0MM030.IN0MMCT2 = XIFTBL.XIFABRV[sysVar.arrayIndex];
        IN0MM030.IN0MMCT3 = XIFTBL.XIFABRV[sysVar.arrayIndex];
        IN0MM030.IN0MMCT4 = XIFTBL.XIFABRV[sysVar.arrayIndex];
        IN0MM030.IN0MMCT5 = XIFTBL.XIFABRV[sysVar.arrayIndex];
      else
        if (COMMAREA.CACLVL[1] == "Y")
          IN0MM030.XIFABRV = XIFTBL.XIFABRV[sysVar.arrayIndex];
          IN0MM030.IN0MMCT1 = XIFTBL.XIFABRV[sysVar.arrayIndex];
          IN0MM030.IN0MMCT2 = XIFTBL.XIFABRV[sysVar.arrayIndex];
          IN0MM030.IN0MMCT3 = XIFTBL.XIFABRV[sysVar.arrayIndex];
          IN0MM030.IN0MMCT4 = XIFTBL.XIFABRV[sysVar.arrayIndex];
          IN0MM030.IN0MMCT5 = XIFTBL.XIFABRV[sysVar.arrayIndex];
        else
          converseLib.validationFailed(52); /* not authorized*/
          set IN0MM030.XIFCD cursor, bold;
          IN0MW01.IN0MWERS = "Y";
          IN0MM030.IN0MMCT1 = " ";
          IN0MM030.IN0MMCT2 = " ";
          IN0MM030.IN0MMCT3 = " ";
          IN0MM030.IN0MMCT4 = " ";
          IN0MM030.IN0MMCT5 = " ";
        end
      end
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM030.XIFCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MM030.XIFABRV = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM030.XIFCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.XIFABRV = " ";
  end


   /* **** verify reason code *****/


  if (IN0MM030.XIRCD in XIRTBL.XIRCD)
    if (XIRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XIRTBL.XIRADJ[sysVar.arrayIndex] == "Y")
        IN0MM030.XIRABRV = XIRTBL.XIRABRV[sysVar.arrayIndex];
      else
        converseLib.validationFailed(11); /* invalid value*/
        set IN0MM030.XIRCD cursor, bold;
        IN0MW01.IN0MWERS = "Y";
        IN0MM030.XIRABRV = " ";
      end
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM030.XIRCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MM030.XIRABRV = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM030.XIRCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.XIRABRV = " ";
  end


   /* **** verify tran type code *****/


  if (IN0MM030.XITCD in XITTBL.XITCD)
    if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XITTBL.XITADJFL[sysVar.arrayIndex] == "Y")
        IN0MM030.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
        IN0MW01.XIGCD = XITTBL.XIGCD[sysVar.arrayIndex];
        IN0MSD4(); /* edit transaction against fld code*/
      else
        converseLib.validationFailed(11); /* invalid value*/
        set IN0MM030.XITCD cursor, bold;
        IN0MW01.IN0MWERS = "Y";
        IN0MM030.XITABRV = " ";
      end
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM030.XITCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MM030.XITABRV = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM030.XITCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.XITABRV = " ";
  end


   /* **** verify tran part code *****/
  if (IN0MM030.IN5TRDCD != "S"
   && IN0MM030.IN5TRDCD != "O"
   && IN0MM030.IN5TRDCD != "R"
   && IN0MM030.IN5TRDCD != "T"
   && IN0MM030.IN5TRDCD != "A"
   && IN0MM030.IN5TRDCD != "C")
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM030.IN5TRDCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
  end


   /* **** verify warehouse code *****/


  if (IN0MM030.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      IN0MM030.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
      IN0MW01.IN0MWOGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
    else
      converseLib.validationFailed(12); /* inactive status*/
      set IN0MM030.XWHCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
      IN0MM030.XWHSABRV = " ";
    end
  else
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM030.XWHCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    IN0MM030.XWHSABRV = " ";
  end


   /* **** verify gpc is valid for warehouse ********/


  if (sysVar.arrayIndex == 0 /* whse not valid*/
   || IN0MW01.IN0MW-GPC-VALID-FL == "N") /* or gpc not valid*/
     /* next SENTENCE                       /* - skip this edit*/
  else
    if (XWHTBL.XGPCD1[sysVar.arrayIndex] == IN0MM030.XGPCD /* gpc is one of the 8*/
     || XWHTBL.XGPCD2[sysVar.arrayIndex] == IN0MM030.XGPCD /* valid gpc's for this*/
     || XWHTBL.XGPCD3[sysVar.arrayIndex] == IN0MM030.XGPCD /* whse*/
     || XWHTBL.XGPCD4[sysVar.arrayIndex] == IN0MM030.XGPCD 
     || XWHTBL.XGPCD5[sysVar.arrayIndex] == IN0MM030.XGPCD 
     || XWHTBL.XGPCD6[sysVar.arrayIndex] == IN0MM030.XGPCD 
     || XWHTBL.XGPCD7[sysVar.arrayIndex] == IN0MM030.XGPCD 
     || XWHTBL.XGPCD8[sysVar.arrayIndex] == IN0MM030.XGPCD)
                                  /* continue*/
    else
      converseLib.validationFailed(173); /* otherwise - invalid value*/
      set IN0MM030.XGPCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  end


   /* **** verify owner group code *****/


  if (IN0MW01.IN0MWOGF == "Y")
    XOWREC.XWHCD = IN0MM030.XWHCD;
    XOWREC.XOWCD = IN0MM030.XOWCD;
    if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        converseLib.validationFailed(12); /* inactive status*/
        set IN0MM030.XOWCD cursor, bold;
        IN0MW01.IN0MWERS = "Y";
      end
    else
      converseLib.validationFailed(11); /* invalid value*/
      set IN0MM030.XOWCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  else
    if (IN0MM030.XOWCD != "00")
      converseLib.validationFailed(11); /* invalid value*/
      set IN0MM030.XOWCD cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  end


   /* ************************************************************/
   /* *** end of:  IN0mSC4 - field edits                      ****/
   /* ************************************************************/
end // end IN0MSC4

// select call to header table
Function IN0MSCC()
   /* *******************************/
   /* obtain header record*/
   /* *******************************/


  call "IO0580" ("S ", SQLCA, IN2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != +100)
      IN0MW01.IN0MWERS = "Y";
      converseLib.validationFailed(8); /* header table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "IN0M    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = IN0MW01.IN0MWLOC;
      TA1REC.TA1LOCAT[3] = "IO0580  ";
      TA1REC.TA1LOCAT[4] = "IN0MSCC ";
      TA1REC.TA1MAP = IN0MW01.IN0MWMAP;
      TA1REC.TA1DBASE = "IN2REC  ";
      TA1REC.TA1TBLVU = "VINHDR01";
      TA1TBLKE = IN2REC.IN2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end
end // end IN0MSCC

// edit trans cd against fld cd
Function IN0MSD4()


   /* ************************************************************/
   /* *** edit transaction against field type                 ****/
   /* ************************************************************/

  if (IN0MM030.XIFCD == "01")
    if (IN0MW01.XIGCD == "10"
     || IN0MW01.XIGCD == "20"
     || IN0MW01.XIGCD == "30"
     || IN0MW01.XIGCD == "90")
       /* next sentence*/
    else
      IN0MW01.IN0MWERS = "Y";
      converseLib.validationFailed(0011); /* invalid value*/
      set IN0MM030.XITCD cursor, bold;
    end
  else
    if (IN0MM030.XIFCD == "02"
     && IN0MW01.XIGCD == "60")
       /* next sentence*/
    else
      if (IN0MM030.XIFCD == "03"
       && IN0MW01.XIGCD == "70")
         /* next sentence*/
      else
        if (IN0MM030.XIFCD == "04"
         && IN0MW01.XIGCD == "80")
           /* next sentence*/
        else
          if (IN0MM030.XIFCD == "05"
           && IN0MW01.XIGCD == "50")
             /* next sentence*/
          else
            if (IN0MM030.XIFCD == "06")
              if (IN0MW01.XIGCD == "30"
               || IN0MW01.XIGCD == "50")
               /* next sentence*/
              else
                IN0MW01.IN0MWERS = "Y";
                converseLib.validationFailed(0011); /* invalid value*/
                set IN0MM030.XITCD cursor, bold;
              end
            else
              IN0MW01.IN0MWERS = "Y";
              converseLib.validationFailed(0011); /* invalid value*/
              set IN0MM030.XITCD cursor, bold;
            end
          end
        end
      end
    end
  end


end // end IN0MSD4

// select call to header table
Function IN0MSDD()
   /* *******************************/
   /* obtain dprodc.vprdcu01*/
   /* *******************************/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    IN0MW01.IN0MWERS = "Y";
    converseLib.validationFailed(8); /* error notify programming*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0M    ";
    TA1REC.TA1LOCAT[1] = "SG      ";
    TA1REC.TA1LOCAT[2] = IN0MW01.IN0MWLOC;
    TA1REC.TA1LOCAT[3] = "IO4430  ";
    TA1REC.TA1LOCAT[4] = "IN0MSDD ";
    TA1REC.TA1MAP = IN0MW01.IN0MWMAP;
    TA1REC.TA1DBASE = "PC2REC  ";
    TA1REC.TA1TBLVU = "VPRDCU01";
    TA1TBLKE = PC2REC.PC2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end
end // end IN0MSDD

// perform db2 table lookups
Function IN0MSE1()


   /* ** save statement group and map names in case of abend ***/

  IN0MW01.IN0MWLOC = "IN0MSE1 ";
  IN0MW01.IN0MWMAP = "IN0MM010";

  set INGREC empty;
  set TA1REC empty;

  TA1REC.TA1PGMNM = "IN0MSE1";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
  INGREC.XGP-GPC-CD = IN0MM010.XGPCD;
  INGREC.SY-STY-NBR = IN0MM010.SY1STNBR;
  INGREC.SY-COLR-CD-ID = IN0MM010.SY2CLRID;
  INGREC.XDM-DIM-CD = IN0MM010.XDMCD;

  XSINS-CALL-IN8020();

  if (INGREC.ING-RETURN-CD > 0000)
    IN0MS-IN8020-ERRS();
    IN0MM010.SY1SSTNM = " ";
    IN0MM010.SY2CLRAB = " ";
    converseLib.validationFailed(13); /* style record not on db*/
    set IN0MM010.SY1STNBR cursor, bold;
    set IN0MM010.SY2CLRID cursor, bold;
    set IN0MM010.XDMCD bold;
    IN0MW01.IN0MWERS = "Y";
    return;
  else
    IN0MM010.SY1SSTNM = INGREC.SY1SSTNM;
    IN0MM010.SY2CLRAB = INGREC.SY2CLRAB;
    IN0MS1C(); /* find eff. life cycle and move to screen*/
  end


  set IN2REC empty;

  IN2REC.XWHCD = IN0MM010.XWHCD;
  IN2REC.XOWCD = IN0MM010.XOWCD;
  IN2REC.XGPCD = IN0MM010.XGPCD;
  IN2REC.SY1STNBR = IN0MM010.SY1STNBR;
  IN2REC.SY2CLRID = IN0MM010.SY2CLRID;
  IN2REC.XDMCD = IN0MM010.XDMCD;
  IN2REC.XQACD = IN0MM010.XQACD;

  IN0MSCC(); /* obtain header table data*/

  if (SQLCA.VAGen_SQLCODE == +0)
    IN0MS1D(); /* perform moves to map fields*/
    IN0MW01.IN0MWIFV = "U"; /* this will be an update*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      IN0MW01.IN0MWIFV = "A"; /* this will be an add*/
      return;
    else
      return;
    end
  end


   /* ************************************************************/
   /* *** end of:  IN0mSE1 - obtain table data                ****/
   /* ************************************************************/


end // end IN0MSE1

// obtain table data
Function IN0MSE4()

   /* **********************************/
   /* *** perform db2 table lookups ****/
   /* **********************************/

   /* **** set up abend areas *****/

  IN0MW01.IN0MWLOC = "IN0MSE4 ";
  IN0MW01.IN0MWMAP = "IN0MM030";

  set INGREC empty;
  set TA1REC empty;

  INGREC.ING-PROCESS-CD = "PD"; /* 'PD' means get product data*/
  INGREC.XGP-GPC-CD = IN0MM030.XGPCD;
  INGREC.SY-STY-NBR = IN0MM030.SY1STNBR;
  INGREC.SY-COLR-CD-ID = IN0MM030.SY2CLRID;
  INGREC.XDM-DIM-CD = IN0MM030.XDMCD;

  TA1REC.TA1PGMNM = "IN0MSE4";
  INGREC.TA1-GROUP = TA1REC.TA1-GROUP;

  XSINS-CALL-IN8020();

  if (INGREC.ING-RETURN-CD > 0000)
    IN0MS-IN8020-ERRS();
    converseLib.validationFailed(13); /* style record not on db*/
    set IN0MM030.SY1STNBR cursor, bold;
    set IN0MM030.SY2CLRAB cursor, bold;
    set IN0MM030.SY2CLRID cursor, bold;
    set IN0MM030.XDMCD cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    return;
  else
    IN0MM030.SY1SSTNM = INGREC.SY1SSTNM;
    IN0MM030.SY2CLRAB = INGREC.SY2CLRAB;
    IN0MS4O();
    if (IN0MM030.XUMCD == "  ")
      IN0MM030.XUMCD = INGREC.XUM-UOM-CD;
    end
  end

  set IN2REC empty;

  IN2REC.XWHCD = IN0MM030.XWHCD;
  IN2REC.XOWCD = IN0MM030.XOWCD;
  IN2REC.XGPCD = IN0MM030.XGPCD;
  IN2REC.SY1STNBR = IN0MM030.SY1STNBR;
  IN2REC.SY2CLRID = IN0MM030.SY2CLRID;
  IN2REC.XDMCD = IN0MM030.XDMCD;
  IN2REC.XQACD = IN0MM030.XQACD;

  IN0MSCC(); /* 's' call to invt hdr db (in2rec)*/

  IN0MW01.IN0MWHDR = "N";
  if (SQLCA.VAGen_SQLCODE == +100)
    IN2REC.IN2ALCFL = "Y";
    IN2REC.IN2SCDNP = 0;
    IN0MW01.IN0MWHDR = "Y"; /* yes add a hdr record in update*/
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
  end

  set IN9REC empty;

  IN9REC.XWHCD = IN0MM030.XWHCD;
  IN9REC.XOWCD = IN0MM030.XOWCD;
  IN9REC.XGPCD = IN0MM030.XGPCD;
  IN9REC.SY1STNBR = IN0MM030.SY1STNBR;
  IN9REC.SY2CLRID = IN0MM030.SY2CLRID;
  IN9REC.XDMCD = IN0MM030.XDMCD;
  IN9REC.XQACD = IN0MM030.XQACD;
  IN9REC.XSACD = IN0MM030.XSACD;
  IN9REC.XSDCD = IN0MM030.XSDCD;
  IN9REC.XPGCD = IN0MM030.XPGCD;
  IN9REC.XUMCD = IN0MM030.XUMCD;

  IN0MS4Q(); /* use formatter to obtain all invt items*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    return;
  end

  set SYPREC empty;

  SYPREC.XGPCD = IN0MM030.XGPCD;
  SYPREC.SY1STNBR = IN0MM030.SY1STNBR;
  SYPREC.SY2CLRID = IN0MM030.SY2CLRID;
  SYPREC.XDMCD = IN0MM030.XDMCD;
  SYPREC.XQACD = "**";

  IN0MS4A(); /* obtain size scale data*/

  set IN1REC empty;

  IN1REC.XWHCD = IN0MM030.XWHCD;
  IN1REC.XOWCD = IN0MM030.XOWCD;
  IN1REC.XGPCD = IN0MM030.XGPCD;
  IN1REC.SY1STNBR = IN0MM030.SY1STNBR;
  IN1REC.SY2CLRID = IN0MM030.SY2CLRID;
  IN1REC.XDMCD = IN0MM030.XDMCD;
  IN1REC.XQACD = IN0MM030.XQACD;
  IN1REC.XSACD = IN0MM030.XSACD;
  IN1REC.XSDCD = IN0MM030.XSDCD;
  IN1REC.XPGCD = IN0MM030.XPGCD;
  IN1REC.XUMCD = IN0MM030.XUMCD;

  IN0MWIX1 = 1; /* look at each size bucket*/
  IN0MWIX2 = 0; /* total of buckets w/ size data*/

  while (IN0MWIX1 <= 40)
    if (IN9REC.ZZZCHGCT[IN0MWIX1] != 0 /* if invt itm record*/
     || IN9REC.IN1ONHND[IN0MWIX1] != 0 /* if qty > 0*/
     || IN9REC.IN1ALOCD[IN0MWIX1] != 0 
     || IN9REC.IN1STASD[IN0MWIX1] != 0 
     || IN9REC.IN1RSRVD[IN0MWIX1] != 0 
     || IN9REC.IN1XFERO[IN0MWIX1] != 0 
     || IN9REC.IN1XFERI[IN0MWIX1] != 0 
     || IN9REC.IN1EOMOH[IN0MWIX1] != 0 
     || SYPREC.SY4IDDSC[IN0MWIX1] != "     ") /* if valid size*/
      IN0MWIX2 = IN0MWIX2 + 1;
      if (SYPREC.SY4IDDSC[IN0MWIX1] != "     ")
        IN0MM030.SY4IDDSC[IN0MWIX2] = SYPREC.SY4IDDSC[IN0MWIX1];
      else
        IN0MM030.SY4IDDSC[IN0MWIX2] = "*****";
      end
      IN1REC.SY5SZID = IN0MWIX1;
      IN0MS4B(); /* perform 's' call to item table (in1rec)*/
      if (SQLCA.VAGen_SQLCODE == 0)
        IN0MS4C(); /* determine which quantity going to screen*/
      else
        if (SQLCA.VAGen_SQLCODE == +100)
          IN0MM030.IN0MMIFC[IN0MWIX2] = 0;
        else
          return;
        end
      end
    end
    IN0MWIX1 = IN0MWIX1 + 1;
  end

  if (IN0MWIX2 == 0)
     /* ** set input fields dark ***/
    IN0MWIX1 = 1;
    while (IN0MWIX1 <= 40)
      set IN0MM030.IN0MMAQY[IN0MWIX1] skip, invisible;
      IN0MWIX1 = IN0MWIX1 + 1;
    end
    converseLib.validationFailed(67); /* no size descriptions*/
    IN0MW01.IN0MWERS = "Y";
  else
    IN0MWIX1 = IN0MWIX2 + 1;

    IN0MM030.SY4IDDSC[IN0MWIX1] = "TOTAL";

     /* ** set remaining input fields dark ***/

    IN0MWIX1 = IN0MWIX2 + 2;
    while (IN0MWIX1 <= 40)
      set IN0MM030.IN0MMAQY[IN0MWIX1] skip, invisible;
      IN0MWIX1 = IN0MWIX1 + 1;
    end
  end


   /* ************************************************************/
   /* *** end of:  IN0mSE4 - process key changes              ****/
   /* ************************************************************/
end // end IN0MSE4

// save current key value(s)
Function IN0MSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  IN0MW01.XWHCD = IN0MM010.XWHCD;
  IN0MW01.XOWCD = IN0MM010.XOWCD;
  IN0MW01.XGPCD = IN0MM010.XGPCD;
  IN0MW01.SY1STNBR = IN0MM010.SY1STNBR;
  IN0MW01.SY2CLRID = IN0MM010.SY2CLRID;
  IN0MW01.XDMCD = IN0MM010.XDMCD;
  IN0MW01.XQACD = IN0MM010.XQACD;

   /* ************************************************************/
   /* *** end of:  IN0mSF1 - save current key value(s)        ****/
   /* ************************************************************/


end // end IN0MSF1

// save current key value
Function IN0MSF4()
   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/


  IN0MW01.XWHCD = IN0MM030.XWHCD;
  IN0MW01.XOWCD = IN0MM030.XOWCD;
  IN0MW01.IN5TRDCD = IN0MM030.IN5TRDCD;
  IN0MW01.IN0MWTRD = IN0MM030.IN5TRDOC;
  IN0MW01.IN0MWTRS = IN0MM030.IN5TRSUB;
  IN0MW01.XITCD = IN0MM030.XITCD;
  IN0MW01.IN5TRREF = IN0MM030.IN5TRREF;
  IN0MW01.XIRCD = IN0MM030.XIRCD;
  IN0MW01.XIFCD = IN0MM030.XIFCD;
  IN0MW01.XGPCD = IN0MM030.XGPCD;
  IN0MW01.SY1STNBR = IN0MM030.SY1STNBR;
  IN0MW01.SY2CLRID = IN0MM030.SY2CLRID;
  IN0MW01.XDMCD = IN0MM030.XDMCD;
  IN0MW01.XQACD = IN0MM030.XQACD;
  IN0MW01.XSDCD = IN0MM030.XSDCD;
  IN0MW01.XSACD = IN0MM030.XSACD;
  IN0MW01.XPGCD = IN0MM030.XPGCD;
  IN0MW01.XUMCD = IN0MM030.XUMCD;


   /* ************************************************************/
   /* *** end of:  IN0mSF4 - save current key value(s)        ****/
   /* ************************************************************/


end // end IN0MSF4

// add row to the header table
Function IN0MSFF()
   /* *******************************/
   /* add a row to header table*/
   /* *******************************/

   /* remove default to be in sync with new rsrv flag logic 12/22/97*/
   /* MOVE 'Y' TO IN2REC.IN2RSVFL;*/

  IN2REC.ZZ-CHNG-PGM-ID = "IN0M";
  IN2REC.ZZZCHGDT = IN0MW02.IN0MWCDT;
  IN2REC.ZZZCHGTM = IN0MW01.IN0MWHMM;
  IN2REC.ZZZCHGCT = 0;

  call "IO0580" ("A ", SQLCA, IN2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != +0)
    if (SQLCA.VAGen_SQLCODE == -803)
      IN0MW01.IN0MWSES = "Y";
      converseLib.validationFailed(22); /* unable to update - try again*/
    else
      IN0MW01.IN0MWERS = "Y";
      converseLib.validationFailed(8); /* header table error*/
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "IN0M    ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = IN0MW01.IN0MWLOC;
    TA1REC.TA1LOCAT[3] = "IO0580  ";
    TA1REC.TA1LOCAT[4] = "IN0MSFF ";
    TA1REC.TA1MAP = IN0MW01.IN0MWMAP;
    TA1REC.TA1DBASE = "IN2REC  ";
    TA1REC.TA1TBLVU = "VINHDR01";
    TA1TBLKE = IN2REC.IN2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end
end // end IN0MSFF

// data field edits
Function IN0MSO1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & map   ****/
   /* ***       and do not test for modified fields           ****/
   /* ***       re: CSP resets the mdt on every converse      ****/
   /* ************************************************************/


   /* default reservation and dates to those of allocation 12/22/97*/
  IN0MS-CHK-ALLOC-DT();
  if (IN0MM010.IN2ALCFL != IN2REC.IN2ALCFL || 
  TA2REC.TA2GRGGN != IN2REC.IN2DNADT)
    IN0MM010.IN2RSVFL = IN0MM010.IN2ALCFL;
    IN0MM010.IN-DNT-RSRV-XDT = IN0MM010.IN0MMDNA;
  end

  if (IN0MM010.IN-DNT-RSRV-XDT != 0)
    set TA2REC empty;
    set TA2REC01 empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = INRREC08.INR-ENTRY6-DT[INR-SEARCH-SUB];

    if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
      TA2REC01.TA2-GREG-DDMMYY = IN0MM010.IN-DNT-RSRV-XDT;
    else /* Domestic*/
      TA2REC.TA2GRGAN = IN0MM010.IN-DNT-RSRV-XDT;
    end

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD != 0)
      converseLib.validationFailed(18); /* invalid date entered*/
      set IN0MM010.IN-DNT-RSRV-XDT cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  end


  if (IN0MM010.IN2RSVFL != "Y"
   && IN0MM010.IN2RSVFL != "N")
    converseLib.validationFailed(11); /* invalid value*/
    set IN0MM010.IN2RSVFL cursor, bold;
    IN0MW01.IN0MWERS = "Y";
  end


  if (IN0MM010.IN0MMDNA != 0)
    set TA2REC empty;
    set TA2REC01 empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = INRREC08.INR-ENTRY6-DT[INR-SEARCH-SUB];

    if (INRREC08.INR-THEATEROPR-KEY[INR-SEARCH-SUB] == "EU") /* Europe*/
      TA2REC01.TA2-GREG-DDMMYY = IN0MM010.IN0MMDNA;
    else /* Domestic*/
      TA2REC.TA2GRGAN = IN0MM010.IN0MMDNA;
    end

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD != 0)
      converseLib.validationFailed(18); /* invalid date entered*/
      set IN0MM010.IN0MMDNA cursor, bold;
      IN0MW01.IN0MWERS = "Y";
    end
  end


   /* IF IN0MM010.IN2ALCFL NE 'Y'*/
   /* AND IN0MM010.IN2ALCFL NE 'N';*/
   /* MOVE 11 TO EZEMNO;             /* invalid value*/
   /* SET IN0MM010.IN2ALCFL CURSOR,BRIGHT;*/
   /* MOVE 'Y' TO IN0MW01.IN0MWERS;*/
   /* END;*/


   /* ************************************************************/
   /* *** end of:  IN0mso1 - data field edits                 ****/
   /* ************************************************************/


end // end IN0MSO1

// data relational edits
Function IN0MSP1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (IN0MM010.IN2RSVFL == "Y"
   && IN0MM010.IN-DNT-RSRV-XDT != 0)
    converseLib.validationFailed(178); /* exp date not allowed w/resrv flg='n'*/
    set IN0MM010.IN-DNT-RSRV-XDT cursor, bold;
    IN0MW01.IN0MWERS = "Y";
  /* EZERTN;*/
  end

  if (IN0MM010.IN2RSVFL == "N"
   && IN0MM010.IN-DNT-RSRV-XDT == 0)
    converseLib.validationFailed(179); /* exp date req w/resrv flg='n'*/
    set IN0MM010.IN-DNT-RSRV-XDT cursor, bold;
    IN0MW01.IN0MWERS = "Y";
  /* EZERTN;*/
  end

  if (IN0MM010.IN2ALCFL == "Y"
   && IN0MM010.IN0MMDNA != 0)
    converseLib.validationFailed(27); /* exp date not allowed w/alloc flg='n'*/
    set IN0MM010.IN0MMDNA cursor, bold;
    IN0MW01.IN0MWERS = "Y";
  /* EZERTN;*/
  end

  if (IN0MM010.IN2ALCFL == "N"
   && IN0MM010.IN0MMDNA == 0)
    converseLib.validationFailed(28); /* exp date req w/alloc flg='n'*/
    set IN0MM010.IN0MMDNA cursor, bold;
    IN0MW01.IN0MWERS = "Y";
  /* EZERTN;*/
  end

   /* default rsrv flag and date to to those of allocation 12/20/97*/
  if (IN0MW01.IN0MWERS == "N")
    IN0MS-CHK-ALLOC-DT();
    if (IN0MM010.IN2ALCFL != IN2REC.IN2ALCFL || 
    TA2REC.TA2GRGGN != IN2REC.IN2DNADT)
      IN0MM010.IN2RSVFL = IN0MM010.IN2ALCFL;
      IN0MM010.IN-DNT-RSRV-XDT = IN0MM010.IN0MMDNA;
    end
  end

   /* ************************************************************/
   /* *** end of:  IN0mSP1 - data relational edits            ****/
   /* ************************************************************/


end // end IN0MSP1

// relational edits on data input
Function IN0MSP4()

   /* ** in0mwix2 is total number of sizes on screen ***/

   /* ** set remaining fields dark ***/

  IN0MWIX1 = IN0MWIX2 + 2;

  while (IN0MWIX1 <= 40)
    set IN0MM030.IN0MMAQY[IN0MWIX1] skip, invisible;
    IN0MWIX1 = IN0MWIX1 + 1;
  end

   /* ** was any data entered ? ***/

  IN0MWIX1 = 1;
  IN0MW01.IN0MWENT = "N";
  while (IN0MWIX1 <= IN0MWIX2)
    if (IN0MM030.IN0MMAQY[IN0MWIX1] != 0)
      IN0MW01.IN0MWENT = "Y";
      IN0MWIX1 = 99;
    end
    IN0MWIX1 = IN0MWIX1 + 1;
  end

  if (IN0MW01.IN0MWENT == "N")
    converseLib.validationFailed(51); /* no data entered*/
    set IN0MM030.IN0MMAQY[1] cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    return;
  end

   /* ***** does total equal sum of adjqtys ? ******/

  IN0MW01.IN0MWSUM = 0;
  IN0MWIX1 = 1;
  while (IN0MWIX1 <= IN0MWIX2)
    IN0MW01.IN0MWSUM = IN0MW01.IN0MWSUM + IN0MM030.IN0MMAQY[IN0MWIX1];
    IN0MWIX1 = IN0MWIX1 + 1;
  end

  if (IN0MW01.IN0MWSUM != IN0MM030.IN0MMAQY[IN0MWIX1])
    converseLib.validationFailed(36); /* total must = sum of parts*/
    set IN0MM030.IN0MMAQY[IN0MWIX1] cursor, bold;
    IN0MW01.IN0MWERS = "Y";
    return;
  end


  if (IN0MM030.XIFCD == "01"
   && IN0MW01.IN0MWSW1 == "N")
    IN0MWIX1 = 40;
    move IN0MWIX2 to IN0MWIX3 withV60Compat;

    while (IN0MWIX1 >= 1)
      if (IN9REC.IN1ONHND[IN0MWIX1] != 0
       || IN9REC.IN1ALOCD[IN0MWIX1] != 0
       || IN9REC.IN1STASD[IN0MWIX1] != 0
       || IN9REC.IN1RSRVD[IN0MWIX1] != 0
       || IN9REC.IN1XFERO[IN0MWIX1] != 0
       || IN9REC.IN1XFERI[IN0MWIX1] != 0
       || IN9REC.IN1EOMOH[IN0MWIX1] != 0
       || IN9REC.ZZZCHGCT[IN0MWIX1] != 0
       || SYPREC.SY4IDDSC[IN0MWIX1] != "     ")
        if (IN0MM030.IN0MMAQY[IN0MWIX3] != 0)
           /* rest of in1rec key formatted from last call*/
          IN1REC.SY5SZID = IN0MWIX1;
          IN0MS4B(); /* 's ' call to invt item db (in1rec)*/
          if (SQLCA.VAGen_SQLCODE == +100)
            IN1REC.IN1ONHND = 0;
            IN1REC.IN1RSRVD = 0;
            IN1REC.IN1ALOCD = 0;
            IN1REC.IN1STASD = 0;
            IN1REC.IN1XFERO = 0;
            IN1REC.IN1EOMOH = 0;
          end

          if (SQLCA.VAGen_SQLCODE == 0
           || SQLCA.VAGen_SQLCODE == +100)
            if (IN0MM030.IN0MMAQY[IN0MWIX3] < 0)
              IN0MW01.IN0MWAQY = IN0MM030.IN0MMAQY[IN0MWIX3] +               IN1REC.IN1ONHND;
              if (IN0MW01.IN0MWAQY < 0)
                converseLib.validationFailed(81); /* adj qty > invnty qty*/
                IN0MW01.IN0MWERS = "Y";
                set IN0MM030.IN0MMAQY[IN0MWIX3] cursor, bold;
              end
            end
          else
            return;
          end
        end
        IN0MWIX3 = IN0MWIX3 - 1;
      end
      IN0MWIX1 = IN0MWIX1 - 1;
    end
  end

  if (IN0MW01.IN0MWERS == "Y")
    return;
  end

  if (IN0MM030.XIFCD == "01"
   && IN0MW01.IN0MWSW2 == "N")
    IN0MWIX1 = 40;
    move IN0MWIX2 to IN0MWIX3 withV60Compat;

    while (IN0MWIX1 >= 1)
      if (IN9REC.IN1ONHND[IN0MWIX1] != 0
       || IN9REC.IN1ALOCD[IN0MWIX1] != 0
       || IN9REC.IN1STASD[IN0MWIX1] != 0
       || IN9REC.IN1RSRVD[IN0MWIX1] != 0
       || IN9REC.IN1XFERO[IN0MWIX1] != 0
       || IN9REC.IN1XFERI[IN0MWIX1] != 0
       || IN9REC.ZZZCHGCT[IN0MWIX1] != 0
       || SYPREC.SY4IDDSC[IN0MWIX1] != "     ")
        if (IN0MM030.IN0MMAQY[IN0MWIX3] != 0)
           /* rest of in1rec key formatted from last call*/
          IN1REC.SY5SZID = IN0MWIX1;
          IN0MS4B(); /* 's ' call to invt item db (in1rec)*/
          if (SQLCA.VAGen_SQLCODE == +100)
            IN1REC.IN1ONHND = 0;
            IN1REC.IN1RSRVD = 0;
            IN1REC.IN1ALOCD = 0;
            IN1REC.IN1STASD = 0;
            IN1REC.IN1XFERO = 0;
          end

          if (SQLCA.VAGen_SQLCODE == 0
           || SQLCA.VAGen_SQLCODE == +100)
            if (IN0MM030.IN0MMAQY[IN0MWIX3] < 0)
              IN0MW01.IN0MWAQY = IN0MM030.IN0MMAQY[IN0MWIX3] +               IN1REC.IN1ONHND;
              if (IN0MW01.IN0MWAQY >= 0)
                IN0MW01.IN0MWAQY = IN0MM030.IN0MMAQY[IN0MWIX3] * -1;
                IN0MW01.IN0MWAVA = IN1REC.IN1ONHND - IN1REC.IN1RSRVD;
                IN0MW01.IN0MWAVA = IN0MW01.IN0MWAVA - IN1REC.IN1ALOCD;
                IN0MW01.IN0MWAVA = IN0MW01.IN0MWAVA - IN1REC.IN1STASD;
                IN0MW01.IN0MWAVA = IN0MW01.IN0MWAVA - IN1REC.IN1XFERO;
                if (IN0MW01.IN0MWAQY > IN0MW01.IN0MWAVA)
                  converseLib.validationFailed(109); /* adj qty > invnty qty*/
                  IN0MW01.IN0MWERS = "Y";
                  set IN0MM030.IN0MMAQY[IN0MWIX3] cursor, bold;
                end
              end
            end
          else
            return;
          end
        end
        IN0MWIX3 = IN0MWIX3 - 1;
      end
      IN0MWIX1 = IN0MWIX1 - 1;
    end
  end

  if (IN0MW01.IN0MWERS == "Y")
    return;
  end

  if (IN0MM030.XIFCD != "06"
   && IN0MM030.XIFCD != "01"
   && IN0MW01.IN0MWSW3 == "N")
    IN0MWIX1 = 40;
    move IN0MWIX2 to IN0MWIX3 withV60Compat;

    while (IN0MWIX1 >= 1)
      if (IN9REC.IN1ONHND[IN0MWIX1] != 0
       || IN9REC.IN1ALOCD[IN0MWIX1] != 0
       || IN9REC.IN1STASD[IN0MWIX1] != 0
       || IN9REC.IN1RSRVD[IN0MWIX1] != 0
       || IN9REC.IN1XFERO[IN0MWIX1] != 0
       || IN9REC.IN1XFERI[IN0MWIX1] != 0
       || IN9REC.ZZZCHGCT[IN0MWIX1] != 0
       || SYPREC.SY4IDDSC[IN0MWIX1] != "     ")
        if (IN0MM030.IN0MMAQY[IN0MWIX3] != 0)
           /* rest of in1rec key formatted from last call*/
          IN1REC.SY5SZID = IN0MWIX1;
          IN0MS4B(); /* 's ' call to invt item db (in1rec)*/
          if (SQLCA.VAGen_SQLCODE == +100)
            IN1REC.IN1ONHND = 0;
            IN1REC.IN1RSRVD = 0;
            IN1REC.IN1ALOCD = 0;
            IN1REC.IN1STASD = 0;
            IN1REC.IN1XFERO = 0;
          end
          if (SQLCA.VAGen_SQLCODE == 0
           || SQLCA.VAGen_SQLCODE == +100)
            if (IN0MM030.IN0MMAQY[IN0MWIX3] > 0)
              IN0MW01.IN0MWAVA = IN1REC.IN1ONHND - IN1REC.IN1RSRVD;
              IN0MW01.IN0MWAVA = IN0MW01.IN0MWAVA - IN1REC.IN1ALOCD;
              IN0MW01.IN0MWAVA = IN0MW01.IN0MWAVA - IN1REC.IN1STASD;
              IN0MW01.IN0MWAVA = IN0MW01.IN0MWAVA - IN1REC.IN1XFERO;
              if (IN0MW01.IN0MWAQY > IN0MW01.IN0MWAVA)
                converseLib.validationFailed(109); /* adj qty > net inventory*/
                IN0MW01.IN0MWERS = "Y";
                set IN0MM030.IN0MMAQY[IN0MWIX3] cursor, bold;
              end
            end
          else
            return;
          end
        end
        IN0MWIX3 = IN0MWIX3 - 1;
      end
      IN0MWIX1 = IN0MWIX1 - 1;
    end
  end

  if (IN0MW01.IN0MWERS == "Y")
    return;
  end

  if (IN0MM030.XIFCD != "01")
    move IN0MWIX2 to IN0MWIX3 withV60Compat;

    while (IN0MWIX3 >= 1)
      if (IN0MM030.IN0MMAQY[IN0MWIX3] < 0)
        IN0MW01.IN0MWIFC = IN0MM030.IN0MMIFC[IN0MWIX3];
        IN0MW01.IN0MWAQY = IN0MM030.IN0MMAQY[IN0MWIX3];
        IN0MW01.IN0MWNUM = IN0MW01.IN0MWIFC + IN0MW01.IN0MWAQY;
        if (IN0MW01.IN0MWNUM < 0)
          converseLib.validationFailed(61); /* invntry qty cannot be < 0*/
          IN0MW01.IN0MWERS = "Y";
          set IN0MM030.IN0MMAQY[IN0MWIX3] cursor, bold;
          IN0MM030.IN0MMAQY[IN0MWIX3] = IN0MW01.IN0MWIFC;
        end
      end
      IN0MWIX3 = IN0MWIX3 - 1;
    end
  end

  if (IN0MW01.IN0MWERS == "Y")
    return;
  end

   /* Final edit where changed count is saved for IN9060 processing*/

  set INFREC empty;

  IN0MWIX1 = 40;
  move IN0MWIX2 to IN0MWIX3 withV60Compat;

  while (IN0MWIX1 >= 1)

    if (IN9REC.IN1ONHND[IN0MWIX1] != 0
     || IN9REC.IN1ALOCD[IN0MWIX1] != 0
     || IN9REC.IN1STASD[IN0MWIX1] != 0
     || IN9REC.IN1RSRVD[IN0MWIX1] != 0
     || IN9REC.IN1XFERO[IN0MWIX1] != 0
     || IN9REC.IN1XFERI[IN0MWIX1] != 0
     || IN9REC.ZZZCHGCT[IN0MWIX1] != 0
     || SYPREC.SY4IDDSC[IN0MWIX1] != "     ")

      if (IN0MM030.IN0MMAQY[IN0MWIX3] != 0)

        /* IN1REC key already formatted from last call*/
        IN1REC.SY5SZID = IN0MWIX1;

        IN0MS4B(); /* 's ' call to invt item db (in1rec)*/

        if (SQLCA.VAGen_SQLCODE == +100)
          IN1REC.IN1ONHND = 0;
          IN1REC.IN1RSRVD = 0;
          IN1REC.IN1ALOCD = 0;
          IN1REC.IN1STASD = 0;
          IN1REC.IN1XFERO = 0;
        end

        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == +100)

          if (IN0MM030.XIFCD == "01")
            IN0MM030.IN0MMIFC[IN0MWIX3] = IN1REC.IN1ONHND;
            IN1REC.IN1ONHND = IN1REC.IN1ONHND +             IN0MM030.IN0MMAQY[IN0MWIX3];
            if (IN1REC.IN1ONHND < 0)
              converseLib.validationFailed(61); /* invntry qty cannot be < 0*/
              IN0MW01.IN0MWERS = "Y";
              set IN0MM030.IN0MMAQY[IN0MWIX3] cursor, bold;
            end
          end

          if (IN0MM030.XIFCD == "02")
            IN0MM030.IN0MMIFC[IN0MWIX3] = IN1REC.IN1RSRVD;
            IN1REC.IN1RSRVD = IN1REC.IN1RSRVD +             IN0MM030.IN0MMAQY[IN0MWIX3];
            if (IN1REC.IN1RSRVD < 0)
              converseLib.validationFailed(61); /* invntry qty cannot be < 0*/
              IN0MW01.IN0MWERS = "Y";
              set IN0MM030.IN0MMAQY[IN0MWIX3] cursor, bold;
            end
          end

          if (IN0MM030.XIFCD == "03")
            IN0MM030.IN0MMIFC[IN0MWIX3] = IN1REC.IN1ALOCD;
            IN1REC.IN1ALOCD = IN1REC.IN1ALOCD +             IN0MM030.IN0MMAQY[IN0MWIX3];
            if (IN1REC.IN1ALOCD < 0)
              converseLib.validationFailed(61); /* invntry qty cannot be < 0*/
              IN0MW01.IN0MWERS = "Y";
              set IN0MM030.IN0MMAQY[IN0MWIX3] cursor, bold;
            end
          end

          if (IN0MM030.XIFCD == "04")
            IN0MM030.IN0MMIFC[IN0MWIX3] = IN1REC.IN1STASD;
            IN1REC.IN1STASD = IN1REC.IN1STASD +             IN0MM030.IN0MMAQY[IN0MWIX3];
            if (IN1REC.IN1STASD < 0)
              converseLib.validationFailed(61); /* invntry qty cannot be < 0*/
              IN0MW01.IN0MWERS = "Y";
              set IN0MM030.IN0MMAQY[IN0MWIX3] cursor, bold;
            end
          end

          if (IN0MM030.XIFCD == "05")
            IN0MM030.IN0MMIFC[IN0MWIX3] = IN1REC.IN1XFERO;
            IN1REC.IN1XFERO = IN1REC.IN1XFERO +             IN0MM030.IN0MMAQY[IN0MWIX3];
            if (IN1REC.IN1XFERO < 0)
              converseLib.validationFailed(61); /* invntry qty cannot be < 0*/
              IN0MW01.IN0MWERS = "Y";
              set IN0MM030.IN0MMAQY[IN0MWIX3] cursor, bold;
            end
          end

          if (IN0MM030.XIFCD == "06")
            IN0MM030.IN0MMIFC[IN0MWIX3] = IN1REC.IN1XFERI;
            IN1REC.IN1XFERI = IN1REC.IN1XFERI +             IN0MM030.IN0MMAQY[IN0MWIX3];
            if (IN1REC.IN1XFERI < 0)
              converseLib.validationFailed(61); /* invntry qty cannot be < 0*/
              IN0MW01.IN0MWERS = "Y";
              set IN0MM030.IN0MMAQY[IN0MWIX3] cursor, bold;
            end
          end

          if (SQLCA.VAGen_SQLCODE == 0)
            INFREC.ZZ-CHNG-CNT[IN0MWIX1] = IN1REC.ZZZCHGCT;
          end

        else
          return;
        end

      end
      IN0MWIX3 = IN0MWIX3 - 1;

    end
    IN0MWIX1 = IN0MWIX1 - 1;

  end

   /* ************************************************************/
   /* *** end of:  IN0msp4 - data field edits                 ****/
   /* ************************************************************/


end // end IN0MSP4

// blank data input fields
Function IN0MSQ1()
   /* ************************************************************/
   /* *** reset map and working storage area                  ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0MM010 initial;

  IN0MM010.XWHCD = IN0MW01.XWHCD;
  IN0MM010.XOWCD = IN0MW01.XOWCD;
  IN0MM010.XGPCD = IN0MW01.XGPCD;
  IN0MM010.SY1STNBR = IN0MW01.SY1STNBR;
  IN0MM010.SY2CLRID = IN0MW01.SY2CLRID;
  IN0MM010.XDMCD = IN0MW01.XDMCD;
  IN0MM010.XQACD = IN0MW01.XQACD;

  IN0MM010.XXXTITLE = "INVENTORY MAINTENANCE    (QLTY)";
  IN0MM010.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0MM010.XXXRVNBR = IN0MW02.IN0MWRVN;

  set IN0MW01 empty;

   /* ************************************************************/
   /* *** end of:  IN0mSq1 - blank out fields                 ****/
   /* ************************************************************/
end // end IN0MSQ1

// clear map in0mm030
Function IN0MSQ4()
   /* ************************************************************/
   /* *** reset map and working storage area                  ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set IN0MM030 initial;


  IN0MM030.XWHCD = IN0MW01.XWHCD;
  IN0MM030.XOWCD = IN0MW01.XOWCD;
  IN0MM030.IN5TRDCD = IN0MW01.IN5TRDCD;
  IN0MM030.IN5TRDOC = IN0MW01.IN0MWTRD;
  IN0MM030.IN5TRSUB = IN0MW01.IN0MWTRS;
  IN0MM030.XITCD = IN0MW01.XITCD;
  IN0MM030.IN5TRREF = IN0MW01.IN5TRREF;
  IN0MM030.XIRCD = IN0MW01.XIRCD;
  IN0MM030.XIFCD = IN0MW01.XIFCD;
  IN0MM030.XGPCD = IN0MW01.XGPCD;
  IN0MM030.SY1STNBR = IN0MW01.SY1STNBR;
  IN0MM030.SY2CLRID = IN0MW01.SY2CLRID;
  IN0MM030.XDMCD = IN0MW01.XDMCD;
  IN0MM030.XQACD = IN0MW01.XQACD;
  IN0MM030.XSACD = IN0MW01.XSACD;
  IN0MM030.XSDCD = IN0MW01.XSDCD;
  IN0MM030.XPGCD = IN0MW01.XPGCD;
  IN0MM030.XUMCD = IN0MW01.XUMCD;

  IN0MM030.XXXTITLE = "INVENTORY MAINTENANCE    (ITEM)";
  IN0MM030.XXXCURDT = VGVar.currentShortGregorianDate;
  IN0MM030.XXXRVNBR = IN0MW02.IN0MWRVN;

  set IN0MW01 empty;

   /* ************************************************************/
   /* *** end of:  IN0mSq4 - blank out fields                 ****/
   /* ************************************************************/
end // end IN0MSQ4

// enter/pf12 processing
Function IN0MST1()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0MSA1(); /* <=== missing key input edits*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: IN0mWSKS=N; if fields changed (=different key)****/
   /* ************************************************************/

  IN0MSB1(); /* <=== same key edits*/

   /* ************************************************************/
   /* *** if NOT same key fields: exit to go to 130 to re-edit****/
   /* ************************************************************/

  if (IN0MW01.IN0MWSKS == "N")
    return;
  end

   /* ************************************************************/
   /* *** data present: edit individual data fields           ****/
   /* ************************************************************/

  IN0MSO1(); /* <=== data field edits*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** data present: perform relational edits              ****/
   /* ************************************************************/

  IN0MSP1(); /* <=== relational edits*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** end of:  IN0mST1 - ENTER/PF12 edits                 ****/
   /* ************************************************************/
end // end IN0MST1

// enter/pf12 editing
Function IN0MST4()
   /* ************************************************************/
   /* *** check for missing key fields                        ****/
   /* ************************************************************/

  IN0MSA4(); /* <=== missing key input edits*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: IN0mWSKS=N; if fields changed (=different key)****/
   /* ************************************************************/

  IN0MSB4(); /* <=== same key edits*/

   /* ************************************************************/
   /* *** if NOT same key fields: exit to go to 430 to re-edit****/
   /* ************************************************************/

  if (IN0MW01.IN0MWSKS == "N")
    return;
  end

   /* ************************************************************/
   /* *** data present: edit individual data fields           ****/
   /* ************************************************************/

   /* IN0MSO4                         ; <=== data field edits*/

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** data present: perform relational edits              ****/
   /* ************************************************************/

  IN0MSP4(); /* <=== relational edits*/

  if (converseVar.validationMsgNum == 81)
    IN0MW01.IN0MWSW1 = "Y";
  else
    if (converseVar.validationMsgNum == 109)
      if (IN0MM030.XIFCD == "01")
        IN0MW01.IN0MWSW2 = "Y";
      else
        if (IN0MM030.XIFCD != "06")
          IN0MW01.IN0MWSW3 = "Y";
        end
      end
    end
  end

  if (IN0MW01.IN0MWERS == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** end of:  IN0mST4 - ENTER/PF12 edits                 ****/
   /* ************************************************************/
end // end IN0MST4

// Call AV2200 upd av qty subrtn
Function XSAVS-UPD-AV-QTY()
   /* ------------------------------------------------------------------*/
   /* - -       S U B R O U T I N E   D E S C R I P T I O N         - -*/
   /* ------------------------------------------------------------------*/
   /*  */
   /* This subroutine updates availability quantity database based*/
   /* upon the input parameters (AVPREC).  The calling program*/
   /* must check the return code and take appropriate action.*/
   /*  */
   /* Below is a list of all the possible return codes:*/
   /*  */
   /* EZERT8*/
   /* ------*/
   /* '00000000' = Normal Return*/
   /* OTHER      = Unexpected Error Has Occurred*/
   /*  */
   /* AVPREC.AVP-RTN-CD (AV2200 return codes)*/
   /* ----------------------*/
   /* Code    Category    Desciption*/
   /* ----    --------    ----------*/
   /* 00     No error    No errors encountered*/
   /*  */
   /* 10     Warning     No AVQTY records updated due to AVHDR flags*/
   /* 11     Warning     Input ZZ-CHNG-HHMM possibly not populated*/
   /* 12     Warning     Input ZZ-CHNG-PGM-ID not populated*/
   /* 13     Warning     Negative quantity not allowed*/
   /* 14     Warning     Input Chng-qty (1-40) not populated*/
   /*  */
   /* 71     Serious     AVHDR not found*/
   /* 72     Serious     AVQTY not found*/
   /* 80     Serious     DB2 deadlock (see ERRDIAG and SQLCA)*/
   /* 81     Serious     Unexpected error (see ERRDIAG and SQLCA)*/
   /* 97     Serious     Input ZZ fields not properly populated*/
   /* 98     Serious     Invalid AV2200 process code*/
   /* 99     Serious     Intervening update to availibility db,*/
   /* ZZ-CHNG-CNT has been updated*/

  try
    call "AV2200" (AVPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Call subroutine*/

   /* ------------------------------------------------------------------*/
   /* If successful call, check AV2200 return code.*/
   /* Otherwise, an unexpected error has occurred, call TA0020.*/
   /* ------------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    /* ------------------------------------------------------------------*/
    /* If the return code category is 'Warning' or a DB2 deadlock,*/
    /* return to previous process/statement group.*/
    /* ------------------------------------------------------------------*/

    if (AVPREC.AVP-RTN-CD >= "00"
     && AVPREC.AVP-RTN-CD <= "19") /* if warning return codes*/
      return;
    end

    if (AVPREC.AVP-RTN-CD == "71"
     || AVPREC.AVP-RTN-CD == "72") /* if av hdr or av qty not found*/
      return;
    end

    if (AVPREC.AVP-RTN-CD == "80") /* if db2 deadlock*/
      return;
    end

    /* ------------------------------------------------------------------*/
    /* When the return code is 'Serious', call TA0020.*/
    /* ------------------------------------------------------------------*/

    TA1REC.TA1-GROUP = AVPREC.TA1-GROUP;
    TAEREC.SQLCAREC = AVPREC.SQLCAREC;

    /* ------------------------------------------------------------------*/
    /* When DB2 error, roll back any update done in AV2200.*/
    /* ------------------------------------------------------------------*/

    if (AVPREC.AVP-RTN-CD >= "81"
     && AVPREC.AVP-RTN-CD <= "89") /* DB2 error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
    end

  else
    TA1REC.TA1TYPE = "APPL"; /* Error type*/
    TA1REC.TA1FUNC = "RETN"; /* Error function*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP error code*/
    TAEREC.TAEDESC1 = "ERROR OCCURRED-BAD CSP CALL TO AV2200"; /* Error message*/
    TAEREC.TAEDESC2 = AVPREC.AVP-GROUP;
                                   /* Called subr. parms*/
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  COMMAREA.CAMSG = "FATAL ERROR OCCURRED IN AVAILABILITY UPD SUBROUTINE";

  exit stack;
end // end XSAVS-UPD-AV-QTY

//*** RECORD=AVPREC ****
// ****** ALLOCATE/RESERVE UPDATE SUBROUTINE PARAMETERS *******
// 
// This record contains data fields that are passed between the
// calling application and program AV2200 - Availability System
// Allocate/Reserve Update Subroutine.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/05/93  SPOPA   New record.
// **********************
Record AVPREC type basicRecord
  5 AVP-GROUP AVP-GROUP ; 
    10 AVP-PROC-CD AVP-PROC-CD ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    10 XDM-DIM-CD XDM-DIM-CD ; 
    10 XQA-QUAL-CD XQA-QUAL-CD ; 
    10 XOW-OWN-GRP-CD XOW-OWN-GRP-CD ; 
    10 XUM-UOM-CD XUM-UOM-CD ; 
    10 AVP-CHNG-QTY AVP-CHNG-QTY [40] ; 
    10 ZZ-CHNG-PGM-ID ZZ-CHNG-PGM-ID ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 AVP-RTN-CD AVP-RTN-CD ; 
    10 TA1-GROUP TA1-GROUP ; 
    10 SQLCAREC SQLCAREC ; 
    10 * char(2013) ; 
end // end AVPREC

//*** RECORD=IN0MW01 ****
// ************************************************************
// These are the standard working storage fields for trans in0m
// 
// maint history
// -------------
//  rev#   date   init   remarks
// ----- -------- ----   --------------------------------------
// fix   05/09/88 jbc    check whse tbl for s/l flag
// IN223 12/16/92 dannan added elementary fields for time to
//                       contain hour & minute, IN0MWHMM,
//                       and to contain seconds, IN0MWSSS.
// in257 01/19/94 dannan Changed IN0MWTRD & IN0MWDOC to be a
//                       length of 9 instead of 8 to allow for
//                       a 9 digit order number to be entered
//                       as the audit tran document number.
// ************************************************************
// ***********************
Record IN0MW01 type basicRecord
  10 IN0MWERS IN0MWERS ; 
  10 IN0MWSES IN0MWSES ; 
  10 IN0MWSW1 IN0MWSW1 ; 
  10 IN0MWSW2 IN0MWSW2 ; 
  10 IN0MWSW3 IN0MWSW3 ; 
  10 IN0MWTIM IN0MWTIM ; 
    15 IN0MWHMM IN0MWHMM ; 
    15 IN0MWSSS IN0MWSSS ; 
  10 IN0MWLCY IN0MWLCY ; 
  10 IN0MWSYR IN0MWSYR ; 
    15 IN0MWCCC IN0MWCCC ; 
    15 IN0MWYYY IN0MWYYY ; 
  10 IN0MWENT IN0MWENT ; 
  10 IN0MWOGF IN0MWOGF ; 
  10 IN0MWSHP IN0MWSHP ; 
  10 IN0MW-GPC-VALID-FL IN0MW-GPC-VALID-FL ; 
  10 IN0MWPWH IN0MWPWH ; 
  10 IN0MWHDR IN0MWHDR ; 
  10 IN0MWIFV IN0MWIFV ; 
  10 IN0MWSKS IN0MWSKS ; 
  10 IN0MWRVN IN0MWRVN ; 
  10 IN0MWSUM IN0MWSUM ; 
  10 IN0MWNUM IN0MWNUM ; 
  10 IN0MWIFC IN0MWIFC ; 
  10 IN0MWAQY IN0MWAQY ; 
  10 IN0MWAVA IN0MWAVA ; 
  10 IN0MWDOC IN0MWDOC ; 
    15 IN0MWDFT IN0MWDFT ; 
    15 IN0MWDLT IN0MWDLT ; 
  10 IN0MWIX1 IN0MWIX1 ; 
  10 IN0MWIX2 IN0MWIX2 ; 
  10 IN0MWIX3 IN0MWIX3 ; 
  10 IN0MWLOC IN0MWLOC ; 
  10 IN0MWMAP IN0MWMAP ; 
  10 IN0MWTRT IN0MWTRT ; 
  10 XWHCD XWHCD ; 
  10 XWHSTKLF XWHSTKLF ; 
  10 XOWCD XOWCD ; 
  10 IN0MWTRD IN0MWTRD ; 
  10 IN5TRDCD IN5TRDCD ; 
  10 IN0MWTRS IN0MWTRS ; 
  10 XITCD XITCD ; 
  10 IN5TRREF IN5TRREF ; 
  10 XIRCD XIRCD ; 
  10 XIFCD XIFCD ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XSDCD XSDCD ; 
  10 XSACD XSACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XIGCD XIGCD ; 
end // end IN0MW01

Record IN0MW02 type basicRecord
  10 IN0MWCDT IN0MWCDT ; 
  10 IN0MWRVN IN0MWRVN ; 
end // end IN0MW02

//*** RECORD=INPREC ****
// ************ inventory formatter pass record ***************
// 
// PUROSE:              sends requested key (w/ any wild cards)
//                      and desired function code.
// 
// DB2 TABLE:           dvint.vinitm01 (key only)
// 
// COPYLIB MEMBER:      dcl00087 (reference only)
//                      wdbinszp
// 
// KEY TO DB2 TABLE:    xwhcd
//                      xowcd
//                      xgpcd
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      xqacd
//                      xsdcd
//                      xsacd
//                      xpgcd
//                      xumcd
//                      function code
// 
// NOTES:               function codes:
//                      s  = select item
//                      ss = select set
//                      sn = select next
//                      cs = close scan
//                      sa = select alt
//                      fa = fetch alt
//                      ca = close alt
//                           * alt = owner group wild card
// 
// MAINTENANCE LOG:
// 
// DATE:      INIT:    COMMENTS:
// --------   ------   -------------------------------------
// 09-29-86   wnj      created csp record
// ************************************************************
// **********************
Record INPREC type basicRecord
  5 INPDATA INPDATA ; 
    10 INPKEY INPKEY ; 
      15 XWHCD XWHCD ; 
      15 XOWCD XOWCD ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XSDCD XSDCD ; 
      15 XSACD XSACD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
    10 INPFC INPFC ; 
end // end INPREC

DataItem AVP-CHNG-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AV2201-PARAMETERS
DataItem AVP-GROUP char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AV2201-PROC-CD
DataItem AVP-PROC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AV2201-RTN-CD
DataItem AVP-RTN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid gpc-cd flag
DataItem IN0MW-GPC-VALID-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric work field
DataItem IN0MWAQY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field
DataItem IN0MWAVA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem IN0MWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (ccYYMMDD)
DataItem IN0MWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first part of doc field
DataItem IN0MWDFT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last part of doc field
DataItem IN0MWDLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work document number field
DataItem IN0MWDOC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data entered flag
DataItem IN0MWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general error switch
DataItem IN0MWERS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header add flag
DataItem IN0MWHDR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work time hhmm
DataItem IN0MWHMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field
DataItem IN0MWIFC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// internal function variable
DataItem IN0MWIFV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'while' counter
DataItem IN0MWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'total number' counter
DataItem IN0MWIX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work counter
DataItem IN0MWIX3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work life cycle
DataItem IN0MWLCY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stmt grp. or process
DataItem IN0MWLOC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current map in process
DataItem IN0MWMAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric work field
DataItem IN0MWNUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// owner group flag
DataItem IN0MWOGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parent whse
DataItem IN0MWPWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application revision no.
DataItem IN0MWRVN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update error switch
DataItem IN0MWSES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shippability flag
DataItem IN0MWSHP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// same key (=y) switch
DataItem IN0MWSKS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work time seconds
DataItem IN0MWSSS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum quantities in in0mso4
DataItem IN0MWSUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// err 81 switch
DataItem IN0MWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err 53 switch
DataItem IN0MWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err 109 switch
DataItem IN0MWSW3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year group
DataItem IN0MWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work time of day
DataItem IN0MWTIM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// audit tran doc nbr
DataItem IN0MWTRD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// audit tran doc sub
DataItem IN0MWTRS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// audit tran time
DataItem IN0MWTRT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem IN0MWYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatter pass area
DataItem INPDATA char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatter function code
DataItem INPFC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item key
DataItem INPKEY char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

