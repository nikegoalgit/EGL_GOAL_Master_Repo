package fg0o;

import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom3.XPFF001;
import corpcom4.XSFFS01;
import corpcom4.XSFFS35;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XGPCD;
import corpx1.XPLTBL;
import corpx2.XPLCD;
import corpx2.XPLKEY;
import corpx2.XPLSDESC;
import ff.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FG0O ****
// This application will display a list of lines associated
// with line descriptions and index flags. the user has to
// enter the range. if the historical b-grade/closeout
// indicators have been set for that specified range, the flags
// for those lines will be 'y'.
// 
// The user can go into any b-grade and closeout maintenance
// screen by putting an 's' next to the line he wants to review
// and pressing 'enter'.
// 
// The user may scroll forward and backward to view all line
// codes by pressing pf7 and pf8. he may also exit to any
// allowed application via fast path or pf key.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          07/14/89  jjuch   New application.
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FFAREC FFAREC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  FG0OW00 FG0OW00; // record
  FG0OW01 FG0OW01; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use FG0OM.FG0OM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FG0OM001 initial; /* M001 input/output*/
    set FG0OW00 empty; /* Working storage*/
    set FG0OW01 empty; /* M001 display storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA2REC empty; /* date parameters*/

    FG0OW00.FG0OWSWF = "Y"; /* Format the map switch*/

    FG0OW00.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    FG0OW01.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning month*/
    FG0OW01.FFZEYYMM = FFWREC.FFAENDMO; /* Ending month*/

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.XPLCD = " "; /* Clear product line code*/
    FFWREC.XPLABRV = " "; /* Clear product line abrv*/
    FFWREC.YPGCD = " "; /* Clear type group code*/
    FFWREC.YPGABRV = " "; /* Clear type group abrv*/
    FFWREC.XPCCD = " "; /* Clear product category code*/
    FFWREC.XPCABRV = " "; /* Clear product category abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/
    FFWREC.YSMXDV = " "; /* Clear division group code*/
    FFWREC.YSMSMDSC = " "; /* Clear division group abrv*/

    if (FFWREC.FFABEGMO > 0 /* Range passed from other application*/
     && FFWREC.FFAENDMO > 0)

      FG0OW00.FG0OWSWR = "Y"; /* Request for data switch*/

    else

      FG0OW00.FG0OWSWR = "N"; /* Request for data switch*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0O001; /* Converse the main process*/


    FG0O001: FG0O001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0O001; /* Converse the main process*/


  end // end main
end // end FG0O

// Main process to display a map
Function FG0O001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0O100(); /* Obtain the data to display*/

  FG0O200(); /* Format and display the map*/

  FG0O300(); /* Check attention identifier*/

  FG0O400(); /* Reset fields to normal intensity*/

  FG0O500(); /* Verify the entered data*/

  FG0O600(); /* Process valid input request*/


end // end FG0O001

// Obtain the data to display
Function FG0O100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0OW00.FG0OWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  FG0O110(); /* Build up the temporary storage*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0OW00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FG0OW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0OW00.FG0OWSWR = "N"; /* Request for data switch*/


end // end FG0O100

// Build up the temporary storage
Function FG0O110()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FG0OW00.XXXTSLEN = 268; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FG0O111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* save the search information in map display storage area.*/
   /* ------------------------------------------------------------*/

  FG0OW01.FFZBEGMO = FFWREC.FFABEGMO; /* beginning month*/
  FG0OW01.FFZENDMO = FFWREC.FFAENDMO; /* ending month*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FG0O112(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  FG0OW00.FG0OWIXM = 1; /* initialize line index*/

  while (FG0OW00.FG0OWSWC == "N") /* Until end of cursor*/

    FG0O113(); /* Fetch selected rows*/
    FG0O114(); /* Fetch b-grade & closeout indicator*/
    FG0OW00.FG0OWIXM = FG0OW00.FG0OWIXM + 1; /* increment line index*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (FG0OW00.FG0OWIXM > 16) /* Page is full*/
      FG0O115(); /* Add page to temporary storage*/
    end

  end

  FG0OW00.FG0OWIXM = FG0OW00.FG0OWIXM - 1; /* decrement line index*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0OW00.FG0OWIXM >= 1) /* Page was formatted*/
    FG0O115(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FG0O116(); /* Close the selected set cursor*/

end // end FG0O110

// Purge any temporary storage
Function FG0O111()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FG0OW01 empty; /* M001 display storage*/

  FG0OW00.FG0OWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0OW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FG0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0O111

// Select set and open cursor
Function FG0O112()
   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  FG0OW00.FG0OWIXM = 1; /* Display line index*/
  FG0OW00.FG0OWSWC = "N"; /* End of cursor switch*/

  set FF2REC empty; /* clear row storage area*/

  FF2REC.YPGCD = "*"; /* type group code*/
  FF2REC.YSMXDV = "10"; /* division group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0O112

// Fetch next row in the cursor
Function FG0O113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0OS02(); /* Save in display storage*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FG0OW00.FG0OWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0O113

// Fetch b-grd & clsout indicator
Function FG0O114()
   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicate the key fields.*/
   /* ------------------------------------------------------------*/

  set FFAREC empty; /* Clear row storage area*/

  FFAREC.FFABEGMO = FG0OW01.FFZBEGMO; /* Beginning month*/
  FFAREC.FFAENDMO = FG0OW01.FFZENDMO; /* Ending month*/
  FFAREC.XPLCD = FG0OW01.XPLCD[FG0OWIXM]; /* line code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3780" ("S ", SQLCA, FFAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* IF SUCCESSFUL, RETURN TO THE PREVIOUS PROCESS.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      if (FFAREC.FFABCIND != " ") /* Indicator exist*/
        FG0OW01.FFABCIND[FG0OWIXM] = "Y"; /* indicator*/
      end

      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLINE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0O114

// Add page to temporary storage
Function FG0O115()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0OW01.XXXTSLEN = FG0OW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (FG0OW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (FG0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FG0OW01 empty; /* M001 display storage*/

    /* ---------------------------------------------------------*/
     /* Save the search information in map display storage queue*/
    /* ---------------------------------------------------------*/
    FG0OW01.FFZBYYMM = FG0OM001.FFZBYYMM; /* Beginning month*/
    FG0OW01.FFZEYYMM = FG0OM001.FFZEYYMM; /* Ending month*/

    FG0OW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FG0OW00.FG0OWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0O115

// Close selected set cursor
Function FG0O116()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0O116

// Format and converse the map
Function FG0O200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0OW00.FG0OWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FG0OW00.FG0OWSWF == "Y") /* Map must be formatted*/
      FG0O210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH and map*/
   /* information.*/
   /* ------------------------------------------------------------*/

  FG0OM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0OM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0OM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FG0OM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FG0OM001 alarm; /* Indicate sound alarm*/

  end

  converse FG0OM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "   "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FG0OM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0OM001.CAITEM; /* Application data*/


end // end FG0O200

// Format the display data
Function FG0O210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FG0OM001 initial; /* M001 input/output area*/

  FG0OM001.FFZBYYMM = FG0OW01.FFZBYYMM; /* beginning month*/
  FG0OM001.FFZEYYMM = FG0OW01.FFZEYYMM; /* ending month*/

  FG0OW00.FG0OWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FG0OW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FG0OW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FG0OW00.XXXTSPAG > FG0OW00.TA5TSQIX) /* Desired greater highest*/
        FG0OW00.XXXTSPAG = FG0OW00.TA5TSQIX; /* Default to highest*/
      end

      FG0OS04(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    FG0OM001.FFZBYYMM = FG0OW01.FFZBYYMM; /* beginning month*/
    FG0OM001.FFZEYYMM = FG0OW01.FFZEYYMM; /* ending month*/

    set FG0OM001.XXXLITPG skip; /* "PAGE" literal*/
    set FG0OM001.XXXLITOF skip; /* "OF" literal*/
    FG0OM001.XXXTSPAG = FG0OW00.XXXTSPAG; /* Current page*/
    FG0OM001.TA5TSQIX = FG0OW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/


  FG0OW00.FG0OWIXM = 1; /* Initialize line index*/

  while (FG0OW00.FG0OWIXM <= 16 /* Until screen is full*/
   && FG0OW01.XPLCD[FG0OWIXM] > " ") /* or end of data*/

    if (FG0OW00.FG0OWIXM == 1) /* First select field*/

      set FG0OM001.FG0OMSEL[FG0OWIXM] cursor, normal; /* Position cursor*/
    else
      set FG0OM001.FG0OMSEL[FG0OWIXM] normal; /* Unprotect*/

    end

    FG0OM001.XPLCD[FG0OWIXM] = FG0OW01.XPLCD[FG0OWIXM];
    FG0OM001.XPLSDESC[FG0OWIXM] = FG0OW01.XPLSDESC[FG0OWIXM];
    FG0OM001.FG0OMSEL[FG0OWIXM] = FG0OW01.FG0OMSEL[FG0OWIXM];
    FG0OM001.FFABCIND[FG0OWIXM] = FG0OW01.FFABCIND[FG0OWIXM];

    FG0OW00.FG0OWIXM = FG0OW00.FG0OWIXM + 1; /* Increment line index*/

  end


end // end FG0O210

// Check attention identifier
Function FG0O300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FG0OW00.FG0OWSWR == "Y") /* Request for data*/
      set FG0OW01 empty; /* M001 display storage*/
    end

    FG0OW00.FG0OWSWF = "Y"; /* Format the map switch*/
    FG0OW00.FG0OWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0OM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FG0O111(); /* Purge temporary storage*/

      XSFFS01(); /* Exit to another application*/

      set FG0OM001.CATOAP cursor, bold; /* Highlight*/

      FG0OW00.FG0OWSWF = "Y"; /* Format the map switch*/
      FG0OW00.FG0OWSWR = "N"; /* Request for data switch*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0OM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end

    FG0O111(); /* Purge temporary storage*/

    XSFFS01(); /* Exit to another application*/

    FG0OW00.FG0OWSWF = "Y"; /* Format the map switch*/
    FG0OW00.FG0OWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end FG0O300

// Reset highlighted fields
Function FG0O400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set FG0OM001.FFZBYYMM normal; /* reset beginning month*/
  set FG0OM001.FFZEYYMM normal; /* reset ending month*/

  FG0OW00.FG0OWIXM = 1; /* Initialize line index*/

  while (FG0OW00.FG0OWIXM <= 16 /* Until end of lines*/
   && FG0OM001.XPLCD[FG0OWIXM] > " ") /* or end of display*/

    set FG0OM001.FG0OMSEL[FG0OWIXM] normal; /* Reset select flag*/

    FG0OW00.FG0OWIXM = FG0OW00.FG0OWIXM + 1; /* Increment line index*/

  end

  set FG0OM001.CATOAP initialAttributes; /* TO application*/
  set FG0OM001.CAITEM initialAttributes; /* Application data*/


end // end FG0O400

// Verify the entered data
Function FG0O500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FG0OM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0OM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FG0O510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data on the top*/
     /* and data in the line.*/
    /* ------------------------------------------------------------*/

    if (FG0OW00.TA5TSQIX > 0) /* Page was formatted*/

      FG0OW00.FG0OWIXM = 16; /* Initialize line index*/

      while (FG0OW00.FG0OWIXM >= 1) /* Until end of page*/

        if (FG0OM001.XPLCD[FG0OWIXM] != " ") /* or end of product lines*/

          FG0O520(); /* Verify data in the line*/

        end

        FG0OW00.FG0OWIXM = FG0OW00.FG0OWIXM - 1; /* Decrement line number*/

      end

    end

    FG0O530(); /* verify data on the top*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FG0O500

// Verify scroll request
Function FG0O510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0OW00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0OW00.XXXTSPAG >= FG0OW00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FG0OW00.FG0OWIXM = 16; /* Initialize line index*/

  while (FG0OW00.FG0OWIXM > 0) /* Until end of lines*/

    if (FG0OM001.FG0OMSEL[FG0OWIXM] != FG0OW01.FG0OMSEL[FG0OWIXM])

      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FG0OM001.FG0OMSEL[FG0OWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Modifications not allowed*/

    end

    FG0OW00.FG0OWIXM = FG0OW00.FG0OWIXM - 1; /* Decrement line number*/

  end

  if (FG0OM001.FFZEYYMM != FG0OW01.FFZEYYMM) /* ending month changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0OM001.FFZEYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG0OM001.FFZBYYMM != FG0OW01.FFZBYYMM) /* beginning month changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0OM001.FFZBYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end


end // end FG0O510

// Verify data in the line
Function FG0O520()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (FG0OM001.FG0OMSEL[FG0OWIXM] != " " /* select field is not a ' '*/
   && FG0OM001.FG0OMSEL[FG0OWIXM] != "S") /* and is not a "S"*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FG0OM001.FG0OMSEL[FG0OWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(41); /* Indicate only "S" may be used*/

  end

  FG0OW00.FG0OWIND = FG0OW00.FG0OWIXM - 1;

  while (FG0OW00.FG0OWIND >= 1)

    if (FG0OM001.FG0OMSEL[FG0OWIND] > " " /* Invalid value or 'S'*/
     && FG0OM001.FG0OMSEL[FG0OWIXM] > " ")

      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FG0OM001.FG0OMSEL[FG0OWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(136); /* Indicate more than one line selected*/

    end

    FG0OW00.FG0OWIND = FG0OW00.FG0OWIND - 1; /* Decrement the index*/

  end

   /* ------------------------------------------------------------*/
   /* if one line was selected, it is not allowed to change the*/
   /* key fields.*/
   /* ------------------------------------------------------------*/

  if (FG0OM001.FG0OMSEL[FG0OWIXM] == "S")

    if (FG0OM001.FFZEYYMM != FG0OW01.FFZEYYMM) /* Beginning month changed*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FG0OM001.FFZEYYMM cursor, bold; /* Highlight*/
      converseLib.validationFailed(130); /* Indicate Change is not allowed*/

    end

    if (FG0OM001.FFZBYYMM != FG0OW01.FFZBYYMM) /* Beginning month changed*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FG0OM001.FFZBYYMM cursor, bold; /* Highlight*/
      converseLib.validationFailed(130); /* Indicate Change is not allowed*/

    end

  end
end // end FG0O520

// Verify data on th top
Function FG0O530()
   /* ------------------------------------------------------------*/
   /* The beginning month must be greater than the current month*/
   /* and less than or equal to the current plus 30 month*/
   /* The ending month must be greater than or equal to the*/
   /* beginning month, not greater than the beginning plus 11*/
   /* month and not greater than the current plus 30 months.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Clear storage row*/

  FFZREC.FFZBYYMM = FG0OM001.FFZBYYMM; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0OM001.FFZEYYMM; /* Ending month*/
  FFZREC.FFZMONTH = 6; /* Number of month*/

  XSFFS35(); /* Verify the range*/

  if (FFZREC.FFZENDRC != "0") /* Check error code*/
    FFWREC.XXXMODID = "530"; /* Module identification*/

    set FG0OM001.FFZEYYMM cursor, bold; /* Hightlight*/

    if (FFZREC.FFZENDRC == "1") /* No ending month entered*/

      converseLib.validationFailed(8); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZENDRC == "2") /* Invalid ending month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZENDRC == "3") /* Ending month out of range*/

      converseLib.validationFailed(151); /* Indicate invalid date entered*/

    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Check error code*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FG0OM001.FFZBYYMM cursor, bold; /* hightlight*/

    if (FFZREC.FFZBEGRC == "1") /* No beginning month entered*/

      converseLib.validationFailed(8); /* Indicate required field*/

    end

    if (FFZREC.FFZBEGRC == "2") /* Invalid beginning month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZBEGRC == "3") /* Beginning month out of range*/

      converseLib.validationFailed(151); /* Indicate invalid date entered*/

    end

  end

  if (converseVar.validationMsgNum == 0)

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Save converted dates into*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* commarea record*/

  end

end // end FG0O530

// Process valid input request
Function FG0O600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FG0OW00.FG0OWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FG0OW00.XXXTSPAG = FG0OW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FG0OW00.XXXTSPAG = FG0OW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (FG0OM001.FFZBYYMM != FG0OW01.FFZBYYMM /* Beginning month changed*/
   || FG0OM001.FFZEYYMM != FG0OW01.FFZEYYMM) /* or ending month changed*/

    FG0OW01.FFZBEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FG0OW01.FFZENDMO = FFZREC.FFZENDMO; /* ending month*/


    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
    /* ------------------------------------------------------------*/

    if (FG0OM001.FFZBYYMM > 0 /* beginning month was entered*/
     && FG0OM001.FFZEYYMM > 0) /* ending month was entered*/
      FG0OW00.FG0OWSWR = "Y"; /* Request for data switch*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields and transfer*/
   /* to the maintain b-grade & closeout index application.*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0OM001.FG0OMSEL) /* Line was selected*/

    FFWREC.XPLCD = FG0OM001.XPLCD[sysVar.arrayIndex]; /* Line code*/
    if (FFWREC.XPLCD in XPLTBL.XPLCD)
      FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
    end
    FFWREC.FFABEGMO = FG0OW01.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FG0OW01.FFZENDMO; /* ending month*/

    COMMAREA.CATOAP = "FG0Y"; /* set index application*/

    XSFFS01();

    set FG0OM001.FG0OMSEL[sysVar.arrayIndex] cursor, bold; /* highlight*/

    FG0OW00.FG0OWSWF = "Y"; /* format the map switch*/
    FG0OW00.FG0OWSWR = "N"; /* request for data switch*/

  end


end // end FG0O600

// Save data in display storage
Function FG0OS02()

   /* ------------------------------------------------------------*/
   /* Save the line to be displayed in the display storage area.*/
   /* ------------------------------------------------------------*/

  FG0OW01.XPLCD[FG0OWIXM] = FF2REC.XPLCD; /* Line code*/
  FG0OW01.XPLSDESC[FG0OWIXM] = "************"; /* Inititalize desc.*/
  FG0OW00.XPLCD = FF2REC.XPLCD;

  if (FG0OW00.XPLKEY in XPLTBL.XPLKEY /* code is in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG0OW01.XPLSDESC[FG0OWIXM] = XPLTBL.XPLSDESC[sysVar.arrayIndex];

  end

end // end FG0OS02

// Read temporary storage page
Function FG0OS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FG0OW01.XXXTSLEN = FG0OW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FG0OW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0OS04

//*** RECORD=FG0OW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0OW00 type basicRecord
  10 FG0OWIXM FG0OWIXM ; 
  10 FG0OWSWC FG0OWSWC ; 
  10 FG0OWSWF FG0OWSWF ; 
  10 FG0OWSWR FG0OWSWR ; 
  10 FG0OWIND FG0OWIND ; 
  10 FG0OWSWU FG0OWSWU ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XPLKEY XPLKEY ; 
    15 XPLCD XPLCD ; 
    15 XGPCD XGPCD ; 
end // end FG0OW00

//*** RECORD=FG0OW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0OW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(268) ; 
    10 FFZBEGMO FFZBEGMO ; 
      15 FFZBCC FFZBCC ; 
      15 FFZBYYMM FFZBYYMM ; 
    10 FFZENDMO FFZENDMO ; 
      15 FFZECC FFZECC ; 
      15 FFZEYYMM FFZEYYMM ; 
    10 XPLCD XPLCD [16] ; 
    10 XPLSDESC XPLSDESC [16] ; 
    10 FG0OMSEL FG0OMSEL [16] ; 
    10 FFABCIND FFABCIND [16] ; 
end // end FG0OW01

// Line selection indicator
DataItem FG0OMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection index
DataItem FG0OWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem FG0OWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FG0OWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0OWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0OWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FG0OWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

