package fg0k;

import corpcom1.CACHGFL;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXQA01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS-FF5500;
import corpcom4.XSFFS-FF5550;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS30;
import corpcom4.XSFFS51;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XLCABRV;
import corpx1.XLCCD;
import corpx1.XLCTBL;
import corpx1.XPLTBL;
import corpx1.XQATBL;
import corpx2.XPLCD;
import corpx2.XPLSDESC;
import corpx2.XQAABRV;
import corpx2.XQACD;
import corpy2.YPGTBL;
import ff.common.*;
import fh.common.FH3REC;
import fh.common.FH4REC;
import fh.common.FHAREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0K ****
// This application allows a user to inquire the monthly long
// range sales forecast by product line for a given range of
// months. The required range could be any period of time, past
// current or future. The user may inquire the forecast by type
// group, quality, life cycle, and either by need month or ship
// month.  These fields will default to inline, 1st quality
// code, active life cycle, 01, and "N" need month.
// 
// All quanitites on the screen are in thousands.
// 
// The user can specify the number of months in the season and
// he has the flexibility to view 4 months, or 6 month seasons
// with varying subtotals.
// 
// The user may use appropriate attention key to scroll the
// screen backwards, forwards, left and right.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/01/90  RGILLI  New application.
// FF#134   08/21/90  SFORD   Set job completed msg flag = 'y'
// FF1073   03/31/91  JJUCH   Consider b-grade closeout product
//                            as b-grade product.
//          04/30/91  JJUCH   Allow wild card for div grp code.
// Fix      06/06/91  JJUCH   Break down the b-grade, closeout
//                            fcst by line into in-line and
//                            makeup for the future month.
// FFMAINT  02/21/92  LDELUH  Remove sales region logic.
// FF1111   04/02/92  JJUCH   chng to allow varying len season
// FF1110   07/20/92  JJUCH   Chng to only allow life cyc '10'
//                            and '20'.
// FF394    03/23/93  JJUCH   Change to send report to BUNDLE.
// FF367    03/29/93  JJUCH   Change to accommodate the NIL
//                            manage region process
//          09/10/93  JJUCH   Convert to CSP V4.1 version.
// FF409    03/21/94  MWALKE  Enhancement for dmnd based sales.
//                            Deleted crty cd and desc, and sum
//                            division group cd and desc.
//                            Deleted print function.
//                            Added need/ship month indicator.
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF5REC FF5REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0KW00 FG0KW00; // record
  FG0KW01 FG0KW01; // record
  FG0KW02 FG0KW02; // record
  FG0KW03 FG0KW03; // record
  FH3REC FH3REC; // record
  FH4REC FH4REC; // record
  FHAREC FHAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL; // table
  use YPGTBL; // table
  use XLCTBL; // table
  use XQATBL; // table
  use FG0KM.FG0KM001, // form
  		FG0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty; /* Special function parameters*/
    set FG0KM001 initial; /* M001 input/output*/
    set FG0KW00 empty; /* Working storage*/
    set FG0KW01 empty; /* M001 display storage*/
    set FG0KW02 empty; /* M001 temporary storage*/
    set FG0KW03 empty; /* M001 totals display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set TA6REC empty; /* jcl submit work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0KW00.XXXTSLEN = 1967; /* temp storage length*/
    ;
    FG0KW00.FG0KWSNX = 1; /* season index*/
    FG0KW00.FG0KWPGX = 1; /* page index*/
    FG0KW00.XXXTSPAG = 1; /* page number*/
    FG0KW00.FG0KWSWR = "N"; /* Request for data switch*/
    FG0KW00.FG0KWSWF = "Y"; /* format screen data switch*/
    FG0KW00.FG0KWSWD = "1"; /* map switch*/
    FG0KW00.FG0KW-NEXT = "N"; /* next season flag*/
    move "N" to FG0KW00.FG0KW-PMON[1] for all; /* print remaining month flag*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.XPLCD = " "; /* Clear product line code*/
    FFWREC.XPLABRV = " "; /* Clear product line abrv*/
    FFWREC.XPCCD = " "; /* Clear product category code*/
    FFWREC.XPCABRV = " "; /* Clear product category abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
     /* ------------------------------------------------------------*/
     /* need month/ship month indicator*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFW-ND-SHP-IND == " ")
      FFWREC.FFW-ND-SHP-IND = "N";
    end
    ;
     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* life cycle code*/
     /* ------------------------------------------------------------*/
    ;
    FG0KW00.XLCCD = "10";
    if (FG0KW00.XLCCD in XLCTBL.XLCCD)
      FG0KW00.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
    end
    ;
     /* ------------------------------------------------------------*/
     /* quality code*/
     /* ------------------------------------------------------------*/
    ;
    FG0KW00.XQACD = "01";
    if (FG0KW00.XQACD in XQATBL.XQACD)
      FG0KW00.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
    end
    ;
     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0)
      FG0KW00.FG0KWSWR = "Y"; /* set data request flag*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0K000; /* Converse the main process*/
    ;
    FG0K000: FG0K000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0K001; /* Converse the main process*/
    ;
    FG0K001: FG0K001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0K001; /* converse the main process*/
    ;
  end // end main
end // end FG0K

// get actl nd mo sales
Function FG0K-141()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load FHAREC record - dfhist.vlnshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0k100.*/
   /* ------------------------------------------------------------*/
  ;
  set FHAREC empty;
  ;
  FHAREC.XPLCD = FF2REC.XPLCD; /* product line code*/
  FHAREC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FHAREC.XLCCD = FG0KW00.XLCCD; /* life cycle code*/
  FHAREC.XQACD = FG0KW00.XQACD; /* quality code*/
  FHAREC.YSMXOT = "*"; /* sum code*/
  TA1PGMNM = "FG0K141"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vlnshp01 table*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SN"; /* function code*/
  ;
  XSFFS-FF5550();
  ;
  ;
end // end FG0K-141

// get cryvr qty--3 & 4 mos ago
Function FG0K-143()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities from dfhist.vfhlin01*/
   /* ------------------------------------------------------------*/
  ;
  set FH4REC empty;
  ;
  FH4REC.XPLCD = FF2REC.XPLCD; /* product line code*/
  FH4REC.XPRCD = FF2REC.YPGCD; /* product type code*/
  FH4REC.XLCCD = FG0KW00.XLCCD; /* life cycle code*/
  FH4REC.XQACD = FG0KW00.XQACD; /* quality code*/
  FH4REC.YSMXOT = "*"; /* sum code*/
  FH4REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "FG0K143"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhlin01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS51();
  ;
  ;
end // end FG0K-143

// get cryvr qty--1 & 2 mos ago
Function FG0K-145()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty;
  ;
   /* division code is used here for passing line code to ff5500*/
  FH3REC.XDVCD = FF2REC.XPLCD; /* prod line code*/
  FH3REC.XPCCD = "*"; /* prod catg code*/
  FH3REC.XPRCD = FF2REC.YPGCD; /* product type code*/
  FH3REC.XLCCD = FG0KW00.XLCCD; /* life cycle code*/
  FH3REC.XQACD = FG0KW00.XQACD; /* quality code*/
  FH3REC.YSMXOT = "*"; /* sum code*/
  FH3REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "FG0K145"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS-FF5500();
  ;
  ;
end // end FG0K-145

// fetch vmltyp sls fcst
Function FG0K-161()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmltyp01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff6rec record - dfcast.vmltyp01*/
   /* ------------------------------------------------------------*/
  ;
  set FF6REC empty; /* Clear row storage area*/
  ;
  FF6REC.XPLCD = FG0KW02.XPLCD[FG0KWIDX]; /* product line code*/
  FF6REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  ;
  ;
  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
    if (SQLCA.VAGen_SQLCODE == -305 /* no rows found to sum*/
     || SQLCA.VAGen_SQLCODE == 100) /* no rows found to sum*/
      ;
      FF6REC.FF6SLFCT = 0;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "161"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET TABLE DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0K-161

// obtain vmcat sls fcst
Function FG0K-162()
  FG0K-1621(); /* select dfcast.vffxrf01*/
  FG0K-1622(); /* fetch dfcast.vffxrf01*/
  ;
  FG0KW00.FG0KWCOF = 0; /* closeout qty*/
  FG0KW00.FG0KWBGF = 0; /* b-grade qty*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    FG0K-1625(); /* sum bgrd/clsout from vmcat001*/
    ;
    FG0KW00.FG0KWCOF = FG0KW00.FG0KWCOF + FF7REC.FF5COFCT;
    FG0KW00.FG0KWBGF = FG0KW00.FG0KWBGF + FF7REC.FF5BGFCT;
    ;
    FG0K-1622(); /* fetch dfcast.vffxrf01*/
  end
  ;
  FG0K-1627(); /* close dfcast.vffxrf01*/
  ;
  ;
  if (FG0KW00.XLCCD == "20" /* process closeout*/
   && FG0KW00.XQACD == "01")
    FG0KW00.FG0KWUHS = FG0KW00.FG0KWCOF; /* close out*/
  else
    FG0KW00.FG0KWUHS = FG0KW00.FG0KWBGF; /* b-grade*/
  end
  ;
  ;
   /* ************************************************************/
   /* If need month sales request and processing current month **/
   /* backout carryover                                     **/
   /* ************************************************************/
  if (FFWREC.FFW-ND-SHP-IND == "N"
   && FG0KW00.FG0KW-CURR-MO == FFFREC.FFFBEGMO)
    ;
    FG0K-1621(); /* select dfcast.vffxrf01*/
    FG0K-1622(); /* fetch dfcast.vffxrf01*/
    ;
    FG0KW00.FG0KWCOF = 0; /* closeout qty*/
    FG0KW00.FG0KWBGF = 0; /* b-grade qty*/
    FFFREC.FFFBEGMO = FG0KW00.FG0KW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0KW00.FG0KW-CURR-MO-MINUS1;
    ;
    while (SQLCA.VAGen_SQLCODE == 0)
      ;
      FG0K-1625(); /* sum bgrd/clsout from vmcat001*/
      ;
      FG0KW00.FG0KWCOF = FG0KW00.FG0KWCOF + FF7REC.FF5COFCT;
      FG0KW00.FG0KWBGF = FG0KW00.FG0KWBGF + FF7REC.FF5BGFCT;
      ;
      FG0K-1622(); /* fetch dfcast.vffxrf01*/
    end
    ;
    FG0K-1627(); /* close dfcast.vffxrf01*/
    ;
    FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0KWPIX];
    FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0KWPIX];
    ;
    if (FG0KW00.XLCCD == "20" /* process closeout*/
     && FG0KW00.XQACD == "01")
      FG0KW00.FG0KWUHS = FG0KW00.FG0KWUHS - FG0KW00.FG0KWCOF;
    else
      FG0KW00.FG0KWUHS = FG0KW00.FG0KWUHS - FG0KW00.FG0KWBGF;
    end
  end
  ;
  ;
end // end FG0K-162

// open 's2' on dfcast.vffxrf01
Function FG0K-1621()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF2REC.XPLCD = FG0KW02.XPLCD[FG0KWIDX]; /* product line*/
  ;
   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0K-1621

// fetch 'n2' on dfcast.vffxrf01
Function FG0K-1622()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vffxrf01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N2 DFCAST.VFFXRF01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0K-1622

// Fetch 'ss' on dfcast.vmcat001
Function FG0K-1625()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff7rec record - dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.XPCCD = FF2REC.XPCCD; /* product category*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF7REC.YSMXDV = "10"; /* division group*/
  FF7REC.XCTCD = "USA"; /* country code*/
  ;
   /* ------------------------------------------------------------*/
   /* select set dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
    if (SQLCA.VAGen_SQLCODE == -305 /* no rows found to sum*/
     || SQLCA.VAGen_SQLCODE == 100) /* no rows found*/
      ;
      FF7REC.FF5COFCT = 0;
      FF7REC.FF5BGFCT = 0;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0K-1625

// Close 'c2' on dfcast.vffxrf01
Function FG0K-1627()
   /* ------------------------------------------------------------*/
   /* close dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C2 DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0K-1627

// add next page to temp storage
Function FG0K-180()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0KW02.XXXTSLEN = FG0KW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FG0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FG0KW02 empty; /* M001 display storage*/
    ;
    FG0KW00.FG0KWIDX = 1; /* Display line index*/
    ;
    FG0KW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "180"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0K-180

// one time validation process
Function FG0K000()
  ;
   /* ------------------------------------------------------------*/
   /* validate dates if request for data switch eq 'y'*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KW00.FG0KWSWR != "Y") /* data not requested for load*/
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify begin and end dates passed using xsffs30*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;
  ;
  XSFFS30();
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0KM001.FG0KMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "000";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0KM001.FG0KMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "000";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0KM001.FG0KMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "000";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0KM001.FG0KMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "000";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0KM001.FG0KMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "000";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0KM001.FG0KMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "000";
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if date range is in error load default field values*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    FG0KM001.YPGCD = FFWREC.YPGCD;
    FG0KM001.YPGABRV = FFWREC.YPGABRV;
    FG0KM001.XQACD = FG0KW00.XQACD;
    FG0KM001.XQAABRV = FG0KW00.XQAABRV;
    FG0KM001.FFW-ND-SHP-IND = FFWREC.FFW-ND-SHP-IND;
    FG0KW00.FG0KWPIX = 1;
    while (FG0KW00.FG0KWPIX <= 4)
      FG0KM001.FG0KMSEM[FG0KWPIX] = FG0KW00.FG0KWSEM[FG0KWPIX];
      FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX + 1;
    end
  end
  ;
  ;
end // end FG0K000

// L.R. forecast line inquiry
Function FG0K001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0K100(); /* Obtain the data to display*/
  ;
  FG0K200(); /* Format and display the map*/
  ;
  FG0K300(); /* Check attention identifier*/
  ;
  FG0K400(); /* Reset fields to normal intensity*/
  ;
  FG0K500(); /* Verify the entered data*/
  ;
  FG0K600(); /* Process valid input request*/
  ;
end // end FG0K001

// obtain data for display
Function FG0K100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KW00.FG0KWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the no of seasons and no of months in each season*/
   /* ------------------------------------------------------------*/
  ;
  FG0KS33();
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FG0KS01(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.*/
   /* Calculate program dates.*/
   /* ------------------------------------------------------------*/
  ;
  FG0K110();
  ;
   /* ------------------------------------------------------------*/
   /* Select all product lines for the requested type group from*/
   /* dfcast.vffxrf01.  Fetch sales quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FG0KW00.FG0KWIDX = 1; /* init index*/
  FG0KW00.FG0KWTIX = FFZREC.FFZNUMMO + 1; /* load total index*/
  ;
  FG0K120(); /* select 's3' on dfcast.vffxrf01*/
  ;
  FG0K130(); /* fetch 'n3' dfcast.vffxrf01 row*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    FG0KW02.XPLCD[FG0KWIDX] = FF2REC.XPLCD;
    XPLREC.XPLCD = FF2REC.XPLCD;
    XPLREC.XGPCD = COMMAREA.XGPCD;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
      FG0KW02.XPLSDESC[FG0KWIDX] = XPLTBL.XPLSDESC[sysVar.arrayIndex];
    end
    ;
    FG0KW00.FG0KWUTQ = 0; /* init w/s product line total*/
    FG0KW00.FG0KWPIX = 1; /* init process index*/
    ;
    while (FG0KW00.FG0KWPIX <= FFZREC.FFZNUMMO)
      ;
      FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0KWPIX];
      FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0KWPIX];
      ;
      FG0KW00.FG0KWUHS = 0;
      ;
      /* ------------------------------------------------------------*/
      /* If the month in the requested range is an actual month*/
      /* process for either need month based or ship month based*/
      /* Otherwise*/
      /* month is forecast*/
      /* ------------------------------------------------------------*/
      ;
      if (FFZREC.FFZINDMO[FG0KWPIX] < FG0KW00.FG0KW-CURR-MO)
        ;
        if (FFWREC.FFW-ND-SHP-IND == "N") /* need month sales*/
          FG0K140();
        else /* business (ship) month sales*/
          FG0K150();
        end
        ;
      else
        FG0K160();
      end
        /* ---------------------------------------------------*/
        /* load product line detail sales qty*/
        /* ---------------------------------------------------*/
      ;
      FG0KW00.FG0KWUQT[FG0KWPIX] = FG0KW00.FG0KWUHS;
      FFXREC.FFXNUMB = FG0KW00.FG0KWUHS;
      XSFFS10();
      FG0KW00.FG0KWQTY[FG0KWPIX] = FFXREC.FFXCHAR;
      ;
        /* ---------------------------------------------------*/
        /* accumulate product line total sales qty*/
        /* ---------------------------------------------------*/
      ;
      FG0KW00.FG0KWUTQ = FG0KW00.FG0KWUHS + FG0KW00.FG0KWUTQ;
      ;
        /* ---------------------------------------------------------*/
        /* accumulate monthly sales qty totals(column totals)*/
        /* ---------------------------------------------------------*/
      ;
      FG0KW00.FG0KWNM1 = FG0KW03.FG0KWUMT[FG0KWPIX];
      FG0KW03.FG0KWUMT[FG0KWPIX] = FG0KW00.FG0KWUHS + FG0KW00.FG0KWNM1;
      FFXREC.FFXNUMB = FG0KW03.FG0KWUMT[FG0KWPIX];
      XSFFS10();
      FG0KW03.FG0KWMTQ[FG0KWPIX] = FFXREC.FFXCHAR;
      ;
      FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX + 1;
      ;
    end
    ;
      /* ------------------------------------------------------------*/
      /* load product line total sales qty(last entry in t/s)*/
      /* ------------------------------------------------------------*/
    ;
    FG0KW00.FG0KWUQT[FG0KWTIX] = FG0KW00.FG0KWUTQ;
    FFXREC.FFXNUMB = FG0KW00.FG0KWUTQ;
    XSFFS10();
    FG0KW00.FG0KWQTY[FG0KWTIX] = FFXREC.FFXCHAR;
    ;
      /* ------------------------------------------------------------*/
      /* load temporary storage record with product line detail*/
      /* and total qtys*/
      /* ------------------------------------------------------------*/
    ;
    FG0KW02.FG0KWQTS[FG0KWIDX] = FG0KW00.FG0KWLQT;
    ;
      /* ------------------------------------------------------------*/
      /* accumulate monthly sales qty total(last entry in w/s)*/
      /* ------------------------------------------------------------*/
    ;
    FG0KW00.FG0KWNM1 = FG0KW03.FG0KWUMT[FG0KWTIX];
    FG0KW03.FG0KWUMT[FG0KWTIX] = FG0KW00.FG0KWNM1 + FG0KW00.FG0KWUTQ;
    FFXREC.FFXNUMB = FG0KW03.FG0KWUMT[FG0KWTIX];
    XSFFS10();
    FG0KW03.FG0KWMTQ[FG0KWTIX] = FFXREC.FFXCHAR;
    ;
      /* ------------------------------------------------------------*/
      /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
    ;
    if (FG0KW00.FG0KWIDX > 12) /* Page is full*/
      FG0KW02.FG0KWNLD = FG0KW00.FG0KWIDX; /* nbr of lines loaded*/
      FG0K-180(); /* Add page to temp storage*/
    else
      FG0KW00.FG0KWIDX = FG0KW00.FG0KWIDX + 1;
    end
    ;
    FG0K130(); /* fetch next dfcast.vffxrf01 rec*/
    ;
  end
  ;
  FG0K170(); /* close 'c3' dfcast.vffxrf01 set*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KW00.FG0KWIDX > 1) /* Page was formatted*/
    FG0KW02.FG0KWNLD = FG0KW00.FG0KWIDX - 1;
    FG0K-180(); /* Add page to temp storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate product line monthly percents (column percents)*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KW03.FG0KWUMT[FG0KWTIX] != 0)
    ;
    FG0KW00.FG0KWNM1 = FG0KW03.FG0KWUMT[FG0KWTIX];
    FG0KW00.FG0KWIDX = 1;
    while (FG0KW00.FG0KWIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/
      ;
      FG0KW00.FG0KWNM2 = FG0KW03.FG0KWUMT[FG0KWIDX] * 100;
      FG0KW03.FG0KWMPT[FG0KWIDX] = mathLib.round(FG0KW00.FG0KWNM2 / FG0KW00.FG0KWNM1, -mathLib.decimals(FG0KW03.FG0KWMPT[FG0KWIDX]));
      ;
      FG0KW00.FG0KWIDX = FG0KW00.FG0KWIDX + 1;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG0KW00.XXXTSPAG = 1; /* Desired page number*/
  FG0KW00.FG0KWPGX = 1; /* page index*/
  FG0KW00.FG0KW-PAGP[1] = 1; /* starting point of the 1st page*/
  FG0KW00.FG0KW-PAGS[1] = 1; /* processed season of the 1st page*/
  FG0KW00.FG0KWSWR = "N"; /* Request for data switch*/
  FG0KW01.CACHGFL = "Y"; /* data is available for change*/
  ;
  ;
end // end FG0K100

// calc program dates
Function FG0K110()
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.*/
   /* Calculate:*/
   /* - current month*/
   /* - current month minus 1 month*/
   /* - current month minus 2 months*/
   /* - current month minus 3 months*/
   /* - current month minus 4 months*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------*/
   /* Get current date*/
   /* ------------------------*/
  ;
  XX0XS01();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain invoice date from dfcast.vffctl01.*/
   /* ------------------------------------------------------------*/
  ;
  FG0K111();
  ;
   /* ------------------------------------------------------------*/
   /* Calculate current month.*/
   /* ------------------------------------------------------------*/
  ;
  FG0KW00.FG0KWCWD = FF1REC.FF1IVCDT; /* work date*/
  ;
  if (XX0XW01.XX0XWDAT < FF1REC.FF1IVCDT)
    if (FG0KW00.FG0KWCMM == 1)
      FG0KW00.FG0KWCMM = 12;
      if (FG0KW00.FG0KWCYY == 00)
        FG0KW00.FG0KWCYY = 99;
        FG0KW00.FG0KWCCC = FG0KW00.FG0KWCCC - 1;
      else
        FG0KW00.FG0KWCYY = FG0KW00.FG0KWCYY - 1;
      end
    else
      FG0KW00.FG0KWCMM = FG0KW00.FG0KWCMM - 1;
    end
  end
  ;
  FG0KW00.FG0KW-CURR-MO = FG0KW00.FG0KWCYM; /* curr date ccyymm*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate current month minus 1 month*/
   /* ------------------------------------------------------------*/
  ;
  FG0KW00.FG0KWWDT = FG0KW00.FG0KW-CURR-MO;
  ;
  if (FG0KW00.FG0KWWMM == 1)
    FG0KW00.FG0KWWMM = 12;
    if (FG0KW00.FG0KWWYY == 00)
      FG0KW00.FG0KWWYY = 99;
      FG0KW00.FG0KWWCC = FG0KW00.FG0KWWCC - 1;
    else
      FG0KW00.FG0KWWYY = FG0KW00.FG0KWWYY - 1;
    end
  else
    FG0KW00.FG0KWWMM = FG0KW00.FG0KWWMM - 1;
  end
  ;
  FG0KW00.FG0KW-CURR-MO-MINUS1 = FG0KW00.FG0KWWDT;
  ;
  ;
  if (FFWREC.FFW-ND-SHP-IND == "N")
    /* ------------------------------------------------------------*/
    /* Calculate current month minus 2 months*/
    /* ------------------------------------------------------------*/
    ;
    FG0KW00.FG0KWWDT = FG0KW00.FG0KW-CURR-MO-MINUS1;
    ;
    if (FG0KW00.FG0KWWMM == 1)
      FG0KW00.FG0KWWMM = 12;
      if (FG0KW00.FG0KWWYY == 00)
        FG0KW00.FG0KWWYY = 99;
        FG0KW00.FG0KWWCC = FG0KW00.FG0KWWCC - 1;
      else
        FG0KW00.FG0KWWYY = FG0KW00.FG0KWWYY - 1;
      end
    else
      FG0KW00.FG0KWWMM = FG0KW00.FG0KWWMM - 1;
    end
    ;
    FG0KW00.FG0KW-CURR-MO-MINUS2 = FG0KW00.FG0KWWDT;
    ;
    /* ------------------------------------------------------------*/
    /* Calculate current month minus 3 months*/
    /* ------------------------------------------------------------*/
    ;
    FG0KW00.FG0KWWDT = FG0KW00.FG0KW-CURR-MO-MINUS2;
    ;
    if (FG0KW00.FG0KWWMM == 1)
      FG0KW00.FG0KWWMM = 12;
      if (FG0KW00.FG0KWWYY == 00)
        FG0KW00.FG0KWWYY = 99;
        FG0KW00.FG0KWWCC = FG0KW00.FG0KWWCC - 1;
      else
        FG0KW00.FG0KWWYY = FG0KW00.FG0KWWYY - 1;
      end
    else
      FG0KW00.FG0KWWMM = FG0KW00.FG0KWWMM - 1;
    end
    ;
    FG0KW00.FG0KW-CURR-MO-MINUS3 = FG0KW00.FG0KWWDT;
    ;
    /* ------------------------------------------------------------*/
    /* Calculate current month minus 4 months*/
    /* ------------------------------------------------------------*/
    ;
    FG0KW00.FG0KWWDT = FG0KW00.FG0KW-CURR-MO-MINUS3;
    ;
    if (FG0KW00.FG0KWWMM == 1)
      FG0KW00.FG0KWWMM = 12;
      if (FG0KW00.FG0KWWYY == 00)
        FG0KW00.FG0KWWYY = 99;
        FG0KW00.FG0KWWCC = FG0KW00.FG0KWWCC - 1;
      else
        FG0KW00.FG0KWWYY = FG0KW00.FG0KWWYY - 1;
      end
    else
      FG0KW00.FG0KWWMM = FG0KW00.FG0KWWMM - 1;
    end
    ;
    FG0KW00.FG0KW-CURR-MO-MINUS4 = FG0KW00.FG0KWWDT;
    ;
  end
  ;
  ;
end // end FG0K110

// get ivc dt from dfcast.vffctl
Function FG0K111()
   /* ------------------------------------------------------------*/
   /* obtain invoice cutoff date from dfcast.vffctl01*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0K111

// Select 's3' on dfcast.vffxrf01
Function FG0K120()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffxrf01 table.*/
   /* Load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  ;
  try
    call "IO4000" ("S3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S3 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0K120

// fetch n3 dfcast.vffxrf01 row
Function FG0K130()
   /* ------------------------------------------------------------*/
   /* Fetch dfcast.vffxrf01 record.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N3 DFCAST.VFFXRF01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0K130

// obtain actl nd mo sales
Function FG0K140()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load FHAREC record - dfhist.vlnshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0k100.*/
   /* ------------------------------------------------------------*/
  ;
  FG0K-141();
  ;
  FG0KW00.FG0KWUHS = FG0KW00.FG0KWUHS + FHAREC.FH5MSHQT;
  ;
   /* --------------------------------------------------------*/
   /* check for carryover*/
   /* --------------------------------------------------------*/
  ;
  if (FFZREC.FFZINDMO[FG0KWPIX] <= FG0KW00.FG0KW-CURR-MO-MINUS1
   && FFZREC.FFZINDMO[FG0KWPIX] >= FG0KW00.FG0KW-CURR-MO-MINUS4)
    ;
    if (FG0KW00.XQACD == "02" /* bgrade requested*/
     || FG0KW00.XLCCD == "20") /* closeout requested*/
      FG0K-143(); /* get open qtys from vfhlin01*/
      FG0KW00.FG0KWUHS = FG0KW00.FG0KWUHS + FH4REC.FH1PAQTY +       FH4REC.FH1ALQTY;
      ;
    else
      ;
      if (FG0KW00.XQACD == "01" /* inline and/or makeup requested*/
       && FG0KW00.XLCCD == "10")
        ;
        if (FFZREC.FFZINDMO[FG0KWPIX] == FG0KW00.FG0KW-CURR-MO-MINUS3
         || FFZREC.FFZINDMO[FG0KWPIX] == FG0KW00.FG0KW-CURR-MO-MINUS4)
          FG0K-143(); /* get open qtys from vfhlin01*/
          FH4REC.FH1PAQTY = FH4REC.FH1ALQTY + FH4REC.FH1PAQTY;
          FH4REC.FH1PAQTY = mathLib.round(FH4REC.FH1PAQTY * .5, -mathLib.decimals(FH4REC.FH1PAQTY));
          FG0KW00.FG0KWUHS = FG0KW00.FG0KWUHS + FH4REC.FH1PAQTY;
        end
        ;
        if (FFZREC.FFZINDMO[FG0KWPIX] == FG0KW00.FG0KW-CURR-MO-MINUS2)
          FFFREC.FFFFUNCD = "C2"; /* function code*/
          FG0K-145(); /* get open qtys from vfhcat01*/
          FG0KW00.FG0KWUHS = FG0KW00.FG0KWUHS + FH3REC.FH1PAQTY;
        end
        ;
        if (FFZREC.FFZINDMO[FG0KWPIX] == FG0KW00.FG0KW-CURR-MO-MINUS1)
          FFFREC.FFFFUNCD = "C1"; /* function code*/
          FG0K-145(); /* get open qtys from vfhcat01*/
          FG0KW00.FG0KWUHS = FG0KW00.FG0KWUHS + FH3REC.FH1PAQTY;
        end
        ;
      end
    end
  end
  ;
  ;
  ;
end // end FG0K140

// get bus mo sales qty
Function FG0K150()
   /* ------------------------------------------------------------*/
   /* Obtain historical business (ship) month sales quantities.*/
   /* Load FHAREC record - dfhist.vlnshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0k100.*/
   /* ------------------------------------------------------------*/
  ;
  set FHAREC empty;
  ;
  FHAREC.XPLCD = FF2REC.XPLCD; /* product line code*/
  FHAREC.XPRCD = FF2REC.YPGCD; /* product type code*/
  FHAREC.XLCCD = FG0KW00.XLCCD; /* life cycle code*/
  FHAREC.XQACD = FG0KW00.XQACD; /* quality code*/
  FHAREC.YSMXOT = "*"; /* sum code*/
  TA1PGMNM = "FG0K150"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vlnshp01 table*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SB"; /* function code*/
  ;
  XSFFS-FF5550();
  ;
  FG0KW00.FG0KWUHS = FG0KW00.FG0KWUHS + FHAREC.FH5MSHQT - FHAREC.FH5RTSQT;
  ;
end // end FG0K150

// get fcst sales qty
Function FG0K160()
   /* --------------------------------------------------------*/
   /* obtain domestic forecast sale quantities*/
   /* --------------------------------------------------------*/
  ;
   /* --------------------------------------------------------*/
   /* fetch Inline/Makeup sales forecast quantities.*/
   /* --------------------------------------------------------*/
  if (FG0KW00.XLCCD == "10" /* inline/makeup sales qty*/
   && FG0KW00.XQACD == "01")
    ;
    FG0K-161(); /* obtain mltyp sales qty*/
    FG0KW00.FG0KWUHS = FF6REC.FF6SLFCT;
    ;
    /* --------------------------------------------------------*/
    /* If need month sales requested and processing current mo*/
    /* Back out carryover.*/
    /* --------------------------------------------------------*/
    if (FFWREC.FFW-ND-SHP-IND == "N"
     && FG0KW00.FG0KW-CURR-MO == FFFREC.FFFBEGMO)
      ;
      FFFREC.FFFBEGMO = FG0KW00.FG0KW-CURR-MO-MINUS1;
      FFFREC.FFFENDMO = FG0KW00.FG0KW-CURR-MO-MINUS1;
      FG0K-161(); /* obtain mltyp sales qty*/
      FG0KW00.FG0KWUHS = FG0KW00.FG0KWUHS - FF6REC.FF6SLFCT;
      FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0KWPIX];
      FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0KWPIX];
    end
    ;
  else
    /* --------------------------------------------------------*/
    /* fetch Bgrade/Closeout sales forecast quantities.*/
    /* --------------------------------------------------------*/
    ;
    FG0K-162(); /* obtain sum mcat001 bgd/clsout*/
    ;
  end
  ;
end // end FG0K160

// close 'c3' dfcast.vffxrf01
Function FG0K170()
   /* ------------------------------------------------------------*/
   /* close dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "170"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C3 DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0K170

// Format and converse the map
Function FG0K200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* if no errors format map*/
    ;
    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/
    ;
    /* ------------------------------------------------------------*/
     /* init map FG0Km001*/
    /* ------------------------------------------------------------*/
    ;
    set FG0KM001 initial; /* m001 input/ouput area*/
    ;
    /* ------------------------------------------------------------*/
     /* Format FG0Km001 using passed data*/
    /* ------------------------------------------------------------*/
    ;
    FG0KW00.FG0KWWDT = FFWREC.FFABEGMO; /* w/s date field*/
    FG0KM001.FG0KMBRG = FG0KW00.FG0KWWYM; /* begin month range*/
    FG0KW00.FG0KWWDT = FFWREC.FFAENDMO; /* w/s date field*/
    FG0KM001.FG0KMERG = FG0KW00.FG0KWWYM; /* end month range*/
    ;
    FG0KM001.YPGCD = FFWREC.YPGCD; /* product type group*/
    FG0KM001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/
    ;
    FG0KM001.XQACD = FG0KW00.XQACD; /* quality code*/
    FG0KM001.XQAABRV = FG0KW00.XQAABRV; /* quality abrv*/
    ;
    FG0KM001.XLCCD = FG0KW00.XLCCD; /* life cycle code*/
    FG0KM001.XLCABRV = FG0KW00.XLCABRV; /* life cycle abrv*/
    ;
    FG0KM001.FFW-ND-SHP-IND = FFWREC.FFW-ND-SHP-IND;
    ;
     /* season end month*/
    ;
    FG0KW00.FG0KWWDT = FFWREC.FFWENDM1;
    FG0KM001.FG0KMSEM[1] = FG0KW00.FG0KWWMM;
    ;
    FG0KW00.FG0KWWDT = FFWREC.FFWENDM2;
    FG0KM001.FG0KMSEM[2] = FG0KW00.FG0KWWMM;
    ;
    FG0KW00.FG0KWWDT = FFWREC.FFWENDM3;
    FG0KM001.FG0KMSEM[3] = FG0KW00.FG0KWWMM;
    ;
    FG0KW00.FG0KWWDT = FFWREC.FFWENDM4;
    FG0KM001.FG0KMSEM[4] = FG0KW00.FG0KWWMM;
    ;
    if (FG0KW00.FG0KWSWF == "Y") /* map must be formatted*/
      FG0K210(); /* Format the data on the map*/
    end
    ;
  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KW00.TA5TSQIX > 0)
    set FG0KM001.XXXLITPG skip;
    FG0KM001.XXXTSPAG = FG0KW00.XXXTSPAG; /* Current page*/
    set FG0KM001.XXXLITOF skip;
    FG0KM001.TA5TSQIX = FG0KW00.TA5TSQIX; /* max pages*/
  end
  ;
  FG0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0KM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0KM001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG0KM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0KM001.CAITEM; /* Application data*/
  ;
end // end FG0K200

// Format the display data
Function FG0K210()
  ;
  FG0KW00.FG0KWSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KW01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings yymm*/
   /* ------------------------------------------------------------*/
  set FG0KM001.FG0KMLHD skip;
  ;
  FG0KW00.FG0KWLIX = 1;
  FG0KW00.FG0KWIDX = FG0KW00.FG0KW-PAGP[FG0KWPGX];
  ;
  if (FG0KW00.FG0KW-PMON[FG0KWPGX] == "Y")
                                        /* print the remaining months check*/
    FG0K211(); /* Move the remaining monthly headings*/
  else
    FG0K212(); /* Move the monthly headings*/
    FG0K213(); /* Move the total and pct headings*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain product line sale qtys from temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FG0KS09(); /* read temporary storage*/
  ;
  FG0KW00.FG0KWPIX = 1;
  while (FG0KW00.FG0KWPIX <= FG0KW02.FG0KWNLD) /* process temp storage*/
    ;
    FG0KM001.FG0KMLDS[FG0KWPIX] = FG0KW02.XPLSDESC[FG0KWPIX];
    FG0KW00.FG0KWLQT = FG0KW02.FG0KWQTS[FG0KWPIX];
    ;
    /* ----------------------------------------------------------*/
     /* reformat product line quantities using working storage*/
     /* and calculate product line subtotal*/
    /* ----------------------------------------------------------*/
    ;
    FG0KW00.FG0KWLIX = 1; /* load index*/
    FG0KW00.FG0KWIDX = FG0KW00.FG0KW-PAGP[FG0KWPGX];
    move " " to FG0KW00.FG0KWWQT[1] for all; /* clear w/s display table*/
    move 0 to FG0KW00.FG0KWUST[1] for all; /* clear subtotal*/
    ;
    if (FG0KW00.FG0KW-PMON[FG0KWPGX] == "Y")
                                        /* print the remaining months check*/
      FG0K214(); /* Move the remaining monthly headings*/
    else
      FG0K215(); /* Move the monthly headings*/
      FG0K216(); /* Move the total and pct headings*/
    end
    ;
    /* ----------------------------------------------------------*/
     /* load product line quantities to m001*/
    /* ----------------------------------------------------------*/
    ;
    FG0KM001.FG0KMQT1[FG0KWPIX] = FG0KW00.FG0KWWQT[1];
    FG0KM001.FG0KMQT2[FG0KWPIX] = FG0KW00.FG0KWWQT[2];
    FG0KM001.FG0KMQT3[FG0KWPIX] = FG0KW00.FG0KWWQT[3];
    FG0KM001.FG0KMQT4[FG0KWPIX] = FG0KW00.FG0KWWQT[4];
    FG0KM001.FG0KMQT5[FG0KWPIX] = FG0KW00.FG0KWWQT[5];
    FG0KM001.FG0KMQT6[FG0KWPIX] = FG0KW00.FG0KWWQT[6];
    FG0KM001.FG0KMQT7[FG0KWPIX] = FG0KW00.FG0KWWQT[7];
    FG0KM001.FG0KMQT8[FG0KWPIX] = FG0KW00.FG0KWWQT[8];
    FG0KM001.FG0KMQT9[FG0KWPIX] = FG0KW00.FG0KWWQT[9];
    ;
    FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load product line monthly sales qty totals*/
   /* ------------------------------------------------------------*/
  ;
  FG0KM001.FG0KMLDS[FG0KWPIX] = "TOTAL QTY   ";
  ;
  move " " to FG0KW00.FG0KWWQT[1] for all; /* clear w/s display table*/
  FG0KW00.FG0KWLIX = 1; /* load index*/
  FG0KW00.FG0KWIDX = FG0KW00.FG0KW-PAGP[FG0KWPGX];
  FG0KW00.FG0KWUMT = 0; /* clear subtotal for total line*/
  ;
  if (FG0KW00.FG0KW-PMON[FG0KWPGX] == "Y")
                                        /* print the remaining months check*/
    FG0K217(); /* Move the remaining monthly total*/
  else
    FG0K218(); /* Move the monthly total*/
    FG0K219(); /* Move the total and pct*/
  end
  ;
   /* ----------------------------------------------------------*/
   /* load product line monthly total quantities to m001*/
   /* ----------------------------------------------------------*/
  ;
  FG0KM001.FG0KMQT1[FG0KWPIX] = FG0KW00.FG0KWWQT[1];
  FG0KM001.FG0KMQT2[FG0KWPIX] = FG0KW00.FG0KWWQT[2];
  FG0KM001.FG0KMQT3[FG0KWPIX] = FG0KW00.FG0KWWQT[3];
  FG0KM001.FG0KMQT4[FG0KWPIX] = FG0KW00.FG0KWWQT[4];
  FG0KM001.FG0KMQT5[FG0KWPIX] = FG0KW00.FG0KWWQT[5];
  FG0KM001.FG0KMQT6[FG0KWPIX] = FG0KW00.FG0KWWQT[6];
  FG0KM001.FG0KMQT7[FG0KWPIX] = FG0KW00.FG0KWWQT[7];
  FG0KM001.FG0KMQT8[FG0KWPIX] = FG0KW00.FG0KWWQT[8];
  FG0KM001.FG0KMQT9[FG0KWPIX] = FG0KW00.FG0KWWQT[9];
  ;
  FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX + 1;
  ;
   /* ------------------------------------------------------------*/
   /* load product line monthly percents*/
   /* ------------------------------------------------------------*/
  ;
  FG0KM001.FG0KMLDS[FG0KWPIX] = "TOTAL PCT   ";
  ;
  move " " to FG0KW00.FG0KWWQT[1] for all; /* clear w/s display table*/
  FG0KW00.FG0KWLIX = 1; /* load index*/
  FG0KW00.FG0KWIDX = FG0KW00.FG0KW-PAGP[FG0KWPGX];
  ;
  if (FG0KW00.FG0KW-PMON[FG0KWPGX] == "Y")
                                        /* print the remaining months check*/
    FG0K220(); /* Move the remaining monthly pct*/
  else
    FG0K221(); /* Move the monthly pct*/
    FG0K222(); /* Move the total and pct*/
  end
  ;
  ;
   /* ----------------------------------------------------------*/
   /* load product line monthly percents*/
   /* ----------------------------------------------------------*/
  ;
  FG0KM001.FG0KMQT1[FG0KWPIX] = FG0KW00.FG0KWWQT[1];
  FG0KM001.FG0KMQT2[FG0KWPIX] = FG0KW00.FG0KWWQT[2];
  FG0KM001.FG0KMQT3[FG0KWPIX] = FG0KW00.FG0KWWQT[3];
  FG0KM001.FG0KMQT4[FG0KWPIX] = FG0KW00.FG0KWWQT[4];
  FG0KM001.FG0KMQT5[FG0KWPIX] = FG0KW00.FG0KWWQT[5];
  FG0KM001.FG0KMQT6[FG0KWPIX] = FG0KW00.FG0KWWQT[6];
  FG0KM001.FG0KMQT7[FG0KWPIX] = FG0KW00.FG0KWWQT[7];
  FG0KM001.FG0KMQT8[FG0KWPIX] = FG0KW00.FG0KWWQT[8];
  FG0KM001.FG0KMQT9[FG0KWPIX] = FG0KW00.FG0KWWQT[9];
  ;
end // end FG0K210

// Load the remaining monthly hdg
Function FG0K211()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month headings, Percent, Range total and Percent or subtotal,*/
   /* Range total and percent)*/
   /*  */
   /* load subtotal/total/percent literals*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
  FG0KW00.FG0KWREM = FG0KW00.FG0KWSIN[FG0KWSNX] - 6; /* remaining mos*/
  ;
  while (FG0KW00.FG0KWIDX <= FFZREC.FFZNUMMO /* nbr of mos loaded*/
   && FG0KW00.FG0KWLIX <= FG0KW00.FG0KWREM) /* nbr of mos left*/
    ;
    FG0KM001.FG0KMHD2[FG0KWLIX] = FFZREC.FFZIYYMM[FG0KWIDX];
    set FG0KM001.FG0KMHD2[FG0KWLIX] skip;
    ;
    FG0KW00.FG0KWIDX = FG0KW00.FG0KWIDX + 1; /* increment index*/
    FG0KW00.FG0KWLIX = FG0KW00.FG0KWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0KM001.FG0KMHD1[7] = " SUB ";
  set FG0KM001.FG0KMHD1[7] skip;
  FG0KM001.FG0KMHD2[7] = "TOTAL";
  set FG0KM001.FG0KMHD2[7] skip;
  FG0KM001.FG0KMHD1[8] = "RANGE";
  set FG0KM001.FG0KMHD1[8] skip;
  FG0KM001.FG0KMHD2[8] = "TOTAL";
  set FG0KM001.FG0KMHD2[8] skip;
  FG0KM001.FG0KMHD2[9] = " PCT ";
  set FG0KM001.FG0KMHD2[9] skip;
  ;
end // end FG0K211

// Load monthly headings
Function FG0K212()
  ;
   /* ------------------------------------------------------------*/
   /* move the monthly heading*/
   /* ------------------------------------------------------------*/
  ;
  while (FG0KW00.FG0KWIDX <= FFZREC.FFZNUMMO            /* nbr of mos loaded*/
   && FG0KW00.FG0KWLIX <= FG0KW00.FG0KWSIN[FG0KWSNX] /* no of mos in sesn*/
   && FG0KW00.FG0KWLIX <= 6)
    ;
    FG0KM001.FG0KMHD2[FG0KWLIX] = FFZREC.FFZIYYMM[FG0KWIDX];
    set FG0KM001.FG0KMHD2[FG0KWLIX] skip;
    ;
    FG0KW00.FG0KWIDX = FG0KW00.FG0KWIDX + 1; /* increment index*/
    FG0KW00.FG0KWLIX = FG0KW00.FG0KWLIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FG0K212

// Load the total & pct headings
Function FG0K213()
  ;
   /* --------------------------------------------------------*/
   /* move the totals and pct headings*/
   /* --------------------------------------------------------*/
  ;
  if (FG0KW00.FG0KWLIX > FG0KW00.FG0KWSIN[FG0KWSNX]) /* load the whole sesn*/
    ;
    FG0KM001.FG0KMHD1[7] = " SUB ";
    set FG0KM001.FG0KMHD1[7] skip;
    FG0KM001.FG0KMHD2[7] = "TOTAL";
    set FG0KM001.FG0KMHD2[7] skip;
    FG0KM001.FG0KMHD1[8] = "RANGE";
    set FG0KM001.FG0KMHD1[8] skip;
    FG0KM001.FG0KMHD2[8] = "TOTAL";
    set FG0KM001.FG0KMHD2[8] skip;
    FG0KM001.FG0KMHD2[9] = " PCT ";
    set FG0KM001.FG0KMHD2[9] skip;
    ;
  end
  ;
end // end FG0K213

// Load the remaining monthly qty
Function FG0K214()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month, Percent, Range total and Percent or subtotal, Range total*/
   /* percent)*/
   /*  */
   /* load subtotal/total/percent*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months, subtotal, range total and pct fields*/
   /* --------------------------------------------------------------*/
  ;
  ;
  FG0KW00.FG0KWSIX = FG0KW00.FG0KWIDX - 6;
  while (FG0KW00.FG0KWSIX < FG0KW00.FG0KWIDX)
    FG0KW00.FG0KWUST[FG0KWPIX] = FG0KW00.FG0KWUQT[FG0KWSIX] +                                 FG0KW00.FG0KWUST[FG0KWPIX];
    FG0KW00.FG0KWSIX = FG0KW00.FG0KWSIX + 1;
  end
  ;
   /* remaining mos*/
  FG0KW00.FG0KWREM = FG0KW00.FG0KWSIN[FG0KWSNX] - 6;
  while (FG0KW00.FG0KWIDX <= FFZREC.FFZNUMMO  /* nbr of mos loaded*/
   && FG0KW00.FG0KWLIX <= FG0KW00.FG0KWREM /* nbr of mos left*/
   && FG0KW00.FG0KWLIX <= 6) /* right end*/
    ;
    FG0KW00.FG0KWWQT[FG0KWLIX] = FG0KW00.FG0KWQTY[FG0KWIDX];
    ;
    FG0KW00.FG0KWUST[FG0KWPIX] = FG0KW00.FG0KWUQT[FG0KWIDX] +                                FG0KW00.FG0KWUST[FG0KWPIX];
    ;
    FG0KW00.FG0KWIDX = FG0KW00.FG0KWIDX + 1; /* increment work index*/
    FG0KW00.FG0KWLIX = FG0KW00.FG0KWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0KS40(); /* translate and load subtotal*/
  FG0KS41(); /* load range total*/
  FG0KS42(); /* calculate and load percent*/
  ;
end // end FG0K214

// Load monthly qtys
Function FG0K215()
  ;
  while (FG0KW00.FG0KWIDX <= FFZREC.FFZNUMMO            /* nbr mos loaded*/
   && FG0KW00.FG0KWLIX <= FG0KW00.FG0KWSIN[FG0KWSNX] /* no mos in sesn*/
   && FG0KW00.FG0KWLIX <= 6)
    ;
    FG0KW00.FG0KWWQT[FG0KWLIX] = FG0KW00.FG0KWQTY[FG0KWIDX];
    ;
    FG0KW00.FG0KWUST[FG0KWPIX] = FG0KW00.FG0KWUQT[FG0KWIDX] +                                FG0KW00.FG0KWUST[FG0KWPIX];
    ;
    FG0KW00.FG0KWIDX = FG0KW00.FG0KWIDX + 1; /* increment work index*/
    FG0KW00.FG0KWLIX = FG0KW00.FG0KWLIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FG0K215

// Load the totals & pct
Function FG0K216()
  ;
   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/
  ;
  if (FG0KW00.FG0KWLIX > FG0KW00.FG0KWSIN[FG0KWSNX]) /* load the whole sesn*/
    ;
    FG0KS40(); /* translate and load subtotal*/
    FG0KS41(); /* load range total*/
    FG0KS42(); /* calculate and load percent*/
    ;
  end
end // end FG0K216

// Load the remaining monthly tot
Function FG0K217()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month, Percent, Range total and Percent or subtotal, Range total*/
   /* percent)*/
   /*  */
   /* load subtotal/total/percent for the total line*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months, subtotal, range total and pct fields*/
   /* --------------------------------------------------------------*/
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* since pf10 is going backward to the 1st page and subtotal*/
   /* will still be 0. So if pf10 and the 2nd (right) page is*/
   /* reached, then the calculation of subtotal in the 1st*/
   /* page is necessary.*/
   /* ---------------------------------------------------------------*/
  ;
  FG0KW00.FG0KWSIX = FG0KW00.FG0KWIDX - 6;
  while (FG0KW00.FG0KWSIX < FG0KW00.FG0KWIDX)
    FG0KW00.FG0KWUMT = FG0KW03.FG0KWUMT[FG0KWSIX] +                      FG0KW00.FG0KWUMT;
    FG0KW00.FG0KWSIX = FG0KW00.FG0KWSIX + 1;
  end
  ;
  FG0KW00.FG0KWREM = FG0KW00.FG0KWSIN[FG0KWSNX] - 6; /* remaining mos*/
  ;
  while (FG0KW00.FG0KWIDX <= FFZREC.FFZNUMMO  /* nbr of mos loaded*/
   && FG0KW00.FG0KWLIX <= FG0KW00.FG0KWREM /* nbr of mos left*/
   && FG0KW00.FG0KWLIX <= 6) /* right end*/
    ;
    FG0KW00.FG0KWWQT[FG0KWLIX] = FG0KW03.FG0KWMTQ[FG0KWIDX];
    FG0KW00.FG0KWUMT = FG0KW03.FG0KWUMT[FG0KWIDX] + FG0KW00.FG0KWUMT;
    ;
    FG0KW00.FG0KWIDX = FG0KW00.FG0KWIDX + 1; /* increment work index*/
    FG0KW00.FG0KWLIX = FG0KW00.FG0KWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0KS43(); /* translate and load subtotal*/
  FG0KS44(); /* load range total*/
  FG0KS45(); /* calculate and load percent*/
  ;
end // end FG0K217

// Load monthly totals
Function FG0K218()
  ;
  while (FG0KW00.FG0KWIDX <= FFZREC.FFZNUMMO            /* nbr mos loaded*/
   && FG0KW00.FG0KWLIX <= FG0KW00.FG0KWSIN[FG0KWSNX] /* no mos in sesn*/
   && FG0KW00.FG0KWLIX <= 6)
    ;
    FG0KW00.FG0KWWQT[FG0KWLIX] = FG0KW03.FG0KWMTQ[FG0KWIDX];
    FG0KW00.FG0KWUMT = FG0KW03.FG0KWUMT[FG0KWIDX] + FG0KW00.FG0KWUMT;
    ;
    FG0KW00.FG0KWIDX = FG0KW00.FG0KWIDX + 1; /* increment work index*/
    FG0KW00.FG0KWLIX = FG0KW00.FG0KWLIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FG0K218

// Load tot & pct for total line
Function FG0K219()
  ;
   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/
  ;
  if (FG0KW00.FG0KWLIX > FG0KW00.FG0KWSIN[FG0KWSNX]) /* load the whole sesn*/
    ;
    FG0KS43(); /* translate and load subtotal*/
    FG0KS44(); /* load range total*/
    FG0KS45(); /* calculate and load percent*/
    ;
  end
end // end FG0K219

// Load the remaining montly pct
Function FG0K220()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Monthly percent or subtotal percent)*/
   /*  */
   /* load subtotal percent for the percent line*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months and subtotal*/
   /* --------------------------------------------------------------*/
  ;
  FG0KW00.FG0KWREM = FG0KW00.FG0KWSIN[FG0KWSNX] - 6; /* remaining mos*/
  ;
  while (FG0KW00.FG0KWIDX <= FFZREC.FFZNUMMO  /* nbr of mos loaded*/
   && FG0KW00.FG0KWLIX <= FG0KW00.FG0KWREM /* nbr of mos left*/
   && FG0KW00.FG0KWLIX <= 6) /* right end*/
    ;
    if (FG0KW03.FG0KWUMT[FG0KWTIX] > 0)
      FG0KW00.FG0KWNM1 = FG0KW03.FG0KWUMT[FG0KWIDX] * 100;
      FG0KW00.FG0KWNPT = mathLib.round(FG0KW00.FG0KWNM1 /                        FG0KW03.FG0KWUMT[FG0KWTIX], -mathLib.decimals(FG0KW00.FG0KWNPT));
      ;
      /* ----------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* ----------------------------------------------------------*/
      ;
      if (FG0KW00.FG0KWNPT != 0)
        FG0KW00.FG0KWPTW = FG0KW00.FG0KWNP1;
        FG0KW00.FG0KWPTP = ".";
        FG0KW00.FG0KWPTD = FG0KW00.FG0KWNP2;
        ;
        if (FG0KW00.FG0KWPT1 == "0")
          FG0KW00.FG0KWPT1 = " ";
          if (FG0KW00.FG0KWPT2 == "0")
            FG0KW00.FG0KWPT2 = " ";
          end
        end
        ;
        FG0KW00.FG0KWWQT[FG0KWLIX] = FG0KW00.FG0KWPCT;
        ;
      end
    end
    ;
    FG0KW00.FG0KWIDX = FG0KW00.FG0KWIDX + 1; /* increment work index*/
    FG0KW00.FG0KWLIX = FG0KW00.FG0KWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0KS46(); /* translate and load subtotal*/
  ;
  FG0KW00.FG0KW-NEXT = "Y"; /* next season*/
  ;
end // end FG0K220

// Load monthly pcts
Function FG0K221()
  while (FG0KW00.FG0KWIDX <= FFZREC.FFZNUMMO            /* nbr mos loaded*/
   && FG0KW00.FG0KWLIX <= FG0KW00.FG0KWSIN[FG0KWSNX] /* no mos reqstd*/
   && FG0KW00.FG0KWLIX <= 6) /* right end*/
    ;
    /* ----------------------------------------------------------*/
     /* calculate and load product line monthly percents*/
    /* ----------------------------------------------------------*/
    ;
    if (FG0KW03.FG0KWUMT[FG0KWTIX] > 0)
      FG0KW00.FG0KWNM1 = FG0KW03.FG0KWUMT[FG0KWIDX] * 100;
      FG0KW00.FG0KWNPT = mathLib.round(FG0KW00.FG0KWNM1 / FG0KW03.FG0KWUMT[FG0KWTIX], -mathLib.decimals(FG0KW00.FG0KWNPT));
      ;
      /* ----------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* ----------------------------------------------------------*/
      ;
      if (FG0KW00.FG0KWNPT != 0)
        FG0KW00.FG0KWPTW = FG0KW00.FG0KWNP1;
        FG0KW00.FG0KWPTP = ".";
        FG0KW00.FG0KWPTD = FG0KW00.FG0KWNP2;
        ;
        if (FG0KW00.FG0KWPT1 == "0")
          FG0KW00.FG0KWPT1 = " ";
          if (FG0KW00.FG0KWPT2 == "0")
            FG0KW00.FG0KWPT2 = " ";
          end
        end
        ;
        FG0KW00.FG0KWWQT[FG0KWLIX] = FG0KW00.FG0KWPCT;
        ;
      end
    end
    ;
    FG0KW00.FG0KWIDX = FG0KW00.FG0KWIDX + 1; /* increment work index*/
    FG0KW00.FG0KWLIX = FG0KW00.FG0KWLIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FG0K221

// Load subtot & pct for pct line
Function FG0K222()
  ;
   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/
  ;
  if (FG0KW00.FG0KWLIX > FG0KW00.FG0KWSIN[FG0KWSNX]) /* load the whole sesn*/
    ;
    FG0KS46(); /* translate and load subtotal*/
    ;
    if (FG0KW00.FG0KWIDX > FFZREC.FFZNUMMO) /* Reach the no of mo reqstd*/
      ;
    else
      FG0KW00.FG0KW-NEXT = "Y"; /* next season*/
    end
    ;
  else
    ;
    FG0KW00.FG0KWSIX = FG0KW00.FG0KWPGX + 1;
    FG0KW00.FG0KW-PMON[FG0KWSIX] = "Y";
    ;
  end
end // end FG0K222

// Check attention identifier
Function FG0K300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FG0KW00.FG0KWSWF = "Y"; /* format screen m001*/
    FG0KW00.FG0KWSWR = "N"; /* request for data*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FG0KS01(); /* purge temp storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      FG0KW00.FG0KWSWF = "Y"; /* format screen m001*/
      FG0KW00.FG0KWSWR = "N"; /* request for data*/
      ;
      set FG0KM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0KM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FG0L"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FG0M"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FG0N"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG0KW00.FG0KWSWF = "Y"; /* format screen m001*/
    FG0KW00.FG0KWSWR = "N"; /* request for data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf10  /* pf10 was not pressed*/
   && converseVar.eventKey not pf11  /* pf11 was not pressed*/
  )                                 
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0K300

// Reset highlighted fields
Function FG0K400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0KM001.FG0KMBRG initialAttributes; /* begin range*/
  set FG0KM001.FG0KMERG initialAttributes; /* end range*/
  set FG0KM001.YPGCD initialAttributes; /* product type group*/
  set FG0KM001.XQACD initialAttributes; /* quality code*/
  set FG0KM001.XLCCD initialAttributes; /* life cycle code*/
  set FG0KM001.FFW-ND-SHP-IND initialAttributes; /* need month/ship month ind*/
  set FG0KM001.FG0KMSEM[1] initialAttributes; /* season end month*/
  set FG0KM001.FG0KMSEM[2] initialAttributes; /* season end month*/
  set FG0KM001.FG0KMSEM[3] initialAttributes; /* season end month*/
  set FG0KM001.FG0KMSEM[4] initialAttributes; /* season end month*/
  ;
  set FG0KM001.CATOAP initialAttributes;
  set FG0KM001.CAITEM initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KM001.XQACD == "?" /* quality code*/
   || FG0KM001.YPGCD == "?") /* product type grp*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of quality codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KM001.XQACD == "?") /* quality codes requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "QUALITY CODES "; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0KM001.XQACD = FG0KW00.XQACD; /* Restore prior code*/
      FG0KM001.XQAABRV = FG0KW00.XQAABRV; /* Restore abrv desc*/
    else
      FG0KM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
      FG0KM001.XQAABRV = XQATBL.XQAABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0KM001.XQACD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KM001.YPGCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/
    ;
    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0KM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0KM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG0KM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0KM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0KM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0K400

// Verify the entered data
Function FG0K500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0KM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify request to scroll forward(pf7) or backwards(pf8)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    ;
    FG0K510(); /* verify scroll fwrd/back request*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify request to scroll right(pf11) or left(pf10)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10
   || converseVar.eventKey is pf11)
    ;
    FG0K520(); /* verify scroll left/right*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if ezeaid is not equal to enter verify modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter)
    ;
    FG0KS10(); /* verify modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    FG0KW00.FG0KWWYM = FFWREC.FFABEGMO; /* begin month*/
    FG0KW00.FG0KW-WYM1 = FFWREC.FFAENDMO; /* end month*/
    ;
    if (FG0KM001.FG0KMSEM[1] != FG0KW00.FG0KWSEM[1] /* sesn end month*/
     || FG0KM001.FG0KMSEM[2] != FG0KW00.FG0KWSEM[2] 
     || FG0KM001.FG0KMSEM[3] != FG0KW00.FG0KWSEM[3] 
     || FG0KM001.FG0KMSEM[4] != FG0KW00.FG0KWSEM[4] 
     || FG0KM001.FFW-ND-SHP-IND != FG0KW00.FFW-ND-SHP-IND
     || FG0KM001.FFW-ND-SHP-IND == " "              
     || FG0KM001.XLCCD != FG0KW00.XLCCD             /* life cycle code changed*/
     || FG0KM001.XLCCD == " "                       /* life cycle code changed*/
     || FG0KM001.XQACD != FG0KW00.XQACD             /* quality code changed*/
     || FG0KM001.XQACD == " "                       /* quality code changed*/
     || FG0KM001.YPGCD != FFWREC.YPGCD              /* product type grp chg*/
     || FG0KM001.YPGCD == " "                       /* product type grp chg*/
     || FG0KM001.FG0KMBRG != FG0KW00.FG0KWWYM       /* beg range changed*/
     || FG0KM001.FG0KMBRG == 0                      /* beg range changed*/
     || FG0KM001.FG0KMERG != FG0KW00.FG0KW-WYM1     /* end range changed*/
     || FG0KM001.FG0KMERG == 0)                     /* end range changed*/
      ;
      FG0KW00.FG0KWSNX = 1; /* season index*/
      FG0KW00.FG0KWPGX = 1; /* page index*/
      FG0KW00.XXXTSPAG = 1; /* page number*/
      move "N" to FG0KW00.FG0KW-PMON[1] for all; /* print remaining month flag*/
      FG0KW00.FG0KW-NEXT = "N"; /* next season flag*/
      FG0KW00.FG0KWUMT = 0;
      move 0 to FG0KW00.FG0KWUST[1] for all;
      ;
    end
    ;
    FG0K530(); /* validate entry fields*/
    ;
    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FG0KW00.FG0KWWYM = FFWREC.FFABEGMO; /* begin month*/
    FG0KW00.FG0KW-WYM1 = FFWREC.FFAENDMO; /* end month*/
    ;
    if (FG0KM001.FFW-ND-SHP-IND != FG0KW00.FFW-ND-SHP-IND
     || FG0KM001.FFW-ND-SHP-IND == " "          /* need mo/ship mo changed*/
     || FG0KM001.XLCCD != FG0KW00.XLCCD         /* life cycle code changed*/
     || FG0KM001.XLCCD == " "                   /* life cycle code changed*/
     || FG0KM001.XQACD != FG0KW00.XQACD         /* quality code changed*/
     || FG0KM001.XQACD == " "                   /* quality code changed*/
     || FG0KM001.YPGCD != FFWREC.YPGCD          /* product type grp chg*/
     || FG0KM001.YPGCD == " "                   /* product type grp chg*/
     || FG0KM001.FG0KMBRG != FG0KW00.FG0KWWYM   /* beg range changed*/
     || FG0KM001.FG0KMBRG == 0                  /* beg range changed*/
     || FG0KM001.FG0KMERG != FG0KW00.FG0KW-WYM1 /* end range changed*/
     || FG0KM001.FG0KMERG == 0)                 /* end range changed*/
      ;
      if (converseVar.validationMsgNum == 0)
        FG0KW00.FG0KWSWR = "Y"; /* request data request*/
      end
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
  ;
end // end FG0K500

// verify scroll fwrd/back
Function FG0K510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0KW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0KW00.XXXTSPAG >= FG0KW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FG0K510

// verify scroll left/right
Function FG0K520()
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left request*/
    if (FG0KW00.FG0KWPGX == 1) /* and no previous pages*/
      ;
      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(23); /* No previous page to display*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FG0KW00.FG0KWIDX > FFZREC.FFZNUMMO) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(24); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FG0K520

// validate modifiable data
Function FG0K530()
   /* --------------------------------------------------------------*/
   /* convert the format of begin and end dates from yymm to ccyymm*/
   /* --------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FG0KM001.FG0KMBRG;
  FFZREC.FFZEYYMM = FG0KM001.FG0KMERG;
  ;
  XSFFS30(); /* edit date range*/
  ;
   /* ------------------------------------------------------------*/
   /* validate number of months in season entries*/
   /* ------------------------------------------------------------*/
  ;
  FG0KS30(); /* validate the season end months*/
  ;
   /* ------------------------------------------------------------*/
   /* validate need month/ship month indicator*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KM001.FFW-ND-SHP-IND == "N"
   || FG0KM001.FFW-ND-SHP-IND == "S"
  )
    /* valid entries*/
  else
    converseLib.validationFailed(10); /* invalid value entered*/
    FFWREC.XXXMODID = "530";
    set FG0KM001.FFW-ND-SHP-IND cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate life cycle code*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KM001.XQACD == "02" /* b-grade*/
   && FG0KM001.XLCCD == "*") /* all*/
    ;
    /* NEXT SENTENCE*/
    ;
  else
    if (FG0KM001.XLCCD == "10"
     && FG0KM001.XLCCD in XLCTBL.XLCCD)
      FG0KM001.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
    else
      if (FG0KM001.XLCCD == "20"
       && FG0KM001.XLCCD in XLCTBL.XLCCD)
        FG0KM001.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
      else
        FG0KM001.XLCABRV = " ";
        converseLib.validationFailed(118);
        FFWREC.XXXMODID = "530";
        set FG0KM001.XLCCD cursor, bold;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate quality code*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KM001.XQACD in XQATBL.XQACD
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0KM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  else
    FG0KM001.XQAABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "530";
    set FG0KM001.XQACD cursor, bold;
  end
  ;
  if (FG0KM001.XQACD == "02") /* b-grade*/
    FG0KM001.XLCCD = "*"; /* override life cycle code*/
    FG0KM001.XLCABRV = "ALL";
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0KM001.YPGCD != "*")
    if (FG0KM001.YPGCD in YPGTBL.YPGCD
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FG0KM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    else
      FG0KM001.YPGABRV = " ";
      converseLib.validationFailed(118);
      FFWREC.XXXMODID = "530";
      set FG0KM001.YPGCD cursor, bold;
    end
  else
    FG0KM001.YPGABRV = "ALL";
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0KM001.FG0KMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "530";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0KM001.FG0KMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "530";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0KM001.FG0KMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "530";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0KM001.FG0KMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "530";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0KM001.FG0KMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "530";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0KM001.FG0KMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "530";
      end
    end
  end
  ;
  ;
end // end FG0K530

// Process valid input request
Function FG0K600()
  ;
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FG0KW00.FG0KWSWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FG0KW00.XLCCD = FG0KM001.XLCCD; /* life cycle code*/
  FG0KW00.XLCABRV = FG0KM001.XLCABRV; /* life cycle abrv desc*/
  ;
  FG0KW00.XQACD = FG0KM001.XQACD; /* quality code*/
  FG0KW00.XQAABRV = FG0KM001.XQAABRV; /* quality abrv desc*/
  ;
  FFWREC.YPGCD = FG0KM001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FG0KM001.YPGABRV; /* product type grp abrv desc*/
  ;
  FFWREC.FFW-ND-SHP-IND = FG0KM001.FFW-ND-SHP-IND;
  FG0KW00.FFW-ND-SHP-IND = FG0KM001.FFW-ND-SHP-IND;
  ;
  FFWREC.FFWENDM1 = FG0KW00.FG0KWSMO[1]; /* season end month*/
  FFWREC.FFWENDM2 = FG0KW00.FG0KWSMO[2]; /* season end month*/
  FFWREC.FFWENDM3 = FG0KW00.FG0KWSMO[3]; /* season end month*/
  FFWREC.FFWENDM4 = FG0KW00.FG0KWSMO[4]; /* season end month*/
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  ;
  if (converseVar.eventKey is enter
   && FG0KW00.FG0KWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* display next season*/
    FG0KW00.XXXTSPAG = FG0KW00.XXXTSPAG - 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* display next season*/
    FG0KW00.XXXTSPAG = FG0KW00.XXXTSPAG + 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll left*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* display prior season*/
    ;
    FG0KW00.FG0KWPGX = FG0KW00.FG0KWPGX - 1; /* prev left page*/
    FG0KW00.FG0KWSNX = FG0KW00.FG0KW-PAGS[FG0KWPGX];
    FG0KW00.FG0KW-NEXT = "N";
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll right*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* display next season*/
    ;
    FG0KW00.FG0KWPGX = FG0KW00.FG0KWPGX + 1; /* next right page*/
    FG0KW00.FG0KW-PAGP[FG0KWPGX] = FG0KW00.FG0KWIDX; /* starting point*/
                                  /* of next page*/
    if (FG0KW00.FG0KW-NEXT == "Y") /* next season*/
      FG0KW00.FG0KWSNX = FG0KW00.FG0KWSNX + 1;
      FG0KW00.FG0KW-NEXT = "N";
    end
    ;
    FG0KW00.FG0KW-PAGS[FG0KWPGX] = FG0KW00.FG0KWSNX;
                                   /* sesn of the pag*/
    ;
    return;
  end
  ;
  ;
end // end FG0K600

// purge temporary storage
Function FG0KS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0KW01 empty; /* header data*/
  set FG0KW02 empty; /* M001 temporary storage detail*/
  set FG0KW03 empty; /* columns totals*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0KW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FG0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0KS01

// read temporary storage
Function FG0KS09()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  FG0KW02.XXXTSLEN = FG0KW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FG0KW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FG0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S09"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0KS09

// verify modifiable fields
Function FG0KS10()
   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter)
    FG0KW00.FG0KWPIX = 1;
    while (FG0KW00.FG0KWPIX <= 4)
      if (FG0KM001.FG0KMSEM[FG0KWPIX] != FG0KW00.FG0KWSEM[FG0KWPIX])
        set FG0KM001.FG0KMSEM[FG0KWPIX] cursor, bold;
        converseLib.validationFailed(111);
        FFWREC.XXXMODID = "S10";
      end
      FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX + 1;
    end
  end
  ;
  if (FG0KM001.FFW-ND-SHP-IND != FFWREC.FFW-ND-SHP-IND)
    set FG0KM001.FFW-ND-SHP-IND cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S10";
  end
  ;
  if (FG0KM001.XLCCD != FG0KW00.XLCCD)
    set FG0KM001.XLCCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S10";
  end
  ;
  if (FG0KM001.XQACD != FG0KW00.XQACD)
    set FG0KM001.XQACD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S10";
  end
  ;
  if (FG0KM001.YPGCD != FFWREC.YPGCD)
    set FG0KM001.YPGCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S10";
  end
  ;
  FG0KW00.FG0KWWED = FFWREC.FFAENDMO;
  if (FG0KM001.FG0KMERG != FG0KW00.FG0KWEYM)
    set FG0KM001.FG0KMERG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S10";
  end
  ;
  FG0KW00.FG0KWWBD = FFWREC.FFABEGMO;
  if (FG0KM001.FG0KMBRG != FG0KW00.FG0KWBYM)
    set FG0KM001.FG0KMBRG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S10";
  end
  ;
  ;
end // end FG0KS10

// validate season end months
Function FG0KS30()
  ;
   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDMO == 0) /* passed from other application*/
    FG0KW00.FG0KWWBD = FFWREC.FFABEGMO; /* beginning date*/
    FG0KW00.FG0KWWED = FFWREC.FFAENDMO; /* ending date*/
  else
    FG0KW00.FG0KWWBD = FFZREC.FFZBEGMO; /* beginning date*/
    FG0KW00.FG0KWWED = FFZREC.FFZENDMO; /* ending date*/
  end
  ;
   /* figure out number of seasons*/
  ;
  FG0KW00.FG0KWPIX = 4; /* index*/
  while (FG0KW00.FG0KWPIX > 0)
    ;
    FG0KW00.FG0KWSEM[FG0KWPIX] = 0;
    FG0KW00.FG0KWSMO[FG0KWPIX] = 0;
    FG0KW00.FG0KWSIN[FG0KWPIX] = 0;
    ;
    FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 1;
    /*  */
  end
  ;
  FG0KW00.FG0KWNSS = 0; /* reset number of seasons*/
  FG0KW00.FG0KWPIX = 4; /* index*/
  while (FG0KW00.FG0KWPIX > 0)
    if (FG0KM001.FG0KMSEM[FG0KWPIX] > 0)
      FG0KW00.FG0KWNSS = FG0KW00.FG0KWPIX; /* number of seasons*/
      FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 4; /* force out of loop*/
      ;
    else
      ;
      FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 1;
    end
    ;
  end
  ;
   /* If no season end month entered then check the length of the range,*/
   /* if <= 6 months use default (end month of the range)*/
  ;
  if (FG0KW00.FG0KWNSS == 0) /* no season lengths found*/
    if (FG0KW00.FG0KWBYY == FG0KW00.FG0KWEYY) /* same year*/
      FG0KW00.FG0KWNM1 = FG0KW00.FG0KWEMM - FG0KW00.FG0KWBMM + 1;
    else
      FG0KW00.FG0KWNM1 = FG0KW00.FG0KWEMM + 12 - FG0KW00.FG0KWBMM + 1;
    end
    ;
    if (FG0KW00.FG0KWNM1 <= 6)
      FG0KW00.FG0KWNSS = 1;
      FG0KM001.FG0KMSEM[1] = FG0KW00.FG0KWEMM; /* range end month*/
    end
  end
  ;
   /* check for no seasons entered*/
  ;
  if (FG0KW00.FG0KWNSS == 0) /* no season lengths found*/
    FFWREC.XXXMODID = "S30"; /* Module identification*/
    set FG0KM001.FG0KMSEM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(448); /* required field*/
    return;
  end
  ;
   /* check for embedded zeros*/
  ;
  FG0KW00.FG0KWPIX = FG0KW00.FG0KWNSS; /* index*/
  while (FG0KW00.FG0KWPIX > 0)
    if (FG0KM001.FG0KMSEM[FG0KWPIX] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "S30"; /* Module identification*/
      set FG0KM001.FG0KMSEM[FG0KWPIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* required field*/
    end
    FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 1;
  end
  ;
  if (converseVar.validationMsgNum > 0)
    return;
  end
  ;
   /* check for invalid season end months*/
  ;
  FG0KW00.FG0KWPIX = FG0KW00.FG0KWNSS; /* index*/
  while (FG0KW00.FG0KWPIX > 0)
    ;
    if (FG0KM001.FG0KMSEM[FG0KWPIX] < 1 /* check for month error*/
     || FG0KM001.FG0KMSEM[FG0KWPIX] > 12)
      FFWREC.XXXMODID = "S30"; /* Module identification*/
      set FG0KM001.FG0KMSEM[FG0KWPIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* required field*/
      return;
    end
    ;
    if (FG0KM001.FG0KMSEM[FG0KWPIX] != FG0KW00.FG0KWEMM
     && FG0KW00.FG0KWPIX == FG0KW00.FG0KWNSS) /* last end month*/
      FFWREC.XXXMODID = "S30"; /* Module identification*/
      set FG0KM001.FG0KMSEM[FG0KWPIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* required field*/
      return;
      ;
    else
      ;
      FG0KS31(); /* check for invalid entry*/
      ;
    end
    ;
    FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 1;
    ;
  end
  ;
  FG0KW00.FG0KWPIX = FG0KW00.FG0KWNSS;
  while (FG0KW00.FG0KWPIX > 0) /* nbr of seasons*/
    FG0KW00.FG0KWLIX = FG0KW00.FG0KWPIX - 1;
    if (FG0KW00.FG0KWLIX != 0)
      if (FG0KW00.FG0KWSMO[FG0KWLIX] >= FG0KW00.FG0KWSMO[FG0KWPIX])
        FFWREC.XXXMODID = "S30"; /* Module identification*/
        set FG0KM001.FG0KMSEM[FG0KWLIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* sesn end mo > next sesn end mo*/
      end
    end
    FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 1;
  end
  ;
  FG0KW00.FG0KWPIX = FG0KW00.FG0KWNSS;
  FG0KW00.FG0KWNM1 = 0; /* clear total months work area*/
  while (FG0KW00.FG0KWPIX > 0) /* nbr of seasons*/
    FG0KW00.FG0KWSEM[FG0KWPIX] = FG0KM001.FG0KMSEM[FG0KWPIX];
    FG0KS32(); /* calculate no of mos in each sesn*/
    FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 1;
  end
  ;
  ;
end // end FG0KS30

// verify entered end months
Function FG0KS31()
  ;
   /* --------------------------------------------------------*/
   /* beginning date and ending date are in the same year*/
   /* --------------------------------------------------------*/
  ;
  if (FG0KW00.FG0KWBYY == FG0KW00.FG0KWEYY) /* beg year = end year*/
    ;
    if (FG0KM001.FG0KMSEM[FG0KWPIX] >= FG0KW00.FG0KWBMM /* >= beg month*/
     && FG0KM001.FG0KMSEM[FG0KWPIX] <= FG0KW00.FG0KWEMM) /* <= end month*/
      ;
      FG0KW00.FG0KWWCC = FG0KW00.FG0KWBCC; /* plug in centry*/
      FG0KW00.FG0KWWYY = FG0KW00.FG0KWBYY; /* plug in year*/
      FG0KW00.FG0KWWMM = FG0KM001.FG0KMSEM[FG0KWPIX]; /* plug in month*/
      ;
    else
      ;
      FFWREC.XXXMODID = "S31"; /* module identification*/
      converseLib.validationFailed(010); /* invalid data*/
      set FG0KM001.FG0KMSEM[FG0KWPIX] cursor, bold;
      ;
    end
    ;
  else
    ;
      /* --------------------------------------------------------*/
      /* beginning date and ending date are in the different years*/
      /* --------------------------------------------------------*/
    ;
      /* season end month falls in the same year as begin month*/
    ;
    if (FG0KM001.FG0KMSEM[FG0KWPIX] >= FG0KW00.FG0KWBMM) /* >= beg mo*/
      ;
      FG0KW00.FG0KWWCC = FG0KW00.FG0KWBCC; /* plug in centry*/
      FG0KW00.FG0KWWYY = FG0KW00.FG0KWBYY; /* plug in year*/
      FG0KW00.FG0KWWMM = FG0KM001.FG0KMSEM[FG0KWPIX]; /* plug in month*/
    else
      ;
        /* * season end month falls in the same year as end month*/
      ;
      if (FG0KM001.FG0KMSEM[FG0KWPIX] <= FG0KW00.FG0KWEMM) /* <= end mo*/
        FG0KW00.FG0KWWCC = FG0KW00.FG0KWECC; /* plug in centry*/
        FG0KW00.FG0KWWYY = FG0KW00.FG0KWEYY; /* plug in year*/
        FG0KW00.FG0KWWMM = FG0KM001.FG0KMSEM[FG0KWPIX]; /* plug in month*/
      else
        ;
        FFWREC.XXXMODID = "S31"; /* module identification*/
        converseLib.validationFailed(010); /* invalid data*/
        set FG0KM001.FG0KMSEM[FG0KWPIX] cursor, bold;
        ;
      end
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0)
    FG0KW00.FG0KWSMO[FG0KWPIX] = FG0KW00.FG0KWWDT; /* save ccyymm*/
  end
  ;
end // end FG0KS31

// Calculate nbr of mos in season
Function FG0KS32()
  FG0KW00.FG0KWWDT = FG0KW00.FG0KWSMO[FG0KWPIX]; /* sesn end mo*/
  ;
  if (FG0KW00.FG0KWPIX == 1) /* 1st season*/
    ;
    if (FG0KW00.FG0KWWMM >= FG0KW00.FG0KWBMM) /* in the same year*/
      FG0KW00.FG0KWSIN[FG0KWPIX] = FG0KW00.FG0KWWDT -                                    FG0KW00.FG0KWWBD + 1;
    else /* in the different year*/
      FG0KW00.FG0KWSIN[FG0KWPIX] = FG0KW00.FG0KWWMM + 12 -                                    FG0KW00.FG0KWBMM + 1;
    end
    ;
  else /* other season*/
    ;
    FG0KW00.FG0KWLIX = FG0KW00.FG0KWPIX - 1;
    FG0KW00.FG0KW-WDT1 = FG0KW00.FG0KWSMO[FG0KWLIX]; /* prev sesn mo*/
    if (FG0KW00.FG0KWWMM > FG0KW00.FG0KW-WMM1) /* in the same year*/
      FG0KW00.FG0KWSIN[FG0KWPIX] = FG0KW00.FG0KWWMM - FG0KW00.FG0KW-WMM1;
    else /* in the different year*/
      FG0KW00.FG0KWSIN[FG0KWPIX] = FG0KW00.FG0KWWMM + 12 -                                    FG0KW00.FG0KW-WMM1;
    end
    ;
  end
  ;
end // end FG0KS32

// Cal no of sesn and mos in sesn
Function FG0KS33()
  ;
   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/
  ;
  FG0KW00.FG0KWWBD = FFWREC.FFABEGMO; /* beginning date*/
  FG0KW00.FG0KWWED = FFWREC.FFAENDMO; /* ending date*/
  ;
  FG0KW00.FG0KWSMO[1] = FFWREC.FFWENDM1;
  FG0KW00.FG0KWWDT = FFWREC.FFWENDM1;
  FG0KW00.FG0KWSEM[1] = FG0KW00.FG0KWWMM;
  ;
  FG0KW00.FG0KWSMO[2] = FFWREC.FFWENDM2;
  FG0KW00.FG0KWWDT = FFWREC.FFWENDM2;
  FG0KW00.FG0KWSEM[2] = FG0KW00.FG0KWWMM;
  ;
  FG0KW00.FG0KWSMO[3] = FFWREC.FFWENDM3;
  FG0KW00.FG0KWWDT = FFWREC.FFWENDM3;
  FG0KW00.FG0KWSEM[3] = FG0KW00.FG0KWWMM;
  ;
  FG0KW00.FG0KWSMO[4] = FFWREC.FFWENDM4;
  FG0KW00.FG0KWWDT = FFWREC.FFWENDM4;
  FG0KW00.FG0KWSEM[4] = FG0KW00.FG0KWWMM;
  ;
   /* figure out number of seasons*/
  ;
  FG0KW00.FG0KWPIX = 4; /* index*/
  while (FG0KW00.FG0KWPIX > 0)
    ;
    FG0KW00.FG0KWSIN[FG0KWPIX] = 0;
    ;
    FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 1;
    /*  */
  end
  ;
  FG0KW00.FG0KWNSS = 0; /* reset number of seasons*/
  FG0KW00.FG0KWPIX = 4; /* index*/
  while (FG0KW00.FG0KWPIX > 0)
    if (FG0KW00.FG0KWSEM[FG0KWPIX] > 0)
      FG0KW00.FG0KWNSS = FG0KW00.FG0KWPIX; /* number of seasons*/
      FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 4; /* force out of loop*/
      ;
    else
      ;
      FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 1;
    end
    ;
  end
  ;
  FG0KW00.FG0KWPIX = FG0KW00.FG0KWNSS;
  while (FG0KW00.FG0KWPIX > 0) /* nbr of seasons*/
    FG0KS32(); /* calculate no of mos in each sesn*/
    FG0KW00.FG0KWPIX = FG0KW00.FG0KWPIX - 1;
  end
  ;
  ;
end // end FG0KS33

// Translate and load subtotal
Function FG0KS40()
  ;
   /* ----------------------------------------------------------*/
   /* translate/load subtotal*/
   /* ----------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0KW00.FG0KWUST[FG0KWPIX];
  XSFFS10();
  FG0KW00.FG0KWWQT[7] = FFXREC.FFXCHAR;
  ;
  ;
end // end FG0KS40

// load the range total
Function FG0KS41()
  ;
   /* ----------------------------------------------------------*/
   /* load range total*/
   /* ----------------------------------------------------------*/
  ;
  FG0KW00.FG0KWWQT[8] = FG0KW00.FG0KWQTY[FG0KWTIX];
  ;
end // end FG0KS41

// Calculate and load pct
Function FG0KS42()
   /* ----------------------------------------------------------*/
   /* calculate and load product line percent*/
   /* ----------------------------------------------------------*/
  ;
  if (FG0KW03.FG0KWUMT[FG0KWTIX] > 0)
    FG0KW00.FG0KWNM1 = FG0KW00.FG0KWUQT[FG0KWTIX] * 100;
    FG0KW00.FG0KWNPT = mathLib.round(FG0KW00.FG0KWNM1 / FG0KW03.FG0KWUMT[FG0KWTIX], -mathLib.decimals(FG0KW00.FG0KWNPT));
    ;
    /* --------------------------------------------------------*/
     /* zero suppress the percent field*/
    /* --------------------------------------------------------*/
    if (FG0KW00.FG0KWNPT != 0)
      ;
      FG0KW00.FG0KWPTW = FG0KW00.FG0KWNP1;
      FG0KW00.FG0KWPTP = ".";
      FG0KW00.FG0KWPTD = FG0KW00.FG0KWNP2;
      ;
      if (FG0KW00.FG0KWPT1 == "0")
        FG0KW00.FG0KWPT1 = " ";
        if (FG0KW00.FG0KWPT2 == "0")
          FG0KW00.FG0KWPT2 = " ";
        end
      end
      ;
      FG0KW00.FG0KWWQT[9] = FG0KW00.FG0KWPCT;
      ;
    end
  end
  ;
end // end FG0KS42

// Trnslt & load sub for tot line
Function FG0KS43()
  ;
   /* ----------------------------------------------------------*/
   /* translate/load subtotal for the total line*/
   /* ----------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0KW00.FG0KWUMT;
  XSFFS10();
  FG0KW00.FG0KWWQT[7] = FFXREC.FFXCHAR;
  ;
end // end FG0KS43

// Load range total for tot line
Function FG0KS44()
  ;
   /* ----------------------------------------------------------*/
   /* load range total for the total line*/
   /* ----------------------------------------------------------*/
  ;
  FG0KW00.FG0KWWQT[8] = FG0KW03.FG0KWMTQ[FG0KWTIX];
  ;
end // end FG0KS44

// Calc and load pct for tot line
Function FG0KS45()
  ;
   /* ----------------------------------------------------------*/
   /* calculate and load monthly total percent*/
   /* ----------------------------------------------------------*/
  ;
  if (FG0KW03.FG0KWUMT[FG0KWTIX] > 0)
    FG0KW00.FG0KWNM1 = FG0KW00.FG0KWUMT * 100;
    FG0KW00.FG0KWNPT = mathLib.round(FG0KW00.FG0KWNM1 / FG0KW03.FG0KWUMT[FG0KWTIX], -mathLib.decimals(FG0KW00.FG0KWNPT));
    ;
    /* --------------------------------------------------------*/
     /* zero suppress the percent field*/
    /* --------------------------------------------------------*/
    if (FG0KW00.FG0KWNPT != 0)
      ;
      FG0KW00.FG0KWPTW = FG0KW00.FG0KWNP1;
      FG0KW00.FG0KWPTP = ".";
      FG0KW00.FG0KWPTD = FG0KW00.FG0KWNP2;
      ;
      if (FG0KW00.FG0KWPT1 == "0")
        FG0KW00.FG0KWPT1 = " ";
        if (FG0KW00.FG0KWPT2 == "0")
          FG0KW00.FG0KWPT2 = " ";
        end
      end
      ;
      FG0KW00.FG0KWWQT[9] = FG0KW00.FG0KWPCT;
      ;
    end
  end
  ;
end // end FG0KS45

// Calc and load subtot pct
Function FG0KS46()
   /* ----------------------------------------------------------*/
   /* calculate and load product line monthly subtotal percent*/
   /* ----------------------------------------------------------*/
  ;
  if (FG0KW03.FG0KWUMT[FG0KWTIX] > 0)
    FG0KW00.FG0KWNM1 = FG0KW00.FG0KWUMT * 100;
    FG0KW00.FG0KWNPT = mathLib.round(FG0KW00.FG0KWNM1 / FG0KW03.FG0KWUMT[FG0KWTIX], -mathLib.decimals(FG0KW00.FG0KWNPT));
    ;
    /* ----------------------------------------------------------*/
     /* zero suppress the percent field*/
    /* ----------------------------------------------------------*/
    ;
    if (FG0KW00.FG0KWNPT != 0)
      FG0KW00.FG0KWPTW = FG0KW00.FG0KWNP1;
      FG0KW00.FG0KWPTP = ".";
      FG0KW00.FG0KWPTD = FG0KW00.FG0KWNP2;
      ;
      if (FG0KW00.FG0KWPT1 == "0")
        FG0KW00.FG0KWPT1 = " ";
        if (FG0KW00.FG0KWPT2 == "0")
          FG0KW00.FG0KWPT2 = " ";
        end
      end
      ;
      FG0KW00.FG0KWWQT[7] = FG0KW00.FG0KWPCT;
      ;
    end
  end
  ;
  ;
end // end FG0KS46

//*** RECORD=FG0KW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0KW00 type basicRecord
  10 FG0KWNSS FG0KWNSS ; 
  10 FG0KWSIN FG0KWSIN [4] ; 
  10 FG0KWSEM FG0KWSEM [4] ; 
  10 FG0KWSMO FG0KWSMO [4] ; 
  10 XLCCD XLCCD ; 
  10 XLCABRV XLCABRV ; 
  10 XQACD XQACD ; 
  10 XQAABRV XQAABRV ; 
  10 FG0KWSWR FG0KWSWR ; 
  10 FG0KWSWF FG0KWSWF ; 
  10 FG0KWSWD FG0KWSWD ; 
  10 FG0KWNM1 FG0KWNM1 ; 
  10 FG0KWNM2 FG0KWNM2 ; 
  10 FG0KWNPT FG0KWNPT ; 
    15 FG0KWNP1 FG0KWNP1 ; 
    15 FG0KWNP2 FG0KWNP2 ; 
  10 FG0KWPCT FG0KWPCT ; 
    15 FG0KWPTW FG0KWPTW ; 
      20 FG0KWPT1 FG0KWPT1 ; 
      20 FG0KWPT2 FG0KWPT2 ; 
      20 FG0KWPT3 FG0KWPT3 ; 
    15 FG0KWPTP FG0KWPTP ; 
    15 FG0KWPTD FG0KWPTD ; 
  10 FG0KWUTQ FG0KWUTQ ; 
  10 FG0KWUMT FG0KWUMT ; 
  10 FG0KWUST FG0KWUST [13] ; 
  10 FG0KWUHS FG0KWUHS ; 
  10 FG0KWWQT FG0KWWQT [9] ; 
  10 FG0KWLQT FG0KWLQT ; 
    15 FG0KWUQT FG0KWUQT [13] ; 
    15 FG0KWQTY FG0KWQTY [13] ; 
  10 FG0KWCOF FG0KWCOF ; 
  10 FG0KWBGF FG0KWBGF ; 
  10 FG0KWIDX FG0KWIDX ; 
  10 FG0KWTIX FG0KWTIX ; 
  10 FG0KWPGX FG0KWPGX ; 
  10 FG0KWLIX FG0KWLIX ; 
  10 FG0KWSIX FG0KWSIX ; 
  10 FG0KWPIX FG0KWPIX ; 
  10 FG0KWSNX FG0KWSNX ; 
  10 FG0KWCWD FG0KWCWD ; 
    15 FG0KWCYM FG0KWCYM ; 
      20 FG0KWCCC FG0KWCCC ; 
      20 FG0KWCYY FG0KWCYY ; 
      20 FG0KWCMM FG0KWCMM ; 
    15 FG0KWCDD FG0KWCDD ; 
  10 FG0KW-CURR-MO FG0KW-CURR-MO ; 
  10 FG0KW-CURR-MO-MINUS1 FG0KW-CURR-MO-MINUS1 ; 
  10 FG0KW-CURR-MO-MINUS2 FG0KW-CURR-MO-MINUS2 ; 
  10 FG0KW-CURR-MO-MINUS3 FG0KW-CURR-MO-MINUS3 ; 
  10 FG0KW-CURR-MO-MINUS4 FG0KW-CURR-MO-MINUS4 ; 
  10 FG0KWWDT FG0KWWDT ; 
    15 * num(3) ; 
    15 FG0KWWCC FG0KWWCC ; 
    15 FG0KWWYM FG0KWWYM ; 
      20 FG0KWWYY FG0KWWYY ; 
      20 FG0KWWMM FG0KWWMM ; 
  10 FG0KW-WDT1 FG0KW-WDT1 ; 
    15 * num(3) ; 
    15 FG0KW-WCC1 FG0KW-WCC1 ; 
    15 FG0KW-WYM1 FG0KW-WYM1 ; 
      20 FG0KW-WYY1 FG0KW-WYY1 ; 
      20 FG0KW-WMM1 FG0KW-WMM1 ; 
  10 FG0KWWBD FG0KWWBD ; 
    15 * num(3) ; 
    15 FG0KWBCC FG0KWBCC ; 
    15 FG0KWBYM FG0KWBYM ; 
      20 FG0KWBYY FG0KWBYY ; 
      20 FG0KWBMM FG0KWBMM ; 
  10 FG0KWWED FG0KWWED ; 
    15 * num(3) ; 
    15 FG0KWECC FG0KWECC ; 
    15 FG0KWEYM FG0KWEYM ; 
      20 FG0KWEYY FG0KWEYY ; 
      20 FG0KWEMM FG0KWEMM ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0KW-PAGP FG0KW-PAGP [10] ; 
  10 FG0KW-PAGS FG0KW-PAGS [10] ; 
  10 FG0KW-PMON FG0KW-PMON [10] ; 
  10 FG0KWREM FG0KWREM ; 
  10 FG0KW-NEXT FG0KW-NEXT ; 
  10 FFW-ND-SHP-IND FFW-ND-SHP-IND ; 
end // end FG0KW00

//*** RECORD=FG0KW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG0KW01 type basicRecord
  10 CACHGFL CACHGFL ; 
end // end FG0KW01

//*** RECORD=FG0KW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FG0KW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1967) ; 
    10 FG0KWNLD FG0KWNLD ; 
    10 XPLCD XPLCD [15] ; 
    10 XPLSDESC XPLSDESC [15] ; 
    10 FG0KWQTS FG0KWQTS [15] ; 
      15 FG0KWU01 FG0KWU01 ; 
      15 FG0KWQ01 FG0KWQ01 ; 
      15 FG0KWU02 FG0KWU02 ; 
      15 FG0KWQ02 FG0KWQ02 ; 
      15 FG0KWU03 FG0KWU03 ; 
      15 FG0KWQ03 FG0KWQ03 ; 
      15 FG0KWU04 FG0KWU04 ; 
      15 FG0KWQ04 FG0KWQ04 ; 
      15 FG0KWU05 FG0KWU05 ; 
      15 FG0KWQ05 FG0KWQ05 ; 
      15 FG0KWU06 FG0KWU06 ; 
      15 FG0KWQ06 FG0KWQ06 ; 
      15 FG0KWU07 FG0KWU07 ; 
      15 FG0KWQ07 FG0KWQ07 ; 
      15 FG0KWU08 FG0KWU08 ; 
      15 FG0KWQ08 FG0KWQ08 ; 
      15 FG0KWU09 FG0KWU09 ; 
      15 FG0KWQ09 FG0KWQ09 ; 
      15 FG0KWU10 FG0KWU10 ; 
      15 FG0KWQ10 FG0KWQ10 ; 
      15 FG0KWU11 FG0KWU11 ; 
      15 FG0KWQ11 FG0KWQ11 ; 
      15 FG0KWU12 FG0KWU12 ; 
      15 FG0KWQ12 FG0KWQ12 ; 
      15 FG0KWU13 FG0KWU13 ; 
      15 FG0KWQ13 FG0KWQ13 ; 
end // end FG0KW02

//*** RECORD=FG0KW03 ****
// ------------------------------
// map 001 totals display storage
// ------------------------------
// ***********************
Record FG0KW03 type basicRecord
  5 FG0KWGP3 FG0KWGP3 ; 
    10 FG0KWUMT FG0KWUMT [13] ; 
    10 FG0KWMTQ FG0KWMTQ [13] ; 
    10 FG0KWMPT FG0KWMPT [13] ; 
end // end FG0KW03

// curr month
DataItem FG0KW-CURR-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// curr month minus 1
DataItem FG0KW-CURR-MO-MINUS1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// curr month minus 2
DataItem FG0KW-CURR-MO-MINUS2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// curr month minus 3
DataItem FG0KW-CURR-MO-MINUS3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// curr month minus 4
DataItem FG0KW-CURR-MO-MINUS4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Next season flag
DataItem FG0KW-NEXT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// starting point of the page
DataItem FG0KW-PAGP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// processing season of the page
DataItem FG0KW-PAGS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print remaining month flag
DataItem FG0KW-PMON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work century
DataItem FG0KW-WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0KW-WDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0KW-WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0KW-WYM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0KW-WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin century
DataItem FG0KWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cat b-grade fcst
DataItem FG0KWBGF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0KWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0KWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0KWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FG0KWCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work day
DataItem FG0KWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FG0KWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cat closeout fcst
DataItem FG0KWCOF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work ccyymmdd
DataItem FG0KWCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FG0KWCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FG0KWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end century
DataItem FG0KWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0KWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG0KWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0KWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fg0kw03 group level
DataItem FG0KWGP3 char(169)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem FG0KWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load  index
DataItem FG0KWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product line qtys
DataItem FG0KWLQT char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly percent
DataItem FG0KWMPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// monthly sale qtys
DataItem FG0KWMTQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of lines per page
DataItem FG0KWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0KWNM1 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0KWNM2 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0KWNP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0KWNP2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric percent field
DataItem FG0KWNPT num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no of seasons
DataItem FG0KWNSS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char percent field
DataItem FG0KWPCT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page index
DataItem FG0KWPGX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// process index
DataItem FG0KWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0KWPT1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0KWPT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0KWPT3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0KWPTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0KWPTP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0KWPTW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 1
DataItem FG0KWQ01 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 2
DataItem FG0KWQ02 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 3
DataItem FG0KWQ03 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 4
DataItem FG0KWQ04 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 5
DataItem FG0KWQ05 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 6
DataItem FG0KWQ06 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 7
DataItem FG0KWQ07 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 8
DataItem FG0KWQ08 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 9
DataItem FG0KWQ09 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 10
DataItem FG0KWQ10 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 11
DataItem FG0KWQ11 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 12
DataItem FG0KWQ12 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 13
DataItem FG0KWQ13 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product line monthly qtys
DataItem FG0KWQTS char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sale qty 1000
DataItem FG0KWQTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Remaining months
DataItem FG0KWREM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// season end months - mm
DataItem FG0KWSEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of months in season
DataItem FG0KWSIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save index
DataItem FG0KWSIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end months - ccyymm
DataItem FG0KWSMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season index
DataItem FG0KWSNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display map switch
DataItem FG0KWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0KWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0KWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total index
DataItem FG0KWTIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 1
DataItem FG0KWU01 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 2
DataItem FG0KWU02 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 3
DataItem FG0KWU03 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 4
DataItem FG0KWU04 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 5
DataItem FG0KWU05 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 6
DataItem FG0KWU06 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 7
DataItem FG0KWU07 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 8
DataItem FG0KWU08 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 9
DataItem FG0KWU09 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 10
DataItem FG0KWU10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 11
DataItem FG0KWU11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 12
DataItem FG0KWU12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 13
DataItem FG0KWU13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales units
DataItem FG0KWUHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit monthly sale qty
DataItem FG0KWUMT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sale qty units
DataItem FG0KWUQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit sale qty sub total
DataItem FG0KWUST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s product range total
DataItem FG0KWUTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG0KWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0KWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0KWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0KWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0KWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s product line qtys
DataItem FG0KWWQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year and month
DataItem FG0KWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0KWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

