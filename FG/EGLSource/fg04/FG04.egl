package fg04;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS12;
import corpcom4.XSFFS14;
import corpcom4.XSFFS30;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XPCABRV;
import corpx2.XPCCD;
import corpx2.XPLABRV;
import corpx2.XPLCD;
import corpy2.YPGABRV;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import corpy2.YSMSMDSC;
import corpy2.YSMXDV;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import ff.common.*;
import fg.common.FG3PFNBR;
import fg.common.FG3REC;
import fg.common.FG3SUBMO;
import fg.common.FG4BALSH;
import fg.common.FG4ONORD;
import pg.common.PG2REC;
import pg.common.PG4REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SYBREC;
import sy.common.SYBSTGNB;
import sy.common.SYBSTGNM;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FG04 ****
// This application has two major functions.  The first screen
// allows the user to select a particular submitted production
// forecast and the second screen allows the user to view the
// specific data associated with the submitted production fore-
// cast.
// 
// The user must specify the 'FCST Submitted Month'.  He may
// scroll forward and backward to view all models by pressing
// PF7 and PF8.  He may exit to any allowed application, via
// FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/08/89  RHETRI  New application.
// FF2032   09/05/90  RHETRI  Fix for not showing line level
//                            info when fcst subm for 'all'
// Fix      09/18/90  RHETRI  Zero out accum fields for 'all'
// FF2035   11/28/90  RHETRI  Remove FFSTY/FFXRF calls - add
//                            PFHST calls. Allow NIL only prod.
// FF2???   07/01/91  LDELUH  Replace PFHST calls with syclr/
//                            sydvl calls.
// FIX      07/26/91  LDELUH  Chg IO-mods for pscat & pslin.
// FF2050   10/28/91  KSANFO  Replace PFHIST calls with PPSTY01
//                            for verifying data entered.
//                            Fix incorrect Line displayed
//                            when Cat changed problem.
// FF2063   08/07/92  KSTOKK  Add PF key and screen to display
//                            products included on the selected
//                            submitted production forecast.
// FF175    12/12/96  DSMITH  Changed the date range fill
//                            character to '0'.
// ff-1054  12/30/97  RKUDPI  Added code to figure out the
//                            right screen to return to on PF18
// *********************
Program FG04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG04W00 FG04W00; // record
  FG04W01 FG04W01; // record
  FG04W02 FG04W02; // record
  FG04W03 FG04W03; // record
  FG04W04 FG04W04; // record
  FG04W05 FG04W05; // record
  FG04W06 FG04W06; // record
  FG04W07 FG04W07; // record
  FG3REC FG3REC; // record
  FG4REC FG4REC; // record
  FG5REC FG5REC; // record
  FG6REC FG6REC; // record
  FG7REC FG7REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  SQLCA SQLCA; // record
  SYBREC SYBREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use XPLTBL; // table
  use YPGTBL; // table
  use FG04M.FG04M001,  // forms
      FG04M.FG04M002, 
      FG04M.FG04M003,
      FG04M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FG04M001 initial; /* M001 input/output*/
    set FG04M002 initial; /* M001 input/output*/
    set FG04W00 empty; /* Working storage*/
    set FG04W01 empty; /* M001 display storage*/
    set FG04W02 empty; /* M002 display storage*/
    set FG04W03 empty; /* Hold data for translation*/
    set FG04W04 empty; /* Storage for totals*/
    set FG04W05 empty; /* Accum amts for PSLIN*/
    set FG04W06 empty; /* Application Working Storage-Map 3*/
    set FG04W07 empty; /* M003 display Storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG04W00.FG04WSWF = "Y"; /* Format the map switch*/
    FG04W00.FG04WSWD = "1"; /* Map number switch*/
    ;
    XPCREC.XGPCD = "02"; /* Format XPCREC*/
    XPLREC.XGPCD = "02"; /* Format XPLREC*/
    ;
     /* ------------------------------------------------------------*/
     /* if submit month exists, request data.*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FG3SUBMO > 0) /* if submit month present*/
      ;
      FG04W00.FG04WSWR = "Y"; /* Request for data switch*/
      ;
    else
      ;
      FG04W00.FG04WSWR = "N"; /* Request for data switch*/
      ;
    end
    ;
     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/
    ;
    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/
    FFWREC.XPLCD = " "; /* Clear line code*/
    FFWREC.XPLABRV = " "; /* Clear line name*/
    FFWREC.XPCCD = " "; /* Clear cat code*/
    FFWREC.XPCABRV = " "; /* Clear cat name*/
    FFWREC.SYBSTGNB = " "; /* Clear style grp code*/
    FFWREC.SYBSTGNM = " "; /* Clear style grp name*/
    FFWREC.SY1STNBR = " "; /* Clear style code*/
    FFWREC.SY1SSTNM = " "; /* Clear style name*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG04001; /* Converse the main process*/
    ;
    ;
    FG04001: FG04001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG04001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FG04

// Determine which map to display
Function FG04001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, indicate error and exit to Application Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WSWD == "1") /* Map 1 was requested*/
    ;
    FG04100(); /* Display map 1*/
    ;
  else
    ;
    if (FG04W00.FG04WSWD == "2") /* Map 2 was requested*/
      ;
      FG04200(); /* Display map 2*/
      ;
    else
      ;
      if (FG04W00.FG04WSWD == "3") /* Map 3 was requested*/
        ;
        FG04300(); /* Display map 3*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Write the error to the Error Diagnosis Reporting Facility.*/
        /* ------------------------------------------------------------*/
        ;
        FFWREC.XXXMODID = "001"; /* Module identification*/
        FFWREC.XXXMSGNO = 10; /* Indicate system error*/
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
        TA1REC.TA1MAPNO = FG04W00.FG04WSWD; /* Map number*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
        ;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
        /* ------------------------------------------------------------*/
         /* Exit to display the application system menu.*/
        /* ------------------------------------------------------------*/
        ;
        COMMAREA.CATOAP = "FF03"; /* TO application*/
        ;
        XSFFS01(); /* Exit to another application*/
        ;
        /* ------------------------------------------------------------*/
         /* Abnormally terminate the transaction if the exit failed.*/
        /* ------------------------------------------------------------*/
        ;
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
        ;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
end // end FG04001

// Main process to display a map
Function FG04100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG04110(); /* Obtain the data to display*/
  ;
  FG04120(); /* Format and display the map*/
  ;
  FG04130(); /* Check attention identifier*/
  ;
  FG04140(); /* Reset fields to normal intensity*/
  ;
  FG04150(); /* Verify the entered data*/
  ;
  FG04160(); /* Process valid input request*/
  ;
  ;
end // end FG04100

// Obtain the data to display
Function FG04110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.XXXTSLEN = 1489; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FG04111(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Save Submitted Forecast month.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W01.FG04WSMO = FFWREC.FG3SUBMO; /* Sub month*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain Forecasts for display.*/
   /* ------------------------------------------------------------*/
  ;
  FG04112(); /* Open PSHDR*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  while (FG04W00.FG04WSWC == "N") /* Until end of cursor*/
    ;
    FG04113(); /* Fetch PSHDR*/
    ;
    if (FG04W00.FG04WSWC == "N") /* If not end of cursor*/
      ;
      FG04114(); /* Select detail*/
      ;
      /* ------------------------------------------------------------*/
       /* Save data in display storage.*/
      /* ------------------------------------------------------------*/
      ;
      FG04115(); /* Save data*/
      ;
      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG04W00.FG04WIXM > 15) /* Page is full*/
        FG04116(); /* Add page to temporary storage*/
      end
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WIXM > 1) /* Page was formatted*/
    FG04116(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close PSHDR.*/
   /* ------------------------------------------------------------*/
  ;
  FG04117(); /* Close PSHDR*/
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FG04W00.XXXTSPAG = 1; /* Desired page number*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.FG04WSWR = "N"; /* Request for data switch*/
  ;
  ;
end // end FG04110

// Purge any temporary storage
Function FG04111()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FG04W01 empty; /* M001 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG04W00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FG04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04111

// Open PSHDR
Function FG04112()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set FG3REC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FG3REC.FG3SUBMO = FFWREC.FG3SUBMO; /* Submitted month*/
  ;
   /* ------------------------------------------------------------*/
   /* Open cursor for PSHDR.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4040" ("S1", SQLCA, FG3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize fields, and return.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FG04W00.FG04WIXM = 1; /* Display line index*/
    FG04W00.FG04WSWC = "N"; /* End of cursor switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "112"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG3REC.FG3KEY2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04112

// Fetch PSHDR
Function FG04113()
   /* ------------------------------------------------------------*/
   /* Fetch PSHDR.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4040" ("N1", SQLCA, FG3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        ;
        FG04W00.FG04WSWC = "Y"; /* Indicate end of cursor*/
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "113"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG3REC.FG3KEY2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04113

// Determine forecast level
Function FG04114()
   /* ------------------------------------------------------------*/
   /* Determine which level of forecast is being used. (Rows must*/
   /* be there, or program must abend.)*/
   /* ------------------------------------------------------------*/
  ;
  FG04W01.FG3PFNBR[FG04WIXM] = FG3REC.FG3PFNBR;
  ;
  if (FG3REC.FG3PPFFL == "Y") /* If Style/color used*/
    ;
    FG04W01.FG04WLVL[FG04WIXM] = "P"; /* Level indicator*/
    ;
    FG04S01(); /* Select PSSTY*/
    ;
    FG04W01.SY1STNBR[FG04WIXM] = FG7REC.SY1STNBR;
    FG04W01.SY2CLRID[FG04WIXM] = FG7REC.SY2CLRID;
    FG04W01.XDMCD[FG04WIXM] = FG7REC.XDMCD;
    FG04W01.YPGCD[FG04WIXM] = FG7REC.YPGCD;
    if (FG7REC.YPGCD in YPGTBL.YPGCD)
      FG04W01.YPGABRV[FG04WIXM] = YPGTBL.YPGABRV[sysVar.arrayIndex];
    end
    ;
    set PG2REC empty; /* Clear row storage area*/
    PG2REC.XGPCD = "02";
    PG2REC.SY1STNBR = FG7REC.SY1STNBR;
    PG2REC.SY2CLRID = FG7REC.SY2CLRID;
    PG2REC.XDMCD = FG7REC.XDMCD;
    FG04S02(); /* Select SYCLR*/
    if (SQLCA.VAGen_SQLCODE == 0) /* SYCLR found*/
      FG04W01.SY1SSTNM[FG04WIXM] = PG2REC.SY1SSTNM;
      FG04W01.SY2CLRAB[FG04WIXM] = PG2REC.SY2CLRAB;
    else
      set PG4REC empty; /* Clear row storage area*/
      PG4REC.PG4STNBR = FG7REC.SY1STNBR;
      FG04S03(); /* Select SYDVL*/
      if (SQLCA.VAGen_SQLCODE == 0) /* SYdvl found*/
        FG04W01.SY1SSTNM[FG04WIXM] = PG4REC.SY1SSTNM;
        FG04W01.SY2CLRAB[FG04WIXM] = "  ";
      end
    end
    ;
  else
    if (FG3REC.FG3GPFFL == "Y") /* If Style group used*/
      ;
      FG04W01.FG04WLVL[FG04WIXM] = "G"; /* Level indicator*/
      ;
      FG04S04(); /* Select PSGRP*/
      ;
      FG04W01.SYBSTGNB[FG04WIXM] = FG6REC.SYBSTGNB; /* sty grp code*/
      FG04W01.YPGCD[FG04WIXM] = FG6REC.YPGCD; /* type*/
      if (FG6REC.YPGCD in YPGTBL.YPGCD)
        FG04W01.YPGABRV[FG04WIXM] = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
      ;
      set SYBREC empty; /* Clear row storage area*/
      SYBREC.SYBSTGNB = FG6REC.SYBSTGNB;
      FG04S06(); /* Select SYGRP*/
      if (SQLCA.VAGen_SQLCODE == 0) /* SYGRP found*/
        FG04W01.SYBSTGNM[FG04WIXM] = SYBREC.SYBSTGNM;
      else
        FG04W01.SYBSTGNM[FG04WIXM] = "  ";
      end
      ;
    end
    ;
  end
  ;
  ;
  if (FG3REC.FG3CPFFL == "Y") /* If Category used*/
    ;
    FG04W01.FG04WLVL[FG04WIXM] = "C"; /* Level indicator*/
    ;
    FG04W00.FG04WRCT = 0; /* Init row count*/
    FG04S07(); /* Open PSCAT*/
    FG04S08(); /* Select PSCAT*/
    FG04W00.FG04WRCT = FG04W00.FG04WRCT + 1; /* Increment row count*/
    XPCREC.XPCCD = FG5REC.XPCCD; /* format key*/
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      FG04W01.XPCABRV[FG04WIXM] = XPCTBL.XPCABRV[sysVar.arrayIndex];
    end
    FG04W01.XPCCD[FG04WIXM] = FG5REC.XPCCD; /* category*/
    FG04W01.YPGCD[FG04WIXM] = FG5REC.YPGCD; /* type*/
    if (FG5REC.YPGCD in YPGTBL.YPGCD)
      FG04W01.YPGABRV[FG04WIXM] = YPGTBL.YPGABRV[sysVar.arrayIndex];
    end
    ;
    FG04S08(); /* Select PSCAT*/
    if (SQLCA.VAGen_SQLCODE != +100) /* If other PSCAT's*/
      FG04W01.YPGCD[FG04WIXM] = "*"; /* Type*/
      FG04W01.YPGABRV[FG04WIXM] = "*ALL*";
    end
    ;
    FG04S09(); /* Close PSCAT*/
    ;
  else
    if (FG3REC.FG3LPFFL == "Y") /* If Line used*/
      ;
      FG04W01.FG04WLVL[FG04WIXM] = "L"; /* Level indicator*/
      ;
      FG04W00.FG04WRCT = 0; /* Init row count*/
      FG04S10(); /* Open PSLIN*/
      FG04S11(); /* Select PSLIN*/
      FG04W00.FG04WRCT = FG04W00.FG04WRCT + 1; /* Increment row count*/
      XPLREC.XPLCD = FG4REC.XPLCD; /* format key*/
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        FG04W01.XPLABRV[FG04WIXM] = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
      FG04W01.XPLCD[FG04WIXM] = FG4REC.XPLCD; /* line*/
      FG04W01.YPGCD[FG04WIXM] = FG4REC.YPGCD; /* type*/
      if (FG4REC.YPGCD in YPGTBL.YPGCD)
        FG04W01.YPGABRV[FG04WIXM] = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
      ;
      FG04S11(); /* Select PSLIN*/
      if (SQLCA.VAGen_SQLCODE != +100) /* If other PSLIN's*/
        FG04W01.YPGCD[FG04WIXM] = "*"; /* Type*/
        FG04W01.YPGABRV[FG04WIXM] = "*ALL*";
      end
      ;
      FG04S12(); /* Close PSLIN*/
      ;
    end
    ;
  end
  ;
  if (FG3REC.FG3APFFL == "Y") /* If All used*/
    ;
    FG04W01.FG04WLVL[FG04WIXM] = "A"; /* Level indicator*/
    ;
    FG04M001.XPLABRV[FG04WIXM] = "*ALL*";
    FG04W01.XPLABRV[FG04WIXM] = "*ALL*";
    ;
    FG04W01.XPLCD[FG04WIXM] = "*";
    ;
    FG04W00.FG04WRCT = 0; /* Init row count*/
    FG04S10(); /* Open   PSLIN*/
    FG04S11(); /* Select PSLIN*/
    FG04W00.FG04WRCT = FG04W00.FG04WRCT + 1; /* Increment row count*/
    FG04W00.XPLCD = FG4REC.XPLCD; /* Save line code*/
    FG04W01.YPGCD[FG04WIXM] = FG4REC.YPGCD; /* type*/
    if (FG4REC.YPGCD in YPGTBL.YPGCD)
      FG04W01.YPGABRV[FG04WIXM] = YPGTBL.YPGABRV[sysVar.arrayIndex];
    end
    ;
    FG04S11(); /* Select PSLIN*/
    if (SQLCA.VAGen_SQLCODE != +100 /* If other PSLIN's found*/
     && FG4REC.XPLCD == FG04W00.XPLCD) /* and same line code*/
      FG04W01.YPGCD[FG04WIXM] = "*"; /* Type*/
      FG04W01.YPGABRV[FG04WIXM] = "*ALL*"; /* Abrv*/
    end
    ;
    FG04S12(); /* Close  PSLIN*/
    ;
  end
  ;
  ;
end // end FG04114

// Save data in display storage
Function FG04115()
   /* ------------------------------------------------------------*/
   /* First line on page, save beginning and ending months.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WIXM == 1) /* If first line on page*/
    ;
    FG04W01.FG04WSMO = FFWREC.FG3SUBMO; /* Submitted month*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Convert date to MM-DD-YY.*/
   /* ------------------------------------------------------------*/
  ;
  FG04S16(); /* Convert date*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W01.FG04WSDT[FG04WIXM] = FG04W00.FG04WSDT;
  ;
  FG04W01.FG3PFNBR[FG04WIXM] = FG3REC.FG3PFNBR;
  FG04W01.FFABEGMO[FG04WIXM] = FG3REC.FFABEGMO;
  FG04W01.FFAENDMO[FG04WIXM] = FG3REC.FFAENDMO;
  ;
   /* ------------------------------------------------------------*/
   /* Add one to line counter.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.FG04WIXM = FG04W00.FG04WIXM + 1; /* Increment set index*/
  ;
  ;
end // end FG04115

// Add page to temporary storage
Function FG04116()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W01.XXXTSLEN = FG04W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FG04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FG04W01 empty; /* M001 display storage*/
    ;
    FG04W00.FG04WIXM = 1; /* Display line index*/
    ;
    FG04W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04116

// Close PSHDR
Function FG04117()
   /* ------------------------------------------------------------*/
   /* Close PSHDR.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4040" ("C1", SQLCA, FG3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "117"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSHDR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04117

// Format and converse the map
Function FG04120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WSWF == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FG04W00.FG04WSWF == "Y") /* Map must be formatted*/
      FG04121(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG04M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG04M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG04M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FG04M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FG04M001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG04M001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FG04M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG04M001.CAITEM; /* Application data*/
  ;
  ;
end // end FG04120

// Format the display data
Function FG04121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FG04M001 initial; /* M001 input/output area*/
  ;
  FG04W00.FG04WSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FG04W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG04W00.XXXTSPAG > FG04W00.TA5TSQIX) /* Desired greater highest*/
        FG04W00.XXXTSPAG = FG04W00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FG04S17(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FG04M001.XXXLITPG skip; /* "PAGE" literal*/
    FG04M001.XXXTSPAG = FG04W00.XXXTSPAG; /* Current page*/
    set FG04M001.XXXLITOF skip; /* "OF" literal*/
    FG04M001.TA5TSQIX = FG04W00.TA5TSQIX; /* Highest page*/
    ;
    set FG04M001.FG04MSEL[1] cursor; /* Place cursor*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FG04M001.FG04WSMO = FG04W01.FG04WSMO; /* Submitted month*/
  ;
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.TA5TSQIX > 0) /* Pages were formatted*/
    /* ------------------------------------------------------------*/
     /* Make column headings visable.*/
    /* ------------------------------------------------------------*/
    ;
    set FG04M001.FG04MCOL skip; /* Show field*/
    ;
    /* ------------------------------------------------------------*/
     /* Format, up to 15 lines.*/
    /* ------------------------------------------------------------*/
    ;
    FG04W00.FG04WIXM = 1; /* Initialize line index*/
    ;
    while (FG04W00.FG04WIXM <= 15 /* Until screen is full*/
     && FG04W01.FG04WSDT[FG04WIXM] > 0) /* and date exists*/
      ;
      set FG04M001.FG04MSEL[FG04WIXM] normal; /* Make "SEL" visable*/
      set FG04M001.FG04MDAS[FG04WIXM] skip; /* Show field*/
      ;
      FG04M001.FG04WSDT[FG04WIXM] = FG04W01.FG04WSDT[FG04WIXM];
      ;
      FG04M001.FFABEGMO[FG04WIXM] = FG04W01.FFABEGMO[FG04WIXM];
      FG04M001.FFAENDMO[FG04WIXM] = FG04W01.FFAENDMO[FG04WIXM];
      FG04M001.YPGABRV[FG04WIXM] = FG04W01.YPGABRV[FG04WIXM];
      FG04M001.XPLABRV[FG04WIXM] = FG04W01.XPLABRV[FG04WIXM];
      FG04M001.XPCABRV[FG04WIXM] = FG04W01.XPCABRV[FG04WIXM];
      FG04M001.SYBSTGNM[FG04WIXM] = FG04W01.SYBSTGNM[FG04WIXM];
      FG04M001.SY1SSTNM[FG04WIXM] = FG04W01.SY1SSTNM[FG04WIXM];
      ;
      FG04W00.FG04WIXM = FG04W00.FG04WIXM + 1; /* Increment set index*/
      ;
    end
    ;
  end
  ;
  ;
end // end FG04121

// Check attention identifier
Function FG04130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FG04W00.FG04WSWR == "Y") /* Request for data*/
      set FG04W01 empty; /* M001 display storage*/
    end
    ;
    FG04W00.FG04WSWF = "Y"; /* Format the map switch*/
    FG04W00.FG04WSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FG04111(); /* Purge temporary storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FG04M001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf18) /* or PF18 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG04M001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      if (COMMAREA.CAFRMAPP == "06")
        COMMAREA.CATOAP = "FG06"; /* TO application*/
      else
        COMMAREA.CATOAP = "FG05"; /* TO application*/
      end
    end
    ;
    FG04111(); /* Purge temporary storage*/
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    ;
    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG04130

// Reset highlighted fields
Function FG04140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG04M001.FG04WSMO initialAttributes; /* Submitted month*/
  ;
  FG04W00.FG04WIXM = 1; /* Initialize line index*/
  ;
  while (FG04W00.FG04WIXM <= 15 /* Until end of lines*/
   && FG04M001.FG04WSDT[FG04WIXM] > " ") /* and line exists*/
    ;
    set FG04M001.FG04MSEL[FG04WIXM] normal; /* Reset select flag*/
    ;
    FG04W00.FG04WIXM = FG04W00.FG04WIXM + 1; /* Increment line index*/
    ;
  end
  ;
  set FG04M001.CATOAP initialAttributes; /* TO application*/
  set FG04M001.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FG04140

// Verify the entered data
Function FG04150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M001.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FG04M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    FG04151(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG04M001.FG04WSMO != FG04W01.FG04WSMO) /* Submitted date changed*/
      ;
      FG04152(); /* Verify the key field*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Else, if page was formatted, verify any selected options.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG04W00.TA5TSQIX > 0) /* Page was formatted*/
        ;
        FG04W00.FG04WIXM = 15; /* Initialize index*/
        ;
        while (FG04W00.FG04WIXM > 0) /* Until end of lines*/
          ;
          if (FG04M001.FG04MSEL[FG04WIXM] > " ") /* If option entered*/
            FG04153(); /* Verify selected option*/
          end
          ;
          FG04W00.FG04WIXM = FG04W00.FG04WIXM - 1; /* Decrement line number*/
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FG04150

// Verify scroll request
Function FG04151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG04W00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG04W00.XXXTSPAG >= FG04W00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  FG04S18(); /* Highlight selections*/
  ;
   /* ------------------------------------------------------------*/
   /* Highlight key field if it was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M001.FG04WSMO != FG04W01.FG04WSMO) /* Submitted date changed*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    set FG04M001.FG04WSMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FG04151

// Verify the key fields
Function FG04152()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  FG04S18(); /* Highlight any selection*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify the beginning and ending dates in the entered range.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZMONTH = 0; /* Beginning month offset*/
  FFZREC.FFZSRANG = "Y"; /* Switch skips range check*/
  FFZREC.FFZBYYMM = FG04M001.FG04WSMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FG04M001.FG04WSMO; /* Ending date*/
  ;
  XSFFS30(); /* Verify the range*/
  ;
   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    ;
    FFWREC.XXXMODID = "152"; /* Module identification*/
    set FG04M001.FG04WSMO cursor, bold; /* Highlight*/
    ;
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      ;
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      end
      ;
    end
    ;
  end
  ;
  ;
end // end FG04152

// Verify selected option
Function FG04153()
   /* ------------------------------------------------------------*/
   /* If selection was made, ensure an "S" & no prior selections.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M001.FG04MSEL[FG04WIXM] > " ") /* Selection was entered*/
    ;
    if (FG04M001.FG04MSEL[FG04WIXM] != "S") /* Valid selection character*/
      ;
      FFWREC.XXXMODID = "153"; /* Module identification*/
      set FG04M001.FG04MSEL[FG04WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/
      ;
    else
      ;
      FG04W00.FG04WIX2 = FG04W00.FG04WIXM - 1; /* Set counter*/
      ;
      while (FG04W00.FG04WIX2 > 0) /* While counter greater than 0*/
        if (FG04M001.FG04MSEL[FG04WIX2] > " ") /* Valid selection character*/
          ;
          FFWREC.XXXMODID = "153"; /* Module identification*/
          set FG04M001.FG04MSEL[FG04WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(73); /* More than one selection*/
          ;
        end
        ;
        FG04W00.FG04WIX2 = FG04W00.FG04WIX2 - 1; /* Decrement counter*/
        ;
      end
    end
  end
  ;
  ;
end // end FG04153

// Process valid input request
Function FG04160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.FG04WSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the key was changed, save it, and request data.*/
   /* We are using ffzrec beg mo, because we did an edit to get*/
   /* century for the calls.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M001.FG04WSMO != FG04W01.FG04WSMO) /* Submitted month changed*/
    ;
    FFWREC.FG3SUBMO = FFZREC.FFZBEGMO; /* Save Subm month for calls*/
    ;
    FG04W00.FG04WSWR = "Y"; /* Request for data switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FG04W00.XXXTSPAG = FG04W00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FG04W00.XXXTSPAG = FG04W00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If line was selected, format the second map.*/
   /* ------------------------------------------------------------*/
  ;
  if ("S" in FG04M001.FG04MSEL) /* Line selected*/
    ;
    FFWREC.FG3PFNBR = FG04W01.FG3PFNBR[sysVar.arrayIndex]; /* Run number*/
    FG04W00.FG04WLVL = FG04W01.FG04WLVL[sysVar.arrayIndex]; /* Level ind*/
    FG04W00.FG04WSUB = sysVar.arrayIndex; /* Hold subscript for map 2*/
    FG04W00.FG04WSWR = "Y"; /* Data requested switch*/
    FG04W00.FG04WSWD = "2"; /* Map switch*/
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end FG04160

// Main process to display a map
Function FG04200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG04210(); /* Obtain the data to display*/
  ;
  FG04220(); /* Format and display the map*/
  ;
  FG04230(); /* Check attention identifier*/
  ;
  FG04240(); /* Reset fields to normal intensity*/
  ;
  FG04250(); /* Verify the entered data*/
  ;
  FG04260(); /* Process valid input request*/
  ;
  ;
end // end FG04200

// Obtain the data to display
Function FG04210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Clear the map display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  set FG04W02 empty; /* Clear fields*/
  ;
   /* ------------------------------------------------------------*/
   /* If coming in from Map 1, load keys.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WSUB > 0) /* If there is a subcript*/
    ;
    FFWREC.FFABEGMO = FG04W01.FFABEGMO[FG04WSUB];
    FFWREC.FFAENDMO = FG04W01.FFAENDMO[FG04WSUB];
    FFWREC.YPGCD = FG04W01.YPGCD[FG04WSUB];
    FFWREC.YPGABRV = FG04W01.YPGABRV[FG04WSUB];
    FFWREC.XPLCD = FG04W01.XPLCD[FG04WSUB];
    FFWREC.XPLABRV = FG04W01.XPLABRV[FG04WSUB];
    FFWREC.XPCCD = FG04W01.XPCCD[FG04WSUB];
    FFWREC.XPCABRV = FG04W01.XPCABRV[FG04WSUB];
    FFWREC.SYBSTGNB = FG04W01.SYBSTGNB[FG04WSUB];
    FFWREC.SYBSTGNM = FG04W01.SYBSTGNM[FG04WSUB];
    FFWREC.SY1STNBR = FG04W01.SY1STNBR[FG04WSUB];
    FFWREC.SY2CLRID = FG04W01.SY2CLRID[FG04WSUB];
    FFWREC.XDMCD = FG04W01.XDMCD[FG04WSUB];
    FFWREC.SY1SSTNM = FG04W01.SY1SSTNM[FG04WSUB];
    FFWREC.SY2CLRAB = FG04W01.SY2CLRAB[FG04WSUB];
    ;
    FG04W00.FG04WSUB = 0; /* Clear subcript*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If coming in from Map 3 with a selected line's style info,*/
   /* get line, line abrv, and style group name.*/
   /* ------------------------------------------------------------*/
  ;
  if ("S" in FG04M003.FG04MSEL) /* Line selected on product list*/
    if (FG04M002.SY1STNBR > " ") /* Style nbr*/
      FG04255(); /* Verify Style, color, and dim; get*/
                                   /* descriptions*/
      /* ------------------------------------------------------------*/
       /* Save data.*/
      /* ------------------------------------------------------------*/
      ;
      FFWREC.YPGCD = FG04M002.YPGCD; /* Type*/
      FFWREC.YPGABRV = FG04M002.YPGABRV; /* Type name*/
      FFWREC.XPLCD = FG04M002.XPLCD; /* Line*/
      FFWREC.XPLABRV = FG04M002.XPLABRV; /* Line name*/
      FFWREC.XPCCD = FG04M002.XPCCD; /* Category*/
      FFWREC.XPCABRV = FG04M002.XPCABRV; /* Category name*/
      FFWREC.SYBSTGNB = FG04M002.SYBSTGNB; /* Style grp*/
      FFWREC.SYBSTGNM = FG04M002.SYBSTGNM; /* Style grp name*/
      FFWREC.SY1STNBR = FG04M002.SY1STNBR; /* Style nbr*/
      FFWREC.SY1SSTNM = FG04M002.SY1SSTNM; /* Style name*/
      FFWREC.SY2CLRID = FG04M002.SY2CLRID; /* Color id*/
      FFWREC.SY2CLRAB = FG04M002.SY2CLRAB; /* Color name*/
      FFWREC.XDMCD = FG04M002.XDMCD; /* Dimension*/
      ;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Set current page to 1.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.FG04WPAG = 1; /* Current page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Expand date range to set of YYMMs.*/
   /* ------------------------------------------------------------*/
  ;
  FG04S20(); /* Expand dates*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize fields.*/
   /* ------------------------------------------------------------*/
  ;
  set FG04W03 empty; /* Clear hold area for calc*/
  set FG04W04 empty; /* Clear hold area for tots*/
  set FG04W05 empty; /* Clear Accum area for PSLIN*/
  ;
  FG04W00.FG04WCNT = 1; /* Set counter for months*/
  FG04W00.FG04WIXM = 1; /* Set counter for columns*/
  ;
  FG04W00.FG04WDSW = "N"; /* Initialize Data found switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Loop through the months in the range.*/
   /* ------------------------------------------------------------*/
  ;
  while (FG04W00.FG04WCNT <= FG04W00.FG04WNBR) /* While count LE # of mos*/
    ;
    if (FG04W00.FG04WCNT == 7) /* If seventh month*/
      FG04211(); /* Do sub-totaling*/
      FG04W00.FG04WIXM = FG04W00.FG04WIXM + 1; /* Add 1 to column cnt*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* Determine which level of forecast is being used.*/
    /* ------------------------------------------------------------*/
    ;
    if (FFWREC.SY1STNBR > " ") /* If Style/color used*/
      FG04212(); /* Select PSSTY*/
      ;
    else
      if (FFWREC.SYBSTGNB > " ") /* If Style group used*/
        FG04213(); /* Select PSGRP*/
        ;
      else
        if (FFWREC.XPCCD > " ") /* If Category used*/
          FG04214(); /* Select PSCAT*/
          ;
        else
          if (FFWREC.XPLCD > " ") /* If Line used*/
            FG04215(); /* Select PSLIN*/
          end
        end
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* Do calculations and add to counters.*/
    /* ------------------------------------------------------------*/
    ;
    FG04S21(); /* Do calcs*/
    ;
    FG04W00.FG04WCNT = FG04W00.FG04WCNT + 1; /* Add 1 to month cnt*/
    FG04W00.FG04WIXM = FG04W00.FG04WIXM + 1; /* Add 1 to column cnt*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Do calculations.*/
   /* ------------------------------------------------------------*/
  ;
  FG04211(); /* Calculate grand totals*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate request for data complete and modifiable data.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.FG04WSWR = "N"; /* Request for data switch*/
  ;
  ;
end // end FG04210

// Translate Totals
Function FG04211()
   /* ------------------------------------------------------------*/
   /* Translate Beg Inventory total and load to W.S.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W04.FG04WBIA; /* Beg Inventory*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FG04W02.FG04WBEI[FG04WIXM] = FFXREC.FFXCHAR; /* storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Translate Balance to Ship total and load to W.S.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W04.FG04WBSA; /* Bal to Ship*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FG04W02.FG04WBAS[FG04WIXM] = FFXREC.FFXCHAR; /* Storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Translate On Order total and load to W.S.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W04.FG04WONA; /* On Order*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FG04W02.FG04WONO[FG04WIXM] = FFXREC.FFXCHAR; /* Storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Translate Production Fcst total and load to W.S.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W04.FG04WPFA; /* Nil Production*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FG04W02.FG04WMPF[FG04WIXM] = FFXREC.FFXCHAR; /* Storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Translate Supply total and load to W.S.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W04.FG04WSUA; /* Supply*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FG04W02.FG04WSUP[FG04WIXM] = FFXREC.FFXCHAR; /* Storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Translate Ending Inventory total and load to W.S.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W04.FG04WEIA; /* Ending Inventory*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FG04W02.FG04WEIV[FG04WIXM] = FFXREC.FFXCHAR; /* Storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Translate Safety Stock total and load to W.S.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W04.FG04WSSA; /* Safty Stock*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FG04W02.FG04WSST[FG04WIXM] = FFXREC.FFXCHAR; /* Storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Translate NIL PRDCTN total and load to W.S.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W04.FG04WNPA; /* Nil Production*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FG04W02.FG04WNIL[FG04WIXM] = FFXREC.FFXCHAR; /* Storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Translate Sug Tot Prdctn Fcst total and load to W.S.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W04.FG04WTPA; /* Nil Production*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
    ;
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
    ;
  end
  ;
  FG04W02.FG04WTOT[FG04WIXM] = FFXREC.FFXCHAR; /* Storage*/
  ;
  ;
end // end FG04211

// Select PSSTY
Function FG04212()
   /* ------------------------------------------------------------*/
   /* Clear PSSTY.*/
   /* ------------------------------------------------------------*/
  ;
  set FG7REC empty; /* clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FG7REC.FG3PFNBR = FFWREC.FG3PFNBR; /* Submit number*/
  FG7REC.FF4FCTMO = FFZREC.FFZINDMO[FG04WCNT]; /* Fcst month*/
  FG7REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FG7REC.SY2CLRID = FFWREC.SY2CLRID; /* Color id*/
  FG7REC.XDMCD = FFWREC.XDMCD; /* Dim*/
  ;
   /* ------------------------------------------------------------*/
   /* Select PSSTY.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4060" ("S ", SQLCA, FG7REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save data, and return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG04W03.FF6BEINV = FG7REC.FF6BEINV; /* Beg Inv*/
      FG04W03.FG4BALSH = FG7REC.FG4BALSH; /* Bal to ship*/
      FG04W03.FG4ONORD = FG7REC.FG4ONORD; /* On order*/
      FG04W03.FF6SUBPF = FG7REC.FF6SUBPF; /* Prdctn fcst*/
      FG04W03.FF6SFSTK = FG7REC.FF6SFSTK; /* Safety stock*/
      FG04W03.FG4NLPRD = FG7REC.FG4NLPRD; /* Nil pfcst*/
      ;
      FFWREC.FFEWSNBR = FG7REC.FFEWSNBR; /* worksheet number*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "212"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG7REC.FG7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04212

// Select PSGRP
Function FG04213()
   /* ------------------------------------------------------------*/
   /* Clear PSGRP.*/
   /* ------------------------------------------------------------*/
  ;
  set FG6REC empty; /* clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FG6REC.FG3PFNBR = FFWREC.FG3PFNBR; /* Submit number*/
  FG6REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style grp code*/
  FG6REC.YPGCD = FFWREC.YPGCD; /* type code*/
  FG6REC.FF4FCTMO = FFZREC.FFZINDMO[FG04WCNT]; /* Fcst month*/
  ;
   /* ------------------------------------------------------------*/
   /* Select PSGRP.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4180" ("SS", SQLCA, FG6REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save data, and return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG04W03.FF6BEINV = FG6REC.FF6BEINV; /* Beg Inv*/
      FG04W03.FG4BALSH = FG6REC.FG4BALSH; /* Bal to ship*/
      FG04W03.FG4ONORD = FG6REC.FG4ONORD; /* On order*/
      FG04W03.FF6SUBPF = FG6REC.FF6SUBPF; /* Prdctn fcst*/
      FG04W03.FF6SFSTK = FG6REC.FF6SFSTK; /* Safety stock*/
      FG04W03.FG4NLPRD = FG6REC.FG4NLPRD; /* Nil pfcst*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "213"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG6REC.FG6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04213

// Select sum PSCAT
Function FG04214()
   /* ------------------------------------------------------------*/
   /* Clear PSCAT.*/
   /* ------------------------------------------------------------*/
  ;
  set FG5REC empty; /* clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FG5REC.FG3PFNBR = FFWREC.FG3PFNBR; /* Submit number*/
  FG5REC.FF4FCTMO = FFZREC.FFZINDMO[FG04WCNT]; /* Forecast month*/
  FG5REC.XPCCD = FFWREC.XPCCD; /* category*/
  FG5REC.YPGCD = FFWREC.YPGCD; /* type*/
  ;
   /* ------------------------------------------------------------*/
   /* Select sum PSCAT.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4030" ("SS", SQLCA, FG5REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save data, and return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG04W03.FF6BEINV = FG5REC.FF6BEINV; /* Beg Inv*/
      FG04W03.FG4BALSH = FG5REC.FG4BALSH; /* Bal to ship*/
      FG04W03.FG4ONORD = FG5REC.FG4ONORD; /* On order*/
      FG04W03.FF6SUBPF = FG5REC.FF6SUBPF; /* Prdctn fcst*/
      FG04W03.FF6SFSTK = FG5REC.FF6SFSTK; /* Safety stock*/
      FG04W03.FG4NLPRD = FG5REC.FG4NLPRD; /* Nil pfcst*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "214"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG5REC.FG5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04214

// Select sum PSLIN
Function FG04215()
   /* ------------------------------------------------------------*/
   /* Clear PSLIN.*/
   /* ------------------------------------------------------------*/
  ;
  set FG4REC empty; /* clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FG4REC.FG3PFNBR = FFWREC.FG3PFNBR; /* Submit number*/
  FG4REC.XPLCD = FFWREC.XPLCD; /* Line code*/
  FG4REC.YPGCD = FFWREC.YPGCD; /* Type code*/
  FG4REC.FF4FCTMO = FFZREC.FFZINDMO[FG04WCNT]; /* Fcst month*/
  ;
   /* ------------------------------------------------------------*/
   /* Select sum PSLIN.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4050" ("SS", SQLCA, FG4REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save data, and return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG04W03.FF6BEINV = FG4REC.FF6BEINV; /* Beg Inv*/
      FG04W03.FG4BALSH = FG4REC.FG4BALSH; /* Bal to ship*/
      FG04W03.FG4ONORD = FG4REC.FG4ONORD; /* On order*/
      FG04W03.FF6SUBPF = FG4REC.FF6SUBPF; /* Prdctn fcst*/
      FG04W03.FF6SFSTK = FG4REC.FF6SFSTK; /* Safety stock*/
      FG04W03.FG4NLPRD = FG4REC.FG4NLPRD; /* Nil pfcst*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "215"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSLIN01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG4REC.FG4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04215

// Format and converse the map
Function FG04220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FG04W00.FG04WSWF == "Y") /* Map must be formatted*/
      FG04221(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG04M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG04M002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG04M002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FG04M002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FG04M002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG04M002 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FG04M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG04M002.CAITEM; /* Application data*/
  ;
  ;
end // end FG04220

// Format the data to display
Function FG04221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FG04M002 initial; /* M002 input/output area*/
  ;
  FG04W00.FG04WSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the heading.*/
   /* ------------------------------------------------------------*/
  ;
  FG04M002.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FG04M002.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/
  ;
  FG04M002.YPGCD = FFWREC.YPGCD; /* Type code*/
  FG04M002.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  FG04M002.XPLCD = FFWREC.XPLCD; /* Line code*/
  FG04M002.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
  ;
  FG04M002.XPCCD = FFWREC.XPCCD; /* Cat code*/
  FG04M002.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
  ;
  FG04M002.SYBSTGNB = FFWREC.SYBSTGNB; /* Style grp code*/
  FG04M002.SYBSTGNM = FFWREC.SYBSTGNM; /* Abbreviation*/
  ;
  FG04M002.SY1STNBR = FFWREC.SY1STNBR; /* Style nbr*/
  FG04M002.SY1SSTNM = FFWREC.SY1SSTNM; /* Abbreviation*/
  ;
  FG04M002.SY2CLRID = FFWREC.SY2CLRID; /* Color id*/
  FG04M002.SY2CLRAB = FFWREC.SY2CLRAB; /* Abbreviation*/
  ;
  FG04M002.XDMCD = FFWREC.XDMCD; /* Dimension*/
  ;
  FG04M002.FG3SUBMO = FFWREC.FG3SUBMO; /* Subm month*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the month range for the column headings.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WPAG == 1) /* if current page is 1*/
    FG04W00.FG04WIXM = 1; /* counter for columns*/
    ;
    while (FG04W00.FG04WIXM <= 6 /* first page of data*/
     && FG04W00.FG04WIXM <= FG04W00.FG04WNBR) /* nbr of months*/
      ;
      FG04M002.FG04WRMO[FG04WIXM] = FG04W00.FFZIYYMM[FG04WIXM];
      ;
      FG04W00.FG04WIXM = FG04W00.FG04WIXM + 1; /* counter for columns*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* Go through once more to load the "total" heading.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG04W00.FG04WNBR > 0) /* If any months exist*/
      if (FG04W00.FG04WPG2 == "Y") /* If page 2 exists*/
        FG04M002.FG04WRMO[FG04WIXM] = " SUB"; /* load 'subtotal'*/
      else
        FG04M002.FG04WRMO[FG04WIXM] = "TOTL"; /* load 'total'*/
      end
    end
    ;
  else /* Page 2*/
    ;
    FG04W00.FG04WIXM = 1; /* Counter for columns*/
    FG04W00.FG04WCNT = 7; /* counter for months*/
    ;
    while (FG04W00.FG04WIXM <= 7 /* second page of data*/
     && FG04W00.FG04WCNT <= FG04W00.FG04WNBR) /* nbr of months*/
      ;
      FG04M002.FG04WRMO[FG04WIXM] = FFZREC.FFZIYYMM[FG04WCNT];
      ;
      FG04W00.FG04WIXM = FG04W00.FG04WIXM + 1; /* counter for columns*/
      FG04W00.FG04WCNT = FG04W00.FG04WCNT + 1; /* counter for months*/
      ;
    end
    ;
    FG04M002.FG04WRMO[FG04WIXM] = "TOTL"; /* set grand total col*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the detail lines on the map*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WPAG == 1) /* If current page is 1*/
    ;
    FG04W00.FG04WIXM = 1; /* Counter for columns*/
    FG04W00.FG04WCNT = 1; /* counter for months*/
    ;
    while (FG04W00.FG04WIXM <= 6 /* first page of data*/
     && FG04W00.FG04WIXM <= FG04W00.FG04WNBR) /* nbr of months*/
      ;
      FG04S23(); /* load the map*/
      ;
    end
    ;
  else /* Page 2*/
    ;
    FG04W00.FG04WIXM = 1; /* counter for columns*/
    FG04W00.FG04WCNT = 8; /* counter for months plus totals*/
    FG04W00.FG04WIX2 = FG04W00.FG04WNBR; /* nbr of months*/
    FG04W00.FG04WIX2 = FG04W00.FG04WIX2 + 2; /* nbr plus two total fields*/
    ;
    while (FG04W00.FG04WIXM <= 6 /* max nbr of dis fields*/
     && FG04W00.FG04WCNT <= FG04W00.FG04WIX2) /* nbr of months*/
      ;
      FG04S23(); /* load the map*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Go through once more to load the "total" amounts.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WNBR > 0) /* If any months exist*/
    ;
    FG04S23(); /* load the map*/
    ;
  end
  ;
  ;
end // end FG04221

// Check attention identifier
Function FG04230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FG04W00.FG04WSWR == "Y") /* Request for data*/
      set FG04W02 empty; /* M002 display storage*/
    end
    ;
    FG04W00.FG04WSWF = "Y"; /* Format the map switch*/
    FG04W00.FG04WSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FG04M002.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF17 was pressed transfer to map 3 Select Product*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    FG04W00.FG04WSWD = "3"; /* map switch*/
    FG04W06.FG04WSWR = "Y"; /* request for data*/
    FG04W06.FG04WSWF = "Y"; /* format the map*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf18) /* or PF18 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG04M002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FG04"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "FG06"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf19) /* and PF19 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG04230

// Reset highlighted fields
Function FG04240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG04M002.FFABEGMO initialAttributes; /* Beginning month*/
  set FG04M002.FFAENDMO initialAttributes; /* Ending month*/
  set FG04M002.YPGCD initialAttributes; /* Type group*/
  set FG04M002.XPLCD initialAttributes; /* Line group*/
  set FG04M002.XPCCD initialAttributes; /* Cat group*/
  set FG04M002.SY1STNBR initialAttributes; /* Style Number*/
  set FG04M002.SY2CLRID initialAttributes; /* Color Id*/
  set FG04M002.XDMCD initialAttributes; /* Dimension*/
  ;
  set FG04M002.CATOAP initialAttributes; /* TO application*/
  set FG04M002.CAITEM initialAttributes; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.XPLCD == "?" /* line list requested*/
   || FG04M002.YPGCD == "?" /* type list requested*/
   || FG04M002.XPCCD == "?") /* category list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "240"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.YPGCD == "?") /* type list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG04M002.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG04M002.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FG04M002.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG04M002.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG04M002.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.XPLCD == "?") /* Line list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG04M002.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FG04M002.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FG04M002.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG04M002.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG04M002.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.XPCCD == "?") /* Line list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG04M002.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FG04M002.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FG04M002.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG04M002.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG04M002.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "240"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04240

// Verify the entered data
Function FG04250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "250"; /* Module identification*/
    set FG04M002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll Left request*/
   || converseVar.eventKey is pf11) /* Scroll Right request*/
    ;
    FG04251(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG04M002.FFABEGMO != FG04W02.FFABEGMO /* Beginning date changed*/
     || FG04M002.FFAENDMO != FG04W02.FFAENDMO /* or ending date changed*/
     || FG04M002.YPGCD != FFWREC.YPGCD        /* or type changed*/
     || FG04M002.XPLCD != FFWREC.XPLCD        /* or line changed*/
     || FG04M002.XPCCD != FFWREC.XPCCD        /* or Cat changed*/
     || FG04M002.SYBSTGNB != FFWREC.SYBSTGNB  /* or style grp changed*/
     || FG04M002.SY1STNBR != FFWREC.SY1STNBR  /* or style nbr changed*/
     || FG04M002.SY2CLRID != FFWREC.SY2CLRID  /* or color id changed*/
     || FG04M002.XDMCD != FFWREC.XDMCD        /* or dim changed*/
                                              
     || FG04M002.FFABEGMO == 0                /* Beginning date missing*/
     || FG04M002.FFAENDMO == 0                /* or ending date missing*/
     || FG04M002.YPGCD == 0)                  /* or type missing*/
      ;
      FG04252(); /* Verify range*/
      FG04253(); /* Verify Type*/
      ;
      if (converseVar.validationMsgNum == 0) /* if there are no errors*/
        FG04254(); /* Verify Style, Style Grp, Cat, Line*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check PF19 key.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf19) /* If PF19 was pressed*/
    if (FG04M002.SY1STNBR == " ") /* If Style/Color is missing*/
      ;
      FFWREC.XXXMODID = "500"; /* Module identification*/
      set FG04M002.SY1STNBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(312); /* Indicate style needed*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FG04250

// Verify scroll request
Function FG04251()
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that data exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    if (FG04W00.FG04WPG2 == "N") /* and no page 2 data available*/
      ;
      FFWREC.XXXMODID = "251"; /* Module identification*/
      converseLib.validationFailed(24); /* No columns to the right to display*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that data exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FG04W00.FG04WPAG == 1)       /* Already on page one*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(23); /* No columns to the left to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.XDMCD != FFWREC.XDMCD) /* Dimension code changed*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FG04M002.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG04M002.SY2CLRID != FFWREC.SY2CLRID) /* Color id changed*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FG04M002.SY2CLRID cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG04M002.SY1STNBR != FFWREC.SY1STNBR) /* Style nbr changed*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FG04M002.SY1STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG04M002.SYBSTGNB != FFWREC.SYBSTGNB) /* Style grp changed*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FG04M002.SYBSTGNB cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG04M002.XPCCD != FFWREC.XPCCD) /* Category changed*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FG04M002.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG04M002.XPLCD != FFWREC.XPLCD) /* Line changed*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FG04M002.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG04M002.YPGCD != FFWREC.YPGCD) /* Type changed*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FG04M002.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG04M002.FFAENDMO != FG04W02.FFAENDMO) /* Ending date changed*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FG04M002.FFAENDMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG04M002.FFABEGMO != FG04W02.FFABEGMO) /* Beginning date changed*/
    ;
    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FG04M002.FFABEGMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FG04251

// Verify Date Range
Function FG04252()
   /* ------------------------------------------------------------*/
   /* Verify the beginning and ending dates in the entered range.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBEGMO = FG04M002.FFABEGMO; /* Beginning date*/
  FFZREC.FFZENDMO = FG04M002.FFAENDMO; /* Ending date*/
  ;
  XSFFS30(); /* Verify the range*/
  ;
   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    ;
    FFWREC.XXXMODID = "252"; /* Module identification*/
    set FG04M002.FFAENDMO cursor, bold; /* Highlight*/
    ;
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      ;
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        ;
        converseLib.validationFailed(151); /* Date is out of range*/
        ;
      end
      ;
    end
    ;
  end
  ;
  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    ;
    FFWREC.XXXMODID = "252"; /* Module identification*/
    set FG04M002.FFABEGMO cursor, bold; /* Highlight*/
    ;
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      ;
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        ;
        converseLib.validationFailed(151); /* Date is out of range*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
end // end FG04252

// Verify Prdct Type
Function FG04253()
   /* ------------------------------------------------------------*/
   /* Verify type code.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FG04M002.YPGCD == " " /* Type code missing*/
   && FG04M002.SY1STNBR > " ") /* Style/color entered*/
     /* next sentence*/
  else
    if (FG04M002.YPGCD == "*") /* If type eq all*/
      FG04M002.YPGABRV = "*ALL*"; /* Abbreviation*/
    else
      if (FG04M002.YPGCD in YPGTBL.YPGCD /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FG04M002.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/
        FG04M002.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "253"; /* Module identification*/
        set FG04M002.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Indicate missing or invalid*/
      end
    end
  end
  ;
  ;
end // end FG04253

// Verify Sty Grp/Cat/Lin/YPG
Function FG04254()
   /* ------------------------------------------------------------*/
   /* Verify Relationships between Corporate Product Codes*/
   /* for FG04M002 screen, depending on what has been entered*/
   /* on the screen.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify Style, Color, Dimension - if entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.SY1STNBR > " ")
    FG04255();
    ;
  else
    ;
   /* ------------------------------------------------------------*/
   /* Verify Style Group - if entered.*/
   /* ------------------------------------------------------------*/
    ;
    if (FG04M002.SYBSTGNB > " ")
      FG04256();
      ;
    else
      ;
   /* ------------------------------------------------------------*/
   /* Verify Category - if entered.*/
   /* ------------------------------------------------------------*/
      ;
      if (FG04M002.XPCCD > " ")
        FG04257();
        ;
      else
   /* ------------------------------------------------------------*/
   /* Verify Line - if entered.*/
   /* ------------------------------------------------------------*/
        ;
        if (FG04M002.XPLCD > " "
         && FG04M002.XPLCD != "*")
          FG04258();
        else
          ;
   /* ------------------------------------------------------------*/
   /* Verify Product Type - if entered.*/
   /* ------------------------------------------------------------*/
          ;
          if (FG04M002.YPGCD > " ")
            FG04259();
          end
        end
      end
    end
  end
end // end FG04254

// Verify Sty/Colr/Dim
Function FG04255()
   /* ------------------------------------------------------------*/
   /* Verify Style, Color, Dimension - if entered*/
   /* Get description from either VSYCLR01 or VSYDVL01*/
   /* ------------------------------------------------------------*/
  ;
  set FG7REC empty; /* clear copybook*/
  ;
  FG7REC.FG3PFNBR = FFWREC.FG3PFNBR; /* Submit number*/
  FG7REC.FF4FCTMO = FFZREC.FFZINDMO[1]; /* Fcst month*/
  FG7REC.SY1STNBR = FG04M002.SY1STNBR; /* Style Number*/
  FG7REC.SY2CLRID = FG04M002.SY2CLRID; /* Style Number*/
  FG7REC.XDMCD = FG04M002.XDMCD; /* Style Number*/
  ;
  FG04S26(); /* Get Style from VPSSTY01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
    ;
    FFWREC.XXXMODID = "255"; /* Module identification*/
    set FG04M002.SY1STNBR cursor, bold; /* Highlight*/
    set FG04M002.SY2CLRID bold; /* Highlight*/
    set FG04M002.XDMCD bold; /* Highlight*/
    converseLib.validationFailed(306); /* not part of sel submit pfcst*/
    ;
    return; /* return to previous process*/
    ;
  else
    ;
    FG04M002.SY1STNBR = FG7REC.SY1STNBR;
    FG04M002.SY2CLRID = FG7REC.SY2CLRID;
    FG04M002.XDMCD = FG7REC.XDMCD;
    FG04M002.XPCCD = FG7REC.XPCCD;
    FG04M002.XPLCD = FG7REC.XPLCD;
    FG04M002.YPGCD = FG7REC.YPGCD;
    ;
    /* ------------------------------------------------------------*/
    /* Get description for Style/Color*/
    /* ------------------------------------------------------------*/
     /* ------------------------------------------------------------*/
      /* Check SYCLR.*/
     /* ------------------------------------------------------------*/
    set PG2REC empty; /* Clear row storage area*/
    PG2REC.XGPCD = "02";
    PG2REC.SY1STNBR = FG04M002.SY1STNBR;
    PG2REC.SY2CLRID = FG04M002.SY2CLRID;
    PG2REC.XDMCD = FG04M002.XDMCD;
    FG04S02(); /* Select SYCLR*/
    if (SQLCA.VAGen_SQLCODE == 0) /* SYCLR found*/
      FG04M002.SY1SSTNM = PG2REC.SY1SSTNM; /* style name*/
      FG04M002.SY2CLRAB = PG2REC.SY2CLRAB; /* color name*/
      FG04M002.SYBSTGNB = PG2REC.SYBSTGNB;
      FG04M002.XPCCD = PG2REC.XPCCD;
      FG04M002.XPLCD = PG2REC.XPLCD;
    else /* SYCLR not found*/
      set PG4REC empty; /* Clear row storage area*/
      PG4REC.PG4STNBR = FG04M002.SY1STNBR;
      FG04S03(); /* Select SYDVL*/
      if (SQLCA.VAGen_SQLCODE == 0) /* SYDVL found*/
        FG04M002.SY1SSTNM = PG4REC.SY1SSTNM; /* style name*/
        FG04M002.SY2CLRAB = "  "; /* color name*/
        FG04M002.SYBSTGNB = PG4REC.SYBSTGNB;
        FG04M002.XPCCD = PG4REC.XPCCD;
        FG04M002.XPLCD = PG4REC.XPLCD;
      else /* SYDVL not found*/
        FFWREC.XXXMODID = "252"; /* Module identification*/
        set FG04M002.SY1STNBR cursor, bold; /* Highlight*/
        set FG04M002.SY2CLRID bold; /* Highlight*/
        set FG04M002.XDMCD bold; /* Highlight*/
        FG04M002.SY1SSTNM = " "; /* style name*/
        FG04M002.SY2CLRAB = " "; /* color name*/
      end
    end
    ;
    FG04S28(); /* ** Get Style Group Abbreviated Description*/
    ;
    FG04S29(); /* ** Get Category Abbreviated Description*/
    ;
    FG04S30(); /* ** Get Line Abbreviated Description*/
    ;
    FG04S31(); /* ** Get Type Abbreviated Description*/
    ;
  end
end // end FG04255

// Verify Style Group
Function FG04256()
   /* ------------------------------------------------------------*/
   /* Verify Style Group by atttempting to retrieve a row from*/
   /* VPSSTY01.*/
   /* ------------------------------------------------------------*/
  ;
  set FG7REC empty;
  FG7REC.FG3PFNBR = FFWREC.FG3PFNBR;
  FG7REC.FF4FCTMO = FFZREC.FFZINDMO[1];
  FG7REC.SYBSTGNB = FG04M002.SYBSTGNB;
  FG7REC.XPCCD = "*";
  FG7REC.XPLCD = "*";
  FG7REC.YPGCD = FG04M002.YPGCD;
  ;
  FG04S27(); /* Get row from VPSSTY01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
    ;
    FFWREC.XXXMODID = "256"; /* Module identification*/
    set FG04M002.SYBSTGNB cursor, bold; /* Highlight*/
    converseLib.validationFailed(306); /* Not part of sel subm fcst msg*/
    ;
    return; /* Return to calling process*/
    ;
  else
    FG04M002.XPLCD = FG7REC.XPLCD;
    FG04M002.XPCCD = FG7REC.XPCCD;
    FG04M002.SYBSTGNB = FG7REC.SYBSTGNB;
    FG04M002.SY1SSTNM = " ";
    FG04M002.SY2CLRAB = " ";
    ;
    FG04S28(); /* Get Style Group abbrev name*/
    ;
    FG04S29(); /* Get Category abbrev name*/
    ;
    FG04S30(); /* Get Line abbrev name*/
    ;
    FG04S31(); /* Get Type abbrev name*/
    ;
  end
  ;
end // end FG04256

// Verify category
Function FG04257()
   /* ------------------------------------------------------------*/
   /* Verify Category Code.*/
   /* ------------------------------------------------------------*/
  ;
  set FG7REC empty;
  FG7REC.FG3PFNBR = FFWREC.FG3PFNBR;
  FG7REC.FF4FCTMO = FFZREC.FFZINDMO[1];
  FG7REC.XPCCD = FG04M002.XPCCD; /* Category*/
  FG7REC.SYBSTGNB = "*"; /* Style Group*/
  FG7REC.XPLCD = "*"; /* Line*/
  FG7REC.YPGCD = FG04M002.YPGCD; /* Product Type*/
  ;
  ;
  FG04S27(); /* Get row from VPSSTY01*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
    ;
    FFWREC.XXXMODID = "257"; /* Module identification*/
    set FG04M002.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(306); /* Indicate not part of sel subm fcst*/
    ;
    return; /* Return to calling process*/
    ;
  else
    ;
    FG04M002.XPCCD = FG7REC.XPCCD;
    FG04M002.XPLCD = FG7REC.XPLCD;
    FG04M002.SY1SSTNM = " ";
    FG04M002.SY2CLRAB = " ";
    FG04M002.SYBSTGNM = " ";
    ;
    FG04S29(); /* Get Category abbrev name*/
    ;
    FG04S30(); /* Get Line abbrev name*/
    ;
    FG04S31(); /* Get Type abbrev name*/
  end
end // end FG04257

// Verify Line
Function FG04258()
   /* ------------------------------------------------------------*/
   /* Verify Line Code.*/
   /* ------------------------------------------------------------*/
  ;
  set FG7REC empty;
  FG7REC.FG3PFNBR = FFWREC.FG3PFNBR;
  FG7REC.FF4FCTMO = FFZREC.FFZINDMO[1];
  FG7REC.XPLCD = FG04M002.XPLCD; /* Line*/
  FG7REC.XPCCD = "*"; /* Category*/
  FG7REC.SYBSTGNB = "*"; /* Style Group*/
  FG7REC.YPGCD = FG04M002.YPGCD; /* Product Type*/
  ;
  ;
  FG04S27(); /* Get row from VPSSTY01*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
    ;
    FFWREC.XXXMODID = "258"; /* Module identification*/
    set FG04M002.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(306); /* Not part of sel subm fcst*/
    ;
    return; /* Return to calling process*/
    ;
  else
    ;
    FG04M002.XPLCD = FG7REC.XPLCD;
    FG04M002.SY1SSTNM = " ";
    FG04M002.SY2CLRAB = " ";
    FG04M002.SYBSTGNM = " ";
    FG04M002.XPCABRV = " ";
    ;
    FG04S30(); /* Get Line abbreviated name*/
    ;
    FG04S31(); /* Get Type abbreviated name*/
    ;
  end
end // end FG04258

// Verify Product Type
Function FG04259()
   /* ------------------------------------------------------------*/
   /* Verify Product Type Code.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.YPGCD != "*")
    set FG7REC empty;
    FG7REC.FG3PFNBR = FFWREC.FG3PFNBR;
    FG7REC.FF4FCTMO = FFZREC.FFZINDMO[1];
    FG7REC.XPLCD = "*"; /* Line*/
    FG7REC.XPCCD = "*"; /* Category*/
    FG7REC.SYBSTGNB = "*"; /* Style Group*/
    FG7REC.YPGCD = FG04M002.YPGCD; /* Product Type*/
    ;
    FG04S27(); /* Get row from VPSSTY01*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
      ;
      FFWREC.XXXMODID = "258"; /* Module identification*/
      set FG04M002.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(306); /* Not part of sel subm fcst*/
      ;
      return; /* Return to calling process*/
      ;
    else
      FG04M002.YPGCD = FG7REC.YPGCD;
      ;
    end
  end
  ;
  FG04M002.SY1SSTNM = " ";
  FG04M002.SY2CLRAB = " ";
  FG04M002.SYBSTGNM = " ";
  FG04M002.XPCABRV = " ";
  ;
  FG04S30(); /* Get Line abbreviated name*/
  ;
  FG04S31(); /* Get Type abbreviated name*/
end // end FG04259

// Process valid input request
Function FG04260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.FG04WSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll Left was requested, Indicate first page*/
   /* data is to be displayed and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FG04W00.FG04WPAG = 1; /* indicate page 1 data*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll right was requested, indicate second page*/
   /* data to be displayed and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FG04W00.FG04WPAG = 2; /* Indicate page 2 data*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.FFABEGMO != FG04W02.FFABEGMO /* Beginning month changed*/
   || FG04M002.FFAENDMO != FG04W02.FFAENDMO /* or ending month changed*/
   || FG04M002.YPGCD != FFWREC.YPGCD        /* or Type changed*/
   || FG04M002.XPLCD != FFWREC.XPLCD        /* or Line changed*/
   || FG04M002.XPCCD != FFWREC.XPCCD        /* or Cat changed*/
   || FG04M002.SYBSTGNB != FFWREC.SYBSTGNB  /* or style grp changed*/
   || FG04M002.SY1STNBR != FFWREC.SY1STNBR  /* or style nbr changed*/
   || FG04M002.SY2CLRID != FFWREC.SY2CLRID  /* or color id changed*/
   || FG04M002.XDMCD != FFWREC.XDMCD)       /* or dim changed*/
    ;
    /* ------------------------------------------------------------*/
     /* Save data.*/
    /* ------------------------------------------------------------*/
    ;
    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* Ending month*/
    ;
    FFWREC.YPGCD = FG04M002.YPGCD; /* Type*/
    FFWREC.YPGABRV = FG04M002.YPGABRV; /* Type name*/
    FFWREC.XPLCD = FG04M002.XPLCD; /* Line*/
    FFWREC.XPLABRV = FG04M002.XPLABRV; /* Line name*/
    FFWREC.XPCCD = FG04M002.XPCCD; /* Category*/
    FFWREC.XPCABRV = FG04M002.XPCABRV; /* Category name*/
    FFWREC.SYBSTGNB = FG04M002.SYBSTGNB; /* style grp*/
    FFWREC.SYBSTGNM = FG04M002.SYBSTGNM; /* style grp name*/
    FFWREC.SY1STNBR = FG04M002.SY1STNBR; /* style nbr*/
    FFWREC.SY1SSTNM = FG04M002.SY1SSTNM; /* style name*/
    FFWREC.SY2CLRID = FG04M002.SY2CLRID; /* color id*/
    FFWREC.SY2CLRAB = FG04M002.SY2CLRAB; /* color name*/
    FFWREC.XDMCD = FG04M002.XDMCD; /* dimension*/
    ;
    FG04W00.FG04WSWR = "Y"; /* Request for data switch*/
    FG04W06.FG04WPAG = 0; /* Clear map 003 page nbr*/
    FG04W06.FG04WIDX = 0; /* Clear map 003 cursor position*/
    /* ET FG04W06 EMPTY;              /* Clear map 003 application WS*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF19 was pressed, transfer to application FF0B.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf19) /* If PF19 was pressed*/
    ;
    COMMAREA.CATOAP = "FF0B"; /* to application*/
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG04260

// Main process Map 3
Function FG04300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG04310(); /* Obtain the data to display*/
  ;
  FG04320(); /* Format and display the map*/
  ;
  FG04330(); /* Check attention identifier*/
  ;
  FG04340(); /* Reset fields to normal intensity*/
  ;
  FG04350(); /* Verify the entered data*/
  ;
  FG04360(); /* Process valid input request*/
  ;
  ;
end // end FG04300

// Obtain the data to display
Function FG04310()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W06.FG04WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W06.XXXTSLEN = 630; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FG04313(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain list of styles from PSSTY table.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W06.FG04WIXC = 1; /* Set index for display storage*/
  FG04W06.FG04WCTR = 1; /* Set counter for months*/
  ;
  set FG7REC empty;
  ;
  FG7REC.FF4FCTMO = FFZREC.FFZINDMO[1]; /* Use first fcst month*/
  FG7REC.FG3PFNBR = FFWREC.FG3PFNBR; /* Forecast number*/
  ;
  if (FFWREC.YPGCD == " ")
    set FG04M003 initial; /* Map 003*/
    FFWREC.XXXMODID = "310"; /* Module identification*/
    set FG04M003.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    FG04W06.FG04WSWR = "N"; /* Indicate data not requested*/
    exit stack; /* Exit to display map*/
  else
    FG7REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
    if (FFWREC.YPGCD in YPGTBL.YPGCD)
      FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    end
  end
  ;
  if (FFWREC.XPLCD == " ") /* Line*/
    FG7REC.XPLCD = "*";
  else
    FG7REC.XPLCD = FFWREC.XPLCD;
  end
  ;
  if (FFWREC.XPCCD == " ")
    set FG04M003 initial; /* Map 003*/
    FFWREC.XXXMODID = "310"; /* Module identification*/
    set FG04M003.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    FG04W06.FG04WSWR = "N"; /* Indicate data not requested*/
    exit stack; /* Exit to display map*/
  else
    FG7REC.XPCCD = FFWREC.XPCCD;
    if (FFWREC.XPCCD in XPCTBL.XPCCD)
      FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
    end
  end
  ;
  if (FFWREC.SYBSTGNB == " ") /* Style group not entered*/
    FG7REC.SYBSTGNB = "*"; /* Wildcard style group*/
  else /* Style group entered*/
    if (FFWREC.SY1STNBR == " ") /* Style nbr not entered*/
      FG7REC.SYBSTGNB = FFWREC.SYBSTGNB; /* move in style grp nbr*/
    else /* Style nbr was entered*/
      FG7REC.SYBSTGNB = "*"; /* Wildcard style group*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Get the styles for the submitted forecast.*/
   /* ------------------------------------------------------------*/
  ;
  FG04S33(); /* Select PSSTY*/
  ;
  FG04S35(); /* Fetch PSSTY*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* Process until end of PSSTY set*/
    ;
    /* ------------------------------------------------------------*/
    /* Use SYCLR/SYDVL to retrieve the short style name and*/
    /* color abreviation.  Save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    FG04S39(); /* Retrieve shrt sty nm and color abrv*/
    FG04S40(); /* Save data in display storage*/
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG04W06.FG04WIXC > 15) /* Page is full*/
      FG04318(); /* Add page to temporary storage*/
    end
    ;
    FG04S35(); /* Fetch PSSTY*/
    ;
  end
  ;
  FG04S37(); /* Close PSSTY*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W06.FG04WIXC > 1) /* Page was formatted*/
    FG04318(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W06.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "310"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  else
    ;
    FG04W06.XXXTSPAG = 1; /* Desired page number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W06.FG04WSWR = "N"; /* Request for data switch*/
  ;
  ;
end // end FG04310

// Purge any temp storage
Function FG04313()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FG04W07 empty; /* M003 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG04W06.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FG04W07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "313"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04313

// Add page to temp storage
Function FG04318()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W07.XXXTSLEN = FG04W06.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FG04W07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FG04W07 empty; /* m003 display storage*/
    ;
    FG04W06.FG04WIXC = 1; /* Display line index*/
    ;
    FG04W06.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "318"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04318

// Format and converse the map
Function FG04320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W06.FG04WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FG04W06.FG04WSWF == "Y") /* Map must be formatted*/
      FG04321(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG04M003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG04M003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG04M003.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FG04M003.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FG04M003 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG04M003 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FG04M003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG04M003.CAITEM; /* Application data*/
  ;
  ;
end // end FG04320

// Format the data on the map
Function FG04321()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FG04M003 initial; /* M003 input/output area*/
  ;
  FG04W06.FG04WSWF = "N"; /* Format the map switch*/
  ;
  if (FG04W06.FG04WPAG > 0) /* position on next style if just back*/
                                   /* from FG04*/
    FG04W06.XXXTSPAG = FG04W06.FG04WPAG;
    FG04W06.FG04WPAG = 0;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W06.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FG04W06.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG04W06.XXXTSPAG > FG04W06.TA5TSQIX) /* Desired greater highest*/
        FG04W06.XXXTSPAG = FG04W06.TA5TSQIX; /* Default to highest*/
      end
      ;
      FG04322(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FG04M003.XXXLITPG skip; /* "PAGE" literal*/
    FG04M003.XXXTSPAG = FG04W06.XXXTSPAG; /* Current page*/
    set FG04M003.XXXLITOF skip; /* "OF" literal*/
    FG04M003.TA5TSQIX = FG04W06.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG04M003.XPCCD = FFWREC.XPCCD; /* Category*/
  FG04M003.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
  FG04M003.YPGCD = FFWREC.YPGCD; /* Type*/
  FG04M003.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  if (FG04W06.FG04WIDX > 0) /* check for position of next product*/
    if (FG04W07.SY1STNBR[FG04WIDX] > " ") /* if a prod exists*/
      set FG04M003.FG04MSEL[FG04WIDX] cursor; /* Place cursor*/
    else
      set FG04M003.XPCCD cursor; /* Place cursor*/
    end
    FG04W06.FG04WIDX = 0;
  else
    if (FG04W07.SY1STNBR[1] > " ") /* if a prod exists*/
      set FG04M003.FG04MSEL[1] cursor; /* Place cursor*/
    end
  end
  ;
  FG04W06.SYBSTGNB = "      "; /* Initialize the save style grp nbr*/
  FG04W06.FG04WIXC = 1; /* Initialize line index*/
  while (FG04W06.FG04WIXC <= 15 /* Until screen is full*/
   && FG04W07.SY1STNBR[FG04WIXC] > " ") /* and prod exists*/
    ;
    set FG04M003.FG04MSEL[FG04WIXC] normal; /* make 'sel' visable*/
    FG04M003.SY1STNBR[FG04WIXC] = FG04W07.SY1STNBR[FG04WIXC];
    FG04M003.SY2CLRID[FG04WIXC] = FG04W07.SY2CLRID[FG04WIXC];
    FG04M003.XDMCD[FG04WIXC] = FG04W07.XDMCD[FG04WIXC];
    FG04M003.SY1SSTNM[FG04WIXC] = FG04W07.SY1SSTNM[FG04WIXC];
    FG04M003.SY2CLRAB[FG04WIXC] = FG04W07.SY2CLRAB[FG04WIXC];
    ;
    if (FG04W07.SYBSTGNB[FG04WIXC] != FG04W06.SYBSTGNB) /* style grp changed*/
      FG04M003.SYBSTGNB[FG04WIXC] = FG04W07.SYBSTGNB[FG04WIXC];
      FG04W06.SYBSTGNB = FG04W07.SYBSTGNB[FG04WIXC]; /* save new*/
    else
      FG04M003.SYBSTGNB[FG04WIXC] = " "; /* suppress duplicate*/
    end
    ;
    FG04W06.FG04WIXC = FG04W06.FG04WIXC + 1; /* Increment line index*/
    ;
  end
  ;
end // end FG04321

// Obtain temp storage queue
Function FG04322()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W07.XXXTSLEN = FG04W06.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FG04W06.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FG04W07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "322"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04322

// Check attention identifier
Function FG04330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FG04W06.FG04WSWR == "Y") /* Request for data*/
      set FG04W07 empty; /* m003 display storage*/
    end
    ;
    FG04W06.FG04WSWF = "Y"; /* Format the map switch*/
    FG04W06.FG04WSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M003.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FG04313(); /* Purge temporary storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FG04M003.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF17 pressed exit to map 2*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    FG04W00.FG04WSWD = "2"; /* map switch*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG04M003"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end
    ;
    FG04313(); /* Purge temporary storage*/
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    ;
    FFWREC.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG04330

// Reset highlighted fields
Function FG04340()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG04M003.XPCCD initialAttributes; /* category*/
  set FG04M003.YPGCD initialAttributes; /* Type*/
  ;
  set FG04M003.CATOAP initialAttributes; /* TO application*/
  set FG04M003.CAITEM initialAttributes; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M003.XPCCD == "?" /* Cat list requested*/
   || FG04M003.YPGCD == "?") /* Type list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "340"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of cat codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M003.XPCCD == "?") /* Cat list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG04M003.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FG04M003.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FG04M003.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG04M003.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG04M003.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M003.YPGCD == "?") /* Type list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* type flag*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG04M003.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG04M003.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FG04M003.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG04M003.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG04M003.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "340"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04340

// Verify the entered data
Function FG04350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M003.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "350"; /* Module identification*/
    set FG04M003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    FG04351(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG04M003.XPCCD != FFWREC.XPCCD /* or cat changed*/
     || FG04M003.YPGCD != FFWREC.YPGCD /* or type changed*/
                                       
     || FG04M003.XPCCD == " "          /* or cat missing*/
     || FG04M003.YPGCD == " ")         /* or type missing*/
      ;
      FFWREC.XPLCD = " "; /* clear line cd*/
      FG04352(); /* Verify the key fields*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Else, if page was formatted, verify selection.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG04W06.TA5TSQIX > 0) /* Page was formatted*/
        ;
        FG04W06.FG04WIXC = 15; /* Initialize line index*/
        ;
        while (FG04W06.FG04WIXC > 0) /* Until end of lines*/
          ;
          FG04353(); /* Verify selection*/
          ;
          FG04W06.FG04WIXC = FG04W06.FG04WIXC - 1; /* Decrement line number*/
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FG04350

// Verify the scroll request
Function FG04351()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG04W06.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "351"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG04W06.XXXTSPAG >= FG04W06.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "351"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  FG04354(); /* Highlight selections*/
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M003.XPCCD != FFWREC.XPCCD) /* Cat changed*/
    ;
    FFWREC.XXXMODID = "351"; /* Module identification*/
    set FG04M003.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG04M003.YPGCD != FFWREC.YPGCD) /* Type changed*/
    ;
    FFWREC.XXXMODID = "351"; /* Module identification*/
    set FG04M003.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FG04351

// Verify the key fields
Function FG04352()
   /* ------------------------------------------------------------*/
   /* Hightlight any selection that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  FG04354(); /* Highlight selections*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify type.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M003.YPGCD in YPGTBL.YPGCD /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FG04M003.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FG04M003.YPGABRV = " "; /* Abbreviation*/
    ;
    FFWREC.XXXMODID = "352"; /* Module identification*/
    set FG04M003.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify category code.*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XPCCD = FG04M003.XPCCD; /* Format key*/
  XPCREC.XGPCD = COMMAREA.XGPCD; /* Format key*/
  ;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FG04M003.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FG04M003.XPCABRV = " "; /* Abbreviation*/
    ;
    FFWREC.XXXMODID = "352"; /* Module identification*/
    set FG04M003.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    ;
  end
  ;
  ;
end // end FG04352

// Verify the selection
Function FG04353()
   /* ------------------------------------------------------------*/
   /* If selection was made, ensure an "S" & no prior selections.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M003.FG04MSEL[FG04WIXC] > " ") /* Selection was entered*/
    ;
    if (FG04M003.FG04MSEL[FG04WIXC] != "S") /* Valid selection character*/
      ;
      FFWREC.XXXMODID = "353"; /* Module identification*/
      set FG04M003.FG04MSEL[FG04WIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/
      ;
    else
      ;
      FG04W06.FG04WIXX = FG04W06.FG04WIXC - 1; /* Set counter*/
      ;
      while (FG04W06.FG04WIXX > 0) /* While counter greater than 0*/
        if (FG04M003.FG04MSEL[FG04WIXX] > " ") /* Valid selection character*/
          ;
          FFWREC.XXXMODID = "353"; /* Module identification*/
          set FG04M003.FG04MSEL[FG04WIXC] cursor, bold; /* Highlight*/
          converseLib.validationFailed(73); /* More than one selection*/
          ;
        end
        ;
        FG04W06.FG04WIXX = FG04W06.FG04WIXX - 1; /* Decrement counter*/
        ;
      end
    end
  end
  ;
  ;
end // end FG04353

// Highlight selections
Function FG04354()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W06.FG04WIXC = 15; /* Initialize line index*/
  ;
  while (FG04W06.FG04WIXC > 0) /* Until end of lines*/
    ;
    if (FG04M003.FG04MSEL[FG04WIXC] > " ") /* Selection entered*/
      ;
      FFWREC.XXXMODID = "354"; /* Module identification*/
      set FG04M003.FG04MSEL[FG04WIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/
      ;
    end
    ;
    ;
    FG04W06.FG04WIXC = FG04W06.FG04WIXC - 1; /* Decrement line number*/
    ;
  end
  ;
  ;
end // end FG04354

// Process valid input request
Function FG04360()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W06.FG04WSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M003.XPCCD != FFWREC.XPCCD /* if cat changed*/
   || FG04M003.YPGCD != FFWREC.YPGCD) /* or type changed*/
    ;
    /* ------------------------------------------------------------*/
     /* Update the modifiable data in the FF system commarea.*/
    /* ------------------------------------------------------------*/
    ;
    FFWREC.XPCCD = FG04M003.XPCCD; /* Cat code*/
    FFWREC.YPGCD = FG04M003.YPGCD; /* Type code*/
    ;
    FG04W06.FG04WSWR = "Y"; /* Request for data switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FG04W06.XXXTSPAG = FG04W06.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FG04W06.XXXTSPAG = FG04W06.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If line was selected, transfer to display the forecast.*/
   /* ------------------------------------------------------------*/
  ;
  if ("S" in FG04M003.FG04MSEL) /* Line selected*/
    ;
    FG04M002.SY1STNBR = FG04M003.SY1STNBR[sysVar.arrayIndex]; /* style code*/
    FG04M002.SY2CLRID = FG04M003.SY2CLRID[sysVar.arrayIndex]; /* color code*/
    FG04M002.XDMCD = FG04M003.XDMCD[sysVar.arrayIndex]; /* dim code*/
    FG04M002.SYBSTGNB = FG04M003.SYBSTGNB[sysVar.arrayIndex]; /* style group nbr*/
    ;
    FG04W06.FG04WIDX = sysVar.arrayIndex; /* save style position*/
    FG04W06.FG04WPAG = FG04W06.XXXTSPAG; /* save current page*/
    FG04W00.FG04WSWR = "Y"; /* request for data*/
    FG04W00.FG04WSWF = "Y"; /* format the map*/
    FG04W00.FG04WSWD = "2"; /* map switch*/
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end FG04360

// Select PSSTY
Function FG04S01()
   /* ------------------------------------------------------------*/
   /* Clear PSSTY.*/
   /* ------------------------------------------------------------*/
  ;
  set FG7REC empty; /* clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FG7REC.FG3PFNBR = FG3REC.FG3PFNBR; /* Submit number*/
  FG7REC.FF4FCTMO = FG3REC.FFABEGMO; /* Fcst month*/
  ;
   /* ------------------------------------------------------------*/
   /* Select PSSTY.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4060" ("SU", SQLCA, FG7REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG7REC.FG7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S01

// Obtain SYCLR product data
Function FG04S02()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* PG2REC not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S02

// Obtain SYDVL product data
Function FG04S03()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* PG4REC not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4STNBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S03

// Select PSGRP
Function FG04S04()
   /* ------------------------------------------------------------*/
   /* Clear PSGRP.*/
   /* ------------------------------------------------------------*/
  ;
  set FG6REC empty; /* clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FG6REC.FG3PFNBR = FG3REC.FG3PFNBR; /* Submit number*/
  FG6REC.FF4FCTMO = FG3REC.FFABEGMO; /* Forecast month*/
  FG6REC.YPGCD = FFWREC.YPGCD; /* type*/
  ;
   /* ------------------------------------------------------------*/
   /* Select PSGRP.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4180" ("SU", SQLCA, FG6REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S04"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG6REC.FG6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S04

// Select SYGRP
Function FG04S06()
   /* ------------------------------------------------------------*/
   /* Select SYGRP.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3150" ("S ", SQLCA, SYBREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* SYBREC not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S06"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SYBREC.SYBSTGNB; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S06

// Open  PSCAT
Function FG04S07()
   /* ------------------------------------------------------------*/
   /* Open PSCAT.*/
   /* ------------------------------------------------------------*/
  ;
  set FG5REC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FG5REC.FG3PFNBR = FG3REC.FG3PFNBR; /* Submit number*/
  FG5REC.FF4FCTMO = FG3REC.FFABEGMO; /* Forecast month*/
  ;
  try
    call "IO4030" ("S3", SQLCA, FG5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S07"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG5REC.FG5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S07

// Fetch PSCAT row
Function FG04S08()
   /* ------------------------------------------------------------*/
   /* Fetch PSCAT.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4030" ("N3", SQLCA, FG5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
        if (FG04W00.FG04WRCT != 0) /* More than 1 row found*/
          return; /* Return to previous process*/
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S08"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG5REC.FG5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S08

// Close PSCAT
Function FG04S09()
   /* ------------------------------------------------------------*/
   /* Close PSCAT.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4030" ("C3", SQLCA, FG5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S09"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSCAT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S09

// Open PSLIN
Function FG04S10()
   /* ------------------------------------------------------------*/
   /* Open PSLIN.*/
   /* ------------------------------------------------------------*/
  ;
  set FG4REC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FG4REC.FG3PFNBR = FG3REC.FG3PFNBR; /* Submit number*/
  FG4REC.FF4FCTMO = FG3REC.FFABEGMO; /* Forecast month*/
  ;
  try
    call "IO4050" ("S1", SQLCA, FG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S10"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSLIN01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG4REC.FG4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S10

// Fetch PSLIN
Function FG04S11()
   /* ------------------------------------------------------------*/
   /* Fetch PSLIN.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4050" ("N1", SQLCA, FG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
        if (FG04W00.FG04WRCT != 0) /* More than 1 row found*/
          return; /* Return to previous process*/
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S11"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSLIN01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG4REC.FG4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S11

// Close PSLIN
Function FG04S12()
   /* ------------------------------------------------------------*/
   /* Close PSLIN.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4050" ("C1", SQLCA, FG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S12"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSLIN01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S12

// Format date
Function FG04S16()
   /* --------------------------------------------------------*/
   /* Convert format of submitted date from CCYYMMDD to*/
   /* MM-DD-YY*/
   /* --------------------------------------------------------*/
  ;
  set TA2REC empty; /* clear row storage area*/
  ;
  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "G"; /* type*/
  TA2REC.TA2GRGGN = FG3REC.ZZZCHGDT; /* date to be converted*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/
    ;
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
      ;
      FG04W00.FG04WSDT = TA2REC.TA2GRGB; /* Save converted date*/
      ;
    end
    ;
  else
    ;
    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FG04S01 CONVERT THE SETUP DATE";
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    FFWREC.XXXMODID = "S16"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    exit stack; /* exit to display map*/
    ;
  end
  ;
  ;
end // end FG04S16

// Obtain TSQ Record
Function FG04S17()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W01.XXXTSLEN = FG04W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FG04W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FG04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S17"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG04S17

// Highlight any selection
Function FG04S18()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.FG04WIXM = 15; /* Initialize line index*/
  ;
  while (FG04W00.FG04WIXM > 0) /* Until end of lines*/
    ;
    if (FG04M001.FG04MSEL[FG04WIXM] > " ") /* Selection entered*/
      ;
      FFWREC.XXXMODID = "S18"; /* Module identification*/
      set FG04M001.FG04MSEL[FG04WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/
      ;
    end
    ;
    ;
    FG04W00.FG04WIXM = FG04W00.FG04WIXM - 1; /* Decrement line number*/
    ;
  end
  ;
  ;
end // end FG04S18

// Expand date range
Function FG04S20()
   /* ------------------------------------------------------------*/
   /* Call XSFFS30 to expand date range.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FFWREC.FFAENDMO; /* Ending date*/
  ;
  XSFFS30(); /* Verify the range*/
  ;
   /* ------------------------------------------------------------*/
   /* Save true number of months in range.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.FG04WNBR = FFZREC.FFZNUMMO; /* Hold true nbr of mos*/
  ;
   /* ------------------------------------------------------------*/
   /* Save dates.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W02.FFABEGMO = FFZREC.FFZBYYMM; /* Beginning date*/
  FG04W02.FFAENDMO = FFZREC.FFZEYYMM; /* Ending date*/
  ;
  FG04W00.FG04WCNT = 1; /* Set counter*/
  while (FG04W00.FG04WCNT <= FG04W00.FG04WNBR) /* While cnt LE nbr mos*/
    ;
    FG04W00.FFZIYYMM[FG04WCNT] = FFZREC.FFZIYYMM[FG04WCNT];
    ;
    FG04W00.FG04WCNT = FG04W00.FG04WCNT + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If second page will exist, turn on switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WNBR > 6) /* If there are more than 6 mos*/
    FG04W00.FG04WPG2 = "Y"; /* Page 2 exist switch*/
  else
    FG04W00.FG04WPG2 = "N"; /* Page 2 exist switch*/
  end
  ;
  ;
end // end FG04S20

// Translate column amounts
Function FG04S21()
   /* ------------------------------------------------------------*/
   /* Translate Beginning Inventory*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WCNT == 1) /* If this is the first month of the range*/
    FFXREC.FFXNUMB = FG04W03.FF6BEINV; /* Load for trans*/
    ;
    if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
     || FFXREC.FFXNUMB <= -999500) /* Use millions*/
      ;
      XSFFS12(); /* Translation number*/
    else /* Use thousands*/
      ;
      XSFFS14(); /* Translation number*/
    end
    ;
    FG04W02.FG04WBEI[FG04WIXM] = FFXREC.FFXCHAR; /* Beg inv*/
    ;
  else
    /* ------------------------------------------------------------*/
     /* use last month's ending inventory for this month's beg inv.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG04W00.FG04WCNT <= 7)
      FG04W00.FG04WIX3 = FG04W00.FG04WCNT - 1; /* subtract 1*/
      FG04W02.FG04WBEI[FG04WIXM] = FG04W02.FG04WEIV[FG04WIX3]; /* BI*/
    else
      FG04W02.FG04WBEI[FG04WIXM] = FG04W02.FG04WEIV[FG04WCNT]; /* BI*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Translate Bal-to-ship.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W03.FG4BALSH; /* Load for trans*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
  end
  ;
  FG04W02.FG04WBAS[FG04WIXM] = FFXREC.FFXCHAR; /* Bal to Ship*/
  ;
   /* --------------*/
   /* add to total*/
   /* --------------*/
  FG04W04.FG04WBSA = FG04W04.FG04WBSA + FFXREC.FFXNUMB;
  ;
   /* ------------------------------------------------------------*/
   /* Translate On order.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W03.FG4ONORD; /* Load for trans*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
  end
  ;
  FG04W02.FG04WONO[FG04WIXM] = FFXREC.FFXCHAR; /* On Order*/
  ;
   /* --------------*/
   /* add to total*/
   /* --------------*/
  FG04W04.FG04WONA = FG04W04.FG04WONA + FFXREC.FFXNUMB;
  ;
   /* ------------------------------------------------------------*/
   /* Translate Master Production Forecast.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W03.FF6SUBPF; /* Load for trans*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
  end
  ;
  FG04W02.FG04WMPF[FG04WIXM] = FFXREC.FFXCHAR; /* Mstr Prdctn Fcst*/
  ;
   /* --------------*/
   /* add to total*/
   /* --------------*/
  ;
  FG04W04.FG04WPFA = FG04W04.FG04WPFA + FFXREC.FFXNUMB;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* SUPPLY  =  Beg Inv  +  On Order  +  Sug Prd Fcst*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04W00.FG04WCNT > 1) /* If not on the first month*/
    FG04W00.FG04WIX3 = FG04W00.FG04WCNT - 1; /* subtract 1*/
    FG04W00.FG04WFDA = FG04W02.FG04WHEI[FG04WIX3];
  else
    FG04W00.FG04WFDA = FG04W03.FF6BEINV;
  end
  ;
  FG04W00.FG04WFDA = FG04W00.FG04WFDA + FG04W03.FF6SUBPF;
  ;
  FG04W03.FG04WHSU = FG04W00.FG04WFDA; /* Hold for EI calc*/
  ;
  FFXREC.FFXNUMB = FG04W00.FG04WFDA; /* Load for trans*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
  end
  ;
  FG04W02.FG04WSUP[FG04WIXM] = FFXREC.FFXCHAR; /* display*/
  ;
   /* --------------*/
   /* add to total*/
   /* --------------*/
  FG04W04.FG04WSUA = FG04W04.FG04WSUA + FFXREC.FFXNUMB;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* END INVENTORY  =  Supply  -  Bal-to-Ship*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.FG04WFDA = FG04W03.FG04WHSU; /* Supply held*/
  FG04W00.FG04WFDA = FG04W00.FG04WFDA - FG04W03.FG4BALSH; /* Bal to ship*/
  ;
  FG04W02.FG04WHEI[FG04WCNT] = FG04W00.FG04WFDA; /* hold end inv*/
  FFXREC.FFXNUMB = FG04W00.FG04WFDA; /* Bal to ship*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
  end
  ;
  FG04W02.FG04WEIV[FG04WIXM] = FFXREC.FFXCHAR; /* display*/
  ;
   /* --------------*/
   /* add to total*/
   /* --------------*/
  ;
  FG04W04.FG04WEIA = FG04W04.FG04WEIA + FFXREC.FFXNUMB;
  ;
   /* ------------------------------------------------------------*/
   /* Translate Safety Stock.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W03.FF6SFSTK; /* Load for trans*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
  end
  ;
  FG04W02.FG04WSST[FG04WIXM] = FFXREC.FFXCHAR; /* Sfty Stk*/
  ;
   /* --------------*/
   /* add to total*/
   /* --------------*/
  ;
  FG04W04.FG04WSSA = FG04W04.FG04WSSA + FFXREC.FFXNUMB;
  ;
   /* ------------------------------------------------------------*/
   /* Translate NIL Production.*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG04W03.FG4NLPRD; /* Nil Sales Fcst*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
  end
  ;
  FG04W02.FG04WNIL[FG04WIXM] = FFXREC.FFXCHAR; /* display field*/
  ;
   /* --------------*/
   /* add to total*/
   /* --------------*/
  ;
  FG04W04.FG04WNPA = FG04W04.FG04WNPA + FFXREC.FFXNUMB;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate:*/
           /* TOT PRDCTN  =  Nil Prdctn fcst  +  Mstr Prdctn Fcst*/
   /* ------------------------------------------------------------*/
  ;
  FG04W00.FG04WFDA = 0; /* clear field*/
  FG04W00.FG04WFDA = FG04W00.FG04WFDA + FG04W03.FG4NLPRD;
  FG04W00.FG04WFDA = FG04W00.FG04WFDA + FG04W03.FF6SUBPF;
  ;
  FFXREC.FFXNUMB = FG04W00.FG04WFDA; /* Total Production*/
  ;
  if (FFXREC.FFXNUMB >= +9999500 /* Use millions*/
   || FFXREC.FFXNUMB <= -999500) /* Use millions*/
    ;
    XSFFS12(); /* Translation number*/
  else /* Use thousands*/
    ;
    XSFFS14(); /* Translation number*/
  end
  ;
  FG04W02.FG04WTOT[FG04WIXM] = FFXREC.FFXCHAR; /* display*/
  ;
   /* --------------*/
   /* add to total*/
   /* --------------*/
  ;
  FG04W04.FG04WTPA = FG04W04.FG04WTPA + FFXREC.FFXNUMB;
  ;
  ;
end // end FG04S21

// Load the map
Function FG04S23()
   /* ------------------------------------------------------------*/
   /* Load the map.*/
   /* ------------------------------------------------------------*/
  ;
  FG04M002.FG04WBEI[FG04WIXM] = FG04W02.FG04WBEI[FG04WCNT];
  FG04M002.FG04WBAS[FG04WIXM] = FG04W02.FG04WBAS[FG04WCNT];
  FG04M002.FG04WONO[FG04WIXM] = FG04W02.FG04WONO[FG04WCNT];
  FG04M002.FG04WMPF[FG04WIXM] = FG04W02.FG04WMPF[FG04WCNT];
  FG04M002.FG04WSUP[FG04WIXM] = FG04W02.FG04WSUP[FG04WCNT];
  FG04M002.FG04WEIV[FG04WIXM] = FG04W02.FG04WEIV[FG04WCNT];
  FG04M002.FG04WSST[FG04WIXM] = FG04W02.FG04WSST[FG04WCNT];
  FG04M002.FG04WNIL[FG04WIXM] = FG04W02.FG04WNIL[FG04WCNT];
  FG04M002.FG04WTOT[FG04WIXM] = FG04W02.FG04WTOT[FG04WCNT];
  if (FG04M002.FG04WRMO[FG04WIXM] == " SUB"
   || FG04M002.FG04WRMO[FG04WIXM] == "TOTL")
    FG04M002.FG04WBEI[FG04WIXM] = " ";
    FG04M002.FG04WSUP[FG04WIXM] = " ";
    FG04M002.FG04WEIV[FG04WIXM] = " ";
    FG04M002.FG04WSST[FG04WIXM] = " ";
  end
  ;
  FG04W00.FG04WIXM = FG04W00.FG04WIXM + 1; /* counter for columns*/
  FG04W00.FG04WCNT = FG04W00.FG04WCNT + 1; /* counter for months*/
  ;
  ;
end // end FG04S23

// Select VPSSTY01 by Sty/Col/Dim
Function FG04S26()
  ;
   /* ------------------------------------------------------------*/
   /* Verify Style, Color & Dimension*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4060" ("S ", SQLCA, FG7REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      return; /* return*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S26"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG7REC.FG7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG04S26

// Select VPSSTY01
Function FG04S27()
  ;
   /* ------------------------------------------------------------*/
   /* Verify Style Group, Cat, Line and Product Type.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Open VPSSTY01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4060" ("S3", SQLCA, FG7REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
        /* Next Sentence          ; next sentence*/
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* Normal return code*/
      ;
        /* Next Sentence          ; next sentence*/
      ;
    else
      ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      ;
      FFWREC.XXXMODID = "S27"; /* Module identification*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
        ;
        converseLib.validationFailed(47); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        ;
      else
        ;
        converseLib.validationFailed(01); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        ;
        converseLib.clearScreen();
         /* Clear screen before display*/
        ;
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "SELECT ROW";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPSSTY01"; /* Table view name*/
      TA1REC.TA1TBLKE = FG7REC.FG7KEY; /* Table key*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Fetch first row from VPSSTY01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4060" ("N3", SQLCA, FG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the SQL commarea from the fetch.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Commarea from fetch*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or row not found, continue to close the set.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
        /* Next Sentence          ; next sentence*/
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* Normal return code*/
      ;
        /* Next Sentence          ; next sentence*/
      ;
    else
      ;
      ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      ;
      FFWREC.XXXMODID = "S27"; /* Module identification*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
        ;
        converseLib.validationFailed(47); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        ;
      else
        ;
        converseLib.validationFailed(01); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        ;
        converseLib.clearScreen();
         /* Clear screen before display*/
        ;
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "SELECT ROW";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPSSTY01"; /* Table view name*/
      TA1REC.TA1TBLKE = FG7REC.FG7KEY; /* Table key*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* Close VPSSTY01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4060" ("C3", SQLCA, FG7REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
        /* Restore the SQL commarea from the fetch\*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* Commarea from fetch*/
    ;
    return; /* Return to previous process*/
  else
    ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
    ;
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "FG04S27 - CLOSE VPSSTY01 SET";
    TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPSSTY01"; /* Table view name*/
    TA1REC.TA1TBLKE = FG7REC.FG7KEY; /* Table key*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination Function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    FFWREC.XXXMODID = "S27"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
end // end FG04S27

// Get Sty Grp nm from VSYGRP01
Function FG04S28()
  ;
   /* ------------------------------------------------------------*/
   /* Get Style Group Abbreviated description from DPRODG.VSYGRP01*/
   /* ------------------------------------------------------------*/
  ;
  set SYBREC empty;
  SYBREC.SYBSTGNB = FG04M002.SYBSTGNB;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3150" ("S ", SQLCA, SYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG04M002.SYBSTGNM = SYBREC.SYBSTGNM;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
        ;
        FG04M002.SYBSTGNM = " ";
        return; /* Return to previous process*/
        ;
      else
        ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
        ;
        TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
        TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
        ;
        FFWREC.XXXMODID = "S29"; /* Module identification*/
        ;
        if (sysVar.errorCode == "00000000" /* Call successful*/
         && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
          ;
          converseLib.validationFailed(47); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
          ;
        else
          ;
          converseLib.validationFailed(10); /* Indicate system error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          ;
          converseLib.clearScreen();
           /* Clear screen before display*/
          ;
        end
        ;
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "SELECT UNIQUE       ";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
        TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSYGRP01"; /* Table view name*/
        TA1REC.TA1TBLKE = SYBREC.SYBSTGNB; /* Table key*/
        ;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        ;
        exit stack; /* Exit to display map*/
        ;
        ;
      end
    end
  end
end // end FG04S28

// Get Cat abbrev nm from XPCTBL
Function FG04S29()
   /* ------------------------------------------------------------*/
    /* Get Category abbreviated name from CSP XPCTBL*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XPCCD = FG04M002.XPCCD; /* Format key*/
  XPCREC.XGPCD = COMMAREA.XGPCD; /* Format key*/
  ;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FG04M002.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbrev*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/
    ;
    FG04M002.XPCABRV = " "; /* Abbreviation*/
    ;
    FFWREC.XXXMODID = "S29"; /* Module identification*/
    set FG04M002.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    ;
  end
end // end FG04S29

// Get Line abbrev nm from XPLTBL
Function FG04S30()
   /* ------------------------------------------------------------*/
   /* Get Line Code abbreviated description from CSP XPLTBL.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.XPLCD == "*") /* If line equal 'all'*/
    ;
    FG04M002.XPLABRV = "*ALL*"; /* Abbreviation*/
    ;
  else
    ;
    if (FG04M002.XPLCD > " ") /* If line exists*/
      ;
      XPLREC.XPLCD = FG04M002.XPLCD; /* Format key*/
      XPLREC.XGPCD = COMMAREA.XGPCD; /* Format key*/
      ;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FG04M002.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* descr*/
        ;
      else
        ;
   /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/
        ;
        FG04M002.XPLABRV = " "; /* Abbreviation*/
        ;
        FFWREC.XXXMODID = "257"; /* Module identification*/
        set FG04M002.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Indicate missing or invalid*/
        ;
      end
      ;
    else
      ;
      FG04M002.XPLABRV = " "; /* Abbreviation*/
      ;
    end
  end
end // end FG04S30

// Get Prdct nm from YPGTBL
Function FG04S31()
   /* ------------------------------------------------------------*/
   /* Get Product Type Code Abbreviated description from CSP table.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG04M002.YPGCD == " " /* Type code missing*/
   && FG04M002.SY1STNBR > " ") /* Style/color entered*/
     /* next sentence*/
  else
    if (FG04M002.YPGCD == "*") /* If type eq all*/
      FG04M002.YPGABRV = "*ALL*"; /* Abbreviation*/
    else
      if (FG04M002.YPGCD in YPGTBL.YPGCD /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FG04M002.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/
        FG04M002.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S31"; /* Module identification*/
        set FG04M002.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Indicate missing or invalid*/
      end
    end
  end
end // end FG04S31

// Select VPSSTY01
Function FG04S33()
   /* ------------------------------------------------------------*/
   /* Select VPSSTY01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4060" ("S3", SQLCA, FG7REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S33"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG7REC.FG7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG04S33

// Fetch VPSSTY01
Function FG04S35()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch first row from VPSSTY01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4060" ("N3", SQLCA, FG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the SQL commarea from the fetch.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Commarea from fetch*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S35"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG7REC.FG7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG04S35

// Close VPSSTY01
Function FG04S37()
  ;
   /* ------------------------------------------------------------*/
   /* Close VPSSTY01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4060" ("C3", SQLCA, FG7REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
        /* Restore the SQL commarea from the fetch*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* Commarea from fetch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FG04S37 - CLOSE VPSSTY01 SET";
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG7REC.FG7KEY; /* Table key*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination Function*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  FFWREC.XXXMODID = "S37"; /* Module identification*/
  converseLib.validationFailed(1); /* System error occurred*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG04S37

// Verify style
Function FG04S39()
  ;
   /* ---------------------------------------------------------------*/
   /* Use SYCLR/SYDVL to get style short name and color abreviation.*/
   /* ---------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Select unique VSYCLR01.*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  ;
  PG2REC.XGPCD = "02"; /* gpc code*/
  PG2REC.SY1STNBR = FG7REC.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = FG7REC.SY2CLRID; /* color*/
  PG2REC.XDMCD = FG7REC.XDMCD; /* dim*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* If row not found, select unique SYDVL.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* SYCLR row not found*/
      ;
      /* ------------------------------------------------------------*/
       /* Select unique SYDVL row from the table.*/
      /* ------------------------------------------------------------*/
      ;
      set PG4REC empty;
      PG4REC.PG4STNBR = FG7REC.SY1STNBR; /* Style nbr*/
      ;
      try
        call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
      end /* Select row*/
      ;
      /* ------------------------------------------------------------*/
       /* If successful, or not found return to the previous process.*/
      /* ------------------------------------------------------------*/
      ;
      if (sysVar.errorCode == "00000000") /* Call successful*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == 100)
          ;
          if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
            ;
            PG2REC.SY1SSTNM = PG4REC.SY1SSTNM; /* copy short*/
                                      /* style name to syclr fld*/
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* SYDVL not found*/
              PG2REC.SY1SSTNM = " "; /* move spaces*/
            end
          end
          ;
          PG2REC.SY2CLRAB = " "; /* move spaces*/
          return; /* Return to previous process*/
          ;
        end
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      ;
      FG04M003.XXXMODID = "S39"; /* Module identification*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
        converseLib.validationFailed(47); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(01); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FG04M003.XXXMODID; /* Module number*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
      TA1REC.TA1TBLKE = PG4REC.PG4STNBR; /* Table key*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FG04M003.XXXMODID = "S39"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FG04M003.XXXMODID; /* Module number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG04S39

// Save the display data
Function FG04S40()
  ;
   /* ------------------------------------------------------------*/
   /* Save the product data from the tables into display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG04W07.SYBSTGNB[FG04WIXC] = FG7REC.SYBSTGNB; /* style group nbr*/
  FG04W07.SY1STNBR[FG04WIXC] = FG7REC.SY1STNBR; /* style nbr*/
  FG04W07.SY2CLRID[FG04WIXC] = FG7REC.SY2CLRID; /* color*/
  FG04W07.XDMCD[FG04WIXC] = FG7REC.XDMCD; /* dim*/
  FG04W07.SY1SSTNM[FG04WIXC] = PG2REC.SY1SSTNM; /* short style name*/
  FG04W07.SY2CLRAB[FG04WIXC] = PG2REC.SY2CLRAB; /* color abrv*/
  ;
  if (FG7REC.SY1STNBR == FFWREC.SY1STNBR /* style nbr match*/
   && FG7REC.SY2CLRID == FFWREC.SY2CLRID /* color match*/
   && FG7REC.XDMCD == FFWREC.XDMCD)      /* dim match*/
    FG04W06.FG04WIDX = FG04W06.FG04WIXC; /* set column position*/
    FG04W06.FG04WPAG = FG04W06.TA5TSQIX + 1; /* set page*/
  end
  ;
  FG04W06.FG04WIXC = FG04W06.FG04WIXC + 1; /* Increment line index*/
  ;
end // end FG04S40

//*** RECORD=FG04W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG04W00 type basicRecord
  10 FG04WPAG FG04WPAG ; 
  10 FG04WPG2 FG04WPG2 ; 
  10 FG04WIXM FG04WIXM ; 
  10 FG04WIX2 FG04WIX2 ; 
  10 FG04WIX3 FG04WIX3 ; 
  10 FG04WSWC FG04WSWC ; 
  10 FG04WSWF FG04WSWF ; 
  10 FG04WSWR FG04WSWR ; 
  10 FG04WSWS FG04WSWS ; 
  10 FG04WDSW FG04WDSW ; 
  10 FG04WEOC FG04WEOC ; 
  10 FG04WSWM FG04WSWM ; 
  10 FG04WSWD FG04WSWD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * num(1) ; 
  10 FG04WECF FG04WECF ; 
  10 FG04WNBR FG04WNBR ; 
  10 FG04WFDA FG04WFDA ; 
  10 FG04WFDB FG04WFDB ; 
  10 FG04WHMF FG04WHMF ; 
  10 * num(1) ; 
  10 FG04WSMO FG04WSMO ; 
  10 FG04WCMO FG04WCMO ; 
  10 FG04WLVL FG04WLVL ; 
  10 * num(1) ; 
  10 FFZIYYMM FFZIYYMM [12] ; 
  10 * num(1) ; 
  10 FG04WSDT FG04WSDT ; 
  10 FG04WCNT FG04WCNT ; 
  10 FG04WSUB FG04WSUB ; 
  10 FG04WRCT FG04WRCT ; 
  10 XPLCD XPLCD ; 
  10 * num(1) ; 
end // end FG04W00

//*** RECORD=FG04W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG04W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1489) ; 
    10 FG04WSMO FG04WSMO ; 
    10 FG3PFNBR FG3PFNBR [15] ; 
    10 FG04WLVL FG04WLVL [15] ; 
    10 FG04WSDT FG04WSDT [15] ; 
    10 FFABEGMO FFABEGMO [15] ; 
    10 FFAENDMO FFAENDMO [15] ; 
    10 YPGABRV YPGABRV [15] ; 
    10 YPGCD YPGCD [15] ; 
    10 XPLABRV XPLABRV [15] ; 
    10 XPLCD XPLCD [15] ; 
    10 XPCABRV XPCABRV [15] ; 
    10 XPCCD XPCCD [15] ; 
    10 SYBSTGNM SYBSTGNM [15] ; 
    10 SYBSTGNB SYBSTGNB [15] ; 
    10 SY1STNBR SY1STNBR [15] ; 
    10 SY1SSTNM SY1SSTNM [15] ; 
    10 XDMCD XDMCD [15] ; 
    10 SY2CLRAB SY2CLRAB [15] ; 
    10 SY2CLRID SY2CLRID [15] ; 
end // end FG04W01

//*** RECORD=FG04W02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record FG04W02 type basicRecord
  5 CACHGFL CACHGFL ; 
  5 FFABEGMO FFABEGMO ; 
  5 FFAENDMO FFAENDMO ; 
  5 YSMXDV YSMXDV ; 
  5 YSMSMDSC YSMSMDSC ; 
  5 YPGCD YPGCD ; 
  5 YPGABRV YPGABRV ; 
  5 XPLCD XPLCD ; 
  5 XPLABRV XPLABRV ; 
  5 XPCCD XPCCD ; 
  5 XPCABRV XPCABRV ; 
  5 SYBSTGNB SYBSTGNB ; 
  5 SYBSTGNM SYBSTGNM ; 
  5 SY2CLRID SY2CLRID ; 
  5 SY2CLRAB SY2CLRAB ; 
  5 FG3SUBMO FG3SUBMO ; 
  5 * char(1) ; 
  5 FG04WBEI FG04WBEI [14] ; 
  5 FG04WBAS FG04WBAS [14] ; 
  5 FG04WONO FG04WONO [14] ; 
  5 FG04WMPF FG04WMPF [14] ; 
  5 FG04WSUP FG04WSUP [14] ; 
  5 FG04WEIV FG04WEIV [14] ; 
  5 FG04WSST FG04WSST [14] ; 
  5 FG04WNIL FG04WNIL [14] ; 
  5 FG04WTOT FG04WTOT [14] ; 
  5 * char(1) ; 
  5 FG04WHEI FG04WHEI [12] ; 
end // end FG04W02

//*** RECORD=FG04W03 ****
// Hold Selected data for translation
// ***********************
Record FG04W03 type basicRecord
  5 FF6BEINV FF6BEINV ; 
  5 FG4BALSH FG4BALSH ; 
  5 FG4ONORD FG4ONORD ; 
  5 FF6SUBPF FF6SUBPF ; 
  5 FG04WHSU FG04WHSU ; 
  5 FF6SFSTK FF6SFSTK ; 
  5 FG4NLPRD FG4NLPRD ; 
  5 * char(1) ; 
end // end FG04W03

//*** RECORD=FG04W04 ****
// Storage for total fields
// ***********************
Record FG04W04 type basicRecord
  5 FG04WBIA FG04WBIA ; 
  5 FG04WBSA FG04WBSA ; 
  5 FG04WONA FG04WONA ; 
  5 FG04WPFA FG04WPFA ; 
  5 FG04WSUA FG04WSUA ; 
  5 FG04WEIA FG04WEIA ; 
  5 FG04WSSA FG04WSSA ; 
  5 FG04WNPA FG04WNPA ; 
  5 FG04WTPA FG04WTPA ; 
end // end FG04W04

//*** RECORD=FG04W05 ****
// Accumulate amounts from PSLIN
// ***********************
Record FG04W05 type basicRecord
  5 FG04WBIC FG04WBIC ; 
  5 FG04WBSC FG04WBSC ; 
  5 FG04WONC FG04WONC ; 
  5 FG04WPFC FG04WPFC ; 
  5 FG04WSSC FG04WSSC ; 
  5 FG04WNPC FG04WNPC ; 
end // end FG04W05

//*** RECORD=FG04W06 ****
// ----------------------------
// Application working storage - Map 3
// ----------------------------
// ***********************
Record FG04W06 type basicRecord
  10 FG04WIXC FG04WIXC ; 
  10 FG04WIXX FG04WIXX ; 
  10 FG04WSWF FG04WSWF ; 
  10 FG04WSWR FG04WSWR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 * num(1) ; 
  10 FG04WCTR FG04WCTR ; 
  10 FG04WPAG FG04WPAG ; 
  10 FG04WIDX FG04WIDX ; 
end // end FG04W06

//*** RECORD=FG04W07 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record FG04W07 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(630) ; 
    10 SYBSTGNB SYBSTGNB [15] ; 
    10 SY1STNBR SY1STNBR [15] ; 
    10 SY2CLRID SY2CLRID [15] ; 
    10 XDMCD XDMCD [15] ; 
    10 SY1SSTNM SY1SSTNM [15] ; 
    10 SY2CLRAB SY2CLRAB [15] ; 
end // end FG04W07

//*** RECORD=FG4REC ****
// ********* PRODUCTION FORECAST SUBMIT BY LINE TABLE *********
// 
// DB2 TABLE VIEW:       DFCAST.VPSLIN01
// 
// DCLGEN MEMBER:        DCL00679
// 
// I/O MODULE:           IO4050
// 
// KEY TO TABLE:         FG3PFNBR        (Primary)
//                       FF4FCTMO
//                       XPLCD
//                       YPGCD
// 
//                       FG3PFNBR        (Alternate)
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/22/89  SPOPA   New record.
// **********************
Record FG4REC type basicRecord
  5 FG4GROUP FG4GROUP ; 
    10 FG4KEY FG4KEY ; 
      15 FG4KEY2 FG4KEY2 ; 
        20 FG3PFNBR FG3PFNBR ; 
      15 FF4FCTMO FF4FCTMO ; 
      15 XPLCD XPLCD ; 
      15 YPGCD YPGCD ; 
    10 FF6SUBPF FF6SUBPF ; 
    10 FG4ONORD FG4ONORD ; 
    10 FF6SFSTK FF6SFSTK ; 
    10 FG4ITURN FG4ITURN ; 
    10 FG4NLPRD FG4NLPRD ; 
    10 FF6BEINV FF6BEINV ; 
    10 FG4BALSH FG4BALSH ; 
    10 FG4PFSFL FG4PFSFL ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FG4REC

//*** RECORD=FG5REC ****
// ******* PRODUCTION FORECAST SUBMIT BY CATEGORY TABLE *******
// 
// DB2 TABLE VIEW:       DFCAST.VPSCAT01
// 
// DCLGEN MEMBER:        DCL00661
// 
// I/O MODULE:           IO4030
// 
// KEY TO TABLE:         FG3PFNBR        (Primary)
//                       FF4FCTMO
//                       XPCCD
//                       YPGCD
// 
//                       FG3PFNBR        (Alternate)
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/22/89  SPOPA   New record.
// **********************
Record FG5REC type basicRecord
  5 FG5GROUP FG5GROUP ; 
    10 FG5KEY FG5KEY ; 
      15 FG5KEY2 FG5KEY2 ; 
        20 FG3PFNBR FG3PFNBR ; 
      15 FF4FCTMO FF4FCTMO ; 
      15 XPCCD XPCCD ; 
      15 YPGCD YPGCD ; 
    10 FF6SUBPF FF6SUBPF ; 
    10 FG4ONORD FG4ONORD ; 
    10 FF6SFSTK FF6SFSTK ; 
    10 FG4ITURN FG4ITURN ; 
    10 FG4NLPRD FG4NLPRD ; 
    10 FF6BEINV FF6BEINV ; 
    10 FG4BALSH FG4BALSH ; 
    10 FG4PFSFL FG4PFSFL ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FG5REC

//*** RECORD=FG6REC ****
// ***** PRODUCTION FORECAST SUBMIT BY STYLE GROUP TABLE ******
// 
// DB2 TABLE VIEW:       DFCAST.VPSGRP01
// 
// DCLGEN MEMBER:        DCL00693
// 
// I/O MODULE:           IO4180
// 
// KEY TO TABLE:         FG3PFNBR        (Primary)
//                       FF4FCTMO
//                       SYBSTGNB
//                       YPGCD
// 
//                       FG3PFNBR        (Alternate)
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/22/89  SPOPA   New record.
// **********************
Record FG6REC type basicRecord
  5 FG6GROUP FG6GROUP ; 
    10 FG6KEY FG6KEY ; 
      15 FG6KEY2 FG6KEY2 ; 
        20 FG3PFNBR FG3PFNBR ; 
      15 FF4FCTMO FF4FCTMO ; 
      15 SYBSTGNB SYBSTGNB ; 
      15 YPGCD YPGCD ; 
    10 FFEWSNBR FFEWSNBR ; 
    10 FF6SUBPF FF6SUBPF ; 
    10 FG4ONORD FG4ONORD ; 
    10 FF6SFSTK FF6SFSTK ; 
    10 FG4ITURN FG4ITURN ; 
    10 FG4NLPRD FG4NLPRD ; 
    10 FF6BEINV FF6BEINV ; 
    10 FG4BALSH FG4BALSH ; 
    10 FG4PFSFL FG4PFSFL ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FG6REC

//*** RECORD=FG7REC ****
// ***** PRODUCTION FORECAST SUBMIT BY STYLE/COLOR TABLE ******
// 
// DB2 TABLE VIEW:       DFCAST.VPSSTY01
// 
// DCLGEN MEMBER:        DCL00680
// 
// I/O MODULE:           IO4060
// 
// KEY TO TABLE:         FG3PFNBR        (Primary)
//                       FF4FCTMO
//                       SY1STNBR
//                       SY2CLRID
//                       XDMCD
// 
//                       FG3PFNBR        (Alternate)
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/22/89  SPOPA   New record.
//          07/22/91  LDELUH  Add YPGCD, XPLCD, XPCCD, &
//                            SYBSTGNB.
// **********************
Record FG7REC type basicRecord
  5 FG7GROUP FG7GROUP ; 
    10 FG7KEY FG7KEY ; 
      15 FG7KEY2 FG7KEY2 ; 
        20 FG3PFNBR FG3PFNBR ; 
      15 FF4FCTMO FF4FCTMO ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 YPGCD YPGCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 FFEWSNBR FFEWSNBR ; 
    10 FF6SUBPF FF6SUBPF ; 
    10 FG4ONORD FG4ONORD ; 
    10 FF6SFSTK FF6SFSTK ; 
    10 FG4ITURN FG4ITURN ; 
    10 FG4NLPRD FG4NLPRD ; 
    10 FF6BEINV FF6BEINV ; 
    10 FG4BALSH FG4BALSH ; 
    10 FG4PFSFL FG4PFSFL ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FG7REC

// Balance to ship
DataItem FG04WBAS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beg Inventory
DataItem FG04WBEI char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beg Inventory
DataItem FG04WBIA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Beg Inventory
DataItem FG04WBIC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Balance to ship
DataItem FG04WBSA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Balance to ship
DataItem FG04WBSC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold Subm month for calls
DataItem FG04WCMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Counter for loops
DataItem FG04WCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Counter for months
DataItem FG04WCTR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data found switch
DataItem FG04WDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end cursor flag
DataItem FG04WECF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ending Inventory
DataItem FG04WEIA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending Inventory
DataItem FG04WEIV char(5)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor flag
DataItem FG04WEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculations work area
DataItem FG04WFDA bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculations work area two
DataItem FG04WFDB bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold ending inventory
DataItem FG04WHEI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold mstr fcst for compare
DataItem FG04WHMF char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold supply
DataItem FG04WHSU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row for next style position
DataItem FG04WIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Secondary index for map fields
DataItem FG04WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem FG04WIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// counter for columns
DataItem FG04WIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem FG04WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// general counter
DataItem FG04WIXX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Level indicator
DataItem FG04WLVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Master Prdctn Fcst
DataItem FG04WMPF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// True nbr of mos in range
DataItem FG04WNBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Nil Production
DataItem FG04WNIL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Nil Production
DataItem FG04WNPA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Nil Production
DataItem FG04WNPC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// On Order
DataItem FG04WONA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// On Order
DataItem FG04WONC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// On Order
DataItem FG04WONO char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current page nbr
DataItem FG04WPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Production Fcst
DataItem FG04WPFA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Production Fcst
DataItem FG04WPFC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page 2 present
DataItem FG04WPG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Row counter
DataItem FG04WRCT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Set-up date
DataItem FG04WSDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold Subm month for compare
DataItem FG04WSMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Safety Stock
DataItem FG04WSSA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Safety Stock
DataItem FG04WSSC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Safty Stock
DataItem FG04WSST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Supply
DataItem FG04WSUA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold sub for map 2
DataItem FG04WSUB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Supply
DataItem FG04WSUP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FG04WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map number switch
DataItem FG04WSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG04WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Model selected switch
DataItem FG04WSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG04WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prior selection entered switch
DataItem FG04WSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tot Production
DataItem FG04WTOT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tot Production
DataItem FG04WTPA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem FG4GROUP char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FF_NBR_INV_TURNS
DataItem FG4ITURN decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem FG4KEY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate key group level
DataItem FG4KEY2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FF_NIL_PRDCTN_FCST
DataItem FG4NLPRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_PFCST_FL
DataItem FG4PFSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem FG5GROUP char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem FG5KEY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate key group level
DataItem FG5KEY2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem FG6GROUP char(57)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem FG6KEY char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate key group level
DataItem FG6KEY2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem FG7GROUP char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem FG7KEY char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate key group level
DataItem FG7KEY2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

