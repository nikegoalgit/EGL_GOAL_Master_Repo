package fg08;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPTA0P;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS30;
import corpcom4.XSFFS50;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPCTBL;
import corpx2.XPCCD;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import ff.common.FF1REC;
import ff.common.FF2REC;
import ff.common.FF3REC;
import ff.common.FF6REC;
import ff.common.FF7REC;
import ff.common.FF8REC;
import ff.common.FF9REC;
import ff.common.FFCREC;
import ff.common.FFDREC;
import ff.common.FFFREC;
import ff.common.FFQREC;
import ff.common.FFRREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ff.common.FFZREC;
import fh.common.FH3REC;
import fh.common.FH6REC;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FG08 ****
// This application provides the user with the ability to
// create a new fill rate by referring to the historical
// data.
// 
// The fill rate must be created before setting any other
// indices.
// 
// The user is requested to enter the range, type group code
// and category code.  The system will display the past
// 3 years historical data.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/24/90  rgilli  New application.
// ff#46    06/12/90  rhetri  Increase size of percent field
// FF1016   08/01/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF1076   07/10/91  JJUCH   Added PF14 to upd S.R. wrkshts.
// FF1112   01/13/92  KSANFO  Changed processing to save a
//                            changed Fill Rate on tables when
//                            ENTER key is pressed. (Will not
//                            update worksheets)
// FF       05/14/92  mdange  Changed processing to allow
//                            monthly updates to fill rate.
// FF334    09/30/92  JJUCH   Added PF15 to allow to change
//                            the sales fcst.
// FF434    09/14/93  mdange  allow current through buy month
//                            to be processed. Add PF16
// FF       09/30/93  mdange  Fix bug causing fill rates to be
//                            zeroed out.
// FF434    10/13/93  JJUCH   Edit date range > buy month for
//                            PF14 and PF15.
//                            Edit all the enterable fields
//                            when PF14,PF15 and PF16 is pressd
// FF       01/05/94  JJUCH   Add PF13 to just update category
//                            default fill rate.
//                            Fixed the problem of incorrect
//                            cat fill rate when encounter -911
//                            and hit PF16.
// FH140    02/24/94  JJUCH   Change to use authorized future
//                            for the actual month.
// FF444                      Change total fill rate calculat-
//                            ion to be total sales/total dmd.
//          07/11/94  JJUCh   Edit 12 month date range.
// 
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// D980121A 02/10/98  SVARGH  CHANGED FFZREC.FFZWYY TO
//                            FFZREC.FFZWMM IN FG08S09 TO CORRE
// -CT DATE-OUT-OF-RANGE ERROR.
// *********************
Program FG08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FF8REC FF8REC; // record
  FF9REC FF9REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFFREC FFFREC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG08W00 FG08W00; // record
  FG08W01 FG08W01; // record
  FG08W02 FG08W02; // record
  FG08W03 FG08W03; // record
  FH3REC FH3REC; // record
  FH6REC FH6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG08T {deleteAfterUse = yes}; // table
  use FG08T01 {deleteAfterUse = yes}; // table
  use FG08T5O {deleteAfterUse = yes}; // table
  use FG08T51 {deleteAfterUse = yes}; // table
  use FG08M.FG08M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty;
    set FFZREC empty;
    set FG08M001 initial; /* M001 input/output*/
    set FG08W00 empty; /* Working storage*/
    set FG08W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG08W00.FG08WSWR = "N"; /* Request for data switch*/
    FG08W00.FG08WSWF = "Y"; /* format screen data switch*/
    FG08W00.FG08WUPD = "N"; /* Fill rate updated switch*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.XPLCD = " "; /* Clear product line code*/
    FFWREC.XPLABRV = " "; /* Clear product line abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " ")
      FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
      FFZREC.FFZENDMO = FFWREC.FFAENDMO;
      FG08W00.FG08WSWR = "Y"; /* set data request flag*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/
    ;
    goto FG08001; /* Converse the main process*/
    ;
    FG08001: FG08001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/
    ;
    goto FG08001; /* converse the main process*/
    ;
  end // end main
end // end FG08

// Format production JCL
Function FG08-651()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Batch jcl work area*/
  set FG08W02 empty; /* Batch jcl parms*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG08T.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      FG08W02.FG08WPBM = FFWREC.FFABEGMO;
      FG08W02.FG08WPEM = FFWREC.FFAENDMO;
      FG08W02.FG08WPTG = FFWREC.YPGCD;
      FG08W02.FG08WPCT = FFWREC.XPCCD;
      FG08W02.FG08WPDT = XX0XW01.XX0XWDAT;
      FG08W02.FG08WPTM = XX0XW01.XX0XWTIM;
      ;
      TA6REC.TARJCL[TA6INDEX] = FG08W02.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG08T.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FG08T.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG08T.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "651"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Indicate job was submitted*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08-651

// Format test JCL
Function FG08-652()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Batch jcl work area*/
  set FG08W02 empty; /* Batch jcl parms*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG08T5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      FG08W02.FG08WPBM = FFWREC.FFABEGMO;
      FG08W02.FG08WPEM = FFWREC.FFAENDMO;
      FG08W02.FG08WPTG = FFWREC.YPGCD;
      FG08W02.FG08WPCT = FFWREC.XPCCD;
      FG08W02.FG08WPDT = XX0XW01.XX0XWDAT;
      FG08W02.FG08WPTM = XX0XW01.XX0XWTIM;
      ;
      TA6REC.TARJCL[TA6INDEX] = FG08W02.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG08T5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FG08T5O.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG08T5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "652"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Indicate job was submitted*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08-652

// Format production JCL
Function FG08-671()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Batch jcl work area*/
  set FG08W03 empty; /* Batch jcl parms*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG08T01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      FG08W03.YPGCD = FFWREC.YPGCD;
      FG08W03.XPCCD = FFWREC.XPCCD;
      ;
      TA6REC.TARJCL[TA6INDEX] = FG08W03.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG08T01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FG08T01.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG08T01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "671"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Indicate job was submitted*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08-671

// Format test JCL
Function FG08-672()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Batch jcl work area*/
  set FG08W03 empty; /* Batch jcl parms*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG08T51.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      FG08W03.YPGCD = FFWREC.YPGCD;
      FG08W03.XPCCD = FFWREC.XPCCD;
      ;
      TA6REC.TARJCL[TA6INDEX] = FG08W03.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG08T51.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FG08T51.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG08T51.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "672"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Indicate job was submitted*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08-672

// maint. historical fill rate
Function FG08001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG08100(); /* Obtain the data to display*/
  ;
  FG08200(); /* Format and display the map*/
  ;
  FG08300(); /* Check attention identifier*/
  ;
  FG08400(); /* Reset fields to normal intensity*/
  ;
  FG08500(); /* Verify the entered data*/
  ;
  FG08600(); /* Process valid input request*/
  ;
  ;
end // end FG08001

// obtain data for display
Function FG08100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG08W00.FG08WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    if (converseVar.validationMsgNum != 47) /* Data in use*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* init working storage*/
   /* ------------------------------------------------------------*/
  ;
  set FG08W01 empty; /* init w/s*/
  ;
   /* ------------------------------------------------------------*/
   /* obtain dfcast.vffctl01 invoice date to determine*/
   /* if actual/forecast qtys are to be used.*/
   /* ------------------------------------------------------------*/
  ;
  FG08110(); /* select dfcast.vffctl01*/
  FG08W00.FG08WICD = FF1REC.FF1IVCDT;
  ;
   /* ------------------------------------------------------------*/
   /* obtain current date using routine xx0xs01, calculate*/
   /* current date minus one month*/
   /* ------------------------------------------------------------*/
   /* ------------------------*/
   /* get current date*/
   /* ------------------------*/
  ;
  XX0XS01();
  ;
  FG08W00.FG08WCWD = XX0XW01.XX0XWDAT; /* current work dt ccyymmdd*/
  FG08W00.FG08WCRD = XX0XW01.XX0XWCYM; /* current date ccyymm*/
  FG08W00.FG08WWDT = XX0XW01.XX0XWCYM; /* work date*/
  ;
  if (FG08W00.FG08WWMM == 1)
    FG08W00.FG08WWMM = 12;
    if (FG08W00.FG08WWYY == 00)
      FG08W00.FG08WWYY = 99;
      FG08W00.FG08WWCC = FG08W00.FG08WWCC - 1;
    else
      FG08W00.FG08WWYY = FG08W00.FG08WWYY - 1;
    end
  else
    FG08W00.FG08WWMM = FG08W00.FG08WWMM - 1;
  end
  FG08W00.FG08WCD1 = FG08W00.FG08WWDT; /* current date minus 1 month*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate "current" heading date ranges*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08WWBD = FFWREC.FFABEGMO; /* user requested begin range*/
  FG08W00.FG08WWED = FFWREC.FFAENDMO; /* begin range + 11 months*/
  ;
  FG08W01.FG08WHBD[1] = FG08W00.FG08WWBD; /* cur beg date*/
  FG08W01.FG08WHED[1] = FG08W00.FG08WWED; /* cur end date*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate "historical" heading date ranges (12 months)*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08WIDX = 2; /* init index*/
  while (FG08W00.FG08WIDX <= 4) /* calculate historical date ranges*/
    ;
    if (FG08W00.FG08WBYY == 00)
      FG08W00.FG08WBYY = 99;
      FG08W00.FG08WBCC = FG08W00.FG08WBCC - 1;
    else
      FG08W00.FG08WBYY = FG08W00.FG08WBYY - 1;
    end
    FG08W01.FG08WHBD[FG08WIDX] = FG08W00.FG08WWBD; /* prior beg date*/
    ;
    if (FG08W00.FG08WEYY == 00)
      FG08W00.FG08WEYY = 99;
      FG08W00.FG08WECC = FG08W00.FG08WECC - 1;
    else
      FG08W00.FG08WEYY = FG08W00.FG08WEYY - 1;
    end
    FG08W01.FG08WHED[FG08WIDX] = FG08W00.FG08WWED; /* prior end date*/
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical date ranges using the begining and*/
   /* end range specified by the user*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08WWBD = FFWREC.FFABEGMO; /* user requested begin range*/
  FG08W00.FG08WWED = FFWREC.FFAENDMO; /* user requested end range*/
  ;
  FG08W00.FG08WIDX = 1; /* init index*/
  while (FG08W00.FG08WIDX <= 3) /* calculate historical date ranges*/
    ;
    if (FG08W00.FG08WBYY == 00)
      FG08W00.FG08WBYY = 99;
      FG08W00.FG08WBCC = FG08W00.FG08WBCC - 1;
    else
      FG08W00.FG08WBYY = FG08W00.FG08WBYY - 1;
    end
    FG08W01.FG08WPBD[FG08WIDX] = FG08W00.FG08WWBD; /* prior beg date*/
    ;
    if (FG08W00.FG08WEYY == 00)
      FG08W00.FG08WEYY = 99;
      FG08W00.FG08WECC = FG08W00.FG08WECC - 1;
    else
      FG08W00.FG08WEYY = FG08W00.FG08WEYY - 1;
    end
    FG08W01.FG08WPED[FG08WIDX] = FG08W00.FG08WWED; /* prior end date*/
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* save user requested date range returned from xsffs30*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08WWBD = FFZREC.FFZBEGMO;
  FG08W00.FG08WWED = FFZREC.FFZENDMO;
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings for "current" data*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG08W01.FG08WHBY[1]; /* beg date current*/
  FFZREC.FFZEYYMM = FG08W01.FG08WHEY[1]; /* end date current*/
  ;
  FG08120(); /* get months within range*/
  ;
  FG08W00.FG08WIDX = 1;
  while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO) /* process all months in range*/
    ;
    FG08W01.FG08WHDC[FG08WIDX] = FFZREC.FFZINDMO[FG08WIDX];
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain current fill rate for requested date range, type*/
   /* group and category from dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  FG08S02(); /* select 's1' dfcast.vmcat001*/
  FG08S03(); /* fetch 'n1' dfcast.vmcat001*/
  ;
  FG08W00.FG08W-SLS = 0; /* init sales forecast*/
  FG08W00.FG08W-DMD = 0; /* init demand forecast*/
  FG08W00.FG08WIDX = 1; /* init index*/
  while (SQLCA.VAGen_SQLCODE == 0) /* process all dfcast.vmcat001*/
    ;
    FG08W00.FG08W-SLS = FG08W00.FG08W-SLS + FF7REC.FF6SLFCT; /* Accum sls*/
    FG08W00.FG08W-DMD = FG08W00.FG08W-DMD + FF7REC.FF6DMFCT; /* Accum dmd*/
    ;
    FG08W01.FG08WFRC[FG08WIDX] = FF7REC.FF7FLLRT;
    ;
    FG08S03(); /* fetch 'n1' dfcast.vmcat001*/
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
    ;
  end
  ;
  FG08S04(); /* close 'c1' dfcast.vmcat001*/
  ;
  if (FG08W00.FG08W-DMD != 0)
    FG08W01.FG08WAVG = mathLib.round(FG08W00.FG08W-SLS / FG08W00.FG08W-DMD * 100, -mathLib.decimals(FG08W01.FG08WAVG));
  else
    FG08W01.FG08WAVG = 0;
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 1 year ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG08W01.FG08WHBY[2]; /* beg date 1 yr ago*/
  FFZREC.FFZEYYMM = FG08W01.FG08WHEY[2]; /* end date 1 yr ago*/
  ;
  FG08120(); /* get months within range*/
  ;
  FG08W00.FG08W-SLS = 0; /* init sales forecast*/
  FG08W00.FG08W-DMD = 0; /* init demand forecast*/
  FG08W00.FG08WIDX = 1; /* init index*/
  while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO) /* process all months in range*/
    ;
    FG08W01.FG08WHD1[FG08WIDX] = FFZREC.FFZINDMO[FG08WIDX];
    ;
    /* ------------------------------------------------------------*/
     /* obtain actual/forecast sale/dmnd qtys*/
    /* ------------------------------------------------------------*/
    ;
    if (FFZREC.FFZINDMO[FG08WIDX] <= FG08W01.FG08WPED[1])
      ;
      /* ---------------------------------------------------*/
       /* if process month if greater than or equal to*/
       /* the current date get fill rate off the dfcast.*/
       /* vmcat001, else, obtain sale/dmnd qtys from the*/
       /* dfcast.vmcat001 and calculate the fill rate.*/
      /* ---------------------------------------------------*/
      ;
      if (FFZREC.FFZINDMO[FG08WIDX] >= FG08W00.FG08WCYM)
        FG08S07(); /* select dfcast.vmcat001*/
        FG08W01.FG08WFR1[FG08WIDX] = FF7REC.FF7FLLRT + 0;
        FG08W00.FG08W-SLS = FG08W00.FG08W-SLS + FF7REC.FF6SLFCT; /* Accum sls*/
        FG08W00.FG08W-DMD = FG08W00.FG08W-DMD + FF7REC.FF6DMFCT; /* Accum dmd*/
      else
        ;
        FG08S06(); /* obtain sales/dmnd qtys*/
        ;
        if (FG08W00.FG08WUDQ != 0)
          FG08W01.FG08WFR1[FG08WIDX] = mathLib.round(FG08W00.FG08WUSQ * 100 /                                       FG08W00.FG08WUDQ, -mathLib.decimals(FG08W01.FG08WFR1[FG08WIDX]));
          FG08W00.FG08W-SLS = FG08W00.FG08W-SLS + FG08W00.FG08WUSQ;
          FG08W00.FG08W-DMD = FG08W00.FG08W-DMD + FG08W00.FG08WUDQ;
          ;
        end
      end
      ;
    end
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
    ;
  end
  ;
  if (FG08W00.FG08W-DMD != 0)
    FG08W01.FG08WFR1[13] = mathLib.round(FG08W00.FG08W-SLS / FG08W00.FG08W-DMD * 100, -mathLib.decimals(FG08W01.FG08WFR1[13]));
  else
    FG08W01.FG08WFR1[13] = 0;
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 2 years ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG08W01.FG08WHBY[3]; /* beg date 2 yr ago*/
  FFZREC.FFZEYYMM = FG08W01.FG08WHEY[3]; /* end date 2 yr ago*/
  ;
  FG08120(); /* get months within range*/
  ;
  FG08W00.FG08W-SLS = 0; /* init sales forecast*/
  FG08W00.FG08W-DMD = 0; /* init demand forecast*/
  FG08W00.FG08WIDX = 1; /* init index*/
  while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO) /* process all month in range*/
    ;
    FG08W01.FG08WHD2[FG08WIDX] = FFZREC.FFZINDMO[FG08WIDX];
    ;
    /* ------------------------------------------------------------*/
     /* obtain actual/forecast sale qtys*/
    /* ------------------------------------------------------------*/
    ;
    if (FFZREC.FFZINDMO[FG08WIDX] <= FG08W01.FG08WPED[2])
      ;
      /* ---------------------------------------------------*/
       /* if process month if greater than or equal to*/
       /* the current date get fill rate off the dfcast.*/
       /* vmcat001, else, obtain sale/dmnd qtys from the*/
       /* dfcast.vmcat001 and calculate the fill rate.*/
      /* ---------------------------------------------------*/
      ;
      if (FFZREC.FFZINDMO[FG08WIDX] >= FG08W00.FG08WCYM)
        FG08S07(); /* select dfcast.vmcat001*/
        FG08W01.FG08WFR2[FG08WIDX] = FF7REC.FF7FLLRT + 0;
        FG08W00.FG08W-SLS = FG08W00.FG08W-SLS + FF7REC.FF6SLFCT; /* Accum sls*/
        FG08W00.FG08W-DMD = FG08W00.FG08W-DMD + FF7REC.FF6DMFCT; /* Accum dmd*/
      else
        ;
        FG08S06(); /* obtain sales/dmnd qtys*/
        ;
        if (FG08W00.FG08WUDQ != 0)
          FG08W01.FG08WFR2[FG08WIDX] = mathLib.round(FG08W00.FG08WUSQ * 100 /                                       FG08W00.FG08WUDQ, -mathLib.decimals(FG08W01.FG08WFR2[FG08WIDX]));
          FG08W00.FG08W-SLS = FG08W00.FG08W-SLS + FG08W00.FG08WUSQ;
          FG08W00.FG08W-DMD = FG08W00.FG08W-DMD + FG08W00.FG08WUDQ;
          ;
        end
      end
      ;
    end
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
    ;
  end
  ;
  if (FG08W00.FG08W-DMD != 0)
    FG08W01.FG08WFR2[13] = mathLib.round(FG08W00.FG08W-SLS / FG08W00.FG08W-DMD * 100, -mathLib.decimals(FG08W01.FG08WFR2[13]));
  else
    FG08W01.FG08WFR2[13] = 0;
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 3 years ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG08W01.FG08WHBY[4]; /* beg date 3 yr ago*/
  FFZREC.FFZEYYMM = FG08W01.FG08WHEY[4]; /* end date 3 yr ago*/
  ;
  FG08120(); /* get months within range*/
  ;
  FG08W00.FG08W-SLS = 0; /* init sales forecast*/
  FG08W00.FG08W-DMD = 0; /* init demand forecast*/
  FG08W00.FG08WIDX = 1; /* init index*/
  while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO) /* process all month in range*/
    ;
    FG08W01.FG08WHD3[FG08WIDX] = FFZREC.FFZINDMO[FG08WIDX];
    ;
    /* ------------------------------------------------------------*/
     /* obtain actual/forecast sale qtys*/
    /* ------------------------------------------------------------*/
    ;
    if (FFZREC.FFZINDMO[FG08WIDX] <= FG08W01.FG08WPED[3])
      ;
      /* ---------------------------------------------------*/
       /* if process month if greater than or equal to*/
       /* the current date get fill rate off the dfcast.*/
       /* vmcat001, else, obtain sale/dmnd qtys from the*/
       /* dfcast.vmcat001 and calculate the fill rate.*/
      /* ---------------------------------------------------*/
      ;
      if (FFZREC.FFZINDMO[FG08WIDX] >= FG08W00.FG08WCYM)
        FG08S07(); /* select dfcast.vmcat001*/
        FG08W01.FG08WFR3[FG08WIDX] = FF7REC.FF7FLLRT + 0;
        FG08W00.FG08W-SLS = FG08W00.FG08W-SLS + FF7REC.FF6SLFCT; /* Accum sls*/
        FG08W00.FG08W-DMD = FG08W00.FG08W-DMD + FF7REC.FF6DMFCT; /* Accum dmd*/
      else
        ;
        FG08S06(); /* obtain sales/dmnd qtys*/
        ;
        if (FG08W00.FG08WUDQ != 0)
          FG08W01.FG08WFR3[FG08WIDX] = mathLib.round(FG08W00.FG08WUSQ * 100 /                                       FG08W00.FG08WUDQ, -mathLib.decimals(FG08W01.FG08WFR3[FG08WIDX]));
          FG08W00.FG08W-SLS = FG08W00.FG08W-SLS + FG08W00.FG08WUSQ;
          FG08W00.FG08W-DMD = FG08W00.FG08W-DMD + FG08W00.FG08WUDQ;
          ;
        end
      end
      ;
    end
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
    ;
  end
  ;
  if (FG08W00.FG08W-DMD != 0)
    FG08W01.FG08WFR3[13] = mathLib.round(FG08W00.FG08W-SLS / FG08W00.FG08W-DMD * 100, -mathLib.decimals(FG08W01.FG08WFR3[13]));
  else
    FG08W01.FG08WFR3[13] = 0;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* reload user requested date range*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZBEGMO = FG08W00.FG08WWBD;
  FFZREC.FFZENDMO = FG08W00.FG08WWED;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG08W01.CACHGFL = "Y"; /* data loaded*/
  FG08W00.FG08WSWR = "N"; /* Request for data switch*/
  ;
  ;
end // end FG08100

// Select dfcast.vffctl01 row
Function FG08110()
   /* ------------------------------------------------------------*/
   /* obtain invoice cutoff date*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08110

// obtain mthly headings xsffs30
Function FG08120()
   /* ------------------------------------------------------------*/
   /* get all months within requested date range*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  ;
  XSFFS30();
  ;
end // end FG08120

// Format and converse the map
Function FG08200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* format screen*/
   /* ------------------------------------------------------------*/
  ;
  if (FG08W00.FG08WSWF == "Y") /* map must be formatted*/
    FG08210(); /* Format the data on the map*/
  end
  ;
  FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/
  ;
  FG08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG08M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG08M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG08M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG08M001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG08M001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG08M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG08M001.CAITEM; /* Application data*/
  ;
  ;
end // end FG08200

// Format the display data
Function FG08210()
  ;
   /* ------------------------------------------------------------*/
   /* init map fg08m001*/
   /* ------------------------------------------------------------*/
  ;
  set FG08M001 initial; /* m001 input/ouput area*/
  ;
  FG08W00.FG08WSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format fg08m001 using passed data*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08WWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG08M001.FG08MBRG = FG08W00.FG08WWYM; /* begin month range*/
  FG08W00.FG08WWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG08M001.FG08MERG = FG08W00.FG08WWYM; /* end month range*/
  ;
  FG08M001.YPGCD = FFWREC.YPGCD; /* product type group*/
  FG08M001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/
  ;
  FG08M001.XPCCD = FFWREC.XPCCD; /* category code*/
  FG08M001.XPCABRV = FFWREC.XPCABRV; /* category code abrv*/
  ;
  if (FG08W01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings and fill rates for 'current' data*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08WIDX = 1;
  while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO) /* load monthly headings*/
    ;
    FG08M001.FG08MHDC[FG08WIDX] = FG08W01.FG08WDHC[FG08WIDX];
    FG08M001.FG08MFRC[FG08WIDX] = FG08W01.FG08WFRC[FG08WIDX];
    set FG08M001.FG08MFRC[FG08WIDX] normal;
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG08M001.FG08MAVG = FG08W01.FG08WAVG; /* move total*/
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings and fill rates for histiorical data*/
   /* 1 year ago*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08WIDX = 1;
  while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO) /* nbr of mos loaded*/
    ;
    FG08M001.FG08MHD1[FG08WIDX] = FG08W01.FG08WDH1[FG08WIDX];
    FG08M001.FG08MFR1[FG08WIDX] = FG08W01.FG08WFR1[FG08WIDX];
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG08M001.FG08MFR1[13] = FG08W01.FG08WFR1[13];
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings and fill rates for historical data*/
   /* 2 years ago*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08WIDX = 1;
  while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO) /* nbr of mos loaded*/
    ;
    FG08M001.FG08MHD2[FG08WIDX] = FG08W01.FG08WDH2[FG08WIDX];
    FG08M001.FG08MFR2[FG08WIDX] = FG08W01.FG08WFR2[FG08WIDX];
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG08M001.FG08MFR2[13] = FG08W01.FG08WFR2[13];
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings and fill rates for historical data*/
   /* 3 years ago*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08WIDX = 1;
  while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO) /* nbr of mos loaded*/
    ;
    FG08M001.FG08MHD3[FG08WIDX] = FG08W01.FG08WDH3[FG08WIDX];
    FG08M001.FG08MFR3[FG08WIDX] = FG08W01.FG08WFR3[FG08WIDX];
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG08M001.FG08MFR3[13] = FG08W01.FG08WFR3[13];
  ;
  ;
end // end FG08210

// Check attention identifier
Function FG08300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FG08W00.FG08WSWF = "Y"; /* format screen m001*/
    FG08W00.FG08WSWR = "N"; /* request for data*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG08M001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      FG08W00.FG08WSWF = "Y"; /* format screen m001*/
      FG08W00.FG08WSWR = "N"; /* request for data*/
      ;
      set FG08M001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG08M001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG08W00.FG08WSWF = "Y"; /* format screen m001*/
    FG08W00.FG08WSWR = "N"; /* request for data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf16  /* pf16 was not pressed*/
   && converseVar.eventKey not pf17) /* pf17 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG08300

// Reset highlighted fields
Function FG08400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG08M001.FG08MBRG initialAttributes; /* begin range*/
  set FG08M001.FG08MERG initialAttributes; /* end range*/
  set FG08M001.XPCCD initialAttributes; /* category code*/
  set FG08M001.YPGCD initialAttributes; /* product type group*/
  ;
  FG08W00.FG08WIDX = 1; /* set index*/
  while (FG08W00.FG08WIDX <= 12)
    if (FG08W01.FG08WHDC[FG08WIDX] <= FFZREC.FFZENDMO /* month loaded*/
     && FG08W01.FG08WHDC[FG08WIDX] > 0)              
      set FG08M001.FG08MFRC[FG08WIDX] normal;
    else
      set FG08M001.FG08MFRC[FG08WIDX] initialAttributes; /* fill rate*/
    end
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1; /* increment index*/
    ;
  end
  ;
  set FG08M001.CATOAP initialAttributes;
  set FG08M001.CAITEM initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG08M001.XPCCD == "?" /* categroy code*/
   || FG08M001.YPGCD == "?") /* product type group*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG08M001.XPCCD == "?") /* product category list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/
    ;
    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG08M001.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG08M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG08M001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG08M001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG08M001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG08M001.YPGCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/
    ;
    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG08M001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG08M001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG08M001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG08M001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG08M001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08400

// Verify the entered data
Function FG08500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG08M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request for transfer*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    ;
    FG08S08(); /* verify modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    ;
    FG08510(); /* validate entry fields*/
    ;
    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FG08W00.FG08WWBD = FFWREC.FFABEGMO;
    FG08W00.FG08WWED = FFWREC.FFAENDMO;
    ;
    if (FG08M001.YPGCD != FFWREC.YPGCD        /* product type grp chg*/
     || FG08M001.YPGCD == " "                 /* product type grp chg*/
     || FG08M001.XPCCD != FFWREC.XPCCD        /* product category chg*/
     || FG08M001.XPCCD == " "                 /* product category chg*/
     || FG08M001.FG08MBRG != FG08W00.FG08WBYM /* beg range changed*/
     || FG08M001.FG08MBRG == 0                /* beg range changed*/
     || FG08M001.FG08MERG != FG08W00.FG08WEYM /* end range changed*/
     || FG08M001.FG08MERG == 0)               /* end range changed*/
      ;
      if (FG08W01.CACHGFL == "Y")
        FG08S08(); /* verify modifiable fields*/
      end
      ;
      if (converseVar.validationMsgNum == 0)
        FG08W00.FG08WSWR = "Y"; /* request data request*/
      end
      ;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
  ;
end // end FG08500

// validate modifiable data
Function FG08510()
  ;
   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FG08M001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG08M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG08M001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG08M001.XPCCD cursor, bold;
  end
  ;
  FG08S10(); /* select dfcast.vffxrf01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    FG08M001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG08M001.XPCCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/
  ;
  if (FG08M001.YPGCD != "*")
    if (FG08M001.YPGCD in YPGTBL.YPGCD
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FG08M001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    else
      FG08M001.YPGABRV = " ";
      converseLib.validationFailed(118);
      FFWREC.XXXMODID = "510";
      set FG08M001.YPGCD cursor, bold;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08W-NUM-MO = FFZREC.FFZNUMMO; /* save no. of month*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FG08M001.FG08MBRG;
  FFZREC.FFZEYYMM = FG08M001.FG08MERG;
  ;
  FG08S09(); /* edit date range*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG08M001.FG08MERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG08M001.FG08MERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG08M001.FG08MERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG08M001.FG08MBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG08M001.FG08MBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG08M001.FG08MBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
  ;
  FFZREC.FFZNUMMO = FG08W00.FG08W-NUM-MO; /* restore no. of month*/
  ;
end // end FG08510

// Process valid input request
Function FG08600()
  ;
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FG08W00.FG08WSWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XPCCD = FG08M001.XPCCD; /* product category code*/
  FFWREC.XPCABRV = FG08M001.XPCABRV; /* product category abrv desc*/
  ;
  FFWREC.YPGCD = FG08M001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FG08M001.YPGABRV; /* product type grp abrv desc*/
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  if (FG08W00.FG08WSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* check to see if any fill rates updated*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf14 /* or update and submit job to update WS*/
   || converseVar.eventKey is pf15 
   || converseVar.eventKey is pf16 
   || converseVar.eventKey is pf17)
    ;
    FG08W00.FG08WIDX = 1; /* init index*/
    FG08W01.FG08WAVG = 0; /* init total entry*/
    FG08W00.FG08WNMO = 0; /* init nbr of months*/
    ;
    while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO)
      if (FG08M001.FG08MFRC[FG08WIDX] != FG08W01.FG08WFRC[FG08WIDX])
        FG08W01.FG08WFRC[FG08WIDX] = FG08M001.FG08MFRC[FG08WIDX];
        FG08W00.FG08WUPD = "Y"; /* set update flag to yes*/
      end
   /* Accum for total*/
      FG08W01.FG08WAVG = FG08W01.FG08WFRC[FG08WIDX]                      + FG08W01.FG08WAVG;
      FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
      FG08W00.FG08WNMO = FG08W00.FG08WNMO + 1;
    end
    ;
  end
  ;
  if (FG08W00.FG08WNMO != 0)
    FG08W01.FG08WAVG = mathLib.round(FG08W01.FG08WAVG / FG08W00.FG08WNMO, -mathLib.decimals(FG08W01.FG08WAVG));
  end
  ;
   /* ------------------------------------------------------------*/
   /* if fill rate was changed & PF17 pressed update screen.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf17)
    if (FG08W00.FG08WUPD == "Y") /* fill rate has been updated*/
      FG08605(); /* update WS and tables*/
      FG08W00.FG08WUPD = "N"; /* reset update flag*/
    else
      converseLib.validationFailed(495); /* no data to update*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF14 update dfcast.vmcat001 & submit program to update*/
   /* S.R. Worksheets. (Update demand fcst)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14)
    ;
    if (FG08W00.FG08WUPD == "Y") /* fill rate has been updated*/
      FG08605(); /* update WS and tables*/
      FG08W00.FG08WUPD = "N"; /* Reset fill rate change flag*/
    end
    ;
    FG08650(); /* submit sr batch updts*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF15 update dfcast.vmcat001 & submit program to update*/
   /* S.R. Worksheets. (Update sales fcst)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15)
    ;
    if (FG08W00.FG08WUPD == "Y") /* fill rate has been updated*/
      FG08605(); /* update dfcast tables*/
      FG08W00.FG08WUPD = "N"; /* Reset fill rate change flag*/
    end
    ;
    FG08660(); /* update fill rt & sls on msty001*/
    FG08670(); /* submit sr batch updts*/
    ;
  end
  ;
  if (converseVar.eventKey is pf16)
    ;
    if (FG08W00.FG08WUPD == "Y") /* fill rate has been updated*/
      FG08605(); /* update dfcast tables*/
      FG08660(); /* update fill rt & sls on msty001*/
      FG08670(); /* submit sr batch updts*/
      FG08W00.FG08WUPD = "N"; /* Reset fill rate change flag*/
    else
      converseLib.validationFailed(495); /* no data to update*/
    end
  end
  ;
end // end FG08600

// Update WS and DFCAST tables
Function FG08605()
  /* ------------------------------------------------------------*/
  /* if fill rate was changed update tables*/
  /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* get current date and time*/
  ;
  FG08W00.FG08WIDX = 1; /* init index*/
  ;
  while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO)
    FG08W01.FG08WDIF[FG08WIDX] = 0;
    FG08635(); /* select dfcast.vmcat001*/
    FG08W01.FG08WDIF[FG08WIDX] = FF7REC.FF7FLLRT;
                                                        /* move old fill rt*/
    FG08W01.FG08WDIF[FG08WIDX] = FG08W01.FG08WFRC[FG08WIDX] - FG08W01.FG08WDIF[FG08WIDX];
                                                               /* new - old*/
    FG08640(); /* upd dfcast.vmcat001 row*/
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
  end
  ;
  FG08S01(); /* Select 's ' dfcast.vrcat001*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* Record not found*/
    FG08610(); /* Add dfcast.vrcat001 row*/
    FG08620(); /* Add dfcast.vrcmth01 row*/
  else
    FG08630(); /* Upd dfcast.vrcat001 row*/
  end
  ;
  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14)
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit DB2 changes*/
  end
  ;
  if (converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    ;
  else
    FFWREC.FFWMODSW = "N"; /* Set data changed switch*/
    converseLib.validationFailed(32); /* changes saved message*/
  end
  ;
end // end FG08605

// Add dfcast.vrcat001 row
Function FG08610()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFCREC empty;
  ;
  FFCREC.FFABEGMO = FFWREC.FFABEGMO;
  FFCREC.FFAENDMO = FFWREC.FFAENDMO;
  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/
  FFCREC.FFCFRTFL = "Y"; /* Fill rate flag*/
  ;
  FFCREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  try
    call "IO3760" ("A ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "610"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08610

// Process dfcast.vrcmth01
Function FG08620()
  ;
  set FFDREC empty;
  ;
  FFDREC.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFDREC.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFDREC.XPCCD = FFWREC.XPCCD;
  FFDREC.YPGCD = FFWREC.YPGCD;
  ;
  FG08W00.FG08WIDX = 1; /* init index*/
  while (FFDREC.FF4FCTMO < FFDREC.FFAENDMO)
    ;
    FG08621(); /* add dfcast.vrcmth01 row*/
    ;
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
    ;
  end
end // end FG08620

// Add dfcast.vrcmth01 row
Function FG08621()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/
  ;
  FFDREC.FF4FCTMO = FG08W01.FG08WHDC[FG08WIDX];
  ;
  FFDREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3770" ("A ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "621"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08621

// Update dfcast.vrcat001 row
Function FG08630()
   /* ------------------------------------------------------------*/
   /* Update dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  FFCREC.FFCFRTFL = "Y"; /* Fill rate flag*/
  ;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  try
    call "IO3760" ("U ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08630

// Select DFCAST.VMCAT001
Function FG08635()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* load ff7rec record*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty;
  ;
  FF7REC.YSMXDV = FFWREC.YSMXDV;
  FF7REC.XCTCD = "USA";
  FF7REC.YPGCD = FFWREC.YPGCD;
  FF7REC.XPCCD = FFWREC.XPCCD;
  FF7REC.FF4FCTMO = FG08W01.FG08WHDC[FG08WIDX]; /* forecast month*/
  ;
   /* ------------------------------------------------------------*/
   /* select unique dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "635"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S  DFCAST.VMCAT001 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08635

// upd dfcast.vmcat001 row
Function FG08640()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vmcat001 table row*/
   /* ------------------------------------------------------------*/
  ;
  FF7REC.FF7FLLRT = FG08W01.FG08WFRC[FG08WIDX]; /* fill rate*/
  ;
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG08W00.FG08WSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "640"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VMCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08640

// upd S.R. worksheets (dmd chng)
Function FG08650()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG08-651(); /* format production JCL*/
    else
      FG08-652(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "650"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
  ;
end // end FG08650

// upd sls & fill rt on msty001
Function FG08660()
  ;
  /* -------------------------------------------------------------*/
  /* Obtain all the styles under the specified category and update*/
  /* the related quantities.*/
  /* -------------------------------------------------------------*/
  ;
  FG08W00.FG08W-FFSTY-CSR = "N"; /* Initial end of cursor sw*/
  move 0 to FG08W00.FG08W-STYGRP-VAR[1] for all; /* stygrp variance*/
  move 0 to FG08W00.FG08W-CAT-VAR[1] for all; /* category variance*/
  ;
  FG08661(); /* Open dfcast.vffsty01 cursor*/
  FG08662(); /* fetch next row in vffsty01 cursor*/
  FG08W00.SYBSTGNB = FF3REC.SYBSTGNB;
  ;
  while (FG08W00.FG08W-FFSTY-CSR == "N") /* Until end of cursor*/
    ;
     /* -------------------------------------------------------*/
     /* Update the sales fcst on vmsgrp01 table.*/
     /* -------------------------------------------------------*/
    ;
    if (FF3REC.SYBSTGNB != FG08W00.SYBSTGNB) /* stygrp changed*/
      FG08W00.FG08WIDX = 1;
      while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO)
        FG08S20(); /* update msgrp01 table*/
        FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
      end
      move 0 to FG08W00.FG08W-STYGRP-VAR[1] for all;
      FG08W00.SYBSTGNB = FF3REC.SYBSTGNB;
    end
    ;
     /* ------------------------------------------------------------*/
     /* If fill rate was changed update sales fcst and fill rate on*/
     /* dfcast.vmsty001 and the fill rate on dfcast.vswitm01 tables.*/
     /* ------------------------------------------------------------*/
    ;
    FG08W00.FG08WIDX = 1; /* init index*/
    ;
    while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO)
      ;
      FG08S30(); /* process s.r. worksheet*/
      ;
      FG08S40(); /* process msty001 record*/
      ;
      FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
      ;
    end
    ;
    FG08662(); /* fetch next row in vffsty01 cursor*/
    ;
  end
  ;
   /* -----------------------------------------------------*/
   /* Update the sales fcst on vmcat001 & vmltyp01 tables.*/
   /* -----------------------------------------------------*/
  ;
  FG08W00.FG08WIDX = 1;
  while (FG08W00.FG08WIDX <= FFZREC.FFZNUMMO)
    FG08S50(); /* update mcat sls fcst*/
    FG08S60(); /* update mltyp sls fcst*/
    FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1;
  end
  move 0 to FG08W00.FG08W-CAT-VAR[1] for all;
  ;
  FG08663(); /* Close vffsty01 cursor*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* commit DB2 changes*/
  ;
  FFWREC.FFWMODSW = "N"; /* Set data changed switch*/
  converseLib.validationFailed(32); /* changes saved message*/
  ;
end // end FG08660

// Open   'S3' ffsty01 cursor
Function FG08661()
   /* ------------------------------------------------------------*/
   /* Open and select dfcast.vffsty01 table.*/
   /* ------------------------------------------------------------*/
  ;
  FF3REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF3REC.XPCCD = FFWREC.XPCCD; /* category code*/
  FF3REC.YSMXDV = "10"; /* division group code*/
  FF3REC.XLCCD = "*"; /* life cycle code*/
  FF3REC.SY2SSCIN = "*"; /* safety stock indicator*/
  ;
  try
    call "IO3990" ("S3", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "661"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN TABLE DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08661

// Fetch  'N3' ffsty01 row
Function FG08662()
   /* ------------------------------------------------------------*/
   /* Fetch next row in vffsty01 cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("N3", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100)
      ;
      FG08W00.FG08W-FFSTY-CSR = "Y"; /* End of cursor*/
      return;
      ;
    end
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "662"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FG08W00.FG08WSWR = "Y"; /* Request for data switch*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08662

// Close  'C3' ffsty01 cursor
Function FG08663()
   /* ------------------------------------------------------------*/
   /* Close vffsty01 cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("C3", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG08W00.FG08W-FFSTY-CSR = "Y"; /* End of cursor*/
      return;
      ;
    end
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "663"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE TABLE DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08663

// Upd S.R. worksheets (sls chng)
Function FG08670()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG08-671(); /* format production JCL*/
    else
      FG08-672(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "670"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG08670

// Determine to use actl/frz futr
Function FG08S-061()
  FG08W00.FG08W-BEG = FFFREC.FFFBEGMO;
  FG08W00.FG08W-END = FFFREC.FFFENDMO;
  ;
  if (FFFREC.FFFENDMO < 199206) /* Whole range before 199206*/
    FG08S-0611(); /* use actual future*/
    FG08W00.FG08WUDQ = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +     FH3REC.FH2SHP + FH3REC.FH3CNCL;
    ;
  else
    if (FFFREC.FFFBEGMO >= 199206) /* Whole range beyond 199206*/
      FG08S-0611(); /* use frozen future*/
      FG08W00.FG08WUDQ = FH3REC.FH-FRZ-PRAL-QTY + FH3REC.FH-FRZ-ALOC-QTY +       FH3REC.FH-FRZ-SHP-QTY + FH3REC.FH-FRZ-CNCL-QTY;
    else
      FFFREC.FFFENDMO = 199205;
      FG08S-0611(); /* use actual future*/
      FG08W00.FG08WUDQ = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +       FH3REC.FH2SHP + FH3REC.FH3CNCL;
      ;
      FFFREC.FFFBEGMO = 199206;
      FFFREC.FFFENDMO = FG08W00.FG08W-END;
      FG08S-0611(); /* use frozen future*/
      ;
      FG08W00.FG08WUDQ = FG08W00.FG08WUDQ + FH3REC.FH-FRZ-PRAL-QTY +       FH3REC.FH-FRZ-ALOC-QTY + FH3REC.FH-FRZ-SHP-QTY +       FH3REC.FH-FRZ-CNCL-QTY;
    end
  end
  ;
end // end FG08S-061

// Get future demand
Function FG08S-0611()
  ;
  set FH3REC empty;
  ;
  FH3REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FH3REC.XDVCD = FFWREC.YSMXDV; /* division code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XCTCD = "USA"; /* country code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "FT"; /* sum code*/
  FH3REC.FH1PNAC = "*"; /* national account flag*/
  FH3REC.XDSCD = "*"; /* direct ship code*/
  TA1PGMNM = "FG08S06"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS50();
  ;
end // end FG08S-0611

// select dfcast.vrcat001 row
Function FG08S01()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFCREC empty;
  ;
  FFCREC.FFABEGMO = FFWREC.FFABEGMO;
  FFCREC.FFAENDMO = FFWREC.FFAENDMO;
  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/
  ;
  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08S01

// select 's1' dfcast.vmcat001
Function FG08S02()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFFFUNCD = "S1";
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO;
  FFFREC.FFFENDMO = FFWREC.FFAENDMO;
  ;
   /* ------------------------------------------------------------*/
   /* load ff7rec record*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty;
  ;
  FF7REC.YSMXDV = FFWREC.YSMXDV;
  FF7REC.XCTCD = "USA";
  FF7REC.YPGCD = FFWREC.YPGCD;
  FF7REC.XPCCD = FFWREC.XPCCD;
  ;
   /* ------------------------------------------------------------*/
   /* select set dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 DFCAST.VMCAT001 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08S02

// fetch 'n1' dfcast.vmcat001
Function FG08S03()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vmcat001 row*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "N1";
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VMCAT001 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08S03

// close 'c1' dfcast.vmcat001
Function FG08S04()
   /* ------------------------------------------------------------*/
   /* close dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFFUNCD = "C1";
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S04"; /* MODULE IDENTIFICATION*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08S04

// get actual sales/dmnd qtys
Function FG08S06()
  ;
   /* ------------------------------------------------------------*/
   /* obtain historical actual dmnd quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG08WIDX];
  FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG08WIDX];
  ;
  FG08S-061(); /* get future demand*/
  ;
  FG08W00.FG08WUSQ = FH3REC.FH2SHP; /* actual sales*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FG08W00.FG08W-BEG;
  FFFREC.FFFENDMO = FG08W00.FG08W-END;
  ;
  FH3REC.YSMXOT = "PR"; /* sum code*/
  XSFFS50();
  ;
  FG08W00.FG08WUDQ = FG08W00.FG08WUDQ + FH3REC.FH1PAQTY +                    FH3REC.FH1ALQTY + FH3REC.FH2SHP +                    FH3REC.FH3CNCL; /* Demand*/
  ;
  FG08W00.FG08WUSQ = FG08W00.FG08WUSQ + FH3REC.FH2SHP; /* Ship*/
  ;
end // end FG08S06

// select 's' dfcast.vmcat001 row
Function FG08S07()
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FG08WIDX]; /* fcst month*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product categroy code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* selection not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S07"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08S07

// verify modifiable fields
Function FG08S08()
   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/
  ;
  if (converseVar.eventKey not pf14
   && converseVar.eventKey not pf15
   && converseVar.eventKey not pf16
   && converseVar.eventKey not pf17)
    FG08W00.FG08WIDX = 1;
    while (FG08W00.FG08WIDX <= 12) /* for all month on screen*/
      if (FG08M001.FG08MFRC[FG08WIDX] != FG08W01.FG08WFRC[FG08WIDX])
        set FG08M001.FG08MFRC[FG08WIDX] cursor, bold;
        converseLib.validationFailed(111);
        FFWREC.XXXMODID = "S08";
      end
      FG08W00.FG08WIDX = FG08W00.FG08WIDX + 1; /* increment index*/
    end
  end
  ;
  if (converseVar.eventKey not enter)
    if (FG08M001.XPCCD != FFWREC.XPCCD)
      set FG08M001.XPCCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end
    ;
    if (FG08M001.YPGCD != FFWREC.YPGCD)
      set FG08M001.YPGCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end
    ;
    FG08W00.FG08WWED = FFWREC.FFAENDMO;
    if (FG08M001.FG08MERG != FG08W00.FG08WEYM)
      set FG08M001.FG08MERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end
    ;
    FG08W00.FG08WWBD = FFWREC.FFABEGMO;
    if (FG08M001.FG08MBRG != FG08W00.FG08WBYM)
      set FG08M001.FG08MBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end
  end
  ;
  ;
end // end FG08S08

// Verify the date range
Function FG08S09()
  ;
   /* ------------------------------------------------------------*/
   /* Buy month < begin month < season begin month + 36*/
   /* begin month <= end month < (begin month + 11) and*/
   /* season begin month + 36*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZBEGRC = "0"; /* Beginning date return code*/
  FFZREC.FFZENDRC = "0"; /* Ending date return code*/
  ;
  FFZREC.FFZNUMMO = 0; /* Number of months in range*/
  move 0 to FFZREC.FFZINDMO[1] for all; /* Individual month in range*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate error if the date is zero.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZBEGMO == 0 /* Beginning date missing*/
   || FFZREC.FFZENDMO == 0) /* or ending date missing*/
    ;
    if (FFZREC.FFZBEGMO == 0) /* Beginning date missing*/
      FFZREC.FFZBEGRC = "1"; /* Indicate no beginning date*/
    end
    ;
    if (FFZREC.FFZENDMO == 0) /* Ending date missing*/
      FFZREC.FFZENDRC = "1"; /* Indicate no ending date*/
    end
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Convert format of beginning month from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  set TA2REC empty; /* clear row storage area*/
  ;
  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "E"; /* type*/
  TA2REC.TA2GRGDD = 01; /* dd to be validated*/
  ;
  TA2REC.TA2GRGYM = FFZREC.FFZBYYMM; /* Beginning yymm to be validatd*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/
    ;
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
      ;
      FFZREC.FFZBEGMO = TA2REC.TA2GRCYM; /* Convert beginning month*/
    else
      FFZREC.FFZBEGRC = "2"; /* Indicate invalid date entered*/
      ;
    end
    ;
  else
    ;
    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    FFWREC.XXXMODID = "S09"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    exit stack; /* exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Convert format of ending month from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  TA2REC.TA2CENT = 0; /* Initialize century field*/
  TA2REC.TA2GRGYM = FFZREC.FFZEYYMM; /* Ending yymm to be validated*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/
    ;
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
      ;
      FFZREC.FFZENDMO = TA2REC.TA2GRCYM; /* Convert ending month*/
    else
      FFZREC.FFZENDRC = "2"; /* Indicate invalid date entered*/
      ;
    end
    ;
  else
    ;
    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    FFWREC.XXXMODID = "S09"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    exit stack; /* exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If an error was found, return to the calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZBEGRC == "2" /* Invalid beginning date*/
   || FFZREC.FFZENDRC == "2") /* or invalid ending date*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the qualified range which will be used to verify*/
   /* the dates passed over.*/
   /* ------------------------------------------------------------*/
  ;
  FG08S11(); /* obtain future cut off date*/
  ;
  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf17)
    FFZREC.FFZWBEG = FF1REC.FF1FUTDT / 100 + FFZREC.FFZMONTH;

    if (FFZREC.FFZWBMM > 12) /* month field over 12*/
      ;
      FFZREC.FFZWBMM = FFZREC.FFZWBMM - 12;
      FFZREC.FFZWBYY = FFZREC.FFZWBYY + 1;
      ;
    end
  else
     /* ------------------------*/
      /* get current date, allow current date as beg. range*/
     /* ------------------------*/
    ;
    XX0XS01();
    FG08W00.FG08WCUR = XX0XW01.XX0XWCYM; /* current date ccyymm*/
    ;
    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* past cutoff*/
      FFZREC.FFZWBEG = XX0XW01.XX0XWCYM; /* current date ccyymm*/
    else
      if (FG08W00.FG08WCUR-MM > 1)
        FG08W00.FG08WCUR-MM = FG08W00.FG08WCUR-MM - 1; /* minus 1*/
      else
        FG08W00.FG08WCUR-CY = FG08W00.FG08WCUR-CY - 1; /* minus 1*/
        FG08W00.FG08WCUR-MM = 12;
      end
      FFZREC.FFZWBEG = FG08W00.FG08WCUR; /* move current to beg*/
    end
    ;
  end
  ;
  FFZREC.FFZWEND = FFZREC.FFZBEGMO + 11; /* Beginning plus 11 months*/
  ;
  if (FFZREC.FFZWEMM > 12) /* month field over 12*/
    ;
    FFZREC.FFZWEMM = FFZREC.FFZWEMM - 12;
    FFZREC.FFZWEYY = FFZREC.FFZWEYY + 1;
    ;
  end
  ;
  FFZREC.FFZWRNG = FF2REC.FF2SEASN[1]; /* initialize range field*/
  FFZREC.FFZWRYY = FFZREC.FFZWRYY + 3; /* begin year plus 3 years*/
  if (FFZREC.FFZWRMM == 1)
    FFZREC.FFZWRYY = FFZREC.FFZWRYY - 1;
   /* BEGIN TCS*/
   /* MOVE 12 TO FFZREC.FFZWRYY;*/
    FFZREC.FFZWRMM = 12;
   /* END TCS*/
  else
    FFZREC.FFZWRMM = FFZREC.FFZWRMM - 1; /* begin month minus 1 month*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate error if the date is out of allowable bounds.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* no errors*/
    if (FFZREC.FFZBEGMO < FFZREC.FFZWBEG /* Less than valid starting mo.*/
     || FFZREC.FFZBEGMO > FFZREC.FFZWRNG) /* or Greater than valid rang*/
      ;
      FFZREC.FFZBEGRC = "3"; /* Indicate invalid date*/
      ;
    end
    ;
    if (FFZREC.FFZENDMO < FFZREC.FFZBEGMO /* less than beginning mo.*/
     || FFZREC.FFZENDMO > FFZREC.FFZWRNG) /* or greater than valid range*/
      ;
      FFZREC.FFZENDRC = "3"; /* Indicate invalid date*/
      ;
    end
    ;
  end
  ;
  if (FFZREC.FFZCHK12 == "N") /* Check 12 month limit*/
    ;
    return;
    ;
  else
    ;
    if (FFZREC.FFZENDMO > FFZREC.FFZWEND) /* Over 12 months*/
      FFZREC.FFZENDRC = "3"; /* Indicate invalid date*/
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the array with the individual months in the range.*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZWBEG = FFZREC.FFZBEGMO; /* Beginning month*/
  ;
  while (FFZREC.FFZWBEG <= FFZREC.FFZENDMO) /* Until end of range*/
    ;
    FFZREC.FFZNUMMO = FFZREC.FFZNUMMO + 1; /* Number of months*/
    ;
    FFZREC.FFZINDMO[FFZNUMMO] = FFZREC.FFZWBEG; /* Individual month*/
    ;
    FFZREC.FFZWBMM = FFZREC.FFZWBMM + 1; /* Increment month*/
    ;
    if (FFZREC.FFZWBMM > 12) /* Month greater than 12*/
      ;
      FFZREC.FFZWBMM = FFZREC.FFZWBMM - 12; /* Decrement month*/
      FFZREC.FFZWBYY = FFZREC.FFZWBYY + 1; /* Increment year*/
      ;
    end
    ;
  end
  ;
  ;
end // end FG08S09

// Obtain the season begin month
Function FG08S10()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YSMXDV = "10";
  FF2REC.YPGCD = FG08M001.YPGCD;
  FF2REC.XPCCD = FG08M001.XPCCD;
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S10"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG08S10

// Obtain fut cutoff/ivc cutoff
Function FG08S11()
   /* -------------------------------------------------------*/
   /* Obtain the future cut off date*/
   /* -------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
       /* Next sentence*/
      ;
    end
  else
    ;
    /* ------------------------------------------------------------*/
     /* indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    FFWREC.XXXMODID = "S09"; /* Module identification*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(1); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
    TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* exit to display map*/
    ;
  end
  ;
end // end FG08S11

// Update msgrp sales fcst
Function FG08S20()
  ;
  FG08S21(); /* select msgrp row*/
  ;
  if (VAGen_SQLCODE == 0)
    FG08S22(); /* update msgrp row*/
  end
  ;
end // end FG08S20

// Select 'S ' msgrp01 row
Function FG08S21()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmsgrp01 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF8REC empty;
  ;
  FF8REC.FF4FCTMO = FG08W01.FG08WHDC[FG08WIDX]; /* fcst month*/
  FF8REC.SYBSTGNB = FG08W00.SYBSTGNB; /* style group*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* type group*/
  FF8REC.YSMXDV = "10"; /* division group*/
  FF8REC.XCTCD = "USA"; /* country code*/
  ;
  try
    call "IO3730" ("S ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S21"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FG08W00.FG08WSWR = "Y"; /* Request for data switch*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VMSGRP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S21

// Update 'U ' msgrp01 row
Function FG08S22()
   /* ------------------------------------------------------------*/
   /* Update dfcast.vmsgrp01 table.*/
   /* ------------------------------------------------------------*/
  ;
  FF8REC.FF6SLFCT = FF8REC.FF6SLFCT + FG08W00.FG08W-STYGRP-VAR[FG08WIDX];
  ;
  FF8REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF8REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3730" ("U ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S22"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE DFCAST.VMSGRP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S22

// Process S/R worksheet
Function FG08S30()
  ;
   /* --------------------------------------------------------*/
    /* Read in all the item worksheet in the range and update*/
    /* the fill rate.*/
   /* --------------------------------------------------------*/
  ;
  FG08W00.FG08W-SWHDR-CSR = "N";
  FG08S31(); /* Select 'S2' swhdr01 cursor*/
  FG08S32(); /* Fetch  'N2' swhdr01 cursor*/
  ;
  while (FG08W00.FG08W-SWHDR-CSR == "N")
    FG08S33(); /* Select switm record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
      FG08W00.FG08WDMD = FFRREC.FFRCDMFC; /* curr dmd fcst*/
      FG08S34(); /* Update switm row*/
    end
    FG08S32(); /* Fetch  'N2' swhdr01 cursor*/
  end
  ;
  FG08S35(); /* Close 'C2' swhdr01 cursor*/
end // end FG08S30

// Open   'S2' swhdr01 cursor
Function FG08S31()
   /* ------------------------------------------------------------*/
   /* Open and select dfcast.vswhdr01 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFQREC empty;
  ;
  FFQREC.SY1STNBR = FF3REC.SY1STNBR; /* style nbr*/
  FFQREC.SY2CLRID = FF3REC.SY2CLRID; /* color id*/
  FFQREC.XDMCD = FF3REC.XDMCD; /* dim code*/
  FFQREC.XWSCD = "01"; /* worksheet type code*/
  FFQREC.SY2SSCIN = "*"; /* sfty stk ind*/
  FFQREC.FFABEGMO = -1; /* fcst begin month*/
  FFQREC.FFQMBYMO = -1; /* main buy month*/
  FFQREC.FFQABYMO = -1; /* actual buy month*/
  FFQREC.ZZZCHGDT = -1; /* change date*/
  FFQREC.ZZZCHGTM = -1; /* change time*/
  ;
  try
    call "IO3810" ("S2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S31"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN TABLE DFCAST.VSWHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S31

// Fetch  'N2' swhdr01 row
Function FG08S32()
   /* ------------------------------------------------------------*/
   /* Fetch dfcast.vswhdr01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3810" ("N2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
    if (SQLCA.VAGen_SQLCODE == +100) /* record not found*/
      ;
      FG08W00.FG08W-SWHDR-CSR = "Y"; /* end of cursor*/
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S32"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE DFCAST.VSWHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S32

// Select 'S ' switm01 row
Function FG08S33()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vswitm01 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFRREC empty;
  ;
  FFRREC.FFEWSNBR = FFQREC.FFEWSNBR; /* worksheet number*/
  FFRREC.FF4FCTMO = FG08W01.FG08WHDC[FG08WIDX]; /* fcst month*/
  ;
  try
    call "IO3820" ("S ", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S33"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FG08W00.FG08WSWR = "Y"; /* Request for data switch*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VSWITM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S33

// Update 'U ' switm01 row
Function FG08S34()
   /* ------------------------------------------------------------*/
   /* Update dfcast.vswitm01 table.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15)
    FFRREC.FF7FLLRT = FG08W01.FG08WFRC[FG08WIDX]; /* fill rate*/
  else /* pf16 adjust fill rate instead of replace*/
    FFRREC.FF7FLLRT = FFRREC.FF7FLLRT + FG08W01.FG08WDIF[FG08WIDX];
    FG08W00.FG08WFLL = FFRREC.FF7FLLRT; /* hold new fill*/
  end
  ;
  FFRREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFRREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3820" ("U ", SQLCA, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S34"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE DFCAST.VSWITM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFRREC.FFRKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S34

// Close  'C2' switm01 row
Function FG08S35()
   /* ------------------------------------------------------------*/
   /* Fetch dfcast.vswhdr01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3810" ("C2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S35"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE TABLE DFCAST.VSWHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S35

// Process msty record
Function FG08S40()
  if (FG08W01.FG08WHDC[FG08WIDX] == FG08W00.FG08WCUR) /* date = current*/
    FG08W00.FG08WDAT = FG08W00.FG08WCUR;
    if (FG08W00.FG08WDMM > 1)
      FG08W00.FG08WDMM = FG08W00.FG08WDMM - 1;
    else
      FG08W00.FG08WDCY = FG08W00.FG08WDCY - 1;
      FG08W00.FG08WDMM = 12;
    end
    set FF9REC empty;
    FF9REC.FF4FCTMO = FG08W00.FG08WDAT; /* carryover month*/
    FG08S41(); /* Select msty record - get carryover*/
    FG08W00.FG08WCOV = FF9REC.FF6SLFCT; /* carryover*/
  else
    FG08W00.FG08WCOV = 0; /* carryover*/
  end
  ;
  set FF9REC empty;
  FF9REC.FF4FCTMO = FG08W01.FG08WHDC[FG08WIDX]; /* fcst month*/
  FG08S41(); /* Select msty record*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
    ;
    FG08W00.FG08WSLS = FF9REC.FF6SLFCT; /* old sales fcst*/
    FF9REC.FF6SLFCT = FF9REC.FF6SLFCT - FG08W00.FG08WCOV; /* sub carryover*/
    ;
    if (converseVar.eventKey is pf15)
      FF9REC.FF6SLFCT = FG08W00.FG08WDMD *        FG08W01.FG08WFRC[FG08WIDX] / 100        + FG08W00.FG08WCOV; /* add carryover back*/
    else /* pf16 use adjusted fill rate*/
      FF9REC.FF6SLFCT = FG08W00.FG08WDMD *        FG08W00.FG08WFLL / 100        + FG08W00.FG08WCOV; /* add carryover back*/
    end
    ;
    FG08W00.FG08W-STYGRP-VAR[FG08WIDX] = FG08W00.FG08W-STYGRP-VAR[FG08WIDX] +     FF9REC.FF6SLFCT - FG08W00.FG08WSLS; /* variance*/
    FG08W00.FG08W-CAT-VAR[FG08WIDX] = FG08W00.FG08W-CAT-VAR[FG08WIDX] +     FF9REC.FF6SLFCT - FG08W00.FG08WSLS; /* variance*/
    ;
    FG08S42(); /* Update msty record*/
  end
end // end FG08S40

// Select 'S ' msty001 row
Function FG08S41()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmsty001 table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FF9REC.SY1STNBR = FF3REC.SY1STNBR; /* style number*/
  FF9REC.SY2CLRID = FF3REC.SY2CLRID; /* color id*/
  FF9REC.XDMCD = FF3REC.XDMCD; /* dimension code*/
  FF9REC.XCTCD = "USA "; /* country code*/
  FF9REC.YSMXDV = "10"; /* division group code*/
  ;
  try
    call "IO3740" ("S ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S41"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FG08W00.FG08WSWR = "Y"; /* Request for data switch*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VMSTY001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S41

// Update 'U ' msty001 row
Function FG08S42()
   /* ------------------------------------------------------------*/
   /* Update dfcast.vmsty001 table.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15) /* use cat default*/
    FF9REC.FF7FLLRT = FG08W01.FG08WFRC[FG08WIDX]; /* fill rate*/
  else /* pf16 use adjusted fill rate from WS*/
    FF9REC.FF7FLLRT = FG08W00.FG08WFLL; /* fill rate*/
  end
  ;
  FF9REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF9REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3740" ("U ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S42"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE DFCAST.VMSTY001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S42

// Update mcat sales fcst
Function FG08S50()
  ;
  FG08S51(); /* select mcat row*/
  ;
  if (VAGen_SQLCODE == 0)
    FG08S52(); /* update mcat row*/
  end
  ;
end // end FG08S50

// Select 'S ' mcat001 row
Function FG08S51()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty;
  ;
  FF7REC.FF4FCTMO = FG08W01.FG08WHDC[FG08WIDX]; /* fcst month*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* category*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* type group*/
  FF7REC.YSMXDV = "10"; /* division group*/
  FF7REC.XCTCD = "USA"; /* country code*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S51"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FG08W00.FG08WSWR = "Y"; /* Request for data switch*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S51

// Update 'U ' mcat001 row
Function FG08S52()
   /* ------------------------------------------------------------*/
   /* Update dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  FF7REC.FF6SLFCT = FF7REC.FF6SLFCT + FG08W00.FG08W-CAT-VAR[FG08WIDX];
  ;
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S52"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S52

// Update mltyp sales fcst
Function FG08S60()
  ;
  FG08S61(); /* select mltyp row*/
  ;
  if (VAGen_SQLCODE == 0)
    FG08S62(); /* update mltyp row*/
  end
  ;
end // end FG08S60

// Select 'S ' mltyp01 row
Function FG08S61()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmltyp01 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF6REC empty;
  ;
  FF6REC.FF4FCTMO = FG08W01.FG08WHDC[FG08WIDX]; /* fcst month*/
  FF6REC.XPLCD = FF2REC.XPLCD; /* line*/
  FF6REC.YPGCD = FFWREC.YPGCD; /* type group*/
  ;
  try
    call "IO3750" ("S ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S61"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FG08W00.FG08WSWR = "Y"; /* Request for data switch*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S61

// Update 'U ' mltyp01 row
Function FG08S62()
   /* ------------------------------------------------------------*/
   /* Update dfcast.vmltyp01 table.*/
   /* ------------------------------------------------------------*/
  ;
  FF6REC.FF6SLFCT = FF6REC.FF6SLFCT + FG08W00.FG08W-CAT-VAR[FG08WIDX];
  ;
  FF6REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF6REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3750" ("U ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S62"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG08S62

//*** RECORD=FG08W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG08W00 type basicRecord
  10 FG08WSWR FG08WSWR ; 
  10 FG08WSWF FG08WSWF ; 
  10 FG08WUPD FG08WUPD ; 
  10 FG08W-FFSTY-CSR FG08W-FFSTY-CSR ; 
  10 FG08W-SWHDR-CSR FG08W-SWHDR-CSR ; 
  10 FG08WNMO FG08WNMO ; 
  10 FG08WNM1 FG08WNM1 ; 
  10 FG08WNM2 FG08WNM2 ; 
  10 FG08WUFR FG08WUFR ; 
  10 FG08WFLL FG08WFLL ; 
  10 FG08WUSQ FG08WUSQ ; 
  10 FG08WUDQ FG08WUDQ ; 
  10 FG08WIDX FG08WIDX ; 
  10 FG08WCWD FG08WCWD ; 
    15 FG08WCYM FG08WCYM ; 
      20 FG08WCCC FG08WCCC ; 
      20 FG08WCYY FG08WCYY ; 
      20 FG08WCMM FG08WCMM ; 
    15 FG08WCDD FG08WCDD ; 
  10 FG08WICD FG08WICD ; 
    15 FG08WIYM FG08WIYM ; 
      20 FG08WICC FG08WICC ; 
      20 FG08WIYY FG08WIYY ; 
      20 FG08WIMM FG08WIMM ; 
    15 FG08WIDD FG08WIDD ; 
  10 FG08WWDT FG08WWDT ; 
    15 * num(3) ; 
    15 FG08WWCC FG08WWCC ; 
    15 FG08WWYM FG08WWYM ; 
      20 FG08WWYY FG08WWYY ; 
      20 FG08WWMM FG08WWMM ; 
  10 FG08WWBD FG08WWBD ; 
    15 * num(3) ; 
    15 FG08WBCC FG08WBCC ; 
    15 FG08WBYM FG08WBYM ; 
      20 FG08WBYY FG08WBYY ; 
      20 FG08WBMM FG08WBMM ; 
  10 FG08WWED FG08WWED ; 
    15 * num(3) ; 
    15 FG08WECC FG08WECC ; 
    15 FG08WEYM FG08WEYM ; 
      20 FG08WEYY FG08WEYY ; 
      20 FG08WEMM FG08WEMM ; 
  10 FG08WCUR FG08WCUR ; 
    15 FG08WCUR-CY FG08WCUR-CY ; 
    15 FG08WCUR-MM FG08WCUR-MM ; 
  10 FG08WDAT num(6) ; // current - 1 date
    15 FG08WDCY FG08WDCY ; 
    15 FG08WDMM FG08WDMM ; 
  10 FG08WCOV FG08WCOV ; 
  10 FG08WCRD FG08WCRD ; 
  10 FG08WCD1 FG08WCD1 ; 
  10 FG08WCD5 FG08WCD5 ; 
  10 FG08WSLS FG08WSLS ; 
  10 FG08WDMD FG08WDMD ; 
  10 FG08W-STYGRP-VAR FG08W-STYGRP-VAR [12] ; 
  10 FG08W-CAT-VAR FG08W-CAT-VAR [12] ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 FG08W-NUM-MO FG08W-NUM-MO ; 
  10 FG08W-BEG FG08W-BEG ; 
  10 FG08W-END FG08W-END ; 
  10 FG08W-SLS FG08W-SLS ; 
  10 FG08W-DMD FG08W-DMD ; 
end // end FG08W00

//*** RECORD=FG08W01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG08W01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG08WFLR FG08WFLR [4] ; 
  10 FG08WHBD FG08WHBD [4] ; 
    15 * num(5) ; 
    15 FG08WHBY FG08WHBY ; 
  10 FG08WHED FG08WHED [4] ; 
    15 * num(5) ; 
    15 FG08WHEY FG08WHEY ; 
  10 FG08WPBD FG08WPBD [3] ; 
    15 * num(5) ; 
    15 FG08WPBY FG08WPBY ; 
  10 FG08WPED FG08WPED [3] ; 
    15 * num(5) ; 
    15 FG08WPEY FG08WPEY ; 
  10 FG08WHDC FG08WHDC [12] ; 
    15 * num(5) ; 
    15 FG08WDHC FG08WDHC ; 
  10 FG08WFRC FG08WFRC [12] ; 
  10 FG08WDIF FG08WDIF [12] ; 
  10 FG08WAVG FG08WAVG ; 
  10 FG08WHD1 FG08WHD1 [12] ; 
    15 * num(5) ; 
    15 FG08WDH1 FG08WDH1 ; 
  10 FG08WFR1 FG08WFR1 [13] ; 
  10 FG08WHD2 FG08WHD2 [12] ; 
    15 * num(5) ; 
    15 FG08WDH2 FG08WDH2 ; 
  10 FG08WFR2 FG08WFR2 [13] ; 
  10 FG08WHD3 FG08WHD3 [12] ; 
    15 * num(5) ; 
    15 FG08WDH3 FG08WDH3 ; 
  10 FG08WFR3 FG08WFR3 [13] ; 
end // end FG08W01

//*** RECORD=FG08W02 ****
// -----------------------------
// Batch JCL FF2991 parameters.
// -----------------------------
// ***********************
Record FG08W02 type basicRecord
  10 TARJCL TARJCL ; 
    15 FG08WPBM FG08WPBM ; 
    15 FG08WPEM FG08WPEM ; 
    15 FG08WPTG FG08WPTG ; 
    15 FG08WPCT FG08WPCT ; 
    15 FG08WPDT FG08WPDT ; 
    15 FG08WPTM FG08WPTM ; 
    15 * char(45) ; 
end // end FG08W02

//*** RECORD=FG08W03 ****
// -----------------------------
// Batch JCL FF2991 parameters.
// -----------------------------
// ***********************
Record FG08W03 type basicRecord
  10 TARJCL TARJCL ; 
    15 XPCCD XPCCD ; 
    15 YPGCD YPGCD ; 
    15 * char(76) ; 
end // end FG08W03

// work begin date
DataItem FG08W-BEG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// category variance
DataItem FG08W-CAT-VAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// accumulated demand qty
DataItem FG08W-DMD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work end date
DataItem FG08W-END num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// End of vffsty cursor switch
DataItem FG08W-FFSTY-CSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of months in the range
DataItem FG08W-NUM-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// accumulated sales/ship qty
DataItem FG08W-SLS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style group variance
DataItem FG08W-STYGRP-VAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of vswhdr cursor switch
DataItem FG08W-SWHDR-CSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG08WAVG bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin century
DataItem FG08WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG08WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG08WBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG08WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FG08WCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date -1 month
DataItem FG08WCD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date +5 month
DataItem FG08WCD5 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work day
DataItem FG08WCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FG08WCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// carryover amount
DataItem FG08WCOV int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date
DataItem FG08WCRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current ccyymm
DataItem FG08WCUR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date ccyy
DataItem FG08WCUR-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date mm
DataItem FG08WCUR-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work ccyymmdd
DataItem FG08WCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FG08WCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FG08WCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current - 1 date ccyy
DataItem FG08WDCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG08WDH1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG08WDH2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG08WDH3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG08WDHC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fill rate adjustments
DataItem FG08WDIF bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Demand fcst work area
DataItem FG08WDMD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current - 1 date mm
DataItem FG08WDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end century
DataItem FG08WECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG08WEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG08WEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG08WEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new adjusted fill rate
DataItem FG08WFLL bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fill rate
DataItem FG08WFLR num(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical fill rates 1 yr
DataItem FG08WFR1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical fill rates 2 yrs
DataItem FG08WFR2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical fill rates 3 yrs
DataItem FG08WFR3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current fill rates
DataItem FG08WFRC bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// heading begin dates
DataItem FG08WHBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG08WHBY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 1 yrs
DataItem FG08WHD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 2 yrs
DataItem FG08WHD2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 3 yrs
DataItem FG08WHD3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current mthly headings
DataItem FG08WHDC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// heading end dates
DataItem FG08WHED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG08WHEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work century
DataItem FG08WICC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice compare date
DataItem FG08WICD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// invoice work day
DataItem FG08WIDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FG08WIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work month
DataItem FG08WIMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice ccyymm
DataItem FG08WIYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work year
DataItem FG08WIYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG08WNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG08WNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of months loaded
DataItem FG08WNMO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history begin dates
DataItem FG08WPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Parm range beg month
DataItem FG08WPBM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG08WPBY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Parm category code
DataItem FG08WPCT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm updt date
DataItem FG08WPDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history end dates
DataItem FG08WPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Parm range end month
DataItem FG08WPEM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG08WPEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Parm type group code
DataItem FG08WPTG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm updt hhmm
DataItem FG08WPTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sales fcst work area
DataItem FG08WSLS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FG08WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG08WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history dmnd  units
DataItem FG08WUDQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future ratio
DataItem FG08WUFR bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fill rates updated switch
DataItem FG08WUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sale  units
DataItem FG08WUSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG08WWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG08WWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG08WWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG08WWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG08WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG08WWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG08WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

